
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e360  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2380  000c2380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c23a4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003d96c  000c23a8  0002d96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c84  2003db70  2003db70  0003db70  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c25a8  000c25a8  000325a8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c25d4  000c25d4  000325d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029a8ba  00000000  00000000  000325d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002d279  00000000  00000000  002cce92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006d368  00000000  00000000  002fa10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004fe0  00000000  00000000  00367473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000123a0  00000000  00000000  0036c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000603df  00000000  00000000  0037e7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000975db  00000000  00000000  003debd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f09d  00000000  00000000  004761ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000efb0  00000000  00000000  005e524c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c f85f 	bl	c00f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c f881 	bl	c0144 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d96c 	.word	0x2003d96c
   b404c:	000c23a8 	.word	0x000c23a8
   b4050:	2003db6c 	.word	0x2003db6c
   b4054:	2003db70 	.word	0x2003db70
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00b f9a1 	bl	bf3a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c2338 	.word	0x000c2338
   b4080:	000c237c 	.word	0x000c237c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b870 	b.w	b5168 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f96f 	bl	b536c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00b b941 	b.w	bf318 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 b8f3 	b.w	bc280 <malloc>

000b409a <_Znaj>:
   b409a:	f008 b8f1 	b.w	bc280 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 b8f7 	b.w	bc290 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f007 ff74 	bl	bbf98 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bbb39 	.word	0x000bbb39
   b40b8:	000c0718 	.word	0x000c0718

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj512ELj25EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj512ELj25EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f003 fd06 	bl	b7af4 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c0c1c 	.word	0x000c0c1c

000b40f0 <_ZN16JsonParserStaticILj512ELj25EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj512ELj25EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4106:	b40e      	push	{r1, r2, r3}
   b4108:	b500      	push	{lr}
   b410a:	b08c      	sub	sp, #48	; 0x30
   b410c:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b410e:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4112:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4116:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4118:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b411c:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b411e:	6801      	ldr	r1, [r0, #0]
   b4120:	aa04      	add	r2, sp, #16
   b4122:	201e      	movs	r0, #30
    attr.flags = 0;
   b4124:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4128:	f007 ff46 	bl	bbfb8 <log_message_v>
}
   b412c:	b00c      	add	sp, #48	; 0x30
   b412e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4132:	b003      	add	sp, #12
   b4134:	4770      	bx	lr
	...

000b4138 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4138:	b510      	push	{r4, lr}
    if (!_instance) {
   b413a:	4c06      	ldr	r4, [pc, #24]	; (b4154 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b413c:	6823      	ldr	r3, [r4, #0]
   b413e:	b933      	cbnz	r3, b414e <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4140:	2004      	movs	r0, #4
   b4142:	f7ff ffa8 	bl	b4096 <_Znwj>
   b4146:	b108      	cbz	r0, b414c <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4148:	4b03      	ldr	r3, [pc, #12]	; (b4158 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b414a:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b414c:	6020      	str	r0, [r4, #0]
}
   b414e:	6820      	ldr	r0, [r4, #0]
   b4150:	bd10      	pop	{r4, pc}
   b4152:	bf00      	nop
   b4154:	2003db74 	.word	0x2003db74
   b4158:	000c0c2c 	.word	0x000c0c2c

000b415c <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b415c:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b415e:	4831      	ldr	r0, [pc, #196]	; (b4224 <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4160:	b087      	sub	sp, #28
   b4162:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4164:	f006 fa97 	bl	ba696 <_ZN8RHRouter4initEv>
   b4168:	4604      	mov	r4, r0
   b416a:	b930      	cbnz	r0, b417a <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b416c:	492e      	ldr	r1, [pc, #184]	; (b4228 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b416e:	482f      	ldr	r0, [pc, #188]	; (b422c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4170:	f7ff ffc9 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>

	// #ifndef TESTING
	jp.addString(nodeID.get_nodeIDJson());		// Read in the JSON string from memory
	jp.parse();
	// #endif
}
   b4174:	4620      	mov	r0, r4
   b4176:	b007      	add	sp, #28
   b4178:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b417a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b4230 <_ZN14LoRA_Functions5setupEb+0xd4>
   b417e:	482d      	ldr	r0, [pc, #180]	; (b4234 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4180:	f006 fd82 	bl	bac88 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4184:	482b      	ldr	r0, [pc, #172]	; (b4234 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4186:	2200      	movs	r2, #0
   b4188:	2117      	movs	r1, #23
   b418a:	f006 fef7 	bl	baf7c <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b418e:	b18d      	cbz	r5, b41b4 <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4190:	f001 fc58 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4194:	2100      	movs	r1, #0
   b4196:	f001 fddf 	bl	b5d58 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b419a:	a802      	add	r0, sp, #8
   b419c:	f007 ffd0 	bl	bc140 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b41a0:	9a02      	ldr	r2, [sp, #8]
   b41a2:	4925      	ldr	r1, [pc, #148]	; (b4238 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b41a4:	4821      	ldr	r0, [pc, #132]	; (b422c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b41a6:	f7ff ffae 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b41aa:	a802      	add	r0, sp, #8
   b41ac:	f00a fbd2 	bl	be954 <_ZN6StringD1Ev>
   b41b0:	462c      	mov	r4, r5
   b41b2:	e7df      	b.n	b4174 <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b41b4:	f001 fc46 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b41b8:	f001 fd6a 	bl	b5c90 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41bc:	b1f0      	cbz	r0, b41fc <_ZN14LoRA_Functions5setupEb+0xa0>
   b41be:	f001 fc41 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b41c2:	f001 fd65 	bl	b5c90 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41c6:	280a      	cmp	r0, #10
   b41c8:	d818      	bhi.n	b41fc <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b41ca:	f001 fc3b 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b41ce:	f001 fd5f 	bl	b5c90 <_ZNK13sysStatusData14get_nodeNumberEv>
   b41d2:	4601      	mov	r1, r0
   b41d4:	4819      	ldr	r0, [pc, #100]	; (b423c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41d6:	f005 fd8a 	bl	b9cee <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41da:	4818      	ldr	r0, [pc, #96]	; (b423c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b41dc:	f005 fd6d 	bl	b9cba <_ZN10RHDatagram11thisAddressEv>
   b41e0:	9001      	str	r0, [sp, #4]
   b41e2:	a802      	add	r0, sp, #8
   b41e4:	f007 ffac 	bl	bc140 <spark_deviceID>
   b41e8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b41ec:	4914      	ldr	r1, [pc, #80]	; (b4240 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b41ee:	480f      	ldr	r0, [pc, #60]	; (b422c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b41f0:	f7ff ff89 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b41f4:	a802      	add	r0, sp, #8
   b41f6:	f00a fbad 	bl	be954 <_ZN6StringD1Ev>
   b41fa:	e7bb      	b.n	b4174 <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b41fc:	f001 fc22 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4200:	210b      	movs	r1, #11
   b4202:	f001 fda9 	bl	b5d58 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4206:	210b      	movs	r1, #11
   b4208:	480c      	ldr	r0, [pc, #48]	; (b423c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b420a:	f005 fd70 	bl	b9cee <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b420e:	480b      	ldr	r0, [pc, #44]	; (b423c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4210:	f005 fd53 	bl	b9cba <_ZN10RHDatagram11thisAddressEv>
   b4214:	9001      	str	r0, [sp, #4]
   b4216:	a802      	add	r0, sp, #8
   b4218:	f007 ff92 	bl	bc140 <spark_deviceID>
   b421c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4220:	4908      	ldr	r1, [pc, #32]	; (b4244 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4222:	e7e4      	b.n	b41ee <_ZN14LoRA_Functions5setupEb+0x92>
   b4224:	2003e0e8 	.word	0x2003e0e8
   b4228:	000c072d 	.word	0x000c072d
   b422c:	2003e658 	.word	0x2003e658
   b4230:	4464c000 	.word	0x4464c000
   b4234:	2003dbfc 	.word	0x2003dbfc
   b4238:	000c0739 	.word	0x000c0739
   b423c:	2003e0ec 	.word	0x2003e0ec
   b4240:	000c0773 	.word	0x000c0773
   b4244:	000c07aa 	.word	0x000c07aa

000b4248 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4248:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b424a:	4c06      	ldr	r4, [pc, #24]	; (b4264 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b424c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b424e:	f10d 0203 	add.w	r2, sp, #3
   b4252:	a901      	add	r1, sp, #4
   b4254:	4620      	mov	r0, r4
   b4256:	f006 fc93 	bl	bab80 <_ZN7RH_RF954recvEPhS0_>
   b425a:	2800      	cmp	r0, #0
   b425c:	d1f7      	bne.n	b424e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b425e:	b040      	add	sp, #256	; 0x100
   b4260:	bd10      	pop	{r4, pc}
   b4262:	bf00      	nop
   b4264:	2003dbfc 	.word	0x2003dbfc

000b4268 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4268:	4801      	ldr	r0, [pc, #4]	; (b4270 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b426a:	f006 bc76 	b.w	bab5a <_ZN7RH_RF955sleepEv>
   b426e:	bf00      	nop
   b4270:	2003dbfc 	.word	0x2003dbfc

000b4274 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b4274:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b4276:	4c2a      	ldr	r4, [pc, #168]	; (b4320 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b4278:	f001 fc34 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b427c:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b4280:	ba49      	rev16	r1, r1
   b4282:	b289      	uxth	r1, r1
   b4284:	f001 fe1c 	bl	b5ec0 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b4288:	f001 fc2c 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b428c:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4290:	ba49      	rev16	r1, r1
   b4292:	b289      	uxth	r1, r1
   b4294:	f001 fe1a 	bl	b5ecc <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b4298:	f001 fc24 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b429c:	79e1      	ldrb	r1, [r4, #7]
   b429e:	f001 fda3 	bl	b5de8 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b42a2:	f001 fc1f 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42a6:	7a21      	ldrb	r1, [r4, #8]
   b42a8:	f001 fd80 	bl	b5dac <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b42ac:	f001 fc1a 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42b0:	4605      	mov	r5, r0
   b42b2:	7a60      	ldrb	r0, [r4, #9]
   b42b4:	f00b fb5a 	bl	bf96c <__aeabi_ui2d>
   b42b8:	ec41 0b10 	vmov	d0, r0, r1
   b42bc:	4628      	mov	r0, r5
   b42be:	f001 fc4b 	bl	b5b58 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b42c2:	f001 fc0f 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42c6:	7aa1      	ldrb	r1, [r4, #10]
   b42c8:	f001 fd76 	bl	b5db8 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b42cc:	f001 fc0a 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42d0:	7ae1      	ldrb	r1, [r4, #11]
   b42d2:	f001 fd77 	bl	b5dc4 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[12]);
   b42d6:	f001 fc05 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42da:	7b21      	ldrb	r1, [r4, #12]
   b42dc:	f001 fd78 	bl	b5dd0 <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b42e0:	f001 fc00 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42e4:	4604      	mov	r4, r0
   b42e6:	480f      	ldr	r0, [pc, #60]	; (b4324 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b42e8:	f005 fd7f 	bl	b9dea <_ZN15RHGenericDriver8lastRssiEv>
   b42ec:	b281      	uxth	r1, r0
   b42ee:	4620      	mov	r0, r4
   b42f0:	f001 fde0 	bl	b5eb4 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b42f4:	f001 fbf6 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b42f8:	f001 fd01 	bl	b5cfe <_ZNK17currentStatusData17get_messageNumberEv>
   b42fc:	9001      	str	r0, [sp, #4]
   b42fe:	f001 fbf1 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4302:	f001 fce3 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4306:	9a01      	ldr	r2, [sp, #4]
   b4308:	4907      	ldr	r1, [pc, #28]	; (b4328 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb4>)
   b430a:	4603      	mov	r3, r0
   b430c:	4807      	ldr	r0, [pc, #28]	; (b432c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb8>)
   b430e:	f7ff fefa 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b4312:	4b07      	ldr	r3, [pc, #28]	; (b4330 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xbc>)
   b4314:	2204      	movs	r2, #4

	return true;
}
   b4316:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b4318:	701a      	strb	r2, [r3, #0]
}
   b431a:	b003      	add	sp, #12
   b431c:	bd30      	pop	{r4, r5, pc}
   b431e:	bf00      	nop
   b4320:	2003db80 	.word	0x2003db80
   b4324:	2003dbfc 	.word	0x2003dbfc
   b4328:	000c07f1 	.word	0x000c07f1
   b432c:	2003e658 	.word	0x2003e658
   b4330:	2003db70 	.word	0x2003db70

000b4334 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b4334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b4338:	4e53      	ldr	r6, [pc, #332]	; (b4488 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x154>)
     
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b433a:	4c54      	ldr	r4, [pc, #336]	; (b448c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x158>)
	attempts++;
   b433c:	6833      	ldr	r3, [r6, #0]

	#endif

	buf[10] = current.get_messageNumber();			 // Message number
	
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b433e:	4f54      	ldr	r7, [pc, #336]	; (b4490 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x15c>)
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b4340:	b088      	sub	sp, #32
	attempts++;
   b4342:	3301      	adds	r3, #1
   b4344:	6033      	str	r3, [r6, #0]
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4346:	f00a feb8 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b434a:	1600      	asrs	r0, r0, #24
   b434c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b434e:	f00a feb4 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4352:	1400      	asrs	r0, r0, #16
   b4354:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4356:	f00a feb0 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b435a:	1200      	asrs	r0, r0, #8
   b435c:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b435e:	f00a feac 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4362:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4364:	f001 fb6e 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4368:	f001 fd5b 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b436c:	0a00      	lsrs	r0, r0, #8
   b436e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4370:	f001 fb68 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4374:	f001 fd55 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4378:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_openHours();
   b437a:	f001 fbb3 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b437e:	f001 fe3b 	bl	b5ff8 <_ZNK17currentStatusData13get_openHoursEv>
	buf[9] = 0;										// Default is that there is no alert code
   b4382:	2500      	movs	r5, #0
	buf[8] = current.get_openHours();
   b4384:	7220      	strb	r0, [r4, #8]
	buf[9] = 0;										// Default is that there is no alert code
   b4386:	7265      	strb	r5, [r4, #9]
	buf[10] = current.get_messageNumber();			 // Message number
   b4388:	f001 fbac 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b438c:	f001 fcb7 	bl	b5cfe <_ZNK17currentStatusData17get_messageNumberEv>
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4390:	7a62      	ldrb	r2, [r4, #9]
   b4392:	4b40      	ldr	r3, [pc, #256]	; (b4494 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x160>)
	buf[10] = current.get_messageNumber();			 // Message number
   b4394:	72a0      	strb	r0, [r4, #10]
	Log.info("Acknowlegment to %snode %d message %d, time = %s and frequency %d minutes", (buf[9] > 0) ? "misconfigured ":"", current.get_nodeNumber(), buf[10], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b4396:	42aa      	cmp	r2, r5
   b4398:	bf08      	it	eq
   b439a:	461f      	moveq	r7, r3
   b439c:	f001 fba2 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b43a0:	f001 fc94 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b43a4:	f894 900a 	ldrb.w	r9, [r4, #10]
   b43a8:	4680      	mov	r8, r0
   b43aa:	f00a fe86 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b43ae:	4602      	mov	r2, r0
   b43b0:	17c3      	asrs	r3, r0, #31
   b43b2:	a804      	add	r0, sp, #16
   b43b4:	f00a fd7c 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b43b8:	f8dd a010 	ldr.w	sl, [sp, #16]
   b43bc:	f001 fb42 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b43c0:	f001 fd2f 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43c4:	463a      	mov	r2, r7
   b43c6:	4934      	ldr	r1, [pc, #208]	; (b4498 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x164>)
   b43c8:	f8cd 9000 	str.w	r9, [sp]
   b43cc:	4643      	mov	r3, r8
   b43ce:	e9cd a001 	strd	sl, r0, [sp, #4]
   b43d2:	4832      	ldr	r0, [pc, #200]	; (b449c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x168>)
   b43d4:	f7ff fe97 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b43d8:	a804      	add	r0, sp, #16
   b43da:	f00a fabb 	bl	be954 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b43de:	4b30      	ldr	r3, [pc, #192]	; (b44a0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x16c>)
   b43e0:	881f      	ldrh	r7, [r3, #0]
   b43e2:	2101      	movs	r1, #1
   b43e4:	4638      	mov	r0, r7
   b43e6:	f00b f878 	bl	bf4da <digitalWrite>

	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b43ea:	f001 fb7b 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b43ee:	f001 fc6d 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b43f2:	2204      	movs	r2, #4
   b43f4:	4603      	mov	r3, r0
   b43f6:	9200      	str	r2, [sp, #0]
   b43f8:	4621      	mov	r1, r4
   b43fa:	482a      	ldr	r0, [pc, #168]	; (b44a4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x170>)
   b43fc:	220b      	movs	r2, #11
   b43fe:	f005 ff0f 	bl	ba220 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4402:	4b29      	ldr	r3, [pc, #164]	; (b44a8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x174>)
   b4404:	4604      	mov	r4, r0
		success++;
   b4406:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 11, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4408:	bb04      	cbnz	r4, b444c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x118>
		success++;
   b440a:	3001      	adds	r0, #1
   b440c:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b440e:	f00b fabd 	bl	bf98c <__aeabi_i2d>
   b4412:	4680      	mov	r8, r0
   b4414:	6830      	ldr	r0, [r6, #0]
   b4416:	4689      	mov	r9, r1
   b4418:	f00b fab8 	bl	bf98c <__aeabi_i2d>
   b441c:	4602      	mov	r2, r0
   b441e:	460b      	mov	r3, r1
   b4420:	4640      	mov	r0, r8
   b4422:	4649      	mov	r1, r9
   b4424:	f00b fc46 	bl	bfcb4 <__aeabi_ddiv>
   b4428:	4b20      	ldr	r3, [pc, #128]	; (b44ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x178>)
   b442a:	2200      	movs	r2, #0
   b442c:	f00b fb18 	bl	bfa60 <__aeabi_dmul>
   b4430:	4602      	mov	r2, r0
   b4432:	460b      	mov	r3, r1
   b4434:	4819      	ldr	r0, [pc, #100]	; (b449c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x168>)
   b4436:	491e      	ldr	r1, [pc, #120]	; (b44b0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x17c>)
   b4438:	f7ff fe65 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b443c:	4638      	mov	r0, r7
   b443e:	4621      	mov	r1, r4
   b4440:	f00b f84b 	bl	bf4da <digitalWrite>
		return true;
   b4444:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b4446:	b008      	add	sp, #32
   b4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b444c:	f00b fa9e 	bl	bf98c <__aeabi_i2d>
   b4450:	4680      	mov	r8, r0
   b4452:	6830      	ldr	r0, [r6, #0]
   b4454:	4689      	mov	r9, r1
   b4456:	f00b fa99 	bl	bf98c <__aeabi_i2d>
   b445a:	4602      	mov	r2, r0
   b445c:	460b      	mov	r3, r1
   b445e:	4640      	mov	r0, r8
   b4460:	4649      	mov	r1, r9
   b4462:	f00b fc27 	bl	bfcb4 <__aeabi_ddiv>
   b4466:	4b11      	ldr	r3, [pc, #68]	; (b44ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x178>)
   b4468:	2200      	movs	r2, #0
   b446a:	f00b faf9 	bl	bfa60 <__aeabi_dmul>
   b446e:	4602      	mov	r2, r0
   b4470:	460b      	mov	r3, r1
   b4472:	480a      	ldr	r0, [pc, #40]	; (b449c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x168>)
   b4474:	490f      	ldr	r1, [pc, #60]	; (b44b4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x180>)
   b4476:	f7ff fe46 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b447a:	4638      	mov	r0, r7
   b447c:	4629      	mov	r1, r5
   b447e:	f00b f82c 	bl	bf4da <digitalWrite>
	return false;
   b4482:	4628      	mov	r0, r5
   b4484:	e7df      	b.n	b4446 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x112>
   b4486:	bf00      	nop
   b4488:	2003db7c 	.word	0x2003db7c
   b448c:	2003db80 	.word	0x2003db80
   b4490:	000c0818 	.word	0x000c0818
   b4494:	000c1f8d 	.word	0x000c1f8d
   b4498:	000c0827 	.word	0x000c0827
   b449c:	2003e658 	.word	0x2003e658
   b44a0:	000c10b0 	.word	0x000c10b0
   b44a4:	2003e0e8 	.word	0x2003e0e8
   b44a8:	2003db78 	.word	0x2003db78
   b44ac:	40590000 	.word	0x40590000
   b44b0:	000c0871 	.word	0x000c0871
   b44b4:	000c08a5 	.word	0x000c08a5

000b44b8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
		Log.info("Join request from deviceID %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
	}
	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44ba:	b087      	sub	sp, #28

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44bc:	f001 fac2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44c0:	f001 fcaa 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b44c4:	4c40      	ldr	r4, [pc, #256]	; (b45c8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x110>)
   b44c6:	0a00      	lsrs	r0, r0, #8
   b44c8:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b44ca:	f001 fabb 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44ce:	f001 fca3 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b44d2:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b44d4:	f00a fdf1 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b44d8:	1600      	asrs	r0, r0, #24
   b44da:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b44dc:	f00a fded 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b44e0:	1400      	asrs	r0, r0, #16
   b44e2:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b44e4:	f00a fde9 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b44e8:	1200      	asrs	r0, r0, #8
   b44ea:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b44ec:	f00a fde5 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b44f0:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b44f2:	f001 faa7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b44f6:	f001 fc94 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44fa:	0a00      	lsrs	r0, r0, #8
   b44fc:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b44fe:	f001 faa1 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4502:	f001 fc8e 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4506:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b4508:	f001 faec 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b450c:	f001 fbde 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4510:	7220      	strb	r0, [r4, #8]
	buf[9] = getType(current.get_nodeNumber());
   b4512:	f001 fae7 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4516:	2500      	movs	r5, #0
   b4518:	f001 fbd8 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b451c:	7265      	strb	r5, [r4, #9]
	
	Log.info("Sent response to sensorType %d node %d, time = %s and frequency %d minutes",  buf[9], current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b451e:	f001 fae1 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4522:	f001 fbd8 	bl	b5cd6 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4526:	4606      	mov	r6, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4528:	f00a fdc7 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b452c:	4602      	mov	r2, r0
   b452e:	17c3      	asrs	r3, r0, #31
   b4530:	a802      	add	r0, sp, #8
   b4532:	f00a fcbd 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
   b4536:	9f02      	ldr	r7, [sp, #8]
   b4538:	f001 fa84 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b453c:	f001 fc71 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4540:	4633      	mov	r3, r6
   b4542:	462a      	mov	r2, r5
   b4544:	4921      	ldr	r1, [pc, #132]	; (b45cc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x114>)
   b4546:	e9cd 7000 	strd	r7, r0, [sp]
   b454a:	4821      	ldr	r0, [pc, #132]	; (b45d0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b454c:	f7ff fddb 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b4550:	a802      	add	r0, sp, #8
   b4552:	f00a f9ff 	bl	be954 <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4556:	4b1f      	ldr	r3, [pc, #124]	; (b45d4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>)
   b4558:	881e      	ldrh	r6, [r3, #0]
   b455a:	2101      	movs	r1, #1
   b455c:	4630      	mov	r0, r6
   b455e:	f00a ffbc 	bl	bf4da <digitalWrite>

	Log.info("sending: %s", buf);
   b4562:	4622      	mov	r2, r4
   b4564:	491c      	ldr	r1, [pc, #112]	; (b45d8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x120>)
   b4566:	481a      	ldr	r0, [pc, #104]	; (b45d0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b4568:	f7ff fdcd 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>

	if (manager.sendtoWait(buf, 10, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b456c:	f001 faba 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4570:	f001 fbb1 	bl	b5cd6 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4574:	2202      	movs	r2, #2
   b4576:	4603      	mov	r3, r0
   b4578:	9200      	str	r2, [sp, #0]
   b457a:	4621      	mov	r1, r4
   b457c:	4817      	ldr	r0, [pc, #92]	; (b45dc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x124>)
   b457e:	220a      	movs	r2, #10
   b4580:	f005 fe4e 	bl	ba220 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4584:	4604      	mov	r4, r0
   b4586:	b9a8      	cbnz	r0, b45b4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>
		Log.info("Response received successfully");
   b4588:	4915      	ldr	r1, [pc, #84]	; (b45e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x128>)
   b458a:	4811      	ldr	r0, [pc, #68]	; (b45d0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b458c:	f7ff fdbb 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b4590:	f001 faa8 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4594:	4605      	mov	r5, r0
   b4596:	f001 faa5 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b459a:	f001 fb97 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b459e:	4601      	mov	r1, r0
   b45a0:	4628      	mov	r0, r5
   b45a2:	f001 fbfd 	bl	b5da0 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b45a6:	4630      	mov	r0, r6
   b45a8:	4621      	mov	r1, r4
   b45aa:	f00a ff96 	bl	bf4da <digitalWrite>
		return true;
   b45ae:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b45b0:	b007      	add	sp, #28
   b45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Log.info("Response not acknowledged");							// Acknowledgement not received - this needs more attention as node is in undefined state
   b45b4:	490b      	ldr	r1, [pc, #44]	; (b45e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x12c>)
   b45b6:	4806      	ldr	r0, [pc, #24]	; (b45d0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x118>)
   b45b8:	f7ff fda5 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b45bc:	4630      	mov	r0, r6
   b45be:	4629      	mov	r1, r5
   b45c0:	f00a ff8b 	bl	bf4da <digitalWrite>
	return false;
   b45c4:	4628      	mov	r0, r5
   b45c6:	e7f3      	b.n	b45b0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>
   b45c8:	2003db80 	.word	0x2003db80
   b45cc:	000c08d4 	.word	0x000c08d4
   b45d0:	2003e658 	.word	0x2003e658
   b45d4:	000c10b0 	.word	0x000c10b0
   b45d8:	000c091f 	.word	0x000c091f
   b45dc:	2003e0e8 	.word	0x2003e0e8
   b45e0:	000c092b 	.word	0x000c092b
   b45e4:	000c094a 	.word	0x000c094a

000b45e8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b45e8:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b45ea:	f001 fa7b 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b45ee:	4b13      	ldr	r3, [pc, #76]	; (b463c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b45f0:	7899      	ldrb	r1, [r3, #2]
   b45f2:	f001 fbf3 	bl	b5ddc <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b45f6:	f001 fa75 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b45fa:	4604      	mov	r4, r0
   b45fc:	f00a fd5d 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4600:	17c3      	asrs	r3, r0, #31
   b4602:	4602      	mov	r2, r0
   b4604:	4620      	mov	r0, r4
   b4606:	f001 fcdb 	bl	b5fc0 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b460a:	f001 fa6b 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b460e:	4604      	mov	r4, r0
   b4610:	480b      	ldr	r0, [pc, #44]	; (b4640 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b4612:	f005 fbea 	bl	b9dea <_ZN15RHGenericDriver8lastRssiEv>
   b4616:	b281      	uxth	r1, r0
   b4618:	4620      	mov	r0, r4
   b461a:	f001 fc4b 	bl	b5eb4 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b461e:	f001 fa61 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4622:	f001 fb53 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4626:	4907      	ldr	r1, [pc, #28]	; (b4644 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b4628:	4602      	mov	r2, r0
   b462a:	4807      	ldr	r0, [pc, #28]	; (b4648 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b462c:	f7ff fd6b 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b4630:	4b06      	ldr	r3, [pc, #24]	; (b464c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b4632:	2206      	movs	r2, #6
   b4634:	701a      	strb	r2, [r3, #0]

	return true;
}
   b4636:	2001      	movs	r0, #1
   b4638:	bd10      	pop	{r4, pc}
   b463a:	bf00      	nop
   b463c:	2003db80 	.word	0x2003db80
   b4640:	2003dbfc 	.word	0x2003dbfc
   b4644:	000c0964 	.word	0x000c0964
   b4648:	2003e658 	.word	0x2003e658
   b464c:	2003db70 	.word	0x2003db70

000b4650 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b4650:	b570      	push	{r4, r5, r6, lr}
   b4652:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b4654:	f001 f9f6 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4658:	f001 fbde 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b465c:	4c32      	ldr	r4, [pc, #200]	; (b4728 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b465e:	0a00      	lsrs	r0, r0, #8
   b4660:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b4662:	f001 f9ef 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4666:	f001 fbd7 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b466a:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b466c:	f00a fd25 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4670:	1600      	asrs	r0, r0, #24
   b4672:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b4674:	f00a fd21 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4678:	1400      	asrs	r0, r0, #16
   b467a:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b467c:	f00a fd1d 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4680:	1200      	asrs	r0, r0, #8
   b4682:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b4684:	f00a fd19 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4688:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b468a:	f001 f9db 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b468e:	f001 fbc8 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4692:	0a00      	lsrs	r0, r0, #8
   b4694:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b4696:	f001 f9d5 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b469a:	f001 fbc2 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b469e:	4b23      	ldr	r3, [pc, #140]	; (b472c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b46a0:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46a2:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b46a4:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46a6:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b46a8:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46aa:	4630      	mov	r0, r6
   b46ac:	f00a ff15 	bl	bf4da <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b46b0:	f001 fa18 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b46b4:	f001 fb0a 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b46b8:	2206      	movs	r2, #6
   b46ba:	4603      	mov	r3, r0
   b46bc:	9200      	str	r2, [sp, #0]
   b46be:	4621      	mov	r1, r4
   b46c0:	481b      	ldr	r0, [pc, #108]	; (b4730 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b46c2:	2209      	movs	r2, #9
   b46c4:	f005 fdac 	bl	ba220 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b46c8:	4604      	mov	r4, r0
   b46ca:	bb10      	cbnz	r0, b4712 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b46cc:	f001 fa0a 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b46d0:	f001 fafc 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b46d4:	4605      	mov	r5, r0
   b46d6:	f00a fcf0 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b46da:	4602      	mov	r2, r0
   b46dc:	17c3      	asrs	r3, r0, #31
   b46de:	a804      	add	r0, sp, #16
   b46e0:	f00a fbe6 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
   b46e4:	9b04      	ldr	r3, [sp, #16]
   b46e6:	9303      	str	r3, [sp, #12]
   b46e8:	f001 f9ac 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b46ec:	f001 fb99 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b46f0:	9b03      	ldr	r3, [sp, #12]
   b46f2:	4910      	ldr	r1, [pc, #64]	; (b4734 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b46f4:	9000      	str	r0, [sp, #0]
   b46f6:	462a      	mov	r2, r5
   b46f8:	480f      	ldr	r0, [pc, #60]	; (b4738 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b46fa:	f7ff fd04 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b46fe:	a804      	add	r0, sp, #16
   b4700:	f00a f928 	bl	be954 <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b4704:	4630      	mov	r0, r6
   b4706:	4621      	mov	r1, r4
   b4708:	f00a fee7 	bl	bf4da <digitalWrite>
		return true;
   b470c:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b470e:	b008      	add	sp, #32
   b4710:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4712:	490a      	ldr	r1, [pc, #40]	; (b473c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b4714:	4808      	ldr	r0, [pc, #32]	; (b4738 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b4716:	f7ff fcf6 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b471a:	4630      	mov	r0, r6
   b471c:	4629      	mov	r1, r5
   b471e:	f00a fedc 	bl	bf4da <digitalWrite>
	return false;
   b4722:	4628      	mov	r0, r5
   b4724:	e7f3      	b.n	b470e <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b4726:	bf00      	nop
   b4728:	2003db80 	.word	0x2003db80
   b472c:	000c10b0 	.word	0x000c10b0
   b4730:	2003e0e8 	.word	0x2003e0e8
   b4734:	000c0989 	.word	0x000c0989
   b4738:	2003e658 	.word	0x2003e658
   b473c:	000c094a 	.word	0x000c094a

000b4740 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b4740:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b4742:	4c13      	ldr	r4, [pc, #76]	; (b4790 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b4744:	4b13      	ldr	r3, [pc, #76]	; (b4794 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b4746:	7822      	ldrb	r2, [r4, #0]
   b4748:	4913      	ldr	r1, [pc, #76]	; (b4798 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b474a:	4814      	ldr	r0, [pc, #80]	; (b479c <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b474c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b4750:	f7ff fcd9 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4754:	7823      	ldrb	r3, [r4, #0]
   b4756:	2b04      	cmp	r3, #4
   b4758:	d00c      	beq.n	b4774 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b475a:	7823      	ldrb	r3, [r4, #0]
   b475c:	2b02      	cmp	r3, #2
   b475e:	d104      	bne.n	b476a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4760:	f7ff fcea 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4764:	f7ff fea8 	bl	b44b8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4768:	b950      	cbnz	r0, b4780 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b476a:	7823      	ldrb	r3, [r4, #0]
   b476c:	2b06      	cmp	r3, #6
   b476e:	d009      	beq.n	b4784 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4770:	2000      	movs	r0, #0
   b4772:	e006      	b.n	b4782 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4774:	f7ff fce0 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4778:	f7ff fddc 	bl	b4334 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b477c:	2800      	cmp	r0, #0
   b477e:	d0ec      	beq.n	b475a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4780:	2001      	movs	r0, #1
}
   b4782:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4784:	f7ff fcd8 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
}
   b4788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b478c:	f7ff bf60 	b.w	b4650 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b4790:	2003db70 	.word	0x2003db70
   b4794:	2003d96c 	.word	0x2003d96c
   b4798:	000c09cc 	.word	0x000c09cc
   b479c:	2003e658 	.word	0x2003e658

000b47a0 <_ZN14LoRA_Functions12findDeviceIDEh>:
	Log.info("Returning index %d",index);

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b47a0:	b510      	push	{r4, lr}
	String nodeDeviceID = "000000000000000000000000";
   b47a2:	4903      	ldr	r1, [pc, #12]	; (b47b0 <_ZN14LoRA_Functions12findDeviceIDEh+0x10>)
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b47a4:	4604      	mov	r4, r0
	String nodeDeviceID = "000000000000000000000000";
   b47a6:	f00a f920 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
	if (nodeDeviceID == NULL) return "null";

	#endif
		
	return nodeDeviceID;
}
   b47aa:	4620      	mov	r0, r4
   b47ac:	bd10      	pop	{r4, pc}
   b47ae:	bf00      	nop
   b47b0:	000c09f1 	.word	0x000c09f1

000b47b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b47b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b47b6:	4604      	mov	r4, r0
   b47b8:	4615      	mov	r5, r2
   b47ba:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b47bc:	f003 fc56 	bl	b806c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b47c0:	9901      	ldr	r1, [sp, #4]
   b47c2:	2201      	movs	r2, #1
   b47c4:	4620      	mov	r0, r4
   b47c6:	f003 fbbf 	bl	b7f48 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b47ca:	4620      	mov	r0, r4
   b47cc:	213a      	movs	r1, #58	; 0x3a
   b47ce:	f003 fb6f 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b47d2:	4904      	ldr	r1, [pc, #16]	; (b47e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b47d4:	462a      	mov	r2, r5
   b47d6:	4620      	mov	r0, r4
		insertValue(value);
	}
   b47d8:	b003      	add	sp, #12
   b47da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b47de:	f003 bba6 	b.w	b7f2e <_ZN10JsonWriter13insertsprintfEPKcz>
   b47e2:	bf00      	nop
   b47e4:	000c14b3 	.word	0x000c14b3

000b47e8 <_GLOBAL__sub_I_jp>:
		if (Particle.connected()) Particle.publish("nodeData", data, PRIVATE);
	}

	#endif

}
   b47e8:	b513      	push	{r0, r1, r4, lr}
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b47ea:	4c0f      	ldr	r4, [pc, #60]	; (b4828 <_GLOBAL__sub_I_jp+0x40>)
   b47ec:	2319      	movs	r3, #25
   b47ee:	9300      	str	r3, [sp, #0]
   b47f0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b47f4:	f504 730b 	add.w	r3, r4, #556	; 0x22c
   b47f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b47fc:	4620      	mov	r0, r4
   b47fe:	f003 f99f 	bl	b7b40 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4802:	4b0a      	ldr	r3, [pc, #40]	; (b482c <_GLOBAL__sub_I_jp+0x44>)
   b4804:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4806:	4a0a      	ldr	r2, [pc, #40]	; (b4830 <_GLOBAL__sub_I_jp+0x48>)
   b4808:	4c0a      	ldr	r4, [pc, #40]	; (b4834 <_GLOBAL__sub_I_jp+0x4c>)
   b480a:	490b      	ldr	r1, [pc, #44]	; (b4838 <_GLOBAL__sub_I_jp+0x50>)
   b480c:	4b0b      	ldr	r3, [pc, #44]	; (b483c <_GLOBAL__sub_I_jp+0x54>)
   b480e:	7812      	ldrb	r2, [r2, #0]
   b4810:	7809      	ldrb	r1, [r1, #0]
   b4812:	4620      	mov	r0, r4
   b4814:	f006 f9fa 	bl	bac0c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4818:	4809      	ldr	r0, [pc, #36]	; (b4840 <_GLOBAL__sub_I_jp+0x58>)
   b481a:	2200      	movs	r2, #0
   b481c:	4621      	mov	r1, r4
}
   b481e:	b002      	add	sp, #8
   b4820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4824:	f005 bcf2 	b.w	ba20c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4828:	2003dd2c 	.word	0x2003dd2c
   b482c:	000c0c1c 	.word	0x000c0c1c
   b4830:	000c10b6 	.word	0x000c10b6
   b4834:	2003dbfc 	.word	0x2003dbfc
   b4838:	000c10b4 	.word	0x000c10b4
   b483c:	2003e45c 	.word	0x2003e45c
   b4840:	2003e0e8 	.word	0x2003e0e8

000b4844 <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b4844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4848:	b096      	sub	sp, #88	; 0x58
   b484a:	460e      	mov	r6, r1
	String nodeDeviceID;
   b484c:	a802      	add	r0, sp, #8
   b484e:	4955      	ldr	r1, [pc, #340]	; (b49a4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x160>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4850:	4d55      	ldr	r5, [pc, #340]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
		if (getValueTokenByKey(container, name, value)) {
   b4852:	f8df 816c 	ldr.w	r8, [pc, #364]	; b49c0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>
	String nodeDeviceID;
   b4856:	f00a f8c8 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b485a:	4853      	ldr	r0, [pc, #332]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b485c:	f003 f98b 	bl	b7b76 <_ZNK10JsonParser14getOuterObjectEv>
   b4860:	4a52      	ldr	r2, [pc, #328]	; (b49ac <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4862:	4601      	mov	r1, r0
   b4864:	ab01      	add	r3, sp, #4
   b4866:	4850      	ldr	r0, [pc, #320]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4868:	f003 fadc 	bl	b7e24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int index = 1;				// Start at one since node zero is the gateway
   b486c:	2401      	movs	r4, #1
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b486e:	9901      	ldr	r1, [sp, #4]
   b4870:	1e62      	subs	r2, r4, #1
   b4872:	4628      	mov	r0, r5
   b4874:	f003 f9a1 	bl	b7bba <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b4878:	4607      	mov	r7, r0
   b487a:	2800      	cmp	r0, #0
   b487c:	d166      	bne.n	b494c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x108>
			Log.info("Ran out of entries");
   b487e:	494c      	ldr	r1, [pc, #304]	; (b49b0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b4880:	484c      	ldr	r0, [pc, #304]	; (b49b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b4882:	f7ff fc40 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	Log.info(jp.getBuffer());
   b4886:	6869      	ldr	r1, [r5, #4]
   b4888:	484a      	ldr	r0, [pc, #296]	; (b49b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b488a:	f7ff fc3c 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b488e:	4946      	ldr	r1, [pc, #280]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4890:	a806      	add	r0, sp, #24
   b4892:	f003 fc0f 	bl	b80b4 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s and type of 3",index, deviceID);
   b4896:	4633      	mov	r3, r6
   b4898:	4622      	mov	r2, r4
   b489a:	4947      	ldr	r1, [pc, #284]	; (b49b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x174>)
   b489c:	4845      	ldr	r0, [pc, #276]	; (b49b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b489e:	f7ff fc32 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b48a2:	4841      	ldr	r0, [pc, #260]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b48a4:	f003 f95c 	bl	b7b60 <_ZNK10JsonParser13getOuterArrayEv>
   b48a8:	4601      	mov	r1, r0
   b48aa:	a806      	add	r0, sp, #24
   b48ac:	f003 fc14 	bl	b80d8 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b48b0:	227d      	movs	r2, #125	; 0x7d
   b48b2:	217b      	movs	r1, #123	; 0x7b
   b48b4:	a806      	add	r0, sp, #24
   b48b6:	f003 fbe4 	bl	b8082 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b48ba:	4622      	mov	r2, r4
   b48bc:	493f      	ldr	r1, [pc, #252]	; (b49bc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x178>)
   b48be:	a806      	add	r0, sp, #24
   b48c0:	f7ff ff78 	bl	b47b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b48c4:	a806      	add	r0, sp, #24
   b48c6:	f003 fbd1 	bl	b806c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b48ca:	2201      	movs	r2, #1
   b48cc:	a806      	add	r0, sp, #24
   b48ce:	493c      	ldr	r1, [pc, #240]	; (b49c0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>)
   b48d0:	f003 fb3a 	bl	b7f48 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b48d4:	a806      	add	r0, sp, #24
   b48d6:	213a      	movs	r1, #58	; 0x3a
   b48d8:	f003 faea 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b48dc:	4631      	mov	r1, r6
   b48de:	2201      	movs	r2, #1
   b48e0:	a806      	add	r0, sp, #24
   b48e2:	f003 fb31 	bl	b7f48 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b48e6:	f00a fbe8 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b48ea:	4606      	mov	r6, r0
		insertCheckSeparator();
   b48ec:	a806      	add	r0, sp, #24
   b48ee:	f003 fbbd 	bl	b806c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b48f2:	2201      	movs	r2, #1
   b48f4:	a806      	add	r0, sp, #24
   b48f6:	4933      	ldr	r1, [pc, #204]	; (b49c4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x180>)
   b48f8:	f003 fb26 	bl	b7f48 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b48fc:	a806      	add	r0, sp, #24
   b48fe:	213a      	movs	r1, #58	; 0x3a
   b4900:	f003 fad6 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4904:	4632      	mov	r2, r6
   b4906:	a806      	add	r0, sp, #24
   b4908:	492f      	ldr	r1, [pc, #188]	; (b49c8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x184>)
   b490a:	f003 fb10 	bl	b7f2e <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b490e:	492f      	ldr	r1, [pc, #188]	; (b49cc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x188>)
   b4910:	2203      	movs	r2, #3
   b4912:	a806      	add	r0, sp, #24
   b4914:	f7ff ff4e 	bl	b47b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4918:	a806      	add	r0, sp, #24
   b491a:	f003 fad7 	bl	b7ecc <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b491e:	a806      	add	r0, sp, #24
   b4920:	f003 fe35 	bl	b858e <_ZN12JsonModifier6finishEv>
	Log.info("Buffer %s \n",jp.getBuffer());
   b4924:	686a      	ldr	r2, [r5, #4]
   b4926:	492a      	ldr	r1, [pc, #168]	; (b49d0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x18c>)
   b4928:	4822      	ldr	r0, [pc, #136]	; (b49b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b492a:	f7ff fbec 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b492e:	f001 f955 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b4932:	6869      	ldr	r1, [r5, #4]
   b4934:	f001 f978 	bl	b5c28 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	Log.info("Returning index %d",index);
   b4938:	4622      	mov	r2, r4
   b493a:	4926      	ldr	r1, [pc, #152]	; (b49d4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x190>)
   b493c:	481d      	ldr	r0, [pc, #116]	; (b49b4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b493e:	f7ff fbe2 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4942:	a806      	add	r0, sp, #24
	return index;
   b4944:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4946:	f003 f8c1 	bl	b7acc <_ZN12JsonModifierD1Ev>
   b494a:	e01e      	b.n	b498a <_ZN14LoRA_Functions14findNodeNumberEPKc+0x146>
		if (getValueTokenByKey(container, name, value)) {
   b494c:	4601      	mov	r1, r0
   b494e:	ab06      	add	r3, sp, #24
   b4950:	4642      	mov	r2, r8
   b4952:	4628      	mov	r0, r5
   b4954:	f003 fa66 	bl	b7e24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4958:	b120      	cbz	r0, b4964 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x120>
			return getTokenValue(value, result);
   b495a:	9906      	ldr	r1, [sp, #24]
   b495c:	aa02      	add	r2, sp, #8
   b495e:	4628      	mov	r0, r5
   b4960:	f003 fa42 	bl	b7de8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4964:	4631      	mov	r1, r6
   b4966:	a802      	add	r0, sp, #8
   b4968:	f00a f905 	bl	beb76 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b496c:	b1a0      	cbz	r0, b4998 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x154>
		if (getValueTokenByKey(container, name, value)) {
   b496e:	4a13      	ldr	r2, [pc, #76]	; (b49bc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x178>)
   b4970:	480d      	ldr	r0, [pc, #52]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4972:	ab06      	add	r3, sp, #24
   b4974:	4639      	mov	r1, r7
   b4976:	f003 fa55 	bl	b7e24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b497a:	b120      	cbz	r0, b4986 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x142>
			return getTokenValue(value, result);
   b497c:	9906      	ldr	r1, [sp, #24]
   b497e:	480a      	ldr	r0, [pc, #40]	; (b49a8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
   b4980:	466a      	mov	r2, sp
   b4982:	f003 f973 	bl	b7c6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
			return node;
   b4986:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b498a:	a802      	add	r0, sp, #8
   b498c:	f009 ffe2 	bl	be954 <_ZN6StringD1Ev>
}
   b4990:	4620      	mov	r0, r4
   b4992:	b016      	add	sp, #88	; 0x58
   b4994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4998:	3401      	adds	r4, #1
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b499a:	2c0b      	cmp	r4, #11
   b499c:	f47f af67 	bne.w	b486e <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2a>
   b49a0:	e771      	b.n	b4886 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x42>
   b49a2:	bf00      	nop
   b49a4:	000c1f8d 	.word	0x000c1f8d
   b49a8:	2003dd2c 	.word	0x2003dd2c
   b49ac:	000c0a0a 	.word	0x000c0a0a
   b49b0:	000c0a10 	.word	0x000c0a10
   b49b4:	2003e658 	.word	0x2003e658
   b49b8:	000c0a2c 	.word	0x000c0a2c
   b49bc:	000c0a27 	.word	0x000c0a27
   b49c0:	000c0a23 	.word	0x000c0a23
   b49c4:	000c0a6e 	.word	0x000c0a6e
   b49c8:	000c1788 	.word	0x000c1788
   b49cc:	000c09ec 	.word	0x000c09ec
   b49d0:	000c0a73 	.word	0x000c0a73
   b49d4:	000c0a7f 	.word	0x000c0a7f

000b49d8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b49d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b49da:	4b31      	ldr	r3, [pc, #196]	; (b4aa0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b49dc:	2202      	movs	r2, #2
   b49de:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b49e0:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b49e2:	4b30      	ldr	r3, [pc, #192]	; (b4aa4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xcc>)
   b49e4:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b49e6:	4606      	mov	r6, r0
		nodeDeviceID[i] = buf[i+2];
   b49e8:	f103 0218 	add.w	r2, r3, #24
   b49ec:	4627      	mov	r7, r4
   b49ee:	6818      	ldr	r0, [r3, #0]
   b49f0:	6859      	ldr	r1, [r3, #4]
   b49f2:	4625      	mov	r5, r4
   b49f4:	c503      	stmia	r5!, {r0, r1}
   b49f6:	3308      	adds	r3, #8
   b49f8:	4293      	cmp	r3, r2
   b49fa:	462c      	mov	r4, r5
   b49fc:	d1f7      	bne.n	b49ee <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b49fe:	781b      	ldrb	r3, [r3, #0]
   b4a00:	702b      	strb	r3, [r5, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4a02:	f001 f86f 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a06:	4604      	mov	r4, r0
   b4a08:	f001 f86c 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a0c:	f001 f95e 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a10:	4601      	mov	r1, r0
   b4a12:	4620      	mov	r0, r4
   b4a14:	f001 f9c4 	bl	b5da0 <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4a18:	f001 f864 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a1c:	f001 f956 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a20:	280a      	cmp	r0, #10
   b4a22:	d91d      	bls.n	b4a60 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x88>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4a24:	f001 f85e 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a28:	4639      	mov	r1, r7
   b4a2a:	4604      	mov	r4, r0
   b4a2c:	4630      	mov	r0, r6
   b4a2e:	f7ff ff09 	bl	b4844 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4a32:	4601      	mov	r1, r0
   b4a34:	4620      	mov	r0, r4
   b4a36:	f001 f9ad 	bl	b5d94 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Received from deviceID of %s will change node number from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b4a3a:	f001 f853 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a3e:	f001 f94a 	bl	b5cd6 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4a42:	9003      	str	r0, [sp, #12]
   b4a44:	f001 f84e 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a48:	f001 f940 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a4c:	9b03      	ldr	r3, [sp, #12]
   b4a4e:	9000      	str	r0, [sp, #0]
   b4a50:	4915      	ldr	r1, [pc, #84]	; (b4aa8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b4a52:	4816      	ldr	r0, [pc, #88]	; (b4aac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd4>)
   b4a54:	463a      	mov	r2, r7
   b4a56:	f7ff fb56 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
}
   b4a5a:	2001      	movs	r0, #1
   b4a5c:	b011      	add	sp, #68	; 0x44
   b4a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[27] = getType(current.get_nodeNumber());
   b4a60:	f001 f840 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a64:	4c12      	ldr	r4, [pc, #72]	; (b4ab0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd8>)
   b4a66:	f001 f931 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a6a:	2300      	movs	r3, #0
   b4a6c:	76e3      	strb	r3, [r4, #27]
		Log.info("Join request from deviceID %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4a6e:	f7ff fb63 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
	String nodeDeviceID = "000000000000000000000000";
   b4a72:	4910      	ldr	r1, [pc, #64]	; (b4ab4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xdc>)
   b4a74:	a805      	add	r0, sp, #20
   b4a76:	f009 ffb8 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
	const char * c_str() const { return buffer; }
   b4a7a:	9a05      	ldr	r2, [sp, #20]
   b4a7c:	9203      	str	r2, [sp, #12]
		Log.info("Join request from deviceID %s with node %d - setting clock and setting sensorType to %d", LoRA_Functions::instance().findDeviceID(1).c_str(), current.get_nodeNumber(), buf[27]);
   b4a7e:	f001 f831 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4a82:	f001 f923 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a86:	7ee1      	ldrb	r1, [r4, #27]
   b4a88:	9100      	str	r1, [sp, #0]
   b4a8a:	4603      	mov	r3, r0
   b4a8c:	9a03      	ldr	r2, [sp, #12]
   b4a8e:	490a      	ldr	r1, [pc, #40]	; (b4ab8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xe0>)
   b4a90:	4806      	ldr	r0, [pc, #24]	; (b4aac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd4>)
   b4a92:	f7ff fb38 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b4a96:	a805      	add	r0, sp, #20
   b4a98:	f009 ff5c 	bl	be954 <_ZN6StringD1Ev>
   b4a9c:	e7dd      	b.n	b4a5a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b4a9e:	bf00      	nop
   b4aa0:	2003db70 	.word	0x2003db70
   b4aa4:	2003db82 	.word	0x2003db82
   b4aa8:	000c0a92 	.word	0x000c0a92
   b4aac:	2003e658 	.word	0x2003e658
   b4ab0:	2003db80 	.word	0x2003db80
   b4ab4:	000c09f1 	.word	0x000c09f1
   b4ab8:	000c0ad5 	.word	0x000c0ad5

000b4abc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4abc:	b570      	push	{r4, r5, r6, lr}
   b4abe:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b4ac0:	2379      	movs	r3, #121	; 0x79
   b4ac2:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4ac6:	f10d 031f 	add.w	r3, sp, #31
   b4aca:	9303      	str	r3, [sp, #12]
   b4acc:	f10d 031e 	add.w	r3, sp, #30
   b4ad0:	4e46      	ldr	r6, [pc, #280]	; (b4bec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b4ad2:	9302      	str	r3, [sp, #8]
   b4ad4:	f10d 031d 	add.w	r3, sp, #29
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	ab07      	add	r3, sp, #28
   b4adc:	9300      	str	r3, [sp, #0]
   b4ade:	4844      	ldr	r0, [pc, #272]	; (b4bf0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4ae0:	f10d 031b 	add.w	r3, sp, #27
   b4ae4:	f10d 021a 	add.w	r2, sp, #26
   b4ae8:	4631      	mov	r1, r6
   b4aea:	f005 fbcd 	bl	ba288 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4aee:	b910      	cbnz	r0, b4af6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b4af0:	2000      	movs	r0, #0
}
   b4af2:	b008      	add	sp, #32
   b4af4:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4af6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b4afa:	2400      	movs	r4, #0
   b4afc:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b4afe:	8835      	ldrh	r5, [r6, #0]
   b4b00:	f000 ffa0 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4b04:	f001 f988 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b4b08:	ba6d      	rev16	r5, r5
   b4b0a:	b2ad      	uxth	r5, r5
   b4b0c:	42a8      	cmp	r0, r5
   b4b0e:	d00e      	beq.n	b4b2e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x72>
			Log.info("Message magic number of %d did not match the Magic Number in memory %d - Ignoring", (buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b4b10:	8832      	ldrh	r2, [r6, #0]
   b4b12:	ba52      	rev16	r2, r2
   b4b14:	b292      	uxth	r2, r2
   b4b16:	9205      	str	r2, [sp, #20]
   b4b18:	f000 ff94 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4b1c:	f001 f97c 	bl	b5e18 <_ZNK13sysStatusData15get_magicNumberEv>
   b4b20:	9a05      	ldr	r2, [sp, #20]
   b4b22:	4934      	ldr	r1, [pc, #208]	; (b4bf4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
   b4b24:	4603      	mov	r3, r0
   b4b26:	4834      	ldr	r0, [pc, #208]	; (b4bf8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4b28:	f7ff faed 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b4b2c:	e7e0      	b.n	b4af0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);
   b4b2e:	f000 ffd9 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4b32:	f89d 101b 	ldrb.w	r1, [sp, #27]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4b36:	4c31      	ldr	r4, [pc, #196]	; (b4bfc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
		current.set_nodeNumber(from);
   b4b38:	f001 f92c 	bl	b5d94 <_ZN17currentStatusData14set_nodeNumberEh>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b4b3c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4b40:	f003 030f 	and.w	r3, r3, #15
   b4b44:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4b46:	f000 ffcd 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4b4a:	f001 f8bf 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
   b4b4e:	9005      	str	r0, [sp, #20]
   b4b50:	482b      	ldr	r0, [pc, #172]	; (b4c00 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
   b4b52:	f005 f94a 	bl	b9dea <_ZN15RHGenericDriver8lastRssiEv>
   b4b56:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4b5a:	9102      	str	r1, [sp, #8]
   b4b5c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4b60:	9101      	str	r1, [sp, #4]
   b4b62:	4603      	mov	r3, r0
   b4b64:	4927      	ldr	r1, [pc, #156]	; (b4c04 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b4b66:	7820      	ldrb	r0, [r4, #0]
   b4b68:	9a05      	ldr	r2, [sp, #20]
   b4b6a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4b6e:	9100      	str	r1, [sp, #0]
   b4b70:	4821      	ldr	r0, [pc, #132]	; (b4bf8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4b72:	4925      	ldr	r1, [pc, #148]	; (b4c08 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
   b4b74:	f7ff fac7 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4b78:	7823      	ldrb	r3, [r4, #0]
   b4b7a:	2b03      	cmp	r3, #3
   b4b7c:	d02e      	beq.n	b4bdc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4b7e:	7823      	ldrb	r3, [r4, #0]
   b4b80:	2b01      	cmp	r3, #1
   b4b82:	d105      	bne.n	b4b90 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd4>
   b4b84:	f7ff fad8 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4b88:	f7ff ff26 	bl	b49d8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4b8c:	2800      	cmp	r0, #0
   b4b8e:	d0af      	beq.n	b4af0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4b90:	7823      	ldrb	r3, [r4, #0]
   b4b92:	2b05      	cmp	r3, #5
   b4b94:	d105      	bne.n	b4ba2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xe6>
   b4b96:	f7ff facf 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4b9a:	f7ff fd25 	bl	b45e8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4b9e:	2800      	cmp	r0, #0
   b4ba0:	d0a6      	beq.n	b4af0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4ba2:	4b1a      	ldr	r3, [pc, #104]	; (b4c0c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b4ba4:	781a      	ldrb	r2, [r3, #0]
   b4ba6:	b182      	cbz	r2, b4bca <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x10e>
			frequencyUpdated = false;
   b4ba8:	2200      	movs	r2, #0
   b4baa:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4bac:	f000 ff4a 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4bb0:	4b17      	ldr	r3, [pc, #92]	; (b4c10 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b4bb2:	8819      	ldrh	r1, [r3, #0]
   b4bb4:	f001 f972 	bl	b5e9c <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4bb8:	f000 ff44 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4bbc:	f001 f931 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4bc0:	4914      	ldr	r1, [pc, #80]	; (b4c14 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x158>)
   b4bc2:	4602      	mov	r2, r0
   b4bc4:	480c      	ldr	r0, [pc, #48]	; (b4bf8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4bc6:	f7ff fa9e 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		Log.info("Reporting frequency unchanged");
   b4bca:	4913      	ldr	r1, [pc, #76]	; (b4c18 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x15c>)
   b4bcc:	480a      	ldr	r0, [pc, #40]	; (b4bf8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4bce:	f7ff fa9a 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4bd2:	f7ff fab1 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4bd6:	f7ff fdb3 	bl	b4740 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4bda:	e78a      	b.n	b4af2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4bdc:	f7ff faac 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4be0:	f7ff fb48 	bl	b4274 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b4be4:	2800      	cmp	r0, #0
   b4be6:	d1ca      	bne.n	b4b7e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xc2>
   b4be8:	e782      	b.n	b4af0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b4bea:	bf00      	nop
   b4bec:	2003db80 	.word	0x2003db80
   b4bf0:	2003e0e8 	.word	0x2003e0e8
   b4bf4:	000c0b2d 	.word	0x000c0b2d
   b4bf8:	2003e658 	.word	0x2003e658
   b4bfc:	2003db70 	.word	0x2003db70
   b4c00:	2003dbfc 	.word	0x2003dbfc
   b4c04:	2003d96c 	.word	0x2003d96c
   b4c08:	000c0b7f 	.word	0x000c0b7f
   b4c0c:	2003e409 	.word	0x2003e409
   b4c10:	2003da88 	.word	0x2003da88
   b4c14:	000c0bc0 	.word	0x000c0bc0
   b4c18:	000c0bf4 	.word	0x000c0bf4

000b4c1c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4c1c:	4b01      	ldr	r3, [pc, #4]	; (b4c24 <_Z18outOfMemoryHandleryi+0x8>)
   b4c1e:	601a      	str	r2, [r3, #0]
}
   b4c20:	4770      	bx	lr
   b4c22:	bf00      	nop
   b4c24:	2003d9e4 	.word	0x2003d9e4

000b4c28 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b4c28:	4b01      	ldr	r3, [pc, #4]	; (b4c30 <_Z13userSwitchISRv+0x8>)
   b4c2a:	2201      	movs	r2, #1
   b4c2c:	701a      	strb	r2, [r3, #0]
}
   b4c2e:	4770      	bx	lr
   b4c30:	2003e3dc 	.word	0x2003e3dc

000b4c34 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4c34:	b530      	push	{r4, r5, lr}
   b4c36:	b085      	sub	sp, #20
   b4c38:	4604      	mov	r4, r0
   b4c3a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4c3c:	b160      	cbz	r0, b4c58 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4c3e:	6840      	ldr	r0, [r0, #4]
   b4c40:	b150      	cbz	r0, b4c58 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4c42:	6885      	ldr	r5, [r0, #8]
   b4c44:	b145      	cbz	r5, b4c58 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4c46:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4c4a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c4e:	68c4      	ldr	r4, [r0, #12]
   b4c50:	ab01      	add	r3, sp, #4
   b4c52:	466a      	mov	r2, sp
   b4c54:	a902      	add	r1, sp, #8
   b4c56:	47a0      	blx	r4
    }
   b4c58:	b005      	add	sp, #20
   b4c5a:	bd30      	pop	{r4, r5, pc}

000b4c5c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4c5c:	b530      	push	{r4, r5, lr}
   b4c5e:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4c60:	6800      	ldr	r0, [r0, #0]
   b4c62:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4c6a:	6883      	ldr	r3, [r0, #8]
   b4c6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4c70:	b90b      	cbnz	r3, b4c76 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4c72:	f00a fd35 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c76:	68c3      	ldr	r3, [r0, #12]
   b4c78:	aa01      	add	r2, sp, #4
   b4c7a:	a902      	add	r1, sp, #8
   b4c7c:	4798      	blx	r3
      }
   b4c7e:	b005      	add	sp, #20
   b4c80:	bd30      	pop	{r4, r5, pc}

000b4c82 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4c82:	2a01      	cmp	r2, #1
   b4c84:	d102      	bne.n	b4c8c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4c86:	6001      	str	r1, [r0, #0]
      }
   b4c88:	2000      	movs	r0, #0
   b4c8a:	4770      	bx	lr
	  switch (__op)
   b4c8c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4c8e:	bf04      	itt	eq
   b4c90:	680b      	ldreq	r3, [r1, #0]
   b4c92:	6003      	streq	r3, [r0, #0]
	      break;
   b4c94:	e7f8      	b.n	b4c88 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4c96 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4c96:	6803      	ldr	r3, [r0, #0]
   b4c98:	6812      	ldr	r2, [r2, #0]
   b4c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4c9e:	4718      	bx	r3

000b4ca0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4ca0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4ca2:	2000      	movs	r0, #0
   b4ca4:	f007 fa64 	bl	bc170 <spark_sync_time_pending>
   b4ca8:	b128      	cbz	r0, b4cb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4caa:	f007 fa41 	bl	bc130 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4cae:	f080 0001 	eor.w	r0, r0, #1
   b4cb2:	b2c0      	uxtb	r0, r0
    }
   b4cb4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4cb6:	2001      	movs	r0, #1
   b4cb8:	e7fc      	b.n	b4cb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4cba <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4cba:	b510      	push	{r4, lr}
      if (_M_manager)
   b4cbc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4cbe:	4604      	mov	r4, r0
      if (_M_manager)
   b4cc0:	b113      	cbz	r3, b4cc8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cc2:	2203      	movs	r2, #3
   b4cc4:	4601      	mov	r1, r0
   b4cc6:	4798      	blx	r3
    }
   b4cc8:	4620      	mov	r0, r4
   b4cca:	bd10      	pop	{r4, pc}

000b4ccc <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4ccc:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4cce:	4604      	mov	r4, r0
   b4cd0:	b138      	cbz	r0, b4ce2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4cd2:	f7ff fff2 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	2110      	movs	r1, #16
        };
   b4cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4cde:	f7ff b9de 	b.w	b409e <_ZdlPvj>
        };
   b4ce2:	bd10      	pop	{r4, pc}

000b4ce4 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4ce4:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4ce6:	f000 fead 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4cea:	f001 f89a 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4cee:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4cf0:	f00a f9c6 	bl	bf080 <_ZN9TimeClass7isValidEv>
   b4cf4:	b1f0      	cbz	r0, b4d34 <_Z21secondsUntilNextEventv+0x50>
   b4cf6:	4b10      	ldr	r3, [pc, #64]	; (b4d38 <_Z21secondsUntilNextEventv+0x54>)
   b4cf8:	781b      	ldrb	r3, [r3, #0]
   b4cfa:	b9db      	cbnz	r3, b4d34 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4cfc:	f00a f9dd 	bl	bf0ba <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4d00:	253c      	movs	r5, #60	; 0x3c
   b4d02:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4d04:	fbb0 f4f5 	udiv	r4, r0, r5
   b4d08:	fb04 0015 	mls	r0, r4, r5, r0
   b4d0c:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4d0e:	2c09      	cmp	r4, #9
   b4d10:	d90e      	bls.n	b4d30 <_Z21secondsUntilNextEventv+0x4c>
   b4d12:	42ac      	cmp	r4, r5
   b4d14:	bf28      	it	cs
   b4d16:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b4d18:	f000 fe94 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4d1c:	f001 f881 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4d20:	4906      	ldr	r1, [pc, #24]	; (b4d3c <_Z21secondsUntilNextEventv+0x58>)
   b4d22:	4602      	mov	r2, r0
   b4d24:	4623      	mov	r3, r4
   b4d26:	4806      	ldr	r0, [pc, #24]	; (b4d40 <_Z21secondsUntilNextEventv+0x5c>)
   b4d28:	f7ff f9ed 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	bd38      	pop	{r3, r4, r5, pc}
   b4d30:	240a      	movs	r4, #10
   b4d32:	e7f1      	b.n	b4d18 <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b4d34:	240a      	movs	r4, #10
   b4d36:	e7f9      	b.n	b4d2c <_Z21secondsUntilNextEventv+0x48>
   b4d38:	2003e3db 	.word	0x2003e3db
   b4d3c:	000c0c34 	.word	0x000c0c34
   b4d40:	2003e658 	.word	0x2003e658

000b4d44 <_Z22publishStateTransitionv>:
{
   b4d44:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4d46:	4e1c      	ldr	r6, [pc, #112]	; (b4db8 <_Z22publishStateTransitionv+0x74>)
   b4d48:	4c1c      	ldr	r4, [pc, #112]	; (b4dbc <_Z22publishStateTransitionv+0x78>)
   b4d4a:	7832      	ldrb	r2, [r6, #0]
   b4d4c:	4d1c      	ldr	r5, [pc, #112]	; (b4dc0 <_Z22publishStateTransitionv+0x7c>)
   b4d4e:	2a02      	cmp	r2, #2
{
   b4d50:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4d52:	d128      	bne.n	b4da6 <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4d54:	f00a f994 	bl	bf080 <_ZN9TimeClass7isValidEv>
   b4d58:	7832      	ldrb	r2, [r6, #0]
   b4d5a:	782b      	ldrb	r3, [r5, #0]
   b4d5c:	b958      	cbnz	r0, b4d76 <_Z22publishStateTransitionv+0x32>
   b4d5e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4d62:	9200      	str	r2, [sp, #0]
   b4d64:	4a17      	ldr	r2, [pc, #92]	; (b4dc4 <_Z22publishStateTransitionv+0x80>)
   b4d66:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d6e:	a804      	add	r0, sp, #16
   b4d70:	f007 faae 	bl	bc2d0 <snprintf>
   b4d74:	e00f      	b.n	b4d96 <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b4d76:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4d7a:	9303      	str	r3, [sp, #12]
   b4d7c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4d80:	f7ff ffb0 	bl	b4ce4 <_Z21secondsUntilNextEventv>
   b4d84:	9b03      	ldr	r3, [sp, #12]
   b4d86:	4a10      	ldr	r2, [pc, #64]	; (b4dc8 <_Z22publishStateTransitionv+0x84>)
   b4d88:	e9cd 4000 	strd	r4, r0, [sp]
   b4d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d90:	a804      	add	r0, sp, #16
   b4d92:	f007 fa9d 	bl	bc2d0 <snprintf>
	oldState = state;
   b4d96:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4d98:	480c      	ldr	r0, [pc, #48]	; (b4dcc <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4d9a:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4d9c:	a904      	add	r1, sp, #16
   b4d9e:	f7ff f9b2 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
}
   b4da2:	b044      	add	sp, #272	; 0x110
   b4da4:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4da6:	782b      	ldrb	r3, [r5, #0]
   b4da8:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4dac:	9200      	str	r2, [sp, #0]
   b4dae:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4db2:	4a07      	ldr	r2, [pc, #28]	; (b4dd0 <_Z22publishStateTransitionv+0x8c>)
   b4db4:	e7d9      	b.n	b4d6a <_Z22publishStateTransitionv+0x26>
   b4db6:	bf00      	nop
   b4db8:	2003e3da 	.word	0x2003e3da
   b4dbc:	2003d9e8 	.word	0x2003d9e8
   b4dc0:	2003e3d9 	.word	0x2003e3d9
   b4dc4:	000c0c68 	.word	0x000c0c68
   b4dc8:	000c0c88 	.word	0x000c0c88
   b4dcc:	2003e658 	.word	0x2003e658
   b4dd0:	000c0ca5 	.word	0x000c0ca5

000b4dd4 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b4dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4dd8:	ed2d 8b02 	vpush	{d8}
	char data[256];                             						// Store the date in this character array - not global

	if (nodeNumber > 0) {												// Webhook for a node
   b4ddc:	4604      	mov	r4, r0
void publishWebhook(uint8_t nodeNumber) {
   b4dde:	b0d3      	sub	sp, #332	; 0x14c
	if (nodeNumber > 0) {												// Webhook for a node
   b4de0:	2800      	cmp	r0, #0
   b4de2:	d06c      	beq.n	b4ebe <_Z14publishWebhookh+0xea>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4de4:	f7ff f9a8 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b4de8:	4622      	mov	r2, r4
   b4dea:	4601      	mov	r1, r0
   b4dec:	a80e      	add	r0, sp, #56	; 0x38
   b4dee:	f7ff fcd7 	bl	b47a0 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4df4:	930d      	str	r3, [sp, #52]	; 0x34
   b4df6:	f000 fe75 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4dfa:	f001 f821 	bl	b5e40 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4dfe:	4604      	mov	r4, r0
   b4e00:	f000 fe70 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e04:	f001 f821 	bl	b5e4a <_ZNK17currentStatusData14get_dailyCountEv>
   b4e08:	4605      	mov	r5, r0
   b4e0a:	f000 fe6b 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e0e:	f000 ff80 	bl	b5d12 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4e12:	4606      	mov	r6, r0
   b4e14:	f000 fe66 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4e18:	f000 fe7e 	bl	b5b18 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4e1c:	eeb0 8a40 	vmov.f32	s16, s0
   b4e20:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4e24:	f000 fe5e 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e28:	f000 ff5f 	bl	b5cea <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4e2c:	4a4e      	ldr	r2, [pc, #312]	; (b4f68 <_Z14publishWebhookh+0x194>)
   b4e2e:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
		current.get_internalTempC(), current.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4e32:	f000 fe57 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e36:	f000 ff53 	bl	b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>
   b4e3a:	4607      	mov	r7, r0
   b4e3c:	f000 fe52 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e40:	f000 ff58 	bl	b5cf4 <_ZNK17currentStatusData14get_resetCountEv>
   b4e44:	4680      	mov	r8, r0
   b4e46:	f000 fe4d 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e4a:	f000 fff4 	bl	b5e36 <_ZNK17currentStatusData8get_RSSIEv>
   b4e4e:	4681      	mov	r9, r0
   b4e50:	f000 fe48 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4e54:	f000 ff53 	bl	b5cfe <_ZNK17currentStatusData17get_messageNumberEv>
   b4e58:	4682      	mov	sl, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4e5a:	f00a f92e 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4e60:	4a42      	ldr	r2, [pc, #264]	; (b4f6c <_Z14publishWebhookh+0x198>)
   b4e62:	9400      	str	r4, [sp, #0]
   b4e64:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4e68:	e9cd a00a 	strd	sl, r0, [sp, #40]	; 0x28
   b4e6c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   b4e70:	e9cd b706 	strd	fp, r7, [sp, #24]
   b4e74:	ed8d 8b04 	vstr	d8, [sp, #16]
   b4e78:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b4e7c:	a812      	add	r0, sp, #72	; 0x48
   b4e7e:	f007 fa27 	bl	bc2d0 <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4e82:	a80e      	add	r0, sp, #56	; 0x38
   b4e84:	f009 fd66 	bl	be954 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b4e88:	f004 fa8a 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4e8c:	4b38      	ldr	r3, [pc, #224]	; (b4f70 <_Z14publishWebhookh+0x19c>)
   b4e8e:	4a39      	ldr	r2, [pc, #228]	; (b4f74 <_Z14publishWebhookh+0x1a0>)
   b4e90:	781b      	ldrb	r3, [r3, #0]
   b4e92:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4e94:	2100      	movs	r1, #0
   b4e96:	4313      	orrs	r3, r2
   b4e98:	6802      	ldr	r2, [r0, #0]
   b4e9a:	f88d 1004 	strb.w	r1, [sp, #4]
   b4e9e:	f88d 3000 	strb.w	r3, [sp]
   b4ea2:	4935      	ldr	r1, [pc, #212]	; (b4f78 <_Z14publishWebhookh+0x1a4>)
   b4ea4:	6814      	ldr	r4, [r2, #0]
   b4ea6:	233c      	movs	r3, #60	; 0x3c
   b4ea8:	aa12      	add	r2, sp, #72	; 0x48
   b4eaa:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}

	Log.info(data);
   b4eac:	4833      	ldr	r0, [pc, #204]	; (b4f7c <_Z14publishWebhookh+0x1a8>)
   b4eae:	a912      	add	r1, sp, #72	; 0x48
   b4eb0:	f7ff f929 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>



	return;
}
   b4eb4:	b053      	add	sp, #332	; 0x14c
   b4eb6:	ecbd 8b02 	vpop	{d8}
   b4eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return spark_deviceID();
   b4ebe:	a80e      	add	r0, sp, #56	; 0x38
   b4ec0:	f007 f93e 	bl	bc140 <spark_deviceID>
   b4ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4ec6:	930d      	str	r3, [sp, #52]	; 0x34
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4ec8:	f000 fdbc 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4ecc:	f000 fef9 	bl	b5cc2 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4ed0:	4605      	mov	r5, r0
   b4ed2:	f000 fe07 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4ed6:	f000 fe1f 	bl	b5b18 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4eda:	eeb0 8a40 	vmov.f32	s16, s0
   b4ede:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4ee2:	f000 fdff 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4ee6:	f000 ff00 	bl	b5cea <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4eea:	4a1f      	ldr	r2, [pc, #124]	; (b4f68 <_Z14publishWebhookh+0x194>)
   b4eec:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_RSSI(), sysStatus.get_messageCount(), Time.now());
   b4ef0:	f000 fdf8 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b4ef4:	f000 fef4 	bl	b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>
   b4ef8:	4606      	mov	r6, r0
   b4efa:	f000 fda3 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4efe:	f000 fecc 	bl	b5c9a <_ZNK13sysStatusData14get_resetCountEv>
   b4f02:	4607      	mov	r7, r0
   b4f04:	f000 fd9e 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4f08:	f000 ff90 	bl	b5e2c <_ZNK13sysStatusData8get_RSSIEv>
   b4f0c:	4680      	mov	r8, r0
   b4f0e:	f000 fd99 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b4f12:	f000 fec7 	bl	b5ca4 <_ZNK13sysStatusData16get_messageCountEv>
   b4f16:	4681      	mov	r9, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4f18:	f00a f8cf 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b4f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4f1e:	4a13      	ldr	r2, [pc, #76]	; (b4f6c <_Z14publishWebhookh+0x198>)
   b4f20:	9400      	str	r4, [sp, #0]
   b4f22:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4f26:	e9cd 900a 	strd	r9, r0, [sp, #40]	; 0x28
   b4f2a:	e9cd 4501 	strd	r4, r5, [sp, #4]
   b4f2e:	e9cd 7808 	strd	r7, r8, [sp, #32]
   b4f32:	e9cd a606 	strd	sl, r6, [sp, #24]
   b4f36:	ed8d 8b04 	vstr	d8, [sp, #16]
   b4f3a:	a812      	add	r0, sp, #72	; 0x48
   b4f3c:	f007 f9c8 	bl	bc2d0 <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4f40:	a80e      	add	r0, sp, #56	; 0x38
   b4f42:	f009 fd07 	bl	be954 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b4f46:	f004 fa2b 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
   b4f4a:	4b09      	ldr	r3, [pc, #36]	; (b4f70 <_Z14publishWebhookh+0x19c>)
   b4f4c:	4a09      	ldr	r2, [pc, #36]	; (b4f74 <_Z14publishWebhookh+0x1a0>)
   b4f4e:	781b      	ldrb	r3, [r3, #0]
   b4f50:	7812      	ldrb	r2, [r2, #0]
   b4f52:	490b      	ldr	r1, [pc, #44]	; (b4f80 <_Z14publishWebhookh+0x1ac>)
   b4f54:	4313      	orrs	r3, r2
   b4f56:	6802      	ldr	r2, [r0, #0]
   b4f58:	f88d 3000 	strb.w	r3, [sp]
   b4f5c:	f88d 4004 	strb.w	r4, [sp, #4]
   b4f60:	6814      	ldr	r4, [r2, #0]
   b4f62:	233c      	movs	r3, #60	; 0x3c
   b4f64:	aa12      	add	r2, sp, #72	; 0x48
   b4f66:	e7a0      	b.n	b4eaa <_Z14publishWebhookh+0xd6>
   b4f68:	2003da8c 	.word	0x2003da8c
   b4f6c:	000c0cb3 	.word	0x000c0cb3
   b4f70:	2003e29c 	.word	0x2003e29c
   b4f74:	2003e29d 	.word	0x2003e29d
   b4f78:	000c0d4a 	.word	0x000c0d4a
   b4f7c:	2003e658 	.word	0x2003e658
   b4f80:	000c0d5f 	.word	0x000c0d5f

000b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4f84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4f86:	2300      	movs	r3, #0
   b4f88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4f8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4f8c:	4604      	mov	r4, r0
   b4f8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4f90:	b12b      	cbz	r3, b4f9e <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f92:	2202      	movs	r2, #2
   b4f94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f96:	68eb      	ldr	r3, [r5, #12]
   b4f98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4f9a:	68ab      	ldr	r3, [r5, #8]
   b4f9c:	60a3      	str	r3, [r4, #8]
    }
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4fa8:	b095      	sub	sp, #84	; 0x54
   b4faa:	4605      	mov	r5, r0
        };
   b4fac:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4fae:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4fb0:	4690      	mov	r8, r2
   b4fb2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4fb4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4fb6:	f7ff ffe5 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4fba:	a904      	add	r1, sp, #16
   b4fbc:	a808      	add	r0, sp, #32
   b4fbe:	f7ff ffe1 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4fc2:	a908      	add	r1, sp, #32
   b4fc4:	4630      	mov	r0, r6
   b4fc6:	f7ff ffdd 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4fca:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fce:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4fd0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fd4:	f7ff f85f 	bl	b4096 <_Znwj>
   b4fd8:	4604      	mov	r4, r0
   b4fda:	b1a0      	cbz	r0, b5006 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fdc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4fe0:	ab01      	add	r3, sp, #4
   b4fe2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4fea:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4fee:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ff4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ff6:	60a3      	str	r3, [r4, #8]
   b4ff8:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4ffe:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b5002:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5004:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b5006:	4b24      	ldr	r3, [pc, #144]	; (b5098 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5008:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b500a:	4b24      	ldr	r3, [pc, #144]	; (b509c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b500c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b500e:	2200      	movs	r2, #0
   b5010:	2300      	movs	r3, #0
   b5012:	f04f 0900 	mov.w	r9, #0
   b5016:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b501a:	4b21      	ldr	r3, [pc, #132]	; (b50a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b501c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5020:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5022:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5024:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5028:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b502c:	f7ff f833 	bl	b4096 <_Znwj>
   b5030:	4604      	mov	r4, r0
   b5032:	b1d8      	cbz	r0, b506c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b5034:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b5036:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b503a:	b133      	cbz	r3, b504a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b503c:	2202      	movs	r2, #2
   b503e:	a910      	add	r1, sp, #64	; 0x40
   b5040:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5044:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5046:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5048:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b504a:	4b16      	ldr	r3, [pc, #88]	; (b50a4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b504c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b504e:	4a16      	ldr	r2, [pc, #88]	; (b50a8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5050:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5052:	ab01      	add	r3, sp, #4
   b5054:	4640      	mov	r0, r8
   b5056:	4639      	mov	r1, r7
   b5058:	f006 ffe8 	bl	bc02c <system_subscribe_event>
        if (r) {
   b505c:	b1b0      	cbz	r0, b508c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b505e:	4620      	mov	r0, r4
   b5060:	f7ff fe2b 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b5064:	2110      	movs	r1, #16
   b5066:	4620      	mov	r0, r4
   b5068:	f7ff f819 	bl	b409e <_ZdlPvj>
   b506c:	a810      	add	r0, sp, #64	; 0x40
   b506e:	f7ff fe24 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b5072:	4630      	mov	r0, r6
   b5074:	f7ff fe21 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b5078:	a808      	add	r0, sp, #32
   b507a:	f7ff fe1e 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b507e:	a804      	add	r0, sp, #16
   b5080:	f7ff fe1b 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
    }
   b5084:	4628      	mov	r0, r5
   b5086:	b015      	add	sp, #84	; 0x54
   b5088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b508c:	9b02      	ldr	r3, [sp, #8]
   b508e:	60ab      	str	r3, [r5, #8]
   b5090:	e9c5 8700 	strd	r8, r7, [r5]
   b5094:	e7ea      	b.n	b506c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b5096:	bf00      	nop
   b5098:	000b4c5d 	.word	0x000b4c5d
   b509c:	000b50ad 	.word	0x000b50ad
   b50a0:	000c0002 	.word	0x000c0002
   b50a4:	000b4ccd 	.word	0x000b4ccd
   b50a8:	000b4c35 	.word	0x000b4c35

000b50ac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b50ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b50ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50b0:	4604      	mov	r4, r0
	switch (__op)
   b50b2:	d104      	bne.n	b50be <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b50b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b50b6:	6003      	str	r3, [r0, #0]
      }
   b50b8:	2000      	movs	r0, #0
   b50ba:	b003      	add	sp, #12
   b50bc:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b50be:	2a02      	cmp	r2, #2
   b50c0:	d00c      	beq.n	b50dc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b50c2:	2a03      	cmp	r2, #3
   b50c4:	d1f8      	bne.n	b50b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b50c6:	6804      	ldr	r4, [r0, #0]
   b50c8:	2c00      	cmp	r4, #0
   b50ca:	d0f5      	beq.n	b50b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b50cc:	4620      	mov	r0, r4
   b50ce:	f7ff fdf4 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b50d2:	2110      	movs	r1, #16
   b50d4:	4620      	mov	r0, r4
   b50d6:	f7fe ffe2 	bl	b409e <_ZdlPvj>
   b50da:	e7ed      	b.n	b50b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b50dc:	6809      	ldr	r1, [r1, #0]
   b50de:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b50e0:	2010      	movs	r0, #16
   b50e2:	f7fe ffd8 	bl	b4096 <_Znwj>
   b50e6:	4605      	mov	r5, r0
   b50e8:	b110      	cbz	r0, b50f0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b50ea:	9901      	ldr	r1, [sp, #4]
   b50ec:	f7ff ff4a 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b50f0:	6025      	str	r5, [r4, #0]
	}
   b50f2:	e7e1      	b.n	b50b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b50f4 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b50f4:	4b16      	ldr	r3, [pc, #88]	; (b5150 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b50f6:	b510      	push	{r4, lr}
   b50f8:	2401      	movs	r4, #1
   b50fa:	701c      	strb	r4, [r3, #0]
   b50fc:	4b15      	ldr	r3, [pc, #84]	; (b5154 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b50fe:	2208      	movs	r2, #8
   b5100:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5102:	f00a f983 	bl	bf40c <spark_protocol_instance>
   b5106:	2300      	movs	r3, #0
   b5108:	461a      	mov	r2, r3
   b510a:	4619      	mov	r1, r3
   b510c:	f00a f98e 	bl	bf42c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5110:	f00a f97c 	bl	bf40c <spark_protocol_instance>
   b5114:	2300      	movs	r3, #0
   b5116:	461a      	mov	r2, r3
   b5118:	210d      	movs	r1, #13
   b511a:	f00a f97f 	bl	bf41c <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b511e:	4b0e      	ldr	r3, [pc, #56]	; (b5158 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5120:	1d1a      	adds	r2, r3, #4
   b5122:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5124:	4a0d      	ldr	r2, [pc, #52]	; (b515c <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5126:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5128:	2200      	movs	r2, #0
   b512a:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b512e:	611a      	str	r2, [r3, #16]
   b5130:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5132:	f00a fa43 	bl	bf5bc <_Z19__fetch_global_Wirev>
   b5136:	2269      	movs	r2, #105	; 0x69
   b5138:	4601      	mov	r1, r0
   b513a:	4809      	ldr	r0, [pc, #36]	; (b5160 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b513c:	f001 fd36 	bl	b6bac <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5140:	4808      	ldr	r0, [pc, #32]	; (b5164 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5142:	2306      	movs	r3, #6
   b5144:	f840 3b04 	str.w	r3, [r0], #4
}
   b5148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b514c:	f003 bbe0 	b.w	b8910 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5150:	2003e29c 	.word	0x2003e29c
   b5154:	2003e29d 	.word	0x2003e29d
   b5158:	2003e2d0 	.word	0x2003e2d0
   b515c:	00030010 	.word	0x00030010
   b5160:	2003e2b0 	.word	0x2003e2b0
   b5164:	2003e2e8 	.word	0x2003e2e8

000b5168 <setup>:
{
   b5168:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b516a:	2000      	movs	r0, #0
   b516c:	b09d      	sub	sp, #116	; 0x74
   b516e:	f006 fcfb 	bl	bbb68 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5172:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5176:	4604      	mov	r4, r0
   b5178:	2000      	movs	r0, #0
   b517a:	f006 fcf5 	bl	bbb68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b517e:	1b00      	subs	r0, r0, r4
   b5180:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5184:	42a8      	cmp	r0, r5
   b5186:	f171 0300 	sbcs.w	r3, r1, #0
   b518a:	d207      	bcs.n	b519c <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b518c:	f00a f87c 	bl	bf288 <_Z16_fetch_usbserialv>
   b5190:	f00a f86f 	bl	bf272 <_ZN9USBSerial11isConnectedEv>
   b5194:	b910      	cbnz	r0, b519c <setup+0x34>
            spark_process();
   b5196:	f006 ffbb 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   b519a:	e7ed      	b.n	b5178 <setup+0x10>
   b519c:	f00a f874 	bl	bf288 <_Z16_fetch_usbserialv>
   b51a0:	f00a f867 	bl	bf272 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b51a4:	f000 ff70 	bl	b6088 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b51a8:	f000 ff9a 	bl	b60e0 <_Z18initializePowerCfgv>
		current.setup();
   b51ac:	f000 fc9a 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b51b0:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b51b2:	4e5b      	ldr	r6, [pc, #364]	; (b5320 <setup+0x1b8>)
   b51b4:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b51b6:	4f5b      	ldr	r7, [pc, #364]	; (b5324 <setup+0x1bc>)
   b51b8:	4798      	blx	r3
  		sysStatus.setup();
   b51ba:	f000 fc43 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b51be:	6803      	ldr	r3, [r0, #0]
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	4798      	blx	r3
		nodeID.setup();
   b51c4:	f000 fd0a 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b51c8:	6803      	ldr	r3, [r0, #0]
   b51ca:	681b      	ldr	r3, [r3, #0]
   b51cc:	4798      	blx	r3
	resetNodeIDs();			// Testing step
   b51ce:	f000 fd31 	bl	b5c34 <_Z12resetNodeIDsv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b51d2:	f001 f871 	bl	b62b8 <_Z18particleInitializev>
   b51d6:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b51d8:	2101      	movs	r1, #1
   b51da:	4630      	mov	r0, r6
   b51dc:	8173      	strh	r3, [r6, #10]
   b51de:	f002 f9e1 	bl	b75a4 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b51e2:	217c      	movs	r1, #124	; 0x7c
   b51e4:	4630      	mov	r0, r6
   b51e6:	f001 fddf 	bl	b6da8 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b51ea:	4b4f      	ldr	r3, [pc, #316]	; (b5328 <setup+0x1c0>)
   b51ec:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b51ee:	4b4f      	ldr	r3, [pc, #316]	; (b532c <setup+0x1c4>)
   b51f0:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b51f2:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b51f4:	4b4e      	ldr	r3, [pc, #312]	; (b5330 <setup+0x1c8>)
   b51f6:	9308      	str	r3, [sp, #32]
   b51f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b51fc:	2300      	movs	r3, #0
   b51fe:	a802      	add	r0, sp, #8
   b5200:	9500      	str	r5, [sp, #0]
   b5202:	f7ff fecf 	bl	b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5206:	4628      	mov	r0, r5
   b5208:	f7ff fd57 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b520c:	f004 f8c8 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
   b5210:	f004 facc 	bl	b97ac <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5214:	f7fe ff90 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b5218:	2101      	movs	r1, #1
   b521a:	f7fe ff9f 	bl	b415c <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b521e:	f003 fd57 	bl	b8cd0 <_ZN9LocalTime8instanceEv>
   b5222:	4944      	ldr	r1, [pc, #272]	; (b5334 <setup+0x1cc>)
   b5224:	4604      	mov	r4, r0
   b5226:	4628      	mov	r0, r5
   b5228:	f003 fc24 	bl	b8a74 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b522c:	a907      	add	r1, sp, #28
   b522e:	f104 0008 	add.w	r0, r4, #8
   b5232:	f009 fc16 	bl	bea62 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5238:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b523a:	a90d      	add	r1, sp, #52	; 0x34
   b523c:	f104 0020 	add.w	r0, r4, #32
   b5240:	f009 fc0f 	bl	bea62 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5244:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5246:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5248:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b524a:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b524c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b524e:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5250:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5252:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5256:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5258:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b525c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5260:	4628      	mov	r0, r5
   b5262:	f003 f9c3 	bl	b85ec <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5266:	f009 ff28 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b526a:	17c3      	asrs	r3, r0, #31
   b526c:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5270:	4638      	mov	r0, r7
   b5272:	f003 fda5 	bl	b8dc0 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5276:	f009 ff03 	bl	bf080 <_ZN9TimeClass7isValidEv>
   b527a:	4c2f      	ldr	r4, [pc, #188]	; (b5338 <setup+0x1d0>)
   b527c:	2800      	cmp	r0, #0
   b527e:	d043      	beq.n	b5308 <setup+0x1a0>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5280:	4639      	mov	r1, r7
   b5282:	4a2e      	ldr	r2, [pc, #184]	; (b533c <setup+0x1d4>)
   b5284:	4628      	mov	r0, r5
   b5286:	f003 fc85 	bl	b8b94 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b528a:	2301      	movs	r3, #1
   b528c:	461a      	mov	r2, r3
   b528e:	2110      	movs	r1, #16
   b5290:	4630      	mov	r0, r6
   b5292:	9f06      	ldr	r7, [sp, #24]
   b5294:	f001 fe09 	bl	b6eaa <_ZN6AB180510isBitClearEhhb>
   b5298:	4929      	ldr	r1, [pc, #164]	; (b5340 <setup+0x1d8>)
   b529a:	4b2a      	ldr	r3, [pc, #168]	; (b5344 <setup+0x1dc>)
   b529c:	463a      	mov	r2, r7
   b529e:	2800      	cmp	r0, #0
   b52a0:	bf18      	it	ne
   b52a2:	460b      	movne	r3, r1
   b52a4:	4828      	ldr	r0, [pc, #160]	; (b5348 <setup+0x1e0>)
   b52a6:	4929      	ldr	r1, [pc, #164]	; (b534c <setup+0x1e4>)
   b52a8:	f7fe ff2d 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b52ac:	4628      	mov	r0, r5
   b52ae:	f009 fb51 	bl	be954 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b52b2:	4b27      	ldr	r3, [pc, #156]	; (b5350 <setup+0x1e8>)
   b52b4:	881e      	ldrh	r6, [r3, #0]
   b52b6:	4630      	mov	r0, r6
   b52b8:	f00a f928 	bl	bf50c <digitalRead>
   b52bc:	4605      	mov	r5, r0
   b52be:	bb50      	cbnz	r0, b5316 <setup+0x1ae>
		Log.info("User button pressed, test mode");
   b52c0:	4924      	ldr	r1, [pc, #144]	; (b5354 <setup+0x1ec>)
   b52c2:	4821      	ldr	r0, [pc, #132]	; (b5348 <setup+0x1e0>)
   b52c4:	f7fe ff1f 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b52c8:	4b23      	ldr	r3, [pc, #140]	; (b5358 <setup+0x1f0>)
   b52ca:	2101      	movs	r1, #1
   b52cc:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b52ce:	4b23      	ldr	r3, [pc, #140]	; (b535c <setup+0x1f4>)
   b52d0:	881f      	ldrh	r7, [r3, #0]
   b52d2:	4638      	mov	r0, r7
   b52d4:	f00a f901 	bl	bf4da <digitalWrite>
		delay(2000);
   b52d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b52dc:	f007 f850 	bl	bc380 <delay>
		digitalWrite(BLUE_LED,LOW);
   b52e0:	4629      	mov	r1, r5
   b52e2:	4638      	mov	r0, r7
   b52e4:	f00a f8f9 	bl	bf4da <digitalWrite>
		state = LoRA_STATE;
   b52e8:	2304      	movs	r3, #4
   b52ea:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b52ec:	2200      	movs	r2, #0
   b52ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b52f2:	491b      	ldr	r1, [pc, #108]	; (b5360 <setup+0x1f8>)
   b52f4:	9200      	str	r2, [sp, #0]
   b52f6:	4630      	mov	r0, r6
   b52f8:	f007 fdb8 	bl	bce6c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b52fc:	7823      	ldrb	r3, [r4, #0]
   b52fe:	b90b      	cbnz	r3, b5304 <setup+0x19c>
   b5300:	2302      	movs	r3, #2
   b5302:	7023      	strb	r3, [r4, #0]
}
   b5304:	b01d      	add	sp, #116	; 0x74
   b5306:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5308:	4916      	ldr	r1, [pc, #88]	; (b5364 <setup+0x1fc>)
   b530a:	480f      	ldr	r0, [pc, #60]	; (b5348 <setup+0x1e0>)
   b530c:	f7fe fefb 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5310:	2305      	movs	r3, #5
   b5312:	7023      	strb	r3, [r4, #0]
   b5314:	e7cd      	b.n	b52b2 <setup+0x14a>
	else Log.info("No user button push detechted");
   b5316:	4914      	ldr	r1, [pc, #80]	; (b5368 <setup+0x200>)
   b5318:	480b      	ldr	r0, [pc, #44]	; (b5348 <setup+0x1e0>)
   b531a:	f7fe fef4 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b531e:	e7e5      	b.n	b52ec <setup+0x184>
   b5320:	2003e2b0 	.word	0x2003e2b0
   b5324:	2003e2e8 	.word	0x2003e2e8
   b5328:	000b4c1d 	.word	0x000b4c1d
   b532c:	000b4c97 	.word	0x000b4c97
   b5330:	000b4c83 	.word	0x000b4c83
   b5334:	000c0d81 	.word	0x000c0d81
   b5338:	2003e3da 	.word	0x2003e3da
   b533c:	000c0da8 	.word	0x000c0da8
   b5340:	000c0d77 	.word	0x000c0d77
   b5344:	000c0d7a 	.word	0x000c0d7a
   b5348:	2003e658 	.word	0x2003e658
   b534c:	000c0db3 	.word	0x000c0db3
   b5350:	000c10b2 	.word	0x000c10b2
   b5354:	000c0e22 	.word	0x000c0e22
   b5358:	2003e3db 	.word	0x2003e3db
   b535c:	000c10b0 	.word	0x000c10b0
   b5360:	000b4c29 	.word	0x000b4c29
   b5364:	000c0de4 	.word	0x000c0de4
   b5368:	000c0e41 	.word	0x000c0e41

000b536c <loop>:
void loop() {
   b536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   b5370:	4d7d      	ldr	r5, [pc, #500]	; (b5568 <loop+0x1fc>)
   b5372:	782b      	ldrb	r3, [r5, #0]
   b5374:	3b01      	subs	r3, #1
void loop() {
   b5376:	b090      	sub	sp, #64	; 0x40
   b5378:	2b06      	cmp	r3, #6
   b537a:	d817      	bhi.n	b53ac <loop+0x40>
   b537c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5380:	00070250 	.word	0x00070250
   b5384:	010c0033 	.word	0x010c0033
   b5388:	023301bf 	.word	0x023301bf
   b538c:	01a6      	.short	0x01a6
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b538e:	4b77      	ldr	r3, [pc, #476]	; (b556c <loop+0x200>)
   b5390:	781b      	ldrb	r3, [r3, #0]
   b5392:	2b02      	cmp	r3, #2
   b5394:	d001      	beq.n	b539a <loop+0x2e>
   b5396:	f7ff fcd5 	bl	b4d44 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b539a:	4b75      	ldr	r3, [pc, #468]	; (b5570 <loop+0x204>)
   b539c:	781a      	ldrb	r2, [r3, #0]
   b539e:	b11a      	cbz	r2, b53a8 <loop+0x3c>
				nextEventTime = false;
   b53a0:	2200      	movs	r2, #0
   b53a2:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b53a4:	2304      	movs	r3, #4
   b53a6:	e000      	b.n	b53aa <loop+0x3e>
			else state = SLEEPING_STATE;
   b53a8:	2303      	movs	r3, #3
   b53aa:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b53ac:	4871      	ldr	r0, [pc, #452]	; (b5574 <loop+0x208>)
   b53ae:	f002 f8a7 	bl	b7500 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b53b2:	f003 fff5 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
   b53b6:	f003 fee5 	bl	b9184 <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b53ba:	f000 fb93 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b53be:	f000 fba1 	bl	b5b04 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b53c2:	f000 fb3f 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b53c6:	f000 fb65 	bl	b5a94 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b53ca:	f000 fc07 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b53ce:	f000 fc22 	bl	b5c16 <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b53d2:	4b69      	ldr	r3, [pc, #420]	; (b5578 <loop+0x20c>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	2b00      	cmp	r3, #0
   b53d8:	f2c0 8256 	blt.w	b5888 <loop+0x51c>
}
   b53dc:	b010      	add	sp, #64	; 0x40
   b53de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		System.reset();
   b53e2:	f009 bc76 	b.w	becd2 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b53e6:	4b61      	ldr	r3, [pc, #388]	; (b556c <loop+0x200>)
   b53e8:	781b      	ldrb	r3, [r3, #0]
   b53ea:	2b03      	cmp	r3, #3
   b53ec:	d001      	beq.n	b53f2 <loop+0x86>
   b53ee:	f7ff fca9 	bl	b4d44 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b53f2:	2100      	movs	r1, #0
   b53f4:	485f      	ldr	r0, [pc, #380]	; (b5574 <loop+0x208>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b53f6:	4c61      	ldr	r4, [pc, #388]	; (b557c <loop+0x210>)
   b53f8:	f001 fcd6 	bl	b6da8 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b53fc:	f7ff fc72 	bl	b4ce4 <_Z21secondsUntilNextEventv>
   b5400:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b5402:	f009 fe5a 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b5406:	19c2      	adds	r2, r0, r7
   b5408:	17d3      	asrs	r3, r2, #31
   b540a:	a808      	add	r0, sp, #32
   b540c:	f009 fd50 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
   b5410:	9b08      	ldr	r3, [sp, #32]
   b5412:	9302      	str	r3, [sp, #8]
   b5414:	f009 fcc0 	bl	bed98 <_ZN11SystemClass10freeMemoryEv>
   b5418:	9b02      	ldr	r3, [sp, #8]
   b541a:	4959      	ldr	r1, [pc, #356]	; (b5580 <loop+0x214>)
   b541c:	9000      	str	r0, [sp, #0]
   b541e:	463a      	mov	r2, r7
   b5420:	4858      	ldr	r0, [pc, #352]	; (b5584 <loop+0x218>)
   b5422:	f7fe fe70 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b5426:	a808      	add	r0, sp, #32
   b5428:	f009 fa94 	bl	be954 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b542c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5430:	f006 ffa6 	bl	bc380 <delay>
   b5434:	7d23      	ldrb	r3, [r4, #20]
   b5436:	2b00      	cmp	r3, #0
   b5438:	d050      	beq.n	b54dc <loop+0x170>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b543a:	2302      	movs	r3, #2
   b543c:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b543e:	4b52      	ldr	r3, [pc, #328]	; (b5588 <loop+0x21c>)
   b5440:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5444:	6823      	ldr	r3, [r4, #0]
   b5446:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5448:	b1f3      	cbz	r3, b5488 <loop+0x11c>
            if (start->type == type) {
   b544a:	889a      	ldrh	r2, [r3, #4]
   b544c:	2a01      	cmp	r2, #1
   b544e:	d006      	beq.n	b545e <loop+0xf2>
            start = start->next;
   b5450:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5452:	e7f9      	b.n	b5448 <loop+0xdc>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5454:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5456:	b1bb      	cbz	r3, b5488 <loop+0x11c>
            if (start->type == type) {
   b5458:	889a      	ldrh	r2, [r3, #4]
   b545a:	2a01      	cmp	r2, #1
   b545c:	d1fa      	bne.n	b5454 <loop+0xe8>
                if (gpioWakeup->pin == pin) {
   b545e:	899a      	ldrh	r2, [r3, #12]
   b5460:	4542      	cmp	r2, r8
   b5462:	d1f7      	bne.n	b5454 <loop+0xe8>
                    gpioWakeup->mode = mode;
   b5464:	2200      	movs	r2, #0
   b5466:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5468:	7d23      	ldrb	r3, [r4, #20]
   b546a:	2b00      	cmp	r3, #0
   b546c:	d036      	beq.n	b54dc <loop+0x170>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b546e:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5470:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b5474:	68db      	ldr	r3, [r3, #12]
   b5476:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b547a:	b1db      	cbz	r3, b54b4 <loop+0x148>
            if (start->type == type) {
   b547c:	889a      	ldrh	r2, [r3, #4]
   b547e:	2a04      	cmp	r2, #4
   b5480:	f000 81fd 	beq.w	b587e <loop+0x512>
            start = start->next;
   b5484:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5486:	e7f8      	b.n	b547a <loop+0x10e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5488:	4940      	ldr	r1, [pc, #256]	; (b558c <loop+0x220>)
   b548a:	2010      	movs	r0, #16
   b548c:	f00a f91e 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   b5490:	4606      	mov	r6, r0
   b5492:	2800      	cmp	r0, #0
   b5494:	f000 81f6 	beq.w	b5884 <loop+0x518>
   b5498:	2210      	movs	r2, #16
   b549a:	2100      	movs	r1, #0
   b549c:	f00a fe52 	bl	c0144 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b54a0:	4b3b      	ldr	r3, [pc, #236]	; (b5590 <loop+0x224>)
   b54a2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b54a4:	2301      	movs	r3, #1
   b54a6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b54a8:	6923      	ldr	r3, [r4, #16]
   b54aa:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b54ac:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b54b0:	6126      	str	r6, [r4, #16]
   b54b2:	e7d9      	b.n	b5468 <loop+0xfc>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b54b4:	4935      	ldr	r1, [pc, #212]	; (b558c <loop+0x220>)
   b54b6:	2010      	movs	r0, #16
   b54b8:	f00a f908 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   b54bc:	4606      	mov	r6, r0
   b54be:	2800      	cmp	r0, #0
   b54c0:	f000 81e0 	beq.w	b5884 <loop+0x518>
   b54c4:	2210      	movs	r2, #16
   b54c6:	2100      	movs	r1, #0
   b54c8:	f00a fe3c 	bl	c0144 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b54cc:	4b30      	ldr	r3, [pc, #192]	; (b5590 <loop+0x224>)
   b54ce:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b54d0:	2304      	movs	r3, #4
   b54d2:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b54d4:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b54d6:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b54d8:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b54dc:	4927      	ldr	r1, [pc, #156]	; (b557c <loop+0x210>)
   b54de:	a805      	add	r0, sp, #20
   b54e0:	f009 fbfa 	bl	becd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b54e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b54e8:	4822      	ldr	r0, [pc, #136]	; (b5574 <loop+0x208>)
   b54ea:	f001 fc5d 	bl	b6da8 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b54ee:	2000      	movs	r0, #0
   b54f0:	f006 fb3a 	bl	bbb68 <hal_timer_millis>
        while (_while() && !_condition()) {
   b54f4:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b54f8:	4604      	mov	r4, r0
   b54fa:	2000      	movs	r0, #0
   b54fc:	f006 fb34 	bl	bbb68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5500:	1b00      	subs	r0, r0, r4
   b5502:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5506:	42b0      	cmp	r0, r6
   b5508:	f171 0300 	sbcs.w	r3, r1, #0
   b550c:	d207      	bcs.n	b551e <loop+0x1b2>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b550e:	f009 febb 	bl	bf288 <_Z16_fetch_usbserialv>
   b5512:	f009 feae 	bl	bf272 <_ZN9USBSerial11isConnectedEv>
   b5516:	b910      	cbnz	r0, b551e <loop+0x1b2>
            spark_process();
   b5518:	f006 fdfa 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   b551c:	e7ed      	b.n	b54fa <loop+0x18e>
   b551e:	f009 feb3 	bl	bf288 <_Z16_fetch_usbserialv>
   b5522:	f009 fea6 	bl	bf272 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b5526:	2302      	movs	r3, #2
   b5528:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b552a:	4b11      	ldr	r3, [pc, #68]	; (b5570 <loop+0x204>)
   b552c:	2201      	movs	r2, #1
   b552e:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b5530:	f009 fdc3 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b5534:	19c2      	adds	r2, r0, r7
   b5536:	17d3      	asrs	r3, r2, #31
   b5538:	a808      	add	r0, sp, #32
   b553a:	f009 fcb9 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
   b553e:	9a08      	ldr	r2, [sp, #32]
   b5540:	9202      	str	r2, [sp, #8]
   b5542:	f009 fc29 	bl	bed98 <_ZN11SystemClass10freeMemoryEv>
   b5546:	9a02      	ldr	r2, [sp, #8]
   b5548:	4912      	ldr	r1, [pc, #72]	; (b5594 <loop+0x228>)
   b554a:	4603      	mov	r3, r0
   b554c:	480d      	ldr	r0, [pc, #52]	; (b5584 <loop+0x218>)
   b554e:	f7fe fdda 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b5552:	a808      	add	r0, sp, #32
   b5554:	f009 f9fe 	bl	be954 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5558:	9805      	ldr	r0, [sp, #20]
   b555a:	2800      	cmp	r0, #0
   b555c:	f43f af26 	beq.w	b53ac <loop+0x40>
            free(wakeupSource_);
   b5560:	f006 fe96 	bl	bc290 <free>
		} break;
   b5564:	e722      	b.n	b53ac <loop+0x40>
   b5566:	bf00      	nop
   b5568:	2003e3da 	.word	0x2003e3da
   b556c:	2003e3d9 	.word	0x2003e3d9
   b5570:	2003e3d8 	.word	0x2003e3d8
   b5574:	2003e2b0 	.word	0x2003e2b0
   b5578:	2003d9e4 	.word	0x2003d9e4
   b557c:	2003e2d0 	.word	0x2003e2d0
   b5580:	000c0e6b 	.word	0x000c0e6b
   b5584:	2003e658 	.word	0x2003e658
   b5588:	000c10b2 	.word	0x000c10b2
   b558c:	000c2114 	.word	0x000c2114
   b5590:	00030010 	.word	0x00030010
   b5594:	000c0eab 	.word	0x000c0eab
			if (state != oldState) {
   b5598:	4bbd      	ldr	r3, [pc, #756]	; (b5890 <loop+0x524>)
   b559a:	781b      	ldrb	r3, [r3, #0]
   b559c:	2b04      	cmp	r3, #4
   b559e:	d062      	beq.n	b5666 <loop+0x2fa>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b55a0:	2b07      	cmp	r3, #7
   b55a2:	d003      	beq.n	b55ac <loop+0x240>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b55a4:	f006 fad0 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b55a8:	4bba      	ldr	r3, [pc, #744]	; (b5894 <loop+0x528>)
   b55aa:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b55ac:	f7ff fbca 	bl	b4d44 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b55b0:	f7fe fdc2 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b55b4:	f7fe fe48 	bl	b4248 <_ZN14LoRA_Functions11clearBufferEv>
   b55b8:	f009 fd7f 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b55bc:	4cb6      	ldr	r4, [pc, #728]	; (b5898 <loop+0x52c>)
   b55be:	17c3      	asrs	r3, r0, #31
   b55c0:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b55c4:	4620      	mov	r0, r4
   b55c6:	f003 fbfb 	bl	b8dc0 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b55ca:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b55ce:	a805      	add	r0, sp, #20
   b55d0:	f003 fa88 	bl	b8ae4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b55d4:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b55d8:	f000 fa34 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b55dc:	f000 fb67 	bl	b5cae <_ZNK13sysStatusData12get_openTimeEv>
   b55e0:	4286      	cmp	r6, r0
   b55e2:	db6d      	blt.n	b56c0 <loop+0x354>
   b55e4:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b55e8:	a808      	add	r0, sp, #32
   b55ea:	f003 fa7b 	bl	b8ae4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b55ee:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b55f2:	f000 fa27 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b55f6:	f000 fb5f 	bl	b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>
   b55fa:	4286      	cmp	r6, r0
   b55fc:	a808      	add	r0, sp, #32
   b55fe:	bfac      	ite	ge
   b5600:	2600      	movge	r6, #0
   b5602:	2601      	movlt	r6, #1
   b5604:	f002 ffe2 	bl	b85cc <_ZN12LocalTimeHMSD1Ev>
   b5608:	a805      	add	r0, sp, #20
   b560a:	f002 ffdf 	bl	b85cc <_ZN12LocalTimeHMSD1Ev>
   b560e:	2e00      	cmp	r6, #0
   b5610:	d058      	beq.n	b56c4 <loop+0x358>
   b5612:	f000 fa67 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5616:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5618:	f000 fd17 	bl	b604a <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b561c:	f000 fa62 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5620:	f000 fcea 	bl	b5ff8 <_ZNK17currentStatusData13get_openHoursEv>
   b5624:	4b9d      	ldr	r3, [pc, #628]	; (b589c <loop+0x530>)
   b5626:	4a9e      	ldr	r2, [pc, #632]	; (b58a0 <loop+0x534>)
   b5628:	499e      	ldr	r1, [pc, #632]	; (b58a4 <loop+0x538>)
   b562a:	2800      	cmp	r0, #0
   b562c:	bf08      	it	eq
   b562e:	461a      	moveq	r2, r3
   b5630:	a808      	add	r0, sp, #32
   b5632:	9203      	str	r2, [sp, #12]
   b5634:	f003 fa56 	bl	b8ae4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5638:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b563c:	9302      	str	r3, [sp, #8]
   b563e:	f000 fa01 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5642:	f000 fb34 	bl	b5cae <_ZNK13sysStatusData12get_openTimeEv>
   b5646:	4604      	mov	r4, r0
   b5648:	f000 f9fc 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b564c:	f000 fb34 	bl	b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>
   b5650:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5654:	e9cd 4000 	strd	r4, r0, [sp]
   b5658:	4993      	ldr	r1, [pc, #588]	; (b58a8 <loop+0x53c>)
   b565a:	4894      	ldr	r0, [pc, #592]	; (b58ac <loop+0x540>)
   b565c:	f7fe fd53 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b5660:	a808      	add	r0, sp, #32
   b5662:	f002 ffb3 	bl	b85cc <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway() && current.get_alertCodeNode() != 1) state = REPORTING_STATE; 			// Received and acknowledged data from a node - report unless there is Alert Code 1 (Unconfigured Node)
   b5666:	f7fe fd67 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b566a:	f7ff fa27 	bl	b4abc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b566e:	b138      	cbz	r0, b5680 <loop+0x314>
   b5670:	f000 fa38 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5674:	f000 fb48 	bl	b5d08 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5678:	2801      	cmp	r0, #1
   b567a:	bf1c      	itt	ne
   b567c:	2307      	movne	r3, #7
   b567e:	702b      	strbne	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5680:	4b8b      	ldr	r3, [pc, #556]	; (b58b0 <loop+0x544>)
   b5682:	781b      	ldrb	r3, [r3, #0]
   b5684:	2b00      	cmp	r3, #0
   b5686:	f47f ae91 	bne.w	b53ac <loop+0x40>
   b568a:	f006 fa5d 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b568e:	4b81      	ldr	r3, [pc, #516]	; (b5894 <loop+0x528>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	1ac0      	subs	r0, r0, r3
   b5694:	4b87      	ldr	r3, [pc, #540]	; (b58b4 <loop+0x548>)
   b5696:	4298      	cmp	r0, r3
   b5698:	f67f ae88 	bls.w	b53ac <loop+0x40>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b569c:	f7fe fd4c 	bl	b4138 <_ZN14LoRA_Functions8instanceEv>
   b56a0:	f7fe fde2 	bl	b4268 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b56a4:	f009 fd1a 	bl	bf0dc <_ZN9TimeClass4hourEv>
   b56a8:	4604      	mov	r4, r0
   b56aa:	f000 f9cb 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b56ae:	f000 fc2a 	bl	b5f06 <_ZNK13sysStatusData18get_lastConnectionEv>
   b56b2:	f009 fbd9 	bl	bee68 <_ZN9TimeClass4hourEx>
   b56b6:	4284      	cmp	r4, r0
   b56b8:	f000 80b0 	beq.w	b581c <loop+0x4b0>
   b56bc:	2305      	movs	r3, #5
   b56be:	e674      	b.n	b53aa <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour < sysStatus.get_closeTime()) current.set_openHours(true);
   b56c0:	2600      	movs	r6, #0
   b56c2:	e7a1      	b.n	b5608 <loop+0x29c>
				else current.set_openHours(false);
   b56c4:	f000 fa0e 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b56c8:	4631      	mov	r1, r6
   b56ca:	e7a5      	b.n	b5618 <loop+0x2ac>
			if (state != oldState) publishStateTransition();
   b56cc:	4b70      	ldr	r3, [pc, #448]	; (b5890 <loop+0x524>)
   b56ce:	781b      	ldrb	r3, [r3, #0]
   b56d0:	2b07      	cmp	r3, #7
   b56d2:	d001      	beq.n	b56d8 <loop+0x36c>
   b56d4:	f7ff fb36 	bl	b4d44 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b56d8:	f000 fa04 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b56dc:	f000 faf6 	bl	b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b56e0:	f7ff fb78 	bl	b4dd4 <_Z14publishWebhookh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b56e4:	f000 f9ae 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b56e8:	4604      	mov	r4, r0
   b56ea:	f000 f9ab 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b56ee:	f000 fad9 	bl	b5ca4 <_ZNK13sysStatusData16get_messageCountEv>
   b56f2:	3001      	adds	r0, #1
   b56f4:	b2c1      	uxtb	r1, r0
   b56f6:	4620      	mov	r0, r4
   b56f8:	f000 fb3a 	bl	b5d70 <_ZN13sysStatusData16set_messageCountEh>
   b56fc:	e652      	b.n	b53a4 <loop+0x38>
			if (state != oldState) {
   b56fe:	4b64      	ldr	r3, [pc, #400]	; (b5890 <loop+0x524>)
   b5700:	4c6d      	ldr	r4, [pc, #436]	; (b58b8 <loop+0x54c>)
   b5702:	781b      	ldrb	r3, [r3, #0]
   b5704:	2b05      	cmp	r3, #5
   b5706:	d025      	beq.n	b5754 <loop+0x3e8>
				publishStateTransition();  
   b5708:	f7ff fb1c 	bl	b4d44 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b570c:	f000 f99a 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5710:	f000 fbf9 	bl	b5f06 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5714:	f009 fbb0 	bl	bee78 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b5718:	4962      	ldr	r1, [pc, #392]	; (b58a4 <loop+0x538>)
   b571a:	4606      	mov	r6, r0
   b571c:	a808      	add	r0, sp, #32
   b571e:	f003 f9fe 	bl	b8b1e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b5722:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b5726:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b572a:	d005      	beq.n	b5738 <loop+0x3cc>
					resetEverything();
   b572c:	f000 fc1e 	bl	b5f6c <_Z15resetEverythingv>
					Log.info("New Day - Resetting everything");
   b5730:	4962      	ldr	r1, [pc, #392]	; (b58bc <loop+0x550>)
   b5732:	485e      	ldr	r0, [pc, #376]	; (b58ac <loop+0x540>)
   b5734:	f7fe fce7 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5738:	f000 f984 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b573c:	f000 faa8 	bl	b5c90 <_ZNK13sysStatusData14get_nodeNumberEv>
   b5740:	f7ff fb48 	bl	b4dd4 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5744:	f006 fcf4 	bl	bc130 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b5748:	b908      	cbnz	r0, b574e <loop+0x3e2>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b574a:	f006 fce9 	bl	bc120 <spark_cloud_flag_connect>
   b574e:	f006 f9fb 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b5752:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5754:	f006 fcec 	bl	bc130 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b5758:	b338      	cbz	r0, b57aa <loop+0x43e>
				sysStatus.set_lastConnection(Time.now());
   b575a:	f000 f973 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b575e:	4606      	mov	r6, r0
   b5760:	f009 fcab 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b5764:	4602      	mov	r2, r0
   b5766:	17c3      	asrs	r3, r0, #31
   b5768:	4630      	mov	r0, r6
   b576a:	f000 fbf5 	bl	b5f58 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b576e:	f000 f969 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5772:	4606      	mov	r6, r0
   b5774:	f006 f9e8 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b5778:	6821      	ldr	r1, [r4, #0]
   b577a:	1a41      	subs	r1, r0, r1
   b577c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5780:	fbb1 f1f0 	udiv	r1, r1, r0
   b5784:	4630      	mov	r0, r6
   b5786:	b289      	uxth	r1, r1
   b5788:	f000 fb82 	bl	b5e90 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b578c:	f006 fcd0 	bl	bc130 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b5790:	b338      	cbz	r0, b57e2 <loop+0x476>
   b5792:	f006 fccd 	bl	bc130 <spark_cloud_flag_connected>
        if (!connected()) {
   b5796:	b110      	cbz	r0, b579e <loop+0x432>
        return spark_sync_time(NULL);
   b5798:	2000      	movs	r0, #0
   b579a:	f006 fce1 	bl	bc160 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b579e:	f7ff fa7f 	bl	b4ca0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b57a2:	b950      	cbnz	r0, b57ba <loop+0x44e>
            spark_process();
   b57a4:	f006 fcb4 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   b57a8:	e7f9      	b.n	b579e <loop+0x432>
   b57aa:	f006 f9cd 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b57ae:	6823      	ldr	r3, [r4, #0]
   b57b0:	1ac0      	subs	r0, r0, r3
   b57b2:	4b43      	ldr	r3, [pc, #268]	; (b58c0 <loop+0x554>)
   b57b4:	4298      	cmp	r0, r3
   b57b6:	d8d0      	bhi.n	b575a <loop+0x3ee>
   b57b8:	e5f8      	b.n	b53ac <loop+0x40>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b57ba:	f7ff fa71 	bl	b4ca0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b57be:	4941      	ldr	r1, [pc, #260]	; (b58c4 <loop+0x558>)
   b57c0:	a808      	add	r0, sp, #32
   b57c2:	f006 fe57 	bl	bc474 <_ZN5spark13CellularClass4RSSIEv>
					sysStatus.set_RSSI(sig.getStrength());
   b57c6:	f000 f93d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b57ca:	4604      	mov	r4, r0
   b57cc:	a808      	add	r0, sp, #32
   b57ce:	f006 fecd 	bl	bc56c <_ZNK14CellularSignal11getStrengthEv>
   b57d2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   b57d6:	4620      	mov	r0, r4
   b57d8:	ee10 3a10 	vmov	r3, s0
   b57dc:	b299      	uxth	r1, r3
   b57de:	f000 fb63 	bl	b5ea8 <_ZN13sysStatusData8set_RSSIEt>
				state = DISCONNECTING_STATE;											// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b57e2:	2306      	movs	r3, #6
   b57e4:	e5e1      	b.n	b53aa <loop+0x3e>
			if (state != oldState) {
   b57e6:	4b2a      	ldr	r3, [pc, #168]	; (b5890 <loop+0x524>)
   b57e8:	4c37      	ldr	r4, [pc, #220]	; (b58c8 <loop+0x55c>)
   b57ea:	781b      	ldrb	r3, [r3, #0]
   b57ec:	2b06      	cmp	r3, #6
   b57ee:	d004      	beq.n	b57fa <loop+0x48e>
				publishStateTransition(); 
   b57f0:	f7ff faa8 	bl	b4d44 <_Z22publishStateTransitionv>
   b57f4:	f006 f9a8 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b57f8:	6020      	str	r0, [r4, #0]
   b57fa:	f006 f9a5 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b57fe:	6823      	ldr	r3, [r4, #0]
   b5800:	1ac0      	subs	r0, r0, r3
   b5802:	4b32      	ldr	r3, [pc, #200]	; (b58cc <loop+0x560>)
   b5804:	4298      	cmp	r0, r3
   b5806:	f67f add1 	bls.w	b53ac <loop+0x40>
   b580a:	f003 fdc9 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
   b580e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b5812:	2b00      	cmp	r3, #0
   b5814:	f43f adca 	beq.w	b53ac <loop+0x40>
				disconnectFromParticle();
   b5818:	f000 ffe2 	bl	b67e0 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b581c:	2302      	movs	r3, #2
   b581e:	e5c4      	b.n	b53aa <loop+0x3e>
			static system_tick_t resetTimeout = millis();
   b5820:	4c2b      	ldr	r4, [pc, #172]	; (b58d0 <loop+0x564>)
   b5822:	4e2c      	ldr	r6, [pc, #176]	; (b58d4 <loop+0x568>)
   b5824:	7823      	ldrb	r3, [r4, #0]
   b5826:	f3bf 8f5b 	dmb	ish
   b582a:	f013 0f01 	tst.w	r3, #1
   b582e:	d109      	bne.n	b5844 <loop+0x4d8>
   b5830:	4620      	mov	r0, r4
   b5832:	f7fe fc43 	bl	b40bc <__cxa_guard_acquire>
   b5836:	b128      	cbz	r0, b5844 <loop+0x4d8>
   b5838:	f006 f986 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b583c:	6030      	str	r0, [r6, #0]
   b583e:	4620      	mov	r0, r4
   b5840:	f7fe fc41 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b5844:	4b12      	ldr	r3, [pc, #72]	; (b5890 <loop+0x524>)
   b5846:	782a      	ldrb	r2, [r5, #0]
   b5848:	781b      	ldrb	r3, [r3, #0]
   b584a:	429a      	cmp	r2, r3
   b584c:	d001      	beq.n	b5852 <loop+0x4e6>
   b584e:	f7ff fa79 	bl	b4d44 <_Z22publishStateTransitionv>
   b5852:	f006 f979 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b5856:	6833      	ldr	r3, [r6, #0]
   b5858:	1ac0      	subs	r0, r0, r3
   b585a:	f247 5330 	movw	r3, #30000	; 0x7530
   b585e:	4298      	cmp	r0, r3
   b5860:	f67f ada4 	bls.w	b53ac <loop+0x40>
				Log.info("Deep power down device");
   b5864:	491c      	ldr	r1, [pc, #112]	; (b58d8 <loop+0x56c>)
   b5866:	4811      	ldr	r0, [pc, #68]	; (b58ac <loop+0x540>)
   b5868:	f7fe fc4d 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b586c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5870:	f006 fd86 	bl	bc380 <delay>
				ab1805.deepPowerDown(); 
   b5874:	211e      	movs	r1, #30
   b5876:	4819      	ldr	r0, [pc, #100]	; (b58dc <loop+0x570>)
   b5878:	f001 fbf0 	bl	b705c <_ZN6AB180513deepPowerDownEi>
   b587c:	e596      	b.n	b53ac <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b587e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5882:	e62b      	b.n	b54dc <loop+0x170>
                valid_ = false;
   b5884:	7526      	strb	r6, [r4, #20]
                return *this;
   b5886:	e629      	b.n	b54dc <loop+0x170>
}
   b5888:	b010      	add	sp, #64	; 0x40
   b588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b588e:	bf00      	nop
   b5890:	2003e3d9 	.word	0x2003e3d9
   b5894:	2003e2a4 	.word	0x2003e2a4
   b5898:	2003e2e8 	.word	0x2003e2e8
   b589c:	000c0e64 	.word	0x000c0e64
   b58a0:	000c0e5f 	.word	0x000c0e5f
   b58a4:	2003e350 	.word	0x2003e350
   b58a8:	000c0ecc 	.word	0x000c0ecc
   b58ac:	2003e658 	.word	0x2003e658
   b58b0:	2003e3db 	.word	0x2003e3db
   b58b4:	000249f0 	.word	0x000249f0
   b58b8:	2003e2a8 	.word	0x2003e2a8
   b58bc:	000c0f15 	.word	0x000c0f15
   b58c0:	000927c0 	.word	0x000927c0
   b58c4:	2003e584 	.word	0x2003e584
   b58c8:	2003e2ac 	.word	0x2003e2ac
   b58cc:	00015f90 	.word	0x00015f90
   b58d0:	2003e298 	.word	0x2003e298
   b58d4:	2003e2a0 	.word	0x2003e2a0
   b58d8:	000c0f34 	.word	0x000c0f34
   b58dc:	2003e2b0 	.word	0x2003e2b0

000b58e0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b58e0:	b510      	push	{r4, lr}
   b58e2:	4b03      	ldr	r3, [pc, #12]	; (b58f0 <_ZN8MB85RC64D1Ev+0x10>)
   b58e4:	6003      	str	r3, [r0, #0]
   b58e6:	4604      	mov	r4, r0
   b58e8:	f003 fb18 	bl	b8f1c <_ZN6MB85RCD1Ev>
   b58ec:	4620      	mov	r0, r4
   b58ee:	bd10      	pop	{r4, pc}
   b58f0:	000c0fe4 	.word	0x000c0fe4

000b58f4 <_ZN8MB85RC64D0Ev>:
   b58f4:	b510      	push	{r4, lr}
   b58f6:	4604      	mov	r4, r0
   b58f8:	f7ff fff2 	bl	b58e0 <_ZN8MB85RC64D1Ev>
   b58fc:	4620      	mov	r0, r4
   b58fe:	2110      	movs	r1, #16
   b5900:	f7fe fbcd 	bl	b409e <_ZdlPvj>
   b5904:	4620      	mov	r0, r4
   b5906:	bd10      	pop	{r4, pc}

000b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5908:	b510      	push	{r4, lr}
            if (!handle_) {
   b590a:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b590c:	4604      	mov	r4, r0
            if (!handle_) {
   b590e:	b90b      	cbnz	r3, b5914 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5910:	f006 f8ca 	bl	bbaa8 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5914:	6820      	ldr	r0, [r4, #0]
        }
   b5916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b591a:	f006 b8d5 	b.w	bbac8 <os_mutex_recursive_lock>

000b591e <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b591e:	b538      	push	{r3, r4, r5, lr}
   b5920:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5922:	3004      	adds	r0, #4
   b5924:	f7ff fff0 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5928:	6a20      	ldr	r0, [r4, #32]
   b592a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b592c:	6803      	ldr	r3, [r0, #0]
   b592e:	68dd      	ldr	r5, [r3, #12]
   b5930:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5934:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5936:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b593c:	f006 b8cc 	b.w	bbad8 <os_mutex_recursive_unlock>

000b5940 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5940:	b538      	push	{r3, r4, r5, lr}
   b5942:	4604      	mov	r4, r0
   b5944:	3004      	adds	r0, #4
   b5946:	f7ff ffdf 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b594a:	6a20      	ldr	r0, [r4, #32]
   b594c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b594e:	6803      	ldr	r3, [r0, #0]
   b5950:	689d      	ldr	r5, [r3, #8]
   b5952:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5956:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5958:	68a2      	ldr	r2, [r4, #8]
   b595a:	6823      	ldr	r3, [r4, #0]
   b595c:	88d1      	ldrh	r1, [r2, #6]
   b595e:	695b      	ldr	r3, [r3, #20]
   b5960:	4620      	mov	r0, r4
   b5962:	4798      	blx	r3
   b5964:	b918      	cbnz	r0, b596e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5966:	6823      	ldr	r3, [r4, #0]
   b5968:	4620      	mov	r0, r4
   b596a:	699b      	ldr	r3, [r3, #24]
   b596c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b596e:	6860      	ldr	r0, [r4, #4]
   b5970:	f006 f8b2 	bl	bbad8 <os_mutex_recursive_unlock>
        }
   b5974:	2001      	movs	r0, #1
   b5976:	bd38      	pop	{r3, r4, r5, pc}

000b5978 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5978:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b597a:	4b04      	ldr	r3, [pc, #16]	; (b598c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b597c:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b597e:	4604      	mov	r4, r0
            if (handle_) {
   b5980:	6840      	ldr	r0, [r0, #4]
   b5982:	b108      	cbz	r0, b5988 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5984:	f006 f898 	bl	bbab8 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5988:	4620      	mov	r0, r4
   b598a:	bd10      	pop	{r4, pc}
   b598c:	000c1e08 	.word	0x000c1e08

000b5990 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b5990:	b510      	push	{r4, lr}
   b5992:	4b03      	ldr	r3, [pc, #12]	; (b59a0 <_ZN13sysStatusDataD1Ev+0x10>)
   b5994:	6003      	str	r3, [r0, #0]
   b5996:	4604      	mov	r4, r0
   b5998:	f7ff ffee 	bl	b5978 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b599c:	4620      	mov	r0, r4
   b599e:	bd10      	pop	{r4, pc}
   b59a0:	000c102c 	.word	0x000c102c

000b59a4 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b59a4:	b510      	push	{r4, lr}
   b59a6:	4604      	mov	r4, r0
}
   b59a8:	f7ff fff2 	bl	b5990 <_ZN13sysStatusDataD1Ev>
   b59ac:	4620      	mov	r0, r4
   b59ae:	2168      	movs	r1, #104	; 0x68
   b59b0:	f7fe fb75 	bl	b409e <_ZdlPvj>
   b59b4:	4620      	mov	r0, r4
   b59b6:	bd10      	pop	{r4, pc}

000b59b8 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b59b8:	b510      	push	{r4, lr}
   b59ba:	4b03      	ldr	r3, [pc, #12]	; (b59c8 <_ZN17currentStatusDataD1Ev+0x10>)
   b59bc:	6003      	str	r3, [r0, #0]
   b59be:	4604      	mov	r4, r0
   b59c0:	f7ff ffda 	bl	b5978 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b59c4:	4620      	mov	r0, r4
   b59c6:	bd10      	pop	{r4, pc}
   b59c8:	000c1058 	.word	0x000c1058

000b59cc <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b59cc:	b510      	push	{r4, lr}
   b59ce:	4604      	mov	r4, r0
}
   b59d0:	f7ff fff2 	bl	b59b8 <_ZN17currentStatusDataD1Ev>
   b59d4:	4620      	mov	r0, r4
   b59d6:	2170      	movs	r1, #112	; 0x70
   b59d8:	f7fe fb61 	bl	b409e <_ZdlPvj>
   b59dc:	4620      	mov	r0, r4
   b59de:	bd10      	pop	{r4, pc}

000b59e0 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b59e0:	b510      	push	{r4, lr}
   b59e2:	4b03      	ldr	r3, [pc, #12]	; (b59f0 <_ZN10nodeIDDataD1Ev+0x10>)
   b59e4:	6003      	str	r3, [r0, #0]
   b59e6:	4604      	mov	r4, r0
   b59e8:	f7ff ffc6 	bl	b5978 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b59ec:	4620      	mov	r0, r4
   b59ee:	bd10      	pop	{r4, pc}
   b59f0:	000c1000 	.word	0x000c1000

000b59f4 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b59f4:	b510      	push	{r4, lr}
   b59f6:	4604      	mov	r4, r0
}
   b59f8:	f7ff fff2 	bl	b59e0 <_ZN10nodeIDDataD1Ev>
   b59fc:	4620      	mov	r0, r4
   b59fe:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b5a02:	f7fe fb4c 	bl	b409e <_ZdlPvj>
   b5a06:	4620      	mov	r0, r4
   b5a08:	bd10      	pop	{r4, pc}
	...

000b5a0c <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5a0c:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a10:	6081      	str	r1, [r0, #8]
   b5a12:	4909      	ldr	r1, [pc, #36]	; (b5a38 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5a14:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b5a18:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5a1c:	2101      	movs	r1, #1
   b5a1e:	8281      	strh	r1, [r0, #20]
   b5a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5a24:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a26:	4905      	ldr	r1, [pc, #20]	; (b5a3c <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a28:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a2a:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a2e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a30:	6182      	str	r2, [r0, #24]
   b5a32:	4a03      	ldr	r2, [pc, #12]	; (b5a40 <_ZN13sysStatusDataC1Ev+0x34>)
   b5a34:	6002      	str	r2, [r0, #0]
};
   b5a36:	4770      	bx	lr
   b5a38:	20a99e75 	.word	0x20a99e75
   b5a3c:	2003e3ec 	.word	0x2003e3ec
   b5a40:	000c102c 	.word	0x000c102c

000b5a44 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5a44:	b510      	push	{r4, lr}
    if (!_instance) {
   b5a46:	4c06      	ldr	r4, [pc, #24]	; (b5a60 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5a48:	6823      	ldr	r3, [r4, #0]
   b5a4a:	b93b      	cbnz	r3, b5a5c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5a4c:	2068      	movs	r0, #104	; 0x68
   b5a4e:	f7fe fb22 	bl	b4096 <_Znwj>
   b5a52:	4603      	mov	r3, r0
   b5a54:	b108      	cbz	r0, b5a5a <_ZN13sysStatusData8instanceEv+0x16>
   b5a56:	f7ff ffd9 	bl	b5a0c <_ZN13sysStatusDataC1Ev>
   b5a5a:	6023      	str	r3, [r4, #0]
}
   b5a5c:	6820      	ldr	r0, [r4, #0]
   b5a5e:	bd10      	pop	{r4, pc}
   b5a60:	2003e3e4 	.word	0x2003e3e4

000b5a64 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5a64:	b508      	push	{r3, lr}
    fram.begin();
   b5a66:	6a00      	ldr	r0, [r0, #32]
   b5a68:	f003 fa6e 	bl	b8f48 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5a6c:	f7ff ffea 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5a70:	6803      	ldr	r3, [r0, #0]
   b5a72:	685b      	ldr	r3, [r3, #4]
   b5a74:	4798      	blx	r3
}
   b5a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b5a7a:	f000 bb69 	b.w	b6150 <_Z23setGatewayConfigurationv>

000b5a7e <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5a7e:	b510      	push	{r4, lr}
    fram.begin();
   b5a80:	6a00      	ldr	r0, [r0, #32]
   b5a82:	f003 fa61 	bl	b8f48 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5a86:	f7ff ffdd 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5a8a:	6803      	ldr	r3, [r0, #0]
}
   b5a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5a90:	685b      	ldr	r3, [r3, #4]
   b5a92:	4718      	bx	r3

000b5a94 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5a94:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5a96:	f7ff ffd5 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5a9a:	6803      	ldr	r3, [r0, #0]
}
   b5a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5aa0:	68db      	ldr	r3, [r3, #12]
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	4718      	bx	r3
	...

000b5aa8 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5aa8:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5aaa:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5aae:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ab0:	6182      	str	r2, [r0, #24]
   b5ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ab6:	6081      	str	r1, [r0, #8]
   b5ab8:	61c2      	str	r2, [r0, #28]
   b5aba:	4907      	ldr	r1, [pc, #28]	; (b5ad8 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5abc:	4a07      	ldr	r2, [pc, #28]	; (b5adc <_ZN17currentStatusDataC1Ev+0x34>)
   b5abe:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ac0:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ac4:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ac6:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5aca:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5acc:	2101      	movs	r1, #1
   b5ace:	4a04      	ldr	r2, [pc, #16]	; (b5ae0 <_ZN17currentStatusDataC1Ev+0x38>)
   b5ad0:	8281      	strh	r1, [r0, #20]
   b5ad2:	6002      	str	r2, [r0, #0]
};
   b5ad4:	4770      	bx	lr
   b5ad6:	bf00      	nop
   b5ad8:	20a99e74 	.word	0x20a99e74
   b5adc:	2003e3ec 	.word	0x2003e3ec
   b5ae0:	000c1058 	.word	0x000c1058

000b5ae4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5ae4:	b510      	push	{r4, lr}
    if (!_instance) {
   b5ae6:	4c06      	ldr	r4, [pc, #24]	; (b5b00 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5ae8:	6823      	ldr	r3, [r4, #0]
   b5aea:	b93b      	cbnz	r3, b5afc <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5aec:	2070      	movs	r0, #112	; 0x70
   b5aee:	f7fe fad2 	bl	b4096 <_Znwj>
   b5af2:	4603      	mov	r3, r0
   b5af4:	b108      	cbz	r0, b5afa <_ZN17currentStatusData8instanceEv+0x16>
   b5af6:	f7ff ffd7 	bl	b5aa8 <_ZN17currentStatusDataC1Ev>
   b5afa:	6023      	str	r3, [r4, #0]
}
   b5afc:	6820      	ldr	r0, [r4, #0]
   b5afe:	bd10      	pop	{r4, pc}
   b5b00:	2003e3e8 	.word	0x2003e3e8

000b5b04 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5b04:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5b06:	f7ff ff9d 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5b0a:	6803      	ldr	r3, [r0, #0]
}
   b5b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5b10:	68db      	ldr	r3, [r3, #12]
   b5b12:	2100      	movs	r1, #0
   b5b14:	4718      	bx	r3
	...

000b5b18 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5b18:	b510      	push	{r4, lr}
   b5b1a:	4604      	mov	r4, r0
   b5b1c:	ed2d 8b02 	vpush	{d8}
   b5b20:	3004      	adds	r0, #4
   b5b22:	f7ff fef1 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b26:	68e3      	ldr	r3, [r4, #12]
   b5b28:	3b08      	subs	r3, #8
   b5b2a:	2b17      	cmp	r3, #23
   b5b2c:	d90c      	bls.n	b5b48 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5b2e:	68a3      	ldr	r3, [r4, #8]
   b5b30:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5b34:	6860      	ldr	r0, [r4, #4]
   b5b36:	f005 ffcf 	bl	bbad8 <os_mutex_recursive_unlock>
}
   b5b3a:	eeb0 0a48 	vmov.f32	s0, s16
   b5b3e:	eef0 0a68 	vmov.f32	s1, s17
   b5b42:	ecbd 8b02 	vpop	{d8}
   b5b46:	bd10      	pop	{r4, pc}
            T result = 0;
   b5b48:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5b50 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5b4c:	e7f2      	b.n	b5b34 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5b4e:	bf00      	nop
	...

000b5b58 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b5b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b5a:	4604      	mov	r4, r0
   b5b5c:	3004      	adds	r0, #4
   b5b5e:	ec57 6b10 	vmov	r6, r7, d0
   b5b62:	f7ff fed1 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b66:	68e3      	ldr	r3, [r4, #12]
   b5b68:	3b08      	subs	r3, #8
   b5b6a:	2b17      	cmp	r3, #23
   b5b6c:	d912      	bls.n	b5b94 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5b6e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5b70:	4630      	mov	r0, r6
   b5b72:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5b76:	4639      	mov	r1, r7
   b5b78:	f00a f9da 	bl	bff30 <__aeabi_dcmpeq>
   b5b7c:	b950      	cbnz	r0, b5b94 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5b7e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5b82:	4620      	mov	r0, r4
   b5b84:	68a5      	ldr	r5, [r4, #8]
   b5b86:	f005 fe9f 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5b8a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5b8c:	6823      	ldr	r3, [r4, #0]
   b5b8e:	4620      	mov	r0, r4
   b5b90:	691b      	ldr	r3, [r3, #16]
   b5b92:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5b94:	6860      	ldr	r0, [r4, #4]
}
   b5b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5b9a:	f005 bf9d 	b.w	bbad8 <os_mutex_recursive_unlock>
	...

000b5ba0 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ba0:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5ba2:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5ba6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ba8:	6182      	str	r2, [r0, #24]
   b5baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5bae:	6081      	str	r1, [r0, #8]
   b5bb0:	61c2      	str	r2, [r0, #28]
   b5bb2:	4907      	ldr	r1, [pc, #28]	; (b5bd0 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5bb4:	4a07      	ldr	r2, [pc, #28]	; (b5bd4 <_ZN10nodeIDDataC1Ev+0x34>)
   b5bb6:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5bb8:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5bbc:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5bbe:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5bc2:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5bc4:	2102      	movs	r1, #2
   b5bc6:	4a04      	ldr	r2, [pc, #16]	; (b5bd8 <_ZN10nodeIDDataC1Ev+0x38>)
   b5bc8:	8281      	strh	r1, [r0, #20]
   b5bca:	6002      	str	r2, [r0, #0]
};
   b5bcc:	4770      	bx	lr
   b5bce:	bf00      	nop
   b5bd0:	20a99e60 	.word	0x20a99e60
   b5bd4:	2003e3ec 	.word	0x2003e3ec
   b5bd8:	000c1000 	.word	0x000c1000

000b5bdc <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5bdc:	b510      	push	{r4, lr}
    if (!_instance) {
   b5bde:	4c07      	ldr	r4, [pc, #28]	; (b5bfc <_ZN10nodeIDData8instanceEv+0x20>)
   b5be0:	6823      	ldr	r3, [r4, #0]
   b5be2:	b943      	cbnz	r3, b5bf6 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b5be4:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b5be8:	f7fe fa55 	bl	b4096 <_Znwj>
   b5bec:	4603      	mov	r3, r0
   b5bee:	b108      	cbz	r0, b5bf4 <_ZN10nodeIDData8instanceEv+0x18>
   b5bf0:	f7ff ffd6 	bl	b5ba0 <_ZN10nodeIDDataC1Ev>
   b5bf4:	6023      	str	r3, [r4, #0]
}
   b5bf6:	6820      	ldr	r0, [r4, #0]
   b5bf8:	bd10      	pop	{r4, pc}
   b5bfa:	bf00      	nop
   b5bfc:	2003e3e0 	.word	0x2003e3e0

000b5c00 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b5c00:	b510      	push	{r4, lr}
    fram.begin();
   b5c02:	6a00      	ldr	r0, [r0, #32]
   b5c04:	f003 f9a0 	bl	b8f48 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b5c08:	f7ff ffe8 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b5c0c:	6803      	ldr	r3, [r0, #0]
}
   b5c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5c12:	685b      	ldr	r3, [r3, #4]
   b5c14:	4718      	bx	r3

000b5c16 <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b5c16:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b5c18:	f7ff ffe0 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b5c1c:	6803      	ldr	r3, [r0, #0]
}
   b5c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5c22:	68db      	ldr	r3, [r3, #12]
   b5c24:	2100      	movs	r1, #0
   b5c26:	4718      	bx	r3

000b5c28 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:
	String result;
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
	return result;
}

bool nodeIDData::set_nodeIDJson(const char *str) {
   b5c28:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b5c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5c2e:	2110      	movs	r1, #16
   b5c30:	f005 be62 	b.w	bb8f8 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b5c34 <_Z12resetNodeIDsv>:
void resetNodeIDs() {
   b5c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String blank = "{\"nodes\":[{\"node\":1,\"dID\":\"aaaaaaaaaaaaaaaaaaaaa1\",\"last\":1667835489,\"type\":1}]}";
   b5c36:	490a      	ldr	r1, [pc, #40]	; (b5c60 <_Z12resetNodeIDsv+0x2c>)
   b5c38:	4668      	mov	r0, sp
   b5c3a:	f008 fed6 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
    nodeID.set_nodeIDJson(blank);
   b5c3e:	f7ff ffcd 	bl	b5bdc <_ZN10nodeIDData8instanceEv>
   b5c42:	9900      	ldr	r1, [sp, #0]
   b5c44:	f7ff fff0 	bl	b5c28 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b5c48:	9a00      	ldr	r2, [sp, #0]
   b5c4a:	4906      	ldr	r1, [pc, #24]	; (b5c64 <_Z12resetNodeIDsv+0x30>)
   b5c4c:	4806      	ldr	r0, [pc, #24]	; (b5c68 <_Z12resetNodeIDsv+0x34>)
   b5c4e:	f7fe fa5a 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    String blank = "{\"nodes\":[{\"node\":1,\"dID\":\"aaaaaaaaaaaaaaaaaaaaa1\",\"last\":1667835489,\"type\":1}]}";
   b5c52:	4668      	mov	r0, sp
   b5c54:	f008 fe7e 	bl	be954 <_ZN6StringD1Ev>
}
   b5c58:	b005      	add	sp, #20
   b5c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   b5c5e:	bf00      	nop
   b5c60:	000c0f4b 	.word	0x000c0f4b
   b5c64:	000c0f9c 	.word	0x000c0f9c
   b5c68:	2003e658 	.word	0x2003e658

000b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5c6c:	b538      	push	{r3, r4, r5, lr}
   b5c6e:	4604      	mov	r4, r0
   b5c70:	3004      	adds	r0, #4
   b5c72:	460d      	mov	r5, r1
   b5c74:	f7ff fe48 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c78:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5c7a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c7c:	3b01      	subs	r3, #1
   b5c7e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5c80:	bf26      	itte	cs
   b5c82:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5c84:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5c86:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5c88:	f005 ff26 	bl	bbad8 <os_mutex_recursive_unlock>
        }
   b5c8c:	4628      	mov	r0, r5
   b5c8e:	bd38      	pop	{r3, r4, r5, pc}

000b5c90 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5c90:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5c92:	2110      	movs	r1, #16
   b5c94:	f7ff ffea 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5c98:	bd08      	pop	{r3, pc}

000b5c9a <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5c9a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5c9c:	2115      	movs	r1, #21
   b5c9e:	f7ff ffe5 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ca2:	bd08      	pop	{r3, pc}

000b5ca4 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b5ca4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b5ca6:	2116      	movs	r1, #22
   b5ca8:	f7ff ffe0 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cac:	bd08      	pop	{r3, pc}

000b5cae <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b5cae:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b5cb0:	2138      	movs	r1, #56	; 0x38
   b5cb2:	f7ff ffdb 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cb6:	bd08      	pop	{r3, pc}

000b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b5cb8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b5cba:	2139      	movs	r1, #57	; 0x39
   b5cbc:	f7ff ffd6 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cc0:	bd08      	pop	{r3, pc}

000b5cc2 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5cc2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5cc4:	213b      	movs	r1, #59	; 0x3b
   b5cc6:	f7ff ffd1 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cca:	bd08      	pop	{r3, pc}

000b5ccc <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b5ccc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b5cce:	2110      	movs	r1, #16
   b5cd0:	f7ff ffcc 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cd4:	bd08      	pop	{r3, pc}

000b5cd6 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b5cd6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b5cd8:	2111      	movs	r1, #17
   b5cda:	f7ff ffc7 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cde:	bd08      	pop	{r3, pc}

000b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5ce0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5ce2:	2112      	movs	r1, #18
   b5ce4:	f7ff ffc2 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5ce8:	bd08      	pop	{r3, pc}

000b5cea <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5cea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5cec:	2120      	movs	r1, #32
   b5cee:	f7ff ffbd 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cf2:	bd08      	pop	{r3, pc}

000b5cf4 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b5cf4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b5cf6:	2121      	movs	r1, #33	; 0x21
   b5cf8:	f7ff ffb8 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5cfc:	bd08      	pop	{r3, pc}

000b5cfe <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5cfe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5d00:	2124      	movs	r1, #36	; 0x24
   b5d02:	f7ff ffb3 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5d06:	bd08      	pop	{r3, pc}

000b5d08 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b5d08:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b5d0a:	2134      	movs	r1, #52	; 0x34
   b5d0c:	f7ff ffae 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5d10:	bd08      	pop	{r3, pc}

000b5d12 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b5d12:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b5d14:	2141      	movs	r1, #65	; 0x41
   b5d16:	f7ff ffa9 	bl	b5c6c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5d1a:	bd08      	pop	{r3, pc}

000b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5d1c:	b570      	push	{r4, r5, r6, lr}
   b5d1e:	4604      	mov	r4, r0
   b5d20:	3004      	adds	r0, #4
   b5d22:	460d      	mov	r5, r1
   b5d24:	4616      	mov	r6, r2
   b5d26:	f7ff fdef 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d2a:	68e3      	ldr	r3, [r4, #12]
   b5d2c:	3b01      	subs	r3, #1
   b5d2e:	42ab      	cmp	r3, r5
   b5d30:	d30d      	bcc.n	b5d4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d32:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d34:	5d5a      	ldrb	r2, [r3, r5]
   b5d36:	42b2      	cmp	r2, r6
   b5d38:	d009      	beq.n	b5d4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5d3a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	68a5      	ldr	r5, [r4, #8]
   b5d40:	f005 fdc2 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5d44:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5d46:	6823      	ldr	r3, [r4, #0]
   b5d48:	4620      	mov	r0, r4
   b5d4a:	691b      	ldr	r3, [r3, #16]
   b5d4c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5d4e:	6860      	ldr	r0, [r4, #4]
        }
   b5d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d54:	f005 bec0 	b.w	bbad8 <os_mutex_recursive_unlock>

000b5d58 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5d58:	b508      	push	{r3, lr}
   b5d5a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5d5c:	2110      	movs	r1, #16
   b5d5e:	f7ff ffdd 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d62:	bd08      	pop	{r3, pc}

000b5d64 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5d64:	b508      	push	{r3, lr}
   b5d66:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5d68:	2115      	movs	r1, #21
   b5d6a:	f7ff ffd7 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d6e:	bd08      	pop	{r3, pc}

000b5d70 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b5d70:	b508      	push	{r3, lr}
   b5d72:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b5d74:	2116      	movs	r1, #22
   b5d76:	f7ff ffd1 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d7a:	bd08      	pop	{r3, pc}

000b5d7c <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b5d80:	2138      	movs	r1, #56	; 0x38
   b5d82:	f7ff ffcb 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d86:	bd08      	pop	{r3, pc}

000b5d88 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b5d88:	b508      	push	{r3, lr}
   b5d8a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b5d8c:	2139      	movs	r1, #57	; 0x39
   b5d8e:	f7ff ffc5 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d92:	bd08      	pop	{r3, pc}

000b5d94 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b5d94:	b508      	push	{r3, lr}
   b5d96:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b5d98:	2110      	movs	r1, #16
   b5d9a:	f7ff ffbf 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5d9e:	bd08      	pop	{r3, pc}

000b5da0 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b5da0:	b508      	push	{r3, lr}
   b5da2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b5da4:	2111      	movs	r1, #17
   b5da6:	f7ff ffb9 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5daa:	bd08      	pop	{r3, pc}

000b5dac <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5dac:	b508      	push	{r3, lr}
   b5dae:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5db0:	2112      	movs	r1, #18
   b5db2:	f7ff ffb3 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5db6:	bd08      	pop	{r3, pc}

000b5db8 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5db8:	b508      	push	{r3, lr}
   b5dba:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5dbc:	2120      	movs	r1, #32
   b5dbe:	f7ff ffad 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5dc2:	bd08      	pop	{r3, pc}

000b5dc4 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b5dc8:	2121      	movs	r1, #33	; 0x21
   b5dca:	f7ff ffa7 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5dce:	bd08      	pop	{r3, pc}

000b5dd0 <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b5dd4:	2124      	movs	r1, #36	; 0x24
   b5dd6:	f7ff ffa1 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5dda:	bd08      	pop	{r3, pc}

000b5ddc <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5de0:	2134      	movs	r1, #52	; 0x34
   b5de2:	f7ff ff9b 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5de6:	bd08      	pop	{r3, pc}

000b5de8 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b5de8:	b508      	push	{r3, lr}
   b5dea:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b5dec:	2141      	movs	r1, #65	; 0x41
   b5dee:	f7ff ff95 	bl	b5d1c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5df2:	bd08      	pop	{r3, pc}

000b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5df4:	b538      	push	{r3, r4, r5, lr}
   b5df6:	4604      	mov	r4, r0
   b5df8:	3004      	adds	r0, #4
   b5dfa:	460d      	mov	r5, r1
   b5dfc:	f7ff fd84 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e00:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5e02:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e04:	3b02      	subs	r3, #2
   b5e06:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5e08:	bf26      	itte	cs
   b5e0a:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5e0c:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5e0e:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5e10:	f005 fe62 	bl	bbad8 <os_mutex_recursive_unlock>
        }
   b5e14:	4628      	mov	r0, r5
   b5e16:	bd38      	pop	{r3, r4, r5, pc}

000b5e18 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5e18:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5e1a:	2112      	movs	r1, #18
   b5e1c:	f7ff ffea 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e20:	bd08      	pop	{r3, pc}

000b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5e22:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5e24:	212a      	movs	r1, #42	; 0x2a
   b5e26:	f7ff ffe5 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e2a:	bd08      	pop	{r3, pc}

000b5e2c <_ZNK13sysStatusData8get_RSSIEv>:
uint16_t sysStatusData::get_RSSI() const {
   b5e2c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,RSSI));
   b5e2e:	213c      	movs	r1, #60	; 0x3c
   b5e30:	f7ff ffe0 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e34:	bd08      	pop	{r3, pc}

000b5e36 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b5e36:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b5e38:	2122      	movs	r1, #34	; 0x22
   b5e3a:	f7ff ffdb 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e3e:	bd08      	pop	{r3, pc}

000b5e40 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b5e40:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5e42:	2130      	movs	r1, #48	; 0x30
   b5e44:	f7ff ffd6 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e48:	bd08      	pop	{r3, pc}

000b5e4a <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b5e4a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5e4c:	2132      	movs	r1, #50	; 0x32
   b5e4e:	f7ff ffd1 	bl	b5df4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5e52:	bd08      	pop	{r3, pc}

000b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5e54:	b570      	push	{r4, r5, r6, lr}
   b5e56:	4604      	mov	r4, r0
   b5e58:	3004      	adds	r0, #4
   b5e5a:	460d      	mov	r5, r1
   b5e5c:	4616      	mov	r6, r2
   b5e5e:	f7ff fd53 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5e62:	68e3      	ldr	r3, [r4, #12]
   b5e64:	3b02      	subs	r3, #2
   b5e66:	42ab      	cmp	r3, r5
   b5e68:	d30d      	bcc.n	b5e86 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5e6a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5e6c:	5b5a      	ldrh	r2, [r3, r5]
   b5e6e:	42b2      	cmp	r2, r6
   b5e70:	d009      	beq.n	b5e86 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5e72:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5e74:	4620      	mov	r0, r4
   b5e76:	68a5      	ldr	r5, [r4, #8]
   b5e78:	f005 fd26 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5e7c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5e7e:	6823      	ldr	r3, [r4, #0]
   b5e80:	4620      	mov	r0, r4
   b5e82:	691b      	ldr	r3, [r3, #16]
   b5e84:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e86:	6860      	ldr	r0, [r4, #4]
        }
   b5e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5e8c:	f005 be24 	b.w	bbad8 <os_mutex_recursive_unlock>

000b5e90 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b5e90:	b508      	push	{r3, lr}
   b5e92:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b5e94:	2128      	movs	r1, #40	; 0x28
   b5e96:	f7ff ffdd 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5e9a:	bd08      	pop	{r3, pc}

000b5e9c <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5ea0:	212a      	movs	r1, #42	; 0x2a
   b5ea2:	f7ff ffd7 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5ea6:	bd08      	pop	{r3, pc}

000b5ea8 <_ZN13sysStatusData8set_RSSIEt>:
void sysStatusData::set_RSSI(uint16_t value) {
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, RSSI), value);
   b5eac:	213c      	movs	r1, #60	; 0x3c
   b5eae:	f7ff ffd1 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5eb2:	bd08      	pop	{r3, pc}

000b5eb4 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b5eb8:	2122      	movs	r1, #34	; 0x22
   b5eba:	f7ff ffcb 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5ebe:	bd08      	pop	{r3, pc}

000b5ec0 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5ec4:	2130      	movs	r1, #48	; 0x30
   b5ec6:	f7ff ffc5 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5eca:	bd08      	pop	{r3, pc}

000b5ecc <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5ed0:	2132      	movs	r1, #50	; 0x32
   b5ed2:	f7ff ffbf 	bl	b5e54 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5ed6:	bd08      	pop	{r3, pc}

000b5ed8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5eda:	4604      	mov	r4, r0
   b5edc:	3004      	adds	r0, #4
   b5ede:	460d      	mov	r5, r1
   b5ee0:	f7ff fd12 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ee4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5ee6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ee8:	3b08      	subs	r3, #8
   b5eea:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5eec:	bf23      	ittte	cs
   b5eee:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5ef0:	1949      	addcs	r1, r1, r5
   b5ef2:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5ef6:	2600      	movcc	r6, #0
   b5ef8:	bf38      	it	cc
   b5efa:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5efc:	f005 fdec 	bl	bbad8 <os_mutex_recursive_unlock>
        }
   b5f00:	4630      	mov	r0, r6
   b5f02:	4639      	mov	r1, r7
   b5f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f06 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5f06:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5f08:	2120      	movs	r1, #32
   b5f0a:	f7ff ffe5 	bl	b5ed8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5f0e:	bd08      	pop	{r3, pc}

000b5f10 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f12:	4604      	mov	r4, r0
   b5f14:	3004      	adds	r0, #4
   b5f16:	460d      	mov	r5, r1
   b5f18:	461e      	mov	r6, r3
   b5f1a:	4617      	mov	r7, r2
   b5f1c:	f7ff fcf4 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f20:	68e3      	ldr	r3, [r4, #12]
   b5f22:	3b08      	subs	r3, #8
   b5f24:	42ab      	cmp	r3, r5
   b5f26:	d312      	bcc.n	b5f4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5f28:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5f2a:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5f2c:	5958      	ldr	r0, [r3, r5]
   b5f2e:	6851      	ldr	r1, [r2, #4]
   b5f30:	42b1      	cmp	r1, r6
   b5f32:	bf08      	it	eq
   b5f34:	42b8      	cmpeq	r0, r7
   b5f36:	d00a      	beq.n	b5f4e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5f38:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5f3a:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5f3c:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5f3e:	68a5      	ldr	r5, [r4, #8]
   b5f40:	f005 fcc2 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5f44:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5f46:	6823      	ldr	r3, [r4, #0]
   b5f48:	4620      	mov	r0, r4
   b5f4a:	691b      	ldr	r3, [r3, #16]
   b5f4c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5f4e:	6860      	ldr	r0, [r4, #4]
        }
   b5f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5f54:	f005 bdc0 	b.w	bbad8 <os_mutex_recursive_unlock>

000b5f58 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5f58:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5f5a:	2120      	movs	r1, #32
   b5f5c:	f7ff ffd8 	bl	b5f10 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5f60:	bd08      	pop	{r3, pc}

000b5f62 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5f62:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5f64:	2128      	movs	r1, #40	; 0x28
   b5f66:	f7ff ffd3 	bl	b5f10 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5f6a:	bd08      	pop	{r3, pc}

000b5f6c <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5f6c:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b5f6e:	4912      	ldr	r1, [pc, #72]	; (b5fb8 <_Z15resetEverythingv+0x4c>)
   b5f70:	4812      	ldr	r0, [pc, #72]	; (b5fbc <_Z15resetEverythingv+0x50>)
   b5f72:	f7fe f8c8 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5f76:	f7ff fdb5 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5f7a:	2100      	movs	r1, #0
   b5f7c:	f7ff ffa6 	bl	b5ecc <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5f80:	f7ff fdb0 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5f84:	2100      	movs	r1, #0
   b5f86:	f7ff ff9b 	bl	b5ec0 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5f8a:	f7ff fdab 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b5f8e:	4604      	mov	r4, r0
   b5f90:	f009 f893 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b5f94:	4602      	mov	r2, r0
   b5f96:	17c3      	asrs	r3, r0, #31
   b5f98:	4620      	mov	r0, r4
   b5f9a:	f7ff ffe2 	bl	b5f62 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5f9e:	f7ff fd51 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b5fa2:	2100      	movs	r1, #0
   b5fa4:	f7ff fede 	bl	b5d64 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b5fa8:	f7ff fd4c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
}
   b5fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b5fb0:	2100      	movs	r1, #0
   b5fb2:	f7ff bedd 	b.w	b5d70 <_ZN13sysStatusData16set_messageCountEh>
   b5fb6:	bf00      	nop
   b5fb8:	000c0fba 	.word	0x000c0fba
   b5fbc:	2003e658 	.word	0x2003e658

000b5fc0 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b5fc0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5fc2:	2138      	movs	r1, #56	; 0x38
   b5fc4:	f7ff ffa4 	bl	b5f10 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5fc8:	bd08      	pop	{r3, pc}

000b5fca <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5fca:	b538      	push	{r3, r4, r5, lr}
   b5fcc:	4604      	mov	r4, r0
   b5fce:	3004      	adds	r0, #4
   b5fd0:	460d      	mov	r5, r1
   b5fd2:	f7ff fc99 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fd6:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5fd8:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fda:	3b01      	subs	r3, #1
   b5fdc:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5fde:	bf26      	itte	cs
   b5fe0:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5fe2:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5fe4:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5fe6:	f005 fd77 	bl	bbad8 <os_mutex_recursive_unlock>
        }
   b5fea:	4628      	mov	r0, r5
   b5fec:	bd38      	pop	{r3, r4, r5, pc}

000b5fee <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b5fee:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b5ff0:	213a      	movs	r1, #58	; 0x3a
   b5ff2:	f7ff ffea 	bl	b5fca <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5ff6:	bd08      	pop	{r3, pc}

000b5ff8 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b5ff8:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b5ffa:	2140      	movs	r1, #64	; 0x40
   b5ffc:	f7ff ffe5 	bl	b5fca <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6000:	bd08      	pop	{r3, pc}

000b6002 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6002:	b570      	push	{r4, r5, r6, lr}
   b6004:	4604      	mov	r4, r0
   b6006:	3004      	adds	r0, #4
   b6008:	460d      	mov	r5, r1
   b600a:	4616      	mov	r6, r2
   b600c:	f7ff fc7c 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6010:	68e3      	ldr	r3, [r4, #12]
   b6012:	3b01      	subs	r3, #1
   b6014:	42ab      	cmp	r3, r5
   b6016:	d30d      	bcc.n	b6034 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6018:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b601a:	5d5a      	ldrb	r2, [r3, r5]
   b601c:	42b2      	cmp	r2, r6
   b601e:	d009      	beq.n	b6034 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b6020:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6022:	4620      	mov	r0, r4
   b6024:	68a5      	ldr	r5, [r4, #8]
   b6026:	f005 fc4f 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b602a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b602c:	6823      	ldr	r3, [r4, #0]
   b602e:	4620      	mov	r0, r4
   b6030:	691b      	ldr	r3, [r3, #16]
   b6032:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6034:	6860      	ldr	r0, [r4, #4]
        }
   b6036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b603a:	f005 bd4d 	b.w	bbad8 <os_mutex_recursive_unlock>

000b603e <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b603e:	b508      	push	{r3, lr}
   b6040:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6042:	213a      	movs	r1, #58	; 0x3a
   b6044:	f7ff ffdd 	bl	b6002 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6048:	bd08      	pop	{r3, pc}

000b604a <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b604a:	b508      	push	{r3, lr}
   b604c:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b604e:	2140      	movs	r1, #64	; 0x40
   b6050:	f7ff ffd7 	bl	b6002 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6054:	bd08      	pop	{r3, pc}
	...

000b6058 <_GLOBAL__sub_I_fram>:
   b6058:	4b08      	ldr	r3, [pc, #32]	; (b607c <_GLOBAL__sub_I_fram+0x24>)
   b605a:	2201      	movs	r2, #1
}
   b605c:	b510      	push	{r4, lr}
   b605e:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b6060:	f009 faac 	bl	bf5bc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6064:	4c06      	ldr	r4, [pc, #24]	; (b6080 <_GLOBAL__sub_I_fram+0x28>)
   b6066:	4601      	mov	r1, r0
   b6068:	2300      	movs	r3, #0
   b606a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b606e:	4620      	mov	r0, r4
   b6070:	f002 ff60 	bl	b8f34 <_ZN6MB85RCC1ER7TwoWireji>
   b6074:	4b03      	ldr	r3, [pc, #12]	; (b6084 <_GLOBAL__sub_I_fram+0x2c>)
   b6076:	6023      	str	r3, [r4, #0]
}
   b6078:	bd10      	pop	{r4, pc}
   b607a:	bf00      	nop
   b607c:	2003e3dd 	.word	0x2003e3dd
   b6080:	2003e3ec 	.word	0x2003e3ec
   b6084:	000c0fe4 	.word	0x000c0fe4

000b6088 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b6088:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b608a:	4913      	ldr	r1, [pc, #76]	; (b60d8 <_Z18initializePinModesv+0x50>)
   b608c:	4813      	ldr	r0, [pc, #76]	; (b60dc <_Z18initializePinModesv+0x54>)
   b608e:	f7fe f83a 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b6092:	2102      	movs	r1, #2
   b6094:	2004      	movs	r0, #4
   b6096:	f009 fa0f 	bl	bf4b8 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b609a:	2100      	movs	r1, #0
   b609c:	2008      	movs	r0, #8
   b609e:	f009 fa0b 	bl	bf4b8 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b60a2:	2101      	movs	r1, #1
   b60a4:	2007      	movs	r0, #7
   b60a6:	f009 fa07 	bl	bf4b8 <pinMode>
    pinMode(INT_PIN, INPUT);
   b60aa:	2100      	movs	r1, #0
   b60ac:	2012      	movs	r0, #18
   b60ae:	f009 fa03 	bl	bf4b8 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b60b2:	2101      	movs	r1, #1
   b60b4:	2011      	movs	r0, #17
   b60b6:	f009 f9ff 	bl	bf4b8 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b60ba:	2101      	movs	r1, #1
   b60bc:	2010      	movs	r0, #16
   b60be:	f009 f9fb 	bl	bf4b8 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b60c2:	2100      	movs	r1, #0
   b60c4:	2010      	movs	r0, #16
   b60c6:	f009 fa08 	bl	bf4da <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b60ca:	2100      	movs	r1, #0
   b60cc:	2011      	movs	r0, #17
   b60ce:	f009 fa04 	bl	bf4da <digitalWrite>
    return true;
}
   b60d2:	2001      	movs	r0, #1
   b60d4:	bd08      	pop	{r3, pc}
   b60d6:	bf00      	nop
   b60d8:	000c107c 	.word	0x000c107c
   b60dc:	2003e658 	.word	0x2003e658

000b60e0 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b60e0:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b60e2:	4918      	ldr	r1, [pc, #96]	; (b6144 <_Z18initializePowerCfgv+0x64>)
   b60e4:	4818      	ldr	r0, [pc, #96]	; (b6148 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b60e6:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b60e8:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b60ea:	f7fe f80c 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b60ee:	4622      	mov	r2, r4
   b60f0:	2100      	movs	r1, #0
   b60f2:	4668      	mov	r0, sp
   b60f4:	f00a f826 	bl	c0144 <memset>
   b60f8:	4622      	mov	r2, r4
   b60fa:	2100      	movs	r1, #0
   b60fc:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b6100:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b6104:	f00a f81e 	bl	c0144 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b6108:	2100      	movs	r1, #0
   b610a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b610e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b6112:	f005 ffcf 	bl	bc0b4 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b6116:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b611a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b611e:	4b0b      	ldr	r3, [pc, #44]	; (b614c <_Z18initializePowerCfgv+0x6c>)
   b6120:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b6122:	f241 0370 	movw	r3, #4208	; 0x1070
   b6126:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b612a:	9b00      	ldr	r3, [sp, #0]
   b612c:	2100      	movs	r1, #0
   b612e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b6132:	4668      	mov	r0, sp
   b6134:	9300      	str	r3, [sp, #0]
   b6136:	f005 ffbd 	bl	bc0b4 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b613a:	3800      	subs	r0, #0
   b613c:	bf18      	it	ne
   b613e:	2001      	movne	r0, #1
   b6140:	b010      	add	sp, #64	; 0x40
   b6142:	bd10      	pop	{r4, pc}
   b6144:	000c1095 	.word	0x000c1095
   b6148:	2003e658 	.word	0x2003e658
   b614c:	03840384 	.word	0x03840384

000b6150 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   b6150:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   b6152:	4905      	ldr	r1, [pc, #20]	; (b6168 <_Z23setGatewayConfigurationv+0x18>)
   b6154:	4805      	ldr	r0, [pc, #20]	; (b616c <_Z23setGatewayConfigurationv+0x1c>)
   b6156:	f7fd ffd6 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_frequencyMinutes(10);
   b615a:	f7ff fc73 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b615e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   b6162:	210a      	movs	r1, #10
   b6164:	f7ff be9a 	b.w	b5e9c <_ZN13sysStatusData20set_frequencyMinutesEt>
   b6168:	000c10ba 	.word	0x000c10ba
   b616c:	2003e658 	.word	0x2003e658

000b6170 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6170:	4770      	bx	lr

000b6172 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6172:	6a00      	ldr	r0, [r0, #32]
   b6174:	6803      	ldr	r3, [r0, #0]
   b6176:	68db      	ldr	r3, [r3, #12]
   b6178:	4718      	bx	r3
	...

000b617c <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b617c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b617e:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b6180:	f7ff fc60 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6184:	f7ff fe4d 	bl	b5e22 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6188:	4a06      	ldr	r2, [pc, #24]	; (b61a4 <_Z15reportFrequencyv+0x28>)
   b618a:	4603      	mov	r3, r0
   b618c:	2110      	movs	r1, #16
   b618e:	4668      	mov	r0, sp
   b6190:	f006 f89e 	bl	bc2d0 <snprintf>
    return reportStr;
   b6194:	4669      	mov	r1, sp
   b6196:	4620      	mov	r0, r4
   b6198:	f008 fc27 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   b619c:	4620      	mov	r0, r4
   b619e:	b004      	add	sp, #16
   b61a0:	bd10      	pop	{r4, pc}
   b61a2:	bf00      	nop
   b61a4:	000c10d9 	.word	0x000c10d9

000b61a8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b61a8:	b530      	push	{r4, r5, lr}
   b61aa:	b085      	sub	sp, #20
   b61ac:	4603      	mov	r3, r0
   b61ae:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b61b0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b61b2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b61b4:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b61b6:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b61b8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b61ba:	f006 f861 	bl	bc280 <malloc>
   b61be:	6028      	str	r0, [r5, #0]
        if (!data) {
   b61c0:	b150      	cbz	r0, b61d8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b61c2:	6822      	ldr	r2, [r4, #0]
   b61c4:	9900      	ldr	r1, [sp, #0]
   b61c6:	f009 ff95 	bl	c00f4 <memcpy>
        return 0;
   b61ca:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b61cc:	4668      	mov	r0, sp
   b61ce:	f008 fbc1 	bl	be954 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b61d2:	4620      	mov	r0, r4
   b61d4:	b005      	add	sp, #20
   b61d6:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b61d8:	4c00      	ldr	r4, [pc, #0]	; (b61dc <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b61da:	e7f7      	b.n	b61cc <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b61dc:	fffffefc 	.word	0xfffffefc

000b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b61e0:	2300      	movs	r3, #0
   b61e2:	2204      	movs	r2, #4
   b61e4:	f005 bf84 	b.w	bc0f0 <spark_variable>

000b61e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b61e8:	4b0a      	ldr	r3, [pc, #40]	; (b6214 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b61ea:	b510      	push	{r4, lr}
   b61ec:	4604      	mov	r4, r0
   b61ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b61f0:	f007 fa24 	bl	bd63c <_ZN5spark10LogManager8instanceEv>
   b61f4:	4621      	mov	r1, r4
   b61f6:	f007 fc28 	bl	bda4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b61fa:	f009 f845 	bl	bf288 <_Z16_fetch_usbserialv>
   b61fe:	f009 f835 	bl	bf26c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6202:	4620      	mov	r0, r4
   b6204:	4b04      	ldr	r3, [pc, #16]	; (b6218 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6206:	f840 3b04 	str.w	r3, [r0], #4
   b620a:	f007 fab9 	bl	bd780 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b620e:	4620      	mov	r0, r4
   b6210:	bd10      	pop	{r4, pc}
   b6212:	bf00      	nop
   b6214:	000c1360 	.word	0x000c1360
   b6218:	000c1348 	.word	0x000c1348

000b621c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b621c:	b510      	push	{r4, lr}
   b621e:	4604      	mov	r4, r0
    }
   b6220:	f7ff ffe2 	bl	b61e8 <_ZN5spark16SerialLogHandlerD1Ev>
   b6224:	4620      	mov	r0, r4
   b6226:	2124      	movs	r1, #36	; 0x24
   b6228:	f7fd ff39 	bl	b409e <_ZdlPvj>
   b622c:	4620      	mov	r0, r4
   b622e:	bd10      	pop	{r4, pc}

000b6230 <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b6230:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b6232:	2301      	movs	r3, #1
   b6234:	2208      	movs	r2, #8
   b6236:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b623a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b623e:	2300      	movs	r3, #0
   b6240:	4341      	muls	r1, r0
   b6242:	466a      	mov	r2, sp
   b6244:	4618      	mov	r0, r3
   b6246:	f005 ffa3 	bl	bc190 <spark_set_connection_property>
    }
   b624a:	b003      	add	sp, #12
   b624c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6250 <_Z20makeUpStringMessagesv>:
  * @details Looks at all the system setting values and creates the appropriate strings.  Note that this 
  * is a little inefficient but it cleans up a fair bit of code.
  * 
  */

void makeUpStringMessages() {
   b6250:	b510      	push	{r4, lr}

  if (sysStatus.get_openTime() == 0 && sysStatus.get_closeTime() == 24) {                         // Special case for 24 hour operations
   b6252:	f7ff fbf7 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6256:	f7ff fd2a 	bl	b5cae <_ZNK13sysStatusData12get_openTimeEv>
   b625a:	b978      	cbnz	r0, b627c <_Z20makeUpStringMessagesv+0x2c>
   b625c:	f7ff fbf2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6260:	f7ff fd2a 	bl	b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>
   b6264:	2818      	cmp	r0, #24
   b6266:	d109      	bne.n	b627c <_Z20makeUpStringMessagesv+0x2c>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   b6268:	490f      	ldr	r1, [pc, #60]	; (b62a8 <_Z20makeUpStringMessagesv+0x58>)
   b626a:	4810      	ldr	r0, [pc, #64]	; (b62ac <_Z20makeUpStringMessagesv+0x5c>)
   b626c:	f009 ffff 	bl	c026e <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
  }

  return;
}
   b6270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   b6274:	490c      	ldr	r1, [pc, #48]	; (b62a8 <_Z20makeUpStringMessagesv+0x58>)
   b6276:	480e      	ldr	r0, [pc, #56]	; (b62b0 <_Z20makeUpStringMessagesv+0x60>)
   b6278:	f009 bff9 	b.w	c026e <strcpy>
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.get_openTime());           // Open and Close Times
   b627c:	f7ff fbe2 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6280:	f7ff fd15 	bl	b5cae <_ZNK13sysStatusData12get_openTimeEv>
   b6284:	4a0b      	ldr	r2, [pc, #44]	; (b62b4 <_Z20makeUpStringMessagesv+0x64>)
   b6286:	4603      	mov	r3, r0
   b6288:	2108      	movs	r1, #8
   b628a:	4808      	ldr	r0, [pc, #32]	; (b62ac <_Z20makeUpStringMessagesv+0x5c>)
   b628c:	f006 f820 	bl	bc2d0 <snprintf>
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b6290:	f7ff fbd8 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6294:	f7ff fd10 	bl	b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>
}
   b6298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.get_closeTime());
   b629c:	4603      	mov	r3, r0
   b629e:	4a05      	ldr	r2, [pc, #20]	; (b62b4 <_Z20makeUpStringMessagesv+0x64>)
   b62a0:	4803      	ldr	r0, [pc, #12]	; (b62b0 <_Z20makeUpStringMessagesv+0x60>)
   b62a2:	2108      	movs	r1, #8
   b62a4:	f006 b814 	b.w	bc2d0 <snprintf>
   b62a8:	000c10e4 	.word	0x000c10e4
   b62ac:	2003da80 	.word	0x2003da80
   b62b0:	2003da78 	.word	0x2003da78
   b62b4:	000c10e7 	.word	0x000c10e7

000b62b8 <_Z18particleInitializev>:
void particleInitialize() {
   b62b8:	b510      	push	{r4, lr}
   b62ba:	b08c      	sub	sp, #48	; 0x30
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b62bc:	4b37      	ldr	r3, [pc, #220]	; (b639c <_Z18particleInitializev+0xe4>)
   b62be:	9304      	str	r3, [sp, #16]
   b62c0:	4b37      	ldr	r3, [pc, #220]	; (b63a0 <_Z18particleInitializev+0xe8>)
   b62c2:	9305      	str	r3, [sp, #20]
   b62c4:	4b37      	ldr	r3, [pc, #220]	; (b63a4 <_Z18particleInitializev+0xec>)
   b62c6:	9306      	str	r3, [sp, #24]
   b62c8:	4b37      	ldr	r3, [pc, #220]	; (b63a8 <_Z18particleInitializev+0xf0>)
   b62ca:	9307      	str	r3, [sp, #28]
   b62cc:	4b37      	ldr	r3, [pc, #220]	; (b63ac <_Z18particleInitializev+0xf4>)
   b62ce:	9308      	str	r3, [sp, #32]
   b62d0:	4b37      	ldr	r3, [pc, #220]	; (b63b0 <_Z18particleInitializev+0xf8>)
   b62d2:	9309      	str	r3, [sp, #36]	; 0x24
   b62d4:	2400      	movs	r4, #0
   b62d6:	4b37      	ldr	r3, [pc, #220]	; (b63b4 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b62d8:	4937      	ldr	r1, [pc, #220]	; (b63b8 <_Z18particleInitializev+0x100>)
   b62da:	4838      	ldr	r0, [pc, #224]	; (b63bc <_Z18particleInitializev+0x104>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b62dc:	930a      	str	r3, [sp, #40]	; 0x28
   b62de:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b62e0:	f7fd ff11 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
        return _variable(name, std::forward<ArgsT>(args)...);
   b62e4:	4936      	ldr	r1, [pc, #216]	; (b63c0 <_Z18particleInitializev+0x108>)
   b62e6:	4837      	ldr	r0, [pc, #220]	; (b63c4 <_Z18particleInitializev+0x10c>)
   b62e8:	f7ff ff7a 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b62ec:	4936      	ldr	r1, [pc, #216]	; (b63c8 <_Z18particleInitializev+0x110>)
   b62ee:	4837      	ldr	r0, [pc, #220]	; (b63cc <_Z18particleInitializev+0x114>)
   b62f0:	f7ff ff76 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b62f4:	f7ff fbf6 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b62f8:	f7ff fc0e 	bl	b5b18 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b62fc:	4623      	mov	r3, r4
   b62fe:	2209      	movs	r2, #9
   b6300:	4669      	mov	r1, sp
   b6302:	4833      	ldr	r0, [pc, #204]	; (b63d0 <_Z18particleInitializev+0x118>)
   b6304:	ed8d 0b00 	vstr	d0, [sp]
   b6308:	f005 fef2 	bl	bc0f0 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b630c:	f7ff fbea 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6310:	f7ff fceb 	bl	b5cea <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b6314:	ab0c      	add	r3, sp, #48	; 0x30
   b6316:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b631a:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b631e:	482d      	ldr	r0, [pc, #180]	; (b63d4 <_Z18particleInitializev+0x11c>)
   b6320:	f7ff ff5e 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b6324:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b6326:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b632a:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b632e:	4b2a      	ldr	r3, [pc, #168]	; (b63d8 <_Z18particleInitializev+0x120>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6330:	492a      	ldr	r1, [pc, #168]	; (b63dc <_Z18particleInitializev+0x124>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b6332:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b6334:	2204      	movs	r2, #4
   b6336:	466b      	mov	r3, sp
   b6338:	4829      	ldr	r0, [pc, #164]	; (b63e0 <_Z18particleInitializev+0x128>)
   b633a:	f005 fed9 	bl	bc0f0 <spark_variable>
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b633e:	f7ff fb81 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6342:	f7ff fe54 	bl	b5fee <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b6346:	4a27      	ldr	r2, [pc, #156]	; (b63e4 <_Z18particleInitializev+0x12c>)
   b6348:	4927      	ldr	r1, [pc, #156]	; (b63e8 <_Z18particleInitializev+0x130>)
   b634a:	42a0      	cmp	r0, r4
   b634c:	bf18      	it	ne
   b634e:	4611      	movne	r1, r2
   b6350:	4826      	ldr	r0, [pc, #152]	; (b63ec <_Z18particleInitializev+0x134>)
   b6352:	f7ff ff45 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6356:	4926      	ldr	r1, [pc, #152]	; (b63f0 <_Z18particleInitializev+0x138>)
   b6358:	4826      	ldr	r0, [pc, #152]	; (b63f4 <_Z18particleInitializev+0x13c>)
   b635a:	f7ff ff41 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b635e:	4926      	ldr	r1, [pc, #152]	; (b63f8 <_Z18particleInitializev+0x140>)
   b6360:	4826      	ldr	r0, [pc, #152]	; (b63fc <_Z18particleInitializev+0x144>)
   b6362:	f7ff ff3d 	bl	b61e0 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6366:	4a26      	ldr	r2, [pc, #152]	; (b6400 <_Z18particleInitializev+0x148>)
   b6368:	4926      	ldr	r1, [pc, #152]	; (b6404 <_Z18particleInitializev+0x14c>)
   b636a:	4827      	ldr	r0, [pc, #156]	; (b6408 <_Z18particleInitializev+0x150>)
   b636c:	f006 f9c5 	bl	bc6fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6370:	4a26      	ldr	r2, [pc, #152]	; (b640c <_Z18particleInitializev+0x154>)
   b6372:	4927      	ldr	r1, [pc, #156]	; (b6410 <_Z18particleInitializev+0x158>)
   b6374:	4824      	ldr	r0, [pc, #144]	; (b6408 <_Z18particleInitializev+0x150>)
   b6376:	f006 f9c0 	bl	bc6fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b637a:	4a26      	ldr	r2, [pc, #152]	; (b6414 <_Z18particleInitializev+0x15c>)
   b637c:	4926      	ldr	r1, [pc, #152]	; (b6418 <_Z18particleInitializev+0x160>)
   b637e:	4822      	ldr	r0, [pc, #136]	; (b6408 <_Z18particleInitializev+0x150>)
   b6380:	f006 f9bb 	bl	bc6fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b6384:	4a19      	ldr	r2, [pc, #100]	; (b63ec <_Z18particleInitializev+0x134>)
   b6386:	4925      	ldr	r1, [pc, #148]	; (b641c <_Z18particleInitializev+0x164>)
   b6388:	481f      	ldr	r0, [pc, #124]	; (b6408 <_Z18particleInitializev+0x150>)
   b638a:	f006 f9b6 	bl	bc6fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  takeMeasurements();                               // Initialize sensor values
   b638e:	f000 fba5 	bl	b6adc <_Z16takeMeasurementsv>
}
   b6392:	b00c      	add	sp, #48	; 0x30
   b6394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
   b6398:	f7ff bf5a 	b.w	b6250 <_Z20makeUpStringMessagesv>
   b639c:	000c10f5 	.word	0x000c10f5
   b63a0:	000c10fd 	.word	0x000c10fd
   b63a4:	000c1101 	.word	0x000c1101
   b63a8:	000c110a 	.word	0x000c110a
   b63ac:	000c1112 	.word	0x000c1112
   b63b0:	000c111e 	.word	0x000c111e
   b63b4:	000c1124 	.word	0x000c1124
   b63b8:	000c1130 	.word	0x000c1130
   b63bc:	2003e658 	.word	0x2003e658
   b63c0:	2003d9dc 	.word	0x2003d9dc
   b63c4:	000c115e 	.word	0x000c115e
   b63c8:	2003dab8 	.word	0x2003dab8
   b63cc:	000c1166 	.word	0x000c1166
   b63d0:	000c116d 	.word	0x000c116d
   b63d4:	000c1178 	.word	0x000c1178
   b63d8:	000b61a9 	.word	0x000b61a9
   b63dc:	000b617d 	.word	0x000b617d
   b63e0:	000c1187 	.word	0x000c1187
   b63e4:	000c10ed 	.word	0x000c10ed
   b63e8:	000c12bc 	.word	0x000c12bc
   b63ec:	000c119b 	.word	0x000c119b
   b63f0:	2003da80 	.word	0x2003da80
   b63f4:	000c11a4 	.word	0x000c11a4
   b63f8:	2003da78 	.word	0x2003da78
   b63fc:	000c11ae 	.word	0x000c11ae
   b6400:	000c11b9 	.word	0x000c11b9
   b6404:	000b644d 	.word	0x000b644d
   b6408:	000bc6cf 	.word	0x000bc6cf
   b640c:	000c11c7 	.word	0x000c11c7
   b6410:	000b64c1 	.word	0x000b64c1
   b6414:	000c11d5 	.word	0x000c11d5
   b6418:	000b6535 	.word	0x000b6535
   b641c:	000b65a9 	.word	0x000b65a9

000b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b6420:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b6422:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6424:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b6426:	b17c      	cbz	r4, b6448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b6428:	6863      	ldr	r3, [r4, #4]
   b642a:	3b01      	subs	r3, #1
   b642c:	6063      	str	r3, [r4, #4]
   b642e:	b95b      	cbnz	r3, b6448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6430:	6823      	ldr	r3, [r4, #0]
   b6432:	4620      	mov	r0, r4
   b6434:	689b      	ldr	r3, [r3, #8]
   b6436:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6438:	68a3      	ldr	r3, [r4, #8]
   b643a:	3b01      	subs	r3, #1
   b643c:	60a3      	str	r3, [r4, #8]
   b643e:	b91b      	cbnz	r3, b6448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6440:	6823      	ldr	r3, [r4, #0]
   b6442:	4620      	mov	r0, r4
   b6444:	68db      	ldr	r3, [r3, #12]
   b6446:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b6448:	4628      	mov	r0, r5
   b644a:	bd38      	pop	{r3, r4, r5, pc}

000b644c <_Z12setFrequency6String>:
{
   b644c:	b510      	push	{r4, lr}
   b644e:	b0c6      	sub	sp, #280	; 0x118
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6450:	6800      	ldr	r0, [r0, #0]
   b6452:	220a      	movs	r2, #10
   b6454:	a903      	add	r1, sp, #12
   b6456:	f00a f821 	bl	c049c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b645a:	2878      	cmp	r0, #120	; 0x78
   b645c:	d821      	bhi.n	b64a2 <_Z12setFrequency6String+0x56>
  updatedFrequencyMins = tempTime;
   b645e:	4b12      	ldr	r3, [pc, #72]	; (b64a8 <_Z12setFrequency6String+0x5c>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b6460:	4a12      	ldr	r2, [pc, #72]	; (b64ac <_Z12setFrequency6String+0x60>)
  updatedFrequencyMins = tempTime;
   b6462:	8018      	strh	r0, [r3, #0]
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b6464:	4b12      	ldr	r3, [pc, #72]	; (b64b0 <_Z12setFrequency6String+0x64>)
   b6466:	2401      	movs	r4, #1
   b6468:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b646a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b646e:	4603      	mov	r3, r0
   b6470:	a806      	add	r0, sp, #24
   b6472:	f005 ff2d 	bl	bc2d0 <snprintf>
  Log.info(data);
   b6476:	480f      	ldr	r0, [pc, #60]	; (b64b4 <_Z12setFrequency6String+0x68>)
   b6478:	a906      	add	r1, sp, #24
   b647a:	f7fd fe44 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b647e:	f005 fe57 	bl	bc130 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b6482:	b160      	cbz	r0, b649e <_Z12setFrequency6String+0x52>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6484:	4b0c      	ldr	r3, [pc, #48]	; (b64b8 <_Z12setFrequency6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6486:	490d      	ldr	r1, [pc, #52]	; (b64bc <_Z12setFrequency6String+0x70>)
   b6488:	781b      	ldrb	r3, [r3, #0]
   b648a:	f88d 3000 	strb.w	r3, [sp]
   b648e:	a804      	add	r0, sp, #16
   b6490:	233c      	movs	r3, #60	; 0x3c
   b6492:	aa06      	add	r2, sp, #24
   b6494:	f006 fa42 	bl	bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b6498:	a805      	add	r0, sp, #20
   b649a:	f7ff ffc1 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b649e:	4620      	mov	r0, r4
   b64a0:	e000      	b.n	b64a4 <_Z12setFrequency6String+0x58>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b64a2:	2000      	movs	r0, #0
}
   b64a4:	b046      	add	sp, #280	; 0x118
   b64a6:	bd10      	pop	{r4, pc}
   b64a8:	2003da88 	.word	0x2003da88
   b64ac:	000c11e4 	.word	0x000c11e4
   b64b0:	2003e409 	.word	0x2003e409
   b64b4:	2003e658 	.word	0x2003e658
   b64b8:	2003e408 	.word	0x2003e408
   b64bc:	000c11d0 	.word	0x000c11d0

000b64c0 <_Z11setOpenTime6String>:
{
   b64c0:	b510      	push	{r4, lr}
   b64c2:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b64c4:	6800      	ldr	r0, [r0, #0]
   b64c6:	220a      	movs	r2, #10
   b64c8:	a903      	add	r1, sp, #12
   b64ca:	f009 ffe7 	bl	c049c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b64ce:	2817      	cmp	r0, #23
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   b64d0:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b64d2:	d824      	bhi.n	b651e <_Z11setOpenTime6String+0x5e>
  sysStatus.set_openTime(tempTime);
   b64d4:	f7ff fab6 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b64d8:	b2e1      	uxtb	r1, r4
   b64da:	f7ff fc4f 	bl	b5d7c <_ZN13sysStatusData12set_openTimeEh>
  snprintf(data, sizeof(data), "Wake time set to %i",sysStatus.get_openTime());
   b64de:	f7ff fab1 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b64e2:	f7ff fbe4 	bl	b5cae <_ZNK13sysStatusData12get_openTimeEv>
   b64e6:	4a0f      	ldr	r2, [pc, #60]	; (b6524 <_Z11setOpenTime6String+0x64>)
   b64e8:	4603      	mov	r3, r0
   b64ea:	2140      	movs	r1, #64	; 0x40
   b64ec:	a806      	add	r0, sp, #24
   b64ee:	f005 feef 	bl	bc2d0 <snprintf>
  Log.info(data);
   b64f2:	480d      	ldr	r0, [pc, #52]	; (b6528 <_Z11setOpenTime6String+0x68>)
   b64f4:	a906      	add	r1, sp, #24
   b64f6:	f7fd fe06 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b64fa:	f005 fe19 	bl	bc130 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b64fe:	b160      	cbz	r0, b651a <_Z11setOpenTime6String+0x5a>
   b6500:	4b0a      	ldr	r3, [pc, #40]	; (b652c <_Z11setOpenTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6502:	490b      	ldr	r1, [pc, #44]	; (b6530 <_Z11setOpenTime6String+0x70>)
   b6504:	781b      	ldrb	r3, [r3, #0]
   b6506:	f88d 3000 	strb.w	r3, [sp]
   b650a:	a804      	add	r0, sp, #16
   b650c:	233c      	movs	r3, #60	; 0x3c
   b650e:	aa06      	add	r2, sp, #24
   b6510:	f006 fa04 	bl	bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6514:	a805      	add	r0, sp, #20
   b6516:	f7ff ff83 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b651a:	2001      	movs	r0, #1
   b651c:	e000      	b.n	b6520 <_Z11setOpenTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   b651e:	2000      	movs	r0, #0
}
   b6520:	b016      	add	sp, #88	; 0x58
   b6522:	bd10      	pop	{r4, pc}
   b6524:	000c1224 	.word	0x000c1224
   b6528:	2003e658 	.word	0x2003e658
   b652c:	2003e408 	.word	0x2003e408
   b6530:	000c11d0 	.word	0x000c11d0

000b6534 <_Z12setCloseTime6String>:
{
   b6534:	b510      	push	{r4, lr}
   b6536:	b096      	sub	sp, #88	; 0x58
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6538:	6800      	ldr	r0, [r0, #0]
   b653a:	220a      	movs	r2, #10
   b653c:	a903      	add	r1, sp, #12
   b653e:	f009 ffad 	bl	c049c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6542:	2818      	cmp	r0, #24
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6544:	4604      	mov	r4, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6546:	d824      	bhi.n	b6592 <_Z12setCloseTime6String+0x5e>
  sysStatus.set_closeTime(tempTime);
   b6548:	f7ff fa7c 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b654c:	b2e1      	uxtb	r1, r4
   b654e:	f7ff fc1b 	bl	b5d88 <_ZN13sysStatusData13set_closeTimeEh>
  snprintf(data, sizeof(data), "Sleep time set to %i",sysStatus.get_closeTime());
   b6552:	f7ff fa77 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6556:	f7ff fbaf 	bl	b5cb8 <_ZNK13sysStatusData13get_closeTimeEv>
   b655a:	4a0f      	ldr	r2, [pc, #60]	; (b6598 <_Z12setCloseTime6String+0x64>)
   b655c:	4603      	mov	r3, r0
   b655e:	2140      	movs	r1, #64	; 0x40
   b6560:	a806      	add	r0, sp, #24
   b6562:	f005 feb5 	bl	bc2d0 <snprintf>
  Log.info(data);
   b6566:	480d      	ldr	r0, [pc, #52]	; (b659c <_Z12setCloseTime6String+0x68>)
   b6568:	a906      	add	r1, sp, #24
   b656a:	f7fd fdcc 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b656e:	f005 fddf 	bl	bc130 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b6572:	b160      	cbz	r0, b658e <_Z12setCloseTime6String+0x5a>
   b6574:	4b0a      	ldr	r3, [pc, #40]	; (b65a0 <_Z12setCloseTime6String+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6576:	490b      	ldr	r1, [pc, #44]	; (b65a4 <_Z12setCloseTime6String+0x70>)
   b6578:	781b      	ldrb	r3, [r3, #0]
   b657a:	f88d 3000 	strb.w	r3, [sp]
   b657e:	a804      	add	r0, sp, #16
   b6580:	233c      	movs	r3, #60	; 0x3c
   b6582:	aa06      	add	r2, sp, #24
   b6584:	f006 f9ca 	bl	bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6588:	a805      	add	r0, sp, #20
   b658a:	f7ff ff49 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b658e:	2001      	movs	r0, #1
   b6590:	e000      	b.n	b6594 <_Z12setCloseTime6String+0x60>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6592:	2000      	movs	r0, #0
}
   b6594:	b016      	add	sp, #88	; 0x58
   b6596:	bd10      	pop	{r4, pc}
   b6598:	000c1238 	.word	0x000c1238
   b659c:	2003e658 	.word	0x2003e658
   b65a0:	2003e408 	.word	0x2003e408
   b65a4:	000c11d0 	.word	0x000c11d0

000b65a8 <_Z13setVerizonSIM6String>:
{
   b65a8:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b65aa:	491e      	ldr	r1, [pc, #120]	; (b6624 <_Z13setVerizonSIM6String+0x7c>)
   b65ac:	b085      	sub	sp, #20
   b65ae:	4605      	mov	r5, r0
   b65b0:	f008 fae1 	bl	beb76 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b65b4:	4604      	mov	r4, r0
   b65b6:	b1d8      	cbz	r0, b65f0 <_Z13setVerizonSIM6String+0x48>
    sysStatus.set_verizonSIM(true);
   b65b8:	f7ff fa44 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b65bc:	2101      	movs	r1, #1
   b65be:	f7ff fd3e 	bl	b603e <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b65c2:	203c      	movs	r0, #60	; 0x3c
   b65c4:	f7ff fe34 	bl	b6230 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b65c8:	f005 fdb2 	bl	bc130 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b65cc:	b910      	cbnz	r0, b65d4 <_Z13setVerizonSIM6String+0x2c>
    return 1;
   b65ce:	2001      	movs	r0, #1
}
   b65d0:	b005      	add	sp, #20
   b65d2:	bd30      	pop	{r4, r5, pc}
   b65d4:	4b14      	ldr	r3, [pc, #80]	; (b6628 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b65d6:	4a15      	ldr	r2, [pc, #84]	; (b662c <_Z13setVerizonSIM6String+0x84>)
   b65d8:	781b      	ldrb	r3, [r3, #0]
   b65da:	f88d 3000 	strb.w	r3, [sp]
   b65de:	233c      	movs	r3, #60	; 0x3c
   b65e0:	a802      	add	r0, sp, #8
   b65e2:	4913      	ldr	r1, [pc, #76]	; (b6630 <_Z13setVerizonSIM6String+0x88>)
   b65e4:	f006 f99a 	bl	bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b65e8:	a803      	add	r0, sp, #12
   b65ea:	f7ff ff19 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65ee:	e7ee      	b.n	b65ce <_Z13setVerizonSIM6String+0x26>
   b65f0:	4910      	ldr	r1, [pc, #64]	; (b6634 <_Z13setVerizonSIM6String+0x8c>)
   b65f2:	4628      	mov	r0, r5
   b65f4:	f008 fabf 	bl	beb76 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b65f8:	2800      	cmp	r0, #0
   b65fa:	d0e9      	beq.n	b65d0 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b65fc:	f7ff fa22 	bl	b5a44 <_ZN13sysStatusData8instanceEv>
   b6600:	4621      	mov	r1, r4
   b6602:	f7ff fd1c 	bl	b603e <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b6606:	f240 5064 	movw	r0, #1380	; 0x564
   b660a:	f7ff fe11 	bl	b6230 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b660e:	f005 fd8f 	bl	bc130 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b6612:	2800      	cmp	r0, #0
   b6614:	d0db      	beq.n	b65ce <_Z13setVerizonSIM6String+0x26>
   b6616:	4b04      	ldr	r3, [pc, #16]	; (b6628 <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6618:	4a07      	ldr	r2, [pc, #28]	; (b6638 <_Z13setVerizonSIM6String+0x90>)
   b661a:	781b      	ldrb	r3, [r3, #0]
   b661c:	f88d 3000 	strb.w	r3, [sp]
   b6620:	233c      	movs	r3, #60	; 0x3c
   b6622:	e7dd      	b.n	b65e0 <_Z13setVerizonSIM6String+0x38>
   b6624:	000c13ac 	.word	0x000c13ac
   b6628:	2003e408 	.word	0x2003e408
   b662c:	000c124d 	.word	0x000c124d
   b6630:	000c1260 	.word	0x000c1260
   b6634:	000c0a08 	.word	0x000c0a08
   b6638:	000c1265 	.word	0x000c1265

000b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b663c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b663e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6642:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6644:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6646:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b664a:	42ae      	cmp	r6, r5
   b664c:	d004      	beq.n	b6658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b664e:	4628      	mov	r0, r5
   b6650:	f008 f980 	bl	be954 <_ZN6StringD1Ev>
   b6654:	3514      	adds	r5, #20
   b6656:	e7f8      	b.n	b664a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6658:	6820      	ldr	r0, [r4, #0]
   b665a:	f005 fe19 	bl	bc290 <free>
    AllocatorT::free(data_);
}
   b665e:	4620      	mov	r0, r4
   b6660:	bd70      	pop	{r4, r5, r6, pc}

000b6662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6662:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6666:	4604      	mov	r4, r0
   b6668:	460d      	mov	r5, r1
   b666a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b666c:	d916      	bls.n	b669c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b666e:	4290      	cmp	r0, r2
   b6670:	d215      	bcs.n	b669e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6672:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6676:	1a75      	subs	r5, r6, r1
   b6678:	f1a1 0714 	sub.w	r7, r1, #20
   b667c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b667e:	42b7      	cmp	r7, r6
   b6680:	d01c      	beq.n	b66bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6682:	b12c      	cbz	r4, b6690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6684:	4631      	mov	r1, r6
   b6686:	4620      	mov	r0, r4
   b6688:	f008 f9e0 	bl	bea4c <_ZN6StringC1EOS_>
   b668c:	7c33      	ldrb	r3, [r6, #16]
   b668e:	7423      	strb	r3, [r4, #16]
   b6690:	4630      	mov	r0, r6
   b6692:	f008 f95f 	bl	be954 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6696:	3e14      	subs	r6, #20
   b6698:	3c14      	subs	r4, #20
   b669a:	e7f0      	b.n	b667e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b669c:	d00e      	beq.n	b66bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b669e:	42b5      	cmp	r5, r6
   b66a0:	d00c      	beq.n	b66bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b66a2:	b12c      	cbz	r4, b66b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b66a4:	4629      	mov	r1, r5
   b66a6:	4620      	mov	r0, r4
   b66a8:	f008 f9d0 	bl	bea4c <_ZN6StringC1EOS_>
   b66ac:	7c2b      	ldrb	r3, [r5, #16]
   b66ae:	7423      	strb	r3, [r4, #16]
   b66b0:	4628      	mov	r0, r5
   b66b2:	f008 f94f 	bl	be954 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b66b6:	3514      	adds	r5, #20
   b66b8:	3414      	adds	r4, #20
   b66ba:	e7f0      	b.n	b669e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b66bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b66be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b66c2:	2300      	movs	r3, #0
   b66c4:	e9c0 3300 	strd	r3, r3, [r0]
   b66c8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b66ca:	684f      	ldr	r7, [r1, #4]
   b66cc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b66ce:	4604      	mov	r4, r0
   b66d0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b66d2:	dd23      	ble.n	b671c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b66d4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b66d8:	fb08 f007 	mul.w	r0, r8, r7
   b66dc:	f005 fdd0 	bl	bc280 <malloc>
            if (!d) {
   b66e0:	4605      	mov	r5, r0
   b66e2:	b1d8      	cbz	r0, b671c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b66e4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b66e8:	fb08 1202 	mla	r2, r8, r2, r1
   b66ec:	f7ff ffb9 	bl	b6662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b66f0:	6820      	ldr	r0, [r4, #0]
   b66f2:	f005 fdcd 	bl	bc290 <free>
        data_ = d;
   b66f6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b66f8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b66fa:	e9d6 7300 	ldrd	r7, r3, [r6]
   b66fe:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b6702:	45b8      	cmp	r8, r7
   b6704:	d008      	beq.n	b6718 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6706:	4639      	mov	r1, r7
   b6708:	4628      	mov	r0, r5
   b670a:	f008 f9b9 	bl	bea80 <_ZN6StringC1ERKS_>
   b670e:	7c3b      	ldrb	r3, [r7, #16]
   b6710:	742b      	strb	r3, [r5, #16]
   b6712:	3714      	adds	r7, #20
   b6714:	3514      	adds	r5, #20
   b6716:	e7f4      	b.n	b6702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6718:	6873      	ldr	r3, [r6, #4]
   b671a:	6063      	str	r3, [r4, #4]
}
   b671c:	4620      	mov	r0, r4
   b671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b6724 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b6724:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b6726:	4b27      	ldr	r3, [pc, #156]	; (b67c4 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b6728:	4a27      	ldr	r2, [pc, #156]	; (b67c8 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b672a:	2501      	movs	r5, #1
   b672c:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b672e:	4b27      	ldr	r3, [pc, #156]	; (b67cc <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b6730:	2400      	movs	r4, #0
   b6732:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6734:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6736:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b673a:	2002      	movs	r0, #2
   b673c:	f005 fc66 	bl	bc00c <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6740:	4621      	mov	r1, r4
   b6742:	4628      	mov	r0, r5
   b6744:	f005 fc7a 	bl	bc03c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b6748:	4629      	mov	r1, r5
   b674a:	2004      	movs	r0, #4
   b674c:	f005 f9dc 	bl	bbb08 <HAL_Feature_Set>
        capacity_(0) {
   b6750:	e9cd 4400 	strd	r4, r4, [sp]
   b6754:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b6756:	f008 fd97 	bl	bf288 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b675a:	4c1d      	ldr	r4, [pc, #116]	; (b67d0 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b675c:	4605      	mov	r5, r0
   b675e:	4669      	mov	r1, sp
   b6760:	a803      	add	r0, sp, #12
   b6762:	f7ff ffac 	bl	b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6766:	4626      	mov	r6, r4
        stream_(&stream) {
   b6768:	a903      	add	r1, sp, #12
   b676a:	a806      	add	r0, sp, #24
   b676c:	f7ff ffa7 	bl	b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6770:	4b18      	ldr	r3, [pc, #96]	; (b67d4 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b6772:	f846 3b04 	str.w	r3, [r6], #4
   b6776:	a906      	add	r1, sp, #24
   b6778:	a809      	add	r0, sp, #36	; 0x24
   b677a:	f7ff ffa0 	bl	b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b677e:	aa09      	add	r2, sp, #36	; 0x24
   b6780:	211e      	movs	r1, #30
   b6782:	4630      	mov	r0, r6
   b6784:	f007 fa44 	bl	bdc10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6788:	a809      	add	r0, sp, #36	; 0x24
   b678a:	f7ff ff57 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b678e:	a806      	add	r0, sp, #24
   b6790:	f7ff ff54 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6794:	4b10      	ldr	r3, [pc, #64]	; (b67d8 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b6796:	6023      	str	r3, [r4, #0]
   b6798:	6225      	str	r5, [r4, #32]
   b679a:	a803      	add	r0, sp, #12
   b679c:	f7ff ff4e 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b67a0:	4b0e      	ldr	r3, [pc, #56]	; (b67dc <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b67a2:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b67a4:	f008 fd70 	bl	bf288 <_Z16_fetch_usbserialv>
   b67a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b67ac:	f008 fd5a 	bl	bf264 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b67b0:	f006 ff44 	bl	bd63c <_ZN5spark10LogManager8instanceEv>
   b67b4:	4621      	mov	r1, r4
   b67b6:	f007 f901 	bl	bd9bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b67ba:	4668      	mov	r0, sp
   b67bc:	f7ff ff3e 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b67c0:	b00c      	add	sp, #48	; 0x30
   b67c2:	bd70      	pop	{r4, r5, r6, pc}
   b67c4:	2003e408 	.word	0x2003e408
   b67c8:	ffff0000 	.word	0xffff0000
   b67cc:	2003e3fc 	.word	0x2003e3fc
   b67d0:	2003e40c 	.word	0x2003e40c
   b67d4:	000c1348 	.word	0x000c1348
   b67d8:	000c1fc0 	.word	0x000c1fc0
   b67dc:	000c1360 	.word	0x000c1360

000b67e0 <_Z22disconnectFromParticlev>:
{
   b67e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67e4:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b67e6:	f008 fc68 	bl	bf0ba <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b67ea:	4943      	ldr	r1, [pc, #268]	; (b68f8 <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b67ec:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b67ee:	4843      	ldr	r0, [pc, #268]	; (b68fc <_Z22disconnectFromParticlev+0x11c>)
   b67f0:	f7fd fc89 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b67f4:	4b42      	ldr	r3, [pc, #264]	; (b6900 <_Z22disconnectFromParticlev+0x120>)
   b67f6:	8818      	ldrh	r0, [r3, #0]
   b67f8:	f006 fb62 	bl	bcec0 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b67fc:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b67fe:	a801      	add	r0, sp, #4
   b6800:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b6804:	f8ad 400c 	strh.w	r4, [sp, #12]
   b6808:	f005 ff88 	bl	bc71c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b680c:	4620      	mov	r0, r4
   b680e:	f005 f9ab 	bl	bbb68 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6812:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b6816:	4604      	mov	r4, r0
   b6818:	2000      	movs	r0, #0
   b681a:	f005 f9a5 	bl	bbb68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b681e:	1b03      	subs	r3, r0, r4
   b6820:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6824:	42b3      	cmp	r3, r6
   b6826:	f171 0300 	sbcs.w	r3, r1, #0
   b682a:	d205      	bcs.n	b6838 <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b682c:	f005 fc80 	bl	bc130 <spark_cloud_flag_connected>
   b6830:	b110      	cbz	r0, b6838 <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b6832:	f005 fc6d 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   b6836:	e7ef      	b.n	b6818 <_Z22disconnectFromParticlev+0x38>
   b6838:	f005 fc7a 	bl	bc130 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b683c:	f005 f984 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6840:	4f30      	ldr	r7, [pc, #192]	; (b6904 <_Z22disconnectFromParticlev+0x124>)
   b6842:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6844:	f005 fc64 	bl	bc110 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6848:	f005 fc72 	bl	bc130 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b684c:	4604      	mov	r4, r0
   b684e:	b140      	cbz	r0, b6862 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b6850:	492d      	ldr	r1, [pc, #180]	; (b6908 <_Z22disconnectFromParticlev+0x128>)
   b6852:	482a      	ldr	r0, [pc, #168]	; (b68fc <_Z22disconnectFromParticlev+0x11c>)
   b6854:	f7fd fc57 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b6858:	2400      	movs	r4, #0
   b685a:	4620      	mov	r0, r4
   b685c:	b005      	add	sp, #20
   b685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b6862:	f008 fc2a 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b6866:	4929      	ldr	r1, [pc, #164]	; (b690c <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b6868:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6910 <_Z22disconnectFromParticlev+0x130>
   b686c:	1b42      	subs	r2, r0, r5
   b686e:	4823      	ldr	r0, [pc, #140]	; (b68fc <_Z22disconnectFromParticlev+0x11c>)
   b6870:	f7fd fc49 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b6874:	f008 fc21 	bl	bf0ba <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6878:	4622      	mov	r2, r4
   b687a:	2102      	movs	r1, #2
   b687c:	4606      	mov	r6, r0
   b687e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6882:	f005 fcad 	bl	bc1e0 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b6886:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b688a:	4623      	mov	r3, r4
   b688c:	4622      	mov	r2, r4
   b688e:	4621      	mov	r1, r4
   b6890:	f005 fcbe 	bl	bc210 <network_off>
        return hal_timer_millis(nullptr);
   b6894:	4620      	mov	r0, r4
   b6896:	f005 f967 	bl	bbb68 <hal_timer_millis>
        while (_while() && !_condition()) {
   b689a:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b689e:	4605      	mov	r5, r0
   b68a0:	2000      	movs	r0, #0
   b68a2:	f005 f961 	bl	bbb68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b68a6:	1b43      	subs	r3, r0, r5
   b68a8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b68ac:	454b      	cmp	r3, r9
   b68ae:	f171 0300 	sbcs.w	r3, r1, #0
   b68b2:	d206      	bcs.n	b68c2 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b68b4:	4640      	mov	r0, r8
   b68b6:	f007 fcc9 	bl	be24c <_ZN5spark12NetworkClass5isOffEv>
   b68ba:	b910      	cbnz	r0, b68c2 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b68bc:	f005 fc28 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   b68c0:	e7ee      	b.n	b68a0 <_Z22disconnectFromParticlev+0xc0>
   b68c2:	4813      	ldr	r0, [pc, #76]	; (b6910 <_Z22disconnectFromParticlev+0x130>)
   b68c4:	f007 fcc2 	bl	be24c <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b68c8:	f005 f93e 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b68cc:	6038      	str	r0, [r7, #0]
    		spark_process();
   b68ce:	f005 fc1f 	bl	bc110 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b68d2:	480f      	ldr	r0, [pc, #60]	; (b6910 <_Z22disconnectFromParticlev+0x130>)
   b68d4:	f007 fcb6 	bl	be244 <_ZN5spark12NetworkClass4isOnEv>
   b68d8:	b120      	cbz	r0, b68e4 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b68da:	490e      	ldr	r1, [pc, #56]	; (b6914 <_Z22disconnectFromParticlev+0x134>)
   b68dc:	4807      	ldr	r0, [pc, #28]	; (b68fc <_Z22disconnectFromParticlev+0x11c>)
   b68de:	f7fd fc12 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b68e2:	e7ba      	b.n	b685a <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b68e4:	f008 fbe9 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b68e8:	490b      	ldr	r1, [pc, #44]	; (b6918 <_Z22disconnectFromParticlev+0x138>)
   b68ea:	1b82      	subs	r2, r0, r6
   b68ec:	4803      	ldr	r0, [pc, #12]	; (b68fc <_Z22disconnectFromParticlev+0x11c>)
   b68ee:	f7fd fc0a 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b68f2:	2401      	movs	r4, #1
   b68f4:	e7b1      	b.n	b685a <_Z22disconnectFromParticlev+0x7a>
   b68f6:	bf00      	nop
   b68f8:	000c1279 	.word	0x000c1279
   b68fc:	2003e658 	.word	0x2003e658
   b6900:	000c10b2 	.word	0x000c10b2
   b6904:	2003e710 	.word	0x2003e710
   b6908:	000c12a2 	.word	0x000c12a2
   b690c:	000c12c5 	.word	0x000c12c5
   b6910:	2003e584 	.word	0x2003e584
   b6914:	000c12ee 	.word	0x000c12ee
   b6918:	000c1314 	.word	0x000c1314

000b691c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b691c:	ee07 0a90 	vmov	s15, r0
   b6920:	ed9f 7a09 	vldr	s14, [pc, #36]	; b6948 <_Z17tmp36TemperatureCi+0x2c>
   b6924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6928:	ee67 7a87 	vmul.f32	s15, s15, s14
   b692c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b694c <_Z17tmp36TemperatureCi+0x30>
   b6930:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6934:	eddf 7a06 	vldr	s15, [pc, #24]	; b6950 <_Z17tmp36TemperatureCi+0x34>
   b6938:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b693c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6940:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6944:	4770      	bx	lr
   b6946:	bf00      	nop
   b6948:	454e4000 	.word	0x454e4000
   b694c:	457ff000 	.word	0x457ff000
   b6950:	43fa0000 	.word	0x43fa0000

000b6954 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b6954:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b6956:	2101      	movs	r1, #1
   b6958:	a801      	add	r0, sp, #4
   b695a:	f007 fd0c 	bl	be376 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b695e:	f7ff f8c1 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6962:	f7ff f9bd 	bl	b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>
   b6966:	f7ff f8bd 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b696a:	f7ff f9b9 	bl	b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>
   b696e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6970:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b6972:	d90d      	bls.n	b6990 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b6974:	f007 fd92 	bl	be49c <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b6978:	f7ff f8b4 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b697c:	2101      	movs	r1, #1
   b697e:	f7ff fa1b 	bl	b5db8 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b6982:	2400      	movs	r4, #0
  PMIC pmic(true);
   b6984:	a801      	add	r0, sp, #4
   b6986:	f007 fd05 	bl	be394 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b698a:	4620      	mov	r0, r4
   b698c:	b002      	add	sp, #8
   b698e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b6990:	f007 fd69 	bl	be466 <_ZN4PMIC14enableChargingEv>
    return true;
   b6994:	2401      	movs	r4, #1
   b6996:	e7f5      	b.n	b6984 <_Z16isItSafeToChargev+0x30>

000b6998 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b6998:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b699a:	4d19      	ldr	r5, [pc, #100]	; (b6a00 <_Z17getSignalStrengthv+0x68>)
   b699c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b699e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b69a0:	ac0c      	add	r4, sp, #48	; 0x30
   b69a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b69ac:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b69b0:	4914      	ldr	r1, [pc, #80]	; (b6a04 <_Z17getSignalStrengthv+0x6c>)
   b69b2:	a804      	add	r0, sp, #16
   b69b4:	f005 fd5e 	bl	bc474 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b69b8:	a804      	add	r0, sp, #16
   b69ba:	f005 fd9e 	bl	bc4fa <_ZNK14CellularSignal19getAccessTechnologyEv>
   b69be:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b69c0:	a804      	add	r0, sp, #16
   b69c2:	f005 fdd3 	bl	bc56c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b69c6:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b69c8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b69cc:	f005 fdfe 	bl	bc5cc <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b69d0:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b69d2:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b69d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b69da:	f008 ffe9 	bl	bf9b0 <__aeabi_f2d>
   b69de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b69e2:	4628      	mov	r0, r5
   b69e4:	f008 ffe4 	bl	bf9b0 <__aeabi_f2d>
   b69e8:	e9cd 0100 	strd	r0, r1, [sp]
   b69ec:	4a06      	ldr	r2, [pc, #24]	; (b6a08 <_Z17getSignalStrengthv+0x70>)
   b69ee:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b69f2:	4806      	ldr	r0, [pc, #24]	; (b6a0c <_Z17getSignalStrengthv+0x74>)
   b69f4:	2140      	movs	r1, #64	; 0x40
   b69f6:	f005 fc6b 	bl	bc2d0 <snprintf>
}
   b69fa:	b017      	add	sp, #92	; 0x5c
   b69fc:	bd30      	pop	{r4, r5, pc}
   b69fe:	bf00      	nop
   b6a00:	000c13f4 	.word	0x000c13f4
   b6a04:	2003e584 	.word	0x2003e584
   b6a08:	000c13ae 	.word	0x000c13ae
   b6a0c:	2003dab8 	.word	0x2003dab8

000b6a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6a10:	b530      	push	{r4, r5, lr}
   b6a12:	b085      	sub	sp, #20
   b6a14:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b6a16:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b6a18:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b6a1a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6a1c:	f005 fae4 	bl	bbfe8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6a20:	b990      	cbnz	r0, b6a48 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b6a22:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6a24:	b10c      	cbz	r4, b6a2a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b6a26:	6923      	ldr	r3, [r4, #16]
   b6a28:	b923      	cbnz	r3, b6a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b6a2a:	4a08      	ldr	r2, [pc, #32]	; (b6a4c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6a2c:	4908      	ldr	r1, [pc, #32]	; (b6a50 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6a2e:	200a      	movs	r0, #10
   b6a30:	f005 fab2 	bl	bbf98 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6a34:	230c      	movs	r3, #12
   b6a36:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b6a3a:	2304      	movs	r3, #4
   b6a3c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6a3e:	aa01      	add	r2, sp, #4
   b6a40:	6923      	ldr	r3, [r4, #16]
   b6a42:	2101      	movs	r1, #1
   b6a44:	4620      	mov	r0, r4
   b6a46:	4798      	blx	r3
}
   b6a48:	b005      	add	sp, #20
   b6a4a:	bd30      	pop	{r4, r5, pc}
   b6a4c:	000bbb39 	.word	0x000bbb39
   b6a50:	000c13c7 	.word	0x000c13c7

000b6a54 <_Z12batteryStatev>:
bool batteryState() {
   b6a54:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6a56:	f7ff f845 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6a5a:	a901      	add	r1, sp, #4
   b6a5c:	4604      	mov	r4, r0
   b6a5e:	2007      	movs	r0, #7
   b6a60:	f7ff ffd6 	bl	b6a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6a64:	1e01      	subs	r1, r0, #0
        return val;
   b6a66:	bfa8      	it	ge
   b6a68:	9901      	ldrge	r1, [sp, #4]
   b6a6a:	4620      	mov	r0, r4
   b6a6c:	b2c9      	uxtb	r1, r1
   b6a6e:	f7ff f9a3 	bl	b5db8 <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b6a72:	4818      	ldr	r0, [pc, #96]	; (b6ad4 <_Z12batteryStatev+0x80>)
   b6a74:	f006 f94c 	bl	bcd10 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b6a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6a7c:	f005 fc80 	bl	bc380 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b6a80:	f7ff f830 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6a84:	a901      	add	r1, sp, #4
   b6a86:	4604      	mov	r4, r0
   b6a88:	2003      	movs	r0, #3
   b6a8a:	f7ff ffc1 	bl	b6a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b6a8e:	b9e8      	cbnz	r0, b6acc <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b6a90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6a94:	ee07 3a90 	vmov	s15, r3
   b6a98:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6a9c:	ee17 0a90 	vmov	r0, s15
   b6aa0:	f008 ff86 	bl	bf9b0 <__aeabi_f2d>
   b6aa4:	ec41 0b10 	vmov	d0, r0, r1
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	f7ff f855 	bl	b5b58 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6aae:	f7ff f819 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6ab2:	f7ff f831 	bl	b5b18 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6ab6:	4b08      	ldr	r3, [pc, #32]	; (b6ad8 <_Z12batteryStatev+0x84>)
   b6ab8:	ec51 0b10 	vmov	r0, r1, d0
   b6abc:	2200      	movs	r2, #0
   b6abe:	f009 fa5f 	bl	bff80 <__aeabi_dcmpgt>
}
   b6ac2:	3800      	subs	r0, #0
   b6ac4:	bf18      	it	ne
   b6ac6:	2001      	movne	r0, #1
   b6ac8:	b002      	add	sp, #8
   b6aca:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6acc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6ad0:	e7e4      	b.n	b6a9c <_Z12batteryStatev+0x48>
   b6ad2:	bf00      	nop
   b6ad4:	2003e430 	.word	0x2003e430
   b6ad8:	404e0000 	.word	0x404e0000

000b6adc <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6adc:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6ade:	f7ff f801 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6ae2:	4b11      	ldr	r3, [pc, #68]	; (b6b28 <_Z16takeMeasurementsv+0x4c>)
   b6ae4:	4604      	mov	r4, r0
   b6ae6:	8818      	ldrh	r0, [r3, #0]
   b6ae8:	f008 fd23 	bl	bf532 <analogRead>
   b6aec:	f7ff ff16 	bl	b691c <_Z17tmp36TemperatureCi>
   b6af0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6af4:	4620      	mov	r0, r4
   b6af6:	edcd 7a01 	vstr	s15, [sp, #4]
   b6afa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6afe:	f7ff f955 	bl	b5dac <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6b02:	f7fe ffef 	bl	b5ae4 <_ZN17currentStatusData8instanceEv>
   b6b06:	f7ff f8eb 	bl	b5ce0 <_ZNK17currentStatusData17get_internalTempCEv>
   b6b0a:	4a08      	ldr	r2, [pc, #32]	; (b6b2c <_Z16takeMeasurementsv+0x50>)
   b6b0c:	4603      	mov	r3, r0
   b6b0e:	2110      	movs	r1, #16
   b6b10:	4807      	ldr	r0, [pc, #28]	; (b6b30 <_Z16takeMeasurementsv+0x54>)
   b6b12:	f005 fbdd 	bl	bc2d0 <snprintf>
    batteryState();
   b6b16:	f7ff ff9d 	bl	b6a54 <_Z12batteryStatev>
    isItSafeToCharge();
   b6b1a:	f7ff ff1b 	bl	b6954 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6b1e:	f7ff ff3b 	bl	b6998 <_Z17getSignalStrengthv>
}
   b6b22:	2001      	movs	r0, #1
   b6b24:	b002      	add	sp, #8
   b6b26:	bd10      	pop	{r4, pc}
   b6b28:	000c10b8 	.word	0x000c10b8
   b6b2c:	000c13ed 	.word	0x000c13ed
   b6b30:	2003daa8 	.word	0x2003daa8

000b6b34 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6b34:	4801      	ldr	r0, [pc, #4]	; (b6b3c <_GLOBAL__sub_I_batteryContext+0x8>)
   b6b36:	2100      	movs	r1, #0
   b6b38:	f006 b8a6 	b.w	bcc88 <_ZN9FuelGaugeC1Eb>
   b6b3c:	2003e430 	.word	0x2003e430

000b6b40 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6b40:	4770      	bx	lr

000b6b42 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6b42:	b510      	push	{r4, lr}
}
   b6b44:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b6b46:	4604      	mov	r4, r0
}
   b6b48:	f7fd faa9 	bl	b409e <_ZdlPvj>
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	bd10      	pop	{r4, pc}

000b6b50 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6b50:	b510      	push	{r4, lr}
   b6b52:	4604      	mov	r4, r0
   b6b54:	b08a      	sub	sp, #40	; 0x28
   b6b56:	4608      	mov	r0, r1
    attr.flags = 0;
   b6b58:	f04f 0c20 	mov.w	ip, #32
   b6b5c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6b5e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b6b62:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6b66:	460b      	mov	r3, r1
   b6b68:	aa02      	add	r2, sp, #8
   b6b6a:	6821      	ldr	r1, [r4, #0]
   b6b6c:	f005 fa24 	bl	bbfb8 <log_message_v>
}
   b6b70:	b00a      	add	sp, #40	; 0x28
   b6b72:	bd10      	pop	{r4, pc}

000b6b74 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6b74:	b40e      	push	{r1, r2, r3}
   b6b76:	b503      	push	{r0, r1, lr}
   b6b78:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6b7a:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6b7c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6b80:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b6b82:	f7ff ffe5 	bl	b6b50 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6b86:	b002      	add	sp, #8
   b6b88:	f85d eb04 	ldr.w	lr, [sp], #4
   b6b8c:	b003      	add	sp, #12
   b6b8e:	4770      	bx	lr

000b6b90 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6b90:	b40e      	push	{r1, r2, r3}
   b6b92:	b503      	push	{r0, r1, lr}
   b6b94:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6b96:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6b98:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6b9c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b6b9e:	f7ff ffd7 	bl	b6b50 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6ba2:	b002      	add	sp, #8
   b6ba4:	f85d eb04 	ldr.w	lr, [sp], #4
   b6ba8:	b003      	add	sp, #12
   b6baa:	4770      	bx	lr

000b6bac <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6bac:	b510      	push	{r4, lr}
   b6bae:	7202      	strb	r2, [r0, #8]
   b6bb0:	22ff      	movs	r2, #255	; 0xff
   b6bb2:	8142      	strh	r2, [r0, #10]
   b6bb4:	2200      	movs	r2, #0
   b6bb6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6bba:	6142      	str	r2, [r0, #20]
   b6bbc:	7602      	strb	r2, [r0, #24]
   b6bbe:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6bc0:	4a02      	ldr	r2, [pc, #8]	; (b6bcc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6bc2:	4c03      	ldr	r4, [pc, #12]	; (b6bd0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6bc4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6bc6:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6bca:	bd10      	pop	{r4, pc}
   b6bcc:	2003e43c 	.word	0x2003e43c
   b6bd0:	000c166c 	.word	0x000c166c

000b6bd4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bd8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6bdc:	4604      	mov	r4, r0
   b6bde:	4689      	mov	r9, r1
   b6be0:	4616      	mov	r6, r2
   b6be2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6be4:	f1b8 0f00 	cmp.w	r8, #0
   b6be8:	d002      	beq.n	b6bf0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6bea:	6840      	ldr	r0, [r0, #4]
   b6bec:	f006 f92a 	bl	bce44 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6bf0:	7a21      	ldrb	r1, [r4, #8]
   b6bf2:	6860      	ldr	r0, [r4, #4]
   b6bf4:	f006 f903 	bl	bcdfe <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6bf8:	6860      	ldr	r0, [r4, #4]
   b6bfa:	6803      	ldr	r3, [r0, #0]
   b6bfc:	4649      	mov	r1, r9
   b6bfe:	689b      	ldr	r3, [r3, #8]
   b6c00:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6c02:	6860      	ldr	r0, [r4, #4]
   b6c04:	2100      	movs	r1, #0
   b6c06:	f006 f919 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6c0a:	4605      	mov	r5, r0
   b6c0c:	bb00      	cbnz	r0, b6c50 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6c0e:	2301      	movs	r3, #1
   b6c10:	7a21      	ldrb	r1, [r4, #8]
   b6c12:	6860      	ldr	r0, [r4, #4]
   b6c14:	463a      	mov	r2, r7
   b6c16:	f006 f8e0 	bl	bcdda <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b6c1a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6c1c:	4603      	mov	r3, r0
        if (count == num) {
   b6c1e:	d109      	bne.n	b6c34 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6c20:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6c22:	42be      	cmp	r6, r7
   b6c24:	d01c      	beq.n	b6c60 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b6c26:	6860      	ldr	r0, [r4, #4]
   b6c28:	6803      	ldr	r3, [r0, #0]
   b6c2a:	695b      	ldr	r3, [r3, #20]
   b6c2c:	4798      	blx	r3
   b6c2e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6c32:	e7f6      	b.n	b6c22 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6c34:	490b      	ldr	r1, [pc, #44]	; (b6c64 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b6c36:	480c      	ldr	r0, [pc, #48]	; (b6c68 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6c38:	464a      	mov	r2, r9
   b6c3a:	f7ff ff9b 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6c3e:	f1b8 0f00 	cmp.w	r8, #0
   b6c42:	d002      	beq.n	b6c4a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6c44:	6860      	ldr	r0, [r4, #4]
   b6c46:	f006 f906 	bl	bce56 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b6c4a:	4628      	mov	r0, r5
   b6c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6c50:	4603      	mov	r3, r0
   b6c52:	4906      	ldr	r1, [pc, #24]	; (b6c6c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6c54:	4804      	ldr	r0, [pc, #16]	; (b6c68 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6c56:	464a      	mov	r2, r9
   b6c58:	f7ff ff8c 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6c5c:	2500      	movs	r5, #0
   b6c5e:	e7ee      	b.n	b6c3e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b6c60:	2501      	movs	r5, #1
   b6c62:	e7ec      	b.n	b6c3e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6c64:	000c141c 	.word	0x000c141c
   b6c68:	2003e438 	.word	0x2003e438
   b6c6c:	000c1441 	.word	0x000c1441

000b6c70 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b6c70:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b6c72:	9300      	str	r3, [sp, #0]
   b6c74:	2301      	movs	r3, #1
   b6c76:	f7ff ffad 	bl	b6bd4 <_ZN6AB180513readRegistersEhPhjb>
}
   b6c7a:	b003      	add	sp, #12
   b6c7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c80 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b6c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b6c82:	8943      	ldrh	r3, [r0, #10]
   b6c84:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6c86:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6c88:	d010      	beq.n	b6cac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6c8a:	4e19      	ldr	r6, [pc, #100]	; (b6cf0 <_ZN6AB180510detectChipEv+0x70>)
   b6c8c:	4d19      	ldr	r5, [pc, #100]	; (b6cf4 <_ZN6AB180510detectChipEv+0x74>)
   b6c8e:	f004 ff5b 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b6c92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6c96:	d209      	bcs.n	b6cac <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6c98:	8960      	ldrh	r0, [r4, #10]
   b6c9a:	f008 fc37 	bl	bf50c <digitalRead>
   b6c9e:	2801      	cmp	r0, #1
   b6ca0:	d004      	beq.n	b6cac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6ca2:	4631      	mov	r1, r6
   b6ca4:	4628      	mov	r0, r5
   b6ca6:	f7fd fa2e 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b6caa:	e7f0      	b.n	b6c8e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6cac:	2301      	movs	r3, #1
   b6cae:	f10d 0207 	add.w	r2, sp, #7
   b6cb2:	2128      	movs	r1, #40	; 0x28
   b6cb4:	4620      	mov	r0, r4
   b6cb6:	f7ff ffdb 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6cba:	b930      	cbnz	r0, b6cca <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6cbc:	480d      	ldr	r0, [pc, #52]	; (b6cf4 <_ZN6AB180510detectChipEv+0x74>)
   b6cbe:	490e      	ldr	r1, [pc, #56]	; (b6cf8 <_ZN6AB180510detectChipEv+0x78>)
   b6cc0:	f7fd fa21 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b6cc4:	2000      	movs	r0, #0
}
   b6cc6:	b002      	add	sp, #8
   b6cc8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6cce:	2b18      	cmp	r3, #24
   b6cd0:	d1f4      	bne.n	b6cbc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6cd2:	2301      	movs	r3, #1
   b6cd4:	f10d 0207 	add.w	r2, sp, #7
   b6cd8:	2129      	movs	r1, #41	; 0x29
   b6cda:	4620      	mov	r0, r4
   b6cdc:	f7ff ffc8 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6ce0:	2800      	cmp	r0, #0
   b6ce2:	d0eb      	beq.n	b6cbc <_ZN6AB180510detectChipEv+0x3c>
   b6ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ce8:	2b05      	cmp	r3, #5
   b6cea:	d1e7      	bne.n	b6cbc <_ZN6AB180510detectChipEv+0x3c>
   b6cec:	e7eb      	b.n	b6cc6 <_ZN6AB180510detectChipEv+0x46>
   b6cee:	bf00      	nop
   b6cf0:	000c1465 	.word	0x000c1465
   b6cf4:	2003e438 	.word	0x2003e438
   b6cf8:	000c147a 	.word	0x000c147a

000b6cfc <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6cfc:	b507      	push	{r0, r1, r2, lr}
   b6cfe:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6d00:	2200      	movs	r2, #0
   b6d02:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6d06:	f10d 0207 	add.w	r2, sp, #7
   b6d0a:	f7ff ffb1 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6d0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6d12:	b003      	add	sp, #12
   b6d14:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d18 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d1c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6d20:	4604      	mov	r4, r0
   b6d22:	460f      	mov	r7, r1
   b6d24:	4615      	mov	r5, r2
   b6d26:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6d28:	f1b8 0f00 	cmp.w	r8, #0
   b6d2c:	d002      	beq.n	b6d34 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6d2e:	6840      	ldr	r0, [r0, #4]
   b6d30:	f006 f888 	bl	bce44 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6d34:	7a21      	ldrb	r1, [r4, #8]
   b6d36:	6860      	ldr	r0, [r4, #4]
   b6d38:	f006 f861 	bl	bcdfe <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6d3c:	6860      	ldr	r0, [r4, #4]
   b6d3e:	6803      	ldr	r3, [r0, #0]
   b6d40:	4639      	mov	r1, r7
   b6d42:	689b      	ldr	r3, [r3, #8]
   b6d44:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6d46:	442e      	add	r6, r5
   b6d48:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6d4a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6d4c:	d005      	beq.n	b6d5a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6d4e:	6803      	ldr	r3, [r0, #0]
   b6d50:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6d54:	689b      	ldr	r3, [r3, #8]
   b6d56:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6d58:	e7f6      	b.n	b6d48 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6d5a:	2101      	movs	r1, #1
   b6d5c:	f006 f86e 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6d60:	4603      	mov	r3, r0
   b6d62:	b170      	cbz	r0, b6d82 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6d64:	4908      	ldr	r1, [pc, #32]	; (b6d88 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6d66:	4809      	ldr	r0, [pc, #36]	; (b6d8c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6d68:	463a      	mov	r2, r7
   b6d6a:	f7ff ff03 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6d6e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6d70:	f1b8 0f00 	cmp.w	r8, #0
   b6d74:	d002      	beq.n	b6d7c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6d76:	6860      	ldr	r0, [r4, #4]
   b6d78:	f006 f86d 	bl	bce56 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6d7c:	4628      	mov	r0, r5
   b6d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6d82:	2501      	movs	r5, #1
   b6d84:	e7f4      	b.n	b6d70 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6d86:	bf00      	nop
   b6d88:	000c1487 	.word	0x000c1487
   b6d8c:	2003e438 	.word	0x2003e438

000b6d90 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6d92:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6d96:	9300      	str	r3, [sp, #0]
   b6d98:	f10d 020f 	add.w	r2, sp, #15
   b6d9c:	2301      	movs	r3, #1
   b6d9e:	f7ff ffbb 	bl	b6d18 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6da2:	b005      	add	sp, #20
   b6da4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6da8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6daa:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6dac:	460c      	mov	r4, r1
   b6dae:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6db0:	491a      	ldr	r1, [pc, #104]	; (b6e1c <_ZN6AB18056setWDTEi+0x74>)
   b6db2:	481b      	ldr	r0, [pc, #108]	; (b6e20 <_ZN6AB18056setWDTEi+0x78>)
   b6db4:	f7fd f9a7 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6db8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6dba:	bfb8      	it	lt
   b6dbc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6dbe:	b97c      	cbnz	r4, b6de0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6dc0:	2301      	movs	r3, #1
   b6dc2:	4622      	mov	r2, r4
   b6dc4:	211b      	movs	r1, #27
   b6dc6:	4628      	mov	r0, r5
   b6dc8:	f7ff ffe2 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6dcc:	4915      	ldr	r1, [pc, #84]	; (b6e24 <_ZN6AB18056setWDTEi+0x7c>)
   b6dce:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6dd0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6dd2:	4813      	ldr	r0, [pc, #76]	; (b6e20 <_ZN6AB18056setWDTEi+0x78>)
   b6dd4:	f7ff fedc 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6dd8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6dda:	616c      	str	r4, [r5, #20]
}
   b6ddc:	4630      	mov	r0, r6
   b6dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6de0:	2c03      	cmp	r4, #3
   b6de2:	dd19      	ble.n	b6e18 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6de4:	10a7      	asrs	r7, r4, #2
   b6de6:	2f1f      	cmp	r7, #31
   b6de8:	bfa8      	it	ge
   b6dea:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6dec:	00ba      	lsls	r2, r7, #2
   b6dee:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6df2:	2301      	movs	r3, #1
   b6df4:	b2d2      	uxtb	r2, r2
   b6df6:	211b      	movs	r1, #27
   b6df8:	4628      	mov	r0, r5
   b6dfa:	f7ff ffc9 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6dfe:	463a      	mov	r2, r7
   b6e00:	4603      	mov	r3, r0
   b6e02:	4909      	ldr	r1, [pc, #36]	; (b6e28 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6e04:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6e06:	4806      	ldr	r0, [pc, #24]	; (b6e20 <_ZN6AB18056setWDTEi+0x78>)
   b6e08:	f7ff fec2 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6e0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6e10:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6e12:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6e14:	616f      	str	r7, [r5, #20]
   b6e16:	e7e1      	b.n	b6ddc <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6e18:	2701      	movs	r7, #1
   b6e1a:	e7e7      	b.n	b6dec <_ZN6AB18056setWDTEi+0x44>
   b6e1c:	000c14ac 	.word	0x000c14ac
   b6e20:	2003e438 	.word	0x2003e438
   b6e24:	000c14b6 	.word	0x000c14b6
   b6e28:	000c14d2 	.word	0x000c14d2

000b6e2c <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6e2c:	4b06      	ldr	r3, [pc, #24]	; (b6e48 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6e2e:	681a      	ldr	r2, [r3, #0]
   b6e30:	b14a      	cbz	r2, b6e46 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6e32:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6e36:	430b      	orrs	r3, r1
   b6e38:	d105      	bne.n	b6e46 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6e3a:	68d3      	ldr	r3, [r2, #12]
   b6e3c:	b11b      	cbz	r3, b6e46 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6e3e:	2100      	movs	r1, #0
   b6e40:	4610      	mov	r0, r2
   b6e42:	f7ff bfb1 	b.w	b6da8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6e46:	4770      	bx	lr
   b6e48:	2003e43c 	.word	0x2003e43c

000b6e4c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6e4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6e50:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6e54:	4605      	mov	r5, r0
   b6e56:	4616      	mov	r6, r2
   b6e58:	461f      	mov	r7, r3
    if (lock) {
   b6e5a:	f1b8 0f00 	cmp.w	r8, #0
   b6e5e:	d004      	beq.n	b6e6a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6e60:	6840      	ldr	r0, [r0, #4]
   b6e62:	9101      	str	r1, [sp, #4]
   b6e64:	f005 ffee 	bl	bce44 <_ZN7TwoWire4lockEv>
   b6e68:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6e6a:	9101      	str	r1, [sp, #4]
   b6e6c:	2300      	movs	r3, #0
   b6e6e:	f10d 020f 	add.w	r2, sp, #15
   b6e72:	4628      	mov	r0, r5
   b6e74:	f7ff fefc 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6e78:	4604      	mov	r4, r0
   b6e7a:	b160      	cbz	r0, b6e96 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6e7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6e80:	ea03 0206 	and.w	r2, r3, r6
   b6e84:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6e86:	4293      	cmp	r3, r2
   b6e88:	d005      	beq.n	b6e96 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6e8a:	9901      	ldr	r1, [sp, #4]
   b6e8c:	2300      	movs	r3, #0
   b6e8e:	4628      	mov	r0, r5
   b6e90:	f7ff ff7e 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
   b6e94:	4604      	mov	r4, r0
    if (lock) {
   b6e96:	f1b8 0f00 	cmp.w	r8, #0
   b6e9a:	d002      	beq.n	b6ea2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6e9c:	6868      	ldr	r0, [r5, #4]
   b6e9e:	f005 ffda 	bl	bce56 <_ZN7TwoWire6unlockEv>
}
   b6ea2:	4620      	mov	r0, r4
   b6ea4:	b004      	add	sp, #16
   b6ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6eaa <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6eaa:	b513      	push	{r0, r1, r4, lr}
   b6eac:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6eae:	f10d 0207 	add.w	r2, sp, #7
   b6eb2:	f7ff fedd 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6eb6:	b128      	cbz	r0, b6ec4 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6ebc:	421c      	tst	r4, r3
   b6ebe:	bf0c      	ite	eq
   b6ec0:	2001      	moveq	r0, #1
   b6ec2:	2000      	movne	r0, #0
}
   b6ec4:	b002      	add	sp, #8
   b6ec6:	bd10      	pop	{r4, pc}

000b6ec8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6ec8:	b513      	push	{r0, r1, r4, lr}
   b6eca:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6ecc:	f10d 0207 	add.w	r2, sp, #7
   b6ed0:	f7ff fece 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6ed4:	b128      	cbz	r0, b6ee2 <_ZN6AB18058isBitSetEhhb+0x1a>
   b6ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6eda:	421c      	tst	r4, r3
   b6edc:	bf14      	ite	ne
   b6ede:	2001      	movne	r0, #1
   b6ee0:	2000      	moveq	r0, #0
}
   b6ee2:	b002      	add	sp, #8
   b6ee4:	bd10      	pop	{r4, pc}

000b6ee6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6ee6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6ee8:	43d2      	mvns	r2, r2
   b6eea:	9300      	str	r3, [sp, #0]
   b6eec:	b2d2      	uxtb	r2, r2
   b6eee:	2300      	movs	r3, #0
   b6ef0:	f7ff ffac 	bl	b6e4c <_ZN6AB180512maskRegisterEhhhb>
}
   b6ef4:	b003      	add	sp, #12
   b6ef6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6efc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6efe:	2301      	movs	r3, #1
   b6f00:	f10d 0207 	add.w	r2, sp, #7
   b6f04:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6f06:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6f08:	f7ff feb2 	bl	b6c70 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6f0c:	4605      	mov	r5, r0
   b6f0e:	b938      	cbnz	r0, b6f20 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6f10:	491e      	ldr	r1, [pc, #120]	; (b6f8c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6f12:	481f      	ldr	r0, [pc, #124]	; (b6f90 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6f14:	22ad      	movs	r2, #173	; 0xad
   b6f16:	f7ff fe2d 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
}
   b6f1a:	4628      	mov	r0, r5
   b6f1c:	b003      	add	sp, #12
   b6f1e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6f20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6f24:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6f28:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6f2c:	d00b      	beq.n	b6f46 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6f2e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6f30:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6f32:	210f      	movs	r1, #15
   b6f34:	4620      	mov	r0, r4
   b6f36:	f7ff ffd6 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6f3a:	4a16      	ldr	r2, [pc, #88]	; (b6f94 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6f3c:	4916      	ldr	r1, [pc, #88]	; (b6f98 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6f3e:	4814      	ldr	r0, [pc, #80]	; (b6f90 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6f40:	f7fd f8e1 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b6f44:	e7e9      	b.n	b6f1a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6f46:	2208      	movs	r2, #8
   b6f48:	2117      	movs	r1, #23
   b6f4a:	4620      	mov	r0, r4
   b6f4c:	f7ff ffbc 	bl	b6ec8 <_ZN6AB18058isBitSetEhhb>
   b6f50:	b118      	cbz	r0, b6f5a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6f52:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6f54:	4a11      	ldr	r2, [pc, #68]	; (b6f9c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6f56:	61e3      	str	r3, [r4, #28]
   b6f58:	e7f0      	b.n	b6f3c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6f5e:	071a      	lsls	r2, r3, #28
   b6f60:	d509      	bpl.n	b6f76 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6f62:	2303      	movs	r3, #3
   b6f64:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6f66:	2208      	movs	r2, #8
   b6f68:	2301      	movs	r3, #1
   b6f6a:	210f      	movs	r1, #15
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	f7ff ffba 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6f72:	4a0b      	ldr	r2, [pc, #44]	; (b6fa0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6f74:	e7e2      	b.n	b6f3c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6f76:	075b      	lsls	r3, r3, #29
   b6f78:	d5cf      	bpl.n	b6f1a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6f7a:	2204      	movs	r2, #4
   b6f7c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6f7e:	2301      	movs	r3, #1
   b6f80:	210f      	movs	r1, #15
   b6f82:	4620      	mov	r0, r4
   b6f84:	f7ff ffaf 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6f88:	4a06      	ldr	r2, [pc, #24]	; (b6fa4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6f8a:	e7d7      	b.n	b6f3c <_ZN6AB180516updateWakeReasonEv+0x40>
   b6f8c:	000c1525 	.word	0x000c1525
   b6f90:	2003e438 	.word	0x2003e438
   b6f94:	000c14f6 	.word	0x000c14f6
   b6f98:	000c1544 	.word	0x000c1544
   b6f9c:	000c14ff 	.word	0x000c14ff
   b6fa0:	000c150f 	.word	0x000c150f
   b6fa4:	000c151f 	.word	0x000c151f

000b6fa8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6fa8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6faa:	9300      	str	r3, [sp, #0]
   b6fac:	4613      	mov	r3, r2
   b6fae:	22ff      	movs	r2, #255	; 0xff
   b6fb0:	f7ff ff4c 	bl	b6e4c <_ZN6AB180512maskRegisterEhhhb>
}
   b6fb4:	b003      	add	sp, #12
   b6fb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6fbc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fbe:	460f      	mov	r7, r1
   b6fc0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6fc2:	2301      	movs	r3, #1
   b6fc4:	2200      	movs	r2, #0
   b6fc6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6fc8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6fca:	f7ff fee1 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6fce:	4604      	mov	r4, r0
   b6fd0:	b938      	cbnz	r0, b6fe2 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6fd2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6fd6:	491f      	ldr	r1, [pc, #124]	; (b7054 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6fd8:	481f      	ldr	r0, [pc, #124]	; (b7058 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6fda:	f7ff fdcb 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
}
   b6fde:	4620      	mov	r0, r4
   b6fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6fe2:	2301      	movs	r3, #1
   b6fe4:	2223      	movs	r2, #35	; 0x23
   b6fe6:	2118      	movs	r1, #24
   b6fe8:	4628      	mov	r0, r5
   b6fea:	f7ff fed1 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6fee:	4604      	mov	r4, r0
   b6ff0:	b910      	cbnz	r0, b6ff8 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6ff2:	f240 229b 	movw	r2, #667	; 0x29b
   b6ff6:	e7ee      	b.n	b6fd6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6ff8:	2fff      	cmp	r7, #255	; 0xff
   b6ffa:	bfa8      	it	ge
   b6ffc:	27ff      	movge	r7, #255	; 0xff
   b6ffe:	2f01      	cmp	r7, #1
   b7000:	bfb8      	it	lt
   b7002:	2701      	movlt	r7, #1
   b7004:	2301      	movs	r3, #1
   b7006:	b2fa      	uxtb	r2, r7
   b7008:	2119      	movs	r1, #25
   b700a:	4628      	mov	r0, r5
   b700c:	f7ff fec0 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7010:	4604      	mov	r4, r0
   b7012:	b910      	cbnz	r0, b701a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7014:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7018:	e7dd      	b.n	b6fd6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b701a:	2301      	movs	r3, #1
   b701c:	2208      	movs	r2, #8
   b701e:	2112      	movs	r1, #18
   b7020:	4628      	mov	r0, r5
   b7022:	f7ff ffc1 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7026:	4604      	mov	r4, r0
   b7028:	b910      	cbnz	r0, b7030 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b702a:	f240 22af 	movw	r2, #687	; 0x2af
   b702e:	e7d2      	b.n	b6fd6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7030:	2e00      	cmp	r6, #0
   b7032:	bf14      	ite	ne
   b7034:	2203      	movne	r2, #3
   b7036:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7038:	2301      	movs	r3, #1
   b703a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b703e:	2118      	movs	r1, #24
   b7040:	4628      	mov	r0, r5
   b7042:	f7ff fea5 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7046:	4604      	mov	r4, r0
   b7048:	2800      	cmp	r0, #0
   b704a:	d1c8      	bne.n	b6fde <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b704c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7050:	e7c1      	b.n	b6fd6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7052:	bf00      	nop
   b7054:	000c1555 	.word	0x000c1555
   b7058:	2003e438 	.word	0x2003e438

000b705c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b705c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7060:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7062:	4605      	mov	r5, r0
   b7064:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7066:	484f      	ldr	r0, [pc, #316]	; (b71a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7068:	494f      	ldr	r1, [pc, #316]	; (b71a8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b706a:	f7fd f84c 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b706e:	2100      	movs	r1, #0
   b7070:	4628      	mov	r0, r5
   b7072:	f7ff fe99 	bl	b6da8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7076:	4604      	mov	r4, r0
   b7078:	b948      	cbnz	r0, b708e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b707a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b707e:	494b      	ldr	r1, [pc, #300]	; (b71ac <_ZN6AB180513deepPowerDownEi+0x150>)
   b7080:	4848      	ldr	r0, [pc, #288]	; (b71a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7082:	f7ff fd77 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
}
   b7086:	4620      	mov	r0, r4
   b7088:	b003      	add	sp, #12
   b708a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b708e:	2301      	movs	r3, #1
   b7090:	461a      	mov	r2, r3
   b7092:	2130      	movs	r1, #48	; 0x30
   b7094:	4628      	mov	r0, r5
   b7096:	f7ff ff87 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b709a:	4604      	mov	r4, r0
   b709c:	b910      	cbnz	r0, b70a4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b709e:	f240 2205 	movw	r2, #517	; 0x205
   b70a2:	e7ec      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b70a4:	2210      	movs	r2, #16
   b70a6:	2301      	movs	r3, #1
   b70a8:	4611      	mov	r1, r2
   b70aa:	4628      	mov	r0, r5
   b70ac:	f7ff ff1b 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b70b0:	4604      	mov	r4, r0
   b70b2:	b910      	cbnz	r0, b70ba <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b70b4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b70b8:	e7e1      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b70ba:	2301      	movs	r3, #1
   b70bc:	2226      	movs	r2, #38	; 0x26
   b70be:	2113      	movs	r1, #19
   b70c0:	4628      	mov	r0, r5
   b70c2:	f7ff fe65 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b70c6:	4604      	mov	r4, r0
   b70c8:	b910      	cbnz	r0, b70d0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b70ca:	f240 2213 	movw	r2, #531	; 0x213
   b70ce:	e7d6      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b70d0:	2601      	movs	r6, #1
   b70d2:	9600      	str	r6, [sp, #0]
   b70d4:	4633      	mov	r3, r6
   b70d6:	22fc      	movs	r2, #252	; 0xfc
   b70d8:	2111      	movs	r1, #17
   b70da:	4628      	mov	r0, r5
   b70dc:	f7ff feb6 	bl	b6e4c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b70e0:	4604      	mov	r4, r0
   b70e2:	b910      	cbnz	r0, b70ea <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b70e4:	f240 221b 	movw	r2, #539	; 0x21b
   b70e8:	e7c9      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b70ea:	2200      	movs	r2, #0
   b70ec:	4639      	mov	r1, r7
   b70ee:	4628      	mov	r0, r5
   b70f0:	f7ff ff64 	bl	b6fbc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b70f4:	4604      	mov	r4, r0
   b70f6:	b910      	cbnz	r0, b70fe <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b70f8:	f240 2222 	movw	r2, #546	; 0x222
   b70fc:	e7bf      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b70fe:	9600      	str	r6, [sp, #0]
   b7100:	2302      	movs	r3, #2
   b7102:	2277      	movs	r2, #119	; 0x77
   b7104:	2110      	movs	r1, #16
   b7106:	4628      	mov	r0, r5
   b7108:	f7ff fea0 	bl	b6e4c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b710c:	4604      	mov	r4, r0
   b710e:	b910      	cbnz	r0, b7116 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b7110:	f240 222b 	movw	r2, #555	; 0x22b
   b7114:	e7b3      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b7116:	4633      	mov	r3, r6
   b7118:	2204      	movs	r2, #4
   b711a:	211c      	movs	r1, #28
   b711c:	4628      	mov	r0, r5
   b711e:	f7ff ff43 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7122:	4604      	mov	r4, r0
   b7124:	b910      	cbnz	r0, b712c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b7126:	f240 2232 	movw	r2, #562	; 0x232
   b712a:	e7a8      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b712c:	9600      	str	r6, [sp, #0]
   b712e:	2318      	movs	r3, #24
   b7130:	22e3      	movs	r2, #227	; 0xe3
   b7132:	2111      	movs	r1, #17
   b7134:	4628      	mov	r0, r5
   b7136:	f7ff fe89 	bl	b6e4c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b713a:	4604      	mov	r4, r0
   b713c:	b910      	cbnz	r0, b7144 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b713e:	f240 2239 	movw	r2, #569	; 0x239
   b7142:	e79c      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7144:	4633      	mov	r3, r6
   b7146:	22c0      	movs	r2, #192	; 0xc0
   b7148:	2117      	movs	r1, #23
   b714a:	4628      	mov	r0, r5
   b714c:	f7ff fe20 	bl	b6d90 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7150:	4604      	mov	r4, r0
   b7152:	b910      	cbnz	r0, b715a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7154:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7158:	e791      	b.n	b707e <_ZN6AB180513deepPowerDownEi+0x22>
   b715a:	f004 fcf5 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b715e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b71b4 <_ZN6AB180513deepPowerDownEi+0x158>
   b7162:	f8df 8040 	ldr.w	r8, [pc, #64]	; b71a4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7166:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b716a:	4606      	mov	r6, r0
   b716c:	434f      	muls	r7, r1
   b716e:	f004 fceb 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b7172:	1b80      	subs	r0, r0, r6
   b7174:	42b8      	cmp	r0, r7
   b7176:	d20e      	bcs.n	b7196 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7178:	2201      	movs	r2, #1
   b717a:	2117      	movs	r1, #23
   b717c:	4628      	mov	r0, r5
   b717e:	f7ff fdbd 	bl	b6cfc <_ZN6AB180512readRegisterEhb>
   b7182:	4649      	mov	r1, r9
   b7184:	4602      	mov	r2, r0
   b7186:	4640      	mov	r0, r8
   b7188:	f7fc ffbd 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b718c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7190:	f005 f8f6 	bl	bc380 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7194:	e7eb      	b.n	b716e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7196:	4906      	ldr	r1, [pc, #24]	; (b71b0 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7198:	4802      	ldr	r0, [pc, #8]	; (b71a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b719a:	f7ff fceb 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b719e:	f007 fd98 	bl	becd2 <_ZN11SystemClass5resetEv>
    return true;
   b71a2:	e770      	b.n	b7086 <_ZN6AB180513deepPowerDownEi+0x2a>
   b71a4:	2003e438 	.word	0x2003e438
   b71a8:	000c1580 	.word	0x000c1580
   b71ac:	000c1575 	.word	0x000c1575
   b71b0:	000c15a6 	.word	0x000c15a6
   b71b4:	000c1591 	.word	0x000c1591

000b71b8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b71b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b71bc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b71c0:	4605      	mov	r5, r0
   b71c2:	460c      	mov	r4, r1
   b71c4:	4691      	mov	r9, r2
   b71c6:	461f      	mov	r7, r3
    if (lock) {
   b71c8:	f1ba 0f00 	cmp.w	sl, #0
   b71cc:	d002      	beq.n	b71d4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b71ce:	6840      	ldr	r0, [r0, #4]
   b71d0:	f005 fe38 	bl	bce44 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b71d4:	b307      	cbz	r7, b7218 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b71d6:	2f20      	cmp	r7, #32
   b71d8:	463e      	mov	r6, r7
   b71da:	bf28      	it	cs
   b71dc:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b71de:	2c7f      	cmp	r4, #127	; 0x7f
   b71e0:	d826      	bhi.n	b7230 <_ZN6AB18057readRamEjPhjb+0x78>
   b71e2:	1933      	adds	r3, r6, r4
   b71e4:	2b80      	cmp	r3, #128	; 0x80
   b71e6:	d901      	bls.n	b71ec <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b71e8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b71ec:	2301      	movs	r3, #1
   b71ee:	2204      	movs	r2, #4
   b71f0:	213f      	movs	r1, #63	; 0x3f
   b71f2:	4628      	mov	r0, r5
   b71f4:	f7ff fe77 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b71f8:	2300      	movs	r3, #0
   b71fa:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b71fe:	9300      	str	r3, [sp, #0]
   b7200:	464a      	mov	r2, r9
   b7202:	4633      	mov	r3, r6
   b7204:	b2c9      	uxtb	r1, r1
   b7206:	4628      	mov	r0, r5
   b7208:	f7ff fce4 	bl	b6bd4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b720c:	4680      	mov	r8, r0
   b720e:	b128      	cbz	r0, b721c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b7210:	4434      	add	r4, r6
        dataLen -= count;
   b7212:	1bbf      	subs	r7, r7, r6
        data += count;
   b7214:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7216:	e7dd      	b.n	b71d4 <_ZN6AB18057readRamEjPhjb+0x1c>
   b7218:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b721c:	f1ba 0f00 	cmp.w	sl, #0
   b7220:	d002      	beq.n	b7228 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7222:	6868      	ldr	r0, [r5, #4]
   b7224:	f005 fe17 	bl	bce56 <_ZN7TwoWire6unlockEv>
}
   b7228:	4640      	mov	r0, r8
   b722a:	b002      	add	sp, #8
   b722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7230:	2301      	movs	r3, #1
   b7232:	2204      	movs	r2, #4
   b7234:	213f      	movs	r1, #63	; 0x3f
   b7236:	4628      	mov	r0, r5
   b7238:	f7ff feb6 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
   b723c:	e7dc      	b.n	b71f8 <_ZN6AB18057readRamEjPhjb+0x40>

000b723e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b723e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7242:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7246:	4605      	mov	r5, r0
   b7248:	460c      	mov	r4, r1
   b724a:	4691      	mov	r9, r2
   b724c:	461f      	mov	r7, r3
    if (lock) {
   b724e:	f1ba 0f00 	cmp.w	sl, #0
   b7252:	d002      	beq.n	b725a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7254:	6840      	ldr	r0, [r0, #4]
   b7256:	f005 fdf5 	bl	bce44 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b725a:	b307      	cbz	r7, b729e <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b725c:	2f1f      	cmp	r7, #31
   b725e:	463e      	mov	r6, r7
   b7260:	bf28      	it	cs
   b7262:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7264:	2c7f      	cmp	r4, #127	; 0x7f
   b7266:	d826      	bhi.n	b72b6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7268:	1933      	adds	r3, r6, r4
   b726a:	2b80      	cmp	r3, #128	; 0x80
   b726c:	d901      	bls.n	b7272 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b726e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7272:	2301      	movs	r3, #1
   b7274:	2204      	movs	r2, #4
   b7276:	213f      	movs	r1, #63	; 0x3f
   b7278:	4628      	mov	r0, r5
   b727a:	f7ff fe34 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b727e:	2300      	movs	r3, #0
   b7280:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7284:	9300      	str	r3, [sp, #0]
   b7286:	464a      	mov	r2, r9
   b7288:	4633      	mov	r3, r6
   b728a:	b2c9      	uxtb	r1, r1
   b728c:	4628      	mov	r0, r5
   b728e:	f7ff fd43 	bl	b6d18 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7292:	4680      	mov	r8, r0
   b7294:	b128      	cbz	r0, b72a2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b7296:	4434      	add	r4, r6
        dataLen -= count;
   b7298:	1bbf      	subs	r7, r7, r6
        data += count;
   b729a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b729c:	e7dd      	b.n	b725a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b729e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b72a2:	f1ba 0f00 	cmp.w	sl, #0
   b72a6:	d002      	beq.n	b72ae <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b72a8:	6868      	ldr	r0, [r5, #4]
   b72aa:	f005 fdd4 	bl	bce56 <_ZN7TwoWire6unlockEv>
}
   b72ae:	4640      	mov	r0, r8
   b72b0:	b002      	add	sp, #8
   b72b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b72b6:	2301      	movs	r3, #1
   b72b8:	2204      	movs	r2, #4
   b72ba:	213f      	movs	r1, #63	; 0x3f
   b72bc:	4628      	mov	r0, r5
   b72be:	f7ff fe73 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
   b72c2:	e7dc      	b.n	b727e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b72c4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b72c4:	b530      	push	{r4, r5, lr}
   b72c6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b72c8:	680d      	ldr	r5, [r1, #0]
   b72ca:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b72ce:	9503      	str	r5, [sp, #12]
   b72d0:	684d      	ldr	r5, [r1, #4]
   b72d2:	9502      	str	r5, [sp, #8]
   b72d4:	688d      	ldr	r5, [r1, #8]
   b72d6:	9501      	str	r5, [sp, #4]
   b72d8:	68c9      	ldr	r1, [r1, #12]
   b72da:	9100      	str	r1, [sp, #0]
   b72dc:	3301      	adds	r3, #1
   b72de:	4904      	ldr	r1, [pc, #16]	; (b72f0 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b72e0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b72e4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b72e6:	f007 fc8d 	bl	bec04 <_ZN6String6formatEPKcz>
}
   b72ea:	4620      	mov	r0, r4
   b72ec:	b005      	add	sp, #20
   b72ee:	bd30      	pop	{r4, r5, pc}
   b72f0:	000c15b8 	.word	0x000c15b8

000b72f4 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b72f4:	0903      	lsrs	r3, r0, #4
}
   b72f6:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b72f8:	f000 000f 	and.w	r0, r0, #15
}
   b72fc:	fb02 0003 	mla	r0, r2, r3, r0
   b7300:	4770      	bx	lr

000b7302 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7302:	b538      	push	{r3, r4, r5, lr}
   b7304:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b7306:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7308:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b730a:	f7ff fff3 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b730e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7310:	7860      	ldrb	r0, [r4, #1]
   b7312:	f7ff ffef 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b7316:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7318:	78a0      	ldrb	r0, [r4, #2]
   b731a:	f7ff ffeb 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b731e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7320:	78e0      	ldrb	r0, [r4, #3]
   b7322:	f7ff ffe7 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b7326:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7328:	7920      	ldrb	r0, [r4, #4]
   b732a:	f7ff ffe3 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b732e:	3801      	subs	r0, #1
   b7330:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7332:	b92d      	cbnz	r5, b7340 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7334:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b7336:	7828      	ldrb	r0, [r5, #0]
   b7338:	f7ff ffdc 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b733c:	6188      	str	r0, [r1, #24]
}
   b733e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7340:	7960      	ldrb	r0, [r4, #5]
   b7342:	f7ff ffd7 	bl	b72f4 <_ZN6AB180510bcdToValueEh>
   b7346:	3064      	adds	r0, #100	; 0x64
   b7348:	1da5      	adds	r5, r4, #6
   b734a:	6148      	str	r0, [r1, #20]
   b734c:	e7f3      	b.n	b7336 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7350 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7350:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7352:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7354:	b088      	sub	sp, #32
   b7356:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7358:	461a      	mov	r2, r3
   b735a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b735c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b735e:	f7ff fda4 	bl	b6eaa <_ZN6AB180510isBitClearEhhb>
   b7362:	b1f0      	cbz	r0, b73a2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7364:	2308      	movs	r3, #8
   b7366:	2601      	movs	r6, #1
   b7368:	4620      	mov	r0, r4
   b736a:	9600      	str	r6, [sp, #0]
   b736c:	eb0d 0203 	add.w	r2, sp, r3
   b7370:	2100      	movs	r1, #0
   b7372:	f7ff fc2f 	bl	b6bd4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7376:	4604      	mov	r4, r0
   b7378:	b198      	cbz	r0, b73a2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b737a:	4632      	mov	r2, r6
   b737c:	4629      	mov	r1, r5
   b737e:	f10d 0009 	add.w	r0, sp, #9
   b7382:	f7ff ffbe 	bl	b7302 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b7386:	a804      	add	r0, sp, #16
   b7388:	f7ff ff9c 	bl	b72c4 <_ZN6AB180510tmToStringEPK2tm>
   b738c:	4808      	ldr	r0, [pc, #32]	; (b73b0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b738e:	9a04      	ldr	r2, [sp, #16]
   b7390:	4908      	ldr	r1, [pc, #32]	; (b73b4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7392:	f7fc feb8 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b7396:	a804      	add	r0, sp, #16
   b7398:	f007 fadc 	bl	be954 <_ZN6StringD1Ev>
}
   b739c:	4620      	mov	r0, r4
   b739e:	b008      	add	sp, #32
   b73a0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b73a2:	2224      	movs	r2, #36	; 0x24
   b73a4:	2100      	movs	r1, #0
   b73a6:	4628      	mov	r0, r5
   b73a8:	f008 fecc 	bl	c0144 <memset>
   b73ac:	2400      	movs	r4, #0
   b73ae:	e7f5      	b.n	b739c <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b73b0:	2003e438 	.word	0x2003e438
   b73b4:	000c15d6 	.word	0x000c15d6

000b73b8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b73b8:	b530      	push	{r4, r5, lr}
   b73ba:	b08b      	sub	sp, #44	; 0x2c
   b73bc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b73be:	a901      	add	r1, sp, #4
   b73c0:	f7ff ffc6 	bl	b7350 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b73c4:	4604      	mov	r4, r0
   b73c6:	b120      	cbz	r0, b73d2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b73c8:	a801      	add	r0, sp, #4
   b73ca:	f004 ffd1 	bl	bc370 <mktime>
   b73ce:	e9c5 0100 	strd	r0, r1, [r5]
}
   b73d2:	4620      	mov	r0, r4
   b73d4:	b00b      	add	sp, #44	; 0x2c
   b73d6:	bd30      	pop	{r4, r5, pc}

000b73d8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b73d8:	230a      	movs	r3, #10
   b73da:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b73de:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b73e2:	fb91 f2f3 	sdiv	r2, r1, r3
   b73e6:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b73ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b73ee:	b2c0      	uxtb	r0, r0
   b73f0:	4770      	bx	lr

000b73f2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b73f2:	b570      	push	{r4, r5, r6, lr}
   b73f4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b73f6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b73f8:	460c      	mov	r4, r1
   b73fa:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b73fc:	f7ff ffec 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7400:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b7402:	6868      	ldr	r0, [r5, #4]
   b7404:	f7ff ffe8 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7408:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b740a:	68a8      	ldr	r0, [r5, #8]
   b740c:	f7ff ffe4 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7410:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b7412:	68e8      	ldr	r0, [r5, #12]
   b7414:	f7ff ffe0 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7418:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b741a:	6928      	ldr	r0, [r5, #16]
   b741c:	3001      	adds	r0, #1
   b741e:	f7ff ffdb 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7422:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7424:	b92e      	cbnz	r6, b7432 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7426:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b7428:	69a8      	ldr	r0, [r5, #24]
   b742a:	f7ff ffd5 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b742e:	7030      	strb	r0, [r6, #0]
}
   b7430:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7432:	696a      	ldr	r2, [r5, #20]
   b7434:	2364      	movs	r3, #100	; 0x64
   b7436:	fb92 f0f3 	sdiv	r0, r2, r3
   b743a:	fb03 2010 	mls	r0, r3, r0, r2
   b743e:	f7ff ffcb 	bl	b73d8 <_ZN6AB180510valueToBcdEi>
   b7442:	1da6      	adds	r6, r4, #6
   b7444:	7160      	strb	r0, [r4, #5]
   b7446:	e7ef      	b.n	b7428 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7448 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7448:	b5f0      	push	{r4, r5, r6, r7, lr}
   b744a:	b087      	sub	sp, #28
   b744c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b744e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7450:	4616      	mov	r6, r2
   b7452:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7454:	f7ff ff36 	bl	b72c4 <_ZN6AB180510tmToStringEPK2tm>
   b7458:	481e      	ldr	r0, [pc, #120]	; (b74d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b745a:	9a02      	ldr	r2, [sp, #8]
   b745c:	491e      	ldr	r1, [pc, #120]	; (b74d8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b745e:	f7fc fe52 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b7462:	a802      	add	r0, sp, #8
   b7464:	f007 fa76 	bl	be954 <_ZN6StringD1Ev>
    if (lock) {
   b7468:	b116      	cbz	r6, b7470 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b746a:	6868      	ldr	r0, [r5, #4]
   b746c:	f005 fcea 	bl	bce44 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7470:	4620      	mov	r0, r4
   b7472:	2201      	movs	r2, #1
   b7474:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7478:	2700      	movs	r7, #0
   b747a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b747e:	f7ff ffb8 	bl	b73f2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b7482:	2301      	movs	r3, #1
   b7484:	461a      	mov	r2, r3
   b7486:	2110      	movs	r1, #16
   b7488:	4628      	mov	r0, r5
   b748a:	f7ff fd8d 	bl	b6fa8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b748e:	4604      	mov	r4, r0
   b7490:	b1e8      	cbz	r0, b74ce <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b7492:	2308      	movs	r3, #8
   b7494:	9700      	str	r7, [sp, #0]
   b7496:	eb0d 0203 	add.w	r2, sp, r3
   b749a:	4639      	mov	r1, r7
   b749c:	4628      	mov	r0, r5
   b749e:	f7ff fc3b 	bl	b6d18 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b74a2:	4604      	mov	r4, r0
   b74a4:	b160      	cbz	r0, b74c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b74a6:	2301      	movs	r3, #1
   b74a8:	461a      	mov	r2, r3
   b74aa:	2110      	movs	r1, #16
   b74ac:	4628      	mov	r0, r5
   b74ae:	f7ff fd1a 	bl	b6ee6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b74b2:	b116      	cbz	r6, b74ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b74b4:	6868      	ldr	r0, [r5, #4]
   b74b6:	f005 fcce 	bl	bce56 <_ZN7TwoWire6unlockEv>
}
   b74ba:	4620      	mov	r0, r4
   b74bc:	b007      	add	sp, #28
   b74be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b74c0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b74c4:	4905      	ldr	r1, [pc, #20]	; (b74dc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b74c6:	4803      	ldr	r0, [pc, #12]	; (b74d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b74c8:	f7ff fb54 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
   b74cc:	e7f1      	b.n	b74b2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b74ce:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b74d2:	e7f7      	b.n	b74c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b74d4:	2003e438 	.word	0x2003e438
   b74d8:	000c15e4 	.word	0x000c15e4
   b74dc:	000c15f2 	.word	0x000c15f2

000b74e0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b74e0:	b513      	push	{r0, r1, r4, lr}
   b74e2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b74e4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b74e6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b74ea:	f008 fddd 	bl	c00a8 <gmtime>
    return setRtcFromTm(tm, lock);
   b74ee:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b74f2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b74f4:	4620      	mov	r0, r4
   b74f6:	f7ff ffa7 	bl	b7448 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b74fa:	b002      	add	sp, #8
   b74fc:	bd10      	pop	{r4, pc}
	...

000b7500 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b7500:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7502:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b7504:	b089      	sub	sp, #36	; 0x24
   b7506:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7508:	bb75      	cbnz	r5, b7568 <_ZN6AB18054loopEv+0x68>
   b750a:	f007 fdb9 	bl	bf080 <_ZN9TimeClass7isValidEv>
   b750e:	b358      	cbz	r0, b7568 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b7510:	2600      	movs	r6, #0
   b7512:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b7514:	a904      	add	r1, sp, #16
   b7516:	4628      	mov	r0, r5
        tm = 0;
   b7518:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b751c:	f004 fe30 	bl	bc180 <spark_sync_time_last>
   b7520:	b310      	cbz	r0, b7568 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b7522:	2501      	movs	r5, #1
   b7524:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b7526:	f007 fdc8 	bl	bf0ba <_ZN9TimeClass3nowEv>
   b752a:	17c3      	asrs	r3, r0, #31
   b752c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7530:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7532:	9500      	str	r5, [sp, #0]
   b7534:	4620      	mov	r0, r4
   b7536:	f7ff ffd3 	bl	b74e0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b753a:	a902      	add	r1, sp, #8
   b753c:	4620      	mov	r0, r4
        time = 0;
   b753e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7542:	f7ff ff39 	bl	b73b8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b7546:	4b13      	ldr	r3, [pc, #76]	; (b7594 <_ZN6AB18054loopEv+0x94>)
   b7548:	4913      	ldr	r1, [pc, #76]	; (b7598 <_ZN6AB18054loopEv+0x98>)
   b754a:	681b      	ldr	r3, [r3, #0]
   b754c:	9300      	str	r3, [sp, #0]
   b754e:	a804      	add	r0, sp, #16
   b7550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7554:	f007 fd52 	bl	beffc <_ZN9TimeClass6formatExPKc>
   b7558:	4810      	ldr	r0, [pc, #64]	; (b759c <_ZN6AB18054loopEv+0x9c>)
   b755a:	9a04      	ldr	r2, [sp, #16]
   b755c:	4910      	ldr	r1, [pc, #64]	; (b75a0 <_ZN6AB18054loopEv+0xa0>)
   b755e:	f7fc fdd2 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b7562:	a804      	add	r0, sp, #16
   b7564:	f007 f9f6 	bl	be954 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b7568:	6963      	ldr	r3, [r4, #20]
   b756a:	b18b      	cbz	r3, b7590 <_ZN6AB18054loopEv+0x90>
   b756c:	f004 faec 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b7570:	6923      	ldr	r3, [r4, #16]
   b7572:	1ac0      	subs	r0, r0, r3
   b7574:	6963      	ldr	r3, [r4, #20]
   b7576:	4298      	cmp	r0, r3
   b7578:	d30a      	bcc.n	b7590 <_ZN6AB18054loopEv+0x90>
   b757a:	f004 fae5 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b757e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b7582:	6120      	str	r0, [r4, #16]
            setWDT();
   b7584:	4620      	mov	r0, r4
}
   b7586:	b009      	add	sp, #36	; 0x24
   b7588:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b758c:	f7ff bc0c 	b.w	b6da8 <_ZN6AB18056setWDTEi>
}
   b7590:	b009      	add	sp, #36	; 0x24
   b7592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7594:	2003db00 	.word	0x2003db00
   b7598:	2003e6ac 	.word	0x2003e6ac
   b759c:	2003e438 	.word	0x2003e438
   b75a0:	000c160d 	.word	0x000c160d

000b75a4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b75a4:	b530      	push	{r4, r5, lr}
   b75a6:	4604      	mov	r4, r0
   b75a8:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b75aa:	b111      	cbz	r1, b75b2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b75ac:	6840      	ldr	r0, [r0, #4]
   b75ae:	f005 fbf7 	bl	bcda0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b75b2:	4620      	mov	r0, r4
   b75b4:	f7ff fb64 	bl	b6c80 <_ZN6AB180510detectChipEv>
   b75b8:	ad06      	add	r5, sp, #24
   b75ba:	2800      	cmp	r0, #0
   b75bc:	d037      	beq.n	b762e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b75be:	4620      	mov	r0, r4
   b75c0:	f7ff fc9c 	bl	b6efc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b75c4:	2301      	movs	r3, #1
   b75c6:	461a      	mov	r2, r3
   b75c8:	2110      	movs	r1, #16
   b75ca:	4620      	mov	r0, r4
   b75cc:	f7ff fc6d 	bl	b6eaa <_ZN6AB180510isBitClearEhhb>
   b75d0:	b1d8      	cbz	r0, b760a <_ZN6AB18055setupEb+0x66>
   b75d2:	f007 fd55 	bl	bf080 <_ZN9TimeClass7isValidEv>
   b75d6:	b9c0      	cbnz	r0, b760a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b75d8:	a902      	add	r1, sp, #8
   b75da:	4620      	mov	r0, r4
   b75dc:	f7ff feec 	bl	b73b8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b75e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b75e4:	f007 fc50 	bl	bee88 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b75e8:	4b13      	ldr	r3, [pc, #76]	; (b7638 <_ZN6AB18055setupEb+0x94>)
   b75ea:	4914      	ldr	r1, [pc, #80]	; (b763c <_ZN6AB18055setupEb+0x98>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	9300      	str	r3, [sp, #0]
   b75f0:	4628      	mov	r0, r5
   b75f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b75f6:	f007 fd01 	bl	beffc <_ZN9TimeClass6formatExPKc>
   b75fa:	4811      	ldr	r0, [pc, #68]	; (b7640 <_ZN6AB18055setupEb+0x9c>)
   b75fc:	9a06      	ldr	r2, [sp, #24]
   b75fe:	4911      	ldr	r1, [pc, #68]	; (b7644 <_ZN6AB18055setupEb+0xa0>)
   b7600:	f7fc fd81 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b7604:	4628      	mov	r0, r5
   b7606:	f007 f9a5 	bl	be954 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b760a:	4b0f      	ldr	r3, [pc, #60]	; (b7648 <_ZN6AB18055setupEb+0xa4>)
   b760c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b760e:	4b0f      	ldr	r3, [pc, #60]	; (b764c <_ZN6AB18055setupEb+0xa8>)
   b7610:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b7612:	4b0f      	ldr	r3, [pc, #60]	; (b7650 <_ZN6AB18055setupEb+0xac>)
   b7614:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b7616:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b761a:	2300      	movs	r3, #0
   b761c:	a802      	add	r0, sp, #8
   b761e:	9500      	str	r5, [sp, #0]
   b7620:	f7fd fcc0 	bl	b4fa4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7624:	4628      	mov	r0, r5
   b7626:	f7fd fb48 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
}
   b762a:	b00b      	add	sp, #44	; 0x2c
   b762c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b762e:	4909      	ldr	r1, [pc, #36]	; (b7654 <_ZN6AB18055setupEb+0xb0>)
   b7630:	4803      	ldr	r0, [pc, #12]	; (b7640 <_ZN6AB18055setupEb+0x9c>)
   b7632:	f7ff fa9f 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
   b7636:	e7e8      	b.n	b760a <_ZN6AB18055setupEb+0x66>
   b7638:	2003db00 	.word	0x2003db00
   b763c:	2003e6ac 	.word	0x2003e6ac
   b7640:	2003e438 	.word	0x2003e438
   b7644:	000c1623 	.word	0x000c1623
   b7648:	000b6e2d 	.word	0x000b6e2d
   b764c:	000b4c97 	.word	0x000b4c97
   b7650:	000b4c83 	.word	0x000b4c83
   b7654:	000c1640 	.word	0x000c1640

000b7658 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b7658:	4b01      	ldr	r3, [pc, #4]	; (b7660 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b765a:	4a02      	ldr	r2, [pc, #8]	; (b7664 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b765c:	601a      	str	r2, [r3, #0]
}
   b765e:	4770      	bx	lr
   b7660:	2003e438 	.word	0x2003e438
   b7664:	000c1658 	.word	0x000c1658

000b7668 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b7668:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b766a:	2301      	movs	r3, #1
   b766c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b766e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b7670:	4604      	mov	r4, r0
        if (th->func) {
   b7672:	b143      	cbz	r3, b7686 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b7674:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7676:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b7678:	2301      	movs	r3, #1
   b767a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b767c:	2000      	movs	r0, #0
    }
   b767e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b7682:	f004 ba31 	b.w	bbae8 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7686:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b7688:	2800      	cmp	r0, #0
   b768a:	d0f5      	beq.n	b7678 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b768c:	6883      	ldr	r3, [r0, #8]
   b768e:	b90b      	cbnz	r3, b7694 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b7690:	f008 f826 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7694:	68c3      	ldr	r3, [r0, #12]
   b7696:	e7ee      	b.n	b7676 <_ZN6Thread3runEPv+0xe>

000b7698 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b7698:	2a01      	cmp	r2, #1
   b769a:	d102      	bne.n	b76a2 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b769c:	6001      	str	r1, [r0, #0]
      }
   b769e:	2000      	movs	r0, #0
   b76a0:	4770      	bx	lr
	  switch (__op)
   b76a2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b76a4:	bf04      	itt	eq
   b76a6:	680b      	ldreq	r3, [r1, #0]
   b76a8:	6003      	streq	r3, [r0, #0]
	      break;
   b76aa:	e7f8      	b.n	b769e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b76ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b76ac:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b76ae:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b76b0:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b76b2:	b135      	cbz	r5, b76c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b76b4:	4628      	mov	r0, r5
   b76b6:	f7fd fb00 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b76ba:	2110      	movs	r1, #16
   b76bc:	4628      	mov	r0, r5
   b76be:	f7fc fcee 	bl	b409e <_ZdlPvj>
   b76c2:	4620      	mov	r0, r4
   b76c4:	2114      	movs	r1, #20
      }
   b76c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b76ca:	f7fc bce8 	b.w	b409e <_ZdlPvj>

000b76ce <_ZN6Thread7disposeEv>:
    void dispose()
   b76ce:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b76d0:	6803      	ldr	r3, [r0, #0]
   b76d2:	4604      	mov	r4, r0
        if (!isValid())
   b76d4:	b1ab      	cbz	r3, b7702 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b76d6:	6858      	ldr	r0, [r3, #4]
   b76d8:	f004 f9b6 	bl	bba48 <os_thread_is_current>
   b76dc:	b988      	cbnz	r0, b7702 <_ZN6Thread7disposeEv+0x34>
   b76de:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b76e0:	7c5a      	ldrb	r2, [r3, #17]
   b76e2:	b912      	cbnz	r2, b76ea <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b76e4:	6858      	ldr	r0, [r3, #4]
   b76e6:	f004 f9b7 	bl	bba58 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b76ea:	6823      	ldr	r3, [r4, #0]
   b76ec:	6858      	ldr	r0, [r3, #4]
   b76ee:	f004 f9bb 	bl	bba68 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b76f2:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b76f4:	2300      	movs	r3, #0
   b76f6:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b76f8:	b118      	cbz	r0, b7702 <_ZN6Thread7disposeEv+0x34>
    }
   b76fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b76fe:	f7ff bfd5 	b.w	b76ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7702:	bd10      	pop	{r4, pc}

000b7704 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b7704:	4a05      	ldr	r2, [pc, #20]	; (b771c <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b7706:	6002      	str	r2, [r0, #0]
   b7708:	2200      	movs	r2, #0
   b770a:	6042      	str	r2, [r0, #4]
   b770c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b770e:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b7712:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b7716:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b771a:	4770      	bx	lr
   b771c:	000c1698 	.word	0x000c1698

000b7720 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7720:	b510      	push	{r4, lr}
    if (!_instance) {
   b7722:	4c07      	ldr	r4, [pc, #28]	; (b7740 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7724:	6823      	ldr	r3, [r4, #0]
   b7726:	b943      	cbnz	r3, b773a <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b7728:	f240 4064 	movw	r0, #1124	; 0x464
   b772c:	f7fc fcb3 	bl	b4096 <_Znwj>
   b7730:	4603      	mov	r3, r0
   b7732:	b108      	cbz	r0, b7738 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7734:	f7ff ffe6 	bl	b7704 <_ZN19BackgroundPublishRKC1Ev>
   b7738:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b773a:	6820      	ldr	r0, [r4, #0]
   b773c:	bd10      	pop	{r4, pc}
   b773e:	bf00      	nop
   b7740:	2003e440 	.word	0x2003e440

000b7744 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7744:	b538      	push	{r3, r4, r5, lr}
   b7746:	4604      	mov	r4, r0
    if(thread)
   b7748:	6840      	ldr	r0, [r0, #4]
   b774a:	b190      	cbz	r0, b7772 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b774c:	2302      	movs	r3, #2
   b774e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b7750:	f7ff ffbd 	bl	b76ce <_ZN6Thread7disposeEv>
        delete thread;
   b7754:	6865      	ldr	r5, [r4, #4]
   b7756:	b155      	cbz	r5, b776e <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b7758:	4628      	mov	r0, r5
   b775a:	f7ff ffb8 	bl	b76ce <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b775e:	6828      	ldr	r0, [r5, #0]
   b7760:	b108      	cbz	r0, b7766 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b7762:	f7ff ffa3 	bl	b76ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7766:	2104      	movs	r1, #4
   b7768:	4628      	mov	r0, r5
   b776a:	f7fc fc98 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b776e:	2300      	movs	r3, #0
   b7770:	6063      	str	r3, [r4, #4]
    }
}
   b7772:	bd38      	pop	{r3, r4, r5, pc}

000b7774 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7774:	b510      	push	{r4, lr}
   b7776:	4b05      	ldr	r3, [pc, #20]	; (b778c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b7778:	6003      	str	r3, [r0, #0]
   b777a:	4604      	mov	r4, r0
    stop();
   b777c:	f7ff ffe2 	bl	b7744 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b7780:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7784:	f7fd fa99 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
}
   b7788:	4620      	mov	r0, r4
   b778a:	bd10      	pop	{r4, pc}
   b778c:	000c1698 	.word	0x000c1698

000b7790 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b7790:	b510      	push	{r4, lr}
   b7792:	4604      	mov	r4, r0
}
   b7794:	f7ff ffee 	bl	b7774 <_ZN19BackgroundPublishRKD1Ev>
   b7798:	4620      	mov	r0, r4
   b779a:	f240 4164 	movw	r1, #1124	; 0x464
   b779e:	f7fc fc7e 	bl	b409e <_ZdlPvj>
   b77a2:	4620      	mov	r0, r4
   b77a4:	bd10      	pop	{r4, pc}

000b77a6 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b77a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b77a8:	4604      	mov	r4, r0
   b77aa:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b77ac:	f100 060d 	add.w	r6, r0, #13
   b77b0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b77b4:	7b23      	ldrb	r3, [r4, #12]
   b77b6:	b91b      	cbnz	r3, b77c0 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b77b8:	2001      	movs	r0, #1
   b77ba:	f004 fde1 	bl	bc380 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b77be:	e7f9      	b.n	b77b4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b77c0:	7b23      	ldrb	r3, [r4, #12]
   b77c2:	2b02      	cmp	r3, #2
   b77c4:	d064      	beq.n	b7890 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b77c6:	68a0      	ldr	r0, [r4, #8]
   b77c8:	f004 f95e 	bl	bba88 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b77cc:	68a0      	ldr	r0, [r4, #8]
   b77ce:	f004 f963 	bl	bba98 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b77d2:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b77d6:	f88d 3000 	strb.w	r3, [sp]
   b77da:	463a      	mov	r2, r7
   b77dc:	233c      	movs	r3, #60	; 0x3c
   b77de:	4631      	mov	r1, r6
   b77e0:	a806      	add	r0, sp, #24
   b77e2:	f005 f89b 	bl	bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b77e6:	9d06      	ldr	r5, [sp, #24]
   b77e8:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b77ea:	b933      	cbnz	r3, b77fa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b77ec:	7b23      	ldrb	r3, [r4, #12]
   b77ee:	2b02      	cmp	r3, #2
   b77f0:	d003      	beq.n	b77fa <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b77f2:	2001      	movs	r0, #1
   b77f4:	f004 fdc4 	bl	bc380 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b77f8:	e7f5      	b.n	b77e6 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b77fa:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b77fe:	b31b      	cbz	r3, b7848 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7800:	2000      	movs	r0, #0
   b7802:	f004 fc23 	bl	bc04c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7806:	b120      	cbz	r0, b7812 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b7808:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b780a:	b913      	cbnz	r3, b7812 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b780c:	f004 fc80 	bl	bc110 <spark_process>
    }
   b7810:	e7fa      	b.n	b7808 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7812:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7814:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b7818:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b781a:	1e59      	subs	r1, r3, #1
   b781c:	424b      	negs	r3, r1
   b781e:	414b      	adcs	r3, r1
   b7820:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7824:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7828:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b782c:	b90b      	cbnz	r3, b7832 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b782e:	f007 ff57 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7832:	ab05      	add	r3, sp, #20
   b7834:	9300      	str	r3, [sp, #0]
   b7836:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b783a:	ab04      	add	r3, sp, #16
   b783c:	aa03      	add	r2, sp, #12
   b783e:	f10d 010b 	add.w	r1, sp, #11
   b7842:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b7846:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b7848:	68a0      	ldr	r0, [r4, #8]
   b784a:	f004 f91d 	bl	bba88 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b784e:	7b23      	ldrb	r3, [r4, #12]
   b7850:	2b02      	cmp	r3, #2
   b7852:	d017      	beq.n	b7884 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b7854:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b7858:	2500      	movs	r5, #0
   b785a:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b785e:	b143      	cbz	r3, b7872 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b7860:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7864:	2203      	movs	r2, #3
   b7866:	4608      	mov	r0, r1
   b7868:	4798      	blx	r3
	    _M_manager = nullptr;
   b786a:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b786e:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b7872:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b7874:	68a0      	ldr	r0, [r4, #8]
   b7876:	7323      	strb	r3, [r4, #12]
   b7878:	f004 f90e 	bl	bba98 <os_mutex_unlock>
   b787c:	a807      	add	r0, sp, #28
   b787e:	f7fe fdcf 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7882:	e797      	b.n	b77b4 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b7884:	68a0      	ldr	r0, [r4, #8]
   b7886:	f004 f907 	bl	bba98 <os_mutex_unlock>
   b788a:	a807      	add	r0, sp, #28
   b788c:	f7fe fdc8 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b7890:	b009      	add	sp, #36	; 0x24
   b7892:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7894 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b7894:	6800      	ldr	r0, [r0, #0]
   b7896:	f7ff bf86 	b.w	b77a6 <_ZN19BackgroundPublishRK8thread_fEv>

000b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b789a:	b513      	push	{r0, r1, r4, lr}
   b789c:	460b      	mov	r3, r1
   b789e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78a0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78a4:	466c      	mov	r4, sp
   b78a6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b78aa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b78ae:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b78b2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b78b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b78ba:	b002      	add	sp, #8
   b78bc:	bd10      	pop	{r4, pc}
	...

000b78c0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b78c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b78c4:	4606      	mov	r6, r0
   b78c6:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b78c8:	2014      	movs	r0, #20
   b78ca:	4926      	ldr	r1, [pc, #152]	; (b7964 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b78cc:	4617      	mov	r7, r2
   b78ce:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b78d0:	f007 fefc 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   b78d4:	4604      	mov	r4, r0
   b78d6:	b130      	cbz	r0, b78e6 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b78d8:	2000      	movs	r0, #0
            exited(false) {
   b78da:	e9c4 0000 	strd	r0, r0, [r4]
   b78de:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b78e2:	7420      	strb	r0, [r4, #16]
   b78e4:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b78e6:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b78e8:	2c00      	cmp	r4, #0
   b78ea:	d031      	beq.n	b7950 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b78ec:	491d      	ldr	r1, [pc, #116]	; (b7964 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b78ee:	2010      	movs	r0, #16
   b78f0:	f007 feec 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   b78f4:	4605      	mov	r5, r0
   b78f6:	b168      	cbz	r0, b7914 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b78f8:	2300      	movs	r3, #0
   b78fa:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b78fc:	4601      	mov	r1, r0
   b78fe:	4638      	mov	r0, r7
   b7900:	f7ff ffcb 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7904:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7906:	68aa      	ldr	r2, [r5, #8]
   b7908:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b790a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b790c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b790e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7910:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7912:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7914:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b7916:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b7918:	b137      	cbz	r7, b7928 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b791a:	4638      	mov	r0, r7
   b791c:	f7fd f9cd 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7920:	2110      	movs	r1, #16
   b7922:	4638      	mov	r0, r7
   b7924:	f7fc fbbb 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7928:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b792a:	6803      	ldr	r3, [r0, #0]
   b792c:	b183      	cbz	r3, b7950 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7930:	464a      	mov	r2, r9
   b7932:	e9cd 0300 	strd	r0, r3, [sp]
   b7936:	4641      	mov	r1, r8
   b7938:	4b0b      	ldr	r3, [pc, #44]	; (b7968 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b793a:	3004      	adds	r0, #4
   b793c:	f004 f87c 	bl	bba38 <os_thread_create>
   b7940:	b930      	cbnz	r0, b7950 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7942:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7944:	7c1b      	ldrb	r3, [r3, #16]
   b7946:	b94b      	cbnz	r3, b795c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b7948:	2001      	movs	r0, #1
   b794a:	f004 f8ed 	bl	bbb28 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b794e:	e7f8      	b.n	b7942 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b7950:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b7952:	2300      	movs	r3, #0
   b7954:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b7956:	b108      	cbz	r0, b795c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b7958:	f7ff fea8 	bl	b76ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b795c:	4630      	mov	r0, r6
   b795e:	b003      	add	sp, #12
   b7960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7964:	000c2114 	.word	0x000c2114
   b7968:	000b7669 	.word	0x000b7669

000b796c <_ZN19BackgroundPublishRK5startEv>:
{
   b796c:	b530      	push	{r4, r5, lr}
    if(!thread)
   b796e:	6843      	ldr	r3, [r0, #4]
{
   b7970:	b087      	sub	sp, #28
   b7972:	4604      	mov	r4, r0
    if(!thread)
   b7974:	b9c3      	cbnz	r3, b79a8 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b7976:	3008      	adds	r0, #8
   b7978:	f004 f87e 	bl	bba78 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b797c:	4b0b      	ldr	r3, [pc, #44]	; (b79ac <_ZN19BackgroundPublishRK5startEv+0x40>)
   b797e:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b7980:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b7982:	4b0b      	ldr	r3, [pc, #44]	; (b79b0 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7984:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b7986:	9304      	str	r3, [sp, #16]
   b7988:	f7fc fb85 	bl	b4096 <_Znwj>
   b798c:	4605      	mov	r5, r0
   b798e:	b138      	cbz	r0, b79a0 <_ZN19BackgroundPublishRK5startEv+0x34>
   b7990:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b7994:	9300      	str	r3, [sp, #0]
   b7996:	4907      	ldr	r1, [pc, #28]	; (b79b4 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b7998:	2302      	movs	r3, #2
   b799a:	aa02      	add	r2, sp, #8
   b799c:	f7ff ff90 	bl	b78c0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b79a0:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b79a2:	a802      	add	r0, sp, #8
   b79a4:	f7fd f989 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
}
   b79a8:	b007      	add	sp, #28
   b79aa:	bd30      	pop	{r4, r5, pc}
   b79ac:	000b7895 	.word	0x000b7895
   b79b0:	000b7699 	.word	0x000b7699
   b79b4:	000c167c 	.word	0x000c167c

000b79b8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b79b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79bc:	4604      	mov	r4, r0
   b79be:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b79c0:	6880      	ldr	r0, [r0, #8]
   b79c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b79c4:	4698      	mov	r8, r3
   b79c6:	460d      	mov	r5, r1
   b79c8:	4616      	mov	r6, r2
   b79ca:	f004 f85d 	bl	bba88 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b79ce:	6863      	ldr	r3, [r4, #4]
   b79d0:	b11b      	cbz	r3, b79da <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b79d2:	7b23      	ldrb	r3, [r4, #12]
   b79d4:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b79d8:	b133      	cbz	r3, b79e8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b79da:	68a0      	ldr	r0, [r4, #8]
   b79dc:	f004 f85c 	bl	bba98 <os_mutex_unlock>
    {
        return false;
   b79e0:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b79e2:	b005      	add	sp, #20
   b79e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b79e8:	68a0      	ldr	r0, [r4, #8]
   b79ea:	f004 f855 	bl	bba98 <os_mutex_unlock>
    if(!name)
   b79ee:	2d00      	cmp	r5, #0
   b79f0:	d03d      	beq.n	b7a6e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b79f2:	2240      	movs	r2, #64	; 0x40
   b79f4:	4629      	mov	r1, r5
   b79f6:	f104 000d 	add.w	r0, r4, #13
   b79fa:	f008 fc7a 	bl	c02f2 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b79fe:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7a02:	b38e      	cbz	r6, b7a68 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7a04:	f240 4201 	movw	r2, #1025	; 0x401
   b7a08:	4631      	mov	r1, r6
   b7a0a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7a0e:	f008 fc70 	bl	c02f2 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7a12:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b7a16:	2300      	movs	r3, #0
   b7a18:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7a1a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7a1c:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7a20:	b13b      	cbz	r3, b7a32 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7a22:	2202      	movs	r2, #2
   b7a24:	4639      	mov	r1, r7
   b7a26:	4668      	mov	r0, sp
   b7a28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7a2a:	68fb      	ldr	r3, [r7, #12]
   b7a2c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7a2e:	68bb      	ldr	r3, [r7, #8]
   b7a30:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7a32:	4629      	mov	r1, r5
   b7a34:	4668      	mov	r0, sp
   b7a36:	f7ff ff30 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a3a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a3c:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7a40:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a44:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a46:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b7a48:	4668      	mov	r0, sp
   b7a4a:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b7a4e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b7a52:	9203      	str	r2, [sp, #12]
   b7a54:	f7fd f931 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b7a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7a5a:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7a5e:	2001      	movs	r0, #1
    event_flags = flags;
   b7a60:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b7a64:	7320      	strb	r0, [r4, #12]
    return true;
   b7a66:	e7bc      	b.n	b79e2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b7a68:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b7a6c:	e7d3      	b.n	b7a16 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b7a6e:	4628      	mov	r0, r5
   b7a70:	e7b7      	b.n	b79e2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b7a74 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b7a74:	b510      	push	{r4, lr}
   b7a76:	4b05      	ldr	r3, [pc, #20]	; (b7a8c <_ZN10JsonBufferD1Ev+0x18>)
   b7a78:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7a7a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7a7c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7a7e:	b91b      	cbnz	r3, b7a88 <_ZN10JsonBufferD1Ev+0x14>
   b7a80:	6840      	ldr	r0, [r0, #4]
   b7a82:	b108      	cbz	r0, b7a88 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7a84:	f004 fc04 	bl	bc290 <free>
	}
}
   b7a88:	4620      	mov	r0, r4
   b7a8a:	bd10      	pop	{r4, pc}
   b7a8c:	000c16b0 	.word	0x000c16b0

000b7a90 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7a90:	b510      	push	{r4, lr}
   b7a92:	4604      	mov	r4, r0
}
   b7a94:	f7ff ffee 	bl	b7a74 <_ZN10JsonBufferD1Ev>
   b7a98:	4620      	mov	r0, r4
   b7a9a:	2114      	movs	r1, #20
   b7a9c:	f7fc faff 	bl	b409e <_ZdlPvj>
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	bd10      	pop	{r4, pc}

000b7aa4 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b7aa4:	b510      	push	{r4, lr}
   b7aa6:	4b03      	ldr	r3, [pc, #12]	; (b7ab4 <_ZN10JsonWriterD1Ev+0x10>)
   b7aa8:	6003      	str	r3, [r0, #0]
   b7aaa:	4604      	mov	r4, r0
   b7aac:	f7ff ffe2 	bl	b7a74 <_ZN10JsonBufferD1Ev>

}
   b7ab0:	4620      	mov	r0, r4
   b7ab2:	bd10      	pop	{r4, pc}
   b7ab4:	000c16d0 	.word	0x000c16d0

000b7ab8 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b7ab8:	b510      	push	{r4, lr}
   b7aba:	4604      	mov	r4, r0
}
   b7abc:	f7ff fff2 	bl	b7aa4 <_ZN10JsonWriterD1Ev>
   b7ac0:	4620      	mov	r0, r4
   b7ac2:	2130      	movs	r1, #48	; 0x30
   b7ac4:	f7fc faeb 	bl	b409e <_ZdlPvj>
   b7ac8:	4620      	mov	r0, r4
   b7aca:	bd10      	pop	{r4, pc}

000b7acc <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b7acc:	b510      	push	{r4, lr}
   b7ace:	4b03      	ldr	r3, [pc, #12]	; (b7adc <_ZN12JsonModifierD1Ev+0x10>)
   b7ad0:	6003      	str	r3, [r0, #0]
   b7ad2:	4604      	mov	r4, r0
   b7ad4:	f7ff ffe6 	bl	b7aa4 <_ZN10JsonWriterD1Ev>

}
   b7ad8:	4620      	mov	r0, r4
   b7ada:	bd10      	pop	{r4, pc}
   b7adc:	000c16e0 	.word	0x000c16e0

000b7ae0 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	4604      	mov	r4, r0
}
   b7ae4:	f7ff fff2 	bl	b7acc <_ZN12JsonModifierD1Ev>
   b7ae8:	4620      	mov	r0, r4
   b7aea:	2140      	movs	r1, #64	; 0x40
   b7aec:	f7fc fad7 	bl	b409e <_ZdlPvj>
   b7af0:	4620      	mov	r0, r4
   b7af2:	bd10      	pop	{r4, pc}

000b7af4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7af4:	b510      	push	{r4, lr}
   b7af6:	4b07      	ldr	r3, [pc, #28]	; (b7b14 <_ZN10JsonParserD1Ev+0x20>)
   b7af8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7afa:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7afc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7afe:	b91b      	cbnz	r3, b7b08 <_ZN10JsonParserD1Ev+0x14>
   b7b00:	6940      	ldr	r0, [r0, #20]
   b7b02:	b108      	cbz	r0, b7b08 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7b04:	f004 fbc4 	bl	bc290 <free>
JsonParser::~JsonParser() {
   b7b08:	4620      	mov	r0, r4
   b7b0a:	f7ff ffb3 	bl	b7a74 <_ZN10JsonBufferD1Ev>
}
   b7b0e:	4620      	mov	r0, r4
   b7b10:	bd10      	pop	{r4, pc}
   b7b12:	bf00      	nop
   b7b14:	000c16c0 	.word	0x000c16c0

000b7b18 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7b18:	b510      	push	{r4, lr}
   b7b1a:	4604      	mov	r4, r0
}
   b7b1c:	f7ff ffea 	bl	b7af4 <_ZN10JsonParserD1Ev>
   b7b20:	4620      	mov	r0, r4
   b7b22:	212c      	movs	r1, #44	; 0x2c
   b7b24:	f7fc fabb 	bl	b409e <_ZdlPvj>
   b7b28:	4620      	mov	r0, r4
   b7b2a:	bd10      	pop	{r4, pc}

000b7b2c <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b7b2c:	4a03      	ldr	r2, [pc, #12]	; (b7b3c <_ZN10JsonBufferC1Ev+0x10>)
   b7b2e:	6002      	str	r2, [r0, #0]
   b7b30:	2200      	movs	r2, #0
   b7b32:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7b36:	60c2      	str	r2, [r0, #12]
   b7b38:	7402      	strb	r2, [r0, #16]
}
   b7b3a:	4770      	bx	lr
   b7b3c:	000c16b0 	.word	0x000c16b0

000b7b40 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7b40:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7b42:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7b46:	2200      	movs	r2, #0
   b7b48:	60c2      	str	r2, [r0, #12]
   b7b4a:	2201      	movs	r2, #1
   b7b4c:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7b4e:	6143      	str	r3, [r0, #20]
   b7b50:	4a02      	ldr	r2, [pc, #8]	; (b7b5c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7b52:	9b02      	ldr	r3, [sp, #8]
   b7b54:	6002      	str	r2, [r0, #0]
   b7b56:	61c3      	str	r3, [r0, #28]
}
   b7b58:	bd10      	pop	{r4, pc}
   b7b5a:	bf00      	nop
   b7b5c:	000c16c0 	.word	0x000c16c0

000b7b60 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7b60:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7b64:	4283      	cmp	r3, r0
   b7b66:	d904      	bls.n	b7b72 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b7b68:	7802      	ldrb	r2, [r0, #0]
   b7b6a:	2a02      	cmp	r2, #2
   b7b6c:	d002      	beq.n	b7b74 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b7b6e:	3010      	adds	r0, #16
   b7b70:	e7f8      	b.n	b7b64 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b7b72:	2000      	movs	r0, #0
}
   b7b74:	4770      	bx	lr

000b7b76 <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b7b76:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b7b7a:	4298      	cmp	r0, r3
   b7b7c:	d204      	bcs.n	b7b88 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b7b7e:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b7b80:	2b01      	cmp	r3, #1
   b7b82:	bf18      	it	ne
   b7b84:	2000      	movne	r0, #0
   b7b86:	4770      	bx	lr
   b7b88:	2000      	movs	r0, #0
}
   b7b8a:	4770      	bx	lr

000b7b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7b8c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7b8e:	6813      	ldr	r3, [r2, #0]
   b7b90:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7b92:	6813      	ldr	r3, [r2, #0]
   b7b94:	f103 0410 	add.w	r4, r3, #16
   b7b98:	6014      	str	r4, [r2, #0]
   b7b9a:	6986      	ldr	r6, [r0, #24]
   b7b9c:	42b4      	cmp	r4, r6
   b7b9e:	d20a      	bcs.n	b7bb6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7ba0:	699b      	ldr	r3, [r3, #24]
   b7ba2:	688c      	ldr	r4, [r1, #8]
   b7ba4:	42a3      	cmp	r3, r4
   b7ba6:	da01      	bge.n	b7bac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7ba8:	42ab      	cmp	r3, r5
   b7baa:	ddf2      	ble.n	b7b92 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7bac:	42a3      	cmp	r3, r4
   b7bae:	bfcc      	ite	gt
   b7bb0:	2000      	movgt	r0, #0
   b7bb2:	2001      	movle	r0, #1
   b7bb4:	e000      	b.n	b7bb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7bb6:	2000      	movs	r0, #0
}
   b7bb8:	bd70      	pop	{r4, r5, r6, pc}

000b7bba <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7bbc:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b7bc0:	4604      	mov	r4, r0
   b7bc2:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7bc4:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7bc6:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7bc8:	9801      	ldr	r0, [sp, #4]
   b7bca:	69a3      	ldr	r3, [r4, #24]
   b7bcc:	4283      	cmp	r3, r0
   b7bce:	d90b      	bls.n	b7be8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b7bd0:	6882      	ldr	r2, [r0, #8]
   b7bd2:	688b      	ldr	r3, [r1, #8]
   b7bd4:	429a      	cmp	r2, r3
   b7bd6:	da07      	bge.n	b7be8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b7bd8:	42b5      	cmp	r5, r6
   b7bda:	d006      	beq.n	b7bea <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b7bdc:	aa01      	add	r2, sp, #4
   b7bde:	4620      	mov	r0, r4
		index++;
   b7be0:	3501      	adds	r5, #1
		skipObject(container, token);
   b7be2:	f7ff ffd3 	bl	b7b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7be6:	e7ef      	b.n	b7bc8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b7be8:	2000      	movs	r0, #0
}
   b7bea:	b002      	add	sp, #8
   b7bec:	bd70      	pop	{r4, r5, r6, pc}

000b7bee <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7bee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7bf2:	9d08      	ldr	r5, [sp, #32]
   b7bf4:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7bf6:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7bfa:	4604      	mov	r4, r0
   b7bfc:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7bfe:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7c00:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7c02:	9801      	ldr	r0, [sp, #4]
   b7c04:	69a3      	ldr	r3, [r4, #24]
   b7c06:	4283      	cmp	r3, r0
   b7c08:	d91a      	bls.n	b7c40 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7c0a:	6882      	ldr	r2, [r0, #8]
   b7c0c:	688b      	ldr	r3, [r1, #8]
   b7c0e:	429a      	cmp	r2, r3
   b7c10:	da16      	bge.n	b7c40 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7c12:	42ae      	cmp	r6, r5
   b7c14:	d10b      	bne.n	b7c2e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7c16:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7c18:	aa01      	add	r2, sp, #4
   b7c1a:	4620      	mov	r0, r4
   b7c1c:	f7ff ffb6 	bl	b7b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7c20:	b128      	cbz	r0, b7c2e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7c22:	9b01      	ldr	r3, [sp, #4]
   b7c24:	f8c8 3000 	str.w	r3, [r8]
}
   b7c28:	b002      	add	sp, #8
   b7c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7c2e:	aa01      	add	r2, sp, #4
   b7c30:	4620      	mov	r0, r4
   b7c32:	f7ff ffab 	bl	b7b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7c36:	4620      	mov	r0, r4
		index++;
   b7c38:	3601      	adds	r6, #1
		skipObject(container, token);
   b7c3a:	f7ff ffa7 	bl	b7b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7c3e:	e7e0      	b.n	b7c02 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7c40:	2000      	movs	r0, #0
   b7c42:	e7f1      	b.n	b7c28 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7c44 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7c44:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7c46:	3b01      	subs	r3, #1
   b7c48:	2400      	movs	r4, #0
   b7c4a:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7c4e:	1bf6      	subs	r6, r6, r7
   b7c50:	42a6      	cmp	r6, r4
   b7c52:	dd08      	ble.n	b7c66 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7c54:	42a3      	cmp	r3, r4
   b7c56:	dd06      	ble.n	b7c66 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7c58:	6845      	ldr	r5, [r0, #4]
   b7c5a:	443d      	add	r5, r7
   b7c5c:	5d2d      	ldrb	r5, [r5, r4]
   b7c5e:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7c62:	3401      	adds	r4, #1
   b7c64:	e7f1      	b.n	b7c4a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7c66:	2300      	movs	r3, #0
   b7c68:	7013      	strb	r3, [r2, #0]
}
   b7c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7c6e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7c70:	2310      	movs	r3, #16
   b7c72:	466a      	mov	r2, sp
   b7c74:	f7ff ffe6 	bl	b7c44 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7c78:	4904      	ldr	r1, [pc, #16]	; (b7c8c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7c7a:	4622      	mov	r2, r4
   b7c7c:	4668      	mov	r0, sp
   b7c7e:	f004 fb1f 	bl	bc2c0 <sscanf>
}
   b7c82:	1e43      	subs	r3, r0, #1
   b7c84:	4258      	negs	r0, r3
   b7c86:	4158      	adcs	r0, r3
   b7c88:	b004      	add	sp, #16
   b7c8a:	bd10      	pop	{r4, pc}
   b7c8c:	000c14b3 	.word	0x000c14b3

000b7c90 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b7c90:	b510      	push	{r4, lr}
   b7c92:	4604      	mov	r4, r0
	if (str) {
   b7c94:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7c96:	460b      	mov	r3, r1
	if (str) {
   b7c98:	b128      	cbz	r0, b7ca6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7c9a:	f006 ff3e 	bl	beb1a <_ZN6String6concatEc>
		length++;
   b7c9e:	68e3      	ldr	r3, [r4, #12]
   b7ca0:	3301      	adds	r3, #1
   b7ca2:	60e3      	str	r3, [r4, #12]
}
   b7ca4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7ca6:	6860      	ldr	r0, [r4, #4]
   b7ca8:	2800      	cmp	r0, #0
   b7caa:	d0f8      	beq.n	b7c9e <_ZN16JsonParserString6appendEc+0xe>
   b7cac:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7cb0:	3a01      	subs	r2, #1
   b7cb2:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7cb4:	bf88      	it	hi
   b7cb6:	5443      	strbhi	r3, [r0, r1]
   b7cb8:	e7f1      	b.n	b7c9e <_ZN16JsonParserString6appendEc+0xe>

000b7cba <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7cba:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7cbc:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7cbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7cc0:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7cc2:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7cc4:	d804      	bhi.n	b7cd0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7cc6:	b003      	add	sp, #12
   b7cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7ccc:	f7ff bfe0 	b.w	b7c90 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7cd0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7cd8:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7cdc:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7ce0:	d207      	bcs.n	b7cf2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7ce2:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7ce6:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7ce8:	f7ff ffd2 	bl	b7c90 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7cec:	9801      	ldr	r0, [sp, #4]
   b7cee:	4621      	mov	r1, r4
   b7cf0:	e7e9      	b.n	b7cc6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7cf2:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7cf4:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7cf8:	9001      	str	r0, [sp, #4]
   b7cfa:	f7ff ffc9 	bl	b7c90 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7cfe:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7d02:	9801      	ldr	r0, [sp, #4]
   b7d04:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7d08:	e7ee      	b.n	b7ce8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7d10:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7d12:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7d14:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7de4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7d18:	4680      	mov	r8, r0
   b7d1a:	460f      	mov	r7, r1
   b7d1c:	4615      	mov	r5, r2
			escape = false;
   b7d1e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7d20:	68b8      	ldr	r0, [r7, #8]
   b7d22:	42b0      	cmp	r0, r6
   b7d24:	dd5a      	ble.n	b7ddc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7d26:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7d2a:	5d99      	ldrb	r1, [r3, r6]
   b7d2c:	199a      	adds	r2, r3, r6
		if (escape) {
   b7d2e:	2c00      	cmp	r4, #0
   b7d30:	d04b      	beq.n	b7dca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7d32:	2975      	cmp	r1, #117	; 0x75
   b7d34:	d805      	bhi.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7d36:	296d      	cmp	r1, #109	; 0x6d
   b7d38:	d807      	bhi.n	b7d4a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7d3a:	2962      	cmp	r1, #98	; 0x62
   b7d3c:	d01e      	beq.n	b7d7c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7d3e:	2966      	cmp	r1, #102	; 0x66
   b7d40:	d01e      	beq.n	b7d80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7d42:	4628      	mov	r0, r5
   b7d44:	f7ff ffa4 	bl	b7c90 <_ZN16JsonParserString6appendEc>
				break;
   b7d48:	e03d      	b.n	b7dc6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7d4a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7d4e:	2c07      	cmp	r4, #7
   b7d50:	d8f7      	bhi.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7d52:	f20f 0c08 	addw	ip, pc, #8
   b7d56:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7d5a:	bf00      	nop
   b7d5c:	000b7d85 	.word	0x000b7d85
   b7d60:	000b7d43 	.word	0x000b7d43
   b7d64:	000b7d43 	.word	0x000b7d43
   b7d68:	000b7d43 	.word	0x000b7d43
   b7d6c:	000b7d89 	.word	0x000b7d89
   b7d70:	000b7d43 	.word	0x000b7d43
   b7d74:	000b7d8d 	.word	0x000b7d8d
   b7d78:	000b7d91 	.word	0x000b7d91
				str.append('\b');
   b7d7c:	2108      	movs	r1, #8
   b7d7e:	e7e0      	b.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7d80:	210c      	movs	r1, #12
   b7d82:	e7de      	b.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7d84:	210a      	movs	r1, #10
   b7d86:	e7dc      	b.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7d88:	210d      	movs	r1, #13
   b7d8a:	e7da      	b.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7d8c:	2109      	movs	r1, #9
   b7d8e:	e7d8      	b.n	b7d42 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7d90:	1d31      	adds	r1, r6, #4
   b7d92:	4288      	cmp	r0, r1
   b7d94:	dd17      	ble.n	b7dc6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7d96:	a902      	add	r1, sp, #8
   b7d98:	3304      	adds	r3, #4
   b7d9a:	4433      	add	r3, r6
   b7d9c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7d9e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7da2:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7da6:	429a      	cmp	r2, r3
   b7da8:	d1f9      	bne.n	b7d9e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7daa:	aa01      	add	r2, sp, #4
   b7dac:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7dae:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7db2:	f004 fa85 	bl	bc2c0 <sscanf>
   b7db6:	2801      	cmp	r0, #1
   b7db8:	d105      	bne.n	b7dc6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7dba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7dbe:	4629      	mov	r1, r5
   b7dc0:	f7ff ff7b 	bl	b7cba <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7dc4:	3605      	adds	r6, #5
			escape = false;
   b7dc6:	2400      	movs	r4, #0
   b7dc8:	e004      	b.n	b7dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7dca:	295c      	cmp	r1, #92	; 0x5c
   b7dcc:	d004      	beq.n	b7dd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7dce:	4628      	mov	r0, r5
   b7dd0:	f7ff ff5e 	bl	b7c90 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7dd4:	3601      	adds	r6, #1
   b7dd6:	e7a3      	b.n	b7d20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7dd8:	2401      	movs	r4, #1
   b7dda:	e7fb      	b.n	b7dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7ddc:	2001      	movs	r0, #1
   b7dde:	b004      	add	sp, #16
   b7de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7de4:	000c1f31 	.word	0x000c1f31

000b7de8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7dea:	460c      	mov	r4, r1
   b7dec:	4606      	mov	r6, r0
	result = "";
   b7dee:	490c      	ldr	r1, [pc, #48]	; (b7e20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7df0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7df2:	4615      	mov	r5, r2
	result = "";
   b7df4:	f006 fe57 	bl	beaa6 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7df8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7dfc:	1ac9      	subs	r1, r1, r3
   b7dfe:	3101      	adds	r1, #1
   b7e00:	4628      	mov	r0, r5
   b7e02:	f006 fdc5 	bl	be990 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7e06:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7e08:	466a      	mov	r2, sp
   b7e0a:	4621      	mov	r1, r4
   b7e0c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7e0e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7e12:	9500      	str	r5, [sp, #0]
   b7e14:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7e16:	f7ff ff79 	bl	b7d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7e1a:	b004      	add	sp, #16
   b7e1c:	bd70      	pop	{r4, r5, r6, pc}
   b7e1e:	bf00      	nop
   b7e20:	000c1f8d 	.word	0x000c1f8d

000b7e24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e28:	b089      	sub	sp, #36	; 0x24
   b7e2a:	4605      	mov	r5, r0
   b7e2c:	4688      	mov	r8, r1
	String keyName;
   b7e2e:	a804      	add	r0, sp, #16
   b7e30:	4912      	ldr	r1, [pc, #72]	; (b7e7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7e32:	4616      	mov	r6, r2
   b7e34:	4699      	mov	r9, r3
	String keyName;
   b7e36:	f006 fdd8 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7e3a:	2700      	movs	r7, #0
   b7e3c:	9700      	str	r7, [sp, #0]
   b7e3e:	464b      	mov	r3, r9
   b7e40:	aa03      	add	r2, sp, #12
   b7e42:	4641      	mov	r1, r8
   b7e44:	4628      	mov	r0, r5
   b7e46:	f7ff fed2 	bl	b7bee <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7e4a:	4604      	mov	r4, r0
   b7e4c:	b170      	cbz	r0, b7e6c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7e4e:	9903      	ldr	r1, [sp, #12]
   b7e50:	aa04      	add	r2, sp, #16
   b7e52:	4628      	mov	r0, r5
   b7e54:	f7ff ffc8 	bl	b7de8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7e58:	4604      	mov	r4, r0
   b7e5a:	b908      	cbnz	r0, b7e60 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7e5c:	3701      	adds	r7, #1
   b7e5e:	e7ed      	b.n	b7e3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b7e60:	4631      	mov	r1, r6
   b7e62:	a804      	add	r0, sp, #16
   b7e64:	f006 fe87 	bl	beb76 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7e68:	2800      	cmp	r0, #0
   b7e6a:	d0f7      	beq.n	b7e5c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7e6c:	a804      	add	r0, sp, #16
   b7e6e:	f006 fd71 	bl	be954 <_ZN6StringD1Ev>
}
   b7e72:	4620      	mov	r0, r4
   b7e74:	b009      	add	sp, #36	; 0x24
   b7e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7e7a:	bf00      	nop
   b7e7c:	000c1f8d 	.word	0x000c1f8d

000b7e80 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b7e80:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b7e82:	2201      	movs	r2, #1
	offset = 0;
   b7e84:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b7e86:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b7e88:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b7e8a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b7e8e:	4770      	bx	lr

000b7e90 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b7e90:	b508      	push	{r3, lr}
   b7e92:	4603      	mov	r3, r0
   b7e94:	f7ff fe4a 	bl	b7b2c <_ZN10JsonBufferC1Ev>
   b7e98:	4a04      	ldr	r2, [pc, #16]	; (b7eac <_ZN10JsonWriterC1Ev+0x1c>)
   b7e9a:	601a      	str	r2, [r3, #0]
   b7e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b7ea0:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b7ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b7ea4:	f7ff ffec 	bl	b7e80 <_ZN10JsonWriter4initEv>
}
   b7ea8:	bd08      	pop	{r3, pc}
   b7eaa:	bf00      	nop
   b7eac:	000c16d0 	.word	0x000c16d0

000b7eb0 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b7eb0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b7eb4:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b7eb6:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b7eb8:	bf3f      	itttt	cc
   b7eba:	6842      	ldrcc	r2, [r0, #4]
   b7ebc:	1c5c      	addcc	r4, r3, #1
   b7ebe:	60c4      	strcc	r4, [r0, #12]
   b7ec0:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b7ec2:	bf24      	itt	cs
   b7ec4:	2301      	movcs	r3, #1
   b7ec6:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b7eca:	bd10      	pop	{r4, pc}

000b7ecc <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b7ecc:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b7ece:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b7ed0:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b7ed2:	b143      	cbz	r3, b7ee6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b7ed4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b7ed8:	7e59      	ldrb	r1, [r3, #25]
   b7eda:	b109      	cbz	r1, b7ee0 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b7edc:	f7ff ffe8 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b7ee0:	6963      	ldr	r3, [r4, #20]
   b7ee2:	3b01      	subs	r3, #1
   b7ee4:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b7ee6:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b7eea:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b7eec:	4288      	cmp	r0, r1
   b7eee:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b7ef2:	bf2a      	itet	cs
   b7ef4:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b7ef6:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b7ef8:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b7efc:	bd10      	pop	{r4, pc}

000b7efe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b7efe:	b570      	push	{r4, r5, r6, lr}
   b7f00:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b7f02:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b7f06:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b7f08:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b7f0a:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b7f0c:	4430      	add	r0, r6
   b7f0e:	460a      	mov	r2, r1
   b7f10:	4629      	mov	r1, r5
   b7f12:	f004 f9e5 	bl	bc2e0 <vsnprintf>
	if (count <= spaceAvailable) {
   b7f16:	4285      	cmp	r5, r0
		offset += count;
   b7f18:	bf2d      	iteet	cs
   b7f1a:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b7f1c:	68a3      	ldrcc	r3, [r4, #8]
   b7f1e:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b7f20:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b7f22:	bf36      	itet	cc
   b7f24:	2301      	movcc	r3, #1
		offset += count;
   b7f26:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b7f28:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b7f2c:	bd70      	pop	{r4, r5, r6, pc}

000b7f2e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b7f2e:	b40e      	push	{r1, r2, r3}
   b7f30:	b503      	push	{r0, r1, lr}
   b7f32:	aa03      	add	r2, sp, #12
   b7f34:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b7f38:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b7f3a:	f7ff ffe0 	bl	b7efe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b7f3e:	b002      	add	sp, #8
   b7f40:	f85d eb04 	ldr.w	lr, [sp], #4
   b7f44:	b003      	add	sp, #12
   b7f46:	4770      	bx	lr

000b7f48 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b7f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f4c:	4604      	mov	r4, r0
   b7f4e:	460e      	mov	r6, r1
	if (quoted) {
   b7f50:	4617      	mov	r7, r2
   b7f52:	b112      	cbz	r2, b7f5a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b7f54:	2122      	movs	r1, #34	; 0x22
   b7f56:	f7ff ffab 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b7f5a:	f8df 810c 	ldr.w	r8, [pc, #268]	; b8068 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b7f5e:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b7f60:	5d71      	ldrb	r1, [r6, r5]
   b7f62:	eb06 0905 	add.w	r9, r6, r5
   b7f66:	2900      	cmp	r1, #0
   b7f68:	d074      	beq.n	b8054 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b7f6a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b7f6e:	429a      	cmp	r2, r3
   b7f70:	d270      	bcs.n	b8054 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b7f72:	060b      	lsls	r3, r1, #24
   b7f74:	d534      	bpl.n	b7fe0 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b7f76:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b7f7a:	2be0      	cmp	r3, #224	; 0xe0
   b7f7c:	f105 0901 	add.w	r9, r5, #1
   b7f80:	d11d      	bne.n	b7fbe <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b7f82:	f816 2009 	ldrb.w	r2, [r6, r9]
   b7f86:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b7f8a:	2b80      	cmp	r3, #128	; 0x80
   b7f8c:	d139      	bne.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b7f8e:	f105 0902 	add.w	r9, r5, #2
   b7f92:	f816 3009 	ldrb.w	r3, [r6, r9]
   b7f96:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b7f9a:	2880      	cmp	r0, #128	; 0x80
   b7f9c:	d131      	bne.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b7f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b7fa2:	0192      	lsls	r2, r2, #6
   b7fa4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b7fa8:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b7fac:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b7fae:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b7fb0:	4641      	mov	r1, r8
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	f7ff ffbb 	bl	b7f2e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b7fb8:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b7fba:	3501      	adds	r5, #1
   b7fbc:	e7d0      	b.n	b7f60 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b7fbe:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b7fc2:	2bc0      	cmp	r3, #192	; 0xc0
   b7fc4:	d11d      	bne.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b7fc6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b7fca:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b7fce:	2a80      	cmp	r2, #128	; 0x80
   b7fd0:	d117      	bne.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b7fd2:	0189      	lsls	r1, r1, #6
   b7fd4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b7fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b7fdc:	431a      	orrs	r2, r3
   b7fde:	e7e7      	b.n	b7fb0 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b7fe0:	290d      	cmp	r1, #13
   b7fe2:	d80a      	bhi.n	b7ffa <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b7fe4:	2907      	cmp	r1, #7
   b7fe6:	d90c      	bls.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b7fe8:	f1a1 0308 	sub.w	r3, r1, #8
   b7fec:	2b05      	cmp	r3, #5
   b7fee:	d808      	bhi.n	b8002 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b7ff0:	e8df f003 	tbb	[pc, r3]
   b7ff4:	07172309 	.word	0x07172309
   b7ff8:	1d11      	.short	0x1d11
   b7ffa:	2922      	cmp	r1, #34	; 0x22
   b7ffc:	d023      	beq.n	b8046 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b7ffe:	295c      	cmp	r1, #92	; 0x5c
   b8000:	d021      	beq.n	b8046 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8002:	4620      	mov	r0, r4
   b8004:	e004      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8006:	215c      	movs	r1, #92	; 0x5c
   b8008:	4620      	mov	r0, r4
   b800a:	f7ff ff51 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b800e:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8010:	f7ff ff4e 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				break;
   b8014:	e7d1      	b.n	b7fba <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b8016:	215c      	movs	r1, #92	; 0x5c
   b8018:	4620      	mov	r0, r4
   b801a:	f7ff ff49 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b801e:	2166      	movs	r1, #102	; 0x66
   b8020:	e7f6      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8022:	215c      	movs	r1, #92	; 0x5c
   b8024:	4620      	mov	r0, r4
   b8026:	f7ff ff43 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b802a:	216e      	movs	r1, #110	; 0x6e
   b802c:	e7f0      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b802e:	215c      	movs	r1, #92	; 0x5c
   b8030:	4620      	mov	r0, r4
   b8032:	f7ff ff3d 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b8036:	2172      	movs	r1, #114	; 0x72
   b8038:	e7ea      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b803a:	215c      	movs	r1, #92	; 0x5c
   b803c:	4620      	mov	r0, r4
   b803e:	f7ff ff37 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b8042:	2174      	movs	r1, #116	; 0x74
   b8044:	e7e4      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8046:	215c      	movs	r1, #92	; 0x5c
   b8048:	4620      	mov	r0, r4
   b804a:	f7ff ff31 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b804e:	f899 1000 	ldrb.w	r1, [r9]
   b8052:	e7dd      	b.n	b8010 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b8054:	b12f      	cbz	r7, b8062 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b8056:	4620      	mov	r0, r4
   b8058:	2122      	movs	r1, #34	; 0x22
}
   b805a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b805e:	f7ff bf27 	b.w	b7eb0 <_ZN10JsonWriter10insertCharEc>
}
   b8062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8066:	bf00      	nop
   b8068:	000c16a0 	.word	0x000c16a0

000b806c <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b806c:	6942      	ldr	r2, [r0, #20]
   b806e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b8072:	7e1a      	ldrb	r2, [r3, #24]
   b8074:	b112      	cbz	r2, b807c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b8076:	2200      	movs	r2, #0
   b8078:	761a      	strb	r2, [r3, #24]
}
   b807a:	4770      	bx	lr
		insertChar(',');
   b807c:	212c      	movs	r1, #44	; 0x2c
   b807e:	f7ff bf17 	b.w	b7eb0 <_ZN10JsonWriter10insertCharEc>

000b8082 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8082:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8084:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8086:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8088:	3301      	adds	r3, #1
   b808a:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b808c:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b808e:	d80f      	bhi.n	b80b0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b8090:	f7ff ffec 	bl	b806c <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b8094:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b8096:	9901      	ldr	r1, [sp, #4]
   b8098:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b809c:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b809e:	2501      	movs	r5, #1
	contextIndex++;
   b80a0:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b80a2:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b80a4:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b80a6:	f7ff ff03 	bl	b7eb0 <_ZN10JsonWriter10insertCharEc>
   b80aa:	4628      	mov	r0, r5
}
   b80ac:	b002      	add	sp, #8
   b80ae:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b80b0:	2000      	movs	r0, #0
   b80b2:	e7fb      	b.n	b80ac <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b80b4 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b80b4:	b510      	push	{r4, lr}
   b80b6:	4604      	mov	r4, r0
   b80b8:	f7ff feea 	bl	b7e90 <_ZN10JsonWriterC1Ev>
   b80bc:	4b05      	ldr	r3, [pc, #20]	; (b80d4 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b80be:	6023      	str	r3, [r4, #0]
   b80c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b80c4:	2300      	movs	r3, #0
   b80c6:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b80ca:	6321      	str	r1, [r4, #48]	; 0x30
   b80cc:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b80ce:	4620      	mov	r0, r4
   b80d0:	bd10      	pop	{r4, pc}
   b80d2:	bf00      	nop
   b80d4:	000c16e0 	.word	0x000c16e0

000b80d8 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b80d8:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b80da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b80dc:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b80de:	4604      	mov	r4, r0
   b80e0:	460e      	mov	r6, r1
	if (start != -1) {
   b80e2:	d129      	bne.n	b8138 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b80e4:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b80e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b80e8:	3d01      	subs	r5, #1
   b80ea:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b80ec:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b80ee:	1b5a      	subs	r2, r3, r5
   b80f0:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b80f2:	6888      	ldr	r0, [r1, #8]
   b80f4:	4428      	add	r0, r5
   b80f6:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b80f8:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b80fa:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b80fc:	dd04      	ble.n	b8108 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b80fe:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b8100:	1941      	adds	r1, r0, r5
   b8102:	4418      	add	r0, r3
   b8104:	f008 f804 	bl	c0110 <memmove>
   b8108:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b810a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b810c:	6852      	ldr	r2, [r2, #4]
   b810e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8110:	440a      	add	r2, r1
   b8112:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8114:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b8116:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b811a:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b811c:	7425      	strb	r5, [r4, #16]
	init();
   b811e:	f7ff feaf 	bl	b7e80 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b8122:	6963      	ldr	r3, [r4, #20]
   b8124:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b8128:	68f3      	ldr	r3, [r6, #12]
   b812a:	fab3 f383 	clz	r3, r3
   b812e:	095b      	lsrs	r3, r3, #5
   b8130:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b8134:	4628      	mov	r0, r5

	return true;
}
   b8136:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8138:	2000      	movs	r0, #0
   b813a:	e7fc      	b.n	b8136 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b813c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8140:	6844      	ldr	r4, [r0, #4]
   b8142:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b8146:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b814a:	f8d0 e000 	ldr.w	lr, [r0]
   b814e:	4596      	cmp	lr, r2
   b8150:	f080 81b9 	bcs.w	b84c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b8154:	f811 800e 	ldrb.w	r8, [r1, lr]
   b8158:	f1b8 0f00 	cmp.w	r8, #0
   b815c:	f000 81b3 	beq.w	b84c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b8160:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b8164:	f000 8098 	beq.w	b8298 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b8168:	d833      	bhi.n	b81d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b816a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b816e:	f000 80a6 	beq.w	b82be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b8172:	d810      	bhi.n	b8196 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8174:	f1a8 0809 	sub.w	r8, r8, #9
   b8178:	fa5f f888 	uxtb.w	r8, r8
   b817c:	f1b8 0f17 	cmp.w	r8, #23
   b8180:	d80d      	bhi.n	b819e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8182:	4d9f      	ldr	r5, [pc, #636]	; (b8400 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8184:	fa0c f808 	lsl.w	r8, ip, r8
   b8188:	ea18 0f05 	tst.w	r8, r5
   b818c:	d007      	beq.n	b819e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b818e:	6805      	ldr	r5, [r0, #0]
   b8190:	3501      	adds	r5, #1
   b8192:	6005      	str	r5, [r0, #0]
   b8194:	e7d9      	b.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b8196:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b819a:	f000 8133 	beq.w	b8404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b819e:	f8d0 8000 	ldr.w	r8, [r0]
   b81a2:	4542      	cmp	r2, r8
   b81a4:	d90e      	bls.n	b81c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b81a6:	f811 5008 	ldrb.w	r5, [r1, r8]
   b81aa:	b15d      	cbz	r5, b81c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b81ac:	2d3a      	cmp	r5, #58	; 0x3a
   b81ae:	f200 8169 	bhi.w	b8484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b81b2:	2d1f      	cmp	r5, #31
   b81b4:	f200 8151 	bhi.w	b845a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b81b8:	2d0a      	cmp	r5, #10
   b81ba:	f200 8160 	bhi.w	b847e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b81be:	2d08      	cmp	r5, #8
   b81c0:	f240 8156 	bls.w	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b81c4:	2b00      	cmp	r3, #0
   b81c6:	f040 8162 	bne.w	b848e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b81ca:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b81ce:	6005      	str	r5, [r0, #0]
   b81d0:	e0a5      	b.n	b831e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b81d2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b81d6:	d037      	beq.n	b8248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b81d8:	d82e      	bhi.n	b8238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b81da:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b81de:	d033      	beq.n	b8248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b81e0:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b81e4:	d1db      	bne.n	b819e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b81e6:	2b00      	cmp	r3, #0
   b81e8:	d0d1      	beq.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b81ea:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b81ee:	6845      	ldr	r5, [r0, #4]
   b81f0:	3d01      	subs	r5, #1
   b81f2:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b81f6:	2d00      	cmp	r5, #0
   b81f8:	db55      	blt.n	b82a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b81fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b81fe:	3701      	adds	r7, #1
   b8200:	d04d      	beq.n	b829e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8202:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b8206:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b820a:	d148      	bne.n	b829e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b820c:	f898 b000 	ldrb.w	fp, [r8]
   b8210:	45cb      	cmp	fp, r9
   b8212:	d14b      	bne.n	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8214:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8218:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b821c:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8220:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8224:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8228:	3701      	adds	r7, #1
   b822a:	d042      	beq.n	b82b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b822c:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8230:	3701      	adds	r7, #1
   b8232:	d13e      	bne.n	b82b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b8234:	6085      	str	r5, [r0, #8]
				break;
   b8236:	e7aa      	b.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8238:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b823c:	d1af      	bne.n	b819e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b823e:	2b00      	cmp	r3, #0
   b8240:	d0a5      	beq.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8242:	f04f 0901 	mov.w	r9, #1
   b8246:	e7d2      	b.n	b81ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8248:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b824a:	2b00      	cmp	r3, #0
   b824c:	d09f      	beq.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b824e:	6845      	ldr	r5, [r0, #4]
   b8250:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8252:	42af      	cmp	r7, r5
   b8254:	d94a      	bls.n	b82ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b8256:	f105 0e01 	add.w	lr, r5, #1
   b825a:	f8c0 e004 	str.w	lr, [r0, #4]
   b825e:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b8262:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b8266:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b826a:	2500      	movs	r5, #0
   b826c:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8270:	6885      	ldr	r5, [r0, #8]
   b8272:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8274:	bf1f      	itttt	ne
   b8276:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b827a:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b827e:	3501      	addne	r5, #1
   b8280:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8284:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8288:	bf0c      	ite	eq
   b828a:	2501      	moveq	r5, #1
   b828c:	2502      	movne	r5, #2
   b828e:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b8292:	6805      	ldr	r5, [r0, #0]
   b8294:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b8298:	6845      	ldr	r5, [r0, #4]
   b829a:	3d01      	subs	r5, #1
   b829c:	e7ca      	b.n	b8234 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b829e:	3d01      	subs	r5, #1
   b82a0:	f1a8 0810 	sub.w	r8, r8, #16
   b82a4:	e7a7      	b.n	b81f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b82a6:	3501      	adds	r5, #1
   b82a8:	f47f af71 	bne.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b82ac:	f06f 0401 	mvn.w	r4, #1
   b82b0:	e01e      	b.n	b82f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b82b2:	3d01      	subs	r5, #1
   b82b4:	1c6f      	adds	r7, r5, #1
   b82b6:	f1ae 0e10 	sub.w	lr, lr, #16
   b82ba:	d1b3      	bne.n	b8224 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b82bc:	e767      	b.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b82be:	f10e 0901 	add.w	r9, lr, #1
   b82c2:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b82c6:	f8d0 8000 	ldr.w	r8, [r0]
   b82ca:	4542      	cmp	r2, r8
   b82cc:	f240 8093 	bls.w	b83f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b82d0:	f811 5008 	ldrb.w	r5, [r1, r8]
   b82d4:	2d00      	cmp	r5, #0
   b82d6:	f000 808e 	beq.w	b83f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b82da:	2d22      	cmp	r5, #34	; 0x22
   b82dc:	d130      	bne.n	b8340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b82de:	b1f3      	cbz	r3, b831e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b82e0:	6845      	ldr	r5, [r0, #4]
   b82e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b82e4:	42af      	cmp	r7, r5
   b82e6:	d806      	bhi.n	b82f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b82e8:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b82ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b82f0:	4620      	mov	r0, r4
   b82f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b82f6:	f105 0e01 	add.w	lr, r5, #1
   b82fa:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b82fe:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8302:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b8306:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b830a:	2700      	movs	r7, #0
   b830c:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b830e:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b8312:	f04f 0a03 	mov.w	sl, #3
   b8316:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b831a:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b831e:	6885      	ldr	r5, [r0, #8]
   b8320:	1c6f      	adds	r7, r5, #1
				count++;
   b8322:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b8326:	f43f af32 	beq.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b832a:	2b00      	cmp	r3, #0
   b832c:	f43f af2f 	beq.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8330:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8334:	f8de 500c 	ldr.w	r5, [lr, #12]
   b8338:	3501      	adds	r5, #1
   b833a:	f8ce 500c 	str.w	r5, [lr, #12]
   b833e:	e726      	b.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8340:	2d5c      	cmp	r5, #92	; 0x5c
   b8342:	d111      	bne.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8344:	f108 0501 	add.w	r5, r8, #1
   b8348:	42aa      	cmp	r2, r5
   b834a:	d90d      	bls.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b834c:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b834e:	5d4d      	ldrb	r5, [r1, r5]
   b8350:	2d75      	cmp	r5, #117	; 0x75
   b8352:	d82b      	bhi.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8354:	2d6d      	cmp	r5, #109	; 0x6d
   b8356:	d80b      	bhi.n	b8370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b8358:	2d66      	cmp	r5, #102	; 0x66
   b835a:	d827      	bhi.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b835c:	2d5b      	cmp	r5, #91	; 0x5b
   b835e:	d81d      	bhi.n	b839c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b8360:	2d22      	cmp	r5, #34	; 0x22
   b8362:	d001      	beq.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8364:	2d2f      	cmp	r5, #47	; 0x2f
   b8366:	d121      	bne.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8368:	6805      	ldr	r5, [r0, #0]
   b836a:	3501      	adds	r5, #1
   b836c:	6005      	str	r5, [r0, #0]
   b836e:	e7aa      	b.n	b82c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b8370:	3d6e      	subs	r5, #110	; 0x6e
   b8372:	2d07      	cmp	r5, #7
   b8374:	d81a      	bhi.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8376:	a701      	add	r7, pc, #4	; (adr r7, b837c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b8378:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b837c:	000b8369 	.word	0x000b8369
   b8380:	000b83ad 	.word	0x000b83ad
   b8384:	000b83ad 	.word	0x000b83ad
   b8388:	000b83ad 	.word	0x000b83ad
   b838c:	000b8369 	.word	0x000b8369
   b8390:	000b83ad 	.word	0x000b83ad
   b8394:	000b8369 	.word	0x000b8369
   b8398:	000b83b3 	.word	0x000b83b3
   b839c:	3d5c      	subs	r5, #92	; 0x5c
   b839e:	b2ed      	uxtb	r5, r5
   b83a0:	fa0c f505 	lsl.w	r5, ip, r5
   b83a4:	f240 4741 	movw	r7, #1089	; 0x441
   b83a8:	423d      	tst	r5, r7
   b83aa:	d1dd      	bne.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b83ac:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b83b0:	e77c      	b.n	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b83b2:	f108 0502 	add.w	r5, r8, #2
   b83b6:	6005      	str	r5, [r0, #0]
   b83b8:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83bc:	f8d0 8000 	ldr.w	r8, [r0]
   b83c0:	4542      	cmp	r2, r8
   b83c2:	d803      	bhi.n	b83cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b83c4:	6805      	ldr	r5, [r0, #0]
   b83c6:	3d01      	subs	r5, #1
   b83c8:	6005      	str	r5, [r0, #0]
					break;
   b83ca:	e7cd      	b.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83cc:	f811 5008 	ldrb.w	r5, [r1, r8]
   b83d0:	2d00      	cmp	r5, #0
   b83d2:	d0f7      	beq.n	b83c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b83d4:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b83d8:	f1bb 0f09 	cmp.w	fp, #9
   b83dc:	d904      	bls.n	b83e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b83de:	f025 0520 	bic.w	r5, r5, #32
   b83e2:	3d41      	subs	r5, #65	; 0x41
   b83e4:	2d05      	cmp	r5, #5
   b83e6:	d8e1      	bhi.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b83e8:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83ec:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b83f0:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83f2:	d1e3      	bne.n	b83bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b83f4:	e7e6      	b.n	b83c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b83f6:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b83fa:	f06f 0402 	mvn.w	r4, #2
   b83fe:	e777      	b.n	b82f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8400:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b8404:	2b00      	cmp	r3, #0
   b8406:	f43f aec2 	beq.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b840a:	6885      	ldr	r5, [r0, #8]
   b840c:	1c6f      	adds	r7, r5, #1
   b840e:	f43f aebe 	beq.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b8412:	012d      	lsls	r5, r5, #4
   b8414:	5d5d      	ldrb	r5, [r3, r5]
   b8416:	3d01      	subs	r5, #1
   b8418:	2d01      	cmp	r5, #1
   b841a:	f67f aeb8 	bls.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b841e:	6845      	ldr	r5, [r0, #4]
   b8420:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b8424:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8428:	f1b8 0f00 	cmp.w	r8, #0
   b842c:	f6ff aeaf 	blt.w	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b8430:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b8434:	3d01      	subs	r5, #1
   b8436:	2d01      	cmp	r5, #1
   b8438:	d80a      	bhi.n	b8450 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b843a:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b843e:	3501      	adds	r5, #1
   b8440:	d006      	beq.n	b8450 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b8442:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b8446:	3501      	adds	r5, #1
   b8448:	d102      	bne.n	b8450 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b844a:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b844e:	e69e      	b.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8450:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8454:	f1ae 0e10 	sub.w	lr, lr, #16
   b8458:	e7e6      	b.n	b8428 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b845a:	f1a5 0920 	sub.w	r9, r5, #32
   b845e:	4f24      	ldr	r7, [pc, #144]	; (b84f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b8460:	fa5f f989 	uxtb.w	r9, r9
   b8464:	fa0c f909 	lsl.w	r9, ip, r9
   b8468:	ea19 0f07 	tst.w	r9, r7
   b846c:	f47f aeaa 	bne.w	b81c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b8470:	3d20      	subs	r5, #32
   b8472:	2d5e      	cmp	r5, #94	; 0x5e
   b8474:	d89a      	bhi.n	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8476:	f108 0501 	add.w	r5, r8, #1
   b847a:	6005      	str	r5, [r0, #0]
   b847c:	e68f      	b.n	b819e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b847e:	2d0d      	cmp	r5, #13
   b8480:	d1f6      	bne.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b8482:	e69f      	b.n	b81c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8484:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b8488:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b848c:	e7f8      	b.n	b8480 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b848e:	6845      	ldr	r5, [r0, #4]
   b8490:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8492:	42af      	cmp	r7, r5
   b8494:	f67f af28 	bls.w	b82e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b8498:	f105 0801 	add.w	r8, r5, #1
   b849c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b84a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b84a4:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b84a8:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b84ac:	2700      	movs	r7, #0
   b84ae:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b84b0:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b84b4:	f04f 0a04 	mov.w	sl, #4
   b84b8:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b84bc:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b84c0:	6805      	ldr	r5, [r0, #0]
   b84c2:	3d01      	subs	r5, #1
   b84c4:	e683      	b.n	b81ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b84c6:	2b00      	cmp	r3, #0
   b84c8:	f43f af12 	beq.w	b82f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b84cc:	6842      	ldr	r2, [r0, #4]
   b84ce:	1e51      	subs	r1, r2, #1
   b84d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b84d4:	2900      	cmp	r1, #0
   b84d6:	f6ff af0b 	blt.w	b82f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b84da:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b84de:	3201      	adds	r2, #1
   b84e0:	d003      	beq.n	b84ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b84e2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b84e6:	3201      	adds	r2, #1
   b84e8:	d087      	beq.n	b83fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b84ea:	3901      	subs	r1, #1
   b84ec:	3b10      	subs	r3, #16
   b84ee:	e7f1      	b.n	b84d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b84f0:	04001001 	.word	0x04001001

000b84f4 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b84f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b84f6:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b84f8:	4604      	mov	r4, r0
	if (offset == 0) {
   b84fa:	b912      	cbnz	r2, b8502 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b84fc:	2000      	movs	r0, #0
}
   b84fe:	b003      	add	sp, #12
   b8500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b8502:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b8504:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b8508:	b1ab      	cbz	r3, b8536 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b850a:	2100      	movs	r1, #0
	parser->toknext = 0;
   b850c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8514:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8516:	69c1      	ldr	r1, [r0, #28]
   b8518:	9100      	str	r1, [sp, #0]
   b851a:	6841      	ldr	r1, [r0, #4]
   b851c:	4630      	mov	r0, r6
   b851e:	f7ff fe0d 	bl	b813c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b8522:	1c43      	adds	r3, r0, #1
   b8524:	d128      	bne.n	b8578 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b8526:	7c25      	ldrb	r5, [r4, #16]
   b8528:	2d00      	cmp	r5, #0
   b852a:	d1e7      	bne.n	b84fc <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b852c:	6960      	ldr	r0, [r4, #20]
   b852e:	f003 feaf 	bl	bc290 <free>
			tokens = 0;
   b8532:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b8534:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b8536:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b8538:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b853c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8540:	68e2      	ldr	r2, [r4, #12]
   b8542:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8544:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8546:	9500      	str	r5, [sp, #0]
   b8548:	462b      	mov	r3, r5
   b854a:	4630      	mov	r0, r6
   b854c:	f7ff fdf6 	bl	b813c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8550:	2800      	cmp	r0, #0
   b8552:	dbd3      	blt.n	b84fc <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8554:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b8556:	d017      	beq.n	b8588 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8558:	0100      	lsls	r0, r0, #4
   b855a:	f003 fe91 	bl	bc280 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b855e:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8560:	6160      	str	r0, [r4, #20]
   b8562:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8564:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b8566:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b856a:	68e2      	ldr	r2, [r4, #12]
   b856c:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b856e:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8570:	4630      	mov	r0, r6
   b8572:	f7ff fde3 	bl	b813c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b8576:	e001      	b.n	b857c <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b8578:	2800      	cmp	r0, #0
   b857a:	dbbf      	blt.n	b84fc <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b857c:	6963      	ldr	r3, [r4, #20]
   b857e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8582:	61a0      	str	r0, [r4, #24]
	return true;
   b8584:	2001      	movs	r0, #1
   b8586:	e7ba      	b.n	b84fe <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b8588:	6963      	ldr	r3, [r4, #20]
   b858a:	61a3      	str	r3, [r4, #24]
   b858c:	e7fa      	b.n	b8584 <_ZN10JsonParser5parseEv+0x90>

000b858e <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b858e:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b8590:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8592:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b8594:	4604      	mov	r4, r0
	if (start == -1) {
   b8596:	d018      	beq.n	b85ca <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b8598:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b859a:	2a00      	cmp	r2, #0
   b859c:	dd08      	ble.n	b85b0 <_ZN12JsonModifier6finishEv+0x22>
   b859e:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b85a0:	68e5      	ldr	r5, [r4, #12]
   b85a2:	6848      	ldr	r0, [r1, #4]
   b85a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b85a6:	442b      	add	r3, r5
   b85a8:	4401      	add	r1, r0
   b85aa:	4418      	add	r0, r3
   b85ac:	f007 fdb0 	bl	c0110 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b85b0:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b85b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b85b6:	440b      	add	r3, r1
   b85b8:	68e1      	ldr	r1, [r4, #12]
   b85ba:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b85bc:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b85be:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b85c0:	f7ff ff98 	bl	b84f4 <_ZN10JsonParser5parseEv>
	start = -1;
   b85c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b85c8:	6363      	str	r3, [r4, #52]	; 0x34
}
   b85ca:	bd38      	pop	{r3, r4, r5, pc}

000b85cc <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b85cc:	4770      	bx	lr

000b85ce <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b85ce:	4770      	bx	lr

000b85d0 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b85d0:	b510      	push	{r4, lr}
}
   b85d2:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b85d4:	4604      	mov	r4, r0
}
   b85d6:	f7fb fd62 	bl	b409e <_ZdlPvj>
   b85da:	4620      	mov	r0, r4
   b85dc:	bd10      	pop	{r4, pc}

000b85de <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b85de:	b510      	push	{r4, lr}
}
   b85e0:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b85e2:	4604      	mov	r4, r0
}
   b85e4:	f7fb fd5b 	bl	b409e <_ZdlPvj>
   b85e8:	4620      	mov	r0, r4
   b85ea:	bd10      	pop	{r4, pc}

000b85ec <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b85ec:	b510      	push	{r4, lr}
   b85ee:	4b05      	ldr	r3, [pc, #20]	; (b8604 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b85f0:	4604      	mov	r4, r0
   b85f2:	f840 3b1c 	str.w	r3, [r0], #28
   b85f6:	f006 f9ad 	bl	be954 <_ZN6StringD1Ev>
   b85fa:	1d20      	adds	r0, r4, #4
   b85fc:	f006 f9aa 	bl	be954 <_ZN6StringD1Ev>
}
   b8600:	4620      	mov	r0, r4
   b8602:	bd10      	pop	{r4, pc}
   b8604:	000c1754 	.word	0x000c1754

000b8608 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b8608:	b510      	push	{r4, lr}
   b860a:	4604      	mov	r4, r0
}
   b860c:	f7ff ffee 	bl	b85ec <_ZN22LocalTimePosixTimezoneD1Ev>
   b8610:	4620      	mov	r0, r4
   b8612:	2158      	movs	r1, #88	; 0x58
   b8614:	f7fb fd43 	bl	b409e <_ZdlPvj>
   b8618:	4620      	mov	r0, r4
   b861a:	bd10      	pop	{r4, pc}

000b861c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b861c:	b510      	push	{r4, lr}
   b861e:	4b04      	ldr	r3, [pc, #16]	; (b8630 <_ZN9LocalTimeD1Ev+0x14>)
   b8620:	4604      	mov	r4, r0
   b8622:	f840 3b04 	str.w	r3, [r0], #4
   b8626:	f7ff ffe1 	bl	b85ec <_ZN22LocalTimePosixTimezoneD1Ev>
   b862a:	4620      	mov	r0, r4
   b862c:	bd10      	pop	{r4, pc}
   b862e:	bf00      	nop
   b8630:	000c1724 	.word	0x000c1724

000b8634 <_ZN9LocalTimeD0Ev>:
   b8634:	b510      	push	{r4, lr}
   b8636:	4604      	mov	r4, r0
   b8638:	f7ff fff0 	bl	b861c <_ZN9LocalTimeD1Ev>
   b863c:	4620      	mov	r0, r4
   b863e:	2160      	movs	r1, #96	; 0x60
   b8640:	f7fb fd2d 	bl	b409e <_ZdlPvj>
   b8644:	4620      	mov	r0, r4
   b8646:	bd10      	pop	{r4, pc}

000b8648 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b8648:	f020 0302 	bic.w	r3, r0, #2
   b864c:	2b01      	cmp	r3, #1
   b864e:	d003      	beq.n	b8658 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b8650:	1f43      	subs	r3, r0, #5
   b8652:	4258      	negs	r0, r3
   b8654:	4158      	adcs	r0, r3
   b8656:	4770      	bx	lr
   b8658:	4618      	mov	r0, r3
   b865a:	4770      	bx	lr

000b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b865c:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b8660:	7103      	strb	r3, [r0, #4]
   b8662:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b8666:	7143      	strb	r3, [r0, #5]
   b8668:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b866c:	7183      	strb	r3, [r0, #6]
   b866e:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b8672:	71c3      	strb	r3, [r0, #7]
   b8674:	4770      	bx	lr

000b8676 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b8676:	b538      	push	{r3, r4, r5, lr}
   b8678:	4604      	mov	r4, r0
   b867a:	460d      	mov	r5, r1
   b867c:	3004      	adds	r0, #4
   b867e:	3104      	adds	r1, #4
   b8680:	f006 f9ef 	bl	bea62 <_ZN6StringaSERKS_>
   b8684:	f105 0114 	add.w	r1, r5, #20
   b8688:	f104 0014 	add.w	r0, r4, #20
   b868c:	f7ff ffe6 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b8690:	f105 011c 	add.w	r1, r5, #28
   b8694:	f104 001c 	add.w	r0, r4, #28
   b8698:	f006 f9e3 	bl	bea62 <_ZN6StringaSERKS_>
   b869c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b86a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b86a4:	f7ff ffda 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b86a8:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b86ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b86b0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b86b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b86b8:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b86bc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b86c0:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b86c4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b86c8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b86cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b86d0:	f7ff ffc4 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b86d4:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b86d8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b86dc:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b86e0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b86e4:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b86e8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b86ec:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b86f0:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b86f4:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b86f8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b86fc:	f7ff ffae 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b8700:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b8704:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b8708:	bd38      	pop	{r3, r4, r5, pc}

000b870a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b870a:	680b      	ldr	r3, [r1, #0]
   b870c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b870e:	684b      	ldr	r3, [r1, #4]
   b8710:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8712:	b113      	cbz	r3, b871a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8714:	685a      	ldr	r2, [r3, #4]
   b8716:	3201      	adds	r2, #1
   b8718:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b871a:	4770      	bx	lr

000b871c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b871c:	4a02      	ldr	r2, [pc, #8]	; (b8728 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b871e:	6002      	str	r2, [r0, #0]
   b8720:	684a      	ldr	r2, [r1, #4]
   b8722:	6042      	str	r2, [r0, #4]
   b8724:	4770      	bx	lr
   b8726:	bf00      	nop
   b8728:	000c1734 	.word	0x000c1734

000b872c <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b872c:	694a      	ldr	r2, [r1, #20]
   b872e:	6803      	ldr	r3, [r0, #0]
   b8730:	f362 0316 	bfi	r3, r2, #0, #23
   b8734:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b8736:	690b      	ldr	r3, [r1, #16]
   b8738:	1c5a      	adds	r2, r3, #1
   b873a:	8843      	ldrh	r3, [r0, #2]
   b873c:	f362 13ca 	bfi	r3, r2, #7, #4
   b8740:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b8742:	68ca      	ldr	r2, [r1, #12]
   b8744:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b8748:	f362 03c7 	bfi	r3, r2, #3, #5
   b874c:	70c3      	strb	r3, [r0, #3]
}
   b874e:	4770      	bx	lr

000b8750 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b8750:	4a02      	ldr	r2, [pc, #8]	; (b875c <_ZN12LocalTimeHMSC1Ev+0xc>)
   b8752:	6002      	str	r2, [r0, #0]
   b8754:	2200      	movs	r2, #0
   b8756:	6042      	str	r2, [r0, #4]
}
   b8758:	4770      	bx	lr
   b875a:	bf00      	nop
   b875c:	000c1734 	.word	0x000c1734

000b8760 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b8760:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b8762:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b8764:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b8766:	8083      	strh	r3, [r0, #4]
   b8768:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b876a:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b876c:	ab05      	add	r3, sp, #20
   b876e:	9300      	str	r3, [sp, #0]
   b8770:	4913      	ldr	r1, [pc, #76]	; (b87c0 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b8772:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b8774:	ab04      	add	r3, sp, #16
   b8776:	aa03      	add	r2, sp, #12
   b8778:	4628      	mov	r0, r5
   b877a:	f003 fda1 	bl	bc2c0 <sscanf>
   b877e:	2803      	cmp	r0, #3
   b8780:	d107      	bne.n	b8792 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b8782:	9b03      	ldr	r3, [sp, #12]
   b8784:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b8786:	9b04      	ldr	r3, [sp, #16]
   b8788:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b878a:	9b05      	ldr	r3, [sp, #20]
   b878c:	71a3      	strb	r3, [r4, #6]
}
   b878e:	b007      	add	sp, #28
   b8790:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b8792:	490c      	ldr	r1, [pc, #48]	; (b87c4 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b8794:	ab04      	add	r3, sp, #16
   b8796:	aa03      	add	r2, sp, #12
   b8798:	4628      	mov	r0, r5
   b879a:	f003 fd91 	bl	bc2c0 <sscanf>
   b879e:	2802      	cmp	r0, #2
   b87a0:	d104      	bne.n	b87ac <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b87a2:	9b03      	ldr	r3, [sp, #12]
   b87a4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b87a6:	9b04      	ldr	r3, [sp, #16]
   b87a8:	7163      	strb	r3, [r4, #5]
   b87aa:	e7f0      	b.n	b878e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b87ac:	4906      	ldr	r1, [pc, #24]	; (b87c8 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b87ae:	aa03      	add	r2, sp, #12
   b87b0:	4628      	mov	r0, r5
   b87b2:	f003 fd85 	bl	bc2c0 <sscanf>
   b87b6:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b87b8:	bf04      	itt	eq
   b87ba:	9b03      	ldreq	r3, [sp, #12]
   b87bc:	7123      	strbeq	r3, [r4, #4]
}
   b87be:	e7e6      	b.n	b878e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b87c0:	000c16e8 	.word	0x000c16e8
   b87c4:	000c16eb 	.word	0x000c16eb
   b87c8:	000c14b3 	.word	0x000c14b3

000b87cc <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b87cc:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b87d0:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b87d4:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b87d8:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b87da:	bfb8      	it	lt
   b87dc:	4808      	ldrlt	r0, [pc, #32]	; (b8800 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b87de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b87e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b87e6:	bfbd      	ittte	lt
   b87e8:	fb00 3002 	mlalt	r0, r0, r2, r3
   b87ec:	1840      	addlt	r0, r0, r1
   b87ee:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b87f0:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b87f4:	bfa4      	itt	ge
   b87f6:	fb00 3002 	mlage	r0, r0, r2, r3
   b87fa:	1840      	addge	r0, r0, r1
}
   b87fc:	4770      	bx	lr
   b87fe:	bf00      	nop
   b8800:	fffff1f0 	.word	0xfffff1f0

000b8804 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b8804:	b508      	push	{r3, lr}
   b8806:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b880a:	b14b      	cbz	r3, b8820 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b880c:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b8810:	b943      	cbnz	r3, b8824 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b8812:	302c      	adds	r0, #44	; 0x2c
   b8814:	f7ff ffda 	bl	b87cc <_ZNK12LocalTimeHMS9toSecondsEv>
   b8818:	fab0 f080 	clz	r0, r0
   b881c:	0940      	lsrs	r0, r0, #5
   b881e:	bd08      	pop	{r3, pc}
   b8820:	2001      	movs	r0, #1
   b8822:	e7fc      	b.n	b881e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b8824:	2000      	movs	r0, #0
   b8826:	e7fa      	b.n	b881e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b8828 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b8828:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b882c:	b943      	cbnz	r3, b8840 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b882e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b8832:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b8834:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b8838:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b883a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b883e:	600b      	str	r3, [r1, #0]
}
   b8840:	4770      	bx	lr

000b8842 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b8842:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b8846:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b8848:	b9b3      	cbnz	r3, b8878 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b884a:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b884e:	688c      	ldr	r4, [r1, #8]
   b8850:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b8852:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b8856:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b8858:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b885c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b885e:	bfb5      	itete	lt
   b8860:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b8862:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b8864:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b8866:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b8868:	bfb5      	itete	lt
   b886a:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b886e:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b8872:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b8874:	189b      	addge	r3, r3, r2
   b8876:	600b      	str	r3, [r1, #0]
}
   b8878:	bd30      	pop	{r4, r5, pc}
	...

000b887c <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b887c:	b508      	push	{r3, lr}
   b887e:	4a05      	ldr	r2, [pc, #20]	; (b8894 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b8880:	6002      	str	r2, [r0, #0]
   b8882:	2200      	movs	r2, #0
   b8884:	4603      	mov	r3, r0
   b8886:	6042      	str	r2, [r0, #4]
   b8888:	3008      	adds	r0, #8
   b888a:	f7ff ff61 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
}
   b888e:	4618      	mov	r0, r3
   b8890:	bd08      	pop	{r3, pc}
   b8892:	bf00      	nop
   b8894:	000c1744 	.word	0x000c1744

000b8898 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b8898:	2300      	movs	r3, #0
   b889a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b889c:	8183      	strh	r3, [r0, #12]
   b889e:	7383      	strb	r3, [r0, #14]
}
   b88a0:	4770      	bx	lr
	...

000b88a4 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b88a4:	b530      	push	{r4, r5, lr}
   b88a6:	4604      	mov	r4, r0
   b88a8:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b88aa:	460d      	mov	r5, r1
   b88ac:	b111      	cbz	r1, b88b4 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b88ae:	780b      	ldrb	r3, [r1, #0]
   b88b0:	2b4d      	cmp	r3, #77	; 0x4d
   b88b2:	d005      	beq.n	b88c0 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b88b4:	4620      	mov	r0, r4
}
   b88b6:	b007      	add	sp, #28
   b88b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b88bc:	f7ff bfec 	b.w	b8898 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b88c0:	ab05      	add	r3, sp, #20
   b88c2:	9300      	str	r3, [sp, #0]
   b88c4:	4911      	ldr	r1, [pc, #68]	; (b890c <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b88c6:	ab04      	add	r3, sp, #16
   b88c8:	aa03      	add	r2, sp, #12
   b88ca:	4628      	mov	r0, r5
   b88cc:	f003 fcf8 	bl	bc2c0 <sscanf>
   b88d0:	2803      	cmp	r0, #3
   b88d2:	d116      	bne.n	b8902 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b88d4:	9b03      	ldr	r3, [sp, #12]
   b88d6:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b88d8:	9b04      	ldr	r3, [sp, #16]
   b88da:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b88dc:	9b05      	ldr	r3, [sp, #20]
   b88de:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b88e0:	212f      	movs	r1, #47	; 0x2f
   b88e2:	4628      	mov	r0, r5
   b88e4:	f007 fca2 	bl	c022c <strchr>
        if (cp) {
   b88e8:	b140      	cbz	r0, b88fc <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b88ea:	1c41      	adds	r1, r0, #1
   b88ec:	f104 0008 	add.w	r0, r4, #8
   b88f0:	f7ff ff36 	bl	b8760 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b88f4:	2301      	movs	r3, #1
   b88f6:	71e3      	strb	r3, [r4, #7]
}
   b88f8:	b007      	add	sp, #28
   b88fa:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b88fc:	81a0      	strh	r0, [r4, #12]
   b88fe:	73a0      	strb	r0, [r4, #14]
}
   b8900:	e7f8      	b.n	b88f4 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b8902:	4620      	mov	r0, r4
   b8904:	f7ff ffc8 	bl	b8898 <_ZN15LocalTimeChange5clearEv>
   b8908:	e7f6      	b.n	b88f8 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b890a:	bf00      	nop
   b890c:	000c1703 	.word	0x000c1703

000b8910 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b8910:	4b10      	ldr	r3, [pc, #64]	; (b8954 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b8912:	4911      	ldr	r1, [pc, #68]	; (b8958 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b8914:	b510      	push	{r4, lr}
   b8916:	4604      	mov	r4, r0
   b8918:	f840 3b04 	str.w	r3, [r0], #4
   b891c:	f006 f865 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   b8920:	f104 0014 	add.w	r0, r4, #20
   b8924:	f7ff ff14 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
   b8928:	490b      	ldr	r1, [pc, #44]	; (b8958 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b892a:	f104 001c 	add.w	r0, r4, #28
   b892e:	f006 f85c 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   b8932:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8936:	f7ff ff0b 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
   b893a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b893e:	f7ff ff9d 	bl	b887c <_ZN15LocalTimeChangeC1Ev>
   b8942:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8946:	f7ff ff99 	bl	b887c <_ZN15LocalTimeChangeC1Ev>
   b894a:	2300      	movs	r3, #0
   b894c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b8950:	4620      	mov	r0, r4
   b8952:	bd10      	pop	{r4, pc}
   b8954:	000c1754 	.word	0x000c1754
   b8958:	000c1f8d 	.word	0x000c1f8d

000b895c <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b895c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8960:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b8962:	4608      	mov	r0, r1
   b8964:	f007 fc8c 	bl	c0280 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b8968:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b896a:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b896c:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b896e:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b8972:	493f      	ldr	r1, [pc, #252]	; (b8a70 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b8974:	9801      	ldr	r0, [sp, #4]
   b8976:	aa01      	add	r2, sp, #4
   b8978:	f007 fd0a 	bl	c0390 <strtok_r>
   b897c:	4601      	mov	r1, r0
   b897e:	2800      	cmp	r0, #0
   b8980:	d062      	beq.n	b8a48 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b8982:	2d01      	cmp	r5, #1
   b8984:	f105 0301 	add.w	r3, r5, #1
   b8988:	d053      	beq.n	b8a32 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b898a:	2d02      	cmp	r5, #2
   b898c:	d056      	beq.n	b8a3c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b898e:	2d00      	cmp	r5, #0
   b8990:	d146      	bne.n	b8a20 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b8992:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b8994:	f892 9000 	ldrb.w	r9, [r2]
   b8998:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b899c:	4615      	mov	r5, r2
   b899e:	4617      	mov	r7, r2
   b89a0:	f102 0201 	add.w	r2, r2, #1
   b89a4:	d8f6      	bhi.n	b8994 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b89a6:	2200      	movs	r2, #0
   b89a8:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b89aa:	f104 001c 	add.w	r0, r4, #28
   b89ae:	f006 f87a 	bl	beaa6 <_ZN6StringaSEPKc>
                valid = true;
   b89b2:	2201      	movs	r2, #1
                *cp = save2;
   b89b4:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b89b8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b89bc:	782a      	ldrb	r2, [r5, #0]
   b89be:	b36a      	cbz	r2, b8a1c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b89c0:	f897 a000 	ldrb.w	sl, [r7]
   b89c4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b89c8:	2a3f      	cmp	r2, #63	; 0x3f
   b89ca:	46b9      	mov	r9, r7
   b89cc:	46bb      	mov	fp, r7
   b89ce:	f107 0701 	add.w	r7, r7, #1
   b89d2:	d9f5      	bls.n	b89c0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b89d4:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b89d6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b89da:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b89de:	4629      	mov	r1, r5
   b89e0:	4638      	mov	r0, r7
   b89e2:	f7ff febd 	bl	b8760 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b89e6:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b89ea:	f1ba 0f00 	cmp.w	sl, #0
   b89ee:	d015      	beq.n	b8a1c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b89f0:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b89f2:	f81b ab01 	ldrb.w	sl, [fp], #1
   b89f6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b89fa:	d8f9      	bhi.n	b89f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b89fc:	2200      	movs	r2, #0
   b89fe:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b8a00:	4649      	mov	r1, r9
   b8a02:	1d20      	adds	r0, r4, #4
   b8a04:	f006 f84f 	bl	beaa6 <_ZN6StringaSEPKc>
                        *cp = save2;
   b8a08:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b8a0c:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b8a10:	f1ba 0f00 	cmp.w	sl, #0
   b8a14:	d006      	beq.n	b8a24 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b8a16:	4629      	mov	r1, r5
   b8a18:	f7ff fea2 	bl	b8760 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b8a1c:	2501      	movs	r5, #1
   b8a1e:	e7a8      	b.n	b8972 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b8a20:	461d      	mov	r5, r3
   b8a22:	e7a6      	b.n	b8972 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b8a24:	4639      	mov	r1, r7
   b8a26:	f7ff fe19 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b8a2a:	7e23      	ldrb	r3, [r4, #24]
   b8a2c:	3b01      	subs	r3, #1
   b8a2e:	7623      	strb	r3, [r4, #24]
   b8a30:	e7f4      	b.n	b8a1c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b8a32:	4640      	mov	r0, r8
   b8a34:	f7ff ff36 	bl	b88a4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8a38:	2502      	movs	r5, #2
   b8a3a:	e79a      	b.n	b8972 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b8a3c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8a40:	f7ff ff30 	bl	b88a4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b8a44:	2503      	movs	r5, #3
   b8a46:	e794      	b.n	b8972 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b8a48:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b8a4c:	b143      	cbz	r3, b8a60 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b8a4e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b8a52:	b92a      	cbnz	r2, b8a60 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b8a54:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8a58:	f7ff ff1e 	bl	b8898 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b8a5c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b8a60:	4630      	mov	r0, r6
   b8a62:	f003 fc15 	bl	bc290 <free>

    return valid;
}
   b8a66:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b8a6a:	b003      	add	sp, #12
   b8a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a70:	000c170d 	.word	0x000c170d

000b8a74 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b8a74:	b538      	push	{r3, r4, r5, lr}
   b8a76:	4b13      	ldr	r3, [pc, #76]	; (b8ac4 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b8a78:	4604      	mov	r4, r0
   b8a7a:	460d      	mov	r5, r1
   b8a7c:	f840 3b04 	str.w	r3, [r0], #4
   b8a80:	4911      	ldr	r1, [pc, #68]	; (b8ac8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8a82:	f005 ffb2 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   b8a86:	f104 0014 	add.w	r0, r4, #20
   b8a8a:	f7ff fe61 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
   b8a8e:	490e      	ldr	r1, [pc, #56]	; (b8ac8 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b8a90:	f104 001c 	add.w	r0, r4, #28
   b8a94:	f005 ffa9 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   b8a98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b8a9c:	f7ff fe58 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
   b8aa0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8aa4:	f7ff feea 	bl	b887c <_ZN15LocalTimeChangeC1Ev>
   b8aa8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8aac:	f7ff fee6 	bl	b887c <_ZN15LocalTimeChangeC1Ev>
   b8ab0:	2300      	movs	r3, #0
   b8ab2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b8ab6:	4629      	mov	r1, r5
   b8ab8:	4620      	mov	r0, r4
   b8aba:	f7ff ff4f 	bl	b895c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b8abe:	4620      	mov	r0, r4
   b8ac0:	bd38      	pop	{r3, r4, r5, pc}
   b8ac2:	bf00      	nop
   b8ac4:	000c1754 	.word	0x000c1754
   b8ac8:	000c1f8d 	.word	0x000c1f8d

000b8acc <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b8acc:	b508      	push	{r3, lr}
   b8ace:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b8ad0:	f7ff fe3e 	bl	b8750 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b8ad4:	688a      	ldr	r2, [r1, #8]
   b8ad6:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b8ad8:	684a      	ldr	r2, [r1, #4]
   b8ada:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b8adc:	680a      	ldr	r2, [r1, #0]
   b8ade:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b8ae0:	4618      	mov	r0, r3
   b8ae2:	bd08      	pop	{r3, pc}

000b8ae4 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b8ae4:	b513      	push	{r0, r1, r4, lr}
   b8ae6:	4b07      	ldr	r3, [pc, #28]	; (b8b04 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b8ae8:	6003      	str	r3, [r0, #0]
   b8aea:	2300      	movs	r3, #0
   b8aec:	6043      	str	r3, [r0, #4]
   b8aee:	4604      	mov	r4, r0
    *this = value.hms();
   b8af0:	4668      	mov	r0, sp
   b8af2:	f7ff ffeb 	bl	b8acc <_ZNK14LocalTimeValue3hmsEv>
   b8af6:	4620      	mov	r0, r4
   b8af8:	4669      	mov	r1, sp
   b8afa:	f7ff fdaf 	bl	b865c <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b8afe:	b002      	add	sp, #8
   b8b00:	bd10      	pop	{r4, pc}
   b8b02:	bf00      	nop
   b8b04:	000c1734 	.word	0x000c1734

000b8b08 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b8b08:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b8b0a:	2300      	movs	r3, #0
   b8b0c:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b8b0e:	a801      	add	r0, sp, #4
   b8b10:	9301      	str	r3, [sp, #4]
   b8b12:	f7ff fe0b 	bl	b872c <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b8b16:	9801      	ldr	r0, [sp, #4]
   b8b18:	b003      	add	sp, #12
   b8b1a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8b1e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b8b1e:	b510      	push	{r4, lr}
   b8b20:	4604      	mov	r4, r0
    *this = value.ymd();
   b8b22:	4608      	mov	r0, r1
   b8b24:	f7ff fff0 	bl	b8b08 <_ZNK14LocalTimeValue3ymdEv>
   b8b28:	6020      	str	r0, [r4, #0]
}
   b8b2a:	bd10      	pop	{r4, pc}

000b8b2c <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b8b2c:	b510      	push	{r4, lr}
   b8b2e:	4604      	mov	r4, r0
   b8b30:	b088      	sub	sp, #32
   b8b32:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b8b34:	3068      	adds	r0, #104	; 0x68
   b8b36:	a901      	add	r1, sp, #4
   b8b38:	f007 fa8a 	bl	c0050 <asctime_r>
    int len = strlen(ascstr);
   b8b3c:	a801      	add	r0, sp, #4
   b8b3e:	f007 fbbc 	bl	c02ba <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8b42:	ab08      	add	r3, sp, #32
   b8b44:	4418      	add	r0, r3
   b8b46:	2300      	movs	r3, #0
   b8b48:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b8b4c:	a901      	add	r1, sp, #4
   b8b4e:	4620      	mov	r0, r4
   b8b50:	f005 ff4b 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8b54:	4620      	mov	r0, r4
   b8b56:	b008      	add	sp, #32
   b8b58:	bd10      	pop	{r4, pc}
	...

000b8b5c <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b8b5c:	b538      	push	{r3, r4, r5, lr}
   b8b5e:	4604      	mov	r4, r0
    if (config.isZ()) {
   b8b60:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b8b62:	460d      	mov	r5, r1
    if (config.isZ()) {
   b8b64:	f7ff fe4e 	bl	b8804 <_ZNK22LocalTimePosixTimezone3isZEv>
   b8b68:	b128      	cbz	r0, b8b76 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b8b6a:	4909      	ldr	r1, [pc, #36]	; (b8b90 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	f005 ff3c 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b8b72:	4620      	mov	r0, r4
   b8b74:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b8b76:	6828      	ldr	r0, [r5, #0]
   b8b78:	f7ff fd66 	bl	b8648 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8b7c:	b128      	cbz	r0, b8b8a <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b8b7e:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b8b82:	4620      	mov	r0, r4
   b8b84:	f005 ff7c 	bl	bea80 <_ZN6StringC1ERKS_>
   b8b88:	e7f3      	b.n	b8b72 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b8b8a:	f105 0120 	add.w	r1, r5, #32
   b8b8e:	e7f8      	b.n	b8b82 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b8b90:	000c170f 	.word	0x000c170f

000b8b94 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b8b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b98:	4680      	mov	r8, r0
   b8b9a:	b0a8      	sub	sp, #160	; 0xa0
   b8b9c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b8b9e:	4615      	mov	r5, r2
   b8ba0:	b12a      	cbz	r2, b8bae <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b8ba2:	4b47      	ldr	r3, [pc, #284]	; (b8cc0 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b8ba4:	4610      	mov	r0, r2
   b8ba6:	6819      	ldr	r1, [r3, #0]
   b8ba8:	f007 fb57 	bl	c025a <strcmp>
   b8bac:	b938      	cbnz	r0, b8bbe <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b8bae:	4621      	mov	r1, r4
   b8bb0:	4640      	mov	r0, r8
   b8bb2:	f7ff ffbb 	bl	b8b2c <_ZN16LocalTimeConvert7timeStrEv>
}
   b8bb6:	4640      	mov	r0, r8
   b8bb8:	b028      	add	sp, #160	; 0xa0
   b8bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8bbe:	4629      	mov	r1, r5
   b8bc0:	223f      	movs	r2, #63	; 0x3f
   b8bc2:	a818      	add	r0, sp, #96	; 0x60
   b8bc4:	f007 fb95 	bl	c02f2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8bc8:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8bca:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8bcc:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8bd0:	f007 fb73 	bl	c02ba <strlen>
    String zoneNameStr = zoneName();
   b8bd4:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8bd6:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b8bd8:	a803      	add	r0, sp, #12
   b8bda:	f7ff ffbf 	bl	b8b5c <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b8bde:	1d20      	adds	r0, r4, #4
   b8be0:	f7ff fe10 	bl	b8804 <_ZNK22LocalTimePosixTimezone3isZEv>
   b8be4:	b348      	cbz	r0, b8c3a <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b8be6:	4937      	ldr	r1, [pc, #220]	; (b8cc4 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b8be8:	a807      	add	r0, sp, #28
   b8bea:	f007 fb40 	bl	c026e <strcpy>
   b8bee:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b8bf0:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b8bf2:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b8bf6:	45ba      	cmp	sl, r7
   b8bf8:	d94c      	bls.n	b8c94 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b8bfa:	7833      	ldrb	r3, [r6, #0]
   b8bfc:	2b25      	cmp	r3, #37	; 0x25
   b8bfe:	f107 0901 	add.w	r9, r7, #1
   b8c02:	d117      	bne.n	b8c34 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b8c04:	7873      	ldrb	r3, [r6, #1]
   b8c06:	2b7a      	cmp	r3, #122	; 0x7a
   b8c08:	d136      	bne.n	b8c78 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b8c0a:	a807      	add	r0, sp, #28
   b8c0c:	f007 fb55 	bl	c02ba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8c10:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b8c12:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8c14:	1838      	adds	r0, r7, r0
   b8c16:	ebaa 0207 	sub.w	r2, sl, r7
   b8c1a:	1cb1      	adds	r1, r6, #2
   b8c1c:	4418      	add	r0, r3
   b8c1e:	f007 fa69 	bl	c00f4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b8c22:	462a      	mov	r2, r5
   b8c24:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8c26:	4630      	mov	r0, r6
   b8c28:	f007 fa64 	bl	c00f4 <memcpy>
            len = strlen(format_str);
   b8c2c:	a818      	add	r0, sp, #96	; 0x60
   b8c2e:	f007 fb44 	bl	c02ba <strlen>
   b8c32:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b8c34:	3601      	adds	r6, #1
   b8c36:	464f      	mov	r7, r9
   b8c38:	e7db      	b.n	b8bf2 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8c3a:	6820      	ldr	r0, [r4, #0]
   b8c3c:	f7ff fd04 	bl	b8648 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b8c40:	b1b8      	cbz	r0, b8c72 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b8c42:	f104 0018 	add.w	r0, r4, #24
   b8c46:	f7ff fdc1 	bl	b87cc <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b8c4a:	223c      	movs	r2, #60	; 0x3c
   b8c4c:	fb90 f3f2 	sdiv	r3, r0, r2
   b8c50:	2b00      	cmp	r3, #0
   b8c52:	bfb8      	it	lt
   b8c54:	425b      	neglt	r3, r3
   b8c56:	fbb3 f1f2 	udiv	r1, r3, r2
   b8c5a:	fb02 3311 	mls	r3, r2, r1, r3
   b8c5e:	9300      	str	r3, [sp, #0]
   b8c60:	4a19      	ldr	r2, [pc, #100]	; (b8cc8 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b8c62:	4b1a      	ldr	r3, [pc, #104]	; (b8ccc <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b8c64:	fb90 f3f3 	sdiv	r3, r0, r3
   b8c68:	2110      	movs	r1, #16
   b8c6a:	a807      	add	r0, sp, #28
   b8c6c:	f003 fb30 	bl	bc2d0 <snprintf>
   b8c70:	e7bd      	b.n	b8bee <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b8c72:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b8c76:	e7e6      	b.n	b8c46 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b8c78:	2b5a      	cmp	r3, #90	; 0x5a
   b8c7a:	d1db      	bne.n	b8c34 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b8c7c:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8c7e:	ab18      	add	r3, sp, #96	; 0x60
   b8c80:	1978      	adds	r0, r7, r5
   b8c82:	ebaa 0207 	sub.w	r2, sl, r7
   b8c86:	1cb1      	adds	r1, r6, #2
   b8c88:	4418      	add	r0, r3
   b8c8a:	f007 fa33 	bl	c00f4 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b8c8e:	9903      	ldr	r1, [sp, #12]
   b8c90:	462a      	mov	r2, r5
   b8c92:	e7c8      	b.n	b8c26 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b8c94:	2100      	movs	r1, #0
   b8c96:	222e      	movs	r2, #46	; 0x2e
   b8c98:	a80c      	add	r0, sp, #48	; 0x30
   b8c9a:	910b      	str	r1, [sp, #44]	; 0x2c
   b8c9c:	f007 fa52 	bl	c0144 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b8ca0:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b8ca4:	aa18      	add	r2, sp, #96	; 0x60
   b8ca6:	2132      	movs	r1, #50	; 0x32
   b8ca8:	a80b      	add	r0, sp, #44	; 0x2c
   b8caa:	f003 fb49 	bl	bc340 <strftime>
    return String(buf);    
   b8cae:	a90b      	add	r1, sp, #44	; 0x2c
   b8cb0:	4640      	mov	r0, r8
   b8cb2:	f005 fe9a 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b8cb6:	a803      	add	r0, sp, #12
   b8cb8:	f005 fe4c 	bl	be954 <_ZN6StringD1Ev>
   b8cbc:	e77b      	b.n	b8bb6 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b8cbe:	bf00      	nop
   b8cc0:	2003db00 	.word	0x2003db00
   b8cc4:	000c170f 	.word	0x000c170f
   b8cc8:	000c1711 	.word	0x000c1711
   b8ccc:	fffff1f0 	.word	0xfffff1f0

000b8cd0 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b8cd0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b8cd2:	4d09      	ldr	r5, [pc, #36]	; (b8cf8 <_ZN9LocalTime8instanceEv+0x28>)
   b8cd4:	682b      	ldr	r3, [r5, #0]
   b8cd6:	b963      	cbnz	r3, b8cf2 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b8cd8:	2060      	movs	r0, #96	; 0x60
   b8cda:	f7fb f9dc 	bl	b4096 <_Znwj>
   b8cde:	4604      	mov	r4, r0
   b8ce0:	b130      	cbz	r0, b8cf0 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b8ce2:	4b06      	ldr	r3, [pc, #24]	; (b8cfc <_ZN9LocalTime8instanceEv+0x2c>)
   b8ce4:	f840 3b04 	str.w	r3, [r0], #4
   b8ce8:	f7ff fe12 	bl	b8910 <_ZN22LocalTimePosixTimezoneC1Ev>
   b8cec:	2364      	movs	r3, #100	; 0x64
   b8cee:	65e3      	str	r3, [r4, #92]	; 0x5c
   b8cf0:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b8cf2:	6828      	ldr	r0, [r5, #0]
   b8cf4:	bd38      	pop	{r3, r4, r5, pc}
   b8cf6:	bf00      	nop
   b8cf8:	2003e444 	.word	0x2003e444
   b8cfc:	000c1724 	.word	0x000c1724

000b8d00 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b8d00:	f003 bb36 	b.w	bc370 <mktime>

000b8d04 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b8d04:	3901      	subs	r1, #1
   b8d06:	290b      	cmp	r1, #11
   b8d08:	d815      	bhi.n	b8d36 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b8d0a:	e8df f001 	tbb	[pc, r1]
   b8d0e:	0816      	.short	0x0816
   b8d10:	06160616 	.word	0x06160616
   b8d14:	16061616 	.word	0x16061616
   b8d18:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b8d1a:	201e      	movs	r0, #30
   b8d1c:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b8d1e:	0783      	lsls	r3, r0, #30
   b8d20:	d10d      	bne.n	b8d3e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b8d22:	2364      	movs	r3, #100	; 0x64
   b8d24:	fb90 f2f3 	sdiv	r2, r0, r3
   b8d28:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b8d2c:	2800      	cmp	r0, #0
   b8d2e:	bf0c      	ite	eq
   b8d30:	201c      	moveq	r0, #28
   b8d32:	201d      	movne	r0, #29
   b8d34:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b8d36:	2000      	movs	r0, #0
   b8d38:	4770      	bx	lr
            return 31;
   b8d3a:	201f      	movs	r0, #31
   b8d3c:	4770      	bx	lr
                return 28;
   b8d3e:	201c      	movs	r0, #28
}
   b8d40:	4770      	bx	lr

000b8d42 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b8d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b8d44:	2301      	movs	r3, #1
   b8d46:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b8d48:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b8d4c:	3b01      	subs	r3, #1
   b8d4e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b8d50:	2300      	movs	r3, #0
   b8d52:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b8d56:	4606      	mov	r6, r0
   b8d58:	460c      	mov	r4, r1
   b8d5a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b8d5c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b8d5e:	4620      	mov	r0, r4
   b8d60:	f7ff ffce 	bl	b8d00 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b8d64:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b8d68:	69a2      	ldr	r2, [r4, #24]
   b8d6a:	429a      	cmp	r2, r3
   b8d6c:	d003      	beq.n	b8d76 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b8d6e:	68e3      	ldr	r3, [r4, #12]
   b8d70:	3301      	adds	r3, #1
   b8d72:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b8d74:	e7f3      	b.n	b8d5e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b8d76:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b8d7a:	2d01      	cmp	r5, #1
   b8d7c:	d013      	beq.n	b8da6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b8d7e:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b8d80:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b8d82:	3d01      	subs	r5, #1
   b8d84:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b8d88:	441d      	add	r5, r3
   b8d8a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b8d8c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b8d90:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b8d94:	f7ff ffb6 	bl	b8d04 <_ZN9LocalTime14lastDayOfMonthEii>
   b8d98:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b8d9a:	bfc4      	itt	gt
   b8d9c:	3d07      	subgt	r5, #7
   b8d9e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b8da0:	4620      	mov	r0, r4
   b8da2:	f7ff ffad 	bl	b8d00 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b8da6:	4621      	mov	r1, r4
   b8da8:	f106 0008 	add.w	r0, r6, #8
   b8dac:	f7ff fd3c 	bl	b8828 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b8db0:	4638      	mov	r0, r7
   b8db2:	f7ff fd46 	bl	b8842 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b8db6:	4620      	mov	r0, r4
}
   b8db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b8dbc:	f003 bad8 	b.w	bc370 <mktime>

000b8dc0 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b8dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b8dc2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b8dc6:	b085      	sub	sp, #20
   b8dc8:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b8dca:	b92b      	cbnz	r3, b8dd8 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b8dcc:	f7ff ff80 	bl	b8cd0 <_ZN9LocalTime8instanceEv>
   b8dd0:	1d01      	adds	r1, r0, #4
   b8dd2:	1d20      	adds	r0, r4, #4
   b8dd4:	f7ff fc4f 	bl	b8676 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b8dd8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b8ddc:	2b00      	cmp	r3, #0
   b8dde:	d065      	beq.n	b8eac <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b8de0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8de4:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b8de8:	4639      	mov	r1, r7
   b8dea:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b8dec:	463e      	mov	r6, r7
   b8dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8df2:	f003 faad 	bl	bc350 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b8df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8df8:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b8dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8dfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8e02:	6833      	ldr	r3, [r6, #0]
   b8e04:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b8e06:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b8e0a:	a802      	add	r0, sp, #8
   b8e0c:	f7ff fc86 	bl	b871c <_ZN12LocalTimeHMSC1ERKS_>
   b8e10:	aa02      	add	r2, sp, #8
   b8e12:	4639      	mov	r1, r7
   b8e14:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8e18:	f7ff ff93 	bl	b8d42 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b8e1c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8e20:	f104 0118 	add.w	r1, r4, #24
   b8e24:	a802      	add	r0, sp, #8
   b8e26:	f7ff fc79 	bl	b871c <_ZN12LocalTimeHMSC1ERKS_>
   b8e2a:	aa02      	add	r2, sp, #8
   b8e2c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b8e30:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b8e34:	f7ff ff85 	bl	b8d42 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b8e38:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b8e3c:	4286      	cmp	r6, r0
   b8e3e:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b8e42:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b8e46:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b8e4a:	da23      	bge.n	b8e94 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b8e4c:	42b2      	cmp	r2, r6
   b8e4e:	eb73 0505 	sbcs.w	r5, r3, r5
   b8e52:	da19      	bge.n	b8e88 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b8e54:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b8e56:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b8e58:	6820      	ldr	r0, [r4, #0]
   b8e5a:	f7ff fbf5 	bl	b8648 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b8e5e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b8e62:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b8e66:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b8e68:	bb10      	cbnz	r0, b8eb0 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b8e6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8e6e:	f7ff fcad 	bl	b87cc <_ZNK12LocalTimeHMS9toSecondsEv>
   b8e72:	1a2d      	subs	r5, r5, r0
   b8e74:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b8e78:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b8e7c:	9901      	ldr	r1, [sp, #4]
   b8e7e:	a802      	add	r0, sp, #8
   b8e80:	f003 fa66 	bl	bc350 <localtime_r>
}
   b8e84:	b005      	add	sp, #20
   b8e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b8e88:	4282      	cmp	r2, r0
   b8e8a:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b8e8c:	bfb4      	ite	lt
   b8e8e:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b8e90:	2302      	movge	r3, #2
   b8e92:	e7e0      	b.n	b8e56 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b8e94:	4282      	cmp	r2, r0
   b8e96:	eb73 0101 	sbcs.w	r1, r3, r1
   b8e9a:	da01      	bge.n	b8ea0 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b8e9c:	2303      	movs	r3, #3
   b8e9e:	e7da      	b.n	b8e56 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b8ea0:	42b2      	cmp	r2, r6
   b8ea2:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b8ea4:	bfb4      	ite	lt
   b8ea6:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b8ea8:	2305      	movge	r3, #5
   b8eaa:	e7d4      	b.n	b8e56 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b8eac:	2306      	movs	r3, #6
   b8eae:	e7d2      	b.n	b8e56 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8eb0:	f104 0018 	add.w	r0, r4, #24
   b8eb4:	e7db      	b.n	b8e6e <_ZN16LocalTimeConvert7convertEv+0xae>

000b8eb6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8eb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8eb8:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8eba:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8ebc:	4668      	mov	r0, sp
   b8ebe:	f7ff fc24 	bl	b870a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8ec2:	466a      	mov	r2, sp
   b8ec4:	4629      	mov	r1, r5
   b8ec6:	4620      	mov	r0, r4
   b8ec8:	f004 f974 	bl	bd1b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8ecc:	a801      	add	r0, sp, #4
   b8ece:	f7fd faa7 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ed2:	4620      	mov	r0, r4
   b8ed4:	b003      	add	sp, #12
   b8ed6:	bd30      	pop	{r4, r5, pc}

000b8ed8 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8eda:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8edc:	4604      	mov	r4, r0
   b8ede:	4668      	mov	r0, sp
   b8ee0:	f7ff fc13 	bl	b870a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8ee4:	466a      	mov	r2, sp
   b8ee6:	4629      	mov	r1, r5
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f004 f93f 	bl	bd16c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8eee:	a801      	add	r0, sp, #4
   b8ef0:	f7fd fa96 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ef4:	4620      	mov	r0, r4
   b8ef6:	b003      	add	sp, #12
   b8ef8:	bd30      	pop	{r4, r5, pc}

000b8efa <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8efc:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8efe:	4604      	mov	r4, r0
   b8f00:	4668      	mov	r0, sp
   b8f02:	f7ff fc02 	bl	b870a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b8f06:	466a      	mov	r2, sp
   b8f08:	4629      	mov	r1, r5
   b8f0a:	4620      	mov	r0, r4
   b8f0c:	f004 f8d7 	bl	bd0be <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8f10:	a801      	add	r0, sp, #4
   b8f12:	f7fd fa85 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8f16:	4620      	mov	r0, r4
   b8f18:	b003      	add	sp, #12
   b8f1a:	bd30      	pop	{r4, r5, pc}

000b8f1c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b8f1c:	4770      	bx	lr

000b8f1e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8f1e:	b510      	push	{r4, lr}
}
   b8f20:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b8f22:	4604      	mov	r4, r0
}
   b8f24:	f7fb f8bb 	bl	b409e <_ZdlPvj>
   b8f28:	4620      	mov	r0, r4
   b8f2a:	bd10      	pop	{r4, pc}

000b8f2c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b8f2c:	6803      	ldr	r3, [r0, #0]
   b8f2e:	b2c9      	uxtb	r1, r1
   b8f30:	689b      	ldr	r3, [r3, #8]
   b8f32:	4718      	bx	r3

000b8f34 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b8f34:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b8f36:	4d03      	ldr	r5, [pc, #12]	; (b8f44 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b8f38:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b8f3c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b8f40:	bd30      	pop	{r4, r5, pc}
   b8f42:	bf00      	nop
   b8f44:	000c1764 	.word	0x000c1764

000b8f48 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b8f48:	6840      	ldr	r0, [r0, #4]
   b8f4a:	f003 bf29 	b.w	bcda0 <_ZN7TwoWire5beginEv>

000b8f4e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8f4e:	b510      	push	{r4, lr}
   b8f50:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b8f52:	6800      	ldr	r0, [r0, #0]
   b8f54:	f003 ff7f 	bl	bce56 <_ZN7TwoWire6unlockEv>
   b8f58:	4620      	mov	r0, r4
   b8f5a:	bd10      	pop	{r4, pc}

000b8f5c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b8f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8f60:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8f62:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8f64:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b8f66:	460d      	mov	r5, r1
   b8f68:	4616      	mov	r6, r2
   b8f6a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b8f6c:	f003 ff6a 	bl	bce44 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b8f70:	b1a7      	cbz	r7, b8f9c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b8f72:	68e1      	ldr	r1, [r4, #12]
   b8f74:	6860      	ldr	r0, [r4, #4]
   b8f76:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8f7a:	f003 ff44 	bl	bce06 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8f7e:	0a29      	lsrs	r1, r5, #8
   b8f80:	6860      	ldr	r0, [r4, #4]
   b8f82:	f7ff ffd3 	bl	b8f2c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b8f86:	4629      	mov	r1, r5
   b8f88:	6860      	ldr	r0, [r4, #4]
   b8f8a:	f7ff ffcf 	bl	b8f2c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b8f8e:	6860      	ldr	r0, [r4, #4]
   b8f90:	2100      	movs	r1, #0
   b8f92:	f003 ff53 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b8f96:	b148      	cbz	r0, b8fac <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b8f98:	2400      	movs	r4, #0
   b8f9a:	e000      	b.n	b8f9e <_ZN6MB85RC8readDataEjPhj+0x42>
   b8f9c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8f9e:	a801      	add	r0, sp, #4
   b8fa0:	f7ff ffd5 	bl	b8f4e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b8fa4:	4620      	mov	r0, r4
   b8fa6:	b003      	add	sp, #12
   b8fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b8fac:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b8fae:	7b21      	ldrb	r1, [r4, #12]
   b8fb0:	6860      	ldr	r0, [r4, #4]
   b8fb2:	46b8      	mov	r8, r7
   b8fb4:	bf28      	it	cs
   b8fb6:	f04f 0820 	movcs.w	r8, #32
   b8fba:	2301      	movs	r3, #1
   b8fbc:	4642      	mov	r2, r8
   b8fbe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8fc2:	f003 ff0a 	bl	bcdda <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b8fc6:	f006 faf9 	bl	bf5bc <_Z19__fetch_global_Wirev>
   b8fca:	6803      	ldr	r3, [r0, #0]
   b8fcc:	691b      	ldr	r3, [r3, #16]
   b8fce:	4798      	blx	r3
   b8fd0:	4540      	cmp	r0, r8
   b8fd2:	dbe1      	blt.n	b8f98 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b8fd4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b8fd8:	f006 faf0 	bl	bf5bc <_Z19__fetch_global_Wirev>
   b8fdc:	6803      	ldr	r3, [r0, #0]
   b8fde:	695b      	ldr	r3, [r3, #20]
   b8fe0:	4798      	blx	r3
   b8fe2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b8fe6:	454e      	cmp	r6, r9
   b8fe8:	d1f6      	bne.n	b8fd8 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b8fea:	4445      	add	r5, r8
				dataLen--;
   b8fec:	eba7 0708 	sub.w	r7, r7, r8
   b8ff0:	e7be      	b.n	b8f70 <_ZN6MB85RC8readDataEjPhj+0x14>

000b8ff2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ff6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8ff8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8ffa:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8ffc:	460e      	mov	r6, r1
   b8ffe:	4690      	mov	r8, r2
   b9000:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9002:	f003 ff1f 	bl	bce44 <_ZN7TwoWire4lockEv>
   b9006:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b900a:	f1b9 0f00 	cmp.w	r9, #0
   b900e:	d02a      	beq.n	b9066 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9010:	b34d      	cbz	r5, b9066 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9012:	68e1      	ldr	r1, [r4, #12]
   b9014:	6860      	ldr	r0, [r4, #4]
   b9016:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b901a:	f003 fef4 	bl	bce06 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b901e:	0a31      	lsrs	r1, r6, #8
   b9020:	6860      	ldr	r0, [r4, #4]
   b9022:	f7ff ff83 	bl	b8f2c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9026:	6860      	ldr	r0, [r4, #4]
   b9028:	4631      	mov	r1, r6
   b902a:	f7ff ff7f 	bl	b8f2c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b902e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9032:	4647      	mov	r7, r8
   b9034:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9038:	6860      	ldr	r0, [r4, #4]
   b903a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b903e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9040:	3d01      	subs	r5, #1
				wire.write(*data);
   b9042:	689b      	ldr	r3, [r3, #8]
   b9044:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9046:	4555      	cmp	r5, sl
   b9048:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b904c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b904e:	d001      	beq.n	b9054 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9050:	2d00      	cmp	r5, #0
   b9052:	d1f1      	bne.n	b9038 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b9054:	6860      	ldr	r0, [r4, #4]
   b9056:	2101      	movs	r1, #1
   b9058:	f003 fef0 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b905c:	2800      	cmp	r0, #0
   b905e:	d0d7      	beq.n	b9010 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9060:	f04f 0900 	mov.w	r9, #0
   b9064:	e7d1      	b.n	b900a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b9066:	a801      	add	r0, sp, #4
   b9068:	f7ff ff71 	bl	b8f4e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b906c:	4648      	mov	r0, r9
   b906e:	b003      	add	sp, #12
   b9070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9074 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9078:	b08b      	sub	sp, #44	; 0x2c
   b907a:	460e      	mov	r6, r1
   b907c:	4615      	mov	r5, r2
   b907e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9080:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9082:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9084:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b9086:	f003 fedd 	bl	bce44 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b908a:	42ae      	cmp	r6, r5
   b908c:	d229      	bcs.n	b90e2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b908e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9090:	4425      	add	r5, r4
			while(numBytes > 0) {
   b9092:	b18c      	cbz	r4, b90b8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b9094:	2c1e      	cmp	r4, #30
   b9096:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9098:	f8d8 3000 	ldr.w	r3, [r8]
   b909c:	bf28      	it	cs
   b909e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b90a0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b90a2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b90a6:	aa02      	add	r2, sp, #8
   b90a8:	463b      	mov	r3, r7
   b90aa:	4631      	mov	r1, r6
   b90ac:	4640      	mov	r0, r8
				framAddrTo -= count;
   b90ae:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b90b0:	47c8      	blx	r9
				if (!result) {
   b90b2:	b948      	cbnz	r0, b90c8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b90b4:	2400      	movs	r4, #0
   b90b6:	e000      	b.n	b90ba <_ZN6MB85RC8moveDataEjjj+0x46>
   b90b8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b90ba:	a801      	add	r0, sp, #4
   b90bc:	f7ff ff47 	bl	b8f4e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b90c0:	4620      	mov	r0, r4
   b90c2:	b00b      	add	sp, #44	; 0x2c
   b90c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b90c8:	f8d8 3000 	ldr.w	r3, [r8]
   b90cc:	aa02      	add	r2, sp, #8
   b90ce:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b90d2:	4629      	mov	r1, r5
   b90d4:	463b      	mov	r3, r7
   b90d6:	4640      	mov	r0, r8
   b90d8:	47c8      	blx	r9
				if (!result) {
   b90da:	2800      	cmp	r0, #0
   b90dc:	d0ea      	beq.n	b90b4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b90de:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b90e0:	e7d7      	b.n	b9092 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b90e2:	d9e9      	bls.n	b90b8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b90e4:	2c00      	cmp	r4, #0
   b90e6:	d0e7      	beq.n	b90b8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b90e8:	f8d8 3000 	ldr.w	r3, [r8]
   b90ec:	2c1e      	cmp	r4, #30
   b90ee:	4627      	mov	r7, r4
   b90f0:	bf28      	it	cs
   b90f2:	271e      	movcs	r7, #30
   b90f4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b90f8:	aa02      	add	r2, sp, #8
   b90fa:	463b      	mov	r3, r7
   b90fc:	4631      	mov	r1, r6
   b90fe:	4640      	mov	r0, r8
   b9100:	47c8      	blx	r9
				if (!result) {
   b9102:	2800      	cmp	r0, #0
   b9104:	d0d6      	beq.n	b90b4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b9106:	f8d8 3000 	ldr.w	r3, [r8]
   b910a:	aa02      	add	r2, sp, #8
   b910c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9110:	4629      	mov	r1, r5
   b9112:	463b      	mov	r3, r7
   b9114:	4640      	mov	r0, r8
   b9116:	47c8      	blx	r9
				if (!result) {
   b9118:	2800      	cmp	r0, #0
   b911a:	d0cb      	beq.n	b90b4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b911c:	443e      	add	r6, r7
				framAddrTo += count;
   b911e:	443d      	add	r5, r7
				numBytes -= count;
   b9120:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9122:	e7df      	b.n	b90e4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b9124 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b9124:	6803      	ldr	r3, [r0, #0]
   b9126:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b9128:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b912c:	2101      	movs	r1, #1
   b912e:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b9132:	4770      	bx	lr

000b9134 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9134:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b9136:	6842      	ldr	r2, [r0, #4]
   b9138:	4603      	mov	r3, r0
   b913a:	1054      	asrs	r4, r2, #1
   b913c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b9140:	07d2      	lsls	r2, r2, #31
   b9142:	bf48      	it	mi
   b9144:	590a      	ldrmi	r2, [r1, r4]
   b9146:	681b      	ldr	r3, [r3, #0]
      }
   b9148:	f85d 4b04 	ldr.w	r4, [sp], #4
   b914c:	bf48      	it	mi
   b914e:	58d3      	ldrmi	r3, [r2, r3]
   b9150:	4718      	bx	r3

000b9152 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b9152:	2a01      	cmp	r2, #1
   b9154:	d102      	bne.n	b915c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9156:	6001      	str	r1, [r0, #0]
      }
   b9158:	2000      	movs	r0, #0
   b915a:	4770      	bx	lr
	  switch (__op)
   b915c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b915e:	bf04      	itt	eq
   b9160:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b9164:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b9168:	e7f6      	b.n	b9158 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b916a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b916a:	2a01      	cmp	r2, #1
   b916c:	d102      	bne.n	b9174 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b916e:	6001      	str	r1, [r0, #0]
      }
   b9170:	2000      	movs	r0, #0
   b9172:	4770      	bx	lr
	  switch (__op)
   b9174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9176:	bf04      	itt	eq
   b9178:	680b      	ldreq	r3, [r1, #0]
   b917a:	6003      	streq	r3, [r0, #0]
	      break;
   b917c:	e7f8      	b.n	b9170 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b917e <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b917e:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b9180:	f002 bca2 	b.w	bbac8 <os_mutex_recursive_lock>

000b9184 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b9184:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b9188:	4601      	mov	r1, r0
    if (stateHandler) {
   b918a:	b11b      	cbz	r3, b9194 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b918c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b9190:	30c0      	adds	r0, #192	; 0xc0
   b9192:	4718      	bx	r3
}
   b9194:	4770      	bx	lr
	...

000b9198 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b919a:	4d12      	ldr	r5, [pc, #72]	; (b91e4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b919c:	4608      	mov	r0, r1
        eventData = "";
   b919e:	2a00      	cmp	r2, #0
   b91a0:	bf18      	it	ne
   b91a2:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b91a4:	460e      	mov	r6, r1
   b91a6:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b91a8:	f007 f887 	bl	c02ba <strlen>
   b91ac:	2840      	cmp	r0, #64	; 0x40
   b91ae:	d816      	bhi.n	b91de <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b91b0:	4628      	mov	r0, r5
   b91b2:	f007 f882 	bl	c02ba <strlen>
   b91b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b91ba:	d810      	bhi.n	b91de <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b91bc:	3043      	adds	r0, #67	; 0x43
   b91be:	f7fa ff6c 	bl	b409a <_Znaj>
    if (event) {
   b91c2:	4604      	mov	r4, r0
   b91c4:	b148      	cbz	r0, b91da <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b91c6:	4631      	mov	r1, r6
        event->flags = flags;
   b91c8:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b91cc:	f007 f84f 	bl	c026e <strcpy>
        strcpy(event->eventData, eventData);
   b91d0:	4629      	mov	r1, r5
   b91d2:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b91d6:	f007 f84a 	bl	c026e <strcpy>
}
   b91da:	4620      	mov	r0, r4
   b91dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b91de:	2400      	movs	r4, #0
   b91e0:	e7fb      	b.n	b91da <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b91e2:	bf00      	nop
   b91e4:	000c1f8d 	.word	0x000c1f8d

000b91e8 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b91e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b91ea:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b91ec:	460a      	mov	r2, r1
   b91ee:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b91f0:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b91f2:	1d01      	adds	r1, r0, #4
   b91f4:	a808      	add	r0, sp, #32
   b91f6:	f002 f881 	bl	bb2fc <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b91fa:	9808      	ldr	r0, [sp, #32]
   b91fc:	2100      	movs	r1, #0
   b91fe:	f007 f971 	bl	c04e4 <open>
   b9202:	4605      	mov	r5, r0
   b9204:	a808      	add	r0, sp, #32
   b9206:	f005 fba5 	bl	be954 <_ZN6StringD1Ev>
    if (fd) {
   b920a:	2d00      	cmp	r5, #0
   b920c:	d060      	beq.n	b92d0 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b920e:	a908      	add	r1, sp, #32
   b9210:	4628      	mov	r0, r5
   b9212:	f007 f955 	bl	c04c0 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b9216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9218:	492e      	ldr	r1, [pc, #184]	; (b92d4 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b921a:	482f      	ldr	r0, [pc, #188]	; (b92d8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b921c:	4632      	mov	r2, r6
   b921e:	f7fd fcb7 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b9222:	2200      	movs	r2, #0
   b9224:	4611      	mov	r1, r2
   b9226:	4628      	mov	r0, r5
   b9228:	f007 f952 	bl	c04d0 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b922c:	2208      	movs	r2, #8
   b922e:	a906      	add	r1, sp, #24
   b9230:	4628      	mov	r0, r5
   b9232:	f007 f96b 	bl	c050c <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b9236:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b9238:	2f4a      	cmp	r7, #74	; 0x4a
   b923a:	dd39      	ble.n	b92b0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b923c:	4b27      	ldr	r3, [pc, #156]	; (b92dc <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b923e:	9a06      	ldr	r2, [sp, #24]
   b9240:	429a      	cmp	r2, r3
   b9242:	d135      	bne.n	b92b0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b9244:	4b26      	ldr	r3, [pc, #152]	; (b92e0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b9246:	9a07      	ldr	r2, [sp, #28]
   b9248:	429a      	cmp	r2, r3
   b924a:	d131      	bne.n	b92b0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b924c:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b9250:	4610      	mov	r0, r2
   b9252:	9205      	str	r2, [sp, #20]
   b9254:	f7fa ff21 	bl	b409a <_Znaj>
            if (result) {
   b9258:	4604      	mov	r4, r0
   b925a:	b1c0      	cbz	r0, b928e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b925c:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b925e:	4601      	mov	r1, r0
   b9260:	9a05      	ldr	r2, [sp, #20]
   b9262:	4628      	mov	r0, r5
   b9264:	f007 f952 	bl	c050c <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9268:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b926c:	b9ab      	cbnz	r3, b929a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b926e:	1c63      	adds	r3, r4, #1
   b9270:	4618      	mov	r0, r3
   b9272:	9305      	str	r3, [sp, #20]
   b9274:	f007 f821 	bl	c02ba <strlen>
   b9278:	283f      	cmp	r0, #63	; 0x3f
   b927a:	9b05      	ldr	r3, [sp, #20]
   b927c:	d80d      	bhi.n	b929a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b927e:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b9282:	9200      	str	r2, [sp, #0]
   b9284:	4917      	ldr	r1, [pc, #92]	; (b92e4 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b9286:	4814      	ldr	r0, [pc, #80]	; (b92d8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9288:	4632      	mov	r2, r6
   b928a:	f7fd fc81 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b928e:	4628      	mov	r0, r5
   b9290:	f007 f90e 	bl	c04b0 <close>
}
   b9294:	4620      	mov	r0, r4
   b9296:	b01f      	add	sp, #124	; 0x7c
   b9298:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b929a:	4913      	ldr	r1, [pc, #76]	; (b92e8 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b929c:	480e      	ldr	r0, [pc, #56]	; (b92d8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b929e:	4632      	mov	r2, r6
   b92a0:	f7fd fc76 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b92a4:	2143      	movs	r1, #67	; 0x43
   b92a6:	4620      	mov	r0, r4
   b92a8:	f7fa fef9 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b92ac:	2400      	movs	r4, #0
   b92ae:	e7ee      	b.n	b928e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b92b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b92b4:	9302      	str	r3, [sp, #8]
   b92b6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b92ba:	9301      	str	r3, [sp, #4]
   b92bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b92c0:	9300      	str	r3, [sp, #0]
   b92c2:	490a      	ldr	r1, [pc, #40]	; (b92ec <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b92c4:	9b06      	ldr	r3, [sp, #24]
   b92c6:	4804      	ldr	r0, [pc, #16]	; (b92d8 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b92c8:	4632      	mov	r2, r6
   b92ca:	f7fd fc61 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
   b92ce:	e7ed      	b.n	b92ac <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b92d0:	462c      	mov	r4, r5
    return result;
   b92d2:	e7df      	b.n	b9294 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b92d4:	000c1778 	.word	0x000c1778
   b92d8:	2003e448 	.word	0x2003e448
   b92dc:	31b67663 	.word	0x31b67663
   b92e0:	00410801 	.word	0x00410801
   b92e4:	000c178c 	.word	0x000c178c
   b92e8:	000c17ae 	.word	0x000c17ae
   b92ec:	000c17dc 	.word	0x000c17dc

000b92f0 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b92f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b92f4:	4680      	mov	r8, r0
   b92f6:	4b28      	ldr	r3, [pc, #160]	; (b9398 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b92f8:	f848 3b04 	str.w	r3, [r8], #4
   b92fc:	4604      	mov	r4, r0
   b92fe:	4640      	mov	r0, r8
   b9300:	f001 ff14 	bl	bb12c <_ZN14SequentialFileC1Ev>
   b9304:	2202      	movs	r2, #2
   b9306:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9308:	2500      	movs	r5, #0
   b930a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b930e:	2308      	movs	r3, #8
   b9310:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b9312:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b9316:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b931a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b931e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9322:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9324:	2020      	movs	r0, #32
   b9326:	f7fa feb6 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b932a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b932c:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b932e:	3e01      	subs	r6, #1
   b9330:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9332:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b9336:	4607      	mov	r7, r0
   b9338:	f44f 7000 	mov.w	r0, #512	; 0x200
   b933c:	f7fa feab 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9340:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9344:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b9348:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b934c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b9350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9354:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b9358:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b935c:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b9360:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b9364:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b9368:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b936c:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b9370:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b9374:	4909      	ldr	r1, [pc, #36]	; (b939c <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b9376:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b937a:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b937e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b9382:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b9386:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b938a:	4640      	mov	r0, r8
   b938c:	f001 ff14 	bl	bb1b8 <_ZN14SequentialFile11withDirPathEPKc>
}
   b9390:	4620      	mov	r0, r4
   b9392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9396:	bf00      	nop
   b9398:	000c19f8 	.word	0x000c19f8
   b939c:	000c1821 	.word	0x000c1821

000b93a0 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b93a0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b93a2:	4d06      	ldr	r5, [pc, #24]	; (b93bc <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b93a4:	682b      	ldr	r3, [r5, #0]
   b93a6:	b93b      	cbnz	r3, b93b8 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b93a8:	20d0      	movs	r0, #208	; 0xd0
   b93aa:	f7fa fe74 	bl	b4096 <_Znwj>
   b93ae:	4604      	mov	r4, r0
   b93b0:	b108      	cbz	r0, b93b6 <_ZN17PublishQueuePosix8instanceEv+0x16>
   b93b2:	f7ff ff9d 	bl	b92f0 <_ZN17PublishQueuePosixC1Ev>
   b93b6:	602c      	str	r4, [r5, #0]
}
   b93b8:	6828      	ldr	r0, [r5, #0]
   b93ba:	bd38      	pop	{r3, r4, r5, pc}
   b93bc:	2003e44c 	.word	0x2003e44c

000b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b93c0:	6942      	ldr	r2, [r0, #20]
   b93c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b93c4:	1a9b      	subs	r3, r3, r2
   b93c6:	109b      	asrs	r3, r3, #2
   b93c8:	1e5a      	subs	r2, r3, #1
   b93ca:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b93ce:	1a5b      	subs	r3, r3, r1
   b93d0:	109b      	asrs	r3, r3, #2
   b93d2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b93d6:	6902      	ldr	r2, [r0, #16]
   b93d8:	6880      	ldr	r0, [r0, #8]
   b93da:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b93dc:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b93e0:	4770      	bx	lr

000b93e2 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b93e2:	b538      	push	{r3, r4, r5, lr}
   b93e4:	4605      	mov	r5, r0
   b93e6:	f7ff feca 	bl	b917e <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b93ea:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b93ee:	f7ff ffe7 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b93f2:	4604      	mov	r4, r0
   b93f4:	b950      	cbnz	r0, b940c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b93f6:	1d28      	adds	r0, r5, #4
   b93f8:	f002 f9d4 	bl	bb7a4 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b93fc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b9400:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b9402:	b11b      	cbz	r3, b940c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b9404:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b9408:	b903      	cbnz	r3, b940c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b940a:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b940c:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b940e:	f002 fb63 	bl	bbad8 <os_mutex_recursive_unlock>
}
   b9412:	4620      	mov	r0, r4
   b9414:	bd38      	pop	{r3, r4, r5, pc}

000b9416 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b9416:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b9418:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b941a:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b941c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b941e:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b9420:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b9422:	d002      	beq.n	b942a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b9424:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b9426:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b9428:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b942a:	68c0      	ldr	r0, [r0, #12]
   b942c:	f44f 7100 	mov.w	r1, #512	; 0x200
   b9430:	f7fa fe35 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b9434:	6963      	ldr	r3, [r4, #20]
   b9436:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9438:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b943a:	685b      	ldr	r3, [r3, #4]
   b943c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b943e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9442:	6122      	str	r2, [r4, #16]
   b9444:	e7ef      	b.n	b9426 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b9448 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b9448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b944c:	b085      	sub	sp, #20
   b944e:	4604      	mov	r4, r0
   b9450:	f7ff fe95 	bl	b917e <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b9454:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b94fc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b9458:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b9500 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b945c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b9504 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b9460:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b9464:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b9468:	4293      	cmp	r3, r2
   b946a:	d105      	bne.n	b9478 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b946c:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b946e:	b005      	add	sp, #20
   b9470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9474:	f002 bb30 	b.w	bbad8 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b9478:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b947c:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b9480:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b9482:	f7ff ffc8 	bl	b9416 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b9486:	4640      	mov	r0, r8
   b9488:	f002 f930 	bl	bb6ec <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b948c:	2300      	movs	r3, #0
   b948e:	4602      	mov	r2, r0
   b9490:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b9492:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b9494:	4668      	mov	r0, sp
   b9496:	f001 ff31 	bl	bb2fc <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b949a:	9800      	ldr	r0, [sp, #0]
   b949c:	f240 2102 	movw	r1, #514	; 0x202
   b94a0:	f007 f820 	bl	c04e4 <open>
   b94a4:	4605      	mov	r5, r0
   b94a6:	4668      	mov	r0, sp
   b94a8:	f005 fa54 	bl	be954 <_ZN6StringD1Ev>
            if (fd) {
   b94ac:	b1c5      	cbz	r5, b94e0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b94ae:	2208      	movs	r2, #8
   b94b0:	4669      	mov	r1, sp
   b94b2:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b94b4:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b94b8:	f007 f83a 	bl	c0530 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b94bc:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b94c0:	f006 fefb 	bl	c02ba <strlen>
   b94c4:	4639      	mov	r1, r7
   b94c6:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b94ca:	4628      	mov	r0, r5
   b94cc:	f007 f830 	bl	c0530 <write>
                close(fd);
   b94d0:	4628      	mov	r0, r5
   b94d2:	f006 ffed 	bl	c04b0 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b94d6:	4808      	ldr	r0, [pc, #32]	; (b94f8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b94d8:	4632      	mov	r2, r6
   b94da:	4659      	mov	r1, fp
   b94dc:	f7fd fb58 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b94e0:	4631      	mov	r1, r6
   b94e2:	4640      	mov	r0, r8
   b94e4:	f002 f944 	bl	bb770 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b94e8:	2f00      	cmp	r7, #0
   b94ea:	d0b9      	beq.n	b9460 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b94ec:	2143      	movs	r1, #67	; 0x43
   b94ee:	4638      	mov	r0, r7
   b94f0:	f7fa fdd5 	bl	b409e <_ZdlPvj>
   b94f4:	e7b2      	b.n	b945c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b94f6:	bf00      	nop
   b94f8:	2003e448 	.word	0x2003e448
   b94fc:	31b67663 	.word	0x31b67663
   b9500:	00410801 	.word	0x00410801
   b9504:	000c182f 	.word	0x000c182f

000b9508 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b9508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b950c:	4604      	mov	r4, r0
   b950e:	f7ff fe36 	bl	b917e <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b9512:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9516:	f7ff ff53 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b951a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b951c:	4298      	cmp	r0, r3
   b951e:	d902      	bls.n	b9526 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b9520:	4620      	mov	r0, r4
   b9522:	f7ff ff91 	bl	b9448 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b9526:	f8df 8044 	ldr.w	r8, [pc, #68]	; b956c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b952a:	4f0f      	ldr	r7, [pc, #60]	; (b9568 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b952c:	1d26      	adds	r6, r4, #4
   b952e:	4630      	mov	r0, r6
   b9530:	f002 f938 	bl	bb7a4 <_ZNK14SequentialFile11getQueueLenEv>
   b9534:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b9536:	4298      	cmp	r0, r3
   b9538:	dc04      	bgt.n	b9544 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b953a:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b953c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9540:	f002 baca 	b.w	bbad8 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b9544:	2101      	movs	r1, #1
   b9546:	4630      	mov	r0, r6
   b9548:	f002 f8dc 	bl	bb704 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b954c:	4605      	mov	r5, r0
   b954e:	2800      	cmp	r0, #0
   b9550:	d0ed      	beq.n	b952e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b9552:	4601      	mov	r1, r0
   b9554:	2200      	movs	r2, #0
   b9556:	4630      	mov	r0, r6
   b9558:	f001 ff0c 	bl	bb374 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b955c:	462a      	mov	r2, r5
   b955e:	4641      	mov	r1, r8
   b9560:	4638      	mov	r0, r7
   b9562:	f7fa fdd0 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
   b9566:	e7e2      	b.n	b952e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b9568:	2003e448 	.word	0x2003e448
   b956c:	000c184c 	.word	0x000c184c

000b9570 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b9570:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b9572:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b9576:	430b      	orrs	r3, r1
   b9578:	d005      	beq.n	b9586 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b957a:	3840      	subs	r0, #64	; 0x40
   b957c:	ea50 0301 	orrs.w	r3, r0, r1
   b9580:	d10b      	bne.n	b959a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b9582:	2a09      	cmp	r2, #9
   b9584:	d109      	bne.n	b959a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b9586:	4905      	ldr	r1, [pc, #20]	; (b959c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b9588:	4805      	ldr	r0, [pc, #20]	; (b95a0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b958a:	f7fd fb01 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b958e:	f7ff ff07 	bl	b93a0 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b9592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b9596:	f7ff bf57 	b.w	b9448 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b959a:	bd08      	pop	{r3, pc}
   b959c:	000c185f 	.word	0x000c185f
   b95a0:	2003e448 	.word	0x2003e448

000b95a4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b95a4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b95a6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b95a8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b95aa:	b183      	cbz	r3, b95ce <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b95ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b95ae:	6945      	ldr	r5, [r0, #20]
   b95b0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b95b2:	42ae      	cmp	r6, r5
   b95b4:	d906      	bls.n	b95c4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b95b6:	f855 0b04 	ldr.w	r0, [r5], #4
   b95ba:	f44f 7100 	mov.w	r1, #512	; 0x200
   b95be:	f7fa fd6e 	bl	b409e <_ZdlPvj>
   b95c2:	e7f6      	b.n	b95b2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b95c4:	6861      	ldr	r1, [r4, #4]
   b95c6:	6820      	ldr	r0, [r4, #0]
   b95c8:	0089      	lsls	r1, r1, #2
   b95ca:	f7fa fd68 	bl	b409e <_ZdlPvj>
    }
   b95ce:	4620      	mov	r0, r4
   b95d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b95d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b95d6:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b95da:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b95dc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b95de:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b95e0:	b90a      	cbnz	r2, b95e6 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b95e2:	07d9      	lsls	r1, r3, #31
   b95e4:	d505      	bpl.n	b95f2 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b95e6:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b95ea:	4b0a      	ldr	r3, [pc, #40]	; (b9614 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b95ec:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b95ee:	4b0a      	ldr	r3, [pc, #40]	; (b9618 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b95f0:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b95f2:	4621      	mov	r1, r4
   b95f4:	4668      	mov	r0, sp
   b95f6:	f7fe f950 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b95fa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b95fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b95fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9600:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9602:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b9604:	4668      	mov	r0, sp
   b9606:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9608:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b960a:	9203      	str	r2, [sp, #12]
   b960c:	f7fb fb55 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	}
   b9610:	b004      	add	sp, #16
   b9612:	bd10      	pop	{r4, pc}
   b9614:	000b9135 	.word	0x000b9135
   b9618:	000b9153 	.word	0x000b9153

000b961c <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b961c:	b570      	push	{r4, r5, r6, lr}
   b961e:	b086      	sub	sp, #24
   b9620:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9622:	f002 fd85 	bl	bc130 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b9626:	b948      	cbnz	r0, b963c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b9628:	4b43      	ldr	r3, [pc, #268]	; (b9738 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b962a:	a902      	add	r1, sp, #8
   b962c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b9630:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9634:	f7ff ffce 	bl	b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9638:	b006      	add	sp, #24
   b963a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b963c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b9640:	b11d      	cbz	r5, b964a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b9642:	2301      	movs	r3, #1
   b9644:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b9648:	e7f6      	b.n	b9638 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b964a:	f002 fa7d 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b964e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9652:	1ac0      	subs	r0, r0, r3
   b9654:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9658:	4298      	cmp	r0, r3
   b965a:	d3ed      	bcc.n	b9638 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b965c:	1d26      	adds	r6, r4, #4
   b965e:	4629      	mov	r1, r5
   b9660:	4630      	mov	r0, r6
   b9662:	f002 f84f 	bl	bb704 <_ZN14SequentialFile16getFileFromQueueEb>
   b9666:	4601      	mov	r1, r0
   b9668:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b966c:	2800      	cmp	r0, #0
   b966e:	d052      	beq.n	b9716 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b9670:	4620      	mov	r0, r4
   b9672:	f7ff fdb9 	bl	b91e8 <_ZN17PublishQueuePosix13readQueueFileEi>
   b9676:	4605      	mov	r5, r0
   b9678:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b967c:	2800      	cmp	r0, #0
   b967e:	d035      	beq.n	b96ec <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b9680:	f002 fa62 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b9684:	ae02      	add	r6, sp, #8
   b9686:	2500      	movs	r5, #0
   b9688:	4b2c      	ldr	r3, [pc, #176]	; (b973c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b968a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b968e:	4631      	mov	r1, r6
   b9690:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9694:	9302      	str	r3, [sp, #8]
   b9696:	9503      	str	r5, [sp, #12]
   b9698:	f7ff ff9c 	bl	b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b969c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b96a0:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b96a4:	9200      	str	r2, [sp, #0]
   b96a6:	4926      	ldr	r1, [pc, #152]	; (b9740 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b96a8:	4a26      	ldr	r2, [pc, #152]	; (b9744 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b96aa:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b96ae:	42a8      	cmp	r0, r5
   b96b0:	bf08      	it	eq
   b96b2:	460a      	moveq	r2, r1
   b96b4:	3301      	adds	r3, #1
   b96b6:	4924      	ldr	r1, [pc, #144]	; (b9748 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b96b8:	4824      	ldr	r0, [pc, #144]	; (b974c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b96ba:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b96be:	f7fd fa67 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b96c2:	f7fe f82d 	bl	b7720 <_ZN19BackgroundPublishRK8instanceEv>
   b96c6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b96ca:	4b21      	ldr	r3, [pc, #132]	; (b9750 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b96cc:	9305      	str	r3, [sp, #20]
   b96ce:	e9cd 6500 	strd	r6, r5, [sp]
   b96d2:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b96d4:	4b1f      	ldr	r3, [pc, #124]	; (b9754 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b96d6:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b96d8:	9304      	str	r3, [sp, #16]
   b96da:	f811 3b01 	ldrb.w	r3, [r1], #1
   b96de:	3242      	adds	r2, #66	; 0x42
   b96e0:	f7fe f96a 	bl	b79b8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b96e4:	4630      	mov	r0, r6
   b96e6:	f7fb fae8 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b96ea:	e7a5      	b.n	b9638 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b96ec:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b96f0:	4919      	ldr	r1, [pc, #100]	; (b9758 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b96f2:	4816      	ldr	r0, [pc, #88]	; (b974c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b96f4:	f7fa fd07 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b96f8:	2101      	movs	r1, #1
   b96fa:	4630      	mov	r0, r6
   b96fc:	f002 f802 	bl	bb704 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b9700:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b9704:	462a      	mov	r2, r5
   b9706:	4630      	mov	r0, r6
   b9708:	f001 fe34 	bl	bb374 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b970c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b9710:	2b00      	cmp	r3, #0
   b9712:	d1b5      	bne.n	b9680 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b9714:	e795      	b.n	b9642 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b9716:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b971a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b971e:	429a      	cmp	r2, r3
   b9720:	d007      	beq.n	b9732 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b9722:	681b      	ldr	r3, [r3, #0]
   b9724:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b9728:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b972c:	f7ff fe73 	bl	b9416 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b9730:	e7ec      	b.n	b970c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b9732:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b9736:	e784      	b.n	b9642 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b9738:	000b975d 	.word	0x000b975d
   b973c:	000b9add 	.word	0x000b9add
   b9740:	000c188e 	.word	0x000c188e
   b9744:	000c1d80 	.word	0x000c1d80
   b9748:	000c18af 	.word	0x000c18af
   b974c:	2003e448 	.word	0x2003e448
   b9750:	000b9125 	.word	0x000b9125
   b9754:	000b916b 	.word	0x000b916b
   b9758:	000c1892 	.word	0x000c1892

000b975c <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b975c:	b513      	push	{r0, r1, r4, lr}
   b975e:	4604      	mov	r4, r0
   b9760:	f002 fce6 	bl	bc130 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b9764:	b190      	cbz	r0, b978c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b9766:	f002 f9ef 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b976a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b976e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b9772:	4b0d      	ldr	r3, [pc, #52]	; (b97a8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b9774:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b9778:	9300      	str	r3, [sp, #0]
   b977a:	4669      	mov	r1, sp
   b977c:	2300      	movs	r3, #0
   b977e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9782:	9301      	str	r3, [sp, #4]
   b9784:	f7ff ff26 	bl	b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b9788:	b002      	add	sp, #8
   b978a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b978c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b9790:	b11b      	cbz	r3, b979a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b9792:	2301      	movs	r3, #1
   b9794:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b9798:	e7f6      	b.n	b9788 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b979a:	4620      	mov	r0, r4
   b979c:	f7ff fe21 	bl	b93e2 <_ZN17PublishQueuePosix12getNumEventsEv>
   b97a0:	2800      	cmp	r0, #0
   b97a2:	d0f6      	beq.n	b9792 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b97a4:	e7f0      	b.n	b9788 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b97a6:	bf00      	nop
   b97a8:	000b961d 	.word	0x000b961d

000b97ac <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b97ac:	b570      	push	{r4, r5, r6, lr}
   b97ae:	4605      	mov	r5, r0
   b97b0:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b97b2:	2000      	movs	r0, #0
   b97b4:	f002 fc5a 	bl	bc06c <system_thread_get_state>
   b97b8:	2801      	cmp	r0, #1
   b97ba:	d005      	beq.n	b97c8 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b97bc:	493e      	ldr	r1, [pc, #248]	; (b98b8 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b97be:	483f      	ldr	r0, [pc, #252]	; (b98bc <_ZN17PublishQueuePosix5setupEv+0x110>)
   b97c0:	f7fd f9d8 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
}
   b97c4:	b018      	add	sp, #96	; 0x60
   b97c6:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b97c8:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b97cc:	f002 f96c 	bl	bbaa8 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b97d0:	4b3b      	ldr	r3, [pc, #236]	; (b98c0 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b97d2:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b97d4:	4b3b      	ldr	r3, [pc, #236]	; (b98c4 <_ZN17PublishQueuePosix5setupEv+0x118>)
   b97d6:	9307      	str	r3, [sp, #28]
        };
   b97d8:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b97da:	4b3b      	ldr	r3, [pc, #236]	; (b98c8 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b97dc:	9306      	str	r3, [sp, #24]
   b97de:	a808      	add	r0, sp, #32
   b97e0:	f7fb fbd0 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b97e4:	a908      	add	r1, sp, #32
   b97e6:	a80c      	add	r0, sp, #48	; 0x30
   b97e8:	f7fb fbcc 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b97ec:	a90c      	add	r1, sp, #48	; 0x30
   b97ee:	a810      	add	r0, sp, #64	; 0x40
   b97f0:	f7fb fbc8 	bl	b4f84 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b97f4:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b97f6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b97f8:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b97fa:	f7fa fc4c 	bl	b4096 <_Znwj>
   b97fe:	4604      	mov	r4, r0
   b9800:	b160      	cbz	r0, b981c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b9802:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9804:	4601      	mov	r1, r0
   b9806:	a810      	add	r0, sp, #64	; 0x40
   b9808:	f7fe f847 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b980c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b980e:	68a2      	ldr	r2, [r4, #8]
   b9810:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b9812:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9814:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b9818:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b981a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b981c:	4b2b      	ldr	r3, [pc, #172]	; (b98cc <_ZN17PublishQueuePosix5setupEv+0x120>)
   b981e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b9820:	4b2b      	ldr	r3, [pc, #172]	; (b98d0 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b9822:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b9824:	4b2b      	ldr	r3, [pc, #172]	; (b98d4 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9826:	9414      	str	r4, [sp, #80]	; 0x50
   b9828:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b982a:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b982c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b9830:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b9832:	f7fa fc30 	bl	b4096 <_Znwj>
   b9836:	4604      	mov	r4, r0
   b9838:	b1d8      	cbz	r0, b9872 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b983a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b983c:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b983e:	b133      	cbz	r3, b984e <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9840:	2202      	movs	r2, #2
   b9842:	a914      	add	r1, sp, #80	; 0x50
   b9844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b984a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b984c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b984e:	4b22      	ldr	r3, [pc, #136]	; (b98d8 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b9850:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9852:	4a22      	ldr	r2, [pc, #136]	; (b98dc <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b9854:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b9856:	ab01      	add	r3, sp, #4
   b9858:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b985c:	2100      	movs	r1, #0
   b985e:	f002 fbe5 	bl	bc02c <system_subscribe_event>
        if (r) {
   b9862:	b130      	cbz	r0, b9872 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b9864:	4620      	mov	r0, r4
   b9866:	f7fb fa28 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b986a:	2110      	movs	r1, #16
   b986c:	4620      	mov	r0, r4
   b986e:	f7fa fc16 	bl	b409e <_ZdlPvj>
   b9872:	a814      	add	r0, sp, #80	; 0x50
   b9874:	f7fb fa21 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b9878:	a810      	add	r0, sp, #64	; 0x40
   b987a:	f7fb fa1e 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b987e:	a80c      	add	r0, sp, #48	; 0x30
   b9880:	f7fb fa1b 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b9884:	a808      	add	r0, sp, #32
   b9886:	f7fb fa18 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   b988a:	a804      	add	r0, sp, #16
   b988c:	f7fb fa15 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b9890:	f7fd ff46 	bl	b7720 <_ZN19BackgroundPublishRK8instanceEv>
   b9894:	f7fe f86a 	bl	b796c <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b9898:	1d28      	adds	r0, r5, #4
   b989a:	f001 feaf 	bl	bb5fc <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b989e:	4628      	mov	r0, r5
   b98a0:	f7ff fe32 	bl	b9508 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b98a4:	4b0e      	ldr	r3, [pc, #56]	; (b98e0 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b98a6:	9314      	str	r3, [sp, #80]	; 0x50
   b98a8:	a914      	add	r1, sp, #80	; 0x50
   b98aa:	2300      	movs	r3, #0
   b98ac:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b98b0:	9315      	str	r3, [sp, #84]	; 0x54
   b98b2:	f7ff fe8f 	bl	b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b98b6:	e785      	b.n	b97c4 <_ZN17PublishQueuePosix5setupEv+0x18>
   b98b8:	000c18ce 	.word	0x000c18ce
   b98bc:	2003e448 	.word	0x2003e448
   b98c0:	000b9571 	.word	0x000b9571
   b98c4:	000b4c97 	.word	0x000b4c97
   b98c8:	000b4c83 	.word	0x000b4c83
   b98cc:	000b4c5d 	.word	0x000b4c5d
   b98d0:	000b50ad 	.word	0x000b50ad
   b98d4:	000c0002 	.word	0x000c0002
   b98d8:	000b4ccd 	.word	0x000b4ccd
   b98dc:	000b4c35 	.word	0x000b4c35
   b98e0:	000b975d 	.word	0x000b975d

000b98e4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b98e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b98e8:	4606      	mov	r6, r0
   b98ea:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b98ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b98ee:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b98f0:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b98f2:	1a47      	subs	r7, r0, r1
   b98f4:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b98f8:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b98fa:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b98fe:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b9900:	d927      	bls.n	b9952 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b9902:	1b5d      	subs	r5, r3, r5
   b9904:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9906:	6832      	ldr	r2, [r6, #0]
   b9908:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b990a:	b10c      	cbz	r4, b9910 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b990c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b9910:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b9912:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b9914:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b9916:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b9918:	eba3 0201 	sub.w	r2, r3, r1
   b991c:	d913      	bls.n	b9946 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b991e:	4299      	cmp	r1, r3
   b9920:	d002      	beq.n	b9928 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b9922:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b9924:	f006 fbf4 	bl	c0110 <memmove>
	_M_node = __new_node;
   b9928:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b992a:	6823      	ldr	r3, [r4, #0]
   b992c:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b992e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9932:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b9934:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b9936:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b9938:	59e3      	ldr	r3, [r4, r7]
   b993a:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b993c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b9940:	6233      	str	r3, [r6, #32]
    }
   b9942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b9946:	4299      	cmp	r1, r3
   b9948:	d0ee      	beq.n	b9928 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b994a:	1d38      	adds	r0, r7, #4
   b994c:	1a80      	subs	r0, r0, r2
   b994e:	4420      	add	r0, r4
   b9950:	e7e8      	b.n	b9924 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b9952:	f103 0802 	add.w	r8, r3, #2
   b9956:	454b      	cmp	r3, r9
   b9958:	bf2c      	ite	cs
   b995a:	4498      	addcs	r8, r3
   b995c:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b995e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b9962:	d301      	bcc.n	b9968 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b9964:	f005 feb6 	bl	bf6d4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9968:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b996c:	f7fa fb93 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b9970:	eba8 0505 	sub.w	r5, r8, r5
   b9974:	086d      	lsrs	r5, r5, #1
   b9976:	4682      	mov	sl, r0
   b9978:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b997a:	b10c      	cbz	r4, b9980 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b997c:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b9980:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9982:	6971      	ldr	r1, [r6, #20]
   b9984:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b9986:	442c      	add	r4, r5
	  if (_Num)
   b9988:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b998a:	4454      	add	r4, sl
   b998c:	d003      	beq.n	b9996 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b998e:	1a52      	subs	r2, r2, r1
   b9990:	4620      	mov	r0, r4
   b9992:	f006 fbbd 	bl	c0110 <memmove>
	::operator delete(__p
   b9996:	6871      	ldr	r1, [r6, #4]
   b9998:	6830      	ldr	r0, [r6, #0]
   b999a:	0089      	lsls	r1, r1, #2
   b999c:	f7fa fb7f 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b99a0:	e9c6 a800 	strd	sl, r8, [r6]
   b99a4:	e7c0      	b.n	b9928 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b99a8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b99a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b99aa:	b085      	sub	sp, #20
   b99ac:	4604      	mov	r4, r0
   b99ae:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b99b2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b99b6:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b99b8:	460f      	mov	r7, r1
   b99ba:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b99bc:	f7ff fbec 	bl	b9198 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b99c0:	4605      	mov	r5, r0
   b99c2:	2800      	cmp	r0, #0
   b99c4:	d03c      	beq.n	b9a40 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b99c6:	4b3f      	ldr	r3, [pc, #252]	; (b9ac4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b99c8:	493f      	ldr	r1, [pc, #252]	; (b9ac8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b99ca:	4840      	ldr	r0, [pc, #256]	; (b9acc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b99cc:	2e00      	cmp	r6, #0
   b99ce:	bf18      	it	ne
   b99d0:	4633      	movne	r3, r6
   b99d2:	463a      	mov	r2, r7
   b99d4:	f7fd f8dc 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
   b99d8:	4620      	mov	r0, r4
   b99da:	f7ff fbd0 	bl	b917e <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b99de:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b99e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b99e6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b99e8:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b99ea:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b99ee:	d029      	beq.n	b9a44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b99f0:	b103      	cbz	r3, b99f4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b99f2:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b99f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b99f8:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b99fa:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b99fc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b9a00:	4628      	mov	r0, r5
   b9a02:	f001 fecf 	bl	bb7a4 <_ZNK14SequentialFile11getQueueLenEv>
   b9a06:	9003      	str	r0, [sp, #12]
   b9a08:	4630      	mov	r0, r6
   b9a0a:	f7ff fcd9 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9a0e:	9002      	str	r0, [sp, #8]
   b9a10:	f002 fb8e 	bl	bc130 <spark_cloud_flag_connected>
   b9a14:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b9a18:	9000      	str	r0, [sp, #0]
   b9a1a:	492d      	ldr	r1, [pc, #180]	; (b9ad0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b9a1c:	482b      	ldr	r0, [pc, #172]	; (b9acc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9a1e:	f7fd f8b7 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9a22:	4628      	mov	r0, r5
   b9a24:	f001 febe 	bl	bb7a4 <_ZNK14SequentialFile11getQueueLenEv>
   b9a28:	2800      	cmp	r0, #0
   b9a2a:	d03b      	beq.n	b9aa4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b9a2c:	4620      	mov	r0, r4
   b9a2e:	f7ff fd0b 	bl	b9448 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b9a32:	4620      	mov	r0, r4
   b9a34:	f7ff fd68 	bl	b9508 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b9a38:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9a3a:	f002 f84d 	bl	bbad8 <os_mutex_recursive_unlock>
    return true;
   b9a3e:	2001      	movs	r0, #1
}
   b9a40:	b005      	add	sp, #20
   b9a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b9a44:	4630      	mov	r0, r6
   b9a46:	f7ff fcbb 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9a4a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9a4e:	4298      	cmp	r0, r3
   b9a50:	d102      	bne.n	b9a58 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b9a52:	4820      	ldr	r0, [pc, #128]	; (b9ad4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b9a54:	f005 fe41 	bl	bf6da <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b9a58:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9a5c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b9a5e:	1a9a      	subs	r2, r3, r2
   b9a60:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9a62:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b9a66:	2b01      	cmp	r3, #1
   b9a68:	d804      	bhi.n	b9a74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b9a6a:	2200      	movs	r2, #0
   b9a6c:	2101      	movs	r1, #1
   b9a6e:	4630      	mov	r0, r6
   b9a70:	f7ff ff38 	bl	b98e4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9a74:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b9a78:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b9a7c:	f7fa fb0b 	bl	b4096 <_Znwj>
   b9a80:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b9a82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9a86:	b103      	cbz	r3, b9a8a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b9a88:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b9a8a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b9a8e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b9a90:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b9a94:	685b      	ldr	r3, [r3, #4]
   b9a96:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9a9a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9a9e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b9aa2:	e7aa      	b.n	b99fa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b9aa4:	4630      	mov	r0, r6
   b9aa6:	f7ff fc8b 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9aaa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b9aac:	4298      	cmp	r0, r3
   b9aae:	d8bd      	bhi.n	b9a2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b9ab0:	f002 fb3e 	bl	bc130 <spark_cloud_flag_connected>
   b9ab4:	2800      	cmp	r0, #0
   b9ab6:	d0b9      	beq.n	b9a2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b9ab8:	4907      	ldr	r1, [pc, #28]	; (b9ad8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b9aba:	4804      	ldr	r0, [pc, #16]	; (b9acc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b9abc:	f7fd f868 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
   b9ac0:	e7b7      	b.n	b9a32 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b9ac2:	bf00      	nop
   b9ac4:	000c1f8d 	.word	0x000c1f8d
   b9ac8:	000c18f1 	.word	0x000c18f1
   b9acc:	2003e448 	.word	0x2003e448
   b9ad0:	000c1949 	.word	0x000c1949
   b9ad4:	000c1919 	.word	0x000c1919
   b9ad8:	000c1975 	.word	0x000c1975

000b9adc <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b9adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b9ade:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b9ae2:	4604      	mov	r4, r0
    if (!publishComplete) {
   b9ae4:	2b00      	cmp	r3, #0
   b9ae6:	d041      	beq.n	b9b6c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b9ae8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b9aec:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b9af0:	2b00      	cmp	r3, #0
   b9af2:	d03d      	beq.n	b9b70 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b9af4:	4950      	ldr	r1, [pc, #320]	; (b9c38 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b9af6:	4851      	ldr	r0, [pc, #324]	; (b9c3c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9af8:	f7fd f84a 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b9afc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9b00:	b1d3      	cbz	r3, b9b38 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b9b02:	1d26      	adds	r6, r4, #4
   b9b04:	2100      	movs	r1, #0
   b9b06:	4630      	mov	r0, r6
   b9b08:	f001 fdfc 	bl	bb704 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b9b0c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9b10:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b9b12:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b9b14:	d10d      	bne.n	b9b32 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b9b16:	2101      	movs	r1, #1
   b9b18:	4630      	mov	r0, r6
   b9b1a:	f001 fdf3 	bl	bb704 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b9b1e:	2200      	movs	r2, #0
   b9b20:	4629      	mov	r1, r5
   b9b22:	4630      	mov	r0, r6
   b9b24:	f001 fc26 	bl	bb374 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b9b28:	4945      	ldr	r1, [pc, #276]	; (b9c40 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b9b2a:	4844      	ldr	r0, [pc, #272]	; (b9c3c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9b2c:	462a      	mov	r2, r5
   b9b2e:	f7fd f82f 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b9b32:	2300      	movs	r3, #0
   b9b34:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b9b38:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9b3c:	b110      	cbz	r0, b9b44 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b9b3e:	2143      	movs	r1, #67	; 0x43
   b9b40:	f7fa faad 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b9b44:	2300      	movs	r3, #0
   b9b46:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b9b4a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9b4e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b9b52:	4b3c      	ldr	r3, [pc, #240]	; (b9c44 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b9b54:	9300      	str	r3, [sp, #0]
   b9b56:	4669      	mov	r1, sp
   b9b58:	2300      	movs	r3, #0
   b9b5a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b9b5e:	9301      	str	r3, [sp, #4]
   b9b60:	f7ff fd38 	bl	b95d4 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b9b64:	f001 fff0 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b9b68:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b9b6c:	b002      	add	sp, #8
   b9b6e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b9b70:	4935      	ldr	r1, [pc, #212]	; (b9c48 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b9b72:	4832      	ldr	r0, [pc, #200]	; (b9c3c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9b74:	f7fd f80c 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b9b78:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b9b7c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b9b80:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9b84:	b14b      	cbz	r3, b9b9a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b9b86:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b9b8a:	b110      	cbz	r0, b9b92 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b9b8c:	2143      	movs	r1, #67	; 0x43
   b9b8e:	f7fa fa86 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b9b92:	2300      	movs	r3, #0
   b9b94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b9b98:	e7db      	b.n	b9b52 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b9b9a:	4620      	mov	r0, r4
   b9b9c:	f7ff faef 	bl	b917e <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b9ba0:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b9ba4:	4293      	cmp	r3, r2
   b9ba6:	d013      	beq.n	b9bd0 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b9ba8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9bac:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b9bb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b9bb4:	3b04      	subs	r3, #4
   b9bb6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b9bba:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b9bbc:	f001 ff8c 	bl	bbad8 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b9bc0:	4922      	ldr	r1, [pc, #136]	; (b9c4c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b9bc2:	481e      	ldr	r0, [pc, #120]	; (b9c3c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b9bc4:	f7fc ffe4 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b9bc8:	4620      	mov	r0, r4
   b9bca:	f7ff fc3d 	bl	b9448 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b9bce:	e7c0      	b.n	b9b52 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b9bd0:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b9bd4:	4628      	mov	r0, r5
   b9bd6:	f7ff fbf3 	bl	b93c0 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b9bda:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b9bde:	4298      	cmp	r0, r3
   b9be0:	d102      	bne.n	b9be8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b9be2:	481b      	ldr	r0, [pc, #108]	; (b9c50 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b9be4:	f005 fd79 	bl	bf6da <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b9be8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b9bec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b9bee:	429a      	cmp	r2, r3
   b9bf0:	d104      	bne.n	b9bfc <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b9bf2:	2201      	movs	r2, #1
   b9bf4:	4611      	mov	r1, r2
   b9bf6:	4628      	mov	r0, r5
   b9bf8:	f7ff fe74 	bl	b98e4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9bfc:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b9c00:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b9c04:	f7fa fa47 	bl	b4096 <_Znwj>
   b9c08:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b9c0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b9c10:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b9c12:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b9c16:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b9c1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9c1e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b9c22:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b9c26:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b9c2a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9c2e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b9c32:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b9c36:	e7c0      	b.n	b9bba <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b9c38:	000c1988 	.word	0x000c1988
   b9c3c:	2003e448 	.word	0x2003e448
   b9c40:	000c199b 	.word	0x000c199b
   b9c44:	000b961d 	.word	0x000b961d
   b9c48:	000c19ab 	.word	0x000c19ab
   b9c4c:	000c19bd 	.word	0x000c19bd
   b9c50:	000c1919 	.word	0x000c1919

000b9c54 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b9c54:	4b01      	ldr	r3, [pc, #4]	; (b9c5c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b9c56:	4a02      	ldr	r2, [pc, #8]	; (b9c60 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b9c58:	601a      	str	r2, [r3, #0]
}
   b9c5a:	4770      	bx	lr
   b9c5c:	2003e448 	.word	0x2003e448
   b9c60:	000c19e4 	.word	0x000c19e4

000b9c64 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9c64:	b510      	push	{r4, lr}
   b9c66:	4b07      	ldr	r3, [pc, #28]	; (b9c84 <_ZN17PublishQueuePosixD1Ev+0x20>)
   b9c68:	4604      	mov	r4, r0
   b9c6a:	f840 3bc0 	str.w	r3, [r0], #192
   b9c6e:	f7fb f824 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b9c72:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b9c76:	f7ff fc95 	bl	b95a4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b9c7a:	1d20      	adds	r0, r4, #4
   b9c7c:	f001 fbfe 	bl	bb47c <_ZN14SequentialFileD1Ev>
}
   b9c80:	4620      	mov	r0, r4
   b9c82:	bd10      	pop	{r4, pc}
   b9c84:	000c19f8 	.word	0x000c19f8

000b9c88 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b9c88:	b510      	push	{r4, lr}
   b9c8a:	4604      	mov	r4, r0
}
   b9c8c:	f7ff ffea 	bl	b9c64 <_ZN17PublishQueuePosixD1Ev>
   b9c90:	4620      	mov	r0, r4
   b9c92:	21d0      	movs	r1, #208	; 0xd0
   b9c94:	f7fa fa03 	bl	b409e <_ZdlPvj>
   b9c98:	4620      	mov	r0, r4
   b9c9a:	bd10      	pop	{r4, pc}

000b9c9c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b9c9c:	6001      	str	r1, [r0, #0]
   b9c9e:	7102      	strb	r2, [r0, #4]
{
}
   b9ca0:	4770      	bx	lr

000b9ca2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b9ca2:	6800      	ldr	r0, [r0, #0]
   b9ca4:	6803      	ldr	r3, [r0, #0]
   b9ca6:	68db      	ldr	r3, [r3, #12]
   b9ca8:	4718      	bx	r3

000b9caa <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b9caa:	6800      	ldr	r0, [r0, #0]
   b9cac:	6803      	ldr	r3, [r0, #0]
   b9cae:	6a1b      	ldr	r3, [r3, #32]
   b9cb0:	4718      	bx	r3

000b9cb2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b9cb2:	6800      	ldr	r0, [r0, #0]
   b9cb4:	6803      	ldr	r3, [r0, #0]
   b9cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9cb8:	4718      	bx	r3

000b9cba <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b9cba:	7900      	ldrb	r0, [r0, #4]
   b9cbc:	4770      	bx	lr

000b9cbe <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b9cbe:	6800      	ldr	r0, [r0, #0]
   b9cc0:	6803      	ldr	r3, [r0, #0]
   b9cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9cc4:	4718      	bx	r3

000b9cc6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b9cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9cc8:	4605      	mov	r5, r0
   b9cca:	460c      	mov	r4, r1
    setHeaderTo(address);
   b9ccc:	4619      	mov	r1, r3
{
   b9cce:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b9cd0:	f7ff fff5 	bl	b9cbe <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b9cd4:	6828      	ldr	r0, [r5, #0]
   b9cd6:	9a01      	ldr	r2, [sp, #4]
   b9cd8:	6803      	ldr	r3, [r0, #0]
   b9cda:	695b      	ldr	r3, [r3, #20]
   b9cdc:	4621      	mov	r1, r4
}
   b9cde:	b003      	add	sp, #12
   b9ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b9ce4:	4718      	bx	r3

000b9ce6 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b9ce6:	6800      	ldr	r0, [r0, #0]
   b9ce8:	6803      	ldr	r3, [r0, #0]
   b9cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9cec:	4718      	bx	r3

000b9cee <_ZN10RHDatagram14setThisAddressEh>:
{
   b9cee:	b538      	push	{r3, r4, r5, lr}
   b9cf0:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b9cf2:	6800      	ldr	r0, [r0, #0]
   b9cf4:	6803      	ldr	r3, [r0, #0]
{
   b9cf6:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b9cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9cfa:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b9cfc:	4629      	mov	r1, r5
   b9cfe:	4620      	mov	r0, r4
   b9d00:	f7ff fff1 	bl	b9ce6 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b9d04:	7125      	strb	r5, [r4, #4]
}
   b9d06:	bd38      	pop	{r3, r4, r5, pc}

000b9d08 <_ZN10RHDatagram4initEv>:
{
   b9d08:	b538      	push	{r3, r4, r5, lr}
   b9d0a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b9d0c:	6800      	ldr	r0, [r0, #0]
   b9d0e:	6803      	ldr	r3, [r0, #0]
   b9d10:	689b      	ldr	r3, [r3, #8]
   b9d12:	4798      	blx	r3
    if (ret)
   b9d14:	4605      	mov	r5, r0
   b9d16:	b118      	cbz	r0, b9d20 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b9d18:	7921      	ldrb	r1, [r4, #4]
   b9d1a:	4620      	mov	r0, r4
   b9d1c:	f7ff ffe7 	bl	b9cee <_ZN10RHDatagram14setThisAddressEh>
}
   b9d20:	4628      	mov	r0, r5
   b9d22:	bd38      	pop	{r3, r4, r5, pc}

000b9d24 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b9d24:	6800      	ldr	r0, [r0, #0]
   b9d26:	6803      	ldr	r3, [r0, #0]
   b9d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9d2a:	4718      	bx	r3

000b9d2c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b9d2c:	6800      	ldr	r0, [r0, #0]
   b9d2e:	6803      	ldr	r3, [r0, #0]
   b9d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9d32:	4718      	bx	r3

000b9d34 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b9d34:	6800      	ldr	r0, [r0, #0]
   b9d36:	6803      	ldr	r3, [r0, #0]
   b9d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9d3a:	4718      	bx	r3

000b9d3c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b9d3c:	6800      	ldr	r0, [r0, #0]
   b9d3e:	6803      	ldr	r3, [r0, #0]
   b9d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9d42:	4718      	bx	r3

000b9d44 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b9d44:	6800      	ldr	r0, [r0, #0]
   b9d46:	6803      	ldr	r3, [r0, #0]
   b9d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9d4a:	4718      	bx	r3

000b9d4c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b9d4c:	6800      	ldr	r0, [r0, #0]
   b9d4e:	6803      	ldr	r3, [r0, #0]
   b9d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9d52:	4718      	bx	r3

000b9d54 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b9d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9d58:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b9d5a:	6800      	ldr	r0, [r0, #0]
{
   b9d5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b9d5e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b9d60:	6803      	ldr	r3, [r0, #0]
   b9d62:	691b      	ldr	r3, [r3, #16]
{
   b9d64:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b9d68:	4798      	blx	r3
   b9d6a:	4605      	mov	r5, r0
   b9d6c:	b1c8      	cbz	r0, b9da2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b9d6e:	b11e      	cbz	r6, b9d78 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b9d70:	4620      	mov	r0, r4
   b9d72:	f7ff ffe3 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
   b9d76:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b9d78:	f1b9 0f00 	cmp.w	r9, #0
   b9d7c:	d004      	beq.n	b9d88 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b9d7e:	4620      	mov	r0, r4
   b9d80:	f7ff ffd8 	bl	b9d34 <_ZN10RHDatagram8headerToEv>
   b9d84:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b9d88:	f1b8 0f00 	cmp.w	r8, #0
   b9d8c:	d004      	beq.n	b9d98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b9d8e:	4620      	mov	r0, r4
   b9d90:	f7ff ffd8 	bl	b9d44 <_ZN10RHDatagram8headerIdEv>
   b9d94:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b9d98:	b11f      	cbz	r7, b9da2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b9d9a:	4620      	mov	r0, r4
   b9d9c:	f7ff ffd6 	bl	b9d4c <_ZN10RHDatagram11headerFlagsEv>
   b9da0:	7038      	strb	r0, [r7, #0]
}
   b9da2:	4628      	mov	r0, r5
   b9da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9da8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b9da8:	2001      	movs	r0, #1
   b9daa:	4770      	bx	lr

000b9dac <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b9dac:	7903      	ldrb	r3, [r0, #4]
   b9dae:	2b03      	cmp	r3, #3
   b9db0:	d0fc      	beq.n	b9dac <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b9db2:	2001      	movs	r0, #1
   b9db4:	4770      	bx	lr

000b9db6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b9db6:	2000      	movs	r0, #0
   b9db8:	4770      	bx	lr

000b9dba <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b9dba:	7181      	strb	r1, [r0, #6]
}
   b9dbc:	4770      	bx	lr

000b9dbe <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b9dbe:	7141      	strb	r1, [r0, #5]
}
   b9dc0:	4770      	bx	lr

000b9dc2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b9dc2:	72c1      	strb	r1, [r0, #11]
}
   b9dc4:	4770      	bx	lr

000b9dc6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b9dc6:	7301      	strb	r1, [r0, #12]
}
   b9dc8:	4770      	bx	lr

000b9dca <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b9dca:	7341      	strb	r1, [r0, #13]
}
   b9dcc:	4770      	bx	lr

000b9dce <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b9dce:	7b83      	ldrb	r3, [r0, #14]
   b9dd0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b9dd4:	4311      	orrs	r1, r2
   b9dd6:	7381      	strb	r1, [r0, #14]
}
   b9dd8:	4770      	bx	lr

000b9dda <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b9dda:	79c0      	ldrb	r0, [r0, #7]
}
   b9ddc:	4770      	bx	lr

000b9dde <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b9dde:	7a00      	ldrb	r0, [r0, #8]
}
   b9de0:	4770      	bx	lr

000b9de2 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b9de2:	7a40      	ldrb	r0, [r0, #9]
}
   b9de4:	4770      	bx	lr

000b9de6 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b9de6:	7a80      	ldrb	r0, [r0, #10]
}
   b9de8:	4770      	bx	lr

000b9dea <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b9dea:	8a00      	ldrh	r0, [r0, #16]
}
   b9dec:	b200      	sxth	r0, r0
   b9dee:	4770      	bx	lr

000b9df0 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b9df0:	7900      	ldrb	r0, [r0, #4]
}
   b9df2:	4770      	bx	lr

000b9df4 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b9df4:	7101      	strb	r1, [r0, #4]
}
   b9df6:	4770      	bx	lr

000b9df8 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b9df8:	8a40      	ldrh	r0, [r0, #18]
}
   b9dfa:	b280      	uxth	r0, r0
   b9dfc:	4770      	bx	lr

000b9dfe <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b9dfe:	8a80      	ldrh	r0, [r0, #20]
}
   b9e00:	b280      	uxth	r0, r0
   b9e02:	4770      	bx	lr

000b9e04 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b9e04:	8ac0      	ldrh	r0, [r0, #22]
}
   b9e06:	b280      	uxth	r0, r0
   b9e08:	4770      	bx	lr

000b9e0a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b9e0a:	b538      	push	{r3, r4, r5, lr}
   b9e0c:	4605      	mov	r5, r0
   b9e0e:	460c      	mov	r4, r1
    while (!available())
   b9e10:	682b      	ldr	r3, [r5, #0]
   b9e12:	4628      	mov	r0, r5
   b9e14:	68db      	ldr	r3, [r3, #12]
   b9e16:	4798      	blx	r3
   b9e18:	b928      	cbnz	r0, b9e26 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b9e1a:	2c00      	cmp	r4, #0
   b9e1c:	d0f8      	beq.n	b9e10 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b9e1e:	4620      	mov	r0, r4
   b9e20:	f002 faae 	bl	bc380 <delay>
   b9e24:	e7f4      	b.n	b9e10 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b9e26:	bd38      	pop	{r3, r4, r5, pc}

000b9e28 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b9e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9e2a:	4605      	mov	r5, r0
   b9e2c:	460f      	mov	r7, r1
   b9e2e:	4614      	mov	r4, r2
   b9e30:	f001 fe8a 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b9e34:	4606      	mov	r6, r0
   b9e36:	f001 fe87 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b9e3a:	1b80      	subs	r0, r0, r6
   b9e3c:	42b8      	cmp	r0, r7
   b9e3e:	d20a      	bcs.n	b9e56 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b9e40:	682b      	ldr	r3, [r5, #0]
   b9e42:	4628      	mov	r0, r5
   b9e44:	68db      	ldr	r3, [r3, #12]
   b9e46:	4798      	blx	r3
   b9e48:	b930      	cbnz	r0, b9e58 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b9e4a:	2c00      	cmp	r4, #0
   b9e4c:	d0f3      	beq.n	b9e36 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b9e4e:	4620      	mov	r0, r4
   b9e50:	f002 fa96 	bl	bc380 <delay>
   b9e54:	e7ef      	b.n	b9e36 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b9e56:	2000      	movs	r0, #0
}
   b9e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9e5a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b9e5a:	b570      	push	{r4, r5, r6, lr}
   b9e5c:	4604      	mov	r4, r0
   b9e5e:	460e      	mov	r6, r1
   b9e60:	f001 fe72 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   b9e64:	4605      	mov	r5, r0
   b9e66:	f001 fe6f 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b9e6a:	1b40      	subs	r0, r0, r5
   b9e6c:	42b0      	cmp	r0, r6
   b9e6e:	d204      	bcs.n	b9e7a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b9e70:	7923      	ldrb	r3, [r4, #4]
   b9e72:	2b03      	cmp	r3, #3
   b9e74:	d0f7      	beq.n	b9e66 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b9e76:	2001      	movs	r0, #1
}
   b9e78:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b9e7a:	2000      	movs	r0, #0
   b9e7c:	e7fc      	b.n	b9e78 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b9e7e <_ZN15RHGenericDriver7waitCADEv>:
{
   b9e7e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b9e80:	69c3      	ldr	r3, [r0, #28]
{
   b9e82:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b9e84:	b1b3      	cbz	r3, b9eb4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9e86:	f001 fe5f 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9e8a:	2664      	movs	r6, #100	; 0x64
   b9e8c:	4605      	mov	r5, r0
    while (isChannelActive())
   b9e8e:	6823      	ldr	r3, [r4, #0]
   b9e90:	4620      	mov	r0, r4
   b9e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9e94:	4798      	blx	r3
   b9e96:	b168      	cbz	r0, b9eb4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9e98:	f001 fe56 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b9e9c:	69e3      	ldr	r3, [r4, #28]
   b9e9e:	1b40      	subs	r0, r0, r5
   b9ea0:	4298      	cmp	r0, r3
   b9ea2:	d809      	bhi.n	b9eb8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9ea4:	210a      	movs	r1, #10
   b9ea6:	2001      	movs	r0, #1
   b9ea8:	f004 fc7d 	bl	be7a6 <_Z6randomii>
   b9eac:	4370      	muls	r0, r6
   b9eae:	f002 fa67 	bl	bc380 <delay>
    while (isChannelActive())
   b9eb2:	e7ec      	b.n	b9e8e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b9eb4:	2001      	movs	r0, #1
}
   b9eb6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b9eb8:	2000      	movs	r0, #0
   b9eba:	e7fc      	b.n	b9eb6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b9ebc <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b9ebc:	4a06      	ldr	r2, [pc, #24]	; (b9ed8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b9ebe:	6002      	str	r2, [r0, #0]
   b9ec0:	21ff      	movs	r1, #255	; 0xff
   b9ec2:	2200      	movs	r2, #0
   b9ec4:	7102      	strb	r2, [r0, #4]
   b9ec6:	7141      	strb	r1, [r0, #5]
   b9ec8:	8242      	strh	r2, [r0, #18]
   b9eca:	72c1      	strb	r1, [r0, #11]
   b9ecc:	8282      	strh	r2, [r0, #20]
   b9ece:	8181      	strh	r1, [r0, #12]
   b9ed0:	7382      	strb	r2, [r0, #14]
   b9ed2:	82c2      	strh	r2, [r0, #22]
   b9ed4:	61c2      	str	r2, [r0, #28]
}
   b9ed6:	4770      	bx	lr
   b9ed8:	000c1a0c 	.word	0x000c1a0c

000b9edc <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b9edc:	4770      	bx	lr

000b9ede <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b9ede:	4770      	bx	lr

000b9ee0 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b9ee0:	4770      	bx	lr

000b9ee2 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b9ee2:	4770      	bx	lr

000b9ee4 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b9ee4:	4770      	bx	lr

000b9ee6 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b9ee6:	7141      	strb	r1, [r0, #5]
}
   b9ee8:	4770      	bx	lr

000b9eea <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b9eea:	7181      	strb	r1, [r0, #6]
}
   b9eec:	4770      	bx	lr

000b9eee <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b9eee:	7101      	strb	r1, [r0, #4]
}
   b9ef0:	4770      	bx	lr
	...

000b9ef4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b9ef4:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b9ef6:	4d03      	ldr	r5, [pc, #12]	; (b9f04 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b9ef8:	6005      	str	r5, [r0, #0]
   b9efa:	7101      	strb	r1, [r0, #4]
   b9efc:	7142      	strb	r2, [r0, #5]
   b9efe:	7183      	strb	r3, [r0, #6]
}
   b9f00:	bd30      	pop	{r4, r5, pc}
   b9f02:	bf00      	nop
   b9f04:	000c1a8c 	.word	0x000c1a8c

000b9f08 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b9f08:	4770      	bx	lr

000b9f0a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b9f0a:	b510      	push	{r4, lr}
  }
   b9f0c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b9f0e:	4604      	mov	r4, r0
  }
   b9f10:	f7fa f8c5 	bl	b409e <_ZdlPvj>
   b9f14:	4620      	mov	r0, r4
   b9f16:	bd10      	pop	{r4, pc}

000b9f18 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9f18:	b40e      	push	{r1, r2, r3}
   b9f1a:	b503      	push	{r0, r1, lr}
   b9f1c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b9f1e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9f20:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b9f24:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b9f26:	f004 fc02 	bl	be72e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b9f2a:	b002      	add	sp, #8
   b9f2c:	f85d eb04 	ldr.w	lr, [sp], #4
   b9f30:	b003      	add	sp, #12
   b9f32:	4770      	bx	lr

000b9f34 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b9f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f36:	4604      	mov	r4, r0
   b9f38:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b9f3a:	7922      	ldrb	r2, [r4, #4]
   b9f3c:	68a3      	ldr	r3, [r4, #8]
   b9f3e:	b132      	cbz	r2, b9f4e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b9f40:	b9a3      	cbnz	r3, b9f6c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b9f42:	490b      	ldr	r1, [pc, #44]	; (b9f70 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b9f44:	b002      	add	sp, #8
   b9f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b9f4a:	f004 bae7 	b.w	be51c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b9f4e:	4a09      	ldr	r2, [pc, #36]	; (b9f74 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b9f50:	7b26      	ldrb	r6, [r4, #12]
   b9f52:	4d09      	ldr	r5, [pc, #36]	; (b9f78 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b9f54:	4909      	ldr	r1, [pc, #36]	; (b9f7c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b9f56:	7b64      	ldrb	r4, [r4, #13]
   b9f58:	2e01      	cmp	r6, #1
   b9f5a:	bf18      	it	ne
   b9f5c:	4629      	movne	r1, r5
   b9f5e:	e9cd 1400 	strd	r1, r4, [sp]
   b9f62:	4907      	ldr	r1, [pc, #28]	; (b9f80 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b9f64:	f7ff ffd8 	bl	b9f18 <_ZN5Print6printfEPKcz>
  }
   b9f68:	b002      	add	sp, #8
   b9f6a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b9f6c:	4a05      	ldr	r2, [pc, #20]	; (b9f84 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b9f6e:	e7ef      	b.n	b9f50 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b9f70:	000c1ac9 	.word	0x000c1ac9
   b9f74:	000c1f8d 	.word	0x000c1f8d
   b9f78:	000c1ac5 	.word	0x000c1ac5
   b9f7c:	000c1ac1 	.word	0x000c1ac1
   b9f80:	000c1adf 	.word	0x000c1adf
   b9f84:	000c1ab8 	.word	0x000c1ab8

000b9f88 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b9f88:	b510      	push	{r4, lr}
   b9f8a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b9f8c:	f7ff ffb2 	bl	b9ef4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b9f90:	4b05      	ldr	r3, [pc, #20]	; (b9fa8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b9f92:	6023      	str	r3, [r4, #0]
  {
   b9f94:	4b05      	ldr	r3, [pc, #20]	; (b9fac <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b9f96:	60a3      	str	r3, [r4, #8]
   b9f98:	2301      	movs	r3, #1
   b9f9a:	7323      	strb	r3, [r4, #12]
   b9f9c:	2300      	movs	r3, #0
   b9f9e:	6123      	str	r3, [r4, #16]
   b9fa0:	82a3      	strh	r3, [r4, #20]
{
}
   b9fa2:	4620      	mov	r0, r4
   b9fa4:	bd10      	pop	{r4, pc}
   b9fa6:	bf00      	nop
   b9fa8:	000c1b18 	.word	0x000c1b18
   b9fac:	000c1b04 	.word	0x000c1b04

000b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b9fb0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b9fb2:	4c0b      	ldr	r4, [pc, #44]	; (b9fe0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b9fb4:	7821      	ldrb	r1, [r4, #0]
   b9fb6:	f3bf 8f5b 	dmb	ish
   b9fba:	f011 0101 	ands.w	r1, r1, #1
   b9fbe:	d10b      	bne.n	b9fd8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9fc0:	4620      	mov	r0, r4
   b9fc2:	9101      	str	r1, [sp, #4]
   b9fc4:	f7fa f87a 	bl	b40bc <__cxa_guard_acquire>
   b9fc8:	9901      	ldr	r1, [sp, #4]
   b9fca:	b128      	cbz	r0, b9fd8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9fcc:	4805      	ldr	r0, [pc, #20]	; (b9fe4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9fce:	f004 fc01 	bl	be7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9fd2:	4620      	mov	r0, r4
   b9fd4:	f7fa f877 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b9fd8:	4802      	ldr	r0, [pc, #8]	; (b9fe4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9fda:	b002      	add	sp, #8
   b9fdc:	bd10      	pop	{r4, pc}
   b9fde:	bf00      	nop
   b9fe0:	2003e450 	.word	0x2003e450
   b9fe4:	2003e454 	.word	0x2003e454

000b9fe8 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b9fe8:	b507      	push	{r0, r1, r2, lr}
   b9fea:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b9fec:	f7ff ffe0 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9ff0:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b9ff2:	b003      	add	sp, #12
   b9ff4:	f85d eb04 	ldr.w	lr, [sp], #4
   b9ff8:	f004 bca4 	b.w	be944 <_ZN8SPIClass8transferEh>

000b9ffc <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b9ffc:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b9ffe:	f7ff ffd7 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   ba002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba006:	f004 bca3 	b.w	be950 <_ZN8SPIClass15attachInterruptEv>

000ba00a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   ba00a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   ba00c:	f7ff ffd0 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   ba010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba014:	f004 bc9d 	b.w	be952 <_ZN8SPIClass15detachInterruptEv>

000ba018 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   ba018:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   ba01a:	7903      	ldrb	r3, [r0, #4]
   ba01c:	2b04      	cmp	r3, #4
   ba01e:	d020      	beq.n	ba062 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   ba020:	2b03      	cmp	r3, #3
   ba022:	d020      	beq.n	ba066 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   ba024:	2b02      	cmp	r3, #2
   ba026:	d020      	beq.n	ba06a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   ba028:	4a11      	ldr	r2, [pc, #68]	; (ba070 <_ZN13RHHardwareSPI5beginEv+0x58>)
   ba02a:	4912      	ldr	r1, [pc, #72]	; (ba074 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   ba02c:	2b01      	cmp	r3, #1
   ba02e:	bf18      	it	ne
   ba030:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   ba032:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   ba034:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   ba036:	3901      	subs	r1, #1
   ba038:	bf18      	it	ne
   ba03a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   ba03c:	b133      	cbz	r3, ba04c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   ba03e:	2b01      	cmp	r3, #1
   ba040:	d004      	beq.n	ba04c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   ba042:	2b02      	cmp	r3, #2
   ba044:	d002      	beq.n	ba04c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   ba046:	2b03      	cmp	r3, #3
   ba048:	bf18      	it	ne
   ba04a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   ba04c:	2400      	movs	r4, #0
   ba04e:	7304      	strb	r4, [r0, #12]
   ba050:	6102      	str	r2, [r0, #16]
   ba052:	7501      	strb	r1, [r0, #20]
   ba054:	7543      	strb	r3, [r0, #21]
        instance().begin();
   ba056:	f7ff ffab 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   ba05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba05e:	f004 bbc3 	b.w	be7e8 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   ba062:	4a05      	ldr	r2, [pc, #20]	; (ba078 <_ZN13RHHardwareSPI5beginEv+0x60>)
   ba064:	e7e5      	b.n	ba032 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   ba066:	4a05      	ldr	r2, [pc, #20]	; (ba07c <_ZN13RHHardwareSPI5beginEv+0x64>)
   ba068:	e7e3      	b.n	ba032 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   ba06a:	4a05      	ldr	r2, [pc, #20]	; (ba080 <_ZN13RHHardwareSPI5beginEv+0x68>)
   ba06c:	e7e1      	b.n	ba032 <_ZN13RHHardwareSPI5beginEv+0x1a>
   ba06e:	bf00      	nop
   ba070:	001e8480 	.word	0x001e8480
   ba074:	000f4240 	.word	0x000f4240
   ba078:	00f42400 	.word	0x00f42400
   ba07c:	007a1200 	.word	0x007a1200
   ba080:	003d0900 	.word	0x003d0900

000ba084 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   ba084:	b508      	push	{r3, lr}
        instance().end();
   ba086:	f7ff ff93 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   ba08a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba08e:	f004 bbbf 	b.w	be810 <_ZN8SPIClass3endEv>

000ba092 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   ba092:	b510      	push	{r4, lr}
   ba094:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   ba096:	f7ff ff8b 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   ba09a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   ba09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba0a2:	f004 bbe1 	b.w	be868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000ba0a6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   ba0a6:	b508      	push	{r3, lr}
        instance().endTransaction();
   ba0a8:	f7ff ff82 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   ba0ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba0b0:	f004 bbc0 	b.w	be834 <_ZN8SPIClass14endTransactionEv>

000ba0b4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   ba0b4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   ba0b6:	f7ff ff7b 	bl	b9fb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   ba0ba:	bd08      	pop	{r3, pc}

000ba0bc <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   ba0bc:	2300      	movs	r3, #0
   ba0be:	4802      	ldr	r0, [pc, #8]	; (ba0c8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   ba0c0:	461a      	mov	r2, r3
   ba0c2:	4619      	mov	r1, r3
   ba0c4:	f7ff bf60 	b.w	b9f88 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   ba0c8:	2003e45c 	.word	0x2003e45c

000ba0cc <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   ba0cc:	2a01      	cmp	r2, #1
   ba0ce:	d105      	bne.n	ba0dc <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   ba0d0:	7a00      	ldrb	r0, [r0, #8]
   ba0d2:	780b      	ldrb	r3, [r1, #0]
   ba0d4:	1a1b      	subs	r3, r3, r0
   ba0d6:	4258      	negs	r0, r3
   ba0d8:	4158      	adcs	r0, r3
   ba0da:	4770      	bx	lr
   ba0dc:	2000      	movs	r0, #0
}
   ba0de:	4770      	bx	lr

000ba0e0 <_ZN6RHMesh5doArpEh>:
{
   ba0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba0e4:	4c25      	ldr	r4, [pc, #148]	; (ba17c <_ZN6RHMesh5doArpEh+0x9c>)
   ba0e6:	2301      	movs	r3, #1
{
   ba0e8:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   ba0ea:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   ba0ec:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba0ee:	2300      	movs	r3, #0
{
   ba0f0:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   ba0f2:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba0f4:	9300      	str	r3, [sp, #0]
   ba0f6:	2203      	movs	r2, #3
   ba0f8:	23ff      	movs	r3, #255	; 0xff
   ba0fa:	4621      	mov	r1, r4
{
   ba0fc:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   ba0fe:	f000 fbb7 	bl	ba870 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   ba102:	b120      	cbz	r0, ba10e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   ba104:	2500      	movs	r5, #0
}
   ba106:	4628      	mov	r0, r5
   ba108:	b006      	add	sp, #24
   ba10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   ba10e:	237a      	movs	r3, #122	; 0x7a
   ba110:	f88d 3017 	strb.w	r3, [sp, #23]
   ba114:	f001 fd18 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   ba118:	f106 0904 	add.w	r9, r6, #4
   ba11c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   ba11e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   ba122:	f001 fd11 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   ba126:	1a29      	subs	r1, r5, r0
   ba128:	2900      	cmp	r1, #0
   ba12a:	ddeb      	ble.n	ba104 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   ba12c:	2200      	movs	r2, #0
   ba12e:	b289      	uxth	r1, r1
   ba130:	4648      	mov	r0, r9
   ba132:	f7ff fdbe 	bl	b9cb2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba136:	2800      	cmp	r0, #0
   ba138:	d0f3      	beq.n	ba122 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   ba13a:	2300      	movs	r3, #0
   ba13c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   ba140:	e9cd 3300 	strd	r3, r3, [sp]
   ba144:	f10d 0217 	add.w	r2, sp, #23
   ba148:	4621      	mov	r1, r4
   ba14a:	4630      	mov	r0, r6
   ba14c:	f000 fb9a 	bl	ba884 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba150:	4605      	mov	r5, r0
   ba152:	2800      	cmp	r0, #0
   ba154:	d0e3      	beq.n	ba11e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   ba156:	f89d 3017 	ldrb.w	r3, [sp, #23]
   ba15a:	2b01      	cmp	r3, #1
   ba15c:	d9df      	bls.n	ba11e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba15e:	f894 a000 	ldrb.w	sl, [r4]
   ba162:	f1ba 0f02 	cmp.w	sl, #2
   ba166:	d1da      	bne.n	ba11e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   ba168:	4648      	mov	r0, r9
   ba16a:	f7ff fde7 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
   ba16e:	4653      	mov	r3, sl
   ba170:	4602      	mov	r2, r0
   ba172:	4639      	mov	r1, r7
   ba174:	4630      	mov	r0, r6
   ba176:	f000 faf3 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   ba17a:	e7c4      	b.n	ba106 <_ZN6RHMesh5doArpEh+0x26>
   ba17c:	2003e474 	.word	0x2003e474

000ba180 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   ba180:	2a01      	cmp	r2, #1
{
   ba182:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba186:	4607      	mov	r7, r0
   ba188:	460e      	mov	r6, r1
   ba18a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   ba18c:	d93b      	bls.n	ba206 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   ba18e:	794d      	ldrb	r5, [r1, #5]
   ba190:	2d02      	cmp	r5, #2
   ba192:	d130      	bne.n	ba1f6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   ba194:	f100 0804 	add.w	r8, r0, #4
   ba198:	79c9      	ldrb	r1, [r1, #7]
   ba19a:	9101      	str	r1, [sp, #4]
   ba19c:	4640      	mov	r0, r8
   ba19e:	f7ff fdcd 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba1a2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   ba1a4:	462b      	mov	r3, r5
   ba1a6:	4602      	mov	r2, r0
   ba1a8:	9901      	ldr	r1, [sp, #4]
   ba1aa:	4638      	mov	r0, r7
   ba1ac:	f000 fad8 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   ba1b0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   ba1b2:	f106 0308 	add.w	r3, r6, #8
   ba1b6:	2400      	movs	r4, #0
   ba1b8:	4622      	mov	r2, r4
   ba1ba:	4295      	cmp	r5, r2
   ba1bc:	f104 0401 	add.w	r4, r4, #1
   ba1c0:	b2e4      	uxtb	r4, r4
   ba1c2:	d904      	bls.n	ba1ce <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   ba1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba1c8:	7a39      	ldrb	r1, [r7, #8]
   ba1ca:	4291      	cmp	r1, r2
   ba1cc:	d1f4      	bne.n	ba1b8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   ba1ce:	f104 0108 	add.w	r1, r4, #8
   ba1d2:	440e      	add	r6, r1
	while (i < numRoutes)
   ba1d4:	42a5      	cmp	r5, r4
   ba1d6:	d916      	bls.n	ba206 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   ba1d8:	f816 1b01 	ldrb.w	r1, [r6], #1
   ba1dc:	9101      	str	r1, [sp, #4]
   ba1de:	4640      	mov	r0, r8
   ba1e0:	f7ff fdac 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
   ba1e4:	3401      	adds	r4, #1
   ba1e6:	4602      	mov	r2, r0
   ba1e8:	9901      	ldr	r1, [sp, #4]
   ba1ea:	2302      	movs	r3, #2
   ba1ec:	4638      	mov	r0, r7
   ba1ee:	b2e4      	uxtb	r4, r4
   ba1f0:	f000 fab6 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   ba1f4:	e7ee      	b.n	ba1d4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   ba1f6:	2d03      	cmp	r5, #3
   ba1f8:	d105      	bne.n	ba206 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   ba1fa:	7989      	ldrb	r1, [r1, #6]
}
   ba1fc:	b002      	add	sp, #8
   ba1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   ba202:	f000 ba96 	b.w	ba732 <_ZN8RHRouter13deleteRouteToEh>
}
   ba206:	b002      	add	sp, #8
   ba208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba20c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   ba20c:	b510      	push	{r4, lr}
   ba20e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   ba210:	f000 fae6 	bl	ba7e0 <_ZN8RHRouterC1ER15RHGenericDriverh>
   ba214:	4b01      	ldr	r3, [pc, #4]	; (ba21c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   ba216:	6023      	str	r3, [r4, #0]
}
   ba218:	4620      	mov	r0, r4
   ba21a:	bd10      	pop	{r4, pc}
   ba21c:	000c1b4c 	.word	0x000c1b4c

000ba220 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   ba220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba224:	2a79      	cmp	r2, #121	; 0x79
{
   ba226:	f89d 9020 	ldrb.w	r9, [sp, #32]
   ba22a:	4606      	mov	r6, r0
   ba22c:	460f      	mov	r7, r1
   ba22e:	4614      	mov	r4, r2
   ba230:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   ba232:	d825      	bhi.n	ba280 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   ba234:	2bff      	cmp	r3, #255	; 0xff
   ba236:	d114      	bne.n	ba262 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba238:	f8df 8048 	ldr.w	r8, [pc, #72]	; ba284 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   ba23c:	4640      	mov	r0, r8
   ba23e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   ba240:	4622      	mov	r2, r4
   ba242:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   ba244:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   ba248:	f005 ff54 	bl	c00f4 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba24c:	1c62      	adds	r2, r4, #1
   ba24e:	f8cd 9020 	str.w	r9, [sp, #32]
   ba252:	462b      	mov	r3, r5
   ba254:	4641      	mov	r1, r8
   ba256:	4630      	mov	r0, r6
   ba258:	b2d2      	uxtb	r2, r2
}
   ba25a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   ba25e:	f000 bb07 	b.w	ba870 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   ba262:	4619      	mov	r1, r3
   ba264:	f000 fa21 	bl	ba6aa <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   ba268:	2800      	cmp	r0, #0
   ba26a:	d1e5      	bne.n	ba238 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   ba26c:	6833      	ldr	r3, [r6, #0]
   ba26e:	4629      	mov	r1, r5
   ba270:	689b      	ldr	r3, [r3, #8]
   ba272:	4630      	mov	r0, r6
   ba274:	4798      	blx	r3
   ba276:	2800      	cmp	r0, #0
   ba278:	d1de      	bne.n	ba238 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba27a:	2002      	movs	r0, #2
}
   ba27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   ba280:	2001      	movs	r0, #1
   ba282:	e7fb      	b.n	ba27c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   ba284:	2003e474 	.word	0x2003e474

000ba288 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   ba288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba28c:	b089      	sub	sp, #36	; 0x24
   ba28e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba290:	237a      	movs	r3, #122	; 0x7a
   ba292:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba296:	f10d 031f 	add.w	r3, sp, #31
   ba29a:	9303      	str	r3, [sp, #12]
   ba29c:	f10d 031e 	add.w	r3, sp, #30
   ba2a0:	9302      	str	r3, [sp, #8]
   ba2a2:	4e5d      	ldr	r6, [pc, #372]	; (ba418 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba2a4:	f10d 031d 	add.w	r3, sp, #29
   ba2a8:	9301      	str	r3, [sp, #4]
   ba2aa:	ab07      	add	r3, sp, #28
   ba2ac:	9300      	str	r3, [sp, #0]
{     
   ba2ae:	4689      	mov	r9, r1
   ba2b0:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba2b2:	f10d 031b 	add.w	r3, sp, #27
   ba2b6:	f10d 021a 	add.w	r2, sp, #26
   ba2ba:	4631      	mov	r1, r6
{     
   ba2bc:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   ba2c0:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   ba2c2:	f000 fadf 	bl	ba884 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   ba2c6:	4604      	mov	r4, r0
   ba2c8:	b920      	cbnz	r0, ba2d4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   ba2ca:	2400      	movs	r4, #0
}
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	b009      	add	sp, #36	; 0x24
   ba2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   ba2d4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   ba2d8:	b373      	cbz	r3, ba338 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   ba2da:	7832      	ldrb	r2, [r6, #0]
   ba2dc:	bb62      	cbnz	r2, ba338 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   ba2de:	f1b8 0f00 	cmp.w	r8, #0
   ba2e2:	d003      	beq.n	ba2ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   ba2e4:	f89d 201b 	ldrb.w	r2, [sp, #27]
   ba2e8:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   ba2ec:	f1bb 0f00 	cmp.w	fp, #0
   ba2f0:	d003      	beq.n	ba2fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   ba2f2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba2f6:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   ba2fa:	f1ba 0f00 	cmp.w	sl, #0
   ba2fe:	d003      	beq.n	ba308 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   ba300:	f89d 201d 	ldrb.w	r2, [sp, #29]
   ba304:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   ba308:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba30a:	b11a      	cbz	r2, ba314 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   ba30c:	9914      	ldr	r1, [sp, #80]	; 0x50
   ba30e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   ba312:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   ba314:	9a15      	ldr	r2, [sp, #84]	; 0x54
   ba316:	b11a      	cbz	r2, ba320 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   ba318:	9915      	ldr	r1, [sp, #84]	; 0x54
   ba31a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba31e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   ba320:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba322:	493e      	ldr	r1, [pc, #248]	; (ba41c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   ba324:	3b01      	subs	r3, #1
   ba326:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   ba328:	429a      	cmp	r2, r3
		*len = msgLen;
   ba32a:	bf88      	it	hi
   ba32c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   ba32e:	783a      	ldrb	r2, [r7, #0]
   ba330:	4648      	mov	r0, r9
   ba332:	f005 fedf 	bl	c00f4 <memcpy>
	    return true;
   ba336:	e7c9      	b.n	ba2cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   ba338:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba33c:	2aff      	cmp	r2, #255	; 0xff
   ba33e:	d1c4      	bne.n	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   ba340:	2b01      	cmp	r3, #1
   ba342:	d9c2      	bls.n	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   ba344:	7832      	ldrb	r2, [r6, #0]
   ba346:	2a01      	cmp	r2, #1
   ba348:	d1bf      	bne.n	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   ba34a:	7a2a      	ldrb	r2, [r5, #8]
   ba34c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   ba350:	42a2      	cmp	r2, r4
   ba352:	d0ba      	beq.n	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   ba354:	1edf      	subs	r7, r3, #3
   ba356:	4932      	ldr	r1, [pc, #200]	; (ba420 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   ba358:	b2ff      	uxtb	r7, r7
   ba35a:	2300      	movs	r3, #0
   ba35c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   ba360:	4547      	cmp	r7, r8
   ba362:	d906      	bls.n	ba372 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   ba364:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba368:	4282      	cmp	r2, r0
   ba36a:	f103 0301 	add.w	r3, r3, #1
   ba36e:	d1f5      	bne.n	ba35c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   ba370:	e7ab      	b.n	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   ba372:	f105 0904 	add.w	r9, r5, #4
   ba376:	4648      	mov	r0, r9
   ba378:	f7ff fce0 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
   ba37c:	2302      	movs	r3, #2
   ba37e:	4602      	mov	r2, r0
   ba380:	4621      	mov	r1, r4
   ba382:	4628      	mov	r0, r5
   ba384:	f000 f9ec 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   ba388:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba38c:	b193      	cbz	r3, ba3b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   ba38e:	4c22      	ldr	r4, [pc, #136]	; (ba418 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   ba390:	1ba3      	subs	r3, r4, r6
   ba392:	b2db      	uxtb	r3, r3
   ba394:	429f      	cmp	r7, r3
   ba396:	d90c      	bls.n	ba3b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   ba398:	78e1      	ldrb	r1, [r4, #3]
   ba39a:	9105      	str	r1, [sp, #20]
   ba39c:	4648      	mov	r0, r9
   ba39e:	f7ff fccd 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
   ba3a2:	9905      	ldr	r1, [sp, #20]
   ba3a4:	4602      	mov	r2, r0
   ba3a6:	2302      	movs	r3, #2
   ba3a8:	4628      	mov	r0, r5
   ba3aa:	f000 f9d9 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   ba3ae:	3401      	adds	r4, #1
   ba3b0:	e7ee      	b.n	ba390 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   ba3b2:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   ba3b4:	682b      	ldr	r3, [r5, #0]
   ba3b6:	7872      	ldrb	r2, [r6, #1]
   ba3b8:	68db      	ldr	r3, [r3, #12]
   ba3ba:	491a      	ldr	r1, [pc, #104]	; (ba424 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   ba3bc:	4628      	mov	r0, r5
   ba3be:	4798      	blx	r3
   ba3c0:	4604      	mov	r4, r0
   ba3c2:	b160      	cbz	r0, ba3de <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba3c4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba3c6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   ba3c8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   ba3ca:	f89d 201a 	ldrb.w	r2, [sp, #26]
   ba3ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba3d2:	4911      	ldr	r1, [pc, #68]	; (ba418 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   ba3d4:	9400      	str	r4, [sp, #0]
   ba3d6:	4628      	mov	r0, r5
   ba3d8:	f000 fa4a 	bl	ba870 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba3dc:	e776      	b.n	ba2cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   ba3de:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   ba3e2:	4543      	cmp	r3, r8
   ba3e4:	f67f af71 	bls.w	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   ba3e8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   ba3ec:	2b00      	cmp	r3, #0
   ba3ee:	f43f af6c 	beq.w	ba2ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   ba3f2:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   ba3f6:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba3f8:	4907      	ldr	r1, [pc, #28]	; (ba418 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   ba3fa:	443e      	add	r6, r7
		tmpMessageLen++;
   ba3fc:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   ba3fe:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba400:	f89d 301b 	ldrb.w	r3, [sp, #27]
   ba404:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   ba406:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba408:	9300      	str	r3, [sp, #0]
   ba40a:	4628      	mov	r0, r5
   ba40c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   ba40e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   ba412:	f000 f9f7 	bl	ba804 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   ba416:	e759      	b.n	ba2cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   ba418:	2003e474 	.word	0x2003e474
   ba41c:	2003e475 	.word	0x2003e475
   ba420:	2003e477 	.word	0x2003e477
   ba424:	2003e476 	.word	0x2003e476

000ba428 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   ba428:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba42a:	b085      	sub	sp, #20
   ba42c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba42e:	3004      	adds	r0, #4
{
   ba430:	460e      	mov	r6, r1
   ba432:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba434:	f7ff fc82 	bl	b9d3c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   ba438:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   ba43a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   ba43c:	4631      	mov	r1, r6
   ba43e:	4628      	mov	r0, r5
   ba440:	f000 f94a 	bl	ba6d8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba444:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   ba446:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   ba448:	d001      	beq.n	ba44e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   ba44a:	2805      	cmp	r0, #5
   ba44c:	d11b      	bne.n	ba486 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   ba44e:	7831      	ldrb	r1, [r6, #0]
   ba450:	4628      	mov	r0, r5
   ba452:	f000 f96e 	bl	ba732 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   ba456:	7872      	ldrb	r2, [r6, #1]
   ba458:	7a2b      	ldrb	r3, [r5, #8]
   ba45a:	429a      	cmp	r2, r3
   ba45c:	d013      	beq.n	ba486 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   ba45e:	4c0b      	ldr	r4, [pc, #44]	; (ba48c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   ba460:	2303      	movs	r3, #3
   ba462:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   ba464:	7833      	ldrb	r3, [r6, #0]
   ba466:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   ba468:	7871      	ldrb	r1, [r6, #1]
   ba46a:	2302      	movs	r3, #2
   ba46c:	463a      	mov	r2, r7
   ba46e:	4628      	mov	r0, r5
   ba470:	f000 f976 	bl	ba760 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   ba474:	2300      	movs	r3, #0
   ba476:	9300      	str	r3, [sp, #0]
   ba478:	4621      	mov	r1, r4
   ba47a:	7873      	ldrb	r3, [r6, #1]
   ba47c:	2202      	movs	r2, #2
   ba47e:	4628      	mov	r0, r5
   ba480:	f000 f9f6 	bl	ba870 <_ZN8RHRouter10sendtoWaitEPhhhh>
   ba484:	4604      	mov	r4, r0
}
   ba486:	4620      	mov	r0, r4
   ba488:	b005      	add	sp, #20
   ba48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba48c:	2003e474 	.word	0x2003e474

000ba490 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   ba490:	b510      	push	{r4, lr}
   ba492:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   ba494:	f7ff fc02 	bl	b9c9c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   ba498:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   ba49a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   ba49c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   ba49e:	2303      	movs	r3, #3
    _retransmissions = 0;
   ba4a0:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   ba4a2:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   ba4a4:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   ba4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   ba4aa:	f104 0011 	add.w	r0, r4, #17
   ba4ae:	f005 fe49 	bl	c0144 <memset>
}
   ba4b2:	4620      	mov	r0, r4
   ba4b4:	bd10      	pop	{r4, pc}

000ba4b6 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   ba4b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba4b8:	4604      	mov	r4, r0
   ba4ba:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   ba4bc:	f7ff fc32 	bl	b9d24 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   ba4c0:	4620      	mov	r0, r4
   ba4c2:	2200      	movs	r2, #0
   ba4c4:	2180      	movs	r1, #128	; 0x80
   ba4c6:	f7ff fc31 	bl	b9d2c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   ba4ca:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   ba4cc:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   ba4ce:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   ba4d2:	f10d 010f 	add.w	r1, sp, #15
   ba4d6:	2201      	movs	r2, #1
   ba4d8:	4620      	mov	r0, r4
   ba4da:	f7ff fbf4 	bl	b9cc6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   ba4de:	4620      	mov	r0, r4
   ba4e0:	f7ff fbe3 	bl	b9caa <_ZN10RHDatagram14waitPacketSentEv>
}
   ba4e4:	b004      	add	sp, #16
   ba4e6:	bd10      	pop	{r4, pc}

000ba4e8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   ba4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba4ec:	7b05      	ldrb	r5, [r0, #12]
   ba4ee:	3501      	adds	r5, #1
   ba4f0:	b2ed      	uxtb	r5, r5
{
   ba4f2:	b087      	sub	sp, #28
   ba4f4:	4604      	mov	r4, r0
   ba4f6:	4689      	mov	r9, r1
   ba4f8:	4692      	mov	sl, r2
   ba4fa:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   ba4fc:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   ba4fe:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   ba500:	7c22      	ldrb	r2, [r4, #16]
   ba502:	463b      	mov	r3, r7
   ba504:	429a      	cmp	r2, r3
   ba506:	f107 0701 	add.w	r7, r7, #1
   ba50a:	b2ff      	uxtb	r7, r7
   ba50c:	d36b      	bcc.n	ba5e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   ba50e:	4629      	mov	r1, r5
   ba510:	4620      	mov	r0, r4
   ba512:	f7ff fc07 	bl	b9d24 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   ba516:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   ba518:	bf0d      	iteet	eq
   ba51a:	22c0      	moveq	r2, #192	; 0xc0
   ba51c:	2280      	movne	r2, #128	; 0x80
   ba51e:	2140      	movne	r1, #64	; 0x40
   ba520:	2100      	moveq	r1, #0
   ba522:	4620      	mov	r0, r4
   ba524:	f7ff fc02 	bl	b9d2c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   ba528:	4643      	mov	r3, r8
   ba52a:	4652      	mov	r2, sl
   ba52c:	4649      	mov	r1, r9
   ba52e:	4620      	mov	r0, r4
   ba530:	f7ff fbc9 	bl	b9cc6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   ba534:	4620      	mov	r0, r4
   ba536:	f7ff fbb8 	bl	b9caa <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   ba53a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   ba53e:	d054      	beq.n	ba5ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   ba540:	2f01      	cmp	r7, #1
	    _retransmissions++;
   ba542:	bf82      	ittt	hi
   ba544:	68a3      	ldrhi	r3, [r4, #8]
   ba546:	3301      	addhi	r3, #1
   ba548:	60a3      	strhi	r3, [r4, #8]
   ba54a:	f001 fafd 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   ba54e:	f44f 7180 	mov.w	r1, #256	; 0x100
   ba552:	4683      	mov	fp, r0
   ba554:	2000      	movs	r0, #0
   ba556:	89e6      	ldrh	r6, [r4, #14]
   ba558:	f004 f925 	bl	be7a6 <_Z6randomii>
   ba55c:	4370      	muls	r0, r6
   ba55e:	bf48      	it	mi
   ba560:	30ff      	addmi	r0, #255	; 0xff
   ba562:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   ba566:	fa1b f686 	uxtah	r6, fp, r6
   ba56a:	f001 faed 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
   ba56e:	1a30      	subs	r0, r6, r0
   ba570:	2800      	cmp	r0, #0
   ba572:	ddc5      	ble.n	ba500 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   ba574:	b281      	uxth	r1, r0
   ba576:	2200      	movs	r2, #0
   ba578:	4620      	mov	r0, r4
   ba57a:	f7ff fb9a 	bl	b9cb2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   ba57e:	2800      	cmp	r0, #0
   ba580:	d0f3      	beq.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   ba582:	f10d 0317 	add.w	r3, sp, #23
   ba586:	9302      	str	r3, [sp, #8]
   ba588:	f10d 0316 	add.w	r3, sp, #22
   ba58c:	9301      	str	r3, [sp, #4]
   ba58e:	2200      	movs	r2, #0
   ba590:	f10d 0315 	add.w	r3, sp, #21
   ba594:	9300      	str	r3, [sp, #0]
   ba596:	4611      	mov	r1, r2
   ba598:	ab05      	add	r3, sp, #20
   ba59a:	4620      	mov	r0, r4
   ba59c:	f7ff fbda 	bl	b9d54 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba5a0:	2800      	cmp	r0, #0
   ba5a2:	d0e2      	beq.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   ba5a4:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   ba5a8:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   ba5ac:	4542      	cmp	r2, r8
   ba5ae:	d10e      	bne.n	ba5ce <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   ba5b0:	f894 c004 	ldrb.w	ip, [r4, #4]
   ba5b4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   ba5b8:	458c      	cmp	ip, r1
   ba5ba:	d108      	bne.n	ba5ce <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   ba5bc:	2b00      	cmp	r3, #0
   ba5be:	da08      	bge.n	ba5d2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   ba5c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba5c4:	42ab      	cmp	r3, r5
   ba5c6:	d1d0      	bne.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   ba5c8:	b007      	add	sp, #28
   ba5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   ba5ce:	2b00      	cmp	r3, #0
   ba5d0:	dbcb      	blt.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   ba5d2:	18a1      	adds	r1, r4, r2
   ba5d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   ba5d8:	7c49      	ldrb	r1, [r1, #17]
   ba5da:	4299      	cmp	r1, r3
   ba5dc:	d1c5      	bne.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   ba5de:	4620      	mov	r0, r4
   ba5e0:	f7ff ff69 	bl	ba4b6 <_ZN18RHReliableDatagram11acknowledgeEhh>
   ba5e4:	e7c1      	b.n	ba56a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   ba5e6:	2000      	movs	r0, #0
   ba5e8:	e7ee      	b.n	ba5c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   ba5ea:	2001      	movs	r0, #1
   ba5ec:	e7ec      	b.n	ba5c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000ba5ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   ba5ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba5f2:	b089      	sub	sp, #36	; 0x24
   ba5f4:	e9cd 2104 	strd	r2, r1, [sp, #16]
   ba5f8:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   ba5fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   ba5fe:	4604      	mov	r4, r0
   ba600:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba602:	f7ff fb4e 	bl	b9ca2 <_ZN10RHDatagram9availableEv>
   ba606:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   ba60a:	b920      	cbnz	r0, ba616 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   ba60c:	2500      	movs	r5, #0
}
   ba60e:	4628      	mov	r0, r5
   ba610:	b009      	add	sp, #36	; 0x24
   ba612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   ba616:	f10d 031f 	add.w	r3, sp, #31
   ba61a:	9302      	str	r3, [sp, #8]
   ba61c:	f10d 031e 	add.w	r3, sp, #30
   ba620:	9301      	str	r3, [sp, #4]
   ba622:	f10d 031d 	add.w	r3, sp, #29
   ba626:	9300      	str	r3, [sp, #0]
   ba628:	4620      	mov	r0, r4
   ba62a:	ab07      	add	r3, sp, #28
   ba62c:	f7ff fb92 	bl	b9d54 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   ba630:	4605      	mov	r5, r0
   ba632:	2800      	cmp	r0, #0
   ba634:	d0ea      	beq.n	ba60c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   ba636:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   ba63a:	2b00      	cmp	r3, #0
   ba63c:	dbe6      	blt.n	ba60c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   ba63e:	7922      	ldrb	r2, [r4, #4]
   ba640:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba644:	429a      	cmp	r2, r3
   ba646:	d106      	bne.n	ba656 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   ba648:	f89d 201c 	ldrb.w	r2, [sp, #28]
   ba64c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   ba650:	4620      	mov	r0, r4
   ba652:	f7ff ff30 	bl	ba4b6 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   ba656:	f89d 201f 	ldrb.w	r2, [sp, #31]
   ba65a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   ba65e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   ba662:	f012 0f40 	tst.w	r2, #64	; 0x40
   ba666:	440c      	add	r4, r1
   ba668:	d002      	beq.n	ba670 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   ba66a:	7c60      	ldrb	r0, [r4, #17]
   ba66c:	4298      	cmp	r0, r3
   ba66e:	d0cd      	beq.n	ba60c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   ba670:	b106      	cbz	r6, ba674 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   ba672:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   ba674:	f1b9 0f00 	cmp.w	r9, #0
   ba678:	d003      	beq.n	ba682 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   ba67a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   ba67e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   ba682:	f1b8 0f00 	cmp.w	r8, #0
   ba686:	d001      	beq.n	ba68c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   ba688:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   ba68c:	b107      	cbz	r7, ba690 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   ba68e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   ba690:	7463      	strb	r3, [r4, #17]
		return true;
   ba692:	e7bc      	b.n	ba60e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000ba694 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   ba694:	4770      	bx	lr

000ba696 <_ZN8RHRouter4initEv>:
{
   ba696:	b510      	push	{r4, lr}
   ba698:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   ba69a:	3004      	adds	r0, #4
   ba69c:	f7ff fb34 	bl	b9d08 <_ZN10RHDatagram4initEv>
    if (ret)
   ba6a0:	b110      	cbz	r0, ba6a8 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   ba6a2:	231e      	movs	r3, #30
   ba6a4:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   ba6a8:	bd10      	pop	{r4, pc}

000ba6aa <_ZN8RHRouter10getRouteToEh>:
{
   ba6aa:	b510      	push	{r4, lr}
   ba6ac:	4602      	mov	r2, r0
   ba6ae:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   ba6b0:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   ba6b4:	428c      	cmp	r4, r1
   ba6b6:	d108      	bne.n	ba6ca <_ZN8RHRouter10getRouteToEh+0x20>
   ba6b8:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   ba6bc:	b12c      	cbz	r4, ba6ca <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   ba6be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   ba6c2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   ba6c6:	4418      	add	r0, r3
}
   ba6c8:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba6ca:	3301      	adds	r3, #1
   ba6cc:	2b32      	cmp	r3, #50	; 0x32
   ba6ce:	f102 0203 	add.w	r2, r2, #3
   ba6d2:	d1ed      	bne.n	ba6b0 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   ba6d4:	2000      	movs	r0, #0
   ba6d6:	e7f7      	b.n	ba6c8 <_ZN8RHRouter10getRouteToEh+0x1e>

000ba6d8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   ba6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   ba6da:	780b      	ldrb	r3, [r1, #0]
   ba6dc:	2bff      	cmp	r3, #255	; 0xff
{
   ba6de:	4605      	mov	r5, r0
   ba6e0:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   ba6e2:	d006      	beq.n	ba6f2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   ba6e4:	4619      	mov	r1, r3
   ba6e6:	9201      	str	r2, [sp, #4]
   ba6e8:	f7ff ffdf 	bl	ba6aa <_ZN8RHRouter10getRouteToEh>
	if (!route)
   ba6ec:	b158      	cbz	r0, ba706 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   ba6ee:	7843      	ldrb	r3, [r0, #1]
   ba6f0:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   ba6f2:	4621      	mov	r1, r4
   ba6f4:	1d28      	adds	r0, r5, #4
   ba6f6:	f7ff fef7 	bl	ba4e8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   ba6fa:	2800      	cmp	r0, #0
   ba6fc:	bf14      	ite	ne
   ba6fe:	2000      	movne	r0, #0
   ba700:	2005      	moveq	r0, #5
}
   ba702:	b003      	add	sp, #12
   ba704:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   ba706:	2002      	movs	r0, #2
   ba708:	e7fb      	b.n	ba702 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000ba70a <_ZN8RHRouter11deleteRouteEh>:
{
   ba70a:	b510      	push	{r4, lr}
   ba70c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   ba710:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   ba712:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   ba716:	f503 708c 	add.w	r0, r3, #280	; 0x118
   ba71a:	f203 111b 	addw	r1, r3, #283	; 0x11b
   ba71e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   ba722:	4421      	add	r1, r4
   ba724:	4420      	add	r0, r4
   ba726:	f005 fce5 	bl	c00f4 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   ba72a:	2300      	movs	r3, #0
   ba72c:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   ba730:	bd10      	pop	{r4, pc}

000ba732 <_ZN8RHRouter13deleteRouteToEh>:
{
   ba732:	b538      	push	{r3, r4, r5, lr}
   ba734:	460a      	mov	r2, r1
   ba736:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   ba738:	f500 748c 	add.w	r4, r0, #280	; 0x118
   ba73c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   ba740:	b2d9      	uxtb	r1, r3
   ba742:	5d65      	ldrb	r5, [r4, r5]
   ba744:	4295      	cmp	r5, r2
   ba746:	d103      	bne.n	ba750 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   ba748:	f7ff ffdf 	bl	ba70a <_ZN8RHRouter11deleteRouteEh>
	    return true;
   ba74c:	2001      	movs	r0, #1
}
   ba74e:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba750:	3301      	adds	r3, #1
   ba752:	2b32      	cmp	r3, #50	; 0x32
   ba754:	d1f2      	bne.n	ba73c <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   ba756:	2000      	movs	r0, #0
   ba758:	e7f9      	b.n	ba74e <_ZN8RHRouter13deleteRouteToEh+0x1c>

000ba75a <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   ba75a:	2100      	movs	r1, #0
   ba75c:	f7ff bfd5 	b.w	ba70a <_ZN8RHRouter11deleteRouteEh>

000ba760 <_ZN8RHRouter10addRouteToEhhh>:
{
   ba760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba762:	4616      	mov	r6, r2
   ba764:	461f      	mov	r7, r3
   ba766:	4604      	mov	r4, r0
   ba768:	460d      	mov	r5, r1
   ba76a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   ba76c:	f500 728c 	add.w	r2, r0, #280	; 0x118
   ba770:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba774:	5c11      	ldrb	r1, [r2, r0]
   ba776:	42a9      	cmp	r1, r5
   ba778:	d105      	bne.n	ba786 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   ba77a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   ba77c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   ba780:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   ba784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba786:	3301      	adds	r3, #1
   ba788:	2b32      	cmp	r3, #50	; 0x32
   ba78a:	d1f1      	bne.n	ba770 <_ZN8RHRouter10addRouteToEhhh+0x10>
   ba78c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   ba78e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   ba792:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba796:	5c11      	ldrb	r1, [r2, r0]
   ba798:	b919      	cbnz	r1, ba7a2 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   ba79a:	4420      	add	r0, r4
   ba79c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   ba7a0:	e7ec      	b.n	ba77c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba7a2:	3301      	adds	r3, #1
   ba7a4:	2b32      	cmp	r3, #50	; 0x32
   ba7a6:	d1f4      	bne.n	ba792 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   ba7a8:	4620      	mov	r0, r4
   ba7aa:	f7ff ffd6 	bl	ba75a <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba7ae:	4620      	mov	r0, r4
   ba7b0:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   ba7b4:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   ba7b8:	b92a      	cbnz	r2, ba7c6 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   ba7ba:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   ba7be:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   ba7c2:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba7c6:	3003      	adds	r0, #3
   ba7c8:	4298      	cmp	r0, r3
   ba7ca:	d1f3      	bne.n	ba7b4 <_ZN8RHRouter10addRouteToEhhh+0x54>
   ba7cc:	e7da      	b.n	ba784 <_ZN8RHRouter10addRouteToEhhh+0x24>

000ba7ce <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba7ce:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   ba7d2:	2200      	movs	r2, #0
   ba7d4:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   ba7d8:	3003      	adds	r0, #3
   ba7da:	4298      	cmp	r0, r3
   ba7dc:	d1fa      	bne.n	ba7d4 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   ba7de:	4770      	bx	lr

000ba7e0 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   ba7e0:	b510      	push	{r4, lr}
   ba7e2:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   ba7e4:	3004      	adds	r0, #4
   ba7e6:	f7ff fe53 	bl	ba490 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   ba7ea:	4b05      	ldr	r3, [pc, #20]	; (ba800 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   ba7ec:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   ba7ee:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   ba7f2:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   ba7f4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   ba7f8:	f7ff ffe9 	bl	ba7ce <_ZN8RHRouter17clearRoutingTableEv>
}
   ba7fc:	4620      	mov	r0, r4
   ba7fe:	bd10      	pop	{r4, pc}
   ba800:	000c1b64 	.word	0x000c1b64

000ba804 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   ba804:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   ba808:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba80a:	6840      	ldr	r0, [r0, #4]
{
   ba80c:	9101      	str	r1, [sp, #4]
   ba80e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba810:	6803      	ldr	r3, [r0, #0]
{
   ba812:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba816:	699b      	ldr	r3, [r3, #24]
{
   ba818:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   ba81c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   ba81e:	4798      	blx	r3
   ba820:	f106 0805 	add.w	r8, r6, #5
   ba824:	4580      	cmp	r8, r0
   ba826:	d81c      	bhi.n	ba862 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   ba828:	4d10      	ldr	r5, [pc, #64]	; (ba86c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   ba82a:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   ba82c:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   ba830:	2300      	movs	r3, #0
   ba832:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   ba834:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   ba838:	70eb      	strb	r3, [r5, #3]
   ba83a:	1c5a      	adds	r2, r3, #1
   ba83c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   ba840:	1d68      	adds	r0, r5, #5
   ba842:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   ba844:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   ba846:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   ba84a:	f005 fc53 	bl	c00f4 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   ba84e:	6823      	ldr	r3, [r4, #0]
   ba850:	685b      	ldr	r3, [r3, #4]
   ba852:	fa5f f288 	uxtb.w	r2, r8
   ba856:	4629      	mov	r1, r5
   ba858:	4620      	mov	r0, r4
}
   ba85a:	b002      	add	sp, #8
   ba85c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   ba860:	4718      	bx	r3
}
   ba862:	2001      	movs	r0, #1
   ba864:	b002      	add	sp, #8
   ba866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba86a:	bf00      	nop
   ba86c:	2003e4ee 	.word	0x2003e4ee

000ba870 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   ba870:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   ba872:	f89d 4010 	ldrb.w	r4, [sp, #16]
   ba876:	9401      	str	r4, [sp, #4]
   ba878:	7a04      	ldrb	r4, [r0, #8]
   ba87a:	9400      	str	r4, [sp, #0]
   ba87c:	f7ff ffc2 	bl	ba804 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   ba880:	b002      	add	sp, #8
   ba882:	bd10      	pop	{r4, pc}

000ba884 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   ba884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba888:	b087      	sub	sp, #28
   ba88a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   ba88c:	237f      	movs	r3, #127	; 0x7f
   ba88e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   ba892:	f10d 0317 	add.w	r3, sp, #23
   ba896:	9302      	str	r3, [sp, #8]
   ba898:	f8df 90d0 	ldr.w	r9, [pc, #208]	; ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   ba89c:	f10d 0316 	add.w	r3, sp, #22
   ba8a0:	9301      	str	r3, [sp, #4]
   ba8a2:	f10d 0315 	add.w	r3, sp, #21
   ba8a6:	9300      	str	r3, [sp, #0]
{  
   ba8a8:	4604      	mov	r4, r0
   ba8aa:	4688      	mov	r8, r1
   ba8ac:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   ba8ae:	ab05      	add	r3, sp, #20
   ba8b0:	f10d 0213 	add.w	r2, sp, #19
   ba8b4:	4649      	mov	r1, r9
   ba8b6:	3004      	adds	r0, #4
{  
   ba8b8:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   ba8bc:	f7ff fe97 	bl	ba5ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   ba8c0:	4605      	mov	r5, r0
   ba8c2:	b908      	cbnz	r0, ba8c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   ba8c4:	2500      	movs	r5, #0
   ba8c6:	e038      	b.n	ba93a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   ba8c8:	6823      	ldr	r3, [r4, #0]
   ba8ca:	f89d 2013 	ldrb.w	r2, [sp, #19]
   ba8ce:	681b      	ldr	r3, [r3, #0]
   ba8d0:	4649      	mov	r1, r9
   ba8d2:	4620      	mov	r0, r4
   ba8d4:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   ba8d6:	f899 3000 	ldrb.w	r3, [r9]
   ba8da:	7a22      	ldrb	r2, [r4, #8]
   ba8dc:	429a      	cmp	r2, r3
   ba8de:	d001      	beq.n	ba8e4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   ba8e0:	2bff      	cmp	r3, #255	; 0xff
   ba8e2:	d12e      	bne.n	ba942 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   ba8e4:	b117      	cbz	r7, ba8ec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   ba8e6:	4b21      	ldr	r3, [pc, #132]	; (ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   ba8e8:	785b      	ldrb	r3, [r3, #1]
   ba8ea:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   ba8ec:	f1bb 0f00 	cmp.w	fp, #0
   ba8f0:	d003      	beq.n	ba8fa <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   ba8f2:	4b1e      	ldr	r3, [pc, #120]	; (ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   ba8f4:	781b      	ldrb	r3, [r3, #0]
   ba8f6:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   ba8fa:	f1ba 0f00 	cmp.w	sl, #0
   ba8fe:	d003      	beq.n	ba908 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   ba900:	4b1a      	ldr	r3, [pc, #104]	; (ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   ba902:	78db      	ldrb	r3, [r3, #3]
   ba904:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   ba908:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ba90a:	b11b      	cbz	r3, ba914 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   ba90c:	4b17      	ldr	r3, [pc, #92]	; (ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   ba90e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba910:	791b      	ldrb	r3, [r3, #4]
   ba912:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   ba914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba916:	b11b      	cbz	r3, ba920 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   ba918:	4b14      	ldr	r3, [pc, #80]	; (ba96c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   ba91a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba91c:	789b      	ldrb	r3, [r3, #2]
   ba91e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   ba920:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   ba924:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   ba926:	4912      	ldr	r1, [pc, #72]	; (ba970 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   ba928:	3b05      	subs	r3, #5
   ba92a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   ba92c:	429a      	cmp	r2, r3
		*len = msgLen;
   ba92e:	bf88      	it	hi
   ba930:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   ba932:	7832      	ldrb	r2, [r6, #0]
   ba934:	4640      	mov	r0, r8
   ba936:	f005 fbdd 	bl	c00f4 <memcpy>
}
   ba93a:	4628      	mov	r0, r5
   ba93c:	b007      	add	sp, #28
   ba93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   ba942:	f899 3002 	ldrb.w	r3, [r9, #2]
   ba946:	1c5a      	adds	r2, r3, #1
   ba948:	f889 2002 	strb.w	r2, [r9, #2]
   ba94c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   ba950:	429a      	cmp	r2, r3
   ba952:	d9b7      	bls.n	ba8c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   ba954:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   ba958:	2b00      	cmp	r3, #0
   ba95a:	d0b3      	beq.n	ba8c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   ba95c:	6823      	ldr	r3, [r4, #0]
   ba95e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   ba962:	685b      	ldr	r3, [r3, #4]
   ba964:	4649      	mov	r1, r9
   ba966:	4620      	mov	r0, r4
   ba968:	4798      	blx	r3
   ba96a:	e7ab      	b.n	ba8c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   ba96c:	2003e4ee 	.word	0x2003e4ee
   ba970:	2003e4f3 	.word	0x2003e4f3

000ba974 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   ba974:	b510      	push	{r4, lr}
   ba976:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   ba978:	6a00      	ldr	r0, [r0, #32]
   ba97a:	6803      	ldr	r3, [r0, #0]
   ba97c:	68db      	ldr	r3, [r3, #12]
   ba97e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   ba980:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   ba984:	28ff      	cmp	r0, #255	; 0xff
   ba986:	d002      	beq.n	ba98e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   ba988:	2101      	movs	r1, #1
   ba98a:	f004 fd95 	bl	bf4b8 <pinMode>

    deselectSlave();
   ba98e:	6823      	ldr	r3, [r4, #0]
   ba990:	4620      	mov	r0, r4
   ba992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba994:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   ba996:	2064      	movs	r0, #100	; 0x64
   ba998:	f001 fcf2 	bl	bc380 <delay>
#endif
    
    return true;
}
   ba99c:	2001      	movs	r0, #1
   ba99e:	bd10      	pop	{r4, pc}

000ba9a0 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   ba9a0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   ba9a4:	2100      	movs	r1, #0
   ba9a6:	f004 bd98 	b.w	bf4da <digitalWrite>

000ba9aa <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   ba9aa:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   ba9ae:	2101      	movs	r1, #1
   ba9b0:	f004 bd93 	b.w	bf4da <digitalWrite>

000ba9b4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   ba9b4:	b570      	push	{r4, r5, r6, lr}
   ba9b6:	4604      	mov	r4, r0
   ba9b8:	460d      	mov	r5, r1
   ba9ba:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   ba9bc:	f7ff fa7e 	bl	b9ebc <_ZN15RHGenericDriverC1Ev>
   ba9c0:	4b03      	ldr	r3, [pc, #12]	; (ba9d0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   ba9c2:	6023      	str	r3, [r4, #0]
   ba9c4:	6226      	str	r6, [r4, #32]
   ba9c6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   ba9ca:	4620      	mov	r0, r4
   ba9cc:	bd70      	pop	{r4, r5, r6, pc}
   ba9ce:	bf00      	nop
   ba9d0:	000c1b74 	.word	0x000c1b74

000ba9d4 <_ZN11RHSPIDriver7spiReadEh>:
{
   ba9d4:	b538      	push	{r3, r4, r5, lr}
   ba9d6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   ba9d8:	6a00      	ldr	r0, [r0, #32]
   ba9da:	6803      	ldr	r3, [r0, #0]
   ba9dc:	6a1b      	ldr	r3, [r3, #32]
{
   ba9de:	460d      	mov	r5, r1
    _spi.beginTransaction();
   ba9e0:	4798      	blx	r3
    selectSlave();
   ba9e2:	6823      	ldr	r3, [r4, #0]
   ba9e4:	4620      	mov	r0, r4
   ba9e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   ba9e8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   ba9ea:	6a20      	ldr	r0, [r4, #32]
   ba9ec:	6803      	ldr	r3, [r0, #0]
   ba9ee:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   ba9f2:	681b      	ldr	r3, [r3, #0]
   ba9f4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   ba9f6:	6a20      	ldr	r0, [r4, #32]
   ba9f8:	6803      	ldr	r3, [r0, #0]
   ba9fa:	2100      	movs	r1, #0
   ba9fc:	681b      	ldr	r3, [r3, #0]
   ba9fe:	4798      	blx	r3
    deselectSlave();
   baa00:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   baa02:	4605      	mov	r5, r0
    deselectSlave();
   baa04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baa06:	4620      	mov	r0, r4
   baa08:	4798      	blx	r3
    _spi.endTransaction();
   baa0a:	6a20      	ldr	r0, [r4, #32]
   baa0c:	6803      	ldr	r3, [r0, #0]
   baa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baa10:	4798      	blx	r3
}
   baa12:	4628      	mov	r0, r5
   baa14:	bd38      	pop	{r3, r4, r5, pc}

000baa16 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   baa16:	b570      	push	{r4, r5, r6, lr}
   baa18:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baa1a:	6a00      	ldr	r0, [r0, #32]
   baa1c:	6803      	ldr	r3, [r0, #0]
   baa1e:	6a1b      	ldr	r3, [r3, #32]
{
   baa20:	4616      	mov	r6, r2
   baa22:	460d      	mov	r5, r1
    _spi.beginTransaction();
   baa24:	4798      	blx	r3
    selectSlave();
   baa26:	6823      	ldr	r3, [r4, #0]
   baa28:	4620      	mov	r0, r4
   baa2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baa2c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   baa2e:	6a20      	ldr	r0, [r4, #32]
   baa30:	6803      	ldr	r3, [r0, #0]
   baa32:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   baa36:	681b      	ldr	r3, [r3, #0]
   baa38:	4798      	blx	r3
   baa3a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   baa3c:	6a20      	ldr	r0, [r4, #32]
   baa3e:	6803      	ldr	r3, [r0, #0]
   baa40:	4631      	mov	r1, r6
   baa42:	681b      	ldr	r3, [r3, #0]
   baa44:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   baa46:	2001      	movs	r0, #1
   baa48:	f001 f876 	bl	bbb38 <HAL_Delay_Microseconds>
    deselectSlave();
   baa4c:	6823      	ldr	r3, [r4, #0]
   baa4e:	4620      	mov	r0, r4
   baa50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baa52:	4798      	blx	r3
    _spi.endTransaction();
   baa54:	6a20      	ldr	r0, [r4, #32]
   baa56:	6803      	ldr	r3, [r0, #0]
   baa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baa5a:	4798      	blx	r3
}
   baa5c:	4628      	mov	r0, r5
   baa5e:	bd70      	pop	{r4, r5, r6, pc}

000baa60 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   baa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa62:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baa64:	6a00      	ldr	r0, [r0, #32]
{
   baa66:	461e      	mov	r6, r3
    _spi.beginTransaction();
   baa68:	6803      	ldr	r3, [r0, #0]
   baa6a:	6a1b      	ldr	r3, [r3, #32]
{
   baa6c:	460f      	mov	r7, r1
   baa6e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   baa70:	4798      	blx	r3
    selectSlave();
   baa72:	6823      	ldr	r3, [r4, #0]
   baa74:	4620      	mov	r0, r4
   baa76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baa78:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   baa7a:	6a20      	ldr	r0, [r4, #32]
   baa7c:	6803      	ldr	r3, [r0, #0]
   baa7e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   baa82:	681b      	ldr	r3, [r3, #0]
   baa84:	4798      	blx	r3
   baa86:	442e      	add	r6, r5
   baa88:	4607      	mov	r7, r0
    while (len--)
   baa8a:	42b5      	cmp	r5, r6
   baa8c:	d007      	beq.n	baa9e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   baa8e:	6a20      	ldr	r0, [r4, #32]
   baa90:	6803      	ldr	r3, [r0, #0]
   baa92:	2100      	movs	r1, #0
   baa94:	681b      	ldr	r3, [r3, #0]
   baa96:	4798      	blx	r3
   baa98:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   baa9c:	e7f5      	b.n	baa8a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   baa9e:	6823      	ldr	r3, [r4, #0]
   baaa0:	4620      	mov	r0, r4
   baaa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baaa4:	4798      	blx	r3
    _spi.endTransaction();
   baaa6:	6a20      	ldr	r0, [r4, #32]
   baaa8:	6803      	ldr	r3, [r0, #0]
   baaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baaac:	4798      	blx	r3
}
   baaae:	4638      	mov	r0, r7
   baab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baab2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   baab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baab4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   baab6:	6a00      	ldr	r0, [r0, #32]
{
   baab8:	461e      	mov	r6, r3
    _spi.beginTransaction();
   baaba:	6803      	ldr	r3, [r0, #0]
   baabc:	6a1b      	ldr	r3, [r3, #32]
{
   baabe:	460f      	mov	r7, r1
   baac0:	4615      	mov	r5, r2
    _spi.beginTransaction();
   baac2:	4798      	blx	r3
    selectSlave();
   baac4:	6823      	ldr	r3, [r4, #0]
   baac6:	4620      	mov	r0, r4
   baac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   baaca:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   baacc:	6a20      	ldr	r0, [r4, #32]
   baace:	6803      	ldr	r3, [r0, #0]
   baad0:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   baad4:	681b      	ldr	r3, [r3, #0]
   baad6:	4798      	blx	r3
   baad8:	442e      	add	r6, r5
   baada:	4607      	mov	r7, r0
    while (len--)
   baadc:	42b5      	cmp	r5, r6
   baade:	d006      	beq.n	baaee <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   baae0:	6a20      	ldr	r0, [r4, #32]
   baae2:	f815 1b01 	ldrb.w	r1, [r5], #1
   baae6:	6803      	ldr	r3, [r0, #0]
   baae8:	681b      	ldr	r3, [r3, #0]
   baaea:	4798      	blx	r3
    while (len--)
   baaec:	e7f6      	b.n	baadc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   baaee:	6823      	ldr	r3, [r4, #0]
   baaf0:	4620      	mov	r0, r4
   baaf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   baaf4:	4798      	blx	r3
    _spi.endTransaction();
   baaf6:	6a20      	ldr	r0, [r4, #32]
   baaf8:	6803      	ldr	r3, [r0, #0]
   baafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baafc:	4798      	blx	r3
}
   baafe:	4638      	mov	r0, r7
   bab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bab02 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bab02:	6a00      	ldr	r0, [r0, #32]
   bab04:	6803      	ldr	r3, [r0, #0]
   bab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bab08:	4718      	bx	r3

000bab0a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bab0a:	2001      	movs	r0, #1
   bab0c:	4770      	bx	lr

000bab0e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bab0e:	20fb      	movs	r0, #251	; 0xfb
   bab10:	4770      	bx	lr

000bab12 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bab12:	4770      	bx	lr

000bab14 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bab14:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bab16:	7903      	ldrb	r3, [r0, #4]
   bab18:	2b05      	cmp	r3, #5
{
   bab1a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bab1c:	d010      	beq.n	bab40 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bab1e:	6803      	ldr	r3, [r0, #0]
   bab20:	2105      	movs	r1, #5
   bab22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bab26:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bab28:	2207      	movs	r2, #7
   bab2a:	2101      	movs	r1, #1
   bab2c:	4620      	mov	r0, r4
   bab2e:	f7ff ff72 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bab32:	2280      	movs	r2, #128	; 0x80
   bab34:	2140      	movs	r1, #64	; 0x40
   bab36:	4620      	mov	r0, r4
   bab38:	f7ff ff6d 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bab3c:	2305      	movs	r3, #5
   bab3e:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bab40:	7923      	ldrb	r3, [r4, #4]
   bab42:	2b05      	cmp	r3, #5
   bab44:	d0fc      	beq.n	bab40 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bab46:	7e20      	ldrb	r0, [r4, #24]
}
   bab48:	bd10      	pop	{r4, pc}

000bab4a <_ZN7RH_RF95D0Ev>:
   bab4a:	b510      	push	{r4, lr}
   bab4c:	f44f 7198 	mov.w	r1, #304	; 0x130
   bab50:	4604      	mov	r4, r0
   bab52:	f7f9 faa4 	bl	b409e <_ZdlPvj>
   bab56:	4620      	mov	r0, r4
   bab58:	bd10      	pop	{r4, pc}

000bab5a <_ZN7RH_RF955sleepEv>:
{
   bab5a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bab5c:	7903      	ldrb	r3, [r0, #4]
   bab5e:	2b01      	cmp	r3, #1
{
   bab60:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bab62:	d00b      	beq.n	bab7c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bab64:	6803      	ldr	r3, [r0, #0]
   bab66:	2101      	movs	r1, #1
   bab68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bab6c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bab6e:	2200      	movs	r2, #0
   bab70:	2101      	movs	r1, #1
   bab72:	4620      	mov	r0, r4
   bab74:	f7ff ff4f 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bab78:	2301      	movs	r3, #1
   bab7a:	7123      	strb	r3, [r4, #4]
}
   bab7c:	2001      	movs	r0, #1
   bab7e:	bd10      	pop	{r4, pc}

000bab80 <_ZN7RH_RF954recvEPhS0_>:
{
   bab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bab82:	6803      	ldr	r3, [r0, #0]
   bab84:	68db      	ldr	r3, [r3, #12]
{
   bab86:	4604      	mov	r4, r0
   bab88:	460f      	mov	r7, r1
   bab8a:	4615      	mov	r5, r2
    if (!available())
   bab8c:	4798      	blx	r3
   bab8e:	4606      	mov	r6, r0
   bab90:	b1b0      	cbz	r0, babc0 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bab92:	b187      	cbz	r7, babb6 <_ZN7RH_RF954recvEPhS0_+0x36>
   bab94:	b17d      	cbz	r5, babb6 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bab96:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bab9a:	782a      	ldrb	r2, [r5, #0]
   bab9c:	3b03      	subs	r3, #3
   bab9e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   baba0:	bfde      	ittt	le
   baba2:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   baba6:	3b04      	suble	r3, #4
   baba8:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   babaa:	782a      	ldrb	r2, [r5, #0]
   babac:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   babb0:	4638      	mov	r0, r7
   babb2:	f005 fa9f 	bl	c00f4 <memcpy>
    _rxBufValid = false;
   babb6:	2300      	movs	r3, #0
   babb8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   babbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   babc0:	4630      	mov	r0, r6
   babc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000babc4 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   babc4:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   babc6:	b538      	push	{r3, r4, r5, lr}
   babc8:	4605      	mov	r5, r0
   babca:	460c      	mov	r4, r1
	if (power > 20)
   babcc:	dc14      	bgt.n	babf8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   babce:	2901      	cmp	r1, #1
   babd0:	dd14      	ble.n	babfc <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   babd2:	2911      	cmp	r1, #17
   babd4:	dd13      	ble.n	babfe <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   babd6:	2207      	movs	r2, #7
   babd8:	214d      	movs	r1, #77	; 0x4d
   babda:	4628      	mov	r0, r5
   babdc:	f7ff ff1b 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   babe0:	3c03      	subs	r4, #3
   babe2:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   babe4:	1ea2      	subs	r2, r4, #2
   babe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   babea:	4628      	mov	r0, r5
   babec:	b2d2      	uxtb	r2, r2
}
   babee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   babf2:	2109      	movs	r1, #9
   babf4:	f7ff bf0f 	b.w	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   babf8:	2414      	movs	r4, #20
   babfa:	e7ec      	b.n	babd6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   babfc:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   babfe:	2204      	movs	r2, #4
   bac00:	214d      	movs	r1, #77	; 0x4d
   bac02:	4628      	mov	r0, r5
   bac04:	f7ff ff07 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
   bac08:	e7ec      	b.n	babe4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bac0c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bac0c:	b538      	push	{r3, r4, r5, lr}
   bac0e:	4604      	mov	r4, r0
   bac10:	4615      	mov	r5, r2
    _rxBufValid(0)
   bac12:	461a      	mov	r2, r3
   bac14:	f7ff fece 	bl	ba9b4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bac18:	4b09      	ldr	r3, [pc, #36]	; (bac40 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bac1a:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bac1c:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bac1e:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bac20:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bac24:	2201      	movs	r2, #1
    _rxBufValid(0)
   bac26:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bac2a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bac2e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bac32:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bac36:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bac3a:	4620      	mov	r0, r4
   bac3c:	bd38      	pop	{r3, r4, r5, pc}
   bac3e:	bf00      	nop
   bac40:	000c1c0c 	.word	0x000c1c0c

000bac44 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bac44:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bac48:	2b03      	cmp	r3, #3
   bac4a:	d91b      	bls.n	bac84 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bac4c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bac50:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bac52:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bac56:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bac58:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bac5c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bac5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bac62:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bac64:	7983      	ldrb	r3, [r0, #6]
   bac66:	b933      	cbnz	r3, bac76 <_ZN7RH_RF9513validateRxBufEv+0x32>
   bac68:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bac6a:	7942      	ldrb	r2, [r0, #5]
   bac6c:	429a      	cmp	r2, r3
   bac6e:	d002      	beq.n	bac76 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bac70:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bac72:	2bff      	cmp	r3, #255	; 0xff
   bac74:	d106      	bne.n	bac84 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bac76:	8a83      	ldrh	r3, [r0, #20]
   bac78:	3301      	adds	r3, #1
   bac7a:	b29b      	uxth	r3, r3
   bac7c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bac7e:	2301      	movs	r3, #1
   bac80:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bac84:	4770      	bx	lr
	...

000bac88 <_ZN7RH_RF9512setFrequencyEf>:
{
   bac88:	b538      	push	{r3, r4, r5, lr}
   bac8a:	4604      	mov	r4, r0
   bac8c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bac90:	ee10 0a10 	vmov	r0, s0
{
   bac94:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bac98:	f004 fe8a 	bl	bf9b0 <__aeabi_f2d>
   bac9c:	a317      	add	r3, pc, #92	; (adr r3, bacfc <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baca2:	f004 fedd 	bl	bfa60 <__aeabi_dmul>
   baca6:	a317      	add	r3, pc, #92	; (adr r3, bad04 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   baca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bacac:	f005 f802 	bl	bfcb4 <__aeabi_ddiv>
   bacb0:	f005 f9ae 	bl	c0010 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bacb4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bacb6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bacb8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bacbc:	4620      	mov	r0, r4
   bacbe:	f7ff feaa 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bacc2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bacc6:	2107      	movs	r1, #7
   bacc8:	4620      	mov	r0, r4
   bacca:	f7ff fea4 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bacce:	b2ea      	uxtb	r2, r5
   bacd0:	2108      	movs	r1, #8
   bacd2:	4620      	mov	r0, r4
   bacd4:	f7ff fe9f 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bacd8:	eddf 7a07 	vldr	s15, [pc, #28]	; bacf8 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bacdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bace0:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bace4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bace8:	bfac      	ite	ge
   bacea:	2301      	movge	r3, #1
   bacec:	2300      	movlt	r3, #0
}
   bacee:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bacf0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bacf4:	bd38      	pop	{r3, r4, r5, pc}
   bacf6:	bf00      	nop
   bacf8:	4442c000 	.word	0x4442c000
   bacfc:	00000000 	.word	0x00000000
   bad00:	412e8480 	.word	0x412e8480
   bad04:	00000000 	.word	0x00000000
   bad08:	404e8480 	.word	0x404e8480

000bad0c <_ZN7RH_RF9511setModeIdleEv>:
{
   bad0c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bad0e:	7903      	ldrb	r3, [r0, #4]
   bad10:	2b02      	cmp	r3, #2
{
   bad12:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bad14:	d00b      	beq.n	bad2e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bad16:	6803      	ldr	r3, [r0, #0]
   bad18:	2102      	movs	r1, #2
   bad1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bad1e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bad20:	2201      	movs	r2, #1
   bad22:	4611      	mov	r1, r2
   bad24:	4620      	mov	r0, r4
   bad26:	f7ff fe76 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bad2a:	2302      	movs	r3, #2
   bad2c:	7123      	strb	r3, [r4, #4]
}
   bad2e:	bd10      	pop	{r4, pc}

000bad30 <_ZN7RH_RF9515handleInterruptEv>:
{
   bad30:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bad32:	2112      	movs	r1, #18
{
   bad34:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bad36:	f7ff fe4d 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bad3a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bad3c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bad3e:	4620      	mov	r0, r4
   bad40:	f7ff fe48 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bad44:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bad46:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bad48:	2112      	movs	r1, #18
   bad4a:	4620      	mov	r0, r4
   bad4c:	f7ff fe63 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bad50:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bad52:	2b04      	cmp	r3, #4
   bad54:	d107      	bne.n	bad66 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bad56:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bad5a:	d117      	bne.n	bad8c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bad5c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bad60:	b10b      	cbz	r3, bad66 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bad62:	0670      	lsls	r0, r6, #25
   bad64:	d512      	bpl.n	bad8c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bad66:	7923      	ldrb	r3, [r4, #4]
   bad68:	2b04      	cmp	r3, #4
   bad6a:	d101      	bne.n	bad70 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bad6c:	0669      	lsls	r1, r5, #25
   bad6e:	d422      	bmi.n	badb6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bad70:	7923      	ldrb	r3, [r4, #4]
   bad72:	2b03      	cmp	r3, #3
   bad74:	d101      	bne.n	bad7a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bad76:	072a      	lsls	r2, r5, #28
   bad78:	d468      	bmi.n	bae4c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bad7a:	7923      	ldrb	r3, [r4, #4]
   bad7c:	2b05      	cmp	r3, #5
   bad7e:	d10e      	bne.n	bad9e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bad80:	076b      	lsls	r3, r5, #29
   bad82:	d50c      	bpl.n	bad9e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bad84:	f005 0501 	and.w	r5, r5, #1
   bad88:	7625      	strb	r5, [r4, #24]
   bad8a:	e063      	b.n	bae54 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bad8c:	8a63      	ldrh	r3, [r4, #18]
   bad8e:	3301      	adds	r3, #1
   bad90:	b29b      	uxth	r3, r3
   bad92:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bad94:	2300      	movs	r3, #0
   bad96:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bad9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bad9e:	22ff      	movs	r2, #255	; 0xff
   bada0:	2112      	movs	r1, #18
   bada2:	4620      	mov	r0, r4
   bada4:	f7ff fe37 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bada8:	4620      	mov	r0, r4
   badaa:	22ff      	movs	r2, #255	; 0xff
}
   badac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   badb0:	2112      	movs	r1, #18
   badb2:	f7ff be30 	b.w	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   badb6:	2113      	movs	r1, #19
   badb8:	4620      	mov	r0, r4
   badba:	f7ff fe0b 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   badbe:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   badc0:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   badc2:	4620      	mov	r0, r4
   badc4:	f7ff fe06 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
   badc8:	210d      	movs	r1, #13
   badca:	4602      	mov	r2, r0
   badcc:	4620      	mov	r0, r4
   badce:	f7ff fe22 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   badd2:	f104 0229 	add.w	r2, r4, #41	; 0x29
   badd6:	462b      	mov	r3, r5
   badd8:	2100      	movs	r1, #0
   badda:	4620      	mov	r0, r4
   baddc:	f7ff fe40 	bl	baa60 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bade0:	2119      	movs	r1, #25
	_bufLen = len;
   bade2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bade6:	4620      	mov	r0, r4
   bade8:	f7ff fdf4 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
   badec:	b240      	sxtb	r0, r0
   badee:	2800      	cmp	r0, #0
   badf0:	bfb8      	it	lt
   badf2:	3003      	addlt	r0, #3
   badf4:	1080      	asrs	r0, r0, #2
   badf6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   badfa:	211a      	movs	r1, #26
   badfc:	4620      	mov	r0, r4
   badfe:	f7ff fde9 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bae02:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bae06:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bae08:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bae0a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bae0c:	bfa9      	itett	ge
   bae0e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bae10:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bae12:	b21b      	sxthge	r3, r3
   bae14:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bae16:	bfb2      	itee	lt
   bae18:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bae1a:	220f      	movge	r2, #15
   bae1c:	fb93 f3f2 	sdivge	r3, r3, r2
   bae20:	b21b      	sxth	r3, r3
   bae22:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bae24:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bae28:	b16b      	cbz	r3, bae46 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bae2a:	8a23      	ldrh	r3, [r4, #16]
   bae2c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bae2e:	b21b      	sxth	r3, r3
   bae30:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bae32:	4620      	mov	r0, r4
   bae34:	f7ff ff06 	bl	bac44 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bae38:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bae3c:	2b00      	cmp	r3, #0
   bae3e:	d0ae      	beq.n	bad9e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bae40:	f7ff ff64 	bl	bad0c <_ZN7RH_RF9511setModeIdleEv>
   bae44:	e7ab      	b.n	bad9e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bae46:	8a23      	ldrh	r3, [r4, #16]
   bae48:	3ba4      	subs	r3, #164	; 0xa4
   bae4a:	e7f0      	b.n	bae2e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bae4c:	8ae3      	ldrh	r3, [r4, #22]
   bae4e:	3301      	adds	r3, #1
   bae50:	b29b      	uxth	r3, r3
   bae52:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bae54:	4620      	mov	r0, r4
   bae56:	e7f3      	b.n	bae40 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bae58 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bae58:	4b02      	ldr	r3, [pc, #8]	; (bae64 <_ZN7RH_RF954isr0Ev+0xc>)
   bae5a:	6818      	ldr	r0, [r3, #0]
   bae5c:	b108      	cbz	r0, bae62 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bae5e:	f7ff bf67 	b.w	bad30 <_ZN7RH_RF9515handleInterruptEv>
}
   bae62:	4770      	bx	lr
   bae64:	2003e570 	.word	0x2003e570

000bae68 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bae68:	4b02      	ldr	r3, [pc, #8]	; (bae74 <_ZN7RH_RF954isr1Ev+0xc>)
   bae6a:	6858      	ldr	r0, [r3, #4]
   bae6c:	b108      	cbz	r0, bae72 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bae6e:	f7ff bf5f 	b.w	bad30 <_ZN7RH_RF9515handleInterruptEv>
}
   bae72:	4770      	bx	lr
   bae74:	2003e570 	.word	0x2003e570

000bae78 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bae78:	4b02      	ldr	r3, [pc, #8]	; (bae84 <_ZN7RH_RF954isr2Ev+0xc>)
   bae7a:	6898      	ldr	r0, [r3, #8]
   bae7c:	b108      	cbz	r0, bae82 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bae7e:	f7ff bf57 	b.w	bad30 <_ZN7RH_RF9515handleInterruptEv>
}
   bae82:	4770      	bx	lr
   bae84:	2003e570 	.word	0x2003e570

000bae88 <_ZN7RH_RF959setModeRxEv>:
{
   bae88:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bae8a:	7903      	ldrb	r3, [r0, #4]
   bae8c:	2b04      	cmp	r3, #4
{
   bae8e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bae90:	d010      	beq.n	baeb4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bae92:	6803      	ldr	r3, [r0, #0]
   bae94:	2104      	movs	r1, #4
   bae96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bae9a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bae9c:	2205      	movs	r2, #5
   bae9e:	2101      	movs	r1, #1
   baea0:	4620      	mov	r0, r4
   baea2:	f7ff fdb8 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   baea6:	2200      	movs	r2, #0
   baea8:	2140      	movs	r1, #64	; 0x40
   baeaa:	4620      	mov	r0, r4
   baeac:	f7ff fdb3 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   baeb0:	2304      	movs	r3, #4
   baeb2:	7123      	strb	r3, [r4, #4]
}
   baeb4:	bd10      	pop	{r4, pc}

000baeb6 <_ZN7RH_RF959availableEv>:
{
   baeb6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   baeb8:	7903      	ldrb	r3, [r0, #4]
   baeba:	2b03      	cmp	r3, #3
{
   baebc:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   baebe:	d005      	beq.n	baecc <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   baec0:	f7ff ffe2 	bl	bae88 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   baec4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   baec8:	b2c0      	uxtb	r0, r0
}
   baeca:	bd10      	pop	{r4, pc}
	return false;
   baecc:	2000      	movs	r0, #0
   baece:	e7fc      	b.n	baeca <_ZN7RH_RF959availableEv+0x14>

000baed0 <_ZN7RH_RF959setModeTxEv>:
{
   baed0:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   baed2:	7903      	ldrb	r3, [r0, #4]
   baed4:	2b03      	cmp	r3, #3
{
   baed6:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   baed8:	d010      	beq.n	baefc <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   baeda:	6803      	ldr	r3, [r0, #0]
   baedc:	2103      	movs	r1, #3
   baede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   baee2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   baee4:	2203      	movs	r2, #3
   baee6:	2101      	movs	r1, #1
   baee8:	4620      	mov	r0, r4
   baeea:	f7ff fd94 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   baeee:	2240      	movs	r2, #64	; 0x40
   baef0:	4611      	mov	r1, r2
   baef2:	4620      	mov	r0, r4
   baef4:	f7ff fd8f 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   baef8:	2303      	movs	r3, #3
   baefa:	7123      	strb	r3, [r4, #4]
}
   baefc:	bd10      	pop	{r4, pc}

000baefe <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   baefe:	2afb      	cmp	r2, #251	; 0xfb
{
   baf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf02:	4604      	mov	r4, r0
   baf04:	460f      	mov	r7, r1
   baf06:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   baf08:	d902      	bls.n	baf10 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   baf0a:	2600      	movs	r6, #0
}
   baf0c:	4630      	mov	r0, r6
   baf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   baf10:	6803      	ldr	r3, [r0, #0]
   baf12:	6a1b      	ldr	r3, [r3, #32]
   baf14:	4798      	blx	r3
    setModeIdle();
   baf16:	4620      	mov	r0, r4
   baf18:	f7ff fef8 	bl	bad0c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   baf1c:	6823      	ldr	r3, [r4, #0]
   baf1e:	4620      	mov	r0, r4
   baf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baf22:	4798      	blx	r3
   baf24:	4606      	mov	r6, r0
   baf26:	2800      	cmp	r0, #0
   baf28:	d0ef      	beq.n	baf0a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   baf2a:	2200      	movs	r2, #0
   baf2c:	210d      	movs	r1, #13
   baf2e:	4620      	mov	r0, r4
   baf30:	f7ff fd71 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   baf34:	7ae2      	ldrb	r2, [r4, #11]
   baf36:	2100      	movs	r1, #0
   baf38:	4620      	mov	r0, r4
   baf3a:	f7ff fd6c 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   baf3e:	7b22      	ldrb	r2, [r4, #12]
   baf40:	2100      	movs	r1, #0
   baf42:	4620      	mov	r0, r4
   baf44:	f7ff fd67 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   baf48:	7b62      	ldrb	r2, [r4, #13]
   baf4a:	2100      	movs	r1, #0
   baf4c:	4620      	mov	r0, r4
   baf4e:	f7ff fd62 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   baf52:	7ba2      	ldrb	r2, [r4, #14]
   baf54:	2100      	movs	r1, #0
   baf56:	4620      	mov	r0, r4
   baf58:	f7ff fd5d 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   baf5c:	462b      	mov	r3, r5
   baf5e:	463a      	mov	r2, r7
   baf60:	2100      	movs	r1, #0
   baf62:	4620      	mov	r0, r4
   baf64:	f7ff fda5 	bl	baab2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   baf68:	1d2a      	adds	r2, r5, #4
   baf6a:	b2d2      	uxtb	r2, r2
   baf6c:	2122      	movs	r1, #34	; 0x22
   baf6e:	4620      	mov	r0, r4
   baf70:	f7ff fd51 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   baf74:	4620      	mov	r0, r4
   baf76:	f7ff ffab 	bl	baed0 <_ZN7RH_RF959setModeTxEv>
    return true;
   baf7a:	e7c7      	b.n	baf0c <_ZN7RH_RF954sendEPKhh+0xe>

000baf7c <_ZN7RH_RF9510setTxPowerEab>:
{
   baf7c:	b510      	push	{r4, lr}
   baf7e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   baf80:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   baf84:	b172      	cbz	r2, bafa4 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   baf86:	f381 0204 	usat	r2, #4, r1
   baf8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   baf8e:	b2d2      	uxtb	r2, r2
   baf90:	2109      	movs	r1, #9
   baf92:	f7ff fd40 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   baf96:	4620      	mov	r0, r4
   baf98:	2204      	movs	r2, #4
}
   baf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   baf9e:	214d      	movs	r1, #77	; 0x4d
   bafa0:	f7ff bd39 	b.w	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
}
   bafa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bafa8:	f7ff be0c 	b.w	babc4 <_ZN7RH_RF9510setTxPowerEab.part.0>

000bafac <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bafac:	b538      	push	{r3, r4, r5, lr}
   bafae:	460c      	mov	r4, r1
   bafb0:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bafb2:	780a      	ldrb	r2, [r1, #0]
   bafb4:	211d      	movs	r1, #29
   bafb6:	f7ff fd2e 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bafba:	7862      	ldrb	r2, [r4, #1]
   bafbc:	211e      	movs	r1, #30
   bafbe:	4628      	mov	r0, r5
   bafc0:	f7ff fd29 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bafc4:	78a2      	ldrb	r2, [r4, #2]
   bafc6:	4628      	mov	r0, r5
   bafc8:	2126      	movs	r1, #38	; 0x26
}
   bafca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bafce:	f7ff bd22 	b.w	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bafd4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bafd4:	2905      	cmp	r1, #5
{
   bafd6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bafd8:	d80f      	bhi.n	baffa <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bafda:	4b09      	ldr	r3, [pc, #36]	; (bb000 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bafdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bafe0:	185c      	adds	r4, r3, r1
   bafe2:	5a5a      	ldrh	r2, [r3, r1]
   bafe4:	78a3      	ldrb	r3, [r4, #2]
   bafe6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bafea:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bafec:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   baff0:	f7ff ffdc 	bl	bafac <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   baff4:	2001      	movs	r0, #1
}
   baff6:	b002      	add	sp, #8
   baff8:	bd10      	pop	{r4, pc}
        return false;
   baffa:	2000      	movs	r0, #0
   baffc:	e7fb      	b.n	baff6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   baffe:	bf00      	nop
   bb000:	000c1bf4 	.word	0x000c1bf4

000bb004 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bb004:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb006:	0a0a      	lsrs	r2, r1, #8
{
   bb008:	4605      	mov	r5, r0
   bb00a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bb00c:	2120      	movs	r1, #32
   bb00e:	f7ff fd02 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb012:	b2e2      	uxtb	r2, r4
   bb014:	4628      	mov	r0, r5
   bb016:	2121      	movs	r1, #33	; 0x21
}
   bb018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bb01c:	f7ff bcfb 	b.w	baa16 <_ZN11RHSPIDriver8spiWriteEhh>

000bb020 <_ZN7RH_RF954initEv>:
{
   bb020:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb022:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bb024:	f7ff fca6 	bl	ba974 <_ZN11RHSPIDriver4initEv>
   bb028:	4606      	mov	r6, r0
   bb02a:	b918      	cbnz	r0, bb034 <_ZN7RH_RF954initEv+0x14>
	return false;
   bb02c:	2600      	movs	r6, #0
}
   bb02e:	4630      	mov	r0, r6
   bb030:	b002      	add	sp, #8
   bb032:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bb034:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bb038:	2dff      	cmp	r5, #255	; 0xff
   bb03a:	d054      	beq.n	bb0e6 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bb03c:	4629      	mov	r1, r5
   bb03e:	4620      	mov	r0, r4
   bb040:	f7ff fd5f 	bl	bab02 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bb044:	2280      	movs	r2, #128	; 0x80
   bb046:	2101      	movs	r1, #1
   bb048:	4620      	mov	r0, r4
   bb04a:	f7ff fce4 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bb04e:	200a      	movs	r0, #10
   bb050:	f001 f996 	bl	bc380 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bb054:	2101      	movs	r1, #1
   bb056:	4620      	mov	r0, r4
   bb058:	f7ff fcbc 	bl	ba9d4 <_ZN11RHSPIDriver7spiReadEh>
   bb05c:	2880      	cmp	r0, #128	; 0x80
   bb05e:	d1e5      	bne.n	bb02c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bb060:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bb064:	28ff      	cmp	r0, #255	; 0xff
   bb066:	d01c      	beq.n	bb0a2 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bb068:	2100      	movs	r1, #0
   bb06a:	f004 fa25 	bl	bf4b8 <pinMode>
	if (_myInterruptIndex == 0xff)
   bb06e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bb072:	2bff      	cmp	r3, #255	; 0xff
   bb074:	d107      	bne.n	bb086 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bb076:	4a26      	ldr	r2, [pc, #152]	; (bb110 <_ZN7RH_RF954initEv+0xf0>)
   bb078:	7813      	ldrb	r3, [r2, #0]
   bb07a:	2b03      	cmp	r3, #3
   bb07c:	d8d6      	bhi.n	bb02c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bb07e:	1c59      	adds	r1, r3, #1
   bb080:	7011      	strb	r1, [r2, #0]
   bb082:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bb086:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bb08a:	4b22      	ldr	r3, [pc, #136]	; (bb114 <_ZN7RH_RF954initEv+0xf4>)
   bb08c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bb090:	bb62      	cbnz	r2, bb0ec <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bb092:	4921      	ldr	r1, [pc, #132]	; (bb118 <_ZN7RH_RF954initEv+0xf8>)
   bb094:	9200      	str	r2, [sp, #0]
   bb096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb09a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb09c:	b2a8      	uxth	r0, r5
   bb09e:	f001 fee5 	bl	bce6c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bb0a2:	2200      	movs	r2, #0
   bb0a4:	210e      	movs	r1, #14
   bb0a6:	4620      	mov	r0, r4
   bb0a8:	f7ff fcb5 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bb0ac:	2200      	movs	r2, #0
   bb0ae:	210f      	movs	r1, #15
   bb0b0:	4620      	mov	r0, r4
   bb0b2:	f7ff fcb0 	bl	baa16 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bb0b6:	4620      	mov	r0, r4
   bb0b8:	f7ff fe28 	bl	bad0c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bb0bc:	2100      	movs	r1, #0
   bb0be:	4620      	mov	r0, r4
   bb0c0:	f7ff ff88 	bl	bafd4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bb0c4:	2108      	movs	r1, #8
   bb0c6:	4620      	mov	r0, r4
   bb0c8:	f7ff ff9c 	bl	bb004 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bb0cc:	ed9f 0a13 	vldr	s0, [pc, #76]	; bb11c <_ZN7RH_RF954initEv+0xfc>
   bb0d0:	4620      	mov	r0, r4
   bb0d2:	f7ff fdd9 	bl	bac88 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bb0d6:	2300      	movs	r3, #0
   bb0d8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bb0dc:	210d      	movs	r1, #13
   bb0de:	4620      	mov	r0, r4
   bb0e0:	f7ff fd70 	bl	babc4 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bb0e4:	e7a3      	b.n	bb02e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bb0e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bb0ea:	e7ab      	b.n	bb044 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bb0ec:	2a01      	cmp	r2, #1
   bb0ee:	f04f 0300 	mov.w	r3, #0
   bb0f2:	d104      	bne.n	bb0fe <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bb0f4:	9300      	str	r3, [sp, #0]
   bb0f6:	490a      	ldr	r1, [pc, #40]	; (bb120 <_ZN7RH_RF954initEv+0x100>)
   bb0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb0fc:	e7ce      	b.n	bb09c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bb0fe:	2a02      	cmp	r2, #2
   bb100:	d194      	bne.n	bb02c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bb102:	9300      	str	r3, [sp, #0]
   bb104:	4907      	ldr	r1, [pc, #28]	; (bb124 <_ZN7RH_RF954initEv+0x104>)
   bb106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb10a:	2201      	movs	r2, #1
   bb10c:	e7c6      	b.n	bb09c <_ZN7RH_RF954initEv+0x7c>
   bb10e:	bf00      	nop
   bb110:	2003e56d 	.word	0x2003e56d
   bb114:	2003e570 	.word	0x2003e570
   bb118:	000bae59 	.word	0x000bae59
   bb11c:	43d90000 	.word	0x43d90000
   bb120:	000bae69 	.word	0x000bae69
   bb124:	000bae79 	.word	0x000bae79

000bb128 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bb128:	2001      	movs	r0, #1
   bb12a:	4770      	bx	lr

000bb12c <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bb12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb12e:	4d1f      	ldr	r5, [pc, #124]	; (bb1ac <_ZN14SequentialFileC1Ev+0x80>)
   bb130:	4b1f      	ldr	r3, [pc, #124]	; (bb1b0 <_ZN14SequentialFileC1Ev+0x84>)
   bb132:	4604      	mov	r4, r0
   bb134:	4629      	mov	r1, r5
   bb136:	f840 3b04 	str.w	r3, [r0], #4
   bb13a:	f003 fc56 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb13e:	491d      	ldr	r1, [pc, #116]	; (bb1b4 <_ZN14SequentialFileC1Ev+0x88>)
   bb140:	f104 0014 	add.w	r0, r4, #20
   bb144:	f003 fc51 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb148:	4629      	mov	r1, r5
   bb14a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb14e:	f003 fc4c 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb152:	2300      	movs	r3, #0
   bb154:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bb158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bb15c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bb160:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bb164:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bb168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bb16c:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bb16e:	2308      	movs	r3, #8
   bb170:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb172:	2020      	movs	r0, #32
   bb174:	f7f8 ff8f 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb178:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bb17a:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bb17c:	3d01      	subs	r5, #1
   bb17e:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bb180:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bb184:	4606      	mov	r6, r0
   bb186:	f44f 7000 	mov.w	r0, #512	; 0x200
   bb18a:	f7f8 ff84 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb18e:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bb192:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bb196:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bb19a:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bb19c:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bb19e:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bb1a0:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb1a2:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bb1a4:	6667      	str	r7, [r4, #100]	; 0x64

}
   bb1a6:	4620      	mov	r0, r4
   bb1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb1aa:	bf00      	nop
   bb1ac:	000c1f8d 	.word	0x000c1f8d
   bb1b0:	000c1d90 	.word	0x000c1d90
   bb1b4:	000c1c90 	.word	0x000c1c90

000bb1b8 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb1b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bb1ba:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bb1bc:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bb1be:	4628      	mov	r0, r5
   bb1c0:	f003 fc71 	bl	beaa6 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bb1c4:	490e      	ldr	r1, [pc, #56]	; (bb200 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bb1c6:	4668      	mov	r0, sp
   bb1c8:	f003 fc0f 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb1cc:	4669      	mov	r1, sp
   bb1ce:	4628      	mov	r0, r5
   bb1d0:	f003 fce3 	bl	beb9a <_ZNK6String8endsWithERKS_>
   bb1d4:	4606      	mov	r6, r0
   bb1d6:	4668      	mov	r0, sp
   bb1d8:	f003 fbbc 	bl	be954 <_ZN6StringD1Ev>
   bb1dc:	b16e      	cbz	r6, bb1fa <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bb1de:	68e3      	ldr	r3, [r4, #12]
   bb1e0:	2200      	movs	r2, #0
   bb1e2:	3b01      	subs	r3, #1
   bb1e4:	4629      	mov	r1, r5
   bb1e6:	4668      	mov	r0, sp
   bb1e8:	f003 fcec 	bl	bebc4 <_ZNK6String9substringEjj>
   bb1ec:	4669      	mov	r1, sp
   bb1ee:	4628      	mov	r0, r5
   bb1f0:	f003 fc51 	bl	bea96 <_ZN6StringaSEOS_>
   bb1f4:	4668      	mov	r0, sp
   bb1f6:	f003 fbad 	bl	be954 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	b004      	add	sp, #16
   bb1fe:	bd70      	pop	{r4, r5, r6, pc}
   bb200:	000c1c95 	.word	0x000c1c95

000bb204 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bb204:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bb206:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bb208:	4604      	mov	r4, r0
    if (!queueMutex) {
   bb20a:	b913      	cbnz	r3, bb212 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bb20c:	303c      	adds	r0, #60	; 0x3c
   bb20e:	f000 fc33 	bl	bba78 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bb212:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bb214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bb218:	f000 bc36 	b.w	bba88 <os_mutex_lock>

000bb21c <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bb21c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bb21e:	f000 bc3b 	b.w	bba98 <os_mutex_unlock>
	...

000bb224 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb224:	b510      	push	{r4, lr}
   bb226:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bb228:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bb22a:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bb22c:	f000 fdec 	bl	bbe08 <stat>
    if (result == 0) {
   bb230:	b9d0      	cbnz	r0, bb268 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb232:	9b01      	ldr	r3, [sp, #4]
   bb234:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bb236:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bb238:	d506      	bpl.n	bb248 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bb23a:	4915      	ldr	r1, [pc, #84]	; (bb290 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bb23c:	4815      	ldr	r0, [pc, #84]	; (bb294 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb23e:	f7f8 ff62 	bl	b4106 <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bb242:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bb244:	b016      	add	sp, #88	; 0x58
   bb246:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bb248:	4812      	ldr	r0, [pc, #72]	; (bb294 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb24a:	4913      	ldr	r1, [pc, #76]	; (bb298 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bb24c:	f7fb fc92 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bb250:	4620      	mov	r0, r4
   bb252:	f005 f965 	bl	c0520 <unlink>
    result = mkdir(path, 0777);
   bb256:	f240 11ff 	movw	r1, #511	; 0x1ff
   bb25a:	4620      	mov	r0, r4
   bb25c:	f000 fddc 	bl	bbe18 <mkdir>
    if (result == 0) {
   bb260:	b980      	cbnz	r0, bb284 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bb262:	490e      	ldr	r1, [pc, #56]	; (bb29c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bb264:	4622      	mov	r2, r4
   bb266:	e7e9      	b.n	bb23c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bb268:	f001 f852 	bl	bc310 <__errno>
   bb26c:	6803      	ldr	r3, [r0, #0]
   bb26e:	2b02      	cmp	r3, #2
   bb270:	d0f1      	beq.n	bb256 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bb272:	f001 f84d 	bl	bc310 <__errno>
   bb276:	490a      	ldr	r1, [pc, #40]	; (bb2a0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bb278:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bb27a:	4806      	ldr	r0, [pc, #24]	; (bb294 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bb27c:	f7fb fc7a 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb280:	2000      	movs	r0, #0
   bb282:	e7df      	b.n	bb244 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bb284:	f001 f844 	bl	bc310 <__errno>
   bb288:	4906      	ldr	r1, [pc, #24]	; (bb2a4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bb28a:	6802      	ldr	r2, [r0, #0]
   bb28c:	e7f5      	b.n	bb27a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bb28e:	bf00      	nop
   bb290:	000c1ca2 	.word	0x000c1ca2
   bb294:	2003e57c 	.word	0x2003e57c
   bb298:	000c1cbf 	.word	0x000c1cbf
   bb29c:	000c1cf0 	.word	0x000c1cf0
   bb2a0:	000c1cdc 	.word	0x000c1cdc
   bb2a4:	000c1cff 	.word	0x000c1cff

000bb2a8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bb2a8:	b538      	push	{r3, r4, r5, lr}
   bb2aa:	4615      	mov	r5, r2
   bb2ac:	4604      	mov	r4, r0
    String result = name;
   bb2ae:	f003 fb9c 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bb2b2:	b14d      	cbz	r5, bb2c8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bb2b4:	782b      	ldrb	r3, [r5, #0]
   bb2b6:	b13b      	cbz	r3, bb2c8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bb2b8:	4904      	ldr	r1, [pc, #16]	; (bb2cc <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bb2ba:	4620      	mov	r0, r4
   bb2bc:	f003 fc1c 	bl	beaf8 <_ZN6String6concatEPKc>
   bb2c0:	4629      	mov	r1, r5
   bb2c2:	4620      	mov	r0, r4
   bb2c4:	f003 fc18 	bl	beaf8 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bb2c8:	4620      	mov	r0, r4
   bb2ca:	bd38      	pop	{r3, r4, r5, pc}
   bb2cc:	000c2094 	.word	0x000c2094

000bb2d0 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bb2d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb2d2:	4605      	mov	r5, r0
   bb2d4:	460e      	mov	r6, r1
   bb2d6:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bb2d8:	6949      	ldr	r1, [r1, #20]
   bb2da:	4668      	mov	r0, sp
   bb2dc:	f003 fc92 	bl	bec04 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bb2e0:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bb2e2:	b904      	cbnz	r4, bb2e6 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bb2e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb2e6:	4622      	mov	r2, r4
   bb2e8:	4628      	mov	r0, r5
   bb2ea:	f7ff ffdd 	bl	bb2a8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bb2ee:	4668      	mov	r0, sp
   bb2f0:	f003 fb30 	bl	be954 <_ZN6StringD1Ev>
}
   bb2f4:	4628      	mov	r0, r5
   bb2f6:	b004      	add	sp, #16
   bb2f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb2fc <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb2fc:	b570      	push	{r4, r5, r6, lr}
   bb2fe:	460c      	mov	r4, r1
   bb300:	b08e      	sub	sp, #56	; 0x38
    String result;
   bb302:	491a      	ldr	r1, [pc, #104]	; (bb36c <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bb304:	e9cd 3200 	strd	r3, r2, [sp]
   bb308:	4605      	mov	r5, r0
    String result;
   bb30a:	f003 fb6e 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bb30e:	68e0      	ldr	r0, [r4, #12]
   bb310:	69e1      	ldr	r1, [r4, #28]
   bb312:	4401      	add	r1, r0
   bb314:	3104      	adds	r1, #4
   bb316:	4628      	mov	r0, r5
   bb318:	f003 fb3a 	bl	be990 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bb31c:	1d21      	adds	r1, r4, #4
   bb31e:	a806      	add	r0, sp, #24
   bb320:	f003 fbae 	bl	bea80 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bb324:	4912      	ldr	r1, [pc, #72]	; (bb370 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bb326:	a802      	add	r0, sp, #8
   bb328:	f003 fb5f 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb32c:	a902      	add	r1, sp, #8
   bb32e:	a806      	add	r0, sp, #24
   bb330:	f003 fc00 	bl	beb34 <_ZplRK15StringSumHelperRK6String>
   bb334:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb338:	4606      	mov	r6, r0
   bb33a:	4621      	mov	r1, r4
   bb33c:	a80a      	add	r0, sp, #40	; 0x28
   bb33e:	f7ff ffc7 	bl	bb2d0 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bb342:	a90a      	add	r1, sp, #40	; 0x28
   bb344:	4630      	mov	r0, r6
   bb346:	f003 fbf5 	bl	beb34 <_ZplRK15StringSumHelperRK6String>
   bb34a:	4601      	mov	r1, r0
   bb34c:	4628      	mov	r0, r5
   bb34e:	f003 fb88 	bl	bea62 <_ZN6StringaSERKS_>
   bb352:	a80a      	add	r0, sp, #40	; 0x28
   bb354:	f003 fafe 	bl	be954 <_ZN6StringD1Ev>
   bb358:	a802      	add	r0, sp, #8
   bb35a:	f003 fafb 	bl	be954 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb35e:	a806      	add	r0, sp, #24
   bb360:	f003 faf8 	bl	be954 <_ZN6StringD1Ev>
}
   bb364:	4628      	mov	r0, r5
   bb366:	b00e      	add	sp, #56	; 0x38
   bb368:	bd70      	pop	{r4, r5, r6, pc}
   bb36a:	bf00      	nop
   bb36c:	000c1f8d 	.word	0x000c1f8d
   bb370:	000c1c95 	.word	0x000c1c95

000bb374 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bb378:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bb37a:	b08e      	sub	sp, #56	; 0x38
   bb37c:	4605      	mov	r5, r0
   bb37e:	460f      	mov	r7, r1
    if (allExtensions) {
   bb380:	2a00      	cmp	r2, #0
   bb382:	d04a      	beq.n	bb41a <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bb384:	6840      	ldr	r0, [r0, #4]
   bb386:	f000 fd57 	bl	bbe38 <opendir>
        if (dir) {
   bb38a:	4606      	mov	r6, r0
   bb38c:	2800      	cmp	r0, #0
   bb38e:	d054      	beq.n	bb43a <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bb390:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bb448 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bb394:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bb444 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bb398:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bb440 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bb39c:	4630      	mov	r0, r6
   bb39e:	f000 fd53 	bl	bbe48 <readdir>
                if (!ent) {
   bb3a2:	2800      	cmp	r0, #0
   bb3a4:	d033      	beq.n	bb40e <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bb3a6:	7a82      	ldrb	r2, [r0, #10]
   bb3a8:	2a08      	cmp	r2, #8
   bb3aa:	d1f7      	bne.n	bb39c <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bb3ac:	f100 040b 	add.w	r4, r0, #11
   bb3b0:	6969      	ldr	r1, [r5, #20]
   bb3b2:	aa01      	add	r2, sp, #4
   bb3b4:	4620      	mov	r0, r4
   bb3b6:	f000 ff83 	bl	bc2c0 <sscanf>
   bb3ba:	2801      	cmp	r0, #1
   bb3bc:	d1ee      	bne.n	bb39c <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bb3be:	9b01      	ldr	r3, [sp, #4]
   bb3c0:	42bb      	cmp	r3, r7
   bb3c2:	d1eb      	bne.n	bb39c <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bb3c4:	1d29      	adds	r1, r5, #4
   bb3c6:	a80a      	add	r0, sp, #40	; 0x28
   bb3c8:	f003 fb5a 	bl	bea80 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bb3cc:	4651      	mov	r1, sl
   bb3ce:	a806      	add	r0, sp, #24
   bb3d0:	f003 fb0b 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb3d4:	a906      	add	r1, sp, #24
   bb3d6:	a80a      	add	r0, sp, #40	; 0x28
   bb3d8:	f003 fbac 	bl	beb34 <_ZplRK15StringSumHelperRK6String>
   bb3dc:	4621      	mov	r1, r4
   bb3de:	f003 fbb5 	bl	beb4c <_ZplRK15StringSumHelperPKc>
   bb3e2:	4601      	mov	r1, r0
   bb3e4:	a802      	add	r0, sp, #8
   bb3e6:	f003 fb4b 	bl	bea80 <_ZN6StringC1ERKS_>
   bb3ea:	a806      	add	r0, sp, #24
   bb3ec:	f003 fab2 	bl	be954 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bb3f0:	a80a      	add	r0, sp, #40	; 0x28
   bb3f2:	f003 faaf 	bl	be954 <_ZN6StringD1Ev>
                        unlink(path);
   bb3f6:	9802      	ldr	r0, [sp, #8]
   bb3f8:	f005 f892 	bl	c0520 <unlink>
                        _log.trace("removed %s", path.c_str());
   bb3fc:	4640      	mov	r0, r8
   bb3fe:	9a02      	ldr	r2, [sp, #8]
   bb400:	4649      	mov	r1, r9
   bb402:	f7fb fbc5 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bb406:	a802      	add	r0, sp, #8
   bb408:	f003 faa4 	bl	be954 <_ZN6StringD1Ev>
                    continue;
   bb40c:	e7c6      	b.n	bb39c <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bb40e:	4630      	mov	r0, r6
}
   bb410:	b00e      	add	sp, #56	; 0x38
   bb412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bb416:	f000 bd1f 	b.w	bbe58 <closedir>
        String path = getPathForFileNum(fileNum); 
   bb41a:	460a      	mov	r2, r1
   bb41c:	4601      	mov	r1, r0
   bb41e:	a80a      	add	r0, sp, #40	; 0x28
   bb420:	f7ff ff6c 	bl	bb2fc <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bb424:	980a      	ldr	r0, [sp, #40]	; 0x28
   bb426:	f005 f87b 	bl	c0520 <unlink>
        _log.trace("removed %s", path.c_str());
   bb42a:	4805      	ldr	r0, [pc, #20]	; (bb440 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bb42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb42e:	4905      	ldr	r1, [pc, #20]	; (bb444 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bb430:	f7fb fbae 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bb434:	a80a      	add	r0, sp, #40	; 0x28
   bb436:	f003 fa8d 	bl	be954 <_ZN6StringD1Ev>
}
   bb43a:	b00e      	add	sp, #56	; 0x38
   bb43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb440:	2003e57c 	.word	0x2003e57c
   bb444:	000c1c97 	.word	0x000c1c97
   bb448:	000c1c95 	.word	0x000c1c95

000bb44c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bb44c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bb44e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bb450:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bb452:	b183      	cbz	r3, bb476 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bb454:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bb456:	6945      	ldr	r5, [r0, #20]
   bb458:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bb45a:	42ae      	cmp	r6, r5
   bb45c:	d906      	bls.n	bb46c <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bb45e:	f855 0b04 	ldr.w	r0, [r5], #4
   bb462:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb466:	f7f8 fe1a 	bl	b409e <_ZdlPvj>
   bb46a:	e7f6      	b.n	bb45a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bb46c:	6861      	ldr	r1, [r4, #4]
   bb46e:	6820      	ldr	r0, [r4, #0]
   bb470:	0089      	lsls	r1, r1, #2
   bb472:	f7f8 fe14 	bl	b409e <_ZdlPvj>
    }
   bb476:	4620      	mov	r0, r4
   bb478:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb47c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bb47c:	b510      	push	{r4, lr}
   bb47e:	4b09      	ldr	r3, [pc, #36]	; (bb4a4 <_ZN14SequentialFileD1Ev+0x28>)
   bb480:	4604      	mov	r4, r0
   bb482:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bb486:	f7ff ffe1 	bl	bb44c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bb48a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb48e:	f003 fa61 	bl	be954 <_ZN6StringD1Ev>
   bb492:	f104 0014 	add.w	r0, r4, #20
   bb496:	f003 fa5d 	bl	be954 <_ZN6StringD1Ev>
   bb49a:	1d20      	adds	r0, r4, #4
   bb49c:	f003 fa5a 	bl	be954 <_ZN6StringD1Ev>
}
   bb4a0:	4620      	mov	r0, r4
   bb4a2:	bd10      	pop	{r4, pc}
   bb4a4:	000c1d90 	.word	0x000c1d90

000bb4a8 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bb4a8:	b510      	push	{r4, lr}
   bb4aa:	4604      	mov	r4, r0
}
   bb4ac:	f7ff ffe6 	bl	bb47c <_ZN14SequentialFileD1Ev>
   bb4b0:	4620      	mov	r0, r4
   bb4b2:	2168      	movs	r1, #104	; 0x68
   bb4b4:	f7f8 fdf3 	bl	b409e <_ZdlPvj>
   bb4b8:	4620      	mov	r0, r4
   bb4ba:	bd10      	pop	{r4, pc}

000bb4bc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bb4bc:	68c3      	ldr	r3, [r0, #12]
   bb4be:	68ca      	ldr	r2, [r1, #12]
   bb4c0:	1a9b      	subs	r3, r3, r2
   bb4c2:	109b      	asrs	r3, r3, #2
   bb4c4:	1e5a      	subs	r2, r3, #1
   bb4c6:	e9d0 3000 	ldrd	r3, r0, [r0]
   bb4ca:	1a1b      	subs	r3, r3, r0
   bb4cc:	109b      	asrs	r3, r3, #2
   bb4ce:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bb4d2:	6888      	ldr	r0, [r1, #8]
   bb4d4:	680a      	ldr	r2, [r1, #0]
   bb4d6:	1a80      	subs	r0, r0, r2
      }
   bb4d8:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bb4dc:	4770      	bx	lr
	...

000bb4e0 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bb4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bb4e4:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bb4e6:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bb4e8:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bb4ea:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bb4ec:	4604      	mov	r4, r0
   bb4ee:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bb4f0:	d007      	beq.n	bb502 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb4f2:	b10b      	cbz	r3, bb4f8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bb4f4:	680a      	ldr	r2, [r1, #0]
   bb4f6:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bb4f8:	69a3      	ldr	r3, [r4, #24]
   bb4fa:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bb4fc:	61a3      	str	r3, [r4, #24]
      }
   bb4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb502:	f100 0108 	add.w	r1, r0, #8
   bb506:	3018      	adds	r0, #24
   bb508:	f7ff ffd8 	bl	bb4bc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bb50c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bb510:	4298      	cmp	r0, r3
   bb512:	d102      	bne.n	bb51a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bb514:	4838      	ldr	r0, [pc, #224]	; (bb5f8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bb516:	f004 f8e0 	bl	bf6da <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb51a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb51c:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb51e:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bb520:	1a11      	subs	r1, r2, r0
   bb522:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bb526:	2901      	cmp	r1, #1
   bb528:	d825      	bhi.n	bb576 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bb52a:	6961      	ldr	r1, [r4, #20]
   bb52c:	eba2 0801 	sub.w	r8, r2, r1
   bb530:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bb534:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bb536:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bb53a:	d936      	bls.n	bb5aa <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bb53c:	1b5d      	subs	r5, r3, r5
   bb53e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bb540:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bb544:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bb546:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bb548:	eba3 0201 	sub.w	r2, r3, r1
   bb54c:	d926      	bls.n	bb59c <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bb54e:	428b      	cmp	r3, r1
   bb550:	d002      	beq.n	bb558 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb552:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb554:	f004 fddc 	bl	c0110 <memmove>
	_M_node = __new_node;
   bb558:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bb55a:	682b      	ldr	r3, [r5, #0]
   bb55c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb55e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb562:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bb564:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bb568:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb56a:	f855 3008 	ldr.w	r3, [r5, r8]
   bb56e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb570:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bb574:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb576:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bb57a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bb57c:	f7f8 fd8b 	bl	b4096 <_Znwj>
   bb580:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bb582:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb584:	b10b      	cbz	r3, bb58a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bb586:	683a      	ldr	r2, [r7, #0]
   bb588:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bb58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb58c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb58e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bb590:	685b      	ldr	r3, [r3, #4]
   bb592:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb594:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb598:	6222      	str	r2, [r4, #32]
   bb59a:	e7af      	b.n	bb4fc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bb59c:	428b      	cmp	r3, r1
   bb59e:	d0db      	beq.n	bb558 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bb5a0:	f108 0004 	add.w	r0, r8, #4
   bb5a4:	1a80      	subs	r0, r0, r2
   bb5a6:	4428      	add	r0, r5
   bb5a8:	e7d4      	b.n	bb554 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bb5aa:	f103 0902 	add.w	r9, r3, #2
   bb5ae:	2b01      	cmp	r3, #1
   bb5b0:	bf2c      	ite	cs
   bb5b2:	4499      	addcs	r9, r3
   bb5b4:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bb5b8:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bb5bc:	d301      	bcc.n	bb5c2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bb5be:	f004 f889 	bl	bf6d4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb5c2:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bb5c6:	f7f8 fd66 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bb5ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bb5cc:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb5ce:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bb5d2:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bb5d4:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bb5d6:	4291      	cmp	r1, r2
   bb5d8:	4682      	mov	sl, r0
   bb5da:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bb5de:	d003      	beq.n	bb5e8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bb5e0:	1a52      	subs	r2, r2, r1
   bb5e2:	4628      	mov	r0, r5
   bb5e4:	f004 fd94 	bl	c0110 <memmove>
	::operator delete(__p
   bb5e8:	6861      	ldr	r1, [r4, #4]
   bb5ea:	6820      	ldr	r0, [r4, #0]
   bb5ec:	0089      	lsls	r1, r1, #2
   bb5ee:	f7f8 fd56 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bb5f2:	e9c4 a900 	strd	sl, r9, [r4]
   bb5f6:	e7af      	b.n	bb558 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bb5f8:	000c1919 	.word	0x000c1919

000bb5fc <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bb5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bb600:	68c3      	ldr	r3, [r0, #12]
   bb602:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bb604:	b086      	sub	sp, #24
   bb606:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bb608:	d808      	bhi.n	bb61c <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bb60a:	4934      	ldr	r1, [pc, #208]	; (bb6dc <_ZN14SequentialFile7scanDirEv+0xe0>)
   bb60c:	4834      	ldr	r0, [pc, #208]	; (bb6e0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb60e:	f7fb fab1 	bl	b6b74 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bb612:	2600      	movs	r6, #0
}
   bb614:	4630      	mov	r0, r6
   bb616:	b006      	add	sp, #24
   bb618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bb61c:	6840      	ldr	r0, [r0, #4]
   bb61e:	f7ff fe01 	bl	bb224 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bb622:	4606      	mov	r6, r0
   bb624:	2800      	cmp	r0, #0
   bb626:	d0f4      	beq.n	bb612 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bb628:	6963      	ldr	r3, [r4, #20]
   bb62a:	6862      	ldr	r2, [r4, #4]
   bb62c:	492d      	ldr	r1, [pc, #180]	; (bb6e4 <_ZN14SequentialFile7scanDirEv+0xe8>)
   bb62e:	482c      	ldr	r0, [pc, #176]	; (bb6e0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bb630:	f7fb faae 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bb634:	6860      	ldr	r0, [r4, #4]
   bb636:	f000 fbff 	bl	bbe38 <opendir>
    if (!dir) {
   bb63a:	4607      	mov	r7, r0
   bb63c:	2800      	cmp	r0, #0
   bb63e:	d0e8      	beq.n	bb612 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bb640:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb642:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bb6e8 <_ZN14SequentialFile7scanDirEv+0xec>
   bb646:	f8df 8098 	ldr.w	r8, [pc, #152]	; bb6e0 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bb64a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bb64c:	4638      	mov	r0, r7
   bb64e:	f000 fbfb 	bl	bbe48 <readdir>
        if (!ent) {
   bb652:	4605      	mov	r5, r0
   bb654:	2800      	cmp	r0, #0
   bb656:	d039      	beq.n	bb6cc <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bb658:	7a83      	ldrb	r3, [r0, #10]
   bb65a:	2b08      	cmp	r3, #8
   bb65c:	d1f6      	bne.n	bb64c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bb65e:	350b      	adds	r5, #11
   bb660:	6961      	ldr	r1, [r4, #20]
   bb662:	aa01      	add	r2, sp, #4
   bb664:	4628      	mov	r0, r5
   bb666:	f000 fe2b 	bl	bc2c0 <sscanf>
   bb66a:	2801      	cmp	r0, #1
   bb66c:	d1ee      	bne.n	bb64c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bb66e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb670:	b17b      	cbz	r3, bb692 <_ZN14SequentialFile7scanDirEv+0x96>
   bb672:	4629      	mov	r1, r5
   bb674:	a802      	add	r0, sp, #8
   bb676:	f003 f9b8 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
   bb67a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bb67e:	a802      	add	r0, sp, #8
   bb680:	f003 fa8b 	bl	beb9a <_ZNK6String8endsWithERKS_>
   bb684:	4682      	mov	sl, r0
   bb686:	a802      	add	r0, sp, #8
   bb688:	f003 f964 	bl	be954 <_ZN6StringD1Ev>
   bb68c:	f1ba 0f00 	cmp.w	sl, #0
   bb690:	d0dc      	beq.n	bb64c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bb692:	6823      	ldr	r3, [r4, #0]
   bb694:	4629      	mov	r1, r5
   bb696:	689b      	ldr	r3, [r3, #8]
   bb698:	4620      	mov	r0, r4
   bb69a:	4798      	blx	r3
   bb69c:	2800      	cmp	r0, #0
   bb69e:	d0d5      	beq.n	bb64c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bb6a0:	9a01      	ldr	r2, [sp, #4]
   bb6a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb6a4:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bb6a6:	bfb8      	it	lt
   bb6a8:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bb6aa:	462b      	mov	r3, r5
   bb6ac:	4649      	mov	r1, r9
   bb6ae:	4640      	mov	r0, r8
   bb6b0:	f7fb fa6e 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bb6b4:	4620      	mov	r0, r4
   bb6b6:	f7ff fda5 	bl	bb204 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bb6ba:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb6be:	a901      	add	r1, sp, #4
   bb6c0:	f7ff ff0e 	bl	bb4e0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bb6c4:	4620      	mov	r0, r4
   bb6c6:	f7ff fda9 	bl	bb21c <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bb6ca:	e7bf      	b.n	bb64c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bb6cc:	4638      	mov	r0, r7
   bb6ce:	f000 fbc3 	bl	bbe58 <closedir>
    scanDirCompleted = true;
   bb6d2:	2301      	movs	r3, #1
   bb6d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bb6d8:	e79c      	b.n	bb614 <_ZN14SequentialFile7scanDirEv+0x18>
   bb6da:	bf00      	nop
   bb6dc:	000c1d15 	.word	0x000c1d15
   bb6e0:	2003e57c 	.word	0x2003e57c
   bb6e4:	000c1d2a 	.word	0x000c1d2a
   bb6e8:	000c1d46 	.word	0x000c1d46

000bb6ec <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bb6ec:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bb6ee:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bb6f2:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb6f4:	b90b      	cbnz	r3, bb6fa <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bb6f6:	f7ff ff81 	bl	bb5fc <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bb6fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bb6fc:	3001      	adds	r0, #1
   bb6fe:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bb700:	bd10      	pop	{r4, pc}
	...

000bb704 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bb704:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bb706:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bb70a:	4604      	mov	r4, r0
   bb70c:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bb70e:	b90b      	cbnz	r3, bb714 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bb710:	f7ff ff74 	bl	bb5fc <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bb714:	4620      	mov	r0, r4
   bb716:	f7ff fd75 	bl	bb204 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bb71a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bb71c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bb71e:	429a      	cmp	r2, r3
   bb720:	d020      	beq.n	bb764 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bb722:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bb726:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bb728:	b126      	cbz	r6, bb734 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bb72a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bb72c:	4293      	cmp	r3, r2
   bb72e:	d00c      	beq.n	bb74a <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bb730:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bb732:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bb734:	4620      	mov	r0, r4
   bb736:	f7ff fd71 	bl	bb21c <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bb73a:	b125      	cbz	r5, bb746 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bb73c:	490a      	ldr	r1, [pc, #40]	; (bb768 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bb73e:	480b      	ldr	r0, [pc, #44]	; (bb76c <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bb740:	462a      	mov	r2, r5
   bb742:	f7fb fa25 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
}
   bb746:	4628      	mov	r0, r5
   bb748:	bd70      	pop	{r4, r5, r6, pc}
   bb74a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bb74e:	f7f8 fca6 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bb752:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb754:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bb756:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bb758:	685b      	ldr	r3, [r3, #4]
   bb75a:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bb75c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bb760:	6522      	str	r2, [r4, #80]	; 0x50
   bb762:	e7e6      	b.n	bb732 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bb764:	2500      	movs	r5, #0
   bb766:	e7e5      	b.n	bb734 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bb768:	000c1d5c 	.word	0x000c1d5c
   bb76c:	2003e57c 	.word	0x2003e57c

000bb770 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bb770:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bb772:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bb776:	9101      	str	r1, [sp, #4]
   bb778:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bb77a:	b90b      	cbnz	r3, bb780 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bb77c:	f7ff ff3e 	bl	bb5fc <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bb780:	9b01      	ldr	r3, [sp, #4]
   bb782:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bb784:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bb786:	bfb8      	it	lt
   bb788:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bb78a:	4620      	mov	r0, r4
   bb78c:	f7ff fd3a 	bl	bb204 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bb790:	a901      	add	r1, sp, #4
   bb792:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bb796:	f7ff fea3 	bl	bb4e0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bb79a:	4620      	mov	r0, r4
   bb79c:	f7ff fd3e 	bl	bb21c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb7a0:	b002      	add	sp, #8
   bb7a2:	bd10      	pop	{r4, pc}

000bb7a4 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bb7a4:	b538      	push	{r3, r4, r5, lr}
   bb7a6:	4604      	mov	r4, r0
    queueMutexLock();
   bb7a8:	f7ff fd2c 	bl	bb204 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bb7ac:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bb7b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bb7b4:	f7ff fe82 	bl	bb4bc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bb7b8:	4605      	mov	r5, r0
    queueMutexUnlock();
   bb7ba:	4620      	mov	r0, r4
   bb7bc:	f7ff fd2e 	bl	bb21c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bb7c0:	4628      	mov	r0, r5
   bb7c2:	bd38      	pop	{r3, r4, r5, pc}

000bb7c4 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bb7c4:	4b01      	ldr	r3, [pc, #4]	; (bb7cc <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bb7c6:	4a02      	ldr	r2, [pc, #8]	; (bb7d0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bb7c8:	601a      	str	r2, [r3, #0]
}
   bb7ca:	4770      	bx	lr
   bb7cc:	2003e57c 	.word	0x2003e57c
   bb7d0:	000c1d79 	.word	0x000c1d79

000bb7d4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bb7d4:	4770      	bx	lr

000bb7d6 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bb7d6:	6803      	ldr	r3, [r0, #0]
   bb7d8:	685b      	ldr	r3, [r3, #4]
   bb7da:	4718      	bx	r3

000bb7dc <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bb7dc:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bb7de:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bb7e0:	4604      	mov	r4, r0
    if (lastUpdate) {
   bb7e2:	b133      	cbz	r3, bb7f2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bb7e4:	b131      	cbz	r1, bb7f4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bb7e6:	6823      	ldr	r3, [r4, #0]
   bb7e8:	4620      	mov	r0, r4
   bb7ea:	689b      	ldr	r3, [r3, #8]
   bb7ec:	4798      	blx	r3
            lastUpdate = 0;
   bb7ee:	2300      	movs	r3, #0
   bb7f0:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bb7f2:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bb7f4:	f000 f9a8 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bb7f8:	69a3      	ldr	r3, [r4, #24]
   bb7fa:	1ac0      	subs	r0, r0, r3
   bb7fc:	69e3      	ldr	r3, [r4, #28]
   bb7fe:	4298      	cmp	r0, r3
   bb800:	d2f1      	bcs.n	bb7e6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bb802:	e7f6      	b.n	bb7f2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bb804 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bb804:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bb806:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bb808:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bb80a:	b11b      	cbz	r3, bb814 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bb80c:	f000 f99c 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bb810:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bb812:	bd10      	pop	{r4, pc}
        save();
   bb814:	6803      	ldr	r3, [r0, #0]
}
   bb816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bb81a:	689b      	ldr	r3, [r3, #8]
   bb81c:	4718      	bx	r3

000bb81e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bb81e:	f000 b95b 	b.w	bbad8 <os_mutex_recursive_unlock>

000bb822 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bb822:	b510      	push	{r4, lr}
   bb824:	4604      	mov	r4, r0
   bb826:	3004      	adds	r0, #4
   bb828:	f7fa f86e 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bb82c:	6823      	ldr	r3, [r4, #0]
   bb82e:	68e1      	ldr	r1, [r4, #12]
   bb830:	695b      	ldr	r3, [r3, #20]
   bb832:	4620      	mov	r0, r4
   bb834:	4798      	blx	r3
   bb836:	b918      	cbnz	r0, bb840 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bb838:	6823      	ldr	r3, [r4, #0]
   bb83a:	4620      	mov	r0, r4
   bb83c:	699b      	ldr	r3, [r3, #24]
   bb83e:	4798      	blx	r3
      { _M_device.unlock(); }
   bb840:	6860      	ldr	r0, [r4, #4]
   bb842:	f7ff ffec 	bl	bb81e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bb846:	2001      	movs	r0, #1
   bb848:	bd10      	pop	{r4, pc}
	...

000bb84c <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bb84c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb84e:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bb852:	4f18      	ldr	r7, [pc, #96]	; (bb8b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bb854:	4e18      	ldr	r6, [pc, #96]	; (bb8b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bb856:	4d19      	ldr	r5, [pc, #100]	; (bb8bc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bb858:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bb85a:	42a0      	cmp	r0, r4
   bb85c:	d00c      	beq.n	bb878 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bb85e:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bb862:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bb864:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bb868:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bb86a:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bb86c:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bb870:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bb874:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bb876:	e7f0      	b.n	bb85a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bb878:	f001 0403 	and.w	r4, r1, #3
   bb87c:	4404      	add	r4, r0
    k = 0;
   bb87e:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bb880:	42a0      	cmp	r0, r4
   bb882:	d004      	beq.n	bb88e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bb884:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bb888:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bb88c:	e7f8      	b.n	bb880 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bb88e:	4809      	ldr	r0, [pc, #36]	; (bb8b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bb890:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bb892:	4809      	ldr	r0, [pc, #36]	; (bb8b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bb894:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bb898:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bb89a:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bb89c:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bb89e:	4b08      	ldr	r3, [pc, #32]	; (bb8c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bb8a0:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bb8a4:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bb8a6:	4b07      	ldr	r3, [pc, #28]	; (bb8c4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bb8a8:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bb8ac:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bb8ae:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bb8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb8b4:	cc9e2d51 	.word	0xcc9e2d51
   bb8b8:	1b873593 	.word	0x1b873593
   bb8bc:	e6546b64 	.word	0xe6546b64
   bb8c0:	85ebca6b 	.word	0x85ebca6b
   bb8c4:	c2b2ae35 	.word	0xc2b2ae35

000bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bb8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb8ca:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bb8cc:	3004      	adds	r0, #4
   bb8ce:	f7fa f81b 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bb8d2:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bb8d4:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bb8d6:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bb8d8:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bb8da:	68a6      	ldr	r6, [r4, #8]
   bb8dc:	4a05      	ldr	r2, [pc, #20]	; (bb8f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bb8de:	88f1      	ldrh	r1, [r6, #6]
   bb8e0:	4630      	mov	r0, r6
   bb8e2:	f7ff ffb3 	bl	bb84c <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bb8e6:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bb8e8:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bb8ea:	6860      	ldr	r0, [r4, #4]
   bb8ec:	f7ff ff97 	bl	bb81e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bb8f0:	4628      	mov	r0, r5
   bb8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb8f4:	851c2a3f 	.word	0x851c2a3f

000bb8f8 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bb8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb8fc:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bb8fe:	3004      	adds	r0, #4
   bb900:	4690      	mov	r8, r2
   bb902:	460d      	mov	r5, r1
   bb904:	461f      	mov	r7, r3
   bb906:	f7f9 ffff 	bl	b5908 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bb90a:	68e2      	ldr	r2, [r4, #12]
   bb90c:	f1c8 0301 	rsb	r3, r8, #1
   bb910:	4413      	add	r3, r2
   bb912:	42ab      	cmp	r3, r5
   bb914:	d31f      	bcc.n	bb956 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bb916:	4638      	mov	r0, r7
   bb918:	f004 fccf 	bl	c02ba <strlen>
   bb91c:	4540      	cmp	r0, r8
   bb91e:	d21a      	bcs.n	bb956 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bb920:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bb922:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bb924:	4629      	mov	r1, r5
   bb926:	4638      	mov	r0, r7
   bb928:	f004 fc97 	bl	c025a <strcmp>
   bb92c:	b188      	cbz	r0, bb952 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bb92e:	4642      	mov	r2, r8
   bb930:	2100      	movs	r1, #0
   bb932:	4628      	mov	r0, r5
   bb934:	f004 fc06 	bl	c0144 <memset>
                strcpy(p, value);
   bb938:	4639      	mov	r1, r7
   bb93a:	4628      	mov	r0, r5
   bb93c:	f004 fc97 	bl	c026e <strcpy>
                savedDataHeader->hash = getHash();
   bb940:	4620      	mov	r0, r4
   bb942:	68a5      	ldr	r5, [r4, #8]
   bb944:	f7ff ffc0 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bb948:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bb94a:	6823      	ldr	r3, [r4, #0]
   bb94c:	4620      	mov	r0, r4
   bb94e:	691b      	ldr	r3, [r3, #16]
   bb950:	4798      	blx	r3
            result = true;
   bb952:	2501      	movs	r5, #1
   bb954:	e000      	b.n	bb958 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bb956:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bb958:	6860      	ldr	r0, [r4, #4]
   bb95a:	f7ff ff60 	bl	bb81e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bb95e:	4628      	mov	r0, r5
   bb960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb964 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bb964:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb966:	460d      	mov	r5, r1
   bb968:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bb96a:	f7ff ffad 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bb96e:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bb970:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bb972:	d923      	bls.n	bb9bc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bb974:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bb976:	6922      	ldr	r2, [r4, #16]
   bb978:	6819      	ldr	r1, [r3, #0]
   bb97a:	4291      	cmp	r1, r2
   bb97c:	d11f      	bne.n	bb9be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bb97e:	8899      	ldrh	r1, [r3, #4]
   bb980:	8aa2      	ldrh	r2, [r4, #20]
   bb982:	4291      	cmp	r1, r2
   bb984:	d11b      	bne.n	bb9be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bb986:	88d9      	ldrh	r1, [r3, #6]
   bb988:	b2aa      	uxth	r2, r5
   bb98a:	4291      	cmp	r1, r2
   bb98c:	d817      	bhi.n	bb9be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bb98e:	689a      	ldr	r2, [r3, #8]
   bb990:	4282      	cmp	r2, r0
   bb992:	d114      	bne.n	bb9be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bb994:	68e2      	ldr	r2, [r4, #12]
   bb996:	42aa      	cmp	r2, r5
   bb998:	d905      	bls.n	bb9a6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bb99a:	2100      	movs	r1, #0
   bb99c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bb99e:	68e2      	ldr	r2, [r4, #12]
   bb9a0:	3501      	adds	r5, #1
   bb9a2:	42aa      	cmp	r2, r5
   bb9a4:	d8fa      	bhi.n	bb99c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bb9a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bb9aa:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bb9ac:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bb9ae:	68a5      	ldr	r5, [r4, #8]
   bb9b0:	f7ff ff8a 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bb9b4:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bb9b6:	2001      	movs	r0, #1
}
   bb9b8:	b002      	add	sp, #8
   bb9ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bb9bc:	b19d      	cbz	r5, bb9e6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bb9be:	68a1      	ldr	r1, [r4, #8]
   bb9c0:	680a      	ldr	r2, [r1, #0]
   bb9c2:	b192      	cbz	r2, bb9ea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bb9c4:	6888      	ldr	r0, [r1, #8]
   bb9c6:	888b      	ldrh	r3, [r1, #4]
   bb9c8:	9001      	str	r0, [sp, #4]
   bb9ca:	88c9      	ldrh	r1, [r1, #6]
   bb9cc:	4808      	ldr	r0, [pc, #32]	; (bb9f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bb9ce:	9100      	str	r1, [sp, #0]
   bb9d0:	4908      	ldr	r1, [pc, #32]	; (bb9f4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bb9d2:	f7fb f8dd 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bb9d6:	e9cd 5600 	strd	r5, r6, [sp]
   bb9da:	8aa3      	ldrh	r3, [r4, #20]
   bb9dc:	6922      	ldr	r2, [r4, #16]
   bb9de:	4906      	ldr	r1, [pc, #24]	; (bb9f8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bb9e0:	4803      	ldr	r0, [pc, #12]	; (bb9f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bb9e2:	f7fb f8d5 	bl	b6b90 <_ZNK5spark6Logger5traceEPKcz>
   bb9e6:	2000      	movs	r0, #0
   bb9e8:	e7e6      	b.n	bb9b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bb9ea:	4610      	mov	r0, r2
   bb9ec:	e7e4      	b.n	bb9b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bb9ee:	bf00      	nop
   bb9f0:	2003e658 	.word	0x2003e658
   bb9f4:	000c1d9c 	.word	0x000c1d9c
   bb9f8:	000c1dcd 	.word	0x000c1dcd

000bb9fc <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bb9fc:	b538      	push	{r3, r4, r5, lr}
   bb9fe:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bba00:	68c2      	ldr	r2, [r0, #12]
   bba02:	6880      	ldr	r0, [r0, #8]
   bba04:	2100      	movs	r1, #0
   bba06:	f004 fb9d 	bl	c0144 <memset>
    savedDataHeader->magic = savedDataMagic;
   bba0a:	68a3      	ldr	r3, [r4, #8]
   bba0c:	6922      	ldr	r2, [r4, #16]
   bba0e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bba10:	68a3      	ldr	r3, [r4, #8]
   bba12:	8aa2      	ldrh	r2, [r4, #20]
   bba14:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bba16:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bba1a:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bba1c:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bba1e:	68a5      	ldr	r5, [r4, #8]
   bba20:	f7ff ff52 	bl	bb8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bba24:	60a8      	str	r0, [r5, #8]
}
   bba26:	bd38      	pop	{r3, r4, r5, pc}

000bba28 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bba28:	b508      	push	{r3, lr}
   bba2a:	4b02      	ldr	r3, [pc, #8]	; (bba34 <cellular_signal+0xc>)
   bba2c:	681b      	ldr	r3, [r3, #0]
   bba2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bba30:	9301      	str	r3, [sp, #4]
   bba32:	bd08      	pop	{r3, pc}
   bba34:	00030274 	.word	0x00030274

000bba38 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bba38:	b508      	push	{r3, lr}
   bba3a:	4b02      	ldr	r3, [pc, #8]	; (bba44 <os_thread_create+0xc>)
   bba3c:	681b      	ldr	r3, [r3, #0]
   bba3e:	685b      	ldr	r3, [r3, #4]
   bba40:	9301      	str	r3, [sp, #4]
   bba42:	bd08      	pop	{r3, pc}
   bba44:	00030248 	.word	0x00030248

000bba48 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bba48:	b508      	push	{r3, lr}
   bba4a:	4b02      	ldr	r3, [pc, #8]	; (bba54 <os_thread_is_current+0xc>)
   bba4c:	681b      	ldr	r3, [r3, #0]
   bba4e:	689b      	ldr	r3, [r3, #8]
   bba50:	9301      	str	r3, [sp, #4]
   bba52:	bd08      	pop	{r3, pc}
   bba54:	00030248 	.word	0x00030248

000bba58 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bba58:	b508      	push	{r3, lr}
   bba5a:	4b02      	ldr	r3, [pc, #8]	; (bba64 <os_thread_join+0xc>)
   bba5c:	681b      	ldr	r3, [r3, #0]
   bba5e:	691b      	ldr	r3, [r3, #16]
   bba60:	9301      	str	r3, [sp, #4]
   bba62:	bd08      	pop	{r3, pc}
   bba64:	00030248 	.word	0x00030248

000bba68 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bba68:	b508      	push	{r3, lr}
   bba6a:	4b02      	ldr	r3, [pc, #8]	; (bba74 <os_thread_cleanup+0xc>)
   bba6c:	681b      	ldr	r3, [r3, #0]
   bba6e:	695b      	ldr	r3, [r3, #20]
   bba70:	9301      	str	r3, [sp, #4]
   bba72:	bd08      	pop	{r3, pc}
   bba74:	00030248 	.word	0x00030248

000bba78 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bba78:	b508      	push	{r3, lr}
   bba7a:	4b02      	ldr	r3, [pc, #8]	; (bba84 <os_mutex_create+0xc>)
   bba7c:	681b      	ldr	r3, [r3, #0]
   bba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bba80:	9301      	str	r3, [sp, #4]
   bba82:	bd08      	pop	{r3, pc}
   bba84:	00030248 	.word	0x00030248

000bba88 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bba88:	b508      	push	{r3, lr}
   bba8a:	4b02      	ldr	r3, [pc, #8]	; (bba94 <os_mutex_lock+0xc>)
   bba8c:	681b      	ldr	r3, [r3, #0]
   bba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bba90:	9301      	str	r3, [sp, #4]
   bba92:	bd08      	pop	{r3, pc}
   bba94:	00030248 	.word	0x00030248

000bba98 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bba98:	b508      	push	{r3, lr}
   bba9a:	4b02      	ldr	r3, [pc, #8]	; (bbaa4 <os_mutex_unlock+0xc>)
   bba9c:	681b      	ldr	r3, [r3, #0]
   bba9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbaa0:	9301      	str	r3, [sp, #4]
   bbaa2:	bd08      	pop	{r3, pc}
   bbaa4:	00030248 	.word	0x00030248

000bbaa8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bbaa8:	b508      	push	{r3, lr}
   bbaaa:	4b02      	ldr	r3, [pc, #8]	; (bbab4 <os_mutex_recursive_create+0xc>)
   bbaac:	681b      	ldr	r3, [r3, #0]
   bbaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbab0:	9301      	str	r3, [sp, #4]
   bbab2:	bd08      	pop	{r3, pc}
   bbab4:	00030248 	.word	0x00030248

000bbab8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bbab8:	b508      	push	{r3, lr}
   bbaba:	4b02      	ldr	r3, [pc, #8]	; (bbac4 <os_mutex_recursive_destroy+0xc>)
   bbabc:	681b      	ldr	r3, [r3, #0]
   bbabe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbac0:	9301      	str	r3, [sp, #4]
   bbac2:	bd08      	pop	{r3, pc}
   bbac4:	00030248 	.word	0x00030248

000bbac8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bbac8:	b508      	push	{r3, lr}
   bbaca:	4b02      	ldr	r3, [pc, #8]	; (bbad4 <os_mutex_recursive_lock+0xc>)
   bbacc:	681b      	ldr	r3, [r3, #0]
   bbace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbad0:	9301      	str	r3, [sp, #4]
   bbad2:	bd08      	pop	{r3, pc}
   bbad4:	00030248 	.word	0x00030248

000bbad8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bbad8:	b508      	push	{r3, lr}
   bbada:	4b02      	ldr	r3, [pc, #8]	; (bbae4 <os_mutex_recursive_unlock+0xc>)
   bbadc:	681b      	ldr	r3, [r3, #0]
   bbade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbae0:	9301      	str	r3, [sp, #4]
   bbae2:	bd08      	pop	{r3, pc}
   bbae4:	00030248 	.word	0x00030248

000bbae8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bbae8:	b508      	push	{r3, lr}
   bbaea:	4b02      	ldr	r3, [pc, #8]	; (bbaf4 <os_thread_exit+0xc>)
   bbaec:	681b      	ldr	r3, [r3, #0]
   bbaee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bbaf0:	9301      	str	r3, [sp, #4]
   bbaf2:	bd08      	pop	{r3, pc}
   bbaf4:	00030248 	.word	0x00030248

000bbaf8 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bbaf8:	b508      	push	{r3, lr}
   bbafa:	4b02      	ldr	r3, [pc, #8]	; (bbb04 <HAL_Core_Runtime_Info+0xc>)
   bbafc:	681b      	ldr	r3, [r3, #0]
   bbafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbb00:	9301      	str	r3, [sp, #4]
   bbb02:	bd08      	pop	{r3, pc}
   bbb04:	00030234 	.word	0x00030234

000bbb08 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bbb08:	b508      	push	{r3, lr}
   bbb0a:	4b02      	ldr	r3, [pc, #8]	; (bbb14 <HAL_Feature_Set+0xc>)
   bbb0c:	681b      	ldr	r3, [r3, #0]
   bbb0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbb10:	9301      	str	r3, [sp, #4]
   bbb12:	bd08      	pop	{r3, pc}
   bbb14:	00030234 	.word	0x00030234

000bbb18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bbb18:	b508      	push	{r3, lr}
   bbb1a:	4b02      	ldr	r3, [pc, #8]	; (bbb24 <HAL_RNG_GetRandomNumber+0xc>)
   bbb1c:	681b      	ldr	r3, [r3, #0]
   bbb1e:	685b      	ldr	r3, [r3, #4]
   bbb20:	9301      	str	r3, [sp, #4]
   bbb22:	bd08      	pop	{r3, pc}
   bbb24:	00030218 	.word	0x00030218

000bbb28 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bbb28:	b508      	push	{r3, lr}
   bbb2a:	4b02      	ldr	r3, [pc, #8]	; (bbb34 <HAL_Delay_Milliseconds+0xc>)
   bbb2c:	681b      	ldr	r3, [r3, #0]
   bbb2e:	689b      	ldr	r3, [r3, #8]
   bbb30:	9301      	str	r3, [sp, #4]
   bbb32:	bd08      	pop	{r3, pc}
   bbb34:	00030218 	.word	0x00030218

000bbb38 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bbb38:	b508      	push	{r3, lr}
   bbb3a:	4b02      	ldr	r3, [pc, #8]	; (bbb44 <HAL_Delay_Microseconds+0xc>)
   bbb3c:	681b      	ldr	r3, [r3, #0]
   bbb3e:	68db      	ldr	r3, [r3, #12]
   bbb40:	9301      	str	r3, [sp, #4]
   bbb42:	bd08      	pop	{r3, pc}
   bbb44:	00030218 	.word	0x00030218

000bbb48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bbb48:	b508      	push	{r3, lr}
   bbb4a:	4b02      	ldr	r3, [pc, #8]	; (bbb54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bbb4c:	681b      	ldr	r3, [r3, #0]
   bbb4e:	695b      	ldr	r3, [r3, #20]
   bbb50:	9301      	str	r3, [sp, #4]
   bbb52:	bd08      	pop	{r3, pc}
   bbb54:	00030218 	.word	0x00030218

000bbb58 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bbb58:	b508      	push	{r3, lr}
   bbb5a:	4b02      	ldr	r3, [pc, #8]	; (bbb64 <hal_rtc_time_is_valid+0xc>)
   bbb5c:	681b      	ldr	r3, [r3, #0]
   bbb5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bbb60:	9301      	str	r3, [sp, #4]
   bbb62:	bd08      	pop	{r3, pc}
   bbb64:	00030218 	.word	0x00030218

000bbb68 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bbb68:	b508      	push	{r3, lr}
   bbb6a:	4b02      	ldr	r3, [pc, #8]	; (bbb74 <hal_timer_millis+0xc>)
   bbb6c:	681b      	ldr	r3, [r3, #0]
   bbb6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bbb70:	9301      	str	r3, [sp, #4]
   bbb72:	bd08      	pop	{r3, pc}
   bbb74:	00030218 	.word	0x00030218

000bbb78 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bbb78:	b508      	push	{r3, lr}
   bbb7a:	4b02      	ldr	r3, [pc, #8]	; (bbb84 <hal_rtc_get_time+0xc>)
   bbb7c:	681b      	ldr	r3, [r3, #0]
   bbb7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bbb80:	9301      	str	r3, [sp, #4]
   bbb82:	bd08      	pop	{r3, pc}
   bbb84:	00030218 	.word	0x00030218

000bbb88 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bbb88:	b508      	push	{r3, lr}
   bbb8a:	4b02      	ldr	r3, [pc, #8]	; (bbb94 <hal_rtc_set_time+0xc>)
   bbb8c:	681b      	ldr	r3, [r3, #0]
   bbb8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bbb90:	9301      	str	r3, [sp, #4]
   bbb92:	bd08      	pop	{r3, pc}
   bbb94:	00030218 	.word	0x00030218

000bbb98 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bbb98:	b508      	push	{r3, lr}
   bbb9a:	4b02      	ldr	r3, [pc, #8]	; (bbba4 <HAL_Validate_Pin_Function+0xc>)
   bbb9c:	681b      	ldr	r3, [r3, #0]
   bbb9e:	685b      	ldr	r3, [r3, #4]
   bbba0:	9301      	str	r3, [sp, #4]
   bbba2:	bd08      	pop	{r3, pc}
   bbba4:	0003022c 	.word	0x0003022c

000bbba8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bbba8:	b508      	push	{r3, lr}
   bbbaa:	4b02      	ldr	r3, [pc, #8]	; (bbbb4 <HAL_Pin_Mode+0xc>)
   bbbac:	681b      	ldr	r3, [r3, #0]
   bbbae:	689b      	ldr	r3, [r3, #8]
   bbbb0:	9301      	str	r3, [sp, #4]
   bbbb2:	bd08      	pop	{r3, pc}
   bbbb4:	0003022c 	.word	0x0003022c

000bbbb8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bbbb8:	b508      	push	{r3, lr}
   bbbba:	4b02      	ldr	r3, [pc, #8]	; (bbbc4 <HAL_Get_Pin_Mode+0xc>)
   bbbbc:	681b      	ldr	r3, [r3, #0]
   bbbbe:	68db      	ldr	r3, [r3, #12]
   bbbc0:	9301      	str	r3, [sp, #4]
   bbbc2:	bd08      	pop	{r3, pc}
   bbbc4:	0003022c 	.word	0x0003022c

000bbbc8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bbbc8:	b508      	push	{r3, lr}
   bbbca:	4b02      	ldr	r3, [pc, #8]	; (bbbd4 <HAL_GPIO_Write+0xc>)
   bbbcc:	681b      	ldr	r3, [r3, #0]
   bbbce:	691b      	ldr	r3, [r3, #16]
   bbbd0:	9301      	str	r3, [sp, #4]
   bbbd2:	bd08      	pop	{r3, pc}
   bbbd4:	0003022c 	.word	0x0003022c

000bbbd8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bbbd8:	b508      	push	{r3, lr}
   bbbda:	4b02      	ldr	r3, [pc, #8]	; (bbbe4 <HAL_GPIO_Read+0xc>)
   bbbdc:	681b      	ldr	r3, [r3, #0]
   bbbde:	695b      	ldr	r3, [r3, #20]
   bbbe0:	9301      	str	r3, [sp, #4]
   bbbe2:	bd08      	pop	{r3, pc}
   bbbe4:	0003022c 	.word	0x0003022c

000bbbe8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bbbe8:	b508      	push	{r3, lr}
   bbbea:	4b02      	ldr	r3, [pc, #8]	; (bbbf4 <HAL_Interrupts_Attach+0xc>)
   bbbec:	681b      	ldr	r3, [r3, #0]
   bbbee:	699b      	ldr	r3, [r3, #24]
   bbbf0:	9301      	str	r3, [sp, #4]
   bbbf2:	bd08      	pop	{r3, pc}
   bbbf4:	0003022c 	.word	0x0003022c

000bbbf8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bbbf8:	b508      	push	{r3, lr}
   bbbfa:	4b02      	ldr	r3, [pc, #8]	; (bbc04 <HAL_Interrupts_Detach+0xc>)
   bbbfc:	681b      	ldr	r3, [r3, #0]
   bbbfe:	69db      	ldr	r3, [r3, #28]
   bbc00:	9301      	str	r3, [sp, #4]
   bbc02:	bd08      	pop	{r3, pc}
   bbc04:	0003022c 	.word	0x0003022c

000bbc08 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bbc08:	b508      	push	{r3, lr}
   bbc0a:	4b02      	ldr	r3, [pc, #8]	; (bbc14 <hal_adc_read+0xc>)
   bbc0c:	681b      	ldr	r3, [r3, #0]
   bbc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbc10:	9301      	str	r3, [sp, #4]
   bbc12:	bd08      	pop	{r3, pc}
   bbc14:	0003022c 	.word	0x0003022c

000bbc18 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bbc18:	b508      	push	{r3, lr}
   bbc1a:	4b02      	ldr	r3, [pc, #8]	; (bbc24 <hal_i2c_begin+0xc>)
   bbc1c:	681b      	ldr	r3, [r3, #0]
   bbc1e:	68db      	ldr	r3, [r3, #12]
   bbc20:	9301      	str	r3, [sp, #4]
   bbc22:	bd08      	pop	{r3, pc}
   bbc24:	00030228 	.word	0x00030228

000bbc28 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bbc28:	b508      	push	{r3, lr}
   bbc2a:	4b02      	ldr	r3, [pc, #8]	; (bbc34 <hal_i2c_begin_transmission+0xc>)
   bbc2c:	681b      	ldr	r3, [r3, #0]
   bbc2e:	699b      	ldr	r3, [r3, #24]
   bbc30:	9301      	str	r3, [sp, #4]
   bbc32:	bd08      	pop	{r3, pc}
   bbc34:	00030228 	.word	0x00030228

000bbc38 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bbc38:	b508      	push	{r3, lr}
   bbc3a:	4b02      	ldr	r3, [pc, #8]	; (bbc44 <hal_i2c_end_transmission+0xc>)
   bbc3c:	681b      	ldr	r3, [r3, #0]
   bbc3e:	69db      	ldr	r3, [r3, #28]
   bbc40:	9301      	str	r3, [sp, #4]
   bbc42:	bd08      	pop	{r3, pc}
   bbc44:	00030228 	.word	0x00030228

000bbc48 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bbc48:	b508      	push	{r3, lr}
   bbc4a:	4b02      	ldr	r3, [pc, #8]	; (bbc54 <hal_i2c_write+0xc>)
   bbc4c:	681b      	ldr	r3, [r3, #0]
   bbc4e:	6a1b      	ldr	r3, [r3, #32]
   bbc50:	9301      	str	r3, [sp, #4]
   bbc52:	bd08      	pop	{r3, pc}
   bbc54:	00030228 	.word	0x00030228

000bbc58 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bbc58:	b508      	push	{r3, lr}
   bbc5a:	4b02      	ldr	r3, [pc, #8]	; (bbc64 <hal_i2c_available+0xc>)
   bbc5c:	681b      	ldr	r3, [r3, #0]
   bbc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbc60:	9301      	str	r3, [sp, #4]
   bbc62:	bd08      	pop	{r3, pc}
   bbc64:	00030228 	.word	0x00030228

000bbc68 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bbc68:	b508      	push	{r3, lr}
   bbc6a:	4b02      	ldr	r3, [pc, #8]	; (bbc74 <hal_i2c_read+0xc>)
   bbc6c:	681b      	ldr	r3, [r3, #0]
   bbc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbc70:	9301      	str	r3, [sp, #4]
   bbc72:	bd08      	pop	{r3, pc}
   bbc74:	00030228 	.word	0x00030228

000bbc78 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bbc78:	b508      	push	{r3, lr}
   bbc7a:	4b02      	ldr	r3, [pc, #8]	; (bbc84 <hal_i2c_peek+0xc>)
   bbc7c:	681b      	ldr	r3, [r3, #0]
   bbc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbc80:	9301      	str	r3, [sp, #4]
   bbc82:	bd08      	pop	{r3, pc}
   bbc84:	00030228 	.word	0x00030228

000bbc88 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bbc88:	b508      	push	{r3, lr}
   bbc8a:	4b02      	ldr	r3, [pc, #8]	; (bbc94 <hal_i2c_flush+0xc>)
   bbc8c:	681b      	ldr	r3, [r3, #0]
   bbc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbc90:	9301      	str	r3, [sp, #4]
   bbc92:	bd08      	pop	{r3, pc}
   bbc94:	00030228 	.word	0x00030228

000bbc98 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bbc98:	b508      	push	{r3, lr}
   bbc9a:	4b02      	ldr	r3, [pc, #8]	; (bbca4 <hal_i2c_is_enabled+0xc>)
   bbc9c:	681b      	ldr	r3, [r3, #0]
   bbc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bbca0:	9301      	str	r3, [sp, #4]
   bbca2:	bd08      	pop	{r3, pc}
   bbca4:	00030228 	.word	0x00030228

000bbca8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bbca8:	b508      	push	{r3, lr}
   bbcaa:	4b02      	ldr	r3, [pc, #8]	; (bbcb4 <hal_i2c_init+0xc>)
   bbcac:	681b      	ldr	r3, [r3, #0]
   bbcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbcb0:	9301      	str	r3, [sp, #4]
   bbcb2:	bd08      	pop	{r3, pc}
   bbcb4:	00030228 	.word	0x00030228

000bbcb8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bbcb8:	b508      	push	{r3, lr}
   bbcba:	4b02      	ldr	r3, [pc, #8]	; (bbcc4 <hal_i2c_lock+0xc>)
   bbcbc:	681b      	ldr	r3, [r3, #0]
   bbcbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bbcc0:	9301      	str	r3, [sp, #4]
   bbcc2:	bd08      	pop	{r3, pc}
   bbcc4:	00030228 	.word	0x00030228

000bbcc8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bbcc8:	b508      	push	{r3, lr}
   bbcca:	4b02      	ldr	r3, [pc, #8]	; (bbcd4 <hal_i2c_unlock+0xc>)
   bbccc:	681b      	ldr	r3, [r3, #0]
   bbcce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bbcd0:	9301      	str	r3, [sp, #4]
   bbcd2:	bd08      	pop	{r3, pc}
   bbcd4:	00030228 	.word	0x00030228

000bbcd8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bbcd8:	b508      	push	{r3, lr}
   bbcda:	4b02      	ldr	r3, [pc, #8]	; (bbce4 <hal_i2c_request_ex+0xc>)
   bbcdc:	681b      	ldr	r3, [r3, #0]
   bbcde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bbce0:	9301      	str	r3, [sp, #4]
   bbce2:	bd08      	pop	{r3, pc}
   bbce4:	00030228 	.word	0x00030228

000bbce8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bbce8:	b508      	push	{r3, lr}
   bbcea:	4b02      	ldr	r3, [pc, #8]	; (bbcf4 <inet_inet_ntop+0xc>)
   bbcec:	681b      	ldr	r3, [r3, #0]
   bbcee:	695b      	ldr	r3, [r3, #20]
   bbcf0:	9301      	str	r3, [sp, #4]
   bbcf2:	bd08      	pop	{r3, pc}
   bbcf4:	00030264 	.word	0x00030264

000bbcf8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bbcf8:	b508      	push	{r3, lr}
   bbcfa:	4b02      	ldr	r3, [pc, #8]	; (bbd04 <netdb_freeaddrinfo+0xc>)
   bbcfc:	681b      	ldr	r3, [r3, #0]
   bbcfe:	689b      	ldr	r3, [r3, #8]
   bbd00:	9301      	str	r3, [sp, #4]
   bbd02:	bd08      	pop	{r3, pc}
   bbd04:	00030268 	.word	0x00030268

000bbd08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bbd08:	b508      	push	{r3, lr}
   bbd0a:	4b02      	ldr	r3, [pc, #8]	; (bbd14 <netdb_getaddrinfo+0xc>)
   bbd0c:	681b      	ldr	r3, [r3, #0]
   bbd0e:	68db      	ldr	r3, [r3, #12]
   bbd10:	9301      	str	r3, [sp, #4]
   bbd12:	bd08      	pop	{r3, pc}
   bbd14:	00030268 	.word	0x00030268

000bbd18 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bbd18:	b508      	push	{r3, lr}
   bbd1a:	4b02      	ldr	r3, [pc, #8]	; (bbd24 <hal_spi_begin+0xc>)
   bbd1c:	681b      	ldr	r3, [r3, #0]
   bbd1e:	681b      	ldr	r3, [r3, #0]
   bbd20:	9301      	str	r3, [sp, #4]
   bbd22:	bd08      	pop	{r3, pc}
   bbd24:	00030230 	.word	0x00030230

000bbd28 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bbd28:	b508      	push	{r3, lr}
   bbd2a:	4b02      	ldr	r3, [pc, #8]	; (bbd34 <hal_spi_end+0xc>)
   bbd2c:	681b      	ldr	r3, [r3, #0]
   bbd2e:	685b      	ldr	r3, [r3, #4]
   bbd30:	9301      	str	r3, [sp, #4]
   bbd32:	bd08      	pop	{r3, pc}
   bbd34:	00030230 	.word	0x00030230

000bbd38 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bbd38:	b508      	push	{r3, lr}
   bbd3a:	4b02      	ldr	r3, [pc, #8]	; (bbd44 <hal_spi_transfer+0xc>)
   bbd3c:	681b      	ldr	r3, [r3, #0]
   bbd3e:	695b      	ldr	r3, [r3, #20]
   bbd40:	9301      	str	r3, [sp, #4]
   bbd42:	bd08      	pop	{r3, pc}
   bbd44:	00030230 	.word	0x00030230

000bbd48 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bbd48:	b508      	push	{r3, lr}
   bbd4a:	4b02      	ldr	r3, [pc, #8]	; (bbd54 <hal_spi_init+0xc>)
   bbd4c:	681b      	ldr	r3, [r3, #0]
   bbd4e:	69db      	ldr	r3, [r3, #28]
   bbd50:	9301      	str	r3, [sp, #4]
   bbd52:	bd08      	pop	{r3, pc}
   bbd54:	00030230 	.word	0x00030230

000bbd58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bbd58:	b508      	push	{r3, lr}
   bbd5a:	4b02      	ldr	r3, [pc, #8]	; (bbd64 <hal_spi_is_enabled+0xc>)
   bbd5c:	681b      	ldr	r3, [r3, #0]
   bbd5e:	6a1b      	ldr	r3, [r3, #32]
   bbd60:	9301      	str	r3, [sp, #4]
   bbd62:	bd08      	pop	{r3, pc}
   bbd64:	00030230 	.word	0x00030230

000bbd68 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bbd68:	b508      	push	{r3, lr}
   bbd6a:	4b02      	ldr	r3, [pc, #8]	; (bbd74 <hal_spi_info+0xc>)
   bbd6c:	681b      	ldr	r3, [r3, #0]
   bbd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbd70:	9301      	str	r3, [sp, #4]
   bbd72:	bd08      	pop	{r3, pc}
   bbd74:	00030230 	.word	0x00030230

000bbd78 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bbd78:	b508      	push	{r3, lr}
   bbd7a:	4b02      	ldr	r3, [pc, #8]	; (bbd84 <hal_spi_set_settings+0xc>)
   bbd7c:	681b      	ldr	r3, [r3, #0]
   bbd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bbd80:	9301      	str	r3, [sp, #4]
   bbd82:	bd08      	pop	{r3, pc}
   bbd84:	00030230 	.word	0x00030230

000bbd88 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bbd88:	b508      	push	{r3, lr}
   bbd8a:	4b02      	ldr	r3, [pc, #8]	; (bbd94 <hal_spi_acquire+0xc>)
   bbd8c:	681b      	ldr	r3, [r3, #0]
   bbd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbd90:	9301      	str	r3, [sp, #4]
   bbd92:	bd08      	pop	{r3, pc}
   bbd94:	00030230 	.word	0x00030230

000bbd98 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bbd98:	b508      	push	{r3, lr}
   bbd9a:	4b02      	ldr	r3, [pc, #8]	; (bbda4 <hal_spi_release+0xc>)
   bbd9c:	681b      	ldr	r3, [r3, #0]
   bbd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bbda0:	9301      	str	r3, [sp, #4]
   bbda2:	bd08      	pop	{r3, pc}
   bbda4:	00030230 	.word	0x00030230

000bbda8 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bbda8:	b508      	push	{r3, lr}
   bbdaa:	4b02      	ldr	r3, [pc, #8]	; (bbdb4 <_open+0xc>)
   bbdac:	681b      	ldr	r3, [r3, #0]
   bbdae:	681b      	ldr	r3, [r3, #0]
   bbdb0:	9301      	str	r3, [sp, #4]
   bbdb2:	bd08      	pop	{r3, pc}
   bbdb4:	00030284 	.word	0x00030284

000bbdb8 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bbdb8:	b508      	push	{r3, lr}
   bbdba:	4b02      	ldr	r3, [pc, #8]	; (bbdc4 <_write+0xc>)
   bbdbc:	681b      	ldr	r3, [r3, #0]
   bbdbe:	685b      	ldr	r3, [r3, #4]
   bbdc0:	9301      	str	r3, [sp, #4]
   bbdc2:	bd08      	pop	{r3, pc}
   bbdc4:	00030284 	.word	0x00030284

000bbdc8 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bbdc8:	b508      	push	{r3, lr}
   bbdca:	4b02      	ldr	r3, [pc, #8]	; (bbdd4 <_read+0xc>)
   bbdcc:	681b      	ldr	r3, [r3, #0]
   bbdce:	689b      	ldr	r3, [r3, #8]
   bbdd0:	9301      	str	r3, [sp, #4]
   bbdd2:	bd08      	pop	{r3, pc}
   bbdd4:	00030284 	.word	0x00030284

000bbdd8 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bbdd8:	b508      	push	{r3, lr}
   bbdda:	4b02      	ldr	r3, [pc, #8]	; (bbde4 <_close+0xc>)
   bbddc:	681b      	ldr	r3, [r3, #0]
   bbdde:	68db      	ldr	r3, [r3, #12]
   bbde0:	9301      	str	r3, [sp, #4]
   bbde2:	bd08      	pop	{r3, pc}
   bbde4:	00030284 	.word	0x00030284

000bbde8 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bbde8:	b508      	push	{r3, lr}
   bbdea:	4b02      	ldr	r3, [pc, #8]	; (bbdf4 <_fstat+0xc>)
   bbdec:	681b      	ldr	r3, [r3, #0]
   bbdee:	695b      	ldr	r3, [r3, #20]
   bbdf0:	9301      	str	r3, [sp, #4]
   bbdf2:	bd08      	pop	{r3, pc}
   bbdf4:	00030284 	.word	0x00030284

000bbdf8 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bbdf8:	b508      	push	{r3, lr}
   bbdfa:	4b02      	ldr	r3, [pc, #8]	; (bbe04 <_lseek+0xc>)
   bbdfc:	681b      	ldr	r3, [r3, #0]
   bbdfe:	6a1b      	ldr	r3, [r3, #32]
   bbe00:	9301      	str	r3, [sp, #4]
   bbe02:	bd08      	pop	{r3, pc}
   bbe04:	00030284 	.word	0x00030284

000bbe08 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bbe08:	b508      	push	{r3, lr}
   bbe0a:	4b02      	ldr	r3, [pc, #8]	; (bbe14 <stat+0xc>)
   bbe0c:	681b      	ldr	r3, [r3, #0]
   bbe0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbe10:	9301      	str	r3, [sp, #4]
   bbe12:	bd08      	pop	{r3, pc}
   bbe14:	00030284 	.word	0x00030284

000bbe18 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bbe18:	b508      	push	{r3, lr}
   bbe1a:	4b02      	ldr	r3, [pc, #8]	; (bbe24 <mkdir+0xc>)
   bbe1c:	681b      	ldr	r3, [r3, #0]
   bbe1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbe20:	9301      	str	r3, [sp, #4]
   bbe22:	bd08      	pop	{r3, pc}
   bbe24:	00030284 	.word	0x00030284

000bbe28 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bbe28:	b508      	push	{r3, lr}
   bbe2a:	4b02      	ldr	r3, [pc, #8]	; (bbe34 <_unlink+0xc>)
   bbe2c:	681b      	ldr	r3, [r3, #0]
   bbe2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bbe30:	9301      	str	r3, [sp, #4]
   bbe32:	bd08      	pop	{r3, pc}
   bbe34:	00030284 	.word	0x00030284

000bbe38 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bbe38:	b508      	push	{r3, lr}
   bbe3a:	4b02      	ldr	r3, [pc, #8]	; (bbe44 <opendir+0xc>)
   bbe3c:	681b      	ldr	r3, [r3, #0]
   bbe3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bbe40:	9301      	str	r3, [sp, #4]
   bbe42:	bd08      	pop	{r3, pc}
   bbe44:	00030284 	.word	0x00030284

000bbe48 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bbe48:	b508      	push	{r3, lr}
   bbe4a:	4b02      	ldr	r3, [pc, #8]	; (bbe54 <readdir+0xc>)
   bbe4c:	681b      	ldr	r3, [r3, #0]
   bbe4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbe50:	9301      	str	r3, [sp, #4]
   bbe52:	bd08      	pop	{r3, pc}
   bbe54:	00030284 	.word	0x00030284

000bbe58 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bbe58:	b508      	push	{r3, lr}
   bbe5a:	4b02      	ldr	r3, [pc, #8]	; (bbe64 <closedir+0xc>)
   bbe5c:	681b      	ldr	r3, [r3, #0]
   bbe5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbe60:	9301      	str	r3, [sp, #4]
   bbe62:	bd08      	pop	{r3, pc}
   bbe64:	00030284 	.word	0x00030284

000bbe68 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bbe68:	b508      	push	{r3, lr}
   bbe6a:	4b02      	ldr	r3, [pc, #8]	; (bbe74 <hal_usart_end+0xc>)
   bbe6c:	681b      	ldr	r3, [r3, #0]
   bbe6e:	689b      	ldr	r3, [r3, #8]
   bbe70:	9301      	str	r3, [sp, #4]
   bbe72:	bd08      	pop	{r3, pc}
   bbe74:	0003023c 	.word	0x0003023c

000bbe78 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bbe78:	b508      	push	{r3, lr}
   bbe7a:	4b02      	ldr	r3, [pc, #8]	; (bbe84 <hal_usart_write+0xc>)
   bbe7c:	681b      	ldr	r3, [r3, #0]
   bbe7e:	68db      	ldr	r3, [r3, #12]
   bbe80:	9301      	str	r3, [sp, #4]
   bbe82:	bd08      	pop	{r3, pc}
   bbe84:	0003023c 	.word	0x0003023c

000bbe88 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bbe88:	b508      	push	{r3, lr}
   bbe8a:	4b02      	ldr	r3, [pc, #8]	; (bbe94 <hal_usart_available+0xc>)
   bbe8c:	681b      	ldr	r3, [r3, #0]
   bbe8e:	691b      	ldr	r3, [r3, #16]
   bbe90:	9301      	str	r3, [sp, #4]
   bbe92:	bd08      	pop	{r3, pc}
   bbe94:	0003023c 	.word	0x0003023c

000bbe98 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bbe98:	b508      	push	{r3, lr}
   bbe9a:	4b02      	ldr	r3, [pc, #8]	; (bbea4 <hal_usart_read+0xc>)
   bbe9c:	681b      	ldr	r3, [r3, #0]
   bbe9e:	695b      	ldr	r3, [r3, #20]
   bbea0:	9301      	str	r3, [sp, #4]
   bbea2:	bd08      	pop	{r3, pc}
   bbea4:	0003023c 	.word	0x0003023c

000bbea8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bbea8:	b508      	push	{r3, lr}
   bbeaa:	4b02      	ldr	r3, [pc, #8]	; (bbeb4 <hal_usart_peek+0xc>)
   bbeac:	681b      	ldr	r3, [r3, #0]
   bbeae:	699b      	ldr	r3, [r3, #24]
   bbeb0:	9301      	str	r3, [sp, #4]
   bbeb2:	bd08      	pop	{r3, pc}
   bbeb4:	0003023c 	.word	0x0003023c

000bbeb8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bbeb8:	b508      	push	{r3, lr}
   bbeba:	4b02      	ldr	r3, [pc, #8]	; (bbec4 <hal_usart_flush+0xc>)
   bbebc:	681b      	ldr	r3, [r3, #0]
   bbebe:	69db      	ldr	r3, [r3, #28]
   bbec0:	9301      	str	r3, [sp, #4]
   bbec2:	bd08      	pop	{r3, pc}
   bbec4:	0003023c 	.word	0x0003023c

000bbec8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bbec8:	b508      	push	{r3, lr}
   bbeca:	4b02      	ldr	r3, [pc, #8]	; (bbed4 <hal_usart_is_enabled+0xc>)
   bbecc:	681b      	ldr	r3, [r3, #0]
   bbece:	6a1b      	ldr	r3, [r3, #32]
   bbed0:	9301      	str	r3, [sp, #4]
   bbed2:	bd08      	pop	{r3, pc}
   bbed4:	0003023c 	.word	0x0003023c

000bbed8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bbed8:	b508      	push	{r3, lr}
   bbeda:	4b02      	ldr	r3, [pc, #8]	; (bbee4 <hal_usart_available_data_for_write+0xc>)
   bbedc:	681b      	ldr	r3, [r3, #0]
   bbede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbee0:	9301      	str	r3, [sp, #4]
   bbee2:	bd08      	pop	{r3, pc}
   bbee4:	0003023c 	.word	0x0003023c

000bbee8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bbee8:	b508      	push	{r3, lr}
   bbeea:	4b02      	ldr	r3, [pc, #8]	; (bbef4 <hal_usart_begin_config+0xc>)
   bbeec:	681b      	ldr	r3, [r3, #0]
   bbeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbef0:	9301      	str	r3, [sp, #4]
   bbef2:	bd08      	pop	{r3, pc}
   bbef4:	0003023c 	.word	0x0003023c

000bbef8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bbef8:	b508      	push	{r3, lr}
   bbefa:	4b02      	ldr	r3, [pc, #8]	; (bbf04 <hal_usart_init_ex+0xc>)
   bbefc:	681b      	ldr	r3, [r3, #0]
   bbefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bbf00:	9301      	str	r3, [sp, #4]
   bbf02:	bd08      	pop	{r3, pc}
   bbf04:	0003023c 	.word	0x0003023c

000bbf08 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bbf08:	b508      	push	{r3, lr}
   bbf0a:	4b02      	ldr	r3, [pc, #8]	; (bbf14 <HAL_USB_USART_Init+0xc>)
   bbf0c:	681b      	ldr	r3, [r3, #0]
   bbf0e:	681b      	ldr	r3, [r3, #0]
   bbf10:	9301      	str	r3, [sp, #4]
   bbf12:	bd08      	pop	{r3, pc}
   bbf14:	0003024c 	.word	0x0003024c

000bbf18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bbf18:	b508      	push	{r3, lr}
   bbf1a:	4b02      	ldr	r3, [pc, #8]	; (bbf24 <HAL_USB_USART_Begin+0xc>)
   bbf1c:	681b      	ldr	r3, [r3, #0]
   bbf1e:	685b      	ldr	r3, [r3, #4]
   bbf20:	9301      	str	r3, [sp, #4]
   bbf22:	bd08      	pop	{r3, pc}
   bbf24:	0003024c 	.word	0x0003024c

000bbf28 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bbf28:	b508      	push	{r3, lr}
   bbf2a:	4b02      	ldr	r3, [pc, #8]	; (bbf34 <HAL_USB_USART_End+0xc>)
   bbf2c:	681b      	ldr	r3, [r3, #0]
   bbf2e:	689b      	ldr	r3, [r3, #8]
   bbf30:	9301      	str	r3, [sp, #4]
   bbf32:	bd08      	pop	{r3, pc}
   bbf34:	0003024c 	.word	0x0003024c

000bbf38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bbf38:	b508      	push	{r3, lr}
   bbf3a:	4b02      	ldr	r3, [pc, #8]	; (bbf44 <HAL_USB_USART_Available_Data+0xc>)
   bbf3c:	681b      	ldr	r3, [r3, #0]
   bbf3e:	691b      	ldr	r3, [r3, #16]
   bbf40:	9301      	str	r3, [sp, #4]
   bbf42:	bd08      	pop	{r3, pc}
   bbf44:	0003024c 	.word	0x0003024c

000bbf48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bbf48:	b508      	push	{r3, lr}
   bbf4a:	4b02      	ldr	r3, [pc, #8]	; (bbf54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bbf4c:	681b      	ldr	r3, [r3, #0]
   bbf4e:	695b      	ldr	r3, [r3, #20]
   bbf50:	9301      	str	r3, [sp, #4]
   bbf52:	bd08      	pop	{r3, pc}
   bbf54:	0003024c 	.word	0x0003024c

000bbf58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bbf58:	b508      	push	{r3, lr}
   bbf5a:	4b02      	ldr	r3, [pc, #8]	; (bbf64 <HAL_USB_USART_Receive_Data+0xc>)
   bbf5c:	681b      	ldr	r3, [r3, #0]
   bbf5e:	699b      	ldr	r3, [r3, #24]
   bbf60:	9301      	str	r3, [sp, #4]
   bbf62:	bd08      	pop	{r3, pc}
   bbf64:	0003024c 	.word	0x0003024c

000bbf68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bbf68:	b508      	push	{r3, lr}
   bbf6a:	4b02      	ldr	r3, [pc, #8]	; (bbf74 <HAL_USB_USART_Send_Data+0xc>)
   bbf6c:	681b      	ldr	r3, [r3, #0]
   bbf6e:	69db      	ldr	r3, [r3, #28]
   bbf70:	9301      	str	r3, [sp, #4]
   bbf72:	bd08      	pop	{r3, pc}
   bbf74:	0003024c 	.word	0x0003024c

000bbf78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bbf78:	b508      	push	{r3, lr}
   bbf7a:	4b02      	ldr	r3, [pc, #8]	; (bbf84 <HAL_USB_USART_Flush_Data+0xc>)
   bbf7c:	681b      	ldr	r3, [r3, #0]
   bbf7e:	6a1b      	ldr	r3, [r3, #32]
   bbf80:	9301      	str	r3, [sp, #4]
   bbf82:	bd08      	pop	{r3, pc}
   bbf84:	0003024c 	.word	0x0003024c

000bbf88 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bbf88:	b508      	push	{r3, lr}
   bbf8a:	4b02      	ldr	r3, [pc, #8]	; (bbf94 <HAL_USB_USART_Is_Connected+0xc>)
   bbf8c:	681b      	ldr	r3, [r3, #0]
   bbf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbf90:	9301      	str	r3, [sp, #4]
   bbf92:	bd08      	pop	{r3, pc}
   bbf94:	0003024c 	.word	0x0003024c

000bbf98 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bbf98:	b508      	push	{r3, lr}
   bbf9a:	4b02      	ldr	r3, [pc, #8]	; (bbfa4 <panic_+0xc>)
   bbf9c:	681b      	ldr	r3, [r3, #0]
   bbf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bbfa0:	9301      	str	r3, [sp, #4]
   bbfa2:	bd08      	pop	{r3, pc}
   bbfa4:	00030260 	.word	0x00030260

000bbfa8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bbfa8:	b508      	push	{r3, lr}
   bbfaa:	4b02      	ldr	r3, [pc, #8]	; (bbfb4 <log_message+0xc>)
   bbfac:	681b      	ldr	r3, [r3, #0]
   bbfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bbfb0:	9301      	str	r3, [sp, #4]
   bbfb2:	bd08      	pop	{r3, pc}
   bbfb4:	00030260 	.word	0x00030260

000bbfb8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bbfb8:	b508      	push	{r3, lr}
   bbfba:	4b02      	ldr	r3, [pc, #8]	; (bbfc4 <log_message_v+0xc>)
   bbfbc:	681b      	ldr	r3, [r3, #0]
   bbfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bbfc0:	9301      	str	r3, [sp, #4]
   bbfc2:	bd08      	pop	{r3, pc}
   bbfc4:	00030260 	.word	0x00030260

000bbfc8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bbfc8:	b508      	push	{r3, lr}
   bbfca:	4b02      	ldr	r3, [pc, #8]	; (bbfd4 <log_level_name+0xc>)
   bbfcc:	681b      	ldr	r3, [r3, #0]
   bbfce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bbfd0:	9301      	str	r3, [sp, #4]
   bbfd2:	bd08      	pop	{r3, pc}
   bbfd4:	00030260 	.word	0x00030260

000bbfd8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bbfd8:	b508      	push	{r3, lr}
   bbfda:	4b02      	ldr	r3, [pc, #8]	; (bbfe4 <log_set_callbacks+0xc>)
   bbfdc:	681b      	ldr	r3, [r3, #0]
   bbfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bbfe0:	9301      	str	r3, [sp, #4]
   bbfe2:	bd08      	pop	{r3, pc}
   bbfe4:	00030260 	.word	0x00030260

000bbfe8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bbfe8:	b508      	push	{r3, lr}
   bbfea:	4b03      	ldr	r3, [pc, #12]	; (bbff8 <diag_get_source+0x10>)
   bbfec:	681b      	ldr	r3, [r3, #0]
   bbfee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bbff2:	9301      	str	r3, [sp, #4]
   bbff4:	bd08      	pop	{r3, pc}
   bbff6:	0000      	.short	0x0000
   bbff8:	00030260 	.word	0x00030260

000bbffc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bbffc:	b508      	push	{r3, lr}
   bbffe:	4b02      	ldr	r3, [pc, #8]	; (bc008 <system_mode+0xc>)
   bc000:	681b      	ldr	r3, [r3, #0]
   bc002:	681b      	ldr	r3, [r3, #0]
   bc004:	9301      	str	r3, [sp, #4]
   bc006:	bd08      	pop	{r3, pc}
   bc008:	00030220 	.word	0x00030220

000bc00c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc00c:	b508      	push	{r3, lr}
   bc00e:	4b02      	ldr	r3, [pc, #8]	; (bc018 <set_system_mode+0xc>)
   bc010:	681b      	ldr	r3, [r3, #0]
   bc012:	685b      	ldr	r3, [r3, #4]
   bc014:	9301      	str	r3, [sp, #4]
   bc016:	bd08      	pop	{r3, pc}
   bc018:	00030220 	.word	0x00030220

000bc01c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bc01c:	b508      	push	{r3, lr}
   bc01e:	4b02      	ldr	r3, [pc, #8]	; (bc028 <system_delay_ms+0xc>)
   bc020:	681b      	ldr	r3, [r3, #0]
   bc022:	695b      	ldr	r3, [r3, #20]
   bc024:	9301      	str	r3, [sp, #4]
   bc026:	bd08      	pop	{r3, pc}
   bc028:	00030220 	.word	0x00030220

000bc02c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bc02c:	b508      	push	{r3, lr}
   bc02e:	4b02      	ldr	r3, [pc, #8]	; (bc038 <system_subscribe_event+0xc>)
   bc030:	681b      	ldr	r3, [r3, #0]
   bc032:	6a1b      	ldr	r3, [r3, #32]
   bc034:	9301      	str	r3, [sp, #4]
   bc036:	bd08      	pop	{r3, pc}
   bc038:	00030220 	.word	0x00030220

000bc03c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bc03c:	b508      	push	{r3, lr}
   bc03e:	4b02      	ldr	r3, [pc, #8]	; (bc048 <system_thread_set_state+0xc>)
   bc040:	681b      	ldr	r3, [r3, #0]
   bc042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc044:	9301      	str	r3, [sp, #4]
   bc046:	bd08      	pop	{r3, pc}
   bc048:	00030220 	.word	0x00030220

000bc04c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc04c:	b508      	push	{r3, lr}
   bc04e:	4b02      	ldr	r3, [pc, #8]	; (bc058 <application_thread_current+0xc>)
   bc050:	681b      	ldr	r3, [r3, #0]
   bc052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc054:	9301      	str	r3, [sp, #4]
   bc056:	bd08      	pop	{r3, pc}
   bc058:	00030220 	.word	0x00030220

000bc05c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc05c:	b508      	push	{r3, lr}
   bc05e:	4b02      	ldr	r3, [pc, #8]	; (bc068 <application_thread_invoke+0xc>)
   bc060:	681b      	ldr	r3, [r3, #0]
   bc062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc064:	9301      	str	r3, [sp, #4]
   bc066:	bd08      	pop	{r3, pc}
   bc068:	00030220 	.word	0x00030220

000bc06c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bc06c:	b508      	push	{r3, lr}
   bc06e:	4b02      	ldr	r3, [pc, #8]	; (bc078 <system_thread_get_state+0xc>)
   bc070:	681b      	ldr	r3, [r3, #0]
   bc072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc074:	9301      	str	r3, [sp, #4]
   bc076:	bd08      	pop	{r3, pc}
   bc078:	00030220 	.word	0x00030220

000bc07c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bc07c:	b508      	push	{r3, lr}
   bc07e:	4b02      	ldr	r3, [pc, #8]	; (bc088 <system_notify_time_changed+0xc>)
   bc080:	681b      	ldr	r3, [r3, #0]
   bc082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc084:	9301      	str	r3, [sp, #4]
   bc086:	bd08      	pop	{r3, pc}
   bc088:	00030220 	.word	0x00030220

000bc08c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc08c:	b508      	push	{r3, lr}
   bc08e:	4b03      	ldr	r3, [pc, #12]	; (bc09c <system_ctrl_set_app_request_handler+0x10>)
   bc090:	681b      	ldr	r3, [r3, #0]
   bc092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc096:	9301      	str	r3, [sp, #4]
   bc098:	bd08      	pop	{r3, pc}
   bc09a:	0000      	.short	0x0000
   bc09c:	00030220 	.word	0x00030220

000bc0a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc0a0:	b508      	push	{r3, lr}
   bc0a2:	4b03      	ldr	r3, [pc, #12]	; (bc0b0 <system_ctrl_set_result+0x10>)
   bc0a4:	681b      	ldr	r3, [r3, #0]
   bc0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc0aa:	9301      	str	r3, [sp, #4]
   bc0ac:	bd08      	pop	{r3, pc}
   bc0ae:	0000      	.short	0x0000
   bc0b0:	00030220 	.word	0x00030220

000bc0b4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bc0b4:	b508      	push	{r3, lr}
   bc0b6:	4b03      	ldr	r3, [pc, #12]	; (bc0c4 <system_power_management_set_config+0x10>)
   bc0b8:	681b      	ldr	r3, [r3, #0]
   bc0ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bc0be:	9301      	str	r3, [sp, #4]
   bc0c0:	bd08      	pop	{r3, pc}
   bc0c2:	0000      	.short	0x0000
   bc0c4:	00030220 	.word	0x00030220

000bc0c8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bc0c8:	b508      	push	{r3, lr}
   bc0ca:	4b03      	ldr	r3, [pc, #12]	; (bc0d8 <system_sleep_ext+0x10>)
   bc0cc:	681b      	ldr	r3, [r3, #0]
   bc0ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bc0d2:	9301      	str	r3, [sp, #4]
   bc0d4:	bd08      	pop	{r3, pc}
   bc0d6:	0000      	.short	0x0000
   bc0d8:	00030220 	.word	0x00030220

000bc0dc <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bc0dc:	b508      	push	{r3, lr}
   bc0de:	4b03      	ldr	r3, [pc, #12]	; (bc0ec <system_reset+0x10>)
   bc0e0:	681b      	ldr	r3, [r3, #0]
   bc0e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bc0e6:	9301      	str	r3, [sp, #4]
   bc0e8:	bd08      	pop	{r3, pc}
   bc0ea:	0000      	.short	0x0000
   bc0ec:	00030220 	.word	0x00030220

000bc0f0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bc0f0:	b508      	push	{r3, lr}
   bc0f2:	4b02      	ldr	r3, [pc, #8]	; (bc0fc <spark_variable+0xc>)
   bc0f4:	681b      	ldr	r3, [r3, #0]
   bc0f6:	681b      	ldr	r3, [r3, #0]
   bc0f8:	9301      	str	r3, [sp, #4]
   bc0fa:	bd08      	pop	{r3, pc}
   bc0fc:	00030244 	.word	0x00030244

000bc100 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bc100:	b508      	push	{r3, lr}
   bc102:	4b02      	ldr	r3, [pc, #8]	; (bc10c <spark_function+0xc>)
   bc104:	681b      	ldr	r3, [r3, #0]
   bc106:	685b      	ldr	r3, [r3, #4]
   bc108:	9301      	str	r3, [sp, #4]
   bc10a:	bd08      	pop	{r3, pc}
   bc10c:	00030244 	.word	0x00030244

000bc110 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bc110:	b508      	push	{r3, lr}
   bc112:	4b02      	ldr	r3, [pc, #8]	; (bc11c <spark_process+0xc>)
   bc114:	681b      	ldr	r3, [r3, #0]
   bc116:	689b      	ldr	r3, [r3, #8]
   bc118:	9301      	str	r3, [sp, #4]
   bc11a:	bd08      	pop	{r3, pc}
   bc11c:	00030244 	.word	0x00030244

000bc120 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bc120:	b508      	push	{r3, lr}
   bc122:	4b02      	ldr	r3, [pc, #8]	; (bc12c <spark_cloud_flag_connect+0xc>)
   bc124:	681b      	ldr	r3, [r3, #0]
   bc126:	68db      	ldr	r3, [r3, #12]
   bc128:	9301      	str	r3, [sp, #4]
   bc12a:	bd08      	pop	{r3, pc}
   bc12c:	00030244 	.word	0x00030244

000bc130 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bc130:	b508      	push	{r3, lr}
   bc132:	4b02      	ldr	r3, [pc, #8]	; (bc13c <spark_cloud_flag_connected+0xc>)
   bc134:	681b      	ldr	r3, [r3, #0]
   bc136:	695b      	ldr	r3, [r3, #20]
   bc138:	9301      	str	r3, [sp, #4]
   bc13a:	bd08      	pop	{r3, pc}
   bc13c:	00030244 	.word	0x00030244

000bc140 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bc140:	b508      	push	{r3, lr}
   bc142:	4b02      	ldr	r3, [pc, #8]	; (bc14c <spark_deviceID+0xc>)
   bc144:	681b      	ldr	r3, [r3, #0]
   bc146:	69db      	ldr	r3, [r3, #28]
   bc148:	9301      	str	r3, [sp, #4]
   bc14a:	bd08      	pop	{r3, pc}
   bc14c:	00030244 	.word	0x00030244

000bc150 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bc150:	b508      	push	{r3, lr}
   bc152:	4b02      	ldr	r3, [pc, #8]	; (bc15c <spark_send_event+0xc>)
   bc154:	681b      	ldr	r3, [r3, #0]
   bc156:	6a1b      	ldr	r3, [r3, #32]
   bc158:	9301      	str	r3, [sp, #4]
   bc15a:	bd08      	pop	{r3, pc}
   bc15c:	00030244 	.word	0x00030244

000bc160 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bc160:	b508      	push	{r3, lr}
   bc162:	4b02      	ldr	r3, [pc, #8]	; (bc16c <spark_sync_time+0xc>)
   bc164:	681b      	ldr	r3, [r3, #0]
   bc166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc168:	9301      	str	r3, [sp, #4]
   bc16a:	bd08      	pop	{r3, pc}
   bc16c:	00030244 	.word	0x00030244

000bc170 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bc170:	b508      	push	{r3, lr}
   bc172:	4b02      	ldr	r3, [pc, #8]	; (bc17c <spark_sync_time_pending+0xc>)
   bc174:	681b      	ldr	r3, [r3, #0]
   bc176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc178:	9301      	str	r3, [sp, #4]
   bc17a:	bd08      	pop	{r3, pc}
   bc17c:	00030244 	.word	0x00030244

000bc180 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bc180:	b508      	push	{r3, lr}
   bc182:	4b02      	ldr	r3, [pc, #8]	; (bc18c <spark_sync_time_last+0xc>)
   bc184:	681b      	ldr	r3, [r3, #0]
   bc186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc188:	9301      	str	r3, [sp, #4]
   bc18a:	bd08      	pop	{r3, pc}
   bc18c:	00030244 	.word	0x00030244

000bc190 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bc190:	b508      	push	{r3, lr}
   bc192:	4b02      	ldr	r3, [pc, #8]	; (bc19c <spark_set_connection_property+0xc>)
   bc194:	681b      	ldr	r3, [r3, #0]
   bc196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc198:	9301      	str	r3, [sp, #4]
   bc19a:	bd08      	pop	{r3, pc}
   bc19c:	00030244 	.word	0x00030244

000bc1a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bc1a0:	b508      	push	{r3, lr}
   bc1a2:	4b02      	ldr	r3, [pc, #8]	; (bc1ac <spark_set_random_seed_from_cloud_handler+0xc>)
   bc1a4:	681b      	ldr	r3, [r3, #0]
   bc1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc1a8:	9301      	str	r3, [sp, #4]
   bc1aa:	bd08      	pop	{r3, pc}
   bc1ac:	00030244 	.word	0x00030244

000bc1b0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bc1b0:	b508      	push	{r3, lr}
   bc1b2:	4b02      	ldr	r3, [pc, #8]	; (bc1bc <spark_cloud_disconnect+0xc>)
   bc1b4:	681b      	ldr	r3, [r3, #0]
   bc1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc1b8:	9301      	str	r3, [sp, #4]
   bc1ba:	bd08      	pop	{r3, pc}
   bc1bc:	00030244 	.word	0x00030244

000bc1c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc1c0:	b508      	push	{r3, lr}
   bc1c2:	4b02      	ldr	r3, [pc, #8]	; (bc1cc <network_connect+0xc>)
   bc1c4:	681b      	ldr	r3, [r3, #0]
   bc1c6:	685b      	ldr	r3, [r3, #4]
   bc1c8:	9301      	str	r3, [sp, #4]
   bc1ca:	bd08      	pop	{r3, pc}
   bc1cc:	00030240 	.word	0x00030240

000bc1d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc1d0:	b508      	push	{r3, lr}
   bc1d2:	4b02      	ldr	r3, [pc, #8]	; (bc1dc <network_connecting+0xc>)
   bc1d4:	681b      	ldr	r3, [r3, #0]
   bc1d6:	689b      	ldr	r3, [r3, #8]
   bc1d8:	9301      	str	r3, [sp, #4]
   bc1da:	bd08      	pop	{r3, pc}
   bc1dc:	00030240 	.word	0x00030240

000bc1e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc1e0:	b508      	push	{r3, lr}
   bc1e2:	4b02      	ldr	r3, [pc, #8]	; (bc1ec <network_disconnect+0xc>)
   bc1e4:	681b      	ldr	r3, [r3, #0]
   bc1e6:	68db      	ldr	r3, [r3, #12]
   bc1e8:	9301      	str	r3, [sp, #4]
   bc1ea:	bd08      	pop	{r3, pc}
   bc1ec:	00030240 	.word	0x00030240

000bc1f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc1f0:	b508      	push	{r3, lr}
   bc1f2:	4b02      	ldr	r3, [pc, #8]	; (bc1fc <network_ready+0xc>)
   bc1f4:	681b      	ldr	r3, [r3, #0]
   bc1f6:	691b      	ldr	r3, [r3, #16]
   bc1f8:	9301      	str	r3, [sp, #4]
   bc1fa:	bd08      	pop	{r3, pc}
   bc1fc:	00030240 	.word	0x00030240

000bc200 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc200:	b508      	push	{r3, lr}
   bc202:	4b02      	ldr	r3, [pc, #8]	; (bc20c <network_on+0xc>)
   bc204:	681b      	ldr	r3, [r3, #0]
   bc206:	695b      	ldr	r3, [r3, #20]
   bc208:	9301      	str	r3, [sp, #4]
   bc20a:	bd08      	pop	{r3, pc}
   bc20c:	00030240 	.word	0x00030240

000bc210 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc210:	b508      	push	{r3, lr}
   bc212:	4b02      	ldr	r3, [pc, #8]	; (bc21c <network_off+0xc>)
   bc214:	681b      	ldr	r3, [r3, #0]
   bc216:	699b      	ldr	r3, [r3, #24]
   bc218:	9301      	str	r3, [sp, #4]
   bc21a:	bd08      	pop	{r3, pc}
   bc21c:	00030240 	.word	0x00030240

000bc220 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc220:	b508      	push	{r3, lr}
   bc222:	4b02      	ldr	r3, [pc, #8]	; (bc22c <network_listen+0xc>)
   bc224:	681b      	ldr	r3, [r3, #0]
   bc226:	69db      	ldr	r3, [r3, #28]
   bc228:	9301      	str	r3, [sp, #4]
   bc22a:	bd08      	pop	{r3, pc}
   bc22c:	00030240 	.word	0x00030240

000bc230 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc230:	b508      	push	{r3, lr}
   bc232:	4b02      	ldr	r3, [pc, #8]	; (bc23c <network_listening+0xc>)
   bc234:	681b      	ldr	r3, [r3, #0]
   bc236:	6a1b      	ldr	r3, [r3, #32]
   bc238:	9301      	str	r3, [sp, #4]
   bc23a:	bd08      	pop	{r3, pc}
   bc23c:	00030240 	.word	0x00030240

000bc240 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bc240:	b508      	push	{r3, lr}
   bc242:	4b02      	ldr	r3, [pc, #8]	; (bc24c <network_set_listen_timeout+0xc>)
   bc244:	681b      	ldr	r3, [r3, #0]
   bc246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc248:	9301      	str	r3, [sp, #4]
   bc24a:	bd08      	pop	{r3, pc}
   bc24c:	00030240 	.word	0x00030240

000bc250 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bc250:	b508      	push	{r3, lr}
   bc252:	4b02      	ldr	r3, [pc, #8]	; (bc25c <network_get_listen_timeout+0xc>)
   bc254:	681b      	ldr	r3, [r3, #0]
   bc256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc258:	9301      	str	r3, [sp, #4]
   bc25a:	bd08      	pop	{r3, pc}
   bc25c:	00030240 	.word	0x00030240

000bc260 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bc260:	b508      	push	{r3, lr}
   bc262:	4b02      	ldr	r3, [pc, #8]	; (bc26c <network_is_on+0xc>)
   bc264:	681b      	ldr	r3, [r3, #0]
   bc266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc268:	9301      	str	r3, [sp, #4]
   bc26a:	bd08      	pop	{r3, pc}
   bc26c:	00030240 	.word	0x00030240

000bc270 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bc270:	b508      	push	{r3, lr}
   bc272:	4b02      	ldr	r3, [pc, #8]	; (bc27c <network_is_off+0xc>)
   bc274:	681b      	ldr	r3, [r3, #0]
   bc276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc278:	9301      	str	r3, [sp, #4]
   bc27a:	bd08      	pop	{r3, pc}
   bc27c:	00030240 	.word	0x00030240

000bc280 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bc280:	b508      	push	{r3, lr}
   bc282:	4b02      	ldr	r3, [pc, #8]	; (bc28c <malloc+0xc>)
   bc284:	681b      	ldr	r3, [r3, #0]
   bc286:	681b      	ldr	r3, [r3, #0]
   bc288:	9301      	str	r3, [sp, #4]
   bc28a:	bd08      	pop	{r3, pc}
   bc28c:	0003021c 	.word	0x0003021c

000bc290 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bc290:	b508      	push	{r3, lr}
   bc292:	4b02      	ldr	r3, [pc, #8]	; (bc29c <free+0xc>)
   bc294:	681b      	ldr	r3, [r3, #0]
   bc296:	685b      	ldr	r3, [r3, #4]
   bc298:	9301      	str	r3, [sp, #4]
   bc29a:	bd08      	pop	{r3, pc}
   bc29c:	0003021c 	.word	0x0003021c

000bc2a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bc2a0:	b508      	push	{r3, lr}
   bc2a2:	4b02      	ldr	r3, [pc, #8]	; (bc2ac <realloc+0xc>)
   bc2a4:	681b      	ldr	r3, [r3, #0]
   bc2a6:	689b      	ldr	r3, [r3, #8]
   bc2a8:	9301      	str	r3, [sp, #4]
   bc2aa:	bd08      	pop	{r3, pc}
   bc2ac:	0003021c 	.word	0x0003021c

000bc2b0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bc2b0:	b508      	push	{r3, lr}
   bc2b2:	4b02      	ldr	r3, [pc, #8]	; (bc2bc <siprintf+0xc>)
   bc2b4:	681b      	ldr	r3, [r3, #0]
   bc2b6:	691b      	ldr	r3, [r3, #16]
   bc2b8:	9301      	str	r3, [sp, #4]
   bc2ba:	bd08      	pop	{r3, pc}
   bc2bc:	0003021c 	.word	0x0003021c

000bc2c0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bc2c0:	b508      	push	{r3, lr}
   bc2c2:	4b02      	ldr	r3, [pc, #8]	; (bc2cc <sscanf+0xc>)
   bc2c4:	681b      	ldr	r3, [r3, #0]
   bc2c6:	695b      	ldr	r3, [r3, #20]
   bc2c8:	9301      	str	r3, [sp, #4]
   bc2ca:	bd08      	pop	{r3, pc}
   bc2cc:	0003021c 	.word	0x0003021c

000bc2d0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bc2d0:	b508      	push	{r3, lr}
   bc2d2:	4b02      	ldr	r3, [pc, #8]	; (bc2dc <snprintf+0xc>)
   bc2d4:	681b      	ldr	r3, [r3, #0]
   bc2d6:	69db      	ldr	r3, [r3, #28]
   bc2d8:	9301      	str	r3, [sp, #4]
   bc2da:	bd08      	pop	{r3, pc}
   bc2dc:	0003021c 	.word	0x0003021c

000bc2e0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bc2e0:	b508      	push	{r3, lr}
   bc2e2:	4b02      	ldr	r3, [pc, #8]	; (bc2ec <vsnprintf+0xc>)
   bc2e4:	681b      	ldr	r3, [r3, #0]
   bc2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc2e8:	9301      	str	r3, [sp, #4]
   bc2ea:	bd08      	pop	{r3, pc}
   bc2ec:	0003021c 	.word	0x0003021c

000bc2f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bc2f0:	b508      	push	{r3, lr}
   bc2f2:	4b02      	ldr	r3, [pc, #8]	; (bc2fc <abort+0xc>)
   bc2f4:	681b      	ldr	r3, [r3, #0]
   bc2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc2f8:	9301      	str	r3, [sp, #4]
   bc2fa:	bd08      	pop	{r3, pc}
   bc2fc:	0003021c 	.word	0x0003021c

000bc300 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bc300:	b508      	push	{r3, lr}
   bc302:	4b02      	ldr	r3, [pc, #8]	; (bc30c <_malloc_r+0xc>)
   bc304:	681b      	ldr	r3, [r3, #0]
   bc306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc308:	9301      	str	r3, [sp, #4]
   bc30a:	bd08      	pop	{r3, pc}
   bc30c:	0003021c 	.word	0x0003021c

000bc310 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bc310:	b508      	push	{r3, lr}
   bc312:	4b02      	ldr	r3, [pc, #8]	; (bc31c <__errno+0xc>)
   bc314:	681b      	ldr	r3, [r3, #0]
   bc316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc318:	9301      	str	r3, [sp, #4]
   bc31a:	bd08      	pop	{r3, pc}
   bc31c:	0003021c 	.word	0x0003021c

000bc320 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bc320:	b508      	push	{r3, lr}
   bc322:	4b02      	ldr	r3, [pc, #8]	; (bc32c <__assert_func+0xc>)
   bc324:	681b      	ldr	r3, [r3, #0]
   bc326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc328:	9301      	str	r3, [sp, #4]
   bc32a:	bd08      	pop	{r3, pc}
   bc32c:	0003021c 	.word	0x0003021c

000bc330 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bc330:	b508      	push	{r3, lr}
   bc332:	4b02      	ldr	r3, [pc, #8]	; (bc33c <newlib_impure_ptr_callback+0xc>)
   bc334:	681b      	ldr	r3, [r3, #0]
   bc336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc338:	9301      	str	r3, [sp, #4]
   bc33a:	bd08      	pop	{r3, pc}
   bc33c:	0003021c 	.word	0x0003021c

000bc340 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bc340:	b508      	push	{r3, lr}
   bc342:	4b02      	ldr	r3, [pc, #8]	; (bc34c <strftime+0xc>)
   bc344:	681b      	ldr	r3, [r3, #0]
   bc346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc348:	9301      	str	r3, [sp, #4]
   bc34a:	bd08      	pop	{r3, pc}
   bc34c:	0003021c 	.word	0x0003021c

000bc350 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc350:	b508      	push	{r3, lr}
   bc352:	4b02      	ldr	r3, [pc, #8]	; (bc35c <localtime_r+0xc>)
   bc354:	681b      	ldr	r3, [r3, #0]
   bc356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc358:	9301      	str	r3, [sp, #4]
   bc35a:	bd08      	pop	{r3, pc}
   bc35c:	0003021c 	.word	0x0003021c

000bc360 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bc360:	b508      	push	{r3, lr}
   bc362:	4b02      	ldr	r3, [pc, #8]	; (bc36c <gmtime_r+0xc>)
   bc364:	681b      	ldr	r3, [r3, #0]
   bc366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc368:	9301      	str	r3, [sp, #4]
   bc36a:	bd08      	pop	{r3, pc}
   bc36c:	0003021c 	.word	0x0003021c

000bc370 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bc370:	b508      	push	{r3, lr}
   bc372:	4b02      	ldr	r3, [pc, #8]	; (bc37c <mktime+0xc>)
   bc374:	681b      	ldr	r3, [r3, #0]
   bc376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc378:	9301      	str	r3, [sp, #4]
   bc37a:	bd08      	pop	{r3, pc}
   bc37c:	0003021c 	.word	0x0003021c

000bc380 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bc380:	2100      	movs	r1, #0
   bc382:	f7ff be4b 	b.w	bc01c <system_delay_ms>

000bc386 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc386:	b510      	push	{r4, lr}
      if (_M_empty())
   bc388:	6883      	ldr	r3, [r0, #8]
   bc38a:	4604      	mov	r4, r0
   bc38c:	b90b      	cbnz	r3, bc392 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc38e:	f003 f9a7 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc392:	68c3      	ldr	r3, [r0, #12]
   bc394:	4798      	blx	r3
      if (_M_manager)
   bc396:	68a3      	ldr	r3, [r4, #8]
   bc398:	b11b      	cbz	r3, bc3a2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc39a:	2203      	movs	r2, #3
   bc39c:	4621      	mov	r1, r4
   bc39e:	4620      	mov	r0, r4
   bc3a0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc3a2:	4620      	mov	r0, r4
   bc3a4:	2110      	movs	r1, #16
}
   bc3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc3aa:	f7f7 be78 	b.w	b409e <_ZdlPvj>

000bc3ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bc3ae:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bc3b0:	6843      	ldr	r3, [r0, #4]
   bc3b2:	3b01      	subs	r3, #1
    {
   bc3b4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bc3b6:	6043      	str	r3, [r0, #4]
   bc3b8:	b963      	cbnz	r3, bc3d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bc3ba:	6803      	ldr	r3, [r0, #0]
   bc3bc:	689b      	ldr	r3, [r3, #8]
   bc3be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bc3c0:	68a3      	ldr	r3, [r4, #8]
   bc3c2:	3b01      	subs	r3, #1
   bc3c4:	60a3      	str	r3, [r4, #8]
   bc3c6:	b92b      	cbnz	r3, bc3d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bc3c8:	6823      	ldr	r3, [r4, #0]
   bc3ca:	4620      	mov	r0, r4
   bc3cc:	68db      	ldr	r3, [r3, #12]
    }
   bc3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bc3d2:	4718      	bx	r3
    }
   bc3d4:	bd10      	pop	{r4, pc}

000bc3d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc3d6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc3d8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc3dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc3de:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bc3e2:	42ae      	cmp	r6, r5
   bc3e4:	d004      	beq.n	bc3f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bc3e6:	4628      	mov	r0, r5
   bc3e8:	f002 fab4 	bl	be954 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bc3ec:	3510      	adds	r5, #16
   bc3ee:	e7f8      	b.n	bc3e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bc3f0:	6820      	ldr	r0, [r4, #0]
   bc3f2:	f7ff ff4d 	bl	bc290 <free>
    AllocatorT::free(data_);
}
   bc3f6:	4620      	mov	r0, r4
   bc3f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc3fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bc3fc:	4802      	ldr	r0, [pc, #8]	; (bc408 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc3fe:	2300      	movs	r3, #0
   bc400:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bc402:	f7ff bb51 	b.w	bbaa8 <os_mutex_recursive_create>
   bc406:	bf00      	nop
   bc408:	2003e580 	.word	0x2003e580

000bc40c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc40c:	2200      	movs	r2, #0
   bc40e:	6840      	ldr	r0, [r0, #4]
   bc410:	4611      	mov	r1, r2
   bc412:	f7ff beed 	b.w	bc1f0 <network_ready>

000bc416 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc416:	2200      	movs	r2, #0
   bc418:	6840      	ldr	r0, [r0, #4]
   bc41a:	4611      	mov	r1, r2
   bc41c:	f7ff bf08 	b.w	bc230 <network_listening>

000bc420 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc420:	2200      	movs	r2, #0
   bc422:	6840      	ldr	r0, [r0, #4]
   bc424:	4611      	mov	r1, r2
   bc426:	f7ff bf13 	b.w	bc250 <network_get_listen_timeout>

000bc42a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc42a:	6840      	ldr	r0, [r0, #4]
   bc42c:	2200      	movs	r2, #0
   bc42e:	f7ff bf07 	b.w	bc240 <network_set_listen_timeout>

000bc432 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc432:	6840      	ldr	r0, [r0, #4]
   bc434:	2200      	movs	r2, #0
   bc436:	f081 0101 	eor.w	r1, r1, #1
   bc43a:	f7ff bef1 	b.w	bc220 <network_listen>

000bc43e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc43e:	2300      	movs	r3, #0
   bc440:	6840      	ldr	r0, [r0, #4]
   bc442:	461a      	mov	r2, r3
   bc444:	4619      	mov	r1, r3
   bc446:	f7ff bee3 	b.w	bc210 <network_off>

000bc44a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc44a:	2300      	movs	r3, #0
   bc44c:	6840      	ldr	r0, [r0, #4]
   bc44e:	461a      	mov	r2, r3
   bc450:	4619      	mov	r1, r3
   bc452:	f7ff bed5 	b.w	bc200 <network_on>

000bc456 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc456:	2200      	movs	r2, #0
   bc458:	6840      	ldr	r0, [r0, #4]
   bc45a:	4611      	mov	r1, r2
   bc45c:	f7ff beb8 	b.w	bc1d0 <network_connecting>

000bc460 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc460:	6840      	ldr	r0, [r0, #4]
   bc462:	2200      	movs	r2, #0
   bc464:	2102      	movs	r1, #2
   bc466:	f7ff bebb 	b.w	bc1e0 <network_disconnect>

000bc46a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc46a:	2300      	movs	r3, #0
   bc46c:	6840      	ldr	r0, [r0, #4]
   bc46e:	461a      	mov	r2, r3
   bc470:	f7ff bea6 	b.w	bc1c0 <network_connect>

000bc474 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bc474:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bc476:	4b13      	ldr	r3, [pc, #76]	; (bc4c4 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bc478:	6003      	str	r3, [r0, #0]
   bc47a:	2518      	movs	r5, #24
   bc47c:	3330      	adds	r3, #48	; 0x30
   bc47e:	b086      	sub	sp, #24
   bc480:	460e      	mov	r6, r1
   bc482:	6043      	str	r3, [r0, #4]
   bc484:	462a      	mov	r2, r5
   bc486:	2100      	movs	r1, #0
   bc488:	4604      	mov	r4, r0
   bc48a:	3008      	adds	r0, #8
   bc48c:	f003 fe5a 	bl	c0144 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bc490:	2200      	movs	r2, #0
   bc492:	6870      	ldr	r0, [r6, #4]
   bc494:	4611      	mov	r1, r2
   bc496:	f7ff feab 	bl	bc1f0 <network_ready>
   bc49a:	b178      	cbz	r0, bc4bc <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bc49c:	2100      	movs	r1, #0
   bc49e:	462a      	mov	r2, r5
   bc4a0:	4668      	mov	r0, sp
   bc4a2:	f003 fe4f 	bl	c0144 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc4a6:	4669      	mov	r1, sp
   bc4a8:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bc4aa:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bc4ae:	f7ff fabb 	bl	bba28 <cellular_signal>
   bc4b2:	b918      	cbnz	r0, bc4bc <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bc4b4:	4669      	mov	r1, sp
   bc4b6:	4620      	mov	r0, r4
   bc4b8:	f000 f8b8 	bl	bc62c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bc4bc:	4620      	mov	r0, r4
   bc4be:	b006      	add	sp, #24
   bc4c0:	bd70      	pop	{r4, r5, r6, pc}
   bc4c2:	bf00      	nop
   bc4c4:	000c1e68 	.word	0x000c1e68

000bc4c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc4c8:	4b08      	ldr	r3, [pc, #32]	; (bc4ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc4ca:	b510      	push	{r4, lr}
   bc4cc:	2428      	movs	r4, #40	; 0x28
   bc4ce:	4622      	mov	r2, r4
   bc4d0:	4618      	mov	r0, r3
   bc4d2:	2100      	movs	r1, #0
   bc4d4:	f003 fe36 	bl	c0144 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc4d8:	4b05      	ldr	r3, [pc, #20]	; (bc4f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc4da:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc4e0:	6042      	str	r2, [r0, #4]
   bc4e2:	2204      	movs	r2, #4
   bc4e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc4e6:	4a03      	ldr	r2, [pc, #12]	; (bc4f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc4e8:	601a      	str	r2, [r3, #0]
   bc4ea:	bd10      	pop	{r4, pc}
   bc4ec:	2003e58c 	.word	0x2003e58c
   bc4f0:	2003e584 	.word	0x2003e584
   bc4f4:	000c1e2c 	.word	0x000c1e2c

000bc4f8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bc4f8:	4770      	bx	lr

000bc4fa <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bc4fa:	7b00      	ldrb	r0, [r0, #12]
   bc4fc:	4770      	bx	lr

000bc4fe <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc4fe:	7b03      	ldrb	r3, [r0, #12]
   bc500:	b14b      	cbz	r3, bc516 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bc502:	6903      	ldr	r3, [r0, #16]
   bc504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc508:	d005      	beq.n	bc516 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bc50a:	6980      	ldr	r0, [r0, #24]
   bc50c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bc510:	bf18      	it	ne
   bc512:	2001      	movne	r0, #1
   bc514:	4770      	bx	lr
   bc516:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bc518:	4770      	bx	lr

000bc51a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bc51a:	6803      	ldr	r3, [r0, #0]
   bc51c:	6a1b      	ldr	r3, [r3, #32]
   bc51e:	4718      	bx	r3

000bc520 <_ZNK14CellularSignal7printToER5Print>:
{
   bc520:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bc522:	6803      	ldr	r3, [r0, #0]
{
   bc524:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bc526:	691b      	ldr	r3, [r3, #16]
{
   bc528:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bc52a:	4798      	blx	r3
   bc52c:	2102      	movs	r1, #2
   bc52e:	4628      	mov	r0, r5
   bc530:	f002 f8ee 	bl	be710 <_ZN5Print5printEfi>
    n += p.print(',');
   bc534:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bc536:	4604      	mov	r4, r0
    n += p.print(',');
   bc538:	4628      	mov	r0, r5
   bc53a:	f001 fff3 	bl	be524 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bc53e:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bc540:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bc542:	699b      	ldr	r3, [r3, #24]
   bc544:	4630      	mov	r0, r6
   bc546:	4798      	blx	r3
   bc548:	2102      	movs	r1, #2
   bc54a:	4628      	mov	r0, r5
   bc54c:	f002 f8e0 	bl	be710 <_ZN5Print5printEfi>
}
   bc550:	4420      	add	r0, r4
   bc552:	bd70      	pop	{r4, r5, r6, pc}

000bc554 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bc554:	f1a0 0004 	sub.w	r0, r0, #4
   bc558:	f7ff bfe2 	b.w	bc520 <_ZNK14CellularSignal7printToER5Print>

000bc55c <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bc55c:	b510      	push	{r4, lr}
   bc55e:	2120      	movs	r1, #32
   bc560:	4604      	mov	r4, r0
   bc562:	f7f7 fd9c 	bl	b409e <_ZdlPvj>
   bc566:	4620      	mov	r0, r4
   bc568:	bd10      	pop	{r4, pc}
	...

000bc56c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bc56c:	7b03      	ldrb	r3, [r0, #12]
   bc56e:	b17b      	cbz	r3, bc590 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bc570:	6943      	ldr	r3, [r0, #20]
   bc572:	2b00      	cmp	r3, #0
   bc574:	db0c      	blt.n	bc590 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bc576:	ee07 3a90 	vmov	s15, r3
   bc57a:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc598 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bc57e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc582:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc586:	eddf 7a05 	vldr	s15, [pc, #20]	; bc59c <_ZNK14CellularSignal11getStrengthEv+0x30>
   bc58a:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc58e:	4770      	bx	lr
    return -1.0f;
   bc590:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc594:	4770      	bx	lr
   bc596:	bf00      	nop
   bc598:	477fff00 	.word	0x477fff00
   bc59c:	42c80000 	.word	0x42c80000

000bc5a0 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bc5a0:	7b03      	ldrb	r3, [r0, #12]
   bc5a2:	b163      	cbz	r3, bc5be <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bc5a4:	6903      	ldr	r3, [r0, #16]
   bc5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc5aa:	d008      	beq.n	bc5be <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bc5ac:	ee07 3a90 	vmov	s15, r3
   bc5b0:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc5c4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bc5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc5b8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc5bc:	4770      	bx	lr
    return 0.0f;
   bc5be:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc5c8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bc5c2:	4770      	bx	lr
   bc5c4:	42c80000 	.word	0x42c80000
   bc5c8:	00000000 	.word	0x00000000

000bc5cc <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bc5cc:	7b03      	ldrb	r3, [r0, #12]
   bc5ce:	b17b      	cbz	r3, bc5f0 <_ZNK14CellularSignal10getQualityEv+0x24>
   bc5d0:	69c3      	ldr	r3, [r0, #28]
   bc5d2:	2b00      	cmp	r3, #0
   bc5d4:	db0c      	blt.n	bc5f0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bc5d6:	ee07 3a90 	vmov	s15, r3
   bc5da:	ed9f 7a07 	vldr	s14, [pc, #28]	; bc5f8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bc5de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc5e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc5e6:	eddf 7a05 	vldr	s15, [pc, #20]	; bc5fc <_ZNK14CellularSignal10getQualityEv+0x30>
   bc5ea:	ee20 0a27 	vmul.f32	s0, s0, s15
   bc5ee:	4770      	bx	lr
    return -1.0f;
   bc5f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bc5f4:	4770      	bx	lr
   bc5f6:	bf00      	nop
   bc5f8:	477fff00 	.word	0x477fff00
   bc5fc:	42c80000 	.word	0x42c80000

000bc600 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bc600:	7b03      	ldrb	r3, [r0, #12]
   bc602:	b163      	cbz	r3, bc61e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bc604:	6983      	ldr	r3, [r0, #24]
   bc606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bc60a:	d008      	beq.n	bc61e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bc60c:	ee07 3a90 	vmov	s15, r3
   bc610:	ed9f 7a04 	vldr	s14, [pc, #16]	; bc624 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bc614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bc618:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bc61c:	4770      	bx	lr
    return 0.0f;
   bc61e:	ed9f 0a02 	vldr	s0, [pc, #8]	; bc628 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bc622:	4770      	bx	lr
   bc624:	42c80000 	.word	0x42c80000
   bc628:	00000000 	.word	0x00000000

000bc62c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bc62c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bc62e:	460d      	mov	r5, r1
   bc630:	f100 0408 	add.w	r4, r0, #8
   bc634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc638:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc63c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bc640:	2001      	movs	r0, #1
   bc642:	bd30      	pop	{r4, r5, pc}

000bc644 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc644:	4770      	bx	lr

000bc646 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc646:	2000      	movs	r0, #0
   bc648:	4770      	bx	lr

000bc64a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc64a:	b510      	push	{r4, lr}
   bc64c:	2110      	movs	r1, #16
   bc64e:	4604      	mov	r4, r0
   bc650:	f7f7 fd25 	bl	b409e <_ZdlPvj>
   bc654:	4620      	mov	r0, r4
   bc656:	bd10      	pop	{r4, pc}

000bc658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc658:	b508      	push	{r3, lr}
      { delete this; }
   bc65a:	f7ff fff6 	bl	bc64a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc65e:	bd08      	pop	{r3, pc}

000bc660 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc660:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc662:	2200      	movs	r2, #0
   bc664:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc668:	6002      	str	r2, [r0, #0]
   bc66a:	8084      	strh	r4, [r0, #4]
   bc66c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc66e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc670:	680c      	ldr	r4, [r1, #0]
   bc672:	8085      	strh	r5, [r0, #4]
   bc674:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc676:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc678:	bd30      	pop	{r4, r5, pc}

000bc67a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc67a:	b510      	push	{r4, lr}
   bc67c:	4604      	mov	r4, r0
    free((void*)msg_);
   bc67e:	6800      	ldr	r0, [r0, #0]
   bc680:	f7ff fe06 	bl	bc290 <free>
}
   bc684:	4620      	mov	r0, r4
   bc686:	bd10      	pop	{r4, pc}

000bc688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc688:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc68a:	68c4      	ldr	r4, [r0, #12]
   bc68c:	b1f4      	cbz	r4, bc6cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bc68e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc690:	2b02      	cmp	r3, #2
   bc692:	d103      	bne.n	bc69c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc694:	f104 000c 	add.w	r0, r4, #12
   bc698:	f7ff ffef 	bl	bc67a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc69c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc69e:	b135      	cbz	r5, bc6ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc6a0:	4628      	mov	r0, r5
   bc6a2:	f7f8 fb0a 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   bc6a6:	2110      	movs	r1, #16
   bc6a8:	4628      	mov	r0, r5
   bc6aa:	f7f7 fcf8 	bl	b409e <_ZdlPvj>
   bc6ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc6b0:	b135      	cbz	r5, bc6c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc6b2:	4628      	mov	r0, r5
   bc6b4:	f7f8 fb01 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
   bc6b8:	2110      	movs	r1, #16
   bc6ba:	4628      	mov	r0, r5
   bc6bc:	f7f7 fcef 	bl	b409e <_ZdlPvj>
   bc6c0:	4620      	mov	r0, r4
   bc6c2:	2114      	movs	r1, #20
   bc6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc6c8:	f7f7 bce9 	b.w	b409e <_ZdlPvj>
   bc6cc:	bd38      	pop	{r3, r4, r5, pc}

000bc6ce <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bc6ce:	b510      	push	{r4, lr}
   bc6d0:	b088      	sub	sp, #32
   bc6d2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bc6d4:	4668      	mov	r0, sp
   bc6d6:	f002 f988 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bc6da:	4669      	mov	r1, sp
   bc6dc:	a804      	add	r0, sp, #16
   bc6de:	f002 f9cf 	bl	bea80 <_ZN6StringC1ERKS_>
   bc6e2:	a804      	add	r0, sp, #16
   bc6e4:	47a0      	blx	r4
   bc6e6:	4604      	mov	r4, r0
   bc6e8:	a804      	add	r0, sp, #16
   bc6ea:	f002 f933 	bl	be954 <_ZN6StringD1Ev>
    String p(param);
   bc6ee:	4668      	mov	r0, sp
   bc6f0:	f002 f930 	bl	be954 <_ZN6StringD1Ev>
}
   bc6f4:	4620      	mov	r0, r4
   bc6f6:	b008      	add	sp, #32
   bc6f8:	bd10      	pop	{r4, pc}

000bc6fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bc6fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bc6fc:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bc6fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bc702:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bc704:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bc706:	461a      	mov	r2, r3
   bc708:	4669      	mov	r1, sp
   bc70a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bc70c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bc710:	f8ad 4000 	strh.w	r4, [sp]
   bc714:	f7ff fcf4 	bl	bc100 <spark_function>
}
   bc718:	b004      	add	sp, #16
   bc71a:	bd10      	pop	{r4, pc}

000bc71c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bc71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bc71e:	230c      	movs	r3, #12
   bc720:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bc724:	6803      	ldr	r3, [r0, #0]
   bc726:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bc72a:	7a03      	ldrb	r3, [r0, #8]
   bc72c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bc730:	6843      	ldr	r3, [r0, #4]
   bc732:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bc734:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bc736:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bc738:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bc73c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bc73e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bc742:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bc746:	f7ff fd33 	bl	bc1b0 <spark_cloud_disconnect>
}
   bc74a:	b005      	add	sp, #20
   bc74c:	f85d fb04 	ldr.w	pc, [sp], #4

000bc750 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc750:	680b      	ldr	r3, [r1, #0]
   bc752:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc754:	684b      	ldr	r3, [r1, #4]
   bc756:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc758:	b113      	cbz	r3, bc760 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc75a:	685a      	ldr	r2, [r3, #4]
   bc75c:	3201      	adds	r2, #1
   bc75e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc760:	4770      	bx	lr

000bc762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc762:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc764:	4604      	mov	r4, r0
   bc766:	4668      	mov	r0, sp
   bc768:	460d      	mov	r5, r1
   bc76a:	f7ff fff1 	bl	bc750 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc76e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc770:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc772:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc774:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc776:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc778:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc77a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bc77c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc77e:	f7f9 fe4f 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc782:	b135      	cbz	r5, bc792 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc784:	1d28      	adds	r0, r5, #4
   bc786:	f7f9 fe4b 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc78a:	2108      	movs	r1, #8
   bc78c:	4628      	mov	r0, r5
   bc78e:	f7f7 fc86 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc792:	4620      	mov	r0, r4
   bc794:	b003      	add	sp, #12
   bc796:	bd30      	pop	{r4, r5, pc}

000bc798 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc798:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc79a:	b510      	push	{r4, lr}
      if (_M_empty())
   bc79c:	b90a      	cbnz	r2, bc7a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc79e:	f002 ff9f 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
    }
   bc7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc7a6:	68c3      	ldr	r3, [r0, #12]
   bc7a8:	4718      	bx	r3

000bc7aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc7aa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc7ac:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bc7ae:	f100 0110 	add.w	r1, r0, #16
   bc7b2:	f7ff fff1 	bl	bc798 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc7b6:	bd08      	pop	{r3, pc}

000bc7b8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc7b8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc7ba:	b510      	push	{r4, lr}
      if (_M_empty())
   bc7bc:	b90a      	cbnz	r2, bc7c2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc7be:	f002 ff8f 	bl	bf6e0 <_ZSt25__throw_bad_function_callv>
    }
   bc7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc7c6:	68c3      	ldr	r3, [r0, #12]
   bc7c8:	4718      	bx	r3

000bc7ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc7ca:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc7cc:	6800      	ldr	r0, [r0, #0]
   bc7ce:	f100 0110 	add.w	r1, r0, #16
   bc7d2:	f7ff fff1 	bl	bc7b8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc7d6:	bd08      	pop	{r3, pc}

000bc7d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc7d8:	b538      	push	{r3, r4, r5, lr}
   bc7da:	2300      	movs	r3, #0
   bc7dc:	4604      	mov	r4, r0
   bc7de:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc7e0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc7e2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc7e4:	f7f7 fc57 	bl	b4096 <_Znwj>
   bc7e8:	b128      	cbz	r0, bc7f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc7ea:	2301      	movs	r3, #1
   bc7ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc7f0:	4b02      	ldr	r3, [pc, #8]	; (bc7fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc7f2:	6003      	str	r3, [r0, #0]
   bc7f4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc7f6:	6020      	str	r0, [r4, #0]
	}
   bc7f8:	4620      	mov	r0, r4
   bc7fa:	bd38      	pop	{r3, r4, r5, pc}
   bc7fc:	000c1ea4 	.word	0x000c1ea4

000bc800 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc800:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc802:	2300      	movs	r3, #0
   bc804:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc806:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc808:	4604      	mov	r4, r0
   bc80a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc80c:	b12b      	cbz	r3, bc81a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc80e:	2202      	movs	r2, #2
   bc810:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc812:	68eb      	ldr	r3, [r5, #12]
   bc814:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc816:	68ab      	ldr	r3, [r5, #8]
   bc818:	60a3      	str	r3, [r4, #8]
    }
   bc81a:	4620      	mov	r0, r4
   bc81c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc820 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc820:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc822:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bc824:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc826:	4668      	mov	r0, sp
   bc828:	f7ff ff1a 	bl	bc660 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc82c:	f04f 0302 	mov.w	r3, #2
   bc830:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc834:	2a00      	cmp	r2, #0
   bc836:	d103      	bne.n	bc840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc838:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc83c:	2900      	cmp	r1, #0
   bc83e:	d1f7      	bne.n	bc830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc840:	d125      	bne.n	bc88e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc842:	f104 050c 	add.w	r5, r4, #12
   bc846:	4669      	mov	r1, sp
   bc848:	4628      	mov	r0, r5
   bc84a:	f7ff ff09 	bl	bc660 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc84e:	f3bf 8f5b 	dmb	ish
   bc852:	2301      	movs	r3, #1
   bc854:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc856:	2000      	movs	r0, #0
   bc858:	f104 0308 	add.w	r3, r4, #8
   bc85c:	f3bf 8f5b 	dmb	ish
   bc860:	e853 6f00 	ldrex	r6, [r3]
   bc864:	e843 0200 	strex	r2, r0, [r3]
   bc868:	2a00      	cmp	r2, #0
   bc86a:	d1f9      	bne.n	bc860 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc86c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc870:	b16e      	cbz	r6, bc88e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc872:	f7ff fbeb 	bl	bc04c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc876:	b178      	cbz	r0, bc898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc878:	4629      	mov	r1, r5
   bc87a:	4630      	mov	r0, r6
   bc87c:	f7ff ff8c 	bl	bc798 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc880:	4630      	mov	r0, r6
   bc882:	f7f8 fa1a 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc886:	2110      	movs	r1, #16
   bc888:	4630      	mov	r0, r6
   bc88a:	f7f7 fc08 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc88e:	4668      	mov	r0, sp
   bc890:	f7ff fef3 	bl	bc67a <_ZN8particle5ErrorD1Ev>
    }
   bc894:	b009      	add	sp, #36	; 0x24
   bc896:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc898:	4631      	mov	r1, r6
   bc89a:	a802      	add	r0, sp, #8
   bc89c:	f7ff ffb0 	bl	bc800 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc8a0:	68e0      	ldr	r0, [r4, #12]
   bc8a2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc8a6:	b108      	cbz	r0, bc8ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc8a8:	f003 fcea 	bl	c0280 <strdup>
        type_(type) {
   bc8ac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc8ae:	2010      	movs	r0, #16
   bc8b0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc8b4:	f7f7 fbef 	bl	b4096 <_Znwj>
   bc8b8:	4605      	mov	r5, r0
   bc8ba:	b1e8      	cbz	r0, bc8f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc8bc:	2700      	movs	r7, #0
   bc8be:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc8c0:	2018      	movs	r0, #24
   bc8c2:	f7f7 fbe8 	bl	b4096 <_Znwj>
   bc8c6:	4604      	mov	r4, r0
   bc8c8:	b188      	cbz	r0, bc8ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc8ca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc8cc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc8ce:	a802      	add	r0, sp, #8
   bc8d0:	f7fa ffe3 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc8d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc8d6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc8d8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc8da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc8dc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc8de:	a906      	add	r1, sp, #24
   bc8e0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc8e2:	60e3      	str	r3, [r4, #12]
   bc8e4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc8e8:	9205      	str	r2, [sp, #20]
   bc8ea:	f7ff feb9 	bl	bc660 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc8ee:	4b08      	ldr	r3, [pc, #32]	; (bc910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc8f0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc8f2:	4b08      	ldr	r3, [pc, #32]	; (bc914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc8f4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc8f6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc8f8:	a806      	add	r0, sp, #24
   bc8fa:	f7ff febe 	bl	bc67a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc8fe:	a802      	add	r0, sp, #8
   bc900:	f7f8 f9db 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc904:	2200      	movs	r2, #0
   bc906:	4629      	mov	r1, r5
   bc908:	4803      	ldr	r0, [pc, #12]	; (bc918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc90a:	f7ff fba7 	bl	bc05c <application_thread_invoke>
   bc90e:	e7b7      	b.n	bc880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc910:	000bc7ab 	.word	0x000bc7ab
   bc914:	000bca2d 	.word	0x000bca2d
   bc918:	000bc387 	.word	0x000bc387

000bc91c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc920:	b08b      	sub	sp, #44	; 0x2c
   bc922:	4605      	mov	r5, r0
   bc924:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc928:	460f      	mov	r7, r1
   bc92a:	4690      	mov	r8, r2
   bc92c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc92e:	f7ff fbff 	bl	bc130 <spark_cloud_flag_connected>
   bc932:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc934:	4683      	mov	fp, r0
   bc936:	bb38      	cbnz	r0, bc988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc938:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc93c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc93e:	a905      	add	r1, sp, #20
   bc940:	4630      	mov	r0, r6
   bc942:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc946:	f7ff fe8b 	bl	bc660 <_ZN8particle5ErrorC1EOS0_>
   bc94a:	2014      	movs	r0, #20
   bc94c:	f7f7 fba3 	bl	b4096 <_Znwj>
   bc950:	4604      	mov	r4, r0
   bc952:	b148      	cbz	r0, bc968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc954:	2302      	movs	r3, #2
   bc956:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc958:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc95a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc95e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc960:	4631      	mov	r1, r6
   bc962:	300c      	adds	r0, #12
   bc964:	f7ff fe7c 	bl	bc660 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc968:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc96a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc96c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc970:	f7ff ff32 	bl	bc7d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc974:	4630      	mov	r0, r6
   bc976:	f7ff fe80 	bl	bc67a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc97a:	a805      	add	r0, sp, #20
   bc97c:	f7ff fe7d 	bl	bc67a <_ZN8particle5ErrorD1Ev>
}
   bc980:	4628      	mov	r0, r5
   bc982:	b00b      	add	sp, #44	; 0x2c
   bc984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc988:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc98a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc98c:	2014      	movs	r0, #20
   bc98e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc992:	9307      	str	r3, [sp, #28]
   bc994:	f7f7 fb7f 	bl	b4096 <_Znwj>
   bc998:	4601      	mov	r1, r0
   bc99a:	b118      	cbz	r0, bc9a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc9a0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc9a2:	7044      	strb	r4, [r0, #1]
   bc9a4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc9a6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc9a8:	f7ff ff16 	bl	bc7d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc9ac:	4b1e      	ldr	r3, [pc, #120]	; (bca28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc9ae:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc9b0:	2008      	movs	r0, #8
   bc9b2:	f7f7 fb70 	bl	b4096 <_Znwj>
   bc9b6:	4604      	mov	r4, r0
   bc9b8:	b110      	cbz	r0, bc9c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc9ba:	a903      	add	r1, sp, #12
   bc9bc:	f7ff fec8 	bl	bc750 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc9c0:	9600      	str	r6, [sp, #0]
   bc9c2:	fa5f f38a 	uxtb.w	r3, sl
   bc9c6:	464a      	mov	r2, r9
   bc9c8:	4641      	mov	r1, r8
   bc9ca:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc9cc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc9ce:	f7ff fbbf 	bl	bc150 <spark_send_event>
   bc9d2:	b9b8      	cbnz	r0, bca04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc9d4:	9b03      	ldr	r3, [sp, #12]
   bc9d6:	785b      	ldrb	r3, [r3, #1]
   bc9d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc9dc:	b993      	cbnz	r3, bca04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc9de:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc9e2:	a905      	add	r1, sp, #20
   bc9e4:	a803      	add	r0, sp, #12
   bc9e6:	9205      	str	r2, [sp, #20]
   bc9e8:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc9ec:	f7ff ff18 	bl	bc820 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc9f0:	a805      	add	r0, sp, #20
   bc9f2:	f7ff fe42 	bl	bc67a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc9f6:	a805      	add	r0, sp, #20
   bc9f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc9fa:	f7ff feb2 	bl	bc762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc9fe:	a806      	add	r0, sp, #24
   bca00:	f7f9 fd0e 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bca04:	a903      	add	r1, sp, #12
   bca06:	a805      	add	r0, sp, #20
   bca08:	f7ff fea2 	bl	bc750 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bca0c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bca0e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bca10:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bca12:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bca14:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bca16:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bca18:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bca1a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bca1c:	f7f9 fd00 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bca20:	a804      	add	r0, sp, #16
   bca22:	f7f9 fcfd 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bca26:	e7ab      	b.n	bc980 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bca28:	000bcaa9 	.word	0x000bcaa9

000bca2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bca2c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bca2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bca30:	4605      	mov	r5, r0
	switch (__op)
   bca32:	d103      	bne.n	bca3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bca34:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bca36:	6003      	str	r3, [r0, #0]
      }
   bca38:	2000      	movs	r0, #0
   bca3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bca3c:	2a02      	cmp	r2, #2
   bca3e:	d010      	beq.n	bca62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bca40:	2a03      	cmp	r2, #3
   bca42:	d1f9      	bne.n	bca38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bca44:	6804      	ldr	r4, [r0, #0]
   bca46:	2c00      	cmp	r4, #0
   bca48:	d0f6      	beq.n	bca38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bca4a:	f104 0010 	add.w	r0, r4, #16
   bca4e:	f7ff fe14 	bl	bc67a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bca52:	4620      	mov	r0, r4
   bca54:	f7f8 f931 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bca58:	2118      	movs	r1, #24
   bca5a:	4620      	mov	r0, r4
   bca5c:	f7f7 fb1f 	bl	b409e <_ZdlPvj>
   bca60:	e7ea      	b.n	bca38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bca62:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bca64:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bca66:	f7f7 fb16 	bl	b4096 <_Znwj>
   bca6a:	4604      	mov	r4, r0
   bca6c:	b150      	cbz	r0, bca84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bca6e:	4631      	mov	r1, r6
   bca70:	f7ff fec6 	bl	bc800 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bca74:	6930      	ldr	r0, [r6, #16]
   bca76:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bca7a:	b108      	cbz	r0, bca80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bca7c:	f003 fc00 	bl	c0280 <strdup>
        type_(type) {
   bca80:	6120      	str	r0, [r4, #16]
   bca82:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bca84:	602c      	str	r4, [r5, #0]
	}
   bca86:	e7d7      	b.n	bca38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bca88 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bca88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bca8a:	2300      	movs	r3, #0
   bca8c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bca8e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bca90:	4604      	mov	r4, r0
   bca92:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bca94:	b12b      	cbz	r3, bcaa2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bca96:	2202      	movs	r2, #2
   bca98:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bca9a:	68eb      	ldr	r3, [r5, #12]
   bca9c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bca9e:	68ab      	ldr	r3, [r5, #8]
   bcaa0:	60a3      	str	r3, [r4, #8]
    }
   bcaa2:	4620      	mov	r0, r4
   bcaa4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcaa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcaaa:	b089      	sub	sp, #36	; 0x24
   bcaac:	4604      	mov	r4, r0
   bcaae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcab0:	a801      	add	r0, sp, #4
   bcab2:	4611      	mov	r1, r2
   bcab4:	f7ff fe55 	bl	bc762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcab8:	b1a4      	cbz	r4, bcae4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcaba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcabc:	b11d      	cbz	r5, bcac6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcabe:	4628      	mov	r0, r5
   bcac0:	f003 fbde 	bl	c0280 <strdup>
   bcac4:	4605      	mov	r5, r0
   bcac6:	a801      	add	r0, sp, #4
   bcac8:	a903      	add	r1, sp, #12
        type_(type) {
   bcaca:	9503      	str	r5, [sp, #12]
   bcacc:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcad0:	f7ff fea6 	bl	bc820 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcad4:	a803      	add	r0, sp, #12
   bcad6:	f7ff fdd0 	bl	bc67a <_ZN8particle5ErrorD1Ev>
   bcada:	a802      	add	r0, sp, #8
   bcadc:	f7f9 fca0 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcae0:	b009      	add	sp, #36	; 0x24
   bcae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcae4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcae6:	2301      	movs	r3, #1
   bcae8:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcaec:	2a00      	cmp	r2, #0
   bcaee:	d103      	bne.n	bcaf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcaf0:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcaf4:	2900      	cmp	r1, #0
   bcaf6:	d1f7      	bne.n	bcae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcaf8:	d1ef      	bne.n	bcada <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcafa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcafc:	f3bf 8f5b 	dmb	ish
   bcb00:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcb02:	1d2b      	adds	r3, r5, #4
   bcb04:	f3bf 8f5b 	dmb	ish
   bcb08:	e853 6f00 	ldrex	r6, [r3]
   bcb0c:	e843 4200 	strex	r2, r4, [r3]
   bcb10:	2a00      	cmp	r2, #0
   bcb12:	d1f9      	bne.n	bcb08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcb14:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcb18:	2e00      	cmp	r6, #0
   bcb1a:	d0de      	beq.n	bcada <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcb1c:	4620      	mov	r0, r4
   bcb1e:	f7ff fa95 	bl	bc04c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcb22:	4607      	mov	r7, r0
   bcb24:	b160      	cbz	r0, bcb40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcb26:	f105 010c 	add.w	r1, r5, #12
   bcb2a:	4630      	mov	r0, r6
   bcb2c:	f7ff fe44 	bl	bc7b8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bcb30:	4630      	mov	r0, r6
   bcb32:	f7f8 f8c2 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcb36:	2110      	movs	r1, #16
   bcb38:	4630      	mov	r0, r6
   bcb3a:	f7f7 fab0 	bl	b409e <_ZdlPvj>
   bcb3e:	e7cc      	b.n	bcada <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcb40:	4631      	mov	r1, r6
   bcb42:	a803      	add	r0, sp, #12
   bcb44:	f7ff ffa0 	bl	bca88 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcb48:	7b2b      	ldrb	r3, [r5, #12]
   bcb4a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcb4e:	2010      	movs	r0, #16
   bcb50:	f7f7 faa1 	bl	b4096 <_Znwj>
   bcb54:	4605      	mov	r5, r0
   bcb56:	b1d0      	cbz	r0, bcb8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bcb58:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcb5a:	2014      	movs	r0, #20
   bcb5c:	f7f7 fa9b 	bl	b4096 <_Znwj>
   bcb60:	4604      	mov	r4, r0
   bcb62:	b178      	cbz	r0, bcb84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bcb64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcb66:	4601      	mov	r1, r0
   bcb68:	a803      	add	r0, sp, #12
   bcb6a:	f7fa fe96 	bl	b789a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcb6e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcb70:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb72:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcb74:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bcb76:	9205      	str	r2, [sp, #20]
   bcb78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb7a:	60e3      	str	r3, [r4, #12]
   bcb7c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bcb80:	9206      	str	r2, [sp, #24]
   bcb82:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bcb84:	4b06      	ldr	r3, [pc, #24]	; (bcba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bcb86:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcb88:	4b06      	ldr	r3, [pc, #24]	; (bcba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcb8a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcb8c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bcb8e:	a803      	add	r0, sp, #12
   bcb90:	f7f8 f893 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcb94:	2200      	movs	r2, #0
   bcb96:	4629      	mov	r1, r5
   bcb98:	4803      	ldr	r0, [pc, #12]	; (bcba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bcb9a:	f7ff fa5f 	bl	bc05c <application_thread_invoke>
   bcb9e:	e7c7      	b.n	bcb30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bcba0:	000bc7cb 	.word	0x000bc7cb
   bcba4:	000bcbad 	.word	0x000bcbad
   bcba8:	000bc387 	.word	0x000bc387

000bcbac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bcbac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcbae:	b570      	push	{r4, r5, r6, lr}
   bcbb0:	4604      	mov	r4, r0
	switch (__op)
   bcbb2:	d103      	bne.n	bcbbc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcbb4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcbb6:	6003      	str	r3, [r0, #0]
      }
   bcbb8:	2000      	movs	r0, #0
   bcbba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bcbbc:	2a02      	cmp	r2, #2
   bcbbe:	d00c      	beq.n	bcbda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bcbc0:	2a03      	cmp	r2, #3
   bcbc2:	d1f9      	bne.n	bcbb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcbc4:	6804      	ldr	r4, [r0, #0]
   bcbc6:	2c00      	cmp	r4, #0
   bcbc8:	d0f6      	beq.n	bcbb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bcbca:	4620      	mov	r0, r4
   bcbcc:	f7f8 f875 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcbd0:	2114      	movs	r1, #20
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	f7f7 fa63 	bl	b409e <_ZdlPvj>
   bcbd8:	e7ee      	b.n	bcbb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcbda:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bcbdc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcbde:	f7f7 fa5a 	bl	b4096 <_Znwj>
   bcbe2:	4605      	mov	r5, r0
   bcbe4:	b120      	cbz	r0, bcbf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bcbe6:	4631      	mov	r1, r6
   bcbe8:	f7ff ff4e 	bl	bca88 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bcbec:	7c33      	ldrb	r3, [r6, #16]
   bcbee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bcbf0:	6025      	str	r5, [r4, #0]
	}
   bcbf2:	e7e1      	b.n	bcbb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bcbf4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcbf4:	2200      	movs	r2, #0
   bcbf6:	6840      	ldr	r0, [r0, #4]
   bcbf8:	4611      	mov	r1, r2
   bcbfa:	f7ff bb19 	b.w	bc230 <network_listening>

000bcbfe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcbfe:	2200      	movs	r2, #0
   bcc00:	6840      	ldr	r0, [r0, #4]
   bcc02:	4611      	mov	r1, r2
   bcc04:	f7ff bb24 	b.w	bc250 <network_get_listen_timeout>

000bcc08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcc08:	6840      	ldr	r0, [r0, #4]
   bcc0a:	2200      	movs	r2, #0
   bcc0c:	f7ff bb18 	b.w	bc240 <network_set_listen_timeout>

000bcc10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcc10:	6840      	ldr	r0, [r0, #4]
   bcc12:	2200      	movs	r2, #0
   bcc14:	f081 0101 	eor.w	r1, r1, #1
   bcc18:	f7ff bb02 	b.w	bc220 <network_listen>

000bcc1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcc1c:	2300      	movs	r3, #0
   bcc1e:	6840      	ldr	r0, [r0, #4]
   bcc20:	461a      	mov	r2, r3
   bcc22:	4619      	mov	r1, r3
   bcc24:	f7ff baf4 	b.w	bc210 <network_off>

000bcc28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcc28:	2300      	movs	r3, #0
   bcc2a:	6840      	ldr	r0, [r0, #4]
   bcc2c:	461a      	mov	r2, r3
   bcc2e:	4619      	mov	r1, r3
   bcc30:	f7ff bae6 	b.w	bc200 <network_on>

000bcc34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcc34:	2200      	movs	r2, #0
   bcc36:	6840      	ldr	r0, [r0, #4]
   bcc38:	4611      	mov	r1, r2
   bcc3a:	f7ff bad9 	b.w	bc1f0 <network_ready>

000bcc3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcc3e:	2200      	movs	r2, #0
   bcc40:	6840      	ldr	r0, [r0, #4]
   bcc42:	4611      	mov	r1, r2
   bcc44:	f7ff bac4 	b.w	bc1d0 <network_connecting>

000bcc48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcc48:	6840      	ldr	r0, [r0, #4]
   bcc4a:	2200      	movs	r2, #0
   bcc4c:	2102      	movs	r1, #2
   bcc4e:	f7ff bac7 	b.w	bc1e0 <network_disconnect>

000bcc52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcc52:	2300      	movs	r3, #0
   bcc54:	6840      	ldr	r0, [r0, #4]
   bcc56:	461a      	mov	r2, r3
   bcc58:	f7ff bab2 	b.w	bc1c0 <network_connect>

000bcc5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bcc5c:	4b02      	ldr	r3, [pc, #8]	; (bcc68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bcc5e:	2203      	movs	r2, #3
   bcc60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bcc62:	4a02      	ldr	r2, [pc, #8]	; (bcc6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcc64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bcc66:	4770      	bx	lr
   bcc68:	2003e5b4 	.word	0x2003e5b4
   bcc6c:	000c1ec0 	.word	0x000c1ec0

000bcc70 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bcc70:	6800      	ldr	r0, [r0, #0]
   bcc72:	f000 b8e7 	b.w	bce44 <_ZN7TwoWire4lockEv>

000bcc76 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bcc76:	b510      	push	{r4, lr}
   bcc78:	4604      	mov	r4, r0
      lock_(_lock) {
   bcc7a:	6001      	str	r1, [r0, #0]
   bcc7c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bcc7e:	b10a      	cbz	r2, bcc84 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bcc80:	f7ff fff6 	bl	bcc70 <_ZN9FuelGauge4lockEv>
}
   bcc84:	4620      	mov	r0, r4
   bcc86:	bd10      	pop	{r4, pc}

000bcc88 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bcc88:	b513      	push	{r0, r1, r4, lr}
   bcc8a:	4604      	mov	r4, r0
   bcc8c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bcc8e:	f002 fcb9 	bl	bf604 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bcc92:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bcc94:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bcc96:	4620      	mov	r0, r4
   bcc98:	f7ff ffed 	bl	bcc76 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bcc9c:	4620      	mov	r0, r4
   bcc9e:	b002      	add	sp, #8
   bcca0:	bd10      	pop	{r4, pc}

000bcca2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bcca2:	6800      	ldr	r0, [r0, #0]
   bcca4:	f000 b8d7 	b.w	bce56 <_ZN7TwoWire6unlockEv>

000bcca8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bcca8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bccac:	4604      	mov	r4, r0
   bccae:	461d      	mov	r5, r3
   bccb0:	460f      	mov	r7, r1
   bccb2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bccb4:	f7ff ffdc 	bl	bcc70 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bccb8:	2236      	movs	r2, #54	; 0x36
   bccba:	2300      	movs	r3, #0
   bccbc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bccc0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bccc2:	f04f 0801 	mov.w	r8, #1
   bccc6:	230a      	movs	r3, #10
   bccc8:	4669      	mov	r1, sp
   bccca:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bccce:	f000 f89d 	bl	bce0c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bccd2:	6820      	ldr	r0, [r4, #0]
   bccd4:	6803      	ldr	r3, [r0, #0]
   bccd6:	4639      	mov	r1, r7
   bccd8:	689b      	ldr	r3, [r3, #8]
   bccda:	4798      	blx	r3
    i2c_.write(MSB);
   bccdc:	6820      	ldr	r0, [r4, #0]
   bccde:	6803      	ldr	r3, [r0, #0]
   bcce0:	4631      	mov	r1, r6
   bcce2:	689b      	ldr	r3, [r3, #8]
   bcce4:	4798      	blx	r3
    i2c_.write(LSB);
   bcce6:	6820      	ldr	r0, [r4, #0]
   bcce8:	6803      	ldr	r3, [r0, #0]
   bccea:	4629      	mov	r1, r5
   bccec:	689b      	ldr	r3, [r3, #8]
   bccee:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bccf0:	4641      	mov	r1, r8
   bccf2:	6820      	ldr	r0, [r4, #0]
   bccf4:	f000 f8a2 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
   bccf8:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bccfa:	4620      	mov	r0, r4
   bccfc:	bf0c      	ite	eq
   bccfe:	2500      	moveq	r5, #0
   bcd00:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bcd04:	f7ff ffcd 	bl	bcca2 <_ZN9FuelGauge6unlockEv>
}
   bcd08:	4628      	mov	r0, r5
   bcd0a:	b004      	add	sp, #16
   bcd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcd10 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bcd10:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bcd12:	2240      	movs	r2, #64	; 0x40
   bcd14:	2300      	movs	r3, #0
   bcd16:	2106      	movs	r1, #6
   bcd18:	f7ff ffc6 	bl	bcca8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bcd1c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bcd20:	bd08      	pop	{r3, pc}

000bcd22 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bcd22:	4770      	bx	lr

000bcd24 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bcd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcd26:	4606      	mov	r6, r0
   bcd28:	4615      	mov	r5, r2
   bcd2a:	460c      	mov	r4, r1
   bcd2c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bcd2e:	42bc      	cmp	r4, r7
   bcd30:	d006      	beq.n	bcd40 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bcd32:	6833      	ldr	r3, [r6, #0]
   bcd34:	f814 1b01 	ldrb.w	r1, [r4], #1
   bcd38:	689b      	ldr	r3, [r3, #8]
   bcd3a:	4630      	mov	r0, r6
   bcd3c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bcd3e:	e7f6      	b.n	bcd2e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bcd40:	4628      	mov	r0, r5
   bcd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcd44 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bcd44:	7c00      	ldrb	r0, [r0, #16]
   bcd46:	2200      	movs	r2, #0
   bcd48:	f7fe bf7e 	b.w	bbc48 <hal_i2c_write>

000bcd4c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bcd4c:	7c00      	ldrb	r0, [r0, #16]
   bcd4e:	2100      	movs	r1, #0
   bcd50:	f7fe bf82 	b.w	bbc58 <hal_i2c_available>

000bcd54 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bcd54:	7c00      	ldrb	r0, [r0, #16]
   bcd56:	2100      	movs	r1, #0
   bcd58:	f7fe bf86 	b.w	bbc68 <hal_i2c_read>

000bcd5c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bcd5c:	7c00      	ldrb	r0, [r0, #16]
   bcd5e:	2100      	movs	r1, #0
   bcd60:	f7fe bf8a 	b.w	bbc78 <hal_i2c_peek>

000bcd64 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bcd64:	7c00      	ldrb	r0, [r0, #16]
   bcd66:	2100      	movs	r1, #0
   bcd68:	f7fe bf8e 	b.w	bbc88 <hal_i2c_flush>

000bcd6c <_ZN7TwoWireD0Ev>:
   bcd6c:	b510      	push	{r4, lr}
   bcd6e:	2114      	movs	r1, #20
   bcd70:	4604      	mov	r4, r0
   bcd72:	f7f7 f994 	bl	b409e <_ZdlPvj>
   bcd76:	4620      	mov	r0, r4
   bcd78:	bd10      	pop	{r4, pc}
	...

000bcd7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcd7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcd7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcd82:	4604      	mov	r4, r0
   bcd84:	4608      	mov	r0, r1
   bcd86:	2100      	movs	r1, #0
   bcd88:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcd8c:	4b03      	ldr	r3, [pc, #12]	; (bcd9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bcd8e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bcd90:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bcd92:	4611      	mov	r1, r2
   bcd94:	f7fe ff88 	bl	bbca8 <hal_i2c_init>
}
   bcd98:	4620      	mov	r0, r4
   bcd9a:	bd10      	pop	{r4, pc}
   bcd9c:	000c1efc 	.word	0x000c1efc

000bcda0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bcda0:	2300      	movs	r3, #0
   bcda2:	7c00      	ldrb	r0, [r0, #16]
   bcda4:	461a      	mov	r2, r3
   bcda6:	4619      	mov	r1, r3
   bcda8:	f7fe bf36 	b.w	bbc18 <hal_i2c_begin>

000bcdac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bcdac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bcdae:	2200      	movs	r2, #0
   bcdb0:	2314      	movs	r3, #20
   bcdb2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bcdb6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bcdba:	780b      	ldrb	r3, [r1, #0]
   bcdbc:	f88d 3008 	strb.w	r3, [sp, #8]
   bcdc0:	684b      	ldr	r3, [r1, #4]
   bcdc2:	9303      	str	r3, [sp, #12]
   bcdc4:	68cb      	ldr	r3, [r1, #12]
   bcdc6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bcdc8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bcdca:	7a0b      	ldrb	r3, [r1, #8]
   bcdcc:	9305      	str	r3, [sp, #20]
   bcdce:	a901      	add	r1, sp, #4
   bcdd0:	f7fe ff82 	bl	bbcd8 <hal_i2c_request_ex>
}
   bcdd4:	b007      	add	sp, #28
   bcdd6:	f85d fb04 	ldr.w	pc, [sp], #4

000bcdda <_ZN7TwoWire11requestFromEhjh>:
{
   bcdda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bcddc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bcdde:	f88d 1000 	strb.w	r1, [sp]
   bcde2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bcde6:	9103      	str	r1, [sp, #12]
   bcde8:	bf18      	it	ne
   bcdea:	2301      	movne	r3, #1
   bcdec:	4669      	mov	r1, sp
    size_ = size;
   bcdee:	9201      	str	r2, [sp, #4]
   bcdf0:	f88d 3008 	strb.w	r3, [sp, #8]
   bcdf4:	f7ff ffda 	bl	bcdac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bcdf8:	b005      	add	sp, #20
   bcdfa:	f85d fb04 	ldr.w	pc, [sp], #4

000bcdfe <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bcdfe:	7c00      	ldrb	r0, [r0, #16]
   bce00:	2200      	movs	r2, #0
   bce02:	f7fe bf11 	b.w	bbc28 <hal_i2c_begin_transmission>

000bce06 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bce06:	b2c9      	uxtb	r1, r1
   bce08:	f7ff bff9 	b.w	bcdfe <_ZN7TwoWire17beginTransmissionEh>

000bce0c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bce0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bce0e:	2300      	movs	r3, #0
   bce10:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bce14:	684a      	ldr	r2, [r1, #4]
   bce16:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bce18:	2314      	movs	r3, #20
    };
   bce1a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bce1c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bce20:	780b      	ldrb	r3, [r1, #0]
    };
   bce22:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bce24:	7a0a      	ldrb	r2, [r1, #8]
   bce26:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bce28:	7c00      	ldrb	r0, [r0, #16]
    };
   bce2a:	f88d 3008 	strb.w	r3, [sp, #8]
   bce2e:	aa01      	add	r2, sp, #4
   bce30:	4619      	mov	r1, r3
   bce32:	f7fe fef9 	bl	bbc28 <hal_i2c_begin_transmission>
}
   bce36:	b007      	add	sp, #28
   bce38:	f85d fb04 	ldr.w	pc, [sp], #4

000bce3c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bce3c:	7c00      	ldrb	r0, [r0, #16]
   bce3e:	2200      	movs	r2, #0
   bce40:	f7fe befa 	b.w	bbc38 <hal_i2c_end_transmission>

000bce44 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bce44:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bce46:	2100      	movs	r1, #0
   bce48:	7c00      	ldrb	r0, [r0, #16]
   bce4a:	f7fe ff35 	bl	bbcb8 <hal_i2c_lock>
}
   bce4e:	fab0 f080 	clz	r0, r0
   bce52:	0940      	lsrs	r0, r0, #5
   bce54:	bd08      	pop	{r3, pc}

000bce56 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bce56:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bce58:	2100      	movs	r1, #0
   bce5a:	7c00      	ldrb	r0, [r0, #16]
   bce5c:	f7fe ff34 	bl	bbcc8 <hal_i2c_unlock>
}
   bce60:	fab0 f080 	clz	r0, r0
   bce64:	0940      	lsrs	r0, r0, #5
   bce66:	bd08      	pop	{r3, pc}

000bce68 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bce68:	4700      	bx	r0
	...

000bce6c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bce6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bce70:	2400      	movs	r4, #0
{
   bce72:	461d      	mov	r5, r3
   bce74:	460f      	mov	r7, r1
   bce76:	4690      	mov	r8, r2
   bce78:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bce7a:	f7fe febd 	bl	bbbf8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bce7e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bce80:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bce84:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bce88:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bce8c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bce90:	bfa2      	ittt	ge
   bce92:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bce96:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bce9a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bce9c:	4907      	ldr	r1, [pc, #28]	; (bcebc <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bce9e:	9400      	str	r4, [sp, #0]
   bcea0:	4643      	mov	r3, r8
   bcea2:	463a      	mov	r2, r7
   bcea4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bcea6:	bfa8      	it	ge
   bcea8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bceac:	f7fe fe9c 	bl	bbbe8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bceb0:	fab0 f080 	clz	r0, r0
   bceb4:	0940      	lsrs	r0, r0, #5
   bceb6:	b004      	add	sp, #16
   bceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcebc:	000bce69 	.word	0x000bce69

000bcec0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bcec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcec2:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bcec4:	f7fe fe98 	bl	bbbf8 <HAL_Interrupts_Detach>
   bcec8:	4605      	mov	r5, r0
   bceca:	b970      	cbnz	r0, bceea <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bcecc:	4f08      	ldr	r7, [pc, #32]	; (bcef0 <_Z15detachInterruptt+0x30>)
   bcece:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bced2:	b146      	cbz	r6, bcee6 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bced4:	4630      	mov	r0, r6
   bced6:	f7f7 fef0 	bl	b4cba <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bceda:	2110      	movs	r1, #16
   bcedc:	4630      	mov	r0, r6
   bcede:	f7f7 f8de 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bcee2:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bcee6:	2001      	movs	r0, #1
   bcee8:	e000      	b.n	bceec <_Z15detachInterruptt+0x2c>
        return false;
   bceea:	2000      	movs	r0, #0
    }
    return true;
}
   bceec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bceee:	bf00      	nop
   bcef0:	2003e5bc 	.word	0x2003e5bc

000bcef4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bcef4:	4770      	bx	lr

000bcef6 <_ZN9IPAddressD0Ev>:
   bcef6:	b510      	push	{r4, lr}
   bcef8:	2118      	movs	r1, #24
   bcefa:	4604      	mov	r4, r0
   bcefc:	f7f7 f8cf 	bl	b409e <_ZdlPvj>
   bcf00:	4620      	mov	r0, r4
   bcf02:	bd10      	pop	{r4, pc}

000bcf04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bcf04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bcf06:	7d03      	ldrb	r3, [r0, #20]
   bcf08:	2b06      	cmp	r3, #6
{
   bcf0a:	b08d      	sub	sp, #52	; 0x34
   bcf0c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcf0e:	f100 0704 	add.w	r7, r0, #4
   bcf12:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bcf16:	d012      	beq.n	bcf3e <_ZNK9IPAddress7printToER5Print+0x3a>
   bcf18:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bcf1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bcf20:	220a      	movs	r2, #10
   bcf22:	4630      	mov	r0, r6
   bcf24:	f001 fb0d 	bl	be542 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bcf28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bcf2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bcf2c:	d019      	beq.n	bcf62 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bcf2e:	2c00      	cmp	r4, #0
   bcf30:	d0f4      	beq.n	bcf1c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bcf32:	212e      	movs	r1, #46	; 0x2e
   bcf34:	4630      	mov	r0, r6
   bcf36:	f001 faf5 	bl	be524 <_ZN5Print5printEc>
   bcf3a:	4404      	add	r4, r0
   bcf3c:	e7ee      	b.n	bcf1c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcf3e:	232f      	movs	r3, #47	; 0x2f
   bcf40:	466a      	mov	r2, sp
   bcf42:	4639      	mov	r1, r7
   bcf44:	200a      	movs	r0, #10
		buf[0] = 0;
   bcf46:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcf4a:	f7fe fecd 	bl	bbce8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bcf4e:	4668      	mov	r0, sp
   bcf50:	f003 f9b3 	bl	c02ba <strlen>
   bcf54:	6833      	ldr	r3, [r6, #0]
   bcf56:	4602      	mov	r2, r0
   bcf58:	68db      	ldr	r3, [r3, #12]
   bcf5a:	4669      	mov	r1, sp
   bcf5c:	4630      	mov	r0, r6
   bcf5e:	4798      	blx	r3
   bcf60:	4604      	mov	r4, r0
    }
    return n;
}
   bcf62:	4620      	mov	r0, r4
   bcf64:	b00d      	add	sp, #52	; 0x34
   bcf66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcf68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bcf68:	b510      	push	{r4, lr}
   bcf6a:	4b05      	ldr	r3, [pc, #20]	; (bcf80 <_ZN9IPAddressC1Ev+0x18>)
   bcf6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bcf6e:	2211      	movs	r2, #17
   bcf70:	f840 3b04 	str.w	r3, [r0], #4
   bcf74:	2100      	movs	r1, #0
   bcf76:	f003 f8e5 	bl	c0144 <memset>
}
   bcf7a:	4620      	mov	r0, r4
   bcf7c:	bd10      	pop	{r4, pc}
   bcf7e:	bf00      	nop
   bcf80:	000c1f24 	.word	0x000c1f24

000bcf84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bcf84:	4603      	mov	r3, r0
   bcf86:	4a07      	ldr	r2, [pc, #28]	; (bcfa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bcf88:	b510      	push	{r4, lr}
   bcf8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bcf8e:	f101 0210 	add.w	r2, r1, #16
   bcf92:	f851 4b04 	ldr.w	r4, [r1], #4
   bcf96:	f843 4b04 	str.w	r4, [r3], #4
   bcf9a:	4291      	cmp	r1, r2
   bcf9c:	d1f9      	bne.n	bcf92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bcf9e:	780a      	ldrb	r2, [r1, #0]
   bcfa0:	701a      	strb	r2, [r3, #0]
}
   bcfa2:	bd10      	pop	{r4, pc}
   bcfa4:	000c1f24 	.word	0x000c1f24

000bcfa8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bcfa8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bcfaa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bcfae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bcfb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bcfb6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bcfba:	2304      	movs	r3, #4
   bcfbc:	6041      	str	r1, [r0, #4]
   bcfbe:	7503      	strb	r3, [r0, #20]
}
   bcfc0:	bd10      	pop	{r4, pc}
	...

000bcfc4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcfc4:	b507      	push	{r0, r1, r2, lr}
   bcfc6:	4b06      	ldr	r3, [pc, #24]	; (bcfe0 <_ZN9IPAddressC1EPKh+0x1c>)
   bcfc8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bcfca:	78cb      	ldrb	r3, [r1, #3]
   bcfcc:	9300      	str	r3, [sp, #0]
   bcfce:	788b      	ldrb	r3, [r1, #2]
   bcfd0:	784a      	ldrb	r2, [r1, #1]
   bcfd2:	7809      	ldrb	r1, [r1, #0]
   bcfd4:	f7ff ffe8 	bl	bcfa8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bcfd8:	b003      	add	sp, #12
   bcfda:	f85d fb04 	ldr.w	pc, [sp], #4
   bcfde:	bf00      	nop
   bcfe0:	000c1f24 	.word	0x000c1f24

000bcfe4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bcfe4:	f100 0310 	add.w	r3, r0, #16
   bcfe8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bcfea:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bcfee:	2901      	cmp	r1, #1
   bcff0:	4618      	mov	r0, r3
   bcff2:	d108      	bne.n	bd006 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bcff4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bcff8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bcffc:	3a01      	subs	r2, #1
   bcffe:	f103 0310 	add.w	r3, r3, #16
   bd002:	d1f2      	bne.n	bcfea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bd004:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bd006:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bd008:	bf04      	itt	eq
   bd00a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bd00e:	1852      	addeq	r2, r2, r1
   bd010:	e7f4      	b.n	bcffc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bd012 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bd012:	b40e      	push	{r1, r2, r3}
   bd014:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd016:	b088      	sub	sp, #32
   bd018:	af00      	add	r7, sp, #0
   bd01a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd01e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd020:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd024:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bd026:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd028:	462b      	mov	r3, r5
   bd02a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bd02c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd02e:	f7ff f957 	bl	bc2e0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bd032:	280f      	cmp	r0, #15
   bd034:	687a      	ldr	r2, [r7, #4]
   bd036:	d91a      	bls.n	bd06e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bd038:	f100 0308 	add.w	r3, r0, #8
   bd03c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bd040:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bd042:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd046:	1c41      	adds	r1, r0, #1
   bd048:	462b      	mov	r3, r5
   bd04a:	4668      	mov	r0, sp
        va_start(args, fmt);
   bd04c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bd04e:	f7ff f947 	bl	bc2e0 <vsnprintf>
        if (n > 0) {
   bd052:	1e02      	subs	r2, r0, #0
   bd054:	dd04      	ble.n	bd060 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bd056:	6823      	ldr	r3, [r4, #0]
   bd058:	4669      	mov	r1, sp
   bd05a:	689b      	ldr	r3, [r3, #8]
   bd05c:	4620      	mov	r0, r4
   bd05e:	4798      	blx	r3
   bd060:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bd062:	3720      	adds	r7, #32
   bd064:	46bd      	mov	sp, r7
   bd066:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd06a:	b003      	add	sp, #12
   bd06c:	4770      	bx	lr
    } else if (n > 0) {
   bd06e:	2800      	cmp	r0, #0
   bd070:	d0f7      	beq.n	bd062 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bd072:	6823      	ldr	r3, [r4, #0]
   bd074:	4602      	mov	r2, r0
   bd076:	689b      	ldr	r3, [r3, #8]
   bd078:	f107 0110 	add.w	r1, r7, #16
   bd07c:	4620      	mov	r0, r4
   bd07e:	4798      	blx	r3
}
   bd080:	e7ef      	b.n	bd062 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bd082 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd082:	b538      	push	{r3, r4, r5, lr}
   bd084:	680b      	ldr	r3, [r1, #0]
   bd086:	6003      	str	r3, [r0, #0]
   bd088:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bd08a:	6843      	ldr	r3, [r0, #4]
   bd08c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd08e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bd090:	d008      	beq.n	bd0a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bd092:	b115      	cbz	r5, bd09a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bd094:	686b      	ldr	r3, [r5, #4]
   bd096:	3301      	adds	r3, #1
   bd098:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bd09a:	6860      	ldr	r0, [r4, #4]
   bd09c:	b108      	cbz	r0, bd0a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bd09e:	f7ff f986 	bl	bc3ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bd0a2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bd0a4:	bd38      	pop	{r3, r4, r5, pc}

000bd0a6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bd0a6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd0a8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bd0aa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd0ae:	689b      	ldr	r3, [r3, #8]
   bd0b0:	2201      	movs	r2, #1
   bd0b2:	f10d 0107 	add.w	r1, sp, #7
   bd0b6:	4798      	blx	r3
}
   bd0b8:	b003      	add	sp, #12
   bd0ba:	f85d fb04 	ldr.w	pc, [sp], #4

000bd0be <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd0be:	460b      	mov	r3, r1
   bd0c0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bd0c2:	2200      	movs	r2, #0
   bd0c4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bd0c6:	e9c0 2200 	strd	r2, r2, [r0]
   bd0ca:	4604      	mov	r4, r0
        t_ = t;
   bd0cc:	6083      	str	r3, [r0, #8]
    if (t) {
   bd0ce:	b90b      	cbnz	r3, bd0d4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bd0d0:	4620      	mov	r0, r4
   bd0d2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bd0d4:	f7ff ffd5 	bl	bd082 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bd0d8:	e7fa      	b.n	bd0d0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bd0da <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bd0da:	6883      	ldr	r3, [r0, #8]
   bd0dc:	b1eb      	cbz	r3, bd11a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bd0de:	781a      	ldrb	r2, [r3, #0]
   bd0e0:	2a03      	cmp	r2, #3
   bd0e2:	d81a      	bhi.n	bd11a <_ZNK5spark9JSONValue4typeEv+0x40>
   bd0e4:	e8df f002 	tbb	[pc, r2]
   bd0e8:	1b021704 	.word	0x1b021704
   bd0ec:	2005      	movs	r0, #5
   bd0ee:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bd0f0:	6802      	ldr	r2, [r0, #0]
   bd0f2:	685b      	ldr	r3, [r3, #4]
   bd0f4:	6852      	ldr	r2, [r2, #4]
   bd0f6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bd0f8:	282d      	cmp	r0, #45	; 0x2d
   bd0fa:	d012      	beq.n	bd122 <_ZNK5spark9JSONValue4typeEv+0x48>
   bd0fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd100:	2b09      	cmp	r3, #9
   bd102:	d90e      	bls.n	bd122 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bd104:	2874      	cmp	r0, #116	; 0x74
   bd106:	d00e      	beq.n	bd126 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bd108:	2866      	cmp	r0, #102	; 0x66
   bd10a:	d00c      	beq.n	bd126 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bd10c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bd110:	4258      	negs	r0, r3
   bd112:	4158      	adcs	r0, r3
   bd114:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bd116:	2006      	movs	r0, #6
   bd118:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bd11a:	2000      	movs	r0, #0
   bd11c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bd11e:	2004      	movs	r0, #4
   bd120:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bd122:	2003      	movs	r0, #3
   bd124:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bd126:	2002      	movs	r0, #2
}
   bd128:	4770      	bx	lr

000bd12a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bd12a:	b510      	push	{r4, lr}
   bd12c:	4604      	mov	r4, r0
    switch (type()) {
   bd12e:	f7ff ffd4 	bl	bd0da <_ZNK5spark9JSONValue4typeEv>
   bd132:	2802      	cmp	r0, #2
   bd134:	d00e      	beq.n	bd154 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bd136:	1ec3      	subs	r3, r0, #3
   bd138:	b2db      	uxtb	r3, r3
   bd13a:	2b01      	cmp	r3, #1
   bd13c:	d814      	bhi.n	bd168 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bd13e:	6822      	ldr	r2, [r4, #0]
   bd140:	68a3      	ldr	r3, [r4, #8]
   bd142:	6850      	ldr	r0, [r2, #4]
   bd144:	685b      	ldr	r3, [r3, #4]
}
   bd146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bd14a:	220a      	movs	r2, #10
   bd14c:	2100      	movs	r1, #0
   bd14e:	4418      	add	r0, r3
   bd150:	f003 b9a4 	b.w	c049c <strtol>
        const char* const s = d_->json + t_->start;
   bd154:	6822      	ldr	r2, [r4, #0]
   bd156:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bd158:	6852      	ldr	r2, [r2, #4]
   bd15a:	685b      	ldr	r3, [r3, #4]
   bd15c:	5cd0      	ldrb	r0, [r2, r3]
   bd15e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bd162:	4258      	negs	r0, r3
   bd164:	4158      	adcs	r0, r3
}
   bd166:	bd10      	pop	{r4, pc}
    switch (type()) {
   bd168:	2000      	movs	r0, #0
   bd16a:	e7fc      	b.n	bd166 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bd16c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd16c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd16e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bd170:	e9c0 3300 	strd	r3, r3, [r0]
   bd174:	4604      	mov	r4, r0
        n_(0) {
   bd176:	480e      	ldr	r0, [pc, #56]	; (bd1b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bd178:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bd17c:	b1a9      	cbz	r1, bd1aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bd17e:	780b      	ldrb	r3, [r1, #0]
   bd180:	2b03      	cmp	r3, #3
   bd182:	d006      	beq.n	bd192 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bd184:	b98b      	cbnz	r3, bd1aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bd186:	6813      	ldr	r3, [r2, #0]
   bd188:	6858      	ldr	r0, [r3, #4]
   bd18a:	684b      	ldr	r3, [r1, #4]
   bd18c:	5cc3      	ldrb	r3, [r0, r3]
   bd18e:	2b6e      	cmp	r3, #110	; 0x6e
   bd190:	d007      	beq.n	bd1a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bd192:	6813      	ldr	r3, [r2, #0]
   bd194:	684d      	ldr	r5, [r1, #4]
   bd196:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bd198:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bd19a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bd19c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bd19e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bd1a0:	60e3      	str	r3, [r4, #12]
   bd1a2:	4611      	mov	r1, r2
   bd1a4:	4620      	mov	r0, r4
   bd1a6:	f7ff ff6c 	bl	bd082 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd1aa:	4620      	mov	r0, r4
   bd1ac:	bd38      	pop	{r3, r4, r5, pc}
   bd1ae:	bf00      	nop
   bd1b0:	000c1f8d 	.word	0x000c1f8d

000bd1b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bd1b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bd1b6:	2500      	movs	r5, #0
   bd1b8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bd1ba:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bd1be:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bd1c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd1c6:	4604      	mov	r4, r0
   bd1c8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bd1ca:	b14b      	cbz	r3, bd1e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bd1cc:	781a      	ldrb	r2, [r3, #0]
   bd1ce:	2a01      	cmp	r2, #1
   bd1d0:	d106      	bne.n	bd1e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bd1d2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bd1d6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bd1d8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bd1da:	6143      	str	r3, [r0, #20]
   bd1dc:	f7ff ff51 	bl	bd082 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bd1e0:	4620      	mov	r0, r4
   bd1e2:	bd38      	pop	{r3, r4, r5, pc}

000bd1e4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bd1e4:	b510      	push	{r4, lr}
    if (!n_) {
   bd1e6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bd1e8:	4604      	mov	r4, r0
    if (!n_) {
   bd1ea:	b163      	cbz	r3, bd206 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bd1ec:	6880      	ldr	r0, [r0, #8]
   bd1ee:	60e0      	str	r0, [r4, #12]
    --n_;
   bd1f0:	3b01      	subs	r3, #1
    ++t_;
   bd1f2:	3010      	adds	r0, #16
   bd1f4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bd1f6:	6120      	str	r0, [r4, #16]
    --n_;
   bd1f8:	6163      	str	r3, [r4, #20]
    if (n_) {
   bd1fa:	b113      	cbz	r3, bd202 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bd1fc:	f7ff fef2 	bl	bcfe4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bd200:	60a0      	str	r0, [r4, #8]
    return true;
   bd202:	2001      	movs	r0, #1
   bd204:	e000      	b.n	bd208 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bd206:	4618      	mov	r0, r3
}
   bd208:	bd10      	pop	{r4, pc}

000bd20a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd20a:	b510      	push	{r4, lr}
    write('}');
   bd20c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bd20e:	4604      	mov	r4, r0
    write('}');
   bd210:	f7ff ff49 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bd214:	2301      	movs	r3, #1
   bd216:	7123      	strb	r3, [r4, #4]
}
   bd218:	4620      	mov	r0, r4
   bd21a:	bd10      	pop	{r4, pc}

000bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bd21c:	b508      	push	{r3, lr}
    switch (state_) {
   bd21e:	7903      	ldrb	r3, [r0, #4]
   bd220:	2b01      	cmp	r3, #1
   bd222:	d002      	beq.n	bd22a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bd224:	2b02      	cmp	r3, #2
   bd226:	d004      	beq.n	bd232 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bd228:	bd08      	pop	{r3, pc}
        write(',');
   bd22a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bd22c:	f7ff ff3b 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
}
   bd230:	e7fa      	b.n	bd228 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bd232:	213a      	movs	r1, #58	; 0x3a
   bd234:	e7fa      	b.n	bd22c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bd236 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bd236:	b510      	push	{r4, lr}
   bd238:	4604      	mov	r4, r0
    writeSeparator();
   bd23a:	f7ff ffef 	bl	bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bd23e:	4620      	mov	r0, r4
   bd240:	217b      	movs	r1, #123	; 0x7b
   bd242:	f7ff ff30 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bd246:	2300      	movs	r3, #0
   bd248:	7123      	strb	r3, [r4, #4]
}
   bd24a:	4620      	mov	r0, r4
   bd24c:	bd10      	pop	{r4, pc}
	...

000bd250 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bd250:	b513      	push	{r0, r1, r4, lr}
   bd252:	4604      	mov	r4, r0
   bd254:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd256:	f7ff ffe1 	bl	bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bd25a:	6823      	ldr	r3, [r4, #0]
   bd25c:	9a01      	ldr	r2, [sp, #4]
   bd25e:	68db      	ldr	r3, [r3, #12]
   bd260:	4903      	ldr	r1, [pc, #12]	; (bd270 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bd262:	4620      	mov	r0, r4
   bd264:	4798      	blx	r3
    state_ = NEXT;
   bd266:	2301      	movs	r3, #1
}
   bd268:	4620      	mov	r0, r4
    state_ = NEXT;
   bd26a:	7123      	strb	r3, [r4, #4]
}
   bd26c:	b002      	add	sp, #8
   bd26e:	bd10      	pop	{r4, pc}
   bd270:	000c14b3 	.word	0x000c14b3

000bd274 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bd274:	b513      	push	{r0, r1, r4, lr}
   bd276:	4604      	mov	r4, r0
   bd278:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bd27a:	f7ff ffcf 	bl	bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bd27e:	6823      	ldr	r3, [r4, #0]
   bd280:	9a01      	ldr	r2, [sp, #4]
   bd282:	68db      	ldr	r3, [r3, #12]
   bd284:	4903      	ldr	r1, [pc, #12]	; (bd294 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bd286:	4620      	mov	r0, r4
   bd288:	4798      	blx	r3
    state_ = NEXT;
   bd28a:	2301      	movs	r3, #1
}
   bd28c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd28e:	7123      	strb	r3, [r4, #4]
}
   bd290:	b002      	add	sp, #8
   bd292:	bd10      	pop	{r4, pc}
   bd294:	000c181e 	.word	0x000c181e

000bd298 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd29c:	460d      	mov	r5, r1
    write('"');
   bd29e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bd2a0:	4690      	mov	r8, r2
   bd2a2:	4604      	mov	r4, r0
    write('"');
   bd2a4:	f7ff feff 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bd2a8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bd350 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bd2ac:	44a8      	add	r8, r5
    const char *s = str;
   bd2ae:	462f      	mov	r7, r5
    while (s != end) {
   bd2b0:	4547      	cmp	r7, r8
   bd2b2:	46ba      	mov	sl, r7
   bd2b4:	d03d      	beq.n	bd332 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bd2b6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bd2ba:	2e22      	cmp	r6, #34	; 0x22
   bd2bc:	d006      	beq.n	bd2cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd2be:	2e5c      	cmp	r6, #92	; 0x5c
   bd2c0:	d004      	beq.n	bd2cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bd2c2:	4630      	mov	r0, r6
   bd2c4:	f002 ff0e 	bl	c00e4 <isprint>
   bd2c8:	2800      	cmp	r0, #0
   bd2ca:	d1f1      	bne.n	bd2b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bd2cc:	6823      	ldr	r3, [r4, #0]
   bd2ce:	ebaa 0205 	sub.w	r2, sl, r5
   bd2d2:	689b      	ldr	r3, [r3, #8]
   bd2d4:	4629      	mov	r1, r5
   bd2d6:	4620      	mov	r0, r4
   bd2d8:	4798      	blx	r3
            write('\\');
   bd2da:	215c      	movs	r1, #92	; 0x5c
   bd2dc:	4620      	mov	r0, r4
   bd2de:	f7ff fee2 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bd2e2:	2e0d      	cmp	r6, #13
   bd2e4:	d80a      	bhi.n	bd2fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bd2e6:	2e07      	cmp	r6, #7
   bd2e8:	d91c      	bls.n	bd324 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd2ea:	f1a6 0308 	sub.w	r3, r6, #8
   bd2ee:	2b05      	cmp	r3, #5
   bd2f0:	d818      	bhi.n	bd324 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bd2f2:	e8df f003 	tbb	[pc, r3]
   bd2f6:	0f0d      	.short	0x0f0d
   bd2f8:	15131711 	.word	0x15131711
   bd2fc:	2e22      	cmp	r6, #34	; 0x22
   bd2fe:	d001      	beq.n	bd304 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bd300:	2e5c      	cmp	r6, #92	; 0x5c
   bd302:	d10f      	bne.n	bd324 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bd304:	4631      	mov	r1, r6
                write('b');
   bd306:	4620      	mov	r0, r4
   bd308:	f7ff fecd 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bd30c:	463d      	mov	r5, r7
    while (s != end) {
   bd30e:	e7cf      	b.n	bd2b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bd310:	2162      	movs	r1, #98	; 0x62
   bd312:	e7f8      	b.n	bd306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bd314:	2174      	movs	r1, #116	; 0x74
   bd316:	e7f6      	b.n	bd306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bd318:	216e      	movs	r1, #110	; 0x6e
   bd31a:	e7f4      	b.n	bd306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bd31c:	2166      	movs	r1, #102	; 0x66
   bd31e:	e7f2      	b.n	bd306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bd320:	2172      	movs	r1, #114	; 0x72
   bd322:	e7f0      	b.n	bd306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bd324:	6823      	ldr	r3, [r4, #0]
   bd326:	4632      	mov	r2, r6
   bd328:	68db      	ldr	r3, [r3, #12]
   bd32a:	4649      	mov	r1, r9
   bd32c:	4620      	mov	r0, r4
   bd32e:	4798      	blx	r3
                break;
   bd330:	e7ec      	b.n	bd30c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bd332:	42bd      	cmp	r5, r7
   bd334:	d005      	beq.n	bd342 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bd336:	6823      	ldr	r3, [r4, #0]
   bd338:	1b7a      	subs	r2, r7, r5
   bd33a:	689b      	ldr	r3, [r3, #8]
   bd33c:	4629      	mov	r1, r5
   bd33e:	4620      	mov	r0, r4
   bd340:	4798      	blx	r3
    }
    write('"');
   bd342:	2122      	movs	r1, #34	; 0x22
   bd344:	4620      	mov	r0, r4
   bd346:	f7ff feae 	bl	bd0a6 <_ZN5spark10JSONWriter5writeEc>
}
   bd34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd34e:	bf00      	nop
   bd350:	000c1f30 	.word	0x000c1f30

000bd354 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bd354:	b513      	push	{r0, r1, r4, lr}
   bd356:	4604      	mov	r4, r0
   bd358:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd35c:	f7ff ff5e 	bl	bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bd360:	4620      	mov	r0, r4
   bd362:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd366:	f7ff ff97 	bl	bd298 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bd36a:	2302      	movs	r3, #2
}
   bd36c:	4620      	mov	r0, r4
    state_ = VALUE;
   bd36e:	7123      	strb	r3, [r4, #4]
}
   bd370:	b002      	add	sp, #8
   bd372:	bd10      	pop	{r4, pc}

000bd374 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bd374:	b513      	push	{r0, r1, r4, lr}
   bd376:	4604      	mov	r4, r0
   bd378:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bd37c:	f7ff ff4e 	bl	bd21c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bd380:	4620      	mov	r0, r4
   bd382:	e9dd 2100 	ldrd	r2, r1, [sp]
   bd386:	f7ff ff87 	bl	bd298 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bd38a:	2301      	movs	r3, #1
}
   bd38c:	4620      	mov	r0, r4
    state_ = NEXT;
   bd38e:	7123      	strb	r3, [r4, #4]
}
   bd390:	b002      	add	sp, #8
   bd392:	bd10      	pop	{r4, pc}

000bd394 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bd394:	6880      	ldr	r0, [r0, #8]
   bd396:	6803      	ldr	r3, [r0, #0]
   bd398:	68db      	ldr	r3, [r3, #12]
   bd39a:	4718      	bx	r3

000bd39c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bd39c:	4770      	bx	lr

000bd39e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bd39e:	4608      	mov	r0, r1
   bd3a0:	b111      	cbz	r1, bd3a8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bd3a2:	680b      	ldr	r3, [r1, #0]
   bd3a4:	685b      	ldr	r3, [r3, #4]
   bd3a6:	4718      	bx	r3
}
   bd3a8:	4770      	bx	lr

000bd3aa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bd3aa:	4770      	bx	lr

000bd3ac <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd3ac:	4770      	bx	lr

000bd3ae <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bd3ae:	4770      	bx	lr

000bd3b0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bd3b0:	4770      	bx	lr

000bd3b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bd3b2:	b538      	push	{r3, r4, r5, lr}
   bd3b4:	4604      	mov	r4, r0
   bd3b6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bd3b8:	6800      	ldr	r0, [r0, #0]
   bd3ba:	212e      	movs	r1, #46	; 0x2e
   bd3bc:	f002 ff43 	bl	c0246 <strchrnul>
    size = s - category;
   bd3c0:	6823      	ldr	r3, [r4, #0]
   bd3c2:	1ac3      	subs	r3, r0, r3
   bd3c4:	602b      	str	r3, [r5, #0]
    if (size) {
   bd3c6:	b123      	cbz	r3, bd3d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bd3c8:	7803      	ldrb	r3, [r0, #0]
   bd3ca:	b103      	cbz	r3, bd3ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bd3cc:	3001      	adds	r0, #1
   bd3ce:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd3d0:	6020      	str	r0, [r4, #0]
}
   bd3d2:	4618      	mov	r0, r3
   bd3d4:	bd38      	pop	{r3, r4, r5, pc}

000bd3d6 <_ZN5spark16JSONStreamWriterD0Ev>:
   bd3d6:	b510      	push	{r4, lr}
   bd3d8:	210c      	movs	r1, #12
   bd3da:	4604      	mov	r4, r0
   bd3dc:	f7f6 fe5f 	bl	b409e <_ZdlPvj>
   bd3e0:	4620      	mov	r0, r4
   bd3e2:	bd10      	pop	{r4, pc}

000bd3e4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bd3e4:	b510      	push	{r4, lr}
   bd3e6:	2104      	movs	r1, #4
   bd3e8:	4604      	mov	r4, r0
   bd3ea:	f7f6 fe58 	bl	b409e <_ZdlPvj>
   bd3ee:	4620      	mov	r0, r4
   bd3f0:	bd10      	pop	{r4, pc}

000bd3f2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bd3f2:	b510      	push	{r4, lr}
   bd3f4:	2104      	movs	r1, #4
   bd3f6:	4604      	mov	r4, r0
   bd3f8:	f7f6 fe51 	bl	b409e <_ZdlPvj>
   bd3fc:	4620      	mov	r0, r4
   bd3fe:	bd10      	pop	{r4, pc}

000bd400 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd400:	f7fe bb62 	b.w	bbac8 <os_mutex_recursive_lock>

000bd404 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bd404:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bd406:	f002 ff28 	bl	c025a <strcmp>
}
   bd40a:	fab0 f080 	clz	r0, r0
   bd40e:	0940      	lsrs	r0, r0, #5
   bd410:	bd08      	pop	{r3, pc}

000bd412 <__tcf_1>:
   bd412:	4770      	bx	lr

000bd414 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bd414:	b510      	push	{r4, lr}
   bd416:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bd418:	f001 ff36 	bl	bf288 <_Z16_fetch_usbserialv>
   bd41c:	4284      	cmp	r4, r0
   bd41e:	d010      	beq.n	bd442 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bd420:	f002 f930 	bl	bf684 <_Z22__fetch_global_Serial1v>
   bd424:	4284      	cmp	r4, r0
   bd426:	d105      	bne.n	bd434 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bd428:	f002 f92c 	bl	bf684 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bd42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bd430:	f001 bec3 	b.w	bf1ba <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bd434:	b12c      	cbz	r4, bd442 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bd436:	6823      	ldr	r3, [r4, #0]
   bd438:	4620      	mov	r0, r4
   bd43a:	685b      	ldr	r3, [r3, #4]
}
   bd43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd440:	4718      	bx	r3
   bd442:	bd10      	pop	{r4, pc}

000bd444 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bd444:	b513      	push	{r0, r1, r4, lr}
   bd446:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bd448:	4608      	mov	r0, r1
   bd44a:	9101      	str	r1, [sp, #4]
   bd44c:	f002 ff35 	bl	c02ba <strlen>
   bd450:	9901      	ldr	r1, [sp, #4]
   bd452:	4602      	mov	r2, r0
   bd454:	4620      	mov	r0, r4
}
   bd456:	b002      	add	sp, #8
   bd458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bd45c:	f7ff bf8a 	b.w	bd374 <_ZN5spark10JSONWriter5valueEPKcj>

000bd460 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bd460:	b513      	push	{r0, r1, r4, lr}
   bd462:	4604      	mov	r4, r0
    write(str, strlen(str));
   bd464:	4608      	mov	r0, r1
   bd466:	9101      	str	r1, [sp, #4]
   bd468:	f002 ff27 	bl	c02ba <strlen>
   bd46c:	6823      	ldr	r3, [r4, #0]
   bd46e:	9901      	ldr	r1, [sp, #4]
   bd470:	68db      	ldr	r3, [r3, #12]
   bd472:	4602      	mov	r2, r0
   bd474:	4620      	mov	r0, r4
}
   bd476:	b002      	add	sp, #8
   bd478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bd47c:	4718      	bx	r3

000bd47e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bd47e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bd480:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bd482:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bd486:	68db      	ldr	r3, [r3, #12]
   bd488:	2201      	movs	r2, #1
   bd48a:	f10d 0107 	add.w	r1, sp, #7
   bd48e:	4798      	blx	r3
}
   bd490:	b003      	add	sp, #12
   bd492:	f85d fb04 	ldr.w	pc, [sp], #4

000bd496 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd496:	b40e      	push	{r1, r2, r3}
   bd498:	b503      	push	{r0, r1, lr}
   bd49a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bd49c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bd49e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bd4a2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bd4a4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bd4a6:	f001 f942 	bl	be72e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bd4aa:	b002      	add	sp, #8
   bd4ac:	f85d eb04 	ldr.w	lr, [sp], #4
   bd4b0:	b003      	add	sp, #12
   bd4b2:	4770      	bx	lr

000bd4b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bd4b4:	680a      	ldr	r2, [r1, #0]
   bd4b6:	6002      	str	r2, [r0, #0]
   bd4b8:	684a      	ldr	r2, [r1, #4]
   bd4ba:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bd4bc:	2200      	movs	r2, #0
   bd4be:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bd4c2:	b510      	push	{r4, lr}
   bd4c4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd4c6:	688c      	ldr	r4, [r1, #8]
   bd4c8:	6084      	str	r4, [r0, #8]
   bd4ca:	68cc      	ldr	r4, [r1, #12]
   bd4cc:	60c4      	str	r4, [r0, #12]
   bd4ce:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd4d0:	608a      	str	r2, [r1, #8]
   bd4d2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bd4d4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bd4d6:	610a      	str	r2, [r1, #16]
   bd4d8:	bd10      	pop	{r4, pc}
	...

000bd4dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bd4e0:	e9d0 8400 	ldrd	r8, r4, [r0]
   bd4e4:	f04f 0a14 	mov.w	sl, #20
   bd4e8:	9300      	str	r3, [sp, #0]
   bd4ea:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bd4ee:	4b18      	ldr	r3, [pc, #96]	; (bd550 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd4f0:	10a4      	asrs	r4, r4, #2
   bd4f2:	4617      	mov	r7, r2
   bd4f4:	435c      	muls	r4, r3
   bd4f6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bd4f8:	2c00      	cmp	r4, #0
   bd4fa:	dd21      	ble.n	bd540 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bd4fc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bd4fe:	fb0a f006 	mul.w	r0, sl, r6
   bd502:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bd506:	463a      	mov	r2, r7
   bd508:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bd50c:	5828      	ldr	r0, [r5, r0]
   bd50e:	9101      	str	r1, [sp, #4]
   bd510:	455f      	cmp	r7, fp
   bd512:	bf28      	it	cs
   bd514:	465a      	movcs	r2, fp
   bd516:	f002 fed8 	bl	c02ca <strncmp>
                if (cmp == 0) {
   bd51a:	2800      	cmp	r0, #0
   bd51c:	9901      	ldr	r1, [sp, #4]
   bd51e:	f04f 0301 	mov.w	r3, #1
   bd522:	d10b      	bne.n	bd53c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bd524:	455f      	cmp	r7, fp
   bd526:	d103      	bne.n	bd530 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bd528:	9a00      	ldr	r2, [sp, #0]
   bd52a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bd52c:	4634      	mov	r4, r6
   bd52e:	e7e3      	b.n	bd4f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bd530:	d9fc      	bls.n	bd52c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bd532:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bd534:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bd538:	3e01      	subs	r6, #1
   bd53a:	e7f7      	b.n	bd52c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bd53c:	dbf9      	blt.n	bd532 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bd53e:	e7f5      	b.n	bd52c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bd540:	eba5 0508 	sub.w	r5, r5, r8
}
   bd544:	4802      	ldr	r0, [pc, #8]	; (bd550 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bd546:	10ad      	asrs	r5, r5, #2
   bd548:	4368      	muls	r0, r5
   bd54a:	b003      	add	sp, #12
   bd54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd550:	cccccccd 	.word	0xcccccccd

000bd554 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd554:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bd556:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bd558:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bd55a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bd55c:	b303      	cbz	r3, bd5a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bd55e:	b1f9      	cbz	r1, bd5a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bd560:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bd562:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bd566:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bd568:	a903      	add	r1, sp, #12
   bd56a:	a801      	add	r0, sp, #4
   bd56c:	f7ff ff21 	bl	bd3b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bd570:	4601      	mov	r1, r0
   bd572:	b1a8      	cbz	r0, bd5a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bd574:	f10d 030b 	add.w	r3, sp, #11
   bd578:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bd57a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bd57e:	4620      	mov	r0, r4
   bd580:	f7ff ffac 	bl	bd4dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bd584:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bd588:	b153      	cbz	r3, bd5a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bd58a:	6823      	ldr	r3, [r4, #0]
   bd58c:	2414      	movs	r4, #20
   bd58e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bd592:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bd594:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bd598:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bd59a:	bfa8      	it	ge
   bd59c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bd59e:	e7e3      	b.n	bd568 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bd5a0:	4628      	mov	r0, r5
   bd5a2:	b004      	add	sp, #16
   bd5a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd5a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bd5a8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bd5aa:	4c09      	ldr	r4, [pc, #36]	; (bd5d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bd5ac:	7823      	ldrb	r3, [r4, #0]
   bd5ae:	f3bf 8f5b 	dmb	ish
   bd5b2:	07db      	lsls	r3, r3, #31
   bd5b4:	d409      	bmi.n	bd5ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd5b6:	4620      	mov	r0, r4
   bd5b8:	f7f6 fd80 	bl	b40bc <__cxa_guard_acquire>
   bd5bc:	b128      	cbz	r0, bd5ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bd5be:	4620      	mov	r0, r4
   bd5c0:	f7f6 fd81 	bl	b40c6 <__cxa_guard_release>
   bd5c4:	4803      	ldr	r0, [pc, #12]	; (bd5d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bd5c6:	f002 fd69 	bl	c009c <atexit>
}
   bd5ca:	4803      	ldr	r0, [pc, #12]	; (bd5d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bd5cc:	bd10      	pop	{r4, pc}
   bd5ce:	bf00      	nop
   bd5d0:	2003e650 	.word	0x2003e650
   bd5d4:	000bd3ab 	.word	0x000bd3ab
   bd5d8:	2003daf8 	.word	0x2003daf8

000bd5dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bd5dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bd5de:	4c09      	ldr	r4, [pc, #36]	; (bd604 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bd5e0:	7823      	ldrb	r3, [r4, #0]
   bd5e2:	f3bf 8f5b 	dmb	ish
   bd5e6:	07db      	lsls	r3, r3, #31
   bd5e8:	d409      	bmi.n	bd5fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd5ea:	4620      	mov	r0, r4
   bd5ec:	f7f6 fd66 	bl	b40bc <__cxa_guard_acquire>
   bd5f0:	b128      	cbz	r0, bd5fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bd5f2:	4620      	mov	r0, r4
   bd5f4:	f7f6 fd67 	bl	b40c6 <__cxa_guard_release>
   bd5f8:	4803      	ldr	r0, [pc, #12]	; (bd608 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bd5fa:	f002 fd4f 	bl	c009c <atexit>
    return &factory;
}
   bd5fe:	4803      	ldr	r0, [pc, #12]	; (bd60c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bd600:	bd10      	pop	{r4, pc}
   bd602:	bf00      	nop
   bd604:	2003e654 	.word	0x2003e654
   bd608:	000bd413 	.word	0x000bd413
   bd60c:	2003dafc 	.word	0x2003dafc

000bd610 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bd610:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bd612:	2500      	movs	r5, #0
   bd614:	4604      	mov	r4, r0
   bd616:	e9c0 5500 	strd	r5, r5, [r0]
   bd61a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bd61e:	6085      	str	r5, [r0, #8]
   bd620:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bd622:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bd626:	f7fe fa3f 	bl	bbaa8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bd62a:	f7ff ffbd 	bl	bd5a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bd62e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd630:	f7ff ffd4 	bl	bd5dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bd634:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bd636:	6220      	str	r0, [r4, #32]
}
   bd638:	4620      	mov	r0, r4
   bd63a:	bd38      	pop	{r3, r4, r5, pc}

000bd63c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bd63c:	b510      	push	{r4, lr}
    static LogManager mgr;
   bd63e:	4c0a      	ldr	r4, [pc, #40]	; (bd668 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bd640:	7823      	ldrb	r3, [r4, #0]
   bd642:	f3bf 8f5b 	dmb	ish
   bd646:	07db      	lsls	r3, r3, #31
   bd648:	d40c      	bmi.n	bd664 <_ZN5spark10LogManager8instanceEv+0x28>
   bd64a:	4620      	mov	r0, r4
   bd64c:	f7f6 fd36 	bl	b40bc <__cxa_guard_acquire>
   bd650:	b140      	cbz	r0, bd664 <_ZN5spark10LogManager8instanceEv+0x28>
   bd652:	4806      	ldr	r0, [pc, #24]	; (bd66c <_ZN5spark10LogManager8instanceEv+0x30>)
   bd654:	f7ff ffdc 	bl	bd610 <_ZN5spark10LogManagerC1Ev>
   bd658:	4620      	mov	r0, r4
   bd65a:	f7f6 fd34 	bl	b40c6 <__cxa_guard_release>
   bd65e:	4804      	ldr	r0, [pc, #16]	; (bd670 <_ZN5spark10LogManager8instanceEv+0x34>)
   bd660:	f002 fd1c 	bl	c009c <atexit>
    return &mgr;
}
   bd664:	4801      	ldr	r0, [pc, #4]	; (bd66c <_ZN5spark10LogManager8instanceEv+0x30>)
   bd666:	bd10      	pop	{r4, pc}
   bd668:	2003e64c 	.word	0x2003e64c
   bd66c:	2003e65c 	.word	0x2003e65c
   bd670:	000bdb29 	.word	0x000bdb29

000bd674 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bd674:	4a02      	ldr	r2, [pc, #8]	; (bd680 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bd676:	4903      	ldr	r1, [pc, #12]	; (bd684 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bd678:	4803      	ldr	r0, [pc, #12]	; (bd688 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bd67a:	2300      	movs	r3, #0
   bd67c:	f7fe bcac 	b.w	bbfd8 <log_set_callbacks>
   bd680:	000bd90d 	.word	0x000bd90d
   bd684:	000bd899 	.word	0x000bd899
   bd688:	000bd819 	.word	0x000bd819

000bd68c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bd68c:	2300      	movs	r3, #0
   bd68e:	461a      	mov	r2, r3
   bd690:	4619      	mov	r1, r3
   bd692:	4618      	mov	r0, r3
   bd694:	f7fe bca0 	b.w	bbfd8 <log_set_callbacks>

000bd698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bd698:	b570      	push	{r4, r5, r6, lr}
   bd69a:	b08a      	sub	sp, #40	; 0x28
   bd69c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bd69e:	4601      	mov	r1, r0
   bd6a0:	a804      	add	r0, sp, #16
   bd6a2:	f7fb fc08 	bl	b8eb6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bd6a6:	4e14      	ldr	r6, [pc, #80]	; (bd6f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bd6a8:	a804      	add	r0, sp, #16
   bd6aa:	f7ff fd9b 	bl	bd1e4 <_ZN5spark18JSONObjectIterator4nextEv>
   bd6ae:	b1e8      	cbz	r0, bd6ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bd6b0:	a904      	add	r1, sp, #16
   bd6b2:	4668      	mov	r0, sp
   bd6b4:	f7fb fc10 	bl	b8ed8 <_ZNK5spark18JSONObjectIterator4nameEv>
   bd6b8:	9802      	ldr	r0, [sp, #8]
   bd6ba:	4631      	mov	r1, r6
   bd6bc:	f7ff fea2 	bl	bd404 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bd6c0:	4604      	mov	r4, r0
   bd6c2:	b110      	cbz	r0, bd6ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bd6c4:	1e2c      	subs	r4, r5, #0
   bd6c6:	bf18      	it	ne
   bd6c8:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bd6ca:	a801      	add	r0, sp, #4
   bd6cc:	f7f8 fea8 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd6d0:	2c00      	cmp	r4, #0
   bd6d2:	d0e9      	beq.n	bd6a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bd6d4:	a904      	add	r1, sp, #16
   bd6d6:	4668      	mov	r0, sp
   bd6d8:	f7fb fc0f 	bl	b8efa <_ZNK5spark18JSONObjectIterator5valueEv>
   bd6dc:	4668      	mov	r0, sp
   bd6de:	f7ff fd24 	bl	bd12a <_ZNK5spark9JSONValue5toIntEv>
   bd6e2:	6028      	str	r0, [r5, #0]
   bd6e4:	a801      	add	r0, sp, #4
   bd6e6:	f7f8 fe9b 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd6ea:	e7dd      	b.n	bd6a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bd6ec:	a805      	add	r0, sp, #20
   bd6ee:	f7f8 fe97 	bl	b6420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd6f2:	b00a      	add	sp, #40	; 0x28
   bd6f4:	bd70      	pop	{r4, r5, r6, pc}
   bd6f6:	bf00      	nop
   bd6f8:	000c1f36 	.word	0x000c1f36

000bd6fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bd6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd6fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bd700:	4620      	mov	r0, r4
   bd702:	4913      	ldr	r1, [pc, #76]	; (bd750 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bd704:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bd706:	f002 fda8 	bl	c025a <strcmp>
   bd70a:	b950      	cbnz	r0, bd722 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bd70c:	f001 fdbc 	bl	bf288 <_Z16_fetch_usbserialv>
   bd710:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bd714:	f001 fda6 	bl	bf264 <_ZN9USBSerial5beginEl>
}
   bd718:	b003      	add	sp, #12
   bd71a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bd71e:	f001 bdb3 	b.w	bf288 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bd722:	490c      	ldr	r1, [pc, #48]	; (bd754 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bd724:	4620      	mov	r0, r4
   bd726:	f002 fd98 	bl	c025a <strcmp>
   bd72a:	b978      	cbnz	r0, bd74c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bd72c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bd730:	a901      	add	r1, sp, #4
   bd732:	4628      	mov	r0, r5
        int baud = 9600;
   bd734:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bd736:	f7ff ffaf 	bl	bd698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bd73a:	f001 ffa3 	bl	bf684 <_Z22__fetch_global_Serial1v>
   bd73e:	9901      	ldr	r1, [sp, #4]
   bd740:	f001 fd38 	bl	bf1b4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bd744:	f001 ff9e 	bl	bf684 <_Z22__fetch_global_Serial1v>
}
   bd748:	b003      	add	sp, #12
   bd74a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bd74c:	2000      	movs	r0, #0
   bd74e:	e7fb      	b.n	bd748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bd750:	000c1f3b 	.word	0x000c1f3b
   bd754:	000c1f42 	.word	0x000c1f42

000bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd758:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd75a:	e9d0 5300 	ldrd	r5, r3, [r0]
   bd75e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd760:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd762:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bd766:	42ae      	cmp	r6, r5
   bd768:	d005      	beq.n	bd776 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bd76a:	f105 0008 	add.w	r0, r5, #8
   bd76e:	f7ff fff3 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd772:	3514      	adds	r5, #20
   bd774:	e7f7      	b.n	bd766 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bd776:	6820      	ldr	r0, [r4, #0]
   bd778:	f7fe fd8a 	bl	bc290 <free>
}
   bd77c:	4620      	mov	r0, r4
   bd77e:	bd70      	pop	{r4, r5, r6, pc}

000bd780 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bd780:	b510      	push	{r4, lr}
   bd782:	4604      	mov	r4, r0
   bd784:	300c      	adds	r0, #12
   bd786:	f7ff ffe7 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bd78a:	4620      	mov	r0, r4
   bd78c:	f7fe fe23 	bl	bc3d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bd790:	4620      	mov	r0, r4
   bd792:	bd10      	pop	{r4, pc}

000bd794 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bd794:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bd796:	4b04      	ldr	r3, [pc, #16]	; (bd7a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bd798:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bd79a:	f840 3b04 	str.w	r3, [r0], #4
   bd79e:	f7ff ffef 	bl	bd780 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bd7a2:	4620      	mov	r0, r4
   bd7a4:	bd10      	pop	{r4, pc}
   bd7a6:	bf00      	nop
   bd7a8:	000c1348 	.word	0x000c1348

000bd7ac <_ZN5spark16StreamLogHandlerD0Ev>:
   bd7ac:	b510      	push	{r4, lr}
   bd7ae:	4604      	mov	r4, r0
   bd7b0:	f7ff fff0 	bl	bd794 <_ZN5spark16StreamLogHandlerD1Ev>
   bd7b4:	4620      	mov	r0, r4
   bd7b6:	2124      	movs	r1, #36	; 0x24
   bd7b8:	f7f6 fc71 	bl	b409e <_ZdlPvj>
   bd7bc:	4620      	mov	r0, r4
   bd7be:	bd10      	pop	{r4, pc}

000bd7c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bd7c0:	b510      	push	{r4, lr}
   bd7c2:	4b03      	ldr	r3, [pc, #12]	; (bd7d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bd7c4:	6003      	str	r3, [r0, #0]
   bd7c6:	4604      	mov	r4, r0
   bd7c8:	f7ff ffe4 	bl	bd794 <_ZN5spark16StreamLogHandlerD1Ev>
   bd7cc:	4620      	mov	r0, r4
   bd7ce:	bd10      	pop	{r4, pc}
   bd7d0:	000c1fd8 	.word	0x000c1fd8

000bd7d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bd7d4:	b510      	push	{r4, lr}
   bd7d6:	4604      	mov	r4, r0
   bd7d8:	f7ff fff2 	bl	bd7c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bd7dc:	4620      	mov	r0, r4
   bd7de:	2124      	movs	r1, #36	; 0x24
   bd7e0:	f7f6 fc5d 	bl	b409e <_ZdlPvj>
   bd7e4:	4620      	mov	r0, r4
   bd7e6:	bd10      	pop	{r4, pc}

000bd7e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bd7e8:	2200      	movs	r2, #0
   bd7ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bd7ee:	b510      	push	{r4, lr}
        capacity_(0) {
   bd7f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bd7f2:	680c      	ldr	r4, [r1, #0]
   bd7f4:	6004      	str	r4, [r0, #0]
   bd7f6:	684c      	ldr	r4, [r1, #4]
   bd7f8:	6044      	str	r4, [r0, #4]
   bd7fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd7fc:	600a      	str	r2, [r1, #0]
   bd7fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd800:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd802:	608a      	str	r2, [r1, #8]
}
   bd804:	bd10      	pop	{r4, pc}

000bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bd806:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd808:	6803      	ldr	r3, [r0, #0]
   bd80a:	4604      	mov	r4, r0
   bd80c:	6818      	ldr	r0, [r3, #0]
   bd80e:	f7fe f963 	bl	bbad8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bd812:	4620      	mov	r0, r4
   bd814:	bd10      	pop	{r4, pc}
	...

000bd818 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bd818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd81c:	b087      	sub	sp, #28
   bd81e:	4680      	mov	r8, r0
   bd820:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bd822:	4b1c      	ldr	r3, [pc, #112]	; (bd894 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bd824:	685b      	ldr	r3, [r3, #4]
   bd826:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bd82a:	4689      	mov	r9, r1
   bd82c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bd82e:	b96b      	cbnz	r3, bd84c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bd830:	f7ff ff04 	bl	bd63c <_ZN5spark10LogManager8instanceEv>
   bd834:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bd836:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bd83a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd83c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bd83e:	f7ff fddf 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bd842:	7b23      	ldrb	r3, [r4, #12]
   bd844:	b12b      	cbz	r3, bd852 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bd846:	a805      	add	r0, sp, #20
   bd848:	f7ff ffdd 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bd84c:	b007      	add	sp, #28
   bd84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bd852:	2301      	movs	r3, #1
   bd854:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bd856:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bd85a:	fa5f f989 	uxtb.w	r9, r9
   bd85e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bd862:	45aa      	cmp	sl, r5
   bd864:	d012      	beq.n	bd88c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bd866:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bd86a:	4631      	mov	r1, r6
   bd86c:	1d38      	adds	r0, r7, #4
   bd86e:	f7ff fe71 	bl	bd554 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bd872:	4581      	cmp	r9, r0
   bd874:	d3f5      	bcc.n	bd862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bd876:	683b      	ldr	r3, [r7, #0]
   bd878:	9a03      	ldr	r2, [sp, #12]
   bd87a:	9200      	str	r2, [sp, #0]
   bd87c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bd880:	464a      	mov	r2, r9
   bd882:	4633      	mov	r3, r6
   bd884:	4641      	mov	r1, r8
   bd886:	4638      	mov	r0, r7
   bd888:	47d8      	blx	fp
   bd88a:	e7ea      	b.n	bd862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bd88c:	2300      	movs	r3, #0
   bd88e:	7323      	strb	r3, [r4, #12]
   bd890:	e7d9      	b.n	bd846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bd892:	bf00      	nop
   bd894:	e000ed00 	.word	0xe000ed00

000bd898 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bd898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd89c:	469b      	mov	fp, r3
   bd89e:	4b1a      	ldr	r3, [pc, #104]	; (bd908 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bd8a0:	685b      	ldr	r3, [r3, #4]
   bd8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bd8a6:	4680      	mov	r8, r0
   bd8a8:	4689      	mov	r9, r1
   bd8aa:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bd8ac:	b96b      	cbnz	r3, bd8ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bd8ae:	f7ff fec5 	bl	bd63c <_ZN5spark10LogManager8instanceEv>
   bd8b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bd8b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bd8b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd8ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bd8bc:	f7ff fda0 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bd8c0:	7b23      	ldrb	r3, [r4, #12]
   bd8c2:	b12b      	cbz	r3, bd8d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bd8c4:	a801      	add	r0, sp, #4
   bd8c6:	f7ff ff9e 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bd8ca:	b003      	add	sp, #12
   bd8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bd8d0:	2301      	movs	r3, #1
   bd8d2:	7323      	strb	r3, [r4, #12]
   bd8d4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bd8d8:	b2f6      	uxtb	r6, r6
   bd8da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bd8de:	4555      	cmp	r5, sl
   bd8e0:	d00e      	beq.n	bd900 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bd8e2:	f855 7b04 	ldr.w	r7, [r5], #4
   bd8e6:	4659      	mov	r1, fp
   bd8e8:	1d38      	adds	r0, r7, #4
   bd8ea:	f7ff fe33 	bl	bd554 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bd8ee:	4286      	cmp	r6, r0
   bd8f0:	d3f5      	bcc.n	bd8de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bd8f2:	683b      	ldr	r3, [r7, #0]
   bd8f4:	464a      	mov	r2, r9
   bd8f6:	68db      	ldr	r3, [r3, #12]
   bd8f8:	4641      	mov	r1, r8
   bd8fa:	4638      	mov	r0, r7
   bd8fc:	4798      	blx	r3
   bd8fe:	e7ee      	b.n	bd8de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bd900:	2300      	movs	r3, #0
   bd902:	7323      	strb	r3, [r4, #12]
   bd904:	e7de      	b.n	bd8c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bd906:	bf00      	nop
   bd908:	e000ed00 	.word	0xe000ed00

000bd90c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bd90c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bd910:	4b16      	ldr	r3, [pc, #88]	; (bd96c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bd912:	685b      	ldr	r3, [r3, #4]
   bd914:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bd918:	4605      	mov	r5, r0
   bd91a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bd91c:	bb1b      	cbnz	r3, bd966 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bd91e:	f7ff fe8d 	bl	bd63c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bd922:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bd926:	4604      	mov	r4, r0
   bd928:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd92a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bd92c:	f7ff fd68 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
   bd930:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bd934:	2446      	movs	r4, #70	; 0x46
   bd936:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bd93a:	45b0      	cmp	r8, r6
   bd93c:	d109      	bne.n	bd952 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bd93e:	a801      	add	r0, sp, #4
   bd940:	f7ff ff61 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bd944:	42a5      	cmp	r5, r4
   bd946:	bfb4      	ite	lt
   bd948:	2000      	movlt	r0, #0
   bd94a:	2001      	movge	r0, #1
}
   bd94c:	b002      	add	sp, #8
   bd94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bd952:	f856 0b04 	ldr.w	r0, [r6], #4
   bd956:	4639      	mov	r1, r7
   bd958:	3004      	adds	r0, #4
   bd95a:	f7ff fdfb 	bl	bd554 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bd95e:	4284      	cmp	r4, r0
   bd960:	bfa8      	it	ge
   bd962:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bd964:	e7e9      	b.n	bd93a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bd966:	2000      	movs	r0, #0
   bd968:	e7f0      	b.n	bd94c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bd96a:	bf00      	nop
   bd96c:	e000ed00 	.word	0xe000ed00

000bd970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bd970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd972:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bd976:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bd978:	4604      	mov	r4, r0
   bd97a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bd97c:	db0d      	blt.n	bd99a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bd97e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bd980:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bd982:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bd984:	dd04      	ble.n	bd990 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bd986:	00b9      	lsls	r1, r7, #2
   bd988:	f7fe fc8a 	bl	bc2a0 <realloc>
            if (!d) {
   bd98c:	b918      	cbnz	r0, bd996 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bd98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bd990:	f7fe fc7e 	bl	bc290 <free>
        T* d = nullptr;
   bd994:	2000      	movs	r0, #0
        data_ = d;
   bd996:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bd998:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bd99a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bd99c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bd99e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bd9a2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bd9a4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bd9a8:	1d08      	adds	r0, r1, #4
   bd9aa:	f002 fbb1 	bl	c0110 <memmove>
    new(p) T(std::move(value));
   bd9ae:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bd9b2:	6863      	ldr	r3, [r4, #4]
   bd9b4:	3301      	adds	r3, #1
   bd9b6:	6063      	str	r3, [r4, #4]
    return true;
   bd9b8:	2001      	movs	r0, #1
   bd9ba:	e7e8      	b.n	bd98e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bd9bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bd9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bd9be:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bd9c2:	4604      	mov	r4, r0
   bd9c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd9c6:	9301      	str	r3, [sp, #4]
   bd9c8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bd9ca:	f7ff fd19 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bd9ce:	e9d4 3200 	ldrd	r3, r2, [r4]
   bd9d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bd9d6:	4293      	cmp	r3, r2
   bd9d8:	4619      	mov	r1, r3
   bd9da:	d00b      	beq.n	bd9f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bd9dc:	6809      	ldr	r1, [r1, #0]
   bd9de:	42a9      	cmp	r1, r5
   bd9e0:	f103 0304 	add.w	r3, r3, #4
   bd9e4:	d1f7      	bne.n	bd9d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bd9e6:	a801      	add	r0, sp, #4
   bd9e8:	f7ff ff0d 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bd9ec:	2500      	movs	r5, #0
}
   bd9ee:	4628      	mov	r0, r5
   bd9f0:	b003      	add	sp, #12
   bd9f2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bd9f4:	4629      	mov	r1, r5
   bd9f6:	4620      	mov	r0, r4
   bd9f8:	f7ff ffba 	bl	bd970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bd9fc:	4605      	mov	r5, r0
   bd9fe:	2800      	cmp	r0, #0
   bda00:	d0f1      	beq.n	bd9e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bda02:	6863      	ldr	r3, [r4, #4]
   bda04:	2b01      	cmp	r3, #1
   bda06:	d101      	bne.n	bda0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bda08:	f7ff fe34 	bl	bd674 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bda0c:	a801      	add	r0, sp, #4
   bda0e:	f7ff fefa 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bda12:	e7ec      	b.n	bd9ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bda14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bda14:	b570      	push	{r4, r5, r6, lr}
   bda16:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bda18:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bda1c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bda1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bda22:	4282      	cmp	r2, r0
   bda24:	d00f      	beq.n	bda46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bda26:	4601      	mov	r1, r0
            if (*p == value) {
   bda28:	681d      	ldr	r5, [r3, #0]
   bda2a:	f851 6b04 	ldr.w	r6, [r1], #4
   bda2e:	42ae      	cmp	r6, r5
   bda30:	d107      	bne.n	bda42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bda32:	1a52      	subs	r2, r2, r1
   bda34:	f002 fb6c 	bl	c0110 <memmove>
    --size_;
   bda38:	6863      	ldr	r3, [r4, #4]
   bda3a:	3b01      	subs	r3, #1
   bda3c:	6063      	str	r3, [r4, #4]
    return true;
   bda3e:	2001      	movs	r0, #1
}
   bda40:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bda42:	4608      	mov	r0, r1
   bda44:	e7ed      	b.n	bda22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bda46:	2000      	movs	r0, #0
   bda48:	e7fa      	b.n	bda40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bda4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bda4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bda4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bda50:	4604      	mov	r4, r0
   bda52:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bda54:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bda56:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bda58:	f7ff fcd2 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bda5c:	a901      	add	r1, sp, #4
   bda5e:	4620      	mov	r0, r4
   bda60:	f7ff ffd8 	bl	bda14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bda64:	b118      	cbz	r0, bda6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bda66:	6863      	ldr	r3, [r4, #4]
   bda68:	b90b      	cbnz	r3, bda6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bda6a:	f7ff fe0f 	bl	bd68c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bda6e:	a803      	add	r0, sp, #12
   bda70:	f7ff fec9 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bda74:	b004      	add	sp, #16
   bda76:	bd10      	pop	{r4, pc}

000bda78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bda78:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bda7a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bda7e:	2318      	movs	r3, #24
   bda80:	4604      	mov	r4, r0
   bda82:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bda86:	42ae      	cmp	r6, r5
   bda88:	d015      	beq.n	bdab6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bda8a:	f105 0110 	add.w	r1, r5, #16
   bda8e:	4620      	mov	r0, r4
   bda90:	f7ff ffc0 	bl	bda14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bda94:	6863      	ldr	r3, [r4, #4]
   bda96:	b90b      	cbnz	r3, bda9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bda98:	f7ff fdf8 	bl	bd68c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bda9c:	69e0      	ldr	r0, [r4, #28]
   bda9e:	6929      	ldr	r1, [r5, #16]
   bdaa0:	6803      	ldr	r3, [r0, #0]
   bdaa2:	68db      	ldr	r3, [r3, #12]
   bdaa4:	4798      	blx	r3
        if (h.stream) {
   bdaa6:	6969      	ldr	r1, [r5, #20]
   bdaa8:	b119      	cbz	r1, bdab2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bdaaa:	6a20      	ldr	r0, [r4, #32]
   bdaac:	6803      	ldr	r3, [r0, #0]
   bdaae:	68db      	ldr	r3, [r3, #12]
   bdab0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bdab2:	3518      	adds	r5, #24
   bdab4:	e7e7      	b.n	bda86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bdab6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdaba:	2618      	movs	r6, #24
   bdabc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdac0:	42ae      	cmp	r6, r5
   bdac2:	d004      	beq.n	bdace <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bdac4:	4628      	mov	r0, r5
   bdac6:	f000 ff45 	bl	be954 <_ZN6StringD1Ev>
   bdaca:	3518      	adds	r5, #24
   bdacc:	e7f8      	b.n	bdac0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bdace:	2300      	movs	r3, #0
   bdad0:	6163      	str	r3, [r4, #20]
}
   bdad2:	bd70      	pop	{r4, r5, r6, pc}

000bdad4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bdad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdad6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bdad8:	f7ff fdd8 	bl	bd68c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bdadc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bdae0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bdae2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bdae4:	f7ff fc8c 	bl	bd400 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bdae8:	4620      	mov	r0, r4
   bdaea:	f7ff ffc5 	bl	bda78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bdaee:	a801      	add	r0, sp, #4
   bdaf0:	f7ff fe89 	bl	bd806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bdaf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bdaf6:	b108      	cbz	r0, bdafc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bdaf8:	f7fd ffde 	bl	bbab8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bdafc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bdb00:	2618      	movs	r6, #24
   bdb02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bdb06:	42ae      	cmp	r6, r5
   bdb08:	d004      	beq.n	bdb14 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bdb0a:	4628      	mov	r0, r5
   bdb0c:	f000 ff22 	bl	be954 <_ZN6StringD1Ev>
   bdb10:	3518      	adds	r5, #24
   bdb12:	e7f8      	b.n	bdb06 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bdb14:	6920      	ldr	r0, [r4, #16]
   bdb16:	f7fe fbbb 	bl	bc290 <free>
   bdb1a:	6820      	ldr	r0, [r4, #0]
   bdb1c:	f7fe fbb8 	bl	bc290 <free>
}
   bdb20:	4620      	mov	r0, r4
   bdb22:	b002      	add	sp, #8
   bdb24:	bd70      	pop	{r4, r5, r6, pc}
	...

000bdb28 <__tcf_2>:
    static LogManager mgr;
   bdb28:	4801      	ldr	r0, [pc, #4]	; (bdb30 <__tcf_2+0x8>)
   bdb2a:	f7ff bfd3 	b.w	bdad4 <_ZN5spark10LogManagerD1Ev>
   bdb2e:	bf00      	nop
   bdb30:	2003e65c 	.word	0x2003e65c

000bdb34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bdb34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdb36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdb38:	4604      	mov	r4, r0
   bdb3a:	460d      	mov	r5, r1
   bdb3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdb3e:	d915      	bls.n	bdb6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bdb40:	4290      	cmp	r0, r2
   bdb42:	d214      	bcs.n	bdb6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bdb44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bdb48:	1a75      	subs	r5, r6, r1
   bdb4a:	f1a1 0714 	sub.w	r7, r1, #20
   bdb4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdb50:	42b7      	cmp	r7, r6
   bdb52:	d01a      	beq.n	bdb8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bdb54:	b11c      	cbz	r4, bdb5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bdb56:	4631      	mov	r1, r6
   bdb58:	4620      	mov	r0, r4
   bdb5a:	f7ff fcab 	bl	bd4b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bdb5e:	f106 0008 	add.w	r0, r6, #8
   bdb62:	f7ff fdf9 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bdb66:	3e14      	subs	r6, #20
   bdb68:	3c14      	subs	r4, #20
   bdb6a:	e7f1      	b.n	bdb50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bdb6c:	d00d      	beq.n	bdb8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bdb6e:	42b5      	cmp	r5, r6
   bdb70:	d00b      	beq.n	bdb8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bdb72:	b11c      	cbz	r4, bdb7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bdb74:	4629      	mov	r1, r5
   bdb76:	4620      	mov	r0, r4
   bdb78:	f7ff fc9c 	bl	bd4b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bdb7c:	f105 0008 	add.w	r0, r5, #8
   bdb80:	f7ff fdea 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bdb84:	3514      	adds	r5, #20
   bdb86:	3414      	adds	r4, #20
   bdb88:	e7f1      	b.n	bdb6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bdb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdb8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bdb8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdb90:	4604      	mov	r4, r0
   bdb92:	460d      	mov	r5, r1
   bdb94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdb96:	d914      	bls.n	bdbc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bdb98:	4290      	cmp	r0, r2
   bdb9a:	d213      	bcs.n	bdbc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bdb9c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bdba0:	1a75      	subs	r5, r6, r1
   bdba2:	f1a1 0710 	sub.w	r7, r1, #16
   bdba6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdba8:	42b7      	cmp	r7, r6
   bdbaa:	d018      	beq.n	bdbde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bdbac:	b11c      	cbz	r4, bdbb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bdbae:	4631      	mov	r1, r6
   bdbb0:	4620      	mov	r0, r4
   bdbb2:	f000 ff4b 	bl	bea4c <_ZN6StringC1EOS_>
                end->~T();
   bdbb6:	4630      	mov	r0, r6
   bdbb8:	f000 fecc 	bl	be954 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bdbbc:	3e10      	subs	r6, #16
   bdbbe:	3c10      	subs	r4, #16
   bdbc0:	e7f2      	b.n	bdba8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bdbc2:	d00c      	beq.n	bdbde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bdbc4:	42b5      	cmp	r5, r6
   bdbc6:	d00a      	beq.n	bdbde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bdbc8:	b11c      	cbz	r4, bdbd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bdbca:	4629      	mov	r1, r5
   bdbcc:	4620      	mov	r0, r4
   bdbce:	f000 ff3d 	bl	bea4c <_ZN6StringC1EOS_>
                p->~T();
   bdbd2:	4628      	mov	r0, r5
   bdbd4:	f000 febe 	bl	be954 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bdbd8:	3510      	adds	r5, #16
   bdbda:	3410      	adds	r4, #16
   bdbdc:	e7f2      	b.n	bdbc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bdbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdbe0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bdbe0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bdbe2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bdbe4:	4605      	mov	r5, r0
        if (n > 0) {
   bdbe6:	dd11      	ble.n	bdc0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bdbe8:	0130      	lsls	r0, r6, #4
   bdbea:	f7fe fb49 	bl	bc280 <malloc>
            if (!d) {
   bdbee:	4604      	mov	r4, r0
   bdbf0:	b158      	cbz	r0, bdc0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bdbf2:	e9d5 1200 	ldrd	r1, r2, [r5]
   bdbf6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bdbfa:	f7ff ffc7 	bl	bdb8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bdbfe:	6828      	ldr	r0, [r5, #0]
   bdc00:	f7fe fb46 	bl	bc290 <free>
        data_ = d;
   bdc04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bdc06:	60ae      	str	r6, [r5, #8]
        return true;
   bdc08:	2001      	movs	r0, #1
    }
   bdc0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bdc0c:	2400      	movs	r4, #0
   bdc0e:	e7f6      	b.n	bdbfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bdc10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bdc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc14:	4690      	mov	r8, r2
   bdc16:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bdc18:	2300      	movs	r3, #0
   bdc1a:	9103      	str	r1, [sp, #12]
    return size_;
   bdc1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bdc20:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bdc22:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bdc24:	4299      	cmp	r1, r3
        capacity_(0) {
   bdc26:	e9c0 3300 	strd	r3, r3, [r0]
   bdc2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bdc2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bdc32:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bdc36:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bdc38:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bdc3a:	dc23      	bgt.n	bdc84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bdc3c:	e9d8 5700 	ldrd	r5, r7, [r8]
   bdc40:	2314      	movs	r3, #20
   bdc42:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bdc46:	42af      	cmp	r7, r5
   bdc48:	d03b      	beq.n	bdcc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bdc4a:	4629      	mov	r1, r5
   bdc4c:	a80b      	add	r0, sp, #44	; 0x2c
   bdc4e:	f000 fefd 	bl	bea4c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bdc52:	a90b      	add	r1, sp, #44	; 0x2c
   bdc54:	a80f      	add	r0, sp, #60	; 0x3c
   bdc56:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bdc58:	f000 fef8 	bl	bea4c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdc5c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bdc60:	4299      	cmp	r1, r3
   bdc62:	da1b      	bge.n	bdc9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bdc64:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bdc66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bdc68:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bdc6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bdc70:	4631      	mov	r1, r6
   bdc72:	f106 0010 	add.w	r0, r6, #16
   bdc76:	f7ff ff89 	bl	bdb8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bdc7a:	b9ee      	cbnz	r6, bdcb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bdc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bdc7e:	3301      	adds	r3, #1
   bdc80:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bdc82:	e011      	b.n	bdca8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bdc84:	a808      	add	r0, sp, #32
   bdc86:	f7ff ffab 	bl	bdbe0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bdc8a:	2800      	cmp	r0, #0
   bdc8c:	d1d6      	bne.n	bdc3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bdc8e:	a808      	add	r0, sp, #32
   bdc90:	f7fe fba1 	bl	bc3d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bdc94:	4620      	mov	r0, r4
   bdc96:	b015      	add	sp, #84	; 0x54
   bdc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdc9c:	3101      	adds	r1, #1
   bdc9e:	a808      	add	r0, sp, #32
   bdca0:	f7ff ff9e 	bl	bdbe0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bdca4:	2800      	cmp	r0, #0
   bdca6:	d1dd      	bne.n	bdc64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bdca8:	a80f      	add	r0, sp, #60	; 0x3c
   bdcaa:	f000 fe53 	bl	be954 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bdcae:	a80b      	add	r0, sp, #44	; 0x2c
   bdcb0:	f000 fe50 	bl	be954 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bdcb4:	3514      	adds	r5, #20
   bdcb6:	e7c6      	b.n	bdc46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bdcb8:	a90f      	add	r1, sp, #60	; 0x3c
   bdcba:	4630      	mov	r0, r6
   bdcbc:	f000 fec6 	bl	bea4c <_ZN6StringC1EOS_>
   bdcc0:	e7dc      	b.n	bdc7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bdcc2:	2600      	movs	r6, #0
   bdcc4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bdcc8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bdcca:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bdcce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bdcd2:	429e      	cmp	r6, r3
   bdcd4:	da7c      	bge.n	bddd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bdcd6:	0133      	lsls	r3, r6, #4
   bdcd8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bdcda:	9306      	str	r3, [sp, #24]
        if (!category) {
   bdcdc:	b90b      	cbnz	r3, bdce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bdcde:	3601      	adds	r6, #1
   bdce0:	e7f5      	b.n	bdcce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bdce2:	2300      	movs	r3, #0
   bdce4:	9307      	str	r3, [sp, #28]
   bdce6:	fb09 f306 	mul.w	r3, r9, r6
   bdcea:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bdcec:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bdcee:	a907      	add	r1, sp, #28
   bdcf0:	a806      	add	r0, sp, #24
   bdcf2:	f7ff fb5e 	bl	bd3b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bdcf6:	4682      	mov	sl, r0
   bdcf8:	2800      	cmp	r0, #0
   bdcfa:	d0f0      	beq.n	bdcde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bdcfc:	f04f 0300 	mov.w	r3, #0
   bdd00:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bdd04:	4601      	mov	r1, r0
   bdd06:	9a07      	ldr	r2, [sp, #28]
   bdd08:	f10d 0317 	add.w	r3, sp, #23
   bdd0c:	4628      	mov	r0, r5
   bdd0e:	f7ff fbe5 	bl	bd4dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdd12:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bdd16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdd18:	2f00      	cmp	r7, #0
   bdd1a:	d14a      	bne.n	bddb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bdd1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bdd20:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bdd24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bdd28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdd2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bdd30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bdd34:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdd36:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bdd3a:	4293      	cmp	r3, r2
   bdd3c:	db17      	blt.n	bdd6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bdd3e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bdd42:	f1ba 0f00 	cmp.w	sl, #0
   bdd46:	dd30      	ble.n	bddaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bdd48:	fb09 f00a 	mul.w	r0, r9, sl
   bdd4c:	f7fe fa98 	bl	bc280 <malloc>
            if (!d) {
   bdd50:	4683      	mov	fp, r0
   bdd52:	b360      	cbz	r0, bddae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bdd54:	e9d5 1200 	ldrd	r1, r2, [r5]
   bdd58:	fb09 1202 	mla	r2, r9, r2, r1
   bdd5c:	f7ff feea 	bl	bdb34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bdd60:	6828      	ldr	r0, [r5, #0]
   bdd62:	f7fe fa95 	bl	bc290 <free>
        data_ = d;
   bdd66:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bdd6a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bdd6e:	682b      	ldr	r3, [r5, #0]
   bdd70:	9a01      	ldr	r2, [sp, #4]
   bdd72:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bdd76:	686a      	ldr	r2, [r5, #4]
   bdd78:	4651      	mov	r1, sl
   bdd7a:	fb09 3202 	mla	r2, r9, r2, r3
   bdd7e:	f10a 0014 	add.w	r0, sl, #20
   bdd82:	f7ff fed7 	bl	bdb34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bdd86:	f1ba 0f00 	cmp.w	sl, #0
   bdd8a:	d003      	beq.n	bdd94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bdd8c:	a90f      	add	r1, sp, #60	; 0x3c
   bdd8e:	4650      	mov	r0, sl
   bdd90:	f7ff fb90 	bl	bd4b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bdd94:	686b      	ldr	r3, [r5, #4]
   bdd96:	3301      	adds	r3, #1
   bdd98:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bdd9a:	a811      	add	r0, sp, #68	; 0x44
   bdd9c:	f7ff fcdc 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bdda0:	b13f      	cbz	r7, bddb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bdda2:	a80b      	add	r0, sp, #44	; 0x2c
   bdda4:	f7ff fcd8 	bl	bd758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bdda8:	e771      	b.n	bdc8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bddaa:	46bb      	mov	fp, r7
   bddac:	e7d8      	b.n	bdd60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bddae:	2701      	movs	r7, #1
   bddb0:	e7f3      	b.n	bdd9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bddb2:	9b01      	ldr	r3, [sp, #4]
   bddb4:	682d      	ldr	r5, [r5, #0]
   bddb6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bddba:	9b06      	ldr	r3, [sp, #24]
   bddbc:	781b      	ldrb	r3, [r3, #0]
   bddbe:	b92b      	cbnz	r3, bddcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bddc0:	f8d8 3000 	ldr.w	r3, [r8]
   bddc4:	9a02      	ldr	r2, [sp, #8]
   bddc6:	4413      	add	r3, r2
   bddc8:	7c1b      	ldrb	r3, [r3, #16]
   bddca:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bddcc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bddce:	e78e      	b.n	bdcee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bddd0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bddd2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bddd4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bddd6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bddd8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bddda:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bdddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bddde:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdde0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bdde2:	60a2      	str	r2, [r4, #8]
   bdde4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bdde6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdde8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bddea:	60e2      	str	r2, [r4, #12]
   bddec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bddee:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bddf0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bddf2:	6122      	str	r2, [r4, #16]
   bddf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bddf6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bddf8:	9b03      	ldr	r3, [sp, #12]
   bddfa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bddfc:	6162      	str	r2, [r4, #20]
   bddfe:	7623      	strb	r3, [r4, #24]
   bde00:	e7cf      	b.n	bdda2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bde04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bde04:	b5f0      	push	{r4, r5, r6, r7, lr}
   bde06:	4604      	mov	r4, r0
   bde08:	b087      	sub	sp, #28
   bde0a:	460d      	mov	r5, r1
        filter_(level, filters) {
   bde0c:	4626      	mov	r6, r4
        stream_(&stream) {
   bde0e:	4619      	mov	r1, r3
   bde10:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bde12:	4617      	mov	r7, r2
        stream_(&stream) {
   bde14:	f7f8 fc53 	bl	b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bde18:	4b0b      	ldr	r3, [pc, #44]	; (bde48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bde1a:	f846 3b04 	str.w	r3, [r6], #4
   bde1e:	4669      	mov	r1, sp
   bde20:	a803      	add	r0, sp, #12
   bde22:	f7f8 fc4c 	bl	b66be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bde26:	aa03      	add	r2, sp, #12
   bde28:	4639      	mov	r1, r7
   bde2a:	4630      	mov	r0, r6
   bde2c:	f7ff fef0 	bl	bdc10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bde30:	a803      	add	r0, sp, #12
   bde32:	f7f8 fc03 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bde36:	4668      	mov	r0, sp
   bde38:	f7f8 fc00 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bde3c:	4b03      	ldr	r3, [pc, #12]	; (bde4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bde3e:	6023      	str	r3, [r4, #0]
}
   bde40:	4620      	mov	r0, r4
        stream_(&stream) {
   bde42:	6225      	str	r5, [r4, #32]
}
   bde44:	b007      	add	sp, #28
   bde46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bde48:	000c1348 	.word	0x000c1348
   bde4c:	000c1fc0 	.word	0x000c1fc0

000bde50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bde50:	b5f0      	push	{r4, r5, r6, r7, lr}
   bde52:	460f      	mov	r7, r1
   bde54:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bde56:	491d      	ldr	r1, [pc, #116]	; (bdecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bde58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bde5a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bde5c:	4616      	mov	r6, r2
   bde5e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bde60:	f002 f9fb 	bl	c025a <strcmp>
   bde64:	b9c0      	cbnz	r0, bde98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bde66:	b1a4      	cbz	r4, bde92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bde68:	4629      	mov	r1, r5
   bde6a:	a801      	add	r0, sp, #4
   bde6c:	f7ff fcbc 	bl	bd7e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bde70:	4917      	ldr	r1, [pc, #92]	; (bded0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bde72:	2024      	movs	r0, #36	; 0x24
   bde74:	f001 fc2a 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   bde78:	4605      	mov	r5, r0
   bde7a:	b130      	cbz	r0, bde8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bde7c:	ab01      	add	r3, sp, #4
   bde7e:	4632      	mov	r2, r6
   bde80:	4621      	mov	r1, r4
   bde82:	f7ff ffbf 	bl	bde04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bde86:	4b13      	ldr	r3, [pc, #76]	; (bded4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bde88:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bde8a:	a801      	add	r0, sp, #4
   bde8c:	f7f8 fbd6 	bl	b663c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bde90:	462c      	mov	r4, r5
}
   bde92:	4620      	mov	r0, r4
   bde94:	b005      	add	sp, #20
   bde96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bde98:	490f      	ldr	r1, [pc, #60]	; (bded8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bde9a:	4638      	mov	r0, r7
   bde9c:	f002 f9dd 	bl	c025a <strcmp>
   bdea0:	b990      	cbnz	r0, bdec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bdea2:	2c00      	cmp	r4, #0
   bdea4:	d0f5      	beq.n	bde92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bdea6:	4629      	mov	r1, r5
   bdea8:	a801      	add	r0, sp, #4
   bdeaa:	f7ff fc9d 	bl	bd7e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bdeae:	4908      	ldr	r1, [pc, #32]	; (bded0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bdeb0:	2024      	movs	r0, #36	; 0x24
   bdeb2:	f001 fc0b 	bl	bf6cc <_ZnwjRKSt9nothrow_t>
   bdeb6:	4605      	mov	r5, r0
   bdeb8:	2800      	cmp	r0, #0
   bdeba:	d0e6      	beq.n	bde8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bdebc:	ab01      	add	r3, sp, #4
   bdebe:	4632      	mov	r2, r6
   bdec0:	4621      	mov	r1, r4
   bdec2:	f7ff ff9f 	bl	bde04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bdec6:	e7e0      	b.n	bde8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bdec8:	2400      	movs	r4, #0
   bdeca:	e7e2      	b.n	bde92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bdecc:	000c1f4a 	.word	0x000c1f4a
   bded0:	000c2114 	.word	0x000c2114
   bded4:	000c1fd8 	.word	0x000c1fd8
   bded8:	000c1f4e 	.word	0x000c1f4e

000bdedc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bdedc:	4b01      	ldr	r3, [pc, #4]	; (bdee4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bdede:	4a02      	ldr	r2, [pc, #8]	; (bdee8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bdee0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bdee2:	4770      	bx	lr
   bdee4:	2003e658 	.word	0x2003e658
   bdee8:	000c1f5f 	.word	0x000c1f5f

000bdeec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bdeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdef0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bdef2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bdef6:	4604      	mov	r4, r0
   bdef8:	460e      	mov	r6, r1
   bdefa:	4617      	mov	r7, r2
   bdefc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bdefe:	f001 f9c3 	bl	bf288 <_Z16_fetch_usbserialv>
   bdf02:	4581      	cmp	r9, r0
   bdf04:	d04c      	beq.n	bdfa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bdf06:	792b      	ldrb	r3, [r5, #4]
   bdf08:	0719      	lsls	r1, r3, #28
   bdf0a:	d504      	bpl.n	bdf16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bdf0c:	696a      	ldr	r2, [r5, #20]
   bdf0e:	4954      	ldr	r1, [pc, #336]	; (be060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bdf10:	4620      	mov	r0, r4
   bdf12:	f7ff fac0 	bl	bd496 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bdf16:	f1b8 0f00 	cmp.w	r8, #0
   bdf1a:	d00d      	beq.n	bdf38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bdf1c:	215b      	movs	r1, #91	; 0x5b
   bdf1e:	4620      	mov	r0, r4
   bdf20:	f7ff faad 	bl	bd47e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bdf24:	4641      	mov	r1, r8
   bdf26:	4620      	mov	r0, r4
   bdf28:	f7ff fa9a 	bl	bd460 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bdf2c:	6823      	ldr	r3, [r4, #0]
   bdf2e:	494d      	ldr	r1, [pc, #308]	; (be064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bdf30:	68db      	ldr	r3, [r3, #12]
   bdf32:	2202      	movs	r2, #2
   bdf34:	4620      	mov	r0, r4
   bdf36:	4798      	blx	r3
    if (attr.has_file) {
   bdf38:	792b      	ldrb	r3, [r5, #4]
   bdf3a:	07da      	lsls	r2, r3, #31
   bdf3c:	d523      	bpl.n	bdf86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bdf3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bdf42:	212f      	movs	r1, #47	; 0x2f
   bdf44:	4640      	mov	r0, r8
   bdf46:	f002 f9e7 	bl	c0318 <strrchr>
    if (s1) {
   bdf4a:	b108      	cbz	r0, bdf50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bdf4c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bdf50:	4641      	mov	r1, r8
   bdf52:	4620      	mov	r0, r4
   bdf54:	f7ff fa84 	bl	bd460 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bdf58:	792b      	ldrb	r3, [r5, #4]
   bdf5a:	079b      	lsls	r3, r3, #30
   bdf5c:	d508      	bpl.n	bdf70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bdf5e:	213a      	movs	r1, #58	; 0x3a
   bdf60:	4620      	mov	r0, r4
   bdf62:	f7ff fa8c 	bl	bd47e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bdf66:	68ea      	ldr	r2, [r5, #12]
   bdf68:	493f      	ldr	r1, [pc, #252]	; (be068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bdf6a:	4620      	mov	r0, r4
   bdf6c:	f7ff fa93 	bl	bd496 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bdf70:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bdf72:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bdf74:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bdf78:	68db      	ldr	r3, [r3, #12]
   bdf7a:	bf14      	ite	ne
   bdf7c:	493b      	ldrne	r1, [pc, #236]	; (be06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bdf7e:	493c      	ldreq	r1, [pc, #240]	; (be070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bdf80:	2202      	movs	r2, #2
            write(": ", 2);
   bdf82:	4620      	mov	r0, r4
   bdf84:	4798      	blx	r3
    if (attr.has_function) {
   bdf86:	792b      	ldrb	r3, [r5, #4]
   bdf88:	0758      	lsls	r0, r3, #29
   bdf8a:	d51d      	bpl.n	bdfc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bdf8c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bdf8e:	460b      	mov	r3, r1
   bdf90:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bdf92:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdf96:	b160      	cbz	r0, bdfb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bdf98:	2820      	cmp	r0, #32
   bdf9a:	d108      	bne.n	bdfae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bdf9c:	4619      	mov	r1, r3
   bdf9e:	e7f7      	b.n	bdf90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bdfa0:	4834      	ldr	r0, [pc, #208]	; (be074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bdfa2:	f000 f966 	bl	be272 <_ZN5spark12NetworkClass9listeningEv>
   bdfa6:	2800      	cmp	r0, #0
   bdfa8:	d0ad      	beq.n	bdf06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bdfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bdfae:	2828      	cmp	r0, #40	; 0x28
   bdfb0:	d1ee      	bne.n	bdf90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bdfb2:	6823      	ldr	r3, [r4, #0]
   bdfb4:	1a52      	subs	r2, r2, r1
   bdfb6:	68db      	ldr	r3, [r3, #12]
   bdfb8:	4620      	mov	r0, r4
   bdfba:	4798      	blx	r3
        write("(): ", 4);
   bdfbc:	6823      	ldr	r3, [r4, #0]
   bdfbe:	492e      	ldr	r1, [pc, #184]	; (be078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bdfc0:	68db      	ldr	r3, [r3, #12]
   bdfc2:	2204      	movs	r2, #4
   bdfc4:	4620      	mov	r0, r4
   bdfc6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bdfc8:	2100      	movs	r1, #0
   bdfca:	4638      	mov	r0, r7
   bdfcc:	f7fd fffc 	bl	bbfc8 <log_level_name>
   bdfd0:	4601      	mov	r1, r0
    write(s);
   bdfd2:	4620      	mov	r0, r4
   bdfd4:	f7ff fa44 	bl	bd460 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bdfd8:	6823      	ldr	r3, [r4, #0]
   bdfda:	4925      	ldr	r1, [pc, #148]	; (be070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bdfdc:	68db      	ldr	r3, [r3, #12]
   bdfde:	2202      	movs	r2, #2
   bdfe0:	4620      	mov	r0, r4
   bdfe2:	4798      	blx	r3
    if (msg) {
   bdfe4:	b11e      	cbz	r6, bdfee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bdfe6:	4631      	mov	r1, r6
   bdfe8:	4620      	mov	r0, r4
   bdfea:	f7ff fa39 	bl	bd460 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bdfee:	792b      	ldrb	r3, [r5, #4]
   bdff0:	f013 0f30 	tst.w	r3, #48	; 0x30
   bdff4:	d02c      	beq.n	be050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bdff6:	6823      	ldr	r3, [r4, #0]
   bdff8:	4920      	ldr	r1, [pc, #128]	; (be07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bdffa:	68db      	ldr	r3, [r3, #12]
   bdffc:	2202      	movs	r2, #2
   bdffe:	4620      	mov	r0, r4
   be000:	4798      	blx	r3
        if (attr.has_code) {
   be002:	792b      	ldrb	r3, [r5, #4]
   be004:	06d9      	lsls	r1, r3, #27
   be006:	d50a      	bpl.n	be01e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   be008:	6823      	ldr	r3, [r4, #0]
   be00a:	491d      	ldr	r1, [pc, #116]	; (be080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   be00c:	68db      	ldr	r3, [r3, #12]
   be00e:	2207      	movs	r2, #7
   be010:	4620      	mov	r0, r4
   be012:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   be014:	69aa      	ldr	r2, [r5, #24]
   be016:	491b      	ldr	r1, [pc, #108]	; (be084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   be018:	4620      	mov	r0, r4
   be01a:	f7ff fa3c 	bl	bd496 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   be01e:	792b      	ldrb	r3, [r5, #4]
   be020:	069a      	lsls	r2, r3, #26
   be022:	d511      	bpl.n	be048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   be024:	06db      	lsls	r3, r3, #27
   be026:	d505      	bpl.n	be034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   be028:	6823      	ldr	r3, [r4, #0]
   be02a:	4910      	ldr	r1, [pc, #64]	; (be06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   be02c:	68db      	ldr	r3, [r3, #12]
   be02e:	2202      	movs	r2, #2
   be030:	4620      	mov	r0, r4
   be032:	4798      	blx	r3
            write("details = ", 10);
   be034:	6823      	ldr	r3, [r4, #0]
   be036:	4914      	ldr	r1, [pc, #80]	; (be088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   be038:	68db      	ldr	r3, [r3, #12]
   be03a:	4620      	mov	r0, r4
   be03c:	220a      	movs	r2, #10
   be03e:	4798      	blx	r3
            write(attr.details);
   be040:	69e9      	ldr	r1, [r5, #28]
   be042:	4620      	mov	r0, r4
   be044:	f7ff fa0c 	bl	bd460 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   be048:	215d      	movs	r1, #93	; 0x5d
   be04a:	4620      	mov	r0, r4
   be04c:	f7ff fa17 	bl	bd47e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   be050:	6823      	ldr	r3, [r4, #0]
   be052:	490e      	ldr	r1, [pc, #56]	; (be08c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   be054:	68db      	ldr	r3, [r3, #12]
   be056:	4620      	mov	r0, r4
   be058:	2202      	movs	r2, #2
}
   be05a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   be05e:	4718      	bx	r3
   be060:	000c1f63 	.word	0x000c1f63
   be064:	000c1f6a 	.word	0x000c1f6a
   be068:	000c14b3 	.word	0x000c14b3
   be06c:	000c1f6d 	.word	0x000c1f6d
   be070:	000c1f72 	.word	0x000c1f72
   be074:	2003e684 	.word	0x2003e684
   be078:	000c1f70 	.word	0x000c1f70
   be07c:	000c1f75 	.word	0x000c1f75
   be080:	000c1f78 	.word	0x000c1f78
   be084:	000c1235 	.word	0x000c1235
   be088:	000c1f80 	.word	0x000c1f80
   be08c:	000c1f8b 	.word	0x000c1f8b

000be090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   be090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be094:	b085      	sub	sp, #20
    return stream_;
   be096:	f8d0 9020 	ldr.w	r9, [r0, #32]
   be09a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   be09c:	4605      	mov	r5, r0
   be09e:	460f      	mov	r7, r1
   be0a0:	4690      	mov	r8, r2
   be0a2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   be0a4:	f001 f8f0 	bl	bf288 <_Z16_fetch_usbserialv>
   be0a8:	4581      	cmp	r9, r0
   be0aa:	d105      	bne.n	be0b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   be0ac:	4849      	ldr	r0, [pc, #292]	; (be1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   be0ae:	f000 f8e0 	bl	be272 <_ZN5spark12NetworkClass9listeningEv>
   be0b2:	2800      	cmp	r0, #0
   be0b4:	f040 808a 	bne.w	be1cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   be0b8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   be0ba:	4a47      	ldr	r2, [pc, #284]	; (be1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   be0bc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   be0be:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   be0c2:	a801      	add	r0, sp, #4
        strm_(stream) {
   be0c4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   be0c6:	f88d 9008 	strb.w	r9, [sp, #8]
   be0ca:	f7ff f8b4 	bl	bd236 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   be0ce:	4649      	mov	r1, r9
   be0d0:	4640      	mov	r0, r8
   be0d2:	f7fd ff79 	bl	bbfc8 <log_level_name>
    json.name("l", 1).value(s);
   be0d6:	4941      	ldr	r1, [pc, #260]	; (be1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   be0d8:	4680      	mov	r8, r0
   be0da:	2201      	movs	r2, #1
   be0dc:	a801      	add	r0, sp, #4
   be0de:	f7ff f939 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be0e2:	4641      	mov	r1, r8
   be0e4:	f7ff f9ae 	bl	bd444 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   be0e8:	b13f      	cbz	r7, be0fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   be0ea:	493d      	ldr	r1, [pc, #244]	; (be1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   be0ec:	2201      	movs	r2, #1
   be0ee:	a801      	add	r0, sp, #4
   be0f0:	f7ff f930 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be0f4:	4639      	mov	r1, r7
   be0f6:	f7ff f9a5 	bl	bd444 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   be0fa:	b13e      	cbz	r6, be10c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   be0fc:	4939      	ldr	r1, [pc, #228]	; (be1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   be0fe:	2201      	movs	r2, #1
   be100:	a801      	add	r0, sp, #4
   be102:	f7ff f927 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be106:	4631      	mov	r1, r6
   be108:	f7ff f99c 	bl	bd444 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   be10c:	7923      	ldrb	r3, [r4, #4]
   be10e:	07df      	lsls	r7, r3, #31
   be110:	d50e      	bpl.n	be130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   be112:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   be114:	212f      	movs	r1, #47	; 0x2f
   be116:	4630      	mov	r0, r6
   be118:	f002 f8fe 	bl	c0318 <strrchr>
    if (s1) {
   be11c:	b100      	cbz	r0, be120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   be11e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   be120:	4931      	ldr	r1, [pc, #196]	; (be1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   be122:	2201      	movs	r2, #1
   be124:	a801      	add	r0, sp, #4
   be126:	f7ff f915 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be12a:	4631      	mov	r1, r6
   be12c:	f7ff f98a 	bl	bd444 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   be130:	7923      	ldrb	r3, [r4, #4]
   be132:	079e      	lsls	r6, r3, #30
   be134:	d507      	bpl.n	be146 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   be136:	492d      	ldr	r1, [pc, #180]	; (be1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   be138:	2202      	movs	r2, #2
   be13a:	a801      	add	r0, sp, #4
   be13c:	f7ff f90a 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be140:	68e1      	ldr	r1, [r4, #12]
   be142:	f7ff f885 	bl	bd250 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   be146:	7923      	ldrb	r3, [r4, #4]
   be148:	0758      	lsls	r0, r3, #29
   be14a:	d514      	bpl.n	be176 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   be14c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   be14e:	4633      	mov	r3, r6
   be150:	461f      	mov	r7, r3
    for (; *s; ++s) {
   be152:	f813 2b01 	ldrb.w	r2, [r3], #1
   be156:	b12a      	cbz	r2, be164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   be158:	2a20      	cmp	r2, #32
   be15a:	d101      	bne.n	be160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   be15c:	461e      	mov	r6, r3
   be15e:	e7f7      	b.n	be150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   be160:	2a28      	cmp	r2, #40	; 0x28
   be162:	d1f5      	bne.n	be150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   be164:	4922      	ldr	r1, [pc, #136]	; (be1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   be166:	2202      	movs	r2, #2
   be168:	a801      	add	r0, sp, #4
   be16a:	f7ff f8f3 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be16e:	1bba      	subs	r2, r7, r6
   be170:	4631      	mov	r1, r6
   be172:	f7ff f8ff 	bl	bd374 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   be176:	7923      	ldrb	r3, [r4, #4]
   be178:	0719      	lsls	r1, r3, #28
   be17a:	d507      	bpl.n	be18c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   be17c:	491d      	ldr	r1, [pc, #116]	; (be1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   be17e:	2201      	movs	r2, #1
   be180:	a801      	add	r0, sp, #4
   be182:	f7ff f8e7 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be186:	6961      	ldr	r1, [r4, #20]
   be188:	f7ff f874 	bl	bd274 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   be18c:	7923      	ldrb	r3, [r4, #4]
   be18e:	06da      	lsls	r2, r3, #27
   be190:	d508      	bpl.n	be1a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   be192:	2204      	movs	r2, #4
   be194:	4918      	ldr	r1, [pc, #96]	; (be1f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   be196:	eb0d 0002 	add.w	r0, sp, r2
   be19a:	f7ff f8db 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be19e:	69a1      	ldr	r1, [r4, #24]
   be1a0:	f7ff f856 	bl	bd250 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   be1a4:	7923      	ldrb	r3, [r4, #4]
   be1a6:	069b      	lsls	r3, r3, #26
   be1a8:	d507      	bpl.n	be1ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   be1aa:	4914      	ldr	r1, [pc, #80]	; (be1fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   be1ac:	2206      	movs	r2, #6
   be1ae:	a801      	add	r0, sp, #4
   be1b0:	f7ff f8d0 	bl	bd354 <_ZN5spark10JSONWriter4nameEPKcj>
   be1b4:	69e1      	ldr	r1, [r4, #28]
   be1b6:	f7ff f945 	bl	bd444 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   be1ba:	a801      	add	r0, sp, #4
   be1bc:	f7ff f825 	bl	bd20a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   be1c0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   be1c2:	490f      	ldr	r1, [pc, #60]	; (be200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   be1c4:	6803      	ldr	r3, [r0, #0]
   be1c6:	2202      	movs	r2, #2
   be1c8:	68db      	ldr	r3, [r3, #12]
   be1ca:	4798      	blx	r3
}
   be1cc:	b005      	add	sp, #20
   be1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be1d2:	bf00      	nop
   be1d4:	2003e684 	.word	0x2003e684
   be1d8:	000c1fa8 	.word	0x000c1fa8
   be1dc:	000c1f40 	.word	0x000c1f40
   be1e0:	000c1890 	.word	0x000c1890
   be1e4:	000c2235 	.word	0x000c2235
   be1e8:	000c08d2 	.word	0x000c08d2
   be1ec:	000c1f8e 	.word	0x000c1f8e
   be1f0:	000c1f91 	.word	0x000c1f91
   be1f4:	000c1222 	.word	0x000c1222
   be1f8:	000c1f94 	.word	0x000c1f94
   be1fc:	000c1f99 	.word	0x000c1f99
   be200:	000c1f8b 	.word	0x000c1f8b

000be204 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   be204:	2300      	movs	r3, #0
   be206:	6840      	ldr	r0, [r0, #4]
   be208:	461a      	mov	r2, r3
   be20a:	f7fd bfd9 	b.w	bc1c0 <network_connect>

000be20e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   be20e:	6840      	ldr	r0, [r0, #4]
   be210:	2200      	movs	r2, #0
   be212:	2102      	movs	r1, #2
   be214:	f7fd bfe4 	b.w	bc1e0 <network_disconnect>

000be218 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   be218:	2200      	movs	r2, #0
   be21a:	6840      	ldr	r0, [r0, #4]
   be21c:	4611      	mov	r1, r2
   be21e:	f7fd bfd7 	b.w	bc1d0 <network_connecting>

000be222 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   be222:	2200      	movs	r2, #0
   be224:	6840      	ldr	r0, [r0, #4]
   be226:	4611      	mov	r1, r2
   be228:	f7fd bfe2 	b.w	bc1f0 <network_ready>

000be22c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   be22c:	2300      	movs	r3, #0
   be22e:	6840      	ldr	r0, [r0, #4]
   be230:	461a      	mov	r2, r3
   be232:	4619      	mov	r1, r3
   be234:	f7fd bfe4 	b.w	bc200 <network_on>

000be238 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   be238:	2300      	movs	r3, #0
   be23a:	6840      	ldr	r0, [r0, #4]
   be23c:	461a      	mov	r2, r3
   be23e:	4619      	mov	r1, r3
   be240:	f7fd bfe6 	b.w	bc210 <network_off>

000be244 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   be244:	6840      	ldr	r0, [r0, #4]
   be246:	2100      	movs	r1, #0
   be248:	f7fe b80a 	b.w	bc260 <network_is_on>

000be24c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   be24c:	6840      	ldr	r0, [r0, #4]
   be24e:	2100      	movs	r1, #0
   be250:	f7fe b80e 	b.w	bc270 <network_is_off>

000be254 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   be254:	6840      	ldr	r0, [r0, #4]
   be256:	2200      	movs	r2, #0
   be258:	f081 0101 	eor.w	r1, r1, #1
   be25c:	f7fd bfe0 	b.w	bc220 <network_listen>

000be260 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   be260:	6840      	ldr	r0, [r0, #4]
   be262:	2200      	movs	r2, #0
   be264:	f7fd bfec 	b.w	bc240 <network_set_listen_timeout>

000be268 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   be268:	2200      	movs	r2, #0
   be26a:	6840      	ldr	r0, [r0, #4]
   be26c:	4611      	mov	r1, r2
   be26e:	f7fd bfef 	b.w	bc250 <network_get_listen_timeout>

000be272 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   be272:	2200      	movs	r2, #0
   be274:	6840      	ldr	r0, [r0, #4]
   be276:	4611      	mov	r1, r2
   be278:	f7fd bfda 	b.w	bc230 <network_listening>

000be27c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   be27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be280:	b095      	sub	sp, #84	; 0x54
   be282:	4614      	mov	r4, r2
   be284:	460d      	mov	r5, r1
   be286:	4607      	mov	r7, r0
    IPAddress addr;
   be288:	f7fe fe6e 	bl	bcf68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   be28c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   be28e:	221c      	movs	r2, #28
   be290:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   be292:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   be294:	f001 ff56 	bl	c0144 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   be298:	2340      	movs	r3, #64	; 0x40
   be29a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   be29c:	4620      	mov	r0, r4
   be29e:	466b      	mov	r3, sp
   be2a0:	aa0c      	add	r2, sp, #48	; 0x30
   be2a2:	2100      	movs	r1, #0
   be2a4:	f7fd fd30 	bl	bbd08 <netdb_getaddrinfo>
    if (!r) {
   be2a8:	4604      	mov	r4, r0
   be2aa:	2800      	cmp	r0, #0
   be2ac:	d14b      	bne.n	be346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be2ae:	4602      	mov	r2, r0
   be2b0:	2101      	movs	r1, #1
   be2b2:	6868      	ldr	r0, [r5, #4]
   be2b4:	f7fd ff9c 	bl	bc1f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be2b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   be2ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be2bc:	4622      	mov	r2, r4
   be2be:	6868      	ldr	r0, [r5, #4]
   be2c0:	f7fd ff96 	bl	bc1f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be2c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   be2c6:	4681      	mov	r9, r0
        bool ok = false;
   be2c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be2ca:	2e00      	cmp	r6, #0
   be2cc:	d03b      	beq.n	be346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   be2ce:	2900      	cmp	r1, #0
   be2d0:	d139      	bne.n	be346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   be2d2:	6873      	ldr	r3, [r6, #4]
   be2d4:	2b02      	cmp	r3, #2
   be2d6:	d003      	beq.n	be2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   be2d8:	2b0a      	cmp	r3, #10
   be2da:	d011      	beq.n	be300 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   be2dc:	69f6      	ldr	r6, [r6, #28]
   be2de:	e7f4      	b.n	be2ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   be2e0:	f1b8 0f00 	cmp.w	r8, #0
   be2e4:	d0fa      	beq.n	be2dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   be2e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   be2e8:	a806      	add	r0, sp, #24
   be2ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   be2ec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   be2ee:	f7fe fe69 	bl	bcfc4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   be2f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be2f4:	1d3c      	adds	r4, r7, #4
   be2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be2f8:	682b      	ldr	r3, [r5, #0]
   be2fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be2fc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   be2fe:	e7ed      	b.n	be2dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   be300:	f1b9 0f00 	cmp.w	r9, #0
   be304:	d0ea      	beq.n	be2dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   be306:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   be308:	2210      	movs	r2, #16
   be30a:	a801      	add	r0, sp, #4
   be30c:	f001 ff1a 	bl	c0144 <memset>
                    a.v = 6;
   be310:	2306      	movs	r3, #6
   be312:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   be316:	ad01      	add	r5, sp, #4
   be318:	f104 0308 	add.w	r3, r4, #8
   be31c:	3418      	adds	r4, #24
   be31e:	6818      	ldr	r0, [r3, #0]
   be320:	6859      	ldr	r1, [r3, #4]
   be322:	462a      	mov	r2, r5
   be324:	c203      	stmia	r2!, {r0, r1}
   be326:	3308      	adds	r3, #8
   be328:	42a3      	cmp	r3, r4
   be32a:	4615      	mov	r5, r2
   be32c:	d1f7      	bne.n	be31e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   be32e:	a901      	add	r1, sp, #4
   be330:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   be332:	ad07      	add	r5, sp, #28
   be334:	f7fe fe26 	bl	bcf84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   be338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be33a:	1d3c      	adds	r4, r7, #4
   be33c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   be33e:	682b      	ldr	r3, [r5, #0]
   be340:	7023      	strb	r3, [r4, #0]
                    ok = true;
   be342:	4649      	mov	r1, r9
   be344:	e7ca      	b.n	be2dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   be346:	9800      	ldr	r0, [sp, #0]
   be348:	f7fd fcd6 	bl	bbcf8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   be34c:	4638      	mov	r0, r7
   be34e:	b015      	add	sp, #84	; 0x54
   be350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000be354 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   be354:	4b02      	ldr	r3, [pc, #8]	; (be360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   be356:	4a03      	ldr	r2, [pc, #12]	; (be364 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   be358:	601a      	str	r2, [r3, #0]
   be35a:	2200      	movs	r2, #0
   be35c:	605a      	str	r2, [r3, #4]

} // spark
   be35e:	4770      	bx	lr
   be360:	2003e684 	.word	0x2003e684
   be364:	000c2020 	.word	0x000c2020

000be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   be368:	b508      	push	{r3, lr}
            return &Wire1;
   be36a:	f001 f94b 	bl	bf604 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   be36e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   be372:	f7fe bd67 	b.w	bce44 <_ZN7TwoWire4lockEv>

000be376 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   be376:	b510      	push	{r4, lr}
   be378:	4604      	mov	r4, r0
    lock_(_lock)
   be37a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   be37c:	b109      	cbz	r1, be382 <_ZN4PMICC1Eb+0xc>
        lock();
   be37e:	f7ff fff3 	bl	be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   be382:	4620      	mov	r0, r4
   be384:	bd10      	pop	{r4, pc}

000be386 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   be386:	b508      	push	{r3, lr}
            return &Wire1;
   be388:	f001 f93c 	bl	bf604 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   be38c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   be390:	f7fe bd61 	b.w	bce56 <_ZN7TwoWire6unlockEv>

000be394 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   be394:	b510      	push	{r4, lr}
    if (lock_) {
   be396:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   be398:	4604      	mov	r4, r0
    if (lock_) {
   be39a:	b10b      	cbz	r3, be3a0 <_ZN4PMICD1Ev+0xc>
        unlock();
   be39c:	f7ff fff3 	bl	be386 <_ZN4PMIC6unlockEv>
}
   be3a0:	4620      	mov	r0, r4
   be3a2:	bd10      	pop	{r4, pc}

000be3a4 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   be3a4:	b510      	push	{r4, lr}
   be3a6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   be3a8:	6800      	ldr	r0, [r0, #0]
   be3aa:	f7ff ffec 	bl	be386 <_ZN4PMIC6unlockEv>
   be3ae:	4620      	mov	r0, r4
   be3b0:	bd10      	pop	{r4, pc}

000be3b2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   be3b2:	b530      	push	{r4, r5, lr}
   be3b4:	b087      	sub	sp, #28
   be3b6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be3b8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be3ba:	f7ff ffd5 	bl	be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be3be:	226b      	movs	r2, #107	; 0x6b
   be3c0:	2300      	movs	r3, #0
   be3c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be3c6:	2401      	movs	r4, #1
   be3c8:	230a      	movs	r3, #10
   be3ca:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   be3ce:	f001 f919 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be3d2:	a902      	add	r1, sp, #8
   be3d4:	f7fe fd1a 	bl	bce0c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be3d8:	f001 f914 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   be3dc:	6803      	ldr	r3, [r0, #0]
   be3de:	4629      	mov	r1, r5
   be3e0:	689b      	ldr	r3, [r3, #8]
   be3e2:	4798      	blx	r3
            return &Wire1;
   be3e4:	f001 f90e 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be3e8:	4621      	mov	r1, r4
   be3ea:	f7fe fd27 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   be3ee:	9403      	str	r4, [sp, #12]
            return &Wire1;
   be3f0:	f001 f908 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   be3f4:	a902      	add	r1, sp, #8
   be3f6:	f7fe fcd9 	bl	bcdac <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   be3fa:	f001 f903 	bl	bf604 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   be3fe:	6803      	ldr	r3, [r0, #0]
   be400:	695b      	ldr	r3, [r3, #20]
   be402:	4798      	blx	r3
   be404:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   be406:	a801      	add	r0, sp, #4
   be408:	f7ff ffcc 	bl	be3a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be40c:	b2e0      	uxtb	r0, r4
   be40e:	b007      	add	sp, #28
   be410:	bd30      	pop	{r4, r5, pc}

000be412 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   be412:	b570      	push	{r4, r5, r6, lr}
   be414:	b086      	sub	sp, #24
   be416:	460d      	mov	r5, r1
   be418:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be41a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be41c:	f7ff ffa4 	bl	be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be420:	226b      	movs	r2, #107	; 0x6b
   be422:	2300      	movs	r3, #0
   be424:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   be428:	2601      	movs	r6, #1
   be42a:	230a      	movs	r3, #10
   be42c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   be430:	f001 f8e8 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   be434:	a902      	add	r1, sp, #8
   be436:	f7fe fce9 	bl	bce0c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   be43a:	f001 f8e3 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   be43e:	6803      	ldr	r3, [r0, #0]
   be440:	4629      	mov	r1, r5
   be442:	689b      	ldr	r3, [r3, #8]
   be444:	4798      	blx	r3
            return &Wire1;
   be446:	f001 f8dd 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   be44a:	6803      	ldr	r3, [r0, #0]
   be44c:	4621      	mov	r1, r4
   be44e:	689b      	ldr	r3, [r3, #8]
   be450:	4798      	blx	r3
            return &Wire1;
   be452:	f001 f8d7 	bl	bf604 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   be456:	4631      	mov	r1, r6
   be458:	f7fe fcf0 	bl	bce3c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   be45c:	a801      	add	r0, sp, #4
   be45e:	f7ff ffa1 	bl	be3a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be462:	b006      	add	sp, #24
   be464:	bd70      	pop	{r4, r5, r6, pc}

000be466 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   be466:	b513      	push	{r0, r1, r4, lr}
   be468:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be46a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be46c:	f7ff ff7c 	bl	be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be470:	2101      	movs	r1, #1
   be472:	4620      	mov	r0, r4
   be474:	f7ff ff9d 	bl	be3b2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   be478:	f000 0330 	and.w	r3, r0, #48	; 0x30
   be47c:	2b10      	cmp	r3, #16
   be47e:	d007      	beq.n	be490 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   be480:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   be484:	f042 0210 	orr.w	r2, r2, #16
   be488:	2101      	movs	r1, #1
   be48a:	4620      	mov	r0, r4
   be48c:	f7ff ffc1 	bl	be412 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be490:	a801      	add	r0, sp, #4
   be492:	f7ff ff87 	bl	be3a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be496:	2001      	movs	r0, #1
   be498:	b002      	add	sp, #8
   be49a:	bd10      	pop	{r4, pc}

000be49c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   be49c:	b513      	push	{r0, r1, r4, lr}
   be49e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be4a0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   be4a2:	f7ff ff61 	bl	be368 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   be4a6:	2101      	movs	r1, #1
   be4a8:	4620      	mov	r0, r4
   be4aa:	f7ff ff82 	bl	be3b2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   be4ae:	f010 0f30 	tst.w	r0, #48	; 0x30
   be4b2:	d005      	beq.n	be4c0 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   be4b4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   be4b8:	2101      	movs	r1, #1
   be4ba:	4620      	mov	r0, r4
   be4bc:	f7ff ffa9 	bl	be412 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   be4c0:	a801      	add	r0, sp, #4
   be4c2:	f7ff ff6f 	bl	be3a4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   be4c6:	2001      	movs	r0, #1
   be4c8:	b002      	add	sp, #8
   be4ca:	bd10      	pop	{r4, pc}

000be4cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   be4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be4ce:	4606      	mov	r6, r0
   be4d0:	460d      	mov	r5, r1
  size_t n = 0;
   be4d2:	188f      	adds	r7, r1, r2
   be4d4:	2400      	movs	r4, #0
  while (size--) {
   be4d6:	42bd      	cmp	r5, r7
   be4d8:	d00c      	beq.n	be4f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   be4da:	6833      	ldr	r3, [r6, #0]
   be4dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   be4e0:	689b      	ldr	r3, [r3, #8]
   be4e2:	4630      	mov	r0, r6
   be4e4:	4798      	blx	r3
     if (chunk>=0)
   be4e6:	1e03      	subs	r3, r0, #0
   be4e8:	db01      	blt.n	be4ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   be4ea:	441c      	add	r4, r3
  while (size--) {
   be4ec:	e7f3      	b.n	be4d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   be4ee:	2c00      	cmp	r4, #0
   be4f0:	bf08      	it	eq
   be4f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   be4f4:	4620      	mov	r0, r4
   be4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be4f8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   be4f8:	b513      	push	{r0, r1, r4, lr}
   be4fa:	4604      	mov	r4, r0
    }
   be4fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   be4fe:	b159      	cbz	r1, be518 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   be500:	9101      	str	r1, [sp, #4]
   be502:	f001 feda 	bl	c02ba <strlen>
   be506:	6823      	ldr	r3, [r4, #0]
   be508:	9901      	ldr	r1, [sp, #4]
   be50a:	68db      	ldr	r3, [r3, #12]
   be50c:	4602      	mov	r2, r0
   be50e:	4620      	mov	r0, r4
    }
   be510:	b002      	add	sp, #8
   be512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   be516:	4718      	bx	r3
    }
   be518:	b002      	add	sp, #8
   be51a:	bd10      	pop	{r4, pc}

000be51c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   be51c:	b508      	push	{r3, lr}
  return write(str);
   be51e:	f7ff ffeb 	bl	be4f8 <_ZN5Print5writeEPKc>
}
   be522:	bd08      	pop	{r3, pc}

000be524 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   be524:	6803      	ldr	r3, [r0, #0]
   be526:	689b      	ldr	r3, [r3, #8]
   be528:	4718      	bx	r3

000be52a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   be52a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   be52c:	210d      	movs	r1, #13
{
   be52e:	4605      	mov	r5, r0
  size_t n = print('\r');
   be530:	f7ff fff8 	bl	be524 <_ZN5Print5printEc>
  n += print('\n');
   be534:	210a      	movs	r1, #10
  size_t n = print('\r');
   be536:	4604      	mov	r4, r0
  n += print('\n');
   be538:	4628      	mov	r0, r5
   be53a:	f7ff fff3 	bl	be524 <_ZN5Print5printEc>
  return n;
}
   be53e:	4420      	add	r0, r4
   be540:	bd38      	pop	{r3, r4, r5, pc}

000be542 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   be542:	b530      	push	{r4, r5, lr}
   be544:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   be546:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   be548:	2a01      	cmp	r2, #1
  *str = '\0';
   be54a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   be54e:	bf98      	it	ls
   be550:	220a      	movls	r2, #10
   be552:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   be554:	460d      	mov	r5, r1
   be556:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   be55a:	fb01 5312 	mls	r3, r1, r2, r5
   be55e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be562:	2b09      	cmp	r3, #9
   be564:	bf94      	ite	ls
   be566:	3330      	addls	r3, #48	; 0x30
   be568:	3337      	addhi	r3, #55	; 0x37
   be56a:	b2db      	uxtb	r3, r3
  } while(n);
   be56c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be56e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   be572:	d9ef      	bls.n	be554 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   be574:	4621      	mov	r1, r4
   be576:	f7ff ffbf 	bl	be4f8 <_ZN5Print5writeEPKc>
}
   be57a:	b00b      	add	sp, #44	; 0x2c
   be57c:	bd30      	pop	{r4, r5, pc}
	...

000be580 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   be580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be584:	ec55 4b10 	vmov	r4, r5, d0
   be588:	4606      	mov	r6, r0
   be58a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   be58c:	ee10 2a10 	vmov	r2, s0
   be590:	ee10 0a10 	vmov	r0, s0
   be594:	462b      	mov	r3, r5
   be596:	4629      	mov	r1, r5
   be598:	f001 fcfc 	bl	bff94 <__aeabi_dcmpun>
   be59c:	b140      	cbz	r0, be5b0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   be59e:	4953      	ldr	r1, [pc, #332]	; (be6ec <_ZN5Print10printFloatEdh+0x16c>)
   be5a0:	4630      	mov	r0, r6
   be5a2:	f7ff ffa9 	bl	be4f8 <_ZN5Print5writeEPKc>
   be5a6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   be5a8:	4650      	mov	r0, sl
   be5aa:	b003      	add	sp, #12
   be5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   be5b0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   be5b4:	4b4e      	ldr	r3, [pc, #312]	; (be6f0 <_ZN5Print10printFloatEdh+0x170>)
   be5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be5ba:	4620      	mov	r0, r4
   be5bc:	4649      	mov	r1, r9
   be5be:	f001 fce9 	bl	bff94 <__aeabi_dcmpun>
   be5c2:	b948      	cbnz	r0, be5d8 <_ZN5Print10printFloatEdh+0x58>
   be5c4:	4b4a      	ldr	r3, [pc, #296]	; (be6f0 <_ZN5Print10printFloatEdh+0x170>)
   be5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be5ca:	4620      	mov	r0, r4
   be5cc:	4649      	mov	r1, r9
   be5ce:	f001 fcc3 	bl	bff58 <__aeabi_dcmple>
   be5d2:	b908      	cbnz	r0, be5d8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   be5d4:	4947      	ldr	r1, [pc, #284]	; (be6f4 <_ZN5Print10printFloatEdh+0x174>)
   be5d6:	e7e3      	b.n	be5a0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   be5d8:	4b47      	ldr	r3, [pc, #284]	; (be6f8 <_ZN5Print10printFloatEdh+0x178>)
   be5da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be5de:	4620      	mov	r0, r4
   be5e0:	4629      	mov	r1, r5
   be5e2:	f001 fccd 	bl	bff80 <__aeabi_dcmpgt>
   be5e6:	b108      	cbz	r0, be5ec <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   be5e8:	4944      	ldr	r1, [pc, #272]	; (be6fc <_ZN5Print10printFloatEdh+0x17c>)
   be5ea:	e7d9      	b.n	be5a0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   be5ec:	4b44      	ldr	r3, [pc, #272]	; (be700 <_ZN5Print10printFloatEdh+0x180>)
   be5ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   be5f2:	4620      	mov	r0, r4
   be5f4:	4629      	mov	r1, r5
   be5f6:	f001 fca5 	bl	bff44 <__aeabi_dcmplt>
   be5fa:	2800      	cmp	r0, #0
   be5fc:	d1f4      	bne.n	be5e8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   be5fe:	2200      	movs	r2, #0
   be600:	2300      	movs	r3, #0
   be602:	4620      	mov	r0, r4
   be604:	4629      	mov	r1, r5
   be606:	f001 fc9d 	bl	bff44 <__aeabi_dcmplt>
   be60a:	b1d0      	cbz	r0, be642 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   be60c:	212d      	movs	r1, #45	; 0x2d
   be60e:	4630      	mov	r0, r6
   be610:	f7ff ff88 	bl	be524 <_ZN5Print5printEc>
     number = -number;
   be614:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   be618:	4682      	mov	sl, r0
     number = -number;
   be61a:	461d      	mov	r5, r3
  double rounding = 0.5;
   be61c:	4939      	ldr	r1, [pc, #228]	; (be704 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   be61e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; be70c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   be622:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   be626:	2000      	movs	r0, #0
    rounding /= 10.0;
   be628:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   be62c:	fa5f f38b 	uxtb.w	r3, fp
   be630:	429f      	cmp	r7, r3
   be632:	d908      	bls.n	be646 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   be634:	4642      	mov	r2, r8
   be636:	464b      	mov	r3, r9
   be638:	f001 fb3c 	bl	bfcb4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   be63c:	f10b 0b01 	add.w	fp, fp, #1
   be640:	e7f4      	b.n	be62c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   be642:	4682      	mov	sl, r0
   be644:	e7ea      	b.n	be61c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   be646:	4622      	mov	r2, r4
   be648:	462b      	mov	r3, r5
   be64a:	f001 f853 	bl	bf6f4 <__adddf3>
   be64e:	460d      	mov	r5, r1
   be650:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   be652:	f001 fcdd 	bl	c0010 <__aeabi_d2uiz>
   be656:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   be658:	f001 f988 	bl	bf96c <__aeabi_ui2d>
   be65c:	4602      	mov	r2, r0
   be65e:	460b      	mov	r3, r1
   be660:	4620      	mov	r0, r4
   be662:	4629      	mov	r1, r5
   be664:	f001 f844 	bl	bf6f0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   be668:	220a      	movs	r2, #10
   be66a:	4604      	mov	r4, r0
   be66c:	460d      	mov	r5, r1
   be66e:	4630      	mov	r0, r6
   be670:	4641      	mov	r1, r8
   be672:	f7ff ff66 	bl	be542 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   be676:	4482      	add	sl, r0
  if (digits > 0) {
   be678:	2f00      	cmp	r7, #0
   be67a:	d095      	beq.n	be5a8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   be67c:	4922      	ldr	r1, [pc, #136]	; (be708 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   be67e:	f8df 908c 	ldr.w	r9, [pc, #140]	; be70c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   be682:	4630      	mov	r0, r6
   be684:	f7ff ff38 	bl	be4f8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   be688:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   be68c:	4482      	add	sl, r0
  while (digits-- > 0)
   be68e:	2f00      	cmp	r7, #0
   be690:	d08a      	beq.n	be5a8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   be692:	4642      	mov	r2, r8
   be694:	464b      	mov	r3, r9
   be696:	4620      	mov	r0, r4
   be698:	4629      	mov	r1, r5
   be69a:	f001 f9e1 	bl	bfa60 <__aeabi_dmul>
   be69e:	4604      	mov	r4, r0
   be6a0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   be6a2:	f001 fc8d 	bl	bffc0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   be6a6:	f1b0 0b00 	subs.w	fp, r0, #0
   be6aa:	da1c      	bge.n	be6e6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   be6ac:	212d      	movs	r1, #45	; 0x2d
   be6ae:	4630      	mov	r0, r6
   be6b0:	f7ff ff38 	bl	be524 <_ZN5Print5printEc>
            val = -n;
   be6b4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   be6b8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   be6ba:	220a      	movs	r2, #10
   be6bc:	4630      	mov	r0, r6
   be6be:	9301      	str	r3, [sp, #4]
   be6c0:	f7ff ff3f 	bl	be542 <_ZN5Print11printNumberEmh>
   be6c4:	9b01      	ldr	r3, [sp, #4]
   be6c6:	4418      	add	r0, r3
    n += print(toPrint);
   be6c8:	4482      	add	sl, r0
    remainder -= toPrint;
   be6ca:	4658      	mov	r0, fp
   be6cc:	f001 f95e 	bl	bf98c <__aeabi_i2d>
   be6d0:	4602      	mov	r2, r0
   be6d2:	460b      	mov	r3, r1
   be6d4:	4620      	mov	r0, r4
   be6d6:	4629      	mov	r1, r5
   be6d8:	f001 f80a 	bl	bf6f0 <__aeabi_dsub>
   be6dc:	3f01      	subs	r7, #1
   be6de:	4604      	mov	r4, r0
   be6e0:	460d      	mov	r5, r1
   be6e2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   be6e4:	e7d3      	b.n	be68e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   be6e6:	4659      	mov	r1, fp
        size_t t = 0;
   be6e8:	2300      	movs	r3, #0
   be6ea:	e7e6      	b.n	be6ba <_ZN5Print10printFloatEdh+0x13a>
   be6ec:	000c2054 	.word	0x000c2054
   be6f0:	7fefffff 	.word	0x7fefffff
   be6f4:	000c2058 	.word	0x000c2058
   be6f8:	41efffff 	.word	0x41efffff
   be6fc:	000c205c 	.word	0x000c205c
   be700:	c1efffff 	.word	0xc1efffff
   be704:	3fe00000 	.word	0x3fe00000
   be708:	000c2094 	.word	0x000c2094
   be70c:	40240000 	.word	0x40240000

000be710 <_ZN5Print5printEfi>:
{
   be710:	b538      	push	{r3, r4, r5, lr}
   be712:	4604      	mov	r4, r0
   be714:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   be718:	b2cd      	uxtb	r5, r1
   be71a:	f001 f949 	bl	bf9b0 <__aeabi_f2d>
   be71e:	ec41 0b10 	vmov	d0, r0, r1
   be722:	4629      	mov	r1, r5
   be724:	4620      	mov	r0, r4
}
   be726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   be72a:	f7ff bf29 	b.w	be580 <_ZN5Print10printFloatEdh>

000be72e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   be72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be732:	b086      	sub	sp, #24
   be734:	af00      	add	r7, sp, #0
   be736:	4605      	mov	r5, r0
   be738:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   be73a:	1d38      	adds	r0, r7, #4
   be73c:	2114      	movs	r1, #20
{
   be73e:	4614      	mov	r4, r2
    va_copy(args2, args);
   be740:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   be742:	f7fd fdcd 	bl	bc2e0 <vsnprintf>

    if (n<bufsize)
   be746:	2813      	cmp	r0, #19
   be748:	d80e      	bhi.n	be768 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   be74a:	1d39      	adds	r1, r7, #4
   be74c:	4628      	mov	r0, r5
   be74e:	f7ff fed3 	bl	be4f8 <_ZN5Print5writeEPKc>
   be752:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   be754:	b11e      	cbz	r6, be75e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   be756:	4628      	mov	r0, r5
   be758:	f7ff fee7 	bl	be52a <_ZN5Print7printlnEv>
   be75c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   be75e:	4620      	mov	r0, r4
   be760:	3718      	adds	r7, #24
   be762:	46bd      	mov	sp, r7
   be764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   be768:	f100 0308 	add.w	r3, r0, #8
   be76c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   be770:	46e8      	mov	r8, sp
        char bigger[n+1];
   be772:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   be776:	4622      	mov	r2, r4
   be778:	1c41      	adds	r1, r0, #1
   be77a:	683b      	ldr	r3, [r7, #0]
   be77c:	4668      	mov	r0, sp
   be77e:	f7fd fdaf 	bl	bc2e0 <vsnprintf>
  return write(str);
   be782:	4669      	mov	r1, sp
   be784:	4628      	mov	r0, r5
   be786:	f7ff feb7 	bl	be4f8 <_ZN5Print5writeEPKc>
   be78a:	4604      	mov	r4, r0
   be78c:	46c5      	mov	sp, r8
   be78e:	e7e1      	b.n	be754 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000be790 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   be790:	b510      	push	{r4, lr}
  if (0 == max) {
   be792:	4604      	mov	r4, r0
   be794:	b128      	cbz	r0, be7a2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   be796:	f001 fd0b 	bl	c01b0 <rand>
   be79a:	fb90 f3f4 	sdiv	r3, r0, r4
   be79e:	fb03 0414 	mls	r4, r3, r4, r0
}
   be7a2:	4620      	mov	r0, r4
   be7a4:	bd10      	pop	{r4, pc}

000be7a6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   be7a6:	4288      	cmp	r0, r1
{
   be7a8:	b510      	push	{r4, lr}
   be7aa:	4604      	mov	r4, r0
  if (min >= max) {
   be7ac:	da03      	bge.n	be7b6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   be7ae:	1a08      	subs	r0, r1, r0
   be7b0:	f7ff ffee 	bl	be790 <_Z6randomi>
   be7b4:	4404      	add	r4, r0
}
   be7b6:	4620      	mov	r0, r4
   be7b8:	bd10      	pop	{r4, pc}
	...

000be7bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   be7bc:	4b01      	ldr	r3, [pc, #4]	; (be7c4 <_GLOBAL__sub_I_RGB+0x8>)
   be7be:	2200      	movs	r2, #0
   be7c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   be7c2:	4770      	bx	lr
   be7c4:	2003e68c 	.word	0x2003e68c

000be7c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   be7c8:	2100      	movs	r1, #0
   be7ca:	f7fd bae5 	b.w	bbd98 <hal_spi_release>

000be7ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   be7ce:	2100      	movs	r1, #0
   be7d0:	f7fd bada 	b.w	bbd88 <hal_spi_acquire>

000be7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   be7d4:	b510      	push	{r4, lr}
   be7d6:	4604      	mov	r4, r0
   be7d8:	4608      	mov	r0, r1
{
    _spi = spi;
   be7da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   be7dc:	f7fd fab4 	bl	bbd48 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   be7e0:	2300      	movs	r3, #0
   be7e2:	6063      	str	r3, [r4, #4]
}
   be7e4:	4620      	mov	r0, r4
   be7e6:	bd10      	pop	{r4, pc}

000be7e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   be7e8:	b513      	push	{r0, r1, r4, lr}
   be7ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   be7ec:	7800      	ldrb	r0, [r0, #0]
   be7ee:	f7ff ffee 	bl	be7ce <_ZN8SPIClass4lockEv.isra.0>
   be7f2:	b958      	cbnz	r0, be80c <_ZN8SPIClass5beginEv+0x24>
   be7f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   be7f6:	9001      	str	r0, [sp, #4]
   be7f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be7fc:	f7fd fa8c 	bl	bbd18 <hal_spi_begin>
        unlock();
   be800:	9801      	ldr	r0, [sp, #4]
    }
}
   be802:	b002      	add	sp, #8
   be804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be808:	f7ff bfde 	b.w	be7c8 <_ZN8SPIClass6unlockEv.isra.0>
   be80c:	b002      	add	sp, #8
   be80e:	bd10      	pop	{r4, pc}

000be810 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   be810:	b513      	push	{r0, r1, r4, lr}
   be812:	4604      	mov	r4, r0
    if (!lock())
   be814:	7800      	ldrb	r0, [r0, #0]
   be816:	f7ff ffda 	bl	be7ce <_ZN8SPIClass4lockEv.isra.0>
   be81a:	b948      	cbnz	r0, be830 <_ZN8SPIClass3endEv+0x20>
   be81c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   be81e:	9001      	str	r0, [sp, #4]
   be820:	f7fd fa82 	bl	bbd28 <hal_spi_end>
        unlock();
   be824:	9801      	ldr	r0, [sp, #4]
    }
}
   be826:	b002      	add	sp, #8
   be828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be82c:	f7ff bfcc 	b.w	be7c8 <_ZN8SPIClass6unlockEv.isra.0>
   be830:	b002      	add	sp, #8
   be832:	bd10      	pop	{r4, pc}

000be834 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   be834:	7800      	ldrb	r0, [r0, #0]
   be836:	f7ff bfc7 	b.w	be7c8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000be83c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   be83c:	0840      	lsrs	r0, r0, #1
{
   be83e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   be840:	6018      	str	r0, [r3, #0]
   be842:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   be844:	6818      	ldr	r0, [r3, #0]
   be846:	4288      	cmp	r0, r1
   be848:	b2e5      	uxtb	r5, r4
   be84a:	d906      	bls.n	be85a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   be84c:	3401      	adds	r4, #1
   be84e:	2c08      	cmp	r4, #8
   be850:	d002      	beq.n	be858 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   be852:	0840      	lsrs	r0, r0, #1
   be854:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   be856:	e7f5      	b.n	be844 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   be858:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   be85a:	4b02      	ldr	r3, [pc, #8]	; (be864 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   be85c:	5d5b      	ldrb	r3, [r3, r5]
   be85e:	7013      	strb	r3, [r2, #0]
}
   be860:	bd30      	pop	{r4, r5, pc}
   be862:	bf00      	nop
   be864:	000c2060 	.word	0x000c2060

000be868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   be868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be86c:	4606      	mov	r6, r0
   be86e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   be870:	7800      	ldrb	r0, [r0, #0]
{
   be872:	460c      	mov	r4, r1
    CHECK(lock());
   be874:	f7ff ffab 	bl	be7ce <_ZN8SPIClass4lockEv.isra.0>
   be878:	2800      	cmp	r0, #0
   be87a:	db1b      	blt.n	be8b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   be87c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   be87e:	2214      	movs	r2, #20
   be880:	2100      	movs	r1, #0
   be882:	a809      	add	r0, sp, #36	; 0x24
   be884:	f001 fc5e 	bl	c0144 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   be888:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   be88a:	2200      	movs	r2, #0
   be88c:	a909      	add	r1, sp, #36	; 0x24
   be88e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   be890:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   be894:	f7fd fa68 	bl	bbd68 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   be898:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   be89c:	b113      	cbz	r3, be8a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   be89e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   be8a2:	b155      	cbz	r5, be8ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   be8a4:	2700      	movs	r7, #0
   be8a6:	46b9      	mov	r9, r7
   be8a8:	46b8      	mov	r8, r7
   be8aa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   be8ac:	7923      	ldrb	r3, [r4, #4]
   be8ae:	b15d      	cbz	r5, be8c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   be8b0:	b1c3      	cbz	r3, be8e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   be8b2:	2000      	movs	r0, #0
}
   be8b4:	b00f      	add	sp, #60	; 0x3c
   be8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   be8ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   be8be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   be8c2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   be8c6:	e7f1      	b.n	be8ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   be8c8:	2b00      	cmp	r3, #0
   be8ca:	d135      	bne.n	be938 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   be8cc:	68a3      	ldr	r3, [r4, #8]
   be8ce:	4543      	cmp	r3, r8
   be8d0:	d108      	bne.n	be8e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   be8d2:	f88d 9020 	strb.w	r9, [sp, #32]
   be8d6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be8da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be8de:	89a3      	ldrh	r3, [r4, #12]
   be8e0:	429a      	cmp	r2, r3
   be8e2:	d0e6      	beq.n	be8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   be8e4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be8e6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   be8e8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be8ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   be8ee:	ab04      	add	r3, sp, #16
   be8f0:	f10d 020f 	add.w	r2, sp, #15
   be8f4:	f7ff ffa2 	bl	be83c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   be8f8:	7921      	ldrb	r1, [r4, #4]
   be8fa:	b985      	cbnz	r5, be91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   be8fc:	b989      	cbnz	r1, be922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be8fe:	68a3      	ldr	r3, [r4, #8]
   be900:	4543      	cmp	r3, r8
   be902:	d30e      	bcc.n	be922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   be904:	f88d 9020 	strb.w	r9, [sp, #32]
   be908:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be90c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be910:	89a3      	ldrh	r3, [r4, #12]
   be912:	429a      	cmp	r2, r3
   be914:	d105      	bne.n	be922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   be916:	9b04      	ldr	r3, [sp, #16]
   be918:	4543      	cmp	r3, r8
   be91a:	d102      	bne.n	be922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be91c:	e7c9      	b.n	be8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   be91e:	2900      	cmp	r1, #0
   be920:	d1f9      	bne.n	be916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   be922:	2300      	movs	r3, #0
   be924:	9301      	str	r3, [sp, #4]
   be926:	7b63      	ldrb	r3, [r4, #13]
   be928:	9300      	str	r3, [sp, #0]
   be92a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   be92e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   be930:	7830      	ldrb	r0, [r6, #0]
   be932:	f7fd fa21 	bl	bbd78 <hal_spi_set_settings>
   be936:	e7bc      	b.n	be8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   be938:	e9cd 5500 	strd	r5, r5, [sp]
   be93c:	462b      	mov	r3, r5
   be93e:	462a      	mov	r2, r5
   be940:	2101      	movs	r1, #1
   be942:	e7f5      	b.n	be930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000be944 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   be944:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   be946:	7800      	ldrb	r0, [r0, #0]
   be948:	f7fd f9f6 	bl	bbd38 <hal_spi_transfer>
}
   be94c:	b2c0      	uxtb	r0, r0
   be94e:	bd08      	pop	{r3, pc}

000be950 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   be950:	4770      	bx	lr

000be952 <_ZN8SPIClass15detachInterruptEv>:
   be952:	4770      	bx	lr

000be954 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   be954:	b510      	push	{r4, lr}
   be956:	4604      	mov	r4, r0
{
	free(buffer);
   be958:	6800      	ldr	r0, [r0, #0]
   be95a:	f7fd fc99 	bl	bc290 <free>
}
   be95e:	4620      	mov	r0, r4
   be960:	bd10      	pop	{r4, pc}

000be962 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   be962:	b510      	push	{r4, lr}
   be964:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be966:	6800      	ldr	r0, [r0, #0]
   be968:	b108      	cbz	r0, be96e <_ZN6String10invalidateEv+0xc>
   be96a:	f7fd fc91 	bl	bc290 <free>
	buffer = NULL;
   be96e:	2300      	movs	r3, #0
	capacity = len = 0;
   be970:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be974:	6023      	str	r3, [r4, #0]
}
   be976:	bd10      	pop	{r4, pc}

000be978 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be978:	b538      	push	{r3, r4, r5, lr}
   be97a:	4604      	mov	r4, r0
   be97c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be97e:	6800      	ldr	r0, [r0, #0]
   be980:	3101      	adds	r1, #1
   be982:	f7fd fc8d 	bl	bc2a0 <realloc>
	if (newbuffer) {
   be986:	b110      	cbz	r0, be98e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be988:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be98c:	2001      	movs	r0, #1
	}
	return 0;
}
   be98e:	bd38      	pop	{r3, r4, r5, pc}

000be990 <_ZN6String7reserveEj>:
{
   be990:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be992:	6803      	ldr	r3, [r0, #0]
{
   be994:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be996:	b123      	cbz	r3, be9a2 <_ZN6String7reserveEj+0x12>
   be998:	6843      	ldr	r3, [r0, #4]
   be99a:	428b      	cmp	r3, r1
   be99c:	d301      	bcc.n	be9a2 <_ZN6String7reserveEj+0x12>
   be99e:	2001      	movs	r0, #1
}
   be9a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be9a2:	4620      	mov	r0, r4
   be9a4:	f7ff ffe8 	bl	be978 <_ZN6String12changeBufferEj>
   be9a8:	2800      	cmp	r0, #0
   be9aa:	d0f9      	beq.n	be9a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be9ac:	68a3      	ldr	r3, [r4, #8]
   be9ae:	2b00      	cmp	r3, #0
   be9b0:	d1f5      	bne.n	be99e <_ZN6String7reserveEj+0xe>
   be9b2:	6822      	ldr	r2, [r4, #0]
   be9b4:	7013      	strb	r3, [r2, #0]
   be9b6:	e7f2      	b.n	be99e <_ZN6String7reserveEj+0xe>

000be9b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be9ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be9bc:	4611      	mov	r1, r2
   be9be:	9201      	str	r2, [sp, #4]
{
   be9c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be9c2:	f7ff ffe5 	bl	be990 <_ZN6String7reserveEj>
   be9c6:	9a01      	ldr	r2, [sp, #4]
   be9c8:	b928      	cbnz	r0, be9d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be9ca:	4620      	mov	r0, r4
   be9cc:	f7ff ffc9 	bl	be962 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be9d0:	4620      	mov	r0, r4
   be9d2:	b003      	add	sp, #12
   be9d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   be9d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be9d8:	4629      	mov	r1, r5
   be9da:	6820      	ldr	r0, [r4, #0]
   be9dc:	f001 fb8a 	bl	c00f4 <memcpy>
	buffer[len] = 0;
   be9e0:	6822      	ldr	r2, [r4, #0]
   be9e2:	68a3      	ldr	r3, [r4, #8]
   be9e4:	2100      	movs	r1, #0
   be9e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   be9e8:	e7f2      	b.n	be9d0 <_ZN6String4copyEPKcj+0x18>

000be9ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be9ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be9ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be9ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be9f2:	4604      	mov	r4, r0
	len = 0;
   be9f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   be9f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be9f8:	b141      	cbz	r1, bea0c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be9fa:	4608      	mov	r0, r1
   be9fc:	9101      	str	r1, [sp, #4]
   be9fe:	f001 fc5c 	bl	c02ba <strlen>
   bea02:	9901      	ldr	r1, [sp, #4]
   bea04:	4602      	mov	r2, r0
   bea06:	4620      	mov	r0, r4
   bea08:	f7ff ffd6 	bl	be9b8 <_ZN6String4copyEPKcj>
}
   bea0c:	4620      	mov	r0, r4
   bea0e:	b002      	add	sp, #8
   bea10:	bd10      	pop	{r4, pc}

000bea12 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bea12:	b538      	push	{r3, r4, r5, lr}
   bea14:	4605      	mov	r5, r0
	if (buffer) {
   bea16:	6800      	ldr	r0, [r0, #0]
{
   bea18:	460c      	mov	r4, r1
	if (buffer) {
   bea1a:	b168      	cbz	r0, bea38 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bea1c:	686a      	ldr	r2, [r5, #4]
   bea1e:	688b      	ldr	r3, [r1, #8]
   bea20:	429a      	cmp	r2, r3
   bea22:	d307      	bcc.n	bea34 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bea24:	6809      	ldr	r1, [r1, #0]
   bea26:	f001 fc22 	bl	c026e <strcpy>
			len = rhs.len;
   bea2a:	68a3      	ldr	r3, [r4, #8]
   bea2c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bea2e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bea30:	60a3      	str	r3, [r4, #8]
}
   bea32:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bea34:	f7fd fc2c 	bl	bc290 <free>
	buffer = rhs.buffer;
   bea38:	6823      	ldr	r3, [r4, #0]
   bea3a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bea3c:	6863      	ldr	r3, [r4, #4]
   bea3e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bea40:	68a3      	ldr	r3, [r4, #8]
   bea42:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bea44:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bea46:	e9c4 3300 	strd	r3, r3, [r4]
   bea4a:	e7f1      	b.n	bea30 <_ZN6String4moveERS_+0x1e>

000bea4c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bea4c:	b510      	push	{r4, lr}
	buffer = NULL;
   bea4e:	2300      	movs	r3, #0
	capacity = 0;
   bea50:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bea54:	4604      	mov	r4, r0
	len = 0;
   bea56:	6083      	str	r3, [r0, #8]
	flags = 0;
   bea58:	7303      	strb	r3, [r0, #12]
	move(rval);
   bea5a:	f7ff ffda 	bl	bea12 <_ZN6String4moveERS_>
}
   bea5e:	4620      	mov	r0, r4
   bea60:	bd10      	pop	{r4, pc}

000bea62 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bea62:	4288      	cmp	r0, r1
{
   bea64:	b510      	push	{r4, lr}
   bea66:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bea68:	d005      	beq.n	bea76 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bea6a:	680b      	ldr	r3, [r1, #0]
   bea6c:	b12b      	cbz	r3, bea7a <_ZN6StringaSERKS_+0x18>
   bea6e:	688a      	ldr	r2, [r1, #8]
   bea70:	4619      	mov	r1, r3
   bea72:	f7ff ffa1 	bl	be9b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bea76:	4620      	mov	r0, r4
   bea78:	bd10      	pop	{r4, pc}
	else invalidate();
   bea7a:	f7ff ff72 	bl	be962 <_ZN6String10invalidateEv>
   bea7e:	e7fa      	b.n	bea76 <_ZN6StringaSERKS_+0x14>

000bea80 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bea80:	b510      	push	{r4, lr}
	buffer = NULL;
   bea82:	2300      	movs	r3, #0
String::String(const String &value)
   bea84:	4604      	mov	r4, r0
	capacity = 0;
   bea86:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bea8a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bea8c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bea8e:	f7ff ffe8 	bl	bea62 <_ZN6StringaSERKS_>
}
   bea92:	4620      	mov	r0, r4
   bea94:	bd10      	pop	{r4, pc}

000bea96 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bea96:	4288      	cmp	r0, r1
{
   bea98:	b510      	push	{r4, lr}
   bea9a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bea9c:	d001      	beq.n	beaa2 <_ZN6StringaSEOS_+0xc>
   bea9e:	f7ff ffb8 	bl	bea12 <_ZN6String4moveERS_>
	return *this;
}
   beaa2:	4620      	mov	r0, r4
   beaa4:	bd10      	pop	{r4, pc}

000beaa6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   beaa6:	b513      	push	{r0, r1, r4, lr}
   beaa8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   beaaa:	b159      	cbz	r1, beac4 <_ZN6StringaSEPKc+0x1e>
   beaac:	4608      	mov	r0, r1
   beaae:	9101      	str	r1, [sp, #4]
   beab0:	f001 fc03 	bl	c02ba <strlen>
   beab4:	9901      	ldr	r1, [sp, #4]
   beab6:	4602      	mov	r2, r0
   beab8:	4620      	mov	r0, r4
   beaba:	f7ff ff7d 	bl	be9b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   beabe:	4620      	mov	r0, r4
   beac0:	b002      	add	sp, #8
   beac2:	bd10      	pop	{r4, pc}
	else invalidate();
   beac4:	f7ff ff4d 	bl	be962 <_ZN6String10invalidateEv>
   beac8:	e7f9      	b.n	beabe <_ZN6StringaSEPKc+0x18>

000beaca <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   beaca:	b570      	push	{r4, r5, r6, lr}
   beacc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   beace:	460e      	mov	r6, r1
   bead0:	b909      	cbnz	r1, bead6 <_ZN6String6concatEPKcj+0xc>
   bead2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bead4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bead6:	b16a      	cbz	r2, beaf4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bead8:	6884      	ldr	r4, [r0, #8]
   beada:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   beadc:	4621      	mov	r1, r4
   beade:	f7ff ff57 	bl	be990 <_ZN6String7reserveEj>
   beae2:	2800      	cmp	r0, #0
   beae4:	d0f5      	beq.n	bead2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   beae6:	6828      	ldr	r0, [r5, #0]
   beae8:	68ab      	ldr	r3, [r5, #8]
   beaea:	4631      	mov	r1, r6
   beaec:	4418      	add	r0, r3
   beaee:	f001 fbbe 	bl	c026e <strcpy>
	len = newlen;
   beaf2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   beaf4:	2001      	movs	r0, #1
   beaf6:	e7ed      	b.n	bead4 <_ZN6String6concatEPKcj+0xa>

000beaf8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   beaf8:	b513      	push	{r0, r1, r4, lr}
   beafa:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   beafc:	4608      	mov	r0, r1
	if (!cstr) return 0;
   beafe:	b151      	cbz	r1, beb16 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   beb00:	9101      	str	r1, [sp, #4]
   beb02:	f001 fbda 	bl	c02ba <strlen>
   beb06:	9901      	ldr	r1, [sp, #4]
   beb08:	4602      	mov	r2, r0
   beb0a:	4620      	mov	r0, r4
}
   beb0c:	b002      	add	sp, #8
   beb0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   beb12:	f7ff bfda 	b.w	beaca <_ZN6String6concatEPKcj>
}
   beb16:	b002      	add	sp, #8
   beb18:	bd10      	pop	{r4, pc}

000beb1a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   beb1a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   beb1c:	2300      	movs	r3, #0
	buf[0] = c;
   beb1e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   beb22:	2201      	movs	r2, #1
   beb24:	a901      	add	r1, sp, #4
	buf[1] = 0;
   beb26:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   beb2a:	f7ff ffce 	bl	beaca <_ZN6String6concatEPKcj>
}
   beb2e:	b003      	add	sp, #12
   beb30:	f85d fb04 	ldr.w	pc, [sp], #4

000beb34 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   beb34:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   beb36:	688a      	ldr	r2, [r1, #8]
   beb38:	6809      	ldr	r1, [r1, #0]
{
   beb3a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   beb3c:	f7ff ffc5 	bl	beaca <_ZN6String6concatEPKcj>
   beb40:	b910      	cbnz	r0, beb48 <_ZplRK15StringSumHelperRK6String+0x14>
   beb42:	4620      	mov	r0, r4
   beb44:	f7ff ff0d 	bl	be962 <_ZN6String10invalidateEv>
	return a;
}
   beb48:	4620      	mov	r0, r4
   beb4a:	bd10      	pop	{r4, pc}

000beb4c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   beb4c:	b513      	push	{r0, r1, r4, lr}
   beb4e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   beb50:	b929      	cbnz	r1, beb5e <_ZplRK15StringSumHelperPKc+0x12>
   beb52:	4620      	mov	r0, r4
   beb54:	f7ff ff05 	bl	be962 <_ZN6String10invalidateEv>
	return a;
}
   beb58:	4620      	mov	r0, r4
   beb5a:	b002      	add	sp, #8
   beb5c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   beb5e:	4608      	mov	r0, r1
   beb60:	9101      	str	r1, [sp, #4]
   beb62:	f001 fbaa 	bl	c02ba <strlen>
   beb66:	9901      	ldr	r1, [sp, #4]
   beb68:	4602      	mov	r2, r0
   beb6a:	4620      	mov	r0, r4
   beb6c:	f7ff ffad 	bl	beaca <_ZN6String6concatEPKcj>
   beb70:	2800      	cmp	r0, #0
   beb72:	d0ee      	beq.n	beb52 <_ZplRK15StringSumHelperPKc+0x6>
   beb74:	e7f0      	b.n	beb58 <_ZplRK15StringSumHelperPKc+0xc>

000beb76 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   beb76:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   beb78:	6882      	ldr	r2, [r0, #8]
   beb7a:	b93a      	cbnz	r2, beb8c <_ZNK6String6equalsEPKc+0x16>
   beb7c:	b121      	cbz	r1, beb88 <_ZNK6String6equalsEPKc+0x12>
   beb7e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   beb80:	fab0 f080 	clz	r0, r0
   beb84:	0940      	lsrs	r0, r0, #5
   beb86:	e000      	b.n	beb8a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   beb88:	2001      	movs	r0, #1
}
   beb8a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   beb8c:	6800      	ldr	r0, [r0, #0]
   beb8e:	b909      	cbnz	r1, beb94 <_ZNK6String6equalsEPKc+0x1e>
   beb90:	7800      	ldrb	r0, [r0, #0]
   beb92:	e7f5      	b.n	beb80 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   beb94:	f001 fb61 	bl	c025a <strcmp>
   beb98:	e7f2      	b.n	beb80 <_ZNK6String6equalsEPKc+0xa>

000beb9a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   beb9a:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   beb9c:	6883      	ldr	r3, [r0, #8]
   beb9e:	688a      	ldr	r2, [r1, #8]
   beba0:	4293      	cmp	r3, r2
   beba2:	d30b      	bcc.n	bebbc <_ZNK6String8endsWithERKS_+0x22>
   beba4:	6800      	ldr	r0, [r0, #0]
   beba6:	b140      	cbz	r0, bebba <_ZNK6String8endsWithERKS_+0x20>
   beba8:	6809      	ldr	r1, [r1, #0]
   bebaa:	b149      	cbz	r1, bebc0 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bebac:	1a9b      	subs	r3, r3, r2
   bebae:	4418      	add	r0, r3
   bebb0:	f001 fb53 	bl	c025a <strcmp>
   bebb4:	fab0 f080 	clz	r0, r0
   bebb8:	0940      	lsrs	r0, r0, #5
}
   bebba:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bebbc:	2000      	movs	r0, #0
   bebbe:	e7fc      	b.n	bebba <_ZNK6String8endsWithERKS_+0x20>
   bebc0:	4608      	mov	r0, r1
   bebc2:	e7fa      	b.n	bebba <_ZNK6String8endsWithERKS_+0x20>

000bebc4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bebc6:	429a      	cmp	r2, r3
{
   bebc8:	460f      	mov	r7, r1
   bebca:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bebcc:	490c      	ldr	r1, [pc, #48]	; (bec00 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bebce:	bf88      	it	hi
   bebd0:	4613      	movhi	r3, r2
{
   bebd2:	4614      	mov	r4, r2
   bebd4:	4606      	mov	r6, r0
	if (left > right) {
   bebd6:	bf84      	itt	hi
   bebd8:	462c      	movhi	r4, r5
   bebda:	461d      	movhi	r5, r3
	String out;
   bebdc:	f7ff ff05 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bebe0:	68bb      	ldr	r3, [r7, #8]
   bebe2:	42a3      	cmp	r3, r4
   bebe4:	d30a      	bcc.n	bebfc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bebe6:	6839      	ldr	r1, [r7, #0]
   bebe8:	42ab      	cmp	r3, r5
   bebea:	bf94      	ite	ls
   bebec:	ebc4 0203 	rsbls	r2, r4, r3
   bebf0:	ebc4 0205 	rsbhi	r2, r4, r5
   bebf4:	4421      	add	r1, r4
   bebf6:	4630      	mov	r0, r6
   bebf8:	f7ff fede 	bl	be9b8 <_ZN6String4copyEPKcj>
	return out;
}
   bebfc:	4630      	mov	r0, r6
   bebfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bec00:	000c1f8d 	.word	0x000c1f8d

000bec04 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bec04:	b40e      	push	{r1, r2, r3}
   bec06:	b570      	push	{r4, r5, r6, lr}
   bec08:	b087      	sub	sp, #28
   bec0a:	ad0b      	add	r5, sp, #44	; 0x2c
   bec0c:	4604      	mov	r4, r0
   bec0e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bec12:	9201      	str	r2, [sp, #4]
   bec14:	462b      	mov	r3, r5
   bec16:	2105      	movs	r1, #5
   bec18:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bec1a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bec1c:	f7fd fb60 	bl	bc2e0 <vsnprintf>
    va_end(marker);

    String result;
   bec20:	490b      	ldr	r1, [pc, #44]	; (bec50 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bec22:	4606      	mov	r6, r0
    String result;
   bec24:	4620      	mov	r0, r4
   bec26:	f7ff fee0 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bec2a:	4631      	mov	r1, r6
   bec2c:	4620      	mov	r0, r4
   bec2e:	f7ff feaf 	bl	be990 <_ZN6String7reserveEj>
    if (result.buffer) {
   bec32:	6820      	ldr	r0, [r4, #0]
   bec34:	b130      	cbz	r0, bec44 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bec36:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bec38:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bec3a:	462b      	mov	r3, r5
   bec3c:	1c71      	adds	r1, r6, #1
   bec3e:	f7fd fb4f 	bl	bc2e0 <vsnprintf>
        va_end(marker);
        result.len = n;
   bec42:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bec44:	4620      	mov	r0, r4
   bec46:	b007      	add	sp, #28
   bec48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bec4c:	b003      	add	sp, #12
   bec4e:	4770      	bx	lr
   bec50:	000c1f8d 	.word	0x000c1f8d

000bec54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bec54:	b510      	push	{r4, lr}
   bec56:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bec58:	6800      	ldr	r0, [r0, #0]
   bec5a:	b118      	cbz	r0, bec64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bec5c:	f7fd fb18 	bl	bc290 <free>
            wakeupSource_ = nullptr;
   bec60:	2300      	movs	r3, #0
   bec62:	6023      	str	r3, [r4, #0]
        }
    }
   bec64:	bd10      	pop	{r4, pc}

000bec66 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bec66:	b538      	push	{r3, r4, r5, lr}
   bec68:	460c      	mov	r4, r1
   bec6a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bec6c:	f7ff fff2 	bl	bec54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bec70:	b154      	cbz	r4, bec88 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bec72:	8820      	ldrh	r0, [r4, #0]
   bec74:	f7fd fb04 	bl	bc280 <malloc>
   bec78:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bec7a:	b128      	cbz	r0, bec88 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bec7c:	8822      	ldrh	r2, [r4, #0]
   bec7e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bec80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bec84:	f001 ba36 	b.w	c00f4 <memcpy>
    }
   bec88:	bd38      	pop	{r3, r4, r5, pc}

000bec8a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bec8a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bec8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bec90:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bec92:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bec96:	f8c0 3006 	str.w	r3, [r0, #6]
   bec9a:	894b      	ldrh	r3, [r1, #10]
   bec9c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bec9e:	460c      	mov	r4, r1
   beca0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   beca2:	f7ff ffd7 	bl	bec54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   beca6:	6823      	ldr	r3, [r4, #0]
   beca8:	b113      	cbz	r3, becb0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   becaa:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   becac:	2300      	movs	r3, #0
   becae:	6023      	str	r3, [r4, #0]
    }
   becb0:	bd38      	pop	{r3, r4, r5, pc}

000becb2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   becb2:	b507      	push	{r0, r1, r2, lr}
   becb4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   becb6:	2100      	movs	r1, #0
{
   becb8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   becba:	9100      	str	r1, [sp, #0]
   becbc:	2001      	movs	r0, #1
   becbe:	218c      	movs	r1, #140	; 0x8c
   becc0:	f7fd fa0c 	bl	bc0dc <system_reset>
}
   becc4:	b003      	add	sp, #12
   becc6:	f85d fb04 	ldr.w	pc, [sp], #4

000becca <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   becca:	4601      	mov	r1, r0
    reset(0, flags);
   beccc:	2000      	movs	r0, #0
   becce:	f7ff bff0 	b.w	becb2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000becd2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   becd2:	2000      	movs	r0, #0
   becd4:	f7ff bff9 	b.w	becca <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000becd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   becd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   becda:	4d2b      	ldr	r5, [pc, #172]	; (bed88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   becdc:	7d0b      	ldrb	r3, [r1, #20]
   becde:	4604      	mov	r4, r0
   bece0:	b08b      	sub	sp, #44	; 0x2c
   bece2:	4608      	mov	r0, r1
   bece4:	1daf      	adds	r7, r5, #6
   bece6:	2b00      	cmp	r3, #0
   bece8:	d036      	beq.n	bed58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   becea:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   becec:	791b      	ldrb	r3, [r3, #4]
   becee:	2b00      	cmp	r3, #0
   becf0:	d032      	beq.n	bed58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   becf2:	4b26      	ldr	r3, [pc, #152]	; (bed8c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   becf4:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   becf6:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   becf8:	a902      	add	r1, sp, #8
   becfa:	3004      	adds	r0, #4
   becfc:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bed00:	f7fd f9e2 	bl	bc0c8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bed04:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bed08:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bed0c:	b200      	sxth	r0, r0
   bed0e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bed12:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bed16:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bed18:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bed1a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bed1c:	4628      	mov	r0, r5
   bed1e:	f7ff ffa2 	bl	bec66 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bed22:	a802      	add	r0, sp, #8
   bed24:	f7ff ff96 	bl	bec54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bed28:	2300      	movs	r3, #0
   bed2a:	6023      	str	r3, [r4, #0]
   bed2c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bed2e:	71a3      	strb	r3, [r4, #6]
   bed30:	8123      	strh	r3, [r4, #8]
   bed32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bed36:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bed38:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bed3c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bed3e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bed42:	f8c4 3006 	str.w	r3, [r4, #6]
   bed46:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bed48:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bed4a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bed4c:	4620      	mov	r0, r4
   bed4e:	f7ff ff8a 	bl	bec66 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bed52:	4620      	mov	r0, r4
   bed54:	b00b      	add	sp, #44	; 0x2c
   bed56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bed58:	2600      	movs	r6, #0
   bed5a:	2320      	movs	r3, #32
   bed5c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bed60:	4b0b      	ldr	r3, [pc, #44]	; (bed90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bed62:	9300      	str	r3, [sp, #0]
   bed64:	aa02      	add	r2, sp, #8
   bed66:	4633      	mov	r3, r6
   bed68:	490a      	ldr	r1, [pc, #40]	; (bed94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bed6a:	2032      	movs	r0, #50	; 0x32
   bed6c:	f7fd f91c 	bl	bbfa8 <log_message>
            : wakeupSource_(nullptr),
   bed70:	4b06      	ldr	r3, [pc, #24]	; (bed8c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bed72:	4805      	ldr	r0, [pc, #20]	; (bed88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bed74:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bed76:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bed7a:	a902      	add	r1, sp, #8
   bed7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bed80:	f7ff ff83 	bl	bec8a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bed84:	e7cd      	b.n	bed22 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bed86:	bf00      	nop
   bed88:	2003e69c 	.word	0x2003e69c
   bed8c:	ffff0000 	.word	0xffff0000
   bed90:	000c206f 	.word	0x000c206f
   bed94:	000c2068 	.word	0x000c2068

000bed98 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bed98:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bed9a:	2420      	movs	r4, #32
{
   bed9c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bed9e:	4622      	mov	r2, r4
   beda0:	2100      	movs	r1, #0
   beda2:	4668      	mov	r0, sp
   beda4:	f001 f9ce 	bl	c0144 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   beda8:	2100      	movs	r1, #0
   bedaa:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bedac:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bedb0:	f7fc fea2 	bl	bbaf8 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bedb4:	9801      	ldr	r0, [sp, #4]
   bedb6:	b008      	add	sp, #32
   bedb8:	bd10      	pop	{r4, pc}
	...

000bedbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bedbc:	4b05      	ldr	r3, [pc, #20]	; (bedd4 <_GLOBAL__sub_I_System+0x18>)
   bedbe:	2202      	movs	r2, #2
   bedc0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bedc2:	4b05      	ldr	r3, [pc, #20]	; (bedd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bedc4:	4a05      	ldr	r2, [pc, #20]	; (beddc <_GLOBAL__sub_I_System+0x20>)
   bedc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bedc8:	2000      	movs	r0, #0
   bedca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bedce:	f7fd b91d 	b.w	bc00c <set_system_mode>
   bedd2:	bf00      	nop
   bedd4:	2003e6a8 	.word	0x2003e6a8
   bedd8:	2003e69c 	.word	0x2003e69c
   beddc:	ffff0000 	.word	0xffff0000

000bede0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bede0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bede4:	4a15      	ldr	r2, [pc, #84]	; (bee3c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bede6:	f8df 8060 	ldr.w	r8, [pc, #96]	; bee48 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bedea:	e9d2 6300 	ldrd	r6, r3, [r2]
   bedee:	1980      	adds	r0, r0, r6
   bedf0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bedf4:	4b12      	ldr	r3, [pc, #72]	; (bee40 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bedf6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bedfa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bedfe:	1986      	adds	r6, r0, r6
   bee00:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bee04:	42bb      	cmp	r3, r7
   bee06:	bf08      	it	eq
   bee08:	42b2      	cmpeq	r2, r6
{
   bee0a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bee0c:	d013      	beq.n	bee36 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bee0e:	a903      	add	r1, sp, #12
   bee10:	4668      	mov	r0, sp
   bee12:	e9cd 6700 	strd	r6, r7, [sp]
   bee16:	f7fd fa9b 	bl	bc350 <localtime_r>
	calendar_time.tm_year += 1900;
   bee1a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bee1c:	4d09      	ldr	r5, [pc, #36]	; (bee44 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bee1e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bee22:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bee24:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bee26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bee28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bee2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bee2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bee2e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bee32:	6823      	ldr	r3, [r4, #0]
   bee34:	602b      	str	r3, [r5, #0]
    }
}
   bee36:	b00c      	add	sp, #48	; 0x30
   bee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bee3c:	2003e6e0 	.word	0x2003e6e0
   bee40:	2003e6d8 	.word	0x2003e6d8
   bee44:	2003e6b4 	.word	0x2003e6b4
   bee48:	2003e6e8 	.word	0x2003e6e8

000bee4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bee4c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bee4e:	2000      	movs	r0, #0
   bee50:	f7fd f98e 	bl	bc170 <spark_sync_time_pending>
   bee54:	b128      	cbz	r0, bee62 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bee56:	f7fd f96b 	bl	bc130 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bee5a:	f080 0001 	eor.w	r0, r0, #1
   bee5e:	b2c0      	uxtb	r0, r0
    }
   bee60:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bee62:	2001      	movs	r0, #1
   bee64:	e7fc      	b.n	bee60 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bee68 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bee68:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bee6a:	f7ff ffb9 	bl	bede0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bee6e:	4b01      	ldr	r3, [pc, #4]	; (bee74 <_ZN9TimeClass4hourEx+0xc>)
   bee70:	6898      	ldr	r0, [r3, #8]
   bee72:	bd08      	pop	{r3, pc}
   bee74:	2003e6b4 	.word	0x2003e6b4

000bee78 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bee78:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bee7a:	f7ff ffb1 	bl	bede0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bee7e:	4b01      	ldr	r3, [pc, #4]	; (bee84 <_ZN9TimeClass3dayEx+0xc>)
   bee80:	68d8      	ldr	r0, [r3, #12]
   bee82:	bd08      	pop	{r3, pc}
   bee84:	2003e6b4 	.word	0x2003e6b4

000bee88 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bee88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bee8a:	4602      	mov	r2, r0
   bee8c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bee8e:	4668      	mov	r0, sp
    struct timeval tv = {
   bee90:	2100      	movs	r1, #0
    };
   bee92:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bee96:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bee9a:	f7fc fe75 	bl	bbb88 <hal_rtc_set_time>
   bee9e:	4602      	mov	r2, r0
   beea0:	b910      	cbnz	r0, beea8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   beea2:	4601      	mov	r1, r0
   beea4:	f7fd f8ea 	bl	bc07c <system_notify_time_changed>
    }
}
   beea8:	b005      	add	sp, #20
   beeaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000beeb0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   beeb0:	b530      	push	{r4, r5, lr}
   beeb2:	b093      	sub	sp, #76	; 0x4c
   beeb4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   beeb8:	4b19      	ldr	r3, [pc, #100]	; (bef20 <_ZN9TimeClass7timeStrEx+0x70>)
{
   beeba:	4604      	mov	r4, r0
    t += time_zone_cache;
   beebc:	e9d3 1000 	ldrd	r1, r0, [r3]
   beec0:	9b01      	ldr	r3, [sp, #4]
   beec2:	1852      	adds	r2, r2, r1
   beec4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   beec8:	4816      	ldr	r0, [pc, #88]	; (bef24 <_ZN9TimeClass7timeStrEx+0x74>)
   beeca:	e9d0 1000 	ldrd	r1, r0, [r0]
   beece:	1852      	adds	r2, r2, r1
   beed0:	eb43 0300 	adc.w	r3, r3, r0
   beed4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   beed8:	2224      	movs	r2, #36	; 0x24
   beeda:	eb0d 0002 	add.w	r0, sp, r2
   beede:	2100      	movs	r1, #0
   beee0:	f001 f930 	bl	c0144 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   beee4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   beee6:	a909      	add	r1, sp, #36	; 0x24
   beee8:	4668      	mov	r0, sp
   beeea:	f7fd fa31 	bl	bc350 <localtime_r>
    char ascstr[26] = {};
   beeee:	2216      	movs	r2, #22
   beef0:	4629      	mov	r1, r5
   beef2:	a803      	add	r0, sp, #12
   beef4:	9502      	str	r5, [sp, #8]
   beef6:	f001 f925 	bl	c0144 <memset>
    asctime_r(&calendar_time, ascstr);
   beefa:	a902      	add	r1, sp, #8
   beefc:	a809      	add	r0, sp, #36	; 0x24
   beefe:	f001 f8a7 	bl	c0050 <asctime_r>
    int len = strlen(ascstr);
   bef02:	a802      	add	r0, sp, #8
   bef04:	f001 f9d9 	bl	c02ba <strlen>
    ascstr[len-1] = 0; // remove final newline
   bef08:	ab12      	add	r3, sp, #72	; 0x48
   bef0a:	4418      	add	r0, r3
    return String(ascstr);
   bef0c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bef0e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bef12:	4620      	mov	r0, r4
   bef14:	f7ff fd69 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   bef18:	4620      	mov	r0, r4
   bef1a:	b013      	add	sp, #76	; 0x4c
   bef1c:	bd30      	pop	{r4, r5, pc}
   bef1e:	bf00      	nop
   bef20:	2003e6e0 	.word	0x2003e6e0
   bef24:	2003e6d8 	.word	0x2003e6d8

000bef28 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bef28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bef2c:	b0a4      	sub	sp, #144	; 0x90
   bef2e:	4607      	mov	r7, r0
   bef30:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bef32:	a814      	add	r0, sp, #80	; 0x50
{
   bef34:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bef36:	223f      	movs	r2, #63	; 0x3f
{
   bef38:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bef3a:	f001 f9da 	bl	c02f2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bef3e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bef40:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bef42:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bef46:	f001 f9b8 	bl	c02ba <strlen>
   bef4a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bef4c:	bb4c      	cbnz	r4, befa2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bef4e:	4929      	ldr	r1, [pc, #164]	; (beff4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bef50:	a803      	add	r0, sp, #12
   bef52:	f001 f98c 	bl	c026e <strcpy>
   bef56:	ac14      	add	r4, sp, #80	; 0x50
{
   bef58:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bef5a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bef5e:	45b1      	cmp	r9, r6
   bef60:	d934      	bls.n	befcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bef62:	7823      	ldrb	r3, [r4, #0]
   bef64:	2b25      	cmp	r3, #37	; 0x25
   bef66:	f106 0a01 	add.w	sl, r6, #1
   bef6a:	d117      	bne.n	bef9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bef6c:	7863      	ldrb	r3, [r4, #1]
   bef6e:	2b7a      	cmp	r3, #122	; 0x7a
   bef70:	d114      	bne.n	bef9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bef72:	a803      	add	r0, sp, #12
   bef74:	f001 f9a1 	bl	c02ba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bef78:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bef7a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bef7c:	1830      	adds	r0, r6, r0
   bef7e:	4418      	add	r0, r3
   bef80:	eba9 0206 	sub.w	r2, r9, r6
   bef84:	1ca1      	adds	r1, r4, #2
   bef86:	f001 f8b5 	bl	c00f4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bef8a:	462a      	mov	r2, r5
   bef8c:	a903      	add	r1, sp, #12
   bef8e:	4620      	mov	r0, r4
   bef90:	f001 f8b0 	bl	c00f4 <memcpy>
            len = strlen(format_str);
   bef94:	a814      	add	r0, sp, #80	; 0x50
   bef96:	f001 f990 	bl	c02ba <strlen>
   bef9a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bef9c:	3401      	adds	r4, #1
   bef9e:	4656      	mov	r6, sl
   befa0:	e7db      	b.n	bef5a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   befa2:	233c      	movs	r3, #60	; 0x3c
   befa4:	fb94 f2f3 	sdiv	r2, r4, r3
   befa8:	2a00      	cmp	r2, #0
   befaa:	bfb8      	it	lt
   befac:	4252      	neglt	r2, r2
   befae:	fbb2 f1f3 	udiv	r1, r2, r3
   befb2:	fb03 2211 	mls	r2, r3, r1, r2
   befb6:	9200      	str	r2, [sp, #0]
   befb8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   befbc:	4a0e      	ldr	r2, [pc, #56]	; (beff8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   befbe:	fb94 f3f3 	sdiv	r3, r4, r3
   befc2:	2110      	movs	r1, #16
   befc4:	a803      	add	r0, sp, #12
   befc6:	f7fd f983 	bl	bc2d0 <snprintf>
   befca:	e7c4      	b.n	bef56 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   befcc:	2100      	movs	r1, #0
   befce:	222e      	movs	r2, #46	; 0x2e
   befd0:	a808      	add	r0, sp, #32
   befd2:	9107      	str	r1, [sp, #28]
   befd4:	f001 f8b6 	bl	c0144 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   befd8:	4643      	mov	r3, r8
   befda:	aa14      	add	r2, sp, #80	; 0x50
   befdc:	2132      	movs	r1, #50	; 0x32
   befde:	a807      	add	r0, sp, #28
   befe0:	f7fd f9ae 	bl	bc340 <strftime>
    return String(buf);
   befe4:	a907      	add	r1, sp, #28
   befe6:	4638      	mov	r0, r7
   befe8:	f7ff fcff 	bl	be9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   befec:	4638      	mov	r0, r7
   befee:	b024      	add	sp, #144	; 0x90
   beff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   beff4:	000c170f 	.word	0x000c170f
   beff8:	000c1711 	.word	0x000c1711

000beffc <_ZN9TimeClass6formatExPKc>:
{
   beffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   beffe:	b08d      	sub	sp, #52	; 0x34
   bf000:	e9cd 2300 	strd	r2, r3, [sp]
   bf004:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bf006:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bf008:	b915      	cbnz	r5, bf010 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bf00a:	4b19      	ldr	r3, [pc, #100]	; (bf070 <_ZN9TimeClass6formatExPKc+0x74>)
   bf00c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bf00e:	b12d      	cbz	r5, bf01c <_ZN9TimeClass6formatExPKc+0x20>
   bf010:	4b18      	ldr	r3, [pc, #96]	; (bf074 <_ZN9TimeClass6formatExPKc+0x78>)
   bf012:	4628      	mov	r0, r5
   bf014:	6819      	ldr	r1, [r3, #0]
   bf016:	f001 f920 	bl	c025a <strcmp>
   bf01a:	b938      	cbnz	r0, bf02c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bf01c:	e9dd 2300 	ldrd	r2, r3, [sp]
   bf020:	4620      	mov	r0, r4
   bf022:	f7ff ff45 	bl	beeb0 <_ZN9TimeClass7timeStrEx>
}
   bf026:	4620      	mov	r0, r4
   bf028:	b00d      	add	sp, #52	; 0x34
   bf02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bf02c:	4e12      	ldr	r6, [pc, #72]	; (bf078 <_ZN9TimeClass6formatExPKc+0x7c>)
   bf02e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bf030:	4f12      	ldr	r7, [pc, #72]	; (bf07c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bf032:	e9d6 3200 	ldrd	r3, r2, [r6]
   bf036:	185b      	adds	r3, r3, r1
   bf038:	9901      	ldr	r1, [sp, #4]
   bf03a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bf03e:	e9d7 0100 	ldrd	r0, r1, [r7]
   bf042:	181b      	adds	r3, r3, r0
   bf044:	eb42 0201 	adc.w	r2, r2, r1
   bf048:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bf04c:	2100      	movs	r1, #0
   bf04e:	2224      	movs	r2, #36	; 0x24
   bf050:	a803      	add	r0, sp, #12
   bf052:	f001 f877 	bl	c0144 <memset>
    localtime_r(&t, &calendar_time);
   bf056:	a903      	add	r1, sp, #12
   bf058:	4668      	mov	r0, sp
   bf05a:	f7fd f979 	bl	bc350 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bf05e:	6832      	ldr	r2, [r6, #0]
   bf060:	683b      	ldr	r3, [r7, #0]
   bf062:	a903      	add	r1, sp, #12
   bf064:	4413      	add	r3, r2
   bf066:	4620      	mov	r0, r4
   bf068:	462a      	mov	r2, r5
   bf06a:	f7ff ff5d 	bl	bef28 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bf06e:	e7da      	b.n	bf026 <_ZN9TimeClass6formatExPKc+0x2a>
   bf070:	2003e6b0 	.word	0x2003e6b0
   bf074:	2003db00 	.word	0x2003db00
   bf078:	2003e6e0 	.word	0x2003e6e0
   bf07c:	2003e6d8 	.word	0x2003e6d8

000bf080 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bf080:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bf082:	2000      	movs	r0, #0
   bf084:	f7fc fd68 	bl	bbb58 <hal_rtc_time_is_valid>
    if (rtcstate)
   bf088:	4604      	mov	r4, r0
   bf08a:	b9a0      	cbnz	r0, bf0b6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bf08c:	f7fc ffb6 	bl	bbffc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bf090:	2801      	cmp	r0, #1
   bf092:	d110      	bne.n	bf0b6 <_ZN9TimeClass7isValidEv+0x36>
   bf094:	4620      	mov	r0, r4
   bf096:	f7fc ffe9 	bl	bc06c <system_thread_get_state>
   bf09a:	b960      	cbnz	r0, bf0b6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bf09c:	f7ff fed6 	bl	bee4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bf0a0:	b910      	cbnz	r0, bf0a8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bf0a2:	f7fd f835 	bl	bc110 <spark_process>
        while (_while() && !_condition()) {
   bf0a6:	e7f9      	b.n	bf09c <_ZN9TimeClass7isValidEv+0x1c>
   bf0a8:	f7ff fed0 	bl	bee4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bf0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bf0b0:	2000      	movs	r0, #0
   bf0b2:	f7fc bd51 	b.w	bbb58 <hal_rtc_time_is_valid>
}
   bf0b6:	4620      	mov	r0, r4
   bf0b8:	bd10      	pop	{r4, pc}

000bf0ba <_ZN9TimeClass3nowEv>:
{
   bf0ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bf0bc:	f7ff ffe0 	bl	bf080 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bf0c0:	2210      	movs	r2, #16
   bf0c2:	2100      	movs	r1, #0
   bf0c4:	4668      	mov	r0, sp
   bf0c6:	f001 f83d 	bl	c0144 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bf0ca:	2100      	movs	r1, #0
   bf0cc:	4668      	mov	r0, sp
   bf0ce:	f7fc fd53 	bl	bbb78 <hal_rtc_get_time>
}
   bf0d2:	9800      	ldr	r0, [sp, #0]
   bf0d4:	b005      	add	sp, #20
   bf0d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf0dc <_ZN9TimeClass4hourEv>:
{
   bf0dc:	b508      	push	{r3, lr}
	return hour(now());
   bf0de:	f7ff ffec 	bl	bf0ba <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf0e2:	17c1      	asrs	r1, r0, #31
   bf0e4:	f7ff fe7c 	bl	bede0 <_ZL22Refresh_UnixTime_Cachex>
}
   bf0e8:	4b01      	ldr	r3, [pc, #4]	; (bf0f0 <_ZN9TimeClass4hourEv+0x14>)
   bf0ea:	6898      	ldr	r0, [r3, #8]
   bf0ec:	bd08      	pop	{r3, pc}
   bf0ee:	bf00      	nop
   bf0f0:	2003e6b4 	.word	0x2003e6b4

000bf0f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bf0f4:	4b02      	ldr	r3, [pc, #8]	; (bf100 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bf0f6:	681a      	ldr	r2, [r3, #0]
   bf0f8:	4b02      	ldr	r3, [pc, #8]	; (bf104 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bf0fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bf0fc:	4770      	bx	lr
   bf0fe:	bf00      	nop
   bf100:	2003db00 	.word	0x2003db00
   bf104:	2003e6b0 	.word	0x2003e6b0

000bf108 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bf108:	4770      	bx	lr

000bf10a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf10a:	7441      	strb	r1, [r0, #17]
}
   bf10c:	4770      	bx	lr

000bf10e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bf10e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bf110:	7c00      	ldrb	r0, [r0, #16]
   bf112:	f7fc fee1 	bl	bbed8 <hal_usart_available_data_for_write>
}
   bf116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf11a:	bd08      	pop	{r3, pc}

000bf11c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bf11c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bf11e:	7c00      	ldrb	r0, [r0, #16]
   bf120:	f7fc feb2 	bl	bbe88 <hal_usart_available>
}
   bf124:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf128:	bd08      	pop	{r3, pc}

000bf12a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bf12a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bf12c:	7c00      	ldrb	r0, [r0, #16]
   bf12e:	f7fc febb 	bl	bbea8 <hal_usart_peek>
}
   bf132:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf136:	bd08      	pop	{r3, pc}

000bf138 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bf138:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bf13a:	7c00      	ldrb	r0, [r0, #16]
   bf13c:	f7fc feac 	bl	bbe98 <hal_usart_read>
}
   bf140:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf144:	bd08      	pop	{r3, pc}

000bf146 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bf146:	7c00      	ldrb	r0, [r0, #16]
   bf148:	f7fc beb6 	b.w	bbeb8 <hal_usart_flush>

000bf14c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bf14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf14e:	7c45      	ldrb	r5, [r0, #17]
{
   bf150:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf152:	b12d      	cbz	r5, bf160 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bf154:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bf156:	b003      	add	sp, #12
   bf158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bf15c:	f7fc be8c 	b.w	bbe78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bf160:	7c00      	ldrb	r0, [r0, #16]
   bf162:	9101      	str	r1, [sp, #4]
   bf164:	f7fc feb8 	bl	bbed8 <hal_usart_available_data_for_write>
   bf168:	2800      	cmp	r0, #0
   bf16a:	9901      	ldr	r1, [sp, #4]
   bf16c:	dcf2      	bgt.n	bf154 <_ZN11USARTSerial5writeEh+0x8>
}
   bf16e:	4628      	mov	r0, r5
   bf170:	b003      	add	sp, #12
   bf172:	bd30      	pop	{r4, r5, pc}

000bf174 <_ZN11USARTSerialD0Ev>:
   bf174:	b510      	push	{r4, lr}
   bf176:	2114      	movs	r1, #20
   bf178:	4604      	mov	r4, r0
   bf17a:	f7f4 ff90 	bl	b409e <_ZdlPvj>
   bf17e:	4620      	mov	r0, r4
   bf180:	bd10      	pop	{r4, pc}
	...

000bf184 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bf184:	b510      	push	{r4, lr}
   bf186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf18a:	4604      	mov	r4, r0
   bf18c:	4608      	mov	r0, r1
   bf18e:	4611      	mov	r1, r2
   bf190:	2200      	movs	r2, #0
   bf192:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bf196:	4b04      	ldr	r3, [pc, #16]	; (bf1a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bf198:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf19a:	2301      	movs	r3, #1
  _serial = serial;
   bf19c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf19e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bf1a0:	f7fc feaa 	bl	bbef8 <hal_usart_init_ex>
}
   bf1a4:	4620      	mov	r0, r4
   bf1a6:	bd10      	pop	{r4, pc}
   bf1a8:	000c20bc 	.word	0x000c20bc

000bf1ac <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bf1ac:	7c00      	ldrb	r0, [r0, #16]
   bf1ae:	2300      	movs	r3, #0
   bf1b0:	f7fc be9a 	b.w	bbee8 <hal_usart_begin_config>

000bf1b4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bf1b4:	2200      	movs	r2, #0
   bf1b6:	f7ff bff9 	b.w	bf1ac <_ZN11USARTSerial5beginEmm>

000bf1ba <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bf1ba:	7c00      	ldrb	r0, [r0, #16]
   bf1bc:	f7fc be54 	b.w	bbe68 <hal_usart_end>

000bf1c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bf1c0:	7441      	strb	r1, [r0, #17]
}
   bf1c2:	4770      	bx	lr

000bf1c4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf1c4:	4770      	bx	lr

000bf1c6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bf1c6:	4770      	bx	lr

000bf1c8 <_ZN9USBSerial4readEv>:
{
   bf1c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bf1ca:	2100      	movs	r1, #0
   bf1cc:	7c00      	ldrb	r0, [r0, #16]
   bf1ce:	f7fc fec3 	bl	bbf58 <HAL_USB_USART_Receive_Data>
}
   bf1d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf1d6:	bd08      	pop	{r3, pc}

000bf1d8 <_ZN9USBSerial4peekEv>:
{
   bf1d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bf1da:	2101      	movs	r1, #1
   bf1dc:	7c00      	ldrb	r0, [r0, #16]
   bf1de:	f7fc febb 	bl	bbf58 <HAL_USB_USART_Receive_Data>
}
   bf1e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bf1e6:	bd08      	pop	{r3, pc}

000bf1e8 <_ZN9USBSerial17availableForWriteEv>:
{
   bf1e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bf1ea:	7c00      	ldrb	r0, [r0, #16]
   bf1ec:	f7fc feac 	bl	bbf48 <HAL_USB_USART_Available_Data_For_Write>
}
   bf1f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf1f4:	bd08      	pop	{r3, pc}

000bf1f6 <_ZN9USBSerial9availableEv>:
{
   bf1f6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bf1f8:	7c00      	ldrb	r0, [r0, #16]
   bf1fa:	f7fc fe9d 	bl	bbf38 <HAL_USB_USART_Available_Data>
}
   bf1fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bf202:	bd08      	pop	{r3, pc}

000bf204 <_ZN9USBSerial5writeEh>:
{
   bf204:	b513      	push	{r0, r1, r4, lr}
   bf206:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf208:	7c00      	ldrb	r0, [r0, #16]
{
   bf20a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bf20c:	f7fc fe9c 	bl	bbf48 <HAL_USB_USART_Available_Data_For_Write>
   bf210:	2800      	cmp	r0, #0
   bf212:	9901      	ldr	r1, [sp, #4]
   bf214:	dc01      	bgt.n	bf21a <_ZN9USBSerial5writeEh+0x16>
   bf216:	7c60      	ldrb	r0, [r4, #17]
   bf218:	b120      	cbz	r0, bf224 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bf21a:	7c20      	ldrb	r0, [r4, #16]
   bf21c:	f7fc fea4 	bl	bbf68 <HAL_USB_USART_Send_Data>
   bf220:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bf224:	b002      	add	sp, #8
   bf226:	bd10      	pop	{r4, pc}

000bf228 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bf228:	7c00      	ldrb	r0, [r0, #16]
   bf22a:	f7fc bea5 	b.w	bbf78 <HAL_USB_USART_Flush_Data>

000bf22e <_ZN9USBSerialD0Ev>:
   bf22e:	b510      	push	{r4, lr}
   bf230:	2114      	movs	r1, #20
   bf232:	4604      	mov	r4, r0
   bf234:	f7f4 ff33 	bl	b409e <_ZdlPvj>
   bf238:	4620      	mov	r0, r4
   bf23a:	bd10      	pop	{r4, pc}

000bf23c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bf23c:	b510      	push	{r4, lr}
   bf23e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf242:	4604      	mov	r4, r0
   bf244:	4608      	mov	r0, r1
   bf246:	2100      	movs	r1, #0
   bf248:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf24c:	4b04      	ldr	r3, [pc, #16]	; (bf260 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bf24e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bf250:	2301      	movs	r3, #1
  _serial = serial;
   bf252:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bf254:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bf256:	4611      	mov	r1, r2
   bf258:	f7fc fe56 	bl	bbf08 <HAL_USB_USART_Init>
}
   bf25c:	4620      	mov	r0, r4
   bf25e:	bd10      	pop	{r4, pc}
   bf260:	000c20ec 	.word	0x000c20ec

000bf264 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bf264:	7c00      	ldrb	r0, [r0, #16]
   bf266:	2200      	movs	r2, #0
   bf268:	f7fc be56 	b.w	bbf18 <HAL_USB_USART_Begin>

000bf26c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bf26c:	7c00      	ldrb	r0, [r0, #16]
   bf26e:	f7fc be5b 	b.w	bbf28 <HAL_USB_USART_End>

000bf272 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bf272:	7c00      	ldrb	r0, [r0, #16]
   bf274:	f7fc be88 	b.w	bbf88 <HAL_USB_USART_Is_Connected>

000bf278 <_Z19acquireSerialBufferv>:
{
   bf278:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bf27a:	2214      	movs	r2, #20
{
   bf27c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bf27e:	2100      	movs	r1, #0
   bf280:	f000 ff60 	bl	c0144 <memset>
}
   bf284:	4620      	mov	r0, r4
   bf286:	bd10      	pop	{r4, pc}

000bf288 <_Z16_fetch_usbserialv>:
{
   bf288:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf28a:	4c0f      	ldr	r4, [pc, #60]	; (bf2c8 <_Z16_fetch_usbserialv+0x40>)
{
   bf28c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bf28e:	a803      	add	r0, sp, #12
   bf290:	f7ff fff2 	bl	bf278 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bf294:	7821      	ldrb	r1, [r4, #0]
   bf296:	f3bf 8f5b 	dmb	ish
   bf29a:	f011 0101 	ands.w	r1, r1, #1
   bf29e:	d10f      	bne.n	bf2c0 <_Z16_fetch_usbserialv+0x38>
   bf2a0:	4620      	mov	r0, r4
   bf2a2:	9101      	str	r1, [sp, #4]
   bf2a4:	f7f4 ff0a 	bl	b40bc <__cxa_guard_acquire>
   bf2a8:	9901      	ldr	r1, [sp, #4]
   bf2aa:	b148      	cbz	r0, bf2c0 <_Z16_fetch_usbserialv+0x38>
   bf2ac:	aa03      	add	r2, sp, #12
   bf2ae:	4807      	ldr	r0, [pc, #28]	; (bf2cc <_Z16_fetch_usbserialv+0x44>)
   bf2b0:	f7ff ffc4 	bl	bf23c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bf2b4:	4620      	mov	r0, r4
   bf2b6:	f7f4 ff06 	bl	b40c6 <__cxa_guard_release>
   bf2ba:	4805      	ldr	r0, [pc, #20]	; (bf2d0 <_Z16_fetch_usbserialv+0x48>)
   bf2bc:	f000 feee 	bl	c009c <atexit>
	return _usbserial;
}
   bf2c0:	4802      	ldr	r0, [pc, #8]	; (bf2cc <_Z16_fetch_usbserialv+0x44>)
   bf2c2:	b008      	add	sp, #32
   bf2c4:	bd10      	pop	{r4, pc}
   bf2c6:	bf00      	nop
   bf2c8:	2003e6f0 	.word	0x2003e6f0
   bf2cc:	2003e6f4 	.word	0x2003e6f4
   bf2d0:	000bf1c5 	.word	0x000bf1c5

000bf2d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bf2d4:	4b01      	ldr	r3, [pc, #4]	; (bf2dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bf2d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bf2d8:	4770      	bx	lr
   bf2da:	bf00      	nop
   bf2dc:	2003db04 	.word	0x2003db04

000bf2e0 <serialEventRun>:
{
   bf2e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bf2e2:	4b0b      	ldr	r3, [pc, #44]	; (bf310 <serialEventRun+0x30>)
   bf2e4:	b143      	cbz	r3, bf2f8 <serialEventRun+0x18>
   bf2e6:	f7ff ffcf 	bl	bf288 <_Z16_fetch_usbserialv>
   bf2ea:	6803      	ldr	r3, [r0, #0]
   bf2ec:	691b      	ldr	r3, [r3, #16]
   bf2ee:	4798      	blx	r3
   bf2f0:	2800      	cmp	r0, #0
   bf2f2:	dd01      	ble.n	bf2f8 <serialEventRun+0x18>
        serialEvent();
   bf2f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bf2f8:	4b06      	ldr	r3, [pc, #24]	; (bf314 <serialEventRun+0x34>)
   bf2fa:	b143      	cbz	r3, bf30e <serialEventRun+0x2e>
   bf2fc:	f000 f9c2 	bl	bf684 <_Z22__fetch_global_Serial1v>
   bf300:	6803      	ldr	r3, [r0, #0]
   bf302:	691b      	ldr	r3, [r3, #16]
   bf304:	4798      	blx	r3
   bf306:	2800      	cmp	r0, #0
   bf308:	dd01      	ble.n	bf30e <serialEventRun+0x2e>
        serialEvent1();
   bf30a:	f3af 8000 	nop.w
}
   bf30e:	bd08      	pop	{r3, pc}
	...

000bf318 <_post_loop>:
{
   bf318:	b508      	push	{r3, lr}
	serialEventRun();
   bf31a:	f7ff ffe1 	bl	bf2e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bf31e:	f7fc fc13 	bl	bbb48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bf322:	4b01      	ldr	r3, [pc, #4]	; (bf328 <_post_loop+0x10>)
   bf324:	6018      	str	r0, [r3, #0]
}
   bf326:	bd08      	pop	{r3, pc}
   bf328:	2003e710 	.word	0x2003e710

000bf32c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf32c:	4805      	ldr	r0, [pc, #20]	; (bf344 <_Z33system_initialize_user_backup_ramv+0x18>)
   bf32e:	4a06      	ldr	r2, [pc, #24]	; (bf348 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bf330:	4906      	ldr	r1, [pc, #24]	; (bf34c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bf332:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf334:	1a12      	subs	r2, r2, r0
   bf336:	f000 fedd 	bl	c00f4 <memcpy>
    __backup_sram_signature = signature;
   bf33a:	4b05      	ldr	r3, [pc, #20]	; (bf350 <_Z33system_initialize_user_backup_ramv+0x24>)
   bf33c:	4a05      	ldr	r2, [pc, #20]	; (bf354 <_Z33system_initialize_user_backup_ramv+0x28>)
   bf33e:	601a      	str	r2, [r3, #0]
}
   bf340:	bd08      	pop	{r3, pc}
   bf342:	bf00      	nop
   bf344:	2003f400 	.word	0x2003f400
   bf348:	2003f404 	.word	0x2003f404
   bf34c:	000c23a4 	.word	0x000c23a4
   bf350:	2003f400 	.word	0x2003f400
   bf354:	9a271c1e 	.word	0x9a271c1e

000bf358 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bf358:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf35a:	2300      	movs	r3, #0
   bf35c:	9300      	str	r3, [sp, #0]
   bf35e:	461a      	mov	r2, r3
   bf360:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf364:	f7fc fe9c 	bl	bc0a0 <system_ctrl_set_result>
}
   bf368:	b003      	add	sp, #12
   bf36a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf370 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bf370:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bf372:	8843      	ldrh	r3, [r0, #2]
   bf374:	2b0a      	cmp	r3, #10
   bf376:	d008      	beq.n	bf38a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bf378:	2b50      	cmp	r3, #80	; 0x50
   bf37a:	d10b      	bne.n	bf394 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bf37c:	4b09      	ldr	r3, [pc, #36]	; (bf3a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bf37e:	681b      	ldr	r3, [r3, #0]
   bf380:	b14b      	cbz	r3, bf396 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bf382:	b003      	add	sp, #12
   bf384:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bf388:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bf38a:	f7ff ffe5 	bl	bf358 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bf38e:	b003      	add	sp, #12
   bf390:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf394:	2300      	movs	r3, #0
   bf396:	9300      	str	r3, [sp, #0]
   bf398:	461a      	mov	r2, r3
   bf39a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf39e:	f7fc fe7f 	bl	bc0a0 <system_ctrl_set_result>
}
   bf3a2:	e7f4      	b.n	bf38e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bf3a4:	2003e70c 	.word	0x2003e70c

000bf3a8 <module_user_init_hook>:
{
   bf3a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bf3aa:	4812      	ldr	r0, [pc, #72]	; (bf3f4 <module_user_init_hook+0x4c>)
   bf3ac:	2100      	movs	r1, #0
   bf3ae:	f7fc ffbf 	bl	bc330 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bf3b2:	4b11      	ldr	r3, [pc, #68]	; (bf3f8 <module_user_init_hook+0x50>)
   bf3b4:	681a      	ldr	r2, [r3, #0]
   bf3b6:	4b11      	ldr	r3, [pc, #68]	; (bf3fc <module_user_init_hook+0x54>)
   bf3b8:	429a      	cmp	r2, r3
   bf3ba:	4b11      	ldr	r3, [pc, #68]	; (bf400 <module_user_init_hook+0x58>)
   bf3bc:	bf0c      	ite	eq
   bf3be:	2201      	moveq	r2, #1
   bf3c0:	2200      	movne	r2, #0
   bf3c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bf3c4:	d001      	beq.n	bf3ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bf3c6:	f7ff ffb1 	bl	bf32c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bf3ca:	f7fc fba5 	bl	bbb18 <HAL_RNG_GetRandomNumber>
   bf3ce:	4604      	mov	r4, r0
    srand(seed);
   bf3d0:	f000 fec0 	bl	c0154 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bf3d4:	4b0b      	ldr	r3, [pc, #44]	; (bf404 <module_user_init_hook+0x5c>)
   bf3d6:	b113      	cbz	r3, bf3de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bf3d8:	4620      	mov	r0, r4
   bf3da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bf3de:	2100      	movs	r1, #0
   bf3e0:	4808      	ldr	r0, [pc, #32]	; (bf404 <module_user_init_hook+0x5c>)
   bf3e2:	f7fc fedd 	bl	bc1a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bf3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bf3ea:	4807      	ldr	r0, [pc, #28]	; (bf408 <module_user_init_hook+0x60>)
   bf3ec:	2100      	movs	r1, #0
   bf3ee:	f7fc be4d 	b.w	bc08c <system_ctrl_set_app_request_handler>
   bf3f2:	bf00      	nop
   bf3f4:	000bf2d5 	.word	0x000bf2d5
   bf3f8:	2003f400 	.word	0x2003f400
   bf3fc:	9a271c1e 	.word	0x9a271c1e
   bf400:	2003e708 	.word	0x2003e708
   bf404:	00000000 	.word	0x00000000
   bf408:	000bf371 	.word	0x000bf371

000bf40c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bf40c:	b508      	push	{r3, lr}
   bf40e:	4b02      	ldr	r3, [pc, #8]	; (bf418 <spark_protocol_instance+0xc>)
   bf410:	681b      	ldr	r3, [r3, #0]
   bf412:	681b      	ldr	r3, [r3, #0]
   bf414:	9301      	str	r3, [sp, #4]
   bf416:	bd08      	pop	{r3, pc}
   bf418:	0003025c 	.word	0x0003025c

000bf41c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bf41c:	b508      	push	{r3, lr}
   bf41e:	4b02      	ldr	r3, [pc, #8]	; (bf428 <spark_protocol_set_product_id+0xc>)
   bf420:	681b      	ldr	r3, [r3, #0]
   bf422:	685b      	ldr	r3, [r3, #4]
   bf424:	9301      	str	r3, [sp, #4]
   bf426:	bd08      	pop	{r3, pc}
   bf428:	0003025c 	.word	0x0003025c

000bf42c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bf42c:	b508      	push	{r3, lr}
   bf42e:	4b02      	ldr	r3, [pc, #8]	; (bf438 <spark_protocol_set_product_firmware_version+0xc>)
   bf430:	681b      	ldr	r3, [r3, #0]
   bf432:	689b      	ldr	r3, [r3, #8]
   bf434:	9301      	str	r3, [sp, #4]
   bf436:	bd08      	pop	{r3, pc}
   bf438:	0003025c 	.word	0x0003025c

000bf43c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bf43c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bf43e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bf440:	d902      	bls.n	bf448 <pinAvailable+0xc>
    return false;
   bf442:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bf444:	b002      	add	sp, #8
   bf446:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bf448:	f1a0 030b 	sub.w	r3, r0, #11
   bf44c:	2b02      	cmp	r3, #2
   bf44e:	d81a      	bhi.n	bf486 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bf450:	4c17      	ldr	r4, [pc, #92]	; (bf4b0 <pinAvailable+0x74>)
   bf452:	7821      	ldrb	r1, [r4, #0]
   bf454:	f3bf 8f5b 	dmb	ish
   bf458:	f011 0101 	ands.w	r1, r1, #1
   bf45c:	d10b      	bne.n	bf476 <pinAvailable+0x3a>
   bf45e:	4620      	mov	r0, r4
   bf460:	9101      	str	r1, [sp, #4]
   bf462:	f7f4 fe2b 	bl	b40bc <__cxa_guard_acquire>
   bf466:	9901      	ldr	r1, [sp, #4]
   bf468:	b128      	cbz	r0, bf476 <pinAvailable+0x3a>
   bf46a:	4812      	ldr	r0, [pc, #72]	; (bf4b4 <pinAvailable+0x78>)
   bf46c:	f7ff f9b2 	bl	be7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bf470:	4620      	mov	r0, r4
   bf472:	f7f4 fe28 	bl	b40c6 <__cxa_guard_release>
   bf476:	4b0f      	ldr	r3, [pc, #60]	; (bf4b4 <pinAvailable+0x78>)
   bf478:	7818      	ldrb	r0, [r3, #0]
   bf47a:	f7fc fc6d 	bl	bbd58 <hal_spi_is_enabled>
   bf47e:	2800      	cmp	r0, #0
   bf480:	d1df      	bne.n	bf442 <pinAvailable+0x6>
  return true; // 'pin' is available
   bf482:	2001      	movs	r0, #1
   bf484:	e7de      	b.n	bf444 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bf486:	2801      	cmp	r0, #1
   bf488:	d809      	bhi.n	bf49e <pinAvailable+0x62>
   bf48a:	f000 f897 	bl	bf5bc <_Z19__fetch_global_Wirev>
   bf48e:	2100      	movs	r1, #0
   bf490:	7c00      	ldrb	r0, [r0, #16]
   bf492:	f7fc fc01 	bl	bbc98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bf496:	f080 0001 	eor.w	r0, r0, #1
   bf49a:	b2c0      	uxtb	r0, r0
   bf49c:	e7d2      	b.n	bf444 <pinAvailable+0x8>
   bf49e:	3809      	subs	r0, #9
   bf4a0:	2801      	cmp	r0, #1
   bf4a2:	d8ee      	bhi.n	bf482 <pinAvailable+0x46>
   bf4a4:	f000 f8ee 	bl	bf684 <_Z22__fetch_global_Serial1v>
   bf4a8:	7c00      	ldrb	r0, [r0, #16]
   bf4aa:	f7fc fd0d 	bl	bbec8 <hal_usart_is_enabled>
   bf4ae:	e7f2      	b.n	bf496 <pinAvailable+0x5a>
   bf4b0:	2003e450 	.word	0x2003e450
   bf4b4:	2003e454 	.word	0x2003e454

000bf4b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf4b8:	2823      	cmp	r0, #35	; 0x23
{
   bf4ba:	b538      	push	{r3, r4, r5, lr}
   bf4bc:	4604      	mov	r4, r0
   bf4be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bf4c0:	d80a      	bhi.n	bf4d8 <pinMode+0x20>
   bf4c2:	29ff      	cmp	r1, #255	; 0xff
   bf4c4:	d008      	beq.n	bf4d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bf4c6:	f7ff ffb9 	bl	bf43c <pinAvailable>
   bf4ca:	b128      	cbz	r0, bf4d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bf4cc:	4629      	mov	r1, r5
   bf4ce:	4620      	mov	r0, r4
}
   bf4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bf4d4:	f7fc bb68 	b.w	bbba8 <HAL_Pin_Mode>
}
   bf4d8:	bd38      	pop	{r3, r4, r5, pc}

000bf4da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bf4da:	b538      	push	{r3, r4, r5, lr}
   bf4dc:	4604      	mov	r4, r0
   bf4de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf4e0:	f7fc fb6a 	bl	bbbb8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bf4e4:	28ff      	cmp	r0, #255	; 0xff
   bf4e6:	d010      	beq.n	bf50a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bf4e8:	2806      	cmp	r0, #6
   bf4ea:	d804      	bhi.n	bf4f6 <digitalWrite+0x1c>
   bf4ec:	234d      	movs	r3, #77	; 0x4d
   bf4ee:	fa23 f000 	lsr.w	r0, r3, r0
   bf4f2:	07c3      	lsls	r3, r0, #31
   bf4f4:	d409      	bmi.n	bf50a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bf4f6:	4620      	mov	r0, r4
   bf4f8:	f7ff ffa0 	bl	bf43c <pinAvailable>
   bf4fc:	b128      	cbz	r0, bf50a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bf4fe:	4629      	mov	r1, r5
   bf500:	4620      	mov	r0, r4
}
   bf502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bf506:	f7fc bb5f 	b.w	bbbc8 <HAL_GPIO_Write>
}
   bf50a:	bd38      	pop	{r3, r4, r5, pc}

000bf50c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bf50c:	b510      	push	{r4, lr}
   bf50e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bf510:	f7fc fb52 	bl	bbbb8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bf514:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bf516:	b2db      	uxtb	r3, r3
   bf518:	2b01      	cmp	r3, #1
   bf51a:	d908      	bls.n	bf52e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bf51c:	4620      	mov	r0, r4
   bf51e:	f7ff ff8d 	bl	bf43c <pinAvailable>
   bf522:	b120      	cbz	r0, bf52e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bf524:	4620      	mov	r0, r4
}
   bf526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bf52a:	f7fc bb55 	b.w	bbbd8 <HAL_GPIO_Read>
}
   bf52e:	2000      	movs	r0, #0
   bf530:	bd10      	pop	{r4, pc}

000bf532 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bf532:	280d      	cmp	r0, #13
{
   bf534:	b510      	push	{r4, lr}
   bf536:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bf538:	bf9c      	itt	ls
   bf53a:	340e      	addls	r4, #14
   bf53c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bf53e:	4620      	mov	r0, r4
   bf540:	f7ff ff7c 	bl	bf43c <pinAvailable>
   bf544:	b150      	cbz	r0, bf55c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bf546:	2103      	movs	r1, #3
   bf548:	4620      	mov	r0, r4
   bf54a:	f7fc fb25 	bl	bbb98 <HAL_Validate_Pin_Function>
   bf54e:	2803      	cmp	r0, #3
   bf550:	d104      	bne.n	bf55c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bf552:	4620      	mov	r0, r4
}
   bf554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bf558:	f7fc bb56 	b.w	bbc08 <hal_adc_read>
}
   bf55c:	2000      	movs	r0, #0
   bf55e:	bd10      	pop	{r4, pc}

000bf560 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf560:	4770      	bx	lr

000bf562 <__tcf_1>:
   bf562:	4770      	bx	lr

000bf564 <_Z17acquireWireBufferv>:
{
   bf564:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bf566:	2520      	movs	r5, #32
   bf568:	2314      	movs	r3, #20
{
   bf56a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bf56c:	6003      	str	r3, [r0, #0]
   bf56e:	6085      	str	r5, [r0, #8]
   bf570:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bf572:	4906      	ldr	r1, [pc, #24]	; (bf58c <_Z17acquireWireBufferv+0x28>)
   bf574:	4628      	mov	r0, r5
   bf576:	f000 f8ab 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bf57a:	4904      	ldr	r1, [pc, #16]	; (bf58c <_Z17acquireWireBufferv+0x28>)
	};
   bf57c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bf57e:	4628      	mov	r0, r5
   bf580:	f000 f8a6 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
	};
   bf584:	60e0      	str	r0, [r4, #12]
}
   bf586:	4620      	mov	r0, r4
   bf588:	bd38      	pop	{r3, r4, r5, pc}
   bf58a:	bf00      	nop
   bf58c:	000c2114 	.word	0x000c2114

000bf590 <_Z18acquireWire1Bufferv>:
   bf590:	b538      	push	{r3, r4, r5, lr}
   bf592:	2520      	movs	r5, #32
   bf594:	2314      	movs	r3, #20
   bf596:	4604      	mov	r4, r0
   bf598:	6003      	str	r3, [r0, #0]
   bf59a:	6085      	str	r5, [r0, #8]
   bf59c:	6105      	str	r5, [r0, #16]
   bf59e:	4906      	ldr	r1, [pc, #24]	; (bf5b8 <_Z18acquireWire1Bufferv+0x28>)
   bf5a0:	4628      	mov	r0, r5
   bf5a2:	f000 f895 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
   bf5a6:	4904      	ldr	r1, [pc, #16]	; (bf5b8 <_Z18acquireWire1Bufferv+0x28>)
   bf5a8:	6060      	str	r0, [r4, #4]
   bf5aa:	4628      	mov	r0, r5
   bf5ac:	f000 f890 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
   bf5b0:	60e0      	str	r0, [r4, #12]
   bf5b2:	4620      	mov	r0, r4
   bf5b4:	bd38      	pop	{r3, r4, r5, pc}
   bf5b6:	bf00      	nop
   bf5b8:	000c2114 	.word	0x000c2114

000bf5bc <_Z19__fetch_global_Wirev>:
{
   bf5bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf5be:	4d0e      	ldr	r5, [pc, #56]	; (bf5f8 <_Z19__fetch_global_Wirev+0x3c>)
   bf5c0:	7829      	ldrb	r1, [r5, #0]
   bf5c2:	f3bf 8f5b 	dmb	ish
   bf5c6:	f011 0401 	ands.w	r4, r1, #1
{
   bf5ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bf5cc:	d111      	bne.n	bf5f2 <_Z19__fetch_global_Wirev+0x36>
   bf5ce:	4628      	mov	r0, r5
   bf5d0:	f7f4 fd74 	bl	b40bc <__cxa_guard_acquire>
   bf5d4:	b168      	cbz	r0, bf5f2 <_Z19__fetch_global_Wirev+0x36>
   bf5d6:	a801      	add	r0, sp, #4
   bf5d8:	f7ff ffc4 	bl	bf564 <_Z17acquireWireBufferv>
   bf5dc:	aa01      	add	r2, sp, #4
   bf5de:	4621      	mov	r1, r4
   bf5e0:	4806      	ldr	r0, [pc, #24]	; (bf5fc <_Z19__fetch_global_Wirev+0x40>)
   bf5e2:	f7fd fbcb 	bl	bcd7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf5e6:	4628      	mov	r0, r5
   bf5e8:	f7f4 fd6d 	bl	b40c6 <__cxa_guard_release>
   bf5ec:	4804      	ldr	r0, [pc, #16]	; (bf600 <_Z19__fetch_global_Wirev+0x44>)
   bf5ee:	f000 fd55 	bl	c009c <atexit>
	return wire;
}
   bf5f2:	4802      	ldr	r0, [pc, #8]	; (bf5fc <_Z19__fetch_global_Wirev+0x40>)
   bf5f4:	b007      	add	sp, #28
   bf5f6:	bd30      	pop	{r4, r5, pc}
   bf5f8:	2003e714 	.word	0x2003e714
   bf5fc:	2003e71c 	.word	0x2003e71c
   bf600:	000bf561 	.word	0x000bf561

000bf604 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bf604:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf606:	4c0e      	ldr	r4, [pc, #56]	; (bf640 <_Z20__fetch_global_Wire1v+0x3c>)
   bf608:	7823      	ldrb	r3, [r4, #0]
   bf60a:	f3bf 8f5b 	dmb	ish
   bf60e:	07db      	lsls	r3, r3, #31
{
   bf610:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bf612:	d411      	bmi.n	bf638 <_Z20__fetch_global_Wire1v+0x34>
   bf614:	4620      	mov	r0, r4
   bf616:	f7f4 fd51 	bl	b40bc <__cxa_guard_acquire>
   bf61a:	b168      	cbz	r0, bf638 <_Z20__fetch_global_Wire1v+0x34>
   bf61c:	a801      	add	r0, sp, #4
   bf61e:	f7ff ffb7 	bl	bf590 <_Z18acquireWire1Bufferv>
   bf622:	aa01      	add	r2, sp, #4
   bf624:	2101      	movs	r1, #1
   bf626:	4807      	ldr	r0, [pc, #28]	; (bf644 <_Z20__fetch_global_Wire1v+0x40>)
   bf628:	f7fd fba8 	bl	bcd7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bf62c:	4620      	mov	r0, r4
   bf62e:	f7f4 fd4a 	bl	b40c6 <__cxa_guard_release>
   bf632:	4805      	ldr	r0, [pc, #20]	; (bf648 <_Z20__fetch_global_Wire1v+0x44>)
   bf634:	f000 fd32 	bl	c009c <atexit>
	return wire;
}
   bf638:	4802      	ldr	r0, [pc, #8]	; (bf644 <_Z20__fetch_global_Wire1v+0x40>)
   bf63a:	b006      	add	sp, #24
   bf63c:	bd10      	pop	{r4, pc}
   bf63e:	bf00      	nop
   bf640:	2003e718 	.word	0x2003e718
   bf644:	2003e730 	.word	0x2003e730
   bf648:	000bf563 	.word	0x000bf563

000bf64c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf64c:	4770      	bx	lr
	...

000bf650 <_Z20acquireSerial1Bufferv>:
{
   bf650:	b538      	push	{r3, r4, r5, lr}
   bf652:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bf654:	2514      	movs	r5, #20
   bf656:	462a      	mov	r2, r5
   bf658:	2100      	movs	r1, #0
   bf65a:	f000 fd73 	bl	c0144 <memset>
   bf65e:	8025      	strh	r5, [r4, #0]
   bf660:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf662:	4907      	ldr	r1, [pc, #28]	; (bf680 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bf664:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf666:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bf668:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf66a:	f000 f831 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf66e:	4904      	ldr	r1, [pc, #16]	; (bf680 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bf670:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bf672:	4628      	mov	r0, r5
   bf674:	f000 f82c 	bl	bf6d0 <_ZnajRKSt9nothrow_t>
    };
   bf678:	60e0      	str	r0, [r4, #12]
}
   bf67a:	4620      	mov	r0, r4
   bf67c:	bd38      	pop	{r3, r4, r5, pc}
   bf67e:	bf00      	nop
   bf680:	000c2114 	.word	0x000c2114

000bf684 <_Z22__fetch_global_Serial1v>:
{
   bf684:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf686:	4d0e      	ldr	r5, [pc, #56]	; (bf6c0 <_Z22__fetch_global_Serial1v+0x3c>)
   bf688:	7829      	ldrb	r1, [r5, #0]
   bf68a:	f3bf 8f5b 	dmb	ish
   bf68e:	f011 0401 	ands.w	r4, r1, #1
{
   bf692:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bf694:	d111      	bne.n	bf6ba <_Z22__fetch_global_Serial1v+0x36>
   bf696:	4628      	mov	r0, r5
   bf698:	f7f4 fd10 	bl	b40bc <__cxa_guard_acquire>
   bf69c:	b168      	cbz	r0, bf6ba <_Z22__fetch_global_Serial1v+0x36>
   bf69e:	a801      	add	r0, sp, #4
   bf6a0:	f7ff ffd6 	bl	bf650 <_Z20acquireSerial1Bufferv>
   bf6a4:	aa01      	add	r2, sp, #4
   bf6a6:	4621      	mov	r1, r4
   bf6a8:	4806      	ldr	r0, [pc, #24]	; (bf6c4 <_Z22__fetch_global_Serial1v+0x40>)
   bf6aa:	f7ff fd6b 	bl	bf184 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bf6ae:	4628      	mov	r0, r5
   bf6b0:	f7f4 fd09 	bl	b40c6 <__cxa_guard_release>
   bf6b4:	4804      	ldr	r0, [pc, #16]	; (bf6c8 <_Z22__fetch_global_Serial1v+0x44>)
   bf6b6:	f000 fcf1 	bl	c009c <atexit>
    return serial1;
}
   bf6ba:	4802      	ldr	r0, [pc, #8]	; (bf6c4 <_Z22__fetch_global_Serial1v+0x40>)
   bf6bc:	b007      	add	sp, #28
   bf6be:	bd30      	pop	{r4, r5, pc}
   bf6c0:	2003e744 	.word	0x2003e744
   bf6c4:	2003e748 	.word	0x2003e748
   bf6c8:	000bf64d 	.word	0x000bf64d

000bf6cc <_ZnwjRKSt9nothrow_t>:
   bf6cc:	f7f4 bce3 	b.w	b4096 <_Znwj>

000bf6d0 <_ZnajRKSt9nothrow_t>:
   bf6d0:	f7f4 bce3 	b.w	b409a <_Znaj>

000bf6d4 <_ZSt17__throw_bad_allocv>:
   bf6d4:	b508      	push	{r3, lr}
   bf6d6:	f7fc fe0b 	bl	bc2f0 <abort>

000bf6da <_ZSt20__throw_length_errorPKc>:
   bf6da:	b508      	push	{r3, lr}
   bf6dc:	f7fc fe08 	bl	bc2f0 <abort>

000bf6e0 <_ZSt25__throw_bad_function_callv>:
   bf6e0:	b508      	push	{r3, lr}
   bf6e2:	f7fc fe05 	bl	bc2f0 <abort>
	...

000bf6e8 <__aeabi_drsub>:
   bf6e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bf6ec:	e002      	b.n	bf6f4 <__adddf3>
   bf6ee:	bf00      	nop

000bf6f0 <__aeabi_dsub>:
   bf6f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bf6f4 <__adddf3>:
   bf6f4:	b530      	push	{r4, r5, lr}
   bf6f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bf6fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bf6fe:	ea94 0f05 	teq	r4, r5
   bf702:	bf08      	it	eq
   bf704:	ea90 0f02 	teqeq	r0, r2
   bf708:	bf1f      	itttt	ne
   bf70a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bf70e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bf712:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bf716:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bf71a:	f000 80e2 	beq.w	bf8e2 <__adddf3+0x1ee>
   bf71e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bf722:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bf726:	bfb8      	it	lt
   bf728:	426d      	neglt	r5, r5
   bf72a:	dd0c      	ble.n	bf746 <__adddf3+0x52>
   bf72c:	442c      	add	r4, r5
   bf72e:	ea80 0202 	eor.w	r2, r0, r2
   bf732:	ea81 0303 	eor.w	r3, r1, r3
   bf736:	ea82 0000 	eor.w	r0, r2, r0
   bf73a:	ea83 0101 	eor.w	r1, r3, r1
   bf73e:	ea80 0202 	eor.w	r2, r0, r2
   bf742:	ea81 0303 	eor.w	r3, r1, r3
   bf746:	2d36      	cmp	r5, #54	; 0x36
   bf748:	bf88      	it	hi
   bf74a:	bd30      	pophi	{r4, r5, pc}
   bf74c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf750:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bf754:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bf758:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bf75c:	d002      	beq.n	bf764 <__adddf3+0x70>
   bf75e:	4240      	negs	r0, r0
   bf760:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bf764:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bf768:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bf76c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bf770:	d002      	beq.n	bf778 <__adddf3+0x84>
   bf772:	4252      	negs	r2, r2
   bf774:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bf778:	ea94 0f05 	teq	r4, r5
   bf77c:	f000 80a7 	beq.w	bf8ce <__adddf3+0x1da>
   bf780:	f1a4 0401 	sub.w	r4, r4, #1
   bf784:	f1d5 0e20 	rsbs	lr, r5, #32
   bf788:	db0d      	blt.n	bf7a6 <__adddf3+0xb2>
   bf78a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bf78e:	fa22 f205 	lsr.w	r2, r2, r5
   bf792:	1880      	adds	r0, r0, r2
   bf794:	f141 0100 	adc.w	r1, r1, #0
   bf798:	fa03 f20e 	lsl.w	r2, r3, lr
   bf79c:	1880      	adds	r0, r0, r2
   bf79e:	fa43 f305 	asr.w	r3, r3, r5
   bf7a2:	4159      	adcs	r1, r3
   bf7a4:	e00e      	b.n	bf7c4 <__adddf3+0xd0>
   bf7a6:	f1a5 0520 	sub.w	r5, r5, #32
   bf7aa:	f10e 0e20 	add.w	lr, lr, #32
   bf7ae:	2a01      	cmp	r2, #1
   bf7b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bf7b4:	bf28      	it	cs
   bf7b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bf7ba:	fa43 f305 	asr.w	r3, r3, r5
   bf7be:	18c0      	adds	r0, r0, r3
   bf7c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bf7c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bf7c8:	d507      	bpl.n	bf7da <__adddf3+0xe6>
   bf7ca:	f04f 0e00 	mov.w	lr, #0
   bf7ce:	f1dc 0c00 	rsbs	ip, ip, #0
   bf7d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   bf7d6:	eb6e 0101 	sbc.w	r1, lr, r1
   bf7da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bf7de:	d31b      	bcc.n	bf818 <__adddf3+0x124>
   bf7e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bf7e4:	d30c      	bcc.n	bf800 <__adddf3+0x10c>
   bf7e6:	0849      	lsrs	r1, r1, #1
   bf7e8:	ea5f 0030 	movs.w	r0, r0, rrx
   bf7ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bf7f0:	f104 0401 	add.w	r4, r4, #1
   bf7f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bf7f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bf7fc:	f080 809a 	bcs.w	bf934 <__adddf3+0x240>
   bf800:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bf804:	bf08      	it	eq
   bf806:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bf80a:	f150 0000 	adcs.w	r0, r0, #0
   bf80e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bf812:	ea41 0105 	orr.w	r1, r1, r5
   bf816:	bd30      	pop	{r4, r5, pc}
   bf818:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bf81c:	4140      	adcs	r0, r0
   bf81e:	eb41 0101 	adc.w	r1, r1, r1
   bf822:	3c01      	subs	r4, #1
   bf824:	bf28      	it	cs
   bf826:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bf82a:	d2e9      	bcs.n	bf800 <__adddf3+0x10c>
   bf82c:	f091 0f00 	teq	r1, #0
   bf830:	bf04      	itt	eq
   bf832:	4601      	moveq	r1, r0
   bf834:	2000      	moveq	r0, #0
   bf836:	fab1 f381 	clz	r3, r1
   bf83a:	bf08      	it	eq
   bf83c:	3320      	addeq	r3, #32
   bf83e:	f1a3 030b 	sub.w	r3, r3, #11
   bf842:	f1b3 0220 	subs.w	r2, r3, #32
   bf846:	da0c      	bge.n	bf862 <__adddf3+0x16e>
   bf848:	320c      	adds	r2, #12
   bf84a:	dd08      	ble.n	bf85e <__adddf3+0x16a>
   bf84c:	f102 0c14 	add.w	ip, r2, #20
   bf850:	f1c2 020c 	rsb	r2, r2, #12
   bf854:	fa01 f00c 	lsl.w	r0, r1, ip
   bf858:	fa21 f102 	lsr.w	r1, r1, r2
   bf85c:	e00c      	b.n	bf878 <__adddf3+0x184>
   bf85e:	f102 0214 	add.w	r2, r2, #20
   bf862:	bfd8      	it	le
   bf864:	f1c2 0c20 	rsble	ip, r2, #32
   bf868:	fa01 f102 	lsl.w	r1, r1, r2
   bf86c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bf870:	bfdc      	itt	le
   bf872:	ea41 010c 	orrle.w	r1, r1, ip
   bf876:	4090      	lslle	r0, r2
   bf878:	1ae4      	subs	r4, r4, r3
   bf87a:	bfa2      	ittt	ge
   bf87c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bf880:	4329      	orrge	r1, r5
   bf882:	bd30      	popge	{r4, r5, pc}
   bf884:	ea6f 0404 	mvn.w	r4, r4
   bf888:	3c1f      	subs	r4, #31
   bf88a:	da1c      	bge.n	bf8c6 <__adddf3+0x1d2>
   bf88c:	340c      	adds	r4, #12
   bf88e:	dc0e      	bgt.n	bf8ae <__adddf3+0x1ba>
   bf890:	f104 0414 	add.w	r4, r4, #20
   bf894:	f1c4 0220 	rsb	r2, r4, #32
   bf898:	fa20 f004 	lsr.w	r0, r0, r4
   bf89c:	fa01 f302 	lsl.w	r3, r1, r2
   bf8a0:	ea40 0003 	orr.w	r0, r0, r3
   bf8a4:	fa21 f304 	lsr.w	r3, r1, r4
   bf8a8:	ea45 0103 	orr.w	r1, r5, r3
   bf8ac:	bd30      	pop	{r4, r5, pc}
   bf8ae:	f1c4 040c 	rsb	r4, r4, #12
   bf8b2:	f1c4 0220 	rsb	r2, r4, #32
   bf8b6:	fa20 f002 	lsr.w	r0, r0, r2
   bf8ba:	fa01 f304 	lsl.w	r3, r1, r4
   bf8be:	ea40 0003 	orr.w	r0, r0, r3
   bf8c2:	4629      	mov	r1, r5
   bf8c4:	bd30      	pop	{r4, r5, pc}
   bf8c6:	fa21 f004 	lsr.w	r0, r1, r4
   bf8ca:	4629      	mov	r1, r5
   bf8cc:	bd30      	pop	{r4, r5, pc}
   bf8ce:	f094 0f00 	teq	r4, #0
   bf8d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bf8d6:	bf06      	itte	eq
   bf8d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bf8dc:	3401      	addeq	r4, #1
   bf8de:	3d01      	subne	r5, #1
   bf8e0:	e74e      	b.n	bf780 <__adddf3+0x8c>
   bf8e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bf8e6:	bf18      	it	ne
   bf8e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bf8ec:	d029      	beq.n	bf942 <__adddf3+0x24e>
   bf8ee:	ea94 0f05 	teq	r4, r5
   bf8f2:	bf08      	it	eq
   bf8f4:	ea90 0f02 	teqeq	r0, r2
   bf8f8:	d005      	beq.n	bf906 <__adddf3+0x212>
   bf8fa:	ea54 0c00 	orrs.w	ip, r4, r0
   bf8fe:	bf04      	itt	eq
   bf900:	4619      	moveq	r1, r3
   bf902:	4610      	moveq	r0, r2
   bf904:	bd30      	pop	{r4, r5, pc}
   bf906:	ea91 0f03 	teq	r1, r3
   bf90a:	bf1e      	ittt	ne
   bf90c:	2100      	movne	r1, #0
   bf90e:	2000      	movne	r0, #0
   bf910:	bd30      	popne	{r4, r5, pc}
   bf912:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bf916:	d105      	bne.n	bf924 <__adddf3+0x230>
   bf918:	0040      	lsls	r0, r0, #1
   bf91a:	4149      	adcs	r1, r1
   bf91c:	bf28      	it	cs
   bf91e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bf922:	bd30      	pop	{r4, r5, pc}
   bf924:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bf928:	bf3c      	itt	cc
   bf92a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bf92e:	bd30      	popcc	{r4, r5, pc}
   bf930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bf934:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bf938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bf93c:	f04f 0000 	mov.w	r0, #0
   bf940:	bd30      	pop	{r4, r5, pc}
   bf942:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bf946:	bf1a      	itte	ne
   bf948:	4619      	movne	r1, r3
   bf94a:	4610      	movne	r0, r2
   bf94c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bf950:	bf1c      	itt	ne
   bf952:	460b      	movne	r3, r1
   bf954:	4602      	movne	r2, r0
   bf956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bf95a:	bf06      	itte	eq
   bf95c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bf960:	ea91 0f03 	teqeq	r1, r3
   bf964:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bf968:	bd30      	pop	{r4, r5, pc}
   bf96a:	bf00      	nop

000bf96c <__aeabi_ui2d>:
   bf96c:	f090 0f00 	teq	r0, #0
   bf970:	bf04      	itt	eq
   bf972:	2100      	moveq	r1, #0
   bf974:	4770      	bxeq	lr
   bf976:	b530      	push	{r4, r5, lr}
   bf978:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bf97c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bf980:	f04f 0500 	mov.w	r5, #0
   bf984:	f04f 0100 	mov.w	r1, #0
   bf988:	e750      	b.n	bf82c <__adddf3+0x138>
   bf98a:	bf00      	nop

000bf98c <__aeabi_i2d>:
   bf98c:	f090 0f00 	teq	r0, #0
   bf990:	bf04      	itt	eq
   bf992:	2100      	moveq	r1, #0
   bf994:	4770      	bxeq	lr
   bf996:	b530      	push	{r4, r5, lr}
   bf998:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bf99c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bf9a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bf9a4:	bf48      	it	mi
   bf9a6:	4240      	negmi	r0, r0
   bf9a8:	f04f 0100 	mov.w	r1, #0
   bf9ac:	e73e      	b.n	bf82c <__adddf3+0x138>
   bf9ae:	bf00      	nop

000bf9b0 <__aeabi_f2d>:
   bf9b0:	0042      	lsls	r2, r0, #1
   bf9b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bf9b6:	ea4f 0131 	mov.w	r1, r1, rrx
   bf9ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bf9be:	bf1f      	itttt	ne
   bf9c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bf9c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bf9c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bf9cc:	4770      	bxne	lr
   bf9ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bf9d2:	bf08      	it	eq
   bf9d4:	4770      	bxeq	lr
   bf9d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bf9da:	bf04      	itt	eq
   bf9dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bf9e0:	4770      	bxeq	lr
   bf9e2:	b530      	push	{r4, r5, lr}
   bf9e4:	f44f 7460 	mov.w	r4, #896	; 0x380
   bf9e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bf9ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bf9f0:	e71c      	b.n	bf82c <__adddf3+0x138>
   bf9f2:	bf00      	nop

000bf9f4 <__aeabi_ul2d>:
   bf9f4:	ea50 0201 	orrs.w	r2, r0, r1
   bf9f8:	bf08      	it	eq
   bf9fa:	4770      	bxeq	lr
   bf9fc:	b530      	push	{r4, r5, lr}
   bf9fe:	f04f 0500 	mov.w	r5, #0
   bfa02:	e00a      	b.n	bfa1a <__aeabi_l2d+0x16>

000bfa04 <__aeabi_l2d>:
   bfa04:	ea50 0201 	orrs.w	r2, r0, r1
   bfa08:	bf08      	it	eq
   bfa0a:	4770      	bxeq	lr
   bfa0c:	b530      	push	{r4, r5, lr}
   bfa0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bfa12:	d502      	bpl.n	bfa1a <__aeabi_l2d+0x16>
   bfa14:	4240      	negs	r0, r0
   bfa16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfa1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bfa1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bfa22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bfa26:	f43f aed8 	beq.w	bf7da <__adddf3+0xe6>
   bfa2a:	f04f 0203 	mov.w	r2, #3
   bfa2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfa32:	bf18      	it	ne
   bfa34:	3203      	addne	r2, #3
   bfa36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bfa3a:	bf18      	it	ne
   bfa3c:	3203      	addne	r2, #3
   bfa3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bfa42:	f1c2 0320 	rsb	r3, r2, #32
   bfa46:	fa00 fc03 	lsl.w	ip, r0, r3
   bfa4a:	fa20 f002 	lsr.w	r0, r0, r2
   bfa4e:	fa01 fe03 	lsl.w	lr, r1, r3
   bfa52:	ea40 000e 	orr.w	r0, r0, lr
   bfa56:	fa21 f102 	lsr.w	r1, r1, r2
   bfa5a:	4414      	add	r4, r2
   bfa5c:	e6bd      	b.n	bf7da <__adddf3+0xe6>
   bfa5e:	bf00      	nop

000bfa60 <__aeabi_dmul>:
   bfa60:	b570      	push	{r4, r5, r6, lr}
   bfa62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bfa66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bfa6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bfa6e:	bf1d      	ittte	ne
   bfa70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bfa74:	ea94 0f0c 	teqne	r4, ip
   bfa78:	ea95 0f0c 	teqne	r5, ip
   bfa7c:	f000 f8de 	bleq	bfc3c <__aeabi_dmul+0x1dc>
   bfa80:	442c      	add	r4, r5
   bfa82:	ea81 0603 	eor.w	r6, r1, r3
   bfa86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bfa8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bfa8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bfa92:	bf18      	it	ne
   bfa94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bfa98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfa9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bfaa0:	d038      	beq.n	bfb14 <__aeabi_dmul+0xb4>
   bfaa2:	fba0 ce02 	umull	ip, lr, r0, r2
   bfaa6:	f04f 0500 	mov.w	r5, #0
   bfaaa:	fbe1 e502 	umlal	lr, r5, r1, r2
   bfaae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bfab2:	fbe0 e503 	umlal	lr, r5, r0, r3
   bfab6:	f04f 0600 	mov.w	r6, #0
   bfaba:	fbe1 5603 	umlal	r5, r6, r1, r3
   bfabe:	f09c 0f00 	teq	ip, #0
   bfac2:	bf18      	it	ne
   bfac4:	f04e 0e01 	orrne.w	lr, lr, #1
   bfac8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bfacc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bfad0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bfad4:	d204      	bcs.n	bfae0 <__aeabi_dmul+0x80>
   bfad6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bfada:	416d      	adcs	r5, r5
   bfadc:	eb46 0606 	adc.w	r6, r6, r6
   bfae0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bfae4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bfae8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bfaec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bfaf0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bfaf4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bfaf8:	bf88      	it	hi
   bfafa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bfafe:	d81e      	bhi.n	bfb3e <__aeabi_dmul+0xde>
   bfb00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bfb04:	bf08      	it	eq
   bfb06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bfb0a:	f150 0000 	adcs.w	r0, r0, #0
   bfb0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfb12:	bd70      	pop	{r4, r5, r6, pc}
   bfb14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bfb18:	ea46 0101 	orr.w	r1, r6, r1
   bfb1c:	ea40 0002 	orr.w	r0, r0, r2
   bfb20:	ea81 0103 	eor.w	r1, r1, r3
   bfb24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bfb28:	bfc2      	ittt	gt
   bfb2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bfb2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bfb32:	bd70      	popgt	{r4, r5, r6, pc}
   bfb34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfb38:	f04f 0e00 	mov.w	lr, #0
   bfb3c:	3c01      	subs	r4, #1
   bfb3e:	f300 80ab 	bgt.w	bfc98 <__aeabi_dmul+0x238>
   bfb42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bfb46:	bfde      	ittt	le
   bfb48:	2000      	movle	r0, #0
   bfb4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bfb4e:	bd70      	pople	{r4, r5, r6, pc}
   bfb50:	f1c4 0400 	rsb	r4, r4, #0
   bfb54:	3c20      	subs	r4, #32
   bfb56:	da35      	bge.n	bfbc4 <__aeabi_dmul+0x164>
   bfb58:	340c      	adds	r4, #12
   bfb5a:	dc1b      	bgt.n	bfb94 <__aeabi_dmul+0x134>
   bfb5c:	f104 0414 	add.w	r4, r4, #20
   bfb60:	f1c4 0520 	rsb	r5, r4, #32
   bfb64:	fa00 f305 	lsl.w	r3, r0, r5
   bfb68:	fa20 f004 	lsr.w	r0, r0, r4
   bfb6c:	fa01 f205 	lsl.w	r2, r1, r5
   bfb70:	ea40 0002 	orr.w	r0, r0, r2
   bfb74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bfb78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bfb7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bfb80:	fa21 f604 	lsr.w	r6, r1, r4
   bfb84:	eb42 0106 	adc.w	r1, r2, r6
   bfb88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfb8c:	bf08      	it	eq
   bfb8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfb92:	bd70      	pop	{r4, r5, r6, pc}
   bfb94:	f1c4 040c 	rsb	r4, r4, #12
   bfb98:	f1c4 0520 	rsb	r5, r4, #32
   bfb9c:	fa00 f304 	lsl.w	r3, r0, r4
   bfba0:	fa20 f005 	lsr.w	r0, r0, r5
   bfba4:	fa01 f204 	lsl.w	r2, r1, r4
   bfba8:	ea40 0002 	orr.w	r0, r0, r2
   bfbac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfbb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bfbb4:	f141 0100 	adc.w	r1, r1, #0
   bfbb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfbbc:	bf08      	it	eq
   bfbbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfbc2:	bd70      	pop	{r4, r5, r6, pc}
   bfbc4:	f1c4 0520 	rsb	r5, r4, #32
   bfbc8:	fa00 f205 	lsl.w	r2, r0, r5
   bfbcc:	ea4e 0e02 	orr.w	lr, lr, r2
   bfbd0:	fa20 f304 	lsr.w	r3, r0, r4
   bfbd4:	fa01 f205 	lsl.w	r2, r1, r5
   bfbd8:	ea43 0302 	orr.w	r3, r3, r2
   bfbdc:	fa21 f004 	lsr.w	r0, r1, r4
   bfbe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfbe4:	fa21 f204 	lsr.w	r2, r1, r4
   bfbe8:	ea20 0002 	bic.w	r0, r0, r2
   bfbec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bfbf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bfbf4:	bf08      	it	eq
   bfbf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bfbfa:	bd70      	pop	{r4, r5, r6, pc}
   bfbfc:	f094 0f00 	teq	r4, #0
   bfc00:	d10f      	bne.n	bfc22 <__aeabi_dmul+0x1c2>
   bfc02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bfc06:	0040      	lsls	r0, r0, #1
   bfc08:	eb41 0101 	adc.w	r1, r1, r1
   bfc0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bfc10:	bf08      	it	eq
   bfc12:	3c01      	subeq	r4, #1
   bfc14:	d0f7      	beq.n	bfc06 <__aeabi_dmul+0x1a6>
   bfc16:	ea41 0106 	orr.w	r1, r1, r6
   bfc1a:	f095 0f00 	teq	r5, #0
   bfc1e:	bf18      	it	ne
   bfc20:	4770      	bxne	lr
   bfc22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bfc26:	0052      	lsls	r2, r2, #1
   bfc28:	eb43 0303 	adc.w	r3, r3, r3
   bfc2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bfc30:	bf08      	it	eq
   bfc32:	3d01      	subeq	r5, #1
   bfc34:	d0f7      	beq.n	bfc26 <__aeabi_dmul+0x1c6>
   bfc36:	ea43 0306 	orr.w	r3, r3, r6
   bfc3a:	4770      	bx	lr
   bfc3c:	ea94 0f0c 	teq	r4, ip
   bfc40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bfc44:	bf18      	it	ne
   bfc46:	ea95 0f0c 	teqne	r5, ip
   bfc4a:	d00c      	beq.n	bfc66 <__aeabi_dmul+0x206>
   bfc4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfc50:	bf18      	it	ne
   bfc52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfc56:	d1d1      	bne.n	bfbfc <__aeabi_dmul+0x19c>
   bfc58:	ea81 0103 	eor.w	r1, r1, r3
   bfc5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfc60:	f04f 0000 	mov.w	r0, #0
   bfc64:	bd70      	pop	{r4, r5, r6, pc}
   bfc66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfc6a:	bf06      	itte	eq
   bfc6c:	4610      	moveq	r0, r2
   bfc6e:	4619      	moveq	r1, r3
   bfc70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfc74:	d019      	beq.n	bfcaa <__aeabi_dmul+0x24a>
   bfc76:	ea94 0f0c 	teq	r4, ip
   bfc7a:	d102      	bne.n	bfc82 <__aeabi_dmul+0x222>
   bfc7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bfc80:	d113      	bne.n	bfcaa <__aeabi_dmul+0x24a>
   bfc82:	ea95 0f0c 	teq	r5, ip
   bfc86:	d105      	bne.n	bfc94 <__aeabi_dmul+0x234>
   bfc88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bfc8c:	bf1c      	itt	ne
   bfc8e:	4610      	movne	r0, r2
   bfc90:	4619      	movne	r1, r3
   bfc92:	d10a      	bne.n	bfcaa <__aeabi_dmul+0x24a>
   bfc94:	ea81 0103 	eor.w	r1, r1, r3
   bfc98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bfc9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bfca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bfca4:	f04f 0000 	mov.w	r0, #0
   bfca8:	bd70      	pop	{r4, r5, r6, pc}
   bfcaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bfcae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bfcb2:	bd70      	pop	{r4, r5, r6, pc}

000bfcb4 <__aeabi_ddiv>:
   bfcb4:	b570      	push	{r4, r5, r6, lr}
   bfcb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bfcba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bfcbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bfcc2:	bf1d      	ittte	ne
   bfcc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bfcc8:	ea94 0f0c 	teqne	r4, ip
   bfccc:	ea95 0f0c 	teqne	r5, ip
   bfcd0:	f000 f8a7 	bleq	bfe22 <__aeabi_ddiv+0x16e>
   bfcd4:	eba4 0405 	sub.w	r4, r4, r5
   bfcd8:	ea81 0e03 	eor.w	lr, r1, r3
   bfcdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bfce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bfce4:	f000 8088 	beq.w	bfdf8 <__aeabi_ddiv+0x144>
   bfce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bfcec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bfcf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bfcf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bfcf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bfcfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bfd00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bfd04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bfd08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bfd0c:	429d      	cmp	r5, r3
   bfd0e:	bf08      	it	eq
   bfd10:	4296      	cmpeq	r6, r2
   bfd12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bfd16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bfd1a:	d202      	bcs.n	bfd22 <__aeabi_ddiv+0x6e>
   bfd1c:	085b      	lsrs	r3, r3, #1
   bfd1e:	ea4f 0232 	mov.w	r2, r2, rrx
   bfd22:	1ab6      	subs	r6, r6, r2
   bfd24:	eb65 0503 	sbc.w	r5, r5, r3
   bfd28:	085b      	lsrs	r3, r3, #1
   bfd2a:	ea4f 0232 	mov.w	r2, r2, rrx
   bfd2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bfd32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bfd36:	ebb6 0e02 	subs.w	lr, r6, r2
   bfd3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfd3e:	bf22      	ittt	cs
   bfd40:	1ab6      	subcs	r6, r6, r2
   bfd42:	4675      	movcs	r5, lr
   bfd44:	ea40 000c 	orrcs.w	r0, r0, ip
   bfd48:	085b      	lsrs	r3, r3, #1
   bfd4a:	ea4f 0232 	mov.w	r2, r2, rrx
   bfd4e:	ebb6 0e02 	subs.w	lr, r6, r2
   bfd52:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfd56:	bf22      	ittt	cs
   bfd58:	1ab6      	subcs	r6, r6, r2
   bfd5a:	4675      	movcs	r5, lr
   bfd5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bfd60:	085b      	lsrs	r3, r3, #1
   bfd62:	ea4f 0232 	mov.w	r2, r2, rrx
   bfd66:	ebb6 0e02 	subs.w	lr, r6, r2
   bfd6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfd6e:	bf22      	ittt	cs
   bfd70:	1ab6      	subcs	r6, r6, r2
   bfd72:	4675      	movcs	r5, lr
   bfd74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bfd78:	085b      	lsrs	r3, r3, #1
   bfd7a:	ea4f 0232 	mov.w	r2, r2, rrx
   bfd7e:	ebb6 0e02 	subs.w	lr, r6, r2
   bfd82:	eb75 0e03 	sbcs.w	lr, r5, r3
   bfd86:	bf22      	ittt	cs
   bfd88:	1ab6      	subcs	r6, r6, r2
   bfd8a:	4675      	movcs	r5, lr
   bfd8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bfd90:	ea55 0e06 	orrs.w	lr, r5, r6
   bfd94:	d018      	beq.n	bfdc8 <__aeabi_ddiv+0x114>
   bfd96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bfd9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bfd9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bfda2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bfda6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bfdaa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bfdae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bfdb2:	d1c0      	bne.n	bfd36 <__aeabi_ddiv+0x82>
   bfdb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bfdb8:	d10b      	bne.n	bfdd2 <__aeabi_ddiv+0x11e>
   bfdba:	ea41 0100 	orr.w	r1, r1, r0
   bfdbe:	f04f 0000 	mov.w	r0, #0
   bfdc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bfdc6:	e7b6      	b.n	bfd36 <__aeabi_ddiv+0x82>
   bfdc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bfdcc:	bf04      	itt	eq
   bfdce:	4301      	orreq	r1, r0
   bfdd0:	2000      	moveq	r0, #0
   bfdd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bfdd6:	bf88      	it	hi
   bfdd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bfddc:	f63f aeaf 	bhi.w	bfb3e <__aeabi_dmul+0xde>
   bfde0:	ebb5 0c03 	subs.w	ip, r5, r3
   bfde4:	bf04      	itt	eq
   bfde6:	ebb6 0c02 	subseq.w	ip, r6, r2
   bfdea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bfdee:	f150 0000 	adcs.w	r0, r0, #0
   bfdf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bfdf6:	bd70      	pop	{r4, r5, r6, pc}
   bfdf8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bfdfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bfe00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bfe04:	bfc2      	ittt	gt
   bfe06:	ebd4 050c 	rsbsgt	r5, r4, ip
   bfe0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bfe0e:	bd70      	popgt	{r4, r5, r6, pc}
   bfe10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bfe14:	f04f 0e00 	mov.w	lr, #0
   bfe18:	3c01      	subs	r4, #1
   bfe1a:	e690      	b.n	bfb3e <__aeabi_dmul+0xde>
   bfe1c:	ea45 0e06 	orr.w	lr, r5, r6
   bfe20:	e68d      	b.n	bfb3e <__aeabi_dmul+0xde>
   bfe22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bfe26:	ea94 0f0c 	teq	r4, ip
   bfe2a:	bf08      	it	eq
   bfe2c:	ea95 0f0c 	teqeq	r5, ip
   bfe30:	f43f af3b 	beq.w	bfcaa <__aeabi_dmul+0x24a>
   bfe34:	ea94 0f0c 	teq	r4, ip
   bfe38:	d10a      	bne.n	bfe50 <__aeabi_ddiv+0x19c>
   bfe3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bfe3e:	f47f af34 	bne.w	bfcaa <__aeabi_dmul+0x24a>
   bfe42:	ea95 0f0c 	teq	r5, ip
   bfe46:	f47f af25 	bne.w	bfc94 <__aeabi_dmul+0x234>
   bfe4a:	4610      	mov	r0, r2
   bfe4c:	4619      	mov	r1, r3
   bfe4e:	e72c      	b.n	bfcaa <__aeabi_dmul+0x24a>
   bfe50:	ea95 0f0c 	teq	r5, ip
   bfe54:	d106      	bne.n	bfe64 <__aeabi_ddiv+0x1b0>
   bfe56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bfe5a:	f43f aefd 	beq.w	bfc58 <__aeabi_dmul+0x1f8>
   bfe5e:	4610      	mov	r0, r2
   bfe60:	4619      	mov	r1, r3
   bfe62:	e722      	b.n	bfcaa <__aeabi_dmul+0x24a>
   bfe64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bfe68:	bf18      	it	ne
   bfe6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bfe6e:	f47f aec5 	bne.w	bfbfc <__aeabi_dmul+0x19c>
   bfe72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bfe76:	f47f af0d 	bne.w	bfc94 <__aeabi_dmul+0x234>
   bfe7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bfe7e:	f47f aeeb 	bne.w	bfc58 <__aeabi_dmul+0x1f8>
   bfe82:	e712      	b.n	bfcaa <__aeabi_dmul+0x24a>

000bfe84 <__gedf2>:
   bfe84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bfe88:	e006      	b.n	bfe98 <__cmpdf2+0x4>
   bfe8a:	bf00      	nop

000bfe8c <__ledf2>:
   bfe8c:	f04f 0c01 	mov.w	ip, #1
   bfe90:	e002      	b.n	bfe98 <__cmpdf2+0x4>
   bfe92:	bf00      	nop

000bfe94 <__cmpdf2>:
   bfe94:	f04f 0c01 	mov.w	ip, #1
   bfe98:	f84d cd04 	str.w	ip, [sp, #-4]!
   bfe9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bfea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bfea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bfea8:	bf18      	it	ne
   bfeaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bfeae:	d01b      	beq.n	bfee8 <__cmpdf2+0x54>
   bfeb0:	b001      	add	sp, #4
   bfeb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bfeb6:	bf0c      	ite	eq
   bfeb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bfebc:	ea91 0f03 	teqne	r1, r3
   bfec0:	bf02      	ittt	eq
   bfec2:	ea90 0f02 	teqeq	r0, r2
   bfec6:	2000      	moveq	r0, #0
   bfec8:	4770      	bxeq	lr
   bfeca:	f110 0f00 	cmn.w	r0, #0
   bfece:	ea91 0f03 	teq	r1, r3
   bfed2:	bf58      	it	pl
   bfed4:	4299      	cmppl	r1, r3
   bfed6:	bf08      	it	eq
   bfed8:	4290      	cmpeq	r0, r2
   bfeda:	bf2c      	ite	cs
   bfedc:	17d8      	asrcs	r0, r3, #31
   bfede:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bfee2:	f040 0001 	orr.w	r0, r0, #1
   bfee6:	4770      	bx	lr
   bfee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bfeec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bfef0:	d102      	bne.n	bfef8 <__cmpdf2+0x64>
   bfef2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bfef6:	d107      	bne.n	bff08 <__cmpdf2+0x74>
   bfef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bfefc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bff00:	d1d6      	bne.n	bfeb0 <__cmpdf2+0x1c>
   bff02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bff06:	d0d3      	beq.n	bfeb0 <__cmpdf2+0x1c>
   bff08:	f85d 0b04 	ldr.w	r0, [sp], #4
   bff0c:	4770      	bx	lr
   bff0e:	bf00      	nop

000bff10 <__aeabi_cdrcmple>:
   bff10:	4684      	mov	ip, r0
   bff12:	4610      	mov	r0, r2
   bff14:	4662      	mov	r2, ip
   bff16:	468c      	mov	ip, r1
   bff18:	4619      	mov	r1, r3
   bff1a:	4663      	mov	r3, ip
   bff1c:	e000      	b.n	bff20 <__aeabi_cdcmpeq>
   bff1e:	bf00      	nop

000bff20 <__aeabi_cdcmpeq>:
   bff20:	b501      	push	{r0, lr}
   bff22:	f7ff ffb7 	bl	bfe94 <__cmpdf2>
   bff26:	2800      	cmp	r0, #0
   bff28:	bf48      	it	mi
   bff2a:	f110 0f00 	cmnmi.w	r0, #0
   bff2e:	bd01      	pop	{r0, pc}

000bff30 <__aeabi_dcmpeq>:
   bff30:	f84d ed08 	str.w	lr, [sp, #-8]!
   bff34:	f7ff fff4 	bl	bff20 <__aeabi_cdcmpeq>
   bff38:	bf0c      	ite	eq
   bff3a:	2001      	moveq	r0, #1
   bff3c:	2000      	movne	r0, #0
   bff3e:	f85d fb08 	ldr.w	pc, [sp], #8
   bff42:	bf00      	nop

000bff44 <__aeabi_dcmplt>:
   bff44:	f84d ed08 	str.w	lr, [sp, #-8]!
   bff48:	f7ff ffea 	bl	bff20 <__aeabi_cdcmpeq>
   bff4c:	bf34      	ite	cc
   bff4e:	2001      	movcc	r0, #1
   bff50:	2000      	movcs	r0, #0
   bff52:	f85d fb08 	ldr.w	pc, [sp], #8
   bff56:	bf00      	nop

000bff58 <__aeabi_dcmple>:
   bff58:	f84d ed08 	str.w	lr, [sp, #-8]!
   bff5c:	f7ff ffe0 	bl	bff20 <__aeabi_cdcmpeq>
   bff60:	bf94      	ite	ls
   bff62:	2001      	movls	r0, #1
   bff64:	2000      	movhi	r0, #0
   bff66:	f85d fb08 	ldr.w	pc, [sp], #8
   bff6a:	bf00      	nop

000bff6c <__aeabi_dcmpge>:
   bff6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bff70:	f7ff ffce 	bl	bff10 <__aeabi_cdrcmple>
   bff74:	bf94      	ite	ls
   bff76:	2001      	movls	r0, #1
   bff78:	2000      	movhi	r0, #0
   bff7a:	f85d fb08 	ldr.w	pc, [sp], #8
   bff7e:	bf00      	nop

000bff80 <__aeabi_dcmpgt>:
   bff80:	f84d ed08 	str.w	lr, [sp, #-8]!
   bff84:	f7ff ffc4 	bl	bff10 <__aeabi_cdrcmple>
   bff88:	bf34      	ite	cc
   bff8a:	2001      	movcc	r0, #1
   bff8c:	2000      	movcs	r0, #0
   bff8e:	f85d fb08 	ldr.w	pc, [sp], #8
   bff92:	bf00      	nop

000bff94 <__aeabi_dcmpun>:
   bff94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bff98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bff9c:	d102      	bne.n	bffa4 <__aeabi_dcmpun+0x10>
   bff9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bffa2:	d10a      	bne.n	bffba <__aeabi_dcmpun+0x26>
   bffa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bffa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bffac:	d102      	bne.n	bffb4 <__aeabi_dcmpun+0x20>
   bffae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bffb2:	d102      	bne.n	bffba <__aeabi_dcmpun+0x26>
   bffb4:	f04f 0000 	mov.w	r0, #0
   bffb8:	4770      	bx	lr
   bffba:	f04f 0001 	mov.w	r0, #1
   bffbe:	4770      	bx	lr

000bffc0 <__aeabi_d2iz>:
   bffc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bffc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bffc8:	d215      	bcs.n	bfff6 <__aeabi_d2iz+0x36>
   bffca:	d511      	bpl.n	bfff0 <__aeabi_d2iz+0x30>
   bffcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bffd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bffd4:	d912      	bls.n	bfffc <__aeabi_d2iz+0x3c>
   bffd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bffda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bffde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bffe2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bffe6:	fa23 f002 	lsr.w	r0, r3, r2
   bffea:	bf18      	it	ne
   bffec:	4240      	negne	r0, r0
   bffee:	4770      	bx	lr
   bfff0:	f04f 0000 	mov.w	r0, #0
   bfff4:	4770      	bx	lr
   bfff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bfffa:	d105      	bne.n	c0008 <__aeabi_d2iz+0x48>
   bfffc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c0000:	bf08      	it	eq
   c0002:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c0006:	4770      	bx	lr
   c0008:	f04f 0000 	mov.w	r0, #0
   c000c:	4770      	bx	lr
   c000e:	bf00      	nop

000c0010 <__aeabi_d2uiz>:
   c0010:	004a      	lsls	r2, r1, #1
   c0012:	d211      	bcs.n	c0038 <__aeabi_d2uiz+0x28>
   c0014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0018:	d211      	bcs.n	c003e <__aeabi_d2uiz+0x2e>
   c001a:	d50d      	bpl.n	c0038 <__aeabi_d2uiz+0x28>
   c001c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0024:	d40e      	bmi.n	c0044 <__aeabi_d2uiz+0x34>
   c0026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c002a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c002e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0032:	fa23 f002 	lsr.w	r0, r3, r2
   c0036:	4770      	bx	lr
   c0038:	f04f 0000 	mov.w	r0, #0
   c003c:	4770      	bx	lr
   c003e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0042:	d102      	bne.n	c004a <__aeabi_d2uiz+0x3a>
   c0044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0048:	4770      	bx	lr
   c004a:	f04f 0000 	mov.w	r0, #0
   c004e:	4770      	bx	lr

000c0050 <asctime_r>:
   c0050:	b510      	push	{r4, lr}
   c0052:	460c      	mov	r4, r1
   c0054:	6941      	ldr	r1, [r0, #20]
   c0056:	6903      	ldr	r3, [r0, #16]
   c0058:	6982      	ldr	r2, [r0, #24]
   c005a:	b086      	sub	sp, #24
   c005c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0060:	9104      	str	r1, [sp, #16]
   c0062:	6801      	ldr	r1, [r0, #0]
   c0064:	9103      	str	r1, [sp, #12]
   c0066:	6841      	ldr	r1, [r0, #4]
   c0068:	9102      	str	r1, [sp, #8]
   c006a:	6881      	ldr	r1, [r0, #8]
   c006c:	9101      	str	r1, [sp, #4]
   c006e:	68c1      	ldr	r1, [r0, #12]
   c0070:	9100      	str	r1, [sp, #0]
   c0072:	4907      	ldr	r1, [pc, #28]	; (c0090 <asctime_r+0x40>)
   c0074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c0078:	440b      	add	r3, r1
   c007a:	4906      	ldr	r1, [pc, #24]	; (c0094 <asctime_r+0x44>)
   c007c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0080:	440a      	add	r2, r1
   c0082:	4620      	mov	r0, r4
   c0084:	4904      	ldr	r1, [pc, #16]	; (c0098 <asctime_r+0x48>)
   c0086:	f7fc f913 	bl	bc2b0 <siprintf>
   c008a:	4620      	mov	r0, r4
   c008c:	b006      	add	sp, #24
   c008e:	bd10      	pop	{r4, pc}
   c0090:	000c214a 	.word	0x000c214a
   c0094:	000c2135 	.word	0x000c2135
   c0098:	000c2115 	.word	0x000c2115

000c009c <atexit>:
   c009c:	2300      	movs	r3, #0
   c009e:	4601      	mov	r1, r0
   c00a0:	461a      	mov	r2, r3
   c00a2:	4618      	mov	r0, r3
   c00a4:	f000 ba70 	b.w	c0588 <__register_exitproc>

000c00a8 <gmtime>:
   c00a8:	b538      	push	{r3, r4, r5, lr}
   c00aa:	4b0b      	ldr	r3, [pc, #44]	; (c00d8 <gmtime+0x30>)
   c00ac:	681d      	ldr	r5, [r3, #0]
   c00ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c00b0:	4604      	mov	r4, r0
   c00b2:	b953      	cbnz	r3, c00ca <gmtime+0x22>
   c00b4:	2024      	movs	r0, #36	; 0x24
   c00b6:	f7fc f8e3 	bl	bc280 <malloc>
   c00ba:	4602      	mov	r2, r0
   c00bc:	63e8      	str	r0, [r5, #60]	; 0x3c
   c00be:	b920      	cbnz	r0, c00ca <gmtime+0x22>
   c00c0:	4b06      	ldr	r3, [pc, #24]	; (c00dc <gmtime+0x34>)
   c00c2:	4807      	ldr	r0, [pc, #28]	; (c00e0 <gmtime+0x38>)
   c00c4:	2139      	movs	r1, #57	; 0x39
   c00c6:	f7fc f92b 	bl	bc320 <__assert_func>
   c00ca:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c00cc:	4620      	mov	r0, r4
   c00ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c00d2:	f7fc b945 	b.w	bc360 <gmtime_r>
   c00d6:	bf00      	nop
   c00d8:	2003db04 	.word	0x2003db04
   c00dc:	000c216e 	.word	0x000c216e
   c00e0:	000c2185 	.word	0x000c2185

000c00e4 <isprint>:
   c00e4:	4b02      	ldr	r3, [pc, #8]	; (c00f0 <isprint+0xc>)
   c00e6:	4418      	add	r0, r3
   c00e8:	7840      	ldrb	r0, [r0, #1]
   c00ea:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c00ee:	4770      	bx	lr
   c00f0:	000c2237 	.word	0x000c2237

000c00f4 <memcpy>:
   c00f4:	440a      	add	r2, r1
   c00f6:	4291      	cmp	r1, r2
   c00f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c00fc:	d100      	bne.n	c0100 <memcpy+0xc>
   c00fe:	4770      	bx	lr
   c0100:	b510      	push	{r4, lr}
   c0102:	f811 4b01 	ldrb.w	r4, [r1], #1
   c0106:	f803 4f01 	strb.w	r4, [r3, #1]!
   c010a:	4291      	cmp	r1, r2
   c010c:	d1f9      	bne.n	c0102 <memcpy+0xe>
   c010e:	bd10      	pop	{r4, pc}

000c0110 <memmove>:
   c0110:	4288      	cmp	r0, r1
   c0112:	b510      	push	{r4, lr}
   c0114:	eb01 0402 	add.w	r4, r1, r2
   c0118:	d902      	bls.n	c0120 <memmove+0x10>
   c011a:	4284      	cmp	r4, r0
   c011c:	4623      	mov	r3, r4
   c011e:	d807      	bhi.n	c0130 <memmove+0x20>
   c0120:	1e43      	subs	r3, r0, #1
   c0122:	42a1      	cmp	r1, r4
   c0124:	d008      	beq.n	c0138 <memmove+0x28>
   c0126:	f811 2b01 	ldrb.w	r2, [r1], #1
   c012a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c012e:	e7f8      	b.n	c0122 <memmove+0x12>
   c0130:	4402      	add	r2, r0
   c0132:	4601      	mov	r1, r0
   c0134:	428a      	cmp	r2, r1
   c0136:	d100      	bne.n	c013a <memmove+0x2a>
   c0138:	bd10      	pop	{r4, pc}
   c013a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c013e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c0142:	e7f7      	b.n	c0134 <memmove+0x24>

000c0144 <memset>:
   c0144:	4402      	add	r2, r0
   c0146:	4603      	mov	r3, r0
   c0148:	4293      	cmp	r3, r2
   c014a:	d100      	bne.n	c014e <memset+0xa>
   c014c:	4770      	bx	lr
   c014e:	f803 1b01 	strb.w	r1, [r3], #1
   c0152:	e7f9      	b.n	c0148 <memset+0x4>

000c0154 <srand>:
   c0154:	b538      	push	{r3, r4, r5, lr}
   c0156:	4b10      	ldr	r3, [pc, #64]	; (c0198 <srand+0x44>)
   c0158:	681d      	ldr	r5, [r3, #0]
   c015a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c015c:	4604      	mov	r4, r0
   c015e:	b9b3      	cbnz	r3, c018e <srand+0x3a>
   c0160:	2018      	movs	r0, #24
   c0162:	f7fc f88d 	bl	bc280 <malloc>
   c0166:	4602      	mov	r2, r0
   c0168:	63a8      	str	r0, [r5, #56]	; 0x38
   c016a:	b920      	cbnz	r0, c0176 <srand+0x22>
   c016c:	4b0b      	ldr	r3, [pc, #44]	; (c019c <srand+0x48>)
   c016e:	480c      	ldr	r0, [pc, #48]	; (c01a0 <srand+0x4c>)
   c0170:	2142      	movs	r1, #66	; 0x42
   c0172:	f7fc f8d5 	bl	bc320 <__assert_func>
   c0176:	490b      	ldr	r1, [pc, #44]	; (c01a4 <srand+0x50>)
   c0178:	4b0b      	ldr	r3, [pc, #44]	; (c01a8 <srand+0x54>)
   c017a:	e9c0 1300 	strd	r1, r3, [r0]
   c017e:	4b0b      	ldr	r3, [pc, #44]	; (c01ac <srand+0x58>)
   c0180:	6083      	str	r3, [r0, #8]
   c0182:	230b      	movs	r3, #11
   c0184:	8183      	strh	r3, [r0, #12]
   c0186:	2100      	movs	r1, #0
   c0188:	2001      	movs	r0, #1
   c018a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c018e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0190:	2200      	movs	r2, #0
   c0192:	611c      	str	r4, [r3, #16]
   c0194:	615a      	str	r2, [r3, #20]
   c0196:	bd38      	pop	{r3, r4, r5, pc}
   c0198:	2003db04 	.word	0x2003db04
   c019c:	000c216e 	.word	0x000c216e
   c01a0:	000c21de 	.word	0x000c21de
   c01a4:	abcd330e 	.word	0xabcd330e
   c01a8:	e66d1234 	.word	0xe66d1234
   c01ac:	0005deec 	.word	0x0005deec

000c01b0 <rand>:
   c01b0:	4b16      	ldr	r3, [pc, #88]	; (c020c <rand+0x5c>)
   c01b2:	b510      	push	{r4, lr}
   c01b4:	681c      	ldr	r4, [r3, #0]
   c01b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c01b8:	b9b3      	cbnz	r3, c01e8 <rand+0x38>
   c01ba:	2018      	movs	r0, #24
   c01bc:	f7fc f860 	bl	bc280 <malloc>
   c01c0:	63a0      	str	r0, [r4, #56]	; 0x38
   c01c2:	b928      	cbnz	r0, c01d0 <rand+0x20>
   c01c4:	4602      	mov	r2, r0
   c01c6:	4b12      	ldr	r3, [pc, #72]	; (c0210 <rand+0x60>)
   c01c8:	4812      	ldr	r0, [pc, #72]	; (c0214 <rand+0x64>)
   c01ca:	214e      	movs	r1, #78	; 0x4e
   c01cc:	f7fc f8a8 	bl	bc320 <__assert_func>
   c01d0:	4a11      	ldr	r2, [pc, #68]	; (c0218 <rand+0x68>)
   c01d2:	4b12      	ldr	r3, [pc, #72]	; (c021c <rand+0x6c>)
   c01d4:	e9c0 2300 	strd	r2, r3, [r0]
   c01d8:	4b11      	ldr	r3, [pc, #68]	; (c0220 <rand+0x70>)
   c01da:	6083      	str	r3, [r0, #8]
   c01dc:	230b      	movs	r3, #11
   c01de:	8183      	strh	r3, [r0, #12]
   c01e0:	2201      	movs	r2, #1
   c01e2:	2300      	movs	r3, #0
   c01e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c01e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c01ea:	4a0e      	ldr	r2, [pc, #56]	; (c0224 <rand+0x74>)
   c01ec:	6920      	ldr	r0, [r4, #16]
   c01ee:	6963      	ldr	r3, [r4, #20]
   c01f0:	490d      	ldr	r1, [pc, #52]	; (c0228 <rand+0x78>)
   c01f2:	4342      	muls	r2, r0
   c01f4:	fb01 2203 	mla	r2, r1, r3, r2
   c01f8:	fba0 0101 	umull	r0, r1, r0, r1
   c01fc:	1c43      	adds	r3, r0, #1
   c01fe:	eb42 0001 	adc.w	r0, r2, r1
   c0202:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c0206:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c020a:	bd10      	pop	{r4, pc}
   c020c:	2003db04 	.word	0x2003db04
   c0210:	000c216e 	.word	0x000c216e
   c0214:	000c21de 	.word	0x000c21de
   c0218:	abcd330e 	.word	0xabcd330e
   c021c:	e66d1234 	.word	0xe66d1234
   c0220:	0005deec 	.word	0x0005deec
   c0224:	5851f42d 	.word	0x5851f42d
   c0228:	4c957f2d 	.word	0x4c957f2d

000c022c <strchr>:
   c022c:	b2c9      	uxtb	r1, r1
   c022e:	4603      	mov	r3, r0
   c0230:	f810 2b01 	ldrb.w	r2, [r0], #1
   c0234:	b11a      	cbz	r2, c023e <strchr+0x12>
   c0236:	428a      	cmp	r2, r1
   c0238:	d1f9      	bne.n	c022e <strchr+0x2>
   c023a:	4618      	mov	r0, r3
   c023c:	4770      	bx	lr
   c023e:	2900      	cmp	r1, #0
   c0240:	bf18      	it	ne
   c0242:	2300      	movne	r3, #0
   c0244:	e7f9      	b.n	c023a <strchr+0xe>

000c0246 <strchrnul>:
   c0246:	b510      	push	{r4, lr}
   c0248:	4604      	mov	r4, r0
   c024a:	f7ff ffef 	bl	c022c <strchr>
   c024e:	b918      	cbnz	r0, c0258 <strchrnul+0x12>
   c0250:	4620      	mov	r0, r4
   c0252:	f000 f832 	bl	c02ba <strlen>
   c0256:	4420      	add	r0, r4
   c0258:	bd10      	pop	{r4, pc}

000c025a <strcmp>:
   c025a:	f810 2b01 	ldrb.w	r2, [r0], #1
   c025e:	f811 3b01 	ldrb.w	r3, [r1], #1
   c0262:	2a01      	cmp	r2, #1
   c0264:	bf28      	it	cs
   c0266:	429a      	cmpcs	r2, r3
   c0268:	d0f7      	beq.n	c025a <strcmp>
   c026a:	1ad0      	subs	r0, r2, r3
   c026c:	4770      	bx	lr

000c026e <strcpy>:
   c026e:	4603      	mov	r3, r0
   c0270:	f811 2b01 	ldrb.w	r2, [r1], #1
   c0274:	f803 2b01 	strb.w	r2, [r3], #1
   c0278:	2a00      	cmp	r2, #0
   c027a:	d1f9      	bne.n	c0270 <strcpy+0x2>
   c027c:	4770      	bx	lr
	...

000c0280 <strdup>:
   c0280:	4b02      	ldr	r3, [pc, #8]	; (c028c <strdup+0xc>)
   c0282:	4601      	mov	r1, r0
   c0284:	6818      	ldr	r0, [r3, #0]
   c0286:	f000 b803 	b.w	c0290 <_strdup_r>
   c028a:	bf00      	nop
   c028c:	2003db04 	.word	0x2003db04

000c0290 <_strdup_r>:
   c0290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0292:	4604      	mov	r4, r0
   c0294:	4608      	mov	r0, r1
   c0296:	460d      	mov	r5, r1
   c0298:	f000 f80f 	bl	c02ba <strlen>
   c029c:	1c42      	adds	r2, r0, #1
   c029e:	4611      	mov	r1, r2
   c02a0:	4620      	mov	r0, r4
   c02a2:	9201      	str	r2, [sp, #4]
   c02a4:	f7fc f82c 	bl	bc300 <_malloc_r>
   c02a8:	4604      	mov	r4, r0
   c02aa:	b118      	cbz	r0, c02b4 <_strdup_r+0x24>
   c02ac:	9a01      	ldr	r2, [sp, #4]
   c02ae:	4629      	mov	r1, r5
   c02b0:	f7ff ff20 	bl	c00f4 <memcpy>
   c02b4:	4620      	mov	r0, r4
   c02b6:	b003      	add	sp, #12
   c02b8:	bd30      	pop	{r4, r5, pc}

000c02ba <strlen>:
   c02ba:	4603      	mov	r3, r0
   c02bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   c02c0:	2a00      	cmp	r2, #0
   c02c2:	d1fb      	bne.n	c02bc <strlen+0x2>
   c02c4:	1a18      	subs	r0, r3, r0
   c02c6:	3801      	subs	r0, #1
   c02c8:	4770      	bx	lr

000c02ca <strncmp>:
   c02ca:	b510      	push	{r4, lr}
   c02cc:	b17a      	cbz	r2, c02ee <strncmp+0x24>
   c02ce:	4603      	mov	r3, r0
   c02d0:	3901      	subs	r1, #1
   c02d2:	1884      	adds	r4, r0, r2
   c02d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   c02d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c02dc:	4290      	cmp	r0, r2
   c02de:	d101      	bne.n	c02e4 <strncmp+0x1a>
   c02e0:	42a3      	cmp	r3, r4
   c02e2:	d101      	bne.n	c02e8 <strncmp+0x1e>
   c02e4:	1a80      	subs	r0, r0, r2
   c02e6:	bd10      	pop	{r4, pc}
   c02e8:	2800      	cmp	r0, #0
   c02ea:	d1f3      	bne.n	c02d4 <strncmp+0xa>
   c02ec:	e7fa      	b.n	c02e4 <strncmp+0x1a>
   c02ee:	4610      	mov	r0, r2
   c02f0:	e7f9      	b.n	c02e6 <strncmp+0x1c>

000c02f2 <strncpy>:
   c02f2:	b510      	push	{r4, lr}
   c02f4:	3901      	subs	r1, #1
   c02f6:	4603      	mov	r3, r0
   c02f8:	b132      	cbz	r2, c0308 <strncpy+0x16>
   c02fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c02fe:	f803 4b01 	strb.w	r4, [r3], #1
   c0302:	3a01      	subs	r2, #1
   c0304:	2c00      	cmp	r4, #0
   c0306:	d1f7      	bne.n	c02f8 <strncpy+0x6>
   c0308:	441a      	add	r2, r3
   c030a:	2100      	movs	r1, #0
   c030c:	4293      	cmp	r3, r2
   c030e:	d100      	bne.n	c0312 <strncpy+0x20>
   c0310:	bd10      	pop	{r4, pc}
   c0312:	f803 1b01 	strb.w	r1, [r3], #1
   c0316:	e7f9      	b.n	c030c <strncpy+0x1a>

000c0318 <strrchr>:
   c0318:	b538      	push	{r3, r4, r5, lr}
   c031a:	4603      	mov	r3, r0
   c031c:	460c      	mov	r4, r1
   c031e:	b969      	cbnz	r1, c033c <strrchr+0x24>
   c0320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0324:	f7ff bf82 	b.w	c022c <strchr>
   c0328:	1c43      	adds	r3, r0, #1
   c032a:	4605      	mov	r5, r0
   c032c:	4621      	mov	r1, r4
   c032e:	4618      	mov	r0, r3
   c0330:	f7ff ff7c 	bl	c022c <strchr>
   c0334:	2800      	cmp	r0, #0
   c0336:	d1f7      	bne.n	c0328 <strrchr+0x10>
   c0338:	4628      	mov	r0, r5
   c033a:	bd38      	pop	{r3, r4, r5, pc}
   c033c:	2500      	movs	r5, #0
   c033e:	e7f5      	b.n	c032c <strrchr+0x14>

000c0340 <__strtok_r>:
   c0340:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0342:	b908      	cbnz	r0, c0348 <__strtok_r+0x8>
   c0344:	6810      	ldr	r0, [r2, #0]
   c0346:	b188      	cbz	r0, c036c <__strtok_r+0x2c>
   c0348:	4604      	mov	r4, r0
   c034a:	4620      	mov	r0, r4
   c034c:	f814 5b01 	ldrb.w	r5, [r4], #1
   c0350:	460f      	mov	r7, r1
   c0352:	f817 6b01 	ldrb.w	r6, [r7], #1
   c0356:	b91e      	cbnz	r6, c0360 <__strtok_r+0x20>
   c0358:	b965      	cbnz	r5, c0374 <__strtok_r+0x34>
   c035a:	6015      	str	r5, [r2, #0]
   c035c:	4628      	mov	r0, r5
   c035e:	e005      	b.n	c036c <__strtok_r+0x2c>
   c0360:	42b5      	cmp	r5, r6
   c0362:	d1f6      	bne.n	c0352 <__strtok_r+0x12>
   c0364:	2b00      	cmp	r3, #0
   c0366:	d1f0      	bne.n	c034a <__strtok_r+0xa>
   c0368:	6014      	str	r4, [r2, #0]
   c036a:	7003      	strb	r3, [r0, #0]
   c036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c036e:	461c      	mov	r4, r3
   c0370:	e00c      	b.n	c038c <__strtok_r+0x4c>
   c0372:	b915      	cbnz	r5, c037a <__strtok_r+0x3a>
   c0374:	f814 3b01 	ldrb.w	r3, [r4], #1
   c0378:	460e      	mov	r6, r1
   c037a:	f816 5b01 	ldrb.w	r5, [r6], #1
   c037e:	42ab      	cmp	r3, r5
   c0380:	d1f7      	bne.n	c0372 <__strtok_r+0x32>
   c0382:	2b00      	cmp	r3, #0
   c0384:	d0f3      	beq.n	c036e <__strtok_r+0x2e>
   c0386:	2300      	movs	r3, #0
   c0388:	f804 3c01 	strb.w	r3, [r4, #-1]
   c038c:	6014      	str	r4, [r2, #0]
   c038e:	e7ed      	b.n	c036c <__strtok_r+0x2c>

000c0390 <strtok_r>:
   c0390:	2301      	movs	r3, #1
   c0392:	f7ff bfd5 	b.w	c0340 <__strtok_r>
	...

000c0398 <_strtol_l.constprop.0>:
   c0398:	2b01      	cmp	r3, #1
   c039a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c039e:	d001      	beq.n	c03a4 <_strtol_l.constprop.0+0xc>
   c03a0:	2b24      	cmp	r3, #36	; 0x24
   c03a2:	d906      	bls.n	c03b2 <_strtol_l.constprop.0+0x1a>
   c03a4:	f7fb ffb4 	bl	bc310 <__errno>
   c03a8:	2316      	movs	r3, #22
   c03aa:	6003      	str	r3, [r0, #0]
   c03ac:	2000      	movs	r0, #0
   c03ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c03b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c0498 <_strtol_l.constprop.0+0x100>
   c03b6:	460d      	mov	r5, r1
   c03b8:	462e      	mov	r6, r5
   c03ba:	f815 4b01 	ldrb.w	r4, [r5], #1
   c03be:	f814 700c 	ldrb.w	r7, [r4, ip]
   c03c2:	f017 0708 	ands.w	r7, r7, #8
   c03c6:	d1f7      	bne.n	c03b8 <_strtol_l.constprop.0+0x20>
   c03c8:	2c2d      	cmp	r4, #45	; 0x2d
   c03ca:	d132      	bne.n	c0432 <_strtol_l.constprop.0+0x9a>
   c03cc:	782c      	ldrb	r4, [r5, #0]
   c03ce:	2701      	movs	r7, #1
   c03d0:	1cb5      	adds	r5, r6, #2
   c03d2:	2b00      	cmp	r3, #0
   c03d4:	d05b      	beq.n	c048e <_strtol_l.constprop.0+0xf6>
   c03d6:	2b10      	cmp	r3, #16
   c03d8:	d109      	bne.n	c03ee <_strtol_l.constprop.0+0x56>
   c03da:	2c30      	cmp	r4, #48	; 0x30
   c03dc:	d107      	bne.n	c03ee <_strtol_l.constprop.0+0x56>
   c03de:	782c      	ldrb	r4, [r5, #0]
   c03e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c03e4:	2c58      	cmp	r4, #88	; 0x58
   c03e6:	d14d      	bne.n	c0484 <_strtol_l.constprop.0+0xec>
   c03e8:	786c      	ldrb	r4, [r5, #1]
   c03ea:	2310      	movs	r3, #16
   c03ec:	3502      	adds	r5, #2
   c03ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c03f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c03f6:	f04f 0c00 	mov.w	ip, #0
   c03fa:	fbb8 f9f3 	udiv	r9, r8, r3
   c03fe:	4666      	mov	r6, ip
   c0400:	fb03 8a19 	mls	sl, r3, r9, r8
   c0404:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c0408:	f1be 0f09 	cmp.w	lr, #9
   c040c:	d816      	bhi.n	c043c <_strtol_l.constprop.0+0xa4>
   c040e:	4674      	mov	r4, lr
   c0410:	42a3      	cmp	r3, r4
   c0412:	dd24      	ble.n	c045e <_strtol_l.constprop.0+0xc6>
   c0414:	f1bc 0f00 	cmp.w	ip, #0
   c0418:	db1e      	blt.n	c0458 <_strtol_l.constprop.0+0xc0>
   c041a:	45b1      	cmp	r9, r6
   c041c:	d31c      	bcc.n	c0458 <_strtol_l.constprop.0+0xc0>
   c041e:	d101      	bne.n	c0424 <_strtol_l.constprop.0+0x8c>
   c0420:	45a2      	cmp	sl, r4
   c0422:	db19      	blt.n	c0458 <_strtol_l.constprop.0+0xc0>
   c0424:	fb06 4603 	mla	r6, r6, r3, r4
   c0428:	f04f 0c01 	mov.w	ip, #1
   c042c:	f815 4b01 	ldrb.w	r4, [r5], #1
   c0430:	e7e8      	b.n	c0404 <_strtol_l.constprop.0+0x6c>
   c0432:	2c2b      	cmp	r4, #43	; 0x2b
   c0434:	bf04      	itt	eq
   c0436:	782c      	ldrbeq	r4, [r5, #0]
   c0438:	1cb5      	addeq	r5, r6, #2
   c043a:	e7ca      	b.n	c03d2 <_strtol_l.constprop.0+0x3a>
   c043c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c0440:	f1be 0f19 	cmp.w	lr, #25
   c0444:	d801      	bhi.n	c044a <_strtol_l.constprop.0+0xb2>
   c0446:	3c37      	subs	r4, #55	; 0x37
   c0448:	e7e2      	b.n	c0410 <_strtol_l.constprop.0+0x78>
   c044a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c044e:	f1be 0f19 	cmp.w	lr, #25
   c0452:	d804      	bhi.n	c045e <_strtol_l.constprop.0+0xc6>
   c0454:	3c57      	subs	r4, #87	; 0x57
   c0456:	e7db      	b.n	c0410 <_strtol_l.constprop.0+0x78>
   c0458:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c045c:	e7e6      	b.n	c042c <_strtol_l.constprop.0+0x94>
   c045e:	f1bc 0f00 	cmp.w	ip, #0
   c0462:	da05      	bge.n	c0470 <_strtol_l.constprop.0+0xd8>
   c0464:	2322      	movs	r3, #34	; 0x22
   c0466:	6003      	str	r3, [r0, #0]
   c0468:	4646      	mov	r6, r8
   c046a:	b942      	cbnz	r2, c047e <_strtol_l.constprop.0+0xe6>
   c046c:	4630      	mov	r0, r6
   c046e:	e79e      	b.n	c03ae <_strtol_l.constprop.0+0x16>
   c0470:	b107      	cbz	r7, c0474 <_strtol_l.constprop.0+0xdc>
   c0472:	4276      	negs	r6, r6
   c0474:	2a00      	cmp	r2, #0
   c0476:	d0f9      	beq.n	c046c <_strtol_l.constprop.0+0xd4>
   c0478:	f1bc 0f00 	cmp.w	ip, #0
   c047c:	d000      	beq.n	c0480 <_strtol_l.constprop.0+0xe8>
   c047e:	1e69      	subs	r1, r5, #1
   c0480:	6011      	str	r1, [r2, #0]
   c0482:	e7f3      	b.n	c046c <_strtol_l.constprop.0+0xd4>
   c0484:	2430      	movs	r4, #48	; 0x30
   c0486:	2b00      	cmp	r3, #0
   c0488:	d1b1      	bne.n	c03ee <_strtol_l.constprop.0+0x56>
   c048a:	2308      	movs	r3, #8
   c048c:	e7af      	b.n	c03ee <_strtol_l.constprop.0+0x56>
   c048e:	2c30      	cmp	r4, #48	; 0x30
   c0490:	d0a5      	beq.n	c03de <_strtol_l.constprop.0+0x46>
   c0492:	230a      	movs	r3, #10
   c0494:	e7ab      	b.n	c03ee <_strtol_l.constprop.0+0x56>
   c0496:	bf00      	nop
   c0498:	000c2238 	.word	0x000c2238

000c049c <strtol>:
   c049c:	4613      	mov	r3, r2
   c049e:	460a      	mov	r2, r1
   c04a0:	4601      	mov	r1, r0
   c04a2:	4802      	ldr	r0, [pc, #8]	; (c04ac <strtol+0x10>)
   c04a4:	6800      	ldr	r0, [r0, #0]
   c04a6:	f7ff bf77 	b.w	c0398 <_strtol_l.constprop.0>
   c04aa:	bf00      	nop
   c04ac:	2003db04 	.word	0x2003db04

000c04b0 <close>:
   c04b0:	4b02      	ldr	r3, [pc, #8]	; (c04bc <close+0xc>)
   c04b2:	4601      	mov	r1, r0
   c04b4:	6818      	ldr	r0, [r3, #0]
   c04b6:	f000 b8c9 	b.w	c064c <_close_r>
   c04ba:	bf00      	nop
   c04bc:	2003db04 	.word	0x2003db04

000c04c0 <fstat>:
   c04c0:	4b02      	ldr	r3, [pc, #8]	; (c04cc <fstat+0xc>)
   c04c2:	460a      	mov	r2, r1
   c04c4:	4601      	mov	r1, r0
   c04c6:	6818      	ldr	r0, [r3, #0]
   c04c8:	f000 b8d0 	b.w	c066c <_fstat_r>
   c04cc:	2003db04 	.word	0x2003db04

000c04d0 <lseek>:
   c04d0:	4613      	mov	r3, r2
   c04d2:	460a      	mov	r2, r1
   c04d4:	4601      	mov	r1, r0
   c04d6:	4802      	ldr	r0, [pc, #8]	; (c04e0 <lseek+0x10>)
   c04d8:	6800      	ldr	r0, [r0, #0]
   c04da:	f000 b8dd 	b.w	c0698 <_lseek_r>
   c04de:	bf00      	nop
   c04e0:	2003db04 	.word	0x2003db04

000c04e4 <open>:
   c04e4:	b40e      	push	{r1, r2, r3}
   c04e6:	b503      	push	{r0, r1, lr}
   c04e8:	ab03      	add	r3, sp, #12
   c04ea:	4601      	mov	r1, r0
   c04ec:	4806      	ldr	r0, [pc, #24]	; (c0508 <open+0x24>)
   c04ee:	f853 2b04 	ldr.w	r2, [r3], #4
   c04f2:	9301      	str	r3, [sp, #4]
   c04f4:	6800      	ldr	r0, [r0, #0]
   c04f6:	9b04      	ldr	r3, [sp, #16]
   c04f8:	f000 f8e0 	bl	c06bc <_open_r>
   c04fc:	b002      	add	sp, #8
   c04fe:	f85d eb04 	ldr.w	lr, [sp], #4
   c0502:	b003      	add	sp, #12
   c0504:	4770      	bx	lr
   c0506:	bf00      	nop
   c0508:	2003db04 	.word	0x2003db04

000c050c <read>:
   c050c:	4613      	mov	r3, r2
   c050e:	460a      	mov	r2, r1
   c0510:	4601      	mov	r1, r0
   c0512:	4802      	ldr	r0, [pc, #8]	; (c051c <read+0x10>)
   c0514:	6800      	ldr	r0, [r0, #0]
   c0516:	f000 b8e3 	b.w	c06e0 <_read_r>
   c051a:	bf00      	nop
   c051c:	2003db04 	.word	0x2003db04

000c0520 <unlink>:
   c0520:	4b02      	ldr	r3, [pc, #8]	; (c052c <unlink+0xc>)
   c0522:	4601      	mov	r1, r0
   c0524:	6818      	ldr	r0, [r3, #0]
   c0526:	f000 b80d 	b.w	c0544 <_unlink_r>
   c052a:	bf00      	nop
   c052c:	2003db04 	.word	0x2003db04

000c0530 <write>:
   c0530:	4613      	mov	r3, r2
   c0532:	460a      	mov	r2, r1
   c0534:	4601      	mov	r1, r0
   c0536:	4802      	ldr	r0, [pc, #8]	; (c0540 <write+0x10>)
   c0538:	6800      	ldr	r0, [r0, #0]
   c053a:	f000 b813 	b.w	c0564 <_write_r>
   c053e:	bf00      	nop
   c0540:	2003db04 	.word	0x2003db04

000c0544 <_unlink_r>:
   c0544:	b538      	push	{r3, r4, r5, lr}
   c0546:	4d06      	ldr	r5, [pc, #24]	; (c0560 <_unlink_r+0x1c>)
   c0548:	2300      	movs	r3, #0
   c054a:	4604      	mov	r4, r0
   c054c:	4608      	mov	r0, r1
   c054e:	602b      	str	r3, [r5, #0]
   c0550:	f7fb fc6a 	bl	bbe28 <_unlink>
   c0554:	1c43      	adds	r3, r0, #1
   c0556:	d102      	bne.n	c055e <_unlink_r+0x1a>
   c0558:	682b      	ldr	r3, [r5, #0]
   c055a:	b103      	cbz	r3, c055e <_unlink_r+0x1a>
   c055c:	6023      	str	r3, [r4, #0]
   c055e:	bd38      	pop	{r3, r4, r5, pc}
   c0560:	2003e7f0 	.word	0x2003e7f0

000c0564 <_write_r>:
   c0564:	b538      	push	{r3, r4, r5, lr}
   c0566:	4d07      	ldr	r5, [pc, #28]	; (c0584 <_write_r+0x20>)
   c0568:	4604      	mov	r4, r0
   c056a:	4608      	mov	r0, r1
   c056c:	4611      	mov	r1, r2
   c056e:	2200      	movs	r2, #0
   c0570:	602a      	str	r2, [r5, #0]
   c0572:	461a      	mov	r2, r3
   c0574:	f7fb fc20 	bl	bbdb8 <_write>
   c0578:	1c43      	adds	r3, r0, #1
   c057a:	d102      	bne.n	c0582 <_write_r+0x1e>
   c057c:	682b      	ldr	r3, [r5, #0]
   c057e:	b103      	cbz	r3, c0582 <_write_r+0x1e>
   c0580:	6023      	str	r3, [r4, #0]
   c0582:	bd38      	pop	{r3, r4, r5, pc}
   c0584:	2003e7f0 	.word	0x2003e7f0

000c0588 <__register_exitproc>:
   c0588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c058c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c0648 <__register_exitproc+0xc0>
   c0590:	4606      	mov	r6, r0
   c0592:	f8d8 0000 	ldr.w	r0, [r8]
   c0596:	461f      	mov	r7, r3
   c0598:	460d      	mov	r5, r1
   c059a:	4691      	mov	r9, r2
   c059c:	f000 f878 	bl	c0690 <__retarget_lock_acquire_recursive>
   c05a0:	4b25      	ldr	r3, [pc, #148]	; (c0638 <__register_exitproc+0xb0>)
   c05a2:	681c      	ldr	r4, [r3, #0]
   c05a4:	b934      	cbnz	r4, c05b4 <__register_exitproc+0x2c>
   c05a6:	4c25      	ldr	r4, [pc, #148]	; (c063c <__register_exitproc+0xb4>)
   c05a8:	601c      	str	r4, [r3, #0]
   c05aa:	4b25      	ldr	r3, [pc, #148]	; (c0640 <__register_exitproc+0xb8>)
   c05ac:	b113      	cbz	r3, c05b4 <__register_exitproc+0x2c>
   c05ae:	681b      	ldr	r3, [r3, #0]
   c05b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c05b4:	6863      	ldr	r3, [r4, #4]
   c05b6:	2b1f      	cmp	r3, #31
   c05b8:	dd07      	ble.n	c05ca <__register_exitproc+0x42>
   c05ba:	f8d8 0000 	ldr.w	r0, [r8]
   c05be:	f000 f869 	bl	c0694 <__retarget_lock_release_recursive>
   c05c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c05c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c05ca:	b34e      	cbz	r6, c0620 <__register_exitproc+0x98>
   c05cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c05d0:	b988      	cbnz	r0, c05f6 <__register_exitproc+0x6e>
   c05d2:	4b1c      	ldr	r3, [pc, #112]	; (c0644 <__register_exitproc+0xbc>)
   c05d4:	b923      	cbnz	r3, c05e0 <__register_exitproc+0x58>
   c05d6:	f8d8 0000 	ldr.w	r0, [r8]
   c05da:	f000 f85a 	bl	c0692 <__retarget_lock_release>
   c05de:	e7f0      	b.n	c05c2 <__register_exitproc+0x3a>
   c05e0:	f44f 7084 	mov.w	r0, #264	; 0x108
   c05e4:	f7fb fe4c 	bl	bc280 <malloc>
   c05e8:	2800      	cmp	r0, #0
   c05ea:	d0f4      	beq.n	c05d6 <__register_exitproc+0x4e>
   c05ec:	2300      	movs	r3, #0
   c05ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c05f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c05f6:	6863      	ldr	r3, [r4, #4]
   c05f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c05fc:	2201      	movs	r2, #1
   c05fe:	409a      	lsls	r2, r3
   c0600:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c0604:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c0608:	4313      	orrs	r3, r2
   c060a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c060e:	2e02      	cmp	r6, #2
   c0610:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c0614:	bf02      	ittt	eq
   c0616:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c061a:	4313      	orreq	r3, r2
   c061c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c0620:	6863      	ldr	r3, [r4, #4]
   c0622:	f8d8 0000 	ldr.w	r0, [r8]
   c0626:	1c5a      	adds	r2, r3, #1
   c0628:	3302      	adds	r3, #2
   c062a:	6062      	str	r2, [r4, #4]
   c062c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c0630:	f000 f830 	bl	c0694 <__retarget_lock_release_recursive>
   c0634:	2000      	movs	r0, #0
   c0636:	e7c6      	b.n	c05c6 <__register_exitproc+0x3e>
   c0638:	2003e7e8 	.word	0x2003e7e8
   c063c:	2003e75c 	.word	0x2003e75c
   c0640:	00000000 	.word	0x00000000
   c0644:	000bc281 	.word	0x000bc281
   c0648:	2003db68 	.word	0x2003db68

000c064c <_close_r>:
   c064c:	b538      	push	{r3, r4, r5, lr}
   c064e:	4d06      	ldr	r5, [pc, #24]	; (c0668 <_close_r+0x1c>)
   c0650:	2300      	movs	r3, #0
   c0652:	4604      	mov	r4, r0
   c0654:	4608      	mov	r0, r1
   c0656:	602b      	str	r3, [r5, #0]
   c0658:	f7fb fbbe 	bl	bbdd8 <_close>
   c065c:	1c43      	adds	r3, r0, #1
   c065e:	d102      	bne.n	c0666 <_close_r+0x1a>
   c0660:	682b      	ldr	r3, [r5, #0]
   c0662:	b103      	cbz	r3, c0666 <_close_r+0x1a>
   c0664:	6023      	str	r3, [r4, #0]
   c0666:	bd38      	pop	{r3, r4, r5, pc}
   c0668:	2003e7f0 	.word	0x2003e7f0

000c066c <_fstat_r>:
   c066c:	b538      	push	{r3, r4, r5, lr}
   c066e:	4d07      	ldr	r5, [pc, #28]	; (c068c <_fstat_r+0x20>)
   c0670:	2300      	movs	r3, #0
   c0672:	4604      	mov	r4, r0
   c0674:	4608      	mov	r0, r1
   c0676:	4611      	mov	r1, r2
   c0678:	602b      	str	r3, [r5, #0]
   c067a:	f7fb fbb5 	bl	bbde8 <_fstat>
   c067e:	1c43      	adds	r3, r0, #1
   c0680:	d102      	bne.n	c0688 <_fstat_r+0x1c>
   c0682:	682b      	ldr	r3, [r5, #0]
   c0684:	b103      	cbz	r3, c0688 <_fstat_r+0x1c>
   c0686:	6023      	str	r3, [r4, #0]
   c0688:	bd38      	pop	{r3, r4, r5, pc}
   c068a:	bf00      	nop
   c068c:	2003e7f0 	.word	0x2003e7f0

000c0690 <__retarget_lock_acquire_recursive>:
   c0690:	4770      	bx	lr

000c0692 <__retarget_lock_release>:
   c0692:	4770      	bx	lr

000c0694 <__retarget_lock_release_recursive>:
   c0694:	4770      	bx	lr
	...

000c0698 <_lseek_r>:
   c0698:	b538      	push	{r3, r4, r5, lr}
   c069a:	4d07      	ldr	r5, [pc, #28]	; (c06b8 <_lseek_r+0x20>)
   c069c:	4604      	mov	r4, r0
   c069e:	4608      	mov	r0, r1
   c06a0:	4611      	mov	r1, r2
   c06a2:	2200      	movs	r2, #0
   c06a4:	602a      	str	r2, [r5, #0]
   c06a6:	461a      	mov	r2, r3
   c06a8:	f7fb fba6 	bl	bbdf8 <_lseek>
   c06ac:	1c43      	adds	r3, r0, #1
   c06ae:	d102      	bne.n	c06b6 <_lseek_r+0x1e>
   c06b0:	682b      	ldr	r3, [r5, #0]
   c06b2:	b103      	cbz	r3, c06b6 <_lseek_r+0x1e>
   c06b4:	6023      	str	r3, [r4, #0]
   c06b6:	bd38      	pop	{r3, r4, r5, pc}
   c06b8:	2003e7f0 	.word	0x2003e7f0

000c06bc <_open_r>:
   c06bc:	b538      	push	{r3, r4, r5, lr}
   c06be:	4d07      	ldr	r5, [pc, #28]	; (c06dc <_open_r+0x20>)
   c06c0:	4604      	mov	r4, r0
   c06c2:	4608      	mov	r0, r1
   c06c4:	4611      	mov	r1, r2
   c06c6:	2200      	movs	r2, #0
   c06c8:	602a      	str	r2, [r5, #0]
   c06ca:	461a      	mov	r2, r3
   c06cc:	f7fb fb6c 	bl	bbda8 <_open>
   c06d0:	1c43      	adds	r3, r0, #1
   c06d2:	d102      	bne.n	c06da <_open_r+0x1e>
   c06d4:	682b      	ldr	r3, [r5, #0]
   c06d6:	b103      	cbz	r3, c06da <_open_r+0x1e>
   c06d8:	6023      	str	r3, [r4, #0]
   c06da:	bd38      	pop	{r3, r4, r5, pc}
   c06dc:	2003e7f0 	.word	0x2003e7f0

000c06e0 <_read_r>:
   c06e0:	b538      	push	{r3, r4, r5, lr}
   c06e2:	4d07      	ldr	r5, [pc, #28]	; (c0700 <_read_r+0x20>)
   c06e4:	4604      	mov	r4, r0
   c06e6:	4608      	mov	r0, r1
   c06e8:	4611      	mov	r1, r2
   c06ea:	2200      	movs	r2, #0
   c06ec:	602a      	str	r2, [r5, #0]
   c06ee:	461a      	mov	r2, r3
   c06f0:	f7fb fb6a 	bl	bbdc8 <_read>
   c06f4:	1c43      	adds	r3, r0, #1
   c06f6:	d102      	bne.n	c06fe <_read_r+0x1e>
   c06f8:	682b      	ldr	r3, [r5, #0]
   c06fa:	b103      	cbz	r3, c06fe <_read_r+0x1e>
   c06fc:	6023      	str	r3, [r4, #0]
   c06fe:	bd38      	pop	{r3, r4, r5, pc}
   c0700:	2003e7f0 	.word	0x2003e7f0

000c0704 <dynalib_user>:
   c0704:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   c0714:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c0724:	72697620 6c617574 696e6900 61662074      virtual.init fa
   c0734:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   c0744:	74696e69 696c6169 2064657a 61207361     initialized as a
   c0754:	74616720 79617765 74697720 20612068      gateway with a 
   c0764:	69766564 44496563 20666f20 4c007325     deviceID of %s.L
   c0774:	2041526f 69646152 6e69206f 61697469     oRA Radio initia
   c0784:	657a696c 73612064 646f6e20 69252065     lized as node %i
   c0794:	646e6120 64206120 63697665 20444965      and a deviceID 
   c07a4:	2520666f 6f4c0073 52204152 6f696461     of %s.LoRA Radio
   c07b4:	696e6920 6c616974 64657a69 20736120      initialized as 
   c07c4:	75206e61 6e6f636e 75676966 20646572     an unconfigured 
   c07d4:	65646f6e 20692520 20646e61 65642061     node %i and a de
   c07e4:	65636976 6f204449 73252066 63654400     viceID of %s.Dec
   c07f4:	65687069 20646572 61746164 70657220     iphered data rep
   c0804:	2074726f 66206425 206d6f72 65646f6e     ort %d from node
   c0814:	00642520 6373696d 69666e6f 65727567      %d.misconfigure
   c0824:	41002064 6f6e6b63 67656c77 746e656d     d .Acknowlegment
   c0834:	206f7420 6f6e7325 25206564 656d2064      to %snode %d me
   c0844:	67617373 64252065 6974202c 3d20656d     ssage %d, time =
   c0854:	20732520 20646e61 71657266 636e6575      %s and frequenc
   c0864:	64252079 6e696d20 73657475 73655200     y %d minutes.Res
   c0874:	736e6f70 65722065 76696563 73206465     ponse received s
   c0884:	65636375 75667373 20796c6c 7573202d     uccessfully - su
   c0894:	73656363 61722073 25206574 66322e34     ccess rate %4.2f
   c08a4:	73655200 736e6f70 6f6e2065 63612074     .Response not ac
   c08b4:	776f6e6b 6764656c 2d206465 63757320     knowledged - suc
   c08c4:	73736563 74617220 34252065 0066322e     cess rate %4.2f.
   c08d4:	746e6553 73657220 736e6f70 6f742065     Sent response to
   c08e4:	6e657320 54726f73 20657079 6e206425      sensorType %d n
   c08f4:	2065646f 202c6425 656d6974 25203d20     ode %d, time = %
   c0904:	6e612073 72662064 65757165 2079636e     s and frequency 
   c0914:	6d206425 74756e69 73007365 69646e65     %d minutes.sendi
   c0924:	203a676e 52007325 6f707365 2065736e     ng: %s.Response 
   c0934:	65636572 64657669 63757320 73736563     received success
   c0944:	6c6c7566 65520079 6e6f7073 6e206573     fully.Response n
   c0954:	6120746f 6f6e6b63 64656c77 00646567     ot acknowledged.
   c0964:	69636544 72656870 61206465 7472656c     Deciphered alert
   c0974:	70657220 2074726f 6d6f7266 646f6e20      report from nod
   c0984:	64252065 6e655300 63612074 776f6e6b     e %d.Sent acknow
   c0994:	6764656c 746e656d 206f7420 65646f4e     ledgment to Node
   c09a4:	2c642520 6d697420 203d2065 61207325      %d, time = %s a
   c09b4:	6620646e 75716572 79636e65 20642520     nd frequency %d 
   c09c4:	756e696d 00736574 70736552 69646e6f     minutes.Respondi
   c09d4:	7520676e 676e6973 65687420 20732520     ng using the %s 
   c09e4:	7373656d 20656761 65707974 30303000     message type.000
   c09f4:	30303030 30303030 30303030 30303030     0000000000000000
   c0a04:	30303030 6f6e0030 00736564 206e6152     00000.nodes.Ran 
   c0a14:	2074756f 6520666f 6972746e 64007365     out of entries.d
   c0a24:	6e004449 0065646f 2077654e 65646f6e     ID.node.New node
   c0a34:	6c697720 6562206c 73736120 656e6769      will be assigne
   c0a44:	756e2064 7265626d 2c642520 76656420     d number %d, dev
   c0a54:	49656369 666f2044 20732520 20646e61     iceID of %s and 
   c0a64:	65707974 20666f20 616c0033 42007473     type of 3.last.B
   c0a74:	65666675 73252072 52000a20 72757465     uffer %s ..Retur
   c0a84:	676e696e 646e6920 25207865 65520064     ning index %d.Re
   c0a94:	76696563 66206465 206d6f72 69766564     ceived from devi
   c0aa4:	44496563 20666f20 77207325 206c6c69     ceID of %s will 
   c0ab4:	6e616863 6e206567 2065646f 626d756e     change node numb
   c0ac4:	66207265 206d6f72 74206425 6425206f     er from %d to %d
   c0ad4:	696f4a00 6572206e 73657571 72662074     .Join request fr
   c0ae4:	64206d6f 63697665 20444965 77207325     om deviceID %s w
   c0af4:	20687469 65646f6e 20642520 6573202d     ith node %d - se
   c0b04:	6e697474 6c632067 206b636f 20646e61     tting clock and 
   c0b14:	74746573 20676e69 736e6573 7954726f     setting sensorTy
   c0b24:	74206570 6425206f 73654d00 65676173     pe to %d.Message
   c0b34:	67616d20 6e206369 65626d75 666f2072      magic number of
   c0b44:	20642520 20646964 20746f6e 6374616d      %d did not matc
   c0b54:	68742068 614d2065 20636967 626d754e     h the Magic Numb
   c0b64:	69207265 656d206e 79726f6d 20642520     er in memory %d 
   c0b74:	6749202d 69726f6e 4600676e 206d6f72     - Ignoring.From 
   c0b84:	65646f6e 20642520 68746977 73737220     node %d with rss
   c0b94:	64253d69 61202d20 20732520 7373656d     i=%d - a %s mess
   c0ba4:	20656761 6c20666f 74676e65 64252068     age of length %d
   c0bb4:	206e6920 68206425 0073706f 61206557      in %d hops.We a
   c0bc4:	75206572 74616470 20676e69 20656874     re updating the 
   c0bd4:	6c627570 20687369 71657266 636e6575     publish frequenc
   c0be4:	6f742079 20692520 756e696d 00736574     y to %i minutes.
   c0bf4:	6f706552 6e697472 72662067 65757165     Reporting freque
   c0c04:	2079636e 68636e75 65676e61 00000064     ncy unchanged...

000c0c14 <_ZTV16JsonParserStaticILj512ELj25EE>:
	...
   c0c1c:	000b40dd 000b40f1                       .@...@..

000c0c24 <_ZTV14LoRA_Functions>:
	...
   c0c2c:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   c0c3c:	75716572 79636e65 20642520 736e696d     requency %d mins
   c0c4c:	656e202c 65207478 746e6576 206e6920     , next event in 
   c0c5c:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   c0c6c:	20732520 25206f74 69772073 69206874      %s to %s with i
   c0c7c:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   c0c8c:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   c0c9c:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   c0cac:	206f7420 7b007325 76656422 69656369      to %s.{"devicei
   c0cbc:	223a2264 2c227325 6f682220 796c7275     d":"%s", "hourly
   c0ccc:	75253a22 6422202c 796c6961 75253a22     ":%u, "daily":%u
   c0cdc:	7322202c 6f736e65 70797472 253a2265     , "sensortype":%
   c0cec:	22202c64 74746162 22797265 2e34253a     d, "battery":%4.
   c0cfc:	222c6632 3179656b 25223a22 222c2273     2f,"key1":"%s","
   c0d0c:	706d6574 64253a22 7222202c 74657365     temp":%d, "reset
   c0d1c:	253a2273 72222c64 22697373 2c64253a     s":%d,"rssi":%d,
   c0d2c:	736d2220 253a2267 74222c64 73656d69      "msg":%d,"times
   c0d3c:	706d6174 6c253a22 30303075 6255007d     tamp":%lu000}.Ub
   c0d4c:	746f6469 6f4c2d73 4e2d4152 2d65646f     idots-LoRA-Node-
   c0d5c:	55003176 6f646962 4c2d7374 2d41526f     v1.Ubidots-LoRA-
   c0d6c:	65746147 2d796177 69003176 73690073     Gateway-v1.is.is
   c0d7c:	746f6e20 54534500 54444535 2e334d2c      not.EST5EDT,M3.
   c0d8c:	2f302e32 30303a32 2c30303a 2e31314d     2.0/2:00:00,M11.
   c0d9c:	2f302e31 30303a32 0030303a 253a4925     1.0/2:00:00.%I:%
   c0dac:	53253a4d 4c007025 6c61636f 656d6954     M:%S%p.LocalTime
   c0dbc:	696e6920 6c616974 64657a69 6974202c      initialized, ti
   c0dcc:	6920656d 73252073 646e6120 43545220     me is %s and RTC
   c0ddc:	20732520 00746573 61636f4c 6d69546c      %s set.LocalTim
   c0dec:	6f6e2065 6e692074 61697469 657a696c     e not initialize
   c0dfc:	6f732064 6c697720 656e206c 74206465     d so will need t
   c0e0c:	6f43206f 63656e6e 6f742074 72615020     o Connect to Par
   c0e1c:	6c636974 73550065 62207265 6f747475     ticle.User butto
   c0e2c:	7270206e 65737365 74202c64 20747365     n pressed, test 
   c0e3c:	65646f6d 206f4e00 72657375 74756220     mode.No user but
   c0e4c:	206e6f74 68737570 74656420 74686365     ton push detecht
   c0e5c:	6f006465 006e6570 736f6c63 53006465     ed.open.closed.S
   c0e6c:	7065656c 726f6620 20692520 6f636573     leep for %i seco
   c0e7c:	2073646e 6c6c6974 78656e20 76652074     nds till next ev
   c0e8c:	20746e65 25207461 69772073 25206874     ent at %s with %
   c0e9c:	6620696c 20656572 6f6d656d 41007972     li free memory.A
   c0eac:	656b6f77 20746120 77207325 20687469     woke at %s with 
   c0ebc:	20696c25 65657266 6d656d20 0079726f     %li free memory.
   c0ecc:	65746147 20796177 6c207369 65747369     Gateway is liste
   c0edc:	676e696e 726f6620 526f4c20 656d2041     ning for LoRA me
   c0eec:	67617373 61207365 7420646e 70206568     ssages and the p
   c0efc:	206b7261 25207369 25282073 202f2064     ark is %s (%d / 
   c0f0c:	2f206425 29642520 77654e00 79614420     %d / %d).New Day
   c0f1c:	52202d20 74657365 676e6974 65766520      - Resetting eve
   c0f2c:	68747972 00676e69 70656544 776f7020     rything.Deep pow
   c0f3c:	64207265 206e776f 69766564 7b006563     er down device.{
   c0f4c:	646f6e22 3a227365 6e227b5b 2265646f     "nodes":[{"node"
   c0f5c:	222c313a 22444964 6161223a 61616161     :1,"dID":"aaaaaa
   c0f6c:	61616161 61616161 61616161 31616161     aaaaaaaaaaaaaaa1
   c0f7c:	6c222c22 22747361 3636313a 35333837     ","last":1667835
   c0f8c:	2c393834 70797422 313a2265 007d5d7d     489,"type":1}]}.
   c0f9c:	65736552 67697474 646f4e20 20444965     Resettig NodeID 
   c0fac:	666e6f63 74206769 25203a6f 20410073     config to: %s.A 
   c0fbc:	2077656e 20796164 6572202d 74746573     new day - resett
   c0fcc:	20676e69 72657665 69687479 0000676e     ing everything..

000c0fdc <_ZTV8MB85RC64>:
	...
   c0fe4:	000b58e1 000b58f5 000b8f5d 000b8ff3     .X...X..].......
   c0ff4:	000b9075                                u...

000c0ff8 <_ZTV10nodeIDData>:
	...
   c1000:	000b5c01 000b5941 000b591f 000bb7dd     .\..AY...Y......
   c1010:	000bb805 000bb965 000bb9fd 000b59e1     ....e........Y..
   c1020:	000b59f5                                .Y..

000c1024 <_ZTV13sysStatusData>:
	...
   c102c:	000b5a65 000b5941 000b591f 000bb7dd     eZ..AY...Y......
   c103c:	000bb805 000bb965 000bb9fd 000b5991     ....e........Y..
   c104c:	000b59a5                                .Y..

000c1050 <_ZTV17currentStatusData>:
	...
   c1058:	000b5a7f 000b5941 000b591f 000bb7dd     .Z..AY...Y......
   c1068:	000bb805 000bb965 000bb9fd 000b59b9     ....e........Y..
   c1078:	000b59cd 74696e49 7a696c61 20676e69     .Y..Initalizing 
   c1088:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   c1098:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   c10a8:	666e6f43 00006769                       Config..

000c10b0 <BLUE_LED>:
   c10b0:	                                         ..

000c10b2 <BUTTON_PIN>:
   c10b2:	                                         ..

000c10b4 <RFM95_CS>:
   c10b4:	                                         ..

000c10b6 <RFM95_INT>:
   c10b6:	                                         ..

000c10b8 <TMP36_SENSE_PIN>:
   c10b8:	6553000f 6e697474 61762067 7365756c     ..Setting values
   c10c8:	726f6620 65687420 74614720 79617765      for the Gateway
   c10d8:	20752500 756e696d 00736572 2500414e     .%u minures.NA.%
   c10e8:	30303a69 72655600 6e6f7a69 6b6e5500     i:00.Verizon.Unk
   c10f8:	6e776f6e 746f4e00 61684320 6e696772     nown.Not Chargin
   c1108:	68430067 65677261 69440064 61686373     g.Charged.Discha
   c1118:	6e696772 61460067 00746c75 6f636944     rging.Fault.Dico
   c1128:	63656e6e 00646574 74696e49 696c6169     nnected.Initiali
   c1138:	676e697a 72615020 6c636974 75662065     zing Particle fu
   c1148:	6974636e 20736e6f 20646e61 69726176     nctions and vari
   c1158:	656c6261 65520073 7361656c 69530065     ables.Release.Si
   c1168:	6c616e67 61747300 664f6574 00676843     gnal.stateOfChg.
   c1178:	74746142 43797265 65746e6f 52007478     BatteryContext.R
   c1188:	726f7065 676e6974 65724620 6e657571     eporting Frequen
   c1198:	53007963 43204d49 00647261 6e65704f     cy.SIM Card.Open
   c11a8:	6d695420 6c430065 2065736f 656d6954      Time.Close Time
   c11b8:	74655300 65724620 6e657571 53007963     .Set Frequency.S
   c11c8:	57207465 20656b61 656d6954 74655300     et Wake Time.Set
   c11d8:	656c5320 54207065 00656d69 6f706552      Sleep Time.Repo
   c11e8:	66207472 75716572 79636e65 6c697720     rt frequency wil
   c11f8:	6562206c 74657320 206f7420 6d206925     l be set to %i m
   c1208:	74756e69 61207365 656e2074 4c207478     inutes at next L
   c1218:	2041526f 6e6e6f63 00746365 656b6157     oRA connect.Wake
   c1228:	6d697420 65732065 6f742074 00692520      time set to %i.
   c1238:	65656c53 69742070 7320656d 74207465     Sleep time set t
   c1248:	6925206f 74655300 206f7420 69726556     o %i.Set to Veri
   c1258:	206e6f7a 004d4953 65646f4d 74655300     zon SIM.Mode.Set
   c1268:	206f7420 74726150 656c6369 4d495320      to Particle SIM
   c1278:	206e4900 20656874 63736964 656e6e6f     .In the disconne
   c1288:	66207463 206d6f72 74726150 656c6369     ct from Particle
   c1298:	6e756620 6f697463 6146006e 64656c69      function.Failed
   c12a8:	206f7420 63736964 656e6e6f 66207463      to disconnect f
   c12b8:	206d6f72 74726150 656c6369 73694400     rom Particle.Dis
   c12c8:	6e6e6f63 65746365 72662064 50206d6f     connected from P
   c12d8:	69747261 20656c63 25206e69 65732069     article in %i se
   c12e8:	646e6f63 61460073 64656c69 206f7420     conds.Failed to 
   c12f8:	6e727574 66666f20 65687420 6c654320     turn off the Cel
   c1308:	616c756c 6f6d2072 006d6564 6e727554     lular modem.Turn
   c1318:	6f206465 74206666 63206568 756c6c65     ed off the cellu
   c1328:	2072616c 65646f6d 6e69206d 20692520     lar modem in %i 
   c1338:	6f636573 0073646e                       seconds.

000c1340 <_ZTVN5spark10LogHandlerE>:
	...
   c1350:	000b40a5 000b6171                       .@..qa..

000c1358 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c1360:	000b61e9 000b621d 000bdeed 000b6173     .a...b......sa..
   c1370:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   c1380:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   c1390:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   c13a0:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   c13b0:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   c13c0:	2566302e 41002025 72657373 6e6f6974     .0f%% .Assertion
   c13d0:	6c696146 20657275 20637273 73202626     Failure src && s
   c13e0:	3e2d6372 6c6c6163 6b636162 20692500     rc->callback.%i 
   c13f0:	00000043 000c10f5 000c1370 000c1375     C.......p...u...
   c1400:	000c137a 000c137e 000c1383 000c1388     z...~...........
   c1410:	000c138c 000c1397 000c13a2 6c696166     ............fail
   c1420:	74206465 6572206f 72206461 64416765     ed to read regAd
   c1430:	253d7264 20783230 6e756f63 75253d74     dr=%02x count=%u
   c1440:	69616600 2064656c 72206f74 20646165     .failed to read 
   c1450:	41676572 3d726464 78323025 61747320     regAddr=%02x sta
   c1460:	64253d74 554f4600 69642054 6f6e2064     t=%d.FOUT did no
   c1470:	6f672074 47494820 6f6e0048 65642074     t go HIGH.not de
   c1480:	74636574 66006465 656c6961 6f742064     tected.failed to
   c1490:	69727720 72206574 64416765 253d7264      write regAddr=%
   c14a0:	20783230 74617473 0064253d 57746573     02x stat=%d.setW
   c14b0:	25205444 61770064 64686374 6320676f     DT %d.watchdog c
   c14c0:	7261656c 62206465 75736552 253d746c     leared bResult=%
   c14d0:	61770064 64686374 7320676f 66207465     d.watchdog set f
   c14e0:	5372756f 3d736365 62206425 75736552     ourSecs=%d bResu
   c14f0:	253d746c 41570064 44484354 4400474f     lt=%d.WATCHDOG.D
   c1500:	5f504545 45574f50 4f445f52 43004e57     EEP_POWER_DOWN.C
   c1510:	544e554f 4e574f44 4d49545f 41005245     OUNTDOWN_TIMER.A
   c1520:	4d52414c 69616600 6572756c 206e6920     LARM.failure in 
   c1530:	61647075 61576574 6552656b 6e6f7361     updateWakeReason
   c1540:	00642520 656b6177 61657220 206e6f73      %d.wake reason 
   c1550:	7325203d 69616600 6572756c 206e6920     = %s.failure in 
   c1560:	43746573 746e756f 6e776f64 656d6954     setCountdownTime
   c1570:	64252072 69616600 6572756c 206e6920     r %d.failure in 
   c1580:	70656564 65776f50 776f4472 6425206e     deepPowerDown %d
   c1590:	47455200 454c535f 435f5045 3d4c5254     .REG_SLEEP_CTRL=
   c15a0:	32257830 69640078 74276e64 776f7020     0x%2x.didn't pow
   c15b0:	64207265 006e776f 64343025 3230252d     er down.%04d-%02
   c15c0:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   c15d0:	3230253a 65670064 63745274 6d547341     :%02d.getRtcAsTm
   c15e0:	00732520 52746573 73416374 25206d54      %s.setRtcAsTm %
   c15f0:	61660073 72756c69 6e692065 74657320     s.failure in set
   c1600:	46637452 546d6f72 6425206d 74657300     RtcFromTm %d.set
   c1610:	43545220 6f726620 6c63206d 2064756f      RTC from cloud 
   c1620:	73007325 73207465 65747379 6c63206d     %s.set system cl
   c1630:	206b636f 6d6f7266 43545220 00732520     ock from RTC %s.
   c1640:	6c696166 74206465 6564206f 74636574     failed to detect
   c1650:	31424120 00353038 2e707061 38316261      AB1805.app.ab18
   c1660:	00003530                                05..

000c1664 <_ZTV6AB1805>:
	...
   c166c:	000b6b41 000b6b43 000b71b9 000b723f     Ak..Ck...q..?r..
   c167c:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c168c:	004b5268                                hRK.

000c1690 <_ZTV19BackgroundPublishRK>:
	...
   c1698:	000b7775 000b7791 3025755c 00005834     uw...w..\u%04X..

000c16a8 <_ZTV10JsonBuffer>:
	...
   c16b0:	000b7a75 000b7a91                       uz...z..

000c16b8 <_ZTV10JsonParser>:
	...
   c16c0:	000b7af5 000b7b19                       .z...{..

000c16c8 <_ZTV10JsonWriter>:
	...
   c16d0:	000b7aa5 000b7ab9                       .z...z..

000c16d8 <_ZTV12JsonModifier>:
	...
   c16e0:	000b7acd 000b7ae1 253a6425 64253a64     .z...z..%d:%d:%d
   c16f0:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c1700:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c1710:	302b2500 253a6433 00753230              .%+03d:%02u.

000c171c <_ZTV9LocalTime>:
	...
   c1724:	000b861d 000b8635                       ....5...

000c172c <_ZTV12LocalTimeHMS>:
	...
   c1734:	000b85cd 000b85d1                       ........

000c173c <_ZTV15LocalTimeChange>:
	...
   c1744:	000b85cf 000b85df                       ........

000c174c <_ZTV22LocalTimePosixTimezone>:
	...
   c1754:	000b85ed 000b8609                       ........

000c175c <_ZTV6MB85RC>:
	...
   c1764:	000b8f1d 000b8f1f 000b8f5d 000b8ff3     ........].......
   c1774:	000b9075 656c6966 3d6d754e 73206425     u...fileNum=%d s
   c1784:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c1794:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c17a4:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c17b4:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c17c4:	64657470 65766520 6e20746e 20656d61     pted event name 
   c17d4:	6420726f 00617461 64616572 75657551     or data.readQueu
   c17e4:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c17f4:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c1804:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c1814:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c1824:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c1834:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c1844:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c1854:	76652064 20746e65 72006425 74657365     d event %d.reset
   c1864:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c1874:	746e6576 6173202c 66206576 73656c69     vent, save files
   c1884:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c1894:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c18a4:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c18b4:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c18c4:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c18d4:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c18e4:	20736920 75716572 64657269 62757000      is required.pub
   c18f4:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c1904:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c1914:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c1924:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c1934:	72656772 61687420 616d206e 69735f78     rger than max_si
   c1944:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c1954:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c1964:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c1974:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c1984:	00657565 6c627570 20687369 63637573     eue.publish succ
   c1994:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c19a4:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c19b4:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c19c4:	206f7420 656c6966 66612073 20726574      to files after 
   c19d4:	6c627570 20687369 6c696166 00657275     publish failure.
   c19e4:	2e707061 71627570 00000000              app.pubq....

000c19f0 <_ZTV17PublishQueuePosix>:
	...
   c19f8:	000b99a9 000b9c65 000b9c89              ....e.......

000c1a04 <_ZTV15RHGenericDriver>:
	...
   c1a14:	000b9da9 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c1a24:	000b40a5 000b9e0b 000b9dad 000b9e5b     .@..........[...
   c1a34:	000b9e29 000b9e7f 000b9db7 000b9dbf     )...............
   c1a44:	000b9dc3 000b9dc7 000b9dcb 000b9dcf     ................
   c1a54:	000b9dbb 000b9ddb 000b9ddf 000b9de3     ................
   c1a64:	000b9de7 000b9deb 000b9df1 000b9df5     ................
   c1a74:	000b9db7 000b9df9 000b9dff 000b9e05     ................

000c1a84 <_ZTV12RHGenericSPI>:
	...
   c1a8c:	000b40a5 000b9edd 000b9edf 000b40a5     .@...........@..
   c1a9c:	000b40a5 000b9ee7 000b9eeb 000b9eef     .@..............
   c1aac:	000b9ee1 000b9ee3 000b9ee5 61666564     ............defa
   c1abc:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c1acc:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c1adc:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c1aec:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c1afc <_ZTVN8particle11SPISettingsE>:
	...
   c1b04:	000b9f35 000b9f09 000b9f0b              5...........

000c1b10 <_ZTV13RHHardwareSPI>:
	...
   c1b18:	000b9fe9 000b9ffd 000ba00b 000ba019     ................
   c1b28:	000ba085 000b9ee7 000b9eeb 000b9eef     ................
   c1b38:	000ba093 000ba0a7 000ba0b5              ............

000c1b44 <_ZTV6RHMesh>:
	...
   c1b4c:	000ba181 000ba429 000ba0e1 000ba0cd     ....)...........

000c1b5c <_ZTV8RHRouter>:
	...
   c1b64:	000ba695 000ba6d9                       ........

000c1b6c <_ZTV11RHSPIDriver>:
	...
   c1b7c:	000ba975 000b40a5 000b40a5 000b40a5     u....@...@...@..
   c1b8c:	000b40a5 000b9e0b 000b9dad 000b9e5b     .@..........[...
   c1b9c:	000b9e29 000b9e7f 000b9db7 000b9dbf     )...............
   c1bac:	000b9dc3 000b9dc7 000b9dcb 000b9dcf     ................
   c1bbc:	000b9dbb 000b9ddb 000b9ddf 000b9de3     ................
   c1bcc:	000b9de7 000b9deb 000b9df1 000b9df5     ................
   c1bdc:	000b9db7 000b9df9 000b9dff 000b9e05     ................
   c1bec:	000ba9a1 000ba9ab                       ........

000c1bf4 <_ZL18MODEM_CONFIG_TABLE>:
   c1bf4:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c1c04 <_ZTV7RH_RF95>:
	...
   c1c0c:	000bab13 000bab4b 000bb021 000baeb7     ....K...!.......
   c1c1c:	000bab81 000baeff 000bab0f 000b9e0b     ................
   c1c2c:	000b9dad 000b9e5b 000b9e29 000b9e7f     ....[...).......
   c1c3c:	000bab15 000b9dbf 000b9dc3 000b9dc7     ................
   c1c4c:	000b9dcb 000b9dcf 000b9dbb 000b9ddb     ................
   c1c5c:	000b9ddf 000b9de3 000b9de7 000b9deb     ................
   c1c6c:	000b9df1 000b9df5 000bab5b 000b9df9     ........[.......
   c1c7c:	000b9dff 000b9e05 000ba9a1 000ba9ab     ................
   c1c8c:	000bab0b 64383025 72002f00 766f6d65     ....%08d./.remov
   c1c9c:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c1cac:	20646e61 61207369 72696420 6f746365     and is a directo
   c1cbc:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c1ccc:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c1cdc:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c1cec:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c1cfc:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c1d0c:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c1d1c:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c1d2c:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c1d3c:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c1d4c:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c1d5c:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c1d6c:	74657220 656e7275 64252064 70706100      returned %d.app
   c1d7c:	7165732e 656c6966 00000000              .seqfile....

000c1d88 <_ZTV14SequentialFile>:
	...
   c1d90:	000bb47d 000bb4a9 000bb129 3a746f67     }.......)...got:
   c1da0:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c1db0:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c1dc0:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c1dd0:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c1de0:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c1df0:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c1e00 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c1e08:	000bb7d7 000bb823 000bb7d5 000bb7dd     ....#...........
   c1e18:	000bb805 000bb965 000bb9fd              ....e.......

000c1e24 <_ZTVN5spark13CellularClassE>:
	...
   c1e2c:	000bc46b 000bc461 000bc457 000bc40d     k...a...W.......
   c1e3c:	000bc44b 000bc43f 000be245 000be24d     K...?...E...M...
   c1e4c:	000bc433 000bc42b 000bc421 000bc417     3...+...!.......
   c1e5c:	000be27d                                }...

000c1e60 <_ZTV14CellularSignal>:
	...
   c1e68:	000bc4f9 000bc55d 000bc4fb 000bc56d     ....].......m...
   c1e78:	000bc5a1 000bc5cd 000bc601 000bc521     ............!...
   c1e88:	000bc4ff 000bc51b fffffffc 00000000     ................
   c1e98:	000bc555                                U...

000c1e9c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1ea4:	000bc645 000bc64b 000bc689 000bc659     E...K.......Y...
   c1eb4:	000bc647                                G...

000c1eb8 <_ZTVN5spark13EthernetClassE>:
	...
   c1ec0:	000bcc53 000bcc49 000bcc3f 000bcc35     S...I...?...5...
   c1ed0:	000bcc29 000bcc1d 000be245 000be24d     ).......E...M...
   c1ee0:	000bcc11 000bcc09 000bcbff 000bcbf5     ................
   c1ef0:	000be27d                                }...

000c1ef4 <_ZTV7TwoWire>:
	...
   c1efc:	000bcd23 000bcd6d 000bcd45 000bcd25     #...m...E...%...
   c1f0c:	000bcd4d 000bcd55 000bcd5d 000bcd65     M...U...]...e...

000c1f1c <_ZTV9IPAddress>:
	...
   c1f24:	000bcf05 000bcef5 000bcef7 34302575     ............u%04
   c1f34:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c1f44:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c1f54:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c1f64:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c1f74:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   c1f84:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   c1f94:	65646f63 74656400 006c6961              code.detail.

000c1fa0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c1fa8:	000bd3b1 000bd3d7 000bd395 000bd013     ................

000c1fb8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c1fc0:	000bd795 000bd7ad 000bdeed 000b6173     ............sa..

000c1fd0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c1fd8:	000bd7c1 000bd7d5 000be091 000bd39d     ................

000c1fe8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c1ff0:	000bd3af 000bd3e5 000bde51 000bd39f     ........Q.......

000c2000 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c2008:	000bd3ad 000bd3f3 000bd6fd 000bd415     ................

000c2018 <_ZTVN5spark12NetworkClassE>:
	...
   c2020:	000be205 000be20f 000be219 000be223     ............#...
   c2030:	000be22d 000be239 000be245 000be24d     -...9...E...M...
   c2040:	000be255 000be261 000be269 000be273     U...a...i...s...
   c2050:	000be27d 006e616e 00666e69 0066766f     }...nan.inf.ovf.

000c2060 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c2060:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c2070:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c2080:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c2090:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c20a0:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c20b0:	00000065                                e...

000c20b4 <_ZTV11USARTSerial>:
	...
   c20bc:	000bf109 000bf175 000bf14d 000be4cd     ....u...M.......
   c20cc:	000bf11d 000bf139 000bf12b 000bf147     ....9...+...G...
   c20dc:	000bf10b 000bf10f                       ........

000c20e4 <_ZTV9USBSerial>:
	...
   c20ec:	000bf1c7 000bf22f 000bf205 000be4cd     ..../...........
   c20fc:	000bf1f7 000bf1c9 000bf1d9 000bf229     ............)...
   c210c:	000bf1e9 000bf1c1                       ........

000c2114 <_ZSt7nothrow>:
   c2114:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c2124:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c2135 <day_name.1>:
   c2135:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c2145:	61536972                                 riSat

000c214a <mon_name.0>:
   c214a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c215a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c216a:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c217a:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c218a:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c219a:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c21aa:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c21ba:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c21ca:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c21da:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c21ea:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c21fa:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c220a:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c221a:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c222a:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c2237 <_ctype_>:
   c2237:	20202000 20202020 28282020 20282828     .         ((((( 
   c2247:	20202020 20202020 20202020 20202020                     
   c2257:	10108820 10101010 10101010 10101010      ...............
   c2267:	04040410 04040404 10040404 10101010     ................
   c2277:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c2287:	01010101 01010101 01010101 10101010     ................
   c2297:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c22a7:	02020202 02020202 02020202 10101010     ................
   c22b7:	00000020 00000000 00000000 00000000      ...............
	...

000c2338 <link_const_variable_data_end>:
   c2338:	000b47e9 	.word	0x000b47e9
   c233c:	000b50f5 	.word	0x000b50f5
   c2340:	000b6059 	.word	0x000b6059
   c2344:	000b6725 	.word	0x000b6725
   c2348:	000b6b35 	.word	0x000b6b35
   c234c:	000b7659 	.word	0x000b7659
   c2350:	000b9c55 	.word	0x000b9c55
   c2354:	000ba0bd 	.word	0x000ba0bd
   c2358:	000bb7c5 	.word	0x000bb7c5
   c235c:	000bc3fd 	.word	0x000bc3fd
   c2360:	000bc4c9 	.word	0x000bc4c9
   c2364:	000bcc5d 	.word	0x000bcc5d
   c2368:	000bdedd 	.word	0x000bdedd
   c236c:	000be355 	.word	0x000be355
   c2370:	000be7bd 	.word	0x000be7bd
   c2374:	000bedbd 	.word	0x000bedbd
   c2378:	000bf0f5 	.word	0x000bf0f5

000c237c <link_constructors_end>:
   c237c:	00000000 	.word	0x00000000
