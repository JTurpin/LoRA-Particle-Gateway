
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.0/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d330  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1350  000c1350  00011350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1374  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dcf8  000c1378  0002dcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000904  2003def0  2003def0  0003def0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c156c  000c156c  0003156c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c1598  000c1598  00031598  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028dede  00000000  00000000  0003159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c1a1  00000000  00000000  002bf47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00069133  00000000  00000000  002eb61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004d08  00000000  00000000  0035474e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011cc8  00000000  00000000  00359456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ec47  00000000  00000000  0036b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000928b8  00000000  00000000  003c9d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cfae  00000000  00000000  0045c61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000e63c  00000000  00000000  005c95cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00b f92f 	bl	bf294 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00b f951 	bl	bf2e4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dcf8 	.word	0x2003dcf8
   b404c:	000c1378 	.word	0x000c1378
   b4050:	2003deec 	.word	0x2003deec
   b4054:	2003def0 	.word	0x2003def0
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00a fa71 	bl	be548 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1304 	.word	0x000c1304
   b4080:	000c1348 	.word	0x000c1348

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b976 	b.w	b5374 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fe11 	bl	b4cb0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00a ba11 	b.w	be4b8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f007 b9d7 	b.w	bb448 <malloc>

000b409a <_Znaj>:
   b409a:	f007 b9d5 	b.w	bb448 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f007 b9db 	b.w	bb458 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f007 f860 	bl	bb170 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bad11 	.word	0x000bad11
   b40b8:	000bf8b8 	.word	0x000bf8b8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b500      	push	{lr}
   b40e0:	b08c      	sub	sp, #48	; 0x30
   b40e2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40ec:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ee:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40f2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	6801      	ldr	r1, [r0, #0]
   b40f6:	aa04      	add	r2, sp, #16
   b40f8:	201e      	movs	r0, #30
    attr.flags = 0;
   b40fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fe:	f007 f847 	bl	bb190 <log_message_v>
}
   b4102:	b00c      	add	sp, #48	; 0x30
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b410c:	b510      	push	{r4, lr}
    if (!_instance) {
   b410e:	4c06      	ldr	r4, [pc, #24]	; (b4128 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	b933      	cbnz	r3, b4122 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4114:	2004      	movs	r0, #4
   b4116:	f7ff ffbe 	bl	b4096 <_Znwj>
   b411a:	b108      	cbz	r0, b4120 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b411c:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN14LoRA_Functions8instanceEv+0x20>)
   b411e:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4120:	6020      	str	r0, [r4, #0]
}
   b4122:	6820      	ldr	r0, [r4, #0]
   b4124:	bd10      	pop	{r4, pc}
   b4126:	bf00      	nop
   b4128:	2003def4 	.word	0x2003def4
   b412c:	000bfcb8 	.word	0x000bfcb8

000b4130 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4130:	b510      	push	{r4, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4132:	481a      	ldr	r0, [pc, #104]	; (b419c <_ZN14LoRA_Functions5setupEb+0x6c>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4134:	b086      	sub	sp, #24
	if (!manager.init()) {
   b4136:	f005 fb6a 	bl	b980e <_ZN8RHRouter4initEv>
   b413a:	4604      	mov	r4, r0
   b413c:	b930      	cbnz	r0, b414c <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b413e:	4918      	ldr	r1, [pc, #96]	; (b41a0 <_ZN14LoRA_Functions5setupEb+0x70>)
   b4140:	4818      	ldr	r0, [pc, #96]	; (b41a4 <_ZN14LoRA_Functions5setupEb+0x74>)
   b4142:	f7ff ffcb 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
	
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
	return true;
}
   b4146:	4620      	mov	r0, r4
   b4148:	b006      	add	sp, #24
   b414a:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b414c:	ed9f 0a16 	vldr	s0, [pc, #88]	; b41a8 <_ZN14LoRA_Functions5setupEb+0x78>
   b4150:	4816      	ldr	r0, [pc, #88]	; (b41ac <_ZN14LoRA_Functions5setupEb+0x7c>)
   b4152:	f005 fe55 	bl	b9e00 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4156:	4815      	ldr	r0, [pc, #84]	; (b41ac <_ZN14LoRA_Functions5setupEb+0x7c>)
   b4158:	2200      	movs	r2, #0
   b415a:	2117      	movs	r1, #23
   b415c:	f005 ffca 	bl	ba0f4 <_ZN7RH_RF9510setTxPowerEab>
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4160:	4813      	ldr	r0, [pc, #76]	; (b41b0 <_ZN14LoRA_Functions5setupEb+0x80>)
   b4162:	f004 fe66 	bl	b8e32 <_ZN10RHDatagram11thisAddressEv>
   b4166:	b180      	cbz	r0, b418a <_ZN14LoRA_Functions5setupEb+0x5a>
   b4168:	4811      	ldr	r0, [pc, #68]	; (b41b0 <_ZN14LoRA_Functions5setupEb+0x80>)
   b416a:	f004 fe62 	bl	b8e32 <_ZN10RHDatagram11thisAddressEv>
   b416e:	9001      	str	r0, [sp, #4]
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4170:	a802      	add	r0, sp, #8
   b4172:	f007 f8d1 	bl	bb318 <spark_deviceID>
   b4176:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b417a:	490e      	ldr	r1, [pc, #56]	; (b41b4 <_ZN14LoRA_Functions5setupEb+0x84>)
   b417c:	4809      	ldr	r0, [pc, #36]	; (b41a4 <_ZN14LoRA_Functions5setupEb+0x74>)
   b417e:	f7ff ffad 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4182:	a802      	add	r0, sp, #8
   b4184:	f009 fcca 	bl	bdb1c <_ZN6StringD1Ev>
   b4188:	e7dd      	b.n	b4146 <_ZN14LoRA_Functions5setupEb+0x16>
   b418a:	a802      	add	r0, sp, #8
   b418c:	f007 f8c4 	bl	bb318 <spark_deviceID>
   b4190:	9a02      	ldr	r2, [sp, #8]
   b4192:	4909      	ldr	r1, [pc, #36]	; (b41b8 <_ZN14LoRA_Functions5setupEb+0x88>)
   b4194:	4803      	ldr	r0, [pc, #12]	; (b41a4 <_ZN14LoRA_Functions5setupEb+0x74>)
   b4196:	f7ff ffa1 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b419a:	e7f2      	b.n	b4182 <_ZN14LoRA_Functions5setupEb+0x52>
   b419c:	2003e0ac 	.word	0x2003e0ac
   b41a0:	000bf8cd 	.word	0x000bf8cd
   b41a4:	2003e654 	.word	0x2003e654
   b41a8:	4464c000 	.word	0x4464c000
   b41ac:	2003df7c 	.word	0x2003df7c
   b41b0:	2003e0b0 	.word	0x2003e0b0
   b41b4:	000bf8d9 	.word	0x000bf8d9
   b41b8:	000bf915 	.word	0x000bf915

000b41bc <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b41bc:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b41be:	4c06      	ldr	r4, [pc, #24]	; (b41d8 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b41c0:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b41c2:	f10d 0203 	add.w	r2, sp, #3
   b41c6:	a901      	add	r1, sp, #4
   b41c8:	4620      	mov	r0, r4
   b41ca:	f005 fd95 	bl	b9cf8 <_ZN7RH_RF954recvEPhS0_>
   b41ce:	2800      	cmp	r0, #0
   b41d0:	d1f7      	bne.n	b41c2 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41d2:	b040      	add	sp, #256	; 0x100
   b41d4:	bd10      	pop	{r4, pc}
   b41d6:	bf00      	nop
   b41d8:	2003df7c 	.word	0x2003df7c

000b41dc <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b41dc:	4801      	ldr	r0, [pc, #4]	; (b41e4 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41de:	f005 bd78 	b.w	b9cd2 <_ZN7RH_RF955sleepEv>
   b41e2:	bf00      	nop
   b41e4:	2003df7c 	.word	0x2003df7c

000b41e8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {
   b41e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b41ea:	4c27      	ldr	r4, [pc, #156]	; (b4288 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa0>)
   b41ec:	f001 fb1c 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b41f0:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b41f4:	ba49      	rev16	r1, r1
   b41f6:	b289      	uxth	r1, r1
   b41f8:	f001 fcf2 	bl	b5be0 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b41fc:	f001 fb14 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4200:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4204:	ba49      	rev16	r1, r1
   b4206:	b289      	uxth	r1, r1
   b4208:	f001 fcf0 	bl	b5bec <_ZN17currentStatusData14set_dailyCountEt>
	current.set_internalTempC(buf[7]);
   b420c:	f001 fb0c 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4210:	79e1      	ldrb	r1, [r4, #7]
   b4212:	f001 fc60 	bl	b5ad6 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[8]);
   b4216:	f001 fb07 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b421a:	4605      	mov	r5, r0
   b421c:	7a20      	ldrb	r0, [r4, #8]
   b421e:	f00a fc75 	bl	beb0c <__aeabi_ui2d>
   b4222:	ec41 0b10 	vmov	d0, r0, r1
   b4226:	4628      	mov	r0, r5
   b4228:	f001 fb3a 	bl	b58a0 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[9]);
   b422c:	f001 fafc 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4230:	7a61      	ldrb	r1, [r4, #9]
   b4232:	f001 fc56 	bl	b5ae2 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[10]);
   b4236:	f001 faf7 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b423a:	7aa1      	ldrb	r1, [r4, #10]
   b423c:	f001 fc57 	bl	b5aee <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageNumber(buf[11]);
   b4240:	f001 faf2 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4244:	7ae1      	ldrb	r1, [r4, #11]
   b4246:	f001 fc58 	bl	b5afa <_ZN17currentStatusData17set_messageNumberEh>
	current.set_RSSI(driver.lastRssi());
   b424a:	f001 faed 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b424e:	4604      	mov	r4, r0
   b4250:	480e      	ldr	r0, [pc, #56]	; (b428c <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa4>)
   b4252:	f004 fe86 	bl	b8f62 <_ZN15RHGenericDriver8lastRssiEv>
   b4256:	b281      	uxth	r1, r0
   b4258:	4620      	mov	r0, r4
   b425a:	f001 fcbb 	bl	b5bd4 <_ZN17currentStatusData8set_RSSIEt>

	Log.info("Deciphered data report %d from node %d", current.get_messageNumber(), current.get_nodeNumber());
   b425e:	f001 fae3 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4262:	f001 fbf4 	bl	b5a4e <_ZNK17currentStatusData17get_messageNumberEv>
   b4266:	9001      	str	r0, [sp, #4]
   b4268:	f001 fade 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b426c:	f001 fbdb 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4270:	9a01      	ldr	r2, [sp, #4]
   b4272:	4907      	ldr	r1, [pc, #28]	; (b4290 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xa8>)
   b4274:	4603      	mov	r3, r0
   b4276:	4807      	ldr	r0, [pc, #28]	; (b4294 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xac>)
   b4278:	f7ff ff30 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = DATA_ACK;		// Prepare to respond
   b427c:	4b06      	ldr	r3, [pc, #24]	; (b4298 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0xb0>)
   b427e:	2204      	movs	r2, #4

	return true;
}
   b4280:	2001      	movs	r0, #1
	lora_state = DATA_ACK;		// Prepare to respond
   b4282:	701a      	strb	r2, [r3, #0]
}
   b4284:	b003      	add	sp, #12
   b4286:	bd30      	pop	{r4, r5, pc}
   b4288:	2003df00 	.word	0x2003df00
   b428c:	2003df7c 	.word	0x2003df7c
   b4290:	000bf94f 	.word	0x000bf94f
   b4294:	2003e654 	.word	0x2003e654
   b4298:	2003def0 	.word	0x2003def0

000b429c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:

bool LoRA_Functions::acknowledgeDataReportGateway() {
   b429c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	attempts++;
   b42a0:	4d4b      	ldr	r5, [pc, #300]	; (b43d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x134>)
     
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b42a2:	4c4c      	ldr	r4, [pc, #304]	; (b43d4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>)
	attempts++;
   b42a4:	682b      	ldr	r3, [r5, #0]
bool LoRA_Functions::acknowledgeDataReportGateway() {
   b42a6:	b087      	sub	sp, #28
	attempts++;
   b42a8:	3301      	adds	r3, #1
   b42aa:	602b      	str	r3, [r5, #0]
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b42ac:	f009 ffd5 	bl	be25a <_ZN9TimeClass3nowEv>
   b42b0:	1600      	asrs	r0, r0, #24
   b42b2:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b42b4:	f009 ffd1 	bl	be25a <_ZN9TimeClass3nowEv>
   b42b8:	1400      	asrs	r0, r0, #16
   b42ba:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b42bc:	f009 ffcd 	bl	be25a <_ZN9TimeClass3nowEv>
   b42c0:	1200      	asrs	r0, r0, #8
   b42c2:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b42c4:	f009 ffc9 	bl	be25a <_ZN9TimeClass3nowEv>
   b42c8:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b42ca:	f001 fa5d 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b42ce:	f001 fc49 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42d2:	0a00      	lsrs	r0, r0, #8
   b42d4:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b42d6:	f001 fa57 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b42da:	f001 fc43 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42de:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_messageNumber();			 // Message number
   b42e0:	f001 faa2 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b42e4:	f001 fbb3 	bl	b5a4e <_ZNK17currentStatusData17get_messageNumberEv>
   b42e8:	7220      	strb	r0, [r4, #8]
	
	Log.info("Sent response to node %d message %d, time = %s and frequency %d minutes", current.get_nodeNumber(), buf[0], Time.timeStr(Time.now()).c_str(), sysStatus.get_frequencyMinutes());
   b42ea:	f001 fa9d 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b42ee:	f001 fb9a 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42f2:	7827      	ldrb	r7, [r4, #0]
   b42f4:	4606      	mov	r6, r0
   b42f6:	f009 ffb0 	bl	be25a <_ZN9TimeClass3nowEv>
   b42fa:	4602      	mov	r2, r0
   b42fc:	17c3      	asrs	r3, r0, #31
   b42fe:	a802      	add	r0, sp, #8
   b4300:	f009 fea6 	bl	be050 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4304:	f8dd 8008 	ldr.w	r8, [sp, #8]
   b4308:	f001 fa3e 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b430c:	f001 fc2a 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4310:	4632      	mov	r2, r6
   b4312:	4931      	ldr	r1, [pc, #196]	; (b43d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x13c>)
   b4314:	463b      	mov	r3, r7
   b4316:	e9cd 8000 	strd	r8, r0, [sp]
   b431a:	4830      	ldr	r0, [pc, #192]	; (b43dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b431c:	f7ff fede 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4320:	a802      	add	r0, sp, #8
   b4322:	f009 fbfb 	bl	bdb1c <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b4326:	4b2e      	ldr	r3, [pc, #184]	; (b43e0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>)
   b4328:	881e      	ldrh	r6, [r3, #0]
   b432a:	2101      	movs	r1, #1
   b432c:	4630      	mov	r0, r6
   b432e:	f00a f9a4 	bl	be67a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4332:	f001 fa79 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4336:	f001 fb76 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b433a:	2204      	movs	r2, #4
   b433c:	4603      	mov	r3, r0
   b433e:	9200      	str	r2, [sp, #0]
   b4340:	4621      	mov	r1, r4
   b4342:	4828      	ldr	r0, [pc, #160]	; (b43e4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>)
   b4344:	2209      	movs	r2, #9
   b4346:	f005 f827 	bl	b9398 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b434a:	4b27      	ldr	r3, [pc, #156]	; (b43e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14c>)
   b434c:	4604      	mov	r4, r0
		success++;
   b434e:	6818      	ldr	r0, [r3, #0]
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4350:	bb04      	cbnz	r4, b4394 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf8>
		success++;
   b4352:	3001      	adds	r0, #1
   b4354:	6018      	str	r0, [r3, #0]
		Log.info("Response received successfully - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4356:	f00a fbe9 	bl	beb2c <__aeabi_i2d>
   b435a:	4680      	mov	r8, r0
   b435c:	6828      	ldr	r0, [r5, #0]
   b435e:	4689      	mov	r9, r1
   b4360:	f00a fbe4 	bl	beb2c <__aeabi_i2d>
   b4364:	4602      	mov	r2, r0
   b4366:	460b      	mov	r3, r1
   b4368:	4640      	mov	r0, r8
   b436a:	4649      	mov	r1, r9
   b436c:	f00a fd72 	bl	bee54 <__aeabi_ddiv>
   b4370:	4b1e      	ldr	r3, [pc, #120]	; (b43ec <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b4372:	2200      	movs	r2, #0
   b4374:	f00a fc44 	bl	bec00 <__aeabi_dmul>
   b4378:	4602      	mov	r2, r0
   b437a:	460b      	mov	r3, r1
   b437c:	4817      	ldr	r0, [pc, #92]	; (b43dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b437e:	491c      	ldr	r1, [pc, #112]	; (b43f0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x154>)
   b4380:	f7ff feac 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4384:	4630      	mov	r0, r6
   b4386:	4621      	mov	r1, r4
   b4388:	f00a f977 	bl	be67a <digitalWrite>
		return true;
   b438c:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b438e:	b007      	add	sp, #28
   b4390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Response not acknowledged - success rate %4.2f", ((success * 1.0)/ attempts)*100.0);
   b4394:	f00a fbca 	bl	beb2c <__aeabi_i2d>
   b4398:	4680      	mov	r8, r0
   b439a:	6828      	ldr	r0, [r5, #0]
   b439c:	4689      	mov	r9, r1
   b439e:	f00a fbc5 	bl	beb2c <__aeabi_i2d>
   b43a2:	4602      	mov	r2, r0
   b43a4:	460b      	mov	r3, r1
   b43a6:	4640      	mov	r0, r8
   b43a8:	4649      	mov	r1, r9
   b43aa:	f00a fd53 	bl	bee54 <__aeabi_ddiv>
   b43ae:	4b0f      	ldr	r3, [pc, #60]	; (b43ec <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x150>)
   b43b0:	2200      	movs	r2, #0
   b43b2:	f00a fc25 	bl	bec00 <__aeabi_dmul>
   b43b6:	4602      	mov	r2, r0
   b43b8:	460b      	mov	r3, r1
   b43ba:	4808      	ldr	r0, [pc, #32]	; (b43dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x140>)
   b43bc:	490d      	ldr	r1, [pc, #52]	; (b43f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x158>)
   b43be:	f7ff fe8d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b43c2:	4630      	mov	r0, r6
   b43c4:	2100      	movs	r1, #0
   b43c6:	f00a f958 	bl	be67a <digitalWrite>
	return false;
   b43ca:	2000      	movs	r0, #0
   b43cc:	e7df      	b.n	b438e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf2>
   b43ce:	bf00      	nop
   b43d0:	2003defc 	.word	0x2003defc
   b43d4:	2003df00 	.word	0x2003df00
   b43d8:	000bf976 	.word	0x000bf976
   b43dc:	2003e654 	.word	0x2003e654
   b43e0:	000c00a8 	.word	0x000c00a8
   b43e4:	2003e0ac 	.word	0x2003e0ac
   b43e8:	2003def8 	.word	0x2003def8
   b43ec:	40590000 	.word	0x40590000
   b43f0:	000bf9be 	.word	0x000bf9be
   b43f4:	000bf9f2 	.word	0x000bf9f2

000b43f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
	Log.info("DeviceID is %s",LoRA_Functions::instance().findDeviceID(1).c_str());

	return true;
}

bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b43f8:	b530      	push	{r4, r5, lr}
   b43fa:	b089      	sub	sp, #36	; 0x24

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client
     
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b43fc:	f001 f9c4 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4400:	f001 fbab 	bl	b5b5a <_ZNK13sysStatusData15get_magicNumberEv>
   b4404:	4c35      	ldr	r4, [pc, #212]	; (b44dc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xe4>)
   b4406:	0a00      	lsrs	r0, r0, #8
   b4408:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b440a:	f001 f9bd 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b440e:	f001 fba4 	bl	b5b5a <_ZNK13sysStatusData15get_magicNumberEv>
   b4412:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4414:	f009 ff21 	bl	be25a <_ZN9TimeClass3nowEv>
   b4418:	1600      	asrs	r0, r0, #24
   b441a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b441c:	f009 ff1d 	bl	be25a <_ZN9TimeClass3nowEv>
   b4420:	1400      	asrs	r0, r0, #16
   b4422:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4424:	f009 ff19 	bl	be25a <_ZN9TimeClass3nowEv>
   b4428:	1200      	asrs	r0, r0, #8
   b442a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b442c:	f009 ff15 	bl	be25a <_ZN9TimeClass3nowEv>
   b4430:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4432:	f001 f9a9 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4436:	f001 fb95 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b443a:	0a00      	lsrs	r0, r0, #8
   b443c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b443e:	f001 f9a3 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4442:	f001 fb8f 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4446:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_nodeNumber();
   b4448:	f001 f9ee 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b444c:	f001 faeb 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4450:	7220      	strb	r0, [r4, #8]
	
	Log.info("Sent response to node %d, time = %s and frequency %d minutes", current.get_tempNodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b4452:	f001 f9e9 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4456:	f001 faeb 	bl	b5a30 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b445a:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b445c:	f009 fefd 	bl	be25a <_ZN9TimeClass3nowEv>
   b4460:	4602      	mov	r2, r0
   b4462:	17c3      	asrs	r3, r0, #31
   b4464:	a804      	add	r0, sp, #16
   b4466:	f009 fdf3 	bl	be050 <_ZN9TimeClass7timeStrEx>
   b446a:	9b04      	ldr	r3, [sp, #16]
   b446c:	9303      	str	r3, [sp, #12]
   b446e:	f001 f98b 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4472:	f001 fb77 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4476:	462a      	mov	r2, r5
   b4478:	9b03      	ldr	r3, [sp, #12]
   b447a:	4919      	ldr	r1, [pc, #100]	; (b44e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xe8>)
   b447c:	9000      	str	r0, [sp, #0]
   b447e:	4819      	ldr	r0, [pc, #100]	; (b44e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b4480:	f7ff fe2c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4484:	a804      	add	r0, sp, #16
   b4486:	f009 fb49 	bl	bdb1c <_ZN6StringD1Ev>

	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b448a:	4b17      	ldr	r3, [pc, #92]	; (b44e8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf0>)
   b448c:	881d      	ldrh	r5, [r3, #0]
   b448e:	2101      	movs	r1, #1
   b4490:	4628      	mov	r0, r5
   b4492:	f00a f8f2 	bl	be67a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b4496:	f001 f9c7 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b449a:	f001 fac9 	bl	b5a30 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b449e:	2202      	movs	r2, #2
   b44a0:	4603      	mov	r3, r0
   b44a2:	9200      	str	r2, [sp, #0]
   b44a4:	4621      	mov	r1, r4
   b44a6:	4811      	ldr	r0, [pc, #68]	; (b44ec <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf4>)
   b44a8:	2209      	movs	r2, #9
   b44aa:	f004 ff75 	bl	b9398 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b44ae:	4604      	mov	r4, r0
   b44b0:	b950      	cbnz	r0, b44c8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xd0>
		Log.info("Response received successfully");
   b44b2:	490f      	ldr	r1, [pc, #60]	; (b44f0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xf8>)
   b44b4:	480b      	ldr	r0, [pc, #44]	; (b44e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b44b6:	f7ff fe11 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b44ba:	4628      	mov	r0, r5
   b44bc:	4621      	mov	r1, r4
   b44be:	f00a f8dc 	bl	be67a <digitalWrite>
		return true;
   b44c2:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b44c4:	b009      	add	sp, #36	; 0x24
   b44c6:	bd30      	pop	{r4, r5, pc}
	Log.info("Response not acknowledged");
   b44c8:	490a      	ldr	r1, [pc, #40]	; (b44f4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xfc>)
   b44ca:	4806      	ldr	r0, [pc, #24]	; (b44e4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xec>)
   b44cc:	f7ff fe06 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b44d0:	4628      	mov	r0, r5
   b44d2:	2100      	movs	r1, #0
   b44d4:	f00a f8d1 	bl	be67a <digitalWrite>
	return false;
   b44d8:	2000      	movs	r0, #0
   b44da:	e7f3      	b.n	b44c4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xcc>
   b44dc:	2003df00 	.word	0x2003df00
   b44e0:	000bfa21 	.word	0x000bfa21
   b44e4:	2003e654 	.word	0x2003e654
   b44e8:	000c00a8 	.word	0x000c00a8
   b44ec:	2003e0ac 	.word	0x2003e0ac
   b44f0:	000bfa5e 	.word	0x000bfa5e
   b44f4:	000bfa7d 	.word	0x000bfa7d

000b44f8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:


bool LoRA_Functions::decipherAlertReportGateway() {
   b44f8:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b44fa:	f001 f995 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b44fe:	4b13      	ldr	r3, [pc, #76]	; (b454c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x54>)
   b4500:	7899      	ldrb	r1, [r3, #2]
   b4502:	f001 fb00 	bl	b5b06 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4506:	f001 f98f 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b450a:	4604      	mov	r4, r0
   b450c:	f009 fea5 	bl	be25a <_ZN9TimeClass3nowEv>
   b4510:	17c3      	asrs	r3, r0, #31
   b4512:	4602      	mov	r2, r0
   b4514:	4620      	mov	r0, r4
   b4516:	f001 fc0f 	bl	b5d38 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b451a:	f001 f985 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b451e:	4604      	mov	r4, r0
   b4520:	480b      	ldr	r0, [pc, #44]	; (b4550 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x58>)
   b4522:	f004 fd1e 	bl	b8f62 <_ZN15RHGenericDriver8lastRssiEv>
   b4526:	b281      	uxth	r1, r0
   b4528:	4620      	mov	r0, r4
   b452a:	f001 fb53 	bl	b5bd4 <_ZN17currentStatusData8set_RSSIEt>
	Log.info("Deciphered alert report from node %d", current.get_nodeNumber());
   b452e:	f001 f97b 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4532:	f001 fa78 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4536:	4907      	ldr	r1, [pc, #28]	; (b4554 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x5c>)
   b4538:	4602      	mov	r2, r0
   b453a:	4807      	ldr	r0, [pc, #28]	; (b4558 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x60>)
   b453c:	f7ff fdce 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>

	lora_state = ALERT_ACK;		// Prepare to respond
   b4540:	4b06      	ldr	r3, [pc, #24]	; (b455c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x64>)
   b4542:	2206      	movs	r2, #6
   b4544:	701a      	strb	r2, [r3, #0]

	return true;
}
   b4546:	2001      	movs	r0, #1
   b4548:	bd10      	pop	{r4, pc}
   b454a:	bf00      	nop
   b454c:	2003df00 	.word	0x2003df00
   b4550:	2003df7c 	.word	0x2003df7c
   b4554:	000bfa97 	.word	0x000bfa97
   b4558:	2003e654 	.word	0x2003e654
   b455c:	2003def0 	.word	0x2003def0

000b4560 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:

bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b4560:	b570      	push	{r4, r5, r6, lr}
   b4562:	b088      	sub	sp, #32
	// uint16_t nextSecondsShort = (uint16_t)nextSeconds;

	// This is a response to a data message it has a length of 9 and a specific payload and message flag
	// Send a reply back to the originator client

	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b4564:	f001 f910 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4568:	f001 faf7 	bl	b5b5a <_ZNK13sysStatusData15get_magicNumberEv>
   b456c:	4c32      	ldr	r4, [pc, #200]	; (b4638 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xd8>)
   b456e:	0a00      	lsrs	r0, r0, #8
   b4570:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b4572:	f001 f909 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4576:	f001 faf0 	bl	b5b5a <_ZNK13sysStatusData15get_magicNumberEv>
   b457a:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b457c:	f009 fe6d 	bl	be25a <_ZN9TimeClass3nowEv>
   b4580:	1600      	asrs	r0, r0, #24
   b4582:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b4584:	f009 fe69 	bl	be25a <_ZN9TimeClass3nowEv>
   b4588:	1400      	asrs	r0, r0, #16
   b458a:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b458c:	f009 fe65 	bl	be25a <_ZN9TimeClass3nowEv>
   b4590:	1200      	asrs	r0, r0, #8
   b4592:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b4594:	f009 fe61 	bl	be25a <_ZN9TimeClass3nowEv>
   b4598:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());		// Frequency of reports - for Gateways
   b459a:	f001 f8f5 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b459e:	f001 fae1 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45a2:	0a00      	lsrs	r0, r0, #8
   b45a4:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b45a6:	f001 f8ef 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b45aa:	f001 fadb 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;													// Send a zero for the alertcode to reset it
	
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45ae:	4b23      	ldr	r3, [pc, #140]	; (b463c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xdc>)
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());			
   b45b0:	71e0      	strb	r0, [r4, #7]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45b2:	881e      	ldrh	r6, [r3, #0]
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b45b4:	2500      	movs	r5, #0
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45b6:	2101      	movs	r1, #1
	buf[8] = 0;													// Send a zero for the alertcode to reset it
   b45b8:	7225      	strb	r5, [r4, #8]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b45ba:	4630      	mov	r0, r6
   b45bc:	f00a f85d 	bl	be67a <digitalWrite>

	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b45c0:	f001 f932 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b45c4:	f001 fa2f 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b45c8:	2206      	movs	r2, #6
   b45ca:	4603      	mov	r3, r0
   b45cc:	9200      	str	r2, [sp, #0]
   b45ce:	4621      	mov	r1, r4
   b45d0:	481b      	ldr	r0, [pc, #108]	; (b4640 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe0>)
   b45d2:	2209      	movs	r2, #9
   b45d4:	f004 fee0 	bl	b9398 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b45d8:	4604      	mov	r4, r0
   b45da:	bb10      	cbnz	r0, b4622 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xc2>
		Log.info("Sent acknowledgment to Node %d, time = %s and frequency %d minutes", current.get_nodeNumber(), Time.timeStr().c_str(), sysStatus.get_frequencyMinutes());
   b45dc:	f001 f924 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b45e0:	f001 fa21 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b45e4:	4605      	mov	r5, r0
   b45e6:	f009 fe38 	bl	be25a <_ZN9TimeClass3nowEv>
   b45ea:	4602      	mov	r2, r0
   b45ec:	17c3      	asrs	r3, r0, #31
   b45ee:	a804      	add	r0, sp, #16
   b45f0:	f009 fd2e 	bl	be050 <_ZN9TimeClass7timeStrEx>
   b45f4:	9b04      	ldr	r3, [sp, #16]
   b45f6:	9303      	str	r3, [sp, #12]
   b45f8:	f001 f8c6 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b45fc:	f001 fab2 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4600:	9b03      	ldr	r3, [sp, #12]
   b4602:	4910      	ldr	r1, [pc, #64]	; (b4644 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe4>)
   b4604:	9000      	str	r0, [sp, #0]
   b4606:	462a      	mov	r2, r5
   b4608:	480f      	ldr	r0, [pc, #60]	; (b4648 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b460a:	f7ff fd67 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b460e:	a804      	add	r0, sp, #16
   b4610:	f009 fa84 	bl	bdb1c <_ZN6StringD1Ev>
		digitalWrite(BLUE_LED,LOW);
   b4614:	4630      	mov	r0, r6
   b4616:	4621      	mov	r1, r4
   b4618:	f00a f82f 	bl	be67a <digitalWrite>
		return true;
   b461c:	2001      	movs	r0, #1
	}

	Log.info("Response not acknowledged");
	digitalWrite(BLUE_LED,LOW);
	return false;
}
   b461e:	b008      	add	sp, #32
   b4620:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Response not acknowledged");
   b4622:	490a      	ldr	r1, [pc, #40]	; (b464c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xec>)
   b4624:	4808      	ldr	r0, [pc, #32]	; (b4648 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe8>)
   b4626:	f7ff fd59 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b462a:	4630      	mov	r0, r6
   b462c:	4629      	mov	r1, r5
   b462e:	f00a f824 	bl	be67a <digitalWrite>
	return false;
   b4632:	4628      	mov	r0, r5
   b4634:	e7f3      	b.n	b461e <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xbe>
   b4636:	bf00      	nop
   b4638:	2003df00 	.word	0x2003df00
   b463c:	000c00a8 	.word	0x000c00a8
   b4640:	2003e0ac 	.word	0x2003e0ac
   b4644:	000bfabc 	.word	0x000bfabc
   b4648:	2003e654 	.word	0x2003e654
   b464c:	000bfa7d 	.word	0x000bfa7d

000b4650 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b4650:	b510      	push	{r4, lr}
	Log.info("Responding using the %s message type", loraStateNames[lora_state]);
   b4652:	4c13      	ldr	r4, [pc, #76]	; (b46a0 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x50>)
   b4654:	4b13      	ldr	r3, [pc, #76]	; (b46a4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x54>)
   b4656:	7822      	ldrb	r2, [r4, #0]
   b4658:	4913      	ldr	r1, [pc, #76]	; (b46a8 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x58>)
   b465a:	4814      	ldr	r0, [pc, #80]	; (b46ac <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x5c>)
   b465c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b4660:	f7ff fd3c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4664:	7823      	ldrb	r3, [r4, #0]
   b4666:	2b04      	cmp	r3, #4
   b4668:	d00c      	beq.n	b4684 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b466a:	7823      	ldrb	r3, [r4, #0]
   b466c:	2b02      	cmp	r3, #2
   b466e:	d104      	bne.n	b467a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x2a>
   b4670:	f7ff fd4c 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4674:	f7ff fec0 	bl	b43f8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b4678:	b950      	cbnz	r0, b4690 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b467a:	7823      	ldrb	r3, [r4, #0]
   b467c:	2b06      	cmp	r3, #6
   b467e:	d009      	beq.n	b4694 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x44>
	return false; 
   b4680:	2000      	movs	r0, #0
   b4682:	e006      	b.n	b4692 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x42>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b4684:	f7ff fd42 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4688:	f7ff fe08 	bl	b429c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b468c:	2800      	cmp	r0, #0
   b468e:	d0ec      	beq.n	b466a <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b4690:	2001      	movs	r0, #1
}
   b4692:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b4694:	f7ff fd3a 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
}
   b4698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b469c:	f7ff bf60 	b.w	b4560 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b46a0:	2003def0 	.word	0x2003def0
   b46a4:	2003dcf8 	.word	0x2003dcf8
   b46a8:	000bfaff 	.word	0x000bfaff
   b46ac:	2003e654 	.word	0x2003e654

000b46b0 <_ZN14LoRA_Functions14findNodeNumberEPKc>:


uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b46b0:	b530      	push	{r4, r5, lr}
   b46b2:	b085      	sub	sp, #20
   b46b4:	460c      	mov	r4, r1

	if (strncmp(deviceID,nodeID.get_deviceID_1(),24) == 0) {
   b46b6:	f001 f935 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b46ba:	4601      	mov	r1, r0
   b46bc:	4668      	mov	r0, sp
   b46be:	f001 f955 	bl	b596c <_ZNK10nodeIDData14get_deviceID_1Ev>
   b46c2:	9900      	ldr	r1, [sp, #0]
   b46c4:	2218      	movs	r2, #24
   b46c6:	4620      	mov	r0, r4
   b46c8:	f00a fecf 	bl	bf46a <strncmp>
   b46cc:	4605      	mov	r5, r0
   b46ce:	4668      	mov	r0, sp
   b46d0:	f009 fa24 	bl	bdb1c <_ZN6StringD1Ev>
   b46d4:	b9ad      	cbnz	r5, b4702 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x52>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_1());
   b46d6:	f001 f925 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b46da:	f001 f9bd 	bl	b5a58 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b46de:	495b      	ldr	r1, [pc, #364]	; (b484c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x19c>)
   b46e0:	4602      	mov	r2, r0
   b46e2:	485b      	ldr	r0, [pc, #364]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b46e4:	f7ff fcfa 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	else {
		if (nodeID.get_lastConnection_1() == 0) {
			Log.info("deviceID not on file - saving as nodeID nuber %d", nodeID.get_nodeNumber_1());
			nodeID.set_nodeNumber_1(1);
			nodeID.set_deviceID_1(deviceID);
			nodeID.set_lastConnection_1(Time.now());
   b46e8:	f001 f91c 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b46ec:	4604      	mov	r4, r0
   b46ee:	f009 fdb4 	bl	be25a <_ZN9TimeClass3nowEv>
   b46f2:	4602      	mov	r2, r0
   b46f4:	17c3      	asrs	r3, r0, #31
   b46f6:	4620      	mov	r0, r4
   b46f8:	f001 fb23 	bl	b5d42 <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 1;
   b46fc:	2001      	movs	r0, #1
			nodeID.set_lastConnection_3(Time.now());
			return 3;
		}	
	}
	return 0;
}
   b46fe:	b005      	add	sp, #20
   b4700:	bd30      	pop	{r4, r5, pc}
	else if (strncmp(deviceID,nodeID.get_deviceID_2(),24) == 0) {
   b4702:	f001 f90f 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4706:	4601      	mov	r1, r0
   b4708:	4668      	mov	r0, sp
   b470a:	f001 f945 	bl	b5998 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b470e:	9900      	ldr	r1, [sp, #0]
   b4710:	2218      	movs	r2, #24
   b4712:	4620      	mov	r0, r4
   b4714:	f00a fea9 	bl	bf46a <strncmp>
   b4718:	4605      	mov	r5, r0
   b471a:	4668      	mov	r0, sp
   b471c:	f009 f9fe 	bl	bdb1c <_ZN6StringD1Ev>
   b4720:	b9a5      	cbnz	r5, b474c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x9c>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_2());
   b4722:	f001 f8ff 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4726:	f001 f99c 	bl	b5a62 <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b472a:	4948      	ldr	r1, [pc, #288]	; (b484c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x19c>)
   b472c:	4602      	mov	r2, r0
   b472e:	4848      	ldr	r0, [pc, #288]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b4730:	f7ff fcd4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b4734:	f001 f8f6 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4738:	4604      	mov	r4, r0
   b473a:	f009 fd8e 	bl	be25a <_ZN9TimeClass3nowEv>
   b473e:	4602      	mov	r2, r0
   b4740:	17c3      	asrs	r3, r0, #31
   b4742:	4620      	mov	r0, r4
   b4744:	f001 fafd 	bl	b5d42 <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 2;
   b4748:	2002      	movs	r0, #2
   b474a:	e7d8      	b.n	b46fe <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
	else if (strncmp(deviceID,nodeID.get_deviceID_3(),24) == 0) {		
   b474c:	f001 f8ea 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4750:	4601      	mov	r1, r0
   b4752:	4668      	mov	r0, sp
   b4754:	f001 f936 	bl	b59c4 <_ZNK10nodeIDData14get_deviceID_3Ev>
   b4758:	9900      	ldr	r1, [sp, #0]
   b475a:	2218      	movs	r2, #24
   b475c:	4620      	mov	r0, r4
   b475e:	f00a fe84 	bl	bf46a <strncmp>
   b4762:	4605      	mov	r5, r0
   b4764:	4668      	mov	r0, sp
   b4766:	f009 f9d9 	bl	bdb1c <_ZN6StringD1Ev>
   b476a:	b9a5      	cbnz	r5, b4796 <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe6>
		Log.info("deviceID on file - retreiving nodeID number %d", nodeID.get_nodeNumber_3());
   b476c:	f001 f8da 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4770:	f001 f97c 	bl	b5a6c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b4774:	4935      	ldr	r1, [pc, #212]	; (b484c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x19c>)
   b4776:	4602      	mov	r2, r0
   b4778:	4835      	ldr	r0, [pc, #212]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b477a:	f7ff fcaf 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		nodeID.set_lastConnection_1(Time.now());
   b477e:	f001 f8d1 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4782:	4604      	mov	r4, r0
   b4784:	f009 fd69 	bl	be25a <_ZN9TimeClass3nowEv>
   b4788:	4602      	mov	r2, r0
   b478a:	17c3      	asrs	r3, r0, #31
   b478c:	4620      	mov	r0, r4
   b478e:	f001 fad8 	bl	b5d42 <_ZN10nodeIDData20set_lastConnection_1Ex>
			return 3;
   b4792:	2003      	movs	r0, #3
   b4794:	e7b3      	b.n	b46fe <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4e>
		if (nodeID.get_lastConnection_1() == 0) {
   b4796:	f001 f8c5 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b479a:	f001 fa95 	bl	b5cc8 <_ZNK10nodeIDData20get_lastConnection_1Ev>
   b479e:	ea50 0301 	orrs.w	r3, r0, r1
   b47a2:	d113      	bne.n	b47cc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x11c>
			Log.info("deviceID not on file - saving as nodeID nuber %d", nodeID.get_nodeNumber_1());
   b47a4:	f001 f8be 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47a8:	f001 f956 	bl	b5a58 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b47ac:	4929      	ldr	r1, [pc, #164]	; (b4854 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b47ae:	4602      	mov	r2, r0
   b47b0:	4827      	ldr	r0, [pc, #156]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b47b2:	f7ff fc93 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_1(1);
   b47b6:	f001 f8b5 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47ba:	2101      	movs	r1, #1
   b47bc:	f001 f9a9 	bl	b5b12 <_ZN10nodeIDData16set_nodeNumber_1Eh>
			nodeID.set_deviceID_1(deviceID);
   b47c0:	f001 f8b0 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47c4:	4621      	mov	r1, r4
   b47c6:	f001 f8e1 	bl	b598c <_ZN10nodeIDData14set_deviceID_1EPKc>
   b47ca:	e78d      	b.n	b46e8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x38>
		else if (nodeID.get_lastConnection_2() == 0) {
   b47cc:	f001 f8aa 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47d0:	f001 fa7f 	bl	b5cd2 <_ZNK10nodeIDData20get_lastConnection_2Ev>
   b47d4:	ea50 0301 	orrs.w	r3, r0, r1
   b47d8:	d11d      	bne.n	b4816 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x166>
			Log.info("deviceID not on file - saving as nodeID nuber %d", nodeID.get_nodeNumber_3());
   b47da:	f001 f8a3 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47de:	f001 f945 	bl	b5a6c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b47e2:	491c      	ldr	r1, [pc, #112]	; (b4854 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b47e4:	4602      	mov	r2, r0
   b47e6:	481a      	ldr	r0, [pc, #104]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b47e8:	f7ff fc78 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_2(2);
   b47ec:	f001 f89a 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47f0:	2102      	movs	r1, #2
   b47f2:	f001 f994 	bl	b5b1e <_ZN10nodeIDData16set_nodeNumber_2Eh>
			nodeID.set_deviceID_2(deviceID);
   b47f6:	f001 f895 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b47fa:	4621      	mov	r1, r4
   b47fc:	f001 f8dc 	bl	b59b8 <_ZN10nodeIDData14set_deviceID_2EPKc>
			nodeID.set_lastConnection_2(Time.now());
   b4800:	f001 f890 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4804:	4604      	mov	r4, r0
   b4806:	f009 fd28 	bl	be25a <_ZN9TimeClass3nowEv>
   b480a:	4602      	mov	r2, r0
   b480c:	17c3      	asrs	r3, r0, #31
   b480e:	4620      	mov	r0, r4
   b4810:	f001 fa9c 	bl	b5d4c <_ZN10nodeIDData20set_lastConnection_2Ex>
   b4814:	e798      	b.n	b4748 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x98>
			Log.info("deviceID not on file - saving as nodeID nuber %d", 3);
   b4816:	2203      	movs	r2, #3
   b4818:	490e      	ldr	r1, [pc, #56]	; (b4854 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a4>)
   b481a:	480d      	ldr	r0, [pc, #52]	; (b4850 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x1a0>)
   b481c:	f7ff fc5e 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			nodeID.set_nodeNumber_3(3);
   b4820:	f001 f880 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4824:	2103      	movs	r1, #3
   b4826:	f001 f980 	bl	b5b2a <_ZN10nodeIDData16set_nodeNumber_3Eh>
			nodeID.set_deviceID_3(deviceID);
   b482a:	f001 f87b 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b482e:	4621      	mov	r1, r4
   b4830:	f001 f8d8 	bl	b59e4 <_ZN10nodeIDData14set_deviceID_3EPKc>
			nodeID.set_lastConnection_3(Time.now());
   b4834:	f001 f876 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4838:	4604      	mov	r4, r0
   b483a:	f009 fd0e 	bl	be25a <_ZN9TimeClass3nowEv>
   b483e:	4602      	mov	r2, r0
   b4840:	17c3      	asrs	r3, r0, #31
   b4842:	4620      	mov	r0, r4
   b4844:	f001 fa87 	bl	b5d56 <_ZN10nodeIDData20set_lastConnection_3Ex>
   b4848:	e7a3      	b.n	b4792 <_ZN14LoRA_Functions14findNodeNumberEPKc+0xe2>
   b484a:	bf00      	nop
   b484c:	000bfb24 	.word	0x000bfb24
   b4850:	2003e654 	.word	0x2003e654
   b4854:	000bfb53 	.word	0x000bfb53

000b4858 <_ZN14LoRA_Functions12findDeviceIDEh>:

String LoRA_Functions::findDeviceID(uint8_t nodeNumber) {
   b4858:	b538      	push	{r3, r4, r5, lr}
   b485a:	4615      	mov	r5, r2
   b485c:	4604      	mov	r4, r0
	if (nodeNumber == nodeID.get_nodeNumber_1()) return nodeID.get_deviceID_1();
   b485e:	f001 f861 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4862:	f001 f8f9 	bl	b5a58 <_ZNK10nodeIDData16get_nodeNumber_1Ev>
   b4866:	42a8      	cmp	r0, r5
   b4868:	d107      	bne.n	b487a <_ZN14LoRA_Functions12findDeviceIDEh+0x22>
   b486a:	f001 f85b 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b486e:	4601      	mov	r1, r0
   b4870:	4620      	mov	r0, r4
   b4872:	f001 f87b 	bl	b596c <_ZNK10nodeIDData14get_deviceID_1Ev>
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
	else return "null";
   b4876:	4620      	mov	r0, r4
   b4878:	bd38      	pop	{r3, r4, r5, pc}
	else if (nodeNumber == nodeID.get_nodeNumber_2()) return nodeID.get_deviceID_2();
   b487a:	f001 f853 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b487e:	f001 f8f0 	bl	b5a62 <_ZNK10nodeIDData16get_nodeNumber_2Ev>
   b4882:	42a8      	cmp	r0, r5
   b4884:	d106      	bne.n	b4894 <_ZN14LoRA_Functions12findDeviceIDEh+0x3c>
   b4886:	f001 f84d 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b488a:	4601      	mov	r1, r0
   b488c:	4620      	mov	r0, r4
   b488e:	f001 f883 	bl	b5998 <_ZNK10nodeIDData14get_deviceID_2Ev>
   b4892:	e7f0      	b.n	b4876 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else if (nodeNumber == nodeID.get_nodeNumber_3()) return nodeID.get_deviceID_3();
   b4894:	f001 f846 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4898:	f001 f8e8 	bl	b5a6c <_ZNK10nodeIDData16get_nodeNumber_3Ev>
   b489c:	42a8      	cmp	r0, r5
   b489e:	d106      	bne.n	b48ae <_ZN14LoRA_Functions12findDeviceIDEh+0x56>
   b48a0:	f001 f840 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b48a4:	4601      	mov	r1, r0
   b48a6:	4620      	mov	r0, r4
   b48a8:	f001 f88c 	bl	b59c4 <_ZNK10nodeIDData14get_deviceID_3Ev>
   b48ac:	e7e3      	b.n	b4876 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
	else return "null";
   b48ae:	4902      	ldr	r1, [pc, #8]	; (b48b8 <_ZN14LoRA_Functions12findDeviceIDEh+0x60>)
   b48b0:	4620      	mov	r0, r4
   b48b2:	f009 f97e 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b48b6:	e7de      	b.n	b4876 <_ZN14LoRA_Functions12findDeviceIDEh+0x1e>
   b48b8:	000bfb84 	.word	0x000bfb84

000b48bc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b48bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b48be:	4b2e      	ldr	r3, [pc, #184]	; (b4978 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xbc>)
   b48c0:	2202      	movs	r2, #2
   b48c2:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b48c4:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b48c6:	4b2d      	ldr	r3, [pc, #180]	; (b497c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc0>)
   b48c8:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b48ca:	4606      	mov	r6, r0
		nodeDeviceID[i] = buf[i+2];
   b48cc:	f103 0218 	add.w	r2, r3, #24
   b48d0:	4627      	mov	r7, r4
   b48d2:	6818      	ldr	r0, [r3, #0]
   b48d4:	6859      	ldr	r1, [r3, #4]
   b48d6:	4625      	mov	r5, r4
   b48d8:	c503      	stmia	r5!, {r0, r1}
   b48da:	3308      	adds	r3, #8
   b48dc:	4293      	cmp	r3, r2
   b48de:	462c      	mov	r4, r5
   b48e0:	d1f7      	bne.n	b48d2 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b48e2:	781b      	ldrb	r3, [r3, #0]
   b48e4:	702b      	strb	r3, [r5, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b48e6:	f000 ff9f 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b48ea:	4604      	mov	r4, r0
   b48ec:	f000 ff9c 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b48f0:	f001 f899 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b48f4:	4601      	mov	r1, r0
   b48f6:	4620      	mov	r0, r4
   b48f8:	f001 f8e7 	bl	b5aca <_ZN17currentStatusData18set_tempNodeNumberEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b48fc:	f000 ff94 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4900:	f001 f891 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4904:	280a      	cmp	r0, #10
   b4906:	d92c      	bls.n	b4962 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xa6>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4908:	f000 ff8e 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b490c:	4639      	mov	r1, r7
   b490e:	4604      	mov	r4, r0
   b4910:	4630      	mov	r0, r6
   b4912:	f7ff fecd 	bl	b46b0 <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4916:	4601      	mov	r1, r0
   b4918:	4620      	mov	r0, r4
   b491a:	f001 f8d0 	bl	b5abe <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Received from deviceID of %s an unconfigured will change from %d to %d",  nodeDeviceID, current.get_tempNodeNumber(), current.get_nodeNumber());
   b491e:	f000 ff83 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4922:	f001 f885 	bl	b5a30 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4926:	9003      	str	r0, [sp, #12]
   b4928:	f000 ff7e 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b492c:	f001 f87b 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4930:	9b03      	ldr	r3, [sp, #12]
   b4932:	9000      	str	r0, [sp, #0]
   b4934:	4912      	ldr	r1, [pc, #72]	; (b4980 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc4>)
   b4936:	4813      	ldr	r0, [pc, #76]	; (b4984 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b4938:	463a      	mov	r2, r7
   b493a:	f7ff fbcf 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
	Log.info("DeviceID is %s",LoRA_Functions::instance().findDeviceID(1).c_str());
   b493e:	f7ff fbe5 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4942:	2201      	movs	r2, #1
   b4944:	4601      	mov	r1, r0
   b4946:	a805      	add	r0, sp, #20
   b4948:	f7ff ff86 	bl	b4858 <_ZN14LoRA_Functions12findDeviceIDEh>
   b494c:	9a05      	ldr	r2, [sp, #20]
   b494e:	490e      	ldr	r1, [pc, #56]	; (b4988 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xcc>)
   b4950:	480c      	ldr	r0, [pc, #48]	; (b4984 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b4952:	f7ff fbc3 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4956:	a805      	add	r0, sp, #20
   b4958:	f009 f8e0 	bl	bdb1c <_ZN6StringD1Ev>
}
   b495c:	2001      	movs	r0, #1
   b495e:	b011      	add	sp, #68	; 0x44
   b4960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else Log.info("Join request from node %d - setting clock", current.get_nodeNumber());
   b4962:	f000 ff61 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4966:	f001 f85e 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b496a:	4908      	ldr	r1, [pc, #32]	; (b498c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xd0>)
   b496c:	4602      	mov	r2, r0
   b496e:	4805      	ldr	r0, [pc, #20]	; (b4984 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b4970:	f7ff fbb4 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4974:	e7e3      	b.n	b493e <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x82>
   b4976:	bf00      	nop
   b4978:	2003def0 	.word	0x2003def0
   b497c:	2003df02 	.word	0x2003df02
   b4980:	000bfb89 	.word	0x000bfb89
   b4984:	2003e654 	.word	0x2003e654
   b4988:	000bfbfa 	.word	0x000bfbfa
   b498c:	000bfbd0 	.word	0x000bfbd0

000b4990 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b4990:	b530      	push	{r4, r5, lr}
   b4992:	b089      	sub	sp, #36	; 0x24
	uint8_t len = sizeof(buf);
   b4994:	2379      	movs	r3, #121	; 0x79
   b4996:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b499a:	f10d 031f 	add.w	r3, sp, #31
   b499e:	9303      	str	r3, [sp, #12]
   b49a0:	f10d 031e 	add.w	r3, sp, #30
   b49a4:	4d3f      	ldr	r5, [pc, #252]	; (b4aa4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x114>)
   b49a6:	9302      	str	r3, [sp, #8]
   b49a8:	f10d 031d 	add.w	r3, sp, #29
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	ab07      	add	r3, sp, #28
   b49b0:	9300      	str	r3, [sp, #0]
   b49b2:	483d      	ldr	r0, [pc, #244]	; (b4aa8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x118>)
   b49b4:	f10d 031b 	add.w	r3, sp, #27
   b49b8:	f10d 021a 	add.w	r2, sp, #26
   b49bc:	4629      	mov	r1, r5
   b49be:	f004 fd1f 	bl	b9400 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b49c2:	b910      	cbnz	r0, b49ca <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false; 
   b49c4:	2000      	movs	r0, #0
}
   b49c6:	b009      	add	sp, #36	; 0x24
   b49c8:	bd30      	pop	{r4, r5, pc}
		buf[len] = 0;
   b49ca:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b49ce:	2400      	movs	r4, #0
   b49d0:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b49d2:	882d      	ldrh	r5, [r5, #0]
   b49d4:	f000 fed8 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b49d8:	f001 f8bf 	bl	b5b5a <_ZNK13sysStatusData15get_magicNumberEv>
   b49dc:	ba6d      	rev16	r5, r5
   b49de:	b2ad      	uxth	r5, r5
   b49e0:	42a8      	cmp	r0, r5
   b49e2:	d004      	beq.n	b49ee <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x5e>
			Log.info("Message did not match the Magic Number - Ignoring");
   b49e4:	4931      	ldr	r1, [pc, #196]	; (b4aac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x11c>)
   b49e6:	4832      	ldr	r0, [pc, #200]	; (b4ab0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b49e8:	f7ff fb78 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b49ec:	e7ea      	b.n	b49c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);
   b49ee:	f000 ff1b 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b49f2:	f89d 101b 	ldrb.w	r1, [sp, #27]
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b49f6:	4c2f      	ldr	r4, [pc, #188]	; (b4ab4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>)
		current.set_nodeNumber(from);
   b49f8:	f001 f861 	bl	b5abe <_ZN17currentStatusData14set_nodeNumberEh>
		lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b49fc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b4a00:	f003 030f 	and.w	r3, r3, #15
   b4a04:	7023      	strb	r3, [r4, #0]
		Log.info("From node %d with rssi=%d - a %s message of length %d in %d hops", current.get_nodeNumber(), driver.lastRssi(), loraStateNames[lora_state], len, hops);
   b4a06:	f000 ff0f 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4a0a:	f001 f80c 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4a0e:	9005      	str	r0, [sp, #20]
   b4a10:	4829      	ldr	r0, [pc, #164]	; (b4ab8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x128>)
   b4a12:	f004 faa6 	bl	b8f62 <_ZN15RHGenericDriver8lastRssiEv>
   b4a16:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b4a1a:	9102      	str	r1, [sp, #8]
   b4a1c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   b4a20:	9101      	str	r1, [sp, #4]
   b4a22:	4603      	mov	r3, r0
   b4a24:	4925      	ldr	r1, [pc, #148]	; (b4abc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x12c>)
   b4a26:	7820      	ldrb	r0, [r4, #0]
   b4a28:	9a05      	ldr	r2, [sp, #20]
   b4a2a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4a2e:	9100      	str	r1, [sp, #0]
   b4a30:	481f      	ldr	r0, [pc, #124]	; (b4ab0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4a32:	4923      	ldr	r1, [pc, #140]	; (b4ac0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x130>)
   b4a34:	f7ff fb52 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4a38:	7823      	ldrb	r3, [r4, #0]
   b4a3a:	2b03      	cmp	r3, #3
   b4a3c:	d02a      	beq.n	b4a94 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x104>
		if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b4a3e:	7823      	ldrb	r3, [r4, #0]
   b4a40:	2b01      	cmp	r3, #1
   b4a42:	d105      	bne.n	b4a50 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xc0>
   b4a44:	f7ff fb62 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4a48:	f7ff ff38 	bl	b48bc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b4a4c:	2800      	cmp	r0, #0
   b4a4e:	d0b9      	beq.n	b49c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b4a50:	7823      	ldrb	r3, [r4, #0]
   b4a52:	2b05      	cmp	r3, #5
   b4a54:	d105      	bne.n	b4a62 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd2>
   b4a56:	f7ff fb59 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4a5a:	f7ff fd4d 	bl	b44f8 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b4a5e:	2800      	cmp	r0, #0
   b4a60:	d0b0      	beq.n	b49c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (frequencyUpdated) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b4a62:	4b18      	ldr	r3, [pc, #96]	; (b4ac4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b4a64:	781a      	ldrb	r2, [r3, #0]
   b4a66:	b182      	cbz	r2, b4a8a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xfa>
			frequencyUpdated = false;
   b4a68:	2200      	movs	r2, #0
   b4a6a:	701a      	strb	r2, [r3, #0]
			sysStatus.set_frequencyMinutes(updatedFrequencyMins);		// This was the temporary value from the particle function
   b4a6c:	f000 fe8c 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4a70:	4b15      	ldr	r3, [pc, #84]	; (b4ac8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
   b4a72:	8819      	ldrh	r1, [r3, #0]
   b4a74:	f001 f8a8 	bl	b5bc8 <_ZN13sysStatusData20set_frequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b4a78:	f000 fe86 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4a7c:	f001 f872 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4a80:	4912      	ldr	r1, [pc, #72]	; (b4acc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b4a82:	4602      	mov	r2, r0
   b4a84:	480a      	ldr	r0, [pc, #40]	; (b4ab0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x120>)
   b4a86:	f7ff fb29 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b4a8a:	f7ff fb3f 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4a8e:	f7ff fddf 	bl	b4650 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b4a92:	e798      	b.n	b49c6 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b4a94:	f7ff fb3a 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4a98:	f7ff fba6 	bl	b41e8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b4a9c:	2800      	cmp	r0, #0
   b4a9e:	d1ce      	bne.n	b4a3e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xae>
   b4aa0:	e790      	b.n	b49c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
   b4aa2:	bf00      	nop
   b4aa4:	2003df00 	.word	0x2003df00
   b4aa8:	2003e0ac 	.word	0x2003e0ac
   b4aac:	000bfc09 	.word	0x000bfc09
   b4ab0:	2003e654 	.word	0x2003e654
   b4ab4:	2003def0 	.word	0x2003def0
   b4ab8:	2003df7c 	.word	0x2003df7c
   b4abc:	2003dcf8 	.word	0x2003dcf8
   b4ac0:	000bfc3b 	.word	0x000bfc3b
   b4ac4:	2003e405 	.word	0x2003e405
   b4ac8:	2003de04 	.word	0x2003de04
   b4acc:	000bfc7c 	.word	0x000bfc7c

000b4ad0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
   b4ad0:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4ad2:	4a0a      	ldr	r2, [pc, #40]	; (b4afc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4ad4:	4c0a      	ldr	r4, [pc, #40]	; (b4b00 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4ad6:	490b      	ldr	r1, [pc, #44]	; (b4b04 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
   b4ad8:	7812      	ldrb	r2, [r2, #0]
   b4ada:	7809      	ldrb	r1, [r1, #0]
   b4adc:	4b0a      	ldr	r3, [pc, #40]	; (b4b08 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x38>)
   b4ade:	4620      	mov	r0, r4
   b4ae0:	f005 f950 	bl	b9d84 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, sysStatus.get_nodeNumber());
   b4ae4:	f000 fe50 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4ae8:	f000 ff93 	bl	b5a12 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4aec:	4621      	mov	r1, r4
   b4aee:	4602      	mov	r2, r0
   b4af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, sysStatus.get_nodeNumber());
   b4af4:	4805      	ldr	r0, [pc, #20]	; (b4b0c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x3c>)
   b4af6:	f004 bc45 	b.w	b9384 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4afa:	bf00      	nop
   b4afc:	000c00ae 	.word	0x000c00ae
   b4b00:	2003df7c 	.word	0x2003df7c
   b4b04:	000c00ac 	.word	0x000c00ac
   b4b08:	2003e458 	.word	0x2003e458
   b4b0c:	2003e0ac 	.word	0x2003e0ac

000b4b10 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b4b10:	4b01      	ldr	r3, [pc, #4]	; (b4b18 <_Z18outOfMemoryHandleryi+0x8>)
   b4b12:	601a      	str	r2, [r3, #0]
}
   b4b14:	4770      	bx	lr
   b4b16:	bf00      	nop
   b4b18:	2003dd70 	.word	0x2003dd70

000b4b1c <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b4b1c:	4b01      	ldr	r3, [pc, #4]	; (b4b24 <_Z13userSwitchISRv+0x8>)
   b4b1e:	2201      	movs	r2, #1
   b4b20:	701a      	strb	r2, [r3, #0]
}
   b4b22:	4770      	bx	lr
   b4b24:	2003e3da 	.word	0x2003e3da

000b4b28 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b4b28:	b530      	push	{r4, r5, lr}
   b4b2a:	b085      	sub	sp, #20
   b4b2c:	4604      	mov	r4, r0
   b4b2e:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b4b30:	b160      	cbz	r0, b4b4c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	b150      	cbz	r0, b4b4c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b4b36:	6885      	ldr	r5, [r0, #8]
   b4b38:	b145      	cbz	r5, b4b4c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4b3a:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4b3e:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b42:	68c4      	ldr	r4, [r0, #12]
   b4b44:	ab01      	add	r3, sp, #4
   b4b46:	466a      	mov	r2, sp
   b4b48:	a902      	add	r1, sp, #8
   b4b4a:	47a0      	blx	r4
    }
   b4b4c:	b005      	add	sp, #20
   b4b4e:	bd30      	pop	{r4, r5, pc}

000b4b50 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4b50:	b530      	push	{r4, r5, lr}
   b4b52:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4b54:	6800      	ldr	r0, [r0, #0]
   b4b56:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4b5e:	6883      	ldr	r3, [r0, #8]
   b4b60:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4b64:	b90b      	cbnz	r3, b4b6a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b4b66:	f009 fe8b 	bl	be880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b6a:	68c3      	ldr	r3, [r0, #12]
   b4b6c:	aa01      	add	r2, sp, #4
   b4b6e:	a902      	add	r1, sp, #8
   b4b70:	4798      	blx	r3
      }
   b4b72:	b005      	add	sp, #20
   b4b74:	bd30      	pop	{r4, r5, pc}

000b4b76 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b76:	2a01      	cmp	r2, #1
   b4b78:	d102      	bne.n	b4b80 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b7a:	6001      	str	r1, [r0, #0]
      }
   b4b7c:	2000      	movs	r0, #0
   b4b7e:	4770      	bx	lr
	  switch (__op)
   b4b80:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b82:	bf04      	itt	eq
   b4b84:	680b      	ldreq	r3, [r1, #0]
   b4b86:	6003      	streq	r3, [r0, #0]
	      break;
   b4b88:	e7f8      	b.n	b4b7c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b8a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b8a:	6803      	ldr	r3, [r0, #0]
   b4b8c:	6812      	ldr	r2, [r2, #0]
   b4b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4b92:	4718      	bx	r3

000b4b94 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4b94:	b510      	push	{r4, lr}
      if (_M_manager)
   b4b96:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b98:	4604      	mov	r4, r0
      if (_M_manager)
   b4b9a:	b113      	cbz	r3, b4ba2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b9c:	2203      	movs	r2, #3
   b4b9e:	4601      	mov	r1, r0
   b4ba0:	4798      	blx	r3
    }
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	bd10      	pop	{r4, pc}

000b4ba6 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b4ba6:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4ba8:	4604      	mov	r4, r0
   b4baa:	b138      	cbz	r0, b4bbc <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4bac:	f7ff fff2 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	2110      	movs	r1, #16
        };
   b4bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b4bb8:	f7ff ba71 	b.w	b409e <_ZdlPvj>
        };
   b4bbc:	bd10      	pop	{r4, pc}
	...

000b4bc0 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4bc0:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4bc2:	f000 fde1 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4bc6:	f000 ffcd 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4bca:	4604      	mov	r4, r0
   	if (Time.isValid() && !testModeFlag) {
   b4bcc:	f009 fb28 	bl	be220 <_ZN9TimeClass7isValidEv>
   b4bd0:	b1f0      	cbz	r0, b4c10 <_Z21secondsUntilNextEventv+0x50>
   b4bd2:	4b10      	ldr	r3, [pc, #64]	; (b4c14 <_Z21secondsUntilNextEventv+0x54>)
   b4bd4:	781b      	ldrb	r3, [r3, #0]
   b4bd6:	b9db      	cbnz	r3, b4c10 <_Z21secondsUntilNextEventv+0x50>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4bd8:	f009 fb3f 	bl	be25a <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4bdc:	253c      	movs	r5, #60	; 0x3c
   b4bde:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b4be0:	fbb0 f4f5 	udiv	r4, r0, r5
   b4be4:	fb04 0015 	mls	r0, r4, r5, r0
   b4be8:	1a2c      	subs	r4, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4bea:	2c09      	cmp	r4, #9
   b4bec:	d90e      	bls.n	b4c0c <_Z21secondsUntilNextEventv+0x4c>
   b4bee:	42ac      	cmp	r4, r5
   b4bf0:	bf28      	it	cs
   b4bf2:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b4bf4:	f000 fdc8 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4bf8:	f000 ffb4 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4bfc:	4906      	ldr	r1, [pc, #24]	; (b4c18 <_Z21secondsUntilNextEventv+0x58>)
   b4bfe:	4602      	mov	r2, r0
   b4c00:	4623      	mov	r3, r4
   b4c02:	4806      	ldr	r0, [pc, #24]	; (b4c1c <_Z21secondsUntilNextEventv+0x5c>)
   b4c04:	f7ff fa6a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn;
}
   b4c08:	4620      	mov	r0, r4
   b4c0a:	bd38      	pop	{r3, r4, r5, pc}
   b4c0c:	240a      	movs	r4, #10
   b4c0e:	e7f1      	b.n	b4bf4 <_Z21secondsUntilNextEventv+0x34>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b4c10:	240a      	movs	r4, #10
   b4c12:	e7f9      	b.n	b4c08 <_Z21secondsUntilNextEventv+0x48>
   b4c14:	2003e3d9 	.word	0x2003e3d9
   b4c18:	000bfcc0 	.word	0x000bfcc0
   b4c1c:	2003e654 	.word	0x2003e654

000b4c20 <_Z22publishStateTransitionv>:
{
   b4c20:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4c22:	4e1c      	ldr	r6, [pc, #112]	; (b4c94 <_Z22publishStateTransitionv+0x74>)
   b4c24:	4c1c      	ldr	r4, [pc, #112]	; (b4c98 <_Z22publishStateTransitionv+0x78>)
   b4c26:	7832      	ldrb	r2, [r6, #0]
   b4c28:	4d1c      	ldr	r5, [pc, #112]	; (b4c9c <_Z22publishStateTransitionv+0x7c>)
   b4c2a:	2a02      	cmp	r2, #2
{
   b4c2c:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4c2e:	d128      	bne.n	b4c82 <_Z22publishStateTransitionv+0x62>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4c30:	f009 faf6 	bl	be220 <_ZN9TimeClass7isValidEv>
   b4c34:	7832      	ldrb	r2, [r6, #0]
   b4c36:	782b      	ldrb	r3, [r5, #0]
   b4c38:	b958      	cbnz	r0, b4c52 <_Z22publishStateTransitionv+0x32>
   b4c3a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4c3e:	9200      	str	r2, [sp, #0]
   b4c40:	4a17      	ldr	r2, [pc, #92]	; (b4ca0 <_Z22publishStateTransitionv+0x80>)
   b4c42:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4c46:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4c4a:	a804      	add	r0, sp, #16
   b4c4c:	f006 fc24 	bl	bb498 <snprintf>
   b4c50:	e00f      	b.n	b4c72 <_Z22publishStateTransitionv+0x52>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],(secondsUntilNextEvent()));	
   b4c52:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4c56:	9303      	str	r3, [sp, #12]
   b4c58:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4c5c:	f7ff ffb0 	bl	b4bc0 <_Z21secondsUntilNextEventv>
   b4c60:	9b03      	ldr	r3, [sp, #12]
   b4c62:	4a10      	ldr	r2, [pc, #64]	; (b4ca4 <_Z22publishStateTransitionv+0x84>)
   b4c64:	e9cd 4000 	strd	r4, r0, [sp]
   b4c68:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4c6c:	a804      	add	r0, sp, #16
   b4c6e:	f006 fc13 	bl	bb498 <snprintf>
	oldState = state;
   b4c72:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4c74:	480c      	ldr	r0, [pc, #48]	; (b4ca8 <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4c76:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4c78:	a904      	add	r1, sp, #16
   b4c7a:	f7ff fa2f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
}
   b4c7e:	b044      	add	sp, #272	; 0x110
   b4c80:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4c82:	782b      	ldrb	r3, [r5, #0]
   b4c84:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4c88:	9200      	str	r2, [sp, #0]
   b4c8a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4c8e:	4a07      	ldr	r2, [pc, #28]	; (b4cac <_Z22publishStateTransitionv+0x8c>)
   b4c90:	e7d9      	b.n	b4c46 <_Z22publishStateTransitionv+0x26>
   b4c92:	bf00      	nop
   b4c94:	2003e3d8 	.word	0x2003e3d8
   b4c98:	2003dd74 	.word	0x2003dd74
   b4c9c:	2003e3a1 	.word	0x2003e3a1
   b4ca0:	000bfcf4 	.word	0x000bfcf4
   b4ca4:	000bfd14 	.word	0x000bfd14
   b4ca8:	2003e654 	.word	0x2003e654
   b4cac:	000bfd31 	.word	0x000bfd31

000b4cb0 <loop>:
void loop() {
   b4cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b4cb4:	4d9c      	ldr	r5, [pc, #624]	; (b4f28 <loop+0x278>)
void loop() {
   b4cb6:	ed2d 8b02 	vpush	{d8}
   b4cba:	782b      	ldrb	r3, [r5, #0]
   b4cbc:	3b01      	subs	r3, #1
   b4cbe:	b0d1      	sub	sp, #324	; 0x144
   b4cc0:	2b06      	cmp	r3, #6
   b4cc2:	d817      	bhi.n	b4cf4 <loop+0x44>
   b4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4cc8:	000701fb 	.word	0x000701fb
   b4ccc:	00f50035 	.word	0x00f50035
   b4cd0:	01e501be 	.word	0x01e501be
   b4cd4:	0150      	.short	0x0150
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4cd6:	4b95      	ldr	r3, [pc, #596]	; (b4f2c <loop+0x27c>)
   b4cd8:	781b      	ldrb	r3, [r3, #0]
   b4cda:	2b02      	cmp	r3, #2
   b4cdc:	d001      	beq.n	b4ce2 <loop+0x32>
   b4cde:	f7ff ff9f 	bl	b4c20 <_Z22publishStateTransitionv>
			if (nextEventTime) {
   b4ce2:	4b93      	ldr	r3, [pc, #588]	; (b4f30 <loop+0x280>)
   b4ce4:	781a      	ldrb	r2, [r3, #0]
   b4ce6:	b11a      	cbz	r2, b4cf0 <loop+0x40>
				nextEventTime = false;
   b4ce8:	2200      	movs	r2, #0
   b4cea:	701a      	strb	r2, [r3, #0]
			state = LoRA_STATE;
   b4cec:	2304      	movs	r3, #4
   b4cee:	e000      	b.n	b4cf2 <loop+0x42>
			else state = SLEEPING_STATE;
   b4cf0:	2303      	movs	r3, #3
   b4cf2:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b4cf4:	488f      	ldr	r0, [pc, #572]	; (b4f34 <loop+0x284>)
   b4cf6:	f002 faad 	bl	b7254 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b4cfa:	f003 fc0d 	bl	b8518 <_ZN17PublishQueuePosix8instanceEv>
   b4cfe:	f003 fafd 	bl	b82fc <_ZN17PublishQueuePosix4loopEv>
	current.loop();
   b4d02:	f000 fd91 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4d06:	f000 fd9f 	bl	b5848 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4d0a:	f000 fd3d 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4d0e:	f000 fd63 	bl	b57d8 <_ZN13sysStatusData4loopEv>
	nodeID.loop();
   b4d12:	f000 fe07 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b4d16:	f000 fe20 	bl	b595a <_ZN10nodeIDData4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b4d1a:	4b87      	ldr	r3, [pc, #540]	; (b4f38 <loop+0x288>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	2b00      	cmp	r3, #0
   b4d20:	f2c0 8201 	blt.w	b5126 <loop+0x476>
}
   b4d24:	b051      	add	sp, #324	; 0x144
   b4d26:	ecbd 8b02 	vpop	{d8}
   b4d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b4d2e:	f009 b8a8 	b.w	bde82 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4d32:	4b7e      	ldr	r3, [pc, #504]	; (b4f2c <loop+0x27c>)
   b4d34:	781b      	ldrb	r3, [r3, #0]
   b4d36:	2b03      	cmp	r3, #3
   b4d38:	d001      	beq.n	b4d3e <loop+0x8e>
   b4d3a:	f7ff ff71 	bl	b4c20 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4d3e:	2100      	movs	r1, #0
   b4d40:	487c      	ldr	r0, [pc, #496]	; (b4f34 <loop+0x284>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4d42:	4c7e      	ldr	r4, [pc, #504]	; (b4f3c <loop+0x28c>)
   b4d44:	f001 feda 	bl	b6afc <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b4d48:	f7ff ff3a 	bl	b4bc0 <_Z21secondsUntilNextEventv>
   b4d4c:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.timeStr(Time.now()+wakeInSeconds).c_str(),System.freeMemory());
   b4d4e:	f009 fa84 	bl	be25a <_ZN9TimeClass3nowEv>
   b4d52:	19c2      	adds	r2, r0, r7
   b4d54:	17d3      	asrs	r3, r2, #31
   b4d56:	a810      	add	r0, sp, #64	; 0x40
   b4d58:	f009 f97a 	bl	be050 <_ZN9TimeClass7timeStrEx>
   b4d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4d5e:	930b      	str	r3, [sp, #44]	; 0x2c
   b4d60:	f009 f8f2 	bl	bdf48 <_ZN11SystemClass10freeMemoryEv>
   b4d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4d66:	4976      	ldr	r1, [pc, #472]	; (b4f40 <loop+0x290>)
   b4d68:	9000      	str	r0, [sp, #0]
   b4d6a:	463a      	mov	r2, r7
   b4d6c:	4875      	ldr	r0, [pc, #468]	; (b4f44 <loop+0x294>)
   b4d6e:	f7ff f9b5 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4d72:	a810      	add	r0, sp, #64	; 0x40
   b4d74:	f008 fed2 	bl	bdb1c <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b4d78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4d7c:	f006 fbe4 	bl	bb548 <delay>
   b4d80:	7d23      	ldrb	r3, [r4, #20]
   b4d82:	2b00      	cmp	r3, #0
   b4d84:	d050      	beq.n	b4e28 <loop+0x178>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4d86:	2302      	movs	r3, #2
   b4d88:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4d8a:	4b6f      	ldr	r3, [pc, #444]	; (b4f48 <loop+0x298>)
   b4d8c:	f8b3 8000 	ldrh.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4d90:	6823      	ldr	r3, [r4, #0]
   b4d92:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4d94:	b1f3      	cbz	r3, b4dd4 <loop+0x124>
            if (start->type == type) {
   b4d96:	889a      	ldrh	r2, [r3, #4]
   b4d98:	2a01      	cmp	r2, #1
   b4d9a:	d006      	beq.n	b4daa <loop+0xfa>
            start = start->next;
   b4d9c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4d9e:	e7f9      	b.n	b4d94 <loop+0xe4>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4da0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4da2:	b1bb      	cbz	r3, b4dd4 <loop+0x124>
            if (start->type == type) {
   b4da4:	889a      	ldrh	r2, [r3, #4]
   b4da6:	2a01      	cmp	r2, #1
   b4da8:	d1fa      	bne.n	b4da0 <loop+0xf0>
                if (gpioWakeup->pin == pin) {
   b4daa:	899a      	ldrh	r2, [r3, #12]
   b4dac:	4542      	cmp	r2, r8
   b4dae:	d1f7      	bne.n	b4da0 <loop+0xf0>
                    gpioWakeup->mode = mode;
   b4db0:	2200      	movs	r2, #0
   b4db2:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4db4:	7d23      	ldrb	r3, [r4, #20]
   b4db6:	2b00      	cmp	r3, #0
   b4db8:	d036      	beq.n	b4e28 <loop+0x178>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4dba:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b4dbc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b4dc0:	68db      	ldr	r3, [r3, #12]
   b4dc2:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4dc6:	b1db      	cbz	r3, b4e00 <loop+0x150>
            if (start->type == type) {
   b4dc8:	889a      	ldrh	r2, [r3, #4]
   b4dca:	2a04      	cmp	r2, #4
   b4dcc:	f000 81a6 	beq.w	b511c <loop+0x46c>
            start = start->next;
   b4dd0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4dd2:	e7f8      	b.n	b4dc6 <loop+0x116>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4dd4:	495d      	ldr	r1, [pc, #372]	; (b4f4c <loop+0x29c>)
   b4dd6:	2010      	movs	r0, #16
   b4dd8:	f009 fd48 	bl	be86c <_ZnwjRKSt9nothrow_t>
   b4ddc:	4606      	mov	r6, r0
   b4dde:	2800      	cmp	r0, #0
   b4de0:	f000 819f 	beq.w	b5122 <loop+0x472>
   b4de4:	2210      	movs	r2, #16
   b4de6:	2100      	movs	r1, #0
   b4de8:	f00a fa7c 	bl	bf2e4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4dec:	4b58      	ldr	r3, [pc, #352]	; (b4f50 <loop+0x2a0>)
   b4dee:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4df0:	2301      	movs	r3, #1
   b4df2:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4df4:	6923      	ldr	r3, [r4, #16]
   b4df6:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b4df8:	f8a6 800c 	strh.w	r8, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4dfc:	6126      	str	r6, [r4, #16]
   b4dfe:	e7d9      	b.n	b4db4 <loop+0x104>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4e00:	4952      	ldr	r1, [pc, #328]	; (b4f4c <loop+0x29c>)
   b4e02:	2010      	movs	r0, #16
   b4e04:	f009 fd32 	bl	be86c <_ZnwjRKSt9nothrow_t>
   b4e08:	4606      	mov	r6, r0
   b4e0a:	2800      	cmp	r0, #0
   b4e0c:	f000 8189 	beq.w	b5122 <loop+0x472>
   b4e10:	2210      	movs	r2, #16
   b4e12:	2100      	movs	r1, #0
   b4e14:	f00a fa66 	bl	bf2e4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4e18:	4b4d      	ldr	r3, [pc, #308]	; (b4f50 <loop+0x2a0>)
   b4e1a:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4e1c:	2304      	movs	r3, #4
   b4e1e:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4e20:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4e22:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b4e24:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4e28:	4944      	ldr	r1, [pc, #272]	; (b4f3c <loop+0x28c>)
   b4e2a:	a80c      	add	r0, sp, #48	; 0x30
   b4e2c:	f009 f82c 	bl	bde88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4e34:	483f      	ldr	r0, [pc, #252]	; (b4f34 <loop+0x284>)
   b4e36:	f001 fe61 	bl	b6afc <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b4e3a:	2000      	movs	r0, #0
   b4e3c:	f005 ff80 	bl	bad40 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4e40:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4e44:	4604      	mov	r4, r0
   b4e46:	2000      	movs	r0, #0
   b4e48:	f005 ff7a 	bl	bad40 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4e4c:	1b00      	subs	r0, r0, r4
   b4e4e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4e52:	42b0      	cmp	r0, r6
   b4e54:	f171 0300 	sbcs.w	r3, r1, #0
   b4e58:	d207      	bcs.n	b4e6a <loop+0x1ba>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4e5a:	f009 fae5 	bl	be428 <_Z16_fetch_usbserialv>
   b4e5e:	f009 fad8 	bl	be412 <_ZN9USBSerial11isConnectedEv>
   b4e62:	b910      	cbnz	r0, b4e6a <loop+0x1ba>
            spark_process();
   b4e64:	f006 fa40 	bl	bb2e8 <spark_process>
        while (_while() && !_condition()) {
   b4e68:	e7ed      	b.n	b4e46 <loop+0x196>
   b4e6a:	f009 fadd 	bl	be428 <_Z16_fetch_usbserialv>
   b4e6e:	f009 fad0 	bl	be412 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b4e72:	2302      	movs	r3, #2
   b4e74:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b4e76:	4b2e      	ldr	r3, [pc, #184]	; (b4f30 <loop+0x280>)
   b4e78:	2201      	movs	r2, #1
   b4e7a:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4e7c:	f009 f9ed 	bl	be25a <_ZN9TimeClass3nowEv>
   b4e80:	19c2      	adds	r2, r0, r7
   b4e82:	17d3      	asrs	r3, r2, #31
   b4e84:	a810      	add	r0, sp, #64	; 0x40
   b4e86:	f009 f8e3 	bl	be050 <_ZN9TimeClass7timeStrEx>
   b4e8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4e8c:	920b      	str	r2, [sp, #44]	; 0x2c
   b4e8e:	f009 f85b 	bl	bdf48 <_ZN11SystemClass10freeMemoryEv>
   b4e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4e94:	492f      	ldr	r1, [pc, #188]	; (b4f54 <loop+0x2a4>)
   b4e96:	4603      	mov	r3, r0
   b4e98:	482a      	ldr	r0, [pc, #168]	; (b4f44 <loop+0x294>)
   b4e9a:	f7ff f91f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b4e9e:	a810      	add	r0, sp, #64	; 0x40
   b4ea0:	f008 fe3c 	bl	bdb1c <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
   b4ea6:	2800      	cmp	r0, #0
   b4ea8:	f43f af24 	beq.w	b4cf4 <loop+0x44>
            free(wakeupSource_);
   b4eac:	f006 fad4 	bl	bb458 <free>
		} break;
   b4eb0:	e720      	b.n	b4cf4 <loop+0x44>
			if (state != oldState) {
   b4eb2:	4b1e      	ldr	r3, [pc, #120]	; (b4f2c <loop+0x27c>)
   b4eb4:	781b      	ldrb	r3, [r3, #0]
   b4eb6:	2b04      	cmp	r3, #4
   b4eb8:	d00f      	beq.n	b4eda <loop+0x22a>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b4eba:	2b07      	cmp	r3, #7
   b4ebc:	d003      	beq.n	b4ec6 <loop+0x216>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4ebe:	f005 ff2f 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b4ec2:	4b25      	ldr	r3, [pc, #148]	; (b4f58 <loop+0x2a8>)
   b4ec4:	6018      	str	r0, [r3, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4ec6:	f7ff feab 	bl	b4c20 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b4eca:	f7ff f91f 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ece:	f7ff f975 	bl	b41bc <_ZN14LoRA_Functions11clearBufferEv>
				Log.info("Gateway is listening for LoRA messages");
   b4ed2:	4922      	ldr	r1, [pc, #136]	; (b4f5c <loop+0x2ac>)
   b4ed4:	481b      	ldr	r0, [pc, #108]	; (b4f44 <loop+0x294>)
   b4ed6:	f7ff f901 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) state = REPORTING_STATE; // Received and acknowledged data from a node - report
   b4eda:	f7ff f917 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4ede:	f7ff fd57 	bl	b4990 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b4ee2:	b108      	cbz	r0, b4ee8 <loop+0x238>
   b4ee4:	2307      	movs	r3, #7
   b4ee6:	702b      	strb	r3, [r5, #0]
			if (!testModeFlag && ((millis() - startLoRAWindow) > 150000L)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b4ee8:	4b1d      	ldr	r3, [pc, #116]	; (b4f60 <loop+0x2b0>)
   b4eea:	781b      	ldrb	r3, [r3, #0]
   b4eec:	2b00      	cmp	r3, #0
   b4eee:	f47f af01 	bne.w	b4cf4 <loop+0x44>
   b4ef2:	f005 ff15 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b4ef6:	4b18      	ldr	r3, [pc, #96]	; (b4f58 <loop+0x2a8>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	1ac0      	subs	r0, r0, r3
   b4efc:	4b19      	ldr	r3, [pc, #100]	; (b4f64 <loop+0x2b4>)
   b4efe:	4298      	cmp	r0, r3
   b4f00:	f67f aef8 	bls.w	b4cf4 <loop+0x44>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b4f04:	f7ff f902 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4f08:	f7ff f968 	bl	b41dc <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection())) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over
   b4f0c:	f009 f9b6 	bl	be27c <_ZN9TimeClass4hourEv>
   b4f10:	4604      	mov	r4, r0
   b4f12:	f000 fc39 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4f16:	f000 fed2 	bl	b5cbe <_ZNK13sysStatusData18get_lastConnectionEv>
   b4f1a:	f009 f87d 	bl	be018 <_ZN9TimeClass4hourEx>
   b4f1e:	4284      	cmp	r4, r0
   b4f20:	f000 80cb 	beq.w	b50ba <loop+0x40a>
   b4f24:	2305      	movs	r3, #5
   b4f26:	e6e4      	b.n	b4cf2 <loop+0x42>
   b4f28:	2003e3d8 	.word	0x2003e3d8
   b4f2c:	2003e3a1 	.word	0x2003e3a1
   b4f30:	2003e3a0 	.word	0x2003e3a0
   b4f34:	2003e274 	.word	0x2003e274
   b4f38:	2003dd70 	.word	0x2003dd70
   b4f3c:	2003e294 	.word	0x2003e294
   b4f40:	000bfd3f 	.word	0x000bfd3f
   b4f44:	2003e654 	.word	0x2003e654
   b4f48:	000c00aa 	.word	0x000c00aa
   b4f4c:	000c10e0 	.word	0x000c10e0
   b4f50:	00030010 	.word	0x00030010
   b4f54:	000bfd7f 	.word	0x000bfd7f
   b4f58:	2003e268 	.word	0x2003e268
   b4f5c:	000bfda0 	.word	0x000bfda0
   b4f60:	2003e3d9 	.word	0x2003e3d9
   b4f64:	000249f0 	.word	0x000249f0
			if (state != oldState) publishStateTransition();
   b4f68:	4b71      	ldr	r3, [pc, #452]	; (b5130 <loop+0x480>)
   b4f6a:	781b      	ldrb	r3, [r3, #0]
   b4f6c:	2b07      	cmp	r3, #7
   b4f6e:	d001      	beq.n	b4f74 <loop+0x2c4>
   b4f70:	f7ff fe56 	bl	b4c20 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();
   b4f74:	f000 fc58 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4f78:	f000 fd55 	bl	b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f7c:	900b      	str	r0, [sp, #44]	; 0x2c
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4f7e:	f7ff f8c5 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b4f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4f84:	4601      	mov	r1, r0
   b4f86:	a80c      	add	r0, sp, #48	; 0x30
   b4f88:	f7ff fc66 	bl	b4858 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4f8e:	930b      	str	r3, [sp, #44]	; 0x2c
   b4f90:	f000 fc4a 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4f94:	f000 fdf0 	bl	b5b78 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4f98:	4604      	mov	r4, r0
   b4f9a:	f000 fc45 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4f9e:	f000 fdf0 	bl	b5b82 <_ZNK17currentStatusData14get_dailyCountEv>
   b4fa2:	4606      	mov	r6, r0
   b4fa4:	f000 fc40 	bl	b5828 <_ZN17currentStatusData8instanceEv>
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4fa8:	f000 fc5a 	bl	b5860 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4fac:	eeb0 8a40 	vmov.f32	s16, s0
   b4fb0:	eef0 8a60 	vmov.f32	s17, s1
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b4fb4:	f000 fc38 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4fb8:	f000 fd44 	bl	b5a44 <_ZNK17currentStatusData16get_batteryStateEv>
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4fbc:	4a5d      	ldr	r2, [pc, #372]	; (b5134 <loop+0x484>)
   b4fbe:	f852 b020 	ldr.w	fp, [r2, r0, lsl #2]
			current.get_internalTempC(), sysStatus.get_resetCount(), current.get_RSSI(), current.get_messageNumber(), Time.now());
   b4fc2:	f000 fc31 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4fc6:	f000 fd38 	bl	b5a3a <_ZNK17currentStatusData17get_internalTempCEv>
   b4fca:	4607      	mov	r7, r0
   b4fcc:	f000 fbdc 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b4fd0:	f000 fd24 	bl	b5a1c <_ZNK13sysStatusData14get_resetCountEv>
   b4fd4:	4680      	mov	r8, r0
   b4fd6:	f000 fc27 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4fda:	f000 fdc8 	bl	b5b6e <_ZNK17currentStatusData8get_RSSIEv>
   b4fde:	4681      	mov	r9, r0
   b4fe0:	f000 fc22 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b4fe4:	f000 fd33 	bl	b5a4e <_ZNK17currentStatusData17get_messageNumberEv>
   b4fe8:	4682      	mov	sl, r0
  			snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u,\"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"rssi\":%d, \"msg\":%d,\"timestamp\":%lu000}",\
   b4fea:	f009 f936 	bl	be25a <_ZN9TimeClass3nowEv>
   b4fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4ff0:	4a51      	ldr	r2, [pc, #324]	; (b5138 <loop+0x488>)
   b4ff2:	e9cd a008 	strd	sl, r0, [sp, #32]
   b4ff6:	e9cd 4600 	strd	r4, r6, [sp]
   b4ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4ffe:	e9cd 8906 	strd	r8, r9, [sp, #24]
   b5002:	e9cd b704 	strd	fp, r7, [sp, #16]
   b5006:	ed8d 8b02 	vstr	d8, [sp, #8]
   b500a:	a810      	add	r0, sp, #64	; 0x40
   b500c:	f006 fa44 	bl	bb498 <snprintf>
			LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5010:	a80c      	add	r0, sp, #48	; 0x30
   b5012:	f008 fd83 	bl	bdb1c <_ZN6StringD1Ev>
			Log.info(data);
   b5016:	a910      	add	r1, sp, #64	; 0x40
   b5018:	4848      	ldr	r0, [pc, #288]	; (b513c <loop+0x48c>)
   b501a:	f7ff f85f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  			PublishQueuePosix::instance().publish("Ubidots-LoRA-Hook-v1", data, PRIVATE | WITH_ACK);
   b501e:	f003 fa7b 	bl	b8518 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b5022:	4b47      	ldr	r3, [pc, #284]	; (b5140 <loop+0x490>)
   b5024:	4a47      	ldr	r2, [pc, #284]	; (b5144 <loop+0x494>)
   b5026:	781b      	ldrb	r3, [r3, #0]
   b5028:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b502a:	2100      	movs	r1, #0
   b502c:	4313      	orrs	r3, r2
   b502e:	6802      	ldr	r2, [r0, #0]
   b5030:	f88d 1004 	strb.w	r1, [sp, #4]
   b5034:	f88d 3000 	strb.w	r3, [sp]
   b5038:	6814      	ldr	r4, [r2, #0]
   b503a:	4943      	ldr	r1, [pc, #268]	; (b5148 <loop+0x498>)
   b503c:	233c      	movs	r3, #60	; 0x3c
   b503e:	aa10      	add	r2, sp, #64	; 0x40
   b5040:	47a0      	blx	r4
   b5042:	e653      	b.n	b4cec <loop+0x3c>
			if (state != oldState) {
   b5044:	4b3a      	ldr	r3, [pc, #232]	; (b5130 <loop+0x480>)
   b5046:	781b      	ldrb	r3, [r3, #0]
   b5048:	2b05      	cmp	r3, #5
   b504a:	d00a      	beq.n	b5062 <loop+0x3b2>
				publishStateTransition();  
   b504c:	f7ff fde8 	bl	b4c20 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5050:	f006 f95a 	bl	bb308 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();
   b5054:	b908      	cbnz	r0, b505a <loop+0x3aa>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b5056:	f006 f94f 	bl	bb2f8 <spark_cloud_flag_connect>
   b505a:	f005 fe61 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b505e:	4b3b      	ldr	r3, [pc, #236]	; (b514c <loop+0x49c>)
   b5060:	6018      	str	r0, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5062:	f006 f951 	bl	bb308 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b5066:	b158      	cbz	r0, b5080 <loop+0x3d0>
				sysStatus.set_lastConnection(Time.now());
   b5068:	f000 fb8e 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b506c:	4604      	mov	r4, r0
   b506e:	f009 f8f4 	bl	be25a <_ZN9TimeClass3nowEv>
   b5072:	17c3      	asrs	r3, r0, #31
   b5074:	4602      	mov	r2, r0
   b5076:	4620      	mov	r0, r4
   b5078:	f000 fe54 	bl	b5d24 <_ZN13sysStatusData18set_lastConnectionEx>
				state = DISCONNECTING_STATE;										// Typically, we will disconnect and sleep to save power
   b507c:	2306      	movs	r3, #6
   b507e:	e638      	b.n	b4cf2 <loop+0x42>
   b5080:	f005 fe4e 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 300000L) {		// Either we will connect or we will timeout 
   b5084:	4b31      	ldr	r3, [pc, #196]	; (b514c <loop+0x49c>)
   b5086:	681b      	ldr	r3, [r3, #0]
   b5088:	1ac0      	subs	r0, r0, r3
   b508a:	4b31      	ldr	r3, [pc, #196]	; (b5150 <loop+0x4a0>)
   b508c:	4298      	cmp	r0, r3
   b508e:	d8eb      	bhi.n	b5068 <loop+0x3b8>
   b5090:	e630      	b.n	b4cf4 <loop+0x44>
			if (state != oldState) {
   b5092:	4b27      	ldr	r3, [pc, #156]	; (b5130 <loop+0x480>)
   b5094:	4c2f      	ldr	r4, [pc, #188]	; (b5154 <loop+0x4a4>)
   b5096:	781b      	ldrb	r3, [r3, #0]
   b5098:	2b06      	cmp	r3, #6
   b509a:	d004      	beq.n	b50a6 <loop+0x3f6>
				publishStateTransition(); 
   b509c:	f7ff fdc0 	bl	b4c20 <_Z22publishStateTransitionv>
   b50a0:	f005 fe3e 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b50a4:	6020      	str	r0, [r4, #0]
   b50a6:	f005 fe3b 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stayConnectedWindow > 90000) {							// Stay on-line for 90 seconds
   b50aa:	6823      	ldr	r3, [r4, #0]
   b50ac:	1ac0      	subs	r0, r0, r3
   b50ae:	4b2a      	ldr	r3, [pc, #168]	; (b5158 <loop+0x4a8>)
   b50b0:	4298      	cmp	r0, r3
   b50b2:	f67f ae1f 	bls.w	b4cf4 <loop+0x44>
				disconnectFromParticle();
   b50b6:	f001 fa3d 	bl	b6534 <_Z22disconnectFromParticlev>
				state = IDLE_STATE;
   b50ba:	2302      	movs	r3, #2
   b50bc:	e619      	b.n	b4cf2 <loop+0x42>
			static system_tick_t resetTimeout = millis();
   b50be:	4c27      	ldr	r4, [pc, #156]	; (b515c <loop+0x4ac>)
   b50c0:	4e27      	ldr	r6, [pc, #156]	; (b5160 <loop+0x4b0>)
   b50c2:	7823      	ldrb	r3, [r4, #0]
   b50c4:	f3bf 8f5b 	dmb	ish
   b50c8:	f013 0f01 	tst.w	r3, #1
   b50cc:	d109      	bne.n	b50e2 <loop+0x432>
   b50ce:	4620      	mov	r0, r4
   b50d0:	f7fe fff4 	bl	b40bc <__cxa_guard_acquire>
   b50d4:	b128      	cbz	r0, b50e2 <loop+0x432>
   b50d6:	f005 fe23 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b50da:	6030      	str	r0, [r6, #0]
   b50dc:	4620      	mov	r0, r4
   b50de:	f7fe fff2 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b50e2:	4b13      	ldr	r3, [pc, #76]	; (b5130 <loop+0x480>)
   b50e4:	782a      	ldrb	r2, [r5, #0]
   b50e6:	781b      	ldrb	r3, [r3, #0]
   b50e8:	429a      	cmp	r2, r3
   b50ea:	d001      	beq.n	b50f0 <loop+0x440>
   b50ec:	f7ff fd98 	bl	b4c20 <_Z22publishStateTransitionv>
   b50f0:	f005 fe16 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b50f4:	6833      	ldr	r3, [r6, #0]
   b50f6:	1ac0      	subs	r0, r0, r3
   b50f8:	f247 5330 	movw	r3, #30000	; 0x7530
   b50fc:	4298      	cmp	r0, r3
   b50fe:	f67f adf9 	bls.w	b4cf4 <loop+0x44>
				Log.info("Deep power down device");
   b5102:	4918      	ldr	r1, [pc, #96]	; (b5164 <loop+0x4b4>)
   b5104:	480d      	ldr	r0, [pc, #52]	; (b513c <loop+0x48c>)
   b5106:	f7fe ffe9 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b510a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b510e:	f006 fa1b 	bl	bb548 <delay>
				ab1805.deepPowerDown(); 
   b5112:	211e      	movs	r1, #30
   b5114:	4814      	ldr	r0, [pc, #80]	; (b5168 <loop+0x4b8>)
   b5116:	f001 fe4b 	bl	b6db0 <_ZN6AB180513deepPowerDownEi>
   b511a:	e5eb      	b.n	b4cf4 <loop+0x44>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b511c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b5120:	e682      	b.n	b4e28 <loop+0x178>
                valid_ = false;
   b5122:	7526      	strb	r6, [r4, #20]
                return *this;
   b5124:	e680      	b.n	b4e28 <loop+0x178>
}
   b5126:	b051      	add	sp, #324	; 0x144
   b5128:	ecbd 8b02 	vpop	{d8}
   b512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5130:	2003e3a1 	.word	0x2003e3a1
   b5134:	2003de08 	.word	0x2003de08
   b5138:	000bfdc7 	.word	0x000bfdc7
   b513c:	2003e654 	.word	0x2003e654
   b5140:	2003e261 	.word	0x2003e261
   b5144:	2003e260 	.word	0x2003e260
   b5148:	000bfe4c 	.word	0x000bfe4c
   b514c:	2003e26c 	.word	0x2003e26c
   b5150:	000493e0 	.word	0x000493e0
   b5154:	2003e270 	.word	0x2003e270
   b5158:	00015f90 	.word	0x00015f90
   b515c:	2003e25c 	.word	0x2003e25c
   b5160:	2003e264 	.word	0x2003e264
   b5164:	000bfe61 	.word	0x000bfe61
   b5168:	2003e274 	.word	0x2003e274

000b516c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b516c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b516e:	2300      	movs	r3, #0
   b5170:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5172:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5174:	4604      	mov	r4, r0
   b5176:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5178:	b12b      	cbz	r3, b5186 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b517a:	2202      	movs	r2, #2
   b517c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b517e:	68eb      	ldr	r3, [r5, #12]
   b5180:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5182:	68ab      	ldr	r3, [r5, #8]
   b5184:	60a3      	str	r3, [r4, #8]
    }
   b5186:	4620      	mov	r0, r4
   b5188:	bd38      	pop	{r3, r4, r5, pc}
	...

000b518c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b518c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5190:	b095      	sub	sp, #84	; 0x54
   b5192:	4605      	mov	r5, r0
        };
   b5194:	991c      	ldr	r1, [sp, #112]	; 0x70
   b5196:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5198:	4690      	mov	r8, r2
   b519a:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b519c:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b519e:	f7ff ffe5 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b51a2:	a904      	add	r1, sp, #16
   b51a4:	a808      	add	r0, sp, #32
   b51a6:	f7ff ffe1 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b51aa:	a908      	add	r1, sp, #32
   b51ac:	4630      	mov	r0, r6
   b51ae:	f7ff ffdd 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b51b2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51b6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b51b8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51bc:	f7fe ff6b 	bl	b4096 <_Znwj>
   b51c0:	4604      	mov	r4, r0
   b51c2:	b1a0      	cbz	r0, b51ee <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51c4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b51c8:	ab01      	add	r3, sp, #4
   b51ca:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b51ce:	e894 0003 	ldmia.w	r4, {r0, r1}
   b51d2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b51d6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b51dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b51de:	60a3      	str	r3, [r4, #8]
   b51e0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b51e6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b51ea:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b51ec:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b51ee:	4b24      	ldr	r3, [pc, #144]	; (b5280 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b51f0:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b51f2:	4b24      	ldr	r3, [pc, #144]	; (b5284 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b51f4:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b51f6:	2200      	movs	r2, #0
   b51f8:	2300      	movs	r3, #0
   b51fa:	f04f 0900 	mov.w	r9, #0
   b51fe:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b5202:	4b21      	ldr	r3, [pc, #132]	; (b5288 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5204:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5208:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b520a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b520c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5210:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5214:	f7fe ff3f 	bl	b4096 <_Znwj>
   b5218:	4604      	mov	r4, r0
   b521a:	b1d8      	cbz	r0, b5254 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b521c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b521e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b5222:	b133      	cbz	r3, b5232 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5224:	2202      	movs	r2, #2
   b5226:	a910      	add	r1, sp, #64	; 0x40
   b5228:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b522a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b522c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b522e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5230:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5232:	4b16      	ldr	r3, [pc, #88]	; (b528c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5234:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5236:	4a16      	ldr	r2, [pc, #88]	; (b5290 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5238:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b523a:	ab01      	add	r3, sp, #4
   b523c:	4640      	mov	r0, r8
   b523e:	4639      	mov	r1, r7
   b5240:	f005 ffe0 	bl	bb204 <system_subscribe_event>
        if (r) {
   b5244:	b1b0      	cbz	r0, b5274 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5246:	4620      	mov	r0, r4
   b5248:	f7ff fca4 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b524c:	2110      	movs	r1, #16
   b524e:	4620      	mov	r0, r4
   b5250:	f7fe ff25 	bl	b409e <_ZdlPvj>
   b5254:	a810      	add	r0, sp, #64	; 0x40
   b5256:	f7ff fc9d 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b525a:	4630      	mov	r0, r6
   b525c:	f7ff fc9a 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b5260:	a808      	add	r0, sp, #32
   b5262:	f7ff fc97 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b5266:	a804      	add	r0, sp, #16
   b5268:	f7ff fc94 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
    }
   b526c:	4628      	mov	r0, r5
   b526e:	b015      	add	sp, #84	; 0x54
   b5270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5274:	9b02      	ldr	r3, [sp, #8]
   b5276:	60ab      	str	r3, [r5, #8]
   b5278:	e9c5 8700 	strd	r8, r7, [r5]
   b527c:	e7ea      	b.n	b5254 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b527e:	bf00      	nop
   b5280:	000b4b51 	.word	0x000b4b51
   b5284:	000b5295 	.word	0x000b5295
   b5288:	000c0002 	.word	0x000c0002
   b528c:	000b4ba7 	.word	0x000b4ba7
   b5290:	000b4b29 	.word	0x000b4b29

000b5294 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b5294:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5296:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5298:	4604      	mov	r4, r0
	switch (__op)
   b529a:	d104      	bne.n	b52a6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b529c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b529e:	6003      	str	r3, [r0, #0]
      }
   b52a0:	2000      	movs	r0, #0
   b52a2:	b003      	add	sp, #12
   b52a4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b52a6:	2a02      	cmp	r2, #2
   b52a8:	d00c      	beq.n	b52c4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b52aa:	2a03      	cmp	r2, #3
   b52ac:	d1f8      	bne.n	b52a0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b52ae:	6804      	ldr	r4, [r0, #0]
   b52b0:	2c00      	cmp	r4, #0
   b52b2:	d0f5      	beq.n	b52a0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b52b4:	4620      	mov	r0, r4
   b52b6:	f7ff fc6d 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b52ba:	2110      	movs	r1, #16
   b52bc:	4620      	mov	r0, r4
   b52be:	f7fe feee 	bl	b409e <_ZdlPvj>
   b52c2:	e7ed      	b.n	b52a0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b52c4:	6809      	ldr	r1, [r1, #0]
   b52c6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b52c8:	2010      	movs	r0, #16
   b52ca:	f7fe fee4 	bl	b4096 <_Znwj>
   b52ce:	4605      	mov	r5, r0
   b52d0:	b110      	cbz	r0, b52d8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b52d2:	9901      	ldr	r1, [sp, #4]
   b52d4:	f7ff ff4a 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b52d8:	6025      	str	r5, [r4, #0]
	}
   b52da:	e7e1      	b.n	b52a0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b52dc <_GLOBAL__sub_I___appProductVersion>:
}
   b52dc:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b52de:	4b1d      	ldr	r3, [pc, #116]	; (b5354 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b52e0:	2501      	movs	r5, #1
   b52e2:	701d      	strb	r5, [r3, #0]
   b52e4:	4b1c      	ldr	r3, [pc, #112]	; (b5358 <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b52e6:	2208      	movs	r2, #8
   b52e8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b52ea:	f009 f95f 	bl	be5ac <spark_protocol_instance>
   b52ee:	2300      	movs	r3, #0
   b52f0:	461a      	mov	r2, r3
   b52f2:	4619      	mov	r1, r3
   b52f4:	f009 f96a 	bl	be5cc <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b52f8:	f009 f958 	bl	be5ac <spark_protocol_instance>
   b52fc:	2300      	movs	r3, #0
   b52fe:	461a      	mov	r2, r3
   b5300:	210d      	movs	r1, #13
   b5302:	f009 f95b 	bl	be5bc <spark_protocol_set_product_id>
        : config_(config) {
   b5306:	4b15      	ldr	r3, [pc, #84]	; (b535c <_GLOBAL__sub_I___appProductVersion+0x80>)
   b5308:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b530a:	2400      	movs	r4, #0
        : config_(config) {
   b530c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b530e:	4a14      	ldr	r2, [pc, #80]	; (b5360 <_GLOBAL__sub_I___appProductVersion+0x84>)
   b5310:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5312:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5316:	611c      	str	r4, [r3, #16]
   b5318:	751d      	strb	r5, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b531a:	f009 fa1f 	bl	be75c <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   b531e:	4d11      	ldr	r5, [pc, #68]	; (b5364 <_GLOBAL__sub_I___appProductVersion+0x88>)
   b5320:	4601      	mov	r1, r0
   b5322:	2269      	movs	r2, #105	; 0x69
   b5324:	4810      	ldr	r0, [pc, #64]	; (b5368 <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b5326:	f001 faeb 	bl	b6900 <_ZN6AB1805C1ER7TwoWireh>
   b532a:	4628      	mov	r0, r5
   b532c:	490f      	ldr	r1, [pc, #60]	; (b536c <_GLOBAL__sub_I___appProductVersion+0x90>)
   b532e:	f008 fc40 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5332:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5334:	480e      	ldr	r0, [pc, #56]	; (b5370 <_GLOBAL__sub_I___appProductVersion+0x94>)
    LocalTimeSchedule() {
   b5336:	612c      	str	r4, [r5, #16]
   b5338:	2200      	movs	r2, #0
   b533a:	e9c5 2306 	strd	r2, r3, [r5, #24]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b533e:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   b5342:	2306      	movs	r3, #6
   b5344:	f840 3b04 	str.w	r3, [r0], #4
   b5348:	62ac      	str	r4, [r5, #40]	; 0x28
}
   b534a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b534e:	f002 bbcb 	b.w	b7ae8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5352:	bf00      	nop
   b5354:	2003e260 	.word	0x2003e260
   b5358:	2003e261 	.word	0x2003e261
   b535c:	2003e294 	.word	0x2003e294
   b5360:	00030010 	.word	0x00030010
   b5364:	2003e3a8 	.word	0x2003e3a8
   b5368:	2003e274 	.word	0x2003e274
   b536c:	000c0f58 	.word	0x000c0f58
   b5370:	2003e2b0 	.word	0x2003e2b0

000b5374 <setup>:
{
   b5374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return hal_timer_millis(nullptr);
   b5378:	2000      	movs	r0, #0
   b537a:	b09f      	sub	sp, #124	; 0x7c
   b537c:	f005 fce0 	bl	bad40 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5380:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5384:	4604      	mov	r4, r0
   b5386:	2000      	movs	r0, #0
   b5388:	f005 fcda 	bl	bad40 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b538c:	1b00      	subs	r0, r0, r4
   b538e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5392:	42a8      	cmp	r0, r5
   b5394:	f171 0300 	sbcs.w	r3, r1, #0
   b5398:	d207      	bcs.n	b53aa <setup+0x36>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b539a:	f009 f845 	bl	be428 <_Z16_fetch_usbserialv>
   b539e:	f009 f838 	bl	be412 <_ZN9USBSerial11isConnectedEv>
   b53a2:	b910      	cbnz	r0, b53aa <setup+0x36>
            spark_process();
   b53a4:	f005 ffa0 	bl	bb2e8 <spark_process>
        while (_while() && !_condition()) {
   b53a8:	e7ed      	b.n	b5386 <setup+0x12>
   b53aa:	f009 f83d 	bl	be428 <_Z16_fetch_usbserialv>
   b53ae:	f009 f830 	bl	be412 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b53b2:	f000 fd57 	bl	b5e64 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b53b6:	f000 fd81 	bl	b5ebc <_Z18initializePowerCfgv>
		current.setup();
   b53ba:	f000 fa35 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b53be:	6803      	ldr	r3, [r0, #0]
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b53c0:	4e83      	ldr	r6, [pc, #524]	; (b55d0 <setup+0x25c>)
   b53c2:	681b      	ldr	r3, [r3, #0]
	Log.info("RTC initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b53c4:	f8df 825c 	ldr.w	r8, [pc, #604]	; b5624 <setup+0x2b0>
   b53c8:	4f82      	ldr	r7, [pc, #520]	; (b55d4 <setup+0x260>)
		current.setup();
   b53ca:	4798      	blx	r3
  		sysStatus.setup();
   b53cc:	f000 f9dc 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b53d0:	6803      	ldr	r3, [r0, #0]
   b53d2:	681b      	ldr	r3, [r3, #0]
   b53d4:	4798      	blx	r3
		nodeID.setup();
   b53d6:	f000 faa5 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b53da:	6803      	ldr	r3, [r0, #0]
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	4798      	blx	r3
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   b53e0:	f000 fe14 	bl	b600c <_Z18particleInitializev>
	resetEverything();		// This is a test function
   b53e4:	f000 fcbc 	bl	b5d60 <_Z15resetEverythingv>
   b53e8:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b53ea:	4630      	mov	r0, r6
   b53ec:	2101      	movs	r1, #1
   b53ee:	8173      	strh	r3, [r6, #10]
   b53f0:	f001 ff82 	bl	b72f8 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b53f4:	217c      	movs	r1, #124	; 0x7c
   b53f6:	4630      	mov	r0, r6
   b53f8:	f001 fb80 	bl	b6afc <_ZN6AB18056setWDTEi>
	Log.info("RTC initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b53fc:	f008 ff2d 	bl	be25a <_ZN9TimeClass3nowEv>
   b5400:	ad08      	add	r5, sp, #32
   b5402:	4602      	mov	r2, r0
   b5404:	17c3      	asrs	r3, r0, #31
   b5406:	4628      	mov	r0, r5
   b5408:	f008 fe22 	bl	be050 <_ZN9TimeClass7timeStrEx>
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b540c:	2301      	movs	r3, #1
   b540e:	461a      	mov	r2, r3
   b5410:	2110      	movs	r1, #16
   b5412:	4630      	mov	r0, r6
   b5414:	9c08      	ldr	r4, [sp, #32]
   b5416:	f001 fbf2 	bl	b6bfe <_ZN6AB180510isBitClearEhhb>
   b541a:	496f      	ldr	r1, [pc, #444]	; (b55d8 <setup+0x264>)
   b541c:	2800      	cmp	r0, #0
   b541e:	bf14      	ite	ne
   b5420:	4643      	movne	r3, r8
   b5422:	463b      	moveq	r3, r7
   b5424:	4622      	mov	r2, r4
   b5426:	486d      	ldr	r0, [pc, #436]	; (b55dc <setup+0x268>)
   b5428:	f7fe fe58 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b542c:	4628      	mov	r0, r5
   b542e:	f008 fb75 	bl	bdb1c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5432:	4b6b      	ldr	r3, [pc, #428]	; (b55e0 <setup+0x26c>)
   b5434:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b5436:	4b6b      	ldr	r3, [pc, #428]	; (b55e4 <setup+0x270>)
   b5438:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b543a:	4b6b      	ldr	r3, [pc, #428]	; (b55e8 <setup+0x274>)
   b543c:	930a      	str	r3, [sp, #40]	; 0x28
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b543e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5442:	2300      	movs	r3, #0
   b5444:	a804      	add	r0, sp, #16
   b5446:	9500      	str	r5, [sp, #0]
   b5448:	f7ff fea0 	bl	b518c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b544c:	4628      	mov	r0, r5
   b544e:	f7ff fba1 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5452:	f003 f861 	bl	b8518 <_ZN17PublishQueuePosix8instanceEv>
   b5456:	f003 fa65 	bl	b8924 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b545a:	f7fe fe57 	bl	b410c <_ZN14LoRA_Functions8instanceEv>
   b545e:	2101      	movs	r1, #1
   b5460:	f7fe fe66 	bl	b4130 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5464:	f002 fcf0 	bl	b7e48 <_ZN9LocalTime8instanceEv>
   b5468:	4960      	ldr	r1, [pc, #384]	; (b55ec <setup+0x278>)
   b546a:	4604      	mov	r4, r0
   b546c:	4628      	mov	r0, r5
   b546e:	f002 fbed 	bl	b7c4c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5472:	a909      	add	r1, sp, #36	; 0x24
   b5474:	f104 0008 	add.w	r0, r4, #8
   b5478:	f008 fbd7 	bl	bdc2a <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b547c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b547e:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5480:	a90f      	add	r1, sp, #60	; 0x3c
   b5482:	f104 0020 	add.w	r0, r4, #32
   b5486:	f008 fbd0 	bl	bdc2a <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b548a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b548c:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b548e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5490:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5492:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5494:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5496:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5498:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b549a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b549c:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b549e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   b54a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b54a6:	4628      	mov	r0, r5
   b54a8:	f002 f99e 	bl	b77e8 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b54ac:	f008 fed5 	bl	be25a <_ZN9TimeClass3nowEv>
   b54b0:	4c4f      	ldr	r4, [pc, #316]	; (b55f0 <setup+0x27c>)
   b54b2:	17c3      	asrs	r3, r0, #31
   b54b4:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   b54b8:	4620      	mov	r0, r4
   b54ba:	f002 fd3d 	bl	b7f38 <_ZN16LocalTimeConvert7convertEv>
	Log.info("LocalTime initialized, time is %s and RTC %s set", Time.timeStr(Time.now()).c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b54be:	f008 fecc 	bl	be25a <_ZN9TimeClass3nowEv>
   b54c2:	4602      	mov	r2, r0
   b54c4:	17c3      	asrs	r3, r0, #31
   b54c6:	4628      	mov	r0, r5
   b54c8:	f008 fdc2 	bl	be050 <_ZN9TimeClass7timeStrEx>
   b54cc:	2301      	movs	r3, #1
   b54ce:	461a      	mov	r2, r3
   b54d0:	2110      	movs	r1, #16
   b54d2:	4630      	mov	r0, r6
   b54d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   b54d8:	f001 fb91 	bl	b6bfe <_ZN6AB180510isBitClearEhhb>
   b54dc:	4945      	ldr	r1, [pc, #276]	; (b55f4 <setup+0x280>)
   b54de:	2800      	cmp	r0, #0
   b54e0:	bf14      	ite	ne
   b54e2:	4643      	movne	r3, r8
   b54e4:	463b      	moveq	r3, r7
   b54e6:	464a      	mov	r2, r9
   b54e8:	483c      	ldr	r0, [pc, #240]	; (b55dc <setup+0x268>)
   b54ea:	f7fe fdf7 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b54ee:	4628      	mov	r0, r5
   b54f0:	f008 fb14 	bl	bdb1c <_ZN6StringD1Ev>
  	Log.info("Gateway startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   b54f4:	4b40      	ldr	r3, [pc, #256]	; (b55f8 <setup+0x284>)
   b54f6:	4621      	mov	r1, r4
   b54f8:	681a      	ldr	r2, [r3, #0]
   b54fa:	4628      	mov	r0, r5
   b54fc:	f002 fc06 	bl	b7d0c <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b5500:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5502:	a903      	add	r1, sp, #12
   b5504:	2003      	movs	r0, #3
   b5506:	9e08      	ldr	r6, [sp, #32]
    const diag_source* src = nullptr;
   b5508:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   b550a:	f005 fe59 	bl	bb1c0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b550e:	2800      	cmp	r0, #0
   b5510:	d156      	bne.n	b55c0 <setup+0x24c>
        return ret;
    }
    return get(src, val);
   b5512:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   b5514:	b10c      	cbz	r4, b551a <setup+0x1a6>
   b5516:	6923      	ldr	r3, [r4, #16]
   b5518:	b923      	cbnz	r3, b5524 <setup+0x1b0>
   b551a:	4a38      	ldr	r2, [pc, #224]	; (b55fc <setup+0x288>)
   b551c:	4938      	ldr	r1, [pc, #224]	; (b5600 <setup+0x28c>)
   b551e:	200a      	movs	r0, #10
   b5520:	f005 fe26 	bl	bb170 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5524:	230c      	movs	r3, #12
   b5526:	9304      	str	r3, [sp, #16]
   b5528:	ab02      	add	r3, sp, #8
   b552a:	9305      	str	r3, [sp, #20]
   b552c:	2304      	movs	r3, #4
   b552e:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5530:	6923      	ldr	r3, [r4, #16]
   b5532:	aa04      	add	r2, sp, #16
   b5534:	2101      	movs	r1, #1
   b5536:	4620      	mov	r0, r4
   b5538:	4798      	blx	r3
        if (r) {
   b553a:	2800      	cmp	r0, #0
   b553c:	d140      	bne.n	b55c0 <setup+0x24c>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b553e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   b5542:	ee07 3a90 	vmov	s15, r3
   b5546:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b554a:	ee17 0a90 	vmov	r0, s15
   b554e:	f009 faff 	bl	beb50 <__aeabi_f2d>
   b5552:	4632      	mov	r2, r6
   b5554:	e9cd 0100 	strd	r0, r1, [sp]
   b5558:	492a      	ldr	r1, [pc, #168]	; (b5604 <setup+0x290>)
   b555a:	4820      	ldr	r0, [pc, #128]	; (b55dc <setup+0x268>)
   b555c:	f7fe fdbe 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5560:	4628      	mov	r0, r5
   b5562:	f008 fadb 	bl	bdb1c <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5566:	4b28      	ldr	r3, [pc, #160]	; (b5608 <setup+0x294>)
   b5568:	4d28      	ldr	r5, [pc, #160]	; (b560c <setup+0x298>)
   b556a:	881e      	ldrh	r6, [r3, #0]
   b556c:	4630      	mov	r0, r6
   b556e:	f009 f89d 	bl	be6ac <digitalRead>
   b5572:	4604      	mov	r4, r0
   b5574:	bb38      	cbnz	r0, b55c6 <setup+0x252>
		Log.info("User button pressed, test mode");
   b5576:	4926      	ldr	r1, [pc, #152]	; (b5610 <setup+0x29c>)
   b5578:	4818      	ldr	r0, [pc, #96]	; (b55dc <setup+0x268>)
   b557a:	f7fe fdaf 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
		testModeFlag = true;
   b557e:	4b25      	ldr	r3, [pc, #148]	; (b5614 <setup+0x2a0>)
   b5580:	2101      	movs	r1, #1
   b5582:	7019      	strb	r1, [r3, #0]
		digitalWrite(BLUE_LED,HIGH);
   b5584:	4b24      	ldr	r3, [pc, #144]	; (b5618 <setup+0x2a4>)
   b5586:	881f      	ldrh	r7, [r3, #0]
   b5588:	4638      	mov	r0, r7
   b558a:	f009 f876 	bl	be67a <digitalWrite>
		delay(2000);
   b558e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5592:	f005 ffd9 	bl	bb548 <delay>
		digitalWrite(BLUE_LED,LOW);
   b5596:	4621      	mov	r1, r4
   b5598:	4638      	mov	r0, r7
   b559a:	f009 f86e 	bl	be67a <digitalWrite>
		state = LoRA_STATE;
   b559e:	2304      	movs	r3, #4
   b55a0:	702b      	strb	r3, [r5, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b55a2:	2200      	movs	r2, #0
   b55a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b55a8:	491c      	ldr	r1, [pc, #112]	; (b561c <setup+0x2a8>)
   b55aa:	9200      	str	r2, [sp, #0]
   b55ac:	4630      	mov	r0, r6
   b55ae:	f006 fd41 	bl	bc034 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b55b2:	782b      	ldrb	r3, [r5, #0]
   b55b4:	b90b      	cbnz	r3, b55ba <setup+0x246>
   b55b6:	2302      	movs	r3, #2
   b55b8:	702b      	strb	r3, [r5, #0]
}
   b55ba:	b01f      	add	sp, #124	; 0x7c
   b55bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return -1.0f;
   b55c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b55c4:	e7c1      	b.n	b554a <setup+0x1d6>
	else Log.info("No user button push detechted");
   b55c6:	4916      	ldr	r1, [pc, #88]	; (b5620 <setup+0x2ac>)
   b55c8:	4804      	ldr	r0, [pc, #16]	; (b55dc <setup+0x268>)
   b55ca:	f7fe fd87 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b55ce:	e7e8      	b.n	b55a2 <setup+0x22e>
   b55d0:	2003e274 	.word	0x2003e274
   b55d4:	000bfe7b 	.word	0x000bfe7b
   b55d8:	000bfe82 	.word	0x000bfe82
   b55dc:	2003e654 	.word	0x2003e654
   b55e0:	000b4b11 	.word	0x000b4b11
   b55e4:	000b4b8b 	.word	0x000b4b8b
   b55e8:	000b4b77 	.word	0x000b4b77
   b55ec:	000bfead 	.word	0x000bfead
   b55f0:	2003e2b0 	.word	0x2003e2b0
   b55f4:	000bfed4 	.word	0x000bfed4
   b55f8:	2003de80 	.word	0x2003de80
   b55fc:	000bad11 	.word	0x000bad11
   b5600:	000bff05 	.word	0x000bff05
   b5604:	000bff2b 	.word	0x000bff2b
   b5608:	000c00aa 	.word	0x000c00aa
   b560c:	2003e3d8 	.word	0x2003e3d8
   b5610:	000bff5d 	.word	0x000bff5d
   b5614:	2003e3d9 	.word	0x2003e3d9
   b5618:	000c00a8 	.word	0x000c00a8
   b561c:	000b4b1d 	.word	0x000b4b1d
   b5620:	000bff7c 	.word	0x000bff7c
   b5624:	000bfe78 	.word	0x000bfe78

000b5628 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5628:	b510      	push	{r4, lr}
   b562a:	4b03      	ldr	r3, [pc, #12]	; (b5638 <_ZN8MB85RC64D1Ev+0x10>)
   b562c:	6003      	str	r3, [r0, #0]
   b562e:	4604      	mov	r4, r0
   b5630:	f002 fd30 	bl	b8094 <_ZN6MB85RCD1Ev>
   b5634:	4620      	mov	r0, r4
   b5636:	bd10      	pop	{r4, pc}
   b5638:	000bffdc 	.word	0x000bffdc

000b563c <_ZN8MB85RC64D0Ev>:
   b563c:	b510      	push	{r4, lr}
   b563e:	4604      	mov	r4, r0
   b5640:	f7ff fff2 	bl	b5628 <_ZN8MB85RC64D1Ev>
   b5644:	4620      	mov	r0, r4
   b5646:	2110      	movs	r1, #16
   b5648:	f7fe fd29 	bl	b409e <_ZdlPvj>
   b564c:	4620      	mov	r0, r4
   b564e:	bd10      	pop	{r4, pc}

000b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5650:	b510      	push	{r4, lr}
            if (!handle_) {
   b5652:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5654:	4604      	mov	r4, r0
            if (!handle_) {
   b5656:	b90b      	cbnz	r3, b565c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5658:	f005 fb12 	bl	bac80 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b565c:	6820      	ldr	r0, [r4, #0]
        }
   b565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5662:	f005 bb1d 	b.w	baca0 <os_mutex_recursive_lock>

000b5666 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5666:	b538      	push	{r3, r4, r5, lr}
   b5668:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b566a:	3004      	adds	r0, #4
   b566c:	f7ff fff0 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5670:	6a20      	ldr	r0, [r4, #32]
   b5672:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5674:	6803      	ldr	r3, [r0, #0]
   b5676:	68dd      	ldr	r5, [r3, #12]
   b5678:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b567c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b567e:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5684:	f005 bb14 	b.w	bacb0 <os_mutex_recursive_unlock>

000b5688 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5688:	b538      	push	{r3, r4, r5, lr}
   b568a:	4604      	mov	r4, r0
   b568c:	3004      	adds	r0, #4
   b568e:	f7ff ffdf 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5692:	6a20      	ldr	r0, [r4, #32]
   b5694:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5696:	6803      	ldr	r3, [r0, #0]
   b5698:	689d      	ldr	r5, [r3, #8]
   b569a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b569e:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b56a0:	68a2      	ldr	r2, [r4, #8]
   b56a2:	6823      	ldr	r3, [r4, #0]
   b56a4:	88d1      	ldrh	r1, [r2, #6]
   b56a6:	695b      	ldr	r3, [r3, #20]
   b56a8:	4620      	mov	r0, r4
   b56aa:	4798      	blx	r3
   b56ac:	b918      	cbnz	r0, b56b6 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b56ae:	6823      	ldr	r3, [r4, #0]
   b56b0:	4620      	mov	r0, r4
   b56b2:	699b      	ldr	r3, [r3, #24]
   b56b4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56b6:	6860      	ldr	r0, [r4, #4]
   b56b8:	f005 fafa 	bl	bacb0 <os_mutex_recursive_unlock>
        }
   b56bc:	2001      	movs	r0, #1
   b56be:	bd38      	pop	{r3, r4, r5, pc}

000b56c0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b56c0:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b56c2:	4b04      	ldr	r3, [pc, #16]	; (b56d4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b56c4:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b56c6:	4604      	mov	r4, r0
            if (handle_) {
   b56c8:	6840      	ldr	r0, [r0, #4]
   b56ca:	b108      	cbz	r0, b56d0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b56cc:	f005 fae0 	bl	bac90 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b56d0:	4620      	mov	r0, r4
   b56d2:	bd10      	pop	{r4, pc}
   b56d4:	000c0db0 	.word	0x000c0db0

000b56d8 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b56d8:	b510      	push	{r4, lr}
   b56da:	4b03      	ldr	r3, [pc, #12]	; (b56e8 <_ZN13sysStatusDataD1Ev+0x10>)
   b56dc:	6003      	str	r3, [r0, #0]
   b56de:	4604      	mov	r4, r0
   b56e0:	f7ff ffee 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b56e4:	4620      	mov	r0, r4
   b56e6:	bd10      	pop	{r4, pc}
   b56e8:	000c0024 	.word	0x000c0024

000b56ec <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b56ec:	b510      	push	{r4, lr}
   b56ee:	4604      	mov	r4, r0
}
   b56f0:	f7ff fff2 	bl	b56d8 <_ZN13sysStatusDataD1Ev>
   b56f4:	4620      	mov	r0, r4
   b56f6:	2168      	movs	r1, #104	; 0x68
   b56f8:	f7fe fcd1 	bl	b409e <_ZdlPvj>
   b56fc:	4620      	mov	r0, r4
   b56fe:	bd10      	pop	{r4, pc}

000b5700 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5700:	b510      	push	{r4, lr}
   b5702:	4b03      	ldr	r3, [pc, #12]	; (b5710 <_ZN17currentStatusDataD1Ev+0x10>)
   b5704:	6003      	str	r3, [r0, #0]
   b5706:	4604      	mov	r4, r0
   b5708:	f7ff ffda 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b570c:	4620      	mov	r0, r4
   b570e:	bd10      	pop	{r4, pc}
   b5710:	000c0050 	.word	0x000c0050

000b5714 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5714:	b510      	push	{r4, lr}
   b5716:	4604      	mov	r4, r0
}
   b5718:	f7ff fff2 	bl	b5700 <_ZN17currentStatusDataD1Ev>
   b571c:	4620      	mov	r0, r4
   b571e:	2178      	movs	r1, #120	; 0x78
   b5720:	f7fe fcbd 	bl	b409e <_ZdlPvj>
   b5724:	4620      	mov	r0, r4
   b5726:	bd10      	pop	{r4, pc}

000b5728 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b5728:	b510      	push	{r4, lr}
   b572a:	4b03      	ldr	r3, [pc, #12]	; (b5738 <_ZN10nodeIDDataD1Ev+0x10>)
   b572c:	6003      	str	r3, [r0, #0]
   b572e:	4604      	mov	r4, r0
   b5730:	f7ff ffc6 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5734:	4620      	mov	r0, r4
   b5736:	bd10      	pop	{r4, pc}
   b5738:	000bfff8 	.word	0x000bfff8

000b573c <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b573c:	b510      	push	{r4, lr}
   b573e:	4604      	mov	r4, r0
}
   b5740:	f7ff fff2 	bl	b5728 <_ZN10nodeIDDataD1Ev>
   b5744:	4620      	mov	r0, r4
   b5746:	21b0      	movs	r1, #176	; 0xb0
   b5748:	f7fe fca9 	bl	b409e <_ZdlPvj>
   b574c:	4620      	mov	r0, r4
   b574e:	bd10      	pop	{r4, pc}

000b5750 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5750:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5754:	6081      	str	r1, [r0, #8]
   b5756:	4909      	ldr	r1, [pc, #36]	; (b577c <_ZN13sysStatusDataC1Ev+0x2c>)
   b5758:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b575c:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5760:	2101      	movs	r1, #1
   b5762:	8281      	strh	r1, [r0, #20]
   b5764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5768:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b576a:	4905      	ldr	r1, [pc, #20]	; (b5780 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b576c:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b576e:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5772:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5774:	6182      	str	r2, [r0, #24]
   b5776:	4a03      	ldr	r2, [pc, #12]	; (b5784 <_ZN13sysStatusDataC1Ev+0x34>)
   b5778:	6002      	str	r2, [r0, #0]
};
   b577a:	4770      	bx	lr
   b577c:	20a99e74 	.word	0x20a99e74
   b5780:	2003e3e8 	.word	0x2003e3e8
   b5784:	000c0024 	.word	0x000c0024

000b5788 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5788:	b510      	push	{r4, lr}
    if (!_instance) {
   b578a:	4c06      	ldr	r4, [pc, #24]	; (b57a4 <_ZN13sysStatusData8instanceEv+0x1c>)
   b578c:	6823      	ldr	r3, [r4, #0]
   b578e:	b93b      	cbnz	r3, b57a0 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5790:	2068      	movs	r0, #104	; 0x68
   b5792:	f7fe fc80 	bl	b4096 <_Znwj>
   b5796:	4603      	mov	r3, r0
   b5798:	b108      	cbz	r0, b579e <_ZN13sysStatusData8instanceEv+0x16>
   b579a:	f7ff ffd9 	bl	b5750 <_ZN13sysStatusDataC1Ev>
   b579e:	6023      	str	r3, [r4, #0]
}
   b57a0:	6820      	ldr	r0, [r4, #0]
   b57a2:	bd10      	pop	{r4, pc}
   b57a4:	2003e3e0 	.word	0x2003e3e0

000b57a8 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b57a8:	b508      	push	{r3, lr}
    fram.begin();
   b57aa:	6a00      	ldr	r0, [r0, #32]
   b57ac:	f002 fc88 	bl	b80c0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b57b0:	f7ff ffea 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b57b4:	6803      	ldr	r3, [r0, #0]
   b57b6:	685b      	ldr	r3, [r3, #4]
   b57b8:	4798      	blx	r3
}
   b57ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGatewayConfiguration();                             // Here we will fix the settings specific to the node
   b57be:	f005 ba09 	b.w	babd4 <_Z23setGatewayConfigurationv>

000b57c2 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b57c2:	b510      	push	{r4, lr}
    fram.begin();
   b57c4:	6a00      	ldr	r0, [r0, #32]
   b57c6:	f002 fc7b 	bl	b80c0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b57ca:	f7ff ffdd 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b57ce:	6803      	ldr	r3, [r0, #0]
}
   b57d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b57d4:	685b      	ldr	r3, [r3, #4]
   b57d6:	4718      	bx	r3

000b57d8 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b57d8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b57da:	f7ff ffd5 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b57de:	6803      	ldr	r3, [r0, #0]
}
   b57e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b57e4:	68db      	ldr	r3, [r3, #12]
   b57e6:	2100      	movs	r1, #0
   b57e8:	4718      	bx	r3
	...

000b57ec <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b57ec:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b57ee:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b57f2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b57f4:	6182      	str	r2, [r0, #24]
   b57f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b57fa:	6081      	str	r1, [r0, #8]
   b57fc:	61c2      	str	r2, [r0, #28]
   b57fe:	4907      	ldr	r1, [pc, #28]	; (b581c <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5800:	4a07      	ldr	r2, [pc, #28]	; (b5820 <_ZN17currentStatusDataC1Ev+0x34>)
   b5802:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5804:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5808:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b580a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b580e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5810:	2101      	movs	r1, #1
   b5812:	4a04      	ldr	r2, [pc, #16]	; (b5824 <_ZN17currentStatusDataC1Ev+0x38>)
   b5814:	8281      	strh	r1, [r0, #20]
   b5816:	6002      	str	r2, [r0, #0]
};
   b5818:	4770      	bx	lr
   b581a:	bf00      	nop
   b581c:	20a99e74 	.word	0x20a99e74
   b5820:	2003e3e8 	.word	0x2003e3e8
   b5824:	000c0050 	.word	0x000c0050

000b5828 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5828:	b510      	push	{r4, lr}
    if (!_instance) {
   b582a:	4c06      	ldr	r4, [pc, #24]	; (b5844 <_ZN17currentStatusData8instanceEv+0x1c>)
   b582c:	6823      	ldr	r3, [r4, #0]
   b582e:	b93b      	cbnz	r3, b5840 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5830:	2078      	movs	r0, #120	; 0x78
   b5832:	f7fe fc30 	bl	b4096 <_Znwj>
   b5836:	4603      	mov	r3, r0
   b5838:	b108      	cbz	r0, b583e <_ZN17currentStatusData8instanceEv+0x16>
   b583a:	f7ff ffd7 	bl	b57ec <_ZN17currentStatusDataC1Ev>
   b583e:	6023      	str	r3, [r4, #0]
}
   b5840:	6820      	ldr	r0, [r4, #0]
   b5842:	bd10      	pop	{r4, pc}
   b5844:	2003e3e4 	.word	0x2003e3e4

000b5848 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b5848:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b584a:	f7ff ff9d 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b584e:	6803      	ldr	r3, [r0, #0]
}
   b5850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5854:	68db      	ldr	r3, [r3, #12]
   b5856:	2100      	movs	r1, #0
   b5858:	4718      	bx	r3
   b585a:	0000      	movs	r0, r0
   b585c:	0000      	movs	r0, r0
	...

000b5860 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b5860:	b510      	push	{r4, lr}
   b5862:	4604      	mov	r4, r0
   b5864:	ed2d 8b02 	vpush	{d8}
   b5868:	3004      	adds	r0, #4
   b586a:	f7ff fef1 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b586e:	68e3      	ldr	r3, [r4, #12]
   b5870:	3b08      	subs	r3, #8
   b5872:	2b17      	cmp	r3, #23
   b5874:	d90c      	bls.n	b5890 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5876:	68a3      	ldr	r3, [r4, #8]
   b5878:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b587c:	6860      	ldr	r0, [r4, #4]
   b587e:	f005 fa17 	bl	bacb0 <os_mutex_recursive_unlock>
}
   b5882:	eeb0 0a48 	vmov.f32	s0, s16
   b5886:	eef0 0a68 	vmov.f32	s1, s17
   b588a:	ecbd 8b02 	vpop	{d8}
   b588e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5890:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5898 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5894:	e7f2      	b.n	b587c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5896:	bf00      	nop
	...

000b58a0 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58a2:	4604      	mov	r4, r0
   b58a4:	3004      	adds	r0, #4
   b58a6:	ec57 6b10 	vmov	r6, r7, d0
   b58aa:	f7ff fed1 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b58ae:	68e3      	ldr	r3, [r4, #12]
   b58b0:	3b08      	subs	r3, #8
   b58b2:	2b17      	cmp	r3, #23
   b58b4:	d912      	bls.n	b58dc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b58b6:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b58b8:	4630      	mov	r0, r6
   b58ba:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b58be:	4639      	mov	r1, r7
   b58c0:	f009 fc06 	bl	bf0d0 <__aeabi_dcmpeq>
   b58c4:	b950      	cbnz	r0, b58dc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b58c6:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b58ca:	4620      	mov	r0, r4
   b58cc:	68a5      	ldr	r5, [r4, #8]
   b58ce:	f005 f8d1 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b58d2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b58d4:	6823      	ldr	r3, [r4, #0]
   b58d6:	4620      	mov	r0, r4
   b58d8:	691b      	ldr	r3, [r3, #16]
   b58da:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b58dc:	6860      	ldr	r0, [r4, #4]
}
   b58de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b58e2:	f005 b9e5 	b.w	bacb0 <os_mutex_recursive_unlock>
	...

000b58e8 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b58e8:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b58ea:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b58ee:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b58f0:	6182      	str	r2, [r0, #24]
   b58f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b58f6:	6081      	str	r1, [r0, #8]
   b58f8:	61c2      	str	r2, [r0, #28]
   b58fa:	4907      	ldr	r1, [pc, #28]	; (b5918 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b58fc:	4a07      	ldr	r2, [pc, #28]	; (b591c <_ZN10nodeIDDataC1Ev+0x34>)
   b58fe:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5900:	f04f 0c88 	mov.w	ip, #136	; 0x88
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5904:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5906:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b590a:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b590c:	2101      	movs	r1, #1
   b590e:	4a04      	ldr	r2, [pc, #16]	; (b5920 <_ZN10nodeIDDataC1Ev+0x38>)
   b5910:	8281      	strh	r1, [r0, #20]
   b5912:	6002      	str	r2, [r0, #0]
};
   b5914:	4770      	bx	lr
   b5916:	bf00      	nop
   b5918:	20a99e74 	.word	0x20a99e74
   b591c:	2003e3e8 	.word	0x2003e3e8
   b5920:	000bfff8 	.word	0x000bfff8

000b5924 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5924:	b510      	push	{r4, lr}
    if (!_instance) {
   b5926:	4c06      	ldr	r4, [pc, #24]	; (b5940 <_ZN10nodeIDData8instanceEv+0x1c>)
   b5928:	6823      	ldr	r3, [r4, #0]
   b592a:	b93b      	cbnz	r3, b593c <_ZN10nodeIDData8instanceEv+0x18>
        _instance = new nodeIDData();
   b592c:	20b0      	movs	r0, #176	; 0xb0
   b592e:	f7fe fbb2 	bl	b4096 <_Znwj>
   b5932:	4603      	mov	r3, r0
   b5934:	b108      	cbz	r0, b593a <_ZN10nodeIDData8instanceEv+0x16>
   b5936:	f7ff ffd7 	bl	b58e8 <_ZN10nodeIDDataC1Ev>
   b593a:	6023      	str	r3, [r4, #0]
}
   b593c:	6820      	ldr	r0, [r4, #0]
   b593e:	bd10      	pop	{r4, pc}
   b5940:	2003e3dc 	.word	0x2003e3dc

000b5944 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b5944:	b510      	push	{r4, lr}
    fram.begin();
   b5946:	6a00      	ldr	r0, [r0, #32]
   b5948:	f002 fbba 	bl	b80c0 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b594c:	f7ff ffea 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5950:	6803      	ldr	r3, [r0, #0]
}
   b5952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b5956:	685b      	ldr	r3, [r3, #4]
   b5958:	4718      	bx	r3

000b595a <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b595a:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b595c:	f7ff ffe2 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5960:	6803      	ldr	r3, [r0, #0]
}
   b5962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b5966:	68db      	ldr	r3, [r3, #12]
   b5968:	2100      	movs	r1, #0
   b596a:	4718      	bx	r3

000b596c <_ZNK10nodeIDData14get_deviceID_1Ev>:

void nodeIDData::set_nodeNumber_1(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_1), value);
}

String nodeIDData::get_deviceID_1() const {
   b596c:	b538      	push	{r3, r4, r5, lr}
   b596e:	4604      	mov	r4, r0
   b5970:	460d      	mov	r5, r1
	String result;
   b5972:	4905      	ldr	r1, [pc, #20]	; (b5988 <_ZNK10nodeIDData14get_deviceID_1Ev+0x1c>)
   b5974:	f008 f91d 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), result);
   b5978:	4623      	mov	r3, r4
   b597a:	2219      	movs	r2, #25
   b597c:	2110      	movs	r1, #16
   b597e:	4628      	mov	r0, r5
   b5980:	f005 f81f 	bl	ba9c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5984:	4620      	mov	r0, r4
   b5986:	bd38      	pop	{r3, r4, r5, pc}
   b5988:	000c0f58 	.word	0x000c0f58

000b598c <_ZN10nodeIDData14set_deviceID_1EPKc>:

bool nodeIDData::set_deviceID_1(const char *str) {
   b598c:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_1), sizeof(NodeData::deviceID_1), str);
   b598e:	2219      	movs	r2, #25
   b5990:	2110      	movs	r1, #16
   b5992:	f005 b887 	b.w	baaa4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b5998 <_ZNK10nodeIDData14get_deviceID_2Ev>:

void nodeIDData::set_nodeNumber_2(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_2), value);
}

String nodeIDData::get_deviceID_2() const {
   b5998:	b538      	push	{r3, r4, r5, lr}
   b599a:	4604      	mov	r4, r0
   b599c:	460d      	mov	r5, r1
	String result;
   b599e:	4905      	ldr	r1, [pc, #20]	; (b59b4 <_ZNK10nodeIDData14get_deviceID_2Ev+0x1c>)
   b59a0:	f008 f907 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), result);
   b59a4:	4623      	mov	r3, r4
   b59a6:	2219      	movs	r2, #25
   b59a8:	2138      	movs	r1, #56	; 0x38
   b59aa:	4628      	mov	r0, r5
   b59ac:	f005 f809 	bl	ba9c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b59b0:	4620      	mov	r0, r4
   b59b2:	bd38      	pop	{r3, r4, r5, pc}
   b59b4:	000c0f58 	.word	0x000c0f58

000b59b8 <_ZN10nodeIDData14set_deviceID_2EPKc>:

bool nodeIDData::set_deviceID_2(const char *str) {
   b59b8:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_2), sizeof(NodeData::deviceID_2), str);
   b59ba:	2219      	movs	r2, #25
   b59bc:	2138      	movs	r1, #56	; 0x38
   b59be:	f005 b871 	b.w	baaa4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>
	...

000b59c4 <_ZNK10nodeIDData14get_deviceID_3Ev>:

void nodeIDData::set_nodeNumber_3(uint8_t value) {
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
}

String nodeIDData::get_deviceID_3() const {
   b59c4:	b538      	push	{r3, r4, r5, lr}
   b59c6:	4604      	mov	r4, r0
   b59c8:	460d      	mov	r5, r1
	String result;
   b59ca:	4905      	ldr	r1, [pc, #20]	; (b59e0 <_ZNK10nodeIDData14get_deviceID_3Ev+0x1c>)
   b59cc:	f008 f8f1 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), result);
   b59d0:	4623      	mov	r3, r4
   b59d2:	2219      	movs	r2, #25
   b59d4:	2160      	movs	r1, #96	; 0x60
   b59d6:	4628      	mov	r0, r5
   b59d8:	f004 fff3 	bl	ba9c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b59dc:	4620      	mov	r0, r4
   b59de:	bd38      	pop	{r3, r4, r5, pc}
   b59e0:	000c0f58 	.word	0x000c0f58

000b59e4 <_ZN10nodeIDData14set_deviceID_3EPKc>:

bool nodeIDData::set_deviceID_3(const char *str) {
   b59e4:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, deviceID_3), sizeof(NodeData::deviceID_3), str);
   b59e6:	2219      	movs	r2, #25
   b59e8:	2160      	movs	r1, #96	; 0x60
   b59ea:	f005 b85b 	b.w	baaa4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b59ee:	b538      	push	{r3, r4, r5, lr}
   b59f0:	4604      	mov	r4, r0
   b59f2:	3004      	adds	r0, #4
   b59f4:	460d      	mov	r5, r1
   b59f6:	f7ff fe2b 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b59fa:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b59fc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b59fe:	3b01      	subs	r3, #1
   b5a00:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5a02:	bf26      	itte	cs
   b5a04:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5a06:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5a08:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5a0a:	f005 f951 	bl	bacb0 <os_mutex_recursive_unlock>
        }
   b5a0e:	4628      	mov	r0, r5
   b5a10:	bd38      	pop	{r3, r4, r5, pc}

000b5a12 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5a12:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5a14:	2110      	movs	r1, #16
   b5a16:	f7ff ffea 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a1a:	bd08      	pop	{r3, pc}

000b5a1c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5a1c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5a1e:	2117      	movs	r1, #23
   b5a20:	f7ff ffe5 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a24:	bd08      	pop	{r3, pc}

000b5a26 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b5a26:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b5a28:	2110      	movs	r1, #16
   b5a2a:	f7ff ffe0 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a2e:	bd08      	pop	{r3, pc}

000b5a30 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b5a30:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b5a32:	2111      	movs	r1, #17
   b5a34:	f7ff ffdb 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a38:	bd08      	pop	{r3, pc}

000b5a3a <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5a3a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5a3c:	2112      	movs	r1, #18
   b5a3e:	f7ff ffd6 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a42:	bd08      	pop	{r3, pc}

000b5a44 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5a44:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5a46:	2120      	movs	r1, #32
   b5a48:	f7ff ffd1 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a4c:	bd08      	pop	{r3, pc}

000b5a4e <_ZNK17currentStatusData17get_messageNumberEv>:
uint8_t currentStatusData::get_messageNumber() const {
   b5a4e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageNumber));
   b5a50:	2134      	movs	r1, #52	; 0x34
   b5a52:	f7ff ffcc 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a56:	bd08      	pop	{r3, pc}

000b5a58 <_ZNK10nodeIDData16get_nodeNumber_1Ev>:
uint8_t nodeIDData::get_nodeNumber_1() const {
   b5a58:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_1));
   b5a5a:	2129      	movs	r1, #41	; 0x29
   b5a5c:	f7ff ffc7 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a60:	bd08      	pop	{r3, pc}

000b5a62 <_ZNK10nodeIDData16get_nodeNumber_2Ev>:
uint8_t nodeIDData::get_nodeNumber_2() const {
   b5a62:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_2));
   b5a64:	2151      	movs	r1, #81	; 0x51
   b5a66:	f7ff ffc2 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a6a:	bd08      	pop	{r3, pc}

000b5a6c <_ZNK10nodeIDData16get_nodeNumber_3Ev>:
uint8_t nodeIDData::get_nodeNumber_3() const {
   b5a6c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(NodeData, nodeNumber_3));
   b5a6e:	2179      	movs	r1, #121	; 0x79
   b5a70:	f7ff ffbd 	bl	b59ee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5a74:	bd08      	pop	{r3, pc}

000b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5a76:	b570      	push	{r4, r5, r6, lr}
   b5a78:	4604      	mov	r4, r0
   b5a7a:	3004      	adds	r0, #4
   b5a7c:	460d      	mov	r5, r1
   b5a7e:	4616      	mov	r6, r2
   b5a80:	f7ff fde6 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a84:	68e3      	ldr	r3, [r4, #12]
   b5a86:	3b01      	subs	r3, #1
   b5a88:	42ab      	cmp	r3, r5
   b5a8a:	d30d      	bcc.n	b5aa8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5a8c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5a8e:	5d5a      	ldrb	r2, [r3, r5]
   b5a90:	42b2      	cmp	r2, r6
   b5a92:	d009      	beq.n	b5aa8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5a94:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5a96:	4620      	mov	r0, r4
   b5a98:	68a5      	ldr	r5, [r4, #8]
   b5a9a:	f004 ffeb 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5a9e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5aa0:	6823      	ldr	r3, [r4, #0]
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	691b      	ldr	r3, [r3, #16]
   b5aa6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5aa8:	6860      	ldr	r0, [r4, #4]
        }
   b5aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5aae:	f005 b8ff 	b.w	bacb0 <os_mutex_recursive_unlock>

000b5ab2 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5ab2:	b508      	push	{r3, lr}
   b5ab4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5ab6:	2117      	movs	r1, #23
   b5ab8:	f7ff ffdd 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5abc:	bd08      	pop	{r3, pc}

000b5abe <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b5abe:	b508      	push	{r3, lr}
   b5ac0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b5ac2:	2110      	movs	r1, #16
   b5ac4:	f7ff ffd7 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ac8:	bd08      	pop	{r3, pc}

000b5aca <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b5aca:	b508      	push	{r3, lr}
   b5acc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b5ace:	2111      	movs	r1, #17
   b5ad0:	f7ff ffd1 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ad4:	bd08      	pop	{r3, pc}

000b5ad6 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5ad6:	b508      	push	{r3, lr}
   b5ad8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5ada:	2112      	movs	r1, #18
   b5adc:	f7ff ffcb 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ae0:	bd08      	pop	{r3, pc}

000b5ae2 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5ae2:	b508      	push	{r3, lr}
   b5ae4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5ae6:	2120      	movs	r1, #32
   b5ae8:	f7ff ffc5 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5aec:	bd08      	pop	{r3, pc}

000b5aee <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b5aee:	b508      	push	{r3, lr}
   b5af0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b5af2:	2130      	movs	r1, #48	; 0x30
   b5af4:	f7ff ffbf 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5af8:	bd08      	pop	{r3, pc}

000b5afa <_ZN17currentStatusData17set_messageNumberEh>:
void currentStatusData::set_messageNumber(uint8_t value) {
   b5afa:	b508      	push	{r3, lr}
   b5afc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageNumber), value);
   b5afe:	2134      	movs	r1, #52	; 0x34
   b5b00:	f7ff ffb9 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b04:	bd08      	pop	{r3, pc}

000b5b06 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5b06:	b508      	push	{r3, lr}
   b5b08:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5b0a:	2144      	movs	r1, #68	; 0x44
   b5b0c:	f7ff ffb3 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b10:	bd08      	pop	{r3, pc}

000b5b12 <_ZN10nodeIDData16set_nodeNumber_1Eh>:
void nodeIDData::set_nodeNumber_1(uint8_t value) {
   b5b12:	b508      	push	{r3, lr}
   b5b14:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_1), value);
   b5b16:	2129      	movs	r1, #41	; 0x29
   b5b18:	f7ff ffad 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b1c:	bd08      	pop	{r3, pc}

000b5b1e <_ZN10nodeIDData16set_nodeNumber_2Eh>:
void nodeIDData::set_nodeNumber_2(uint8_t value) {
   b5b1e:	b508      	push	{r3, lr}
   b5b20:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_2), value);
   b5b22:	2151      	movs	r1, #81	; 0x51
   b5b24:	f7ff ffa7 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b28:	bd08      	pop	{r3, pc}

000b5b2a <_ZN10nodeIDData16set_nodeNumber_3Eh>:
void nodeIDData::set_nodeNumber_3(uint8_t value) {
   b5b2a:	b508      	push	{r3, lr}
   b5b2c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(NodeData, nodeNumber_3), value);
   b5b2e:	2179      	movs	r1, #121	; 0x79
   b5b30:	f7ff ffa1 	bl	b5a76 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5b34:	bd08      	pop	{r3, pc}

000b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5b36:	b538      	push	{r3, r4, r5, lr}
   b5b38:	4604      	mov	r4, r0
   b5b3a:	3004      	adds	r0, #4
   b5b3c:	460d      	mov	r5, r1
   b5b3e:	f7ff fd87 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b42:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5b44:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b46:	3b02      	subs	r3, #2
   b5b48:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5b4a:	bf26      	itte	cs
   b5b4c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5b4e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5b50:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5b52:	f005 f8ad 	bl	bacb0 <os_mutex_recursive_unlock>
        }
   b5b56:	4628      	mov	r0, r5
   b5b58:	bd38      	pop	{r3, r4, r5, pc}

000b5b5a <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5b5a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5b5c:	2112      	movs	r1, #18
   b5b5e:	f7ff ffea 	bl	b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5b62:	bd08      	pop	{r3, pc}

000b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5b64:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5b66:	212a      	movs	r1, #42	; 0x2a
   b5b68:	f7ff ffe5 	bl	b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5b6c:	bd08      	pop	{r3, pc}

000b5b6e <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b5b6e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b5b70:	2132      	movs	r1, #50	; 0x32
   b5b72:	f7ff ffe0 	bl	b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5b76:	bd08      	pop	{r3, pc}

000b5b78 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b5b78:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5b7a:	2140      	movs	r1, #64	; 0x40
   b5b7c:	f7ff ffdb 	bl	b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5b80:	bd08      	pop	{r3, pc}

000b5b82 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b5b82:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5b84:	2142      	movs	r1, #66	; 0x42
   b5b86:	f7ff ffd6 	bl	b5b36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5b8a:	bd08      	pop	{r3, pc}

000b5b8c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5b8c:	b570      	push	{r4, r5, r6, lr}
   b5b8e:	4604      	mov	r4, r0
   b5b90:	3004      	adds	r0, #4
   b5b92:	460d      	mov	r5, r1
   b5b94:	4616      	mov	r6, r2
   b5b96:	f7ff fd5b 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b9a:	68e3      	ldr	r3, [r4, #12]
   b5b9c:	3b02      	subs	r3, #2
   b5b9e:	42ab      	cmp	r3, r5
   b5ba0:	d30d      	bcc.n	b5bbe <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5ba2:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5ba4:	5b5a      	ldrh	r2, [r3, r5]
   b5ba6:	42b2      	cmp	r2, r6
   b5ba8:	d009      	beq.n	b5bbe <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5baa:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5bac:	4620      	mov	r0, r4
   b5bae:	68a5      	ldr	r5, [r4, #8]
   b5bb0:	f004 ff60 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5bb4:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5bb6:	6823      	ldr	r3, [r4, #0]
   b5bb8:	4620      	mov	r0, r4
   b5bba:	691b      	ldr	r3, [r3, #16]
   b5bbc:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5bbe:	6860      	ldr	r0, [r4, #4]
        }
   b5bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5bc4:	f005 b874 	b.w	bacb0 <os_mutex_recursive_unlock>

000b5bc8 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5bcc:	212a      	movs	r1, #42	; 0x2a
   b5bce:	f7ff ffdd 	bl	b5b8c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5bd2:	bd08      	pop	{r3, pc}

000b5bd4 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b5bd4:	b508      	push	{r3, lr}
   b5bd6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b5bd8:	2132      	movs	r1, #50	; 0x32
   b5bda:	f7ff ffd7 	bl	b5b8c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5bde:	bd08      	pop	{r3, pc}

000b5be0 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5be0:	b508      	push	{r3, lr}
   b5be2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5be4:	2140      	movs	r1, #64	; 0x40
   b5be6:	f7ff ffd1 	bl	b5b8c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5bea:	bd08      	pop	{r3, pc}

000b5bec <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b5bec:	b508      	push	{r3, lr}
   b5bee:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5bf0:	2142      	movs	r1, #66	; 0x42
   b5bf2:	f7ff ffcb 	bl	b5b8c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5bf6:	bd08      	pop	{r3, pc}

000b5bf8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5bf8:	b538      	push	{r3, r4, r5, lr}
   b5bfa:	4604      	mov	r4, r0
   b5bfc:	3004      	adds	r0, #4
   b5bfe:	460d      	mov	r5, r1
   b5c00:	f7ff fd26 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c04:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5c06:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c08:	3b01      	subs	r3, #1
   b5c0a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5c0c:	bf26      	itte	cs
   b5c0e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5c10:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5c12:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5c14:	f005 f84c 	bl	bacb0 <os_mutex_recursive_unlock>
        }
   b5c18:	4628      	mov	r0, r5
   b5c1a:	bd38      	pop	{r3, r4, r5, pc}

000b5c1c <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5c1c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5c1e:	2116      	movs	r1, #22
   b5c20:	f7ff ffea 	bl	b5bf8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5c24:	bd08      	pop	{r3, pc}

000b5c26 <_ZNK13sysStatusData14get_verizonSIMEv>:
bool sysStatusData::get_verizonSIM() const {
   b5c26:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, verizonSIM));
   b5c28:	213b      	movs	r1, #59	; 0x3b
   b5c2a:	f7ff ffe5 	bl	b5bf8 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5c2e:	bd08      	pop	{r3, pc}

000b5c30 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5c30:	b570      	push	{r4, r5, r6, lr}
   b5c32:	4604      	mov	r4, r0
   b5c34:	3004      	adds	r0, #4
   b5c36:	460d      	mov	r5, r1
   b5c38:	4616      	mov	r6, r2
   b5c3a:	f7ff fd09 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c3e:	68e3      	ldr	r3, [r4, #12]
   b5c40:	3b01      	subs	r3, #1
   b5c42:	42ab      	cmp	r3, r5
   b5c44:	d30d      	bcc.n	b5c62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c46:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5c48:	5d5a      	ldrb	r2, [r3, r5]
   b5c4a:	42b2      	cmp	r2, r6
   b5c4c:	d009      	beq.n	b5c62 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5c4e:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5c50:	4620      	mov	r0, r4
   b5c52:	68a5      	ldr	r5, [r4, #8]
   b5c54:	f004 ff0e 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5c58:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5c5a:	6823      	ldr	r3, [r4, #0]
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	691b      	ldr	r3, [r3, #16]
   b5c60:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c62:	6860      	ldr	r0, [r4, #4]
        }
   b5c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5c68:	f005 b822 	b.w	bacb0 <os_mutex_recursive_unlock>

000b5c6c <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5c70:	2116      	movs	r1, #22
   b5c72:	f7ff ffdd 	bl	b5c30 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5c76:	bd08      	pop	{r3, pc}

000b5c78 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b5c78:	b508      	push	{r3, lr}
   b5c7a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5c7c:	2138      	movs	r1, #56	; 0x38
   b5c7e:	f7ff ffd7 	bl	b5c30 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5c82:	bd08      	pop	{r3, pc}

000b5c84 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b5c84:	b508      	push	{r3, lr}
   b5c86:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b5c88:	213b      	movs	r1, #59	; 0x3b
   b5c8a:	f7ff ffd1 	bl	b5c30 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5c8e:	bd08      	pop	{r3, pc}

000b5c90 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c92:	4604      	mov	r4, r0
   b5c94:	3004      	adds	r0, #4
   b5c96:	460d      	mov	r5, r1
   b5c98:	f7ff fcda 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c9c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5c9e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5ca0:	3b08      	subs	r3, #8
   b5ca2:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5ca4:	bf23      	ittte	cs
   b5ca6:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5ca8:	1949      	addcs	r1, r1, r5
   b5caa:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5cae:	2600      	movcc	r6, #0
   b5cb0:	bf38      	it	cc
   b5cb2:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5cb4:	f004 fffc 	bl	bacb0 <os_mutex_recursive_unlock>
        }
   b5cb8:	4630      	mov	r0, r6
   b5cba:	4639      	mov	r1, r7
   b5cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5cbe <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5cbe:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5cc0:	2120      	movs	r1, #32
   b5cc2:	f7ff ffe5 	bl	b5c90 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5cc6:	bd08      	pop	{r3, pc}

000b5cc8 <_ZNK10nodeIDData20get_lastConnection_1Ev>:
time_t nodeIDData::get_lastConnection_1() const {
   b5cc8:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_1));
   b5cca:	2130      	movs	r1, #48	; 0x30
   b5ccc:	f7ff ffe0 	bl	b5c90 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5cd0:	bd08      	pop	{r3, pc}

000b5cd2 <_ZNK10nodeIDData20get_lastConnection_2Ev>:
time_t nodeIDData::get_lastConnection_2() const {
   b5cd2:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(NodeData, lastConnection_2));
   b5cd4:	2158      	movs	r1, #88	; 0x58
   b5cd6:	f7ff ffdb 	bl	b5c90 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5cda:	bd08      	pop	{r3, pc}

000b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cde:	4604      	mov	r4, r0
   b5ce0:	3004      	adds	r0, #4
   b5ce2:	460d      	mov	r5, r1
   b5ce4:	461e      	mov	r6, r3
   b5ce6:	4617      	mov	r7, r2
   b5ce8:	f7ff fcb2 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cec:	68e3      	ldr	r3, [r4, #12]
   b5cee:	3b08      	subs	r3, #8
   b5cf0:	42ab      	cmp	r3, r5
   b5cf2:	d312      	bcc.n	b5d1a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5cf4:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5cf6:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5cf8:	5958      	ldr	r0, [r3, r5]
   b5cfa:	6851      	ldr	r1, [r2, #4]
   b5cfc:	42b1      	cmp	r1, r6
   b5cfe:	bf08      	it	eq
   b5d00:	42b8      	cmpeq	r0, r7
   b5d02:	d00a      	beq.n	b5d1a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5d04:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5d06:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5d08:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5d0a:	68a5      	ldr	r5, [r4, #8]
   b5d0c:	f004 feb2 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5d10:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5d12:	6823      	ldr	r3, [r4, #0]
   b5d14:	4620      	mov	r0, r4
   b5d16:	691b      	ldr	r3, [r3, #16]
   b5d18:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5d1a:	6860      	ldr	r0, [r4, #4]
        }
   b5d1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d20:	f004 bfc6 	b.w	bacb0 <os_mutex_recursive_unlock>

000b5d24 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5d24:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5d26:	2120      	movs	r1, #32
   b5d28:	f7ff ffd8 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d2c:	bd08      	pop	{r3, pc}

000b5d2e <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5d2e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5d30:	2138      	movs	r1, #56	; 0x38
   b5d32:	f7ff ffd3 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d36:	bd08      	pop	{r3, pc}

000b5d38 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b5d38:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5d3a:	2148      	movs	r1, #72	; 0x48
   b5d3c:	f7ff ffce 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d40:	bd08      	pop	{r3, pc}

000b5d42 <_ZN10nodeIDData20set_lastConnection_1Ex>:
void nodeIDData::set_lastConnection_1(time_t value) {
   b5d42:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_1), value);
   b5d44:	2130      	movs	r1, #48	; 0x30
   b5d46:	f7ff ffc9 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d4a:	bd08      	pop	{r3, pc}

000b5d4c <_ZN10nodeIDData20set_lastConnection_2Ex>:
void nodeIDData::set_lastConnection_2(time_t value) {
   b5d4c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_2), value);
   b5d4e:	2158      	movs	r1, #88	; 0x58
   b5d50:	f7ff ffc4 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d54:	bd08      	pop	{r3, pc}

000b5d56 <_ZN10nodeIDData20set_lastConnection_3Ex>:

time_t nodeIDData::get_lastConnection_3() const {
    return getValue<time_t>(offsetof(NodeData, lastConnection_3));
}

void nodeIDData::set_lastConnection_3(time_t value) {
   b5d56:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(NodeData, lastConnection_3), value);
   b5d58:	2180      	movs	r1, #128	; 0x80
   b5d5a:	f7ff ffbf 	bl	b5cdc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5d5e:	bd08      	pop	{r3, pc}

000b5d60 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5d60:	b570      	push	{r4, r5, r6, lr}
  Log.info("A new day - resetting everything");
   b5d62:	4d31      	ldr	r5, [pc, #196]	; (b5e28 <_Z15resetEverythingv+0xc8>)
   b5d64:	4931      	ldr	r1, [pc, #196]	; (b5e2c <_Z15resetEverythingv+0xcc>)
   b5d66:	4628      	mov	r0, r5
   b5d68:	f7fe f9b8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5d6c:	f7ff fd5c 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b5d70:	2100      	movs	r1, #0
   b5d72:	f7ff ff3b 	bl	b5bec <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5d76:	f7ff fd57 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b5d7a:	2100      	movs	r1, #0
   b5d7c:	f7ff ff30 	bl	b5be0 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5d80:	f7ff fd52 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b5d84:	4604      	mov	r4, r0
   b5d86:	f008 fa68 	bl	be25a <_ZN9TimeClass3nowEv>
   b5d8a:	4602      	mov	r2, r0
   b5d8c:	17c3      	asrs	r3, r0, #31
   b5d8e:	4620      	mov	r0, r4
   b5d90:	f7ff ffcd 	bl	b5d2e <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b5d94:	f7ff fd48 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b5d98:	2100      	movs	r1, #0
   b5d9a:	f7ff feb4 	bl	b5b06 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b5d9e:	f7ff fd43 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b5da2:	4604      	mov	r4, r0
   b5da4:	f008 fa59 	bl	be25a <_ZN9TimeClass3nowEv>
   b5da8:	4602      	mov	r2, r0
   b5daa:	17c3      	asrs	r3, r0, #31
   b5dac:	4620      	mov	r0, r4
   b5dae:	f7ff ffc3 	bl	b5d38 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5db2:	f7ff fce9 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b5db6:	2100      	movs	r1, #0
   b5db8:	f7ff fe7b 	bl	b5ab2 <_ZN13sysStatusData14set_resetCountEh>
  Log.info("clearing the nodeID data");
   b5dbc:	491c      	ldr	r1, [pc, #112]	; (b5e30 <_Z15resetEverythingv+0xd0>)
   b5dbe:	4628      	mov	r0, r5
   b5dc0:	f7fe f98c 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  nodeID.set_nodeNumber_1(1);
   b5dc4:	f7ff fdae 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5dc8:	2101      	movs	r1, #1
   b5dca:	f7ff fea2 	bl	b5b12 <_ZN10nodeIDData16set_nodeNumber_1Eh>
  nodeID.set_deviceID_1(0);
   b5dce:	f7ff fda9 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5dd2:	2100      	movs	r1, #0
   b5dd4:	f7ff fdda 	bl	b598c <_ZN10nodeIDData14set_deviceID_1EPKc>
  nodeID.set_lastConnection_1(0);
   b5dd8:	f7ff fda4 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5ddc:	2200      	movs	r2, #0
   b5dde:	2300      	movs	r3, #0
   b5de0:	f7ff ffaf 	bl	b5d42 <_ZN10nodeIDData20set_lastConnection_1Ex>
  nodeID.set_nodeNumber_2(2);
   b5de4:	f7ff fd9e 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5de8:	2102      	movs	r1, #2
   b5dea:	f7ff fe98 	bl	b5b1e <_ZN10nodeIDData16set_nodeNumber_2Eh>
  nodeID.set_deviceID_2(0);
   b5dee:	f7ff fd99 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5df2:	2100      	movs	r1, #0
   b5df4:	f7ff fde0 	bl	b59b8 <_ZN10nodeIDData14set_deviceID_2EPKc>
  nodeID.set_lastConnection_2(0);
   b5df8:	f7ff fd94 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5dfc:	2200      	movs	r2, #0
   b5dfe:	2300      	movs	r3, #0
   b5e00:	f7ff ffa4 	bl	b5d4c <_ZN10nodeIDData20set_lastConnection_2Ex>
  nodeID.set_nodeNumber_3(3);
   b5e04:	f7ff fd8e 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5e08:	2103      	movs	r1, #3
   b5e0a:	f7ff fe8e 	bl	b5b2a <_ZN10nodeIDData16set_nodeNumber_3Eh>
  nodeID.set_deviceID_3(0);
   b5e0e:	f7ff fd89 	bl	b5924 <_ZN10nodeIDData8instanceEv>
   b5e12:	2100      	movs	r1, #0
   b5e14:	f7ff fde6 	bl	b59e4 <_ZN10nodeIDData14set_deviceID_3EPKc>
  nodeID.set_lastConnection_3(0);
   b5e18:	f7ff fd84 	bl	b5924 <_ZN10nodeIDData8instanceEv>
}
   b5e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  nodeID.set_lastConnection_3(0);
   b5e20:	2200      	movs	r2, #0
   b5e22:	2300      	movs	r3, #0
   b5e24:	f7ff bf97 	b.w	b5d56 <_ZN10nodeIDData20set_lastConnection_3Ex>
   b5e28:	2003e654 	.word	0x2003e654
   b5e2c:	000bff9a 	.word	0x000bff9a
   b5e30:	000bffbb 	.word	0x000bffbb

000b5e34 <_GLOBAL__sub_I_fram>:
   b5e34:	4b08      	ldr	r3, [pc, #32]	; (b5e58 <_GLOBAL__sub_I_fram+0x24>)
   b5e36:	2201      	movs	r2, #1
}
   b5e38:	b510      	push	{r4, lr}
   b5e3a:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5e3c:	f008 fc8e 	bl	be75c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5e40:	4c06      	ldr	r4, [pc, #24]	; (b5e5c <_GLOBAL__sub_I_fram+0x28>)
   b5e42:	4601      	mov	r1, r0
   b5e44:	2300      	movs	r3, #0
   b5e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5e4a:	4620      	mov	r0, r4
   b5e4c:	f002 f92e 	bl	b80ac <_ZN6MB85RCC1ER7TwoWireji>
   b5e50:	4b03      	ldr	r3, [pc, #12]	; (b5e60 <_GLOBAL__sub_I_fram+0x2c>)
   b5e52:	6023      	str	r3, [r4, #0]
}
   b5e54:	bd10      	pop	{r4, pc}
   b5e56:	bf00      	nop
   b5e58:	2003e3db 	.word	0x2003e3db
   b5e5c:	2003e3e8 	.word	0x2003e3e8
   b5e60:	000bffdc 	.word	0x000bffdc

000b5e64 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5e64:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5e66:	4913      	ldr	r1, [pc, #76]	; (b5eb4 <_Z18initializePinModesv+0x50>)
   b5e68:	4813      	ldr	r0, [pc, #76]	; (b5eb8 <_Z18initializePinModesv+0x54>)
   b5e6a:	f7fe f937 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5e6e:	2102      	movs	r1, #2
   b5e70:	2004      	movs	r0, #4
   b5e72:	f008 fbf1 	bl	be658 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5e76:	2100      	movs	r1, #0
   b5e78:	2008      	movs	r0, #8
   b5e7a:	f008 fbed 	bl	be658 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5e7e:	2101      	movs	r1, #1
   b5e80:	2007      	movs	r0, #7
   b5e82:	f008 fbe9 	bl	be658 <pinMode>
    pinMode(INT_PIN, INPUT);
   b5e86:	2100      	movs	r1, #0
   b5e88:	2012      	movs	r0, #18
   b5e8a:	f008 fbe5 	bl	be658 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5e8e:	2101      	movs	r1, #1
   b5e90:	2011      	movs	r0, #17
   b5e92:	f008 fbe1 	bl	be658 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b5e96:	2101      	movs	r1, #1
   b5e98:	2010      	movs	r0, #16
   b5e9a:	f008 fbdd 	bl	be658 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5e9e:	2100      	movs	r1, #0
   b5ea0:	2010      	movs	r0, #16
   b5ea2:	f008 fbea 	bl	be67a <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b5ea6:	2100      	movs	r1, #0
   b5ea8:	2011      	movs	r0, #17
   b5eaa:	f008 fbe6 	bl	be67a <digitalWrite>
    return true;
}
   b5eae:	2001      	movs	r0, #1
   b5eb0:	bd08      	pop	{r3, pc}
   b5eb2:	bf00      	nop
   b5eb4:	000c0074 	.word	0x000c0074
   b5eb8:	2003e654 	.word	0x2003e654

000b5ebc <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5ebc:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5ebe:	4918      	ldr	r1, [pc, #96]	; (b5f20 <_Z18initializePowerCfgv+0x64>)
   b5ec0:	4818      	ldr	r0, [pc, #96]	; (b5f24 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b5ec2:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5ec4:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5ec6:	f7fe f909 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b5eca:	4622      	mov	r2, r4
   b5ecc:	2100      	movs	r1, #0
   b5ece:	4668      	mov	r0, sp
   b5ed0:	f009 fa08 	bl	bf2e4 <memset>
   b5ed4:	4622      	mov	r2, r4
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5edc:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5ee0:	f009 fa00 	bl	bf2e4 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b5ee4:	2100      	movs	r1, #0
   b5ee6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5eea:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5eee:	f005 f9cd 	bl	bb28c <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5ef2:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5ef6:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5efa:	4b0b      	ldr	r3, [pc, #44]	; (b5f28 <_Z18initializePowerCfgv+0x6c>)
   b5efc:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5efe:	f241 0370 	movw	r3, #4208	; 0x1070
   b5f02:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5f06:	9b00      	ldr	r3, [sp, #0]
   b5f08:	2100      	movs	r1, #0
   b5f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5f0e:	4668      	mov	r0, sp
   b5f10:	9300      	str	r3, [sp, #0]
   b5f12:	f005 f9bb 	bl	bb28c <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5f16:	3800      	subs	r0, #0
   b5f18:	bf18      	it	ne
   b5f1a:	2001      	movne	r0, #1
   b5f1c:	b010      	add	sp, #64	; 0x40
   b5f1e:	bd10      	pop	{r4, pc}
   b5f20:	000c008d 	.word	0x000c008d
   b5f24:	2003e654 	.word	0x2003e654
   b5f28:	03840384 	.word	0x03840384

000b5f2c <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5f2c:	4770      	bx	lr

000b5f2e <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5f2e:	6a00      	ldr	r0, [r0, #32]
   b5f30:	6803      	ldr	r3, [r0, #0]
   b5f32:	68db      	ldr	r3, [r3, #12]
   b5f34:	4718      	bx	r3
	...

000b5f38 <_Z15reportFrequencyv>:
/**
 * @brief Particle cacluated variable
 * 
 * @return String with the number of minutes for reporting frequency
 */
String reportFrequency() {							// Calculated variavble for the report frequency which is an unint16_t and does nto display properly.
   b5f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5f3a:	4604      	mov	r4, r0
    char reportStr[16];
    snprintf(reportStr, sizeof(reportStr), "%u minures", sysStatus.get_frequencyMinutes());
   b5f3c:	f7ff fc24 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b5f40:	f7ff fe10 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5f44:	4a06      	ldr	r2, [pc, #24]	; (b5f60 <_Z15reportFrequencyv+0x28>)
   b5f46:	4603      	mov	r3, r0
   b5f48:	2110      	movs	r1, #16
   b5f4a:	4668      	mov	r0, sp
   b5f4c:	f005 faa4 	bl	bb498 <snprintf>
    return reportStr;
   b5f50:	4669      	mov	r1, sp
   b5f52:	4620      	mov	r0, r4
   b5f54:	f007 fe2d 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5f58:	4620      	mov	r0, r4
   b5f5a:	b004      	add	sp, #16
   b5f5c:	bd10      	pop	{r4, pc}
   b5f5e:	bf00      	nop
   b5f60:	000c00b2 	.word	0x000c00b2

000b5f64 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5f64:	b530      	push	{r4, r5, lr}
   b5f66:	b085      	sub	sp, #20
   b5f68:	4603      	mov	r3, r0
   b5f6a:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   b5f6c:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5f6e:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   b5f70:	4798      	blx	r3
	inline unsigned int length(void) const {return len;}
   b5f72:	9802      	ldr	r0, [sp, #8]
        size = str.length();
   b5f74:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   b5f76:	f005 fa67 	bl	bb448 <malloc>
   b5f7a:	6028      	str	r0, [r5, #0]
        if (!data) {
   b5f7c:	b150      	cbz	r0, b5f94 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   b5f7e:	6822      	ldr	r2, [r4, #0]
   b5f80:	9900      	ldr	r1, [sp, #0]
   b5f82:	f009 f987 	bl	bf294 <memcpy>
        return 0;
   b5f86:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   b5f88:	4668      	mov	r0, sp
   b5f8a:	f007 fdc7 	bl	bdb1c <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   b5f8e:	4620      	mov	r0, r4
   b5f90:	b005      	add	sp, #20
   b5f92:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b5f94:	4c00      	ldr	r4, [pc, #0]	; (b5f98 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   b5f96:	e7f7      	b.n	b5f88 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   b5f98:	fffffefc 	.word	0xfffffefc

000b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5f9c:	2300      	movs	r3, #0
   b5f9e:	2204      	movs	r2, #4
   b5fa0:	f005 b992 	b.w	bb2c8 <spark_variable>

000b5fa4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5fa4:	4b0a      	ldr	r3, [pc, #40]	; (b5fd0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b5fa6:	b510      	push	{r4, lr}
   b5fa8:	4604      	mov	r4, r0
   b5faa:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5fac:	f006 fc2a 	bl	bc804 <_ZN5spark10LogManager8instanceEv>
   b5fb0:	4621      	mov	r1, r4
   b5fb2:	f006 fe2e 	bl	bcc12 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b5fb6:	f008 fa37 	bl	be428 <_Z16_fetch_usbserialv>
   b5fba:	f008 fa27 	bl	be40c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b5fbe:	4620      	mov	r0, r4
   b5fc0:	4b04      	ldr	r3, [pc, #16]	; (b5fd4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b5fc2:	f840 3b04 	str.w	r3, [r0], #4
   b5fc6:	f006 fcbf 	bl	bc948 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b5fca:	4620      	mov	r0, r4
   b5fcc:	bd10      	pop	{r4, pc}
   b5fce:	bf00      	nop
   b5fd0:	000c0378 	.word	0x000c0378
   b5fd4:	000c0360 	.word	0x000c0360

000b5fd8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b5fd8:	b510      	push	{r4, lr}
   b5fda:	4604      	mov	r4, r0
    }
   b5fdc:	f7ff ffe2 	bl	b5fa4 <_ZN5spark16SerialLogHandlerD1Ev>
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	2124      	movs	r1, #36	; 0x24
   b5fe4:	f7fe f85b 	bl	b409e <_ZdlPvj>
   b5fe8:	4620      	mov	r0, r4
   b5fea:	bd10      	pop	{r4, pc}

000b5fec <_ZN10CloudClass9keepAliveEj>:
    inline static void keepAlive(unsigned sec)
   b5fec:	b507      	push	{r0, r1, r2, lr}
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b5fee:	2301      	movs	r3, #1
   b5ff0:	2208      	movs	r2, #8
   b5ff2:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b5ff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5ffa:	2300      	movs	r3, #0
   b5ffc:	4341      	muls	r1, r0
   b5ffe:	466a      	mov	r2, sp
   b6000:	4618      	mov	r0, r3
   b6002:	f005 f9a9 	bl	bb358 <spark_set_connection_property>
    }
   b6006:	b003      	add	sp, #12
   b6008:	f85d fb04 	ldr.w	pc, [sp], #4

000b600c <_Z18particleInitializev>:
 * @brief Initializes the Particle functions and variables
 * 
 * @details If new particles of functions are defined, they need to be initialized here
 * 
 */
void particleInitialize() {
   b600c:	b510      	push	{r4, lr}
   b600e:	b08c      	sub	sp, #48	; 0x30
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b6010:	4b36      	ldr	r3, [pc, #216]	; (b60ec <_Z18particleInitializev+0xe0>)
   b6012:	9304      	str	r3, [sp, #16]
   b6014:	4b36      	ldr	r3, [pc, #216]	; (b60f0 <_Z18particleInitializev+0xe4>)
   b6016:	9305      	str	r3, [sp, #20]
   b6018:	4b36      	ldr	r3, [pc, #216]	; (b60f4 <_Z18particleInitializev+0xe8>)
   b601a:	9306      	str	r3, [sp, #24]
   b601c:	4b36      	ldr	r3, [pc, #216]	; (b60f8 <_Z18particleInitializev+0xec>)
   b601e:	9307      	str	r3, [sp, #28]
   b6020:	4b36      	ldr	r3, [pc, #216]	; (b60fc <_Z18particleInitializev+0xf0>)
   b6022:	9308      	str	r3, [sp, #32]
   b6024:	4b36      	ldr	r3, [pc, #216]	; (b6100 <_Z18particleInitializev+0xf4>)

  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6026:	4937      	ldr	r1, [pc, #220]	; (b6104 <_Z18particleInitializev+0xf8>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b6028:	9309      	str	r3, [sp, #36]	; 0x24
   b602a:	2400      	movs	r4, #0
   b602c:	4b36      	ldr	r3, [pc, #216]	; (b6108 <_Z18particleInitializev+0xfc>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b602e:	4837      	ldr	r0, [pc, #220]	; (b610c <_Z18particleInitializev+0x100>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b6030:	930a      	str	r3, [sp, #40]	; 0x28
   b6032:	940b      	str	r4, [sp, #44]	; 0x2c
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6034:	f7fe f852 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  Particle.variable("Low Power Mode",(sysStatus.get_lowPowerMode()) ? "Yes" : "No");
   b6038:	f7ff fba6 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b603c:	f7ff fdee 	bl	b5c1c <_ZNK13sysStatusData16get_lowPowerModeEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b6040:	4a33      	ldr	r2, [pc, #204]	; (b6110 <_Z18particleInitializev+0x104>)
   b6042:	4934      	ldr	r1, [pc, #208]	; (b6114 <_Z18particleInitializev+0x108>)
   b6044:	42a0      	cmp	r0, r4
   b6046:	bf18      	it	ne
   b6048:	4611      	movne	r1, r2
   b604a:	4833      	ldr	r0, [pc, #204]	; (b6118 <_Z18particleInitializev+0x10c>)
   b604c:	f7ff ffa6 	bl	b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6050:	4932      	ldr	r1, [pc, #200]	; (b611c <_Z18particleInitializev+0x110>)
   b6052:	4833      	ldr	r0, [pc, #204]	; (b6120 <_Z18particleInitializev+0x114>)
   b6054:	f7ff ffa2 	bl	b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b6058:	4932      	ldr	r1, [pc, #200]	; (b6124 <_Z18particleInitializev+0x118>)
   b605a:	4833      	ldr	r0, [pc, #204]	; (b6128 <_Z18particleInitializev+0x11c>)
   b605c:	f7ff ff9e 	bl	b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
  Particle.variable("Release",currentPointRelease);   
  Particle.variable("Signal", signalStr);
  Particle.variable("stateOfChg", current.get_stateOfCharge());
   b6060:	f7ff fbe2 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b6064:	f7ff fbfc 	bl	b5860 <_ZNK17currentStatusData17get_stateOfChargeEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b6068:	4623      	mov	r3, r4
   b606a:	2209      	movs	r2, #9
   b606c:	4669      	mov	r1, sp
   b606e:	482f      	ldr	r0, [pc, #188]	; (b612c <_Z18particleInitializev+0x120>)
   b6070:	ed8d 0b00 	vstr	d0, [sp]
   b6074:	f005 f928 	bl	bb2c8 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.get_batteryState()]);
   b6078:	f7ff fbd6 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b607c:	f7ff fce2 	bl	b5a44 <_ZNK17currentStatusData16get_batteryStateEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b6080:	ab0c      	add	r3, sp, #48	; 0x30
   b6082:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6086:	f850 1c20 	ldr.w	r1, [r0, #-32]
   b608a:	4829      	ldr	r0, [pc, #164]	; (b6130 <_Z18particleInitializev+0x124>)
   b608c:	f7ff ff86 	bl	b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        extra.size = sizeof(extra);
   b6090:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b6092:	e9cd 4400 	strd	r4, r4, [sp]
        extra.size = sizeof(extra);
   b6096:	f8ad 3000 	strh.w	r3, [sp]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b609a:	4b26      	ldr	r3, [pc, #152]	; (b6134 <_Z18particleInitializev+0x128>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b609c:	4926      	ldr	r1, [pc, #152]	; (b6138 <_Z18particleInitializev+0x12c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b609e:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b60a0:	2204      	movs	r2, #4
   b60a2:	466b      	mov	r3, sp
   b60a4:	4825      	ldr	r0, [pc, #148]	; (b613c <_Z18particleInitializev+0x130>)
   b60a6:	f005 f90f 	bl	bb2c8 <spark_variable>
  Particle.variable("Reporting Frequency", reportFrequency);
  Particle.variable("SIM Card", (sysStatus.get_verizonSIM()) ? "Verizon" : "Particle");
   b60aa:	f7ff fb6d 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b60ae:	f7ff fdba 	bl	b5c26 <_ZNK13sysStatusData14get_verizonSIMEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b60b2:	4a23      	ldr	r2, [pc, #140]	; (b6140 <_Z18particleInitializev+0x134>)
   b60b4:	4923      	ldr	r1, [pc, #140]	; (b6144 <_Z18particleInitializev+0x138>)
   b60b6:	42a0      	cmp	r0, r4
   b60b8:	bf18      	it	ne
   b60ba:	4611      	movne	r1, r2
   b60bc:	4822      	ldr	r0, [pc, #136]	; (b6148 <_Z18particleInitializev+0x13c>)
   b60be:	f7ff ff6d 	bl	b5f9c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b60c2:	4a22      	ldr	r2, [pc, #136]	; (b614c <_Z18particleInitializev+0x140>)
   b60c4:	4922      	ldr	r1, [pc, #136]	; (b6150 <_Z18particleInitializev+0x144>)
   b60c6:	4823      	ldr	r0, [pc, #140]	; (b6154 <_Z18particleInitializev+0x148>)
   b60c8:	f005 fbfb 	bl	bb8c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b60cc:	4a22      	ldr	r2, [pc, #136]	; (b6158 <_Z18particleInitializev+0x14c>)
   b60ce:	4923      	ldr	r1, [pc, #140]	; (b615c <_Z18particleInitializev+0x150>)
   b60d0:	4820      	ldr	r0, [pc, #128]	; (b6154 <_Z18particleInitializev+0x148>)
   b60d2:	f005 fbf6 	bl	bb8c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b60d6:	4a1c      	ldr	r2, [pc, #112]	; (b6148 <_Z18particleInitializev+0x13c>)
   b60d8:	4921      	ldr	r1, [pc, #132]	; (b6160 <_Z18particleInitializev+0x154>)
   b60da:	481e      	ldr	r0, [pc, #120]	; (b6154 <_Z18particleInitializev+0x148>)
   b60dc:	f005 fbf1 	bl	bb8c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  */

  takeMeasurements();                               // Initialize sensor values

  // makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
}
   b60e0:	b00c      	add	sp, #48	; 0x30
   b60e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  takeMeasurements();                               // Initialize sensor values
   b60e6:	f000 bba3 	b.w	b6830 <_Z16takeMeasurementsv>
   b60ea:	bf00      	nop
   b60ec:	000c00cc 	.word	0x000c00cc
   b60f0:	000c00d4 	.word	0x000c00d4
   b60f4:	000c00d8 	.word	0x000c00d8
   b60f8:	000c00e1 	.word	0x000c00e1
   b60fc:	000c00e9 	.word	0x000c00e9
   b6100:	000c00f5 	.word	0x000c00f5
   b6104:	000c0107 	.word	0x000c0107
   b6108:	000c00fb 	.word	0x000c00fb
   b610c:	2003e654 	.word	0x2003e654
   b6110:	000c00bd 	.word	0x000c00bd
   b6114:	000c00c1 	.word	0x000c00c1
   b6118:	000c0135 	.word	0x000c0135
   b611c:	2003dd68 	.word	0x2003dd68
   b6120:	000c0144 	.word	0x000c0144
   b6124:	2003de34 	.word	0x2003de34
   b6128:	000c014c 	.word	0x000c014c
   b612c:	000c0153 	.word	0x000c0153
   b6130:	000c015e 	.word	0x000c015e
   b6134:	000b5f65 	.word	0x000b5f65
   b6138:	000b5f39 	.word	0x000b5f39
   b613c:	000c016d 	.word	0x000c016d
   b6140:	000c00c4 	.word	0x000c00c4
   b6144:	000c02d2 	.word	0x000c02d2
   b6148:	000c0181 	.word	0x000c0181
   b614c:	000c018a 	.word	0x000c018a
   b6150:	000b6229 	.word	0x000b6229
   b6154:	000bb897 	.word	0x000bb897
   b6158:	000c0198 	.word	0x000c0198
   b615c:	000b6191 	.word	0x000b6191
   b6160:	000b62fd 	.word	0x000b62fd

000b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b6164:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b6166:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6168:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b616a:	b17c      	cbz	r4, b618c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b616c:	6863      	ldr	r3, [r4, #4]
   b616e:	3b01      	subs	r3, #1
   b6170:	6063      	str	r3, [r4, #4]
   b6172:	b95b      	cbnz	r3, b618c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6174:	6823      	ldr	r3, [r4, #0]
   b6176:	4620      	mov	r0, r4
   b6178:	689b      	ldr	r3, [r3, #8]
   b617a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b617c:	68a3      	ldr	r3, [r4, #8]
   b617e:	3b01      	subs	r3, #1
   b6180:	60a3      	str	r3, [r4, #8]
   b6182:	b91b      	cbnz	r3, b618c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6184:	6823      	ldr	r3, [r4, #0]
   b6186:	4620      	mov	r0, r4
   b6188:	68db      	ldr	r3, [r3, #12]
   b618a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b618c:	4628      	mov	r0, r5
   b618e:	bd38      	pop	{r3, r4, r5, pc}

000b6190 <_Z12setFrequency6String>:
 * sets an interim value for reporting frequency which takes effect once sent to a new node.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setFrequency(String command)
{
   b6190:	b530      	push	{r4, r5, lr}
   b6192:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   b6194:	6800      	ldr	r0, [r0, #0]
   b6196:	220a      	movs	r2, #10
   b6198:	a903      	add	r1, sp, #12
   b619a:	f009 fa4f 	bl	bf63c <strtol>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b619e:	2878      	cmp	r0, #120	; 0x78
   b61a0:	d831      	bhi.n	b6206 <_Z12setFrequency6String+0x76>
  updatedFrequencyMins = tempTime;
   b61a2:	4d1a      	ldr	r5, [pc, #104]	; (b620c <_Z12setFrequency6String+0x7c>)
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b61a4:	280b      	cmp	r0, #11
  updatedFrequencyMins = tempTime;
   b61a6:	8028      	strh	r0, [r5, #0]
  if (updatedFrequencyMins < 12 && sysStatus.get_lowPowerMode()) {
   b61a8:	dc0d      	bgt.n	b61c6 <_Z12setFrequency6String+0x36>
   b61aa:	f7ff faed 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b61ae:	f7ff fd35 	bl	b5c1c <_ZNK13sysStatusData16get_lowPowerModeEv>
   b61b2:	b140      	cbz	r0, b61c6 <_Z12setFrequency6String+0x36>
    Log.info("Short reporting frequency over-rides low power");
   b61b4:	4916      	ldr	r1, [pc, #88]	; (b6210 <_Z12setFrequency6String+0x80>)
   b61b6:	4817      	ldr	r0, [pc, #92]	; (b6214 <_Z12setFrequency6String+0x84>)
   b61b8:	f7fd ff90 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_lowPowerMode(false);
   b61bc:	f7ff fae4 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b61c0:	2100      	movs	r1, #0
   b61c2:	f7ff fd53 	bl	b5c6c <_ZN13sysStatusData16set_lowPowerModeEb>
  }
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b61c6:	4b14      	ldr	r3, [pc, #80]	; (b6218 <_Z12setFrequency6String+0x88>)
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b61c8:	4a14      	ldr	r2, [pc, #80]	; (b621c <_Z12setFrequency6String+0x8c>)
  frequencyUpdated = true;                            // Flag to change frequency after next connection to the nodes
   b61ca:	2401      	movs	r4, #1
   b61cc:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Report frequency will be set to %i minutes at next LoRA connect",updatedFrequencyMins);
   b61ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   b61d2:	882b      	ldrh	r3, [r5, #0]
   b61d4:	a806      	add	r0, sp, #24
   b61d6:	f005 f95f 	bl	bb498 <snprintf>
  Log.info(data);
   b61da:	480e      	ldr	r0, [pc, #56]	; (b6214 <_Z12setFrequency6String+0x84>)
   b61dc:	a906      	add	r1, sp, #24
   b61de:	f7fd ff7d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b61e2:	f005 f891 	bl	bb308 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   b61e6:	b160      	cbz	r0, b6202 <_Z12setFrequency6String+0x72>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b61e8:	4b0d      	ldr	r3, [pc, #52]	; (b6220 <_Z12setFrequency6String+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b61ea:	490e      	ldr	r1, [pc, #56]	; (b6224 <_Z12setFrequency6String+0x94>)
   b61ec:	781b      	ldrb	r3, [r3, #0]
   b61ee:	f88d 3000 	strb.w	r3, [sp]
   b61f2:	a804      	add	r0, sp, #16
   b61f4:	233c      	movs	r3, #60	; 0x3c
   b61f6:	aa06      	add	r2, sp, #24
   b61f8:	f005 fc74 	bl	bbae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b61fc:	a805      	add	r0, sp, #20
   b61fe:	f7ff ffb1 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b6202:	4620      	mov	r0, r4
   b6204:	e000      	b.n	b6208 <_Z12setFrequency6String+0x78>
  if ((tempTime < 0) || (tempTime > 120)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   b6206:	2000      	movs	r0, #0
}
   b6208:	b047      	add	sp, #284	; 0x11c
   b620a:	bd30      	pop	{r4, r5, pc}
   b620c:	2003de04 	.word	0x2003de04
   b6210:	000c01a6 	.word	0x000c01a6
   b6214:	2003e654 	.word	0x2003e654
   b6218:	2003e405 	.word	0x2003e405
   b621c:	000c01d5 	.word	0x000c01d5
   b6220:	2003e404 	.word	0x2003e404
   b6224:	000c0215 	.word	0x000c0215

000b6228 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b6228:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b622a:	492a      	ldr	r1, [pc, #168]	; (b62d4 <_Z15setLowPowerMode6String+0xac>)
   b622c:	b094      	sub	sp, #80	; 0x50
   b622e:	4604      	mov	r4, r0
   b6230:	f007 fd78 	bl	bdd24 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b6234:	b158      	cbz	r0, b624e <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6236:	4620      	mov	r0, r4
   b6238:	4926      	ldr	r1, [pc, #152]	; (b62d4 <_Z15setLowPowerMode6String+0xac>)
   b623a:	f007 fd73 	bl	bdd24 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b623e:	4604      	mov	r4, r0
   b6240:	b968      	cbnz	r0, b625e <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b6242:	f7ff faa1 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6246:	4621      	mov	r1, r4
   b6248:	f7ff fd10 	bl	b5c6c <_ZN13sysStatusData16set_lowPowerModeEb>
   b624c:	e01e      	b.n	b628c <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b624e:	4922      	ldr	r1, [pc, #136]	; (b62d8 <_Z15setLowPowerMode6String+0xb0>)
   b6250:	4620      	mov	r0, r4
   b6252:	f007 fd67 	bl	bdd24 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b6256:	2800      	cmp	r0, #0
   b6258:	d1ed      	bne.n	b6236 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b625a:	b014      	add	sp, #80	; 0x50
   b625c:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b625e:	f7ff fa93 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6262:	2101      	movs	r1, #1
   b6264:	f7ff fd02 	bl	b5c6c <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b6268:	f7ff fa8e 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b626c:	f7ff fc7a 	bl	b5b64 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6270:	280b      	cmp	r0, #11
   b6272:	d80b      	bhi.n	b628c <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b6274:	4919      	ldr	r1, [pc, #100]	; (b62dc <_Z15setLowPowerMode6String+0xb4>)
   b6276:	481a      	ldr	r0, [pc, #104]	; (b62e0 <_Z15setLowPowerMode6String+0xb8>)
   b6278:	f7fd ff30 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b627c:	f7ff fa84 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6280:	210c      	movs	r1, #12
   b6282:	f7ff fca1 	bl	b5bc8 <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b6286:	4b17      	ldr	r3, [pc, #92]	; (b62e4 <_Z15setLowPowerMode6String+0xbc>)
   b6288:	2201      	movs	r2, #1
   b628a:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b628c:	f7ff fa7c 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6290:	f7ff fcc4 	bl	b5c1c <_ZNK13sysStatusData16get_lowPowerModeEv>
   b6294:	4914      	ldr	r1, [pc, #80]	; (b62e8 <_Z15setLowPowerMode6String+0xc0>)
   b6296:	4b15      	ldr	r3, [pc, #84]	; (b62ec <_Z15setLowPowerMode6String+0xc4>)
   b6298:	4a15      	ldr	r2, [pc, #84]	; (b62f0 <_Z15setLowPowerMode6String+0xc8>)
   b629a:	2800      	cmp	r0, #0
   b629c:	bf18      	it	ne
   b629e:	460b      	movne	r3, r1
   b62a0:	2140      	movs	r1, #64	; 0x40
   b62a2:	a804      	add	r0, sp, #16
   b62a4:	f005 f8f8 	bl	bb498 <snprintf>
  Log.info(data);
   b62a8:	480d      	ldr	r0, [pc, #52]	; (b62e0 <_Z15setLowPowerMode6String+0xb8>)
   b62aa:	a904      	add	r1, sp, #16
   b62ac:	f7fd ff16 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b62b0:	f005 f82a 	bl	bb308 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b62b4:	b160      	cbz	r0, b62d0 <_Z15setLowPowerMode6String+0xa8>
   b62b6:	4b0f      	ldr	r3, [pc, #60]	; (b62f4 <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b62b8:	490f      	ldr	r1, [pc, #60]	; (b62f8 <_Z15setLowPowerMode6String+0xd0>)
   b62ba:	781b      	ldrb	r3, [r3, #0]
   b62bc:	f88d 3000 	strb.w	r3, [sp]
   b62c0:	a802      	add	r0, sp, #8
   b62c2:	233c      	movs	r3, #60	; 0x3c
   b62c4:	aa04      	add	r2, sp, #16
   b62c6:	f005 fc0d 	bl	bbae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b62ca:	a803      	add	r0, sp, #12
   b62cc:	f7ff ff4a 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b62d0:	2001      	movs	r0, #1
   b62d2:	e7c2      	b.n	b625a <_Z15setLowPowerMode6String+0x32>
   b62d4:	000c03c4 	.word	0x000c03c4
   b62d8:	000c06a0 	.word	0x000c06a0
   b62dc:	000c0221 	.word	0x000c0221
   b62e0:	2003e654 	.word	0x2003e654
   b62e4:	2003e405 	.word	0x2003e405
   b62e8:	000c021a 	.word	0x000c021a
   b62ec:	000c021e 	.word	0x000c021e
   b62f0:	000c024e 	.word	0x000c024e
   b62f4:	2003e404 	.word	0x2003e404
   b62f8:	000c013f 	.word	0x000c013f

000b62fc <_Z13setVerizonSIM6String>:
 * 
 * @param command  - 1 for Verizon and 0 for Particle (default)
 * @return int 
 */
int setVerizonSIM(String command)                                   // If we are using a Verizon SIM, we will need to execute "keepAlive" calls in the main loop when not in low power mode
{
   b62fc:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b62fe:	491e      	ldr	r1, [pc, #120]	; (b6378 <_Z13setVerizonSIM6String+0x7c>)
   b6300:	b085      	sub	sp, #20
   b6302:	4605      	mov	r5, r0
   b6304:	f007 fd0e 	bl	bdd24 <_ZNK6String6equalsEPKc>
  if (command == "1")
   b6308:	4604      	mov	r4, r0
   b630a:	b1d8      	cbz	r0, b6344 <_Z13setVerizonSIM6String+0x48>
  {
    sysStatus.set_verizonSIM(true);
   b630c:	f7ff fa3c 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6310:	2101      	movs	r1, #1
   b6312:	f7ff fcb7 	bl	b5c84 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(60);                                         // send a ping every minute
   b6316:	203c      	movs	r0, #60	; 0x3c
   b6318:	f7ff fe68 	bl	b5fec <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b631c:	f004 fff4 	bl	bb308 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Verizon SIM", PRIVATE);
   b6320:	b910      	cbnz	r0, b6328 <_Z13setVerizonSIM6String+0x2c>
  else if (command == "0")
  {
    sysStatus.set_verizonSIM(false);
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
    return 1;
   b6322:	2001      	movs	r0, #1
  }
  else return 0;
}
   b6324:	b005      	add	sp, #20
   b6326:	bd30      	pop	{r4, r5, pc}
   b6328:	4b14      	ldr	r3, [pc, #80]	; (b637c <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b632a:	4a15      	ldr	r2, [pc, #84]	; (b6380 <_Z13setVerizonSIM6String+0x84>)
   b632c:	781b      	ldrb	r3, [r3, #0]
   b632e:	f88d 3000 	strb.w	r3, [sp]
   b6332:	233c      	movs	r3, #60	; 0x3c
   b6334:	a802      	add	r0, sp, #8
   b6336:	4913      	ldr	r1, [pc, #76]	; (b6384 <_Z13setVerizonSIM6String+0x88>)
   b6338:	f005 fbd4 	bl	bbae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b633c:	a803      	add	r0, sp, #12
   b633e:	f7ff ff11 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6342:	e7ee      	b.n	b6322 <_Z13setVerizonSIM6String+0x26>
   b6344:	4910      	ldr	r1, [pc, #64]	; (b6388 <_Z13setVerizonSIM6String+0x8c>)
   b6346:	4628      	mov	r0, r5
   b6348:	f007 fcec 	bl	bdd24 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b634c:	2800      	cmp	r0, #0
   b634e:	d0e9      	beq.n	b6324 <_Z13setVerizonSIM6String+0x28>
    sysStatus.set_verizonSIM(false);
   b6350:	f7ff fa1a 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   b6354:	4621      	mov	r1, r4
   b6356:	f7ff fc95 	bl	b5c84 <_ZN13sysStatusData14set_verizonSIMEb>
    Particle.keepAlive(23 * 60);                                     // send a ping every 23 minutes
   b635a:	f240 5064 	movw	r0, #1380	; 0x564
   b635e:	f7ff fe45 	bl	b5fec <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6362:	f004 ffd1 	bl	bb308 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set to Particle SIM", PRIVATE);
   b6366:	2800      	cmp	r0, #0
   b6368:	d0db      	beq.n	b6322 <_Z13setVerizonSIM6String+0x26>
   b636a:	4b04      	ldr	r3, [pc, #16]	; (b637c <_Z13setVerizonSIM6String+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b636c:	4a07      	ldr	r2, [pc, #28]	; (b638c <_Z13setVerizonSIM6String+0x90>)
   b636e:	781b      	ldrb	r3, [r3, #0]
   b6370:	f88d 3000 	strb.w	r3, [sp]
   b6374:	233c      	movs	r3, #60	; 0x3c
   b6376:	e7dd      	b.n	b6334 <_Z13setVerizonSIM6String+0x38>
   b6378:	000c03c4 	.word	0x000c03c4
   b637c:	2003e404 	.word	0x2003e404
   b6380:	000c0268 	.word	0x000c0268
   b6384:	000c013f 	.word	0x000c013f
   b6388:	000c06a0 	.word	0x000c06a0
   b638c:	000c027b 	.word	0x000c027b

000b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6390:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6392:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6396:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6398:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b639a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b639e:	42ae      	cmp	r6, r5
   b63a0:	d004      	beq.n	b63ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b63a2:	4628      	mov	r0, r5
   b63a4:	f007 fbba 	bl	bdb1c <_ZN6StringD1Ev>
   b63a8:	3514      	adds	r5, #20
   b63aa:	e7f8      	b.n	b639e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b63ac:	6820      	ldr	r0, [r4, #0]
   b63ae:	f005 f853 	bl	bb458 <free>
    AllocatorT::free(data_);
}
   b63b2:	4620      	mov	r0, r4
   b63b4:	bd70      	pop	{r4, r5, r6, pc}

000b63b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b63b6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b63b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63ba:	4604      	mov	r4, r0
   b63bc:	460d      	mov	r5, r1
   b63be:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b63c0:	d916      	bls.n	b63f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b63c2:	4290      	cmp	r0, r2
   b63c4:	d215      	bcs.n	b63f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b63c6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b63ca:	1a75      	subs	r5, r6, r1
   b63cc:	f1a1 0714 	sub.w	r7, r1, #20
   b63d0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b63d2:	42b7      	cmp	r7, r6
   b63d4:	d01c      	beq.n	b6410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b63d6:	b12c      	cbz	r4, b63e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b63d8:	4631      	mov	r1, r6
   b63da:	4620      	mov	r0, r4
   b63dc:	f007 fc1a 	bl	bdc14 <_ZN6StringC1EOS_>
   b63e0:	7c33      	ldrb	r3, [r6, #16]
   b63e2:	7423      	strb	r3, [r4, #16]
   b63e4:	4630      	mov	r0, r6
   b63e6:	f007 fb99 	bl	bdb1c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b63ea:	3e14      	subs	r6, #20
   b63ec:	3c14      	subs	r4, #20
   b63ee:	e7f0      	b.n	b63d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b63f0:	d00e      	beq.n	b6410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b63f2:	42b5      	cmp	r5, r6
   b63f4:	d00c      	beq.n	b6410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b63f6:	b12c      	cbz	r4, b6404 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b63f8:	4629      	mov	r1, r5
   b63fa:	4620      	mov	r0, r4
   b63fc:	f007 fc0a 	bl	bdc14 <_ZN6StringC1EOS_>
   b6400:	7c2b      	ldrb	r3, [r5, #16]
   b6402:	7423      	strb	r3, [r4, #16]
   b6404:	4628      	mov	r0, r5
   b6406:	f007 fb89 	bl	bdb1c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b640a:	3514      	adds	r5, #20
   b640c:	3414      	adds	r4, #20
   b640e:	e7f0      	b.n	b63f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b6410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6416:	2300      	movs	r3, #0
   b6418:	e9c0 3300 	strd	r3, r3, [r0]
   b641c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b641e:	684f      	ldr	r7, [r1, #4]
   b6420:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6422:	4604      	mov	r4, r0
   b6424:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6426:	dd23      	ble.n	b6470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6428:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b642c:	fb08 f007 	mul.w	r0, r8, r7
   b6430:	f005 f80a 	bl	bb448 <malloc>
            if (!d) {
   b6434:	4605      	mov	r5, r0
   b6436:	b1d8      	cbz	r0, b6470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b6438:	e9d4 1200 	ldrd	r1, r2, [r4]
   b643c:	fb08 1202 	mla	r2, r8, r2, r1
   b6440:	f7ff ffb9 	bl	b63b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6444:	6820      	ldr	r0, [r4, #0]
   b6446:	f005 f807 	bl	bb458 <free>
        data_ = d;
   b644a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b644c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b644e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b6452:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b6456:	45b8      	cmp	r8, r7
   b6458:	d008      	beq.n	b646c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b645a:	4639      	mov	r1, r7
   b645c:	4628      	mov	r0, r5
   b645e:	f007 fbf3 	bl	bdc48 <_ZN6StringC1ERKS_>
   b6462:	7c3b      	ldrb	r3, [r7, #16]
   b6464:	742b      	strb	r3, [r5, #16]
   b6466:	3714      	adds	r7, #20
   b6468:	3514      	adds	r5, #20
   b646a:	e7f4      	b.n	b6456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b646c:	6873      	ldr	r3, [r6, #4]
   b646e:	6063      	str	r3, [r4, #4]
}
   b6470:	4620      	mov	r0, r4
   b6472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b6478 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b6478:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b647a:	4b27      	ldr	r3, [pc, #156]	; (b6518 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b647c:	4a27      	ldr	r2, [pc, #156]	; (b651c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b647e:	2501      	movs	r5, #1
   b6480:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b6482:	4b27      	ldr	r3, [pc, #156]	; (b6520 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b6484:	2400      	movs	r4, #0
   b6486:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b6488:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b648a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b648e:	2002      	movs	r0, #2
   b6490:	f004 fea8 	bl	bb1e4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b6494:	4621      	mov	r1, r4
   b6496:	4628      	mov	r0, r5
   b6498:	f004 febc 	bl	bb214 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b649c:	4629      	mov	r1, r5
   b649e:	2004      	movs	r0, #4
   b64a0:	f004 fc1e 	bl	bace0 <HAL_Feature_Set>
        capacity_(0) {
   b64a4:	e9cd 4400 	strd	r4, r4, [sp]
   b64a8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b64aa:	f007 ffbd 	bl	be428 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b64ae:	4c1d      	ldr	r4, [pc, #116]	; (b6524 <_GLOBAL__sub_I_SystemMode+0xac>)
   b64b0:	4605      	mov	r5, r0
   b64b2:	4669      	mov	r1, sp
   b64b4:	a803      	add	r0, sp, #12
   b64b6:	f7ff ffac 	bl	b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b64ba:	4626      	mov	r6, r4
        stream_(&stream) {
   b64bc:	a903      	add	r1, sp, #12
   b64be:	a806      	add	r0, sp, #24
   b64c0:	f7ff ffa7 	bl	b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b64c4:	4b18      	ldr	r3, [pc, #96]	; (b6528 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b64c6:	f846 3b04 	str.w	r3, [r6], #4
   b64ca:	a906      	add	r1, sp, #24
   b64cc:	a809      	add	r0, sp, #36	; 0x24
   b64ce:	f7ff ffa0 	bl	b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b64d2:	aa09      	add	r2, sp, #36	; 0x24
   b64d4:	211e      	movs	r1, #30
   b64d6:	4630      	mov	r0, r6
   b64d8:	f006 fc7e 	bl	bcdd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b64dc:	a809      	add	r0, sp, #36	; 0x24
   b64de:	f7ff ff57 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b64e2:	a806      	add	r0, sp, #24
   b64e4:	f7ff ff54 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b64e8:	4b10      	ldr	r3, [pc, #64]	; (b652c <_GLOBAL__sub_I_SystemMode+0xb4>)
   b64ea:	6023      	str	r3, [r4, #0]
   b64ec:	6225      	str	r5, [r4, #32]
   b64ee:	a803      	add	r0, sp, #12
   b64f0:	f7ff ff4e 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b64f4:	4b0e      	ldr	r3, [pc, #56]	; (b6530 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b64f6:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b64f8:	f007 ff96 	bl	be428 <_Z16_fetch_usbserialv>
   b64fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6500:	f007 ff80 	bl	be404 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6504:	f006 f97e 	bl	bc804 <_ZN5spark10LogManager8instanceEv>
   b6508:	4621      	mov	r1, r4
   b650a:	f006 fb3b 	bl	bcb84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b650e:	4668      	mov	r0, sp
   b6510:	f7ff ff3e 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6514:	b00c      	add	sp, #48	; 0x30
   b6516:	bd70      	pop	{r4, r5, r6, pc}
   b6518:	2003e404 	.word	0x2003e404
   b651c:	ffff0000 	.word	0xffff0000
   b6520:	2003e3f8 	.word	0x2003e3f8
   b6524:	2003e408 	.word	0x2003e408
   b6528:	000c0360 	.word	0x000c0360
   b652c:	000c0f8c 	.word	0x000c0f8c
   b6530:	000c0378 	.word	0x000c0378

000b6534 <_Z22disconnectFromParticlev>:
{
   b6534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6538:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b653a:	f007 fe8e 	bl	be25a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b653e:	4943      	ldr	r1, [pc, #268]	; (b664c <_Z22disconnectFromParticlev+0x118>)
  time_t startTime = Time.now();
   b6540:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b6542:	4843      	ldr	r0, [pc, #268]	; (b6650 <_Z22disconnectFromParticlev+0x11c>)
   b6544:	f7fd fdca 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  detachInterrupt(BUTTON_PIN);                                         // Stop watching the userSwitch as we will no longer be connected
   b6548:	4b42      	ldr	r3, [pc, #264]	; (b6654 <_Z22disconnectFromParticlev+0x120>)
   b654a:	8818      	ldrh	r0, [r3, #0]
   b654c:	f005 fd9c 	bl	bc088 <_Z15detachInterruptt>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b6550:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b6552:	a801      	add	r0, sp, #4
   b6554:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b6558:	f8ad 400c 	strh.w	r4, [sp, #12]
   b655c:	f005 f9c2 	bl	bb8e4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b6560:	4620      	mov	r0, r4
   b6562:	f004 fbed 	bl	bad40 <hal_timer_millis>
        while (_while() && !_condition()) {
   b6566:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b656a:	4604      	mov	r4, r0
   b656c:	2000      	movs	r0, #0
   b656e:	f004 fbe7 	bl	bad40 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b6572:	1b03      	subs	r3, r0, r4
   b6574:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6578:	42b3      	cmp	r3, r6
   b657a:	f171 0300 	sbcs.w	r3, r1, #0
   b657e:	d205      	bcs.n	b658c <_Z22disconnectFromParticlev+0x58>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6580:	f004 fec2 	bl	bb308 <spark_cloud_flag_connected>
   b6584:	b110      	cbz	r0, b658c <_Z22disconnectFromParticlev+0x58>
            spark_process();
   b6586:	f004 feaf 	bl	bb2e8 <spark_process>
        while (_while() && !_condition()) {
   b658a:	e7ef      	b.n	b656c <_Z22disconnectFromParticlev+0x38>
   b658c:	f004 febc 	bl	bb308 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6590:	f004 fbc6 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6594:	4f30      	ldr	r7, [pc, #192]	; (b6658 <_Z22disconnectFromParticlev+0x124>)
   b6596:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6598:	f004 fea6 	bl	bb2e8 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b659c:	f004 feb4 	bl	bb308 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b65a0:	4604      	mov	r4, r0
   b65a2:	b140      	cbz	r0, b65b6 <_Z22disconnectFromParticlev+0x82>
    Log.info("Failed to disconnect from Particle");
   b65a4:	492d      	ldr	r1, [pc, #180]	; (b665c <_Z22disconnectFromParticlev+0x128>)
   b65a6:	482a      	ldr	r0, [pc, #168]	; (b6650 <_Z22disconnectFromParticlev+0x11c>)
   b65a8:	f7fd fd98 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b65ac:	2400      	movs	r4, #0
}
   b65ae:	4620      	mov	r0, r4
   b65b0:	b005      	add	sp, #20
   b65b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b65b6:	f007 fe50 	bl	be25a <_ZN9TimeClass3nowEv>
   b65ba:	4929      	ldr	r1, [pc, #164]	; (b6660 <_Z22disconnectFromParticlev+0x12c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b65bc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b6664 <_Z22disconnectFromParticlev+0x130>
   b65c0:	1b42      	subs	r2, r0, r5
   b65c2:	4823      	ldr	r0, [pc, #140]	; (b6650 <_Z22disconnectFromParticlev+0x11c>)
   b65c4:	f7fd fd8a 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b65c8:	f007 fe47 	bl	be25a <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65cc:	4622      	mov	r2, r4
   b65ce:	2102      	movs	r1, #2
   b65d0:	4606      	mov	r6, r0
   b65d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b65d6:	f004 fee7 	bl	bb3a8 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b65da:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b65de:	4623      	mov	r3, r4
   b65e0:	4622      	mov	r2, r4
   b65e2:	4621      	mov	r1, r4
   b65e4:	f004 fef8 	bl	bb3d8 <network_off>
        return hal_timer_millis(nullptr);
   b65e8:	4620      	mov	r0, r4
   b65ea:	f004 fba9 	bl	bad40 <hal_timer_millis>
        while (_while() && !_condition()) {
   b65ee:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b65f2:	4605      	mov	r5, r0
   b65f4:	2000      	movs	r0, #0
   b65f6:	f004 fba3 	bl	bad40 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b65fa:	1b43      	subs	r3, r0, r5
   b65fc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b6600:	454b      	cmp	r3, r9
   b6602:	f171 0300 	sbcs.w	r3, r1, #0
   b6606:	d206      	bcs.n	b6616 <_Z22disconnectFromParticlev+0xe2>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b6608:	4640      	mov	r0, r8
   b660a:	f006 ff03 	bl	bd414 <_ZN5spark12NetworkClass5isOffEv>
   b660e:	b910      	cbnz	r0, b6616 <_Z22disconnectFromParticlev+0xe2>
            spark_process();
   b6610:	f004 fe6a 	bl	bb2e8 <spark_process>
        while (_while() && !_condition()) {
   b6614:	e7ee      	b.n	b65f4 <_Z22disconnectFromParticlev+0xc0>
   b6616:	4813      	ldr	r0, [pc, #76]	; (b6664 <_Z22disconnectFromParticlev+0x130>)
   b6618:	f006 fefc 	bl	bd414 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b661c:	f004 fb80 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6620:	6038      	str	r0, [r7, #0]
    		spark_process();
   b6622:	f004 fe61 	bl	bb2e8 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b6626:	480f      	ldr	r0, [pc, #60]	; (b6664 <_Z22disconnectFromParticlev+0x130>)
   b6628:	f006 fef0 	bl	bd40c <_ZN5spark12NetworkClass4isOnEv>
   b662c:	b120      	cbz	r0, b6638 <_Z22disconnectFromParticlev+0x104>
    Log.info("Failed to turn off the Cellular modem");
   b662e:	490e      	ldr	r1, [pc, #56]	; (b6668 <_Z22disconnectFromParticlev+0x134>)
   b6630:	4807      	ldr	r0, [pc, #28]	; (b6650 <_Z22disconnectFromParticlev+0x11c>)
   b6632:	f7fd fd53 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b6636:	e7ba      	b.n	b65ae <_Z22disconnectFromParticlev+0x7a>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b6638:	f007 fe0f 	bl	be25a <_ZN9TimeClass3nowEv>
   b663c:	490b      	ldr	r1, [pc, #44]	; (b666c <_Z22disconnectFromParticlev+0x138>)
   b663e:	1b82      	subs	r2, r0, r6
   b6640:	4803      	ldr	r0, [pc, #12]	; (b6650 <_Z22disconnectFromParticlev+0x11c>)
   b6642:	f7fd fd4b 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b6646:	2401      	movs	r4, #1
   b6648:	e7b1      	b.n	b65ae <_Z22disconnectFromParticlev+0x7a>
   b664a:	bf00      	nop
   b664c:	000c028f 	.word	0x000c028f
   b6650:	2003e654 	.word	0x2003e654
   b6654:	000c00aa 	.word	0x000c00aa
   b6658:	2003e710 	.word	0x2003e710
   b665c:	000c02b8 	.word	0x000c02b8
   b6660:	000c02db 	.word	0x000c02db
   b6664:	2003e580 	.word	0x2003e580
   b6668:	000c0304 	.word	0x000c0304
   b666c:	000c032a 	.word	0x000c032a

000b6670 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6670:	ee07 0a90 	vmov	s15, r0
   b6674:	ed9f 7a09 	vldr	s14, [pc, #36]	; b669c <_Z17tmp36TemperatureCi+0x2c>
   b6678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b667c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6680:	ed9f 7a07 	vldr	s14, [pc, #28]	; b66a0 <_Z17tmp36TemperatureCi+0x30>
   b6684:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b6688:	eddf 7a06 	vldr	s15, [pc, #24]	; b66a4 <_Z17tmp36TemperatureCi+0x34>
   b668c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6690:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6694:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6698:	4770      	bx	lr
   b669a:	bf00      	nop
   b669c:	454e4000 	.word	0x454e4000
   b66a0:	457ff000 	.word	0x457ff000
   b66a4:	43fa0000 	.word	0x43fa0000

000b66a8 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b66a8:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b66aa:	2101      	movs	r1, #1
   b66ac:	a801      	add	r0, sp, #4
   b66ae:	f006 ff46 	bl	bd53e <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b66b2:	f7ff f8b9 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b66b6:	f7ff f9c0 	bl	b5a3a <_ZNK17currentStatusData17get_internalTempCEv>
   b66ba:	f7ff f8b5 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b66be:	f7ff f9bc 	bl	b5a3a <_ZNK17currentStatusData17get_internalTempCEv>
   b66c2:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b66c4:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b66c6:	d90d      	bls.n	b66e4 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b66c8:	f006 ffcc 	bl	bd664 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b66cc:	f7ff f8ac 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b66d0:	2101      	movs	r1, #1
   b66d2:	f7ff fa06 	bl	b5ae2 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b66d6:	2400      	movs	r4, #0
  PMIC pmic(true);
   b66d8:	a801      	add	r0, sp, #4
   b66da:	f006 ff3f 	bl	bd55c <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b66de:	4620      	mov	r0, r4
   b66e0:	b002      	add	sp, #8
   b66e2:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b66e4:	f006 ffa3 	bl	bd62e <_ZN4PMIC14enableChargingEv>
    return true;
   b66e8:	2401      	movs	r4, #1
   b66ea:	e7f5      	b.n	b66d8 <_Z16isItSafeToChargev+0x30>

000b66ec <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b66ec:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b66ee:	4d19      	ldr	r5, [pc, #100]	; (b6754 <_Z17getSignalStrengthv+0x68>)
   b66f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b66f2:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b66f4:	ac0c      	add	r4, sp, #48	; 0x30
   b66f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6700:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6704:	4914      	ldr	r1, [pc, #80]	; (b6758 <_Z17getSignalStrengthv+0x6c>)
   b6706:	a804      	add	r0, sp, #16
   b6708:	f004 ff98 	bl	bb63c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b670c:	a804      	add	r0, sp, #16
   b670e:	f004 ffd8 	bl	bb6c2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6712:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6714:	a804      	add	r0, sp, #16
   b6716:	f005 f80d 	bl	bb734 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b671a:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b671c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6720:	f005 f838 	bl	bb794 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6724:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b6726:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b672a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b672e:	f008 fa0f 	bl	beb50 <__aeabi_f2d>
   b6732:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6736:	4628      	mov	r0, r5
   b6738:	f008 fa0a 	bl	beb50 <__aeabi_f2d>
   b673c:	e9cd 0100 	strd	r0, r1, [sp]
   b6740:	4a06      	ldr	r2, [pc, #24]	; (b675c <_Z17getSignalStrengthv+0x70>)
   b6742:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b6746:	4806      	ldr	r0, [pc, #24]	; (b6760 <_Z17getSignalStrengthv+0x74>)
   b6748:	2140      	movs	r1, #64	; 0x40
   b674a:	f004 fea5 	bl	bb498 <snprintf>
}
   b674e:	b017      	add	sp, #92	; 0x5c
   b6750:	bd30      	pop	{r4, r5, pc}
   b6752:	bf00      	nop
   b6754:	000c03e4 	.word	0x000c03e4
   b6758:	2003e580 	.word	0x2003e580
   b675c:	000c03c6 	.word	0x000c03c6
   b6760:	2003de34 	.word	0x2003de34

000b6764 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b6764:	b530      	push	{r4, r5, lr}
   b6766:	b085      	sub	sp, #20
   b6768:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b676a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b676c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b676e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b6770:	f004 fd26 	bl	bb1c0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b6774:	b990      	cbnz	r0, b679c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b6776:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b6778:	b10c      	cbz	r4, b677e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b677a:	6923      	ldr	r3, [r4, #16]
   b677c:	b923      	cbnz	r3, b6788 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b677e:	4a08      	ldr	r2, [pc, #32]	; (b67a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b6780:	4908      	ldr	r1, [pc, #32]	; (b67a4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b6782:	200a      	movs	r0, #10
   b6784:	f004 fcf4 	bl	bb170 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b6788:	230c      	movs	r3, #12
   b678a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b678e:	2304      	movs	r3, #4
   b6790:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b6792:	aa01      	add	r2, sp, #4
   b6794:	6923      	ldr	r3, [r4, #16]
   b6796:	2101      	movs	r1, #1
   b6798:	4620      	mov	r0, r4
   b679a:	4798      	blx	r3
}
   b679c:	b005      	add	sp, #20
   b679e:	bd30      	pop	{r4, r5, pc}
   b67a0:	000bad11 	.word	0x000bad11
   b67a4:	000bff05 	.word	0x000bff05

000b67a8 <_Z12batteryStatev>:
bool batteryState() {
   b67a8:	b513      	push	{r0, r1, r4, lr}
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b67aa:	f7ff f83d 	bl	b5828 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b67ae:	a901      	add	r1, sp, #4
   b67b0:	4604      	mov	r4, r0
   b67b2:	2007      	movs	r0, #7
   b67b4:	f7ff ffd6 	bl	b6764 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b67b8:	1e01      	subs	r1, r0, #0
        return val;
   b67ba:	bfa8      	it	ge
   b67bc:	9901      	ldrge	r1, [sp, #4]
   b67be:	4620      	mov	r0, r4
   b67c0:	b2c9      	uxtb	r1, r1
   b67c2:	f7ff f98e 	bl	b5ae2 <_ZN17currentStatusData16set_batteryStateEh>
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b67c6:	4818      	ldr	r0, [pc, #96]	; (b6828 <_Z12batteryStatev+0x80>)
   b67c8:	f005 fb86 	bl	bbed8 <_ZN9FuelGauge10quickStartEv>
  delay(500);
   b67cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b67d0:	f004 feba 	bl	bb548 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b67d4:	f7ff f828 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b67d8:	a901      	add	r1, sp, #4
   b67da:	4604      	mov	r4, r0
   b67dc:	2003      	movs	r0, #3
   b67de:	f7ff ffc1 	bl	b6764 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b67e2:	b9e8      	cbnz	r0, b6820 <_Z12batteryStatev+0x78>
   b67e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b67e8:	ee07 3a90 	vmov	s15, r3
   b67ec:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b67f0:	ee17 0a90 	vmov	r0, s15
   b67f4:	f008 f9ac 	bl	beb50 <__aeabi_f2d>
   b67f8:	ec41 0b10 	vmov	d0, r0, r1
   b67fc:	4620      	mov	r0, r4
   b67fe:	f7ff f84f 	bl	b58a0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b6802:	f7ff f811 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b6806:	f7ff f82b 	bl	b5860 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b680a:	4b08      	ldr	r3, [pc, #32]	; (b682c <_Z12batteryStatev+0x84>)
   b680c:	ec51 0b10 	vmov	r0, r1, d0
   b6810:	2200      	movs	r2, #0
   b6812:	f008 fc85 	bl	bf120 <__aeabi_dcmpgt>
}
   b6816:	3800      	subs	r0, #0
   b6818:	bf18      	it	ne
   b681a:	2001      	movne	r0, #1
   b681c:	b002      	add	sp, #8
   b681e:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6820:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6824:	e7e4      	b.n	b67f0 <_Z12batteryStatev+0x48>
   b6826:	bf00      	nop
   b6828:	2003e42c 	.word	0x2003e42c
   b682c:	404e0000 	.word	0x404e0000

000b6830 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6830:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6832:	f7fe fff9 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b6836:	4b11      	ldr	r3, [pc, #68]	; (b687c <_Z16takeMeasurementsv+0x4c>)
   b6838:	4604      	mov	r4, r0
   b683a:	8818      	ldrh	r0, [r3, #0]
   b683c:	f007 ff49 	bl	be6d2 <analogRead>
   b6840:	f7ff ff16 	bl	b6670 <_Z17tmp36TemperatureCi>
   b6844:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6848:	4620      	mov	r0, r4
   b684a:	edcd 7a01 	vstr	s15, [sp, #4]
   b684e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6852:	f7ff f940 	bl	b5ad6 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6856:	f7fe ffe7 	bl	b5828 <_ZN17currentStatusData8instanceEv>
   b685a:	f7ff f8ee 	bl	b5a3a <_ZNK17currentStatusData17get_internalTempCEv>
   b685e:	4a08      	ldr	r2, [pc, #32]	; (b6880 <_Z16takeMeasurementsv+0x50>)
   b6860:	4603      	mov	r3, r0
   b6862:	2110      	movs	r1, #16
   b6864:	4807      	ldr	r0, [pc, #28]	; (b6884 <_Z16takeMeasurementsv+0x54>)
   b6866:	f004 fe17 	bl	bb498 <snprintf>
    batteryState();
   b686a:	f7ff ff9d 	bl	b67a8 <_Z12batteryStatev>
    isItSafeToCharge();
   b686e:	f7ff ff1b 	bl	b66a8 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6872:	f7ff ff3b 	bl	b66ec <_Z17getSignalStrengthv>
}
   b6876:	2001      	movs	r0, #1
   b6878:	b002      	add	sp, #8
   b687a:	bd10      	pop	{r4, pc}
   b687c:	000c00b0 	.word	0x000c00b0
   b6880:	000c03df 	.word	0x000c03df
   b6884:	2003de24 	.word	0x2003de24

000b6888 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6888:	4801      	ldr	r0, [pc, #4]	; (b6890 <_GLOBAL__sub_I_batteryContext+0x8>)
   b688a:	2100      	movs	r1, #0
   b688c:	f005 bae0 	b.w	bbe50 <_ZN9FuelGaugeC1Eb>
   b6890:	2003e42c 	.word	0x2003e42c

000b6894 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6894:	4770      	bx	lr

000b6896 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6896:	b510      	push	{r4, lr}
}
   b6898:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b689a:	4604      	mov	r4, r0
}
   b689c:	f7fd fbff 	bl	b409e <_ZdlPvj>
   b68a0:	4620      	mov	r0, r4
   b68a2:	bd10      	pop	{r4, pc}

000b68a4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b68a4:	b510      	push	{r4, lr}
   b68a6:	4604      	mov	r4, r0
   b68a8:	b08a      	sub	sp, #40	; 0x28
   b68aa:	4608      	mov	r0, r1
    attr.flags = 0;
   b68ac:	f04f 0c20 	mov.w	ip, #32
   b68b0:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b68b2:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b68b6:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b68ba:	460b      	mov	r3, r1
   b68bc:	aa02      	add	r2, sp, #8
   b68be:	6821      	ldr	r1, [r4, #0]
   b68c0:	f004 fc66 	bl	bb190 <log_message_v>
}
   b68c4:	b00a      	add	sp, #40	; 0x28
   b68c6:	bd10      	pop	{r4, pc}

000b68c8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b68c8:	b40e      	push	{r1, r2, r3}
   b68ca:	b503      	push	{r0, r1, lr}
   b68cc:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b68ce:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b68d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b68d4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b68d6:	f7ff ffe5 	bl	b68a4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b68da:	b002      	add	sp, #8
   b68dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b68e0:	b003      	add	sp, #12
   b68e2:	4770      	bx	lr

000b68e4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b68e4:	b40e      	push	{r1, r2, r3}
   b68e6:	b503      	push	{r0, r1, lr}
   b68e8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b68ea:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b68ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b68f0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b68f2:	f7ff ffd7 	bl	b68a4 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b68f6:	b002      	add	sp, #8
   b68f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b68fc:	b003      	add	sp, #12
   b68fe:	4770      	bx	lr

000b6900 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6900:	b510      	push	{r4, lr}
   b6902:	7202      	strb	r2, [r0, #8]
   b6904:	22ff      	movs	r2, #255	; 0xff
   b6906:	8142      	strh	r2, [r0, #10]
   b6908:	2200      	movs	r2, #0
   b690a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b690e:	6142      	str	r2, [r0, #20]
   b6910:	7602      	strb	r2, [r0, #24]
   b6912:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6914:	4a02      	ldr	r2, [pc, #8]	; (b6920 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6916:	4c03      	ldr	r4, [pc, #12]	; (b6924 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6918:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b691a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b691e:	bd10      	pop	{r4, pc}
   b6920:	2003e438 	.word	0x2003e438
   b6924:	000c065c 	.word	0x000c065c

000b6928 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b692c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6930:	4604      	mov	r4, r0
   b6932:	4689      	mov	r9, r1
   b6934:	4616      	mov	r6, r2
   b6936:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6938:	f1b8 0f00 	cmp.w	r8, #0
   b693c:	d002      	beq.n	b6944 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b693e:	6840      	ldr	r0, [r0, #4]
   b6940:	f005 fb64 	bl	bc00c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6944:	7a21      	ldrb	r1, [r4, #8]
   b6946:	6860      	ldr	r0, [r4, #4]
   b6948:	f005 fb3d 	bl	bbfc6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b694c:	6860      	ldr	r0, [r4, #4]
   b694e:	6803      	ldr	r3, [r0, #0]
   b6950:	4649      	mov	r1, r9
   b6952:	689b      	ldr	r3, [r3, #8]
   b6954:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6956:	6860      	ldr	r0, [r4, #4]
   b6958:	2100      	movs	r1, #0
   b695a:	f005 fb53 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b695e:	4605      	mov	r5, r0
   b6960:	bb00      	cbnz	r0, b69a4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6962:	2301      	movs	r3, #1
   b6964:	7a21      	ldrb	r1, [r4, #8]
   b6966:	6860      	ldr	r0, [r4, #4]
   b6968:	463a      	mov	r2, r7
   b696a:	f005 fb1a 	bl	bbfa2 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b696e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6970:	4603      	mov	r3, r0
        if (count == num) {
   b6972:	d109      	bne.n	b6988 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6974:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6976:	42be      	cmp	r6, r7
   b6978:	d01c      	beq.n	b69b4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b697a:	6860      	ldr	r0, [r4, #4]
   b697c:	6803      	ldr	r3, [r0, #0]
   b697e:	695b      	ldr	r3, [r3, #20]
   b6980:	4798      	blx	r3
   b6982:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6986:	e7f6      	b.n	b6976 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6988:	490b      	ldr	r1, [pc, #44]	; (b69b8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b698a:	480c      	ldr	r0, [pc, #48]	; (b69bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b698c:	464a      	mov	r2, r9
   b698e:	f7ff ff9b 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6992:	f1b8 0f00 	cmp.w	r8, #0
   b6996:	d002      	beq.n	b699e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6998:	6860      	ldr	r0, [r4, #4]
   b699a:	f005 fb40 	bl	bc01e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b699e:	4628      	mov	r0, r5
   b69a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b69a4:	4603      	mov	r3, r0
   b69a6:	4906      	ldr	r1, [pc, #24]	; (b69c0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b69a8:	4804      	ldr	r0, [pc, #16]	; (b69bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b69aa:	464a      	mov	r2, r9
   b69ac:	f7ff ff8c 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b69b0:	2500      	movs	r5, #0
   b69b2:	e7ee      	b.n	b6992 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b69b4:	2501      	movs	r5, #1
   b69b6:	e7ec      	b.n	b6992 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b69b8:	000c040c 	.word	0x000c040c
   b69bc:	2003e434 	.word	0x2003e434
   b69c0:	000c0431 	.word	0x000c0431

000b69c4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b69c4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b69c6:	9300      	str	r3, [sp, #0]
   b69c8:	2301      	movs	r3, #1
   b69ca:	f7ff ffad 	bl	b6928 <_ZN6AB180513readRegistersEhPhjb>
}
   b69ce:	b003      	add	sp, #12
   b69d0:	f85d fb04 	ldr.w	pc, [sp], #4

000b69d4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b69d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b69d6:	8943      	ldrh	r3, [r0, #10]
   b69d8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b69da:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b69dc:	d010      	beq.n	b6a00 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b69de:	4e19      	ldr	r6, [pc, #100]	; (b6a44 <_ZN6AB180510detectChipEv+0x70>)
   b69e0:	4d19      	ldr	r5, [pc, #100]	; (b6a48 <_ZN6AB180510detectChipEv+0x74>)
   b69e2:	f004 f99d 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b69e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b69ea:	d209      	bcs.n	b6a00 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b69ec:	8960      	ldrh	r0, [r4, #10]
   b69ee:	f007 fe5d 	bl	be6ac <digitalRead>
   b69f2:	2801      	cmp	r0, #1
   b69f4:	d004      	beq.n	b6a00 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b69f6:	4631      	mov	r1, r6
   b69f8:	4628      	mov	r0, r5
   b69fa:	f7fd fb6f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b69fe:	e7f0      	b.n	b69e2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6a00:	2301      	movs	r3, #1
   b6a02:	f10d 0207 	add.w	r2, sp, #7
   b6a06:	2128      	movs	r1, #40	; 0x28
   b6a08:	4620      	mov	r0, r4
   b6a0a:	f7ff ffdb 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6a0e:	b930      	cbnz	r0, b6a1e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6a10:	480d      	ldr	r0, [pc, #52]	; (b6a48 <_ZN6AB180510detectChipEv+0x74>)
   b6a12:	490e      	ldr	r1, [pc, #56]	; (b6a4c <_ZN6AB180510detectChipEv+0x78>)
   b6a14:	f7fd fb62 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6a18:	2000      	movs	r0, #0
}
   b6a1a:	b002      	add	sp, #8
   b6a1c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6a22:	2b18      	cmp	r3, #24
   b6a24:	d1f4      	bne.n	b6a10 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6a26:	2301      	movs	r3, #1
   b6a28:	f10d 0207 	add.w	r2, sp, #7
   b6a2c:	2129      	movs	r1, #41	; 0x29
   b6a2e:	4620      	mov	r0, r4
   b6a30:	f7ff ffc8 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6a34:	2800      	cmp	r0, #0
   b6a36:	d0eb      	beq.n	b6a10 <_ZN6AB180510detectChipEv+0x3c>
   b6a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6a3c:	2b05      	cmp	r3, #5
   b6a3e:	d1e7      	bne.n	b6a10 <_ZN6AB180510detectChipEv+0x3c>
   b6a40:	e7eb      	b.n	b6a1a <_ZN6AB180510detectChipEv+0x46>
   b6a42:	bf00      	nop
   b6a44:	000c0455 	.word	0x000c0455
   b6a48:	2003e434 	.word	0x2003e434
   b6a4c:	000c046a 	.word	0x000c046a

000b6a50 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6a50:	b507      	push	{r0, r1, r2, lr}
   b6a52:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6a54:	2200      	movs	r2, #0
   b6a56:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6a5a:	f10d 0207 	add.w	r2, sp, #7
   b6a5e:	f7ff ffb1 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6a62:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6a66:	b003      	add	sp, #12
   b6a68:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a6c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a70:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6a74:	4604      	mov	r4, r0
   b6a76:	460f      	mov	r7, r1
   b6a78:	4615      	mov	r5, r2
   b6a7a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6a7c:	f1b8 0f00 	cmp.w	r8, #0
   b6a80:	d002      	beq.n	b6a88 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6a82:	6840      	ldr	r0, [r0, #4]
   b6a84:	f005 fac2 	bl	bc00c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6a88:	7a21      	ldrb	r1, [r4, #8]
   b6a8a:	6860      	ldr	r0, [r4, #4]
   b6a8c:	f005 fa9b 	bl	bbfc6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6a90:	6860      	ldr	r0, [r4, #4]
   b6a92:	6803      	ldr	r3, [r0, #0]
   b6a94:	4639      	mov	r1, r7
   b6a96:	689b      	ldr	r3, [r3, #8]
   b6a98:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6a9a:	442e      	add	r6, r5
   b6a9c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6a9e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6aa0:	d005      	beq.n	b6aae <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6aa2:	6803      	ldr	r3, [r0, #0]
   b6aa4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6aa8:	689b      	ldr	r3, [r3, #8]
   b6aaa:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6aac:	e7f6      	b.n	b6a9c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6aae:	2101      	movs	r1, #1
   b6ab0:	f005 faa8 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6ab4:	4603      	mov	r3, r0
   b6ab6:	b170      	cbz	r0, b6ad6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6ab8:	4908      	ldr	r1, [pc, #32]	; (b6adc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6aba:	4809      	ldr	r0, [pc, #36]	; (b6ae0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6abc:	463a      	mov	r2, r7
   b6abe:	f7ff ff03 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6ac2:	2500      	movs	r5, #0
    }

    if (lock) {
   b6ac4:	f1b8 0f00 	cmp.w	r8, #0
   b6ac8:	d002      	beq.n	b6ad0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6aca:	6860      	ldr	r0, [r4, #4]
   b6acc:	f005 faa7 	bl	bc01e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6ad0:	4628      	mov	r0, r5
   b6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6ad6:	2501      	movs	r5, #1
   b6ad8:	e7f4      	b.n	b6ac4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6ada:	bf00      	nop
   b6adc:	000c0477 	.word	0x000c0477
   b6ae0:	2003e434 	.word	0x2003e434

000b6ae4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6ae6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6aea:	9300      	str	r3, [sp, #0]
   b6aec:	f10d 020f 	add.w	r2, sp, #15
   b6af0:	2301      	movs	r3, #1
   b6af2:	f7ff ffbb 	bl	b6a6c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b6af6:	b005      	add	sp, #20
   b6af8:	f85d fb04 	ldr.w	pc, [sp], #4

000b6afc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6afe:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6b00:	460c      	mov	r4, r1
   b6b02:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6b04:	491a      	ldr	r1, [pc, #104]	; (b6b70 <_ZN6AB18056setWDTEi+0x74>)
   b6b06:	481b      	ldr	r0, [pc, #108]	; (b6b74 <_ZN6AB18056setWDTEi+0x78>)
   b6b08:	f7fd fae8 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6b0c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6b0e:	bfb8      	it	lt
   b6b10:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6b12:	b97c      	cbnz	r4, b6b34 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6b14:	2301      	movs	r3, #1
   b6b16:	4622      	mov	r2, r4
   b6b18:	211b      	movs	r1, #27
   b6b1a:	4628      	mov	r0, r5
   b6b1c:	f7ff ffe2 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6b20:	4915      	ldr	r1, [pc, #84]	; (b6b78 <_ZN6AB18056setWDTEi+0x7c>)
   b6b22:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6b24:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6b26:	4813      	ldr	r0, [pc, #76]	; (b6b74 <_ZN6AB18056setWDTEi+0x78>)
   b6b28:	f7ff fedc 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6b2c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6b2e:	616c      	str	r4, [r5, #20]
}
   b6b30:	4630      	mov	r0, r6
   b6b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6b34:	2c03      	cmp	r4, #3
   b6b36:	dd19      	ble.n	b6b6c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6b38:	10a7      	asrs	r7, r4, #2
   b6b3a:	2f1f      	cmp	r7, #31
   b6b3c:	bfa8      	it	ge
   b6b3e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6b40:	00ba      	lsls	r2, r7, #2
   b6b42:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6b46:	2301      	movs	r3, #1
   b6b48:	b2d2      	uxtb	r2, r2
   b6b4a:	211b      	movs	r1, #27
   b6b4c:	4628      	mov	r0, r5
   b6b4e:	f7ff ffc9 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6b52:	463a      	mov	r2, r7
   b6b54:	4603      	mov	r3, r0
   b6b56:	4909      	ldr	r1, [pc, #36]	; (b6b7c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6b58:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6b5a:	4806      	ldr	r0, [pc, #24]	; (b6b74 <_ZN6AB18056setWDTEi+0x78>)
   b6b5c:	f7ff fec2 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6b60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6b64:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6b66:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6b68:	616f      	str	r7, [r5, #20]
   b6b6a:	e7e1      	b.n	b6b30 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6b6c:	2701      	movs	r7, #1
   b6b6e:	e7e7      	b.n	b6b40 <_ZN6AB18056setWDTEi+0x44>
   b6b70:	000c049c 	.word	0x000c049c
   b6b74:	2003e434 	.word	0x2003e434
   b6b78:	000c04a6 	.word	0x000c04a6
   b6b7c:	000c04c2 	.word	0x000c04c2

000b6b80 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6b80:	4b06      	ldr	r3, [pc, #24]	; (b6b9c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6b82:	681a      	ldr	r2, [r3, #0]
   b6b84:	b14a      	cbz	r2, b6b9a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6b86:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6b8a:	430b      	orrs	r3, r1
   b6b8c:	d105      	bne.n	b6b9a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6b8e:	68d3      	ldr	r3, [r2, #12]
   b6b90:	b11b      	cbz	r3, b6b9a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6b92:	2100      	movs	r1, #0
   b6b94:	4610      	mov	r0, r2
   b6b96:	f7ff bfb1 	b.w	b6afc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6b9a:	4770      	bx	lr
   b6b9c:	2003e438 	.word	0x2003e438

000b6ba0 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6ba4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6ba8:	4605      	mov	r5, r0
   b6baa:	4616      	mov	r6, r2
   b6bac:	461f      	mov	r7, r3
    if (lock) {
   b6bae:	f1b8 0f00 	cmp.w	r8, #0
   b6bb2:	d004      	beq.n	b6bbe <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6bb4:	6840      	ldr	r0, [r0, #4]
   b6bb6:	9101      	str	r1, [sp, #4]
   b6bb8:	f005 fa28 	bl	bc00c <_ZN7TwoWire4lockEv>
   b6bbc:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6bbe:	9101      	str	r1, [sp, #4]
   b6bc0:	2300      	movs	r3, #0
   b6bc2:	f10d 020f 	add.w	r2, sp, #15
   b6bc6:	4628      	mov	r0, r5
   b6bc8:	f7ff fefc 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6bcc:	4604      	mov	r4, r0
   b6bce:	b160      	cbz	r0, b6bea <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6bd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6bd4:	ea03 0206 	and.w	r2, r3, r6
   b6bd8:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6bda:	4293      	cmp	r3, r2
   b6bdc:	d005      	beq.n	b6bea <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6bde:	9901      	ldr	r1, [sp, #4]
   b6be0:	2300      	movs	r3, #0
   b6be2:	4628      	mov	r0, r5
   b6be4:	f7ff ff7e 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
   b6be8:	4604      	mov	r4, r0
    if (lock) {
   b6bea:	f1b8 0f00 	cmp.w	r8, #0
   b6bee:	d002      	beq.n	b6bf6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6bf0:	6868      	ldr	r0, [r5, #4]
   b6bf2:	f005 fa14 	bl	bc01e <_ZN7TwoWire6unlockEv>
}
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	b004      	add	sp, #16
   b6bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6bfe <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6bfe:	b513      	push	{r0, r1, r4, lr}
   b6c00:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6c02:	f10d 0207 	add.w	r2, sp, #7
   b6c06:	f7ff fedd 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6c0a:	b128      	cbz	r0, b6c18 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6c10:	421c      	tst	r4, r3
   b6c12:	bf0c      	ite	eq
   b6c14:	2001      	moveq	r0, #1
   b6c16:	2000      	movne	r0, #0
}
   b6c18:	b002      	add	sp, #8
   b6c1a:	bd10      	pop	{r4, pc}

000b6c1c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6c1c:	b513      	push	{r0, r1, r4, lr}
   b6c1e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6c20:	f10d 0207 	add.w	r2, sp, #7
   b6c24:	f7ff fece 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6c28:	b128      	cbz	r0, b6c36 <_ZN6AB18058isBitSetEhhb+0x1a>
   b6c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6c2e:	421c      	tst	r4, r3
   b6c30:	bf14      	ite	ne
   b6c32:	2001      	movne	r0, #1
   b6c34:	2000      	moveq	r0, #0
}
   b6c36:	b002      	add	sp, #8
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6c3a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6c3c:	43d2      	mvns	r2, r2
   b6c3e:	9300      	str	r3, [sp, #0]
   b6c40:	b2d2      	uxtb	r2, r2
   b6c42:	2300      	movs	r3, #0
   b6c44:	f7ff ffac 	bl	b6ba0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6c48:	b003      	add	sp, #12
   b6c4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6c50 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6c52:	2301      	movs	r3, #1
   b6c54:	f10d 0207 	add.w	r2, sp, #7
   b6c58:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6c5a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6c5c:	f7ff feb2 	bl	b69c4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6c60:	4605      	mov	r5, r0
   b6c62:	b938      	cbnz	r0, b6c74 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6c64:	491e      	ldr	r1, [pc, #120]	; (b6ce0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6c66:	481f      	ldr	r0, [pc, #124]	; (b6ce4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6c68:	22ad      	movs	r2, #173	; 0xad
   b6c6a:	f7ff fe2d 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
}
   b6c6e:	4628      	mov	r0, r5
   b6c70:	b003      	add	sp, #12
   b6c72:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6c78:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6c7c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6c80:	d00b      	beq.n	b6c9a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6c82:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6c84:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6c86:	210f      	movs	r1, #15
   b6c88:	4620      	mov	r0, r4
   b6c8a:	f7ff ffd6 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6c8e:	4a16      	ldr	r2, [pc, #88]	; (b6ce8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6c90:	4916      	ldr	r1, [pc, #88]	; (b6cec <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6c92:	4814      	ldr	r0, [pc, #80]	; (b6ce4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6c94:	f7fd fa22 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b6c98:	e7e9      	b.n	b6c6e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6c9a:	2208      	movs	r2, #8
   b6c9c:	2117      	movs	r1, #23
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	f7ff ffbc 	bl	b6c1c <_ZN6AB18058isBitSetEhhb>
   b6ca4:	b118      	cbz	r0, b6cae <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6ca6:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6ca8:	4a11      	ldr	r2, [pc, #68]	; (b6cf0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6caa:	61e3      	str	r3, [r4, #28]
   b6cac:	e7f0      	b.n	b6c90 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6cb2:	071a      	lsls	r2, r3, #28
   b6cb4:	d509      	bpl.n	b6cca <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6cb6:	2303      	movs	r3, #3
   b6cb8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6cba:	2208      	movs	r2, #8
   b6cbc:	2301      	movs	r3, #1
   b6cbe:	210f      	movs	r1, #15
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	f7ff ffba 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6cc6:	4a0b      	ldr	r2, [pc, #44]	; (b6cf4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6cc8:	e7e2      	b.n	b6c90 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6cca:	075b      	lsls	r3, r3, #29
   b6ccc:	d5cf      	bpl.n	b6c6e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6cce:	2204      	movs	r2, #4
   b6cd0:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6cd2:	2301      	movs	r3, #1
   b6cd4:	210f      	movs	r1, #15
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	f7ff ffaf 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6cdc:	4a06      	ldr	r2, [pc, #24]	; (b6cf8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6cde:	e7d7      	b.n	b6c90 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6ce0:	000c0515 	.word	0x000c0515
   b6ce4:	2003e434 	.word	0x2003e434
   b6ce8:	000c04e6 	.word	0x000c04e6
   b6cec:	000c0534 	.word	0x000c0534
   b6cf0:	000c04ef 	.word	0x000c04ef
   b6cf4:	000c04ff 	.word	0x000c04ff
   b6cf8:	000c050f 	.word	0x000c050f

000b6cfc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6cfc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6cfe:	9300      	str	r3, [sp, #0]
   b6d00:	4613      	mov	r3, r2
   b6d02:	22ff      	movs	r2, #255	; 0xff
   b6d04:	f7ff ff4c 	bl	b6ba0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6d08:	b003      	add	sp, #12
   b6d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6d10 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d12:	460f      	mov	r7, r1
   b6d14:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6d16:	2301      	movs	r3, #1
   b6d18:	2200      	movs	r2, #0
   b6d1a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6d1c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6d1e:	f7ff fee1 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6d22:	4604      	mov	r4, r0
   b6d24:	b938      	cbnz	r0, b6d36 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6d26:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6d2a:	491f      	ldr	r1, [pc, #124]	; (b6da8 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6d2c:	481f      	ldr	r0, [pc, #124]	; (b6dac <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6d2e:	f7ff fdcb 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
}
   b6d32:	4620      	mov	r0, r4
   b6d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6d36:	2301      	movs	r3, #1
   b6d38:	2223      	movs	r2, #35	; 0x23
   b6d3a:	2118      	movs	r1, #24
   b6d3c:	4628      	mov	r0, r5
   b6d3e:	f7ff fed1 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6d42:	4604      	mov	r4, r0
   b6d44:	b910      	cbnz	r0, b6d4c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6d46:	f240 229b 	movw	r2, #667	; 0x29b
   b6d4a:	e7ee      	b.n	b6d2a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6d4c:	2fff      	cmp	r7, #255	; 0xff
   b6d4e:	bfa8      	it	ge
   b6d50:	27ff      	movge	r7, #255	; 0xff
   b6d52:	2f01      	cmp	r7, #1
   b6d54:	bfb8      	it	lt
   b6d56:	2701      	movlt	r7, #1
   b6d58:	2301      	movs	r3, #1
   b6d5a:	b2fa      	uxtb	r2, r7
   b6d5c:	2119      	movs	r1, #25
   b6d5e:	4628      	mov	r0, r5
   b6d60:	f7ff fec0 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6d64:	4604      	mov	r4, r0
   b6d66:	b910      	cbnz	r0, b6d6e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6d68:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6d6c:	e7dd      	b.n	b6d2a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6d6e:	2301      	movs	r3, #1
   b6d70:	2208      	movs	r2, #8
   b6d72:	2112      	movs	r1, #18
   b6d74:	4628      	mov	r0, r5
   b6d76:	f7ff ffc1 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6d7a:	4604      	mov	r4, r0
   b6d7c:	b910      	cbnz	r0, b6d84 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6d7e:	f240 22af 	movw	r2, #687	; 0x2af
   b6d82:	e7d2      	b.n	b6d2a <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6d84:	2e00      	cmp	r6, #0
   b6d86:	bf14      	ite	ne
   b6d88:	2203      	movne	r2, #3
   b6d8a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6d8c:	2301      	movs	r3, #1
   b6d8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6d92:	2118      	movs	r1, #24
   b6d94:	4628      	mov	r0, r5
   b6d96:	f7ff fea5 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6d9a:	4604      	mov	r4, r0
   b6d9c:	2800      	cmp	r0, #0
   b6d9e:	d1c8      	bne.n	b6d32 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6da0:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6da4:	e7c1      	b.n	b6d2a <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6da6:	bf00      	nop
   b6da8:	000c0545 	.word	0x000c0545
   b6dac:	2003e434 	.word	0x2003e434

000b6db0 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6db4:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6db6:	4605      	mov	r5, r0
   b6db8:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6dba:	484f      	ldr	r0, [pc, #316]	; (b6ef8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6dbc:	494f      	ldr	r1, [pc, #316]	; (b6efc <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6dbe:	f7fd f98d 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b6dc2:	2100      	movs	r1, #0
   b6dc4:	4628      	mov	r0, r5
   b6dc6:	f7ff fe99 	bl	b6afc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6dca:	4604      	mov	r4, r0
   b6dcc:	b948      	cbnz	r0, b6de2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6dce:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b6dd2:	494b      	ldr	r1, [pc, #300]	; (b6f00 <_ZN6AB180513deepPowerDownEi+0x150>)
   b6dd4:	4848      	ldr	r0, [pc, #288]	; (b6ef8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6dd6:	f7ff fd77 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
}
   b6dda:	4620      	mov	r0, r4
   b6ddc:	b003      	add	sp, #12
   b6dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b6de2:	2301      	movs	r3, #1
   b6de4:	461a      	mov	r2, r3
   b6de6:	2130      	movs	r1, #48	; 0x30
   b6de8:	4628      	mov	r0, r5
   b6dea:	f7ff ff87 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6dee:	4604      	mov	r4, r0
   b6df0:	b910      	cbnz	r0, b6df8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b6df2:	f240 2205 	movw	r2, #517	; 0x205
   b6df6:	e7ec      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6df8:	2210      	movs	r2, #16
   b6dfa:	2301      	movs	r3, #1
   b6dfc:	4611      	mov	r1, r2
   b6dfe:	4628      	mov	r0, r5
   b6e00:	f7ff ff1b 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6e04:	4604      	mov	r4, r0
   b6e06:	b910      	cbnz	r0, b6e0e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6e08:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6e0c:	e7e1      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6e0e:	2301      	movs	r3, #1
   b6e10:	2226      	movs	r2, #38	; 0x26
   b6e12:	2113      	movs	r1, #19
   b6e14:	4628      	mov	r0, r5
   b6e16:	f7ff fe65 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6e1a:	4604      	mov	r4, r0
   b6e1c:	b910      	cbnz	r0, b6e24 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6e1e:	f240 2213 	movw	r2, #531	; 0x213
   b6e22:	e7d6      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6e24:	2601      	movs	r6, #1
   b6e26:	9600      	str	r6, [sp, #0]
   b6e28:	4633      	mov	r3, r6
   b6e2a:	22fc      	movs	r2, #252	; 0xfc
   b6e2c:	2111      	movs	r1, #17
   b6e2e:	4628      	mov	r0, r5
   b6e30:	f7ff feb6 	bl	b6ba0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6e34:	4604      	mov	r4, r0
   b6e36:	b910      	cbnz	r0, b6e3e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6e38:	f240 221b 	movw	r2, #539	; 0x21b
   b6e3c:	e7c9      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6e3e:	2200      	movs	r2, #0
   b6e40:	4639      	mov	r1, r7
   b6e42:	4628      	mov	r0, r5
   b6e44:	f7ff ff64 	bl	b6d10 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6e48:	4604      	mov	r4, r0
   b6e4a:	b910      	cbnz	r0, b6e52 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6e4c:	f240 2222 	movw	r2, #546	; 0x222
   b6e50:	e7bf      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6e52:	9600      	str	r6, [sp, #0]
   b6e54:	2302      	movs	r3, #2
   b6e56:	2277      	movs	r2, #119	; 0x77
   b6e58:	2110      	movs	r1, #16
   b6e5a:	4628      	mov	r0, r5
   b6e5c:	f7ff fea0 	bl	b6ba0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6e60:	4604      	mov	r4, r0
   b6e62:	b910      	cbnz	r0, b6e6a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6e64:	f240 222b 	movw	r2, #555	; 0x22b
   b6e68:	e7b3      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6e6a:	4633      	mov	r3, r6
   b6e6c:	2204      	movs	r2, #4
   b6e6e:	211c      	movs	r1, #28
   b6e70:	4628      	mov	r0, r5
   b6e72:	f7ff ff43 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6e76:	4604      	mov	r4, r0
   b6e78:	b910      	cbnz	r0, b6e80 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6e7a:	f240 2232 	movw	r2, #562	; 0x232
   b6e7e:	e7a8      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6e80:	9600      	str	r6, [sp, #0]
   b6e82:	2318      	movs	r3, #24
   b6e84:	22e3      	movs	r2, #227	; 0xe3
   b6e86:	2111      	movs	r1, #17
   b6e88:	4628      	mov	r0, r5
   b6e8a:	f7ff fe89 	bl	b6ba0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6e8e:	4604      	mov	r4, r0
   b6e90:	b910      	cbnz	r0, b6e98 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6e92:	f240 2239 	movw	r2, #569	; 0x239
   b6e96:	e79c      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6e98:	4633      	mov	r3, r6
   b6e9a:	22c0      	movs	r2, #192	; 0xc0
   b6e9c:	2117      	movs	r1, #23
   b6e9e:	4628      	mov	r0, r5
   b6ea0:	f7ff fe20 	bl	b6ae4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6ea4:	4604      	mov	r4, r0
   b6ea6:	b910      	cbnz	r0, b6eae <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6ea8:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6eac:	e791      	b.n	b6dd2 <_ZN6AB180513deepPowerDownEi+0x22>
   b6eae:	f003 ff37 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6eb2:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6f08 <_ZN6AB180513deepPowerDownEi+0x158>
   b6eb6:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6ef8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6ebe:	4606      	mov	r6, r0
   b6ec0:	434f      	muls	r7, r1
   b6ec2:	f003 ff2d 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b6ec6:	1b80      	subs	r0, r0, r6
   b6ec8:	42b8      	cmp	r0, r7
   b6eca:	d20e      	bcs.n	b6eea <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6ecc:	2201      	movs	r2, #1
   b6ece:	2117      	movs	r1, #23
   b6ed0:	4628      	mov	r0, r5
   b6ed2:	f7ff fdbd 	bl	b6a50 <_ZN6AB180512readRegisterEhb>
   b6ed6:	4649      	mov	r1, r9
   b6ed8:	4602      	mov	r2, r0
   b6eda:	4640      	mov	r0, r8
   b6edc:	f7fd f8fe 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6ee4:	f004 fb30 	bl	bb548 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6ee8:	e7eb      	b.n	b6ec2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6eea:	4906      	ldr	r1, [pc, #24]	; (b6f04 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6eec:	4802      	ldr	r0, [pc, #8]	; (b6ef8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6eee:	f7ff fceb 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6ef2:	f006 ffc6 	bl	bde82 <_ZN11SystemClass5resetEv>
    return true;
   b6ef6:	e770      	b.n	b6dda <_ZN6AB180513deepPowerDownEi+0x2a>
   b6ef8:	2003e434 	.word	0x2003e434
   b6efc:	000c0570 	.word	0x000c0570
   b6f00:	000c0565 	.word	0x000c0565
   b6f04:	000c0596 	.word	0x000c0596
   b6f08:	000c0581 	.word	0x000c0581

000b6f0c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6f0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6f10:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6f14:	4605      	mov	r5, r0
   b6f16:	460c      	mov	r4, r1
   b6f18:	4691      	mov	r9, r2
   b6f1a:	461f      	mov	r7, r3
    if (lock) {
   b6f1c:	f1ba 0f00 	cmp.w	sl, #0
   b6f20:	d002      	beq.n	b6f28 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6f22:	6840      	ldr	r0, [r0, #4]
   b6f24:	f005 f872 	bl	bc00c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6f28:	b307      	cbz	r7, b6f6c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6f2a:	2f20      	cmp	r7, #32
   b6f2c:	463e      	mov	r6, r7
   b6f2e:	bf28      	it	cs
   b6f30:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6f32:	2c7f      	cmp	r4, #127	; 0x7f
   b6f34:	d826      	bhi.n	b6f84 <_ZN6AB18057readRamEjPhjb+0x78>
   b6f36:	1933      	adds	r3, r6, r4
   b6f38:	2b80      	cmp	r3, #128	; 0x80
   b6f3a:	d901      	bls.n	b6f40 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6f3c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6f40:	2301      	movs	r3, #1
   b6f42:	2204      	movs	r2, #4
   b6f44:	213f      	movs	r1, #63	; 0x3f
   b6f46:	4628      	mov	r0, r5
   b6f48:	f7ff fe77 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6f4c:	2300      	movs	r3, #0
   b6f4e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6f52:	9300      	str	r3, [sp, #0]
   b6f54:	464a      	mov	r2, r9
   b6f56:	4633      	mov	r3, r6
   b6f58:	b2c9      	uxtb	r1, r1
   b6f5a:	4628      	mov	r0, r5
   b6f5c:	f7ff fce4 	bl	b6928 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6f60:	4680      	mov	r8, r0
   b6f62:	b128      	cbz	r0, b6f70 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6f64:	4434      	add	r4, r6
        dataLen -= count;
   b6f66:	1bbf      	subs	r7, r7, r6
        data += count;
   b6f68:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6f6a:	e7dd      	b.n	b6f28 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6f6c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6f70:	f1ba 0f00 	cmp.w	sl, #0
   b6f74:	d002      	beq.n	b6f7c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6f76:	6868      	ldr	r0, [r5, #4]
   b6f78:	f005 f851 	bl	bc01e <_ZN7TwoWire6unlockEv>
}
   b6f7c:	4640      	mov	r0, r8
   b6f7e:	b002      	add	sp, #8
   b6f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6f84:	2301      	movs	r3, #1
   b6f86:	2204      	movs	r2, #4
   b6f88:	213f      	movs	r1, #63	; 0x3f
   b6f8a:	4628      	mov	r0, r5
   b6f8c:	f7ff feb6 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
   b6f90:	e7dc      	b.n	b6f4c <_ZN6AB18057readRamEjPhjb+0x40>

000b6f92 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6f92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6f96:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6f9a:	4605      	mov	r5, r0
   b6f9c:	460c      	mov	r4, r1
   b6f9e:	4691      	mov	r9, r2
   b6fa0:	461f      	mov	r7, r3
    if (lock) {
   b6fa2:	f1ba 0f00 	cmp.w	sl, #0
   b6fa6:	d002      	beq.n	b6fae <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6fa8:	6840      	ldr	r0, [r0, #4]
   b6faa:	f005 f82f 	bl	bc00c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6fae:	b307      	cbz	r7, b6ff2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6fb0:	2f1f      	cmp	r7, #31
   b6fb2:	463e      	mov	r6, r7
   b6fb4:	bf28      	it	cs
   b6fb6:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6fb8:	2c7f      	cmp	r4, #127	; 0x7f
   b6fba:	d826      	bhi.n	b700a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6fbc:	1933      	adds	r3, r6, r4
   b6fbe:	2b80      	cmp	r3, #128	; 0x80
   b6fc0:	d901      	bls.n	b6fc6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6fc2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6fc6:	2301      	movs	r3, #1
   b6fc8:	2204      	movs	r2, #4
   b6fca:	213f      	movs	r1, #63	; 0x3f
   b6fcc:	4628      	mov	r0, r5
   b6fce:	f7ff fe34 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6fd2:	2300      	movs	r3, #0
   b6fd4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6fd8:	9300      	str	r3, [sp, #0]
   b6fda:	464a      	mov	r2, r9
   b6fdc:	4633      	mov	r3, r6
   b6fde:	b2c9      	uxtb	r1, r1
   b6fe0:	4628      	mov	r0, r5
   b6fe2:	f7ff fd43 	bl	b6a6c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6fe6:	4680      	mov	r8, r0
   b6fe8:	b128      	cbz	r0, b6ff6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6fea:	4434      	add	r4, r6
        dataLen -= count;
   b6fec:	1bbf      	subs	r7, r7, r6
        data += count;
   b6fee:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6ff0:	e7dd      	b.n	b6fae <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6ff2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6ff6:	f1ba 0f00 	cmp.w	sl, #0
   b6ffa:	d002      	beq.n	b7002 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6ffc:	6868      	ldr	r0, [r5, #4]
   b6ffe:	f005 f80e 	bl	bc01e <_ZN7TwoWire6unlockEv>
}
   b7002:	4640      	mov	r0, r8
   b7004:	b002      	add	sp, #8
   b7006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b700a:	2301      	movs	r3, #1
   b700c:	2204      	movs	r2, #4
   b700e:	213f      	movs	r1, #63	; 0x3f
   b7010:	4628      	mov	r0, r5
   b7012:	f7ff fe73 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
   b7016:	e7dc      	b.n	b6fd2 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b7018 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b7018:	b530      	push	{r4, r5, lr}
   b701a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b701c:	680d      	ldr	r5, [r1, #0]
   b701e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b7022:	9503      	str	r5, [sp, #12]
   b7024:	684d      	ldr	r5, [r1, #4]
   b7026:	9502      	str	r5, [sp, #8]
   b7028:	688d      	ldr	r5, [r1, #8]
   b702a:	9501      	str	r5, [sp, #4]
   b702c:	68c9      	ldr	r1, [r1, #12]
   b702e:	9100      	str	r1, [sp, #0]
   b7030:	3301      	adds	r3, #1
   b7032:	4904      	ldr	r1, [pc, #16]	; (b7044 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b7034:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b7038:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b703a:	f006 febb 	bl	bddb4 <_ZN6String6formatEPKcz>
}
   b703e:	4620      	mov	r0, r4
   b7040:	b005      	add	sp, #20
   b7042:	bd30      	pop	{r4, r5, pc}
   b7044:	000c05a8 	.word	0x000c05a8

000b7048 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7048:	0903      	lsrs	r3, r0, #4
}
   b704a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b704c:	f000 000f 	and.w	r0, r0, #15
}
   b7050:	fb02 0003 	mla	r0, r2, r3, r0
   b7054:	4770      	bx	lr

000b7056 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7056:	b538      	push	{r3, r4, r5, lr}
   b7058:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b705a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b705c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b705e:	f7ff fff3 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b7062:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7064:	7860      	ldrb	r0, [r4, #1]
   b7066:	f7ff ffef 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b706a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b706c:	78a0      	ldrb	r0, [r4, #2]
   b706e:	f7ff ffeb 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b7072:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7074:	78e0      	ldrb	r0, [r4, #3]
   b7076:	f7ff ffe7 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b707a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b707c:	7920      	ldrb	r0, [r4, #4]
   b707e:	f7ff ffe3 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b7082:	3801      	subs	r0, #1
   b7084:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7086:	b92d      	cbnz	r5, b7094 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7088:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b708a:	7828      	ldrb	r0, [r5, #0]
   b708c:	f7ff ffdc 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b7090:	6188      	str	r0, [r1, #24]
}
   b7092:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7094:	7960      	ldrb	r0, [r4, #5]
   b7096:	f7ff ffd7 	bl	b7048 <_ZN6AB180510bcdToValueEh>
   b709a:	3064      	adds	r0, #100	; 0x64
   b709c:	1da5      	adds	r5, r4, #6
   b709e:	6148      	str	r0, [r1, #20]
   b70a0:	e7f3      	b.n	b708a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b70a4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b70a4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b70a6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b70a8:	b088      	sub	sp, #32
   b70aa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b70ac:	461a      	mov	r2, r3
   b70ae:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b70b0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b70b2:	f7ff fda4 	bl	b6bfe <_ZN6AB180510isBitClearEhhb>
   b70b6:	b1f0      	cbz	r0, b70f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b70b8:	2308      	movs	r3, #8
   b70ba:	2601      	movs	r6, #1
   b70bc:	4620      	mov	r0, r4
   b70be:	9600      	str	r6, [sp, #0]
   b70c0:	eb0d 0203 	add.w	r2, sp, r3
   b70c4:	2100      	movs	r1, #0
   b70c6:	f7ff fc2f 	bl	b6928 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b70ca:	4604      	mov	r4, r0
   b70cc:	b198      	cbz	r0, b70f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b70ce:	4632      	mov	r2, r6
   b70d0:	4629      	mov	r1, r5
   b70d2:	f10d 0009 	add.w	r0, sp, #9
   b70d6:	f7ff ffbe 	bl	b7056 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b70da:	a804      	add	r0, sp, #16
   b70dc:	f7ff ff9c 	bl	b7018 <_ZN6AB180510tmToStringEPK2tm>
   b70e0:	4808      	ldr	r0, [pc, #32]	; (b7104 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b70e2:	9a04      	ldr	r2, [sp, #16]
   b70e4:	4908      	ldr	r1, [pc, #32]	; (b7108 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b70e6:	f7fc fff9 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b70ea:	a804      	add	r0, sp, #16
   b70ec:	f006 fd16 	bl	bdb1c <_ZN6StringD1Ev>
}
   b70f0:	4620      	mov	r0, r4
   b70f2:	b008      	add	sp, #32
   b70f4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b70f6:	2224      	movs	r2, #36	; 0x24
   b70f8:	2100      	movs	r1, #0
   b70fa:	4628      	mov	r0, r5
   b70fc:	f008 f8f2 	bl	bf2e4 <memset>
   b7100:	2400      	movs	r4, #0
   b7102:	e7f5      	b.n	b70f0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7104:	2003e434 	.word	0x2003e434
   b7108:	000c05c6 	.word	0x000c05c6

000b710c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b710c:	b530      	push	{r4, r5, lr}
   b710e:	b08b      	sub	sp, #44	; 0x2c
   b7110:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b7112:	a901      	add	r1, sp, #4
   b7114:	f7ff ffc6 	bl	b70a4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b7118:	4604      	mov	r4, r0
   b711a:	b120      	cbz	r0, b7126 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b711c:	a801      	add	r0, sp, #4
   b711e:	f004 fa0b 	bl	bb538 <mktime>
   b7122:	e9c5 0100 	strd	r0, r1, [r5]
}
   b7126:	4620      	mov	r0, r4
   b7128:	b00b      	add	sp, #44	; 0x2c
   b712a:	bd30      	pop	{r4, r5, pc}

000b712c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b712c:	230a      	movs	r3, #10
   b712e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b7132:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b7136:	fb91 f2f3 	sdiv	r2, r1, r3
   b713a:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b713e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b7142:	b2c0      	uxtb	r0, r0
   b7144:	4770      	bx	lr

000b7146 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7146:	b570      	push	{r4, r5, r6, lr}
   b7148:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b714a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b714c:	460c      	mov	r4, r1
   b714e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b7150:	f7ff ffec 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b7154:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b7156:	6868      	ldr	r0, [r5, #4]
   b7158:	f7ff ffe8 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b715c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b715e:	68a8      	ldr	r0, [r5, #8]
   b7160:	f7ff ffe4 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b7164:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b7166:	68e8      	ldr	r0, [r5, #12]
   b7168:	f7ff ffe0 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b716c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b716e:	6928      	ldr	r0, [r5, #16]
   b7170:	3001      	adds	r0, #1
   b7172:	f7ff ffdb 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b7176:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7178:	b92e      	cbnz	r6, b7186 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b717a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b717c:	69a8      	ldr	r0, [r5, #24]
   b717e:	f7ff ffd5 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b7182:	7030      	strb	r0, [r6, #0]
}
   b7184:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7186:	696a      	ldr	r2, [r5, #20]
   b7188:	2364      	movs	r3, #100	; 0x64
   b718a:	fb92 f0f3 	sdiv	r0, r2, r3
   b718e:	fb03 2010 	mls	r0, r3, r0, r2
   b7192:	f7ff ffcb 	bl	b712c <_ZN6AB180510valueToBcdEi>
   b7196:	1da6      	adds	r6, r4, #6
   b7198:	7160      	strb	r0, [r4, #5]
   b719a:	e7ef      	b.n	b717c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b719c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b719c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b719e:	b087      	sub	sp, #28
   b71a0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b71a2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b71a4:	4616      	mov	r6, r2
   b71a6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b71a8:	f7ff ff36 	bl	b7018 <_ZN6AB180510tmToStringEPK2tm>
   b71ac:	481e      	ldr	r0, [pc, #120]	; (b7228 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b71ae:	9a02      	ldr	r2, [sp, #8]
   b71b0:	491e      	ldr	r1, [pc, #120]	; (b722c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b71b2:	f7fc ff93 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b71b6:	a802      	add	r0, sp, #8
   b71b8:	f006 fcb0 	bl	bdb1c <_ZN6StringD1Ev>
    if (lock) {
   b71bc:	b116      	cbz	r6, b71c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b71be:	6868      	ldr	r0, [r5, #4]
   b71c0:	f004 ff24 	bl	bc00c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b71c4:	4620      	mov	r0, r4
   b71c6:	2201      	movs	r2, #1
   b71c8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b71cc:	2700      	movs	r7, #0
   b71ce:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b71d2:	f7ff ffb8 	bl	b7146 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b71d6:	2301      	movs	r3, #1
   b71d8:	461a      	mov	r2, r3
   b71da:	2110      	movs	r1, #16
   b71dc:	4628      	mov	r0, r5
   b71de:	f7ff fd8d 	bl	b6cfc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b71e2:	4604      	mov	r4, r0
   b71e4:	b1e8      	cbz	r0, b7222 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b71e6:	2308      	movs	r3, #8
   b71e8:	9700      	str	r7, [sp, #0]
   b71ea:	eb0d 0203 	add.w	r2, sp, r3
   b71ee:	4639      	mov	r1, r7
   b71f0:	4628      	mov	r0, r5
   b71f2:	f7ff fc3b 	bl	b6a6c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b71f6:	4604      	mov	r4, r0
   b71f8:	b160      	cbz	r0, b7214 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b71fa:	2301      	movs	r3, #1
   b71fc:	461a      	mov	r2, r3
   b71fe:	2110      	movs	r1, #16
   b7200:	4628      	mov	r0, r5
   b7202:	f7ff fd1a 	bl	b6c3a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b7206:	b116      	cbz	r6, b720e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b7208:	6868      	ldr	r0, [r5, #4]
   b720a:	f004 ff08 	bl	bc01e <_ZN7TwoWire6unlockEv>
}
   b720e:	4620      	mov	r0, r4
   b7210:	b007      	add	sp, #28
   b7212:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b7214:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b7218:	4905      	ldr	r1, [pc, #20]	; (b7230 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b721a:	4803      	ldr	r0, [pc, #12]	; (b7228 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b721c:	f7ff fb54 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
   b7220:	e7f1      	b.n	b7206 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b7222:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b7226:	e7f7      	b.n	b7218 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b7228:	2003e434 	.word	0x2003e434
   b722c:	000c05d4 	.word	0x000c05d4
   b7230:	000c05e2 	.word	0x000c05e2

000b7234 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b7234:	b513      	push	{r0, r1, r4, lr}
   b7236:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b7238:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b723a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b723e:	f008 f803 	bl	bf248 <gmtime>
    return setRtcFromTm(tm, lock);
   b7242:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b7246:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b7248:	4620      	mov	r0, r4
   b724a:	f7ff ffa7 	bl	b719c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b724e:	b002      	add	sp, #8
   b7250:	bd10      	pop	{r4, pc}
	...

000b7254 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b7254:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b7256:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b7258:	b089      	sub	sp, #36	; 0x24
   b725a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b725c:	bb75      	cbnz	r5, b72bc <_ZN6AB18054loopEv+0x68>
   b725e:	f006 ffdf 	bl	be220 <_ZN9TimeClass7isValidEv>
   b7262:	b358      	cbz	r0, b72bc <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b7264:	2600      	movs	r6, #0
   b7266:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b7268:	a904      	add	r1, sp, #16
   b726a:	4628      	mov	r0, r5
        tm = 0;
   b726c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b7270:	f004 f86a 	bl	bb348 <spark_sync_time_last>
   b7274:	b310      	cbz	r0, b72bc <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b7276:	2501      	movs	r5, #1
   b7278:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b727a:	f006 ffee 	bl	be25a <_ZN9TimeClass3nowEv>
   b727e:	17c3      	asrs	r3, r0, #31
   b7280:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b7284:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b7286:	9500      	str	r5, [sp, #0]
   b7288:	4620      	mov	r0, r4
   b728a:	f7ff ffd3 	bl	b7234 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b728e:	a902      	add	r1, sp, #8
   b7290:	4620      	mov	r0, r4
        time = 0;
   b7292:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b7296:	f7ff ff39 	bl	b710c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b729a:	4b13      	ldr	r3, [pc, #76]	; (b72e8 <_ZN6AB18054loopEv+0x94>)
   b729c:	4913      	ldr	r1, [pc, #76]	; (b72ec <_ZN6AB18054loopEv+0x98>)
   b729e:	681b      	ldr	r3, [r3, #0]
   b72a0:	9300      	str	r3, [sp, #0]
   b72a2:	a804      	add	r0, sp, #16
   b72a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b72a8:	f006 ff78 	bl	be19c <_ZN9TimeClass6formatExPKc>
   b72ac:	4810      	ldr	r0, [pc, #64]	; (b72f0 <_ZN6AB18054loopEv+0x9c>)
   b72ae:	9a04      	ldr	r2, [sp, #16]
   b72b0:	4910      	ldr	r1, [pc, #64]	; (b72f4 <_ZN6AB18054loopEv+0xa0>)
   b72b2:	f7fc ff13 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b72b6:	a804      	add	r0, sp, #16
   b72b8:	f006 fc30 	bl	bdb1c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b72bc:	6963      	ldr	r3, [r4, #20]
   b72be:	b18b      	cbz	r3, b72e4 <_ZN6AB18054loopEv+0x90>
   b72c0:	f003 fd2e 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b72c4:	6923      	ldr	r3, [r4, #16]
   b72c6:	1ac0      	subs	r0, r0, r3
   b72c8:	6963      	ldr	r3, [r4, #20]
   b72ca:	4298      	cmp	r0, r3
   b72cc:	d30a      	bcc.n	b72e4 <_ZN6AB18054loopEv+0x90>
   b72ce:	f003 fd27 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b72d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b72d6:	6120      	str	r0, [r4, #16]
            setWDT();
   b72d8:	4620      	mov	r0, r4
}
   b72da:	b009      	add	sp, #36	; 0x24
   b72dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b72e0:	f7ff bc0c 	b.w	b6afc <_ZN6AB18056setWDTEi>
}
   b72e4:	b009      	add	sp, #36	; 0x24
   b72e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b72e8:	2003de7c 	.word	0x2003de7c
   b72ec:	2003e6a8 	.word	0x2003e6a8
   b72f0:	2003e434 	.word	0x2003e434
   b72f4:	000c05fd 	.word	0x000c05fd

000b72f8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b72f8:	b530      	push	{r4, r5, lr}
   b72fa:	4604      	mov	r4, r0
   b72fc:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b72fe:	b111      	cbz	r1, b7306 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b7300:	6840      	ldr	r0, [r0, #4]
   b7302:	f004 fe31 	bl	bbf68 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b7306:	4620      	mov	r0, r4
   b7308:	f7ff fb64 	bl	b69d4 <_ZN6AB180510detectChipEv>
   b730c:	ad06      	add	r5, sp, #24
   b730e:	2800      	cmp	r0, #0
   b7310:	d037      	beq.n	b7382 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff fc9c 	bl	b6c50 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b7318:	2301      	movs	r3, #1
   b731a:	461a      	mov	r2, r3
   b731c:	2110      	movs	r1, #16
   b731e:	4620      	mov	r0, r4
   b7320:	f7ff fc6d 	bl	b6bfe <_ZN6AB180510isBitClearEhhb>
   b7324:	b1d8      	cbz	r0, b735e <_ZN6AB18055setupEb+0x66>
   b7326:	f006 ff7b 	bl	be220 <_ZN9TimeClass7isValidEv>
   b732a:	b9c0      	cbnz	r0, b735e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b732c:	a902      	add	r1, sp, #8
   b732e:	4620      	mov	r0, r4
   b7330:	f7ff feec 	bl	b710c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b7334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b7338:	f006 fe76 	bl	be028 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b733c:	4b13      	ldr	r3, [pc, #76]	; (b738c <_ZN6AB18055setupEb+0x94>)
   b733e:	4914      	ldr	r1, [pc, #80]	; (b7390 <_ZN6AB18055setupEb+0x98>)
   b7340:	681b      	ldr	r3, [r3, #0]
   b7342:	9300      	str	r3, [sp, #0]
   b7344:	4628      	mov	r0, r5
   b7346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b734a:	f006 ff27 	bl	be19c <_ZN9TimeClass6formatExPKc>
   b734e:	4811      	ldr	r0, [pc, #68]	; (b7394 <_ZN6AB18055setupEb+0x9c>)
   b7350:	9a06      	ldr	r2, [sp, #24]
   b7352:	4911      	ldr	r1, [pc, #68]	; (b7398 <_ZN6AB18055setupEb+0xa0>)
   b7354:	f7fc fec2 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b7358:	4628      	mov	r0, r5
   b735a:	f006 fbdf 	bl	bdb1c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b735e:	4b0f      	ldr	r3, [pc, #60]	; (b739c <_ZN6AB18055setupEb+0xa4>)
   b7360:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b7362:	4b0f      	ldr	r3, [pc, #60]	; (b73a0 <_ZN6AB18055setupEb+0xa8>)
   b7364:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b7366:	4b0f      	ldr	r3, [pc, #60]	; (b73a4 <_ZN6AB18055setupEb+0xac>)
   b7368:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b736a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b736e:	2300      	movs	r3, #0
   b7370:	a802      	add	r0, sp, #8
   b7372:	9500      	str	r5, [sp, #0]
   b7374:	f7fd ff0a 	bl	b518c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b7378:	4628      	mov	r0, r5
   b737a:	f7fd fc0b 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
}
   b737e:	b00b      	add	sp, #44	; 0x2c
   b7380:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b7382:	4909      	ldr	r1, [pc, #36]	; (b73a8 <_ZN6AB18055setupEb+0xb0>)
   b7384:	4803      	ldr	r0, [pc, #12]	; (b7394 <_ZN6AB18055setupEb+0x9c>)
   b7386:	f7ff fa9f 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
   b738a:	e7e8      	b.n	b735e <_ZN6AB18055setupEb+0x66>
   b738c:	2003de7c 	.word	0x2003de7c
   b7390:	2003e6a8 	.word	0x2003e6a8
   b7394:	2003e434 	.word	0x2003e434
   b7398:	000c0613 	.word	0x000c0613
   b739c:	000b6b81 	.word	0x000b6b81
   b73a0:	000b4b8b 	.word	0x000b4b8b
   b73a4:	000b4b77 	.word	0x000b4b77
   b73a8:	000c0630 	.word	0x000c0630

000b73ac <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b73ac:	4b01      	ldr	r3, [pc, #4]	; (b73b4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b73ae:	4a02      	ldr	r2, [pc, #8]	; (b73b8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b73b0:	601a      	str	r2, [r3, #0]
}
   b73b2:	4770      	bx	lr
   b73b4:	2003e434 	.word	0x2003e434
   b73b8:	000c0648 	.word	0x000c0648

000b73bc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b73bc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b73be:	2301      	movs	r3, #1
   b73c0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b73c2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b73c4:	4604      	mov	r4, r0
        if (th->func) {
   b73c6:	b143      	cbz	r3, b73da <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b73c8:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b73ca:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b73cc:	2301      	movs	r3, #1
   b73ce:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b73d0:	2000      	movs	r0, #0
    }
   b73d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b73d6:	f003 bc73 	b.w	bacc0 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b73da:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b73dc:	2800      	cmp	r0, #0
   b73de:	d0f5      	beq.n	b73cc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b73e0:	6883      	ldr	r3, [r0, #8]
   b73e2:	b90b      	cbnz	r3, b73e8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b73e4:	f007 fa4c 	bl	be880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b73e8:	68c3      	ldr	r3, [r0, #12]
   b73ea:	e7ee      	b.n	b73ca <_ZN6Thread3runEPv+0xe>

000b73ec <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b73ec:	2a01      	cmp	r2, #1
   b73ee:	d102      	bne.n	b73f6 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b73f0:	6001      	str	r1, [r0, #0]
      }
   b73f2:	2000      	movs	r0, #0
   b73f4:	4770      	bx	lr
	  switch (__op)
   b73f6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b73f8:	bf04      	itt	eq
   b73fa:	680b      	ldreq	r3, [r1, #0]
   b73fc:	6003      	streq	r3, [r0, #0]
	      break;
   b73fe:	e7f8      	b.n	b73f2 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b7400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b7400:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7402:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b7404:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7406:	b135      	cbz	r5, b7416 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b7408:	4628      	mov	r0, r5
   b740a:	f7fd fbc3 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b740e:	2110      	movs	r1, #16
   b7410:	4628      	mov	r0, r5
   b7412:	f7fc fe44 	bl	b409e <_ZdlPvj>
   b7416:	4620      	mov	r0, r4
   b7418:	2114      	movs	r1, #20
      }
   b741a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b741e:	f7fc be3e 	b.w	b409e <_ZdlPvj>

000b7422 <_ZN6Thread7disposeEv>:
    void dispose()
   b7422:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7424:	6803      	ldr	r3, [r0, #0]
   b7426:	4604      	mov	r4, r0
        if (!isValid())
   b7428:	b1ab      	cbz	r3, b7456 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b742a:	6858      	ldr	r0, [r3, #4]
   b742c:	f003 fbf8 	bl	bac20 <os_thread_is_current>
   b7430:	b988      	cbnz	r0, b7456 <_ZN6Thread7disposeEv+0x34>
   b7432:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b7434:	7c5a      	ldrb	r2, [r3, #17]
   b7436:	b912      	cbnz	r2, b743e <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b7438:	6858      	ldr	r0, [r3, #4]
   b743a:	f003 fbf9 	bl	bac30 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b743e:	6823      	ldr	r3, [r4, #0]
   b7440:	6858      	ldr	r0, [r3, #4]
   b7442:	f003 fbfd 	bl	bac40 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b7446:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b7448:	2300      	movs	r3, #0
   b744a:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b744c:	b118      	cbz	r0, b7456 <_ZN6Thread7disposeEv+0x34>
    }
   b744e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7452:	f7ff bfd5 	b.w	b7400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b7456:	bd10      	pop	{r4, pc}

000b7458 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b7458:	4a05      	ldr	r2, [pc, #20]	; (b7470 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b745a:	6002      	str	r2, [r0, #0]
   b745c:	2200      	movs	r2, #0
   b745e:	6042      	str	r2, [r0, #4]
   b7460:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b7462:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b7466:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b746a:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b746e:	4770      	bx	lr
   b7470:	000c0688 	.word	0x000c0688

000b7474 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b7474:	b510      	push	{r4, lr}
    if (!_instance) {
   b7476:	4c07      	ldr	r4, [pc, #28]	; (b7494 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b7478:	6823      	ldr	r3, [r4, #0]
   b747a:	b943      	cbnz	r3, b748e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b747c:	f240 4064 	movw	r0, #1124	; 0x464
   b7480:	f7fc fe09 	bl	b4096 <_Znwj>
   b7484:	4603      	mov	r3, r0
   b7486:	b108      	cbz	r0, b748c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b7488:	f7ff ffe6 	bl	b7458 <_ZN19BackgroundPublishRKC1Ev>
   b748c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b748e:	6820      	ldr	r0, [r4, #0]
   b7490:	bd10      	pop	{r4, pc}
   b7492:	bf00      	nop
   b7494:	2003e43c 	.word	0x2003e43c

000b7498 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b7498:	b538      	push	{r3, r4, r5, lr}
   b749a:	4604      	mov	r4, r0
    if(thread)
   b749c:	6840      	ldr	r0, [r0, #4]
   b749e:	b190      	cbz	r0, b74c6 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b74a0:	2302      	movs	r3, #2
   b74a2:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b74a4:	f7ff ffbd 	bl	b7422 <_ZN6Thread7disposeEv>
        delete thread;
   b74a8:	6865      	ldr	r5, [r4, #4]
   b74aa:	b155      	cbz	r5, b74c2 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b74ac:	4628      	mov	r0, r5
   b74ae:	f7ff ffb8 	bl	b7422 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b74b2:	6828      	ldr	r0, [r5, #0]
   b74b4:	b108      	cbz	r0, b74ba <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b74b6:	f7ff ffa3 	bl	b7400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b74ba:	2104      	movs	r1, #4
   b74bc:	4628      	mov	r0, r5
   b74be:	f7fc fdee 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b74c2:	2300      	movs	r3, #0
   b74c4:	6063      	str	r3, [r4, #4]
    }
}
   b74c6:	bd38      	pop	{r3, r4, r5, pc}

000b74c8 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b74c8:	b510      	push	{r4, lr}
   b74ca:	4b05      	ldr	r3, [pc, #20]	; (b74e0 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b74cc:	6003      	str	r3, [r0, #0]
   b74ce:	4604      	mov	r4, r0
    stop();
   b74d0:	f7ff ffe2 	bl	b7498 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b74d4:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b74d8:	f7fd fb5c 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
}
   b74dc:	4620      	mov	r0, r4
   b74de:	bd10      	pop	{r4, pc}
   b74e0:	000c0688 	.word	0x000c0688

000b74e4 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b74e4:	b510      	push	{r4, lr}
   b74e6:	4604      	mov	r4, r0
}
   b74e8:	f7ff ffee 	bl	b74c8 <_ZN19BackgroundPublishRKD1Ev>
   b74ec:	4620      	mov	r0, r4
   b74ee:	f240 4164 	movw	r1, #1124	; 0x464
   b74f2:	f7fc fdd4 	bl	b409e <_ZdlPvj>
   b74f6:	4620      	mov	r0, r4
   b74f8:	bd10      	pop	{r4, pc}

000b74fa <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b74fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74fc:	4604      	mov	r4, r0
   b74fe:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b7500:	f100 060d 	add.w	r6, r0, #13
   b7504:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7508:	7b23      	ldrb	r3, [r4, #12]
   b750a:	b91b      	cbnz	r3, b7514 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b750c:	2001      	movs	r0, #1
   b750e:	f004 f81b 	bl	bb548 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b7512:	e7f9      	b.n	b7508 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b7514:	7b23      	ldrb	r3, [r4, #12]
   b7516:	2b02      	cmp	r3, #2
   b7518:	d064      	beq.n	b75e4 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b751a:	68a0      	ldr	r0, [r4, #8]
   b751c:	f003 fba0 	bl	bac60 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b7520:	68a0      	ldr	r0, [r4, #8]
   b7522:	f003 fba5 	bl	bac70 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7526:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b752a:	f88d 3000 	strb.w	r3, [sp]
   b752e:	463a      	mov	r2, r7
   b7530:	233c      	movs	r3, #60	; 0x3c
   b7532:	4631      	mov	r1, r6
   b7534:	a806      	add	r0, sp, #24
   b7536:	f004 fad5 	bl	bbae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b753a:	9d06      	ldr	r5, [sp, #24]
   b753c:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b753e:	b933      	cbnz	r3, b754e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b7540:	7b23      	ldrb	r3, [r4, #12]
   b7542:	2b02      	cmp	r3, #2
   b7544:	d003      	beq.n	b754e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b7546:	2001      	movs	r0, #1
   b7548:	f003 fffe 	bl	bb548 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b754c:	e7f5      	b.n	b753a <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b754e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b7552:	b31b      	cbz	r3, b759c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b7554:	2000      	movs	r0, #0
   b7556:	f003 fe65 	bl	bb224 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b755a:	b120      	cbz	r0, b7566 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b755c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b755e:	b913      	cbnz	r3, b7566 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b7560:	f003 fec2 	bl	bb2e8 <spark_process>
    }
   b7564:	e7fa      	b.n	b755c <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7566:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b7568:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b756c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b756e:	1e59      	subs	r1, r3, #1
   b7570:	424b      	negs	r3, r1
   b7572:	414b      	adcs	r3, r1
   b7574:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b7578:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b757c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b7580:	b90b      	cbnz	r3, b7586 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b7582:	f007 f97d 	bl	be880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7586:	ab05      	add	r3, sp, #20
   b7588:	9300      	str	r3, [sp, #0]
   b758a:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b758e:	ab04      	add	r3, sp, #16
   b7590:	aa03      	add	r2, sp, #12
   b7592:	f10d 010b 	add.w	r1, sp, #11
   b7596:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b759a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b759c:	68a0      	ldr	r0, [r4, #8]
   b759e:	f003 fb5f 	bl	bac60 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b75a2:	7b23      	ldrb	r3, [r4, #12]
   b75a4:	2b02      	cmp	r3, #2
   b75a6:	d017      	beq.n	b75d8 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b75a8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b75ac:	2500      	movs	r5, #0
   b75ae:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b75b2:	b143      	cbz	r3, b75c6 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b75b4:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b75b8:	2203      	movs	r2, #3
   b75ba:	4608      	mov	r0, r1
   b75bc:	4798      	blx	r3
	    _M_manager = nullptr;
   b75be:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b75c2:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b75c6:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b75c8:	68a0      	ldr	r0, [r4, #8]
   b75ca:	7323      	strb	r3, [r4, #12]
   b75cc:	f003 fb50 	bl	bac70 <os_mutex_unlock>
   b75d0:	a807      	add	r0, sp, #28
   b75d2:	f7fe fdc7 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75d6:	e797      	b.n	b7508 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b75d8:	68a0      	ldr	r0, [r4, #8]
   b75da:	f003 fb49 	bl	bac70 <os_mutex_unlock>
   b75de:	a807      	add	r0, sp, #28
   b75e0:	f7fe fdc0 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b75e4:	b009      	add	sp, #36	; 0x24
   b75e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b75e8 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b75e8:	6800      	ldr	r0, [r0, #0]
   b75ea:	f7ff bf86 	b.w	b74fa <_ZN19BackgroundPublishRK8thread_fEv>

000b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b75ee:	b513      	push	{r0, r1, r4, lr}
   b75f0:	460b      	mov	r3, r1
   b75f2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75f4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b75f8:	466c      	mov	r4, sp
   b75fa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b75fe:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7602:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7606:	e894 0003 	ldmia.w	r4, {r0, r1}
   b760a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b760e:	b002      	add	sp, #8
   b7610:	bd10      	pop	{r4, pc}
	...

000b7614 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b7614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7618:	4606      	mov	r6, r0
   b761a:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b761c:	2014      	movs	r0, #20
   b761e:	4926      	ldr	r1, [pc, #152]	; (b76b8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b7620:	4617      	mov	r7, r2
   b7622:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b7624:	f007 f922 	bl	be86c <_ZnwjRKSt9nothrow_t>
   b7628:	4604      	mov	r4, r0
   b762a:	b130      	cbz	r0, b763a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b762c:	2000      	movs	r0, #0
            exited(false) {
   b762e:	e9c4 0000 	strd	r0, r0, [r4]
   b7632:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b7636:	7420      	strb	r0, [r4, #16]
   b7638:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b763a:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b763c:	2c00      	cmp	r4, #0
   b763e:	d031      	beq.n	b76a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b7640:	491d      	ldr	r1, [pc, #116]	; (b76b8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b7642:	2010      	movs	r0, #16
   b7644:	f007 f912 	bl	be86c <_ZnwjRKSt9nothrow_t>
   b7648:	4605      	mov	r5, r0
   b764a:	b168      	cbz	r0, b7668 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b764c:	2300      	movs	r3, #0
   b764e:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7650:	4601      	mov	r1, r0
   b7652:	4638      	mov	r0, r7
   b7654:	f7ff ffcb 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7658:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b765a:	68aa      	ldr	r2, [r5, #8]
   b765c:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b765e:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7660:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7662:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7664:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7666:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b7668:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b766a:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b766c:	b137      	cbz	r7, b767c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b766e:	4638      	mov	r0, r7
   b7670:	f7fd fa90 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b7674:	2110      	movs	r1, #16
   b7676:	4638      	mov	r0, r7
   b7678:	f7fc fd11 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b767c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b767e:	6803      	ldr	r3, [r0, #0]
   b7680:	b183      	cbz	r3, b76a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b7682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7684:	464a      	mov	r2, r9
   b7686:	e9cd 0300 	strd	r0, r3, [sp]
   b768a:	4641      	mov	r1, r8
   b768c:	4b0b      	ldr	r3, [pc, #44]	; (b76bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b768e:	3004      	adds	r0, #4
   b7690:	f003 fabe 	bl	bac10 <os_thread_create>
   b7694:	b930      	cbnz	r0, b76a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b7696:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b7698:	7c1b      	ldrb	r3, [r3, #16]
   b769a:	b94b      	cbnz	r3, b76b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b769c:	2001      	movs	r0, #1
   b769e:	f003 fb2f 	bl	bad00 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b76a2:	e7f8      	b.n	b7696 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b76a4:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b76a6:	2300      	movs	r3, #0
   b76a8:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b76aa:	b108      	cbz	r0, b76b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b76ac:	f7ff fea8 	bl	b7400 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b76b0:	4630      	mov	r0, r6
   b76b2:	b003      	add	sp, #12
   b76b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b76b8:	000c10e0 	.word	0x000c10e0
   b76bc:	000b73bd 	.word	0x000b73bd

000b76c0 <_ZN19BackgroundPublishRK5startEv>:
{
   b76c0:	b530      	push	{r4, r5, lr}
    if(!thread)
   b76c2:	6843      	ldr	r3, [r0, #4]
{
   b76c4:	b087      	sub	sp, #28
   b76c6:	4604      	mov	r4, r0
    if(!thread)
   b76c8:	b9c3      	cbnz	r3, b76fc <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b76ca:	3008      	adds	r0, #8
   b76cc:	f003 fac0 	bl	bac50 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b76d0:	4b0b      	ldr	r3, [pc, #44]	; (b7700 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b76d2:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b76d4:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b76d6:	4b0b      	ldr	r3, [pc, #44]	; (b7704 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b76d8:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b76da:	9304      	str	r3, [sp, #16]
   b76dc:	f7fc fcdb 	bl	b4096 <_Znwj>
   b76e0:	4605      	mov	r5, r0
   b76e2:	b138      	cbz	r0, b76f4 <_ZN19BackgroundPublishRK5startEv+0x34>
   b76e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b76e8:	9300      	str	r3, [sp, #0]
   b76ea:	4907      	ldr	r1, [pc, #28]	; (b7708 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b76ec:	2302      	movs	r3, #2
   b76ee:	aa02      	add	r2, sp, #8
   b76f0:	f7ff ff90 	bl	b7614 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b76f4:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b76f6:	a802      	add	r0, sp, #8
   b76f8:	f7fd fa4c 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
}
   b76fc:	b007      	add	sp, #28
   b76fe:	bd30      	pop	{r4, r5, pc}
   b7700:	000b75e9 	.word	0x000b75e9
   b7704:	000b73ed 	.word	0x000b73ed
   b7708:	000c066c 	.word	0x000c066c

000b770c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b770c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7710:	4604      	mov	r4, r0
   b7712:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b7714:	6880      	ldr	r0, [r0, #8]
   b7716:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b7718:	4698      	mov	r8, r3
   b771a:	460d      	mov	r5, r1
   b771c:	4616      	mov	r6, r2
   b771e:	f003 fa9f 	bl	bac60 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b7722:	6863      	ldr	r3, [r4, #4]
   b7724:	b11b      	cbz	r3, b772e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b7726:	7b23      	ldrb	r3, [r4, #12]
   b7728:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b772c:	b133      	cbz	r3, b773c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b772e:	68a0      	ldr	r0, [r4, #8]
   b7730:	f003 fa9e 	bl	bac70 <os_mutex_unlock>
    {
        return false;
   b7734:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b7736:	b005      	add	sp, #20
   b7738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b773c:	68a0      	ldr	r0, [r4, #8]
   b773e:	f003 fa97 	bl	bac70 <os_mutex_unlock>
    if(!name)
   b7742:	2d00      	cmp	r5, #0
   b7744:	d03d      	beq.n	b77c2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b7746:	2240      	movs	r2, #64	; 0x40
   b7748:	4629      	mov	r1, r5
   b774a:	f104 000d 	add.w	r0, r4, #13
   b774e:	f007 fea0 	bl	bf492 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b7752:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b7756:	b38e      	cbz	r6, b77bc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b7758:	f240 4201 	movw	r2, #1025	; 0x401
   b775c:	4631      	mov	r1, r6
   b775e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b7762:	f007 fe96 	bl	bf492 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b7766:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b776a:	2300      	movs	r3, #0
   b776c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b776e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b7770:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b7774:	b13b      	cbz	r3, b7786 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7776:	2202      	movs	r2, #2
   b7778:	4639      	mov	r1, r7
   b777a:	4668      	mov	r0, sp
   b777c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b777e:	68fb      	ldr	r3, [r7, #12]
   b7780:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7782:	68bb      	ldr	r3, [r7, #8]
   b7784:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b7786:	4629      	mov	r1, r5
   b7788:	4668      	mov	r0, sp
   b778a:	f7ff ff30 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b778e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7790:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b7794:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7798:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b779a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b779c:	4668      	mov	r0, sp
   b779e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b77a2:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b77a6:	9203      	str	r2, [sp, #12]
   b77a8:	f7fd f9f4 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b77ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b77ae:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b77b2:	2001      	movs	r0, #1
    event_flags = flags;
   b77b4:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b77b8:	7320      	strb	r0, [r4, #12]
    return true;
   b77ba:	e7bc      	b.n	b7736 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b77bc:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b77c0:	e7d3      	b.n	b776a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b77c2:	4628      	mov	r0, r5
   b77c4:	e7b7      	b.n	b7736 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000b77c6 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b77c6:	4770      	bx	lr

000b77c8 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b77c8:	4770      	bx	lr

000b77ca <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b77ca:	b510      	push	{r4, lr}
}
   b77cc:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b77ce:	4604      	mov	r4, r0
}
   b77d0:	f7fc fc65 	bl	b409e <_ZdlPvj>
   b77d4:	4620      	mov	r0, r4
   b77d6:	bd10      	pop	{r4, pc}

000b77d8 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b77d8:	b510      	push	{r4, lr}
}
   b77da:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b77dc:	4604      	mov	r4, r0
}
   b77de:	f7fc fc5e 	bl	b409e <_ZdlPvj>
   b77e2:	4620      	mov	r0, r4
   b77e4:	bd10      	pop	{r4, pc}
	...

000b77e8 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b77e8:	b510      	push	{r4, lr}
   b77ea:	4b05      	ldr	r3, [pc, #20]	; (b7800 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b77ec:	4604      	mov	r4, r0
   b77ee:	f840 3b1c 	str.w	r3, [r0], #28
   b77f2:	f006 f993 	bl	bdb1c <_ZN6StringD1Ev>
   b77f6:	1d20      	adds	r0, r4, #4
   b77f8:	f006 f990 	bl	bdb1c <_ZN6StringD1Ev>
}
   b77fc:	4620      	mov	r0, r4
   b77fe:	bd10      	pop	{r4, pc}
   b7800:	000c06fc 	.word	0x000c06fc

000b7804 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b7804:	b510      	push	{r4, lr}
   b7806:	4604      	mov	r4, r0
}
   b7808:	f7ff ffee 	bl	b77e8 <_ZN22LocalTimePosixTimezoneD1Ev>
   b780c:	4620      	mov	r0, r4
   b780e:	2158      	movs	r1, #88	; 0x58
   b7810:	f7fc fc45 	bl	b409e <_ZdlPvj>
   b7814:	4620      	mov	r0, r4
   b7816:	bd10      	pop	{r4, pc}

000b7818 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b7818:	b510      	push	{r4, lr}
   b781a:	4b04      	ldr	r3, [pc, #16]	; (b782c <_ZN9LocalTimeD1Ev+0x14>)
   b781c:	4604      	mov	r4, r0
   b781e:	f840 3b04 	str.w	r3, [r0], #4
   b7822:	f7ff ffe1 	bl	b77e8 <_ZN22LocalTimePosixTimezoneD1Ev>
   b7826:	4620      	mov	r0, r4
   b7828:	bd10      	pop	{r4, pc}
   b782a:	bf00      	nop
   b782c:	000c06cc 	.word	0x000c06cc

000b7830 <_ZN9LocalTimeD0Ev>:
   b7830:	b510      	push	{r4, lr}
   b7832:	4604      	mov	r4, r0
   b7834:	f7ff fff0 	bl	b7818 <_ZN9LocalTimeD1Ev>
   b7838:	4620      	mov	r0, r4
   b783a:	2160      	movs	r1, #96	; 0x60
   b783c:	f7fc fc2f 	bl	b409e <_ZdlPvj>
   b7840:	4620      	mov	r0, r4
   b7842:	bd10      	pop	{r4, pc}

000b7844 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b7844:	f020 0302 	bic.w	r3, r0, #2
   b7848:	2b01      	cmp	r3, #1
   b784a:	d003      	beq.n	b7854 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b784c:	1f43      	subs	r3, r0, #5
   b784e:	4258      	negs	r0, r3
   b7850:	4158      	adcs	r0, r3
   b7852:	4770      	bx	lr
   b7854:	4618      	mov	r0, r3
   b7856:	4770      	bx	lr

000b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b7858:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b785c:	7103      	strb	r3, [r0, #4]
   b785e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b7862:	7143      	strb	r3, [r0, #5]
   b7864:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b7868:	7183      	strb	r3, [r0, #6]
   b786a:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b786e:	71c3      	strb	r3, [r0, #7]
   b7870:	4770      	bx	lr

000b7872 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b7872:	b538      	push	{r3, r4, r5, lr}
   b7874:	4604      	mov	r4, r0
   b7876:	460d      	mov	r5, r1
   b7878:	3004      	adds	r0, #4
   b787a:	3104      	adds	r1, #4
   b787c:	f006 f9d5 	bl	bdc2a <_ZN6StringaSERKS_>
   b7880:	f105 0114 	add.w	r1, r5, #20
   b7884:	f104 0014 	add.w	r0, r4, #20
   b7888:	f7ff ffe6 	bl	b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b788c:	f105 011c 	add.w	r1, r5, #28
   b7890:	f104 001c 	add.w	r0, r4, #28
   b7894:	f006 f9c9 	bl	bdc2a <_ZN6StringaSERKS_>
   b7898:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b789c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b78a0:	f7ff ffda 	bl	b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b78a4:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b78a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b78ac:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b78b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b78b4:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b78b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b78bc:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b78c0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b78c4:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b78c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b78cc:	f7ff ffc4 	bl	b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b78d0:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b78d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b78d8:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b78dc:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b78e0:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b78e4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b78e8:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b78ec:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b78f0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b78f4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b78f8:	f7ff ffae 	bl	b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b78fc:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b7900:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b7904:	bd38      	pop	{r3, r4, r5, pc}

000b7906 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7906:	680b      	ldr	r3, [r1, #0]
   b7908:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b790a:	684b      	ldr	r3, [r1, #4]
   b790c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b790e:	b113      	cbz	r3, b7916 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7910:	685a      	ldr	r2, [r3, #4]
   b7912:	3201      	adds	r2, #1
   b7914:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7916:	4770      	bx	lr

000b7918 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b7918:	4a02      	ldr	r2, [pc, #8]	; (b7924 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b791a:	6002      	str	r2, [r0, #0]
   b791c:	684a      	ldr	r2, [r1, #4]
   b791e:	6042      	str	r2, [r0, #4]
   b7920:	4770      	bx	lr
   b7922:	bf00      	nop
   b7924:	000c06dc 	.word	0x000c06dc

000b7928 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b7928:	4a02      	ldr	r2, [pc, #8]	; (b7934 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b792a:	6002      	str	r2, [r0, #0]
   b792c:	2200      	movs	r2, #0
   b792e:	6042      	str	r2, [r0, #4]
}
   b7930:	4770      	bx	lr
   b7932:	bf00      	nop
   b7934:	000c06dc 	.word	0x000c06dc

000b7938 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b7938:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b793a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b793c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b793e:	8083      	strh	r3, [r0, #4]
   b7940:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b7942:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b7944:	ab05      	add	r3, sp, #20
   b7946:	9300      	str	r3, [sp, #0]
   b7948:	4913      	ldr	r1, [pc, #76]	; (b7998 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b794a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b794c:	ab04      	add	r3, sp, #16
   b794e:	aa03      	add	r2, sp, #12
   b7950:	4628      	mov	r0, r5
   b7952:	f003 fd99 	bl	bb488 <sscanf>
   b7956:	2803      	cmp	r0, #3
   b7958:	d107      	bne.n	b796a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b795a:	9b03      	ldr	r3, [sp, #12]
   b795c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b795e:	9b04      	ldr	r3, [sp, #16]
   b7960:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b7962:	9b05      	ldr	r3, [sp, #20]
   b7964:	71a3      	strb	r3, [r4, #6]
}
   b7966:	b007      	add	sp, #28
   b7968:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b796a:	490c      	ldr	r1, [pc, #48]	; (b799c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b796c:	ab04      	add	r3, sp, #16
   b796e:	aa03      	add	r2, sp, #12
   b7970:	4628      	mov	r0, r5
   b7972:	f003 fd89 	bl	bb488 <sscanf>
   b7976:	2802      	cmp	r0, #2
   b7978:	d104      	bne.n	b7984 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b797a:	9b03      	ldr	r3, [sp, #12]
   b797c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b797e:	9b04      	ldr	r3, [sp, #16]
   b7980:	7163      	strb	r3, [r4, #5]
   b7982:	e7f0      	b.n	b7966 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b7984:	4906      	ldr	r1, [pc, #24]	; (b79a0 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b7986:	aa03      	add	r2, sp, #12
   b7988:	4628      	mov	r0, r5
   b798a:	f003 fd7d 	bl	bb488 <sscanf>
   b798e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b7990:	bf04      	itt	eq
   b7992:	9b03      	ldreq	r3, [sp, #12]
   b7994:	7123      	strbeq	r3, [r4, #4]
}
   b7996:	e7e6      	b.n	b7966 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b7998:	000c0690 	.word	0x000c0690
   b799c:	000c0693 	.word	0x000c0693
   b79a0:	000c04a3 	.word	0x000c04a3

000b79a4 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b79a4:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b79a8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b79ac:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b79b0:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b79b2:	bfb8      	it	lt
   b79b4:	4808      	ldrlt	r0, [pc, #32]	; (b79d8 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b79b6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b79ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b79be:	bfbd      	ittte	lt
   b79c0:	fb00 3002 	mlalt	r0, r0, r2, r3
   b79c4:	1840      	addlt	r0, r0, r1
   b79c6:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b79c8:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b79cc:	bfa4      	itt	ge
   b79ce:	fb00 3002 	mlage	r0, r0, r2, r3
   b79d2:	1840      	addge	r0, r0, r1
}
   b79d4:	4770      	bx	lr
   b79d6:	bf00      	nop
   b79d8:	fffff1f0 	.word	0xfffff1f0

000b79dc <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b79dc:	b508      	push	{r3, lr}
   b79de:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b79e2:	b14b      	cbz	r3, b79f8 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b79e4:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b79e8:	b943      	cbnz	r3, b79fc <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b79ea:	302c      	adds	r0, #44	; 0x2c
   b79ec:	f7ff ffda 	bl	b79a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   b79f0:	fab0 f080 	clz	r0, r0
   b79f4:	0940      	lsrs	r0, r0, #5
   b79f6:	bd08      	pop	{r3, pc}
   b79f8:	2001      	movs	r0, #1
   b79fa:	e7fc      	b.n	b79f6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b79fc:	2000      	movs	r0, #0
   b79fe:	e7fa      	b.n	b79f6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b7a00 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b7a00:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b7a04:	b943      	cbnz	r3, b7a18 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b7a06:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7a0a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b7a0c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b7a10:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b7a12:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b7a16:	600b      	str	r3, [r1, #0]
}
   b7a18:	4770      	bx	lr

000b7a1a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b7a1a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b7a1e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b7a20:	b9b3      	cbnz	r3, b7a50 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b7a22:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b7a26:	688c      	ldr	r4, [r1, #8]
   b7a28:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b7a2a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b7a2e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b7a30:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b7a34:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b7a36:	bfb5      	itete	lt
   b7a38:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b7a3a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b7a3c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b7a3e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b7a40:	bfb5      	itete	lt
   b7a42:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b7a46:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b7a4a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b7a4c:	189b      	addge	r3, r3, r2
   b7a4e:	600b      	str	r3, [r1, #0]
}
   b7a50:	bd30      	pop	{r4, r5, pc}
	...

000b7a54 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b7a54:	b508      	push	{r3, lr}
   b7a56:	4a05      	ldr	r2, [pc, #20]	; (b7a6c <_ZN15LocalTimeChangeC1Ev+0x18>)
   b7a58:	6002      	str	r2, [r0, #0]
   b7a5a:	2200      	movs	r2, #0
   b7a5c:	4603      	mov	r3, r0
   b7a5e:	6042      	str	r2, [r0, #4]
   b7a60:	3008      	adds	r0, #8
   b7a62:	f7ff ff61 	bl	b7928 <_ZN12LocalTimeHMSC1Ev>
}
   b7a66:	4618      	mov	r0, r3
   b7a68:	bd08      	pop	{r3, pc}
   b7a6a:	bf00      	nop
   b7a6c:	000c06ec 	.word	0x000c06ec

000b7a70 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b7a70:	2300      	movs	r3, #0
   b7a72:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b7a74:	8183      	strh	r3, [r0, #12]
   b7a76:	7383      	strb	r3, [r0, #14]
}
   b7a78:	4770      	bx	lr
	...

000b7a7c <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b7a7c:	b530      	push	{r4, r5, lr}
   b7a7e:	4604      	mov	r4, r0
   b7a80:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b7a82:	460d      	mov	r5, r1
   b7a84:	b111      	cbz	r1, b7a8c <_ZN15LocalTimeChange5parseEPKc+0x10>
   b7a86:	780b      	ldrb	r3, [r1, #0]
   b7a88:	2b4d      	cmp	r3, #77	; 0x4d
   b7a8a:	d005      	beq.n	b7a98 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b7a8c:	4620      	mov	r0, r4
}
   b7a8e:	b007      	add	sp, #28
   b7a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b7a94:	f7ff bfec 	b.w	b7a70 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b7a98:	ab05      	add	r3, sp, #20
   b7a9a:	9300      	str	r3, [sp, #0]
   b7a9c:	4911      	ldr	r1, [pc, #68]	; (b7ae4 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b7a9e:	ab04      	add	r3, sp, #16
   b7aa0:	aa03      	add	r2, sp, #12
   b7aa2:	4628      	mov	r0, r5
   b7aa4:	f003 fcf0 	bl	bb488 <sscanf>
   b7aa8:	2803      	cmp	r0, #3
   b7aaa:	d116      	bne.n	b7ada <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b7aac:	9b03      	ldr	r3, [sp, #12]
   b7aae:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b7ab0:	9b04      	ldr	r3, [sp, #16]
   b7ab2:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b7ab4:	9b05      	ldr	r3, [sp, #20]
   b7ab6:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b7ab8:	212f      	movs	r1, #47	; 0x2f
   b7aba:	4628      	mov	r0, r5
   b7abc:	f007 fc86 	bl	bf3cc <strchr>
        if (cp) {
   b7ac0:	b140      	cbz	r0, b7ad4 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b7ac2:	1c41      	adds	r1, r0, #1
   b7ac4:	f104 0008 	add.w	r0, r4, #8
   b7ac8:	f7ff ff36 	bl	b7938 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b7acc:	2301      	movs	r3, #1
   b7ace:	71e3      	strb	r3, [r4, #7]
}
   b7ad0:	b007      	add	sp, #28
   b7ad2:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b7ad4:	81a0      	strh	r0, [r4, #12]
   b7ad6:	73a0      	strb	r0, [r4, #14]
}
   b7ad8:	e7f8      	b.n	b7acc <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b7ada:	4620      	mov	r0, r4
   b7adc:	f7ff ffc8 	bl	b7a70 <_ZN15LocalTimeChange5clearEv>
   b7ae0:	e7f6      	b.n	b7ad0 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b7ae2:	bf00      	nop
   b7ae4:	000c06ab 	.word	0x000c06ab

000b7ae8 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b7ae8:	4b10      	ldr	r3, [pc, #64]	; (b7b2c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b7aea:	4911      	ldr	r1, [pc, #68]	; (b7b30 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7aec:	b510      	push	{r4, lr}
   b7aee:	4604      	mov	r4, r0
   b7af0:	f840 3b04 	str.w	r3, [r0], #4
   b7af4:	f006 f85d 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7af8:	f104 0014 	add.w	r0, r4, #20
   b7afc:	f7ff ff14 	bl	b7928 <_ZN12LocalTimeHMSC1Ev>
   b7b00:	490b      	ldr	r1, [pc, #44]	; (b7b30 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b7b02:	f104 001c 	add.w	r0, r4, #28
   b7b06:	f006 f854 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7b0a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7b0e:	f7ff ff0b 	bl	b7928 <_ZN12LocalTimeHMSC1Ev>
   b7b12:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7b16:	f7ff ff9d 	bl	b7a54 <_ZN15LocalTimeChangeC1Ev>
   b7b1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7b1e:	f7ff ff99 	bl	b7a54 <_ZN15LocalTimeChangeC1Ev>
   b7b22:	2300      	movs	r3, #0
   b7b24:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b7b28:	4620      	mov	r0, r4
   b7b2a:	bd10      	pop	{r4, pc}
   b7b2c:	000c06fc 	.word	0x000c06fc
   b7b30:	000c0f58 	.word	0x000c0f58

000b7b34 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b7b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b38:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b7b3a:	4608      	mov	r0, r1
   b7b3c:	f007 fc70 	bl	bf420 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b7b40:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b7b42:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b7b44:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b7b46:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b7b4a:	493f      	ldr	r1, [pc, #252]	; (b7c48 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b7b4c:	9801      	ldr	r0, [sp, #4]
   b7b4e:	aa01      	add	r2, sp, #4
   b7b50:	f007 fcee 	bl	bf530 <strtok_r>
   b7b54:	4601      	mov	r1, r0
   b7b56:	2800      	cmp	r0, #0
   b7b58:	d062      	beq.n	b7c20 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b7b5a:	2d01      	cmp	r5, #1
   b7b5c:	f105 0301 	add.w	r3, r5, #1
   b7b60:	d053      	beq.n	b7c0a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b7b62:	2d02      	cmp	r5, #2
   b7b64:	d056      	beq.n	b7c14 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b7b66:	2d00      	cmp	r5, #0
   b7b68:	d146      	bne.n	b7bf8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b7b6a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b7b6c:	f892 9000 	ldrb.w	r9, [r2]
   b7b70:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b7b74:	4615      	mov	r5, r2
   b7b76:	4617      	mov	r7, r2
   b7b78:	f102 0201 	add.w	r2, r2, #1
   b7b7c:	d8f6      	bhi.n	b7b6c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b7b7e:	2200      	movs	r2, #0
   b7b80:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b7b82:	f104 001c 	add.w	r0, r4, #28
   b7b86:	f006 f872 	bl	bdc6e <_ZN6StringaSEPKc>
                valid = true;
   b7b8a:	2201      	movs	r2, #1
                *cp = save2;
   b7b8c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b7b90:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b7b94:	782a      	ldrb	r2, [r5, #0]
   b7b96:	b36a      	cbz	r2, b7bf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b7b98:	f897 a000 	ldrb.w	sl, [r7]
   b7b9c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b7ba0:	2a3f      	cmp	r2, #63	; 0x3f
   b7ba2:	46b9      	mov	r9, r7
   b7ba4:	46bb      	mov	fp, r7
   b7ba6:	f107 0701 	add.w	r7, r7, #1
   b7baa:	d9f5      	bls.n	b7b98 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b7bac:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b7bae:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b7bb2:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b7bb6:	4629      	mov	r1, r5
   b7bb8:	4638      	mov	r0, r7
   b7bba:	f7ff febd 	bl	b7938 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b7bbe:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b7bc2:	f1ba 0f00 	cmp.w	sl, #0
   b7bc6:	d015      	beq.n	b7bf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b7bc8:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b7bca:	f81b ab01 	ldrb.w	sl, [fp], #1
   b7bce:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b7bd2:	d8f9      	bhi.n	b7bc8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b7bd4:	2200      	movs	r2, #0
   b7bd6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b7bd8:	4649      	mov	r1, r9
   b7bda:	1d20      	adds	r0, r4, #4
   b7bdc:	f006 f847 	bl	bdc6e <_ZN6StringaSEPKc>
                        *cp = save2;
   b7be0:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b7be4:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b7be8:	f1ba 0f00 	cmp.w	sl, #0
   b7bec:	d006      	beq.n	b7bfc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b7bee:	4629      	mov	r1, r5
   b7bf0:	f7ff fea2 	bl	b7938 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b7bf4:	2501      	movs	r5, #1
   b7bf6:	e7a8      	b.n	b7b4a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b7bf8:	461d      	mov	r5, r3
   b7bfa:	e7a6      	b.n	b7b4a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b7bfc:	4639      	mov	r1, r7
   b7bfe:	f7ff fe2b 	bl	b7858 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b7c02:	7e23      	ldrb	r3, [r4, #24]
   b7c04:	3b01      	subs	r3, #1
   b7c06:	7623      	strb	r3, [r4, #24]
   b7c08:	e7f4      	b.n	b7bf4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b7c0a:	4640      	mov	r0, r8
   b7c0c:	f7ff ff36 	bl	b7a7c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7c10:	2502      	movs	r5, #2
   b7c12:	e79a      	b.n	b7b4a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b7c14:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7c18:	f7ff ff30 	bl	b7a7c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b7c1c:	2503      	movs	r5, #3
   b7c1e:	e794      	b.n	b7b4a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b7c20:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b7c24:	b143      	cbz	r3, b7c38 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b7c26:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b7c2a:	b92a      	cbnz	r2, b7c38 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b7c2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7c30:	f7ff ff1e 	bl	b7a70 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b7c34:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b7c38:	4630      	mov	r0, r6
   b7c3a:	f003 fc0d 	bl	bb458 <free>

    return valid;
}
   b7c3e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b7c42:	b003      	add	sp, #12
   b7c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c48:	000c06b5 	.word	0x000c06b5

000b7c4c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b7c4c:	b538      	push	{r3, r4, r5, lr}
   b7c4e:	4b13      	ldr	r3, [pc, #76]	; (b7c9c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b7c50:	4604      	mov	r4, r0
   b7c52:	460d      	mov	r5, r1
   b7c54:	f840 3b04 	str.w	r3, [r0], #4
   b7c58:	4911      	ldr	r1, [pc, #68]	; (b7ca0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7c5a:	f005 ffaa 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7c5e:	f104 0014 	add.w	r0, r4, #20
   b7c62:	f7ff fe61 	bl	b7928 <_ZN12LocalTimeHMSC1Ev>
   b7c66:	490e      	ldr	r1, [pc, #56]	; (b7ca0 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b7c68:	f104 001c 	add.w	r0, r4, #28
   b7c6c:	f005 ffa1 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7c70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b7c74:	f7ff fe58 	bl	b7928 <_ZN12LocalTimeHMSC1Ev>
   b7c78:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7c7c:	f7ff feea 	bl	b7a54 <_ZN15LocalTimeChangeC1Ev>
   b7c80:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7c84:	f7ff fee6 	bl	b7a54 <_ZN15LocalTimeChangeC1Ev>
   b7c88:	2300      	movs	r3, #0
   b7c8a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b7c8e:	4629      	mov	r1, r5
   b7c90:	4620      	mov	r0, r4
   b7c92:	f7ff ff4f 	bl	b7b34 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b7c96:	4620      	mov	r0, r4
   b7c98:	bd38      	pop	{r3, r4, r5, pc}
   b7c9a:	bf00      	nop
   b7c9c:	000c06fc 	.word	0x000c06fc
   b7ca0:	000c0f58 	.word	0x000c0f58

000b7ca4 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b7ca4:	b510      	push	{r4, lr}
   b7ca6:	4604      	mov	r4, r0
   b7ca8:	b088      	sub	sp, #32
   b7caa:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b7cac:	3068      	adds	r0, #104	; 0x68
   b7cae:	a901      	add	r1, sp, #4
   b7cb0:	f007 fa9e 	bl	bf1f0 <asctime_r>
    int len = strlen(ascstr);
   b7cb4:	a801      	add	r0, sp, #4
   b7cb6:	f007 fbd0 	bl	bf45a <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7cba:	ab08      	add	r3, sp, #32
   b7cbc:	4418      	add	r0, r3
   b7cbe:	2300      	movs	r3, #0
   b7cc0:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b7cc4:	a901      	add	r1, sp, #4
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	f005 ff73 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7ccc:	4620      	mov	r0, r4
   b7cce:	b008      	add	sp, #32
   b7cd0:	bd10      	pop	{r4, pc}
	...

000b7cd4 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b7cd4:	b538      	push	{r3, r4, r5, lr}
   b7cd6:	4604      	mov	r4, r0
    if (config.isZ()) {
   b7cd8:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b7cda:	460d      	mov	r5, r1
    if (config.isZ()) {
   b7cdc:	f7ff fe7e 	bl	b79dc <_ZNK22LocalTimePosixTimezone3isZEv>
   b7ce0:	b128      	cbz	r0, b7cee <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b7ce2:	4909      	ldr	r1, [pc, #36]	; (b7d08 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	f005 ff64 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b7cea:	4620      	mov	r0, r4
   b7cec:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b7cee:	6828      	ldr	r0, [r5, #0]
   b7cf0:	f7ff fda8 	bl	b7844 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7cf4:	b128      	cbz	r0, b7d02 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b7cf6:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b7cfa:	4620      	mov	r0, r4
   b7cfc:	f005 ffa4 	bl	bdc48 <_ZN6StringC1ERKS_>
   b7d00:	e7f3      	b.n	b7cea <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b7d02:	f105 0120 	add.w	r1, r5, #32
   b7d06:	e7f8      	b.n	b7cfa <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b7d08:	000c06b7 	.word	0x000c06b7

000b7d0c <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b7d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d10:	4680      	mov	r8, r0
   b7d12:	b0a8      	sub	sp, #160	; 0xa0
   b7d14:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b7d16:	4615      	mov	r5, r2
   b7d18:	b12a      	cbz	r2, b7d26 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b7d1a:	4b47      	ldr	r3, [pc, #284]	; (b7e38 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b7d1c:	4610      	mov	r0, r2
   b7d1e:	6819      	ldr	r1, [r3, #0]
   b7d20:	f007 fb6b 	bl	bf3fa <strcmp>
   b7d24:	b938      	cbnz	r0, b7d36 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b7d26:	4621      	mov	r1, r4
   b7d28:	4640      	mov	r0, r8
   b7d2a:	f7ff ffbb 	bl	b7ca4 <_ZN16LocalTimeConvert7timeStrEv>
}
   b7d2e:	4640      	mov	r0, r8
   b7d30:	b028      	add	sp, #160	; 0xa0
   b7d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7d36:	4629      	mov	r1, r5
   b7d38:	223f      	movs	r2, #63	; 0x3f
   b7d3a:	a818      	add	r0, sp, #96	; 0x60
   b7d3c:	f007 fba9 	bl	bf492 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7d40:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7d42:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7d44:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7d48:	f007 fb87 	bl	bf45a <strlen>
    String zoneNameStr = zoneName();
   b7d4c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7d4e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b7d50:	a803      	add	r0, sp, #12
   b7d52:	f7ff ffbf 	bl	b7cd4 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b7d56:	1d20      	adds	r0, r4, #4
   b7d58:	f7ff fe40 	bl	b79dc <_ZNK22LocalTimePosixTimezone3isZEv>
   b7d5c:	b348      	cbz	r0, b7db2 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b7d5e:	4937      	ldr	r1, [pc, #220]	; (b7e3c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b7d60:	a807      	add	r0, sp, #28
   b7d62:	f007 fb54 	bl	bf40e <strcpy>
   b7d66:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b7d68:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b7d6a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b7d6e:	45ba      	cmp	sl, r7
   b7d70:	d94c      	bls.n	b7e0c <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b7d72:	7833      	ldrb	r3, [r6, #0]
   b7d74:	2b25      	cmp	r3, #37	; 0x25
   b7d76:	f107 0901 	add.w	r9, r7, #1
   b7d7a:	d117      	bne.n	b7dac <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b7d7c:	7873      	ldrb	r3, [r6, #1]
   b7d7e:	2b7a      	cmp	r3, #122	; 0x7a
   b7d80:	d136      	bne.n	b7df0 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b7d82:	a807      	add	r0, sp, #28
   b7d84:	f007 fb69 	bl	bf45a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7d88:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b7d8a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7d8c:	1838      	adds	r0, r7, r0
   b7d8e:	ebaa 0207 	sub.w	r2, sl, r7
   b7d92:	1cb1      	adds	r1, r6, #2
   b7d94:	4418      	add	r0, r3
   b7d96:	f007 fa7d 	bl	bf294 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b7d9a:	462a      	mov	r2, r5
   b7d9c:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b7d9e:	4630      	mov	r0, r6
   b7da0:	f007 fa78 	bl	bf294 <memcpy>
            len = strlen(format_str);
   b7da4:	a818      	add	r0, sp, #96	; 0x60
   b7da6:	f007 fb58 	bl	bf45a <strlen>
   b7daa:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b7dac:	3601      	adds	r6, #1
   b7dae:	464f      	mov	r7, r9
   b7db0:	e7db      	b.n	b7d6a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7db2:	6820      	ldr	r0, [r4, #0]
   b7db4:	f7ff fd46 	bl	b7844 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b7db8:	b1b8      	cbz	r0, b7dea <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b7dba:	f104 0018 	add.w	r0, r4, #24
   b7dbe:	f7ff fdf1 	bl	b79a4 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b7dc2:	223c      	movs	r2, #60	; 0x3c
   b7dc4:	fb90 f3f2 	sdiv	r3, r0, r2
   b7dc8:	2b00      	cmp	r3, #0
   b7dca:	bfb8      	it	lt
   b7dcc:	425b      	neglt	r3, r3
   b7dce:	fbb3 f1f2 	udiv	r1, r3, r2
   b7dd2:	fb02 3311 	mls	r3, r2, r1, r3
   b7dd6:	9300      	str	r3, [sp, #0]
   b7dd8:	4a19      	ldr	r2, [pc, #100]	; (b7e40 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b7dda:	4b1a      	ldr	r3, [pc, #104]	; (b7e44 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b7ddc:	fb90 f3f3 	sdiv	r3, r0, r3
   b7de0:	2110      	movs	r1, #16
   b7de2:	a807      	add	r0, sp, #28
   b7de4:	f003 fb58 	bl	bb498 <snprintf>
   b7de8:	e7bd      	b.n	b7d66 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b7dea:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b7dee:	e7e6      	b.n	b7dbe <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b7df0:	2b5a      	cmp	r3, #90	; 0x5a
   b7df2:	d1db      	bne.n	b7dac <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b7df4:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7df6:	ab18      	add	r3, sp, #96	; 0x60
   b7df8:	1978      	adds	r0, r7, r5
   b7dfa:	ebaa 0207 	sub.w	r2, sl, r7
   b7dfe:	1cb1      	adds	r1, r6, #2
   b7e00:	4418      	add	r0, r3
   b7e02:	f007 fa47 	bl	bf294 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b7e06:	9903      	ldr	r1, [sp, #12]
   b7e08:	462a      	mov	r2, r5
   b7e0a:	e7c8      	b.n	b7d9e <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b7e0c:	2100      	movs	r1, #0
   b7e0e:	222e      	movs	r2, #46	; 0x2e
   b7e10:	a80c      	add	r0, sp, #48	; 0x30
   b7e12:	910b      	str	r1, [sp, #44]	; 0x2c
   b7e14:	f007 fa66 	bl	bf2e4 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b7e18:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b7e1c:	aa18      	add	r2, sp, #96	; 0x60
   b7e1e:	2132      	movs	r1, #50	; 0x32
   b7e20:	a80b      	add	r0, sp, #44	; 0x2c
   b7e22:	f003 fb71 	bl	bb508 <strftime>
    return String(buf);    
   b7e26:	a90b      	add	r1, sp, #44	; 0x2c
   b7e28:	4640      	mov	r0, r8
   b7e2a:	f005 fec2 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b7e2e:	a803      	add	r0, sp, #12
   b7e30:	f005 fe74 	bl	bdb1c <_ZN6StringD1Ev>
   b7e34:	e77b      	b.n	b7d2e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b7e36:	bf00      	nop
   b7e38:	2003de7c 	.word	0x2003de7c
   b7e3c:	000c06b7 	.word	0x000c06b7
   b7e40:	000c06b9 	.word	0x000c06b9
   b7e44:	fffff1f0 	.word	0xfffff1f0

000b7e48 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b7e48:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b7e4a:	4d09      	ldr	r5, [pc, #36]	; (b7e70 <_ZN9LocalTime8instanceEv+0x28>)
   b7e4c:	682b      	ldr	r3, [r5, #0]
   b7e4e:	b963      	cbnz	r3, b7e6a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b7e50:	2060      	movs	r0, #96	; 0x60
   b7e52:	f7fc f920 	bl	b4096 <_Znwj>
   b7e56:	4604      	mov	r4, r0
   b7e58:	b130      	cbz	r0, b7e68 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b7e5a:	4b06      	ldr	r3, [pc, #24]	; (b7e74 <_ZN9LocalTime8instanceEv+0x2c>)
   b7e5c:	f840 3b04 	str.w	r3, [r0], #4
   b7e60:	f7ff fe42 	bl	b7ae8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b7e64:	2364      	movs	r3, #100	; 0x64
   b7e66:	65e3      	str	r3, [r4, #92]	; 0x5c
   b7e68:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b7e6a:	6828      	ldr	r0, [r5, #0]
   b7e6c:	bd38      	pop	{r3, r4, r5, pc}
   b7e6e:	bf00      	nop
   b7e70:	2003e440 	.word	0x2003e440
   b7e74:	000c06cc 	.word	0x000c06cc

000b7e78 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b7e78:	f003 bb5e 	b.w	bb538 <mktime>

000b7e7c <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b7e7c:	3901      	subs	r1, #1
   b7e7e:	290b      	cmp	r1, #11
   b7e80:	d815      	bhi.n	b7eae <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b7e82:	e8df f001 	tbb	[pc, r1]
   b7e86:	0816      	.short	0x0816
   b7e88:	06160616 	.word	0x06160616
   b7e8c:	16061616 	.word	0x16061616
   b7e90:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b7e92:	201e      	movs	r0, #30
   b7e94:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b7e96:	0783      	lsls	r3, r0, #30
   b7e98:	d10d      	bne.n	b7eb6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b7e9a:	2364      	movs	r3, #100	; 0x64
   b7e9c:	fb90 f2f3 	sdiv	r2, r0, r3
   b7ea0:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b7ea4:	2800      	cmp	r0, #0
   b7ea6:	bf0c      	ite	eq
   b7ea8:	201c      	moveq	r0, #28
   b7eaa:	201d      	movne	r0, #29
   b7eac:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b7eae:	2000      	movs	r0, #0
   b7eb0:	4770      	bx	lr
            return 31;
   b7eb2:	201f      	movs	r0, #31
   b7eb4:	4770      	bx	lr
                return 28;
   b7eb6:	201c      	movs	r0, #28
}
   b7eb8:	4770      	bx	lr

000b7eba <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b7ebc:	2301      	movs	r3, #1
   b7ebe:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b7ec0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b7ec4:	3b01      	subs	r3, #1
   b7ec6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7ec8:	2300      	movs	r3, #0
   b7eca:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b7ece:	4606      	mov	r6, r0
   b7ed0:	460c      	mov	r4, r1
   b7ed2:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b7ed4:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b7ed6:	4620      	mov	r0, r4
   b7ed8:	f7ff ffce 	bl	b7e78 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b7edc:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b7ee0:	69a2      	ldr	r2, [r4, #24]
   b7ee2:	429a      	cmp	r2, r3
   b7ee4:	d003      	beq.n	b7eee <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b7ee6:	68e3      	ldr	r3, [r4, #12]
   b7ee8:	3301      	adds	r3, #1
   b7eea:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b7eec:	e7f3      	b.n	b7ed6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b7eee:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b7ef2:	2d01      	cmp	r5, #1
   b7ef4:	d013      	beq.n	b7f1e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7ef6:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7ef8:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b7efa:	3d01      	subs	r5, #1
   b7efc:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b7f00:	441d      	add	r5, r3
   b7f02:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b7f04:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b7f08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b7f0c:	f7ff ffb6 	bl	b7e7c <_ZN9LocalTime14lastDayOfMonthEii>
   b7f10:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b7f12:	bfc4      	itt	gt
   b7f14:	3d07      	subgt	r5, #7
   b7f16:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b7f18:	4620      	mov	r0, r4
   b7f1a:	f7ff ffad 	bl	b7e78 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b7f1e:	4621      	mov	r1, r4
   b7f20:	f106 0008 	add.w	r0, r6, #8
   b7f24:	f7ff fd6c 	bl	b7a00 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b7f28:	4638      	mov	r0, r7
   b7f2a:	f7ff fd76 	bl	b7a1a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b7f2e:	4620      	mov	r0, r4
}
   b7f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b7f34:	f003 bb00 	b.w	bb538 <mktime>

000b7f38 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b7f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b7f3a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b7f3e:	b085      	sub	sp, #20
   b7f40:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b7f42:	b92b      	cbnz	r3, b7f50 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b7f44:	f7ff ff80 	bl	b7e48 <_ZN9LocalTime8instanceEv>
   b7f48:	1d01      	adds	r1, r0, #4
   b7f4a:	1d20      	adds	r0, r4, #4
   b7f4c:	f7ff fc91 	bl	b7872 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b7f50:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b7f54:	2b00      	cmp	r3, #0
   b7f56:	d065      	beq.n	b8024 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b7f58:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7f5c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b7f60:	4639      	mov	r1, r7
   b7f62:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b7f64:	463e      	mov	r6, r7
   b7f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7f6a:	f003 fad5 	bl	bb518 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b7f6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7f70:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b7f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7f76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7f7a:	6833      	ldr	r3, [r6, #0]
   b7f7c:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b7f7e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b7f82:	a802      	add	r0, sp, #8
   b7f84:	f7ff fcc8 	bl	b7918 <_ZN12LocalTimeHMSC1ERKS_>
   b7f88:	aa02      	add	r2, sp, #8
   b7f8a:	4639      	mov	r1, r7
   b7f8c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b7f90:	f7ff ff93 	bl	b7eba <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b7f94:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7f98:	f104 0118 	add.w	r1, r4, #24
   b7f9c:	a802      	add	r0, sp, #8
   b7f9e:	f7ff fcbb 	bl	b7918 <_ZN12LocalTimeHMSC1ERKS_>
   b7fa2:	aa02      	add	r2, sp, #8
   b7fa4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b7fa8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b7fac:	f7ff ff85 	bl	b7eba <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b7fb0:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b7fb4:	4286      	cmp	r6, r0
   b7fb6:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b7fba:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b7fbe:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b7fc2:	da23      	bge.n	b800c <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b7fc4:	42b2      	cmp	r2, r6
   b7fc6:	eb73 0505 	sbcs.w	r5, r3, r5
   b7fca:	da19      	bge.n	b8000 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b7fcc:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b7fce:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b7fd0:	6820      	ldr	r0, [r4, #0]
   b7fd2:	f7ff fc37 	bl	b7844 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7fd6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b7fda:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b7fde:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b7fe0:	bb10      	cbnz	r0, b8028 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b7fe2:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b7fe6:	f7ff fcdd 	bl	b79a4 <_ZNK12LocalTimeHMS9toSecondsEv>
   b7fea:	1a2d      	subs	r5, r5, r0
   b7fec:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b7ff0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b7ff4:	9901      	ldr	r1, [sp, #4]
   b7ff6:	a802      	add	r0, sp, #8
   b7ff8:	f003 fa8e 	bl	bb518 <localtime_r>
}
   b7ffc:	b005      	add	sp, #20
   b7ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b8000:	4282      	cmp	r2, r0
   b8002:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b8004:	bfb4      	ite	lt
   b8006:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b8008:	2302      	movge	r3, #2
   b800a:	e7e0      	b.n	b7fce <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b800c:	4282      	cmp	r2, r0
   b800e:	eb73 0101 	sbcs.w	r1, r3, r1
   b8012:	da01      	bge.n	b8018 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b8014:	2303      	movs	r3, #3
   b8016:	e7da      	b.n	b7fce <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b8018:	42b2      	cmp	r2, r6
   b801a:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b801c:	bfb4      	ite	lt
   b801e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b8020:	2305      	movge	r3, #5
   b8022:	e7d4      	b.n	b7fce <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b8024:	2306      	movs	r3, #6
   b8026:	e7d2      	b.n	b7fce <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b8028:	f104 0018 	add.w	r0, r4, #24
   b802c:	e7db      	b.n	b7fe6 <_ZN16LocalTimeConvert7convertEv+0xae>

000b802e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b802e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8030:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8032:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8034:	4668      	mov	r0, sp
   b8036:	f7ff fc66 	bl	b7906 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b803a:	466a      	mov	r2, sp
   b803c:	4629      	mov	r1, r5
   b803e:	4620      	mov	r0, r4
   b8040:	f004 f99c 	bl	bc37c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8044:	a801      	add	r0, sp, #4
   b8046:	f7fe f88d 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b804a:	4620      	mov	r0, r4
   b804c:	b003      	add	sp, #12
   b804e:	bd30      	pop	{r4, r5, pc}

000b8050 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8050:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8052:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8054:	4604      	mov	r4, r0
   b8056:	4668      	mov	r0, sp
   b8058:	f7ff fc55 	bl	b7906 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b805c:	466a      	mov	r2, sp
   b805e:	4629      	mov	r1, r5
   b8060:	4620      	mov	r0, r4
   b8062:	f004 f967 	bl	bc334 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8066:	a801      	add	r0, sp, #4
   b8068:	f7fe f87c 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b806c:	4620      	mov	r0, r4
   b806e:	b003      	add	sp, #12
   b8070:	bd30      	pop	{r4, r5, pc}

000b8072 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8072:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8074:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8076:	4604      	mov	r4, r0
   b8078:	4668      	mov	r0, sp
   b807a:	f7ff fc44 	bl	b7906 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b807e:	466a      	mov	r2, sp
   b8080:	4629      	mov	r1, r5
   b8082:	4620      	mov	r0, r4
   b8084:	f004 f8ff 	bl	bc286 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8088:	a801      	add	r0, sp, #4
   b808a:	f7fe f86b 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b808e:	4620      	mov	r0, r4
   b8090:	b003      	add	sp, #12
   b8092:	bd30      	pop	{r4, r5, pc}

000b8094 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b8094:	4770      	bx	lr

000b8096 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b8096:	b510      	push	{r4, lr}
}
   b8098:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b809a:	4604      	mov	r4, r0
}
   b809c:	f7fb ffff 	bl	b409e <_ZdlPvj>
   b80a0:	4620      	mov	r0, r4
   b80a2:	bd10      	pop	{r4, pc}

000b80a4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b80a4:	6803      	ldr	r3, [r0, #0]
   b80a6:	b2c9      	uxtb	r1, r1
   b80a8:	689b      	ldr	r3, [r3, #8]
   b80aa:	4718      	bx	r3

000b80ac <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b80ac:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b80ae:	4d03      	ldr	r5, [pc, #12]	; (b80bc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b80b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b80b4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b80b8:	bd30      	pop	{r4, r5, pc}
   b80ba:	bf00      	nop
   b80bc:	000c070c 	.word	0x000c070c

000b80c0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b80c0:	6840      	ldr	r0, [r0, #4]
   b80c2:	f003 bf51 	b.w	bbf68 <_ZN7TwoWire5beginEv>

000b80c6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b80c6:	b510      	push	{r4, lr}
   b80c8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b80ca:	6800      	ldr	r0, [r0, #0]
   b80cc:	f003 ffa7 	bl	bc01e <_ZN7TwoWire6unlockEv>
   b80d0:	4620      	mov	r0, r4
   b80d2:	bd10      	pop	{r4, pc}

000b80d4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b80d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b80d8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b80da:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b80dc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b80de:	460d      	mov	r5, r1
   b80e0:	4616      	mov	r6, r2
   b80e2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b80e4:	f003 ff92 	bl	bc00c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b80e8:	b1a7      	cbz	r7, b8114 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b80ea:	68e1      	ldr	r1, [r4, #12]
   b80ec:	6860      	ldr	r0, [r4, #4]
   b80ee:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b80f2:	f003 ff6c 	bl	bbfce <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b80f6:	0a29      	lsrs	r1, r5, #8
   b80f8:	6860      	ldr	r0, [r4, #4]
   b80fa:	f7ff ffd3 	bl	b80a4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b80fe:	4629      	mov	r1, r5
   b8100:	6860      	ldr	r0, [r4, #4]
   b8102:	f7ff ffcf 	bl	b80a4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b8106:	6860      	ldr	r0, [r4, #4]
   b8108:	2100      	movs	r1, #0
   b810a:	f003 ff7b 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b810e:	b148      	cbz	r0, b8124 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b8110:	2400      	movs	r4, #0
   b8112:	e000      	b.n	b8116 <_ZN6MB85RC8readDataEjPhj+0x42>
   b8114:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8116:	a801      	add	r0, sp, #4
   b8118:	f7ff ffd5 	bl	b80c6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b811c:	4620      	mov	r0, r4
   b811e:	b003      	add	sp, #12
   b8120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b8124:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b8126:	7b21      	ldrb	r1, [r4, #12]
   b8128:	6860      	ldr	r0, [r4, #4]
   b812a:	46b8      	mov	r8, r7
   b812c:	bf28      	it	cs
   b812e:	f04f 0820 	movcs.w	r8, #32
   b8132:	2301      	movs	r3, #1
   b8134:	4642      	mov	r2, r8
   b8136:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b813a:	f003 ff32 	bl	bbfa2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b813e:	f006 fb0d 	bl	be75c <_Z19__fetch_global_Wirev>
   b8142:	6803      	ldr	r3, [r0, #0]
   b8144:	691b      	ldr	r3, [r3, #16]
   b8146:	4798      	blx	r3
   b8148:	4540      	cmp	r0, r8
   b814a:	dbe1      	blt.n	b8110 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b814c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b8150:	f006 fb04 	bl	be75c <_Z19__fetch_global_Wirev>
   b8154:	6803      	ldr	r3, [r0, #0]
   b8156:	695b      	ldr	r3, [r3, #20]
   b8158:	4798      	blx	r3
   b815a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b815e:	454e      	cmp	r6, r9
   b8160:	d1f6      	bne.n	b8150 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b8162:	4445      	add	r5, r8
				dataLen--;
   b8164:	eba7 0708 	sub.w	r7, r7, r8
   b8168:	e7be      	b.n	b80e8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b816a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b816a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b816e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b8170:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8172:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b8174:	460e      	mov	r6, r1
   b8176:	4690      	mov	r8, r2
   b8178:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b817a:	f003 ff47 	bl	bc00c <_ZN7TwoWire4lockEv>
   b817e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b8182:	f1b9 0f00 	cmp.w	r9, #0
   b8186:	d02a      	beq.n	b81de <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b8188:	b34d      	cbz	r5, b81de <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b818a:	68e1      	ldr	r1, [r4, #12]
   b818c:	6860      	ldr	r0, [r4, #4]
   b818e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b8192:	f003 ff1c 	bl	bbfce <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b8196:	0a31      	lsrs	r1, r6, #8
   b8198:	6860      	ldr	r0, [r4, #4]
   b819a:	f7ff ff83 	bl	b80a4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b819e:	6860      	ldr	r0, [r4, #4]
   b81a0:	4631      	mov	r1, r6
   b81a2:	f7ff ff7f 	bl	b80a4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b81a6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b81aa:	4647      	mov	r7, r8
   b81ac:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b81b0:	6860      	ldr	r0, [r4, #4]
   b81b2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b81b6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b81b8:	3d01      	subs	r5, #1
				wire.write(*data);
   b81ba:	689b      	ldr	r3, [r3, #8]
   b81bc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b81be:	4555      	cmp	r5, sl
   b81c0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b81c4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b81c6:	d001      	beq.n	b81cc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b81c8:	2d00      	cmp	r5, #0
   b81ca:	d1f1      	bne.n	b81b0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b81cc:	6860      	ldr	r0, [r4, #4]
   b81ce:	2101      	movs	r1, #1
   b81d0:	f003 ff18 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b81d4:	2800      	cmp	r0, #0
   b81d6:	d0d7      	beq.n	b8188 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b81d8:	f04f 0900 	mov.w	r9, #0
   b81dc:	e7d1      	b.n	b8182 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b81de:	a801      	add	r0, sp, #4
   b81e0:	f7ff ff71 	bl	b80c6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b81e4:	4648      	mov	r0, r9
   b81e6:	b003      	add	sp, #12
   b81e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b81ec <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b81ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81f0:	b08b      	sub	sp, #44	; 0x2c
   b81f2:	460e      	mov	r6, r1
   b81f4:	4615      	mov	r5, r2
   b81f6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b81f8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b81fa:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b81fc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b81fe:	f003 ff05 	bl	bc00c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b8202:	42ae      	cmp	r6, r5
   b8204:	d229      	bcs.n	b825a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b8206:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b8208:	4425      	add	r5, r4
			while(numBytes > 0) {
   b820a:	b18c      	cbz	r4, b8230 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b820c:	2c1e      	cmp	r4, #30
   b820e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b8210:	f8d8 3000 	ldr.w	r3, [r8]
   b8214:	bf28      	it	cs
   b8216:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b8218:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b821a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b821e:	aa02      	add	r2, sp, #8
   b8220:	463b      	mov	r3, r7
   b8222:	4631      	mov	r1, r6
   b8224:	4640      	mov	r0, r8
				framAddrTo -= count;
   b8226:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b8228:	47c8      	blx	r9
				if (!result) {
   b822a:	b948      	cbnz	r0, b8240 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b822c:	2400      	movs	r4, #0
   b822e:	e000      	b.n	b8232 <_ZN6MB85RC8moveDataEjjj+0x46>
   b8230:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b8232:	a801      	add	r0, sp, #4
   b8234:	f7ff ff47 	bl	b80c6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b8238:	4620      	mov	r0, r4
   b823a:	b00b      	add	sp, #44	; 0x2c
   b823c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b8240:	f8d8 3000 	ldr.w	r3, [r8]
   b8244:	aa02      	add	r2, sp, #8
   b8246:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b824a:	4629      	mov	r1, r5
   b824c:	463b      	mov	r3, r7
   b824e:	4640      	mov	r0, r8
   b8250:	47c8      	blx	r9
				if (!result) {
   b8252:	2800      	cmp	r0, #0
   b8254:	d0ea      	beq.n	b822c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b8256:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b8258:	e7d7      	b.n	b820a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b825a:	d9e9      	bls.n	b8230 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b825c:	2c00      	cmp	r4, #0
   b825e:	d0e7      	beq.n	b8230 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b8260:	f8d8 3000 	ldr.w	r3, [r8]
   b8264:	2c1e      	cmp	r4, #30
   b8266:	4627      	mov	r7, r4
   b8268:	bf28      	it	cs
   b826a:	271e      	movcs	r7, #30
   b826c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b8270:	aa02      	add	r2, sp, #8
   b8272:	463b      	mov	r3, r7
   b8274:	4631      	mov	r1, r6
   b8276:	4640      	mov	r0, r8
   b8278:	47c8      	blx	r9
				if (!result) {
   b827a:	2800      	cmp	r0, #0
   b827c:	d0d6      	beq.n	b822c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b827e:	f8d8 3000 	ldr.w	r3, [r8]
   b8282:	aa02      	add	r2, sp, #8
   b8284:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b8288:	4629      	mov	r1, r5
   b828a:	463b      	mov	r3, r7
   b828c:	4640      	mov	r0, r8
   b828e:	47c8      	blx	r9
				if (!result) {
   b8290:	2800      	cmp	r0, #0
   b8292:	d0cb      	beq.n	b822c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b8294:	443e      	add	r6, r7
				framAddrTo += count;
   b8296:	443d      	add	r5, r7
				numBytes -= count;
   b8298:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b829a:	e7df      	b.n	b825c <_ZN6MB85RC8moveDataEjjj+0x70>

000b829c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b829c:	6803      	ldr	r3, [r0, #0]
   b829e:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b82a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b82a4:	2101      	movs	r1, #1
   b82a6:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b82aa:	4770      	bx	lr

000b82ac <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82ac:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b82ae:	6842      	ldr	r2, [r0, #4]
   b82b0:	4603      	mov	r3, r0
   b82b2:	1054      	asrs	r4, r2, #1
   b82b4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b82b8:	07d2      	lsls	r2, r2, #31
   b82ba:	bf48      	it	mi
   b82bc:	590a      	ldrmi	r2, [r1, r4]
   b82be:	681b      	ldr	r3, [r3, #0]
      }
   b82c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b82c4:	bf48      	it	mi
   b82c6:	58d3      	ldrmi	r3, [r2, r3]
   b82c8:	4718      	bx	r3

000b82ca <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b82ca:	2a01      	cmp	r2, #1
   b82cc:	d102      	bne.n	b82d4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82ce:	6001      	str	r1, [r0, #0]
      }
   b82d0:	2000      	movs	r0, #0
   b82d2:	4770      	bx	lr
	  switch (__op)
   b82d4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b82d6:	bf04      	itt	eq
   b82d8:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b82dc:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b82e0:	e7f6      	b.n	b82d0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b82e2 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b82e2:	2a01      	cmp	r2, #1
   b82e4:	d102      	bne.n	b82ec <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b82e6:	6001      	str	r1, [r0, #0]
      }
   b82e8:	2000      	movs	r0, #0
   b82ea:	4770      	bx	lr
	  switch (__op)
   b82ec:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b82ee:	bf04      	itt	eq
   b82f0:	680b      	ldreq	r3, [r1, #0]
   b82f2:	6003      	streq	r3, [r0, #0]
	      break;
   b82f4:	e7f8      	b.n	b82e8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b82f6 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b82f6:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b82f8:	f002 bcd2 	b.w	baca0 <os_mutex_recursive_lock>

000b82fc <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b82fc:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b8300:	4601      	mov	r1, r0
    if (stateHandler) {
   b8302:	b11b      	cbz	r3, b830c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8304:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b8308:	30c0      	adds	r0, #192	; 0xc0
   b830a:	4718      	bx	r3
}
   b830c:	4770      	bx	lr
	...

000b8310 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b8310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b8312:	4d12      	ldr	r5, [pc, #72]	; (b835c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8314:	4608      	mov	r0, r1
        eventData = "";
   b8316:	2a00      	cmp	r2, #0
   b8318:	bf18      	it	ne
   b831a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b831c:	460e      	mov	r6, r1
   b831e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b8320:	f007 f89b 	bl	bf45a <strlen>
   b8324:	2840      	cmp	r0, #64	; 0x40
   b8326:	d816      	bhi.n	b8356 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b8328:	4628      	mov	r0, r5
   b832a:	f007 f896 	bl	bf45a <strlen>
   b832e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b8332:	d810      	bhi.n	b8356 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b8334:	3043      	adds	r0, #67	; 0x43
   b8336:	f7fb feb0 	bl	b409a <_Znaj>
    if (event) {
   b833a:	4604      	mov	r4, r0
   b833c:	b148      	cbz	r0, b8352 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b833e:	4631      	mov	r1, r6
        event->flags = flags;
   b8340:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b8344:	f007 f863 	bl	bf40e <strcpy>
        strcpy(event->eventData, eventData);
   b8348:	4629      	mov	r1, r5
   b834a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b834e:	f007 f85e 	bl	bf40e <strcpy>
}
   b8352:	4620      	mov	r0, r4
   b8354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b8356:	2400      	movs	r4, #0
   b8358:	e7fb      	b.n	b8352 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b835a:	bf00      	nop
   b835c:	000c0f58 	.word	0x000c0f58

000b8360 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8360:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8362:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b8364:	460a      	mov	r2, r1
   b8366:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b8368:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b836a:	1d01      	adds	r1, r0, #4
   b836c:	a808      	add	r0, sp, #32
   b836e:	f002 f881 	bl	ba474 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8372:	9808      	ldr	r0, [sp, #32]
   b8374:	2100      	movs	r1, #0
   b8376:	f007 f985 	bl	bf684 <open>
   b837a:	4605      	mov	r5, r0
   b837c:	a808      	add	r0, sp, #32
   b837e:	f005 fbcd 	bl	bdb1c <_ZN6StringD1Ev>
    if (fd) {
   b8382:	2d00      	cmp	r5, #0
   b8384:	d060      	beq.n	b8448 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b8386:	a908      	add	r1, sp, #32
   b8388:	4628      	mov	r0, r5
   b838a:	f007 f969 	bl	bf660 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b838e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8390:	492e      	ldr	r1, [pc, #184]	; (b844c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b8392:	482f      	ldr	r0, [pc, #188]	; (b8450 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8394:	4632      	mov	r2, r6
   b8396:	f7fe faa5 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b839a:	2200      	movs	r2, #0
   b839c:	4611      	mov	r1, r2
   b839e:	4628      	mov	r0, r5
   b83a0:	f007 f966 	bl	bf670 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b83a4:	2208      	movs	r2, #8
   b83a6:	a906      	add	r1, sp, #24
   b83a8:	4628      	mov	r0, r5
   b83aa:	f007 f97f 	bl	bf6ac <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b83ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b83b0:	2f4a      	cmp	r7, #74	; 0x4a
   b83b2:	dd39      	ble.n	b8428 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b83b4:	4b27      	ldr	r3, [pc, #156]	; (b8454 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b83b6:	9a06      	ldr	r2, [sp, #24]
   b83b8:	429a      	cmp	r2, r3
   b83ba:	d135      	bne.n	b8428 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b83bc:	4b26      	ldr	r3, [pc, #152]	; (b8458 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b83be:	9a07      	ldr	r2, [sp, #28]
   b83c0:	429a      	cmp	r2, r3
   b83c2:	d131      	bne.n	b8428 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b83c4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b83c8:	4610      	mov	r0, r2
   b83ca:	9205      	str	r2, [sp, #20]
   b83cc:	f7fb fe65 	bl	b409a <_Znaj>
            if (result) {
   b83d0:	4604      	mov	r4, r0
   b83d2:	b1c0      	cbz	r0, b8406 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b83d4:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b83d6:	4601      	mov	r1, r0
   b83d8:	9a05      	ldr	r2, [sp, #20]
   b83da:	4628      	mov	r0, r5
   b83dc:	f007 f966 	bl	bf6ac <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b83e0:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b83e4:	b9ab      	cbnz	r3, b8412 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b83e6:	1c63      	adds	r3, r4, #1
   b83e8:	4618      	mov	r0, r3
   b83ea:	9305      	str	r3, [sp, #20]
   b83ec:	f007 f835 	bl	bf45a <strlen>
   b83f0:	283f      	cmp	r0, #63	; 0x3f
   b83f2:	9b05      	ldr	r3, [sp, #20]
   b83f4:	d80d      	bhi.n	b8412 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b83f6:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b83fa:	9200      	str	r2, [sp, #0]
   b83fc:	4917      	ldr	r1, [pc, #92]	; (b845c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b83fe:	4814      	ldr	r0, [pc, #80]	; (b8450 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8400:	4632      	mov	r2, r6
   b8402:	f7fe fa6f 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b8406:	4628      	mov	r0, r5
   b8408:	f007 f922 	bl	bf650 <close>
}
   b840c:	4620      	mov	r0, r4
   b840e:	b01f      	add	sp, #124	; 0x7c
   b8410:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b8412:	4913      	ldr	r1, [pc, #76]	; (b8460 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b8414:	480e      	ldr	r0, [pc, #56]	; (b8450 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8416:	4632      	mov	r2, r6
   b8418:	f7fe fa64 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b841c:	2143      	movs	r1, #67	; 0x43
   b841e:	4620      	mov	r0, r4
   b8420:	f7fb fe3d 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b8424:	2400      	movs	r4, #0
   b8426:	e7ee      	b.n	b8406 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b8428:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b842c:	9302      	str	r3, [sp, #8]
   b842e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8432:	9301      	str	r3, [sp, #4]
   b8434:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8438:	9300      	str	r3, [sp, #0]
   b843a:	490a      	ldr	r1, [pc, #40]	; (b8464 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b843c:	9b06      	ldr	r3, [sp, #24]
   b843e:	4804      	ldr	r0, [pc, #16]	; (b8450 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b8440:	4632      	mov	r2, r6
   b8442:	f7fe fa4f 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
   b8446:	e7ed      	b.n	b8424 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b8448:	462c      	mov	r4, r5
    return result;
   b844a:	e7df      	b.n	b840c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b844c:	000c0720 	.word	0x000c0720
   b8450:	2003e444 	.word	0x2003e444
   b8454:	31b67663 	.word	0x31b67663
   b8458:	00410801 	.word	0x00410801
   b845c:	000c0734 	.word	0x000c0734
   b8460:	000c0756 	.word	0x000c0756
   b8464:	000c0784 	.word	0x000c0784

000b8468 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b8468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b846c:	4680      	mov	r8, r0
   b846e:	4b28      	ldr	r3, [pc, #160]	; (b8510 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b8470:	f848 3b04 	str.w	r3, [r8], #4
   b8474:	4604      	mov	r4, r0
   b8476:	4640      	mov	r0, r8
   b8478:	f001 ff14 	bl	ba2a4 <_ZN14SequentialFileC1Ev>
   b847c:	2202      	movs	r2, #2
   b847e:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b8480:	2500      	movs	r5, #0
   b8482:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b8486:	2308      	movs	r3, #8
   b8488:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b848a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b848e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b8492:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b8496:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b849a:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b849c:	2020      	movs	r0, #32
   b849e:	f7fb fdfa 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b84a2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b84a4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b84a6:	3e01      	subs	r6, #1
   b84a8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b84aa:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b84ae:	4607      	mov	r7, r0
   b84b0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b84b4:	f7fb fdef 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b84b8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b84bc:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b84c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b84c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b84c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84cc:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   b84d0:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   b84d4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   b84d8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   b84dc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   b84e0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   b84e4:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   b84e8:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   b84ec:	4909      	ldr	r1, [pc, #36]	; (b8514 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   b84ee:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   b84f2:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   b84f6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   b84fa:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   b84fe:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   b8502:	4640      	mov	r0, r8
   b8504:	f001 ff14 	bl	ba330 <_ZN14SequentialFile11withDirPathEPKc>
}
   b8508:	4620      	mov	r0, r4
   b850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b850e:	bf00      	nop
   b8510:	000c09a0 	.word	0x000c09a0
   b8514:	000c07c9 	.word	0x000c07c9

000b8518 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   b8518:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b851a:	4d06      	ldr	r5, [pc, #24]	; (b8534 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   b851c:	682b      	ldr	r3, [r5, #0]
   b851e:	b93b      	cbnz	r3, b8530 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   b8520:	20d0      	movs	r0, #208	; 0xd0
   b8522:	f7fb fdb8 	bl	b4096 <_Znwj>
   b8526:	4604      	mov	r4, r0
   b8528:	b108      	cbz	r0, b852e <_ZN17PublishQueuePosix8instanceEv+0x16>
   b852a:	f7ff ff9d 	bl	b8468 <_ZN17PublishQueuePosixC1Ev>
   b852e:	602c      	str	r4, [r5, #0]
}
   b8530:	6828      	ldr	r0, [r5, #0]
   b8532:	bd38      	pop	{r3, r4, r5, pc}
   b8534:	2003e448 	.word	0x2003e448

000b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   b8538:	6942      	ldr	r2, [r0, #20]
   b853a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b853c:	1a9b      	subs	r3, r3, r2
   b853e:	109b      	asrs	r3, r3, #2
   b8540:	1e5a      	subs	r2, r3, #1
   b8542:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   b8546:	1a5b      	subs	r3, r3, r1
   b8548:	109b      	asrs	r3, r3, #2
   b854a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   b854e:	6902      	ldr	r2, [r0, #16]
   b8550:	6880      	ldr	r0, [r0, #8]
   b8552:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   b8554:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   b8558:	4770      	bx	lr

000b855a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   b855a:	b538      	push	{r3, r4, r5, lr}
   b855c:	4605      	mov	r5, r0
   b855e:	f7ff feca 	bl	b82f6 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   b8562:	f105 0078 	add.w	r0, r5, #120	; 0x78
   b8566:	f7ff ffe7 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   b856a:	4604      	mov	r4, r0
   b856c:	b950      	cbnz	r0, b8584 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   b856e:	1d28      	adds	r0, r5, #4
   b8570:	f002 f9d4 	bl	ba91c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   b8574:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   b8578:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   b857a:	b11b      	cbz	r3, b8584 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   b857c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   b8580:	b903      	cbnz	r3, b8584 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   b8582:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   b8584:	6f68      	ldr	r0, [r5, #116]	; 0x74
   b8586:	f002 fb93 	bl	bacb0 <os_mutex_recursive_unlock>
}
   b858a:	4620      	mov	r0, r4
   b858c:	bd38      	pop	{r3, r4, r5, pc}

000b858e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   b858e:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   b8590:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   b8592:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   b8594:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   b8596:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   b8598:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   b859a:	d002      	beq.n	b85a2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   b859c:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   b859e:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   b85a0:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b85a2:	68c0      	ldr	r0, [r0, #12]
   b85a4:	f44f 7100 	mov.w	r1, #512	; 0x200
   b85a8:	f7fb fd79 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   b85ac:	6963      	ldr	r3, [r4, #20]
   b85ae:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b85b0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   b85b2:	685b      	ldr	r3, [r3, #4]
   b85b4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b85b6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b85ba:	6122      	str	r2, [r4, #16]
   b85bc:	e7ef      	b.n	b859e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000b85c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   b85c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85c4:	b085      	sub	sp, #20
   b85c6:	4604      	mov	r4, r0
   b85c8:	f7ff fe95 	bl	b82f6 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   b85cc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8674 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   b85d0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b8678 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b85d4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b867c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   b85d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   b85dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b85e0:	4293      	cmp	r3, r2
   b85e2:	d105      	bne.n	b85f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   b85e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b85e6:	b005      	add	sp, #20
   b85e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85ec:	f002 bb60 	b.w	bacb0 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   b85f0:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   b85f4:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   b85f8:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   b85fa:	f7ff ffc8 	bl	b858e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   b85fe:	4640      	mov	r0, r8
   b8600:	f002 f930 	bl	ba864 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b8604:	2300      	movs	r3, #0
   b8606:	4602      	mov	r2, r0
   b8608:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   b860a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   b860c:	4668      	mov	r0, sp
   b860e:	f001 ff31 	bl	ba474 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b8612:	9800      	ldr	r0, [sp, #0]
   b8614:	f240 2102 	movw	r1, #514	; 0x202
   b8618:	f007 f834 	bl	bf684 <open>
   b861c:	4605      	mov	r5, r0
   b861e:	4668      	mov	r0, sp
   b8620:	f005 fa7c 	bl	bdb1c <_ZN6StringD1Ev>
            if (fd) {
   b8624:	b1c5      	cbz	r5, b8658 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   b8626:	2208      	movs	r2, #8
   b8628:	4669      	mov	r1, sp
   b862a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   b862c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   b8630:	f007 f84e 	bl	bf6d0 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   b8634:	f107 0042 	add.w	r0, r7, #66	; 0x42
   b8638:	f006 ff0f 	bl	bf45a <strlen>
   b863c:	4639      	mov	r1, r7
   b863e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   b8642:	4628      	mov	r0, r5
   b8644:	f007 f844 	bl	bf6d0 <write>
                close(fd);
   b8648:	4628      	mov	r0, r5
   b864a:	f007 f801 	bl	bf650 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   b864e:	4808      	ldr	r0, [pc, #32]	; (b8670 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   b8650:	4632      	mov	r2, r6
   b8652:	4659      	mov	r1, fp
   b8654:	f7fe f946 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   b8658:	4631      	mov	r1, r6
   b865a:	4640      	mov	r0, r8
   b865c:	f002 f944 	bl	ba8e8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   b8660:	2f00      	cmp	r7, #0
   b8662:	d0b9      	beq.n	b85d8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   b8664:	2143      	movs	r1, #67	; 0x43
   b8666:	4638      	mov	r0, r7
   b8668:	f7fb fd19 	bl	b409e <_ZdlPvj>
   b866c:	e7b2      	b.n	b85d4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   b866e:	bf00      	nop
   b8670:	2003e444 	.word	0x2003e444
   b8674:	31b67663 	.word	0x31b67663
   b8678:	00410801 	.word	0x00410801
   b867c:	000c07d7 	.word	0x000c07d7

000b8680 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   b8680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8684:	4604      	mov	r4, r0
   b8686:	f7ff fe36 	bl	b82f6 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   b868a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b868e:	f7ff ff53 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8692:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8694:	4298      	cmp	r0, r3
   b8696:	d902      	bls.n	b869e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   b8698:	4620      	mov	r0, r4
   b869a:	f7ff ff91 	bl	b85c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   b869e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b86e4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   b86a2:	4f0f      	ldr	r7, [pc, #60]	; (b86e0 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   b86a4:	1d26      	adds	r6, r4, #4
   b86a6:	4630      	mov	r0, r6
   b86a8:	f002 f938 	bl	ba91c <_ZNK14SequentialFile11getQueueLenEv>
   b86ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b86ae:	4298      	cmp	r0, r3
   b86b0:	dc04      	bgt.n	b86bc <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   b86b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   b86b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b86b8:	f002 bafa 	b.w	bacb0 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   b86bc:	2101      	movs	r1, #1
   b86be:	4630      	mov	r0, r6
   b86c0:	f002 f8dc 	bl	ba87c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   b86c4:	4605      	mov	r5, r0
   b86c6:	2800      	cmp	r0, #0
   b86c8:	d0ed      	beq.n	b86a6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   b86ca:	4601      	mov	r1, r0
   b86cc:	2200      	movs	r2, #0
   b86ce:	4630      	mov	r0, r6
   b86d0:	f001 ff0c 	bl	ba4ec <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   b86d4:	462a      	mov	r2, r5
   b86d6:	4641      	mov	r1, r8
   b86d8:	4638      	mov	r0, r7
   b86da:	f7fb fcff 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
   b86de:	e7e2      	b.n	b86a6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   b86e0:	2003e444 	.word	0x2003e444
   b86e4:	000c07f4 	.word	0x000c07f4

000b86e8 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   b86e8:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   b86ea:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b86ee:	430b      	orrs	r3, r1
   b86f0:	d005      	beq.n	b86fe <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   b86f2:	3840      	subs	r0, #64	; 0x40
   b86f4:	ea50 0301 	orrs.w	r3, r0, r1
   b86f8:	d10b      	bne.n	b8712 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   b86fa:	2a09      	cmp	r2, #9
   b86fc:	d109      	bne.n	b8712 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   b86fe:	4905      	ldr	r1, [pc, #20]	; (b8714 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   b8700:	4805      	ldr	r0, [pc, #20]	; (b8718 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   b8702:	f7fe f8ef 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   b8706:	f7ff ff07 	bl	b8518 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   b870a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   b870e:	f7ff bf57 	b.w	b85c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   b8712:	bd08      	pop	{r3, pc}
   b8714:	000c0807 	.word	0x000c0807
   b8718:	2003e444 	.word	0x2003e444

000b871c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   b871c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   b871e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   b8720:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   b8722:	b183      	cbz	r3, b8746 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   b8724:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b8726:	6945      	ldr	r5, [r0, #20]
   b8728:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   b872a:	42ae      	cmp	r6, r5
   b872c:	d906      	bls.n	b873c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   b872e:	f855 0b04 	ldr.w	r0, [r5], #4
   b8732:	f44f 7100 	mov.w	r1, #512	; 0x200
   b8736:	f7fb fcb2 	bl	b409e <_ZdlPvj>
   b873a:	e7f6      	b.n	b872a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   b873c:	6861      	ldr	r1, [r4, #4]
   b873e:	6820      	ldr	r0, [r4, #0]
   b8740:	0089      	lsls	r1, r1, #2
   b8742:	f7fb fcac 	bl	b409e <_ZdlPvj>
    }
   b8746:	4620      	mov	r0, r4
   b8748:	bd70      	pop	{r4, r5, r6, pc}
	...

000b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b874c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b874e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   b8752:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   b8754:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8756:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   b8758:	b90a      	cbnz	r2, b875e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   b875a:	07d9      	lsls	r1, r3, #31
   b875c:	d505      	bpl.n	b876a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b875e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   b8762:	4b0a      	ldr	r3, [pc, #40]	; (b878c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   b8764:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8766:	4b0a      	ldr	r3, [pc, #40]	; (b8790 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   b8768:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b876a:	4621      	mov	r1, r4
   b876c:	4668      	mov	r0, sp
   b876e:	f7fe ff3e 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8772:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8774:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8776:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8778:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b877a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b877c:	4668      	mov	r0, sp
   b877e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8780:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8782:	9203      	str	r2, [sp, #12]
   b8784:	f7fc fa06 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	}
   b8788:	b004      	add	sp, #16
   b878a:	bd10      	pop	{r4, pc}
   b878c:	000b82ad 	.word	0x000b82ad
   b8790:	000b82cb 	.word	0x000b82cb

000b8794 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   b8794:	b570      	push	{r4, r5, r6, lr}
   b8796:	b086      	sub	sp, #24
   b8798:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b879a:	f002 fdb5 	bl	bb308 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   b879e:	b948      	cbnz	r0, b87b4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   b87a0:	4b43      	ldr	r3, [pc, #268]	; (b88b0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   b87a2:	a902      	add	r1, sp, #8
   b87a4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   b87a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b87ac:	f7ff ffce 	bl	b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b87b0:	b006      	add	sp, #24
   b87b2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   b87b4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   b87b8:	b11d      	cbz	r5, b87c2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   b87ba:	2301      	movs	r3, #1
   b87bc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   b87c0:	e7f6      	b.n	b87b0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   b87c2:	f002 faad 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   b87c6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b87ca:	1ac0      	subs	r0, r0, r3
   b87cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b87d0:	4298      	cmp	r0, r3
   b87d2:	d3ed      	bcc.n	b87b0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   b87d4:	1d26      	adds	r6, r4, #4
   b87d6:	4629      	mov	r1, r5
   b87d8:	4630      	mov	r0, r6
   b87da:	f002 f84f 	bl	ba87c <_ZN14SequentialFile16getFileFromQueueEb>
   b87de:	4601      	mov	r1, r0
   b87e0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   b87e4:	2800      	cmp	r0, #0
   b87e6:	d052      	beq.n	b888e <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   b87e8:	4620      	mov	r0, r4
   b87ea:	f7ff fdb9 	bl	b8360 <_ZN17PublishQueuePosix13readQueueFileEi>
   b87ee:	4605      	mov	r5, r0
   b87f0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   b87f4:	2800      	cmp	r0, #0
   b87f6:	d035      	beq.n	b8864 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   b87f8:	f002 fa92 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   b87fc:	ae02      	add	r6, sp, #8
   b87fe:	2500      	movs	r5, #0
   b8800:	4b2c      	ldr	r3, [pc, #176]	; (b88b4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   b8802:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   b8806:	4631      	mov	r1, r6
   b8808:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b880c:	9302      	str	r3, [sp, #8]
   b880e:	9503      	str	r5, [sp, #12]
   b8810:	f7ff ff9c 	bl	b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8814:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   b8818:	f103 0242 	add.w	r2, r3, #66	; 0x42
   b881c:	9200      	str	r2, [sp, #0]
   b881e:	4926      	ldr	r1, [pc, #152]	; (b88b8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   b8820:	4a26      	ldr	r2, [pc, #152]	; (b88bc <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   b8822:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8826:	42a8      	cmp	r0, r5
   b8828:	bf08      	it	eq
   b882a:	460a      	moveq	r2, r1
   b882c:	3301      	adds	r3, #1
   b882e:	4924      	ldr	r1, [pc, #144]	; (b88c0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   b8830:	4824      	ldr	r0, [pc, #144]	; (b88c4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   b8832:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   b8836:	f7fe f855 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   b883a:	f7fe fe1b 	bl	b7474 <_ZN19BackgroundPublishRK8instanceEv>
   b883e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   b8842:	4b21      	ldr	r3, [pc, #132]	; (b88c8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   b8844:	9305      	str	r3, [sp, #20]
   b8846:	e9cd 6500 	strd	r6, r5, [sp]
   b884a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   b884c:	4b1f      	ldr	r3, [pc, #124]	; (b88cc <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b884e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8850:	9304      	str	r3, [sp, #16]
   b8852:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8856:	3242      	adds	r2, #66	; 0x42
   b8858:	f7fe ff58 	bl	b770c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   b885c:	4630      	mov	r0, r6
   b885e:	f7fc f999 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b8862:	e7a5      	b.n	b87b0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   b8864:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   b8868:	4919      	ldr	r1, [pc, #100]	; (b88d0 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   b886a:	4816      	ldr	r0, [pc, #88]	; (b88c4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   b886c:	f7fb fc36 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   b8870:	2101      	movs	r1, #1
   b8872:	4630      	mov	r0, r6
   b8874:	f002 f802 	bl	ba87c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   b8878:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   b887c:	462a      	mov	r2, r5
   b887e:	4630      	mov	r0, r6
   b8880:	f001 fe34 	bl	ba4ec <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   b8884:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b8888:	2b00      	cmp	r3, #0
   b888a:	d1b5      	bne.n	b87f8 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   b888c:	e795      	b.n	b87ba <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   b888e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   b8892:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b8896:	429a      	cmp	r2, r3
   b8898:	d007      	beq.n	b88aa <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   b889a:	681b      	ldr	r3, [r3, #0]
   b889c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   b88a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b88a4:	f7ff fe73 	bl	b858e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   b88a8:	e7ec      	b.n	b8884 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   b88aa:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   b88ae:	e784      	b.n	b87ba <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   b88b0:	000b88d5 	.word	0x000b88d5
   b88b4:	000b8c55 	.word	0x000b8c55
   b88b8:	000c0836 	.word	0x000c0836
   b88bc:	000c0d28 	.word	0x000c0d28
   b88c0:	000c0857 	.word	0x000c0857
   b88c4:	2003e444 	.word	0x2003e444
   b88c8:	000b829d 	.word	0x000b829d
   b88cc:	000b82e3 	.word	0x000b82e3
   b88d0:	000c083a 	.word	0x000c083a

000b88d4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   b88d4:	b513      	push	{r0, r1, r4, lr}
   b88d6:	4604      	mov	r4, r0
   b88d8:	f002 fd16 	bl	bb308 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b88dc:	b190      	cbz	r0, b8904 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   b88de:	f002 fa1f 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   b88e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b88e6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   b88ea:	4b0d      	ldr	r3, [pc, #52]	; (b8920 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   b88ec:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   b88f0:	9300      	str	r3, [sp, #0]
   b88f2:	4669      	mov	r1, sp
   b88f4:	2300      	movs	r3, #0
   b88f6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b88fa:	9301      	str	r3, [sp, #4]
   b88fc:	f7ff ff26 	bl	b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b8900:	b002      	add	sp, #8
   b8902:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   b8904:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   b8908:	b11b      	cbz	r3, b8912 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   b890a:	2301      	movs	r3, #1
   b890c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   b8910:	e7f6      	b.n	b8900 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   b8912:	4620      	mov	r0, r4
   b8914:	f7ff fe21 	bl	b855a <_ZN17PublishQueuePosix12getNumEventsEv>
   b8918:	2800      	cmp	r0, #0
   b891a:	d0f6      	beq.n	b890a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   b891c:	e7f0      	b.n	b8900 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   b891e:	bf00      	nop
   b8920:	000b8795 	.word	0x000b8795

000b8924 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   b8924:	b570      	push	{r4, r5, r6, lr}
   b8926:	4605      	mov	r5, r0
   b8928:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   b892a:	2000      	movs	r0, #0
   b892c:	f002 fc8a 	bl	bb244 <system_thread_get_state>
   b8930:	2801      	cmp	r0, #1
   b8932:	d005      	beq.n	b8940 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   b8934:	493e      	ldr	r1, [pc, #248]	; (b8a30 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   b8936:	483f      	ldr	r0, [pc, #252]	; (b8a34 <_ZN17PublishQueuePosix5setupEv+0x110>)
   b8938:	f7fd ffc6 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
}
   b893c:	b018      	add	sp, #96	; 0x60
   b893e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   b8940:	f105 0074 	add.w	r0, r5, #116	; 0x74
   b8944:	f002 f99c 	bl	bac80 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8948:	4b3b      	ldr	r3, [pc, #236]	; (b8a38 <_ZN17PublishQueuePosix5setupEv+0x114>)
   b894a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b894c:	4b3b      	ldr	r3, [pc, #236]	; (b8a3c <_ZN17PublishQueuePosix5setupEv+0x118>)
   b894e:	9307      	str	r3, [sp, #28]
        };
   b8950:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   b8952:	4b3b      	ldr	r3, [pc, #236]	; (b8a40 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   b8954:	9306      	str	r3, [sp, #24]
   b8956:	a808      	add	r0, sp, #32
   b8958:	f7fc fc08 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b895c:	a908      	add	r1, sp, #32
   b895e:	a80c      	add	r0, sp, #48	; 0x30
   b8960:	f7fc fc04 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b8964:	a90c      	add	r1, sp, #48	; 0x30
   b8966:	a810      	add	r0, sp, #64	; 0x40
   b8968:	f7fc fc00 	bl	b516c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b896c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b896e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b8970:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8972:	f7fb fb90 	bl	b4096 <_Znwj>
   b8976:	4604      	mov	r4, r0
   b8978:	b160      	cbz	r0, b8994 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   b897a:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b897c:	4601      	mov	r1, r0
   b897e:	a810      	add	r0, sp, #64	; 0x40
   b8980:	f7fe fe35 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8984:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   b8986:	68a2      	ldr	r2, [r4, #8]
   b8988:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   b898a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b898c:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b898e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   b8990:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8992:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   b8994:	4b2b      	ldr	r3, [pc, #172]	; (b8a44 <_ZN17PublishQueuePosix5setupEv+0x120>)
   b8996:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   b8998:	4b2b      	ldr	r3, [pc, #172]	; (b8a48 <_ZN17PublishQueuePosix5setupEv+0x124>)
   b899a:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   b899c:	4b2b      	ldr	r3, [pc, #172]	; (b8a4c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b899e:	9414      	str	r4, [sp, #80]	; 0x50
   b89a0:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b89a2:	2010      	movs	r0, #16
        SystemEventContext context = {};
   b89a4:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b89a8:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b89aa:	f7fb fb74 	bl	b4096 <_Znwj>
   b89ae:	4604      	mov	r4, r0
   b89b0:	b1d8      	cbz	r0, b89ea <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   b89b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   b89b4:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   b89b6:	b133      	cbz	r3, b89c6 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b89b8:	2202      	movs	r2, #2
   b89ba:	a914      	add	r1, sp, #80	; 0x50
   b89bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b89be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b89c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b89c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b89c4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b89c6:	4b22      	ldr	r3, [pc, #136]	; (b8a50 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   b89c8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b89ca:	4a22      	ldr	r2, [pc, #136]	; (b8a54 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   b89cc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b89ce:	ab01      	add	r3, sp, #4
   b89d0:	f44f 6004 	mov.w	r0, #2112	; 0x840
   b89d4:	2100      	movs	r1, #0
   b89d6:	f002 fc15 	bl	bb204 <system_subscribe_event>
        if (r) {
   b89da:	b130      	cbz	r0, b89ea <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   b89dc:	4620      	mov	r0, r4
   b89de:	f7fc f8d9 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b89e2:	2110      	movs	r1, #16
   b89e4:	4620      	mov	r0, r4
   b89e6:	f7fb fb5a 	bl	b409e <_ZdlPvj>
   b89ea:	a814      	add	r0, sp, #80	; 0x50
   b89ec:	f7fc f8d2 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b89f0:	a810      	add	r0, sp, #64	; 0x40
   b89f2:	f7fc f8cf 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b89f6:	a80c      	add	r0, sp, #48	; 0x30
   b89f8:	f7fc f8cc 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b89fc:	a808      	add	r0, sp, #32
   b89fe:	f7fc f8c9 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   b8a02:	a804      	add	r0, sp, #16
   b8a04:	f7fc f8c6 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   b8a08:	f7fe fd34 	bl	b7474 <_ZN19BackgroundPublishRK8instanceEv>
   b8a0c:	f7fe fe58 	bl	b76c0 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   b8a10:	1d28      	adds	r0, r5, #4
   b8a12:	f001 feaf 	bl	ba774 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   b8a16:	4628      	mov	r0, r5
   b8a18:	f7ff fe32 	bl	b8680 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   b8a1c:	4b0e      	ldr	r3, [pc, #56]	; (b8a58 <_ZN17PublishQueuePosix5setupEv+0x134>)
   b8a1e:	9314      	str	r3, [sp, #80]	; 0x50
   b8a20:	a914      	add	r1, sp, #80	; 0x50
   b8a22:	2300      	movs	r3, #0
   b8a24:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   b8a28:	9315      	str	r3, [sp, #84]	; 0x54
   b8a2a:	f7ff fe8f 	bl	b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8a2e:	e785      	b.n	b893c <_ZN17PublishQueuePosix5setupEv+0x18>
   b8a30:	000c0876 	.word	0x000c0876
   b8a34:	2003e444 	.word	0x2003e444
   b8a38:	000b86e9 	.word	0x000b86e9
   b8a3c:	000b4b8b 	.word	0x000b4b8b
   b8a40:	000b4b77 	.word	0x000b4b77
   b8a44:	000b4b51 	.word	0x000b4b51
   b8a48:	000b5295 	.word	0x000b5295
   b8a4c:	000c0002 	.word	0x000c0002
   b8a50:	000b4ba7 	.word	0x000b4ba7
   b8a54:	000b4b29 	.word	0x000b4b29
   b8a58:	000b88d5 	.word	0x000b88d5

000b8a5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   b8a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8a60:	4606      	mov	r6, r0
   b8a62:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8a64:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8a66:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8a68:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   b8a6a:	1a47      	subs	r7, r0, r1
   b8a6c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   b8a70:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8a72:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   b8a76:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   b8a78:	d927      	bls.n	b8aca <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   b8a7a:	1b5d      	subs	r5, r3, r5
   b8a7c:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8a7e:	6832      	ldr	r2, [r6, #0]
   b8a80:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8a82:	b10c      	cbz	r4, b8a88 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   b8a84:	ea4f 0489 	mov.w	r4, r9, lsl #2
   b8a88:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   b8a8a:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   b8a8c:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   b8a8e:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   b8a90:	eba3 0201 	sub.w	r2, r3, r1
   b8a94:	d913      	bls.n	b8abe <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   b8a96:	4299      	cmp	r1, r3
   b8a98:	d002      	beq.n	b8aa0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8a9a:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8a9c:	f006 fc08 	bl	bf2b0 <memmove>
	_M_node = __new_node;
   b8aa0:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   b8aa2:	6823      	ldr	r3, [r4, #0]
   b8aa4:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8aa6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8aaa:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   b8aac:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   b8aae:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   b8ab0:	59e3      	ldr	r3, [r4, r7]
   b8ab2:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8ab4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   b8ab8:	6233      	str	r3, [r6, #32]
    }
   b8aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   b8abe:	4299      	cmp	r1, r3
   b8ac0:	d0ee      	beq.n	b8aa0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b8ac2:	1d38      	adds	r0, r7, #4
   b8ac4:	1a80      	subs	r0, r0, r2
   b8ac6:	4420      	add	r0, r4
   b8ac8:	e7e8      	b.n	b8a9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   b8aca:	f103 0802 	add.w	r8, r3, #2
   b8ace:	454b      	cmp	r3, r9
   b8ad0:	bf2c      	ite	cs
   b8ad2:	4498      	addcs	r8, r3
   b8ad4:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   b8ad6:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   b8ada:	d301      	bcc.n	b8ae0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   b8adc:	f005 feca 	bl	be874 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8ae0:	ea4f 0088 	mov.w	r0, r8, lsl #2
   b8ae4:	f7fb fad7 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8ae8:	eba8 0505 	sub.w	r5, r8, r5
   b8aec:	086d      	lsrs	r5, r5, #1
   b8aee:	4682      	mov	sl, r0
   b8af0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   b8af2:	b10c      	cbz	r4, b8af8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   b8af4:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   b8af8:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b8afa:	6971      	ldr	r1, [r6, #20]
   b8afc:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   b8afe:	442c      	add	r4, r5
	  if (_Num)
   b8b00:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   b8b02:	4454      	add	r4, sl
   b8b04:	d003      	beq.n	b8b0e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b8b06:	1a52      	subs	r2, r2, r1
   b8b08:	4620      	mov	r0, r4
   b8b0a:	f006 fbd1 	bl	bf2b0 <memmove>
	::operator delete(__p
   b8b0e:	6871      	ldr	r1, [r6, #4]
   b8b10:	6830      	ldr	r0, [r6, #0]
   b8b12:	0089      	lsls	r1, r1, #2
   b8b14:	f7fb fac3 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   b8b18:	e9c6 a800 	strd	sl, r8, [r6]
   b8b1c:	e7c0      	b.n	b8aa0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000b8b20 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8b22:	b085      	sub	sp, #20
   b8b24:	4604      	mov	r4, r0
   b8b26:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   b8b2a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8b2e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b8b30:	460f      	mov	r7, r1
   b8b32:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   b8b34:	f7ff fbec 	bl	b8310 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   b8b38:	4605      	mov	r5, r0
   b8b3a:	2800      	cmp	r0, #0
   b8b3c:	d03c      	beq.n	b8bb8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   b8b3e:	4b3f      	ldr	r3, [pc, #252]	; (b8c3c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   b8b40:	493f      	ldr	r1, [pc, #252]	; (b8c40 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   b8b42:	4840      	ldr	r0, [pc, #256]	; (b8c44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8b44:	2e00      	cmp	r6, #0
   b8b46:	bf18      	it	ne
   b8b48:	4633      	movne	r3, r6
   b8b4a:	463a      	mov	r2, r7
   b8b4c:	f7fd feca 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
   b8b50:	4620      	mov	r0, r4
   b8b52:	f7ff fbd0 	bl	b82f6 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   b8b56:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   b8b5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   b8b5e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   b8b60:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   b8b62:	f104 0678 	add.w	r6, r4, #120	; 0x78
   b8b66:	d029      	beq.n	b8bbc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8b68:	b103      	cbz	r3, b8b6c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   b8b6a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   b8b6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b8b70:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   b8b72:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   b8b74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   b8b78:	4628      	mov	r0, r5
   b8b7a:	f001 fecf 	bl	ba91c <_ZNK14SequentialFile11getQueueLenEv>
   b8b7e:	9003      	str	r0, [sp, #12]
   b8b80:	4630      	mov	r0, r6
   b8b82:	f7ff fcd9 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8b86:	9002      	str	r0, [sp, #8]
   b8b88:	f002 fbbe 	bl	bb308 <spark_cloud_flag_connected>
   b8b8c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b8b90:	9000      	str	r0, [sp, #0]
   b8b92:	492d      	ldr	r1, [pc, #180]	; (b8c48 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   b8b94:	482b      	ldr	r0, [pc, #172]	; (b8c44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8b96:	f7fd fea5 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8b9a:	4628      	mov	r0, r5
   b8b9c:	f001 febe 	bl	ba91c <_ZNK14SequentialFile11getQueueLenEv>
   b8ba0:	2800      	cmp	r0, #0
   b8ba2:	d03b      	beq.n	b8c1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   b8ba4:	4620      	mov	r0, r4
   b8ba6:	f7ff fd0b 	bl	b85c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   b8baa:	4620      	mov	r0, r4
   b8bac:	f7ff fd68 	bl	b8680 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   b8bb0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8bb2:	f002 f87d 	bl	bacb0 <os_mutex_recursive_unlock>
    return true;
   b8bb6:	2001      	movs	r0, #1
}
   b8bb8:	b005      	add	sp, #20
   b8bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   b8bbc:	4630      	mov	r0, r6
   b8bbe:	f7ff fcbb 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8bc2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8bc6:	4298      	cmp	r0, r3
   b8bc8:	d102      	bne.n	b8bd0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   b8bca:	4820      	ldr	r0, [pc, #128]	; (b8c4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   b8bcc:	f005 fe55 	bl	be87a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   b8bd0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8bd4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b8bd6:	1a9a      	subs	r2, r3, r2
   b8bd8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b8bda:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   b8bde:	2b01      	cmp	r3, #1
   b8be0:	d804      	bhi.n	b8bec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   b8be2:	2200      	movs	r2, #0
   b8be4:	2101      	movs	r1, #1
   b8be6:	4630      	mov	r0, r6
   b8be8:	f7ff ff38 	bl	b8a5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8bec:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   b8bf0:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   b8bf4:	f7fb fa4f 	bl	b4096 <_Znwj>
   b8bf8:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   b8bfa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8bfe:	b103      	cbz	r3, b8c02 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   b8c00:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   b8c02:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b8c06:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   b8c08:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   b8c0c:	685b      	ldr	r3, [r3, #4]
   b8c0e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8c12:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8c16:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   b8c1a:	e7aa      	b.n	b8b72 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   b8c1c:	4630      	mov	r0, r6
   b8c1e:	f7ff fc8b 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8c22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b8c24:	4298      	cmp	r0, r3
   b8c26:	d8bd      	bhi.n	b8ba4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   b8c28:	f002 fb6e 	bl	bb308 <spark_cloud_flag_connected>
   b8c2c:	2800      	cmp	r0, #0
   b8c2e:	d0b9      	beq.n	b8ba4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   b8c30:	4907      	ldr	r1, [pc, #28]	; (b8c50 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   b8c32:	4804      	ldr	r0, [pc, #16]	; (b8c44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   b8c34:	f7fd fe56 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
   b8c38:	e7b7      	b.n	b8baa <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   b8c3a:	bf00      	nop
   b8c3c:	000c0f58 	.word	0x000c0f58
   b8c40:	000c0899 	.word	0x000c0899
   b8c44:	2003e444 	.word	0x2003e444
   b8c48:	000c08f1 	.word	0x000c08f1
   b8c4c:	000c08c1 	.word	0x000c08c1
   b8c50:	000c091d 	.word	0x000c091d

000b8c54 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   b8c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   b8c56:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   b8c5a:	4604      	mov	r4, r0
    if (!publishComplete) {
   b8c5c:	2b00      	cmp	r3, #0
   b8c5e:	d041      	beq.n	b8ce4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   b8c60:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   b8c64:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   b8c68:	2b00      	cmp	r3, #0
   b8c6a:	d03d      	beq.n	b8ce8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   b8c6c:	4950      	ldr	r1, [pc, #320]	; (b8db0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   b8c6e:	4851      	ldr	r0, [pc, #324]	; (b8db4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8c70:	f7fd fe38 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   b8c74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8c78:	b1d3      	cbz	r3, b8cb0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   b8c7a:	1d26      	adds	r6, r4, #4
   b8c7c:	2100      	movs	r1, #0
   b8c7e:	4630      	mov	r0, r6
   b8c80:	f001 fdfc 	bl	ba87c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   b8c84:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8c88:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   b8c8a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   b8c8c:	d10d      	bne.n	b8caa <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   b8c8e:	2101      	movs	r1, #1
   b8c90:	4630      	mov	r0, r6
   b8c92:	f001 fdf3 	bl	ba87c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   b8c96:	2200      	movs	r2, #0
   b8c98:	4629      	mov	r1, r5
   b8c9a:	4630      	mov	r0, r6
   b8c9c:	f001 fc26 	bl	ba4ec <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   b8ca0:	4945      	ldr	r1, [pc, #276]	; (b8db8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   b8ca2:	4844      	ldr	r0, [pc, #272]	; (b8db4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8ca4:	462a      	mov	r2, r5
   b8ca6:	f7fd fe1d 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   b8caa:	2300      	movs	r3, #0
   b8cac:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   b8cb0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8cb4:	b110      	cbz	r0, b8cbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   b8cb6:	2143      	movs	r1, #67	; 0x43
   b8cb8:	f7fb f9f1 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   b8cbc:	2300      	movs	r3, #0
   b8cbe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   b8cc2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8cc6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   b8cca:	4b3c      	ldr	r3, [pc, #240]	; (b8dbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   b8ccc:	9300      	str	r3, [sp, #0]
   b8cce:	4669      	mov	r1, sp
   b8cd0:	2300      	movs	r3, #0
   b8cd2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b8cd6:	9301      	str	r3, [sp, #4]
   b8cd8:	f7ff fd38 	bl	b874c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b8cdc:	f002 f820 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b8ce0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   b8ce4:	b002      	add	sp, #8
   b8ce6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   b8ce8:	4935      	ldr	r1, [pc, #212]	; (b8dc0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   b8cea:	4832      	ldr	r0, [pc, #200]	; (b8db4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8cec:	f7fd fdfa 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   b8cf0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8cf4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   b8cf8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8cfc:	b14b      	cbz	r3, b8d12 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   b8cfe:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   b8d02:	b110      	cbz	r0, b8d0a <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   b8d04:	2143      	movs	r1, #67	; 0x43
   b8d06:	f7fb f9ca 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   b8d0a:	2300      	movs	r3, #0
   b8d0c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   b8d10:	e7db      	b.n	b8cca <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   b8d12:	4620      	mov	r0, r4
   b8d14:	f7ff faef 	bl	b82f6 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   b8d18:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   b8d1c:	4293      	cmp	r3, r2
   b8d1e:	d013      	beq.n	b8d48 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   b8d20:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8d24:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   b8d28:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b8d2c:	3b04      	subs	r3, #4
   b8d2e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   b8d32:	6f60      	ldr	r0, [r4, #116]	; 0x74
   b8d34:	f001 ffbc 	bl	bacb0 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   b8d38:	4922      	ldr	r1, [pc, #136]	; (b8dc4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   b8d3a:	481e      	ldr	r0, [pc, #120]	; (b8db4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   b8d3c:	f7fd fdd2 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   b8d40:	4620      	mov	r0, r4
   b8d42:	f7ff fc3d 	bl	b85c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   b8d46:	e7c0      	b.n	b8cca <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   b8d48:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   b8d4c:	4628      	mov	r0, r5
   b8d4e:	f7ff fbf3 	bl	b8538 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   b8d52:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8d56:	4298      	cmp	r0, r3
   b8d58:	d102      	bne.n	b8d60 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   b8d5a:	481b      	ldr	r0, [pc, #108]	; (b8dc8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   b8d5c:	f005 fd8d 	bl	be87a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   b8d60:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b8d64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b8d66:	429a      	cmp	r2, r3
   b8d68:	d104      	bne.n	b8d74 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   b8d6a:	2201      	movs	r2, #1
   b8d6c:	4611      	mov	r1, r2
   b8d6e:	4628      	mov	r0, r5
   b8d70:	f7ff fe74 	bl	b8a5c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8d74:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   b8d78:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   b8d7c:	f7fb f98b 	bl	b4096 <_Znwj>
   b8d80:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   b8d84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b8d88:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   b8d8a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   b8d8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b8d92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   b8d96:	f503 7200 	add.w	r2, r3, #512	; 0x200
   b8d9a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   b8d9e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   b8da2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8da6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b8daa:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   b8dae:	e7c0      	b.n	b8d32 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   b8db0:	000c0930 	.word	0x000c0930
   b8db4:	2003e444 	.word	0x2003e444
   b8db8:	000c0943 	.word	0x000c0943
   b8dbc:	000b8795 	.word	0x000b8795
   b8dc0:	000c0953 	.word	0x000c0953
   b8dc4:	000c0965 	.word	0x000c0965
   b8dc8:	000c08c1 	.word	0x000c08c1

000b8dcc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   b8dcc:	4b01      	ldr	r3, [pc, #4]	; (b8dd4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   b8dce:	4a02      	ldr	r2, [pc, #8]	; (b8dd8 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   b8dd0:	601a      	str	r2, [r3, #0]
}
   b8dd2:	4770      	bx	lr
   b8dd4:	2003e444 	.word	0x2003e444
   b8dd8:	000c098c 	.word	0x000c098c

000b8ddc <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8ddc:	b510      	push	{r4, lr}
   b8dde:	4b07      	ldr	r3, [pc, #28]	; (b8dfc <_ZN17PublishQueuePosixD1Ev+0x20>)
   b8de0:	4604      	mov	r4, r0
   b8de2:	f840 3bc0 	str.w	r3, [r0], #192
   b8de6:	f7fb fed5 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   b8dea:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b8dee:	f7ff fc95 	bl	b871c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   b8df2:	1d20      	adds	r0, r4, #4
   b8df4:	f001 fbfe 	bl	ba5f4 <_ZN14SequentialFileD1Ev>
}
   b8df8:	4620      	mov	r0, r4
   b8dfa:	bd10      	pop	{r4, pc}
   b8dfc:	000c09a0 	.word	0x000c09a0

000b8e00 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   b8e00:	b510      	push	{r4, lr}
   b8e02:	4604      	mov	r4, r0
}
   b8e04:	f7ff ffea 	bl	b8ddc <_ZN17PublishQueuePosixD1Ev>
   b8e08:	4620      	mov	r0, r4
   b8e0a:	21d0      	movs	r1, #208	; 0xd0
   b8e0c:	f7fb f947 	bl	b409e <_ZdlPvj>
   b8e10:	4620      	mov	r0, r4
   b8e12:	bd10      	pop	{r4, pc}

000b8e14 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b8e14:	6001      	str	r1, [r0, #0]
   b8e16:	7102      	strb	r2, [r0, #4]
{
}
   b8e18:	4770      	bx	lr

000b8e1a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b8e1a:	6800      	ldr	r0, [r0, #0]
   b8e1c:	6803      	ldr	r3, [r0, #0]
   b8e1e:	68db      	ldr	r3, [r3, #12]
   b8e20:	4718      	bx	r3

000b8e22 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b8e22:	6800      	ldr	r0, [r0, #0]
   b8e24:	6803      	ldr	r3, [r0, #0]
   b8e26:	6a1b      	ldr	r3, [r3, #32]
   b8e28:	4718      	bx	r3

000b8e2a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b8e2a:	6800      	ldr	r0, [r0, #0]
   b8e2c:	6803      	ldr	r3, [r0, #0]
   b8e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8e30:	4718      	bx	r3

000b8e32 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b8e32:	7900      	ldrb	r0, [r0, #4]
   b8e34:	4770      	bx	lr

000b8e36 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b8e36:	6800      	ldr	r0, [r0, #0]
   b8e38:	6803      	ldr	r3, [r0, #0]
   b8e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8e3c:	4718      	bx	r3

000b8e3e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b8e3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8e40:	4605      	mov	r5, r0
   b8e42:	460c      	mov	r4, r1
    setHeaderTo(address);
   b8e44:	4619      	mov	r1, r3
{
   b8e46:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b8e48:	f7ff fff5 	bl	b8e36 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b8e4c:	6828      	ldr	r0, [r5, #0]
   b8e4e:	9a01      	ldr	r2, [sp, #4]
   b8e50:	6803      	ldr	r3, [r0, #0]
   b8e52:	695b      	ldr	r3, [r3, #20]
   b8e54:	4621      	mov	r1, r4
}
   b8e56:	b003      	add	sp, #12
   b8e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b8e5c:	4718      	bx	r3

000b8e5e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b8e5e:	6800      	ldr	r0, [r0, #0]
   b8e60:	6803      	ldr	r3, [r0, #0]
   b8e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8e64:	4718      	bx	r3

000b8e66 <_ZN10RHDatagram14setThisAddressEh>:
{
   b8e66:	b538      	push	{r3, r4, r5, lr}
   b8e68:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b8e6a:	6800      	ldr	r0, [r0, #0]
   b8e6c:	6803      	ldr	r3, [r0, #0]
{
   b8e6e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b8e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e72:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b8e74:	4629      	mov	r1, r5
   b8e76:	4620      	mov	r0, r4
   b8e78:	f7ff fff1 	bl	b8e5e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b8e7c:	7125      	strb	r5, [r4, #4]
}
   b8e7e:	bd38      	pop	{r3, r4, r5, pc}

000b8e80 <_ZN10RHDatagram4initEv>:
{
   b8e80:	b538      	push	{r3, r4, r5, lr}
   b8e82:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b8e84:	6800      	ldr	r0, [r0, #0]
   b8e86:	6803      	ldr	r3, [r0, #0]
   b8e88:	689b      	ldr	r3, [r3, #8]
   b8e8a:	4798      	blx	r3
    if (ret)
   b8e8c:	4605      	mov	r5, r0
   b8e8e:	b118      	cbz	r0, b8e98 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b8e90:	7921      	ldrb	r1, [r4, #4]
   b8e92:	4620      	mov	r0, r4
   b8e94:	f7ff ffe7 	bl	b8e66 <_ZN10RHDatagram14setThisAddressEh>
}
   b8e98:	4628      	mov	r0, r5
   b8e9a:	bd38      	pop	{r3, r4, r5, pc}

000b8e9c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b8e9c:	6800      	ldr	r0, [r0, #0]
   b8e9e:	6803      	ldr	r3, [r0, #0]
   b8ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ea2:	4718      	bx	r3

000b8ea4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b8ea4:	6800      	ldr	r0, [r0, #0]
   b8ea6:	6803      	ldr	r3, [r0, #0]
   b8ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8eaa:	4718      	bx	r3

000b8eac <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b8eac:	6800      	ldr	r0, [r0, #0]
   b8eae:	6803      	ldr	r3, [r0, #0]
   b8eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8eb2:	4718      	bx	r3

000b8eb4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b8eb4:	6800      	ldr	r0, [r0, #0]
   b8eb6:	6803      	ldr	r3, [r0, #0]
   b8eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8eba:	4718      	bx	r3

000b8ebc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b8ebc:	6800      	ldr	r0, [r0, #0]
   b8ebe:	6803      	ldr	r3, [r0, #0]
   b8ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8ec2:	4718      	bx	r3

000b8ec4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b8ec4:	6800      	ldr	r0, [r0, #0]
   b8ec6:	6803      	ldr	r3, [r0, #0]
   b8ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8eca:	4718      	bx	r3

000b8ecc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b8ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ed0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b8ed2:	6800      	ldr	r0, [r0, #0]
{
   b8ed4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b8ed6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b8ed8:	6803      	ldr	r3, [r0, #0]
   b8eda:	691b      	ldr	r3, [r3, #16]
{
   b8edc:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b8ee0:	4798      	blx	r3
   b8ee2:	4605      	mov	r5, r0
   b8ee4:	b1c8      	cbz	r0, b8f1a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b8ee6:	b11e      	cbz	r6, b8ef0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f7ff ffe3 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
   b8eee:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b8ef0:	f1b9 0f00 	cmp.w	r9, #0
   b8ef4:	d004      	beq.n	b8f00 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b8ef6:	4620      	mov	r0, r4
   b8ef8:	f7ff ffd8 	bl	b8eac <_ZN10RHDatagram8headerToEv>
   b8efc:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b8f00:	f1b8 0f00 	cmp.w	r8, #0
   b8f04:	d004      	beq.n	b8f10 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b8f06:	4620      	mov	r0, r4
   b8f08:	f7ff ffd8 	bl	b8ebc <_ZN10RHDatagram8headerIdEv>
   b8f0c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b8f10:	b11f      	cbz	r7, b8f1a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b8f12:	4620      	mov	r0, r4
   b8f14:	f7ff ffd6 	bl	b8ec4 <_ZN10RHDatagram11headerFlagsEv>
   b8f18:	7038      	strb	r0, [r7, #0]
}
   b8f1a:	4628      	mov	r0, r5
   b8f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8f20 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b8f20:	2001      	movs	r0, #1
   b8f22:	4770      	bx	lr

000b8f24 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b8f24:	7903      	ldrb	r3, [r0, #4]
   b8f26:	2b03      	cmp	r3, #3
   b8f28:	d0fc      	beq.n	b8f24 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b8f2a:	2001      	movs	r0, #1
   b8f2c:	4770      	bx	lr

000b8f2e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b8f2e:	2000      	movs	r0, #0
   b8f30:	4770      	bx	lr

000b8f32 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b8f32:	7181      	strb	r1, [r0, #6]
}
   b8f34:	4770      	bx	lr

000b8f36 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b8f36:	7141      	strb	r1, [r0, #5]
}
   b8f38:	4770      	bx	lr

000b8f3a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b8f3a:	72c1      	strb	r1, [r0, #11]
}
   b8f3c:	4770      	bx	lr

000b8f3e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b8f3e:	7301      	strb	r1, [r0, #12]
}
   b8f40:	4770      	bx	lr

000b8f42 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b8f42:	7341      	strb	r1, [r0, #13]
}
   b8f44:	4770      	bx	lr

000b8f46 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b8f46:	7b83      	ldrb	r3, [r0, #14]
   b8f48:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b8f4c:	4311      	orrs	r1, r2
   b8f4e:	7381      	strb	r1, [r0, #14]
}
   b8f50:	4770      	bx	lr

000b8f52 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b8f52:	79c0      	ldrb	r0, [r0, #7]
}
   b8f54:	4770      	bx	lr

000b8f56 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b8f56:	7a00      	ldrb	r0, [r0, #8]
}
   b8f58:	4770      	bx	lr

000b8f5a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b8f5a:	7a40      	ldrb	r0, [r0, #9]
}
   b8f5c:	4770      	bx	lr

000b8f5e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b8f5e:	7a80      	ldrb	r0, [r0, #10]
}
   b8f60:	4770      	bx	lr

000b8f62 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b8f62:	8a00      	ldrh	r0, [r0, #16]
}
   b8f64:	b200      	sxth	r0, r0
   b8f66:	4770      	bx	lr

000b8f68 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b8f68:	7900      	ldrb	r0, [r0, #4]
}
   b8f6a:	4770      	bx	lr

000b8f6c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b8f6c:	7101      	strb	r1, [r0, #4]
}
   b8f6e:	4770      	bx	lr

000b8f70 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b8f70:	8a40      	ldrh	r0, [r0, #18]
}
   b8f72:	b280      	uxth	r0, r0
   b8f74:	4770      	bx	lr

000b8f76 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b8f76:	8a80      	ldrh	r0, [r0, #20]
}
   b8f78:	b280      	uxth	r0, r0
   b8f7a:	4770      	bx	lr

000b8f7c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b8f7c:	8ac0      	ldrh	r0, [r0, #22]
}
   b8f7e:	b280      	uxth	r0, r0
   b8f80:	4770      	bx	lr

000b8f82 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b8f82:	b538      	push	{r3, r4, r5, lr}
   b8f84:	4605      	mov	r5, r0
   b8f86:	460c      	mov	r4, r1
    while (!available())
   b8f88:	682b      	ldr	r3, [r5, #0]
   b8f8a:	4628      	mov	r0, r5
   b8f8c:	68db      	ldr	r3, [r3, #12]
   b8f8e:	4798      	blx	r3
   b8f90:	b928      	cbnz	r0, b8f9e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b8f92:	2c00      	cmp	r4, #0
   b8f94:	d0f8      	beq.n	b8f88 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b8f96:	4620      	mov	r0, r4
   b8f98:	f002 fad6 	bl	bb548 <delay>
   b8f9c:	e7f4      	b.n	b8f88 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b8f9e:	bd38      	pop	{r3, r4, r5, pc}

000b8fa0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b8fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fa2:	4605      	mov	r5, r0
   b8fa4:	460f      	mov	r7, r1
   b8fa6:	4614      	mov	r4, r2
   b8fa8:	f001 feba 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b8fac:	4606      	mov	r6, r0
   b8fae:	f001 feb7 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b8fb2:	1b80      	subs	r0, r0, r6
   b8fb4:	42b8      	cmp	r0, r7
   b8fb6:	d20a      	bcs.n	b8fce <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b8fb8:	682b      	ldr	r3, [r5, #0]
   b8fba:	4628      	mov	r0, r5
   b8fbc:	68db      	ldr	r3, [r3, #12]
   b8fbe:	4798      	blx	r3
   b8fc0:	b930      	cbnz	r0, b8fd0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b8fc2:	2c00      	cmp	r4, #0
   b8fc4:	d0f3      	beq.n	b8fae <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b8fc6:	4620      	mov	r0, r4
   b8fc8:	f002 fabe 	bl	bb548 <delay>
   b8fcc:	e7ef      	b.n	b8fae <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b8fce:	2000      	movs	r0, #0
}
   b8fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fd2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b8fd2:	b570      	push	{r4, r5, r6, lr}
   b8fd4:	4604      	mov	r4, r0
   b8fd6:	460e      	mov	r6, r1
   b8fd8:	f001 fea2 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b8fdc:	4605      	mov	r5, r0
   b8fde:	f001 fe9f 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b8fe2:	1b40      	subs	r0, r0, r5
   b8fe4:	42b0      	cmp	r0, r6
   b8fe6:	d204      	bcs.n	b8ff2 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b8fe8:	7923      	ldrb	r3, [r4, #4]
   b8fea:	2b03      	cmp	r3, #3
   b8fec:	d0f7      	beq.n	b8fde <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b8fee:	2001      	movs	r0, #1
}
   b8ff0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8ff2:	2000      	movs	r0, #0
   b8ff4:	e7fc      	b.n	b8ff0 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b8ff6 <_ZN15RHGenericDriver7waitCADEv>:
{
   b8ff6:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b8ff8:	69c3      	ldr	r3, [r0, #28]
{
   b8ffa:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b8ffc:	b1b3      	cbz	r3, b902c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b8ffe:	f001 fe8f 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b9002:	2664      	movs	r6, #100	; 0x64
   b9004:	4605      	mov	r5, r0
    while (isChannelActive())
   b9006:	6823      	ldr	r3, [r4, #0]
   b9008:	4620      	mov	r0, r4
   b900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b900c:	4798      	blx	r3
   b900e:	b168      	cbz	r0, b902c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b9010:	f001 fe86 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b9014:	69e3      	ldr	r3, [r4, #28]
   b9016:	1b40      	subs	r0, r0, r5
   b9018:	4298      	cmp	r0, r3
   b901a:	d809      	bhi.n	b9030 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b901c:	210a      	movs	r1, #10
   b901e:	2001      	movs	r0, #1
   b9020:	f004 fca5 	bl	bd96e <_Z6randomii>
   b9024:	4370      	muls	r0, r6
   b9026:	f002 fa8f 	bl	bb548 <delay>
    while (isChannelActive())
   b902a:	e7ec      	b.n	b9006 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b902c:	2001      	movs	r0, #1
}
   b902e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b9030:	2000      	movs	r0, #0
   b9032:	e7fc      	b.n	b902e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b9034 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b9034:	4a06      	ldr	r2, [pc, #24]	; (b9050 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b9036:	6002      	str	r2, [r0, #0]
   b9038:	21ff      	movs	r1, #255	; 0xff
   b903a:	2200      	movs	r2, #0
   b903c:	7102      	strb	r2, [r0, #4]
   b903e:	7141      	strb	r1, [r0, #5]
   b9040:	8242      	strh	r2, [r0, #18]
   b9042:	72c1      	strb	r1, [r0, #11]
   b9044:	8282      	strh	r2, [r0, #20]
   b9046:	8181      	strh	r1, [r0, #12]
   b9048:	7382      	strb	r2, [r0, #14]
   b904a:	82c2      	strh	r2, [r0, #22]
   b904c:	61c2      	str	r2, [r0, #28]
}
   b904e:	4770      	bx	lr
   b9050:	000c09b4 	.word	0x000c09b4

000b9054 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b9054:	4770      	bx	lr

000b9056 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b9056:	4770      	bx	lr

000b9058 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b9058:	4770      	bx	lr

000b905a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b905a:	4770      	bx	lr

000b905c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b905c:	4770      	bx	lr

000b905e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b905e:	7141      	strb	r1, [r0, #5]
}
   b9060:	4770      	bx	lr

000b9062 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b9062:	7181      	strb	r1, [r0, #6]
}
   b9064:	4770      	bx	lr

000b9066 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b9066:	7101      	strb	r1, [r0, #4]
}
   b9068:	4770      	bx	lr
	...

000b906c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b906c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b906e:	4d03      	ldr	r5, [pc, #12]	; (b907c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b9070:	6005      	str	r5, [r0, #0]
   b9072:	7101      	strb	r1, [r0, #4]
   b9074:	7142      	strb	r2, [r0, #5]
   b9076:	7183      	strb	r3, [r0, #6]
}
   b9078:	bd30      	pop	{r4, r5, pc}
   b907a:	bf00      	nop
   b907c:	000c0a34 	.word	0x000c0a34

000b9080 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b9080:	4770      	bx	lr

000b9082 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b9082:	b510      	push	{r4, lr}
  }
   b9084:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b9086:	4604      	mov	r4, r0
  }
   b9088:	f7fb f809 	bl	b409e <_ZdlPvj>
   b908c:	4620      	mov	r0, r4
   b908e:	bd10      	pop	{r4, pc}

000b9090 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9090:	b40e      	push	{r1, r2, r3}
   b9092:	b503      	push	{r0, r1, lr}
   b9094:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b9096:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9098:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b909c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b909e:	f004 fc2a 	bl	bd8f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b90a2:	b002      	add	sp, #8
   b90a4:	f85d eb04 	ldr.w	lr, [sp], #4
   b90a8:	b003      	add	sp, #12
   b90aa:	4770      	bx	lr

000b90ac <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b90ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b90ae:	4604      	mov	r4, r0
   b90b0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b90b2:	7922      	ldrb	r2, [r4, #4]
   b90b4:	68a3      	ldr	r3, [r4, #8]
   b90b6:	b132      	cbz	r2, b90c6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b90b8:	b9a3      	cbnz	r3, b90e4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b90ba:	490b      	ldr	r1, [pc, #44]	; (b90e8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b90bc:	b002      	add	sp, #8
   b90be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b90c2:	f004 bb0f 	b.w	bd6e4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b90c6:	4a09      	ldr	r2, [pc, #36]	; (b90ec <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b90c8:	7b26      	ldrb	r6, [r4, #12]
   b90ca:	4d09      	ldr	r5, [pc, #36]	; (b90f0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b90cc:	4909      	ldr	r1, [pc, #36]	; (b90f4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b90ce:	7b64      	ldrb	r4, [r4, #13]
   b90d0:	2e01      	cmp	r6, #1
   b90d2:	bf18      	it	ne
   b90d4:	4629      	movne	r1, r5
   b90d6:	e9cd 1400 	strd	r1, r4, [sp]
   b90da:	4907      	ldr	r1, [pc, #28]	; (b90f8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b90dc:	f7ff ffd8 	bl	b9090 <_ZN5Print6printfEPKcz>
  }
   b90e0:	b002      	add	sp, #8
   b90e2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b90e4:	4a05      	ldr	r2, [pc, #20]	; (b90fc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b90e6:	e7ef      	b.n	b90c8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b90e8:	000c0a71 	.word	0x000c0a71
   b90ec:	000c0f58 	.word	0x000c0f58
   b90f0:	000c0a6d 	.word	0x000c0a6d
   b90f4:	000c0a69 	.word	0x000c0a69
   b90f8:	000c0a87 	.word	0x000c0a87
   b90fc:	000c0a60 	.word	0x000c0a60

000b9100 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b9100:	b510      	push	{r4, lr}
   b9102:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b9104:	f7ff ffb2 	bl	b906c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b9108:	4b05      	ldr	r3, [pc, #20]	; (b9120 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b910a:	6023      	str	r3, [r4, #0]
  {
   b910c:	4b05      	ldr	r3, [pc, #20]	; (b9124 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b910e:	60a3      	str	r3, [r4, #8]
   b9110:	2301      	movs	r3, #1
   b9112:	7323      	strb	r3, [r4, #12]
   b9114:	2300      	movs	r3, #0
   b9116:	6123      	str	r3, [r4, #16]
   b9118:	82a3      	strh	r3, [r4, #20]
{
}
   b911a:	4620      	mov	r0, r4
   b911c:	bd10      	pop	{r4, pc}
   b911e:	bf00      	nop
   b9120:	000c0ac0 	.word	0x000c0ac0
   b9124:	000c0aac 	.word	0x000c0aac

000b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b9128:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b912a:	4c0b      	ldr	r4, [pc, #44]	; (b9158 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b912c:	7821      	ldrb	r1, [r4, #0]
   b912e:	f3bf 8f5b 	dmb	ish
   b9132:	f011 0101 	ands.w	r1, r1, #1
   b9136:	d10b      	bne.n	b9150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9138:	4620      	mov	r0, r4
   b913a:	9101      	str	r1, [sp, #4]
   b913c:	f7fa ffbe 	bl	b40bc <__cxa_guard_acquire>
   b9140:	9901      	ldr	r1, [sp, #4]
   b9142:	b128      	cbz	r0, b9150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9144:	4805      	ldr	r0, [pc, #20]	; (b915c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9146:	f004 fc29 	bl	bd99c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b914a:	4620      	mov	r0, r4
   b914c:	f7fa ffbb 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b9150:	4802      	ldr	r0, [pc, #8]	; (b915c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9152:	b002      	add	sp, #8
   b9154:	bd10      	pop	{r4, pc}
   b9156:	bf00      	nop
   b9158:	2003e44c 	.word	0x2003e44c
   b915c:	2003e450 	.word	0x2003e450

000b9160 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b9160:	b507      	push	{r0, r1, r2, lr}
   b9162:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b9164:	f7ff ffe0 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9168:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b916a:	b003      	add	sp, #12
   b916c:	f85d eb04 	ldr.w	lr, [sp], #4
   b9170:	f004 bccc 	b.w	bdb0c <_ZN8SPIClass8transferEh>

000b9174 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b9174:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b9176:	f7ff ffd7 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b917a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b917e:	f004 bccb 	b.w	bdb18 <_ZN8SPIClass15attachInterruptEv>

000b9182 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b9182:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b9184:	f7ff ffd0 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b9188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b918c:	f004 bcc5 	b.w	bdb1a <_ZN8SPIClass15detachInterruptEv>

000b9190 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b9190:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b9192:	7903      	ldrb	r3, [r0, #4]
   b9194:	2b04      	cmp	r3, #4
   b9196:	d020      	beq.n	b91da <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b9198:	2b03      	cmp	r3, #3
   b919a:	d020      	beq.n	b91de <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b919c:	2b02      	cmp	r3, #2
   b919e:	d020      	beq.n	b91e2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b91a0:	4a11      	ldr	r2, [pc, #68]	; (b91e8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b91a2:	4912      	ldr	r1, [pc, #72]	; (b91ec <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b91a4:	2b01      	cmp	r3, #1
   b91a6:	bf18      	it	ne
   b91a8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b91aa:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b91ac:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b91ae:	3901      	subs	r1, #1
   b91b0:	bf18      	it	ne
   b91b2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b91b4:	b133      	cbz	r3, b91c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b91b6:	2b01      	cmp	r3, #1
   b91b8:	d004      	beq.n	b91c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b91ba:	2b02      	cmp	r3, #2
   b91bc:	d002      	beq.n	b91c4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b91be:	2b03      	cmp	r3, #3
   b91c0:	bf18      	it	ne
   b91c2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b91c4:	2400      	movs	r4, #0
   b91c6:	7304      	strb	r4, [r0, #12]
   b91c8:	6102      	str	r2, [r0, #16]
   b91ca:	7501      	strb	r1, [r0, #20]
   b91cc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b91ce:	f7ff ffab 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b91d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b91d6:	f004 bbeb 	b.w	bd9b0 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b91da:	4a05      	ldr	r2, [pc, #20]	; (b91f0 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b91dc:	e7e5      	b.n	b91aa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b91de:	4a05      	ldr	r2, [pc, #20]	; (b91f4 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b91e0:	e7e3      	b.n	b91aa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b91e2:	4a05      	ldr	r2, [pc, #20]	; (b91f8 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b91e4:	e7e1      	b.n	b91aa <_ZN13RHHardwareSPI5beginEv+0x1a>
   b91e6:	bf00      	nop
   b91e8:	001e8480 	.word	0x001e8480
   b91ec:	000f4240 	.word	0x000f4240
   b91f0:	00f42400 	.word	0x00f42400
   b91f4:	007a1200 	.word	0x007a1200
   b91f8:	003d0900 	.word	0x003d0900

000b91fc <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b91fc:	b508      	push	{r3, lr}
        instance().end();
   b91fe:	f7ff ff93 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b9202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9206:	f004 bbe7 	b.w	bd9d8 <_ZN8SPIClass3endEv>

000b920a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b920a:	b510      	push	{r4, lr}
   b920c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b920e:	f7ff ff8b 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9212:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b9216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b921a:	f004 bc09 	b.w	bda30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b921e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b921e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b9220:	f7ff ff82 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b9224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9228:	f004 bbe8 	b.w	bd9fc <_ZN8SPIClass14endTransactionEv>

000b922c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b922c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b922e:	f7ff ff7b 	bl	b9128 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b9232:	bd08      	pop	{r3, pc}

000b9234 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b9234:	2300      	movs	r3, #0
   b9236:	4802      	ldr	r0, [pc, #8]	; (b9240 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b9238:	461a      	mov	r2, r3
   b923a:	4619      	mov	r1, r3
   b923c:	f7ff bf60 	b.w	b9100 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b9240:	2003e458 	.word	0x2003e458

000b9244 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b9244:	2a01      	cmp	r2, #1
   b9246:	d105      	bne.n	b9254 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b9248:	7a00      	ldrb	r0, [r0, #8]
   b924a:	780b      	ldrb	r3, [r1, #0]
   b924c:	1a1b      	subs	r3, r3, r0
   b924e:	4258      	negs	r0, r3
   b9250:	4158      	adcs	r0, r3
   b9252:	4770      	bx	lr
   b9254:	2000      	movs	r0, #0
}
   b9256:	4770      	bx	lr

000b9258 <_ZN6RHMesh5doArpEh>:
{
   b9258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b925c:	4c25      	ldr	r4, [pc, #148]	; (b92f4 <_ZN6RHMesh5doArpEh+0x9c>)
   b925e:	2301      	movs	r3, #1
{
   b9260:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b9262:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b9264:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9266:	2300      	movs	r3, #0
{
   b9268:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b926a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b926c:	9300      	str	r3, [sp, #0]
   b926e:	2203      	movs	r2, #3
   b9270:	23ff      	movs	r3, #255	; 0xff
   b9272:	4621      	mov	r1, r4
{
   b9274:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b9276:	f000 fbb7 	bl	b99e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b927a:	b120      	cbz	r0, b9286 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b927c:	2500      	movs	r5, #0
}
   b927e:	4628      	mov	r0, r5
   b9280:	b006      	add	sp, #24
   b9282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b9286:	237a      	movs	r3, #122	; 0x7a
   b9288:	f88d 3017 	strb.w	r3, [sp, #23]
   b928c:	f001 fd48 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b9290:	f106 0904 	add.w	r9, r6, #4
   b9294:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b9296:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b929a:	f001 fd41 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b929e:	1a29      	subs	r1, r5, r0
   b92a0:	2900      	cmp	r1, #0
   b92a2:	ddeb      	ble.n	b927c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b92a4:	2200      	movs	r2, #0
   b92a6:	b289      	uxth	r1, r1
   b92a8:	4648      	mov	r0, r9
   b92aa:	f7ff fdbe 	bl	b8e2a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b92ae:	2800      	cmp	r0, #0
   b92b0:	d0f3      	beq.n	b929a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b92b2:	2300      	movs	r3, #0
   b92b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b92b8:	e9cd 3300 	strd	r3, r3, [sp]
   b92bc:	f10d 0217 	add.w	r2, sp, #23
   b92c0:	4621      	mov	r1, r4
   b92c2:	4630      	mov	r0, r6
   b92c4:	f000 fb9a 	bl	b99fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b92c8:	4605      	mov	r5, r0
   b92ca:	2800      	cmp	r0, #0
   b92cc:	d0e3      	beq.n	b9296 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b92ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b92d2:	2b01      	cmp	r3, #1
   b92d4:	d9df      	bls.n	b9296 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b92d6:	f894 a000 	ldrb.w	sl, [r4]
   b92da:	f1ba 0f02 	cmp.w	sl, #2
   b92de:	d1da      	bne.n	b9296 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b92e0:	4648      	mov	r0, r9
   b92e2:	f7ff fde7 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
   b92e6:	4653      	mov	r3, sl
   b92e8:	4602      	mov	r2, r0
   b92ea:	4639      	mov	r1, r7
   b92ec:	4630      	mov	r0, r6
   b92ee:	f000 faf3 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b92f2:	e7c4      	b.n	b927e <_ZN6RHMesh5doArpEh+0x26>
   b92f4:	2003e470 	.word	0x2003e470

000b92f8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b92f8:	2a01      	cmp	r2, #1
{
   b92fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b92fe:	4607      	mov	r7, r0
   b9300:	460e      	mov	r6, r1
   b9302:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b9304:	d93b      	bls.n	b937e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b9306:	794d      	ldrb	r5, [r1, #5]
   b9308:	2d02      	cmp	r5, #2
   b930a:	d130      	bne.n	b936e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b930c:	f100 0804 	add.w	r8, r0, #4
   b9310:	79c9      	ldrb	r1, [r1, #7]
   b9312:	9101      	str	r1, [sp, #4]
   b9314:	4640      	mov	r0, r8
   b9316:	f7ff fdcd 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b931a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b931c:	462b      	mov	r3, r5
   b931e:	4602      	mov	r2, r0
   b9320:	9901      	ldr	r1, [sp, #4]
   b9322:	4638      	mov	r0, r7
   b9324:	f000 fad8 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b9328:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b932a:	f106 0308 	add.w	r3, r6, #8
   b932e:	2400      	movs	r4, #0
   b9330:	4622      	mov	r2, r4
   b9332:	4295      	cmp	r5, r2
   b9334:	f104 0401 	add.w	r4, r4, #1
   b9338:	b2e4      	uxtb	r4, r4
   b933a:	d904      	bls.n	b9346 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b933c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9340:	7a39      	ldrb	r1, [r7, #8]
   b9342:	4291      	cmp	r1, r2
   b9344:	d1f4      	bne.n	b9330 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b9346:	f104 0108 	add.w	r1, r4, #8
   b934a:	440e      	add	r6, r1
	while (i < numRoutes)
   b934c:	42a5      	cmp	r5, r4
   b934e:	d916      	bls.n	b937e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b9350:	f816 1b01 	ldrb.w	r1, [r6], #1
   b9354:	9101      	str	r1, [sp, #4]
   b9356:	4640      	mov	r0, r8
   b9358:	f7ff fdac 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
   b935c:	3401      	adds	r4, #1
   b935e:	4602      	mov	r2, r0
   b9360:	9901      	ldr	r1, [sp, #4]
   b9362:	2302      	movs	r3, #2
   b9364:	4638      	mov	r0, r7
   b9366:	b2e4      	uxtb	r4, r4
   b9368:	f000 fab6 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b936c:	e7ee      	b.n	b934c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b936e:	2d03      	cmp	r5, #3
   b9370:	d105      	bne.n	b937e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b9372:	7989      	ldrb	r1, [r1, #6]
}
   b9374:	b002      	add	sp, #8
   b9376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b937a:	f000 ba96 	b.w	b98aa <_ZN8RHRouter13deleteRouteToEh>
}
   b937e:	b002      	add	sp, #8
   b9380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9384 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b9384:	b510      	push	{r4, lr}
   b9386:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b9388:	f000 fae6 	bl	b9958 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b938c:	4b01      	ldr	r3, [pc, #4]	; (b9394 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b938e:	6023      	str	r3, [r4, #0]
}
   b9390:	4620      	mov	r0, r4
   b9392:	bd10      	pop	{r4, pc}
   b9394:	000c0af4 	.word	0x000c0af4

000b9398 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b9398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b939c:	2a79      	cmp	r2, #121	; 0x79
{
   b939e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b93a2:	4606      	mov	r6, r0
   b93a4:	460f      	mov	r7, r1
   b93a6:	4614      	mov	r4, r2
   b93a8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b93aa:	d825      	bhi.n	b93f8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b93ac:	2bff      	cmp	r3, #255	; 0xff
   b93ae:	d114      	bne.n	b93da <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b93b0:	f8df 8048 	ldr.w	r8, [pc, #72]	; b93fc <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b93b4:	4640      	mov	r0, r8
   b93b6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b93b8:	4622      	mov	r2, r4
   b93ba:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b93bc:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b93c0:	f005 ff68 	bl	bf294 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b93c4:	1c62      	adds	r2, r4, #1
   b93c6:	f8cd 9020 	str.w	r9, [sp, #32]
   b93ca:	462b      	mov	r3, r5
   b93cc:	4641      	mov	r1, r8
   b93ce:	4630      	mov	r0, r6
   b93d0:	b2d2      	uxtb	r2, r2
}
   b93d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b93d6:	f000 bb07 	b.w	b99e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b93da:	4619      	mov	r1, r3
   b93dc:	f000 fa21 	bl	b9822 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b93e0:	2800      	cmp	r0, #0
   b93e2:	d1e5      	bne.n	b93b0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b93e4:	6833      	ldr	r3, [r6, #0]
   b93e6:	4629      	mov	r1, r5
   b93e8:	689b      	ldr	r3, [r3, #8]
   b93ea:	4630      	mov	r0, r6
   b93ec:	4798      	blx	r3
   b93ee:	2800      	cmp	r0, #0
   b93f0:	d1de      	bne.n	b93b0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b93f2:	2002      	movs	r0, #2
}
   b93f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b93f8:	2001      	movs	r0, #1
   b93fa:	e7fb      	b.n	b93f4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b93fc:	2003e470 	.word	0x2003e470

000b9400 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b9400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9404:	b089      	sub	sp, #36	; 0x24
   b9406:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9408:	237a      	movs	r3, #122	; 0x7a
   b940a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b940e:	f10d 031f 	add.w	r3, sp, #31
   b9412:	9303      	str	r3, [sp, #12]
   b9414:	f10d 031e 	add.w	r3, sp, #30
   b9418:	9302      	str	r3, [sp, #8]
   b941a:	4e5d      	ldr	r6, [pc, #372]	; (b9590 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b941c:	f10d 031d 	add.w	r3, sp, #29
   b9420:	9301      	str	r3, [sp, #4]
   b9422:	ab07      	add	r3, sp, #28
   b9424:	9300      	str	r3, [sp, #0]
{     
   b9426:	4689      	mov	r9, r1
   b9428:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b942a:	f10d 031b 	add.w	r3, sp, #27
   b942e:	f10d 021a 	add.w	r2, sp, #26
   b9432:	4631      	mov	r1, r6
{     
   b9434:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b9438:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b943a:	f000 fadf 	bl	b99fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b943e:	4604      	mov	r4, r0
   b9440:	b920      	cbnz	r0, b944c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b9442:	2400      	movs	r4, #0
}
   b9444:	4620      	mov	r0, r4
   b9446:	b009      	add	sp, #36	; 0x24
   b9448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b944c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b9450:	b373      	cbz	r3, b94b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b9452:	7832      	ldrb	r2, [r6, #0]
   b9454:	bb62      	cbnz	r2, b94b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b9456:	f1b8 0f00 	cmp.w	r8, #0
   b945a:	d003      	beq.n	b9464 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b945c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b9460:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b9464:	f1bb 0f00 	cmp.w	fp, #0
   b9468:	d003      	beq.n	b9472 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b946a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b946e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b9472:	f1ba 0f00 	cmp.w	sl, #0
   b9476:	d003      	beq.n	b9480 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b9478:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b947c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b9480:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9482:	b11a      	cbz	r2, b948c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b9484:	9914      	ldr	r1, [sp, #80]	; 0x50
   b9486:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b948a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b948c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b948e:	b11a      	cbz	r2, b9498 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b9490:	9915      	ldr	r1, [sp, #84]	; 0x54
   b9492:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9496:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b9498:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b949a:	493e      	ldr	r1, [pc, #248]	; (b9594 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b949c:	3b01      	subs	r3, #1
   b949e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b94a0:	429a      	cmp	r2, r3
		*len = msgLen;
   b94a2:	bf88      	it	hi
   b94a4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b94a6:	783a      	ldrb	r2, [r7, #0]
   b94a8:	4648      	mov	r0, r9
   b94aa:	f005 fef3 	bl	bf294 <memcpy>
	    return true;
   b94ae:	e7c9      	b.n	b9444 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b94b0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b94b4:	2aff      	cmp	r2, #255	; 0xff
   b94b6:	d1c4      	bne.n	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b94b8:	2b01      	cmp	r3, #1
   b94ba:	d9c2      	bls.n	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b94bc:	7832      	ldrb	r2, [r6, #0]
   b94be:	2a01      	cmp	r2, #1
   b94c0:	d1bf      	bne.n	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b94c2:	7a2a      	ldrb	r2, [r5, #8]
   b94c4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b94c8:	42a2      	cmp	r2, r4
   b94ca:	d0ba      	beq.n	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b94cc:	1edf      	subs	r7, r3, #3
   b94ce:	4932      	ldr	r1, [pc, #200]	; (b9598 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b94d0:	b2ff      	uxtb	r7, r7
   b94d2:	2300      	movs	r3, #0
   b94d4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b94d8:	4547      	cmp	r7, r8
   b94da:	d906      	bls.n	b94ea <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b94dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b94e0:	4282      	cmp	r2, r0
   b94e2:	f103 0301 	add.w	r3, r3, #1
   b94e6:	d1f5      	bne.n	b94d4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b94e8:	e7ab      	b.n	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b94ea:	f105 0904 	add.w	r9, r5, #4
   b94ee:	4648      	mov	r0, r9
   b94f0:	f7ff fce0 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
   b94f4:	2302      	movs	r3, #2
   b94f6:	4602      	mov	r2, r0
   b94f8:	4621      	mov	r1, r4
   b94fa:	4628      	mov	r0, r5
   b94fc:	f000 f9ec 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b9500:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9504:	b193      	cbz	r3, b952c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b9506:	4c22      	ldr	r4, [pc, #136]	; (b9590 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b9508:	1ba3      	subs	r3, r4, r6
   b950a:	b2db      	uxtb	r3, r3
   b950c:	429f      	cmp	r7, r3
   b950e:	d90c      	bls.n	b952a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b9510:	78e1      	ldrb	r1, [r4, #3]
   b9512:	9105      	str	r1, [sp, #20]
   b9514:	4648      	mov	r0, r9
   b9516:	f7ff fccd 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
   b951a:	9905      	ldr	r1, [sp, #20]
   b951c:	4602      	mov	r2, r0
   b951e:	2302      	movs	r3, #2
   b9520:	4628      	mov	r0, r5
   b9522:	f000 f9d9 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b9526:	3401      	adds	r4, #1
   b9528:	e7ee      	b.n	b9508 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b952a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b952c:	682b      	ldr	r3, [r5, #0]
   b952e:	7872      	ldrb	r2, [r6, #1]
   b9530:	68db      	ldr	r3, [r3, #12]
   b9532:	491a      	ldr	r1, [pc, #104]	; (b959c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b9534:	4628      	mov	r0, r5
   b9536:	4798      	blx	r3
   b9538:	4604      	mov	r4, r0
   b953a:	b160      	cbz	r0, b9556 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b953c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b953e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b9540:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b9542:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b9546:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b954a:	4911      	ldr	r1, [pc, #68]	; (b9590 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b954c:	9400      	str	r4, [sp, #0]
   b954e:	4628      	mov	r0, r5
   b9550:	f000 fa4a 	bl	b99e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b9554:	e776      	b.n	b9444 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b9556:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b955a:	4543      	cmp	r3, r8
   b955c:	f67f af71 	bls.w	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b9560:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b9564:	2b00      	cmp	r3, #0
   b9566:	f43f af6c 	beq.w	b9442 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b956a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b956e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9570:	4907      	ldr	r1, [pc, #28]	; (b9590 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b9572:	443e      	add	r6, r7
		tmpMessageLen++;
   b9574:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b9576:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9578:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b957c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b957e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b9580:	9300      	str	r3, [sp, #0]
   b9582:	4628      	mov	r0, r5
   b9584:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b9586:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b958a:	f000 f9f7 	bl	b997c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b958e:	e759      	b.n	b9444 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b9590:	2003e470 	.word	0x2003e470
   b9594:	2003e471 	.word	0x2003e471
   b9598:	2003e473 	.word	0x2003e473
   b959c:	2003e472 	.word	0x2003e472

000b95a0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b95a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b95a2:	b085      	sub	sp, #20
   b95a4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b95a6:	3004      	adds	r0, #4
{
   b95a8:	460e      	mov	r6, r1
   b95aa:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b95ac:	f7ff fc82 	bl	b8eb4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b95b0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b95b2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b95b4:	4631      	mov	r1, r6
   b95b6:	4628      	mov	r0, r5
   b95b8:	f000 f94a 	bl	b9850 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b95bc:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b95be:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b95c0:	d001      	beq.n	b95c6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b95c2:	2805      	cmp	r0, #5
   b95c4:	d11b      	bne.n	b95fe <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b95c6:	7831      	ldrb	r1, [r6, #0]
   b95c8:	4628      	mov	r0, r5
   b95ca:	f000 f96e 	bl	b98aa <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b95ce:	7872      	ldrb	r2, [r6, #1]
   b95d0:	7a2b      	ldrb	r3, [r5, #8]
   b95d2:	429a      	cmp	r2, r3
   b95d4:	d013      	beq.n	b95fe <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b95d6:	4c0b      	ldr	r4, [pc, #44]	; (b9604 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b95d8:	2303      	movs	r3, #3
   b95da:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b95dc:	7833      	ldrb	r3, [r6, #0]
   b95de:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b95e0:	7871      	ldrb	r1, [r6, #1]
   b95e2:	2302      	movs	r3, #2
   b95e4:	463a      	mov	r2, r7
   b95e6:	4628      	mov	r0, r5
   b95e8:	f000 f976 	bl	b98d8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b95ec:	2300      	movs	r3, #0
   b95ee:	9300      	str	r3, [sp, #0]
   b95f0:	4621      	mov	r1, r4
   b95f2:	7873      	ldrb	r3, [r6, #1]
   b95f4:	2202      	movs	r2, #2
   b95f6:	4628      	mov	r0, r5
   b95f8:	f000 f9f6 	bl	b99e8 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b95fc:	4604      	mov	r4, r0
}
   b95fe:	4620      	mov	r0, r4
   b9600:	b005      	add	sp, #20
   b9602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9604:	2003e470 	.word	0x2003e470

000b9608 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b9608:	b510      	push	{r4, lr}
   b960a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b960c:	f7ff fc02 	bl	b8e14 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b9610:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b9612:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b9614:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b9616:	2303      	movs	r3, #3
    _retransmissions = 0;
   b9618:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b961a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b961c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b961e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b9622:	f104 0011 	add.w	r0, r4, #17
   b9626:	f005 fe5d 	bl	bf2e4 <memset>
}
   b962a:	4620      	mov	r0, r4
   b962c:	bd10      	pop	{r4, pc}

000b962e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b962e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9630:	4604      	mov	r4, r0
   b9632:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b9634:	f7ff fc32 	bl	b8e9c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b9638:	4620      	mov	r0, r4
   b963a:	2200      	movs	r2, #0
   b963c:	2180      	movs	r1, #128	; 0x80
   b963e:	f7ff fc31 	bl	b8ea4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b9642:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b9644:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b9646:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b964a:	f10d 010f 	add.w	r1, sp, #15
   b964e:	2201      	movs	r2, #1
   b9650:	4620      	mov	r0, r4
   b9652:	f7ff fbf4 	bl	b8e3e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b9656:	4620      	mov	r0, r4
   b9658:	f7ff fbe3 	bl	b8e22 <_ZN10RHDatagram14waitPacketSentEv>
}
   b965c:	b004      	add	sp, #16
   b965e:	bd10      	pop	{r4, pc}

000b9660 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b9660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9664:	7b05      	ldrb	r5, [r0, #12]
   b9666:	3501      	adds	r5, #1
   b9668:	b2ed      	uxtb	r5, r5
{
   b966a:	b087      	sub	sp, #28
   b966c:	4604      	mov	r4, r0
   b966e:	4689      	mov	r9, r1
   b9670:	4692      	mov	sl, r2
   b9672:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b9674:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b9676:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b9678:	7c22      	ldrb	r2, [r4, #16]
   b967a:	463b      	mov	r3, r7
   b967c:	429a      	cmp	r2, r3
   b967e:	f107 0701 	add.w	r7, r7, #1
   b9682:	b2ff      	uxtb	r7, r7
   b9684:	d36b      	bcc.n	b975e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b9686:	4629      	mov	r1, r5
   b9688:	4620      	mov	r0, r4
   b968a:	f7ff fc07 	bl	b8e9c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b968e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b9690:	bf0d      	iteet	eq
   b9692:	22c0      	moveq	r2, #192	; 0xc0
   b9694:	2280      	movne	r2, #128	; 0x80
   b9696:	2140      	movne	r1, #64	; 0x40
   b9698:	2100      	moveq	r1, #0
   b969a:	4620      	mov	r0, r4
   b969c:	f7ff fc02 	bl	b8ea4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b96a0:	4643      	mov	r3, r8
   b96a2:	4652      	mov	r2, sl
   b96a4:	4649      	mov	r1, r9
   b96a6:	4620      	mov	r0, r4
   b96a8:	f7ff fbc9 	bl	b8e3e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b96ac:	4620      	mov	r0, r4
   b96ae:	f7ff fbb8 	bl	b8e22 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b96b2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b96b6:	d054      	beq.n	b9762 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b96b8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b96ba:	bf82      	ittt	hi
   b96bc:	68a3      	ldrhi	r3, [r4, #8]
   b96be:	3301      	addhi	r3, #1
   b96c0:	60a3      	strhi	r3, [r4, #8]
   b96c2:	f001 fb2d 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b96c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b96ca:	4683      	mov	fp, r0
   b96cc:	2000      	movs	r0, #0
   b96ce:	89e6      	ldrh	r6, [r4, #14]
   b96d0:	f004 f94d 	bl	bd96e <_Z6randomii>
   b96d4:	4370      	muls	r0, r6
   b96d6:	bf48      	it	mi
   b96d8:	30ff      	addmi	r0, #255	; 0xff
   b96da:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b96de:	fa1b f686 	uxtah	r6, fp, r6
   b96e2:	f001 fb1d 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
   b96e6:	1a30      	subs	r0, r6, r0
   b96e8:	2800      	cmp	r0, #0
   b96ea:	ddc5      	ble.n	b9678 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b96ec:	b281      	uxth	r1, r0
   b96ee:	2200      	movs	r2, #0
   b96f0:	4620      	mov	r0, r4
   b96f2:	f7ff fb9a 	bl	b8e2a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b96f6:	2800      	cmp	r0, #0
   b96f8:	d0f3      	beq.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b96fa:	f10d 0317 	add.w	r3, sp, #23
   b96fe:	9302      	str	r3, [sp, #8]
   b9700:	f10d 0316 	add.w	r3, sp, #22
   b9704:	9301      	str	r3, [sp, #4]
   b9706:	2200      	movs	r2, #0
   b9708:	f10d 0315 	add.w	r3, sp, #21
   b970c:	9300      	str	r3, [sp, #0]
   b970e:	4611      	mov	r1, r2
   b9710:	ab05      	add	r3, sp, #20
   b9712:	4620      	mov	r0, r4
   b9714:	f7ff fbda 	bl	b8ecc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b9718:	2800      	cmp	r0, #0
   b971a:	d0e2      	beq.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b971c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b9720:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b9724:	4542      	cmp	r2, r8
   b9726:	d10e      	bne.n	b9746 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b9728:	f894 c004 	ldrb.w	ip, [r4, #4]
   b972c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b9730:	458c      	cmp	ip, r1
   b9732:	d108      	bne.n	b9746 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b9734:	2b00      	cmp	r3, #0
   b9736:	da08      	bge.n	b974a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b9738:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b973c:	42ab      	cmp	r3, r5
   b973e:	d1d0      	bne.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b9740:	b007      	add	sp, #28
   b9742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b9746:	2b00      	cmp	r3, #0
   b9748:	dbcb      	blt.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b974a:	18a1      	adds	r1, r4, r2
   b974c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b9750:	7c49      	ldrb	r1, [r1, #17]
   b9752:	4299      	cmp	r1, r3
   b9754:	d1c5      	bne.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b9756:	4620      	mov	r0, r4
   b9758:	f7ff ff69 	bl	b962e <_ZN18RHReliableDatagram11acknowledgeEhh>
   b975c:	e7c1      	b.n	b96e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b975e:	2000      	movs	r0, #0
   b9760:	e7ee      	b.n	b9740 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b9762:	2001      	movs	r0, #1
   b9764:	e7ec      	b.n	b9740 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b9766 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b9766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b976a:	b089      	sub	sp, #36	; 0x24
   b976c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b9770:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b9774:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b9776:	4604      	mov	r4, r0
   b9778:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b977a:	f7ff fb4e 	bl	b8e1a <_ZN10RHDatagram9availableEv>
   b977e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b9782:	b920      	cbnz	r0, b978e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b9784:	2500      	movs	r5, #0
}
   b9786:	4628      	mov	r0, r5
   b9788:	b009      	add	sp, #36	; 0x24
   b978a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b978e:	f10d 031f 	add.w	r3, sp, #31
   b9792:	9302      	str	r3, [sp, #8]
   b9794:	f10d 031e 	add.w	r3, sp, #30
   b9798:	9301      	str	r3, [sp, #4]
   b979a:	f10d 031d 	add.w	r3, sp, #29
   b979e:	9300      	str	r3, [sp, #0]
   b97a0:	4620      	mov	r0, r4
   b97a2:	ab07      	add	r3, sp, #28
   b97a4:	f7ff fb92 	bl	b8ecc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b97a8:	4605      	mov	r5, r0
   b97aa:	2800      	cmp	r0, #0
   b97ac:	d0ea      	beq.n	b9784 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b97ae:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b97b2:	2b00      	cmp	r3, #0
   b97b4:	dbe6      	blt.n	b9784 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b97b6:	7922      	ldrb	r2, [r4, #4]
   b97b8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b97bc:	429a      	cmp	r2, r3
   b97be:	d106      	bne.n	b97ce <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b97c0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b97c4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b97c8:	4620      	mov	r0, r4
   b97ca:	f7ff ff30 	bl	b962e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b97ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b97d2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b97d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b97da:	f012 0f40 	tst.w	r2, #64	; 0x40
   b97de:	440c      	add	r4, r1
   b97e0:	d002      	beq.n	b97e8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b97e2:	7c60      	ldrb	r0, [r4, #17]
   b97e4:	4298      	cmp	r0, r3
   b97e6:	d0cd      	beq.n	b9784 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b97e8:	b106      	cbz	r6, b97ec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b97ea:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b97ec:	f1b9 0f00 	cmp.w	r9, #0
   b97f0:	d003      	beq.n	b97fa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b97f2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b97f6:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b97fa:	f1b8 0f00 	cmp.w	r8, #0
   b97fe:	d001      	beq.n	b9804 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b9800:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b9804:	b107      	cbz	r7, b9808 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b9806:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b9808:	7463      	strb	r3, [r4, #17]
		return true;
   b980a:	e7bc      	b.n	b9786 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b980c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b980c:	4770      	bx	lr

000b980e <_ZN8RHRouter4initEv>:
{
   b980e:	b510      	push	{r4, lr}
   b9810:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b9812:	3004      	adds	r0, #4
   b9814:	f7ff fb34 	bl	b8e80 <_ZN10RHDatagram4initEv>
    if (ret)
   b9818:	b110      	cbz	r0, b9820 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b981a:	231e      	movs	r3, #30
   b981c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b9820:	bd10      	pop	{r4, pc}

000b9822 <_ZN8RHRouter10getRouteToEh>:
{
   b9822:	b510      	push	{r4, lr}
   b9824:	4602      	mov	r2, r0
   b9826:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b9828:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b982c:	428c      	cmp	r4, r1
   b982e:	d108      	bne.n	b9842 <_ZN8RHRouter10getRouteToEh+0x20>
   b9830:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b9834:	b12c      	cbz	r4, b9842 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b9836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b983a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b983e:	4418      	add	r0, r3
}
   b9840:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9842:	3301      	adds	r3, #1
   b9844:	2b32      	cmp	r3, #50	; 0x32
   b9846:	f102 0203 	add.w	r2, r2, #3
   b984a:	d1ed      	bne.n	b9828 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b984c:	2000      	movs	r0, #0
   b984e:	e7f7      	b.n	b9840 <_ZN8RHRouter10getRouteToEh+0x1e>

000b9850 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b9850:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b9852:	780b      	ldrb	r3, [r1, #0]
   b9854:	2bff      	cmp	r3, #255	; 0xff
{
   b9856:	4605      	mov	r5, r0
   b9858:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b985a:	d006      	beq.n	b986a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b985c:	4619      	mov	r1, r3
   b985e:	9201      	str	r2, [sp, #4]
   b9860:	f7ff ffdf 	bl	b9822 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b9864:	b158      	cbz	r0, b987e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b9866:	7843      	ldrb	r3, [r0, #1]
   b9868:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b986a:	4621      	mov	r1, r4
   b986c:	1d28      	adds	r0, r5, #4
   b986e:	f7ff fef7 	bl	b9660 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b9872:	2800      	cmp	r0, #0
   b9874:	bf14      	ite	ne
   b9876:	2000      	movne	r0, #0
   b9878:	2005      	moveq	r0, #5
}
   b987a:	b003      	add	sp, #12
   b987c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b987e:	2002      	movs	r0, #2
   b9880:	e7fb      	b.n	b987a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b9882 <_ZN8RHRouter11deleteRouteEh>:
{
   b9882:	b510      	push	{r4, lr}
   b9884:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b9888:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b988a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b988e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b9892:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b9896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b989a:	4421      	add	r1, r4
   b989c:	4420      	add	r0, r4
   b989e:	f005 fcf9 	bl	bf294 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b98a2:	2300      	movs	r3, #0
   b98a4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b98a8:	bd10      	pop	{r4, pc}

000b98aa <_ZN8RHRouter13deleteRouteToEh>:
{
   b98aa:	b538      	push	{r3, r4, r5, lr}
   b98ac:	460a      	mov	r2, r1
   b98ae:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b98b0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b98b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b98b8:	b2d9      	uxtb	r1, r3
   b98ba:	5d65      	ldrb	r5, [r4, r5]
   b98bc:	4295      	cmp	r5, r2
   b98be:	d103      	bne.n	b98c8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b98c0:	f7ff ffdf 	bl	b9882 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b98c4:	2001      	movs	r0, #1
}
   b98c6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b98c8:	3301      	adds	r3, #1
   b98ca:	2b32      	cmp	r3, #50	; 0x32
   b98cc:	d1f2      	bne.n	b98b4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b98ce:	2000      	movs	r0, #0
   b98d0:	e7f9      	b.n	b98c6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b98d2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b98d2:	2100      	movs	r1, #0
   b98d4:	f7ff bfd5 	b.w	b9882 <_ZN8RHRouter11deleteRouteEh>

000b98d8 <_ZN8RHRouter10addRouteToEhhh>:
{
   b98d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b98da:	4616      	mov	r6, r2
   b98dc:	461f      	mov	r7, r3
   b98de:	4604      	mov	r4, r0
   b98e0:	460d      	mov	r5, r1
   b98e2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b98e4:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b98e8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b98ec:	5c11      	ldrb	r1, [r2, r0]
   b98ee:	42a9      	cmp	r1, r5
   b98f0:	d105      	bne.n	b98fe <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b98f2:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b98f4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b98f8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b98fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b98fe:	3301      	adds	r3, #1
   b9900:	2b32      	cmp	r3, #50	; 0x32
   b9902:	d1f1      	bne.n	b98e8 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b9904:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b9906:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b990a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b990e:	5c11      	ldrb	r1, [r2, r0]
   b9910:	b919      	cbnz	r1, b991a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b9912:	4420      	add	r0, r4
   b9914:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b9918:	e7ec      	b.n	b98f4 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b991a:	3301      	adds	r3, #1
   b991c:	2b32      	cmp	r3, #50	; 0x32
   b991e:	d1f4      	bne.n	b990a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b9920:	4620      	mov	r0, r4
   b9922:	f7ff ffd6 	bl	b98d2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9926:	4620      	mov	r0, r4
   b9928:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b992c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b9930:	b92a      	cbnz	r2, b993e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b9932:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b9936:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b993a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b993e:	3003      	adds	r0, #3
   b9940:	4298      	cmp	r0, r3
   b9942:	d1f3      	bne.n	b992c <_ZN8RHRouter10addRouteToEhhh+0x54>
   b9944:	e7da      	b.n	b98fc <_ZN8RHRouter10addRouteToEhhh+0x24>

000b9946 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9946:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b994a:	2200      	movs	r2, #0
   b994c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b9950:	3003      	adds	r0, #3
   b9952:	4298      	cmp	r0, r3
   b9954:	d1fa      	bne.n	b994c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b9956:	4770      	bx	lr

000b9958 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b9958:	b510      	push	{r4, lr}
   b995a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b995c:	3004      	adds	r0, #4
   b995e:	f7ff fe53 	bl	b9608 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b9962:	4b05      	ldr	r3, [pc, #20]	; (b9978 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b9964:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b9966:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b996a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b996c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b9970:	f7ff ffe9 	bl	b9946 <_ZN8RHRouter17clearRoutingTableEv>
}
   b9974:	4620      	mov	r0, r4
   b9976:	bd10      	pop	{r4, pc}
   b9978:	000c0b0c 	.word	0x000c0b0c

000b997c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b997c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b9980:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9982:	6840      	ldr	r0, [r0, #4]
{
   b9984:	9101      	str	r1, [sp, #4]
   b9986:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9988:	6803      	ldr	r3, [r0, #0]
{
   b998a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b998e:	699b      	ldr	r3, [r3, #24]
{
   b9990:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b9994:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b9996:	4798      	blx	r3
   b9998:	f106 0805 	add.w	r8, r6, #5
   b999c:	4580      	cmp	r8, r0
   b999e:	d81c      	bhi.n	b99da <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b99a0:	4d10      	ldr	r5, [pc, #64]	; (b99e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b99a2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b99a4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b99a8:	2300      	movs	r3, #0
   b99aa:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b99ac:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b99b0:	70eb      	strb	r3, [r5, #3]
   b99b2:	1c5a      	adds	r2, r3, #1
   b99b4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b99b8:	1d68      	adds	r0, r5, #5
   b99ba:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b99bc:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b99be:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b99c2:	f005 fc67 	bl	bf294 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b99c6:	6823      	ldr	r3, [r4, #0]
   b99c8:	685b      	ldr	r3, [r3, #4]
   b99ca:	fa5f f288 	uxtb.w	r2, r8
   b99ce:	4629      	mov	r1, r5
   b99d0:	4620      	mov	r0, r4
}
   b99d2:	b002      	add	sp, #8
   b99d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b99d8:	4718      	bx	r3
}
   b99da:	2001      	movs	r0, #1
   b99dc:	b002      	add	sp, #8
   b99de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b99e2:	bf00      	nop
   b99e4:	2003e4ea 	.word	0x2003e4ea

000b99e8 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b99e8:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b99ea:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b99ee:	9401      	str	r4, [sp, #4]
   b99f0:	7a04      	ldrb	r4, [r0, #8]
   b99f2:	9400      	str	r4, [sp, #0]
   b99f4:	f7ff ffc2 	bl	b997c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b99f8:	b002      	add	sp, #8
   b99fa:	bd10      	pop	{r4, pc}

000b99fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b99fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a00:	b087      	sub	sp, #28
   b9a02:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b9a04:	237f      	movs	r3, #127	; 0x7f
   b9a06:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9a0a:	f10d 0317 	add.w	r3, sp, #23
   b9a0e:	9302      	str	r3, [sp, #8]
   b9a10:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b9a14:	f10d 0316 	add.w	r3, sp, #22
   b9a18:	9301      	str	r3, [sp, #4]
   b9a1a:	f10d 0315 	add.w	r3, sp, #21
   b9a1e:	9300      	str	r3, [sp, #0]
{  
   b9a20:	4604      	mov	r4, r0
   b9a22:	4688      	mov	r8, r1
   b9a24:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9a26:	ab05      	add	r3, sp, #20
   b9a28:	f10d 0213 	add.w	r2, sp, #19
   b9a2c:	4649      	mov	r1, r9
   b9a2e:	3004      	adds	r0, #4
{  
   b9a30:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b9a34:	f7ff fe97 	bl	b9766 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b9a38:	4605      	mov	r5, r0
   b9a3a:	b908      	cbnz	r0, b9a40 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b9a3c:	2500      	movs	r5, #0
   b9a3e:	e038      	b.n	b9ab2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b9a40:	6823      	ldr	r3, [r4, #0]
   b9a42:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9a46:	681b      	ldr	r3, [r3, #0]
   b9a48:	4649      	mov	r1, r9
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b9a4e:	f899 3000 	ldrb.w	r3, [r9]
   b9a52:	7a22      	ldrb	r2, [r4, #8]
   b9a54:	429a      	cmp	r2, r3
   b9a56:	d001      	beq.n	b9a5c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b9a58:	2bff      	cmp	r3, #255	; 0xff
   b9a5a:	d12e      	bne.n	b9aba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b9a5c:	b117      	cbz	r7, b9a64 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b9a5e:	4b21      	ldr	r3, [pc, #132]	; (b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9a60:	785b      	ldrb	r3, [r3, #1]
   b9a62:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b9a64:	f1bb 0f00 	cmp.w	fp, #0
   b9a68:	d003      	beq.n	b9a72 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b9a6a:	4b1e      	ldr	r3, [pc, #120]	; (b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9a6c:	781b      	ldrb	r3, [r3, #0]
   b9a6e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b9a72:	f1ba 0f00 	cmp.w	sl, #0
   b9a76:	d003      	beq.n	b9a80 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b9a78:	4b1a      	ldr	r3, [pc, #104]	; (b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9a7a:	78db      	ldrb	r3, [r3, #3]
   b9a7c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b9a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b9a82:	b11b      	cbz	r3, b9a8c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b9a84:	4b17      	ldr	r3, [pc, #92]	; (b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9a88:	791b      	ldrb	r3, [r3, #4]
   b9a8a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b9a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9a8e:	b11b      	cbz	r3, b9a98 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b9a90:	4b14      	ldr	r3, [pc, #80]	; (b9ae4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b9a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9a94:	789b      	ldrb	r3, [r3, #2]
   b9a96:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9a98:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b9a9c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9a9e:	4912      	ldr	r1, [pc, #72]	; (b9ae8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b9aa0:	3b05      	subs	r3, #5
   b9aa2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b9aa4:	429a      	cmp	r2, r3
		*len = msgLen;
   b9aa6:	bf88      	it	hi
   b9aa8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b9aaa:	7832      	ldrb	r2, [r6, #0]
   b9aac:	4640      	mov	r0, r8
   b9aae:	f005 fbf1 	bl	bf294 <memcpy>
}
   b9ab2:	4628      	mov	r0, r5
   b9ab4:	b007      	add	sp, #28
   b9ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b9aba:	f899 3002 	ldrb.w	r3, [r9, #2]
   b9abe:	1c5a      	adds	r2, r3, #1
   b9ac0:	f889 2002 	strb.w	r2, [r9, #2]
   b9ac4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b9ac8:	429a      	cmp	r2, r3
   b9aca:	d9b7      	bls.n	b9a3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b9acc:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b9ad0:	2b00      	cmp	r3, #0
   b9ad2:	d0b3      	beq.n	b9a3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b9ad4:	6823      	ldr	r3, [r4, #0]
   b9ad6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b9ada:	685b      	ldr	r3, [r3, #4]
   b9adc:	4649      	mov	r1, r9
   b9ade:	4620      	mov	r0, r4
   b9ae0:	4798      	blx	r3
   b9ae2:	e7ab      	b.n	b9a3c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b9ae4:	2003e4ea 	.word	0x2003e4ea
   b9ae8:	2003e4ef 	.word	0x2003e4ef

000b9aec <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b9aec:	b510      	push	{r4, lr}
   b9aee:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b9af0:	6a00      	ldr	r0, [r0, #32]
   b9af2:	6803      	ldr	r3, [r0, #0]
   b9af4:	68db      	ldr	r3, [r3, #12]
   b9af6:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b9af8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b9afc:	28ff      	cmp	r0, #255	; 0xff
   b9afe:	d002      	beq.n	b9b06 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b9b00:	2101      	movs	r1, #1
   b9b02:	f004 fda9 	bl	be658 <pinMode>

    deselectSlave();
   b9b06:	6823      	ldr	r3, [r4, #0]
   b9b08:	4620      	mov	r0, r4
   b9b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9b0c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b9b0e:	2064      	movs	r0, #100	; 0x64
   b9b10:	f001 fd1a 	bl	bb548 <delay>
#endif
    
    return true;
}
   b9b14:	2001      	movs	r0, #1
   b9b16:	bd10      	pop	{r4, pc}

000b9b18 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b9b18:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9b1c:	2100      	movs	r1, #0
   b9b1e:	f004 bdac 	b.w	be67a <digitalWrite>

000b9b22 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b9b22:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b9b26:	2101      	movs	r1, #1
   b9b28:	f004 bda7 	b.w	be67a <digitalWrite>

000b9b2c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b9b2c:	b570      	push	{r4, r5, r6, lr}
   b9b2e:	4604      	mov	r4, r0
   b9b30:	460d      	mov	r5, r1
   b9b32:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b9b34:	f7ff fa7e 	bl	b9034 <_ZN15RHGenericDriverC1Ev>
   b9b38:	4b03      	ldr	r3, [pc, #12]	; (b9b48 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b9b3a:	6023      	str	r3, [r4, #0]
   b9b3c:	6226      	str	r6, [r4, #32]
   b9b3e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b9b42:	4620      	mov	r0, r4
   b9b44:	bd70      	pop	{r4, r5, r6, pc}
   b9b46:	bf00      	nop
   b9b48:	000c0b1c 	.word	0x000c0b1c

000b9b4c <_ZN11RHSPIDriver7spiReadEh>:
{
   b9b4c:	b538      	push	{r3, r4, r5, lr}
   b9b4e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9b50:	6a00      	ldr	r0, [r0, #32]
   b9b52:	6803      	ldr	r3, [r0, #0]
   b9b54:	6a1b      	ldr	r3, [r3, #32]
{
   b9b56:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9b58:	4798      	blx	r3
    selectSlave();
   b9b5a:	6823      	ldr	r3, [r4, #0]
   b9b5c:	4620      	mov	r0, r4
   b9b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9b60:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b9b62:	6a20      	ldr	r0, [r4, #32]
   b9b64:	6803      	ldr	r3, [r0, #0]
   b9b66:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b9b6a:	681b      	ldr	r3, [r3, #0]
   b9b6c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9b6e:	6a20      	ldr	r0, [r4, #32]
   b9b70:	6803      	ldr	r3, [r0, #0]
   b9b72:	2100      	movs	r1, #0
   b9b74:	681b      	ldr	r3, [r3, #0]
   b9b76:	4798      	blx	r3
    deselectSlave();
   b9b78:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b9b7a:	4605      	mov	r5, r0
    deselectSlave();
   b9b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9b7e:	4620      	mov	r0, r4
   b9b80:	4798      	blx	r3
    _spi.endTransaction();
   b9b82:	6a20      	ldr	r0, [r4, #32]
   b9b84:	6803      	ldr	r3, [r0, #0]
   b9b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9b88:	4798      	blx	r3
}
   b9b8a:	4628      	mov	r0, r5
   b9b8c:	bd38      	pop	{r3, r4, r5, pc}

000b9b8e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b9b8e:	b570      	push	{r4, r5, r6, lr}
   b9b90:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9b92:	6a00      	ldr	r0, [r0, #32]
   b9b94:	6803      	ldr	r3, [r0, #0]
   b9b96:	6a1b      	ldr	r3, [r3, #32]
{
   b9b98:	4616      	mov	r6, r2
   b9b9a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b9b9c:	4798      	blx	r3
    selectSlave();
   b9b9e:	6823      	ldr	r3, [r4, #0]
   b9ba0:	4620      	mov	r0, r4
   b9ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9ba4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b9ba6:	6a20      	ldr	r0, [r4, #32]
   b9ba8:	6803      	ldr	r3, [r0, #0]
   b9baa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b9bae:	681b      	ldr	r3, [r3, #0]
   b9bb0:	4798      	blx	r3
   b9bb2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b9bb4:	6a20      	ldr	r0, [r4, #32]
   b9bb6:	6803      	ldr	r3, [r0, #0]
   b9bb8:	4631      	mov	r1, r6
   b9bba:	681b      	ldr	r3, [r3, #0]
   b9bbc:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9bbe:	2001      	movs	r0, #1
   b9bc0:	f001 f8a6 	bl	bad10 <HAL_Delay_Microseconds>
    deselectSlave();
   b9bc4:	6823      	ldr	r3, [r4, #0]
   b9bc6:	4620      	mov	r0, r4
   b9bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9bca:	4798      	blx	r3
    _spi.endTransaction();
   b9bcc:	6a20      	ldr	r0, [r4, #32]
   b9bce:	6803      	ldr	r3, [r0, #0]
   b9bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9bd2:	4798      	blx	r3
}
   b9bd4:	4628      	mov	r0, r5
   b9bd6:	bd70      	pop	{r4, r5, r6, pc}

000b9bd8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b9bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bda:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9bdc:	6a00      	ldr	r0, [r0, #32]
{
   b9bde:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9be0:	6803      	ldr	r3, [r0, #0]
   b9be2:	6a1b      	ldr	r3, [r3, #32]
{
   b9be4:	460f      	mov	r7, r1
   b9be6:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9be8:	4798      	blx	r3
    selectSlave();
   b9bea:	6823      	ldr	r3, [r4, #0]
   b9bec:	4620      	mov	r0, r4
   b9bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9bf0:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b9bf2:	6a20      	ldr	r0, [r4, #32]
   b9bf4:	6803      	ldr	r3, [r0, #0]
   b9bf6:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b9bfa:	681b      	ldr	r3, [r3, #0]
   b9bfc:	4798      	blx	r3
   b9bfe:	442e      	add	r6, r5
   b9c00:	4607      	mov	r7, r0
    while (len--)
   b9c02:	42b5      	cmp	r5, r6
   b9c04:	d007      	beq.n	b9c16 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b9c06:	6a20      	ldr	r0, [r4, #32]
   b9c08:	6803      	ldr	r3, [r0, #0]
   b9c0a:	2100      	movs	r1, #0
   b9c0c:	681b      	ldr	r3, [r3, #0]
   b9c0e:	4798      	blx	r3
   b9c10:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b9c14:	e7f5      	b.n	b9c02 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b9c16:	6823      	ldr	r3, [r4, #0]
   b9c18:	4620      	mov	r0, r4
   b9c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9c1c:	4798      	blx	r3
    _spi.endTransaction();
   b9c1e:	6a20      	ldr	r0, [r4, #32]
   b9c20:	6803      	ldr	r3, [r0, #0]
   b9c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c24:	4798      	blx	r3
}
   b9c26:	4638      	mov	r0, r7
   b9c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c2a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b9c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9c2c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b9c2e:	6a00      	ldr	r0, [r0, #32]
{
   b9c30:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b9c32:	6803      	ldr	r3, [r0, #0]
   b9c34:	6a1b      	ldr	r3, [r3, #32]
{
   b9c36:	460f      	mov	r7, r1
   b9c38:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b9c3a:	4798      	blx	r3
    selectSlave();
   b9c3c:	6823      	ldr	r3, [r4, #0]
   b9c3e:	4620      	mov	r0, r4
   b9c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9c42:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b9c44:	6a20      	ldr	r0, [r4, #32]
   b9c46:	6803      	ldr	r3, [r0, #0]
   b9c48:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b9c4c:	681b      	ldr	r3, [r3, #0]
   b9c4e:	4798      	blx	r3
   b9c50:	442e      	add	r6, r5
   b9c52:	4607      	mov	r7, r0
    while (len--)
   b9c54:	42b5      	cmp	r5, r6
   b9c56:	d006      	beq.n	b9c66 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b9c58:	6a20      	ldr	r0, [r4, #32]
   b9c5a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9c5e:	6803      	ldr	r3, [r0, #0]
   b9c60:	681b      	ldr	r3, [r3, #0]
   b9c62:	4798      	blx	r3
    while (len--)
   b9c64:	e7f6      	b.n	b9c54 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b9c66:	6823      	ldr	r3, [r4, #0]
   b9c68:	4620      	mov	r0, r4
   b9c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9c6c:	4798      	blx	r3
    _spi.endTransaction();
   b9c6e:	6a20      	ldr	r0, [r4, #32]
   b9c70:	6803      	ldr	r3, [r0, #0]
   b9c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c74:	4798      	blx	r3
}
   b9c76:	4638      	mov	r0, r7
   b9c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c7a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b9c7a:	6a00      	ldr	r0, [r0, #32]
   b9c7c:	6803      	ldr	r3, [r0, #0]
   b9c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9c80:	4718      	bx	r3

000b9c82 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b9c82:	2001      	movs	r0, #1
   b9c84:	4770      	bx	lr

000b9c86 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b9c86:	20fb      	movs	r0, #251	; 0xfb
   b9c88:	4770      	bx	lr

000b9c8a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b9c8a:	4770      	bx	lr

000b9c8c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b9c8c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b9c8e:	7903      	ldrb	r3, [r0, #4]
   b9c90:	2b05      	cmp	r3, #5
{
   b9c92:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b9c94:	d010      	beq.n	b9cb8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b9c96:	6803      	ldr	r3, [r0, #0]
   b9c98:	2105      	movs	r1, #5
   b9c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9c9e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b9ca0:	2207      	movs	r2, #7
   b9ca2:	2101      	movs	r1, #1
   b9ca4:	4620      	mov	r0, r4
   b9ca6:	f7ff ff72 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b9caa:	2280      	movs	r2, #128	; 0x80
   b9cac:	2140      	movs	r1, #64	; 0x40
   b9cae:	4620      	mov	r0, r4
   b9cb0:	f7ff ff6d 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b9cb4:	2305      	movs	r3, #5
   b9cb6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b9cb8:	7923      	ldrb	r3, [r4, #4]
   b9cba:	2b05      	cmp	r3, #5
   b9cbc:	d0fc      	beq.n	b9cb8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b9cbe:	7e20      	ldrb	r0, [r4, #24]
}
   b9cc0:	bd10      	pop	{r4, pc}

000b9cc2 <_ZN7RH_RF95D0Ev>:
   b9cc2:	b510      	push	{r4, lr}
   b9cc4:	f44f 7198 	mov.w	r1, #304	; 0x130
   b9cc8:	4604      	mov	r4, r0
   b9cca:	f7fa f9e8 	bl	b409e <_ZdlPvj>
   b9cce:	4620      	mov	r0, r4
   b9cd0:	bd10      	pop	{r4, pc}

000b9cd2 <_ZN7RH_RF955sleepEv>:
{
   b9cd2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b9cd4:	7903      	ldrb	r3, [r0, #4]
   b9cd6:	2b01      	cmp	r3, #1
{
   b9cd8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b9cda:	d00b      	beq.n	b9cf4 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b9cdc:	6803      	ldr	r3, [r0, #0]
   b9cde:	2101      	movs	r1, #1
   b9ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9ce4:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b9ce6:	2200      	movs	r2, #0
   b9ce8:	2101      	movs	r1, #1
   b9cea:	4620      	mov	r0, r4
   b9cec:	f7ff ff4f 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b9cf0:	2301      	movs	r3, #1
   b9cf2:	7123      	strb	r3, [r4, #4]
}
   b9cf4:	2001      	movs	r0, #1
   b9cf6:	bd10      	pop	{r4, pc}

000b9cf8 <_ZN7RH_RF954recvEPhS0_>:
{
   b9cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b9cfa:	6803      	ldr	r3, [r0, #0]
   b9cfc:	68db      	ldr	r3, [r3, #12]
{
   b9cfe:	4604      	mov	r4, r0
   b9d00:	460f      	mov	r7, r1
   b9d02:	4615      	mov	r5, r2
    if (!available())
   b9d04:	4798      	blx	r3
   b9d06:	4606      	mov	r6, r0
   b9d08:	b1b0      	cbz	r0, b9d38 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b9d0a:	b187      	cbz	r7, b9d2e <_ZN7RH_RF954recvEPhS0_+0x36>
   b9d0c:	b17d      	cbz	r5, b9d2e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b9d0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b9d12:	782a      	ldrb	r2, [r5, #0]
   b9d14:	3b03      	subs	r3, #3
   b9d16:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b9d18:	bfde      	ittt	le
   b9d1a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b9d1e:	3b04      	suble	r3, #4
   b9d20:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b9d22:	782a      	ldrb	r2, [r5, #0]
   b9d24:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b9d28:	4638      	mov	r0, r7
   b9d2a:	f005 fab3 	bl	bf294 <memcpy>
    _rxBufValid = false;
   b9d2e:	2300      	movs	r3, #0
   b9d30:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b9d34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b9d38:	4630      	mov	r0, r6
   b9d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9d3c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b9d3c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b9d3e:	b538      	push	{r3, r4, r5, lr}
   b9d40:	4605      	mov	r5, r0
   b9d42:	460c      	mov	r4, r1
	if (power > 20)
   b9d44:	dc14      	bgt.n	b9d70 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b9d46:	2901      	cmp	r1, #1
   b9d48:	dd14      	ble.n	b9d74 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b9d4a:	2911      	cmp	r1, #17
   b9d4c:	dd13      	ble.n	b9d76 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b9d4e:	2207      	movs	r2, #7
   b9d50:	214d      	movs	r1, #77	; 0x4d
   b9d52:	4628      	mov	r0, r5
   b9d54:	f7ff ff1b 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b9d58:	3c03      	subs	r4, #3
   b9d5a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9d5c:	1ea2      	subs	r2, r4, #2
   b9d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b9d62:	4628      	mov	r0, r5
   b9d64:	b2d2      	uxtb	r2, r2
}
   b9d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b9d6a:	2109      	movs	r1, #9
   b9d6c:	f7ff bf0f 	b.w	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b9d70:	2414      	movs	r4, #20
   b9d72:	e7ec      	b.n	b9d4e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b9d74:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b9d76:	2204      	movs	r2, #4
   b9d78:	214d      	movs	r1, #77	; 0x4d
   b9d7a:	4628      	mov	r0, r5
   b9d7c:	f7ff ff07 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
   b9d80:	e7ec      	b.n	b9d5c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b9d84 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b9d84:	b538      	push	{r3, r4, r5, lr}
   b9d86:	4604      	mov	r4, r0
   b9d88:	4615      	mov	r5, r2
    _rxBufValid(0)
   b9d8a:	461a      	mov	r2, r3
   b9d8c:	f7ff fece 	bl	b9b2c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b9d90:	4b09      	ldr	r3, [pc, #36]	; (b9db8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b9d92:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b9d94:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b9d96:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b9d98:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b9d9c:	2201      	movs	r2, #1
    _rxBufValid(0)
   b9d9e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b9da2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b9da6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b9daa:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b9dae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b9db2:	4620      	mov	r0, r4
   b9db4:	bd38      	pop	{r3, r4, r5, pc}
   b9db6:	bf00      	nop
   b9db8:	000c0bb4 	.word	0x000c0bb4

000b9dbc <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b9dbc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b9dc0:	2b03      	cmp	r3, #3
   b9dc2:	d91b      	bls.n	b9dfc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b9dc4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b9dc8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b9dca:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b9dce:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b9dd0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b9dd4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b9dd6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b9dda:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b9ddc:	7983      	ldrb	r3, [r0, #6]
   b9dde:	b933      	cbnz	r3, b9dee <_ZN7RH_RF9513validateRxBufEv+0x32>
   b9de0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b9de2:	7942      	ldrb	r2, [r0, #5]
   b9de4:	429a      	cmp	r2, r3
   b9de6:	d002      	beq.n	b9dee <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b9de8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b9dea:	2bff      	cmp	r3, #255	; 0xff
   b9dec:	d106      	bne.n	b9dfc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b9dee:	8a83      	ldrh	r3, [r0, #20]
   b9df0:	3301      	adds	r3, #1
   b9df2:	b29b      	uxth	r3, r3
   b9df4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b9df6:	2301      	movs	r3, #1
   b9df8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b9dfc:	4770      	bx	lr
	...

000b9e00 <_ZN7RH_RF9512setFrequencyEf>:
{
   b9e00:	b538      	push	{r3, r4, r5, lr}
   b9e02:	4604      	mov	r4, r0
   b9e04:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9e08:	ee10 0a10 	vmov	r0, s0
{
   b9e0c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9e10:	f004 fe9e 	bl	beb50 <__aeabi_f2d>
   b9e14:	a317      	add	r3, pc, #92	; (adr r3, b9e74 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b9e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e1a:	f004 fef1 	bl	bec00 <__aeabi_dmul>
   b9e1e:	a317      	add	r3, pc, #92	; (adr r3, b9e7c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b9e20:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e24:	f005 f816 	bl	bee54 <__aeabi_ddiv>
   b9e28:	f005 f9c2 	bl	bf1b0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9e2c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b9e2e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b9e30:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b9e34:	4620      	mov	r0, r4
   b9e36:	f7ff feaa 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b9e3a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b9e3e:	2107      	movs	r1, #7
   b9e40:	4620      	mov	r0, r4
   b9e42:	f7ff fea4 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b9e46:	b2ea      	uxtb	r2, r5
   b9e48:	2108      	movs	r1, #8
   b9e4a:	4620      	mov	r0, r4
   b9e4c:	f7ff fe9f 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b9e50:	eddf 7a07 	vldr	s15, [pc, #28]	; b9e70 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b9e54:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b9e58:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b9e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9e60:	bfac      	ite	ge
   b9e62:	2301      	movge	r3, #1
   b9e64:	2300      	movlt	r3, #0
}
   b9e66:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b9e68:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b9e6c:	bd38      	pop	{r3, r4, r5, pc}
   b9e6e:	bf00      	nop
   b9e70:	4442c000 	.word	0x4442c000
   b9e74:	00000000 	.word	0x00000000
   b9e78:	412e8480 	.word	0x412e8480
   b9e7c:	00000000 	.word	0x00000000
   b9e80:	404e8480 	.word	0x404e8480

000b9e84 <_ZN7RH_RF9511setModeIdleEv>:
{
   b9e84:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b9e86:	7903      	ldrb	r3, [r0, #4]
   b9e88:	2b02      	cmp	r3, #2
{
   b9e8a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b9e8c:	d00b      	beq.n	b9ea6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b9e8e:	6803      	ldr	r3, [r0, #0]
   b9e90:	2102      	movs	r1, #2
   b9e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b9e96:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b9e98:	2201      	movs	r2, #1
   b9e9a:	4611      	mov	r1, r2
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	f7ff fe76 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b9ea2:	2302      	movs	r3, #2
   b9ea4:	7123      	strb	r3, [r4, #4]
}
   b9ea6:	bd10      	pop	{r4, pc}

000b9ea8 <_ZN7RH_RF9515handleInterruptEv>:
{
   b9ea8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9eaa:	2112      	movs	r1, #18
{
   b9eac:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9eae:	f7ff fe4d 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9eb2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b9eb4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9eb6:	4620      	mov	r0, r4
   b9eb8:	f7ff fe48 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9ebc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b9ebe:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9ec0:	2112      	movs	r1, #18
   b9ec2:	4620      	mov	r0, r4
   b9ec4:	f7ff fe63 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b9ec8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b9eca:	2b04      	cmp	r3, #4
   b9ecc:	d107      	bne.n	b9ede <_ZN7RH_RF9515handleInterruptEv+0x36>
   b9ece:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b9ed2:	d117      	bne.n	b9f04 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b9ed4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b9ed8:	b10b      	cbz	r3, b9ede <_ZN7RH_RF9515handleInterruptEv+0x36>
   b9eda:	0670      	lsls	r0, r6, #25
   b9edc:	d512      	bpl.n	b9f04 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b9ede:	7923      	ldrb	r3, [r4, #4]
   b9ee0:	2b04      	cmp	r3, #4
   b9ee2:	d101      	bne.n	b9ee8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b9ee4:	0669      	lsls	r1, r5, #25
   b9ee6:	d422      	bmi.n	b9f2e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b9ee8:	7923      	ldrb	r3, [r4, #4]
   b9eea:	2b03      	cmp	r3, #3
   b9eec:	d101      	bne.n	b9ef2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b9eee:	072a      	lsls	r2, r5, #28
   b9ef0:	d468      	bmi.n	b9fc4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b9ef2:	7923      	ldrb	r3, [r4, #4]
   b9ef4:	2b05      	cmp	r3, #5
   b9ef6:	d10e      	bne.n	b9f16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b9ef8:	076b      	lsls	r3, r5, #29
   b9efa:	d50c      	bpl.n	b9f16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b9efc:	f005 0501 	and.w	r5, r5, #1
   b9f00:	7625      	strb	r5, [r4, #24]
   b9f02:	e063      	b.n	b9fcc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b9f04:	8a63      	ldrh	r3, [r4, #18]
   b9f06:	3301      	adds	r3, #1
   b9f08:	b29b      	uxth	r3, r3
   b9f0a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b9f0c:	2300      	movs	r3, #0
   b9f0e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b9f12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9f16:	22ff      	movs	r2, #255	; 0xff
   b9f18:	2112      	movs	r1, #18
   b9f1a:	4620      	mov	r0, r4
   b9f1c:	f7ff fe37 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9f20:	4620      	mov	r0, r4
   b9f22:	22ff      	movs	r2, #255	; 0xff
}
   b9f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b9f28:	2112      	movs	r1, #18
   b9f2a:	f7ff be30 	b.w	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9f2e:	2113      	movs	r1, #19
   b9f30:	4620      	mov	r0, r4
   b9f32:	f7ff fe0b 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b9f36:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b9f38:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b9f3a:	4620      	mov	r0, r4
   b9f3c:	f7ff fe06 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
   b9f40:	210d      	movs	r1, #13
   b9f42:	4602      	mov	r2, r0
   b9f44:	4620      	mov	r0, r4
   b9f46:	f7ff fe22 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b9f4a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b9f4e:	462b      	mov	r3, r5
   b9f50:	2100      	movs	r1, #0
   b9f52:	4620      	mov	r0, r4
   b9f54:	f7ff fe40 	bl	b9bd8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b9f58:	2119      	movs	r1, #25
	_bufLen = len;
   b9f5a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b9f5e:	4620      	mov	r0, r4
   b9f60:	f7ff fdf4 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
   b9f64:	b240      	sxtb	r0, r0
   b9f66:	2800      	cmp	r0, #0
   b9f68:	bfb8      	it	lt
   b9f6a:	3003      	addlt	r0, #3
   b9f6c:	1080      	asrs	r0, r0, #2
   b9f6e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9f72:	211a      	movs	r1, #26
   b9f74:	4620      	mov	r0, r4
   b9f76:	f7ff fde9 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b9f7a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9f7e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b9f80:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b9f82:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9f84:	bfa9      	itett	ge
   b9f86:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b9f88:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9f8a:	b21b      	sxthge	r3, r3
   b9f8c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b9f8e:	bfb2      	itee	lt
   b9f90:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b9f92:	220f      	movge	r2, #15
   b9f94:	fb93 f3f2 	sdivge	r3, r3, r2
   b9f98:	b21b      	sxth	r3, r3
   b9f9a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b9f9c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b9fa0:	b16b      	cbz	r3, b9fbe <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b9fa2:	8a23      	ldrh	r3, [r4, #16]
   b9fa4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b9fa6:	b21b      	sxth	r3, r3
   b9fa8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b9faa:	4620      	mov	r0, r4
   b9fac:	f7ff ff06 	bl	b9dbc <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b9fb0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b9fb4:	2b00      	cmp	r3, #0
   b9fb6:	d0ae      	beq.n	b9f16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b9fb8:	f7ff ff64 	bl	b9e84 <_ZN7RH_RF9511setModeIdleEv>
   b9fbc:	e7ab      	b.n	b9f16 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b9fbe:	8a23      	ldrh	r3, [r4, #16]
   b9fc0:	3ba4      	subs	r3, #164	; 0xa4
   b9fc2:	e7f0      	b.n	b9fa6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b9fc4:	8ae3      	ldrh	r3, [r4, #22]
   b9fc6:	3301      	adds	r3, #1
   b9fc8:	b29b      	uxth	r3, r3
   b9fca:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b9fcc:	4620      	mov	r0, r4
   b9fce:	e7f3      	b.n	b9fb8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b9fd0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b9fd0:	4b02      	ldr	r3, [pc, #8]	; (b9fdc <_ZN7RH_RF954isr0Ev+0xc>)
   b9fd2:	6818      	ldr	r0, [r3, #0]
   b9fd4:	b108      	cbz	r0, b9fda <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b9fd6:	f7ff bf67 	b.w	b9ea8 <_ZN7RH_RF9515handleInterruptEv>
}
   b9fda:	4770      	bx	lr
   b9fdc:	2003e56c 	.word	0x2003e56c

000b9fe0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b9fe0:	4b02      	ldr	r3, [pc, #8]	; (b9fec <_ZN7RH_RF954isr1Ev+0xc>)
   b9fe2:	6858      	ldr	r0, [r3, #4]
   b9fe4:	b108      	cbz	r0, b9fea <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b9fe6:	f7ff bf5f 	b.w	b9ea8 <_ZN7RH_RF9515handleInterruptEv>
}
   b9fea:	4770      	bx	lr
   b9fec:	2003e56c 	.word	0x2003e56c

000b9ff0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b9ff0:	4b02      	ldr	r3, [pc, #8]	; (b9ffc <_ZN7RH_RF954isr2Ev+0xc>)
   b9ff2:	6898      	ldr	r0, [r3, #8]
   b9ff4:	b108      	cbz	r0, b9ffa <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b9ff6:	f7ff bf57 	b.w	b9ea8 <_ZN7RH_RF9515handleInterruptEv>
}
   b9ffa:	4770      	bx	lr
   b9ffc:	2003e56c 	.word	0x2003e56c

000ba000 <_ZN7RH_RF959setModeRxEv>:
{
   ba000:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   ba002:	7903      	ldrb	r3, [r0, #4]
   ba004:	2b04      	cmp	r3, #4
{
   ba006:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   ba008:	d010      	beq.n	ba02c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   ba00a:	6803      	ldr	r3, [r0, #0]
   ba00c:	2104      	movs	r1, #4
   ba00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba012:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   ba014:	2205      	movs	r2, #5
   ba016:	2101      	movs	r1, #1
   ba018:	4620      	mov	r0, r4
   ba01a:	f7ff fdb8 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   ba01e:	2200      	movs	r2, #0
   ba020:	2140      	movs	r1, #64	; 0x40
   ba022:	4620      	mov	r0, r4
   ba024:	f7ff fdb3 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   ba028:	2304      	movs	r3, #4
   ba02a:	7123      	strb	r3, [r4, #4]
}
   ba02c:	bd10      	pop	{r4, pc}

000ba02e <_ZN7RH_RF959availableEv>:
{
   ba02e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   ba030:	7903      	ldrb	r3, [r0, #4]
   ba032:	2b03      	cmp	r3, #3
{
   ba034:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   ba036:	d005      	beq.n	ba044 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   ba038:	f7ff ffe2 	bl	ba000 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   ba03c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   ba040:	b2c0      	uxtb	r0, r0
}
   ba042:	bd10      	pop	{r4, pc}
	return false;
   ba044:	2000      	movs	r0, #0
   ba046:	e7fc      	b.n	ba042 <_ZN7RH_RF959availableEv+0x14>

000ba048 <_ZN7RH_RF959setModeTxEv>:
{
   ba048:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   ba04a:	7903      	ldrb	r3, [r0, #4]
   ba04c:	2b03      	cmp	r3, #3
{
   ba04e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   ba050:	d010      	beq.n	ba074 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   ba052:	6803      	ldr	r3, [r0, #0]
   ba054:	2103      	movs	r1, #3
   ba056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   ba05a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   ba05c:	2203      	movs	r2, #3
   ba05e:	2101      	movs	r1, #1
   ba060:	4620      	mov	r0, r4
   ba062:	f7ff fd94 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   ba066:	2240      	movs	r2, #64	; 0x40
   ba068:	4611      	mov	r1, r2
   ba06a:	4620      	mov	r0, r4
   ba06c:	f7ff fd8f 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   ba070:	2303      	movs	r3, #3
   ba072:	7123      	strb	r3, [r4, #4]
}
   ba074:	bd10      	pop	{r4, pc}

000ba076 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba076:	2afb      	cmp	r2, #251	; 0xfb
{
   ba078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba07a:	4604      	mov	r4, r0
   ba07c:	460f      	mov	r7, r1
   ba07e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   ba080:	d902      	bls.n	ba088 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   ba082:	2600      	movs	r6, #0
}
   ba084:	4630      	mov	r0, r6
   ba086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   ba088:	6803      	ldr	r3, [r0, #0]
   ba08a:	6a1b      	ldr	r3, [r3, #32]
   ba08c:	4798      	blx	r3
    setModeIdle();
   ba08e:	4620      	mov	r0, r4
   ba090:	f7ff fef8 	bl	b9e84 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   ba094:	6823      	ldr	r3, [r4, #0]
   ba096:	4620      	mov	r0, r4
   ba098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba09a:	4798      	blx	r3
   ba09c:	4606      	mov	r6, r0
   ba09e:	2800      	cmp	r0, #0
   ba0a0:	d0ef      	beq.n	ba082 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   ba0a2:	2200      	movs	r2, #0
   ba0a4:	210d      	movs	r1, #13
   ba0a6:	4620      	mov	r0, r4
   ba0a8:	f7ff fd71 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   ba0ac:	7ae2      	ldrb	r2, [r4, #11]
   ba0ae:	2100      	movs	r1, #0
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	f7ff fd6c 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   ba0b6:	7b22      	ldrb	r2, [r4, #12]
   ba0b8:	2100      	movs	r1, #0
   ba0ba:	4620      	mov	r0, r4
   ba0bc:	f7ff fd67 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   ba0c0:	7b62      	ldrb	r2, [r4, #13]
   ba0c2:	2100      	movs	r1, #0
   ba0c4:	4620      	mov	r0, r4
   ba0c6:	f7ff fd62 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   ba0ca:	7ba2      	ldrb	r2, [r4, #14]
   ba0cc:	2100      	movs	r1, #0
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	f7ff fd5d 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   ba0d4:	462b      	mov	r3, r5
   ba0d6:	463a      	mov	r2, r7
   ba0d8:	2100      	movs	r1, #0
   ba0da:	4620      	mov	r0, r4
   ba0dc:	f7ff fda5 	bl	b9c2a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   ba0e0:	1d2a      	adds	r2, r5, #4
   ba0e2:	b2d2      	uxtb	r2, r2
   ba0e4:	2122      	movs	r1, #34	; 0x22
   ba0e6:	4620      	mov	r0, r4
   ba0e8:	f7ff fd51 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   ba0ec:	4620      	mov	r0, r4
   ba0ee:	f7ff ffab 	bl	ba048 <_ZN7RH_RF959setModeTxEv>
    return true;
   ba0f2:	e7c7      	b.n	ba084 <_ZN7RH_RF954sendEPKhh+0xe>

000ba0f4 <_ZN7RH_RF9510setTxPowerEab>:
{
   ba0f4:	b510      	push	{r4, lr}
   ba0f6:	4604      	mov	r4, r0
    _useRFO = useRFO;
   ba0f8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   ba0fc:	b172      	cbz	r2, ba11c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   ba0fe:	f381 0204 	usat	r2, #4, r1
   ba102:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   ba106:	b2d2      	uxtb	r2, r2
   ba108:	2109      	movs	r1, #9
   ba10a:	f7ff fd40 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba10e:	4620      	mov	r0, r4
   ba110:	2204      	movs	r2, #4
}
   ba112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   ba116:	214d      	movs	r1, #77	; 0x4d
   ba118:	f7ff bd39 	b.w	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
}
   ba11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba120:	f7ff be0c 	b.w	b9d3c <_ZN7RH_RF9510setTxPowerEab.part.0>

000ba124 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   ba124:	b538      	push	{r3, r4, r5, lr}
   ba126:	460c      	mov	r4, r1
   ba128:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   ba12a:	780a      	ldrb	r2, [r1, #0]
   ba12c:	211d      	movs	r1, #29
   ba12e:	f7ff fd2e 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   ba132:	7862      	ldrb	r2, [r4, #1]
   ba134:	211e      	movs	r1, #30
   ba136:	4628      	mov	r0, r5
   ba138:	f7ff fd29 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba13c:	78a2      	ldrb	r2, [r4, #2]
   ba13e:	4628      	mov	r0, r5
   ba140:	2126      	movs	r1, #38	; 0x26
}
   ba142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   ba146:	f7ff bd22 	b.w	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000ba14c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba14c:	2905      	cmp	r1, #5
{
   ba14e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   ba150:	d80f      	bhi.n	ba172 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba152:	4b09      	ldr	r3, [pc, #36]	; (ba178 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   ba154:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   ba158:	185c      	adds	r4, r3, r1
   ba15a:	5a5a      	ldrh	r2, [r3, r1]
   ba15c:	78a3      	ldrb	r3, [r4, #2]
   ba15e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   ba162:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   ba164:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   ba168:	f7ff ffdc 	bl	ba124 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   ba16c:	2001      	movs	r0, #1
}
   ba16e:	b002      	add	sp, #8
   ba170:	bd10      	pop	{r4, pc}
        return false;
   ba172:	2000      	movs	r0, #0
   ba174:	e7fb      	b.n	ba16e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   ba176:	bf00      	nop
   ba178:	000c0b9c 	.word	0x000c0b9c

000ba17c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   ba17c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba17e:	0a0a      	lsrs	r2, r1, #8
{
   ba180:	4605      	mov	r5, r0
   ba182:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   ba184:	2120      	movs	r1, #32
   ba186:	f7ff fd02 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba18a:	b2e2      	uxtb	r2, r4
   ba18c:	4628      	mov	r0, r5
   ba18e:	2121      	movs	r1, #33	; 0x21
}
   ba190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   ba194:	f7ff bcfb 	b.w	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>

000ba198 <_ZN7RH_RF954initEv>:
{
   ba198:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba19a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   ba19c:	f7ff fca6 	bl	b9aec <_ZN11RHSPIDriver4initEv>
   ba1a0:	4606      	mov	r6, r0
   ba1a2:	b918      	cbnz	r0, ba1ac <_ZN7RH_RF954initEv+0x14>
	return false;
   ba1a4:	2600      	movs	r6, #0
}
   ba1a6:	4630      	mov	r0, r6
   ba1a8:	b002      	add	sp, #8
   ba1aa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   ba1ac:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   ba1b0:	2dff      	cmp	r5, #255	; 0xff
   ba1b2:	d054      	beq.n	ba25e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   ba1b4:	4629      	mov	r1, r5
   ba1b6:	4620      	mov	r0, r4
   ba1b8:	f7ff fd5f 	bl	b9c7a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   ba1bc:	2280      	movs	r2, #128	; 0x80
   ba1be:	2101      	movs	r1, #1
   ba1c0:	4620      	mov	r0, r4
   ba1c2:	f7ff fce4 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   ba1c6:	200a      	movs	r0, #10
   ba1c8:	f001 f9be 	bl	bb548 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   ba1cc:	2101      	movs	r1, #1
   ba1ce:	4620      	mov	r0, r4
   ba1d0:	f7ff fcbc 	bl	b9b4c <_ZN11RHSPIDriver7spiReadEh>
   ba1d4:	2880      	cmp	r0, #128	; 0x80
   ba1d6:	d1e5      	bne.n	ba1a4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   ba1d8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   ba1dc:	28ff      	cmp	r0, #255	; 0xff
   ba1de:	d01c      	beq.n	ba21a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   ba1e0:	2100      	movs	r1, #0
   ba1e2:	f004 fa39 	bl	be658 <pinMode>
	if (_myInterruptIndex == 0xff)
   ba1e6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   ba1ea:	2bff      	cmp	r3, #255	; 0xff
   ba1ec:	d107      	bne.n	ba1fe <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   ba1ee:	4a26      	ldr	r2, [pc, #152]	; (ba288 <_ZN7RH_RF954initEv+0xf0>)
   ba1f0:	7813      	ldrb	r3, [r2, #0]
   ba1f2:	2b03      	cmp	r3, #3
   ba1f4:	d8d6      	bhi.n	ba1a4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   ba1f6:	1c59      	adds	r1, r3, #1
   ba1f8:	7011      	strb	r1, [r2, #0]
   ba1fa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   ba1fe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   ba202:	4b22      	ldr	r3, [pc, #136]	; (ba28c <_ZN7RH_RF954initEv+0xf4>)
   ba204:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   ba208:	bb62      	cbnz	r2, ba264 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   ba20a:	4921      	ldr	r1, [pc, #132]	; (ba290 <_ZN7RH_RF954initEv+0xf8>)
   ba20c:	9200      	str	r2, [sp, #0]
   ba20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba212:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba214:	b2a8      	uxth	r0, r5
   ba216:	f001 ff0d 	bl	bc034 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   ba21a:	2200      	movs	r2, #0
   ba21c:	210e      	movs	r1, #14
   ba21e:	4620      	mov	r0, r4
   ba220:	f7ff fcb5 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   ba224:	2200      	movs	r2, #0
   ba226:	210f      	movs	r1, #15
   ba228:	4620      	mov	r0, r4
   ba22a:	f7ff fcb0 	bl	b9b8e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   ba22e:	4620      	mov	r0, r4
   ba230:	f7ff fe28 	bl	b9e84 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   ba234:	2100      	movs	r1, #0
   ba236:	4620      	mov	r0, r4
   ba238:	f7ff ff88 	bl	ba14c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   ba23c:	2108      	movs	r1, #8
   ba23e:	4620      	mov	r0, r4
   ba240:	f7ff ff9c 	bl	ba17c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   ba244:	ed9f 0a13 	vldr	s0, [pc, #76]	; ba294 <_ZN7RH_RF954initEv+0xfc>
   ba248:	4620      	mov	r0, r4
   ba24a:	f7ff fdd9 	bl	b9e00 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   ba24e:	2300      	movs	r3, #0
   ba250:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   ba254:	210d      	movs	r1, #13
   ba256:	4620      	mov	r0, r4
   ba258:	f7ff fd70 	bl	b9d3c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   ba25c:	e7a3      	b.n	ba1a6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   ba25e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   ba262:	e7ab      	b.n	ba1bc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   ba264:	2a01      	cmp	r2, #1
   ba266:	f04f 0300 	mov.w	r3, #0
   ba26a:	d104      	bne.n	ba276 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   ba26c:	9300      	str	r3, [sp, #0]
   ba26e:	490a      	ldr	r1, [pc, #40]	; (ba298 <_ZN7RH_RF954initEv+0x100>)
   ba270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba274:	e7ce      	b.n	ba214 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   ba276:	2a02      	cmp	r2, #2
   ba278:	d194      	bne.n	ba1a4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   ba27a:	9300      	str	r3, [sp, #0]
   ba27c:	4907      	ldr	r1, [pc, #28]	; (ba29c <_ZN7RH_RF954initEv+0x104>)
   ba27e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba282:	2201      	movs	r2, #1
   ba284:	e7c6      	b.n	ba214 <_ZN7RH_RF954initEv+0x7c>
   ba286:	bf00      	nop
   ba288:	2003e569 	.word	0x2003e569
   ba28c:	2003e56c 	.word	0x2003e56c
   ba290:	000b9fd1 	.word	0x000b9fd1
   ba294:	43d90000 	.word	0x43d90000
   ba298:	000b9fe1 	.word	0x000b9fe1
   ba29c:	000b9ff1 	.word	0x000b9ff1

000ba2a0 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   ba2a0:	2001      	movs	r0, #1
   ba2a2:	4770      	bx	lr

000ba2a4 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   ba2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba2a6:	4d1f      	ldr	r5, [pc, #124]	; (ba324 <_ZN14SequentialFileC1Ev+0x80>)
   ba2a8:	4b1f      	ldr	r3, [pc, #124]	; (ba328 <_ZN14SequentialFileC1Ev+0x84>)
   ba2aa:	4604      	mov	r4, r0
   ba2ac:	4629      	mov	r1, r5
   ba2ae:	f840 3b04 	str.w	r3, [r0], #4
   ba2b2:	f003 fc7e 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba2b6:	491d      	ldr	r1, [pc, #116]	; (ba32c <_ZN14SequentialFileC1Ev+0x88>)
   ba2b8:	f104 0014 	add.w	r0, r4, #20
   ba2bc:	f003 fc79 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba2c0:	4629      	mov	r1, r5
   ba2c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba2c6:	f003 fc74 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba2ca:	2300      	movs	r3, #0
   ba2cc:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba2d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   ba2d4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   ba2d8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   ba2dc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   ba2e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba2e4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba2e6:	2308      	movs	r3, #8
   ba2e8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba2ea:	2020      	movs	r0, #32
   ba2ec:	f7f9 fed3 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba2f0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba2f2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba2f4:	3d01      	subs	r5, #1
   ba2f6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba2f8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   ba2fc:	4606      	mov	r6, r0
   ba2fe:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba302:	f7f9 fec8 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba306:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba30a:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   ba30e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   ba312:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba314:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba316:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   ba318:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba31a:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   ba31c:	6667      	str	r7, [r4, #100]	; 0x64

}
   ba31e:	4620      	mov	r0, r4
   ba320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba322:	bf00      	nop
   ba324:	000c0f58 	.word	0x000c0f58
   ba328:	000c0d38 	.word	0x000c0d38
   ba32c:	000c0c38 	.word	0x000c0c38

000ba330 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   ba332:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   ba334:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   ba336:	4628      	mov	r0, r5
   ba338:	f003 fc99 	bl	bdc6e <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   ba33c:	490e      	ldr	r1, [pc, #56]	; (ba378 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   ba33e:	4668      	mov	r0, sp
   ba340:	f003 fc37 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba344:	4669      	mov	r1, sp
   ba346:	4628      	mov	r0, r5
   ba348:	f003 fcfe 	bl	bdd48 <_ZNK6String8endsWithERKS_>
   ba34c:	4606      	mov	r6, r0
   ba34e:	4668      	mov	r0, sp
   ba350:	f003 fbe4 	bl	bdb1c <_ZN6StringD1Ev>
   ba354:	b16e      	cbz	r6, ba372 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   ba356:	68e3      	ldr	r3, [r4, #12]
   ba358:	2200      	movs	r2, #0
   ba35a:	3b01      	subs	r3, #1
   ba35c:	4629      	mov	r1, r5
   ba35e:	4668      	mov	r0, sp
   ba360:	f003 fd08 	bl	bdd74 <_ZNK6String9substringEjj>
   ba364:	4669      	mov	r1, sp
   ba366:	4628      	mov	r0, r5
   ba368:	f003 fc79 	bl	bdc5e <_ZN6StringaSEOS_>
   ba36c:	4668      	mov	r0, sp
   ba36e:	f003 fbd5 	bl	bdb1c <_ZN6StringD1Ev>
    }
    return *this; 
};
   ba372:	4620      	mov	r0, r4
   ba374:	b004      	add	sp, #16
   ba376:	bd70      	pop	{r4, r5, r6, pc}
   ba378:	000c0c3d 	.word	0x000c0c3d

000ba37c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   ba37c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   ba37e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   ba380:	4604      	mov	r4, r0
    if (!queueMutex) {
   ba382:	b913      	cbnz	r3, ba38a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   ba384:	303c      	adds	r0, #60	; 0x3c
   ba386:	f000 fc63 	bl	bac50 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   ba38a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   ba38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   ba390:	f000 bc66 	b.w	bac60 <os_mutex_lock>

000ba394 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   ba394:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba396:	f000 bc6b 	b.w	bac70 <os_mutex_unlock>
	...

000ba39c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba39c:	b510      	push	{r4, lr}
   ba39e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   ba3a0:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   ba3a2:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   ba3a4:	f000 fe1c 	bl	bafe0 <stat>
    if (result == 0) {
   ba3a8:	b9d0      	cbnz	r0, ba3e0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba3aa:	9b01      	ldr	r3, [sp, #4]
   ba3ac:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   ba3ae:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   ba3b0:	d506      	bpl.n	ba3c0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   ba3b2:	4915      	ldr	r1, [pc, #84]	; (ba408 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   ba3b4:	4815      	ldr	r0, [pc, #84]	; (ba40c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba3b6:	f7f9 fe91 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
        return true;
   ba3ba:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   ba3bc:	b016      	add	sp, #88	; 0x58
   ba3be:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   ba3c0:	4812      	ldr	r0, [pc, #72]	; (ba40c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba3c2:	4913      	ldr	r1, [pc, #76]	; (ba410 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   ba3c4:	f7fc fa80 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   ba3c8:	4620      	mov	r0, r4
   ba3ca:	f005 f979 	bl	bf6c0 <unlink>
    result = mkdir(path, 0777);
   ba3ce:	f240 11ff 	movw	r1, #511	; 0x1ff
   ba3d2:	4620      	mov	r0, r4
   ba3d4:	f000 fe0c 	bl	baff0 <mkdir>
    if (result == 0) {
   ba3d8:	b980      	cbnz	r0, ba3fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   ba3da:	490e      	ldr	r1, [pc, #56]	; (ba414 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   ba3dc:	4622      	mov	r2, r4
   ba3de:	e7e9      	b.n	ba3b4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   ba3e0:	f001 f87a 	bl	bb4d8 <__errno>
   ba3e4:	6803      	ldr	r3, [r0, #0]
   ba3e6:	2b02      	cmp	r3, #2
   ba3e8:	d0f1      	beq.n	ba3ce <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   ba3ea:	f001 f875 	bl	bb4d8 <__errno>
   ba3ee:	490a      	ldr	r1, [pc, #40]	; (ba418 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   ba3f0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   ba3f2:	4806      	ldr	r0, [pc, #24]	; (ba40c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   ba3f4:	f7fc fa68 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba3f8:	2000      	movs	r0, #0
   ba3fa:	e7df      	b.n	ba3bc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   ba3fc:	f001 f86c 	bl	bb4d8 <__errno>
   ba400:	4906      	ldr	r1, [pc, #24]	; (ba41c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   ba402:	6802      	ldr	r2, [r0, #0]
   ba404:	e7f5      	b.n	ba3f2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   ba406:	bf00      	nop
   ba408:	000c0c4a 	.word	0x000c0c4a
   ba40c:	2003e578 	.word	0x2003e578
   ba410:	000c0c67 	.word	0x000c0c67
   ba414:	000c0c98 	.word	0x000c0c98
   ba418:	000c0c84 	.word	0x000c0c84
   ba41c:	000c0ca7 	.word	0x000c0ca7

000ba420 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   ba420:	b538      	push	{r3, r4, r5, lr}
   ba422:	4615      	mov	r5, r2
   ba424:	4604      	mov	r4, r0
    String result = name;
   ba426:	f003 fbc4 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   ba42a:	b14d      	cbz	r5, ba440 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   ba42c:	782b      	ldrb	r3, [r5, #0]
   ba42e:	b13b      	cbz	r3, ba440 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   ba430:	4904      	ldr	r1, [pc, #16]	; (ba444 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   ba432:	4620      	mov	r0, r4
   ba434:	f003 fc44 	bl	bdcc0 <_ZN6String6concatEPKc>
   ba438:	4629      	mov	r1, r5
   ba43a:	4620      	mov	r0, r4
   ba43c:	f003 fc40 	bl	bdcc0 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   ba440:	4620      	mov	r0, r4
   ba442:	bd38      	pop	{r3, r4, r5, pc}
   ba444:	000c1060 	.word	0x000c1060

000ba448 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   ba448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba44a:	4605      	mov	r5, r0
   ba44c:	460e      	mov	r6, r1
   ba44e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   ba450:	6949      	ldr	r1, [r1, #20]
   ba452:	4668      	mov	r0, sp
   ba454:	f003 fcae 	bl	bddb4 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   ba458:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   ba45a:	b904      	cbnz	r4, ba45e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   ba45c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba45e:	4622      	mov	r2, r4
   ba460:	4628      	mov	r0, r5
   ba462:	f7ff ffdd 	bl	ba420 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   ba466:	4668      	mov	r0, sp
   ba468:	f003 fb58 	bl	bdb1c <_ZN6StringD1Ev>
}
   ba46c:	4628      	mov	r0, r5
   ba46e:	b004      	add	sp, #16
   ba470:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba474 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba474:	b570      	push	{r4, r5, r6, lr}
   ba476:	460c      	mov	r4, r1
   ba478:	b08e      	sub	sp, #56	; 0x38
    String result;
   ba47a:	491a      	ldr	r1, [pc, #104]	; (ba4e4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   ba47c:	e9cd 3200 	strd	r3, r2, [sp]
   ba480:	4605      	mov	r5, r0
    String result;
   ba482:	f003 fb96 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   ba486:	68e0      	ldr	r0, [r4, #12]
   ba488:	69e1      	ldr	r1, [r4, #28]
   ba48a:	4401      	add	r1, r0
   ba48c:	3104      	adds	r1, #4
   ba48e:	4628      	mov	r0, r5
   ba490:	f003 fb62 	bl	bdb58 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   ba494:	1d21      	adds	r1, r4, #4
   ba496:	a806      	add	r0, sp, #24
   ba498:	f003 fbd6 	bl	bdc48 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   ba49c:	4912      	ldr	r1, [pc, #72]	; (ba4e8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   ba49e:	a802      	add	r0, sp, #8
   ba4a0:	f003 fb87 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba4a4:	a902      	add	r1, sp, #8
   ba4a6:	a806      	add	r0, sp, #24
   ba4a8:	f003 fc1b 	bl	bdce2 <_ZplRK15StringSumHelperRK6String>
   ba4ac:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba4b0:	4606      	mov	r6, r0
   ba4b2:	4621      	mov	r1, r4
   ba4b4:	a80a      	add	r0, sp, #40	; 0x28
   ba4b6:	f7ff ffc7 	bl	ba448 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   ba4ba:	a90a      	add	r1, sp, #40	; 0x28
   ba4bc:	4630      	mov	r0, r6
   ba4be:	f003 fc10 	bl	bdce2 <_ZplRK15StringSumHelperRK6String>
   ba4c2:	4601      	mov	r1, r0
   ba4c4:	4628      	mov	r0, r5
   ba4c6:	f003 fbb0 	bl	bdc2a <_ZN6StringaSERKS_>
   ba4ca:	a80a      	add	r0, sp, #40	; 0x28
   ba4cc:	f003 fb26 	bl	bdb1c <_ZN6StringD1Ev>
   ba4d0:	a802      	add	r0, sp, #8
   ba4d2:	f003 fb23 	bl	bdb1c <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba4d6:	a806      	add	r0, sp, #24
   ba4d8:	f003 fb20 	bl	bdb1c <_ZN6StringD1Ev>
}
   ba4dc:	4628      	mov	r0, r5
   ba4de:	b00e      	add	sp, #56	; 0x38
   ba4e0:	bd70      	pop	{r4, r5, r6, pc}
   ba4e2:	bf00      	nop
   ba4e4:	000c0f58 	.word	0x000c0f58
   ba4e8:	000c0c3d 	.word	0x000c0c3d

000ba4ec <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   ba4f0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   ba4f2:	b08e      	sub	sp, #56	; 0x38
   ba4f4:	4605      	mov	r5, r0
   ba4f6:	460f      	mov	r7, r1
    if (allExtensions) {
   ba4f8:	2a00      	cmp	r2, #0
   ba4fa:	d04a      	beq.n	ba592 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   ba4fc:	6840      	ldr	r0, [r0, #4]
   ba4fe:	f000 fd87 	bl	bb010 <opendir>
        if (dir) {
   ba502:	4606      	mov	r6, r0
   ba504:	2800      	cmp	r0, #0
   ba506:	d054      	beq.n	ba5b2 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   ba508:	f8df a0b4 	ldr.w	sl, [pc, #180]	; ba5c0 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   ba50c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ba5bc <_ZN14SequentialFile13removeFileNumEib+0xd0>
   ba510:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ba5b8 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   ba514:	4630      	mov	r0, r6
   ba516:	f000 fd83 	bl	bb020 <readdir>
                if (!ent) {
   ba51a:	2800      	cmp	r0, #0
   ba51c:	d033      	beq.n	ba586 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   ba51e:	7a82      	ldrb	r2, [r0, #10]
   ba520:	2a08      	cmp	r2, #8
   ba522:	d1f7      	bne.n	ba514 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   ba524:	f100 040b 	add.w	r4, r0, #11
   ba528:	6969      	ldr	r1, [r5, #20]
   ba52a:	aa01      	add	r2, sp, #4
   ba52c:	4620      	mov	r0, r4
   ba52e:	f000 ffab 	bl	bb488 <sscanf>
   ba532:	2801      	cmp	r0, #1
   ba534:	d1ee      	bne.n	ba514 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   ba536:	9b01      	ldr	r3, [sp, #4]
   ba538:	42bb      	cmp	r3, r7
   ba53a:	d1eb      	bne.n	ba514 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   ba53c:	1d29      	adds	r1, r5, #4
   ba53e:	a80a      	add	r0, sp, #40	; 0x28
   ba540:	f003 fb82 	bl	bdc48 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   ba544:	4651      	mov	r1, sl
   ba546:	a806      	add	r0, sp, #24
   ba548:	f003 fb33 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba54c:	a906      	add	r1, sp, #24
   ba54e:	a80a      	add	r0, sp, #40	; 0x28
   ba550:	f003 fbc7 	bl	bdce2 <_ZplRK15StringSumHelperRK6String>
   ba554:	4621      	mov	r1, r4
   ba556:	f003 fbd0 	bl	bdcfa <_ZplRK15StringSumHelperPKc>
   ba55a:	4601      	mov	r1, r0
   ba55c:	a802      	add	r0, sp, #8
   ba55e:	f003 fb73 	bl	bdc48 <_ZN6StringC1ERKS_>
   ba562:	a806      	add	r0, sp, #24
   ba564:	f003 fada 	bl	bdb1c <_ZN6StringD1Ev>
class StringSumHelper : public String
   ba568:	a80a      	add	r0, sp, #40	; 0x28
   ba56a:	f003 fad7 	bl	bdb1c <_ZN6StringD1Ev>
                        unlink(path);
   ba56e:	9802      	ldr	r0, [sp, #8]
   ba570:	f005 f8a6 	bl	bf6c0 <unlink>
                        _log.trace("removed %s", path.c_str());
   ba574:	4640      	mov	r0, r8
   ba576:	9a02      	ldr	r2, [sp, #8]
   ba578:	4649      	mov	r1, r9
   ba57a:	f7fc f9b3 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   ba57e:	a802      	add	r0, sp, #8
   ba580:	f003 facc 	bl	bdb1c <_ZN6StringD1Ev>
                    continue;
   ba584:	e7c6      	b.n	ba514 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   ba586:	4630      	mov	r0, r6
}
   ba588:	b00e      	add	sp, #56	; 0x38
   ba58a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   ba58e:	f000 bd4f 	b.w	bb030 <closedir>
        String path = getPathForFileNum(fileNum); 
   ba592:	460a      	mov	r2, r1
   ba594:	4601      	mov	r1, r0
   ba596:	a80a      	add	r0, sp, #40	; 0x28
   ba598:	f7ff ff6c 	bl	ba474 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   ba59c:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba59e:	f005 f88f 	bl	bf6c0 <unlink>
        _log.trace("removed %s", path.c_str());
   ba5a2:	4805      	ldr	r0, [pc, #20]	; (ba5b8 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   ba5a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba5a6:	4905      	ldr	r1, [pc, #20]	; (ba5bc <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   ba5a8:	f7fc f99c 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   ba5ac:	a80a      	add	r0, sp, #40	; 0x28
   ba5ae:	f003 fab5 	bl	bdb1c <_ZN6StringD1Ev>
}
   ba5b2:	b00e      	add	sp, #56	; 0x38
   ba5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba5b8:	2003e578 	.word	0x2003e578
   ba5bc:	000c0c3f 	.word	0x000c0c3f
   ba5c0:	000c0c3d 	.word	0x000c0c3d

000ba5c4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba5c4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba5c6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba5c8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba5ca:	b183      	cbz	r3, ba5ee <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba5cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba5ce:	6945      	ldr	r5, [r0, #20]
   ba5d0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba5d2:	42ae      	cmp	r6, r5
   ba5d4:	d906      	bls.n	ba5e4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   ba5d6:	f855 0b04 	ldr.w	r0, [r5], #4
   ba5da:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba5de:	f7f9 fd5e 	bl	b409e <_ZdlPvj>
   ba5e2:	e7f6      	b.n	ba5d2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   ba5e4:	6861      	ldr	r1, [r4, #4]
   ba5e6:	6820      	ldr	r0, [r4, #0]
   ba5e8:	0089      	lsls	r1, r1, #2
   ba5ea:	f7f9 fd58 	bl	b409e <_ZdlPvj>
    }
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba5f4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   ba5f4:	b510      	push	{r4, lr}
   ba5f6:	4b09      	ldr	r3, [pc, #36]	; (ba61c <_ZN14SequentialFileD1Ev+0x28>)
   ba5f8:	4604      	mov	r4, r0
   ba5fa:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba5fe:	f7ff ffe1 	bl	ba5c4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   ba602:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba606:	f003 fa89 	bl	bdb1c <_ZN6StringD1Ev>
   ba60a:	f104 0014 	add.w	r0, r4, #20
   ba60e:	f003 fa85 	bl	bdb1c <_ZN6StringD1Ev>
   ba612:	1d20      	adds	r0, r4, #4
   ba614:	f003 fa82 	bl	bdb1c <_ZN6StringD1Ev>
}
   ba618:	4620      	mov	r0, r4
   ba61a:	bd10      	pop	{r4, pc}
   ba61c:	000c0d38 	.word	0x000c0d38

000ba620 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   ba620:	b510      	push	{r4, lr}
   ba622:	4604      	mov	r4, r0
}
   ba624:	f7ff ffe6 	bl	ba5f4 <_ZN14SequentialFileD1Ev>
   ba628:	4620      	mov	r0, r4
   ba62a:	2168      	movs	r1, #104	; 0x68
   ba62c:	f7f9 fd37 	bl	b409e <_ZdlPvj>
   ba630:	4620      	mov	r0, r4
   ba632:	bd10      	pop	{r4, pc}

000ba634 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba634:	68c3      	ldr	r3, [r0, #12]
   ba636:	68ca      	ldr	r2, [r1, #12]
   ba638:	1a9b      	subs	r3, r3, r2
   ba63a:	109b      	asrs	r3, r3, #2
   ba63c:	1e5a      	subs	r2, r3, #1
   ba63e:	e9d0 3000 	ldrd	r3, r0, [r0]
   ba642:	1a1b      	subs	r3, r3, r0
   ba644:	109b      	asrs	r3, r3, #2
   ba646:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba64a:	6888      	ldr	r0, [r1, #8]
   ba64c:	680a      	ldr	r2, [r1, #0]
   ba64e:	1a80      	subs	r0, r0, r2
      }
   ba650:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba654:	4770      	bx	lr
	...

000ba658 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   ba658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   ba65c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   ba65e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   ba660:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba662:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   ba664:	4604      	mov	r4, r0
   ba666:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   ba668:	d007      	beq.n	ba67a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba66a:	b10b      	cbz	r3, ba670 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   ba66c:	680a      	ldr	r2, [r1, #0]
   ba66e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba670:	69a3      	ldr	r3, [r4, #24]
   ba672:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba674:	61a3      	str	r3, [r4, #24]
      }
   ba676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba67a:	f100 0108 	add.w	r1, r0, #8
   ba67e:	3018      	adds	r0, #24
   ba680:	f7ff ffd8 	bl	ba634 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   ba684:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba688:	4298      	cmp	r0, r3
   ba68a:	d102      	bne.n	ba692 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   ba68c:	4838      	ldr	r0, [pc, #224]	; (ba770 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   ba68e:	f004 f8f4 	bl	be87a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba692:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba694:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba696:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba698:	1a11      	subs	r1, r2, r0
   ba69a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba69e:	2901      	cmp	r1, #1
   ba6a0:	d825      	bhi.n	ba6ee <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba6a2:	6961      	ldr	r1, [r4, #20]
   ba6a4:	eba2 0801 	sub.w	r8, r2, r1
   ba6a8:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba6ac:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba6ae:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   ba6b2:	d936      	bls.n	ba722 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   ba6b4:	1b5d      	subs	r5, r3, r5
   ba6b6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba6b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   ba6bc:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba6be:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   ba6c0:	eba3 0201 	sub.w	r2, r3, r1
   ba6c4:	d926      	bls.n	ba714 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   ba6c6:	428b      	cmp	r3, r1
   ba6c8:	d002      	beq.n	ba6d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba6ca:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba6cc:	f004 fdf0 	bl	bf2b0 <memmove>
	_M_node = __new_node;
   ba6d0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   ba6d2:	682b      	ldr	r3, [r5, #0]
   ba6d4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba6d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba6da:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba6dc:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   ba6e0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba6e2:	f855 3008 	ldr.w	r3, [r5, r8]
   ba6e6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba6e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba6ec:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba6ee:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba6f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   ba6f4:	f7f9 fccf 	bl	b4096 <_Znwj>
   ba6f8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba6fa:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba6fc:	b10b      	cbz	r3, ba702 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   ba6fe:	683a      	ldr	r2, [r7, #0]
   ba700:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba702:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba704:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba706:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   ba708:	685b      	ldr	r3, [r3, #4]
   ba70a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba70c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba710:	6222      	str	r2, [r4, #32]
   ba712:	e7af      	b.n	ba674 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   ba714:	428b      	cmp	r3, r1
   ba716:	d0db      	beq.n	ba6d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba718:	f108 0004 	add.w	r0, r8, #4
   ba71c:	1a80      	subs	r0, r0, r2
   ba71e:	4428      	add	r0, r5
   ba720:	e7d4      	b.n	ba6cc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba722:	f103 0902 	add.w	r9, r3, #2
   ba726:	2b01      	cmp	r3, #1
   ba728:	bf2c      	ite	cs
   ba72a:	4499      	addcs	r9, r3
   ba72c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   ba730:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   ba734:	d301      	bcc.n	ba73a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   ba736:	f004 f89d 	bl	be874 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba73a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   ba73e:	f7f9 fcaa 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   ba742:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba744:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba746:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   ba74a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba74c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   ba74e:	4291      	cmp	r1, r2
   ba750:	4682      	mov	sl, r0
   ba752:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   ba756:	d003      	beq.n	ba760 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba758:	1a52      	subs	r2, r2, r1
   ba75a:	4628      	mov	r0, r5
   ba75c:	f004 fda8 	bl	bf2b0 <memmove>
	::operator delete(__p
   ba760:	6861      	ldr	r1, [r4, #4]
   ba762:	6820      	ldr	r0, [r4, #0]
   ba764:	0089      	lsls	r1, r1, #2
   ba766:	f7f9 fc9a 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba76a:	e9c4 a900 	strd	sl, r9, [r4]
   ba76e:	e7af      	b.n	ba6d0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   ba770:	000c08c1 	.word	0x000c08c1

000ba774 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   ba774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   ba778:	68c3      	ldr	r3, [r0, #12]
   ba77a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   ba77c:	b086      	sub	sp, #24
   ba77e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   ba780:	d808      	bhi.n	ba794 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   ba782:	4934      	ldr	r1, [pc, #208]	; (ba854 <_ZN14SequentialFile7scanDirEv+0xe0>)
   ba784:	4834      	ldr	r0, [pc, #208]	; (ba858 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba786:	f7fc f89f 	bl	b68c8 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   ba78a:	2600      	movs	r6, #0
}
   ba78c:	4630      	mov	r0, r6
   ba78e:	b006      	add	sp, #24
   ba790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   ba794:	6840      	ldr	r0, [r0, #4]
   ba796:	f7ff fe01 	bl	ba39c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   ba79a:	4606      	mov	r6, r0
   ba79c:	2800      	cmp	r0, #0
   ba79e:	d0f4      	beq.n	ba78a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   ba7a0:	6963      	ldr	r3, [r4, #20]
   ba7a2:	6862      	ldr	r2, [r4, #4]
   ba7a4:	492d      	ldr	r1, [pc, #180]	; (ba85c <_ZN14SequentialFile7scanDirEv+0xe8>)
   ba7a6:	482c      	ldr	r0, [pc, #176]	; (ba858 <_ZN14SequentialFile7scanDirEv+0xe4>)
   ba7a8:	f7fc f89c 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   ba7ac:	6860      	ldr	r0, [r4, #4]
   ba7ae:	f000 fc2f 	bl	bb010 <opendir>
    if (!dir) {
   ba7b2:	4607      	mov	r7, r0
   ba7b4:	2800      	cmp	r0, #0
   ba7b6:	d0e8      	beq.n	ba78a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   ba7b8:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba7ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba860 <_ZN14SequentialFile7scanDirEv+0xec>
   ba7be:	f8df 8098 	ldr.w	r8, [pc, #152]	; ba858 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   ba7c2:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   ba7c4:	4638      	mov	r0, r7
   ba7c6:	f000 fc2b 	bl	bb020 <readdir>
        if (!ent) {
   ba7ca:	4605      	mov	r5, r0
   ba7cc:	2800      	cmp	r0, #0
   ba7ce:	d039      	beq.n	ba844 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   ba7d0:	7a83      	ldrb	r3, [r0, #10]
   ba7d2:	2b08      	cmp	r3, #8
   ba7d4:	d1f6      	bne.n	ba7c4 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   ba7d6:	350b      	adds	r5, #11
   ba7d8:	6961      	ldr	r1, [r4, #20]
   ba7da:	aa01      	add	r2, sp, #4
   ba7dc:	4628      	mov	r0, r5
   ba7de:	f000 fe53 	bl	bb488 <sscanf>
   ba7e2:	2801      	cmp	r0, #1
   ba7e4:	d1ee      	bne.n	ba7c4 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   ba7e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba7e8:	b17b      	cbz	r3, ba80a <_ZN14SequentialFile7scanDirEv+0x96>
   ba7ea:	4629      	mov	r1, r5
   ba7ec:	a802      	add	r0, sp, #8
   ba7ee:	f003 f9e0 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
   ba7f2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   ba7f6:	a802      	add	r0, sp, #8
   ba7f8:	f003 faa6 	bl	bdd48 <_ZNK6String8endsWithERKS_>
   ba7fc:	4682      	mov	sl, r0
   ba7fe:	a802      	add	r0, sp, #8
   ba800:	f003 f98c 	bl	bdb1c <_ZN6StringD1Ev>
   ba804:	f1ba 0f00 	cmp.w	sl, #0
   ba808:	d0dc      	beq.n	ba7c4 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   ba80a:	6823      	ldr	r3, [r4, #0]
   ba80c:	4629      	mov	r1, r5
   ba80e:	689b      	ldr	r3, [r3, #8]
   ba810:	4620      	mov	r0, r4
   ba812:	4798      	blx	r3
   ba814:	2800      	cmp	r0, #0
   ba816:	d0d5      	beq.n	ba7c4 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   ba818:	9a01      	ldr	r2, [sp, #4]
   ba81a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba81c:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   ba81e:	bfb8      	it	lt
   ba820:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   ba822:	462b      	mov	r3, r5
   ba824:	4649      	mov	r1, r9
   ba826:	4640      	mov	r0, r8
   ba828:	f7fc f85c 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   ba82c:	4620      	mov	r0, r4
   ba82e:	f7ff fda5 	bl	ba37c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   ba832:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba836:	a901      	add	r1, sp, #4
   ba838:	f7ff ff0e 	bl	ba658 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   ba83c:	4620      	mov	r0, r4
   ba83e:	f7ff fda9 	bl	ba394 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   ba842:	e7bf      	b.n	ba7c4 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   ba844:	4638      	mov	r0, r7
   ba846:	f000 fbf3 	bl	bb030 <closedir>
    scanDirCompleted = true;
   ba84a:	2301      	movs	r3, #1
   ba84c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   ba850:	e79c      	b.n	ba78c <_ZN14SequentialFile7scanDirEv+0x18>
   ba852:	bf00      	nop
   ba854:	000c0cbd 	.word	0x000c0cbd
   ba858:	2003e578 	.word	0x2003e578
   ba85c:	000c0cd2 	.word	0x000c0cd2
   ba860:	000c0cee 	.word	0x000c0cee

000ba864 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   ba864:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   ba866:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   ba86a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba86c:	b90b      	cbnz	r3, ba872 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   ba86e:	f7ff ff81 	bl	ba774 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   ba872:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   ba874:	3001      	adds	r0, #1
   ba876:	63a0      	str	r0, [r4, #56]	; 0x38
}
   ba878:	bd10      	pop	{r4, pc}
	...

000ba87c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   ba87c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   ba87e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   ba882:	4604      	mov	r4, r0
   ba884:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   ba886:	b90b      	cbnz	r3, ba88c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   ba888:	f7ff ff74 	bl	ba774 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   ba88c:	4620      	mov	r0, r4
   ba88e:	f7ff fd75 	bl	ba37c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   ba892:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   ba894:	6da2      	ldr	r2, [r4, #88]	; 0x58
   ba896:	429a      	cmp	r2, r3
   ba898:	d020      	beq.n	ba8dc <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   ba89a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   ba89e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   ba8a0:	b126      	cbz	r6, ba8ac <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   ba8a2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba8a4:	4293      	cmp	r3, r2
   ba8a6:	d00c      	beq.n	ba8c2 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   ba8a8:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba8aa:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   ba8ac:	4620      	mov	r0, r4
   ba8ae:	f7ff fd71 	bl	ba394 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   ba8b2:	b125      	cbz	r5, ba8be <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   ba8b4:	490a      	ldr	r1, [pc, #40]	; (ba8e0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   ba8b6:	480b      	ldr	r0, [pc, #44]	; (ba8e4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   ba8b8:	462a      	mov	r2, r5
   ba8ba:	f7fc f813 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
}
   ba8be:	4628      	mov	r0, r5
   ba8c0:	bd70      	pop	{r4, r5, r6, pc}
   ba8c2:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba8c6:	f7f9 fbea 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba8ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba8cc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba8ce:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   ba8d0:	685b      	ldr	r3, [r3, #4]
   ba8d2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba8d4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba8d8:	6522      	str	r2, [r4, #80]	; 0x50
   ba8da:	e7e6      	b.n	ba8aa <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   ba8dc:	2500      	movs	r5, #0
   ba8de:	e7e5      	b.n	ba8ac <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   ba8e0:	000c0d04 	.word	0x000c0d04
   ba8e4:	2003e578 	.word	0x2003e578

000ba8e8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   ba8e8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   ba8ea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   ba8ee:	9101      	str	r1, [sp, #4]
   ba8f0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   ba8f2:	b90b      	cbnz	r3, ba8f8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   ba8f4:	f7ff ff3e 	bl	ba774 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   ba8f8:	9b01      	ldr	r3, [sp, #4]
   ba8fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba8fc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   ba8fe:	bfb8      	it	lt
   ba900:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   ba902:	4620      	mov	r0, r4
   ba904:	f7ff fd3a 	bl	ba37c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   ba908:	a901      	add	r1, sp, #4
   ba90a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   ba90e:	f7ff fea3 	bl	ba658 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   ba912:	4620      	mov	r0, r4
   ba914:	f7ff fd3e 	bl	ba394 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba918:	b002      	add	sp, #8
   ba91a:	bd10      	pop	{r4, pc}

000ba91c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   ba91c:	b538      	push	{r3, r4, r5, lr}
   ba91e:	4604      	mov	r4, r0
    queueMutexLock();
   ba920:	f7ff fd2c 	bl	ba37c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba924:	f104 0148 	add.w	r1, r4, #72	; 0x48
   ba928:	f104 0058 	add.w	r0, r4, #88	; 0x58
   ba92c:	f7ff fe82 	bl	ba634 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   ba930:	4605      	mov	r5, r0
    queueMutexUnlock();
   ba932:	4620      	mov	r0, r4
   ba934:	f7ff fd2e 	bl	ba394 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   ba938:	4628      	mov	r0, r5
   ba93a:	bd38      	pop	{r3, r4, r5, pc}

000ba93c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   ba93c:	4b01      	ldr	r3, [pc, #4]	; (ba944 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   ba93e:	4a02      	ldr	r2, [pc, #8]	; (ba948 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   ba940:	601a      	str	r2, [r3, #0]
}
   ba942:	4770      	bx	lr
   ba944:	2003e578 	.word	0x2003e578
   ba948:	000c0d21 	.word	0x000c0d21

000ba94c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   ba94c:	4770      	bx	lr

000ba94e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   ba94e:	6803      	ldr	r3, [r0, #0]
   ba950:	685b      	ldr	r3, [r3, #4]
   ba952:	4718      	bx	r3

000ba954 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba954:	b510      	push	{r4, lr}
    if (lastUpdate) {
   ba956:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   ba958:	4604      	mov	r4, r0
    if (lastUpdate) {
   ba95a:	b133      	cbz	r3, ba96a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba95c:	b131      	cbz	r1, ba96c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   ba95e:	6823      	ldr	r3, [r4, #0]
   ba960:	4620      	mov	r0, r4
   ba962:	689b      	ldr	r3, [r3, #8]
   ba964:	4798      	blx	r3
            lastUpdate = 0;
   ba966:	2300      	movs	r3, #0
   ba968:	61a3      	str	r3, [r4, #24]
        }
    }
}
   ba96a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba96c:	f000 f9d8 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   ba970:	69a3      	ldr	r3, [r4, #24]
   ba972:	1ac0      	subs	r0, r0, r3
   ba974:	69e3      	ldr	r3, [r4, #28]
   ba976:	4298      	cmp	r0, r3
   ba978:	d2f1      	bcs.n	ba95e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   ba97a:	e7f6      	b.n	ba96a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000ba97c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba97c:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   ba97e:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   ba980:	4604      	mov	r4, r0
    if (saveDelayMs) {
   ba982:	b11b      	cbz	r3, ba98c <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   ba984:	f000 f9cc 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   ba988:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   ba98a:	bd10      	pop	{r4, pc}
        save();
   ba98c:	6803      	ldr	r3, [r0, #0]
}
   ba98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   ba992:	689b      	ldr	r3, [r3, #8]
   ba994:	4718      	bx	r3

000ba996 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   ba996:	f000 b98b 	b.w	bacb0 <os_mutex_recursive_unlock>

000ba99a <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   ba99a:	b510      	push	{r4, lr}
   ba99c:	4604      	mov	r4, r0
   ba99e:	3004      	adds	r0, #4
   ba9a0:	f7fa fe56 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   ba9a4:	6823      	ldr	r3, [r4, #0]
   ba9a6:	68e1      	ldr	r1, [r4, #12]
   ba9a8:	695b      	ldr	r3, [r3, #20]
   ba9aa:	4620      	mov	r0, r4
   ba9ac:	4798      	blx	r3
   ba9ae:	b918      	cbnz	r0, ba9b8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   ba9b0:	6823      	ldr	r3, [r4, #0]
   ba9b2:	4620      	mov	r0, r4
   ba9b4:	699b      	ldr	r3, [r3, #24]
   ba9b6:	4798      	blx	r3
      { _M_device.unlock(); }
   ba9b8:	6860      	ldr	r0, [r4, #4]
   ba9ba:	f7ff ffec 	bl	ba996 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   ba9be:	2001      	movs	r0, #1
   ba9c0:	bd10      	pop	{r4, pc}

000ba9c2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   ba9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba9c4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   ba9c6:	3004      	adds	r0, #4
   ba9c8:	4614      	mov	r4, r2
   ba9ca:	460e      	mov	r6, r1
   ba9cc:	461f      	mov	r7, r3
   ba9ce:	f7fa fe3f 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   ba9d2:	68ea      	ldr	r2, [r5, #12]
   ba9d4:	f1c4 0401 	rsb	r4, r4, #1
   ba9d8:	4414      	add	r4, r2
   ba9da:	42b4      	cmp	r4, r6
   ba9dc:	d30a      	bcc.n	ba9f4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   ba9de:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   ba9e0:	4638      	mov	r0, r7
   ba9e2:	4431      	add	r1, r6
   ba9e4:	f003 f943 	bl	bdc6e <_ZN6StringaSEPKc>
            result = true;
   ba9e8:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   ba9ea:	6868      	ldr	r0, [r5, #4]
   ba9ec:	f7ff ffd3 	bl	ba996 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   ba9f0:	4620      	mov	r0, r4
   ba9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   ba9f4:	2400      	movs	r4, #0
   ba9f6:	e7f8      	b.n	ba9ea <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000ba9f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   ba9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba9fa:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   ba9fe:	4f18      	ldr	r7, [pc, #96]	; (baa60 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   baa00:	4e18      	ldr	r6, [pc, #96]	; (baa64 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   baa02:	4d19      	ldr	r5, [pc, #100]	; (baa68 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   baa04:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   baa06:	42a0      	cmp	r0, r4
   baa08:	d00c      	beq.n	baa24 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   baa0a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   baa0e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   baa10:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   baa14:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   baa16:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   baa18:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   baa1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   baa20:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   baa22:	e7f0      	b.n	baa06 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   baa24:	f001 0403 	and.w	r4, r1, #3
   baa28:	4404      	add	r4, r0
    k = 0;
   baa2a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   baa2c:	42a0      	cmp	r0, r4
   baa2e:	d004      	beq.n	baa3a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   baa30:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   baa34:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   baa38:	e7f8      	b.n	baa2c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   baa3a:	4809      	ldr	r0, [pc, #36]	; (baa60 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   baa3c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   baa3e:	4809      	ldr	r0, [pc, #36]	; (baa64 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   baa40:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   baa44:	404a      	eors	r2, r1
        k *= 0x1b873593;
   baa46:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   baa48:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   baa4a:	4b08      	ldr	r3, [pc, #32]	; (baa6c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   baa4c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   baa50:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   baa52:	4b07      	ldr	r3, [pc, #28]	; (baa70 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   baa54:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   baa58:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   baa5a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   baa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baa60:	cc9e2d51 	.word	0xcc9e2d51
   baa64:	1b873593 	.word	0x1b873593
   baa68:	e6546b64 	.word	0xe6546b64
   baa6c:	85ebca6b 	.word	0x85ebca6b
   baa70:	c2b2ae35 	.word	0xc2b2ae35

000baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   baa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa76:	4604      	mov	r4, r0
      { _M_device.lock(); }
   baa78:	3004      	adds	r0, #4
   baa7a:	f7fa fde9 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   baa7e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   baa80:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   baa82:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   baa84:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   baa86:	68a6      	ldr	r6, [r4, #8]
   baa88:	4a05      	ldr	r2, [pc, #20]	; (baaa0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   baa8a:	88f1      	ldrh	r1, [r6, #6]
   baa8c:	4630      	mov	r0, r6
   baa8e:	f7ff ffb3 	bl	ba9f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   baa92:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   baa94:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   baa96:	6860      	ldr	r0, [r4, #4]
   baa98:	f7ff ff7d 	bl	ba996 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   baa9c:	4628      	mov	r0, r5
   baa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   baaa0:	851c2a3f 	.word	0x851c2a3f

000baaa4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   baaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baaa8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   baaaa:	3004      	adds	r0, #4
   baaac:	4690      	mov	r8, r2
   baaae:	460d      	mov	r5, r1
   baab0:	461f      	mov	r7, r3
   baab2:	f7fa fdcd 	bl	b5650 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   baab6:	68e2      	ldr	r2, [r4, #12]
   baab8:	f1c8 0301 	rsb	r3, r8, #1
   baabc:	4413      	add	r3, r2
   baabe:	42ab      	cmp	r3, r5
   baac0:	d31f      	bcc.n	bab02 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   baac2:	4638      	mov	r0, r7
   baac4:	f004 fcc9 	bl	bf45a <strlen>
   baac8:	4540      	cmp	r0, r8
   baaca:	d21a      	bcs.n	bab02 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   baacc:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   baace:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   baad0:	4629      	mov	r1, r5
   baad2:	4638      	mov	r0, r7
   baad4:	f004 fc91 	bl	bf3fa <strcmp>
   baad8:	b188      	cbz	r0, baafe <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   baada:	4642      	mov	r2, r8
   baadc:	2100      	movs	r1, #0
   baade:	4628      	mov	r0, r5
   baae0:	f004 fc00 	bl	bf2e4 <memset>
                strcpy(p, value);
   baae4:	4639      	mov	r1, r7
   baae6:	4628      	mov	r0, r5
   baae8:	f004 fc91 	bl	bf40e <strcpy>
                savedDataHeader->hash = getHash();
   baaec:	4620      	mov	r0, r4
   baaee:	68a5      	ldr	r5, [r4, #8]
   baaf0:	f7ff ffc0 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   baaf4:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   baaf6:	6823      	ldr	r3, [r4, #0]
   baaf8:	4620      	mov	r0, r4
   baafa:	691b      	ldr	r3, [r3, #16]
   baafc:	4798      	blx	r3
            result = true;
   baafe:	2501      	movs	r5, #1
   bab00:	e000      	b.n	bab04 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bab02:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bab04:	6860      	ldr	r0, [r4, #4]
   bab06:	f7ff ff46 	bl	ba996 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bab0a:	4628      	mov	r0, r5
   bab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bab10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bab10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bab12:	460d      	mov	r5, r1
   bab14:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bab16:	f7ff ffad 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bab1a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bab1c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bab1e:	d923      	bls.n	bab68 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bab20:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bab22:	6922      	ldr	r2, [r4, #16]
   bab24:	6819      	ldr	r1, [r3, #0]
   bab26:	4291      	cmp	r1, r2
   bab28:	d11f      	bne.n	bab6a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bab2a:	8899      	ldrh	r1, [r3, #4]
   bab2c:	8aa2      	ldrh	r2, [r4, #20]
   bab2e:	4291      	cmp	r1, r2
   bab30:	d11b      	bne.n	bab6a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bab32:	88d9      	ldrh	r1, [r3, #6]
   bab34:	b2aa      	uxth	r2, r5
   bab36:	4291      	cmp	r1, r2
   bab38:	d817      	bhi.n	bab6a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bab3a:	689a      	ldr	r2, [r3, #8]
   bab3c:	4282      	cmp	r2, r0
   bab3e:	d114      	bne.n	bab6a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bab40:	68e2      	ldr	r2, [r4, #12]
   bab42:	42aa      	cmp	r2, r5
   bab44:	d905      	bls.n	bab52 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bab46:	2100      	movs	r1, #0
   bab48:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bab4a:	68e2      	ldr	r2, [r4, #12]
   bab4c:	3501      	adds	r5, #1
   bab4e:	42aa      	cmp	r2, r5
   bab50:	d8fa      	bhi.n	bab48 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bab52:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bab56:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bab58:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bab5a:	68a5      	ldr	r5, [r4, #8]
   bab5c:	f7ff ff8a 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bab60:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bab62:	2001      	movs	r0, #1
}
   bab64:	b002      	add	sp, #8
   bab66:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bab68:	b19d      	cbz	r5, bab92 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bab6a:	68a1      	ldr	r1, [r4, #8]
   bab6c:	680a      	ldr	r2, [r1, #0]
   bab6e:	b192      	cbz	r2, bab96 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bab70:	6888      	ldr	r0, [r1, #8]
   bab72:	888b      	ldrh	r3, [r1, #4]
   bab74:	9001      	str	r0, [sp, #4]
   bab76:	88c9      	ldrh	r1, [r1, #6]
   bab78:	4808      	ldr	r0, [pc, #32]	; (bab9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bab7a:	9100      	str	r1, [sp, #0]
   bab7c:	4908      	ldr	r1, [pc, #32]	; (baba0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bab7e:	f7fb feb1 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bab82:	e9cd 5600 	strd	r5, r6, [sp]
   bab86:	8aa3      	ldrh	r3, [r4, #20]
   bab88:	6922      	ldr	r2, [r4, #16]
   bab8a:	4906      	ldr	r1, [pc, #24]	; (baba4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bab8c:	4803      	ldr	r0, [pc, #12]	; (bab9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bab8e:	f7fb fea9 	bl	b68e4 <_ZNK5spark6Logger5traceEPKcz>
   bab92:	2000      	movs	r0, #0
   bab94:	e7e6      	b.n	bab64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bab96:	4610      	mov	r0, r2
   bab98:	e7e4      	b.n	bab64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bab9a:	bf00      	nop
   bab9c:	2003e654 	.word	0x2003e654
   baba0:	000c0d44 	.word	0x000c0d44
   baba4:	000c0d75 	.word	0x000c0d75

000baba8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   baba8:	b538      	push	{r3, r4, r5, lr}
   babaa:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   babac:	68c2      	ldr	r2, [r0, #12]
   babae:	6880      	ldr	r0, [r0, #8]
   babb0:	2100      	movs	r1, #0
   babb2:	f004 fb97 	bl	bf2e4 <memset>
    savedDataHeader->magic = savedDataMagic;
   babb6:	68a3      	ldr	r3, [r4, #8]
   babb8:	6922      	ldr	r2, [r4, #16]
   babba:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   babbc:	68a3      	ldr	r3, [r4, #8]
   babbe:	8aa2      	ldrh	r2, [r4, #20]
   babc0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   babc2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   babc6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   babc8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   babca:	68a5      	ldr	r5, [r4, #8]
   babcc:	f7ff ff52 	bl	baa74 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   babd0:	60a8      	str	r0, [r5, #8]
}
   babd2:	bd38      	pop	{r3, r4, r5, pc}

000babd4 <_Z23setGatewayConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setGatewayConfiguration() {
   babd4:	b508      	push	{r3, lr}
  Log.info("Setting values for the Gateway");
   babd6:	4908      	ldr	r1, [pc, #32]	; (babf8 <_Z23setGatewayConfigurationv+0x24>)
   babd8:	4808      	ldr	r0, [pc, #32]	; (babfc <_Z23setGatewayConfigurationv+0x28>)
   babda:	f7f9 fa7f 	bl	b40dc <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   babde:	f7fa fdd3 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   babe2:	2101      	movs	r1, #1
   babe4:	f7fb f848 	bl	b5c78 <_ZN13sysStatusData14set_sensorTypeEb>
  // sysStatus.set_deviceID(32148);
  sysStatus.set_frequencyMinutes(10);
   babe8:	f7fa fdce 	bl	b5788 <_ZN13sysStatusData8instanceEv>
   babec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_frequencyMinutes(10);
   babf0:	210a      	movs	r1, #10
   babf2:	f7fa bfe9 	b.w	b5bc8 <_ZN13sysStatusData20set_frequencyMinutesEt>
   babf6:	bf00      	nop
   babf8:	000c0dcc 	.word	0x000c0dcc
   babfc:	2003e654 	.word	0x2003e654

000bac00 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bac00:	b508      	push	{r3, lr}
   bac02:	4b02      	ldr	r3, [pc, #8]	; (bac0c <cellular_signal+0xc>)
   bac04:	681b      	ldr	r3, [r3, #0]
   bac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bac08:	9301      	str	r3, [sp, #4]
   bac0a:	bd08      	pop	{r3, pc}
   bac0c:	00030274 	.word	0x00030274

000bac10 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bac10:	b508      	push	{r3, lr}
   bac12:	4b02      	ldr	r3, [pc, #8]	; (bac1c <os_thread_create+0xc>)
   bac14:	681b      	ldr	r3, [r3, #0]
   bac16:	685b      	ldr	r3, [r3, #4]
   bac18:	9301      	str	r3, [sp, #4]
   bac1a:	bd08      	pop	{r3, pc}
   bac1c:	00030248 	.word	0x00030248

000bac20 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bac20:	b508      	push	{r3, lr}
   bac22:	4b02      	ldr	r3, [pc, #8]	; (bac2c <os_thread_is_current+0xc>)
   bac24:	681b      	ldr	r3, [r3, #0]
   bac26:	689b      	ldr	r3, [r3, #8]
   bac28:	9301      	str	r3, [sp, #4]
   bac2a:	bd08      	pop	{r3, pc}
   bac2c:	00030248 	.word	0x00030248

000bac30 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bac30:	b508      	push	{r3, lr}
   bac32:	4b02      	ldr	r3, [pc, #8]	; (bac3c <os_thread_join+0xc>)
   bac34:	681b      	ldr	r3, [r3, #0]
   bac36:	691b      	ldr	r3, [r3, #16]
   bac38:	9301      	str	r3, [sp, #4]
   bac3a:	bd08      	pop	{r3, pc}
   bac3c:	00030248 	.word	0x00030248

000bac40 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bac40:	b508      	push	{r3, lr}
   bac42:	4b02      	ldr	r3, [pc, #8]	; (bac4c <os_thread_cleanup+0xc>)
   bac44:	681b      	ldr	r3, [r3, #0]
   bac46:	695b      	ldr	r3, [r3, #20]
   bac48:	9301      	str	r3, [sp, #4]
   bac4a:	bd08      	pop	{r3, pc}
   bac4c:	00030248 	.word	0x00030248

000bac50 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bac50:	b508      	push	{r3, lr}
   bac52:	4b02      	ldr	r3, [pc, #8]	; (bac5c <os_mutex_create+0xc>)
   bac54:	681b      	ldr	r3, [r3, #0]
   bac56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bac58:	9301      	str	r3, [sp, #4]
   bac5a:	bd08      	pop	{r3, pc}
   bac5c:	00030248 	.word	0x00030248

000bac60 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bac60:	b508      	push	{r3, lr}
   bac62:	4b02      	ldr	r3, [pc, #8]	; (bac6c <os_mutex_lock+0xc>)
   bac64:	681b      	ldr	r3, [r3, #0]
   bac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bac68:	9301      	str	r3, [sp, #4]
   bac6a:	bd08      	pop	{r3, pc}
   bac6c:	00030248 	.word	0x00030248

000bac70 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bac70:	b508      	push	{r3, lr}
   bac72:	4b02      	ldr	r3, [pc, #8]	; (bac7c <os_mutex_unlock+0xc>)
   bac74:	681b      	ldr	r3, [r3, #0]
   bac76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bac78:	9301      	str	r3, [sp, #4]
   bac7a:	bd08      	pop	{r3, pc}
   bac7c:	00030248 	.word	0x00030248

000bac80 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bac80:	b508      	push	{r3, lr}
   bac82:	4b02      	ldr	r3, [pc, #8]	; (bac8c <os_mutex_recursive_create+0xc>)
   bac84:	681b      	ldr	r3, [r3, #0]
   bac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bac88:	9301      	str	r3, [sp, #4]
   bac8a:	bd08      	pop	{r3, pc}
   bac8c:	00030248 	.word	0x00030248

000bac90 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bac90:	b508      	push	{r3, lr}
   bac92:	4b02      	ldr	r3, [pc, #8]	; (bac9c <os_mutex_recursive_destroy+0xc>)
   bac94:	681b      	ldr	r3, [r3, #0]
   bac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bac98:	9301      	str	r3, [sp, #4]
   bac9a:	bd08      	pop	{r3, pc}
   bac9c:	00030248 	.word	0x00030248

000baca0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   baca0:	b508      	push	{r3, lr}
   baca2:	4b02      	ldr	r3, [pc, #8]	; (bacac <os_mutex_recursive_lock+0xc>)
   baca4:	681b      	ldr	r3, [r3, #0]
   baca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baca8:	9301      	str	r3, [sp, #4]
   bacaa:	bd08      	pop	{r3, pc}
   bacac:	00030248 	.word	0x00030248

000bacb0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bacb0:	b508      	push	{r3, lr}
   bacb2:	4b02      	ldr	r3, [pc, #8]	; (bacbc <os_mutex_recursive_unlock+0xc>)
   bacb4:	681b      	ldr	r3, [r3, #0]
   bacb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bacb8:	9301      	str	r3, [sp, #4]
   bacba:	bd08      	pop	{r3, pc}
   bacbc:	00030248 	.word	0x00030248

000bacc0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bacc0:	b508      	push	{r3, lr}
   bacc2:	4b02      	ldr	r3, [pc, #8]	; (baccc <os_thread_exit+0xc>)
   bacc4:	681b      	ldr	r3, [r3, #0]
   bacc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bacc8:	9301      	str	r3, [sp, #4]
   bacca:	bd08      	pop	{r3, pc}
   baccc:	00030248 	.word	0x00030248

000bacd0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bacd0:	b508      	push	{r3, lr}
   bacd2:	4b02      	ldr	r3, [pc, #8]	; (bacdc <HAL_Core_Runtime_Info+0xc>)
   bacd4:	681b      	ldr	r3, [r3, #0]
   bacd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bacd8:	9301      	str	r3, [sp, #4]
   bacda:	bd08      	pop	{r3, pc}
   bacdc:	00030234 	.word	0x00030234

000bace0 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bace0:	b508      	push	{r3, lr}
   bace2:	4b02      	ldr	r3, [pc, #8]	; (bacec <HAL_Feature_Set+0xc>)
   bace4:	681b      	ldr	r3, [r3, #0]
   bace6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bace8:	9301      	str	r3, [sp, #4]
   bacea:	bd08      	pop	{r3, pc}
   bacec:	00030234 	.word	0x00030234

000bacf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bacf0:	b508      	push	{r3, lr}
   bacf2:	4b02      	ldr	r3, [pc, #8]	; (bacfc <HAL_RNG_GetRandomNumber+0xc>)
   bacf4:	681b      	ldr	r3, [r3, #0]
   bacf6:	685b      	ldr	r3, [r3, #4]
   bacf8:	9301      	str	r3, [sp, #4]
   bacfa:	bd08      	pop	{r3, pc}
   bacfc:	00030218 	.word	0x00030218

000bad00 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bad00:	b508      	push	{r3, lr}
   bad02:	4b02      	ldr	r3, [pc, #8]	; (bad0c <HAL_Delay_Milliseconds+0xc>)
   bad04:	681b      	ldr	r3, [r3, #0]
   bad06:	689b      	ldr	r3, [r3, #8]
   bad08:	9301      	str	r3, [sp, #4]
   bad0a:	bd08      	pop	{r3, pc}
   bad0c:	00030218 	.word	0x00030218

000bad10 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bad10:	b508      	push	{r3, lr}
   bad12:	4b02      	ldr	r3, [pc, #8]	; (bad1c <HAL_Delay_Microseconds+0xc>)
   bad14:	681b      	ldr	r3, [r3, #0]
   bad16:	68db      	ldr	r3, [r3, #12]
   bad18:	9301      	str	r3, [sp, #4]
   bad1a:	bd08      	pop	{r3, pc}
   bad1c:	00030218 	.word	0x00030218

000bad20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bad20:	b508      	push	{r3, lr}
   bad22:	4b02      	ldr	r3, [pc, #8]	; (bad2c <HAL_Timer_Get_Milli_Seconds+0xc>)
   bad24:	681b      	ldr	r3, [r3, #0]
   bad26:	695b      	ldr	r3, [r3, #20]
   bad28:	9301      	str	r3, [sp, #4]
   bad2a:	bd08      	pop	{r3, pc}
   bad2c:	00030218 	.word	0x00030218

000bad30 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bad30:	b508      	push	{r3, lr}
   bad32:	4b02      	ldr	r3, [pc, #8]	; (bad3c <hal_rtc_time_is_valid+0xc>)
   bad34:	681b      	ldr	r3, [r3, #0]
   bad36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bad38:	9301      	str	r3, [sp, #4]
   bad3a:	bd08      	pop	{r3, pc}
   bad3c:	00030218 	.word	0x00030218

000bad40 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bad40:	b508      	push	{r3, lr}
   bad42:	4b02      	ldr	r3, [pc, #8]	; (bad4c <hal_timer_millis+0xc>)
   bad44:	681b      	ldr	r3, [r3, #0]
   bad46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bad48:	9301      	str	r3, [sp, #4]
   bad4a:	bd08      	pop	{r3, pc}
   bad4c:	00030218 	.word	0x00030218

000bad50 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bad50:	b508      	push	{r3, lr}
   bad52:	4b02      	ldr	r3, [pc, #8]	; (bad5c <hal_rtc_get_time+0xc>)
   bad54:	681b      	ldr	r3, [r3, #0]
   bad56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bad58:	9301      	str	r3, [sp, #4]
   bad5a:	bd08      	pop	{r3, pc}
   bad5c:	00030218 	.word	0x00030218

000bad60 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bad60:	b508      	push	{r3, lr}
   bad62:	4b02      	ldr	r3, [pc, #8]	; (bad6c <hal_rtc_set_time+0xc>)
   bad64:	681b      	ldr	r3, [r3, #0]
   bad66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bad68:	9301      	str	r3, [sp, #4]
   bad6a:	bd08      	pop	{r3, pc}
   bad6c:	00030218 	.word	0x00030218

000bad70 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bad70:	b508      	push	{r3, lr}
   bad72:	4b02      	ldr	r3, [pc, #8]	; (bad7c <HAL_Validate_Pin_Function+0xc>)
   bad74:	681b      	ldr	r3, [r3, #0]
   bad76:	685b      	ldr	r3, [r3, #4]
   bad78:	9301      	str	r3, [sp, #4]
   bad7a:	bd08      	pop	{r3, pc}
   bad7c:	0003022c 	.word	0x0003022c

000bad80 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bad80:	b508      	push	{r3, lr}
   bad82:	4b02      	ldr	r3, [pc, #8]	; (bad8c <HAL_Pin_Mode+0xc>)
   bad84:	681b      	ldr	r3, [r3, #0]
   bad86:	689b      	ldr	r3, [r3, #8]
   bad88:	9301      	str	r3, [sp, #4]
   bad8a:	bd08      	pop	{r3, pc}
   bad8c:	0003022c 	.word	0x0003022c

000bad90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bad90:	b508      	push	{r3, lr}
   bad92:	4b02      	ldr	r3, [pc, #8]	; (bad9c <HAL_Get_Pin_Mode+0xc>)
   bad94:	681b      	ldr	r3, [r3, #0]
   bad96:	68db      	ldr	r3, [r3, #12]
   bad98:	9301      	str	r3, [sp, #4]
   bad9a:	bd08      	pop	{r3, pc}
   bad9c:	0003022c 	.word	0x0003022c

000bada0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bada0:	b508      	push	{r3, lr}
   bada2:	4b02      	ldr	r3, [pc, #8]	; (badac <HAL_GPIO_Write+0xc>)
   bada4:	681b      	ldr	r3, [r3, #0]
   bada6:	691b      	ldr	r3, [r3, #16]
   bada8:	9301      	str	r3, [sp, #4]
   badaa:	bd08      	pop	{r3, pc}
   badac:	0003022c 	.word	0x0003022c

000badb0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   badb0:	b508      	push	{r3, lr}
   badb2:	4b02      	ldr	r3, [pc, #8]	; (badbc <HAL_GPIO_Read+0xc>)
   badb4:	681b      	ldr	r3, [r3, #0]
   badb6:	695b      	ldr	r3, [r3, #20]
   badb8:	9301      	str	r3, [sp, #4]
   badba:	bd08      	pop	{r3, pc}
   badbc:	0003022c 	.word	0x0003022c

000badc0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   badc0:	b508      	push	{r3, lr}
   badc2:	4b02      	ldr	r3, [pc, #8]	; (badcc <HAL_Interrupts_Attach+0xc>)
   badc4:	681b      	ldr	r3, [r3, #0]
   badc6:	699b      	ldr	r3, [r3, #24]
   badc8:	9301      	str	r3, [sp, #4]
   badca:	bd08      	pop	{r3, pc}
   badcc:	0003022c 	.word	0x0003022c

000badd0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   badd0:	b508      	push	{r3, lr}
   badd2:	4b02      	ldr	r3, [pc, #8]	; (baddc <HAL_Interrupts_Detach+0xc>)
   badd4:	681b      	ldr	r3, [r3, #0]
   badd6:	69db      	ldr	r3, [r3, #28]
   badd8:	9301      	str	r3, [sp, #4]
   badda:	bd08      	pop	{r3, pc}
   baddc:	0003022c 	.word	0x0003022c

000bade0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bade0:	b508      	push	{r3, lr}
   bade2:	4b02      	ldr	r3, [pc, #8]	; (badec <hal_adc_read+0xc>)
   bade4:	681b      	ldr	r3, [r3, #0]
   bade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bade8:	9301      	str	r3, [sp, #4]
   badea:	bd08      	pop	{r3, pc}
   badec:	0003022c 	.word	0x0003022c

000badf0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   badf0:	b508      	push	{r3, lr}
   badf2:	4b02      	ldr	r3, [pc, #8]	; (badfc <hal_i2c_begin+0xc>)
   badf4:	681b      	ldr	r3, [r3, #0]
   badf6:	68db      	ldr	r3, [r3, #12]
   badf8:	9301      	str	r3, [sp, #4]
   badfa:	bd08      	pop	{r3, pc}
   badfc:	00030228 	.word	0x00030228

000bae00 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bae00:	b508      	push	{r3, lr}
   bae02:	4b02      	ldr	r3, [pc, #8]	; (bae0c <hal_i2c_begin_transmission+0xc>)
   bae04:	681b      	ldr	r3, [r3, #0]
   bae06:	699b      	ldr	r3, [r3, #24]
   bae08:	9301      	str	r3, [sp, #4]
   bae0a:	bd08      	pop	{r3, pc}
   bae0c:	00030228 	.word	0x00030228

000bae10 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bae10:	b508      	push	{r3, lr}
   bae12:	4b02      	ldr	r3, [pc, #8]	; (bae1c <hal_i2c_end_transmission+0xc>)
   bae14:	681b      	ldr	r3, [r3, #0]
   bae16:	69db      	ldr	r3, [r3, #28]
   bae18:	9301      	str	r3, [sp, #4]
   bae1a:	bd08      	pop	{r3, pc}
   bae1c:	00030228 	.word	0x00030228

000bae20 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bae20:	b508      	push	{r3, lr}
   bae22:	4b02      	ldr	r3, [pc, #8]	; (bae2c <hal_i2c_write+0xc>)
   bae24:	681b      	ldr	r3, [r3, #0]
   bae26:	6a1b      	ldr	r3, [r3, #32]
   bae28:	9301      	str	r3, [sp, #4]
   bae2a:	bd08      	pop	{r3, pc}
   bae2c:	00030228 	.word	0x00030228

000bae30 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bae30:	b508      	push	{r3, lr}
   bae32:	4b02      	ldr	r3, [pc, #8]	; (bae3c <hal_i2c_available+0xc>)
   bae34:	681b      	ldr	r3, [r3, #0]
   bae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bae38:	9301      	str	r3, [sp, #4]
   bae3a:	bd08      	pop	{r3, pc}
   bae3c:	00030228 	.word	0x00030228

000bae40 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bae40:	b508      	push	{r3, lr}
   bae42:	4b02      	ldr	r3, [pc, #8]	; (bae4c <hal_i2c_read+0xc>)
   bae44:	681b      	ldr	r3, [r3, #0]
   bae46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bae48:	9301      	str	r3, [sp, #4]
   bae4a:	bd08      	pop	{r3, pc}
   bae4c:	00030228 	.word	0x00030228

000bae50 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bae50:	b508      	push	{r3, lr}
   bae52:	4b02      	ldr	r3, [pc, #8]	; (bae5c <hal_i2c_peek+0xc>)
   bae54:	681b      	ldr	r3, [r3, #0]
   bae56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bae58:	9301      	str	r3, [sp, #4]
   bae5a:	bd08      	pop	{r3, pc}
   bae5c:	00030228 	.word	0x00030228

000bae60 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bae60:	b508      	push	{r3, lr}
   bae62:	4b02      	ldr	r3, [pc, #8]	; (bae6c <hal_i2c_flush+0xc>)
   bae64:	681b      	ldr	r3, [r3, #0]
   bae66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bae68:	9301      	str	r3, [sp, #4]
   bae6a:	bd08      	pop	{r3, pc}
   bae6c:	00030228 	.word	0x00030228

000bae70 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bae70:	b508      	push	{r3, lr}
   bae72:	4b02      	ldr	r3, [pc, #8]	; (bae7c <hal_i2c_is_enabled+0xc>)
   bae74:	681b      	ldr	r3, [r3, #0]
   bae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bae78:	9301      	str	r3, [sp, #4]
   bae7a:	bd08      	pop	{r3, pc}
   bae7c:	00030228 	.word	0x00030228

000bae80 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bae80:	b508      	push	{r3, lr}
   bae82:	4b02      	ldr	r3, [pc, #8]	; (bae8c <hal_i2c_init+0xc>)
   bae84:	681b      	ldr	r3, [r3, #0]
   bae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bae88:	9301      	str	r3, [sp, #4]
   bae8a:	bd08      	pop	{r3, pc}
   bae8c:	00030228 	.word	0x00030228

000bae90 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bae90:	b508      	push	{r3, lr}
   bae92:	4b02      	ldr	r3, [pc, #8]	; (bae9c <hal_i2c_lock+0xc>)
   bae94:	681b      	ldr	r3, [r3, #0]
   bae96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bae98:	9301      	str	r3, [sp, #4]
   bae9a:	bd08      	pop	{r3, pc}
   bae9c:	00030228 	.word	0x00030228

000baea0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   baea0:	b508      	push	{r3, lr}
   baea2:	4b02      	ldr	r3, [pc, #8]	; (baeac <hal_i2c_unlock+0xc>)
   baea4:	681b      	ldr	r3, [r3, #0]
   baea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   baea8:	9301      	str	r3, [sp, #4]
   baeaa:	bd08      	pop	{r3, pc}
   baeac:	00030228 	.word	0x00030228

000baeb0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   baeb0:	b508      	push	{r3, lr}
   baeb2:	4b02      	ldr	r3, [pc, #8]	; (baebc <hal_i2c_request_ex+0xc>)
   baeb4:	681b      	ldr	r3, [r3, #0]
   baeb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   baeb8:	9301      	str	r3, [sp, #4]
   baeba:	bd08      	pop	{r3, pc}
   baebc:	00030228 	.word	0x00030228

000baec0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   baec0:	b508      	push	{r3, lr}
   baec2:	4b02      	ldr	r3, [pc, #8]	; (baecc <inet_inet_ntop+0xc>)
   baec4:	681b      	ldr	r3, [r3, #0]
   baec6:	695b      	ldr	r3, [r3, #20]
   baec8:	9301      	str	r3, [sp, #4]
   baeca:	bd08      	pop	{r3, pc}
   baecc:	00030264 	.word	0x00030264

000baed0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   baed0:	b508      	push	{r3, lr}
   baed2:	4b02      	ldr	r3, [pc, #8]	; (baedc <netdb_freeaddrinfo+0xc>)
   baed4:	681b      	ldr	r3, [r3, #0]
   baed6:	689b      	ldr	r3, [r3, #8]
   baed8:	9301      	str	r3, [sp, #4]
   baeda:	bd08      	pop	{r3, pc}
   baedc:	00030268 	.word	0x00030268

000baee0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   baee0:	b508      	push	{r3, lr}
   baee2:	4b02      	ldr	r3, [pc, #8]	; (baeec <netdb_getaddrinfo+0xc>)
   baee4:	681b      	ldr	r3, [r3, #0]
   baee6:	68db      	ldr	r3, [r3, #12]
   baee8:	9301      	str	r3, [sp, #4]
   baeea:	bd08      	pop	{r3, pc}
   baeec:	00030268 	.word	0x00030268

000baef0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   baef0:	b508      	push	{r3, lr}
   baef2:	4b02      	ldr	r3, [pc, #8]	; (baefc <hal_spi_begin+0xc>)
   baef4:	681b      	ldr	r3, [r3, #0]
   baef6:	681b      	ldr	r3, [r3, #0]
   baef8:	9301      	str	r3, [sp, #4]
   baefa:	bd08      	pop	{r3, pc}
   baefc:	00030230 	.word	0x00030230

000baf00 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   baf00:	b508      	push	{r3, lr}
   baf02:	4b02      	ldr	r3, [pc, #8]	; (baf0c <hal_spi_end+0xc>)
   baf04:	681b      	ldr	r3, [r3, #0]
   baf06:	685b      	ldr	r3, [r3, #4]
   baf08:	9301      	str	r3, [sp, #4]
   baf0a:	bd08      	pop	{r3, pc}
   baf0c:	00030230 	.word	0x00030230

000baf10 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   baf10:	b508      	push	{r3, lr}
   baf12:	4b02      	ldr	r3, [pc, #8]	; (baf1c <hal_spi_transfer+0xc>)
   baf14:	681b      	ldr	r3, [r3, #0]
   baf16:	695b      	ldr	r3, [r3, #20]
   baf18:	9301      	str	r3, [sp, #4]
   baf1a:	bd08      	pop	{r3, pc}
   baf1c:	00030230 	.word	0x00030230

000baf20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   baf20:	b508      	push	{r3, lr}
   baf22:	4b02      	ldr	r3, [pc, #8]	; (baf2c <hal_spi_init+0xc>)
   baf24:	681b      	ldr	r3, [r3, #0]
   baf26:	69db      	ldr	r3, [r3, #28]
   baf28:	9301      	str	r3, [sp, #4]
   baf2a:	bd08      	pop	{r3, pc}
   baf2c:	00030230 	.word	0x00030230

000baf30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   baf30:	b508      	push	{r3, lr}
   baf32:	4b02      	ldr	r3, [pc, #8]	; (baf3c <hal_spi_is_enabled+0xc>)
   baf34:	681b      	ldr	r3, [r3, #0]
   baf36:	6a1b      	ldr	r3, [r3, #32]
   baf38:	9301      	str	r3, [sp, #4]
   baf3a:	bd08      	pop	{r3, pc}
   baf3c:	00030230 	.word	0x00030230

000baf40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   baf40:	b508      	push	{r3, lr}
   baf42:	4b02      	ldr	r3, [pc, #8]	; (baf4c <hal_spi_info+0xc>)
   baf44:	681b      	ldr	r3, [r3, #0]
   baf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baf48:	9301      	str	r3, [sp, #4]
   baf4a:	bd08      	pop	{r3, pc}
   baf4c:	00030230 	.word	0x00030230

000baf50 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   baf50:	b508      	push	{r3, lr}
   baf52:	4b02      	ldr	r3, [pc, #8]	; (baf5c <hal_spi_set_settings+0xc>)
   baf54:	681b      	ldr	r3, [r3, #0]
   baf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   baf58:	9301      	str	r3, [sp, #4]
   baf5a:	bd08      	pop	{r3, pc}
   baf5c:	00030230 	.word	0x00030230

000baf60 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   baf60:	b508      	push	{r3, lr}
   baf62:	4b02      	ldr	r3, [pc, #8]	; (baf6c <hal_spi_acquire+0xc>)
   baf64:	681b      	ldr	r3, [r3, #0]
   baf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baf68:	9301      	str	r3, [sp, #4]
   baf6a:	bd08      	pop	{r3, pc}
   baf6c:	00030230 	.word	0x00030230

000baf70 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   baf70:	b508      	push	{r3, lr}
   baf72:	4b02      	ldr	r3, [pc, #8]	; (baf7c <hal_spi_release+0xc>)
   baf74:	681b      	ldr	r3, [r3, #0]
   baf76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baf78:	9301      	str	r3, [sp, #4]
   baf7a:	bd08      	pop	{r3, pc}
   baf7c:	00030230 	.word	0x00030230

000baf80 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   baf80:	b508      	push	{r3, lr}
   baf82:	4b02      	ldr	r3, [pc, #8]	; (baf8c <_open+0xc>)
   baf84:	681b      	ldr	r3, [r3, #0]
   baf86:	681b      	ldr	r3, [r3, #0]
   baf88:	9301      	str	r3, [sp, #4]
   baf8a:	bd08      	pop	{r3, pc}
   baf8c:	00030284 	.word	0x00030284

000baf90 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   baf90:	b508      	push	{r3, lr}
   baf92:	4b02      	ldr	r3, [pc, #8]	; (baf9c <_write+0xc>)
   baf94:	681b      	ldr	r3, [r3, #0]
   baf96:	685b      	ldr	r3, [r3, #4]
   baf98:	9301      	str	r3, [sp, #4]
   baf9a:	bd08      	pop	{r3, pc}
   baf9c:	00030284 	.word	0x00030284

000bafa0 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bafa0:	b508      	push	{r3, lr}
   bafa2:	4b02      	ldr	r3, [pc, #8]	; (bafac <_read+0xc>)
   bafa4:	681b      	ldr	r3, [r3, #0]
   bafa6:	689b      	ldr	r3, [r3, #8]
   bafa8:	9301      	str	r3, [sp, #4]
   bafaa:	bd08      	pop	{r3, pc}
   bafac:	00030284 	.word	0x00030284

000bafb0 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bafb0:	b508      	push	{r3, lr}
   bafb2:	4b02      	ldr	r3, [pc, #8]	; (bafbc <_close+0xc>)
   bafb4:	681b      	ldr	r3, [r3, #0]
   bafb6:	68db      	ldr	r3, [r3, #12]
   bafb8:	9301      	str	r3, [sp, #4]
   bafba:	bd08      	pop	{r3, pc}
   bafbc:	00030284 	.word	0x00030284

000bafc0 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bafc0:	b508      	push	{r3, lr}
   bafc2:	4b02      	ldr	r3, [pc, #8]	; (bafcc <_fstat+0xc>)
   bafc4:	681b      	ldr	r3, [r3, #0]
   bafc6:	695b      	ldr	r3, [r3, #20]
   bafc8:	9301      	str	r3, [sp, #4]
   bafca:	bd08      	pop	{r3, pc}
   bafcc:	00030284 	.word	0x00030284

000bafd0 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bafd0:	b508      	push	{r3, lr}
   bafd2:	4b02      	ldr	r3, [pc, #8]	; (bafdc <_lseek+0xc>)
   bafd4:	681b      	ldr	r3, [r3, #0]
   bafd6:	6a1b      	ldr	r3, [r3, #32]
   bafd8:	9301      	str	r3, [sp, #4]
   bafda:	bd08      	pop	{r3, pc}
   bafdc:	00030284 	.word	0x00030284

000bafe0 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bafe0:	b508      	push	{r3, lr}
   bafe2:	4b02      	ldr	r3, [pc, #8]	; (bafec <stat+0xc>)
   bafe4:	681b      	ldr	r3, [r3, #0]
   bafe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bafe8:	9301      	str	r3, [sp, #4]
   bafea:	bd08      	pop	{r3, pc}
   bafec:	00030284 	.word	0x00030284

000baff0 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   baff0:	b508      	push	{r3, lr}
   baff2:	4b02      	ldr	r3, [pc, #8]	; (baffc <mkdir+0xc>)
   baff4:	681b      	ldr	r3, [r3, #0]
   baff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   baff8:	9301      	str	r3, [sp, #4]
   baffa:	bd08      	pop	{r3, pc}
   baffc:	00030284 	.word	0x00030284

000bb000 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bb000:	b508      	push	{r3, lr}
   bb002:	4b02      	ldr	r3, [pc, #8]	; (bb00c <_unlink+0xc>)
   bb004:	681b      	ldr	r3, [r3, #0]
   bb006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb008:	9301      	str	r3, [sp, #4]
   bb00a:	bd08      	pop	{r3, pc}
   bb00c:	00030284 	.word	0x00030284

000bb010 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bb010:	b508      	push	{r3, lr}
   bb012:	4b02      	ldr	r3, [pc, #8]	; (bb01c <opendir+0xc>)
   bb014:	681b      	ldr	r3, [r3, #0]
   bb016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb018:	9301      	str	r3, [sp, #4]
   bb01a:	bd08      	pop	{r3, pc}
   bb01c:	00030284 	.word	0x00030284

000bb020 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bb020:	b508      	push	{r3, lr}
   bb022:	4b02      	ldr	r3, [pc, #8]	; (bb02c <readdir+0xc>)
   bb024:	681b      	ldr	r3, [r3, #0]
   bb026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb028:	9301      	str	r3, [sp, #4]
   bb02a:	bd08      	pop	{r3, pc}
   bb02c:	00030284 	.word	0x00030284

000bb030 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bb030:	b508      	push	{r3, lr}
   bb032:	4b02      	ldr	r3, [pc, #8]	; (bb03c <closedir+0xc>)
   bb034:	681b      	ldr	r3, [r3, #0]
   bb036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb038:	9301      	str	r3, [sp, #4]
   bb03a:	bd08      	pop	{r3, pc}
   bb03c:	00030284 	.word	0x00030284

000bb040 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bb040:	b508      	push	{r3, lr}
   bb042:	4b02      	ldr	r3, [pc, #8]	; (bb04c <hal_usart_end+0xc>)
   bb044:	681b      	ldr	r3, [r3, #0]
   bb046:	689b      	ldr	r3, [r3, #8]
   bb048:	9301      	str	r3, [sp, #4]
   bb04a:	bd08      	pop	{r3, pc}
   bb04c:	0003023c 	.word	0x0003023c

000bb050 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bb050:	b508      	push	{r3, lr}
   bb052:	4b02      	ldr	r3, [pc, #8]	; (bb05c <hal_usart_write+0xc>)
   bb054:	681b      	ldr	r3, [r3, #0]
   bb056:	68db      	ldr	r3, [r3, #12]
   bb058:	9301      	str	r3, [sp, #4]
   bb05a:	bd08      	pop	{r3, pc}
   bb05c:	0003023c 	.word	0x0003023c

000bb060 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bb060:	b508      	push	{r3, lr}
   bb062:	4b02      	ldr	r3, [pc, #8]	; (bb06c <hal_usart_available+0xc>)
   bb064:	681b      	ldr	r3, [r3, #0]
   bb066:	691b      	ldr	r3, [r3, #16]
   bb068:	9301      	str	r3, [sp, #4]
   bb06a:	bd08      	pop	{r3, pc}
   bb06c:	0003023c 	.word	0x0003023c

000bb070 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bb070:	b508      	push	{r3, lr}
   bb072:	4b02      	ldr	r3, [pc, #8]	; (bb07c <hal_usart_read+0xc>)
   bb074:	681b      	ldr	r3, [r3, #0]
   bb076:	695b      	ldr	r3, [r3, #20]
   bb078:	9301      	str	r3, [sp, #4]
   bb07a:	bd08      	pop	{r3, pc}
   bb07c:	0003023c 	.word	0x0003023c

000bb080 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bb080:	b508      	push	{r3, lr}
   bb082:	4b02      	ldr	r3, [pc, #8]	; (bb08c <hal_usart_peek+0xc>)
   bb084:	681b      	ldr	r3, [r3, #0]
   bb086:	699b      	ldr	r3, [r3, #24]
   bb088:	9301      	str	r3, [sp, #4]
   bb08a:	bd08      	pop	{r3, pc}
   bb08c:	0003023c 	.word	0x0003023c

000bb090 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bb090:	b508      	push	{r3, lr}
   bb092:	4b02      	ldr	r3, [pc, #8]	; (bb09c <hal_usart_flush+0xc>)
   bb094:	681b      	ldr	r3, [r3, #0]
   bb096:	69db      	ldr	r3, [r3, #28]
   bb098:	9301      	str	r3, [sp, #4]
   bb09a:	bd08      	pop	{r3, pc}
   bb09c:	0003023c 	.word	0x0003023c

000bb0a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bb0a0:	b508      	push	{r3, lr}
   bb0a2:	4b02      	ldr	r3, [pc, #8]	; (bb0ac <hal_usart_is_enabled+0xc>)
   bb0a4:	681b      	ldr	r3, [r3, #0]
   bb0a6:	6a1b      	ldr	r3, [r3, #32]
   bb0a8:	9301      	str	r3, [sp, #4]
   bb0aa:	bd08      	pop	{r3, pc}
   bb0ac:	0003023c 	.word	0x0003023c

000bb0b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bb0b0:	b508      	push	{r3, lr}
   bb0b2:	4b02      	ldr	r3, [pc, #8]	; (bb0bc <hal_usart_available_data_for_write+0xc>)
   bb0b4:	681b      	ldr	r3, [r3, #0]
   bb0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb0b8:	9301      	str	r3, [sp, #4]
   bb0ba:	bd08      	pop	{r3, pc}
   bb0bc:	0003023c 	.word	0x0003023c

000bb0c0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bb0c0:	b508      	push	{r3, lr}
   bb0c2:	4b02      	ldr	r3, [pc, #8]	; (bb0cc <hal_usart_begin_config+0xc>)
   bb0c4:	681b      	ldr	r3, [r3, #0]
   bb0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb0c8:	9301      	str	r3, [sp, #4]
   bb0ca:	bd08      	pop	{r3, pc}
   bb0cc:	0003023c 	.word	0x0003023c

000bb0d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bb0d0:	b508      	push	{r3, lr}
   bb0d2:	4b02      	ldr	r3, [pc, #8]	; (bb0dc <hal_usart_init_ex+0xc>)
   bb0d4:	681b      	ldr	r3, [r3, #0]
   bb0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb0d8:	9301      	str	r3, [sp, #4]
   bb0da:	bd08      	pop	{r3, pc}
   bb0dc:	0003023c 	.word	0x0003023c

000bb0e0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bb0e0:	b508      	push	{r3, lr}
   bb0e2:	4b02      	ldr	r3, [pc, #8]	; (bb0ec <HAL_USB_USART_Init+0xc>)
   bb0e4:	681b      	ldr	r3, [r3, #0]
   bb0e6:	681b      	ldr	r3, [r3, #0]
   bb0e8:	9301      	str	r3, [sp, #4]
   bb0ea:	bd08      	pop	{r3, pc}
   bb0ec:	0003024c 	.word	0x0003024c

000bb0f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bb0f0:	b508      	push	{r3, lr}
   bb0f2:	4b02      	ldr	r3, [pc, #8]	; (bb0fc <HAL_USB_USART_Begin+0xc>)
   bb0f4:	681b      	ldr	r3, [r3, #0]
   bb0f6:	685b      	ldr	r3, [r3, #4]
   bb0f8:	9301      	str	r3, [sp, #4]
   bb0fa:	bd08      	pop	{r3, pc}
   bb0fc:	0003024c 	.word	0x0003024c

000bb100 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bb100:	b508      	push	{r3, lr}
   bb102:	4b02      	ldr	r3, [pc, #8]	; (bb10c <HAL_USB_USART_End+0xc>)
   bb104:	681b      	ldr	r3, [r3, #0]
   bb106:	689b      	ldr	r3, [r3, #8]
   bb108:	9301      	str	r3, [sp, #4]
   bb10a:	bd08      	pop	{r3, pc}
   bb10c:	0003024c 	.word	0x0003024c

000bb110 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bb110:	b508      	push	{r3, lr}
   bb112:	4b02      	ldr	r3, [pc, #8]	; (bb11c <HAL_USB_USART_Available_Data+0xc>)
   bb114:	681b      	ldr	r3, [r3, #0]
   bb116:	691b      	ldr	r3, [r3, #16]
   bb118:	9301      	str	r3, [sp, #4]
   bb11a:	bd08      	pop	{r3, pc}
   bb11c:	0003024c 	.word	0x0003024c

000bb120 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bb120:	b508      	push	{r3, lr}
   bb122:	4b02      	ldr	r3, [pc, #8]	; (bb12c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bb124:	681b      	ldr	r3, [r3, #0]
   bb126:	695b      	ldr	r3, [r3, #20]
   bb128:	9301      	str	r3, [sp, #4]
   bb12a:	bd08      	pop	{r3, pc}
   bb12c:	0003024c 	.word	0x0003024c

000bb130 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb130:	b508      	push	{r3, lr}
   bb132:	4b02      	ldr	r3, [pc, #8]	; (bb13c <HAL_USB_USART_Receive_Data+0xc>)
   bb134:	681b      	ldr	r3, [r3, #0]
   bb136:	699b      	ldr	r3, [r3, #24]
   bb138:	9301      	str	r3, [sp, #4]
   bb13a:	bd08      	pop	{r3, pc}
   bb13c:	0003024c 	.word	0x0003024c

000bb140 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bb140:	b508      	push	{r3, lr}
   bb142:	4b02      	ldr	r3, [pc, #8]	; (bb14c <HAL_USB_USART_Send_Data+0xc>)
   bb144:	681b      	ldr	r3, [r3, #0]
   bb146:	69db      	ldr	r3, [r3, #28]
   bb148:	9301      	str	r3, [sp, #4]
   bb14a:	bd08      	pop	{r3, pc}
   bb14c:	0003024c 	.word	0x0003024c

000bb150 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bb150:	b508      	push	{r3, lr}
   bb152:	4b02      	ldr	r3, [pc, #8]	; (bb15c <HAL_USB_USART_Flush_Data+0xc>)
   bb154:	681b      	ldr	r3, [r3, #0]
   bb156:	6a1b      	ldr	r3, [r3, #32]
   bb158:	9301      	str	r3, [sp, #4]
   bb15a:	bd08      	pop	{r3, pc}
   bb15c:	0003024c 	.word	0x0003024c

000bb160 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bb160:	b508      	push	{r3, lr}
   bb162:	4b02      	ldr	r3, [pc, #8]	; (bb16c <HAL_USB_USART_Is_Connected+0xc>)
   bb164:	681b      	ldr	r3, [r3, #0]
   bb166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb168:	9301      	str	r3, [sp, #4]
   bb16a:	bd08      	pop	{r3, pc}
   bb16c:	0003024c 	.word	0x0003024c

000bb170 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bb170:	b508      	push	{r3, lr}
   bb172:	4b02      	ldr	r3, [pc, #8]	; (bb17c <panic_+0xc>)
   bb174:	681b      	ldr	r3, [r3, #0]
   bb176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb178:	9301      	str	r3, [sp, #4]
   bb17a:	bd08      	pop	{r3, pc}
   bb17c:	00030260 	.word	0x00030260

000bb180 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bb180:	b508      	push	{r3, lr}
   bb182:	4b02      	ldr	r3, [pc, #8]	; (bb18c <log_message+0xc>)
   bb184:	681b      	ldr	r3, [r3, #0]
   bb186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb188:	9301      	str	r3, [sp, #4]
   bb18a:	bd08      	pop	{r3, pc}
   bb18c:	00030260 	.word	0x00030260

000bb190 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bb190:	b508      	push	{r3, lr}
   bb192:	4b02      	ldr	r3, [pc, #8]	; (bb19c <log_message_v+0xc>)
   bb194:	681b      	ldr	r3, [r3, #0]
   bb196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb198:	9301      	str	r3, [sp, #4]
   bb19a:	bd08      	pop	{r3, pc}
   bb19c:	00030260 	.word	0x00030260

000bb1a0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bb1a0:	b508      	push	{r3, lr}
   bb1a2:	4b02      	ldr	r3, [pc, #8]	; (bb1ac <log_level_name+0xc>)
   bb1a4:	681b      	ldr	r3, [r3, #0]
   bb1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bb1a8:	9301      	str	r3, [sp, #4]
   bb1aa:	bd08      	pop	{r3, pc}
   bb1ac:	00030260 	.word	0x00030260

000bb1b0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bb1b0:	b508      	push	{r3, lr}
   bb1b2:	4b02      	ldr	r3, [pc, #8]	; (bb1bc <log_set_callbacks+0xc>)
   bb1b4:	681b      	ldr	r3, [r3, #0]
   bb1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bb1b8:	9301      	str	r3, [sp, #4]
   bb1ba:	bd08      	pop	{r3, pc}
   bb1bc:	00030260 	.word	0x00030260

000bb1c0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bb1c0:	b508      	push	{r3, lr}
   bb1c2:	4b03      	ldr	r3, [pc, #12]	; (bb1d0 <diag_get_source+0x10>)
   bb1c4:	681b      	ldr	r3, [r3, #0]
   bb1c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bb1ca:	9301      	str	r3, [sp, #4]
   bb1cc:	bd08      	pop	{r3, pc}
   bb1ce:	0000      	.short	0x0000
   bb1d0:	00030260 	.word	0x00030260

000bb1d4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bb1d4:	b508      	push	{r3, lr}
   bb1d6:	4b02      	ldr	r3, [pc, #8]	; (bb1e0 <system_mode+0xc>)
   bb1d8:	681b      	ldr	r3, [r3, #0]
   bb1da:	681b      	ldr	r3, [r3, #0]
   bb1dc:	9301      	str	r3, [sp, #4]
   bb1de:	bd08      	pop	{r3, pc}
   bb1e0:	00030220 	.word	0x00030220

000bb1e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bb1e4:	b508      	push	{r3, lr}
   bb1e6:	4b02      	ldr	r3, [pc, #8]	; (bb1f0 <set_system_mode+0xc>)
   bb1e8:	681b      	ldr	r3, [r3, #0]
   bb1ea:	685b      	ldr	r3, [r3, #4]
   bb1ec:	9301      	str	r3, [sp, #4]
   bb1ee:	bd08      	pop	{r3, pc}
   bb1f0:	00030220 	.word	0x00030220

000bb1f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bb1f4:	b508      	push	{r3, lr}
   bb1f6:	4b02      	ldr	r3, [pc, #8]	; (bb200 <system_delay_ms+0xc>)
   bb1f8:	681b      	ldr	r3, [r3, #0]
   bb1fa:	695b      	ldr	r3, [r3, #20]
   bb1fc:	9301      	str	r3, [sp, #4]
   bb1fe:	bd08      	pop	{r3, pc}
   bb200:	00030220 	.word	0x00030220

000bb204 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bb204:	b508      	push	{r3, lr}
   bb206:	4b02      	ldr	r3, [pc, #8]	; (bb210 <system_subscribe_event+0xc>)
   bb208:	681b      	ldr	r3, [r3, #0]
   bb20a:	6a1b      	ldr	r3, [r3, #32]
   bb20c:	9301      	str	r3, [sp, #4]
   bb20e:	bd08      	pop	{r3, pc}
   bb210:	00030220 	.word	0x00030220

000bb214 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bb214:	b508      	push	{r3, lr}
   bb216:	4b02      	ldr	r3, [pc, #8]	; (bb220 <system_thread_set_state+0xc>)
   bb218:	681b      	ldr	r3, [r3, #0]
   bb21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb21c:	9301      	str	r3, [sp, #4]
   bb21e:	bd08      	pop	{r3, pc}
   bb220:	00030220 	.word	0x00030220

000bb224 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bb224:	b508      	push	{r3, lr}
   bb226:	4b02      	ldr	r3, [pc, #8]	; (bb230 <application_thread_current+0xc>)
   bb228:	681b      	ldr	r3, [r3, #0]
   bb22a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb22c:	9301      	str	r3, [sp, #4]
   bb22e:	bd08      	pop	{r3, pc}
   bb230:	00030220 	.word	0x00030220

000bb234 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bb234:	b508      	push	{r3, lr}
   bb236:	4b02      	ldr	r3, [pc, #8]	; (bb240 <application_thread_invoke+0xc>)
   bb238:	681b      	ldr	r3, [r3, #0]
   bb23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb23c:	9301      	str	r3, [sp, #4]
   bb23e:	bd08      	pop	{r3, pc}
   bb240:	00030220 	.word	0x00030220

000bb244 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bb244:	b508      	push	{r3, lr}
   bb246:	4b02      	ldr	r3, [pc, #8]	; (bb250 <system_thread_get_state+0xc>)
   bb248:	681b      	ldr	r3, [r3, #0]
   bb24a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bb24c:	9301      	str	r3, [sp, #4]
   bb24e:	bd08      	pop	{r3, pc}
   bb250:	00030220 	.word	0x00030220

000bb254 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bb254:	b508      	push	{r3, lr}
   bb256:	4b02      	ldr	r3, [pc, #8]	; (bb260 <system_notify_time_changed+0xc>)
   bb258:	681b      	ldr	r3, [r3, #0]
   bb25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bb25c:	9301      	str	r3, [sp, #4]
   bb25e:	bd08      	pop	{r3, pc}
   bb260:	00030220 	.word	0x00030220

000bb264 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bb264:	b508      	push	{r3, lr}
   bb266:	4b03      	ldr	r3, [pc, #12]	; (bb274 <system_ctrl_set_app_request_handler+0x10>)
   bb268:	681b      	ldr	r3, [r3, #0]
   bb26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bb26e:	9301      	str	r3, [sp, #4]
   bb270:	bd08      	pop	{r3, pc}
   bb272:	0000      	.short	0x0000
   bb274:	00030220 	.word	0x00030220

000bb278 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bb278:	b508      	push	{r3, lr}
   bb27a:	4b03      	ldr	r3, [pc, #12]	; (bb288 <system_ctrl_set_result+0x10>)
   bb27c:	681b      	ldr	r3, [r3, #0]
   bb27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bb282:	9301      	str	r3, [sp, #4]
   bb284:	bd08      	pop	{r3, pc}
   bb286:	0000      	.short	0x0000
   bb288:	00030220 	.word	0x00030220

000bb28c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bb28c:	b508      	push	{r3, lr}
   bb28e:	4b03      	ldr	r3, [pc, #12]	; (bb29c <system_power_management_set_config+0x10>)
   bb290:	681b      	ldr	r3, [r3, #0]
   bb292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bb296:	9301      	str	r3, [sp, #4]
   bb298:	bd08      	pop	{r3, pc}
   bb29a:	0000      	.short	0x0000
   bb29c:	00030220 	.word	0x00030220

000bb2a0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bb2a0:	b508      	push	{r3, lr}
   bb2a2:	4b03      	ldr	r3, [pc, #12]	; (bb2b0 <system_sleep_ext+0x10>)
   bb2a4:	681b      	ldr	r3, [r3, #0]
   bb2a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bb2aa:	9301      	str	r3, [sp, #4]
   bb2ac:	bd08      	pop	{r3, pc}
   bb2ae:	0000      	.short	0x0000
   bb2b0:	00030220 	.word	0x00030220

000bb2b4 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bb2b4:	b508      	push	{r3, lr}
   bb2b6:	4b03      	ldr	r3, [pc, #12]	; (bb2c4 <system_reset+0x10>)
   bb2b8:	681b      	ldr	r3, [r3, #0]
   bb2ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bb2be:	9301      	str	r3, [sp, #4]
   bb2c0:	bd08      	pop	{r3, pc}
   bb2c2:	0000      	.short	0x0000
   bb2c4:	00030220 	.word	0x00030220

000bb2c8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bb2c8:	b508      	push	{r3, lr}
   bb2ca:	4b02      	ldr	r3, [pc, #8]	; (bb2d4 <spark_variable+0xc>)
   bb2cc:	681b      	ldr	r3, [r3, #0]
   bb2ce:	681b      	ldr	r3, [r3, #0]
   bb2d0:	9301      	str	r3, [sp, #4]
   bb2d2:	bd08      	pop	{r3, pc}
   bb2d4:	00030244 	.word	0x00030244

000bb2d8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bb2d8:	b508      	push	{r3, lr}
   bb2da:	4b02      	ldr	r3, [pc, #8]	; (bb2e4 <spark_function+0xc>)
   bb2dc:	681b      	ldr	r3, [r3, #0]
   bb2de:	685b      	ldr	r3, [r3, #4]
   bb2e0:	9301      	str	r3, [sp, #4]
   bb2e2:	bd08      	pop	{r3, pc}
   bb2e4:	00030244 	.word	0x00030244

000bb2e8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bb2e8:	b508      	push	{r3, lr}
   bb2ea:	4b02      	ldr	r3, [pc, #8]	; (bb2f4 <spark_process+0xc>)
   bb2ec:	681b      	ldr	r3, [r3, #0]
   bb2ee:	689b      	ldr	r3, [r3, #8]
   bb2f0:	9301      	str	r3, [sp, #4]
   bb2f2:	bd08      	pop	{r3, pc}
   bb2f4:	00030244 	.word	0x00030244

000bb2f8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bb2f8:	b508      	push	{r3, lr}
   bb2fa:	4b02      	ldr	r3, [pc, #8]	; (bb304 <spark_cloud_flag_connect+0xc>)
   bb2fc:	681b      	ldr	r3, [r3, #0]
   bb2fe:	68db      	ldr	r3, [r3, #12]
   bb300:	9301      	str	r3, [sp, #4]
   bb302:	bd08      	pop	{r3, pc}
   bb304:	00030244 	.word	0x00030244

000bb308 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bb308:	b508      	push	{r3, lr}
   bb30a:	4b02      	ldr	r3, [pc, #8]	; (bb314 <spark_cloud_flag_connected+0xc>)
   bb30c:	681b      	ldr	r3, [r3, #0]
   bb30e:	695b      	ldr	r3, [r3, #20]
   bb310:	9301      	str	r3, [sp, #4]
   bb312:	bd08      	pop	{r3, pc}
   bb314:	00030244 	.word	0x00030244

000bb318 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bb318:	b508      	push	{r3, lr}
   bb31a:	4b02      	ldr	r3, [pc, #8]	; (bb324 <spark_deviceID+0xc>)
   bb31c:	681b      	ldr	r3, [r3, #0]
   bb31e:	69db      	ldr	r3, [r3, #28]
   bb320:	9301      	str	r3, [sp, #4]
   bb322:	bd08      	pop	{r3, pc}
   bb324:	00030244 	.word	0x00030244

000bb328 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bb328:	b508      	push	{r3, lr}
   bb32a:	4b02      	ldr	r3, [pc, #8]	; (bb334 <spark_send_event+0xc>)
   bb32c:	681b      	ldr	r3, [r3, #0]
   bb32e:	6a1b      	ldr	r3, [r3, #32]
   bb330:	9301      	str	r3, [sp, #4]
   bb332:	bd08      	pop	{r3, pc}
   bb334:	00030244 	.word	0x00030244

000bb338 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bb338:	b508      	push	{r3, lr}
   bb33a:	4b02      	ldr	r3, [pc, #8]	; (bb344 <spark_sync_time_pending+0xc>)
   bb33c:	681b      	ldr	r3, [r3, #0]
   bb33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb340:	9301      	str	r3, [sp, #4]
   bb342:	bd08      	pop	{r3, pc}
   bb344:	00030244 	.word	0x00030244

000bb348 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bb348:	b508      	push	{r3, lr}
   bb34a:	4b02      	ldr	r3, [pc, #8]	; (bb354 <spark_sync_time_last+0xc>)
   bb34c:	681b      	ldr	r3, [r3, #0]
   bb34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb350:	9301      	str	r3, [sp, #4]
   bb352:	bd08      	pop	{r3, pc}
   bb354:	00030244 	.word	0x00030244

000bb358 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   bb358:	b508      	push	{r3, lr}
   bb35a:	4b02      	ldr	r3, [pc, #8]	; (bb364 <spark_set_connection_property+0xc>)
   bb35c:	681b      	ldr	r3, [r3, #0]
   bb35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bb360:	9301      	str	r3, [sp, #4]
   bb362:	bd08      	pop	{r3, pc}
   bb364:	00030244 	.word	0x00030244

000bb368 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bb368:	b508      	push	{r3, lr}
   bb36a:	4b02      	ldr	r3, [pc, #8]	; (bb374 <spark_set_random_seed_from_cloud_handler+0xc>)
   bb36c:	681b      	ldr	r3, [r3, #0]
   bb36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb370:	9301      	str	r3, [sp, #4]
   bb372:	bd08      	pop	{r3, pc}
   bb374:	00030244 	.word	0x00030244

000bb378 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bb378:	b508      	push	{r3, lr}
   bb37a:	4b02      	ldr	r3, [pc, #8]	; (bb384 <spark_cloud_disconnect+0xc>)
   bb37c:	681b      	ldr	r3, [r3, #0]
   bb37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb380:	9301      	str	r3, [sp, #4]
   bb382:	bd08      	pop	{r3, pc}
   bb384:	00030244 	.word	0x00030244

000bb388 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bb388:	b508      	push	{r3, lr}
   bb38a:	4b02      	ldr	r3, [pc, #8]	; (bb394 <network_connect+0xc>)
   bb38c:	681b      	ldr	r3, [r3, #0]
   bb38e:	685b      	ldr	r3, [r3, #4]
   bb390:	9301      	str	r3, [sp, #4]
   bb392:	bd08      	pop	{r3, pc}
   bb394:	00030240 	.word	0x00030240

000bb398 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bb398:	b508      	push	{r3, lr}
   bb39a:	4b02      	ldr	r3, [pc, #8]	; (bb3a4 <network_connecting+0xc>)
   bb39c:	681b      	ldr	r3, [r3, #0]
   bb39e:	689b      	ldr	r3, [r3, #8]
   bb3a0:	9301      	str	r3, [sp, #4]
   bb3a2:	bd08      	pop	{r3, pc}
   bb3a4:	00030240 	.word	0x00030240

000bb3a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bb3a8:	b508      	push	{r3, lr}
   bb3aa:	4b02      	ldr	r3, [pc, #8]	; (bb3b4 <network_disconnect+0xc>)
   bb3ac:	681b      	ldr	r3, [r3, #0]
   bb3ae:	68db      	ldr	r3, [r3, #12]
   bb3b0:	9301      	str	r3, [sp, #4]
   bb3b2:	bd08      	pop	{r3, pc}
   bb3b4:	00030240 	.word	0x00030240

000bb3b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bb3b8:	b508      	push	{r3, lr}
   bb3ba:	4b02      	ldr	r3, [pc, #8]	; (bb3c4 <network_ready+0xc>)
   bb3bc:	681b      	ldr	r3, [r3, #0]
   bb3be:	691b      	ldr	r3, [r3, #16]
   bb3c0:	9301      	str	r3, [sp, #4]
   bb3c2:	bd08      	pop	{r3, pc}
   bb3c4:	00030240 	.word	0x00030240

000bb3c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bb3c8:	b508      	push	{r3, lr}
   bb3ca:	4b02      	ldr	r3, [pc, #8]	; (bb3d4 <network_on+0xc>)
   bb3cc:	681b      	ldr	r3, [r3, #0]
   bb3ce:	695b      	ldr	r3, [r3, #20]
   bb3d0:	9301      	str	r3, [sp, #4]
   bb3d2:	bd08      	pop	{r3, pc}
   bb3d4:	00030240 	.word	0x00030240

000bb3d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bb3d8:	b508      	push	{r3, lr}
   bb3da:	4b02      	ldr	r3, [pc, #8]	; (bb3e4 <network_off+0xc>)
   bb3dc:	681b      	ldr	r3, [r3, #0]
   bb3de:	699b      	ldr	r3, [r3, #24]
   bb3e0:	9301      	str	r3, [sp, #4]
   bb3e2:	bd08      	pop	{r3, pc}
   bb3e4:	00030240 	.word	0x00030240

000bb3e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bb3e8:	b508      	push	{r3, lr}
   bb3ea:	4b02      	ldr	r3, [pc, #8]	; (bb3f4 <network_listen+0xc>)
   bb3ec:	681b      	ldr	r3, [r3, #0]
   bb3ee:	69db      	ldr	r3, [r3, #28]
   bb3f0:	9301      	str	r3, [sp, #4]
   bb3f2:	bd08      	pop	{r3, pc}
   bb3f4:	00030240 	.word	0x00030240

000bb3f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bb3f8:	b508      	push	{r3, lr}
   bb3fa:	4b02      	ldr	r3, [pc, #8]	; (bb404 <network_listening+0xc>)
   bb3fc:	681b      	ldr	r3, [r3, #0]
   bb3fe:	6a1b      	ldr	r3, [r3, #32]
   bb400:	9301      	str	r3, [sp, #4]
   bb402:	bd08      	pop	{r3, pc}
   bb404:	00030240 	.word	0x00030240

000bb408 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bb408:	b508      	push	{r3, lr}
   bb40a:	4b02      	ldr	r3, [pc, #8]	; (bb414 <network_set_listen_timeout+0xc>)
   bb40c:	681b      	ldr	r3, [r3, #0]
   bb40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb410:	9301      	str	r3, [sp, #4]
   bb412:	bd08      	pop	{r3, pc}
   bb414:	00030240 	.word	0x00030240

000bb418 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bb418:	b508      	push	{r3, lr}
   bb41a:	4b02      	ldr	r3, [pc, #8]	; (bb424 <network_get_listen_timeout+0xc>)
   bb41c:	681b      	ldr	r3, [r3, #0]
   bb41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bb420:	9301      	str	r3, [sp, #4]
   bb422:	bd08      	pop	{r3, pc}
   bb424:	00030240 	.word	0x00030240

000bb428 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bb428:	b508      	push	{r3, lr}
   bb42a:	4b02      	ldr	r3, [pc, #8]	; (bb434 <network_is_on+0xc>)
   bb42c:	681b      	ldr	r3, [r3, #0]
   bb42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb430:	9301      	str	r3, [sp, #4]
   bb432:	bd08      	pop	{r3, pc}
   bb434:	00030240 	.word	0x00030240

000bb438 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bb438:	b508      	push	{r3, lr}
   bb43a:	4b02      	ldr	r3, [pc, #8]	; (bb444 <network_is_off+0xc>)
   bb43c:	681b      	ldr	r3, [r3, #0]
   bb43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb440:	9301      	str	r3, [sp, #4]
   bb442:	bd08      	pop	{r3, pc}
   bb444:	00030240 	.word	0x00030240

000bb448 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bb448:	b508      	push	{r3, lr}
   bb44a:	4b02      	ldr	r3, [pc, #8]	; (bb454 <malloc+0xc>)
   bb44c:	681b      	ldr	r3, [r3, #0]
   bb44e:	681b      	ldr	r3, [r3, #0]
   bb450:	9301      	str	r3, [sp, #4]
   bb452:	bd08      	pop	{r3, pc}
   bb454:	0003021c 	.word	0x0003021c

000bb458 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bb458:	b508      	push	{r3, lr}
   bb45a:	4b02      	ldr	r3, [pc, #8]	; (bb464 <free+0xc>)
   bb45c:	681b      	ldr	r3, [r3, #0]
   bb45e:	685b      	ldr	r3, [r3, #4]
   bb460:	9301      	str	r3, [sp, #4]
   bb462:	bd08      	pop	{r3, pc}
   bb464:	0003021c 	.word	0x0003021c

000bb468 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bb468:	b508      	push	{r3, lr}
   bb46a:	4b02      	ldr	r3, [pc, #8]	; (bb474 <realloc+0xc>)
   bb46c:	681b      	ldr	r3, [r3, #0]
   bb46e:	689b      	ldr	r3, [r3, #8]
   bb470:	9301      	str	r3, [sp, #4]
   bb472:	bd08      	pop	{r3, pc}
   bb474:	0003021c 	.word	0x0003021c

000bb478 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bb478:	b508      	push	{r3, lr}
   bb47a:	4b02      	ldr	r3, [pc, #8]	; (bb484 <siprintf+0xc>)
   bb47c:	681b      	ldr	r3, [r3, #0]
   bb47e:	691b      	ldr	r3, [r3, #16]
   bb480:	9301      	str	r3, [sp, #4]
   bb482:	bd08      	pop	{r3, pc}
   bb484:	0003021c 	.word	0x0003021c

000bb488 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bb488:	b508      	push	{r3, lr}
   bb48a:	4b02      	ldr	r3, [pc, #8]	; (bb494 <sscanf+0xc>)
   bb48c:	681b      	ldr	r3, [r3, #0]
   bb48e:	695b      	ldr	r3, [r3, #20]
   bb490:	9301      	str	r3, [sp, #4]
   bb492:	bd08      	pop	{r3, pc}
   bb494:	0003021c 	.word	0x0003021c

000bb498 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bb498:	b508      	push	{r3, lr}
   bb49a:	4b02      	ldr	r3, [pc, #8]	; (bb4a4 <snprintf+0xc>)
   bb49c:	681b      	ldr	r3, [r3, #0]
   bb49e:	69db      	ldr	r3, [r3, #28]
   bb4a0:	9301      	str	r3, [sp, #4]
   bb4a2:	bd08      	pop	{r3, pc}
   bb4a4:	0003021c 	.word	0x0003021c

000bb4a8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bb4a8:	b508      	push	{r3, lr}
   bb4aa:	4b02      	ldr	r3, [pc, #8]	; (bb4b4 <vsnprintf+0xc>)
   bb4ac:	681b      	ldr	r3, [r3, #0]
   bb4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb4b0:	9301      	str	r3, [sp, #4]
   bb4b2:	bd08      	pop	{r3, pc}
   bb4b4:	0003021c 	.word	0x0003021c

000bb4b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bb4b8:	b508      	push	{r3, lr}
   bb4ba:	4b02      	ldr	r3, [pc, #8]	; (bb4c4 <abort+0xc>)
   bb4bc:	681b      	ldr	r3, [r3, #0]
   bb4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb4c0:	9301      	str	r3, [sp, #4]
   bb4c2:	bd08      	pop	{r3, pc}
   bb4c4:	0003021c 	.word	0x0003021c

000bb4c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bb4c8:	b508      	push	{r3, lr}
   bb4ca:	4b02      	ldr	r3, [pc, #8]	; (bb4d4 <_malloc_r+0xc>)
   bb4cc:	681b      	ldr	r3, [r3, #0]
   bb4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bb4d0:	9301      	str	r3, [sp, #4]
   bb4d2:	bd08      	pop	{r3, pc}
   bb4d4:	0003021c 	.word	0x0003021c

000bb4d8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bb4d8:	b508      	push	{r3, lr}
   bb4da:	4b02      	ldr	r3, [pc, #8]	; (bb4e4 <__errno+0xc>)
   bb4dc:	681b      	ldr	r3, [r3, #0]
   bb4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bb4e0:	9301      	str	r3, [sp, #4]
   bb4e2:	bd08      	pop	{r3, pc}
   bb4e4:	0003021c 	.word	0x0003021c

000bb4e8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bb4e8:	b508      	push	{r3, lr}
   bb4ea:	4b02      	ldr	r3, [pc, #8]	; (bb4f4 <__assert_func+0xc>)
   bb4ec:	681b      	ldr	r3, [r3, #0]
   bb4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bb4f0:	9301      	str	r3, [sp, #4]
   bb4f2:	bd08      	pop	{r3, pc}
   bb4f4:	0003021c 	.word	0x0003021c

000bb4f8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bb4f8:	b508      	push	{r3, lr}
   bb4fa:	4b02      	ldr	r3, [pc, #8]	; (bb504 <newlib_impure_ptr_callback+0xc>)
   bb4fc:	681b      	ldr	r3, [r3, #0]
   bb4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bb500:	9301      	str	r3, [sp, #4]
   bb502:	bd08      	pop	{r3, pc}
   bb504:	0003021c 	.word	0x0003021c

000bb508 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bb508:	b508      	push	{r3, lr}
   bb50a:	4b02      	ldr	r3, [pc, #8]	; (bb514 <strftime+0xc>)
   bb50c:	681b      	ldr	r3, [r3, #0]
   bb50e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bb510:	9301      	str	r3, [sp, #4]
   bb512:	bd08      	pop	{r3, pc}
   bb514:	0003021c 	.word	0x0003021c

000bb518 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb518:	b508      	push	{r3, lr}
   bb51a:	4b02      	ldr	r3, [pc, #8]	; (bb524 <localtime_r+0xc>)
   bb51c:	681b      	ldr	r3, [r3, #0]
   bb51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bb520:	9301      	str	r3, [sp, #4]
   bb522:	bd08      	pop	{r3, pc}
   bb524:	0003021c 	.word	0x0003021c

000bb528 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bb528:	b508      	push	{r3, lr}
   bb52a:	4b02      	ldr	r3, [pc, #8]	; (bb534 <gmtime_r+0xc>)
   bb52c:	681b      	ldr	r3, [r3, #0]
   bb52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bb530:	9301      	str	r3, [sp, #4]
   bb532:	bd08      	pop	{r3, pc}
   bb534:	0003021c 	.word	0x0003021c

000bb538 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bb538:	b508      	push	{r3, lr}
   bb53a:	4b02      	ldr	r3, [pc, #8]	; (bb544 <mktime+0xc>)
   bb53c:	681b      	ldr	r3, [r3, #0]
   bb53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bb540:	9301      	str	r3, [sp, #4]
   bb542:	bd08      	pop	{r3, pc}
   bb544:	0003021c 	.word	0x0003021c

000bb548 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bb548:	2100      	movs	r1, #0
   bb54a:	f7ff be53 	b.w	bb1f4 <system_delay_ms>

000bb54e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bb54e:	b510      	push	{r4, lr}
      if (_M_empty())
   bb550:	6883      	ldr	r3, [r0, #8]
   bb552:	4604      	mov	r4, r0
   bb554:	b90b      	cbnz	r3, bb55a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bb556:	f003 f993 	bl	be880 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb55a:	68c3      	ldr	r3, [r0, #12]
   bb55c:	4798      	blx	r3
      if (_M_manager)
   bb55e:	68a3      	ldr	r3, [r4, #8]
   bb560:	b11b      	cbz	r3, bb56a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bb562:	2203      	movs	r2, #3
   bb564:	4621      	mov	r1, r4
   bb566:	4620      	mov	r0, r4
   bb568:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bb56a:	4620      	mov	r0, r4
   bb56c:	2110      	movs	r1, #16
}
   bb56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bb572:	f7f8 bd94 	b.w	b409e <_ZdlPvj>

000bb576 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bb576:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bb578:	6843      	ldr	r3, [r0, #4]
   bb57a:	3b01      	subs	r3, #1
    {
   bb57c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bb57e:	6043      	str	r3, [r0, #4]
   bb580:	b963      	cbnz	r3, bb59c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bb582:	6803      	ldr	r3, [r0, #0]
   bb584:	689b      	ldr	r3, [r3, #8]
   bb586:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bb588:	68a3      	ldr	r3, [r4, #8]
   bb58a:	3b01      	subs	r3, #1
   bb58c:	60a3      	str	r3, [r4, #8]
   bb58e:	b92b      	cbnz	r3, bb59c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bb590:	6823      	ldr	r3, [r4, #0]
   bb592:	4620      	mov	r0, r4
   bb594:	68db      	ldr	r3, [r3, #12]
    }
   bb596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bb59a:	4718      	bx	r3
    }
   bb59c:	bd10      	pop	{r4, pc}

000bb59e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb59e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb5a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb5a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb5a6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bb5aa:	42ae      	cmp	r6, r5
   bb5ac:	d004      	beq.n	bb5b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bb5ae:	4628      	mov	r0, r5
   bb5b0:	f002 fab4 	bl	bdb1c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bb5b4:	3510      	adds	r5, #16
   bb5b6:	e7f8      	b.n	bb5aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb5b8:	6820      	ldr	r0, [r4, #0]
   bb5ba:	f7ff ff4d 	bl	bb458 <free>
    AllocatorT::free(data_);
}
   bb5be:	4620      	mov	r0, r4
   bb5c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb5c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bb5c4:	4802      	ldr	r0, [pc, #8]	; (bb5d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb5c6:	2300      	movs	r3, #0
   bb5c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bb5ca:	f7ff bb59 	b.w	bac80 <os_mutex_recursive_create>
   bb5ce:	bf00      	nop
   bb5d0:	2003e57c 	.word	0x2003e57c

000bb5d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bb5d4:	2200      	movs	r2, #0
   bb5d6:	6840      	ldr	r0, [r0, #4]
   bb5d8:	4611      	mov	r1, r2
   bb5da:	f7ff beed 	b.w	bb3b8 <network_ready>

000bb5de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bb5de:	2200      	movs	r2, #0
   bb5e0:	6840      	ldr	r0, [r0, #4]
   bb5e2:	4611      	mov	r1, r2
   bb5e4:	f7ff bf08 	b.w	bb3f8 <network_listening>

000bb5e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb5e8:	2200      	movs	r2, #0
   bb5ea:	6840      	ldr	r0, [r0, #4]
   bb5ec:	4611      	mov	r1, r2
   bb5ee:	f7ff bf13 	b.w	bb418 <network_get_listen_timeout>

000bb5f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb5f2:	6840      	ldr	r0, [r0, #4]
   bb5f4:	2200      	movs	r2, #0
   bb5f6:	f7ff bf07 	b.w	bb408 <network_set_listen_timeout>

000bb5fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb5fa:	6840      	ldr	r0, [r0, #4]
   bb5fc:	2200      	movs	r2, #0
   bb5fe:	f081 0101 	eor.w	r1, r1, #1
   bb602:	f7ff bef1 	b.w	bb3e8 <network_listen>

000bb606 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb606:	2300      	movs	r3, #0
   bb608:	6840      	ldr	r0, [r0, #4]
   bb60a:	461a      	mov	r2, r3
   bb60c:	4619      	mov	r1, r3
   bb60e:	f7ff bee3 	b.w	bb3d8 <network_off>

000bb612 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb612:	2300      	movs	r3, #0
   bb614:	6840      	ldr	r0, [r0, #4]
   bb616:	461a      	mov	r2, r3
   bb618:	4619      	mov	r1, r3
   bb61a:	f7ff bed5 	b.w	bb3c8 <network_on>

000bb61e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb61e:	2200      	movs	r2, #0
   bb620:	6840      	ldr	r0, [r0, #4]
   bb622:	4611      	mov	r1, r2
   bb624:	f7ff beb8 	b.w	bb398 <network_connecting>

000bb628 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb628:	6840      	ldr	r0, [r0, #4]
   bb62a:	2200      	movs	r2, #0
   bb62c:	2102      	movs	r1, #2
   bb62e:	f7ff bebb 	b.w	bb3a8 <network_disconnect>

000bb632 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb632:	2300      	movs	r3, #0
   bb634:	6840      	ldr	r0, [r0, #4]
   bb636:	461a      	mov	r2, r3
   bb638:	f7ff bea6 	b.w	bb388 <network_connect>

000bb63c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bb63c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bb63e:	4b13      	ldr	r3, [pc, #76]	; (bb68c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bb640:	6003      	str	r3, [r0, #0]
   bb642:	2518      	movs	r5, #24
   bb644:	3330      	adds	r3, #48	; 0x30
   bb646:	b086      	sub	sp, #24
   bb648:	460e      	mov	r6, r1
   bb64a:	6043      	str	r3, [r0, #4]
   bb64c:	462a      	mov	r2, r5
   bb64e:	2100      	movs	r1, #0
   bb650:	4604      	mov	r4, r0
   bb652:	3008      	adds	r0, #8
   bb654:	f003 fe46 	bl	bf2e4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bb658:	2200      	movs	r2, #0
   bb65a:	6870      	ldr	r0, [r6, #4]
   bb65c:	4611      	mov	r1, r2
   bb65e:	f7ff feab 	bl	bb3b8 <network_ready>
   bb662:	b178      	cbz	r0, bb684 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bb664:	2100      	movs	r1, #0
   bb666:	462a      	mov	r2, r5
   bb668:	4668      	mov	r0, sp
   bb66a:	f003 fe3b 	bl	bf2e4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb66e:	4669      	mov	r1, sp
   bb670:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bb672:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bb676:	f7ff fac3 	bl	bac00 <cellular_signal>
   bb67a:	b918      	cbnz	r0, bb684 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bb67c:	4669      	mov	r1, sp
   bb67e:	4620      	mov	r0, r4
   bb680:	f000 f8b8 	bl	bb7f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bb684:	4620      	mov	r0, r4
   bb686:	b006      	add	sp, #24
   bb688:	bd70      	pop	{r4, r5, r6, pc}
   bb68a:	bf00      	nop
   bb68c:	000c0e30 	.word	0x000c0e30

000bb690 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb690:	4b08      	ldr	r3, [pc, #32]	; (bb6b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb692:	b510      	push	{r4, lr}
   bb694:	2428      	movs	r4, #40	; 0x28
   bb696:	4622      	mov	r2, r4
   bb698:	4618      	mov	r0, r3
   bb69a:	2100      	movs	r1, #0
   bb69c:	f003 fe22 	bl	bf2e4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bb6a0:	4b05      	ldr	r3, [pc, #20]	; (bb6b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb6a2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb6a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb6a8:	6042      	str	r2, [r0, #4]
   bb6aa:	2204      	movs	r2, #4
   bb6ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb6ae:	4a03      	ldr	r2, [pc, #12]	; (bb6bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb6b0:	601a      	str	r2, [r3, #0]
   bb6b2:	bd10      	pop	{r4, pc}
   bb6b4:	2003e588 	.word	0x2003e588
   bb6b8:	2003e580 	.word	0x2003e580
   bb6bc:	000c0df4 	.word	0x000c0df4

000bb6c0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bb6c0:	4770      	bx	lr

000bb6c2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bb6c2:	7b00      	ldrb	r0, [r0, #12]
   bb6c4:	4770      	bx	lr

000bb6c6 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb6c6:	7b03      	ldrb	r3, [r0, #12]
   bb6c8:	b14b      	cbz	r3, bb6de <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bb6ca:	6903      	ldr	r3, [r0, #16]
   bb6cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb6d0:	d005      	beq.n	bb6de <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bb6d2:	6980      	ldr	r0, [r0, #24]
   bb6d4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bb6d8:	bf18      	it	ne
   bb6da:	2001      	movne	r0, #1
   bb6dc:	4770      	bx	lr
   bb6de:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bb6e0:	4770      	bx	lr

000bb6e2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bb6e2:	6803      	ldr	r3, [r0, #0]
   bb6e4:	6a1b      	ldr	r3, [r3, #32]
   bb6e6:	4718      	bx	r3

000bb6e8 <_ZNK14CellularSignal7printToER5Print>:
{
   bb6e8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bb6ea:	6803      	ldr	r3, [r0, #0]
{
   bb6ec:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bb6ee:	691b      	ldr	r3, [r3, #16]
{
   bb6f0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bb6f2:	4798      	blx	r3
   bb6f4:	2102      	movs	r1, #2
   bb6f6:	4628      	mov	r0, r5
   bb6f8:	f002 f8ee 	bl	bd8d8 <_ZN5Print5printEfi>
    n += p.print(',');
   bb6fc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bb6fe:	4604      	mov	r4, r0
    n += p.print(',');
   bb700:	4628      	mov	r0, r5
   bb702:	f001 fff3 	bl	bd6ec <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bb706:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bb708:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bb70a:	699b      	ldr	r3, [r3, #24]
   bb70c:	4630      	mov	r0, r6
   bb70e:	4798      	blx	r3
   bb710:	2102      	movs	r1, #2
   bb712:	4628      	mov	r0, r5
   bb714:	f002 f8e0 	bl	bd8d8 <_ZN5Print5printEfi>
}
   bb718:	4420      	add	r0, r4
   bb71a:	bd70      	pop	{r4, r5, r6, pc}

000bb71c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bb71c:	f1a0 0004 	sub.w	r0, r0, #4
   bb720:	f7ff bfe2 	b.w	bb6e8 <_ZNK14CellularSignal7printToER5Print>

000bb724 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bb724:	b510      	push	{r4, lr}
   bb726:	2120      	movs	r1, #32
   bb728:	4604      	mov	r4, r0
   bb72a:	f7f8 fcb8 	bl	b409e <_ZdlPvj>
   bb72e:	4620      	mov	r0, r4
   bb730:	bd10      	pop	{r4, pc}
	...

000bb734 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bb734:	7b03      	ldrb	r3, [r0, #12]
   bb736:	b17b      	cbz	r3, bb758 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bb738:	6943      	ldr	r3, [r0, #20]
   bb73a:	2b00      	cmp	r3, #0
   bb73c:	db0c      	blt.n	bb758 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bb73e:	ee07 3a90 	vmov	s15, r3
   bb742:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb760 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bb746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb74a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb74e:	eddf 7a05 	vldr	s15, [pc, #20]	; bb764 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bb752:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb756:	4770      	bx	lr
    return -1.0f;
   bb758:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb75c:	4770      	bx	lr
   bb75e:	bf00      	nop
   bb760:	477fff00 	.word	0x477fff00
   bb764:	42c80000 	.word	0x42c80000

000bb768 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bb768:	7b03      	ldrb	r3, [r0, #12]
   bb76a:	b163      	cbz	r3, bb786 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bb76c:	6903      	ldr	r3, [r0, #16]
   bb76e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb772:	d008      	beq.n	bb786 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bb774:	ee07 3a90 	vmov	s15, r3
   bb778:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb78c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bb77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb780:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb784:	4770      	bx	lr
    return 0.0f;
   bb786:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb790 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bb78a:	4770      	bx	lr
   bb78c:	42c80000 	.word	0x42c80000
   bb790:	00000000 	.word	0x00000000

000bb794 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bb794:	7b03      	ldrb	r3, [r0, #12]
   bb796:	b17b      	cbz	r3, bb7b8 <_ZNK14CellularSignal10getQualityEv+0x24>
   bb798:	69c3      	ldr	r3, [r0, #28]
   bb79a:	2b00      	cmp	r3, #0
   bb79c:	db0c      	blt.n	bb7b8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bb79e:	ee07 3a90 	vmov	s15, r3
   bb7a2:	ed9f 7a07 	vldr	s14, [pc, #28]	; bb7c0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bb7a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb7aa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb7ae:	eddf 7a05 	vldr	s15, [pc, #20]	; bb7c4 <_ZNK14CellularSignal10getQualityEv+0x30>
   bb7b2:	ee20 0a27 	vmul.f32	s0, s0, s15
   bb7b6:	4770      	bx	lr
    return -1.0f;
   bb7b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bb7bc:	4770      	bx	lr
   bb7be:	bf00      	nop
   bb7c0:	477fff00 	.word	0x477fff00
   bb7c4:	42c80000 	.word	0x42c80000

000bb7c8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bb7c8:	7b03      	ldrb	r3, [r0, #12]
   bb7ca:	b163      	cbz	r3, bb7e6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bb7cc:	6983      	ldr	r3, [r0, #24]
   bb7ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb7d2:	d008      	beq.n	bb7e6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bb7d4:	ee07 3a90 	vmov	s15, r3
   bb7d8:	ed9f 7a04 	vldr	s14, [pc, #16]	; bb7ec <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bb7dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb7e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bb7e4:	4770      	bx	lr
    return 0.0f;
   bb7e6:	ed9f 0a02 	vldr	s0, [pc, #8]	; bb7f0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bb7ea:	4770      	bx	lr
   bb7ec:	42c80000 	.word	0x42c80000
   bb7f0:	00000000 	.word	0x00000000

000bb7f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bb7f4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bb7f6:	460d      	mov	r5, r1
   bb7f8:	f100 0408 	add.w	r4, r0, #8
   bb7fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb7fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb800:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb804:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bb808:	2001      	movs	r0, #1
   bb80a:	bd30      	pop	{r4, r5, pc}

000bb80c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb80c:	4770      	bx	lr

000bb80e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bb80e:	2000      	movs	r0, #0
   bb810:	4770      	bx	lr

000bb812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bb812:	b510      	push	{r4, lr}
   bb814:	2110      	movs	r1, #16
   bb816:	4604      	mov	r4, r0
   bb818:	f7f8 fc41 	bl	b409e <_ZdlPvj>
   bb81c:	4620      	mov	r0, r4
   bb81e:	bd10      	pop	{r4, pc}

000bb820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bb820:	b508      	push	{r3, lr}
      { delete this; }
   bb822:	f7ff fff6 	bl	bb812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bb826:	bd08      	pop	{r3, pc}

000bb828 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bb828:	b530      	push	{r4, r5, lr}
        type_(type) {
   bb82a:	2200      	movs	r2, #0
   bb82c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bb830:	6002      	str	r2, [r0, #0]
   bb832:	8084      	strh	r4, [r0, #4]
   bb834:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bb836:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb838:	680c      	ldr	r4, [r1, #0]
   bb83a:	8085      	strh	r5, [r0, #4]
   bb83c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bb83e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bb840:	bd30      	pop	{r4, r5, pc}

000bb842 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bb842:	b510      	push	{r4, lr}
   bb844:	4604      	mov	r4, r0
    free((void*)msg_);
   bb846:	6800      	ldr	r0, [r0, #0]
   bb848:	f7ff fe06 	bl	bb458 <free>
}
   bb84c:	4620      	mov	r0, r4
   bb84e:	bd10      	pop	{r4, pc}

000bb850 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb850:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bb852:	68c4      	ldr	r4, [r0, #12]
   bb854:	b1f4      	cbz	r4, bb894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bb856:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bb858:	2b02      	cmp	r3, #2
   bb85a:	d103      	bne.n	bb864 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bb85c:	f104 000c 	add.w	r0, r4, #12
   bb860:	f7ff ffef 	bl	bb842 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bb864:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bb866:	b135      	cbz	r5, bb876 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bb868:	4628      	mov	r0, r5
   bb86a:	f7f9 f993 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   bb86e:	2110      	movs	r1, #16
   bb870:	4628      	mov	r0, r5
   bb872:	f7f8 fc14 	bl	b409e <_ZdlPvj>
   bb876:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bb878:	b135      	cbz	r5, bb888 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bb87a:	4628      	mov	r0, r5
   bb87c:	f7f9 f98a 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
   bb880:	2110      	movs	r1, #16
   bb882:	4628      	mov	r0, r5
   bb884:	f7f8 fc0b 	bl	b409e <_ZdlPvj>
   bb888:	4620      	mov	r0, r4
   bb88a:	2114      	movs	r1, #20
   bb88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb890:	f7f8 bc05 	b.w	b409e <_ZdlPvj>
   bb894:	bd38      	pop	{r3, r4, r5, pc}

000bb896 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bb896:	b510      	push	{r4, lr}
   bb898:	b088      	sub	sp, #32
   bb89a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bb89c:	4668      	mov	r0, sp
   bb89e:	f002 f988 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bb8a2:	4669      	mov	r1, sp
   bb8a4:	a804      	add	r0, sp, #16
   bb8a6:	f002 f9cf 	bl	bdc48 <_ZN6StringC1ERKS_>
   bb8aa:	a804      	add	r0, sp, #16
   bb8ac:	47a0      	blx	r4
   bb8ae:	4604      	mov	r4, r0
   bb8b0:	a804      	add	r0, sp, #16
   bb8b2:	f002 f933 	bl	bdb1c <_ZN6StringD1Ev>
    String p(param);
   bb8b6:	4668      	mov	r0, sp
   bb8b8:	f002 f930 	bl	bdb1c <_ZN6StringD1Ev>
}
   bb8bc:	4620      	mov	r0, r4
   bb8be:	b008      	add	sp, #32
   bb8c0:	bd10      	pop	{r4, pc}

000bb8c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bb8c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bb8c4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bb8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bb8ca:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bb8cc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bb8ce:	461a      	mov	r2, r3
   bb8d0:	4669      	mov	r1, sp
   bb8d2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bb8d4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bb8d8:	f8ad 4000 	strh.w	r4, [sp]
   bb8dc:	f7ff fcfc 	bl	bb2d8 <spark_function>
}
   bb8e0:	b004      	add	sp, #16
   bb8e2:	bd10      	pop	{r4, pc}

000bb8e4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb8e6:	230c      	movs	r3, #12
   bb8e8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb8ec:	6803      	ldr	r3, [r0, #0]
   bb8ee:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb8f2:	7a03      	ldrb	r3, [r0, #8]
   bb8f4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb8f8:	6843      	ldr	r3, [r0, #4]
   bb8fa:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb8fc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb8fe:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb900:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb904:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb906:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb90a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb90e:	f7ff fd33 	bl	bb378 <spark_cloud_disconnect>
}
   bb912:	b005      	add	sp, #20
   bb914:	f85d fb04 	ldr.w	pc, [sp], #4

000bb918 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb918:	680b      	ldr	r3, [r1, #0]
   bb91a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bb91c:	684b      	ldr	r3, [r1, #4]
   bb91e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bb920:	b113      	cbz	r3, bb928 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bb922:	685a      	ldr	r2, [r3, #4]
   bb924:	3201      	adds	r2, #1
   bb926:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb928:	4770      	bx	lr

000bb92a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bb92a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb92c:	4604      	mov	r4, r0
   bb92e:	4668      	mov	r0, sp
   bb930:	460d      	mov	r5, r1
   bb932:	f7ff fff1 	bl	bb918 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb936:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bb938:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bb93a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bb93c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bb93e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bb940:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bb942:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bb944:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bb946:	f7fa fc0d 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bb94a:	b135      	cbz	r5, bb95a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bb94c:	1d28      	adds	r0, r5, #4
   bb94e:	f7fa fc09 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb952:	2108      	movs	r1, #8
   bb954:	4628      	mov	r0, r5
   bb956:	f7f8 fba2 	bl	b409e <_ZdlPvj>
        return p;
    }
   bb95a:	4620      	mov	r0, r4
   bb95c:	b003      	add	sp, #12
   bb95e:	bd30      	pop	{r4, r5, pc}

000bb960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bb960:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb962:	b510      	push	{r4, lr}
      if (_M_empty())
   bb964:	b90a      	cbnz	r2, bb96a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bb966:	f002 ff8b 	bl	be880 <_ZSt25__throw_bad_function_callv>
    }
   bb96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb96e:	68c3      	ldr	r3, [r0, #12]
   bb970:	4718      	bx	r3

000bb972 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb972:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb974:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bb976:	f100 0110 	add.w	r1, r0, #16
   bb97a:	f7ff fff1 	bl	bb960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bb97e:	bd08      	pop	{r3, pc}

000bb980 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bb980:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb982:	b510      	push	{r4, lr}
      if (_M_empty())
   bb984:	b90a      	cbnz	r2, bb98a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bb986:	f002 ff7b 	bl	be880 <_ZSt25__throw_bad_function_callv>
    }
   bb98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb98e:	68c3      	ldr	r3, [r0, #12]
   bb990:	4718      	bx	r3

000bb992 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bb992:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bb994:	6800      	ldr	r0, [r0, #0]
   bb996:	f100 0110 	add.w	r1, r0, #16
   bb99a:	f7ff fff1 	bl	bb980 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bb99e:	bd08      	pop	{r3, pc}

000bb9a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bb9a0:	b538      	push	{r3, r4, r5, lr}
   bb9a2:	2300      	movs	r3, #0
   bb9a4:	4604      	mov	r4, r0
   bb9a6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb9a8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bb9aa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb9ac:	f7f8 fb73 	bl	b4096 <_Znwj>
   bb9b0:	b128      	cbz	r0, bb9be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bb9b2:	2301      	movs	r3, #1
   bb9b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bb9b8:	4b02      	ldr	r3, [pc, #8]	; (bb9c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bb9ba:	6003      	str	r3, [r0, #0]
   bb9bc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bb9be:	6020      	str	r0, [r4, #0]
	}
   bb9c0:	4620      	mov	r0, r4
   bb9c2:	bd38      	pop	{r3, r4, r5, pc}
   bb9c4:	000c0e6c 	.word	0x000c0e6c

000bb9c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bb9c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb9ca:	2300      	movs	r3, #0
   bb9cc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bb9ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bb9d0:	4604      	mov	r4, r0
   bb9d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bb9d4:	b12b      	cbz	r3, bb9e2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb9d6:	2202      	movs	r2, #2
   bb9d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb9da:	68eb      	ldr	r3, [r5, #12]
   bb9dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bb9de:	68ab      	ldr	r3, [r5, #8]
   bb9e0:	60a3      	str	r3, [r4, #8]
    }
   bb9e2:	4620      	mov	r0, r4
   bb9e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb9e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bb9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb9ea:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bb9ec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bb9ee:	4668      	mov	r0, sp
   bb9f0:	f7ff ff1a 	bl	bb828 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bb9f4:	f04f 0302 	mov.w	r3, #2
   bb9f8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bb9fc:	2a00      	cmp	r2, #0
   bb9fe:	d103      	bne.n	bba08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bba00:	e8c4 3f41 	strexb	r1, r3, [r4]
   bba04:	2900      	cmp	r1, #0
   bba06:	d1f7      	bne.n	bb9f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bba08:	d125      	bne.n	bba56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bba0a:	f104 050c 	add.w	r5, r4, #12
   bba0e:	4669      	mov	r1, sp
   bba10:	4628      	mov	r0, r5
   bba12:	f7ff ff09 	bl	bb828 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bba16:	f3bf 8f5b 	dmb	ish
   bba1a:	2301      	movs	r3, #1
   bba1c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bba1e:	2000      	movs	r0, #0
   bba20:	f104 0308 	add.w	r3, r4, #8
   bba24:	f3bf 8f5b 	dmb	ish
   bba28:	e853 6f00 	ldrex	r6, [r3]
   bba2c:	e843 0200 	strex	r2, r0, [r3]
   bba30:	2a00      	cmp	r2, #0
   bba32:	d1f9      	bne.n	bba28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bba34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bba38:	b16e      	cbz	r6, bba56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bba3a:	f7ff fbf3 	bl	bb224 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bba3e:	b178      	cbz	r0, bba60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bba40:	4629      	mov	r1, r5
   bba42:	4630      	mov	r0, r6
   bba44:	f7ff ff8c 	bl	bb960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bba48:	4630      	mov	r0, r6
   bba4a:	f7f9 f8a3 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bba4e:	2110      	movs	r1, #16
   bba50:	4630      	mov	r0, r6
   bba52:	f7f8 fb24 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bba56:	4668      	mov	r0, sp
   bba58:	f7ff fef3 	bl	bb842 <_ZN8particle5ErrorD1Ev>
    }
   bba5c:	b009      	add	sp, #36	; 0x24
   bba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bba60:	4631      	mov	r1, r6
   bba62:	a802      	add	r0, sp, #8
   bba64:	f7ff ffb0 	bl	bb9c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bba68:	68e0      	ldr	r0, [r4, #12]
   bba6a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bba6e:	b108      	cbz	r0, bba74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bba70:	f003 fcd6 	bl	bf420 <strdup>
        type_(type) {
   bba74:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bba76:	2010      	movs	r0, #16
   bba78:	f8ad 501c 	strh.w	r5, [sp, #28]
   bba7c:	f7f8 fb0b 	bl	b4096 <_Znwj>
   bba80:	4605      	mov	r5, r0
   bba82:	b1e8      	cbz	r0, bbac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bba84:	2700      	movs	r7, #0
   bba86:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bba88:	2018      	movs	r0, #24
   bba8a:	f7f8 fb04 	bl	b4096 <_Znwj>
   bba8e:	4604      	mov	r4, r0
   bba90:	b188      	cbz	r0, bbab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bba92:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bba94:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bba96:	a802      	add	r0, sp, #8
   bba98:	f7fb fda9 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bba9c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bba9e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbaa0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbaa2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbaa4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbaa6:	a906      	add	r1, sp, #24
   bbaa8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbaaa:	60e3      	str	r3, [r4, #12]
   bbaac:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bbab0:	9205      	str	r2, [sp, #20]
   bbab2:	f7ff feb9 	bl	bb828 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bbab6:	4b08      	ldr	r3, [pc, #32]	; (bbad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bbab8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbaba:	4b08      	ldr	r3, [pc, #32]	; (bbadc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbabc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbabe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bbac0:	a806      	add	r0, sp, #24
   bbac2:	f7ff febe 	bl	bb842 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbac6:	a802      	add	r0, sp, #8
   bbac8:	f7f9 f864 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbacc:	2200      	movs	r2, #0
   bbace:	4629      	mov	r1, r5
   bbad0:	4803      	ldr	r0, [pc, #12]	; (bbae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bbad2:	f7ff fbaf 	bl	bb234 <application_thread_invoke>
   bbad6:	e7b7      	b.n	bba48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bbad8:	000bb973 	.word	0x000bb973
   bbadc:	000bbbf5 	.word	0x000bbbf5
   bbae0:	000bb54f 	.word	0x000bb54f

000bbae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bbae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbae8:	b08b      	sub	sp, #44	; 0x2c
   bbaea:	4605      	mov	r5, r0
   bbaec:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bbaf0:	460f      	mov	r7, r1
   bbaf2:	4690      	mov	r8, r2
   bbaf4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbaf6:	f7ff fc07 	bl	bb308 <spark_cloud_flag_connected>
   bbafa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bbafc:	4683      	mov	fp, r0
   bbafe:	bb38      	cbnz	r0, bbb50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bbb00:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bbb04:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbb06:	a905      	add	r1, sp, #20
   bbb08:	4630      	mov	r0, r6
   bbb0a:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbb0e:	f7ff fe8b 	bl	bb828 <_ZN8particle5ErrorC1EOS0_>
   bbb12:	2014      	movs	r0, #20
   bbb14:	f7f8 fabf 	bl	b4096 <_Znwj>
   bbb18:	4604      	mov	r4, r0
   bbb1a:	b148      	cbz	r0, bbb30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bbb1c:	2302      	movs	r3, #2
   bbb1e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbb20:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbb22:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbb26:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bbb28:	4631      	mov	r1, r6
   bbb2a:	300c      	adds	r0, #12
   bbb2c:	f7ff fe7c 	bl	bb828 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbb30:	4628      	mov	r0, r5
	: __shared_count(__p)
   bbb32:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbb34:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bbb38:	f7ff ff32 	bl	bb9a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbb3c:	4630      	mov	r0, r6
   bbb3e:	f7ff fe80 	bl	bb842 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bbb42:	a805      	add	r0, sp, #20
   bbb44:	f7ff fe7d 	bl	bb842 <_ZN8particle5ErrorD1Ev>
}
   bbb48:	4628      	mov	r0, r5
   bbb4a:	b00b      	add	sp, #44	; 0x2c
   bbb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bbb50:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bbb52:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bbb54:	2014      	movs	r0, #20
   bbb56:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bbb5a:	9307      	str	r3, [sp, #28]
   bbb5c:	f7f8 fa9b 	bl	b4096 <_Znwj>
   bbb60:	4601      	mov	r1, r0
   bbb62:	b118      	cbz	r0, bbb6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbb64:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbb68:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbb6a:	7044      	strb	r4, [r0, #1]
   bbb6c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbb6e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bbb70:	f7ff ff16 	bl	bb9a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bbb74:	4b1e      	ldr	r3, [pc, #120]	; (bbbf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bbb76:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bbb78:	2008      	movs	r0, #8
   bbb7a:	f7f8 fa8c 	bl	b4096 <_Znwj>
   bbb7e:	4604      	mov	r4, r0
   bbb80:	b110      	cbz	r0, bbb88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bbb82:	a903      	add	r1, sp, #12
   bbb84:	f7ff fec8 	bl	bb918 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbb88:	9600      	str	r6, [sp, #0]
   bbb8a:	fa5f f38a 	uxtb.w	r3, sl
   bbb8e:	464a      	mov	r2, r9
   bbb90:	4641      	mov	r1, r8
   bbb92:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bbb94:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbb96:	f7ff fbc7 	bl	bb328 <spark_send_event>
   bbb9a:	b9b8      	cbnz	r0, bbbcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bbb9c:	9b03      	ldr	r3, [sp, #12]
   bbb9e:	785b      	ldrb	r3, [r3, #1]
   bbba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bbba4:	b993      	cbnz	r3, bbbcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bbba6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bbbaa:	a905      	add	r1, sp, #20
   bbbac:	a803      	add	r0, sp, #12
   bbbae:	9205      	str	r2, [sp, #20]
   bbbb0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbbb4:	f7ff ff18 	bl	bb9e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbbb8:	a805      	add	r0, sp, #20
   bbbba:	f7ff fe42 	bl	bb842 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bbbbe:	a805      	add	r0, sp, #20
   bbbc0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bbbc2:	f7ff feb2 	bl	bb92a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bbbc6:	a806      	add	r0, sp, #24
   bbbc8:	f7fa facc 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbbcc:	a903      	add	r1, sp, #12
   bbbce:	a805      	add	r0, sp, #20
   bbbd0:	f7ff fea2 	bl	bb918 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbbd4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbbd6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbbd8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bbbda:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bbbdc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbbde:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bbbe0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bbbe2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bbbe4:	f7fa fabe 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbbe8:	a804      	add	r0, sp, #16
   bbbea:	f7fa fabb 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bbbee:	e7ab      	b.n	bbb48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bbbf0:	000bbc71 	.word	0x000bbc71

000bbbf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bbbf4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbbf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbbf8:	4605      	mov	r5, r0
	switch (__op)
   bbbfa:	d103      	bne.n	bbc04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbbfc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbbfe:	6003      	str	r3, [r0, #0]
      }
   bbc00:	2000      	movs	r0, #0
   bbc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bbc04:	2a02      	cmp	r2, #2
   bbc06:	d010      	beq.n	bbc2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bbc08:	2a03      	cmp	r2, #3
   bbc0a:	d1f9      	bne.n	bbc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbc0c:	6804      	ldr	r4, [r0, #0]
   bbc0e:	2c00      	cmp	r4, #0
   bbc10:	d0f6      	beq.n	bbc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bbc12:	f104 0010 	add.w	r0, r4, #16
   bbc16:	f7ff fe14 	bl	bb842 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbc1a:	4620      	mov	r0, r4
   bbc1c:	f7f8 ffba 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbc20:	2118      	movs	r1, #24
   bbc22:	4620      	mov	r0, r4
   bbc24:	f7f8 fa3b 	bl	b409e <_ZdlPvj>
   bbc28:	e7ea      	b.n	bbc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbc2a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bbc2c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbc2e:	f7f8 fa32 	bl	b4096 <_Znwj>
   bbc32:	4604      	mov	r4, r0
   bbc34:	b150      	cbz	r0, bbc4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bbc36:	4631      	mov	r1, r6
   bbc38:	f7ff fec6 	bl	bb9c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbc3c:	6930      	ldr	r0, [r6, #16]
   bbc3e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbc42:	b108      	cbz	r0, bbc48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bbc44:	f003 fbec 	bl	bf420 <strdup>
        type_(type) {
   bbc48:	6120      	str	r0, [r4, #16]
   bbc4a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bbc4c:	602c      	str	r4, [r5, #0]
	}
   bbc4e:	e7d7      	b.n	bbc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bbc50 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bbc50:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbc52:	2300      	movs	r3, #0
   bbc54:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbc56:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbc58:	4604      	mov	r4, r0
   bbc5a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbc5c:	b12b      	cbz	r3, bbc6a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbc5e:	2202      	movs	r2, #2
   bbc60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbc62:	68eb      	ldr	r3, [r5, #12]
   bbc64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbc66:	68ab      	ldr	r3, [r5, #8]
   bbc68:	60a3      	str	r3, [r4, #8]
    }
   bbc6a:	4620      	mov	r0, r4
   bbc6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbc70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bbc70:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbc72:	b089      	sub	sp, #36	; 0x24
   bbc74:	4604      	mov	r4, r0
   bbc76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bbc78:	a801      	add	r0, sp, #4
   bbc7a:	4611      	mov	r1, r2
   bbc7c:	f7ff fe55 	bl	bb92a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bbc80:	b1a4      	cbz	r4, bbcac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bbc82:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbc84:	b11d      	cbz	r5, bbc8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bbc86:	4628      	mov	r0, r5
   bbc88:	f003 fbca 	bl	bf420 <strdup>
   bbc8c:	4605      	mov	r5, r0
   bbc8e:	a801      	add	r0, sp, #4
   bbc90:	a903      	add	r1, sp, #12
        type_(type) {
   bbc92:	9503      	str	r5, [sp, #12]
   bbc94:	f8ad 4010 	strh.w	r4, [sp, #16]
   bbc98:	f7ff fea6 	bl	bb9e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbc9c:	a803      	add	r0, sp, #12
   bbc9e:	f7ff fdd0 	bl	bb842 <_ZN8particle5ErrorD1Ev>
   bbca2:	a802      	add	r0, sp, #8
   bbca4:	f7fa fa5e 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbca8:	b009      	add	sp, #36	; 0x24
   bbcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bbcac:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbcae:	2301      	movs	r3, #1
   bbcb0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bbcb4:	2a00      	cmp	r2, #0
   bbcb6:	d103      	bne.n	bbcc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bbcb8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bbcbc:	2900      	cmp	r1, #0
   bbcbe:	d1f7      	bne.n	bbcb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bbcc0:	d1ef      	bne.n	bbca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bbcc2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bbcc4:	f3bf 8f5b 	dmb	ish
   bbcc8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbcca:	1d2b      	adds	r3, r5, #4
   bbccc:	f3bf 8f5b 	dmb	ish
   bbcd0:	e853 6f00 	ldrex	r6, [r3]
   bbcd4:	e843 4200 	strex	r2, r4, [r3]
   bbcd8:	2a00      	cmp	r2, #0
   bbcda:	d1f9      	bne.n	bbcd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bbcdc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbce0:	2e00      	cmp	r6, #0
   bbce2:	d0de      	beq.n	bbca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bbce4:	4620      	mov	r0, r4
   bbce6:	f7ff fa9d 	bl	bb224 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbcea:	4607      	mov	r7, r0
   bbcec:	b160      	cbz	r0, bbd08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbcee:	f105 010c 	add.w	r1, r5, #12
   bbcf2:	4630      	mov	r0, r6
   bbcf4:	f7ff fe44 	bl	bb980 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bbcf8:	4630      	mov	r0, r6
   bbcfa:	f7f8 ff4b 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbcfe:	2110      	movs	r1, #16
   bbd00:	4630      	mov	r0, r6
   bbd02:	f7f8 f9cc 	bl	b409e <_ZdlPvj>
   bbd06:	e7cc      	b.n	bbca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbd08:	4631      	mov	r1, r6
   bbd0a:	a803      	add	r0, sp, #12
   bbd0c:	f7ff ffa0 	bl	bbc50 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bbd10:	7b2b      	ldrb	r3, [r5, #12]
   bbd12:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbd16:	2010      	movs	r0, #16
   bbd18:	f7f8 f9bd 	bl	b4096 <_Znwj>
   bbd1c:	4605      	mov	r5, r0
   bbd1e:	b1d0      	cbz	r0, bbd56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bbd20:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbd22:	2014      	movs	r0, #20
   bbd24:	f7f8 f9b7 	bl	b4096 <_Znwj>
   bbd28:	4604      	mov	r4, r0
   bbd2a:	b178      	cbz	r0, bbd4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bbd2c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbd2e:	4601      	mov	r1, r0
   bbd30:	a803      	add	r0, sp, #12
   bbd32:	f7fb fc5c 	bl	b75ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbd36:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbd38:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd3a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbd3c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bbd3e:	9205      	str	r2, [sp, #20]
   bbd40:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbd42:	60e3      	str	r3, [r4, #12]
   bbd44:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bbd48:	9206      	str	r2, [sp, #24]
   bbd4a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bbd4c:	4b06      	ldr	r3, [pc, #24]	; (bbd68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bbd4e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbd50:	4b06      	ldr	r3, [pc, #24]	; (bbd6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbd52:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbd54:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bbd56:	a803      	add	r0, sp, #12
   bbd58:	f7f8 ff1c 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbd5c:	2200      	movs	r2, #0
   bbd5e:	4629      	mov	r1, r5
   bbd60:	4803      	ldr	r0, [pc, #12]	; (bbd70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bbd62:	f7ff fa67 	bl	bb234 <application_thread_invoke>
   bbd66:	e7c7      	b.n	bbcf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bbd68:	000bb993 	.word	0x000bb993
   bbd6c:	000bbd75 	.word	0x000bbd75
   bbd70:	000bb54f 	.word	0x000bb54f

000bbd74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bbd74:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbd76:	b570      	push	{r4, r5, r6, lr}
   bbd78:	4604      	mov	r4, r0
	switch (__op)
   bbd7a:	d103      	bne.n	bbd84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbd7c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbd7e:	6003      	str	r3, [r0, #0]
      }
   bbd80:	2000      	movs	r0, #0
   bbd82:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bbd84:	2a02      	cmp	r2, #2
   bbd86:	d00c      	beq.n	bbda2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bbd88:	2a03      	cmp	r2, #3
   bbd8a:	d1f9      	bne.n	bbd80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbd8c:	6804      	ldr	r4, [r0, #0]
   bbd8e:	2c00      	cmp	r4, #0
   bbd90:	d0f6      	beq.n	bbd80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bbd92:	4620      	mov	r0, r4
   bbd94:	f7f8 fefe 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbd98:	2114      	movs	r1, #20
   bbd9a:	4620      	mov	r0, r4
   bbd9c:	f7f8 f97f 	bl	b409e <_ZdlPvj>
   bbda0:	e7ee      	b.n	bbd80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbda2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bbda4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbda6:	f7f8 f976 	bl	b4096 <_Znwj>
   bbdaa:	4605      	mov	r5, r0
   bbdac:	b120      	cbz	r0, bbdb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bbdae:	4631      	mov	r1, r6
   bbdb0:	f7ff ff4e 	bl	bbc50 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bbdb4:	7c33      	ldrb	r3, [r6, #16]
   bbdb6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bbdb8:	6025      	str	r5, [r4, #0]
	}
   bbdba:	e7e1      	b.n	bbd80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bbdbc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bbdbc:	2200      	movs	r2, #0
   bbdbe:	6840      	ldr	r0, [r0, #4]
   bbdc0:	4611      	mov	r1, r2
   bbdc2:	f7ff bb19 	b.w	bb3f8 <network_listening>

000bbdc6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbdc6:	2200      	movs	r2, #0
   bbdc8:	6840      	ldr	r0, [r0, #4]
   bbdca:	4611      	mov	r1, r2
   bbdcc:	f7ff bb24 	b.w	bb418 <network_get_listen_timeout>

000bbdd0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbdd0:	6840      	ldr	r0, [r0, #4]
   bbdd2:	2200      	movs	r2, #0
   bbdd4:	f7ff bb18 	b.w	bb408 <network_set_listen_timeout>

000bbdd8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbdd8:	6840      	ldr	r0, [r0, #4]
   bbdda:	2200      	movs	r2, #0
   bbddc:	f081 0101 	eor.w	r1, r1, #1
   bbde0:	f7ff bb02 	b.w	bb3e8 <network_listen>

000bbde4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbde4:	2300      	movs	r3, #0
   bbde6:	6840      	ldr	r0, [r0, #4]
   bbde8:	461a      	mov	r2, r3
   bbdea:	4619      	mov	r1, r3
   bbdec:	f7ff baf4 	b.w	bb3d8 <network_off>

000bbdf0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbdf0:	2300      	movs	r3, #0
   bbdf2:	6840      	ldr	r0, [r0, #4]
   bbdf4:	461a      	mov	r2, r3
   bbdf6:	4619      	mov	r1, r3
   bbdf8:	f7ff bae6 	b.w	bb3c8 <network_on>

000bbdfc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bbdfc:	2200      	movs	r2, #0
   bbdfe:	6840      	ldr	r0, [r0, #4]
   bbe00:	4611      	mov	r1, r2
   bbe02:	f7ff bad9 	b.w	bb3b8 <network_ready>

000bbe06 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbe06:	2200      	movs	r2, #0
   bbe08:	6840      	ldr	r0, [r0, #4]
   bbe0a:	4611      	mov	r1, r2
   bbe0c:	f7ff bac4 	b.w	bb398 <network_connecting>

000bbe10 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbe10:	6840      	ldr	r0, [r0, #4]
   bbe12:	2200      	movs	r2, #0
   bbe14:	2102      	movs	r1, #2
   bbe16:	f7ff bac7 	b.w	bb3a8 <network_disconnect>

000bbe1a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbe1a:	2300      	movs	r3, #0
   bbe1c:	6840      	ldr	r0, [r0, #4]
   bbe1e:	461a      	mov	r2, r3
   bbe20:	f7ff bab2 	b.w	bb388 <network_connect>

000bbe24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bbe24:	4b02      	ldr	r3, [pc, #8]	; (bbe30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bbe26:	2203      	movs	r2, #3
   bbe28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bbe2a:	4a02      	ldr	r2, [pc, #8]	; (bbe34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bbe2c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bbe2e:	4770      	bx	lr
   bbe30:	2003e5b0 	.word	0x2003e5b0
   bbe34:	000c0e88 	.word	0x000c0e88

000bbe38 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bbe38:	6800      	ldr	r0, [r0, #0]
   bbe3a:	f000 b8e7 	b.w	bc00c <_ZN7TwoWire4lockEv>

000bbe3e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bbe3e:	b510      	push	{r4, lr}
   bbe40:	4604      	mov	r4, r0
      lock_(_lock) {
   bbe42:	6001      	str	r1, [r0, #0]
   bbe44:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bbe46:	b10a      	cbz	r2, bbe4c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bbe48:	f7ff fff6 	bl	bbe38 <_ZN9FuelGauge4lockEv>
}
   bbe4c:	4620      	mov	r0, r4
   bbe4e:	bd10      	pop	{r4, pc}

000bbe50 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bbe50:	b513      	push	{r0, r1, r4, lr}
   bbe52:	4604      	mov	r4, r0
   bbe54:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bbe56:	f002 fca5 	bl	be7a4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bbe5a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bbe5c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bbe5e:	4620      	mov	r0, r4
   bbe60:	f7ff ffed 	bl	bbe3e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bbe64:	4620      	mov	r0, r4
   bbe66:	b002      	add	sp, #8
   bbe68:	bd10      	pop	{r4, pc}

000bbe6a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bbe6a:	6800      	ldr	r0, [r0, #0]
   bbe6c:	f000 b8d7 	b.w	bc01e <_ZN7TwoWire6unlockEv>

000bbe70 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bbe70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bbe74:	4604      	mov	r4, r0
   bbe76:	461d      	mov	r5, r3
   bbe78:	460f      	mov	r7, r1
   bbe7a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bbe7c:	f7ff ffdc 	bl	bbe38 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbe80:	2236      	movs	r2, #54	; 0x36
   bbe82:	2300      	movs	r3, #0
   bbe84:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bbe88:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bbe8a:	f04f 0801 	mov.w	r8, #1
   bbe8e:	230a      	movs	r3, #10
   bbe90:	4669      	mov	r1, sp
   bbe92:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bbe96:	f000 f89d 	bl	bbfd4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bbe9a:	6820      	ldr	r0, [r4, #0]
   bbe9c:	6803      	ldr	r3, [r0, #0]
   bbe9e:	4639      	mov	r1, r7
   bbea0:	689b      	ldr	r3, [r3, #8]
   bbea2:	4798      	blx	r3
    i2c_.write(MSB);
   bbea4:	6820      	ldr	r0, [r4, #0]
   bbea6:	6803      	ldr	r3, [r0, #0]
   bbea8:	4631      	mov	r1, r6
   bbeaa:	689b      	ldr	r3, [r3, #8]
   bbeac:	4798      	blx	r3
    i2c_.write(LSB);
   bbeae:	6820      	ldr	r0, [r4, #0]
   bbeb0:	6803      	ldr	r3, [r0, #0]
   bbeb2:	4629      	mov	r1, r5
   bbeb4:	689b      	ldr	r3, [r3, #8]
   bbeb6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bbeb8:	4641      	mov	r1, r8
   bbeba:	6820      	ldr	r0, [r4, #0]
   bbebc:	f000 f8a2 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
   bbec0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bbec2:	4620      	mov	r0, r4
   bbec4:	bf0c      	ite	eq
   bbec6:	2500      	moveq	r5, #0
   bbec8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bbecc:	f7ff ffcd 	bl	bbe6a <_ZN9FuelGauge6unlockEv>
}
   bbed0:	4628      	mov	r0, r5
   bbed2:	b004      	add	sp, #16
   bbed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbed8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bbed8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bbeda:	2240      	movs	r2, #64	; 0x40
   bbedc:	2300      	movs	r3, #0
   bbede:	2106      	movs	r1, #6
   bbee0:	f7ff ffc6 	bl	bbe70 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bbee4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bbee8:	bd08      	pop	{r3, pc}

000bbeea <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bbeea:	4770      	bx	lr

000bbeec <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bbeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbeee:	4606      	mov	r6, r0
   bbef0:	4615      	mov	r5, r2
   bbef2:	460c      	mov	r4, r1
   bbef4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bbef6:	42bc      	cmp	r4, r7
   bbef8:	d006      	beq.n	bbf08 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bbefa:	6833      	ldr	r3, [r6, #0]
   bbefc:	f814 1b01 	ldrb.w	r1, [r4], #1
   bbf00:	689b      	ldr	r3, [r3, #8]
   bbf02:	4630      	mov	r0, r6
   bbf04:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bbf06:	e7f6      	b.n	bbef6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bbf08:	4628      	mov	r0, r5
   bbf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbf0c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bbf0c:	7c00      	ldrb	r0, [r0, #16]
   bbf0e:	2200      	movs	r2, #0
   bbf10:	f7fe bf86 	b.w	bae20 <hal_i2c_write>

000bbf14 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bbf14:	7c00      	ldrb	r0, [r0, #16]
   bbf16:	2100      	movs	r1, #0
   bbf18:	f7fe bf8a 	b.w	bae30 <hal_i2c_available>

000bbf1c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bbf1c:	7c00      	ldrb	r0, [r0, #16]
   bbf1e:	2100      	movs	r1, #0
   bbf20:	f7fe bf8e 	b.w	bae40 <hal_i2c_read>

000bbf24 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bbf24:	7c00      	ldrb	r0, [r0, #16]
   bbf26:	2100      	movs	r1, #0
   bbf28:	f7fe bf92 	b.w	bae50 <hal_i2c_peek>

000bbf2c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bbf2c:	7c00      	ldrb	r0, [r0, #16]
   bbf2e:	2100      	movs	r1, #0
   bbf30:	f7fe bf96 	b.w	bae60 <hal_i2c_flush>

000bbf34 <_ZN7TwoWireD0Ev>:
   bbf34:	b510      	push	{r4, lr}
   bbf36:	2114      	movs	r1, #20
   bbf38:	4604      	mov	r4, r0
   bbf3a:	f7f8 f8b0 	bl	b409e <_ZdlPvj>
   bbf3e:	4620      	mov	r0, r4
   bbf40:	bd10      	pop	{r4, pc}
	...

000bbf44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bbf44:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bbf46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbf4a:	4604      	mov	r4, r0
   bbf4c:	4608      	mov	r0, r1
   bbf4e:	2100      	movs	r1, #0
   bbf50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bbf54:	4b03      	ldr	r3, [pc, #12]	; (bbf64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bbf56:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bbf58:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bbf5a:	4611      	mov	r1, r2
   bbf5c:	f7fe ff90 	bl	bae80 <hal_i2c_init>
}
   bbf60:	4620      	mov	r0, r4
   bbf62:	bd10      	pop	{r4, pc}
   bbf64:	000c0ec4 	.word	0x000c0ec4

000bbf68 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bbf68:	2300      	movs	r3, #0
   bbf6a:	7c00      	ldrb	r0, [r0, #16]
   bbf6c:	461a      	mov	r2, r3
   bbf6e:	4619      	mov	r1, r3
   bbf70:	f7fe bf3e 	b.w	badf0 <hal_i2c_begin>

000bbf74 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bbf74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bbf76:	2200      	movs	r2, #0
   bbf78:	2314      	movs	r3, #20
   bbf7a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bbf7e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bbf82:	780b      	ldrb	r3, [r1, #0]
   bbf84:	f88d 3008 	strb.w	r3, [sp, #8]
   bbf88:	684b      	ldr	r3, [r1, #4]
   bbf8a:	9303      	str	r3, [sp, #12]
   bbf8c:	68cb      	ldr	r3, [r1, #12]
   bbf8e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bbf90:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bbf92:	7a0b      	ldrb	r3, [r1, #8]
   bbf94:	9305      	str	r3, [sp, #20]
   bbf96:	a901      	add	r1, sp, #4
   bbf98:	f7fe ff8a 	bl	baeb0 <hal_i2c_request_ex>
}
   bbf9c:	b007      	add	sp, #28
   bbf9e:	f85d fb04 	ldr.w	pc, [sp], #4

000bbfa2 <_ZN7TwoWire11requestFromEhjh>:
{
   bbfa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bbfa4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bbfa6:	f88d 1000 	strb.w	r1, [sp]
   bbfaa:	f04f 0164 	mov.w	r1, #100	; 0x64
   bbfae:	9103      	str	r1, [sp, #12]
   bbfb0:	bf18      	it	ne
   bbfb2:	2301      	movne	r3, #1
   bbfb4:	4669      	mov	r1, sp
    size_ = size;
   bbfb6:	9201      	str	r2, [sp, #4]
   bbfb8:	f88d 3008 	strb.w	r3, [sp, #8]
   bbfbc:	f7ff ffda 	bl	bbf74 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bbfc0:	b005      	add	sp, #20
   bbfc2:	f85d fb04 	ldr.w	pc, [sp], #4

000bbfc6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bbfc6:	7c00      	ldrb	r0, [r0, #16]
   bbfc8:	2200      	movs	r2, #0
   bbfca:	f7fe bf19 	b.w	bae00 <hal_i2c_begin_transmission>

000bbfce <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bbfce:	b2c9      	uxtb	r1, r1
   bbfd0:	f7ff bff9 	b.w	bbfc6 <_ZN7TwoWire17beginTransmissionEh>

000bbfd4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bbfd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bbfd6:	2300      	movs	r3, #0
   bbfd8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bbfdc:	684a      	ldr	r2, [r1, #4]
   bbfde:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bbfe0:	2314      	movs	r3, #20
    };
   bbfe2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bbfe4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bbfe8:	780b      	ldrb	r3, [r1, #0]
    };
   bbfea:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bbfec:	7a0a      	ldrb	r2, [r1, #8]
   bbfee:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bbff0:	7c00      	ldrb	r0, [r0, #16]
    };
   bbff2:	f88d 3008 	strb.w	r3, [sp, #8]
   bbff6:	aa01      	add	r2, sp, #4
   bbff8:	4619      	mov	r1, r3
   bbffa:	f7fe ff01 	bl	bae00 <hal_i2c_begin_transmission>
}
   bbffe:	b007      	add	sp, #28
   bc000:	f85d fb04 	ldr.w	pc, [sp], #4

000bc004 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc004:	7c00      	ldrb	r0, [r0, #16]
   bc006:	2200      	movs	r2, #0
   bc008:	f7fe bf02 	b.w	bae10 <hal_i2c_end_transmission>

000bc00c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bc00c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bc00e:	2100      	movs	r1, #0
   bc010:	7c00      	ldrb	r0, [r0, #16]
   bc012:	f7fe ff3d 	bl	bae90 <hal_i2c_lock>
}
   bc016:	fab0 f080 	clz	r0, r0
   bc01a:	0940      	lsrs	r0, r0, #5
   bc01c:	bd08      	pop	{r3, pc}

000bc01e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bc01e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bc020:	2100      	movs	r1, #0
   bc022:	7c00      	ldrb	r0, [r0, #16]
   bc024:	f7fe ff3c 	bl	baea0 <hal_i2c_unlock>
}
   bc028:	fab0 f080 	clz	r0, r0
   bc02c:	0940      	lsrs	r0, r0, #5
   bc02e:	bd08      	pop	{r3, pc}

000bc030 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc030:	4700      	bx	r0
	...

000bc034 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc034:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc038:	2400      	movs	r4, #0
{
   bc03a:	461d      	mov	r5, r3
   bc03c:	460f      	mov	r7, r1
   bc03e:	4690      	mov	r8, r2
   bc040:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc042:	f7fe fec5 	bl	badd0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc046:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc048:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc04c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc050:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc054:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc058:	bfa2      	ittt	ge
   bc05a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc05e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc062:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc064:	4907      	ldr	r1, [pc, #28]	; (bc084 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc066:	9400      	str	r4, [sp, #0]
   bc068:	4643      	mov	r3, r8
   bc06a:	463a      	mov	r2, r7
   bc06c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc06e:	bfa8      	it	ge
   bc070:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc074:	f7fe fea4 	bl	badc0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc078:	fab0 f080 	clz	r0, r0
   bc07c:	0940      	lsrs	r0, r0, #5
   bc07e:	b004      	add	sp, #16
   bc080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc084:	000bc031 	.word	0x000bc031

000bc088 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   bc088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc08a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   bc08c:	f7fe fea0 	bl	badd0 <HAL_Interrupts_Detach>
   bc090:	4605      	mov	r5, r0
   bc092:	b970      	cbnz	r0, bc0b2 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   bc094:	4f08      	ldr	r7, [pc, #32]	; (bc0b8 <_Z15detachInterruptt+0x30>)
   bc096:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   bc09a:	b146      	cbz	r6, bc0ae <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
   bc09c:	4630      	mov	r0, r6
   bc09e:	f7f8 fd79 	bl	b4b94 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   bc0a2:	2110      	movs	r1, #16
   bc0a4:	4630      	mov	r0, r6
   bc0a6:	f7f7 fffa 	bl	b409e <_ZdlPvj>
        handlers[pin] = nullptr;
   bc0aa:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   bc0ae:	2001      	movs	r0, #1
   bc0b0:	e000      	b.n	bc0b4 <_Z15detachInterruptt+0x2c>
        return false;
   bc0b2:	2000      	movs	r0, #0
    }
    return true;
}
   bc0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc0b6:	bf00      	nop
   bc0b8:	2003e5b8 	.word	0x2003e5b8

000bc0bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc0bc:	4770      	bx	lr

000bc0be <_ZN9IPAddressD0Ev>:
   bc0be:	b510      	push	{r4, lr}
   bc0c0:	2118      	movs	r1, #24
   bc0c2:	4604      	mov	r4, r0
   bc0c4:	f7f7 ffeb 	bl	b409e <_ZdlPvj>
   bc0c8:	4620      	mov	r0, r4
   bc0ca:	bd10      	pop	{r4, pc}

000bc0cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc0ce:	7d03      	ldrb	r3, [r0, #20]
   bc0d0:	2b06      	cmp	r3, #6
{
   bc0d2:	b08d      	sub	sp, #52	; 0x34
   bc0d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc0d6:	f100 0704 	add.w	r7, r0, #4
   bc0da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc0de:	d012      	beq.n	bc106 <_ZNK9IPAddress7printToER5Print+0x3a>
   bc0e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc0e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc0e8:	220a      	movs	r2, #10
   bc0ea:	4630      	mov	r0, r6
   bc0ec:	f001 fb0d 	bl	bd70a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc0f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc0f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc0f4:	d019      	beq.n	bc12a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc0f6:	2c00      	cmp	r4, #0
   bc0f8:	d0f4      	beq.n	bc0e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc0fa:	212e      	movs	r1, #46	; 0x2e
   bc0fc:	4630      	mov	r0, r6
   bc0fe:	f001 faf5 	bl	bd6ec <_ZN5Print5printEc>
   bc102:	4404      	add	r4, r0
   bc104:	e7ee      	b.n	bc0e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc106:	232f      	movs	r3, #47	; 0x2f
   bc108:	466a      	mov	r2, sp
   bc10a:	4639      	mov	r1, r7
   bc10c:	200a      	movs	r0, #10
		buf[0] = 0;
   bc10e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc112:	f7fe fed5 	bl	baec0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc116:	4668      	mov	r0, sp
   bc118:	f003 f99f 	bl	bf45a <strlen>
   bc11c:	6833      	ldr	r3, [r6, #0]
   bc11e:	4602      	mov	r2, r0
   bc120:	68db      	ldr	r3, [r3, #12]
   bc122:	4669      	mov	r1, sp
   bc124:	4630      	mov	r0, r6
   bc126:	4798      	blx	r3
   bc128:	4604      	mov	r4, r0
    }
    return n;
}
   bc12a:	4620      	mov	r0, r4
   bc12c:	b00d      	add	sp, #52	; 0x34
   bc12e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc130 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc130:	b510      	push	{r4, lr}
   bc132:	4b05      	ldr	r3, [pc, #20]	; (bc148 <_ZN9IPAddressC1Ev+0x18>)
   bc134:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc136:	2211      	movs	r2, #17
   bc138:	f840 3b04 	str.w	r3, [r0], #4
   bc13c:	2100      	movs	r1, #0
   bc13e:	f003 f8d1 	bl	bf2e4 <memset>
}
   bc142:	4620      	mov	r0, r4
   bc144:	bd10      	pop	{r4, pc}
   bc146:	bf00      	nop
   bc148:	000c0eec 	.word	0x000c0eec

000bc14c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc14c:	4603      	mov	r3, r0
   bc14e:	4a07      	ldr	r2, [pc, #28]	; (bc16c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc150:	b510      	push	{r4, lr}
   bc152:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc156:	f101 0210 	add.w	r2, r1, #16
   bc15a:	f851 4b04 	ldr.w	r4, [r1], #4
   bc15e:	f843 4b04 	str.w	r4, [r3], #4
   bc162:	4291      	cmp	r1, r2
   bc164:	d1f9      	bne.n	bc15a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc166:	780a      	ldrb	r2, [r1, #0]
   bc168:	701a      	strb	r2, [r3, #0]
}
   bc16a:	bd10      	pop	{r4, pc}
   bc16c:	000c0eec 	.word	0x000c0eec

000bc170 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc170:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc172:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc176:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc17a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc17e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc182:	2304      	movs	r3, #4
   bc184:	6041      	str	r1, [r0, #4]
   bc186:	7503      	strb	r3, [r0, #20]
}
   bc188:	bd10      	pop	{r4, pc}
	...

000bc18c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc18c:	b507      	push	{r0, r1, r2, lr}
   bc18e:	4b06      	ldr	r3, [pc, #24]	; (bc1a8 <_ZN9IPAddressC1EPKh+0x1c>)
   bc190:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc192:	78cb      	ldrb	r3, [r1, #3]
   bc194:	9300      	str	r3, [sp, #0]
   bc196:	788b      	ldrb	r3, [r1, #2]
   bc198:	784a      	ldrb	r2, [r1, #1]
   bc19a:	7809      	ldrb	r1, [r1, #0]
   bc19c:	f7ff ffe8 	bl	bc170 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc1a0:	b003      	add	sp, #12
   bc1a2:	f85d fb04 	ldr.w	pc, [sp], #4
   bc1a6:	bf00      	nop
   bc1a8:	000c0eec 	.word	0x000c0eec

000bc1ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bc1ac:	f100 0310 	add.w	r3, r0, #16
   bc1b0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bc1b2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bc1b6:	2901      	cmp	r1, #1
   bc1b8:	4618      	mov	r0, r3
   bc1ba:	d108      	bne.n	bc1ce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bc1bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bc1c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bc1c4:	3a01      	subs	r2, #1
   bc1c6:	f103 0310 	add.w	r3, r3, #16
   bc1ca:	d1f2      	bne.n	bc1b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bc1cc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bc1ce:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bc1d0:	bf04      	itt	eq
   bc1d2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bc1d6:	1852      	addeq	r2, r2, r1
   bc1d8:	e7f4      	b.n	bc1c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bc1da <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bc1da:	b40e      	push	{r1, r2, r3}
   bc1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc1de:	b088      	sub	sp, #32
   bc1e0:	af00      	add	r7, sp, #0
   bc1e2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1e6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc1e8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1ec:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bc1ee:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1f0:	462b      	mov	r3, r5
   bc1f2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bc1f4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc1f6:	f7ff f957 	bl	bb4a8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bc1fa:	280f      	cmp	r0, #15
   bc1fc:	687a      	ldr	r2, [r7, #4]
   bc1fe:	d91a      	bls.n	bc236 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bc200:	f100 0308 	add.w	r3, r0, #8
   bc204:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bc208:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bc20a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc20e:	1c41      	adds	r1, r0, #1
   bc210:	462b      	mov	r3, r5
   bc212:	4668      	mov	r0, sp
        va_start(args, fmt);
   bc214:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bc216:	f7ff f947 	bl	bb4a8 <vsnprintf>
        if (n > 0) {
   bc21a:	1e02      	subs	r2, r0, #0
   bc21c:	dd04      	ble.n	bc228 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bc21e:	6823      	ldr	r3, [r4, #0]
   bc220:	4669      	mov	r1, sp
   bc222:	689b      	ldr	r3, [r3, #8]
   bc224:	4620      	mov	r0, r4
   bc226:	4798      	blx	r3
   bc228:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bc22a:	3720      	adds	r7, #32
   bc22c:	46bd      	mov	sp, r7
   bc22e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bc232:	b003      	add	sp, #12
   bc234:	4770      	bx	lr
    } else if (n > 0) {
   bc236:	2800      	cmp	r0, #0
   bc238:	d0f7      	beq.n	bc22a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bc23a:	6823      	ldr	r3, [r4, #0]
   bc23c:	4602      	mov	r2, r0
   bc23e:	689b      	ldr	r3, [r3, #8]
   bc240:	f107 0110 	add.w	r1, r7, #16
   bc244:	4620      	mov	r0, r4
   bc246:	4798      	blx	r3
}
   bc248:	e7ef      	b.n	bc22a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bc24a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc24a:	b538      	push	{r3, r4, r5, lr}
   bc24c:	680b      	ldr	r3, [r1, #0]
   bc24e:	6003      	str	r3, [r0, #0]
   bc250:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bc252:	6843      	ldr	r3, [r0, #4]
   bc254:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc256:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bc258:	d008      	beq.n	bc26c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bc25a:	b115      	cbz	r5, bc262 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bc25c:	686b      	ldr	r3, [r5, #4]
   bc25e:	3301      	adds	r3, #1
   bc260:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bc262:	6860      	ldr	r0, [r4, #4]
   bc264:	b108      	cbz	r0, bc26a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bc266:	f7ff f986 	bl	bb576 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bc26a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc26c:	bd38      	pop	{r3, r4, r5, pc}

000bc26e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bc26e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc270:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bc272:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc276:	689b      	ldr	r3, [r3, #8]
   bc278:	2201      	movs	r2, #1
   bc27a:	f10d 0107 	add.w	r1, sp, #7
   bc27e:	4798      	blx	r3
}
   bc280:	b003      	add	sp, #12
   bc282:	f85d fb04 	ldr.w	pc, [sp], #4

000bc286 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc286:	460b      	mov	r3, r1
   bc288:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bc28a:	2200      	movs	r2, #0
   bc28c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bc28e:	e9c0 2200 	strd	r2, r2, [r0]
   bc292:	4604      	mov	r4, r0
        t_ = t;
   bc294:	6083      	str	r3, [r0, #8]
    if (t) {
   bc296:	b90b      	cbnz	r3, bc29c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bc298:	4620      	mov	r0, r4
   bc29a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bc29c:	f7ff ffd5 	bl	bc24a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bc2a0:	e7fa      	b.n	bc298 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bc2a2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bc2a2:	6883      	ldr	r3, [r0, #8]
   bc2a4:	b1eb      	cbz	r3, bc2e2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bc2a6:	781a      	ldrb	r2, [r3, #0]
   bc2a8:	2a03      	cmp	r2, #3
   bc2aa:	d81a      	bhi.n	bc2e2 <_ZNK5spark9JSONValue4typeEv+0x40>
   bc2ac:	e8df f002 	tbb	[pc, r2]
   bc2b0:	1b021704 	.word	0x1b021704
   bc2b4:	2005      	movs	r0, #5
   bc2b6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bc2b8:	6802      	ldr	r2, [r0, #0]
   bc2ba:	685b      	ldr	r3, [r3, #4]
   bc2bc:	6852      	ldr	r2, [r2, #4]
   bc2be:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bc2c0:	282d      	cmp	r0, #45	; 0x2d
   bc2c2:	d012      	beq.n	bc2ea <_ZNK5spark9JSONValue4typeEv+0x48>
   bc2c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc2c8:	2b09      	cmp	r3, #9
   bc2ca:	d90e      	bls.n	bc2ea <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bc2cc:	2874      	cmp	r0, #116	; 0x74
   bc2ce:	d00e      	beq.n	bc2ee <_ZNK5spark9JSONValue4typeEv+0x4c>
   bc2d0:	2866      	cmp	r0, #102	; 0x66
   bc2d2:	d00c      	beq.n	bc2ee <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bc2d4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bc2d8:	4258      	negs	r0, r3
   bc2da:	4158      	adcs	r0, r3
   bc2dc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bc2de:	2006      	movs	r0, #6
   bc2e0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bc2e2:	2000      	movs	r0, #0
   bc2e4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bc2e6:	2004      	movs	r0, #4
   bc2e8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bc2ea:	2003      	movs	r0, #3
   bc2ec:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bc2ee:	2002      	movs	r0, #2
}
   bc2f0:	4770      	bx	lr

000bc2f2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bc2f2:	b510      	push	{r4, lr}
   bc2f4:	4604      	mov	r4, r0
    switch (type()) {
   bc2f6:	f7ff ffd4 	bl	bc2a2 <_ZNK5spark9JSONValue4typeEv>
   bc2fa:	2802      	cmp	r0, #2
   bc2fc:	d00e      	beq.n	bc31c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bc2fe:	1ec3      	subs	r3, r0, #3
   bc300:	b2db      	uxtb	r3, r3
   bc302:	2b01      	cmp	r3, #1
   bc304:	d814      	bhi.n	bc330 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bc306:	6822      	ldr	r2, [r4, #0]
   bc308:	68a3      	ldr	r3, [r4, #8]
   bc30a:	6850      	ldr	r0, [r2, #4]
   bc30c:	685b      	ldr	r3, [r3, #4]
}
   bc30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bc312:	220a      	movs	r2, #10
   bc314:	2100      	movs	r1, #0
   bc316:	4418      	add	r0, r3
   bc318:	f003 b990 	b.w	bf63c <strtol>
        const char* const s = d_->json + t_->start;
   bc31c:	6822      	ldr	r2, [r4, #0]
   bc31e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bc320:	6852      	ldr	r2, [r2, #4]
   bc322:	685b      	ldr	r3, [r3, #4]
   bc324:	5cd0      	ldrb	r0, [r2, r3]
   bc326:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bc32a:	4258      	negs	r0, r3
   bc32c:	4158      	adcs	r0, r3
}
   bc32e:	bd10      	pop	{r4, pc}
    switch (type()) {
   bc330:	2000      	movs	r0, #0
   bc332:	e7fc      	b.n	bc32e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bc334 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc334:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc336:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bc338:	e9c0 3300 	strd	r3, r3, [r0]
   bc33c:	4604      	mov	r4, r0
        n_(0) {
   bc33e:	480e      	ldr	r0, [pc, #56]	; (bc378 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bc340:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bc344:	b1a9      	cbz	r1, bc372 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bc346:	780b      	ldrb	r3, [r1, #0]
   bc348:	2b03      	cmp	r3, #3
   bc34a:	d006      	beq.n	bc35a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bc34c:	b98b      	cbnz	r3, bc372 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bc34e:	6813      	ldr	r3, [r2, #0]
   bc350:	6858      	ldr	r0, [r3, #4]
   bc352:	684b      	ldr	r3, [r1, #4]
   bc354:	5cc3      	ldrb	r3, [r0, r3]
   bc356:	2b6e      	cmp	r3, #110	; 0x6e
   bc358:	d007      	beq.n	bc36a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bc35a:	6813      	ldr	r3, [r2, #0]
   bc35c:	684d      	ldr	r5, [r1, #4]
   bc35e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bc360:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bc362:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bc364:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bc366:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bc368:	60e3      	str	r3, [r4, #12]
   bc36a:	4611      	mov	r1, r2
   bc36c:	4620      	mov	r0, r4
   bc36e:	f7ff ff6c 	bl	bc24a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc372:	4620      	mov	r0, r4
   bc374:	bd38      	pop	{r3, r4, r5, pc}
   bc376:	bf00      	nop
   bc378:	000c0f58 	.word	0x000c0f58

000bc37c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bc37c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bc37e:	2500      	movs	r5, #0
   bc380:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bc382:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bc386:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bc38a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc38e:	4604      	mov	r4, r0
   bc390:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bc392:	b14b      	cbz	r3, bc3a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bc394:	781a      	ldrb	r2, [r3, #0]
   bc396:	2a01      	cmp	r2, #1
   bc398:	d106      	bne.n	bc3a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bc39a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bc39e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bc3a0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bc3a2:	6143      	str	r3, [r0, #20]
   bc3a4:	f7ff ff51 	bl	bc24a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bc3a8:	4620      	mov	r0, r4
   bc3aa:	bd38      	pop	{r3, r4, r5, pc}

000bc3ac <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bc3ac:	b510      	push	{r4, lr}
    if (!n_) {
   bc3ae:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bc3b0:	4604      	mov	r4, r0
    if (!n_) {
   bc3b2:	b163      	cbz	r3, bc3ce <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bc3b4:	6880      	ldr	r0, [r0, #8]
   bc3b6:	60e0      	str	r0, [r4, #12]
    --n_;
   bc3b8:	3b01      	subs	r3, #1
    ++t_;
   bc3ba:	3010      	adds	r0, #16
   bc3bc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bc3be:	6120      	str	r0, [r4, #16]
    --n_;
   bc3c0:	6163      	str	r3, [r4, #20]
    if (n_) {
   bc3c2:	b113      	cbz	r3, bc3ca <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bc3c4:	f7ff fef2 	bl	bc1ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bc3c8:	60a0      	str	r0, [r4, #8]
    return true;
   bc3ca:	2001      	movs	r0, #1
   bc3cc:	e000      	b.n	bc3d0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bc3ce:	4618      	mov	r0, r3
}
   bc3d0:	bd10      	pop	{r4, pc}

000bc3d2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc3d2:	b510      	push	{r4, lr}
    write('}');
   bc3d4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bc3d6:	4604      	mov	r4, r0
    write('}');
   bc3d8:	f7ff ff49 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bc3dc:	2301      	movs	r3, #1
   bc3de:	7123      	strb	r3, [r4, #4]
}
   bc3e0:	4620      	mov	r0, r4
   bc3e2:	bd10      	pop	{r4, pc}

000bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bc3e4:	b508      	push	{r3, lr}
    switch (state_) {
   bc3e6:	7903      	ldrb	r3, [r0, #4]
   bc3e8:	2b01      	cmp	r3, #1
   bc3ea:	d002      	beq.n	bc3f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bc3ec:	2b02      	cmp	r3, #2
   bc3ee:	d004      	beq.n	bc3fa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bc3f0:	bd08      	pop	{r3, pc}
        write(',');
   bc3f2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bc3f4:	f7ff ff3b 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
}
   bc3f8:	e7fa      	b.n	bc3f0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bc3fa:	213a      	movs	r1, #58	; 0x3a
   bc3fc:	e7fa      	b.n	bc3f4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bc3fe <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bc3fe:	b510      	push	{r4, lr}
   bc400:	4604      	mov	r4, r0
    writeSeparator();
   bc402:	f7ff ffef 	bl	bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bc406:	4620      	mov	r0, r4
   bc408:	217b      	movs	r1, #123	; 0x7b
   bc40a:	f7ff ff30 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bc40e:	2300      	movs	r3, #0
   bc410:	7123      	strb	r3, [r4, #4]
}
   bc412:	4620      	mov	r0, r4
   bc414:	bd10      	pop	{r4, pc}
	...

000bc418 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bc418:	b513      	push	{r0, r1, r4, lr}
   bc41a:	4604      	mov	r4, r0
   bc41c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc41e:	f7ff ffe1 	bl	bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bc422:	6823      	ldr	r3, [r4, #0]
   bc424:	9a01      	ldr	r2, [sp, #4]
   bc426:	68db      	ldr	r3, [r3, #12]
   bc428:	4903      	ldr	r1, [pc, #12]	; (bc438 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bc42a:	4620      	mov	r0, r4
   bc42c:	4798      	blx	r3
    state_ = NEXT;
   bc42e:	2301      	movs	r3, #1
}
   bc430:	4620      	mov	r0, r4
    state_ = NEXT;
   bc432:	7123      	strb	r3, [r4, #4]
}
   bc434:	b002      	add	sp, #8
   bc436:	bd10      	pop	{r4, pc}
   bc438:	000c04a3 	.word	0x000c04a3

000bc43c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bc43c:	b513      	push	{r0, r1, r4, lr}
   bc43e:	4604      	mov	r4, r0
   bc440:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bc442:	f7ff ffcf 	bl	bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bc446:	6823      	ldr	r3, [r4, #0]
   bc448:	9a01      	ldr	r2, [sp, #4]
   bc44a:	68db      	ldr	r3, [r3, #12]
   bc44c:	4903      	ldr	r1, [pc, #12]	; (bc45c <_ZN5spark10JSONWriter5valueEj+0x20>)
   bc44e:	4620      	mov	r0, r4
   bc450:	4798      	blx	r3
    state_ = NEXT;
   bc452:	2301      	movs	r3, #1
}
   bc454:	4620      	mov	r0, r4
    state_ = NEXT;
   bc456:	7123      	strb	r3, [r4, #4]
}
   bc458:	b002      	add	sp, #8
   bc45a:	bd10      	pop	{r4, pc}
   bc45c:	000c07c6 	.word	0x000c07c6

000bc460 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc464:	460d      	mov	r5, r1
    write('"');
   bc466:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bc468:	4690      	mov	r8, r2
   bc46a:	4604      	mov	r4, r0
    write('"');
   bc46c:	f7ff feff 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bc470:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc518 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bc474:	44a8      	add	r8, r5
    const char *s = str;
   bc476:	462f      	mov	r7, r5
    while (s != end) {
   bc478:	4547      	cmp	r7, r8
   bc47a:	46ba      	mov	sl, r7
   bc47c:	d03d      	beq.n	bc4fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bc47e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bc482:	2e22      	cmp	r6, #34	; 0x22
   bc484:	d006      	beq.n	bc494 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc486:	2e5c      	cmp	r6, #92	; 0x5c
   bc488:	d004      	beq.n	bc494 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bc48a:	4630      	mov	r0, r6
   bc48c:	f002 fefa 	bl	bf284 <isprint>
   bc490:	2800      	cmp	r0, #0
   bc492:	d1f1      	bne.n	bc478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bc494:	6823      	ldr	r3, [r4, #0]
   bc496:	ebaa 0205 	sub.w	r2, sl, r5
   bc49a:	689b      	ldr	r3, [r3, #8]
   bc49c:	4629      	mov	r1, r5
   bc49e:	4620      	mov	r0, r4
   bc4a0:	4798      	blx	r3
            write('\\');
   bc4a2:	215c      	movs	r1, #92	; 0x5c
   bc4a4:	4620      	mov	r0, r4
   bc4a6:	f7ff fee2 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bc4aa:	2e0d      	cmp	r6, #13
   bc4ac:	d80a      	bhi.n	bc4c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bc4ae:	2e07      	cmp	r6, #7
   bc4b0:	d91c      	bls.n	bc4ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc4b2:	f1a6 0308 	sub.w	r3, r6, #8
   bc4b6:	2b05      	cmp	r3, #5
   bc4b8:	d818      	bhi.n	bc4ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bc4ba:	e8df f003 	tbb	[pc, r3]
   bc4be:	0f0d      	.short	0x0f0d
   bc4c0:	15131711 	.word	0x15131711
   bc4c4:	2e22      	cmp	r6, #34	; 0x22
   bc4c6:	d001      	beq.n	bc4cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bc4c8:	2e5c      	cmp	r6, #92	; 0x5c
   bc4ca:	d10f      	bne.n	bc4ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bc4cc:	4631      	mov	r1, r6
                write('b');
   bc4ce:	4620      	mov	r0, r4
   bc4d0:	f7ff fecd 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bc4d4:	463d      	mov	r5, r7
    while (s != end) {
   bc4d6:	e7cf      	b.n	bc478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bc4d8:	2162      	movs	r1, #98	; 0x62
   bc4da:	e7f8      	b.n	bc4ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bc4dc:	2174      	movs	r1, #116	; 0x74
   bc4de:	e7f6      	b.n	bc4ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bc4e0:	216e      	movs	r1, #110	; 0x6e
   bc4e2:	e7f4      	b.n	bc4ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bc4e4:	2166      	movs	r1, #102	; 0x66
   bc4e6:	e7f2      	b.n	bc4ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bc4e8:	2172      	movs	r1, #114	; 0x72
   bc4ea:	e7f0      	b.n	bc4ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bc4ec:	6823      	ldr	r3, [r4, #0]
   bc4ee:	4632      	mov	r2, r6
   bc4f0:	68db      	ldr	r3, [r3, #12]
   bc4f2:	4649      	mov	r1, r9
   bc4f4:	4620      	mov	r0, r4
   bc4f6:	4798      	blx	r3
                break;
   bc4f8:	e7ec      	b.n	bc4d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bc4fa:	42bd      	cmp	r5, r7
   bc4fc:	d005      	beq.n	bc50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bc4fe:	6823      	ldr	r3, [r4, #0]
   bc500:	1b7a      	subs	r2, r7, r5
   bc502:	689b      	ldr	r3, [r3, #8]
   bc504:	4629      	mov	r1, r5
   bc506:	4620      	mov	r0, r4
   bc508:	4798      	blx	r3
    }
    write('"');
   bc50a:	2122      	movs	r1, #34	; 0x22
   bc50c:	4620      	mov	r0, r4
   bc50e:	f7ff feae 	bl	bc26e <_ZN5spark10JSONWriter5writeEc>
}
   bc512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc516:	bf00      	nop
   bc518:	000c0ef8 	.word	0x000c0ef8

000bc51c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bc51c:	b513      	push	{r0, r1, r4, lr}
   bc51e:	4604      	mov	r4, r0
   bc520:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc524:	f7ff ff5e 	bl	bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bc528:	4620      	mov	r0, r4
   bc52a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc52e:	f7ff ff97 	bl	bc460 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bc532:	2302      	movs	r3, #2
}
   bc534:	4620      	mov	r0, r4
    state_ = VALUE;
   bc536:	7123      	strb	r3, [r4, #4]
}
   bc538:	b002      	add	sp, #8
   bc53a:	bd10      	pop	{r4, pc}

000bc53c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bc53c:	b513      	push	{r0, r1, r4, lr}
   bc53e:	4604      	mov	r4, r0
   bc540:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bc544:	f7ff ff4e 	bl	bc3e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bc548:	4620      	mov	r0, r4
   bc54a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bc54e:	f7ff ff87 	bl	bc460 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bc552:	2301      	movs	r3, #1
}
   bc554:	4620      	mov	r0, r4
    state_ = NEXT;
   bc556:	7123      	strb	r3, [r4, #4]
}
   bc558:	b002      	add	sp, #8
   bc55a:	bd10      	pop	{r4, pc}

000bc55c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bc55c:	6880      	ldr	r0, [r0, #8]
   bc55e:	6803      	ldr	r3, [r0, #0]
   bc560:	68db      	ldr	r3, [r3, #12]
   bc562:	4718      	bx	r3

000bc564 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bc564:	4770      	bx	lr

000bc566 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bc566:	4608      	mov	r0, r1
   bc568:	b111      	cbz	r1, bc570 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bc56a:	680b      	ldr	r3, [r1, #0]
   bc56c:	685b      	ldr	r3, [r3, #4]
   bc56e:	4718      	bx	r3
}
   bc570:	4770      	bx	lr

000bc572 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bc572:	4770      	bx	lr

000bc574 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc574:	4770      	bx	lr

000bc576 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bc576:	4770      	bx	lr

000bc578 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bc578:	4770      	bx	lr

000bc57a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bc57a:	b538      	push	{r3, r4, r5, lr}
   bc57c:	4604      	mov	r4, r0
   bc57e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bc580:	6800      	ldr	r0, [r0, #0]
   bc582:	212e      	movs	r1, #46	; 0x2e
   bc584:	f002 ff2f 	bl	bf3e6 <strchrnul>
    size = s - category;
   bc588:	6823      	ldr	r3, [r4, #0]
   bc58a:	1ac3      	subs	r3, r0, r3
   bc58c:	602b      	str	r3, [r5, #0]
    if (size) {
   bc58e:	b123      	cbz	r3, bc59a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bc590:	7803      	ldrb	r3, [r0, #0]
   bc592:	b103      	cbz	r3, bc596 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bc594:	3001      	adds	r0, #1
   bc596:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc598:	6020      	str	r0, [r4, #0]
}
   bc59a:	4618      	mov	r0, r3
   bc59c:	bd38      	pop	{r3, r4, r5, pc}

000bc59e <_ZN5spark16JSONStreamWriterD0Ev>:
   bc59e:	b510      	push	{r4, lr}
   bc5a0:	210c      	movs	r1, #12
   bc5a2:	4604      	mov	r4, r0
   bc5a4:	f7f7 fd7b 	bl	b409e <_ZdlPvj>
   bc5a8:	4620      	mov	r0, r4
   bc5aa:	bd10      	pop	{r4, pc}

000bc5ac <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bc5ac:	b510      	push	{r4, lr}
   bc5ae:	2104      	movs	r1, #4
   bc5b0:	4604      	mov	r4, r0
   bc5b2:	f7f7 fd74 	bl	b409e <_ZdlPvj>
   bc5b6:	4620      	mov	r0, r4
   bc5b8:	bd10      	pop	{r4, pc}

000bc5ba <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bc5ba:	b510      	push	{r4, lr}
   bc5bc:	2104      	movs	r1, #4
   bc5be:	4604      	mov	r4, r0
   bc5c0:	f7f7 fd6d 	bl	b409e <_ZdlPvj>
   bc5c4:	4620      	mov	r0, r4
   bc5c6:	bd10      	pop	{r4, pc}

000bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bc5c8:	f7fe bb6a 	b.w	baca0 <os_mutex_recursive_lock>

000bc5cc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bc5cc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bc5ce:	f002 ff14 	bl	bf3fa <strcmp>
}
   bc5d2:	fab0 f080 	clz	r0, r0
   bc5d6:	0940      	lsrs	r0, r0, #5
   bc5d8:	bd08      	pop	{r3, pc}

000bc5da <__tcf_1>:
   bc5da:	4770      	bx	lr

000bc5dc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bc5dc:	b510      	push	{r4, lr}
   bc5de:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bc5e0:	f001 ff22 	bl	be428 <_Z16_fetch_usbserialv>
   bc5e4:	4284      	cmp	r4, r0
   bc5e6:	d010      	beq.n	bc60a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bc5e8:	f002 f91c 	bl	be824 <_Z22__fetch_global_Serial1v>
   bc5ec:	4284      	cmp	r4, r0
   bc5ee:	d105      	bne.n	bc5fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bc5f0:	f002 f918 	bl	be824 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bc5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bc5f8:	f001 beaf 	b.w	be35a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bc5fc:	b12c      	cbz	r4, bc60a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bc5fe:	6823      	ldr	r3, [r4, #0]
   bc600:	4620      	mov	r0, r4
   bc602:	685b      	ldr	r3, [r3, #4]
}
   bc604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc608:	4718      	bx	r3
   bc60a:	bd10      	pop	{r4, pc}

000bc60c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bc60c:	b513      	push	{r0, r1, r4, lr}
   bc60e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bc610:	4608      	mov	r0, r1
   bc612:	9101      	str	r1, [sp, #4]
   bc614:	f002 ff21 	bl	bf45a <strlen>
   bc618:	9901      	ldr	r1, [sp, #4]
   bc61a:	4602      	mov	r2, r0
   bc61c:	4620      	mov	r0, r4
}
   bc61e:	b002      	add	sp, #8
   bc620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bc624:	f7ff bf8a 	b.w	bc53c <_ZN5spark10JSONWriter5valueEPKcj>

000bc628 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bc628:	b513      	push	{r0, r1, r4, lr}
   bc62a:	4604      	mov	r4, r0
    write(str, strlen(str));
   bc62c:	4608      	mov	r0, r1
   bc62e:	9101      	str	r1, [sp, #4]
   bc630:	f002 ff13 	bl	bf45a <strlen>
   bc634:	6823      	ldr	r3, [r4, #0]
   bc636:	9901      	ldr	r1, [sp, #4]
   bc638:	68db      	ldr	r3, [r3, #12]
   bc63a:	4602      	mov	r2, r0
   bc63c:	4620      	mov	r0, r4
}
   bc63e:	b002      	add	sp, #8
   bc640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bc644:	4718      	bx	r3

000bc646 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bc646:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bc648:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bc64a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bc64e:	68db      	ldr	r3, [r3, #12]
   bc650:	2201      	movs	r2, #1
   bc652:	f10d 0107 	add.w	r1, sp, #7
   bc656:	4798      	blx	r3
}
   bc658:	b003      	add	sp, #12
   bc65a:	f85d fb04 	ldr.w	pc, [sp], #4

000bc65e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc65e:	b40e      	push	{r1, r2, r3}
   bc660:	b503      	push	{r0, r1, lr}
   bc662:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bc664:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bc666:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bc66a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bc66c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bc66e:	f001 f942 	bl	bd8f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bc672:	b002      	add	sp, #8
   bc674:	f85d eb04 	ldr.w	lr, [sp], #4
   bc678:	b003      	add	sp, #12
   bc67a:	4770      	bx	lr

000bc67c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bc67c:	680a      	ldr	r2, [r1, #0]
   bc67e:	6002      	str	r2, [r0, #0]
   bc680:	684a      	ldr	r2, [r1, #4]
   bc682:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bc684:	2200      	movs	r2, #0
   bc686:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bc68a:	b510      	push	{r4, lr}
   bc68c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc68e:	688c      	ldr	r4, [r1, #8]
   bc690:	6084      	str	r4, [r0, #8]
   bc692:	68cc      	ldr	r4, [r1, #12]
   bc694:	60c4      	str	r4, [r0, #12]
   bc696:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc698:	608a      	str	r2, [r1, #8]
   bc69a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bc69c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bc69e:	610a      	str	r2, [r1, #16]
   bc6a0:	bd10      	pop	{r4, pc}
	...

000bc6a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bc6a8:	e9d0 8400 	ldrd	r8, r4, [r0]
   bc6ac:	f04f 0a14 	mov.w	sl, #20
   bc6b0:	9300      	str	r3, [sp, #0]
   bc6b2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bc6b6:	4b18      	ldr	r3, [pc, #96]	; (bc718 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc6b8:	10a4      	asrs	r4, r4, #2
   bc6ba:	4617      	mov	r7, r2
   bc6bc:	435c      	muls	r4, r3
   bc6be:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bc6c0:	2c00      	cmp	r4, #0
   bc6c2:	dd21      	ble.n	bc708 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bc6c4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bc6c6:	fb0a f006 	mul.w	r0, sl, r6
   bc6ca:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bc6ce:	463a      	mov	r2, r7
   bc6d0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bc6d4:	5828      	ldr	r0, [r5, r0]
   bc6d6:	9101      	str	r1, [sp, #4]
   bc6d8:	455f      	cmp	r7, fp
   bc6da:	bf28      	it	cs
   bc6dc:	465a      	movcs	r2, fp
   bc6de:	f002 fec4 	bl	bf46a <strncmp>
                if (cmp == 0) {
   bc6e2:	2800      	cmp	r0, #0
   bc6e4:	9901      	ldr	r1, [sp, #4]
   bc6e6:	f04f 0301 	mov.w	r3, #1
   bc6ea:	d10b      	bne.n	bc704 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bc6ec:	455f      	cmp	r7, fp
   bc6ee:	d103      	bne.n	bc6f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bc6f0:	9a00      	ldr	r2, [sp, #0]
   bc6f2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bc6f4:	4634      	mov	r4, r6
   bc6f6:	e7e3      	b.n	bc6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bc6f8:	d9fc      	bls.n	bc6f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bc6fa:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bc6fc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bc700:	3e01      	subs	r6, #1
   bc702:	e7f7      	b.n	bc6f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bc704:	dbf9      	blt.n	bc6fa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bc706:	e7f5      	b.n	bc6f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bc708:	eba5 0508 	sub.w	r5, r5, r8
}
   bc70c:	4802      	ldr	r0, [pc, #8]	; (bc718 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bc70e:	10ad      	asrs	r5, r5, #2
   bc710:	4368      	muls	r0, r5
   bc712:	b003      	add	sp, #12
   bc714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc718:	cccccccd 	.word	0xcccccccd

000bc71c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc71c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bc71e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bc720:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bc722:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bc724:	b303      	cbz	r3, bc768 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bc726:	b1f9      	cbz	r1, bc768 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bc728:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bc72a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bc72e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bc730:	a903      	add	r1, sp, #12
   bc732:	a801      	add	r0, sp, #4
   bc734:	f7ff ff21 	bl	bc57a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bc738:	4601      	mov	r1, r0
   bc73a:	b1a8      	cbz	r0, bc768 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bc73c:	f10d 030b 	add.w	r3, sp, #11
   bc740:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bc742:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bc746:	4620      	mov	r0, r4
   bc748:	f7ff ffac 	bl	bc6a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bc74c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bc750:	b153      	cbz	r3, bc768 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bc752:	6823      	ldr	r3, [r4, #0]
   bc754:	2414      	movs	r4, #20
   bc756:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bc75a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bc75c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bc760:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bc762:	bfa8      	it	ge
   bc764:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bc766:	e7e3      	b.n	bc730 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bc768:	4628      	mov	r0, r5
   bc76a:	b004      	add	sp, #16
   bc76c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc770 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bc770:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bc772:	4c09      	ldr	r4, [pc, #36]	; (bc798 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bc774:	7823      	ldrb	r3, [r4, #0]
   bc776:	f3bf 8f5b 	dmb	ish
   bc77a:	07db      	lsls	r3, r3, #31
   bc77c:	d409      	bmi.n	bc792 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc77e:	4620      	mov	r0, r4
   bc780:	f7f7 fc9c 	bl	b40bc <__cxa_guard_acquire>
   bc784:	b128      	cbz	r0, bc792 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bc786:	4620      	mov	r0, r4
   bc788:	f7f7 fc9d 	bl	b40c6 <__cxa_guard_release>
   bc78c:	4803      	ldr	r0, [pc, #12]	; (bc79c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bc78e:	f002 fd55 	bl	bf23c <atexit>
}
   bc792:	4803      	ldr	r0, [pc, #12]	; (bc7a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bc794:	bd10      	pop	{r4, pc}
   bc796:	bf00      	nop
   bc798:	2003e64c 	.word	0x2003e64c
   bc79c:	000bc573 	.word	0x000bc573
   bc7a0:	2003de74 	.word	0x2003de74

000bc7a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bc7a4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bc7a6:	4c09      	ldr	r4, [pc, #36]	; (bc7cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bc7a8:	7823      	ldrb	r3, [r4, #0]
   bc7aa:	f3bf 8f5b 	dmb	ish
   bc7ae:	07db      	lsls	r3, r3, #31
   bc7b0:	d409      	bmi.n	bc7c6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc7b2:	4620      	mov	r0, r4
   bc7b4:	f7f7 fc82 	bl	b40bc <__cxa_guard_acquire>
   bc7b8:	b128      	cbz	r0, bc7c6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bc7ba:	4620      	mov	r0, r4
   bc7bc:	f7f7 fc83 	bl	b40c6 <__cxa_guard_release>
   bc7c0:	4803      	ldr	r0, [pc, #12]	; (bc7d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bc7c2:	f002 fd3b 	bl	bf23c <atexit>
    return &factory;
}
   bc7c6:	4803      	ldr	r0, [pc, #12]	; (bc7d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bc7c8:	bd10      	pop	{r4, pc}
   bc7ca:	bf00      	nop
   bc7cc:	2003e650 	.word	0x2003e650
   bc7d0:	000bc5db 	.word	0x000bc5db
   bc7d4:	2003de78 	.word	0x2003de78

000bc7d8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bc7d8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bc7da:	2500      	movs	r5, #0
   bc7dc:	4604      	mov	r4, r0
   bc7de:	e9c0 5500 	strd	r5, r5, [r0]
   bc7e2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bc7e6:	6085      	str	r5, [r0, #8]
   bc7e8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bc7ea:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bc7ee:	f7fe fa47 	bl	bac80 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bc7f2:	f7ff ffbd 	bl	bc770 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bc7f6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc7f8:	f7ff ffd4 	bl	bc7a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bc7fc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bc7fe:	6220      	str	r0, [r4, #32]
}
   bc800:	4620      	mov	r0, r4
   bc802:	bd38      	pop	{r3, r4, r5, pc}

000bc804 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bc804:	b510      	push	{r4, lr}
    static LogManager mgr;
   bc806:	4c0a      	ldr	r4, [pc, #40]	; (bc830 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bc808:	7823      	ldrb	r3, [r4, #0]
   bc80a:	f3bf 8f5b 	dmb	ish
   bc80e:	07db      	lsls	r3, r3, #31
   bc810:	d40c      	bmi.n	bc82c <_ZN5spark10LogManager8instanceEv+0x28>
   bc812:	4620      	mov	r0, r4
   bc814:	f7f7 fc52 	bl	b40bc <__cxa_guard_acquire>
   bc818:	b140      	cbz	r0, bc82c <_ZN5spark10LogManager8instanceEv+0x28>
   bc81a:	4806      	ldr	r0, [pc, #24]	; (bc834 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc81c:	f7ff ffdc 	bl	bc7d8 <_ZN5spark10LogManagerC1Ev>
   bc820:	4620      	mov	r0, r4
   bc822:	f7f7 fc50 	bl	b40c6 <__cxa_guard_release>
   bc826:	4804      	ldr	r0, [pc, #16]	; (bc838 <_ZN5spark10LogManager8instanceEv+0x34>)
   bc828:	f002 fd08 	bl	bf23c <atexit>
    return &mgr;
}
   bc82c:	4801      	ldr	r0, [pc, #4]	; (bc834 <_ZN5spark10LogManager8instanceEv+0x30>)
   bc82e:	bd10      	pop	{r4, pc}
   bc830:	2003e648 	.word	0x2003e648
   bc834:	2003e658 	.word	0x2003e658
   bc838:	000bccf1 	.word	0x000bccf1

000bc83c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bc83c:	4a02      	ldr	r2, [pc, #8]	; (bc848 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bc83e:	4903      	ldr	r1, [pc, #12]	; (bc84c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bc840:	4803      	ldr	r0, [pc, #12]	; (bc850 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bc842:	2300      	movs	r3, #0
   bc844:	f7fe bcb4 	b.w	bb1b0 <log_set_callbacks>
   bc848:	000bcad5 	.word	0x000bcad5
   bc84c:	000bca61 	.word	0x000bca61
   bc850:	000bc9e1 	.word	0x000bc9e1

000bc854 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bc854:	2300      	movs	r3, #0
   bc856:	461a      	mov	r2, r3
   bc858:	4619      	mov	r1, r3
   bc85a:	4618      	mov	r0, r3
   bc85c:	f7fe bca8 	b.w	bb1b0 <log_set_callbacks>

000bc860 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bc860:	b570      	push	{r4, r5, r6, lr}
   bc862:	b08a      	sub	sp, #40	; 0x28
   bc864:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bc866:	4601      	mov	r1, r0
   bc868:	a804      	add	r0, sp, #16
   bc86a:	f7fb fbe0 	bl	b802e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bc86e:	4e14      	ldr	r6, [pc, #80]	; (bc8c0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bc870:	a804      	add	r0, sp, #16
   bc872:	f7ff fd9b 	bl	bc3ac <_ZN5spark18JSONObjectIterator4nextEv>
   bc876:	b1e8      	cbz	r0, bc8b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bc878:	a904      	add	r1, sp, #16
   bc87a:	4668      	mov	r0, sp
   bc87c:	f7fb fbe8 	bl	b8050 <_ZNK5spark18JSONObjectIterator4nameEv>
   bc880:	9802      	ldr	r0, [sp, #8]
   bc882:	4631      	mov	r1, r6
   bc884:	f7ff fea2 	bl	bc5cc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bc888:	4604      	mov	r4, r0
   bc88a:	b110      	cbz	r0, bc892 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bc88c:	1e2c      	subs	r4, r5, #0
   bc88e:	bf18      	it	ne
   bc890:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   bc892:	a801      	add	r0, sp, #4
   bc894:	f7f9 fc66 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc898:	2c00      	cmp	r4, #0
   bc89a:	d0e9      	beq.n	bc870 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bc89c:	a904      	add	r1, sp, #16
   bc89e:	4668      	mov	r0, sp
   bc8a0:	f7fb fbe7 	bl	b8072 <_ZNK5spark18JSONObjectIterator5valueEv>
   bc8a4:	4668      	mov	r0, sp
   bc8a6:	f7ff fd24 	bl	bc2f2 <_ZNK5spark9JSONValue5toIntEv>
   bc8aa:	6028      	str	r0, [r5, #0]
   bc8ac:	a801      	add	r0, sp, #4
   bc8ae:	f7f9 fc59 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc8b2:	e7dd      	b.n	bc870 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bc8b4:	a805      	add	r0, sp, #20
   bc8b6:	f7f9 fc55 	bl	b6164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc8ba:	b00a      	add	sp, #40	; 0x28
   bc8bc:	bd70      	pop	{r4, r5, r6, pc}
   bc8be:	bf00      	nop
   bc8c0:	000c0efe 	.word	0x000c0efe

000bc8c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc8c6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bc8c8:	4620      	mov	r0, r4
   bc8ca:	4913      	ldr	r1, [pc, #76]	; (bc918 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bc8cc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bc8ce:	f002 fd94 	bl	bf3fa <strcmp>
   bc8d2:	b950      	cbnz	r0, bc8ea <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bc8d4:	f001 fda8 	bl	be428 <_Z16_fetch_usbserialv>
   bc8d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bc8dc:	f001 fd92 	bl	be404 <_ZN9USBSerial5beginEl>
}
   bc8e0:	b003      	add	sp, #12
   bc8e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bc8e6:	f001 bd9f 	b.w	be428 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bc8ea:	490c      	ldr	r1, [pc, #48]	; (bc91c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bc8ec:	4620      	mov	r0, r4
   bc8ee:	f002 fd84 	bl	bf3fa <strcmp>
   bc8f2:	b978      	cbnz	r0, bc914 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bc8f4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bc8f8:	a901      	add	r1, sp, #4
   bc8fa:	4628      	mov	r0, r5
        int baud = 9600;
   bc8fc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bc8fe:	f7ff ffaf 	bl	bc860 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bc902:	f001 ff8f 	bl	be824 <_Z22__fetch_global_Serial1v>
   bc906:	9901      	ldr	r1, [sp, #4]
   bc908:	f001 fd24 	bl	be354 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bc90c:	f001 ff8a 	bl	be824 <_Z22__fetch_global_Serial1v>
}
   bc910:	b003      	add	sp, #12
   bc912:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bc914:	2000      	movs	r0, #0
   bc916:	e7fb      	b.n	bc910 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bc918:	000c0f03 	.word	0x000c0f03
   bc91c:	000c0f0a 	.word	0x000c0f0a

000bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc920:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bc922:	e9d0 5300 	ldrd	r5, r3, [r0]
   bc926:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bc928:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bc92a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bc92e:	42ae      	cmp	r6, r5
   bc930:	d005      	beq.n	bc93e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bc932:	f105 0008 	add.w	r0, r5, #8
   bc936:	f7ff fff3 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc93a:	3514      	adds	r5, #20
   bc93c:	e7f7      	b.n	bc92e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bc93e:	6820      	ldr	r0, [r4, #0]
   bc940:	f7fe fd8a 	bl	bb458 <free>
}
   bc944:	4620      	mov	r0, r4
   bc946:	bd70      	pop	{r4, r5, r6, pc}

000bc948 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bc948:	b510      	push	{r4, lr}
   bc94a:	4604      	mov	r4, r0
   bc94c:	300c      	adds	r0, #12
   bc94e:	f7ff ffe7 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bc952:	4620      	mov	r0, r4
   bc954:	f7fe fe23 	bl	bb59e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bc958:	4620      	mov	r0, r4
   bc95a:	bd10      	pop	{r4, pc}

000bc95c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bc95c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bc95e:	4b04      	ldr	r3, [pc, #16]	; (bc970 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bc960:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bc962:	f840 3b04 	str.w	r3, [r0], #4
   bc966:	f7ff ffef 	bl	bc948 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bc96a:	4620      	mov	r0, r4
   bc96c:	bd10      	pop	{r4, pc}
   bc96e:	bf00      	nop
   bc970:	000c0360 	.word	0x000c0360

000bc974 <_ZN5spark16StreamLogHandlerD0Ev>:
   bc974:	b510      	push	{r4, lr}
   bc976:	4604      	mov	r4, r0
   bc978:	f7ff fff0 	bl	bc95c <_ZN5spark16StreamLogHandlerD1Ev>
   bc97c:	4620      	mov	r0, r4
   bc97e:	2124      	movs	r1, #36	; 0x24
   bc980:	f7f7 fb8d 	bl	b409e <_ZdlPvj>
   bc984:	4620      	mov	r0, r4
   bc986:	bd10      	pop	{r4, pc}

000bc988 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bc988:	b510      	push	{r4, lr}
   bc98a:	4b03      	ldr	r3, [pc, #12]	; (bc998 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bc98c:	6003      	str	r3, [r0, #0]
   bc98e:	4604      	mov	r4, r0
   bc990:	f7ff ffe4 	bl	bc95c <_ZN5spark16StreamLogHandlerD1Ev>
   bc994:	4620      	mov	r0, r4
   bc996:	bd10      	pop	{r4, pc}
   bc998:	000c0fa4 	.word	0x000c0fa4

000bc99c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bc99c:	b510      	push	{r4, lr}
   bc99e:	4604      	mov	r4, r0
   bc9a0:	f7ff fff2 	bl	bc988 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bc9a4:	4620      	mov	r0, r4
   bc9a6:	2124      	movs	r1, #36	; 0x24
   bc9a8:	f7f7 fb79 	bl	b409e <_ZdlPvj>
   bc9ac:	4620      	mov	r0, r4
   bc9ae:	bd10      	pop	{r4, pc}

000bc9b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bc9b0:	2200      	movs	r2, #0
   bc9b2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bc9b6:	b510      	push	{r4, lr}
        capacity_(0) {
   bc9b8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bc9ba:	680c      	ldr	r4, [r1, #0]
   bc9bc:	6004      	str	r4, [r0, #0]
   bc9be:	684c      	ldr	r4, [r1, #4]
   bc9c0:	6044      	str	r4, [r0, #4]
   bc9c2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9c4:	600a      	str	r2, [r1, #0]
   bc9c6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc9c8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9ca:	608a      	str	r2, [r1, #8]
}
   bc9cc:	bd10      	pop	{r4, pc}

000bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bc9ce:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc9d0:	6803      	ldr	r3, [r0, #0]
   bc9d2:	4604      	mov	r4, r0
   bc9d4:	6818      	ldr	r0, [r3, #0]
   bc9d6:	f7fe f96b 	bl	bacb0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bc9da:	4620      	mov	r0, r4
   bc9dc:	bd10      	pop	{r4, pc}
	...

000bc9e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bc9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc9e4:	b087      	sub	sp, #28
   bc9e6:	4680      	mov	r8, r0
   bc9e8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bc9ea:	4b1c      	ldr	r3, [pc, #112]	; (bca5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bc9ec:	685b      	ldr	r3, [r3, #4]
   bc9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bc9f2:	4689      	mov	r9, r1
   bc9f4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bc9f6:	b96b      	cbnz	r3, bca14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bc9f8:	f7ff ff04 	bl	bc804 <_ZN5spark10LogManager8instanceEv>
   bc9fc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bc9fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bca02:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bca04:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bca06:	f7ff fddf 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bca0a:	7b23      	ldrb	r3, [r4, #12]
   bca0c:	b12b      	cbz	r3, bca1a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bca0e:	a805      	add	r0, sp, #20
   bca10:	f7ff ffdd 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bca14:	b007      	add	sp, #28
   bca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bca1a:	2301      	movs	r3, #1
   bca1c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bca1e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bca22:	fa5f f989 	uxtb.w	r9, r9
   bca26:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bca2a:	45aa      	cmp	sl, r5
   bca2c:	d012      	beq.n	bca54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bca2e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bca32:	4631      	mov	r1, r6
   bca34:	1d38      	adds	r0, r7, #4
   bca36:	f7ff fe71 	bl	bc71c <_ZNK5spark6detail9LogFilter5levelEPKc>
   bca3a:	4581      	cmp	r9, r0
   bca3c:	d3f5      	bcc.n	bca2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bca3e:	683b      	ldr	r3, [r7, #0]
   bca40:	9a03      	ldr	r2, [sp, #12]
   bca42:	9200      	str	r2, [sp, #0]
   bca44:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bca48:	464a      	mov	r2, r9
   bca4a:	4633      	mov	r3, r6
   bca4c:	4641      	mov	r1, r8
   bca4e:	4638      	mov	r0, r7
   bca50:	47d8      	blx	fp
   bca52:	e7ea      	b.n	bca2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bca54:	2300      	movs	r3, #0
   bca56:	7323      	strb	r3, [r4, #12]
   bca58:	e7d9      	b.n	bca0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bca5a:	bf00      	nop
   bca5c:	e000ed00 	.word	0xe000ed00

000bca60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bca60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca64:	469b      	mov	fp, r3
   bca66:	4b1a      	ldr	r3, [pc, #104]	; (bcad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bca68:	685b      	ldr	r3, [r3, #4]
   bca6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bca6e:	4680      	mov	r8, r0
   bca70:	4689      	mov	r9, r1
   bca72:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bca74:	b96b      	cbnz	r3, bca92 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bca76:	f7ff fec5 	bl	bc804 <_ZN5spark10LogManager8instanceEv>
   bca7a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bca7c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bca80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bca82:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bca84:	f7ff fda0 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bca88:	7b23      	ldrb	r3, [r4, #12]
   bca8a:	b12b      	cbz	r3, bca98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bca8c:	a801      	add	r0, sp, #4
   bca8e:	f7ff ff9e 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bca92:	b003      	add	sp, #12
   bca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bca98:	2301      	movs	r3, #1
   bca9a:	7323      	strb	r3, [r4, #12]
   bca9c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bcaa0:	b2f6      	uxtb	r6, r6
   bcaa2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcaa6:	4555      	cmp	r5, sl
   bcaa8:	d00e      	beq.n	bcac8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bcaaa:	f855 7b04 	ldr.w	r7, [r5], #4
   bcaae:	4659      	mov	r1, fp
   bcab0:	1d38      	adds	r0, r7, #4
   bcab2:	f7ff fe33 	bl	bc71c <_ZNK5spark6detail9LogFilter5levelEPKc>
   bcab6:	4286      	cmp	r6, r0
   bcab8:	d3f5      	bcc.n	bcaa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bcaba:	683b      	ldr	r3, [r7, #0]
   bcabc:	464a      	mov	r2, r9
   bcabe:	68db      	ldr	r3, [r3, #12]
   bcac0:	4641      	mov	r1, r8
   bcac2:	4638      	mov	r0, r7
   bcac4:	4798      	blx	r3
   bcac6:	e7ee      	b.n	bcaa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bcac8:	2300      	movs	r3, #0
   bcaca:	7323      	strb	r3, [r4, #12]
   bcacc:	e7de      	b.n	bca8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bcace:	bf00      	nop
   bcad0:	e000ed00 	.word	0xe000ed00

000bcad4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bcad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcad8:	4b16      	ldr	r3, [pc, #88]	; (bcb34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bcada:	685b      	ldr	r3, [r3, #4]
   bcadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bcae0:	4605      	mov	r5, r0
   bcae2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bcae4:	bb1b      	cbnz	r3, bcb2e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bcae6:	f7ff fe8d 	bl	bc804 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bcaea:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bcaee:	4604      	mov	r4, r0
   bcaf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcaf2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bcaf4:	f7ff fd68 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
   bcaf8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bcafc:	2446      	movs	r4, #70	; 0x46
   bcafe:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bcb02:	45b0      	cmp	r8, r6
   bcb04:	d109      	bne.n	bcb1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bcb06:	a801      	add	r0, sp, #4
   bcb08:	f7ff ff61 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bcb0c:	42a5      	cmp	r5, r4
   bcb0e:	bfb4      	ite	lt
   bcb10:	2000      	movlt	r0, #0
   bcb12:	2001      	movge	r0, #1
}
   bcb14:	b002      	add	sp, #8
   bcb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bcb1a:	f856 0b04 	ldr.w	r0, [r6], #4
   bcb1e:	4639      	mov	r1, r7
   bcb20:	3004      	adds	r0, #4
   bcb22:	f7ff fdfb 	bl	bc71c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bcb26:	4284      	cmp	r4, r0
   bcb28:	bfa8      	it	ge
   bcb2a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bcb2c:	e7e9      	b.n	bcb02 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bcb2e:	2000      	movs	r0, #0
   bcb30:	e7f0      	b.n	bcb14 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bcb32:	bf00      	nop
   bcb34:	e000ed00 	.word	0xe000ed00

000bcb38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcb3a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bcb3e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bcb40:	4604      	mov	r4, r0
   bcb42:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcb44:	db0d      	blt.n	bcb62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bcb46:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bcb48:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bcb4a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bcb4c:	dd04      	ble.n	bcb58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bcb4e:	00b9      	lsls	r1, r7, #2
   bcb50:	f7fe fc8a 	bl	bb468 <realloc>
            if (!d) {
   bcb54:	b918      	cbnz	r0, bcb5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bcb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bcb58:	f7fe fc7e 	bl	bb458 <free>
        T* d = nullptr;
   bcb5c:	2000      	movs	r0, #0
        data_ = d;
   bcb5e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bcb60:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bcb62:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bcb64:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bcb66:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bcb6a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bcb6c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bcb70:	1d08      	adds	r0, r1, #4
   bcb72:	f002 fb9d 	bl	bf2b0 <memmove>
    new(p) T(std::move(value));
   bcb76:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bcb7a:	6863      	ldr	r3, [r4, #4]
   bcb7c:	3301      	adds	r3, #1
   bcb7e:	6063      	str	r3, [r4, #4]
    return true;
   bcb80:	2001      	movs	r0, #1
   bcb82:	e7e8      	b.n	bcb56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bcb84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bcb86:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bcb8a:	4604      	mov	r4, r0
   bcb8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcb8e:	9301      	str	r3, [sp, #4]
   bcb90:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bcb92:	f7ff fd19 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bcb96:	e9d4 3200 	ldrd	r3, r2, [r4]
   bcb9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bcb9e:	4293      	cmp	r3, r2
   bcba0:	4619      	mov	r1, r3
   bcba2:	d00b      	beq.n	bcbbc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bcba4:	6809      	ldr	r1, [r1, #0]
   bcba6:	42a9      	cmp	r1, r5
   bcba8:	f103 0304 	add.w	r3, r3, #4
   bcbac:	d1f7      	bne.n	bcb9e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bcbae:	a801      	add	r0, sp, #4
   bcbb0:	f7ff ff0d 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bcbb4:	2500      	movs	r5, #0
}
   bcbb6:	4628      	mov	r0, r5
   bcbb8:	b003      	add	sp, #12
   bcbba:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bcbbc:	4629      	mov	r1, r5
   bcbbe:	4620      	mov	r0, r4
   bcbc0:	f7ff ffba 	bl	bcb38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bcbc4:	4605      	mov	r5, r0
   bcbc6:	2800      	cmp	r0, #0
   bcbc8:	d0f1      	beq.n	bcbae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bcbca:	6863      	ldr	r3, [r4, #4]
   bcbcc:	2b01      	cmp	r3, #1
   bcbce:	d101      	bne.n	bcbd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bcbd0:	f7ff fe34 	bl	bc83c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcbd4:	a801      	add	r0, sp, #4
   bcbd6:	f7ff fefa 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bcbda:	e7ec      	b.n	bcbb6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bcbdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bcbdc:	b570      	push	{r4, r5, r6, lr}
   bcbde:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bcbe0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bcbe4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bcbe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bcbea:	4282      	cmp	r2, r0
   bcbec:	d00f      	beq.n	bcc0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bcbee:	4601      	mov	r1, r0
            if (*p == value) {
   bcbf0:	681d      	ldr	r5, [r3, #0]
   bcbf2:	f851 6b04 	ldr.w	r6, [r1], #4
   bcbf6:	42ae      	cmp	r6, r5
   bcbf8:	d107      	bne.n	bcc0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bcbfa:	1a52      	subs	r2, r2, r1
   bcbfc:	f002 fb58 	bl	bf2b0 <memmove>
    --size_;
   bcc00:	6863      	ldr	r3, [r4, #4]
   bcc02:	3b01      	subs	r3, #1
   bcc04:	6063      	str	r3, [r4, #4]
    return true;
   bcc06:	2001      	movs	r0, #1
}
   bcc08:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bcc0a:	4608      	mov	r0, r1
   bcc0c:	e7ed      	b.n	bcbea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bcc0e:	2000      	movs	r0, #0
   bcc10:	e7fa      	b.n	bcc08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bcc12 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcc12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bcc14:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bcc18:	4604      	mov	r4, r0
   bcc1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bcc1c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bcc1e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bcc20:	f7ff fcd2 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bcc24:	a901      	add	r1, sp, #4
   bcc26:	4620      	mov	r0, r4
   bcc28:	f7ff ffd8 	bl	bcbdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bcc2c:	b118      	cbz	r0, bcc36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bcc2e:	6863      	ldr	r3, [r4, #4]
   bcc30:	b90b      	cbnz	r3, bcc36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bcc32:	f7ff fe0f 	bl	bc854 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcc36:	a803      	add	r0, sp, #12
   bcc38:	f7ff fec9 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bcc3c:	b004      	add	sp, #16
   bcc3e:	bd10      	pop	{r4, pc}

000bcc40 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bcc40:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bcc42:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bcc46:	2318      	movs	r3, #24
   bcc48:	4604      	mov	r4, r0
   bcc4a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bcc4e:	42ae      	cmp	r6, r5
   bcc50:	d015      	beq.n	bcc7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bcc52:	f105 0110 	add.w	r1, r5, #16
   bcc56:	4620      	mov	r0, r4
   bcc58:	f7ff ffc0 	bl	bcbdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bcc5c:	6863      	ldr	r3, [r4, #4]
   bcc5e:	b90b      	cbnz	r3, bcc64 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bcc60:	f7ff fdf8 	bl	bc854 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bcc64:	69e0      	ldr	r0, [r4, #28]
   bcc66:	6929      	ldr	r1, [r5, #16]
   bcc68:	6803      	ldr	r3, [r0, #0]
   bcc6a:	68db      	ldr	r3, [r3, #12]
   bcc6c:	4798      	blx	r3
        if (h.stream) {
   bcc6e:	6969      	ldr	r1, [r5, #20]
   bcc70:	b119      	cbz	r1, bcc7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bcc72:	6a20      	ldr	r0, [r4, #32]
   bcc74:	6803      	ldr	r3, [r0, #0]
   bcc76:	68db      	ldr	r3, [r3, #12]
   bcc78:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bcc7a:	3518      	adds	r5, #24
   bcc7c:	e7e7      	b.n	bcc4e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bcc7e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bcc82:	2618      	movs	r6, #24
   bcc84:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bcc88:	42ae      	cmp	r6, r5
   bcc8a:	d004      	beq.n	bcc96 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bcc8c:	4628      	mov	r0, r5
   bcc8e:	f000 ff45 	bl	bdb1c <_ZN6StringD1Ev>
   bcc92:	3518      	adds	r5, #24
   bcc94:	e7f8      	b.n	bcc88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bcc96:	2300      	movs	r3, #0
   bcc98:	6163      	str	r3, [r4, #20]
}
   bcc9a:	bd70      	pop	{r4, r5, r6, pc}

000bcc9c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bcc9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcc9e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bcca0:	f7ff fdd8 	bl	bc854 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bcca4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bcca8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bccaa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bccac:	f7ff fc8c 	bl	bc5c8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bccb0:	4620      	mov	r0, r4
   bccb2:	f7ff ffc5 	bl	bcc40 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bccb6:	a801      	add	r0, sp, #4
   bccb8:	f7ff fe89 	bl	bc9ce <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bccbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bccbe:	b108      	cbz	r0, bccc4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bccc0:	f7fd ffe6 	bl	bac90 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bccc4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bccc8:	2618      	movs	r6, #24
   bccca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bccce:	42ae      	cmp	r6, r5
   bccd0:	d004      	beq.n	bccdc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bccd2:	4628      	mov	r0, r5
   bccd4:	f000 ff22 	bl	bdb1c <_ZN6StringD1Ev>
   bccd8:	3518      	adds	r5, #24
   bccda:	e7f8      	b.n	bccce <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bccdc:	6920      	ldr	r0, [r4, #16]
   bccde:	f7fe fbbb 	bl	bb458 <free>
   bcce2:	6820      	ldr	r0, [r4, #0]
   bcce4:	f7fe fbb8 	bl	bb458 <free>
}
   bcce8:	4620      	mov	r0, r4
   bccea:	b002      	add	sp, #8
   bccec:	bd70      	pop	{r4, r5, r6, pc}
	...

000bccf0 <__tcf_2>:
    static LogManager mgr;
   bccf0:	4801      	ldr	r0, [pc, #4]	; (bccf8 <__tcf_2+0x8>)
   bccf2:	f7ff bfd3 	b.w	bcc9c <_ZN5spark10LogManagerD1Ev>
   bccf6:	bf00      	nop
   bccf8:	2003e658 	.word	0x2003e658

000bccfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bccfc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bccfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcd00:	4604      	mov	r4, r0
   bcd02:	460d      	mov	r5, r1
   bcd04:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bcd06:	d915      	bls.n	bcd34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bcd08:	4290      	cmp	r0, r2
   bcd0a:	d214      	bcs.n	bcd36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bcd0c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bcd10:	1a75      	subs	r5, r6, r1
   bcd12:	f1a1 0714 	sub.w	r7, r1, #20
   bcd16:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bcd18:	42b7      	cmp	r7, r6
   bcd1a:	d01a      	beq.n	bcd52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bcd1c:	b11c      	cbz	r4, bcd26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bcd1e:	4631      	mov	r1, r6
   bcd20:	4620      	mov	r0, r4
   bcd22:	f7ff fcab 	bl	bc67c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bcd26:	f106 0008 	add.w	r0, r6, #8
   bcd2a:	f7ff fdf9 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bcd2e:	3e14      	subs	r6, #20
   bcd30:	3c14      	subs	r4, #20
   bcd32:	e7f1      	b.n	bcd18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bcd34:	d00d      	beq.n	bcd52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bcd36:	42b5      	cmp	r5, r6
   bcd38:	d00b      	beq.n	bcd52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bcd3a:	b11c      	cbz	r4, bcd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bcd3c:	4629      	mov	r1, r5
   bcd3e:	4620      	mov	r0, r4
   bcd40:	f7ff fc9c 	bl	bc67c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bcd44:	f105 0008 	add.w	r0, r5, #8
   bcd48:	f7ff fdea 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bcd4c:	3514      	adds	r5, #20
   bcd4e:	3414      	adds	r4, #20
   bcd50:	e7f1      	b.n	bcd36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bcd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcd54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bcd54:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bcd56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcd58:	4604      	mov	r4, r0
   bcd5a:	460d      	mov	r5, r1
   bcd5c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bcd5e:	d914      	bls.n	bcd8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bcd60:	4290      	cmp	r0, r2
   bcd62:	d213      	bcs.n	bcd8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bcd64:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bcd68:	1a75      	subs	r5, r6, r1
   bcd6a:	f1a1 0710 	sub.w	r7, r1, #16
   bcd6e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bcd70:	42b7      	cmp	r7, r6
   bcd72:	d018      	beq.n	bcda6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bcd74:	b11c      	cbz	r4, bcd7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bcd76:	4631      	mov	r1, r6
   bcd78:	4620      	mov	r0, r4
   bcd7a:	f000 ff4b 	bl	bdc14 <_ZN6StringC1EOS_>
                end->~T();
   bcd7e:	4630      	mov	r0, r6
   bcd80:	f000 fecc 	bl	bdb1c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bcd84:	3e10      	subs	r6, #16
   bcd86:	3c10      	subs	r4, #16
   bcd88:	e7f2      	b.n	bcd70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bcd8a:	d00c      	beq.n	bcda6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bcd8c:	42b5      	cmp	r5, r6
   bcd8e:	d00a      	beq.n	bcda6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bcd90:	b11c      	cbz	r4, bcd9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bcd92:	4629      	mov	r1, r5
   bcd94:	4620      	mov	r0, r4
   bcd96:	f000 ff3d 	bl	bdc14 <_ZN6StringC1EOS_>
                p->~T();
   bcd9a:	4628      	mov	r0, r5
   bcd9c:	f000 febe 	bl	bdb1c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bcda0:	3510      	adds	r5, #16
   bcda2:	3410      	adds	r4, #16
   bcda4:	e7f2      	b.n	bcd8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bcda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcda8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bcda8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bcdaa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bcdac:	4605      	mov	r5, r0
        if (n > 0) {
   bcdae:	dd11      	ble.n	bcdd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bcdb0:	0130      	lsls	r0, r6, #4
   bcdb2:	f7fe fb49 	bl	bb448 <malloc>
            if (!d) {
   bcdb6:	4604      	mov	r4, r0
   bcdb8:	b158      	cbz	r0, bcdd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bcdba:	e9d5 1200 	ldrd	r1, r2, [r5]
   bcdbe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bcdc2:	f7ff ffc7 	bl	bcd54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bcdc6:	6828      	ldr	r0, [r5, #0]
   bcdc8:	f7fe fb46 	bl	bb458 <free>
        data_ = d;
   bcdcc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bcdce:	60ae      	str	r6, [r5, #8]
        return true;
   bcdd0:	2001      	movs	r0, #1
    }
   bcdd2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bcdd4:	2400      	movs	r4, #0
   bcdd6:	e7f6      	b.n	bcdc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bcdd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcddc:	4690      	mov	r8, r2
   bcdde:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bcde0:	2300      	movs	r3, #0
   bcde2:	9103      	str	r1, [sp, #12]
    return size_;
   bcde4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bcde8:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bcdea:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bcdec:	4299      	cmp	r1, r3
        capacity_(0) {
   bcdee:	e9c0 3300 	strd	r3, r3, [r0]
   bcdf2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bcdf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bcdfa:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bcdfe:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bce00:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bce02:	dc23      	bgt.n	bce4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bce04:	e9d8 5700 	ldrd	r5, r7, [r8]
   bce08:	2314      	movs	r3, #20
   bce0a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bce0e:	42af      	cmp	r7, r5
   bce10:	d03b      	beq.n	bce8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bce12:	4629      	mov	r1, r5
   bce14:	a80b      	add	r0, sp, #44	; 0x2c
   bce16:	f000 fefd 	bl	bdc14 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bce1a:	a90b      	add	r1, sp, #44	; 0x2c
   bce1c:	a80f      	add	r0, sp, #60	; 0x3c
   bce1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bce20:	f000 fef8 	bl	bdc14 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bce24:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bce28:	4299      	cmp	r1, r3
   bce2a:	da1b      	bge.n	bce64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bce2c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bce2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bce30:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bce34:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bce38:	4631      	mov	r1, r6
   bce3a:	f106 0010 	add.w	r0, r6, #16
   bce3e:	f7ff ff89 	bl	bcd54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bce42:	b9ee      	cbnz	r6, bce80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bce44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bce46:	3301      	adds	r3, #1
   bce48:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bce4a:	e011      	b.n	bce70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bce4c:	a808      	add	r0, sp, #32
   bce4e:	f7ff ffab 	bl	bcda8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bce52:	2800      	cmp	r0, #0
   bce54:	d1d6      	bne.n	bce04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bce56:	a808      	add	r0, sp, #32
   bce58:	f7fe fba1 	bl	bb59e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bce5c:	4620      	mov	r0, r4
   bce5e:	b015      	add	sp, #84	; 0x54
   bce60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bce64:	3101      	adds	r1, #1
   bce66:	a808      	add	r0, sp, #32
   bce68:	f7ff ff9e 	bl	bcda8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bce6c:	2800      	cmp	r0, #0
   bce6e:	d1dd      	bne.n	bce2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bce70:	a80f      	add	r0, sp, #60	; 0x3c
   bce72:	f000 fe53 	bl	bdb1c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bce76:	a80b      	add	r0, sp, #44	; 0x2c
   bce78:	f000 fe50 	bl	bdb1c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bce7c:	3514      	adds	r5, #20
   bce7e:	e7c6      	b.n	bce0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bce80:	a90f      	add	r1, sp, #60	; 0x3c
   bce82:	4630      	mov	r0, r6
   bce84:	f000 fec6 	bl	bdc14 <_ZN6StringC1EOS_>
   bce88:	e7dc      	b.n	bce44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bce8a:	2600      	movs	r6, #0
   bce8c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bce90:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bce92:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bce96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bce9a:	429e      	cmp	r6, r3
   bce9c:	da7c      	bge.n	bcf98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bce9e:	0133      	lsls	r3, r6, #4
   bcea0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bcea2:	9306      	str	r3, [sp, #24]
        if (!category) {
   bcea4:	b90b      	cbnz	r3, bceaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bcea6:	3601      	adds	r6, #1
   bcea8:	e7f5      	b.n	bce96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bceaa:	2300      	movs	r3, #0
   bceac:	9307      	str	r3, [sp, #28]
   bceae:	fb09 f306 	mul.w	r3, r9, r6
   bceb2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bceb4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bceb6:	a907      	add	r1, sp, #28
   bceb8:	a806      	add	r0, sp, #24
   bceba:	f7ff fb5e 	bl	bc57a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bcebe:	4682      	mov	sl, r0
   bcec0:	2800      	cmp	r0, #0
   bcec2:	d0f0      	beq.n	bcea6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bcec4:	f04f 0300 	mov.w	r3, #0
   bcec8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bcecc:	4601      	mov	r1, r0
   bcece:	9a07      	ldr	r2, [sp, #28]
   bced0:	f10d 0317 	add.w	r3, sp, #23
   bced4:	4628      	mov	r0, r5
   bced6:	f7ff fbe5 	bl	bc6a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bceda:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bcede:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcee0:	2f00      	cmp	r7, #0
   bcee2:	d14a      	bne.n	bcf7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bcee4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bcee8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bceec:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bcef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bcef4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bcef8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bcefc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcefe:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bcf02:	4293      	cmp	r3, r2
   bcf04:	db17      	blt.n	bcf36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bcf06:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bcf0a:	f1ba 0f00 	cmp.w	sl, #0
   bcf0e:	dd30      	ble.n	bcf72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bcf10:	fb09 f00a 	mul.w	r0, r9, sl
   bcf14:	f7fe fa98 	bl	bb448 <malloc>
            if (!d) {
   bcf18:	4683      	mov	fp, r0
   bcf1a:	b360      	cbz	r0, bcf76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bcf1c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bcf20:	fb09 1202 	mla	r2, r9, r2, r1
   bcf24:	f7ff feea 	bl	bccfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bcf28:	6828      	ldr	r0, [r5, #0]
   bcf2a:	f7fe fa95 	bl	bb458 <free>
        data_ = d;
   bcf2e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bcf32:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bcf36:	682b      	ldr	r3, [r5, #0]
   bcf38:	9a01      	ldr	r2, [sp, #4]
   bcf3a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bcf3e:	686a      	ldr	r2, [r5, #4]
   bcf40:	4651      	mov	r1, sl
   bcf42:	fb09 3202 	mla	r2, r9, r2, r3
   bcf46:	f10a 0014 	add.w	r0, sl, #20
   bcf4a:	f7ff fed7 	bl	bccfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bcf4e:	f1ba 0f00 	cmp.w	sl, #0
   bcf52:	d003      	beq.n	bcf5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bcf54:	a90f      	add	r1, sp, #60	; 0x3c
   bcf56:	4650      	mov	r0, sl
   bcf58:	f7ff fb90 	bl	bc67c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bcf5c:	686b      	ldr	r3, [r5, #4]
   bcf5e:	3301      	adds	r3, #1
   bcf60:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bcf62:	a811      	add	r0, sp, #68	; 0x44
   bcf64:	f7ff fcdc 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcf68:	b13f      	cbz	r7, bcf7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bcf6a:	a80b      	add	r0, sp, #44	; 0x2c
   bcf6c:	f7ff fcd8 	bl	bc920 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bcf70:	e771      	b.n	bce56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bcf72:	46bb      	mov	fp, r7
   bcf74:	e7d8      	b.n	bcf28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bcf76:	2701      	movs	r7, #1
   bcf78:	e7f3      	b.n	bcf62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bcf7a:	9b01      	ldr	r3, [sp, #4]
   bcf7c:	682d      	ldr	r5, [r5, #0]
   bcf7e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bcf82:	9b06      	ldr	r3, [sp, #24]
   bcf84:	781b      	ldrb	r3, [r3, #0]
   bcf86:	b92b      	cbnz	r3, bcf94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bcf88:	f8d8 3000 	ldr.w	r3, [r8]
   bcf8c:	9a02      	ldr	r2, [sp, #8]
   bcf8e:	4413      	add	r3, r2
   bcf90:	7c1b      	ldrb	r3, [r3, #16]
   bcf92:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bcf94:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bcf96:	e78e      	b.n	bceb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf98:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bcf9a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcf9c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcf9e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcfa0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcfa2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bcfa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bcfa6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcfa8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bcfaa:	60a2      	str	r2, [r4, #8]
   bcfac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bcfae:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcfb0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcfb2:	60e2      	str	r2, [r4, #12]
   bcfb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bcfb6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcfb8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcfba:	6122      	str	r2, [r4, #16]
   bcfbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bcfbe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bcfc0:	9b03      	ldr	r3, [sp, #12]
   bcfc2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bcfc4:	6162      	str	r2, [r4, #20]
   bcfc6:	7623      	strb	r3, [r4, #24]
   bcfc8:	e7cf      	b.n	bcf6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bcfcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bcfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcfce:	4604      	mov	r4, r0
   bcfd0:	b087      	sub	sp, #28
   bcfd2:	460d      	mov	r5, r1
        filter_(level, filters) {
   bcfd4:	4626      	mov	r6, r4
        stream_(&stream) {
   bcfd6:	4619      	mov	r1, r3
   bcfd8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bcfda:	4617      	mov	r7, r2
        stream_(&stream) {
   bcfdc:	f7f9 fa19 	bl	b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bcfe0:	4b0b      	ldr	r3, [pc, #44]	; (bd010 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bcfe2:	f846 3b04 	str.w	r3, [r6], #4
   bcfe6:	4669      	mov	r1, sp
   bcfe8:	a803      	add	r0, sp, #12
   bcfea:	f7f9 fa12 	bl	b6412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bcfee:	aa03      	add	r2, sp, #12
   bcff0:	4639      	mov	r1, r7
   bcff2:	4630      	mov	r0, r6
   bcff4:	f7ff fef0 	bl	bcdd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bcff8:	a803      	add	r0, sp, #12
   bcffa:	f7f9 f9c9 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bcffe:	4668      	mov	r0, sp
   bd000:	f7f9 f9c6 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd004:	4b03      	ldr	r3, [pc, #12]	; (bd014 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bd006:	6023      	str	r3, [r4, #0]
}
   bd008:	4620      	mov	r0, r4
        stream_(&stream) {
   bd00a:	6225      	str	r5, [r4, #32]
}
   bd00c:	b007      	add	sp, #28
   bd00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bd010:	000c0360 	.word	0x000c0360
   bd014:	000c0f8c 	.word	0x000c0f8c

000bd018 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bd018:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd01a:	460f      	mov	r7, r1
   bd01c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd01e:	491d      	ldr	r1, [pc, #116]	; (bd094 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bd020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd022:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bd024:	4616      	mov	r6, r2
   bd026:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bd028:	f002 f9e7 	bl	bf3fa <strcmp>
   bd02c:	b9c0      	cbnz	r0, bd060 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bd02e:	b1a4      	cbz	r4, bd05a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bd030:	4629      	mov	r1, r5
   bd032:	a801      	add	r0, sp, #4
   bd034:	f7ff fcbc 	bl	bc9b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd038:	4917      	ldr	r1, [pc, #92]	; (bd098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd03a:	2024      	movs	r0, #36	; 0x24
   bd03c:	f001 fc16 	bl	be86c <_ZnwjRKSt9nothrow_t>
   bd040:	4605      	mov	r5, r0
   bd042:	b130      	cbz	r0, bd052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bd044:	ab01      	add	r3, sp, #4
   bd046:	4632      	mov	r2, r6
   bd048:	4621      	mov	r1, r4
   bd04a:	f7ff ffbf 	bl	bcfcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd04e:	4b13      	ldr	r3, [pc, #76]	; (bd09c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bd050:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd052:	a801      	add	r0, sp, #4
   bd054:	f7f9 f99c 	bl	b6390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bd058:	462c      	mov	r4, r5
}
   bd05a:	4620      	mov	r0, r4
   bd05c:	b005      	add	sp, #20
   bd05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bd060:	490f      	ldr	r1, [pc, #60]	; (bd0a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bd062:	4638      	mov	r0, r7
   bd064:	f002 f9c9 	bl	bf3fa <strcmp>
   bd068:	b990      	cbnz	r0, bd090 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bd06a:	2c00      	cmp	r4, #0
   bd06c:	d0f5      	beq.n	bd05a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bd06e:	4629      	mov	r1, r5
   bd070:	a801      	add	r0, sp, #4
   bd072:	f7ff fc9d 	bl	bc9b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bd076:	4908      	ldr	r1, [pc, #32]	; (bd098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bd078:	2024      	movs	r0, #36	; 0x24
   bd07a:	f001 fbf7 	bl	be86c <_ZnwjRKSt9nothrow_t>
   bd07e:	4605      	mov	r5, r0
   bd080:	2800      	cmp	r0, #0
   bd082:	d0e6      	beq.n	bd052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bd084:	ab01      	add	r3, sp, #4
   bd086:	4632      	mov	r2, r6
   bd088:	4621      	mov	r1, r4
   bd08a:	f7ff ff9f 	bl	bcfcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bd08e:	e7e0      	b.n	bd052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bd090:	2400      	movs	r4, #0
   bd092:	e7e2      	b.n	bd05a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bd094:	000c0f12 	.word	0x000c0f12
   bd098:	000c10e0 	.word	0x000c10e0
   bd09c:	000c0fa4 	.word	0x000c0fa4
   bd0a0:	000c0f16 	.word	0x000c0f16

000bd0a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bd0a4:	4b01      	ldr	r3, [pc, #4]	; (bd0ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd0a6:	4a02      	ldr	r2, [pc, #8]	; (bd0b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd0a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd0aa:	4770      	bx	lr
   bd0ac:	2003e654 	.word	0x2003e654
   bd0b0:	000c0f27 	.word	0x000c0f27

000bd0b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd0b8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bd0ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd0be:	4604      	mov	r4, r0
   bd0c0:	460e      	mov	r6, r1
   bd0c2:	4617      	mov	r7, r2
   bd0c4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bd0c6:	f001 f9af 	bl	be428 <_Z16_fetch_usbserialv>
   bd0ca:	4581      	cmp	r9, r0
   bd0cc:	d04c      	beq.n	bd168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bd0ce:	792b      	ldrb	r3, [r5, #4]
   bd0d0:	0719      	lsls	r1, r3, #28
   bd0d2:	d504      	bpl.n	bd0de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bd0d4:	696a      	ldr	r2, [r5, #20]
   bd0d6:	4954      	ldr	r1, [pc, #336]	; (bd228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bd0d8:	4620      	mov	r0, r4
   bd0da:	f7ff fac0 	bl	bc65e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bd0de:	f1b8 0f00 	cmp.w	r8, #0
   bd0e2:	d00d      	beq.n	bd100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bd0e4:	215b      	movs	r1, #91	; 0x5b
   bd0e6:	4620      	mov	r0, r4
   bd0e8:	f7ff faad 	bl	bc646 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bd0ec:	4641      	mov	r1, r8
   bd0ee:	4620      	mov	r0, r4
   bd0f0:	f7ff fa9a 	bl	bc628 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bd0f4:	6823      	ldr	r3, [r4, #0]
   bd0f6:	494d      	ldr	r1, [pc, #308]	; (bd22c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bd0f8:	68db      	ldr	r3, [r3, #12]
   bd0fa:	2202      	movs	r2, #2
   bd0fc:	4620      	mov	r0, r4
   bd0fe:	4798      	blx	r3
    if (attr.has_file) {
   bd100:	792b      	ldrb	r3, [r5, #4]
   bd102:	07da      	lsls	r2, r3, #31
   bd104:	d523      	bpl.n	bd14e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bd106:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bd10a:	212f      	movs	r1, #47	; 0x2f
   bd10c:	4640      	mov	r0, r8
   bd10e:	f002 f9d3 	bl	bf4b8 <strrchr>
    if (s1) {
   bd112:	b108      	cbz	r0, bd118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bd114:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bd118:	4641      	mov	r1, r8
   bd11a:	4620      	mov	r0, r4
   bd11c:	f7ff fa84 	bl	bc628 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bd120:	792b      	ldrb	r3, [r5, #4]
   bd122:	079b      	lsls	r3, r3, #30
   bd124:	d508      	bpl.n	bd138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bd126:	213a      	movs	r1, #58	; 0x3a
   bd128:	4620      	mov	r0, r4
   bd12a:	f7ff fa8c 	bl	bc646 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bd12e:	68ea      	ldr	r2, [r5, #12]
   bd130:	493f      	ldr	r1, [pc, #252]	; (bd230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bd132:	4620      	mov	r0, r4
   bd134:	f7ff fa93 	bl	bc65e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bd138:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bd13a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bd13c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bd140:	68db      	ldr	r3, [r3, #12]
   bd142:	bf14      	ite	ne
   bd144:	493b      	ldrne	r1, [pc, #236]	; (bd234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bd146:	493c      	ldreq	r1, [pc, #240]	; (bd238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bd148:	2202      	movs	r2, #2
            write(": ", 2);
   bd14a:	4620      	mov	r0, r4
   bd14c:	4798      	blx	r3
    if (attr.has_function) {
   bd14e:	792b      	ldrb	r3, [r5, #4]
   bd150:	0758      	lsls	r0, r3, #29
   bd152:	d51d      	bpl.n	bd190 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd154:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd156:	460b      	mov	r3, r1
   bd158:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bd15a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd15e:	b160      	cbz	r0, bd17a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bd160:	2820      	cmp	r0, #32
   bd162:	d108      	bne.n	bd176 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bd164:	4619      	mov	r1, r3
   bd166:	e7f7      	b.n	bd158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bd168:	4834      	ldr	r0, [pc, #208]	; (bd23c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bd16a:	f000 f966 	bl	bd43a <_ZN5spark12NetworkClass9listeningEv>
   bd16e:	2800      	cmp	r0, #0
   bd170:	d0ad      	beq.n	bd0ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bd172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bd176:	2828      	cmp	r0, #40	; 0x28
   bd178:	d1ee      	bne.n	bd158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bd17a:	6823      	ldr	r3, [r4, #0]
   bd17c:	1a52      	subs	r2, r2, r1
   bd17e:	68db      	ldr	r3, [r3, #12]
   bd180:	4620      	mov	r0, r4
   bd182:	4798      	blx	r3
        write("(): ", 4);
   bd184:	6823      	ldr	r3, [r4, #0]
   bd186:	492e      	ldr	r1, [pc, #184]	; (bd240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bd188:	68db      	ldr	r3, [r3, #12]
   bd18a:	2204      	movs	r2, #4
   bd18c:	4620      	mov	r0, r4
   bd18e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bd190:	2100      	movs	r1, #0
   bd192:	4638      	mov	r0, r7
   bd194:	f7fe f804 	bl	bb1a0 <log_level_name>
   bd198:	4601      	mov	r1, r0
    write(s);
   bd19a:	4620      	mov	r0, r4
   bd19c:	f7ff fa44 	bl	bc628 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bd1a0:	6823      	ldr	r3, [r4, #0]
   bd1a2:	4925      	ldr	r1, [pc, #148]	; (bd238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bd1a4:	68db      	ldr	r3, [r3, #12]
   bd1a6:	2202      	movs	r2, #2
   bd1a8:	4620      	mov	r0, r4
   bd1aa:	4798      	blx	r3
    if (msg) {
   bd1ac:	b11e      	cbz	r6, bd1b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bd1ae:	4631      	mov	r1, r6
   bd1b0:	4620      	mov	r0, r4
   bd1b2:	f7ff fa39 	bl	bc628 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bd1b6:	792b      	ldrb	r3, [r5, #4]
   bd1b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   bd1bc:	d02c      	beq.n	bd218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bd1be:	6823      	ldr	r3, [r4, #0]
   bd1c0:	4920      	ldr	r1, [pc, #128]	; (bd244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bd1c2:	68db      	ldr	r3, [r3, #12]
   bd1c4:	2202      	movs	r2, #2
   bd1c6:	4620      	mov	r0, r4
   bd1c8:	4798      	blx	r3
        if (attr.has_code) {
   bd1ca:	792b      	ldrb	r3, [r5, #4]
   bd1cc:	06d9      	lsls	r1, r3, #27
   bd1ce:	d50a      	bpl.n	bd1e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bd1d0:	6823      	ldr	r3, [r4, #0]
   bd1d2:	491d      	ldr	r1, [pc, #116]	; (bd248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bd1d4:	68db      	ldr	r3, [r3, #12]
   bd1d6:	2207      	movs	r2, #7
   bd1d8:	4620      	mov	r0, r4
   bd1da:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bd1dc:	69aa      	ldr	r2, [r5, #24]
   bd1de:	491b      	ldr	r1, [pc, #108]	; (bd24c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bd1e0:	4620      	mov	r0, r4
   bd1e2:	f7ff fa3c 	bl	bc65e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bd1e6:	792b      	ldrb	r3, [r5, #4]
   bd1e8:	069a      	lsls	r2, r3, #26
   bd1ea:	d511      	bpl.n	bd210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bd1ec:	06db      	lsls	r3, r3, #27
   bd1ee:	d505      	bpl.n	bd1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bd1f0:	6823      	ldr	r3, [r4, #0]
   bd1f2:	4910      	ldr	r1, [pc, #64]	; (bd234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bd1f4:	68db      	ldr	r3, [r3, #12]
   bd1f6:	2202      	movs	r2, #2
   bd1f8:	4620      	mov	r0, r4
   bd1fa:	4798      	blx	r3
            write("details = ", 10);
   bd1fc:	6823      	ldr	r3, [r4, #0]
   bd1fe:	4914      	ldr	r1, [pc, #80]	; (bd250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bd200:	68db      	ldr	r3, [r3, #12]
   bd202:	4620      	mov	r0, r4
   bd204:	220a      	movs	r2, #10
   bd206:	4798      	blx	r3
            write(attr.details);
   bd208:	69e9      	ldr	r1, [r5, #28]
   bd20a:	4620      	mov	r0, r4
   bd20c:	f7ff fa0c 	bl	bc628 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bd210:	215d      	movs	r1, #93	; 0x5d
   bd212:	4620      	mov	r0, r4
   bd214:	f7ff fa17 	bl	bc646 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bd218:	6823      	ldr	r3, [r4, #0]
   bd21a:	490e      	ldr	r1, [pc, #56]	; (bd254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bd21c:	68db      	ldr	r3, [r3, #12]
   bd21e:	4620      	mov	r0, r4
   bd220:	2202      	movs	r2, #2
}
   bd222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bd226:	4718      	bx	r3
   bd228:	000c0f2b 	.word	0x000c0f2b
   bd22c:	000c0f32 	.word	0x000c0f32
   bd230:	000c04a3 	.word	0x000c04a3
   bd234:	000c0f35 	.word	0x000c0f35
   bd238:	000c0f3a 	.word	0x000c0f3a
   bd23c:	2003e680 	.word	0x2003e680
   bd240:	000c0f38 	.word	0x000c0f38
   bd244:	000c0f3d 	.word	0x000c0f3d
   bd248:	000c0f40 	.word	0x000c0f40
   bd24c:	000c0f48 	.word	0x000c0f48
   bd250:	000c0f4b 	.word	0x000c0f4b
   bd254:	000c0f56 	.word	0x000c0f56

000bd258 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bd258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd25c:	b085      	sub	sp, #20
    return stream_;
   bd25e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bd262:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bd264:	4605      	mov	r5, r0
   bd266:	460f      	mov	r7, r1
   bd268:	4690      	mov	r8, r2
   bd26a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bd26c:	f001 f8dc 	bl	be428 <_Z16_fetch_usbserialv>
   bd270:	4581      	cmp	r9, r0
   bd272:	d105      	bne.n	bd280 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bd274:	4849      	ldr	r0, [pc, #292]	; (bd39c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bd276:	f000 f8e0 	bl	bd43a <_ZN5spark12NetworkClass9listeningEv>
   bd27a:	2800      	cmp	r0, #0
   bd27c:	f040 808a 	bne.w	bd394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bd280:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bd282:	4a47      	ldr	r2, [pc, #284]	; (bd3a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bd284:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bd286:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bd28a:	a801      	add	r0, sp, #4
        strm_(stream) {
   bd28c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bd28e:	f88d 9008 	strb.w	r9, [sp, #8]
   bd292:	f7ff f8b4 	bl	bc3fe <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bd296:	4649      	mov	r1, r9
   bd298:	4640      	mov	r0, r8
   bd29a:	f7fd ff81 	bl	bb1a0 <log_level_name>
    json.name("l", 1).value(s);
   bd29e:	4941      	ldr	r1, [pc, #260]	; (bd3a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bd2a0:	4680      	mov	r8, r0
   bd2a2:	2201      	movs	r2, #1
   bd2a4:	a801      	add	r0, sp, #4
   bd2a6:	f7ff f939 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd2aa:	4641      	mov	r1, r8
   bd2ac:	f7ff f9ae 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bd2b0:	b13f      	cbz	r7, bd2c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bd2b2:	493d      	ldr	r1, [pc, #244]	; (bd3a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bd2b4:	2201      	movs	r2, #1
   bd2b6:	a801      	add	r0, sp, #4
   bd2b8:	f7ff f930 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd2bc:	4639      	mov	r1, r7
   bd2be:	f7ff f9a5 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bd2c2:	b13e      	cbz	r6, bd2d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bd2c4:	4939      	ldr	r1, [pc, #228]	; (bd3ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bd2c6:	2201      	movs	r2, #1
   bd2c8:	a801      	add	r0, sp, #4
   bd2ca:	f7ff f927 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd2ce:	4631      	mov	r1, r6
   bd2d0:	f7ff f99c 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bd2d4:	7923      	ldrb	r3, [r4, #4]
   bd2d6:	07df      	lsls	r7, r3, #31
   bd2d8:	d50e      	bpl.n	bd2f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bd2da:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bd2dc:	212f      	movs	r1, #47	; 0x2f
   bd2de:	4630      	mov	r0, r6
   bd2e0:	f002 f8ea 	bl	bf4b8 <strrchr>
    if (s1) {
   bd2e4:	b100      	cbz	r0, bd2e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bd2e6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bd2e8:	4931      	ldr	r1, [pc, #196]	; (bd3b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bd2ea:	2201      	movs	r2, #1
   bd2ec:	a801      	add	r0, sp, #4
   bd2ee:	f7ff f915 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd2f2:	4631      	mov	r1, r6
   bd2f4:	f7ff f98a 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bd2f8:	7923      	ldrb	r3, [r4, #4]
   bd2fa:	079e      	lsls	r6, r3, #30
   bd2fc:	d507      	bpl.n	bd30e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bd2fe:	492d      	ldr	r1, [pc, #180]	; (bd3b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bd300:	2202      	movs	r2, #2
   bd302:	a801      	add	r0, sp, #4
   bd304:	f7ff f90a 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd308:	68e1      	ldr	r1, [r4, #12]
   bd30a:	f7ff f885 	bl	bc418 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bd30e:	7923      	ldrb	r3, [r4, #4]
   bd310:	0758      	lsls	r0, r3, #29
   bd312:	d514      	bpl.n	bd33e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bd314:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bd316:	4633      	mov	r3, r6
   bd318:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bd31a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd31e:	b12a      	cbz	r2, bd32c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bd320:	2a20      	cmp	r2, #32
   bd322:	d101      	bne.n	bd328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bd324:	461e      	mov	r6, r3
   bd326:	e7f7      	b.n	bd318 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bd328:	2a28      	cmp	r2, #40	; 0x28
   bd32a:	d1f5      	bne.n	bd318 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bd32c:	4922      	ldr	r1, [pc, #136]	; (bd3b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bd32e:	2202      	movs	r2, #2
   bd330:	a801      	add	r0, sp, #4
   bd332:	f7ff f8f3 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd336:	1bba      	subs	r2, r7, r6
   bd338:	4631      	mov	r1, r6
   bd33a:	f7ff f8ff 	bl	bc53c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bd33e:	7923      	ldrb	r3, [r4, #4]
   bd340:	0719      	lsls	r1, r3, #28
   bd342:	d507      	bpl.n	bd354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bd344:	491d      	ldr	r1, [pc, #116]	; (bd3bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bd346:	2201      	movs	r2, #1
   bd348:	a801      	add	r0, sp, #4
   bd34a:	f7ff f8e7 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd34e:	6961      	ldr	r1, [r4, #20]
   bd350:	f7ff f874 	bl	bc43c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bd354:	7923      	ldrb	r3, [r4, #4]
   bd356:	06da      	lsls	r2, r3, #27
   bd358:	d508      	bpl.n	bd36c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bd35a:	2204      	movs	r2, #4
   bd35c:	4918      	ldr	r1, [pc, #96]	; (bd3c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bd35e:	eb0d 0002 	add.w	r0, sp, r2
   bd362:	f7ff f8db 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd366:	69a1      	ldr	r1, [r4, #24]
   bd368:	f7ff f856 	bl	bc418 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bd36c:	7923      	ldrb	r3, [r4, #4]
   bd36e:	069b      	lsls	r3, r3, #26
   bd370:	d507      	bpl.n	bd382 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bd372:	4914      	ldr	r1, [pc, #80]	; (bd3c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bd374:	2206      	movs	r2, #6
   bd376:	a801      	add	r0, sp, #4
   bd378:	f7ff f8d0 	bl	bc51c <_ZN5spark10JSONWriter4nameEPKcj>
   bd37c:	69e1      	ldr	r1, [r4, #28]
   bd37e:	f7ff f945 	bl	bc60c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bd382:	a801      	add	r0, sp, #4
   bd384:	f7ff f825 	bl	bc3d2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bd388:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bd38a:	490f      	ldr	r1, [pc, #60]	; (bd3c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bd38c:	6803      	ldr	r3, [r0, #0]
   bd38e:	2202      	movs	r2, #2
   bd390:	68db      	ldr	r3, [r3, #12]
   bd392:	4798      	blx	r3
}
   bd394:	b005      	add	sp, #20
   bd396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd39a:	bf00      	nop
   bd39c:	2003e680 	.word	0x2003e680
   bd3a0:	000c0f74 	.word	0x000c0f74
   bd3a4:	000c0f08 	.word	0x000c0f08
   bd3a8:	000c0838 	.word	0x000c0838
   bd3ac:	000c1201 	.word	0x000c1201
   bd3b0:	000bfa1f 	.word	0x000bfa1f
   bd3b4:	000c0f59 	.word	0x000c0f59
   bd3b8:	000c0f5c 	.word	0x000c0f5c
   bd3bc:	000c0213 	.word	0x000c0213
   bd3c0:	000c0f5f 	.word	0x000c0f5f
   bd3c4:	000c0f64 	.word	0x000c0f64
   bd3c8:	000c0f56 	.word	0x000c0f56

000bd3cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd3cc:	2300      	movs	r3, #0
   bd3ce:	6840      	ldr	r0, [r0, #4]
   bd3d0:	461a      	mov	r2, r3
   bd3d2:	f7fd bfd9 	b.w	bb388 <network_connect>

000bd3d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd3d6:	6840      	ldr	r0, [r0, #4]
   bd3d8:	2200      	movs	r2, #0
   bd3da:	2102      	movs	r1, #2
   bd3dc:	f7fd bfe4 	b.w	bb3a8 <network_disconnect>

000bd3e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd3e0:	2200      	movs	r2, #0
   bd3e2:	6840      	ldr	r0, [r0, #4]
   bd3e4:	4611      	mov	r1, r2
   bd3e6:	f7fd bfd7 	b.w	bb398 <network_connecting>

000bd3ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd3ea:	2200      	movs	r2, #0
   bd3ec:	6840      	ldr	r0, [r0, #4]
   bd3ee:	4611      	mov	r1, r2
   bd3f0:	f7fd bfe2 	b.w	bb3b8 <network_ready>

000bd3f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd3f4:	2300      	movs	r3, #0
   bd3f6:	6840      	ldr	r0, [r0, #4]
   bd3f8:	461a      	mov	r2, r3
   bd3fa:	4619      	mov	r1, r3
   bd3fc:	f7fd bfe4 	b.w	bb3c8 <network_on>

000bd400 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd400:	2300      	movs	r3, #0
   bd402:	6840      	ldr	r0, [r0, #4]
   bd404:	461a      	mov	r2, r3
   bd406:	4619      	mov	r1, r3
   bd408:	f7fd bfe6 	b.w	bb3d8 <network_off>

000bd40c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd40c:	6840      	ldr	r0, [r0, #4]
   bd40e:	2100      	movs	r1, #0
   bd410:	f7fe b80a 	b.w	bb428 <network_is_on>

000bd414 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd414:	6840      	ldr	r0, [r0, #4]
   bd416:	2100      	movs	r1, #0
   bd418:	f7fe b80e 	b.w	bb438 <network_is_off>

000bd41c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd41c:	6840      	ldr	r0, [r0, #4]
   bd41e:	2200      	movs	r2, #0
   bd420:	f081 0101 	eor.w	r1, r1, #1
   bd424:	f7fd bfe0 	b.w	bb3e8 <network_listen>

000bd428 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd428:	6840      	ldr	r0, [r0, #4]
   bd42a:	2200      	movs	r2, #0
   bd42c:	f7fd bfec 	b.w	bb408 <network_set_listen_timeout>

000bd430 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd430:	2200      	movs	r2, #0
   bd432:	6840      	ldr	r0, [r0, #4]
   bd434:	4611      	mov	r1, r2
   bd436:	f7fd bfef 	b.w	bb418 <network_get_listen_timeout>

000bd43a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd43a:	2200      	movs	r2, #0
   bd43c:	6840      	ldr	r0, [r0, #4]
   bd43e:	4611      	mov	r1, r2
   bd440:	f7fd bfda 	b.w	bb3f8 <network_listening>

000bd444 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd448:	b095      	sub	sp, #84	; 0x54
   bd44a:	4614      	mov	r4, r2
   bd44c:	460d      	mov	r5, r1
   bd44e:	4607      	mov	r7, r0
    IPAddress addr;
   bd450:	f7fe fe6e 	bl	bc130 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd454:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd456:	221c      	movs	r2, #28
   bd458:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd45a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd45c:	f001 ff42 	bl	bf2e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd460:	2340      	movs	r3, #64	; 0x40
   bd462:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd464:	4620      	mov	r0, r4
   bd466:	466b      	mov	r3, sp
   bd468:	aa0c      	add	r2, sp, #48	; 0x30
   bd46a:	2100      	movs	r1, #0
   bd46c:	f7fd fd38 	bl	baee0 <netdb_getaddrinfo>
    if (!r) {
   bd470:	4604      	mov	r4, r0
   bd472:	2800      	cmp	r0, #0
   bd474:	d14b      	bne.n	bd50e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd476:	4602      	mov	r2, r0
   bd478:	2101      	movs	r1, #1
   bd47a:	6868      	ldr	r0, [r5, #4]
   bd47c:	f7fd ff9c 	bl	bb3b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd480:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd482:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd484:	4622      	mov	r2, r4
   bd486:	6868      	ldr	r0, [r5, #4]
   bd488:	f7fd ff96 	bl	bb3b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd48c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd48e:	4681      	mov	r9, r0
        bool ok = false;
   bd490:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd492:	2e00      	cmp	r6, #0
   bd494:	d03b      	beq.n	bd50e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd496:	2900      	cmp	r1, #0
   bd498:	d139      	bne.n	bd50e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd49a:	6873      	ldr	r3, [r6, #4]
   bd49c:	2b02      	cmp	r3, #2
   bd49e:	d003      	beq.n	bd4a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd4a0:	2b0a      	cmp	r3, #10
   bd4a2:	d011      	beq.n	bd4c8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd4a4:	69f6      	ldr	r6, [r6, #28]
   bd4a6:	e7f4      	b.n	bd492 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd4a8:	f1b8 0f00 	cmp.w	r8, #0
   bd4ac:	d0fa      	beq.n	bd4a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd4ae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd4b0:	a806      	add	r0, sp, #24
   bd4b2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd4b4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd4b6:	f7fe fe69 	bl	bc18c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd4ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd4bc:	1d3c      	adds	r4, r7, #4
   bd4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd4c0:	682b      	ldr	r3, [r5, #0]
   bd4c2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd4c4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd4c6:	e7ed      	b.n	bd4a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd4c8:	f1b9 0f00 	cmp.w	r9, #0
   bd4cc:	d0ea      	beq.n	bd4a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd4ce:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd4d0:	2210      	movs	r2, #16
   bd4d2:	a801      	add	r0, sp, #4
   bd4d4:	f001 ff06 	bl	bf2e4 <memset>
                    a.v = 6;
   bd4d8:	2306      	movs	r3, #6
   bd4da:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd4de:	ad01      	add	r5, sp, #4
   bd4e0:	f104 0308 	add.w	r3, r4, #8
   bd4e4:	3418      	adds	r4, #24
   bd4e6:	6818      	ldr	r0, [r3, #0]
   bd4e8:	6859      	ldr	r1, [r3, #4]
   bd4ea:	462a      	mov	r2, r5
   bd4ec:	c203      	stmia	r2!, {r0, r1}
   bd4ee:	3308      	adds	r3, #8
   bd4f0:	42a3      	cmp	r3, r4
   bd4f2:	4615      	mov	r5, r2
   bd4f4:	d1f7      	bne.n	bd4e6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd4f6:	a901      	add	r1, sp, #4
   bd4f8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd4fa:	ad07      	add	r5, sp, #28
   bd4fc:	f7fe fe26 	bl	bc14c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd502:	1d3c      	adds	r4, r7, #4
   bd504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd506:	682b      	ldr	r3, [r5, #0]
   bd508:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd50a:	4649      	mov	r1, r9
   bd50c:	e7ca      	b.n	bd4a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd50e:	9800      	ldr	r0, [sp, #0]
   bd510:	f7fd fcde 	bl	baed0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd514:	4638      	mov	r0, r7
   bd516:	b015      	add	sp, #84	; 0x54
   bd518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd51c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd51c:	4b02      	ldr	r3, [pc, #8]	; (bd528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd51e:	4a03      	ldr	r2, [pc, #12]	; (bd52c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd520:	601a      	str	r2, [r3, #0]
   bd522:	2200      	movs	r2, #0
   bd524:	605a      	str	r2, [r3, #4]

} // spark
   bd526:	4770      	bx	lr
   bd528:	2003e680 	.word	0x2003e680
   bd52c:	000c0fec 	.word	0x000c0fec

000bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bd530:	b508      	push	{r3, lr}
            return &Wire1;
   bd532:	f001 f937 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bd536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bd53a:	f7fe bd67 	b.w	bc00c <_ZN7TwoWire4lockEv>

000bd53e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bd53e:	b510      	push	{r4, lr}
   bd540:	4604      	mov	r4, r0
    lock_(_lock)
   bd542:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bd544:	b109      	cbz	r1, bd54a <_ZN4PMICC1Eb+0xc>
        lock();
   bd546:	f7ff fff3 	bl	bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bd54a:	4620      	mov	r0, r4
   bd54c:	bd10      	pop	{r4, pc}

000bd54e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bd54e:	b508      	push	{r3, lr}
            return &Wire1;
   bd550:	f001 f928 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bd554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bd558:	f7fe bd61 	b.w	bc01e <_ZN7TwoWire6unlockEv>

000bd55c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bd55c:	b510      	push	{r4, lr}
    if (lock_) {
   bd55e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bd560:	4604      	mov	r4, r0
    if (lock_) {
   bd562:	b10b      	cbz	r3, bd568 <_ZN4PMICD1Ev+0xc>
        unlock();
   bd564:	f7ff fff3 	bl	bd54e <_ZN4PMIC6unlockEv>
}
   bd568:	4620      	mov	r0, r4
   bd56a:	bd10      	pop	{r4, pc}

000bd56c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bd56c:	b510      	push	{r4, lr}
   bd56e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bd570:	6800      	ldr	r0, [r0, #0]
   bd572:	f7ff ffec 	bl	bd54e <_ZN4PMIC6unlockEv>
   bd576:	4620      	mov	r0, r4
   bd578:	bd10      	pop	{r4, pc}

000bd57a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bd57a:	b530      	push	{r4, r5, lr}
   bd57c:	b087      	sub	sp, #28
   bd57e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd580:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd582:	f7ff ffd5 	bl	bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd586:	226b      	movs	r2, #107	; 0x6b
   bd588:	2300      	movs	r3, #0
   bd58a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd58e:	2401      	movs	r4, #1
   bd590:	230a      	movs	r3, #10
   bd592:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bd596:	f001 f905 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd59a:	a902      	add	r1, sp, #8
   bd59c:	f7fe fd1a 	bl	bbfd4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd5a0:	f001 f900 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bd5a4:	6803      	ldr	r3, [r0, #0]
   bd5a6:	4629      	mov	r1, r5
   bd5a8:	689b      	ldr	r3, [r3, #8]
   bd5aa:	4798      	blx	r3
            return &Wire1;
   bd5ac:	f001 f8fa 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd5b0:	4621      	mov	r1, r4
   bd5b2:	f7fe fd27 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bd5b6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bd5b8:	f001 f8f4 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bd5bc:	a902      	add	r1, sp, #8
   bd5be:	f7fe fcd9 	bl	bbf74 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bd5c2:	f001 f8ef 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bd5c6:	6803      	ldr	r3, [r0, #0]
   bd5c8:	695b      	ldr	r3, [r3, #20]
   bd5ca:	4798      	blx	r3
   bd5cc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bd5ce:	a801      	add	r0, sp, #4
   bd5d0:	f7ff ffcc 	bl	bd56c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd5d4:	b2e0      	uxtb	r0, r4
   bd5d6:	b007      	add	sp, #28
   bd5d8:	bd30      	pop	{r4, r5, pc}

000bd5da <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bd5da:	b570      	push	{r4, r5, r6, lr}
   bd5dc:	b086      	sub	sp, #24
   bd5de:	460d      	mov	r5, r1
   bd5e0:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd5e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd5e4:	f7ff ffa4 	bl	bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd5e8:	226b      	movs	r2, #107	; 0x6b
   bd5ea:	2300      	movs	r3, #0
   bd5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bd5f0:	2601      	movs	r6, #1
   bd5f2:	230a      	movs	r3, #10
   bd5f4:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bd5f8:	f001 f8d4 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bd5fc:	a902      	add	r1, sp, #8
   bd5fe:	f7fe fce9 	bl	bbfd4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bd602:	f001 f8cf 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bd606:	6803      	ldr	r3, [r0, #0]
   bd608:	4629      	mov	r1, r5
   bd60a:	689b      	ldr	r3, [r3, #8]
   bd60c:	4798      	blx	r3
            return &Wire1;
   bd60e:	f001 f8c9 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bd612:	6803      	ldr	r3, [r0, #0]
   bd614:	4621      	mov	r1, r4
   bd616:	689b      	ldr	r3, [r3, #8]
   bd618:	4798      	blx	r3
            return &Wire1;
   bd61a:	f001 f8c3 	bl	be7a4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bd61e:	4631      	mov	r1, r6
   bd620:	f7fe fcf0 	bl	bc004 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bd624:	a801      	add	r0, sp, #4
   bd626:	f7ff ffa1 	bl	bd56c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd62a:	b006      	add	sp, #24
   bd62c:	bd70      	pop	{r4, r5, r6, pc}

000bd62e <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bd62e:	b513      	push	{r0, r1, r4, lr}
   bd630:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd632:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd634:	f7ff ff7c 	bl	bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd638:	2101      	movs	r1, #1
   bd63a:	4620      	mov	r0, r4
   bd63c:	f7ff ff9d 	bl	bd57a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bd640:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bd644:	2b10      	cmp	r3, #16
   bd646:	d007      	beq.n	bd658 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bd648:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bd64c:	f042 0210 	orr.w	r2, r2, #16
   bd650:	2101      	movs	r1, #1
   bd652:	4620      	mov	r0, r4
   bd654:	f7ff ffc1 	bl	bd5da <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd658:	a801      	add	r0, sp, #4
   bd65a:	f7ff ff87 	bl	bd56c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd65e:	2001      	movs	r0, #1
   bd660:	b002      	add	sp, #8
   bd662:	bd10      	pop	{r4, pc}

000bd664 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bd664:	b513      	push	{r0, r1, r4, lr}
   bd666:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bd668:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bd66a:	f7ff ff61 	bl	bd530 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bd66e:	2101      	movs	r1, #1
   bd670:	4620      	mov	r0, r4
   bd672:	f7ff ff82 	bl	bd57a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bd676:	f010 0f30 	tst.w	r0, #48	; 0x30
   bd67a:	d005      	beq.n	bd688 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bd67c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bd680:	2101      	movs	r1, #1
   bd682:	4620      	mov	r0, r4
   bd684:	f7ff ffa9 	bl	bd5da <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bd688:	a801      	add	r0, sp, #4
   bd68a:	f7ff ff6f 	bl	bd56c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bd68e:	2001      	movs	r0, #1
   bd690:	b002      	add	sp, #8
   bd692:	bd10      	pop	{r4, pc}

000bd694 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd696:	4606      	mov	r6, r0
   bd698:	460d      	mov	r5, r1
  size_t n = 0;
   bd69a:	188f      	adds	r7, r1, r2
   bd69c:	2400      	movs	r4, #0
  while (size--) {
   bd69e:	42bd      	cmp	r5, r7
   bd6a0:	d00c      	beq.n	bd6bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd6a2:	6833      	ldr	r3, [r6, #0]
   bd6a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd6a8:	689b      	ldr	r3, [r3, #8]
   bd6aa:	4630      	mov	r0, r6
   bd6ac:	4798      	blx	r3
     if (chunk>=0)
   bd6ae:	1e03      	subs	r3, r0, #0
   bd6b0:	db01      	blt.n	bd6b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd6b2:	441c      	add	r4, r3
  while (size--) {
   bd6b4:	e7f3      	b.n	bd69e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd6b6:	2c00      	cmp	r4, #0
   bd6b8:	bf08      	it	eq
   bd6ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd6bc:	4620      	mov	r0, r4
   bd6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd6c0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd6c0:	b513      	push	{r0, r1, r4, lr}
   bd6c2:	4604      	mov	r4, r0
    }
   bd6c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd6c6:	b159      	cbz	r1, bd6e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd6c8:	9101      	str	r1, [sp, #4]
   bd6ca:	f001 fec6 	bl	bf45a <strlen>
   bd6ce:	6823      	ldr	r3, [r4, #0]
   bd6d0:	9901      	ldr	r1, [sp, #4]
   bd6d2:	68db      	ldr	r3, [r3, #12]
   bd6d4:	4602      	mov	r2, r0
   bd6d6:	4620      	mov	r0, r4
    }
   bd6d8:	b002      	add	sp, #8
   bd6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd6de:	4718      	bx	r3
    }
   bd6e0:	b002      	add	sp, #8
   bd6e2:	bd10      	pop	{r4, pc}

000bd6e4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd6e4:	b508      	push	{r3, lr}
  return write(str);
   bd6e6:	f7ff ffeb 	bl	bd6c0 <_ZN5Print5writeEPKc>
}
   bd6ea:	bd08      	pop	{r3, pc}

000bd6ec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd6ec:	6803      	ldr	r3, [r0, #0]
   bd6ee:	689b      	ldr	r3, [r3, #8]
   bd6f0:	4718      	bx	r3

000bd6f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd6f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd6f4:	210d      	movs	r1, #13
{
   bd6f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd6f8:	f7ff fff8 	bl	bd6ec <_ZN5Print5printEc>
  n += print('\n');
   bd6fc:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd6fe:	4604      	mov	r4, r0
  n += print('\n');
   bd700:	4628      	mov	r0, r5
   bd702:	f7ff fff3 	bl	bd6ec <_ZN5Print5printEc>
  return n;
}
   bd706:	4420      	add	r0, r4
   bd708:	bd38      	pop	{r3, r4, r5, pc}

000bd70a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd70a:	b530      	push	{r4, r5, lr}
   bd70c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd70e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd710:	2a01      	cmp	r2, #1
  *str = '\0';
   bd712:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd716:	bf98      	it	ls
   bd718:	220a      	movls	r2, #10
   bd71a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd71c:	460d      	mov	r5, r1
   bd71e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd722:	fb01 5312 	mls	r3, r1, r2, r5
   bd726:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd72a:	2b09      	cmp	r3, #9
   bd72c:	bf94      	ite	ls
   bd72e:	3330      	addls	r3, #48	; 0x30
   bd730:	3337      	addhi	r3, #55	; 0x37
   bd732:	b2db      	uxtb	r3, r3
  } while(n);
   bd734:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd736:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd73a:	d9ef      	bls.n	bd71c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd73c:	4621      	mov	r1, r4
   bd73e:	f7ff ffbf 	bl	bd6c0 <_ZN5Print5writeEPKc>
}
   bd742:	b00b      	add	sp, #44	; 0x2c
   bd744:	bd30      	pop	{r4, r5, pc}
	...

000bd748 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bd748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd74c:	ec55 4b10 	vmov	r4, r5, d0
   bd750:	4606      	mov	r6, r0
   bd752:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bd754:	ee10 2a10 	vmov	r2, s0
   bd758:	ee10 0a10 	vmov	r0, s0
   bd75c:	462b      	mov	r3, r5
   bd75e:	4629      	mov	r1, r5
   bd760:	f001 fce8 	bl	bf134 <__aeabi_dcmpun>
   bd764:	b140      	cbz	r0, bd778 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bd766:	4953      	ldr	r1, [pc, #332]	; (bd8b4 <_ZN5Print10printFloatEdh+0x16c>)
   bd768:	4630      	mov	r0, r6
   bd76a:	f7ff ffa9 	bl	bd6c0 <_ZN5Print5writeEPKc>
   bd76e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bd770:	4650      	mov	r0, sl
   bd772:	b003      	add	sp, #12
   bd774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bd778:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bd77c:	4b4e      	ldr	r3, [pc, #312]	; (bd8b8 <_ZN5Print10printFloatEdh+0x170>)
   bd77e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd782:	4620      	mov	r0, r4
   bd784:	4649      	mov	r1, r9
   bd786:	f001 fcd5 	bl	bf134 <__aeabi_dcmpun>
   bd78a:	b948      	cbnz	r0, bd7a0 <_ZN5Print10printFloatEdh+0x58>
   bd78c:	4b4a      	ldr	r3, [pc, #296]	; (bd8b8 <_ZN5Print10printFloatEdh+0x170>)
   bd78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd792:	4620      	mov	r0, r4
   bd794:	4649      	mov	r1, r9
   bd796:	f001 fcaf 	bl	bf0f8 <__aeabi_dcmple>
   bd79a:	b908      	cbnz	r0, bd7a0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bd79c:	4947      	ldr	r1, [pc, #284]	; (bd8bc <_ZN5Print10printFloatEdh+0x174>)
   bd79e:	e7e3      	b.n	bd768 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bd7a0:	4b47      	ldr	r3, [pc, #284]	; (bd8c0 <_ZN5Print10printFloatEdh+0x178>)
   bd7a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd7a6:	4620      	mov	r0, r4
   bd7a8:	4629      	mov	r1, r5
   bd7aa:	f001 fcb9 	bl	bf120 <__aeabi_dcmpgt>
   bd7ae:	b108      	cbz	r0, bd7b4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bd7b0:	4944      	ldr	r1, [pc, #272]	; (bd8c4 <_ZN5Print10printFloatEdh+0x17c>)
   bd7b2:	e7d9      	b.n	bd768 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bd7b4:	4b44      	ldr	r3, [pc, #272]	; (bd8c8 <_ZN5Print10printFloatEdh+0x180>)
   bd7b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bd7ba:	4620      	mov	r0, r4
   bd7bc:	4629      	mov	r1, r5
   bd7be:	f001 fc91 	bl	bf0e4 <__aeabi_dcmplt>
   bd7c2:	2800      	cmp	r0, #0
   bd7c4:	d1f4      	bne.n	bd7b0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bd7c6:	2200      	movs	r2, #0
   bd7c8:	2300      	movs	r3, #0
   bd7ca:	4620      	mov	r0, r4
   bd7cc:	4629      	mov	r1, r5
   bd7ce:	f001 fc89 	bl	bf0e4 <__aeabi_dcmplt>
   bd7d2:	b1d0      	cbz	r0, bd80a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bd7d4:	212d      	movs	r1, #45	; 0x2d
   bd7d6:	4630      	mov	r0, r6
   bd7d8:	f7ff ff88 	bl	bd6ec <_ZN5Print5printEc>
     number = -number;
   bd7dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bd7e0:	4682      	mov	sl, r0
     number = -number;
   bd7e2:	461d      	mov	r5, r3
  double rounding = 0.5;
   bd7e4:	4939      	ldr	r1, [pc, #228]	; (bd8cc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bd7e6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd8d4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bd7ea:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bd7ee:	2000      	movs	r0, #0
    rounding /= 10.0;
   bd7f0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bd7f4:	fa5f f38b 	uxtb.w	r3, fp
   bd7f8:	429f      	cmp	r7, r3
   bd7fa:	d908      	bls.n	bd80e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bd7fc:	4642      	mov	r2, r8
   bd7fe:	464b      	mov	r3, r9
   bd800:	f001 fb28 	bl	bee54 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bd804:	f10b 0b01 	add.w	fp, fp, #1
   bd808:	e7f4      	b.n	bd7f4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bd80a:	4682      	mov	sl, r0
   bd80c:	e7ea      	b.n	bd7e4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bd80e:	4622      	mov	r2, r4
   bd810:	462b      	mov	r3, r5
   bd812:	f001 f83f 	bl	be894 <__adddf3>
   bd816:	460d      	mov	r5, r1
   bd818:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bd81a:	f001 fcc9 	bl	bf1b0 <__aeabi_d2uiz>
   bd81e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bd820:	f001 f974 	bl	beb0c <__aeabi_ui2d>
   bd824:	4602      	mov	r2, r0
   bd826:	460b      	mov	r3, r1
   bd828:	4620      	mov	r0, r4
   bd82a:	4629      	mov	r1, r5
   bd82c:	f001 f830 	bl	be890 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bd830:	220a      	movs	r2, #10
   bd832:	4604      	mov	r4, r0
   bd834:	460d      	mov	r5, r1
   bd836:	4630      	mov	r0, r6
   bd838:	4641      	mov	r1, r8
   bd83a:	f7ff ff66 	bl	bd70a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bd83e:	4482      	add	sl, r0
  if (digits > 0) {
   bd840:	2f00      	cmp	r7, #0
   bd842:	d095      	beq.n	bd770 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bd844:	4922      	ldr	r1, [pc, #136]	; (bd8d0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bd846:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd8d4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bd84a:	4630      	mov	r0, r6
   bd84c:	f7ff ff38 	bl	bd6c0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bd850:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bd854:	4482      	add	sl, r0
  while (digits-- > 0)
   bd856:	2f00      	cmp	r7, #0
   bd858:	d08a      	beq.n	bd770 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bd85a:	4642      	mov	r2, r8
   bd85c:	464b      	mov	r3, r9
   bd85e:	4620      	mov	r0, r4
   bd860:	4629      	mov	r1, r5
   bd862:	f001 f9cd 	bl	bec00 <__aeabi_dmul>
   bd866:	4604      	mov	r4, r0
   bd868:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bd86a:	f001 fc79 	bl	bf160 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bd86e:	f1b0 0b00 	subs.w	fp, r0, #0
   bd872:	da1c      	bge.n	bd8ae <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bd874:	212d      	movs	r1, #45	; 0x2d
   bd876:	4630      	mov	r0, r6
   bd878:	f7ff ff38 	bl	bd6ec <_ZN5Print5printEc>
            val = -n;
   bd87c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bd880:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bd882:	220a      	movs	r2, #10
   bd884:	4630      	mov	r0, r6
   bd886:	9301      	str	r3, [sp, #4]
   bd888:	f7ff ff3f 	bl	bd70a <_ZN5Print11printNumberEmh>
   bd88c:	9b01      	ldr	r3, [sp, #4]
   bd88e:	4418      	add	r0, r3
    n += print(toPrint);
   bd890:	4482      	add	sl, r0
    remainder -= toPrint;
   bd892:	4658      	mov	r0, fp
   bd894:	f001 f94a 	bl	beb2c <__aeabi_i2d>
   bd898:	4602      	mov	r2, r0
   bd89a:	460b      	mov	r3, r1
   bd89c:	4620      	mov	r0, r4
   bd89e:	4629      	mov	r1, r5
   bd8a0:	f000 fff6 	bl	be890 <__aeabi_dsub>
   bd8a4:	3f01      	subs	r7, #1
   bd8a6:	4604      	mov	r4, r0
   bd8a8:	460d      	mov	r5, r1
   bd8aa:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bd8ac:	e7d3      	b.n	bd856 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bd8ae:	4659      	mov	r1, fp
        size_t t = 0;
   bd8b0:	2300      	movs	r3, #0
   bd8b2:	e7e6      	b.n	bd882 <_ZN5Print10printFloatEdh+0x13a>
   bd8b4:	000c1020 	.word	0x000c1020
   bd8b8:	7fefffff 	.word	0x7fefffff
   bd8bc:	000c1024 	.word	0x000c1024
   bd8c0:	41efffff 	.word	0x41efffff
   bd8c4:	000c1028 	.word	0x000c1028
   bd8c8:	c1efffff 	.word	0xc1efffff
   bd8cc:	3fe00000 	.word	0x3fe00000
   bd8d0:	000c1060 	.word	0x000c1060
   bd8d4:	40240000 	.word	0x40240000

000bd8d8 <_ZN5Print5printEfi>:
{
   bd8d8:	b538      	push	{r3, r4, r5, lr}
   bd8da:	4604      	mov	r4, r0
   bd8dc:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bd8e0:	b2cd      	uxtb	r5, r1
   bd8e2:	f001 f935 	bl	beb50 <__aeabi_f2d>
   bd8e6:	ec41 0b10 	vmov	d0, r0, r1
   bd8ea:	4629      	mov	r1, r5
   bd8ec:	4620      	mov	r0, r4
}
   bd8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bd8f2:	f7ff bf29 	b.w	bd748 <_ZN5Print10printFloatEdh>

000bd8f6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd8fa:	b086      	sub	sp, #24
   bd8fc:	af00      	add	r7, sp, #0
   bd8fe:	4605      	mov	r5, r0
   bd900:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd902:	1d38      	adds	r0, r7, #4
   bd904:	2114      	movs	r1, #20
{
   bd906:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd908:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd90a:	f7fd fdcd 	bl	bb4a8 <vsnprintf>

    if (n<bufsize)
   bd90e:	2813      	cmp	r0, #19
   bd910:	d80e      	bhi.n	bd930 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd912:	1d39      	adds	r1, r7, #4
   bd914:	4628      	mov	r0, r5
   bd916:	f7ff fed3 	bl	bd6c0 <_ZN5Print5writeEPKc>
   bd91a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd91c:	b11e      	cbz	r6, bd926 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd91e:	4628      	mov	r0, r5
   bd920:	f7ff fee7 	bl	bd6f2 <_ZN5Print7printlnEv>
   bd924:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd926:	4620      	mov	r0, r4
   bd928:	3718      	adds	r7, #24
   bd92a:	46bd      	mov	sp, r7
   bd92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd930:	f100 0308 	add.w	r3, r0, #8
   bd934:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd938:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd93a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd93e:	4622      	mov	r2, r4
   bd940:	1c41      	adds	r1, r0, #1
   bd942:	683b      	ldr	r3, [r7, #0]
   bd944:	4668      	mov	r0, sp
   bd946:	f7fd fdaf 	bl	bb4a8 <vsnprintf>
  return write(str);
   bd94a:	4669      	mov	r1, sp
   bd94c:	4628      	mov	r0, r5
   bd94e:	f7ff feb7 	bl	bd6c0 <_ZN5Print5writeEPKc>
   bd952:	4604      	mov	r4, r0
   bd954:	46c5      	mov	sp, r8
   bd956:	e7e1      	b.n	bd91c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd958 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd958:	b510      	push	{r4, lr}
  if (0 == max) {
   bd95a:	4604      	mov	r4, r0
   bd95c:	b128      	cbz	r0, bd96a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd95e:	f001 fcf7 	bl	bf350 <rand>
   bd962:	fb90 f3f4 	sdiv	r3, r0, r4
   bd966:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd96a:	4620      	mov	r0, r4
   bd96c:	bd10      	pop	{r4, pc}

000bd96e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bd96e:	4288      	cmp	r0, r1
{
   bd970:	b510      	push	{r4, lr}
   bd972:	4604      	mov	r4, r0
  if (min >= max) {
   bd974:	da03      	bge.n	bd97e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bd976:	1a08      	subs	r0, r1, r0
   bd978:	f7ff ffee 	bl	bd958 <_Z6randomi>
   bd97c:	4404      	add	r4, r0
}
   bd97e:	4620      	mov	r0, r4
   bd980:	bd10      	pop	{r4, pc}
	...

000bd984 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd984:	4b01      	ldr	r3, [pc, #4]	; (bd98c <_GLOBAL__sub_I_RGB+0x8>)
   bd986:	2200      	movs	r2, #0
   bd988:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd98a:	4770      	bx	lr
   bd98c:	2003e688 	.word	0x2003e688

000bd990 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd990:	2100      	movs	r1, #0
   bd992:	f7fd baed 	b.w	baf70 <hal_spi_release>

000bd996 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd996:	2100      	movs	r1, #0
   bd998:	f7fd bae2 	b.w	baf60 <hal_spi_acquire>

000bd99c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd99c:	b510      	push	{r4, lr}
   bd99e:	4604      	mov	r4, r0
   bd9a0:	4608      	mov	r0, r1
{
    _spi = spi;
   bd9a2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd9a4:	f7fd fabc 	bl	baf20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd9a8:	2300      	movs	r3, #0
   bd9aa:	6063      	str	r3, [r4, #4]
}
   bd9ac:	4620      	mov	r0, r4
   bd9ae:	bd10      	pop	{r4, pc}

000bd9b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd9b0:	b513      	push	{r0, r1, r4, lr}
   bd9b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd9b4:	7800      	ldrb	r0, [r0, #0]
   bd9b6:	f7ff ffee 	bl	bd996 <_ZN8SPIClass4lockEv.isra.0>
   bd9ba:	b958      	cbnz	r0, bd9d4 <_ZN8SPIClass5beginEv+0x24>
   bd9bc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd9be:	9001      	str	r0, [sp, #4]
   bd9c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd9c4:	f7fd fa94 	bl	baef0 <hal_spi_begin>
        unlock();
   bd9c8:	9801      	ldr	r0, [sp, #4]
    }
}
   bd9ca:	b002      	add	sp, #8
   bd9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd9d0:	f7ff bfde 	b.w	bd990 <_ZN8SPIClass6unlockEv.isra.0>
   bd9d4:	b002      	add	sp, #8
   bd9d6:	bd10      	pop	{r4, pc}

000bd9d8 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bd9d8:	b513      	push	{r0, r1, r4, lr}
   bd9da:	4604      	mov	r4, r0
    if (!lock())
   bd9dc:	7800      	ldrb	r0, [r0, #0]
   bd9de:	f7ff ffda 	bl	bd996 <_ZN8SPIClass4lockEv.isra.0>
   bd9e2:	b948      	cbnz	r0, bd9f8 <_ZN8SPIClass3endEv+0x20>
   bd9e4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bd9e6:	9001      	str	r0, [sp, #4]
   bd9e8:	f7fd fa8a 	bl	baf00 <hal_spi_end>
        unlock();
   bd9ec:	9801      	ldr	r0, [sp, #4]
    }
}
   bd9ee:	b002      	add	sp, #8
   bd9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd9f4:	f7ff bfcc 	b.w	bd990 <_ZN8SPIClass6unlockEv.isra.0>
   bd9f8:	b002      	add	sp, #8
   bd9fa:	bd10      	pop	{r4, pc}

000bd9fc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd9fc:	7800      	ldrb	r0, [r0, #0]
   bd9fe:	f7ff bfc7 	b.w	bd990 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bda04 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bda04:	0840      	lsrs	r0, r0, #1
{
   bda06:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bda08:	6018      	str	r0, [r3, #0]
   bda0a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bda0c:	6818      	ldr	r0, [r3, #0]
   bda0e:	4288      	cmp	r0, r1
   bda10:	b2e5      	uxtb	r5, r4
   bda12:	d906      	bls.n	bda22 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bda14:	3401      	adds	r4, #1
   bda16:	2c08      	cmp	r4, #8
   bda18:	d002      	beq.n	bda20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bda1a:	0840      	lsrs	r0, r0, #1
   bda1c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bda1e:	e7f5      	b.n	bda0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bda20:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bda22:	4b02      	ldr	r3, [pc, #8]	; (bda2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bda24:	5d5b      	ldrb	r3, [r3, r5]
   bda26:	7013      	strb	r3, [r2, #0]
}
   bda28:	bd30      	pop	{r4, r5, pc}
   bda2a:	bf00      	nop
   bda2c:	000c102c 	.word	0x000c102c

000bda30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bda30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bda34:	4606      	mov	r6, r0
   bda36:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bda38:	7800      	ldrb	r0, [r0, #0]
{
   bda3a:	460c      	mov	r4, r1
    CHECK(lock());
   bda3c:	f7ff ffab 	bl	bd996 <_ZN8SPIClass4lockEv.isra.0>
   bda40:	2800      	cmp	r0, #0
   bda42:	db1b      	blt.n	bda7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bda44:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bda46:	2214      	movs	r2, #20
   bda48:	2100      	movs	r1, #0
   bda4a:	a809      	add	r0, sp, #36	; 0x24
   bda4c:	f001 fc4a 	bl	bf2e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bda50:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bda52:	2200      	movs	r2, #0
   bda54:	a909      	add	r1, sp, #36	; 0x24
   bda56:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bda58:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bda5c:	f7fd fa70 	bl	baf40 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bda60:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bda64:	b113      	cbz	r3, bda6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bda66:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bda6a:	b155      	cbz	r5, bda82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bda6c:	2700      	movs	r7, #0
   bda6e:	46b9      	mov	r9, r7
   bda70:	46b8      	mov	r8, r7
   bda72:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bda74:	7923      	ldrb	r3, [r4, #4]
   bda76:	b15d      	cbz	r5, bda90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bda78:	b1c3      	cbz	r3, bdaac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bda7a:	2000      	movs	r0, #0
}
   bda7c:	b00f      	add	sp, #60	; 0x3c
   bda7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bda82:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bda86:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bda8a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bda8e:	e7f1      	b.n	bda74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bda90:	2b00      	cmp	r3, #0
   bda92:	d135      	bne.n	bdb00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bda94:	68a3      	ldr	r3, [r4, #8]
   bda96:	4543      	cmp	r3, r8
   bda98:	d108      	bne.n	bdaac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bda9a:	f88d 9020 	strb.w	r9, [sp, #32]
   bda9e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdaa2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdaa6:	89a3      	ldrh	r3, [r4, #12]
   bdaa8:	429a      	cmp	r2, r3
   bdaaa:	d0e6      	beq.n	bda7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bdaac:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdaae:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bdab0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bdab4:	980a      	ldr	r0, [sp, #40]	; 0x28
   bdab6:	ab04      	add	r3, sp, #16
   bdab8:	f10d 020f 	add.w	r2, sp, #15
   bdabc:	f7ff ffa2 	bl	bda04 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bdac0:	7921      	ldrb	r1, [r4, #4]
   bdac2:	b985      	cbnz	r5, bdae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bdac4:	b989      	cbnz	r1, bdaea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdac6:	68a3      	ldr	r3, [r4, #8]
   bdac8:	4543      	cmp	r3, r8
   bdaca:	d30e      	bcc.n	bdaea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bdacc:	f88d 9020 	strb.w	r9, [sp, #32]
   bdad0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bdad4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bdad8:	89a3      	ldrh	r3, [r4, #12]
   bdada:	429a      	cmp	r2, r3
   bdadc:	d105      	bne.n	bdaea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bdade:	9b04      	ldr	r3, [sp, #16]
   bdae0:	4543      	cmp	r3, r8
   bdae2:	d102      	bne.n	bdaea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bdae4:	e7c9      	b.n	bda7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bdae6:	2900      	cmp	r1, #0
   bdae8:	d1f9      	bne.n	bdade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bdaea:	2300      	movs	r3, #0
   bdaec:	9301      	str	r3, [sp, #4]
   bdaee:	7b63      	ldrb	r3, [r4, #13]
   bdaf0:	9300      	str	r3, [sp, #0]
   bdaf2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bdaf6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bdaf8:	7830      	ldrb	r0, [r6, #0]
   bdafa:	f7fd fa29 	bl	baf50 <hal_spi_set_settings>
   bdafe:	e7bc      	b.n	bda7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bdb00:	e9cd 5500 	strd	r5, r5, [sp]
   bdb04:	462b      	mov	r3, r5
   bdb06:	462a      	mov	r2, r5
   bdb08:	2101      	movs	r1, #1
   bdb0a:	e7f5      	b.n	bdaf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bdb0c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bdb0c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bdb0e:	7800      	ldrb	r0, [r0, #0]
   bdb10:	f7fd f9fe 	bl	baf10 <hal_spi_transfer>
}
   bdb14:	b2c0      	uxtb	r0, r0
   bdb16:	bd08      	pop	{r3, pc}

000bdb18 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bdb18:	4770      	bx	lr

000bdb1a <_ZN8SPIClass15detachInterruptEv>:
   bdb1a:	4770      	bx	lr

000bdb1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bdb1c:	b510      	push	{r4, lr}
   bdb1e:	4604      	mov	r4, r0
{
	free(buffer);
   bdb20:	6800      	ldr	r0, [r0, #0]
   bdb22:	f7fd fc99 	bl	bb458 <free>
}
   bdb26:	4620      	mov	r0, r4
   bdb28:	bd10      	pop	{r4, pc}

000bdb2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bdb2a:	b510      	push	{r4, lr}
   bdb2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bdb2e:	6800      	ldr	r0, [r0, #0]
   bdb30:	b108      	cbz	r0, bdb36 <_ZN6String10invalidateEv+0xc>
   bdb32:	f7fd fc91 	bl	bb458 <free>
	buffer = NULL;
   bdb36:	2300      	movs	r3, #0
	capacity = len = 0;
   bdb38:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bdb3c:	6023      	str	r3, [r4, #0]
}
   bdb3e:	bd10      	pop	{r4, pc}

000bdb40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bdb40:	b538      	push	{r3, r4, r5, lr}
   bdb42:	4604      	mov	r4, r0
   bdb44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bdb46:	6800      	ldr	r0, [r0, #0]
   bdb48:	3101      	adds	r1, #1
   bdb4a:	f7fd fc8d 	bl	bb468 <realloc>
	if (newbuffer) {
   bdb4e:	b110      	cbz	r0, bdb56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bdb50:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bdb54:	2001      	movs	r0, #1
	}
	return 0;
}
   bdb56:	bd38      	pop	{r3, r4, r5, pc}

000bdb58 <_ZN6String7reserveEj>:
{
   bdb58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bdb5a:	6803      	ldr	r3, [r0, #0]
{
   bdb5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bdb5e:	b123      	cbz	r3, bdb6a <_ZN6String7reserveEj+0x12>
   bdb60:	6843      	ldr	r3, [r0, #4]
   bdb62:	428b      	cmp	r3, r1
   bdb64:	d301      	bcc.n	bdb6a <_ZN6String7reserveEj+0x12>
   bdb66:	2001      	movs	r0, #1
}
   bdb68:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bdb6a:	4620      	mov	r0, r4
   bdb6c:	f7ff ffe8 	bl	bdb40 <_ZN6String12changeBufferEj>
   bdb70:	2800      	cmp	r0, #0
   bdb72:	d0f9      	beq.n	bdb68 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bdb74:	68a3      	ldr	r3, [r4, #8]
   bdb76:	2b00      	cmp	r3, #0
   bdb78:	d1f5      	bne.n	bdb66 <_ZN6String7reserveEj+0xe>
   bdb7a:	6822      	ldr	r2, [r4, #0]
   bdb7c:	7013      	strb	r3, [r2, #0]
   bdb7e:	e7f2      	b.n	bdb66 <_ZN6String7reserveEj+0xe>

000bdb80 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bdb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdb82:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bdb84:	4611      	mov	r1, r2
   bdb86:	9201      	str	r2, [sp, #4]
{
   bdb88:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bdb8a:	f7ff ffe5 	bl	bdb58 <_ZN6String7reserveEj>
   bdb8e:	9a01      	ldr	r2, [sp, #4]
   bdb90:	b928      	cbnz	r0, bdb9e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bdb92:	4620      	mov	r0, r4
   bdb94:	f7ff ffc9 	bl	bdb2a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bdb98:	4620      	mov	r0, r4
   bdb9a:	b003      	add	sp, #12
   bdb9c:	bd30      	pop	{r4, r5, pc}
	len = length;
   bdb9e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bdba0:	4629      	mov	r1, r5
   bdba2:	6820      	ldr	r0, [r4, #0]
   bdba4:	f001 fb76 	bl	bf294 <memcpy>
	buffer[len] = 0;
   bdba8:	6822      	ldr	r2, [r4, #0]
   bdbaa:	68a3      	ldr	r3, [r4, #8]
   bdbac:	2100      	movs	r1, #0
   bdbae:	54d1      	strb	r1, [r2, r3]
	return *this;
   bdbb0:	e7f2      	b.n	bdb98 <_ZN6String4copyEPKcj+0x18>

000bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bdbb2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bdbb4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bdbb6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bdbba:	4604      	mov	r4, r0
	len = 0;
   bdbbc:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdbbe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bdbc0:	b141      	cbz	r1, bdbd4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bdbc2:	4608      	mov	r0, r1
   bdbc4:	9101      	str	r1, [sp, #4]
   bdbc6:	f001 fc48 	bl	bf45a <strlen>
   bdbca:	9901      	ldr	r1, [sp, #4]
   bdbcc:	4602      	mov	r2, r0
   bdbce:	4620      	mov	r0, r4
   bdbd0:	f7ff ffd6 	bl	bdb80 <_ZN6String4copyEPKcj>
}
   bdbd4:	4620      	mov	r0, r4
   bdbd6:	b002      	add	sp, #8
   bdbd8:	bd10      	pop	{r4, pc}

000bdbda <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bdbda:	b538      	push	{r3, r4, r5, lr}
   bdbdc:	4605      	mov	r5, r0
	if (buffer) {
   bdbde:	6800      	ldr	r0, [r0, #0]
{
   bdbe0:	460c      	mov	r4, r1
	if (buffer) {
   bdbe2:	b168      	cbz	r0, bdc00 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bdbe4:	686a      	ldr	r2, [r5, #4]
   bdbe6:	688b      	ldr	r3, [r1, #8]
   bdbe8:	429a      	cmp	r2, r3
   bdbea:	d307      	bcc.n	bdbfc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bdbec:	6809      	ldr	r1, [r1, #0]
   bdbee:	f001 fc0e 	bl	bf40e <strcpy>
			len = rhs.len;
   bdbf2:	68a3      	ldr	r3, [r4, #8]
   bdbf4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bdbf6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bdbf8:	60a3      	str	r3, [r4, #8]
}
   bdbfa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bdbfc:	f7fd fc2c 	bl	bb458 <free>
	buffer = rhs.buffer;
   bdc00:	6823      	ldr	r3, [r4, #0]
   bdc02:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bdc04:	6863      	ldr	r3, [r4, #4]
   bdc06:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bdc08:	68a3      	ldr	r3, [r4, #8]
   bdc0a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bdc0c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bdc0e:	e9c4 3300 	strd	r3, r3, [r4]
   bdc12:	e7f1      	b.n	bdbf8 <_ZN6String4moveERS_+0x1e>

000bdc14 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bdc14:	b510      	push	{r4, lr}
	buffer = NULL;
   bdc16:	2300      	movs	r3, #0
	capacity = 0;
   bdc18:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bdc1c:	4604      	mov	r4, r0
	len = 0;
   bdc1e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdc20:	7303      	strb	r3, [r0, #12]
	move(rval);
   bdc22:	f7ff ffda 	bl	bdbda <_ZN6String4moveERS_>
}
   bdc26:	4620      	mov	r0, r4
   bdc28:	bd10      	pop	{r4, pc}

000bdc2a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bdc2a:	4288      	cmp	r0, r1
{
   bdc2c:	b510      	push	{r4, lr}
   bdc2e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bdc30:	d005      	beq.n	bdc3e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bdc32:	680b      	ldr	r3, [r1, #0]
   bdc34:	b12b      	cbz	r3, bdc42 <_ZN6StringaSERKS_+0x18>
   bdc36:	688a      	ldr	r2, [r1, #8]
   bdc38:	4619      	mov	r1, r3
   bdc3a:	f7ff ffa1 	bl	bdb80 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdc3e:	4620      	mov	r0, r4
   bdc40:	bd10      	pop	{r4, pc}
	else invalidate();
   bdc42:	f7ff ff72 	bl	bdb2a <_ZN6String10invalidateEv>
   bdc46:	e7fa      	b.n	bdc3e <_ZN6StringaSERKS_+0x14>

000bdc48 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bdc48:	b510      	push	{r4, lr}
	buffer = NULL;
   bdc4a:	2300      	movs	r3, #0
String::String(const String &value)
   bdc4c:	4604      	mov	r4, r0
	capacity = 0;
   bdc4e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bdc52:	6083      	str	r3, [r0, #8]
	flags = 0;
   bdc54:	7303      	strb	r3, [r0, #12]
	*this = value;
   bdc56:	f7ff ffe8 	bl	bdc2a <_ZN6StringaSERKS_>
}
   bdc5a:	4620      	mov	r0, r4
   bdc5c:	bd10      	pop	{r4, pc}

000bdc5e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bdc5e:	4288      	cmp	r0, r1
{
   bdc60:	b510      	push	{r4, lr}
   bdc62:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bdc64:	d001      	beq.n	bdc6a <_ZN6StringaSEOS_+0xc>
   bdc66:	f7ff ffb8 	bl	bdbda <_ZN6String4moveERS_>
	return *this;
}
   bdc6a:	4620      	mov	r0, r4
   bdc6c:	bd10      	pop	{r4, pc}

000bdc6e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bdc6e:	b513      	push	{r0, r1, r4, lr}
   bdc70:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bdc72:	b159      	cbz	r1, bdc8c <_ZN6StringaSEPKc+0x1e>
   bdc74:	4608      	mov	r0, r1
   bdc76:	9101      	str	r1, [sp, #4]
   bdc78:	f001 fbef 	bl	bf45a <strlen>
   bdc7c:	9901      	ldr	r1, [sp, #4]
   bdc7e:	4602      	mov	r2, r0
   bdc80:	4620      	mov	r0, r4
   bdc82:	f7ff ff7d 	bl	bdb80 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bdc86:	4620      	mov	r0, r4
   bdc88:	b002      	add	sp, #8
   bdc8a:	bd10      	pop	{r4, pc}
	else invalidate();
   bdc8c:	f7ff ff4d 	bl	bdb2a <_ZN6String10invalidateEv>
   bdc90:	e7f9      	b.n	bdc86 <_ZN6StringaSEPKc+0x18>

000bdc92 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bdc92:	b570      	push	{r4, r5, r6, lr}
   bdc94:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bdc96:	460e      	mov	r6, r1
   bdc98:	b909      	cbnz	r1, bdc9e <_ZN6String6concatEPKcj+0xc>
   bdc9a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bdc9c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bdc9e:	b16a      	cbz	r2, bdcbc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bdca0:	6884      	ldr	r4, [r0, #8]
   bdca2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bdca4:	4621      	mov	r1, r4
   bdca6:	f7ff ff57 	bl	bdb58 <_ZN6String7reserveEj>
   bdcaa:	2800      	cmp	r0, #0
   bdcac:	d0f5      	beq.n	bdc9a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bdcae:	6828      	ldr	r0, [r5, #0]
   bdcb0:	68ab      	ldr	r3, [r5, #8]
   bdcb2:	4631      	mov	r1, r6
   bdcb4:	4418      	add	r0, r3
   bdcb6:	f001 fbaa 	bl	bf40e <strcpy>
	len = newlen;
   bdcba:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bdcbc:	2001      	movs	r0, #1
   bdcbe:	e7ed      	b.n	bdc9c <_ZN6String6concatEPKcj+0xa>

000bdcc0 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bdcc0:	b513      	push	{r0, r1, r4, lr}
   bdcc2:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bdcc4:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bdcc6:	b151      	cbz	r1, bdcde <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bdcc8:	9101      	str	r1, [sp, #4]
   bdcca:	f001 fbc6 	bl	bf45a <strlen>
   bdcce:	9901      	ldr	r1, [sp, #4]
   bdcd0:	4602      	mov	r2, r0
   bdcd2:	4620      	mov	r0, r4
}
   bdcd4:	b002      	add	sp, #8
   bdcd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bdcda:	f7ff bfda 	b.w	bdc92 <_ZN6String6concatEPKcj>
}
   bdcde:	b002      	add	sp, #8
   bdce0:	bd10      	pop	{r4, pc}

000bdce2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bdce2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bdce4:	688a      	ldr	r2, [r1, #8]
   bdce6:	6809      	ldr	r1, [r1, #0]
{
   bdce8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bdcea:	f7ff ffd2 	bl	bdc92 <_ZN6String6concatEPKcj>
   bdcee:	b910      	cbnz	r0, bdcf6 <_ZplRK15StringSumHelperRK6String+0x14>
   bdcf0:	4620      	mov	r0, r4
   bdcf2:	f7ff ff1a 	bl	bdb2a <_ZN6String10invalidateEv>
	return a;
}
   bdcf6:	4620      	mov	r0, r4
   bdcf8:	bd10      	pop	{r4, pc}

000bdcfa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bdcfa:	b513      	push	{r0, r1, r4, lr}
   bdcfc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bdcfe:	b929      	cbnz	r1, bdd0c <_ZplRK15StringSumHelperPKc+0x12>
   bdd00:	4620      	mov	r0, r4
   bdd02:	f7ff ff12 	bl	bdb2a <_ZN6String10invalidateEv>
	return a;
}
   bdd06:	4620      	mov	r0, r4
   bdd08:	b002      	add	sp, #8
   bdd0a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bdd0c:	4608      	mov	r0, r1
   bdd0e:	9101      	str	r1, [sp, #4]
   bdd10:	f001 fba3 	bl	bf45a <strlen>
   bdd14:	9901      	ldr	r1, [sp, #4]
   bdd16:	4602      	mov	r2, r0
   bdd18:	4620      	mov	r0, r4
   bdd1a:	f7ff ffba 	bl	bdc92 <_ZN6String6concatEPKcj>
   bdd1e:	2800      	cmp	r0, #0
   bdd20:	d0ee      	beq.n	bdd00 <_ZplRK15StringSumHelperPKc+0x6>
   bdd22:	e7f0      	b.n	bdd06 <_ZplRK15StringSumHelperPKc+0xc>

000bdd24 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bdd24:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bdd26:	6882      	ldr	r2, [r0, #8]
   bdd28:	b93a      	cbnz	r2, bdd3a <_ZNK6String6equalsEPKc+0x16>
   bdd2a:	b121      	cbz	r1, bdd36 <_ZNK6String6equalsEPKc+0x12>
   bdd2c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bdd2e:	fab0 f080 	clz	r0, r0
   bdd32:	0940      	lsrs	r0, r0, #5
   bdd34:	e000      	b.n	bdd38 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bdd36:	2001      	movs	r0, #1
}
   bdd38:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bdd3a:	6800      	ldr	r0, [r0, #0]
   bdd3c:	b909      	cbnz	r1, bdd42 <_ZNK6String6equalsEPKc+0x1e>
   bdd3e:	7800      	ldrb	r0, [r0, #0]
   bdd40:	e7f5      	b.n	bdd2e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bdd42:	f001 fb5a 	bl	bf3fa <strcmp>
   bdd46:	e7f2      	b.n	bdd2e <_ZNK6String6equalsEPKc+0xa>

000bdd48 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bdd48:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bdd4a:	6883      	ldr	r3, [r0, #8]
   bdd4c:	688a      	ldr	r2, [r1, #8]
   bdd4e:	4293      	cmp	r3, r2
   bdd50:	d30b      	bcc.n	bdd6a <_ZNK6String8endsWithERKS_+0x22>
   bdd52:	6800      	ldr	r0, [r0, #0]
   bdd54:	b140      	cbz	r0, bdd68 <_ZNK6String8endsWithERKS_+0x20>
   bdd56:	6809      	ldr	r1, [r1, #0]
   bdd58:	b149      	cbz	r1, bdd6e <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bdd5a:	1a9b      	subs	r3, r3, r2
   bdd5c:	4418      	add	r0, r3
   bdd5e:	f001 fb4c 	bl	bf3fa <strcmp>
   bdd62:	fab0 f080 	clz	r0, r0
   bdd66:	0940      	lsrs	r0, r0, #5
}
   bdd68:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bdd6a:	2000      	movs	r0, #0
   bdd6c:	e7fc      	b.n	bdd68 <_ZNK6String8endsWithERKS_+0x20>
   bdd6e:	4608      	mov	r0, r1
   bdd70:	e7fa      	b.n	bdd68 <_ZNK6String8endsWithERKS_+0x20>
	...

000bdd74 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bdd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bdd76:	429a      	cmp	r2, r3
{
   bdd78:	460f      	mov	r7, r1
   bdd7a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bdd7c:	490c      	ldr	r1, [pc, #48]	; (bddb0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bdd7e:	bf88      	it	hi
   bdd80:	4613      	movhi	r3, r2
{
   bdd82:	4614      	mov	r4, r2
   bdd84:	4606      	mov	r6, r0
	if (left > right) {
   bdd86:	bf84      	itt	hi
   bdd88:	462c      	movhi	r4, r5
   bdd8a:	461d      	movhi	r5, r3
	String out;
   bdd8c:	f7ff ff11 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bdd90:	68bb      	ldr	r3, [r7, #8]
   bdd92:	42a3      	cmp	r3, r4
   bdd94:	d30a      	bcc.n	bddac <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bdd96:	6839      	ldr	r1, [r7, #0]
   bdd98:	42ab      	cmp	r3, r5
   bdd9a:	bf94      	ite	ls
   bdd9c:	ebc4 0203 	rsbls	r2, r4, r3
   bdda0:	ebc4 0205 	rsbhi	r2, r4, r5
   bdda4:	4421      	add	r1, r4
   bdda6:	4630      	mov	r0, r6
   bdda8:	f7ff feea 	bl	bdb80 <_ZN6String4copyEPKcj>
	return out;
}
   bddac:	4630      	mov	r0, r6
   bddae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bddb0:	000c0f58 	.word	0x000c0f58

000bddb4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bddb4:	b40e      	push	{r1, r2, r3}
   bddb6:	b570      	push	{r4, r5, r6, lr}
   bddb8:	b087      	sub	sp, #28
   bddba:	ad0b      	add	r5, sp, #44	; 0x2c
   bddbc:	4604      	mov	r4, r0
   bddbe:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bddc2:	9201      	str	r2, [sp, #4]
   bddc4:	462b      	mov	r3, r5
   bddc6:	2105      	movs	r1, #5
   bddc8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bddca:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bddcc:	f7fd fb6c 	bl	bb4a8 <vsnprintf>
    va_end(marker);

    String result;
   bddd0:	490b      	ldr	r1, [pc, #44]	; (bde00 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bddd2:	4606      	mov	r6, r0
    String result;
   bddd4:	4620      	mov	r0, r4
   bddd6:	f7ff feec 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bddda:	4631      	mov	r1, r6
   bdddc:	4620      	mov	r0, r4
   bddde:	f7ff febb 	bl	bdb58 <_ZN6String7reserveEj>
    if (result.buffer) {
   bdde2:	6820      	ldr	r0, [r4, #0]
   bdde4:	b130      	cbz	r0, bddf4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bdde6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bdde8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bddea:	462b      	mov	r3, r5
   bddec:	1c71      	adds	r1, r6, #1
   bddee:	f7fd fb5b 	bl	bb4a8 <vsnprintf>
        va_end(marker);
        result.len = n;
   bddf2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bddf4:	4620      	mov	r0, r4
   bddf6:	b007      	add	sp, #28
   bddf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bddfc:	b003      	add	sp, #12
   bddfe:	4770      	bx	lr
   bde00:	000c0f58 	.word	0x000c0f58

000bde04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bde04:	b510      	push	{r4, lr}
   bde06:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bde08:	6800      	ldr	r0, [r0, #0]
   bde0a:	b118      	cbz	r0, bde14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bde0c:	f7fd fb24 	bl	bb458 <free>
            wakeupSource_ = nullptr;
   bde10:	2300      	movs	r3, #0
   bde12:	6023      	str	r3, [r4, #0]
        }
    }
   bde14:	bd10      	pop	{r4, pc}

000bde16 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bde16:	b538      	push	{r3, r4, r5, lr}
   bde18:	460c      	mov	r4, r1
   bde1a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bde1c:	f7ff fff2 	bl	bde04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bde20:	b154      	cbz	r4, bde38 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bde22:	8820      	ldrh	r0, [r4, #0]
   bde24:	f7fd fb10 	bl	bb448 <malloc>
   bde28:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bde2a:	b128      	cbz	r0, bde38 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bde2c:	8822      	ldrh	r2, [r4, #0]
   bde2e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bde30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bde34:	f001 ba2e 	b.w	bf294 <memcpy>
    }
   bde38:	bd38      	pop	{r3, r4, r5, pc}

000bde3a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bde3a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bde3c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bde40:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bde42:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bde46:	f8c0 3006 	str.w	r3, [r0, #6]
   bde4a:	894b      	ldrh	r3, [r1, #10]
   bde4c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bde4e:	460c      	mov	r4, r1
   bde50:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bde52:	f7ff ffd7 	bl	bde04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bde56:	6823      	ldr	r3, [r4, #0]
   bde58:	b113      	cbz	r3, bde60 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bde5a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bde5c:	2300      	movs	r3, #0
   bde5e:	6023      	str	r3, [r4, #0]
    }
   bde60:	bd38      	pop	{r3, r4, r5, pc}

000bde62 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bde62:	b507      	push	{r0, r1, r2, lr}
   bde64:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bde66:	2100      	movs	r1, #0
{
   bde68:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bde6a:	9100      	str	r1, [sp, #0]
   bde6c:	2001      	movs	r0, #1
   bde6e:	218c      	movs	r1, #140	; 0x8c
   bde70:	f7fd fa20 	bl	bb2b4 <system_reset>
}
   bde74:	b003      	add	sp, #12
   bde76:	f85d fb04 	ldr.w	pc, [sp], #4

000bde7a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bde7a:	4601      	mov	r1, r0
    reset(0, flags);
   bde7c:	2000      	movs	r0, #0
   bde7e:	f7ff bff0 	b.w	bde62 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bde82 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bde82:	2000      	movs	r0, #0
   bde84:	f7ff bff9 	b.w	bde7a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bde88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bde88:	b5f0      	push	{r4, r5, r6, r7, lr}
   bde8a:	4d2b      	ldr	r5, [pc, #172]	; (bdf38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bde8c:	7d0b      	ldrb	r3, [r1, #20]
   bde8e:	4604      	mov	r4, r0
   bde90:	b08b      	sub	sp, #44	; 0x2c
   bde92:	4608      	mov	r0, r1
   bde94:	1daf      	adds	r7, r5, #6
   bde96:	2b00      	cmp	r3, #0
   bde98:	d036      	beq.n	bdf08 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bde9a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bde9c:	791b      	ldrb	r3, [r3, #4]
   bde9e:	2b00      	cmp	r3, #0
   bdea0:	d032      	beq.n	bdf08 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bdea2:	4b26      	ldr	r3, [pc, #152]	; (bdf3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bdea4:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bdea6:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bdea8:	a902      	add	r1, sp, #8
   bdeaa:	3004      	adds	r0, #4
   bdeac:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bdeb0:	f7fd f9f6 	bl	bb2a0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bdeb4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bdeb8:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bdebc:	b200      	sxth	r0, r0
   bdebe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bdec2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bdec6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bdec8:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bdeca:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bdecc:	4628      	mov	r0, r5
   bdece:	f7ff ffa2 	bl	bde16 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bded2:	a802      	add	r0, sp, #8
   bded4:	f7ff ff96 	bl	bde04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bded8:	2300      	movs	r3, #0
   bdeda:	6023      	str	r3, [r4, #0]
   bdedc:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bdede:	71a3      	strb	r3, [r4, #6]
   bdee0:	8123      	strh	r3, [r4, #8]
   bdee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdee6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bdee8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bdeec:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bdeee:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bdef2:	f8c4 3006 	str.w	r3, [r4, #6]
   bdef6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bdef8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bdefa:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bdefc:	4620      	mov	r0, r4
   bdefe:	f7ff ff8a 	bl	bde16 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bdf02:	4620      	mov	r0, r4
   bdf04:	b00b      	add	sp, #44	; 0x2c
   bdf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bdf08:	2600      	movs	r6, #0
   bdf0a:	2320      	movs	r3, #32
   bdf0c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bdf10:	4b0b      	ldr	r3, [pc, #44]	; (bdf40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bdf12:	9300      	str	r3, [sp, #0]
   bdf14:	aa02      	add	r2, sp, #8
   bdf16:	4633      	mov	r3, r6
   bdf18:	490a      	ldr	r1, [pc, #40]	; (bdf44 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bdf1a:	2032      	movs	r0, #50	; 0x32
   bdf1c:	f7fd f930 	bl	bb180 <log_message>
            : wakeupSource_(nullptr),
   bdf20:	4b06      	ldr	r3, [pc, #24]	; (bdf3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bdf22:	4805      	ldr	r0, [pc, #20]	; (bdf38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bdf24:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bdf26:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bdf2a:	a902      	add	r1, sp, #8
   bdf2c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bdf30:	f7ff ff83 	bl	bde3a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bdf34:	e7cd      	b.n	bded2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bdf36:	bf00      	nop
   bdf38:	2003e698 	.word	0x2003e698
   bdf3c:	ffff0000 	.word	0xffff0000
   bdf40:	000c103b 	.word	0x000c103b
   bdf44:	000c1034 	.word	0x000c1034

000bdf48 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bdf48:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bdf4a:	2420      	movs	r4, #32
{
   bdf4c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bdf4e:	4622      	mov	r2, r4
   bdf50:	2100      	movs	r1, #0
   bdf52:	4668      	mov	r0, sp
   bdf54:	f001 f9c6 	bl	bf2e4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bdf58:	2100      	movs	r1, #0
   bdf5a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bdf5c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bdf60:	f7fc feb6 	bl	bacd0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bdf64:	9801      	ldr	r0, [sp, #4]
   bdf66:	b008      	add	sp, #32
   bdf68:	bd10      	pop	{r4, pc}
	...

000bdf6c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bdf6c:	4b05      	ldr	r3, [pc, #20]	; (bdf84 <_GLOBAL__sub_I_System+0x18>)
   bdf6e:	2202      	movs	r2, #2
   bdf70:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bdf72:	4b05      	ldr	r3, [pc, #20]	; (bdf88 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bdf74:	4a05      	ldr	r2, [pc, #20]	; (bdf8c <_GLOBAL__sub_I_System+0x20>)
   bdf76:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bdf78:	2000      	movs	r0, #0
   bdf7a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bdf7e:	f7fd b931 	b.w	bb1e4 <set_system_mode>
   bdf82:	bf00      	nop
   bdf84:	2003e6a4 	.word	0x2003e6a4
   bdf88:	2003e698 	.word	0x2003e698
   bdf8c:	ffff0000 	.word	0xffff0000

000bdf90 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bdf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bdf94:	4a15      	ldr	r2, [pc, #84]	; (bdfec <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bdf96:	f8df 8060 	ldr.w	r8, [pc, #96]	; bdff8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bdf9a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bdf9e:	1980      	adds	r0, r0, r6
   bdfa0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bdfa4:	4b12      	ldr	r3, [pc, #72]	; (bdff0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bdfa6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bdfaa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bdfae:	1986      	adds	r6, r0, r6
   bdfb0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bdfb4:	42bb      	cmp	r3, r7
   bdfb6:	bf08      	it	eq
   bdfb8:	42b2      	cmpeq	r2, r6
{
   bdfba:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bdfbc:	d013      	beq.n	bdfe6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bdfbe:	a903      	add	r1, sp, #12
   bdfc0:	4668      	mov	r0, sp
   bdfc2:	e9cd 6700 	strd	r6, r7, [sp]
   bdfc6:	f7fd faa7 	bl	bb518 <localtime_r>
	calendar_time.tm_year += 1900;
   bdfca:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdfcc:	4d09      	ldr	r5, [pc, #36]	; (bdff4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bdfce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdfd2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bdfd4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdfd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdfd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bdfda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdfdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bdfde:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdfe2:	6823      	ldr	r3, [r4, #0]
   bdfe4:	602b      	str	r3, [r5, #0]
    }
}
   bdfe6:	b00c      	add	sp, #48	; 0x30
   bdfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdfec:	2003e6e0 	.word	0x2003e6e0
   bdff0:	2003e6d8 	.word	0x2003e6d8
   bdff4:	2003e6b0 	.word	0x2003e6b0
   bdff8:	2003e6e8 	.word	0x2003e6e8

000bdffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bdffc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdffe:	2000      	movs	r0, #0
   be000:	f7fd f99a 	bl	bb338 <spark_sync_time_pending>
   be004:	b128      	cbz	r0, be012 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   be006:	f7fd f97f 	bl	bb308 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   be00a:	f080 0001 	eor.w	r0, r0, #1
   be00e:	b2c0      	uxtb	r0, r0
    }
   be010:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   be012:	2001      	movs	r0, #1
   be014:	e7fc      	b.n	be010 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000be018 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   be018:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   be01a:	f7ff ffb9 	bl	bdf90 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   be01e:	4b01      	ldr	r3, [pc, #4]	; (be024 <_ZN9TimeClass4hourEx+0xc>)
   be020:	6898      	ldr	r0, [r3, #8]
   be022:	bd08      	pop	{r3, pc}
   be024:	2003e6b0 	.word	0x2003e6b0

000be028 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   be028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   be02a:	4602      	mov	r2, r0
   be02c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be02e:	4668      	mov	r0, sp
    struct timeval tv = {
   be030:	2100      	movs	r1, #0
    };
   be032:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   be036:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   be03a:	f7fc fe91 	bl	bad60 <hal_rtc_set_time>
   be03e:	4602      	mov	r2, r0
   be040:	b910      	cbnz	r0, be048 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   be042:	4601      	mov	r1, r0
   be044:	f7fd f906 	bl	bb254 <system_notify_time_changed>
    }
}
   be048:	b005      	add	sp, #20
   be04a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be050 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   be050:	b530      	push	{r4, r5, lr}
   be052:	b093      	sub	sp, #76	; 0x4c
   be054:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   be058:	4b19      	ldr	r3, [pc, #100]	; (be0c0 <_ZN9TimeClass7timeStrEx+0x70>)
{
   be05a:	4604      	mov	r4, r0
    t += time_zone_cache;
   be05c:	e9d3 1000 	ldrd	r1, r0, [r3]
   be060:	9b01      	ldr	r3, [sp, #4]
   be062:	1852      	adds	r2, r2, r1
   be064:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   be068:	4816      	ldr	r0, [pc, #88]	; (be0c4 <_ZN9TimeClass7timeStrEx+0x74>)
   be06a:	e9d0 1000 	ldrd	r1, r0, [r0]
   be06e:	1852      	adds	r2, r2, r1
   be070:	eb43 0300 	adc.w	r3, r3, r0
   be074:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   be078:	2224      	movs	r2, #36	; 0x24
   be07a:	eb0d 0002 	add.w	r0, sp, r2
   be07e:	2100      	movs	r1, #0
   be080:	f001 f930 	bl	bf2e4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   be084:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   be086:	a909      	add	r1, sp, #36	; 0x24
   be088:	4668      	mov	r0, sp
   be08a:	f7fd fa45 	bl	bb518 <localtime_r>
    char ascstr[26] = {};
   be08e:	2216      	movs	r2, #22
   be090:	4629      	mov	r1, r5
   be092:	a803      	add	r0, sp, #12
   be094:	9502      	str	r5, [sp, #8]
   be096:	f001 f925 	bl	bf2e4 <memset>
    asctime_r(&calendar_time, ascstr);
   be09a:	a902      	add	r1, sp, #8
   be09c:	a809      	add	r0, sp, #36	; 0x24
   be09e:	f001 f8a7 	bl	bf1f0 <asctime_r>
    int len = strlen(ascstr);
   be0a2:	a802      	add	r0, sp, #8
   be0a4:	f001 f9d9 	bl	bf45a <strlen>
    ascstr[len-1] = 0; // remove final newline
   be0a8:	ab12      	add	r3, sp, #72	; 0x48
   be0aa:	4418      	add	r0, r3
    return String(ascstr);
   be0ac:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   be0ae:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   be0b2:	4620      	mov	r0, r4
   be0b4:	f7ff fd7d 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be0b8:	4620      	mov	r0, r4
   be0ba:	b013      	add	sp, #76	; 0x4c
   be0bc:	bd30      	pop	{r4, r5, pc}
   be0be:	bf00      	nop
   be0c0:	2003e6e0 	.word	0x2003e6e0
   be0c4:	2003e6d8 	.word	0x2003e6d8

000be0c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   be0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be0cc:	b0a4      	sub	sp, #144	; 0x90
   be0ce:	4607      	mov	r7, r0
   be0d0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be0d2:	a814      	add	r0, sp, #80	; 0x50
{
   be0d4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be0d6:	223f      	movs	r2, #63	; 0x3f
{
   be0d8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   be0da:	f001 f9da 	bl	bf492 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be0de:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be0e0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   be0e2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   be0e6:	f001 f9b8 	bl	bf45a <strlen>
   be0ea:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   be0ec:	bb4c      	cbnz	r4, be142 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   be0ee:	4929      	ldr	r1, [pc, #164]	; (be194 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   be0f0:	a803      	add	r0, sp, #12
   be0f2:	f001 f98c 	bl	bf40e <strcpy>
   be0f6:	ac14      	add	r4, sp, #80	; 0x50
{
   be0f8:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   be0fa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   be0fe:	45b1      	cmp	r9, r6
   be100:	d934      	bls.n	be16c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   be102:	7823      	ldrb	r3, [r4, #0]
   be104:	2b25      	cmp	r3, #37	; 0x25
   be106:	f106 0a01 	add.w	sl, r6, #1
   be10a:	d117      	bne.n	be13c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   be10c:	7863      	ldrb	r3, [r4, #1]
   be10e:	2b7a      	cmp	r3, #122	; 0x7a
   be110:	d114      	bne.n	be13c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   be112:	a803      	add	r0, sp, #12
   be114:	f001 f9a1 	bl	bf45a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be118:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   be11a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   be11c:	1830      	adds	r0, r6, r0
   be11e:	4418      	add	r0, r3
   be120:	eba9 0206 	sub.w	r2, r9, r6
   be124:	1ca1      	adds	r1, r4, #2
   be126:	f001 f8b5 	bl	bf294 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   be12a:	462a      	mov	r2, r5
   be12c:	a903      	add	r1, sp, #12
   be12e:	4620      	mov	r0, r4
   be130:	f001 f8b0 	bl	bf294 <memcpy>
            len = strlen(format_str);
   be134:	a814      	add	r0, sp, #80	; 0x50
   be136:	f001 f990 	bl	bf45a <strlen>
   be13a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   be13c:	3401      	adds	r4, #1
   be13e:	4656      	mov	r6, sl
   be140:	e7db      	b.n	be0fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   be142:	233c      	movs	r3, #60	; 0x3c
   be144:	fb94 f2f3 	sdiv	r2, r4, r3
   be148:	2a00      	cmp	r2, #0
   be14a:	bfb8      	it	lt
   be14c:	4252      	neglt	r2, r2
   be14e:	fbb2 f1f3 	udiv	r1, r2, r3
   be152:	fb03 2211 	mls	r2, r3, r1, r2
   be156:	9200      	str	r2, [sp, #0]
   be158:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   be15c:	4a0e      	ldr	r2, [pc, #56]	; (be198 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   be15e:	fb94 f3f3 	sdiv	r3, r4, r3
   be162:	2110      	movs	r1, #16
   be164:	a803      	add	r0, sp, #12
   be166:	f7fd f997 	bl	bb498 <snprintf>
   be16a:	e7c4      	b.n	be0f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   be16c:	2100      	movs	r1, #0
   be16e:	222e      	movs	r2, #46	; 0x2e
   be170:	a808      	add	r0, sp, #32
   be172:	9107      	str	r1, [sp, #28]
   be174:	f001 f8b6 	bl	bf2e4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   be178:	4643      	mov	r3, r8
   be17a:	aa14      	add	r2, sp, #80	; 0x50
   be17c:	2132      	movs	r1, #50	; 0x32
   be17e:	a807      	add	r0, sp, #28
   be180:	f7fd f9c2 	bl	bb508 <strftime>
    return String(buf);
   be184:	a907      	add	r1, sp, #28
   be186:	4638      	mov	r0, r7
   be188:	f7ff fd13 	bl	bdbb2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   be18c:	4638      	mov	r0, r7
   be18e:	b024      	add	sp, #144	; 0x90
   be190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be194:	000c06b7 	.word	0x000c06b7
   be198:	000c06b9 	.word	0x000c06b9

000be19c <_ZN9TimeClass6formatExPKc>:
{
   be19c:	b5f0      	push	{r4, r5, r6, r7, lr}
   be19e:	b08d      	sub	sp, #52	; 0x34
   be1a0:	e9cd 2300 	strd	r2, r3, [sp]
   be1a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   be1a6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   be1a8:	b915      	cbnz	r5, be1b0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   be1aa:	4b19      	ldr	r3, [pc, #100]	; (be210 <_ZN9TimeClass6formatExPKc+0x74>)
   be1ac:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   be1ae:	b12d      	cbz	r5, be1bc <_ZN9TimeClass6formatExPKc+0x20>
   be1b0:	4b18      	ldr	r3, [pc, #96]	; (be214 <_ZN9TimeClass6formatExPKc+0x78>)
   be1b2:	4628      	mov	r0, r5
   be1b4:	6819      	ldr	r1, [r3, #0]
   be1b6:	f001 f920 	bl	bf3fa <strcmp>
   be1ba:	b938      	cbnz	r0, be1cc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   be1bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   be1c0:	4620      	mov	r0, r4
   be1c2:	f7ff ff45 	bl	be050 <_ZN9TimeClass7timeStrEx>
}
   be1c6:	4620      	mov	r0, r4
   be1c8:	b00d      	add	sp, #52	; 0x34
   be1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   be1cc:	4e12      	ldr	r6, [pc, #72]	; (be218 <_ZN9TimeClass6formatExPKc+0x7c>)
   be1ce:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   be1d0:	4f12      	ldr	r7, [pc, #72]	; (be21c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   be1d2:	e9d6 3200 	ldrd	r3, r2, [r6]
   be1d6:	185b      	adds	r3, r3, r1
   be1d8:	9901      	ldr	r1, [sp, #4]
   be1da:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   be1de:	e9d7 0100 	ldrd	r0, r1, [r7]
   be1e2:	181b      	adds	r3, r3, r0
   be1e4:	eb42 0201 	adc.w	r2, r2, r1
   be1e8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   be1ec:	2100      	movs	r1, #0
   be1ee:	2224      	movs	r2, #36	; 0x24
   be1f0:	a803      	add	r0, sp, #12
   be1f2:	f001 f877 	bl	bf2e4 <memset>
    localtime_r(&t, &calendar_time);
   be1f6:	a903      	add	r1, sp, #12
   be1f8:	4668      	mov	r0, sp
   be1fa:	f7fd f98d 	bl	bb518 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   be1fe:	6832      	ldr	r2, [r6, #0]
   be200:	683b      	ldr	r3, [r7, #0]
   be202:	a903      	add	r1, sp, #12
   be204:	4413      	add	r3, r2
   be206:	4620      	mov	r0, r4
   be208:	462a      	mov	r2, r5
   be20a:	f7ff ff5d 	bl	be0c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   be20e:	e7da      	b.n	be1c6 <_ZN9TimeClass6formatExPKc+0x2a>
   be210:	2003e6ac 	.word	0x2003e6ac
   be214:	2003de7c 	.word	0x2003de7c
   be218:	2003e6e0 	.word	0x2003e6e0
   be21c:	2003e6d8 	.word	0x2003e6d8

000be220 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   be220:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   be222:	2000      	movs	r0, #0
   be224:	f7fc fd84 	bl	bad30 <hal_rtc_time_is_valid>
    if (rtcstate)
   be228:	4604      	mov	r4, r0
   be22a:	b9a0      	cbnz	r0, be256 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   be22c:	f7fc ffd2 	bl	bb1d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   be230:	2801      	cmp	r0, #1
   be232:	d110      	bne.n	be256 <_ZN9TimeClass7isValidEv+0x36>
   be234:	4620      	mov	r0, r4
   be236:	f7fd f805 	bl	bb244 <system_thread_get_state>
   be23a:	b960      	cbnz	r0, be256 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   be23c:	f7ff fede 	bl	bdffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   be240:	b910      	cbnz	r0, be248 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   be242:	f7fd f851 	bl	bb2e8 <spark_process>
        while (_while() && !_condition()) {
   be246:	e7f9      	b.n	be23c <_ZN9TimeClass7isValidEv+0x1c>
   be248:	f7ff fed8 	bl	bdffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   be24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   be250:	2000      	movs	r0, #0
   be252:	f7fc bd6d 	b.w	bad30 <hal_rtc_time_is_valid>
}
   be256:	4620      	mov	r0, r4
   be258:	bd10      	pop	{r4, pc}

000be25a <_ZN9TimeClass3nowEv>:
{
   be25a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   be25c:	f7ff ffe0 	bl	be220 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   be260:	2210      	movs	r2, #16
   be262:	2100      	movs	r1, #0
   be264:	4668      	mov	r0, sp
   be266:	f001 f83d 	bl	bf2e4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   be26a:	2100      	movs	r1, #0
   be26c:	4668      	mov	r0, sp
   be26e:	f7fc fd6f 	bl	bad50 <hal_rtc_get_time>
}
   be272:	9800      	ldr	r0, [sp, #0]
   be274:	b005      	add	sp, #20
   be276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be27c <_ZN9TimeClass4hourEv>:
{
   be27c:	b508      	push	{r3, lr}
	return hour(now());
   be27e:	f7ff ffec 	bl	be25a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   be282:	17c1      	asrs	r1, r0, #31
   be284:	f7ff fe84 	bl	bdf90 <_ZL22Refresh_UnixTime_Cachex>
}
   be288:	4b01      	ldr	r3, [pc, #4]	; (be290 <_ZN9TimeClass4hourEv+0x14>)
   be28a:	6898      	ldr	r0, [r3, #8]
   be28c:	bd08      	pop	{r3, pc}
   be28e:	bf00      	nop
   be290:	2003e6b0 	.word	0x2003e6b0

000be294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   be294:	4b02      	ldr	r3, [pc, #8]	; (be2a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   be296:	681a      	ldr	r2, [r3, #0]
   be298:	4b02      	ldr	r3, [pc, #8]	; (be2a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   be29a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   be29c:	4770      	bx	lr
   be29e:	bf00      	nop
   be2a0:	2003de7c 	.word	0x2003de7c
   be2a4:	2003e6ac 	.word	0x2003e6ac

000be2a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   be2a8:	4770      	bx	lr

000be2aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be2aa:	7441      	strb	r1, [r0, #17]
}
   be2ac:	4770      	bx	lr

000be2ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   be2ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   be2b0:	7c00      	ldrb	r0, [r0, #16]
   be2b2:	f7fc fefd 	bl	bb0b0 <hal_usart_available_data_for_write>
}
   be2b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be2ba:	bd08      	pop	{r3, pc}

000be2bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   be2bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   be2be:	7c00      	ldrb	r0, [r0, #16]
   be2c0:	f7fc fece 	bl	bb060 <hal_usart_available>
}
   be2c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be2c8:	bd08      	pop	{r3, pc}

000be2ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   be2ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   be2cc:	7c00      	ldrb	r0, [r0, #16]
   be2ce:	f7fc fed7 	bl	bb080 <hal_usart_peek>
}
   be2d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be2d6:	bd08      	pop	{r3, pc}

000be2d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   be2d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   be2da:	7c00      	ldrb	r0, [r0, #16]
   be2dc:	f7fc fec8 	bl	bb070 <hal_usart_read>
}
   be2e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be2e4:	bd08      	pop	{r3, pc}

000be2e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   be2e6:	7c00      	ldrb	r0, [r0, #16]
   be2e8:	f7fc bed2 	b.w	bb090 <hal_usart_flush>

000be2ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   be2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be2ee:	7c45      	ldrb	r5, [r0, #17]
{
   be2f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be2f2:	b12d      	cbz	r5, be300 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   be2f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   be2f6:	b003      	add	sp, #12
   be2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   be2fc:	f7fc bea8 	b.w	bb050 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   be300:	7c00      	ldrb	r0, [r0, #16]
   be302:	9101      	str	r1, [sp, #4]
   be304:	f7fc fed4 	bl	bb0b0 <hal_usart_available_data_for_write>
   be308:	2800      	cmp	r0, #0
   be30a:	9901      	ldr	r1, [sp, #4]
   be30c:	dcf2      	bgt.n	be2f4 <_ZN11USARTSerial5writeEh+0x8>
}
   be30e:	4628      	mov	r0, r5
   be310:	b003      	add	sp, #12
   be312:	bd30      	pop	{r4, r5, pc}

000be314 <_ZN11USARTSerialD0Ev>:
   be314:	b510      	push	{r4, lr}
   be316:	2114      	movs	r1, #20
   be318:	4604      	mov	r4, r0
   be31a:	f7f5 fec0 	bl	b409e <_ZdlPvj>
   be31e:	4620      	mov	r0, r4
   be320:	bd10      	pop	{r4, pc}
	...

000be324 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   be324:	b510      	push	{r4, lr}
   be326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be32a:	4604      	mov	r4, r0
   be32c:	4608      	mov	r0, r1
   be32e:	4611      	mov	r1, r2
   be330:	2200      	movs	r2, #0
   be332:	e9c4 2301 	strd	r2, r3, [r4, #4]
   be336:	4b04      	ldr	r3, [pc, #16]	; (be348 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   be338:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be33a:	2301      	movs	r3, #1
  _serial = serial;
   be33c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be33e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   be340:	f7fc fec6 	bl	bb0d0 <hal_usart_init_ex>
}
   be344:	4620      	mov	r0, r4
   be346:	bd10      	pop	{r4, pc}
   be348:	000c1088 	.word	0x000c1088

000be34c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   be34c:	7c00      	ldrb	r0, [r0, #16]
   be34e:	2300      	movs	r3, #0
   be350:	f7fc beb6 	b.w	bb0c0 <hal_usart_begin_config>

000be354 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   be354:	2200      	movs	r2, #0
   be356:	f7ff bff9 	b.w	be34c <_ZN11USARTSerial5beginEmm>

000be35a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   be35a:	7c00      	ldrb	r0, [r0, #16]
   be35c:	f7fc be70 	b.w	bb040 <hal_usart_end>

000be360 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   be360:	7441      	strb	r1, [r0, #17]
}
   be362:	4770      	bx	lr

000be364 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be364:	4770      	bx	lr

000be366 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   be366:	4770      	bx	lr

000be368 <_ZN9USBSerial4readEv>:
{
   be368:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   be36a:	2100      	movs	r1, #0
   be36c:	7c00      	ldrb	r0, [r0, #16]
   be36e:	f7fc fedf 	bl	bb130 <HAL_USB_USART_Receive_Data>
}
   be372:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be376:	bd08      	pop	{r3, pc}

000be378 <_ZN9USBSerial4peekEv>:
{
   be378:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   be37a:	2101      	movs	r1, #1
   be37c:	7c00      	ldrb	r0, [r0, #16]
   be37e:	f7fc fed7 	bl	bb130 <HAL_USB_USART_Receive_Data>
}
   be382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   be386:	bd08      	pop	{r3, pc}

000be388 <_ZN9USBSerial17availableForWriteEv>:
{
   be388:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   be38a:	7c00      	ldrb	r0, [r0, #16]
   be38c:	f7fc fec8 	bl	bb120 <HAL_USB_USART_Available_Data_For_Write>
}
   be390:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be394:	bd08      	pop	{r3, pc}

000be396 <_ZN9USBSerial9availableEv>:
{
   be396:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   be398:	7c00      	ldrb	r0, [r0, #16]
   be39a:	f7fc feb9 	bl	bb110 <HAL_USB_USART_Available_Data>
}
   be39e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   be3a2:	bd08      	pop	{r3, pc}

000be3a4 <_ZN9USBSerial5writeEh>:
{
   be3a4:	b513      	push	{r0, r1, r4, lr}
   be3a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be3a8:	7c00      	ldrb	r0, [r0, #16]
{
   be3aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   be3ac:	f7fc feb8 	bl	bb120 <HAL_USB_USART_Available_Data_For_Write>
   be3b0:	2800      	cmp	r0, #0
   be3b2:	9901      	ldr	r1, [sp, #4]
   be3b4:	dc01      	bgt.n	be3ba <_ZN9USBSerial5writeEh+0x16>
   be3b6:	7c60      	ldrb	r0, [r4, #17]
   be3b8:	b120      	cbz	r0, be3c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   be3ba:	7c20      	ldrb	r0, [r4, #16]
   be3bc:	f7fc fec0 	bl	bb140 <HAL_USB_USART_Send_Data>
   be3c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   be3c4:	b002      	add	sp, #8
   be3c6:	bd10      	pop	{r4, pc}

000be3c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   be3c8:	7c00      	ldrb	r0, [r0, #16]
   be3ca:	f7fc bec1 	b.w	bb150 <HAL_USB_USART_Flush_Data>

000be3ce <_ZN9USBSerialD0Ev>:
   be3ce:	b510      	push	{r4, lr}
   be3d0:	2114      	movs	r1, #20
   be3d2:	4604      	mov	r4, r0
   be3d4:	f7f5 fe63 	bl	b409e <_ZdlPvj>
   be3d8:	4620      	mov	r0, r4
   be3da:	bd10      	pop	{r4, pc}

000be3dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   be3dc:	b510      	push	{r4, lr}
   be3de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   be3e2:	4604      	mov	r4, r0
   be3e4:	4608      	mov	r0, r1
   be3e6:	2100      	movs	r1, #0
   be3e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   be3ec:	4b04      	ldr	r3, [pc, #16]	; (be400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   be3ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   be3f0:	2301      	movs	r3, #1
  _serial = serial;
   be3f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   be3f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   be3f6:	4611      	mov	r1, r2
   be3f8:	f7fc fe72 	bl	bb0e0 <HAL_USB_USART_Init>
}
   be3fc:	4620      	mov	r0, r4
   be3fe:	bd10      	pop	{r4, pc}
   be400:	000c10b8 	.word	0x000c10b8

000be404 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   be404:	7c00      	ldrb	r0, [r0, #16]
   be406:	2200      	movs	r2, #0
   be408:	f7fc be72 	b.w	bb0f0 <HAL_USB_USART_Begin>

000be40c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   be40c:	7c00      	ldrb	r0, [r0, #16]
   be40e:	f7fc be77 	b.w	bb100 <HAL_USB_USART_End>

000be412 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   be412:	7c00      	ldrb	r0, [r0, #16]
   be414:	f7fc bea4 	b.w	bb160 <HAL_USB_USART_Is_Connected>

000be418 <_Z19acquireSerialBufferv>:
{
   be418:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   be41a:	2214      	movs	r2, #20
{
   be41c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   be41e:	2100      	movs	r1, #0
   be420:	f000 ff60 	bl	bf2e4 <memset>
}
   be424:	4620      	mov	r0, r4
   be426:	bd10      	pop	{r4, pc}

000be428 <_Z16_fetch_usbserialv>:
{
   be428:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be42a:	4c0f      	ldr	r4, [pc, #60]	; (be468 <_Z16_fetch_usbserialv+0x40>)
{
   be42c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   be42e:	a803      	add	r0, sp, #12
   be430:	f7ff fff2 	bl	be418 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   be434:	7821      	ldrb	r1, [r4, #0]
   be436:	f3bf 8f5b 	dmb	ish
   be43a:	f011 0101 	ands.w	r1, r1, #1
   be43e:	d10f      	bne.n	be460 <_Z16_fetch_usbserialv+0x38>
   be440:	4620      	mov	r0, r4
   be442:	9101      	str	r1, [sp, #4]
   be444:	f7f5 fe3a 	bl	b40bc <__cxa_guard_acquire>
   be448:	9901      	ldr	r1, [sp, #4]
   be44a:	b148      	cbz	r0, be460 <_Z16_fetch_usbserialv+0x38>
   be44c:	aa03      	add	r2, sp, #12
   be44e:	4807      	ldr	r0, [pc, #28]	; (be46c <_Z16_fetch_usbserialv+0x44>)
   be450:	f7ff ffc4 	bl	be3dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   be454:	4620      	mov	r0, r4
   be456:	f7f5 fe36 	bl	b40c6 <__cxa_guard_release>
   be45a:	4805      	ldr	r0, [pc, #20]	; (be470 <_Z16_fetch_usbserialv+0x48>)
   be45c:	f000 feee 	bl	bf23c <atexit>
	return _usbserial;
}
   be460:	4802      	ldr	r0, [pc, #8]	; (be46c <_Z16_fetch_usbserialv+0x44>)
   be462:	b008      	add	sp, #32
   be464:	bd10      	pop	{r4, pc}
   be466:	bf00      	nop
   be468:	2003e6f0 	.word	0x2003e6f0
   be46c:	2003e6f4 	.word	0x2003e6f4
   be470:	000be365 	.word	0x000be365

000be474 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   be474:	4b01      	ldr	r3, [pc, #4]	; (be47c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   be476:	6018      	str	r0, [r3, #0]
    }, nullptr);
   be478:	4770      	bx	lr
   be47a:	bf00      	nop
   be47c:	2003de84 	.word	0x2003de84

000be480 <serialEventRun>:
{
   be480:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   be482:	4b0b      	ldr	r3, [pc, #44]	; (be4b0 <serialEventRun+0x30>)
   be484:	b143      	cbz	r3, be498 <serialEventRun+0x18>
   be486:	f7ff ffcf 	bl	be428 <_Z16_fetch_usbserialv>
   be48a:	6803      	ldr	r3, [r0, #0]
   be48c:	691b      	ldr	r3, [r3, #16]
   be48e:	4798      	blx	r3
   be490:	2800      	cmp	r0, #0
   be492:	dd01      	ble.n	be498 <serialEventRun+0x18>
        serialEvent();
   be494:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   be498:	4b06      	ldr	r3, [pc, #24]	; (be4b4 <serialEventRun+0x34>)
   be49a:	b143      	cbz	r3, be4ae <serialEventRun+0x2e>
   be49c:	f000 f9c2 	bl	be824 <_Z22__fetch_global_Serial1v>
   be4a0:	6803      	ldr	r3, [r0, #0]
   be4a2:	691b      	ldr	r3, [r3, #16]
   be4a4:	4798      	blx	r3
   be4a6:	2800      	cmp	r0, #0
   be4a8:	dd01      	ble.n	be4ae <serialEventRun+0x2e>
        serialEvent1();
   be4aa:	f3af 8000 	nop.w
}
   be4ae:	bd08      	pop	{r3, pc}
	...

000be4b8 <_post_loop>:
{
   be4b8:	b508      	push	{r3, lr}
	serialEventRun();
   be4ba:	f7ff ffe1 	bl	be480 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   be4be:	f7fc fc2f 	bl	bad20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   be4c2:	4b01      	ldr	r3, [pc, #4]	; (be4c8 <_post_loop+0x10>)
   be4c4:	6018      	str	r0, [r3, #0]
}
   be4c6:	bd08      	pop	{r3, pc}
   be4c8:	2003e710 	.word	0x2003e710

000be4cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be4cc:	4805      	ldr	r0, [pc, #20]	; (be4e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   be4ce:	4a06      	ldr	r2, [pc, #24]	; (be4e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   be4d0:	4906      	ldr	r1, [pc, #24]	; (be4ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   be4d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   be4d4:	1a12      	subs	r2, r2, r0
   be4d6:	f000 fedd 	bl	bf294 <memcpy>
    __backup_sram_signature = signature;
   be4da:	4b05      	ldr	r3, [pc, #20]	; (be4f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   be4dc:	4a05      	ldr	r2, [pc, #20]	; (be4f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   be4de:	601a      	str	r2, [r3, #0]
}
   be4e0:	bd08      	pop	{r3, pc}
   be4e2:	bf00      	nop
   be4e4:	2003f400 	.word	0x2003f400
   be4e8:	2003f404 	.word	0x2003f404
   be4ec:	000c1374 	.word	0x000c1374
   be4f0:	2003f400 	.word	0x2003f400
   be4f4:	9a271c1e 	.word	0x9a271c1e

000be4f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   be4f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be4fa:	2300      	movs	r3, #0
   be4fc:	9300      	str	r3, [sp, #0]
   be4fe:	461a      	mov	r2, r3
   be500:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be504:	f7fc feb8 	bl	bb278 <system_ctrl_set_result>
}
   be508:	b003      	add	sp, #12
   be50a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000be510 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   be510:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   be512:	8843      	ldrh	r3, [r0, #2]
   be514:	2b0a      	cmp	r3, #10
   be516:	d008      	beq.n	be52a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   be518:	2b50      	cmp	r3, #80	; 0x50
   be51a:	d10b      	bne.n	be534 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   be51c:	4b09      	ldr	r3, [pc, #36]	; (be544 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   be51e:	681b      	ldr	r3, [r3, #0]
   be520:	b14b      	cbz	r3, be536 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   be522:	b003      	add	sp, #12
   be524:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   be528:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   be52a:	f7ff ffe5 	bl	be4f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   be52e:	b003      	add	sp, #12
   be530:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   be534:	2300      	movs	r3, #0
   be536:	9300      	str	r3, [sp, #0]
   be538:	461a      	mov	r2, r3
   be53a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   be53e:	f7fc fe9b 	bl	bb278 <system_ctrl_set_result>
}
   be542:	e7f4      	b.n	be52e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   be544:	2003e70c 	.word	0x2003e70c

000be548 <module_user_init_hook>:
{
   be548:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   be54a:	4812      	ldr	r0, [pc, #72]	; (be594 <module_user_init_hook+0x4c>)
   be54c:	2100      	movs	r1, #0
   be54e:	f7fc ffd3 	bl	bb4f8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   be552:	4b11      	ldr	r3, [pc, #68]	; (be598 <module_user_init_hook+0x50>)
   be554:	681a      	ldr	r2, [r3, #0]
   be556:	4b11      	ldr	r3, [pc, #68]	; (be59c <module_user_init_hook+0x54>)
   be558:	429a      	cmp	r2, r3
   be55a:	4b11      	ldr	r3, [pc, #68]	; (be5a0 <module_user_init_hook+0x58>)
   be55c:	bf0c      	ite	eq
   be55e:	2201      	moveq	r2, #1
   be560:	2200      	movne	r2, #0
   be562:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   be564:	d001      	beq.n	be56a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   be566:	f7ff ffb1 	bl	be4cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   be56a:	f7fc fbc1 	bl	bacf0 <HAL_RNG_GetRandomNumber>
   be56e:	4604      	mov	r4, r0
    srand(seed);
   be570:	f000 fec0 	bl	bf2f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   be574:	4b0b      	ldr	r3, [pc, #44]	; (be5a4 <module_user_init_hook+0x5c>)
   be576:	b113      	cbz	r3, be57e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   be578:	4620      	mov	r0, r4
   be57a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   be57e:	2100      	movs	r1, #0
   be580:	4808      	ldr	r0, [pc, #32]	; (be5a4 <module_user_init_hook+0x5c>)
   be582:	f7fc fef1 	bl	bb368 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   be586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   be58a:	4807      	ldr	r0, [pc, #28]	; (be5a8 <module_user_init_hook+0x60>)
   be58c:	2100      	movs	r1, #0
   be58e:	f7fc be69 	b.w	bb264 <system_ctrl_set_app_request_handler>
   be592:	bf00      	nop
   be594:	000be475 	.word	0x000be475
   be598:	2003f400 	.word	0x2003f400
   be59c:	9a271c1e 	.word	0x9a271c1e
   be5a0:	2003e708 	.word	0x2003e708
   be5a4:	00000000 	.word	0x00000000
   be5a8:	000be511 	.word	0x000be511

000be5ac <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   be5ac:	b508      	push	{r3, lr}
   be5ae:	4b02      	ldr	r3, [pc, #8]	; (be5b8 <spark_protocol_instance+0xc>)
   be5b0:	681b      	ldr	r3, [r3, #0]
   be5b2:	681b      	ldr	r3, [r3, #0]
   be5b4:	9301      	str	r3, [sp, #4]
   be5b6:	bd08      	pop	{r3, pc}
   be5b8:	0003025c 	.word	0x0003025c

000be5bc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   be5bc:	b508      	push	{r3, lr}
   be5be:	4b02      	ldr	r3, [pc, #8]	; (be5c8 <spark_protocol_set_product_id+0xc>)
   be5c0:	681b      	ldr	r3, [r3, #0]
   be5c2:	685b      	ldr	r3, [r3, #4]
   be5c4:	9301      	str	r3, [sp, #4]
   be5c6:	bd08      	pop	{r3, pc}
   be5c8:	0003025c 	.word	0x0003025c

000be5cc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   be5cc:	b508      	push	{r3, lr}
   be5ce:	4b02      	ldr	r3, [pc, #8]	; (be5d8 <spark_protocol_set_product_firmware_version+0xc>)
   be5d0:	681b      	ldr	r3, [r3, #0]
   be5d2:	689b      	ldr	r3, [r3, #8]
   be5d4:	9301      	str	r3, [sp, #4]
   be5d6:	bd08      	pop	{r3, pc}
   be5d8:	0003025c 	.word	0x0003025c

000be5dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   be5dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   be5de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   be5e0:	d902      	bls.n	be5e8 <pinAvailable+0xc>
    return false;
   be5e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   be5e4:	b002      	add	sp, #8
   be5e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   be5e8:	f1a0 030b 	sub.w	r3, r0, #11
   be5ec:	2b02      	cmp	r3, #2
   be5ee:	d81a      	bhi.n	be626 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   be5f0:	4c17      	ldr	r4, [pc, #92]	; (be650 <pinAvailable+0x74>)
   be5f2:	7821      	ldrb	r1, [r4, #0]
   be5f4:	f3bf 8f5b 	dmb	ish
   be5f8:	f011 0101 	ands.w	r1, r1, #1
   be5fc:	d10b      	bne.n	be616 <pinAvailable+0x3a>
   be5fe:	4620      	mov	r0, r4
   be600:	9101      	str	r1, [sp, #4]
   be602:	f7f5 fd5b 	bl	b40bc <__cxa_guard_acquire>
   be606:	9901      	ldr	r1, [sp, #4]
   be608:	b128      	cbz	r0, be616 <pinAvailable+0x3a>
   be60a:	4812      	ldr	r0, [pc, #72]	; (be654 <pinAvailable+0x78>)
   be60c:	f7ff f9c6 	bl	bd99c <_ZN8SPIClassC1E19hal_spi_interface_t>
   be610:	4620      	mov	r0, r4
   be612:	f7f5 fd58 	bl	b40c6 <__cxa_guard_release>
   be616:	4b0f      	ldr	r3, [pc, #60]	; (be654 <pinAvailable+0x78>)
   be618:	7818      	ldrb	r0, [r3, #0]
   be61a:	f7fc fc89 	bl	baf30 <hal_spi_is_enabled>
   be61e:	2800      	cmp	r0, #0
   be620:	d1df      	bne.n	be5e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   be622:	2001      	movs	r0, #1
   be624:	e7de      	b.n	be5e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   be626:	2801      	cmp	r0, #1
   be628:	d809      	bhi.n	be63e <pinAvailable+0x62>
   be62a:	f000 f897 	bl	be75c <_Z19__fetch_global_Wirev>
   be62e:	2100      	movs	r1, #0
   be630:	7c00      	ldrb	r0, [r0, #16]
   be632:	f7fc fc1d 	bl	bae70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   be636:	f080 0001 	eor.w	r0, r0, #1
   be63a:	b2c0      	uxtb	r0, r0
   be63c:	e7d2      	b.n	be5e4 <pinAvailable+0x8>
   be63e:	3809      	subs	r0, #9
   be640:	2801      	cmp	r0, #1
   be642:	d8ee      	bhi.n	be622 <pinAvailable+0x46>
   be644:	f000 f8ee 	bl	be824 <_Z22__fetch_global_Serial1v>
   be648:	7c00      	ldrb	r0, [r0, #16]
   be64a:	f7fc fd29 	bl	bb0a0 <hal_usart_is_enabled>
   be64e:	e7f2      	b.n	be636 <pinAvailable+0x5a>
   be650:	2003e44c 	.word	0x2003e44c
   be654:	2003e450 	.word	0x2003e450

000be658 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be658:	2823      	cmp	r0, #35	; 0x23
{
   be65a:	b538      	push	{r3, r4, r5, lr}
   be65c:	4604      	mov	r4, r0
   be65e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   be660:	d80a      	bhi.n	be678 <pinMode+0x20>
   be662:	29ff      	cmp	r1, #255	; 0xff
   be664:	d008      	beq.n	be678 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   be666:	f7ff ffb9 	bl	be5dc <pinAvailable>
   be66a:	b128      	cbz	r0, be678 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   be66c:	4629      	mov	r1, r5
   be66e:	4620      	mov	r0, r4
}
   be670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   be674:	f7fc bb84 	b.w	bad80 <HAL_Pin_Mode>
}
   be678:	bd38      	pop	{r3, r4, r5, pc}

000be67a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   be67a:	b538      	push	{r3, r4, r5, lr}
   be67c:	4604      	mov	r4, r0
   be67e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be680:	f7fc fb86 	bl	bad90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   be684:	28ff      	cmp	r0, #255	; 0xff
   be686:	d010      	beq.n	be6aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   be688:	2806      	cmp	r0, #6
   be68a:	d804      	bhi.n	be696 <digitalWrite+0x1c>
   be68c:	234d      	movs	r3, #77	; 0x4d
   be68e:	fa23 f000 	lsr.w	r0, r3, r0
   be692:	07c3      	lsls	r3, r0, #31
   be694:	d409      	bmi.n	be6aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   be696:	4620      	mov	r0, r4
   be698:	f7ff ffa0 	bl	be5dc <pinAvailable>
   be69c:	b128      	cbz	r0, be6aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   be69e:	4629      	mov	r1, r5
   be6a0:	4620      	mov	r0, r4
}
   be6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   be6a6:	f7fc bb7b 	b.w	bada0 <HAL_GPIO_Write>
}
   be6aa:	bd38      	pop	{r3, r4, r5, pc}

000be6ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   be6ac:	b510      	push	{r4, lr}
   be6ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   be6b0:	f7fc fb6e 	bl	bad90 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   be6b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   be6b6:	b2db      	uxtb	r3, r3
   be6b8:	2b01      	cmp	r3, #1
   be6ba:	d908      	bls.n	be6ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   be6bc:	4620      	mov	r0, r4
   be6be:	f7ff ff8d 	bl	be5dc <pinAvailable>
   be6c2:	b120      	cbz	r0, be6ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   be6c4:	4620      	mov	r0, r4
}
   be6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   be6ca:	f7fc bb71 	b.w	badb0 <HAL_GPIO_Read>
}
   be6ce:	2000      	movs	r0, #0
   be6d0:	bd10      	pop	{r4, pc}

000be6d2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   be6d2:	280d      	cmp	r0, #13
{
   be6d4:	b510      	push	{r4, lr}
   be6d6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   be6d8:	bf9c      	itt	ls
   be6da:	340e      	addls	r4, #14
   be6dc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   be6de:	4620      	mov	r0, r4
   be6e0:	f7ff ff7c 	bl	be5dc <pinAvailable>
   be6e4:	b150      	cbz	r0, be6fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be6e6:	2103      	movs	r1, #3
   be6e8:	4620      	mov	r0, r4
   be6ea:	f7fc fb41 	bl	bad70 <HAL_Validate_Pin_Function>
   be6ee:	2803      	cmp	r0, #3
   be6f0:	d104      	bne.n	be6fc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be6f2:	4620      	mov	r0, r4
}
   be6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be6f8:	f7fc bb72 	b.w	bade0 <hal_adc_read>
}
   be6fc:	2000      	movs	r0, #0
   be6fe:	bd10      	pop	{r4, pc}

000be700 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be700:	4770      	bx	lr

000be702 <__tcf_1>:
   be702:	4770      	bx	lr

000be704 <_Z17acquireWireBufferv>:
{
   be704:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be706:	2520      	movs	r5, #32
   be708:	2314      	movs	r3, #20
{
   be70a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be70c:	6003      	str	r3, [r0, #0]
   be70e:	6085      	str	r5, [r0, #8]
   be710:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be712:	4906      	ldr	r1, [pc, #24]	; (be72c <_Z17acquireWireBufferv+0x28>)
   be714:	4628      	mov	r0, r5
   be716:	f000 f8ab 	bl	be870 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be71a:	4904      	ldr	r1, [pc, #16]	; (be72c <_Z17acquireWireBufferv+0x28>)
	};
   be71c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be71e:	4628      	mov	r0, r5
   be720:	f000 f8a6 	bl	be870 <_ZnajRKSt9nothrow_t>
	};
   be724:	60e0      	str	r0, [r4, #12]
}
   be726:	4620      	mov	r0, r4
   be728:	bd38      	pop	{r3, r4, r5, pc}
   be72a:	bf00      	nop
   be72c:	000c10e0 	.word	0x000c10e0

000be730 <_Z18acquireWire1Bufferv>:
   be730:	b538      	push	{r3, r4, r5, lr}
   be732:	2520      	movs	r5, #32
   be734:	2314      	movs	r3, #20
   be736:	4604      	mov	r4, r0
   be738:	6003      	str	r3, [r0, #0]
   be73a:	6085      	str	r5, [r0, #8]
   be73c:	6105      	str	r5, [r0, #16]
   be73e:	4906      	ldr	r1, [pc, #24]	; (be758 <_Z18acquireWire1Bufferv+0x28>)
   be740:	4628      	mov	r0, r5
   be742:	f000 f895 	bl	be870 <_ZnajRKSt9nothrow_t>
   be746:	4904      	ldr	r1, [pc, #16]	; (be758 <_Z18acquireWire1Bufferv+0x28>)
   be748:	6060      	str	r0, [r4, #4]
   be74a:	4628      	mov	r0, r5
   be74c:	f000 f890 	bl	be870 <_ZnajRKSt9nothrow_t>
   be750:	60e0      	str	r0, [r4, #12]
   be752:	4620      	mov	r0, r4
   be754:	bd38      	pop	{r3, r4, r5, pc}
   be756:	bf00      	nop
   be758:	000c10e0 	.word	0x000c10e0

000be75c <_Z19__fetch_global_Wirev>:
{
   be75c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be75e:	4d0e      	ldr	r5, [pc, #56]	; (be798 <_Z19__fetch_global_Wirev+0x3c>)
   be760:	7829      	ldrb	r1, [r5, #0]
   be762:	f3bf 8f5b 	dmb	ish
   be766:	f011 0401 	ands.w	r4, r1, #1
{
   be76a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be76c:	d111      	bne.n	be792 <_Z19__fetch_global_Wirev+0x36>
   be76e:	4628      	mov	r0, r5
   be770:	f7f5 fca4 	bl	b40bc <__cxa_guard_acquire>
   be774:	b168      	cbz	r0, be792 <_Z19__fetch_global_Wirev+0x36>
   be776:	a801      	add	r0, sp, #4
   be778:	f7ff ffc4 	bl	be704 <_Z17acquireWireBufferv>
   be77c:	aa01      	add	r2, sp, #4
   be77e:	4621      	mov	r1, r4
   be780:	4806      	ldr	r0, [pc, #24]	; (be79c <_Z19__fetch_global_Wirev+0x40>)
   be782:	f7fd fbdf 	bl	bbf44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be786:	4628      	mov	r0, r5
   be788:	f7f5 fc9d 	bl	b40c6 <__cxa_guard_release>
   be78c:	4804      	ldr	r0, [pc, #16]	; (be7a0 <_Z19__fetch_global_Wirev+0x44>)
   be78e:	f000 fd55 	bl	bf23c <atexit>
	return wire;
}
   be792:	4802      	ldr	r0, [pc, #8]	; (be79c <_Z19__fetch_global_Wirev+0x40>)
   be794:	b007      	add	sp, #28
   be796:	bd30      	pop	{r4, r5, pc}
   be798:	2003e714 	.word	0x2003e714
   be79c:	2003e71c 	.word	0x2003e71c
   be7a0:	000be701 	.word	0x000be701

000be7a4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   be7a4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be7a6:	4c0e      	ldr	r4, [pc, #56]	; (be7e0 <_Z20__fetch_global_Wire1v+0x3c>)
   be7a8:	7823      	ldrb	r3, [r4, #0]
   be7aa:	f3bf 8f5b 	dmb	ish
   be7ae:	07db      	lsls	r3, r3, #31
{
   be7b0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   be7b2:	d411      	bmi.n	be7d8 <_Z20__fetch_global_Wire1v+0x34>
   be7b4:	4620      	mov	r0, r4
   be7b6:	f7f5 fc81 	bl	b40bc <__cxa_guard_acquire>
   be7ba:	b168      	cbz	r0, be7d8 <_Z20__fetch_global_Wire1v+0x34>
   be7bc:	a801      	add	r0, sp, #4
   be7be:	f7ff ffb7 	bl	be730 <_Z18acquireWire1Bufferv>
   be7c2:	aa01      	add	r2, sp, #4
   be7c4:	2101      	movs	r1, #1
   be7c6:	4807      	ldr	r0, [pc, #28]	; (be7e4 <_Z20__fetch_global_Wire1v+0x40>)
   be7c8:	f7fd fbbc 	bl	bbf44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be7cc:	4620      	mov	r0, r4
   be7ce:	f7f5 fc7a 	bl	b40c6 <__cxa_guard_release>
   be7d2:	4805      	ldr	r0, [pc, #20]	; (be7e8 <_Z20__fetch_global_Wire1v+0x44>)
   be7d4:	f000 fd32 	bl	bf23c <atexit>
	return wire;
}
   be7d8:	4802      	ldr	r0, [pc, #8]	; (be7e4 <_Z20__fetch_global_Wire1v+0x40>)
   be7da:	b006      	add	sp, #24
   be7dc:	bd10      	pop	{r4, pc}
   be7de:	bf00      	nop
   be7e0:	2003e718 	.word	0x2003e718
   be7e4:	2003e730 	.word	0x2003e730
   be7e8:	000be703 	.word	0x000be703

000be7ec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be7ec:	4770      	bx	lr
	...

000be7f0 <_Z20acquireSerial1Bufferv>:
{
   be7f0:	b538      	push	{r3, r4, r5, lr}
   be7f2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be7f4:	2514      	movs	r5, #20
   be7f6:	462a      	mov	r2, r5
   be7f8:	2100      	movs	r1, #0
   be7fa:	f000 fd73 	bl	bf2e4 <memset>
   be7fe:	8025      	strh	r5, [r4, #0]
   be800:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be802:	4907      	ldr	r1, [pc, #28]	; (be820 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be804:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be806:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be808:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be80a:	f000 f831 	bl	be870 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be80e:	4904      	ldr	r1, [pc, #16]	; (be820 <_Z20acquireSerial1Bufferv+0x30>)
    };
   be810:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be812:	4628      	mov	r0, r5
   be814:	f000 f82c 	bl	be870 <_ZnajRKSt9nothrow_t>
    };
   be818:	60e0      	str	r0, [r4, #12]
}
   be81a:	4620      	mov	r0, r4
   be81c:	bd38      	pop	{r3, r4, r5, pc}
   be81e:	bf00      	nop
   be820:	000c10e0 	.word	0x000c10e0

000be824 <_Z22__fetch_global_Serial1v>:
{
   be824:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be826:	4d0e      	ldr	r5, [pc, #56]	; (be860 <_Z22__fetch_global_Serial1v+0x3c>)
   be828:	7829      	ldrb	r1, [r5, #0]
   be82a:	f3bf 8f5b 	dmb	ish
   be82e:	f011 0401 	ands.w	r4, r1, #1
{
   be832:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be834:	d111      	bne.n	be85a <_Z22__fetch_global_Serial1v+0x36>
   be836:	4628      	mov	r0, r5
   be838:	f7f5 fc40 	bl	b40bc <__cxa_guard_acquire>
   be83c:	b168      	cbz	r0, be85a <_Z22__fetch_global_Serial1v+0x36>
   be83e:	a801      	add	r0, sp, #4
   be840:	f7ff ffd6 	bl	be7f0 <_Z20acquireSerial1Bufferv>
   be844:	aa01      	add	r2, sp, #4
   be846:	4621      	mov	r1, r4
   be848:	4806      	ldr	r0, [pc, #24]	; (be864 <_Z22__fetch_global_Serial1v+0x40>)
   be84a:	f7ff fd6b 	bl	be324 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be84e:	4628      	mov	r0, r5
   be850:	f7f5 fc39 	bl	b40c6 <__cxa_guard_release>
   be854:	4804      	ldr	r0, [pc, #16]	; (be868 <_Z22__fetch_global_Serial1v+0x44>)
   be856:	f000 fcf1 	bl	bf23c <atexit>
    return serial1;
}
   be85a:	4802      	ldr	r0, [pc, #8]	; (be864 <_Z22__fetch_global_Serial1v+0x40>)
   be85c:	b007      	add	sp, #28
   be85e:	bd30      	pop	{r4, r5, pc}
   be860:	2003e744 	.word	0x2003e744
   be864:	2003e748 	.word	0x2003e748
   be868:	000be7ed 	.word	0x000be7ed

000be86c <_ZnwjRKSt9nothrow_t>:
   be86c:	f7f5 bc13 	b.w	b4096 <_Znwj>

000be870 <_ZnajRKSt9nothrow_t>:
   be870:	f7f5 bc13 	b.w	b409a <_Znaj>

000be874 <_ZSt17__throw_bad_allocv>:
   be874:	b508      	push	{r3, lr}
   be876:	f7fc fe1f 	bl	bb4b8 <abort>

000be87a <_ZSt20__throw_length_errorPKc>:
   be87a:	b508      	push	{r3, lr}
   be87c:	f7fc fe1c 	bl	bb4b8 <abort>

000be880 <_ZSt25__throw_bad_function_callv>:
   be880:	b508      	push	{r3, lr}
   be882:	f7fc fe19 	bl	bb4b8 <abort>
	...

000be888 <__aeabi_drsub>:
   be888:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be88c:	e002      	b.n	be894 <__adddf3>
   be88e:	bf00      	nop

000be890 <__aeabi_dsub>:
   be890:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be894 <__adddf3>:
   be894:	b530      	push	{r4, r5, lr}
   be896:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be89a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be89e:	ea94 0f05 	teq	r4, r5
   be8a2:	bf08      	it	eq
   be8a4:	ea90 0f02 	teqeq	r0, r2
   be8a8:	bf1f      	itttt	ne
   be8aa:	ea54 0c00 	orrsne.w	ip, r4, r0
   be8ae:	ea55 0c02 	orrsne.w	ip, r5, r2
   be8b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be8b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be8ba:	f000 80e2 	beq.w	bea82 <__adddf3+0x1ee>
   be8be:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be8c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be8c6:	bfb8      	it	lt
   be8c8:	426d      	neglt	r5, r5
   be8ca:	dd0c      	ble.n	be8e6 <__adddf3+0x52>
   be8cc:	442c      	add	r4, r5
   be8ce:	ea80 0202 	eor.w	r2, r0, r2
   be8d2:	ea81 0303 	eor.w	r3, r1, r3
   be8d6:	ea82 0000 	eor.w	r0, r2, r0
   be8da:	ea83 0101 	eor.w	r1, r3, r1
   be8de:	ea80 0202 	eor.w	r2, r0, r2
   be8e2:	ea81 0303 	eor.w	r3, r1, r3
   be8e6:	2d36      	cmp	r5, #54	; 0x36
   be8e8:	bf88      	it	hi
   be8ea:	bd30      	pophi	{r4, r5, pc}
   be8ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be8f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be8f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be8f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be8fc:	d002      	beq.n	be904 <__adddf3+0x70>
   be8fe:	4240      	negs	r0, r0
   be900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be904:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be908:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be90c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be910:	d002      	beq.n	be918 <__adddf3+0x84>
   be912:	4252      	negs	r2, r2
   be914:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be918:	ea94 0f05 	teq	r4, r5
   be91c:	f000 80a7 	beq.w	bea6e <__adddf3+0x1da>
   be920:	f1a4 0401 	sub.w	r4, r4, #1
   be924:	f1d5 0e20 	rsbs	lr, r5, #32
   be928:	db0d      	blt.n	be946 <__adddf3+0xb2>
   be92a:	fa02 fc0e 	lsl.w	ip, r2, lr
   be92e:	fa22 f205 	lsr.w	r2, r2, r5
   be932:	1880      	adds	r0, r0, r2
   be934:	f141 0100 	adc.w	r1, r1, #0
   be938:	fa03 f20e 	lsl.w	r2, r3, lr
   be93c:	1880      	adds	r0, r0, r2
   be93e:	fa43 f305 	asr.w	r3, r3, r5
   be942:	4159      	adcs	r1, r3
   be944:	e00e      	b.n	be964 <__adddf3+0xd0>
   be946:	f1a5 0520 	sub.w	r5, r5, #32
   be94a:	f10e 0e20 	add.w	lr, lr, #32
   be94e:	2a01      	cmp	r2, #1
   be950:	fa03 fc0e 	lsl.w	ip, r3, lr
   be954:	bf28      	it	cs
   be956:	f04c 0c02 	orrcs.w	ip, ip, #2
   be95a:	fa43 f305 	asr.w	r3, r3, r5
   be95e:	18c0      	adds	r0, r0, r3
   be960:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be968:	d507      	bpl.n	be97a <__adddf3+0xe6>
   be96a:	f04f 0e00 	mov.w	lr, #0
   be96e:	f1dc 0c00 	rsbs	ip, ip, #0
   be972:	eb7e 0000 	sbcs.w	r0, lr, r0
   be976:	eb6e 0101 	sbc.w	r1, lr, r1
   be97a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be97e:	d31b      	bcc.n	be9b8 <__adddf3+0x124>
   be980:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be984:	d30c      	bcc.n	be9a0 <__adddf3+0x10c>
   be986:	0849      	lsrs	r1, r1, #1
   be988:	ea5f 0030 	movs.w	r0, r0, rrx
   be98c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be990:	f104 0401 	add.w	r4, r4, #1
   be994:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be998:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be99c:	f080 809a 	bcs.w	bead4 <__adddf3+0x240>
   be9a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be9a4:	bf08      	it	eq
   be9a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be9aa:	f150 0000 	adcs.w	r0, r0, #0
   be9ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be9b2:	ea41 0105 	orr.w	r1, r1, r5
   be9b6:	bd30      	pop	{r4, r5, pc}
   be9b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be9bc:	4140      	adcs	r0, r0
   be9be:	eb41 0101 	adc.w	r1, r1, r1
   be9c2:	3c01      	subs	r4, #1
   be9c4:	bf28      	it	cs
   be9c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be9ca:	d2e9      	bcs.n	be9a0 <__adddf3+0x10c>
   be9cc:	f091 0f00 	teq	r1, #0
   be9d0:	bf04      	itt	eq
   be9d2:	4601      	moveq	r1, r0
   be9d4:	2000      	moveq	r0, #0
   be9d6:	fab1 f381 	clz	r3, r1
   be9da:	bf08      	it	eq
   be9dc:	3320      	addeq	r3, #32
   be9de:	f1a3 030b 	sub.w	r3, r3, #11
   be9e2:	f1b3 0220 	subs.w	r2, r3, #32
   be9e6:	da0c      	bge.n	bea02 <__adddf3+0x16e>
   be9e8:	320c      	adds	r2, #12
   be9ea:	dd08      	ble.n	be9fe <__adddf3+0x16a>
   be9ec:	f102 0c14 	add.w	ip, r2, #20
   be9f0:	f1c2 020c 	rsb	r2, r2, #12
   be9f4:	fa01 f00c 	lsl.w	r0, r1, ip
   be9f8:	fa21 f102 	lsr.w	r1, r1, r2
   be9fc:	e00c      	b.n	bea18 <__adddf3+0x184>
   be9fe:	f102 0214 	add.w	r2, r2, #20
   bea02:	bfd8      	it	le
   bea04:	f1c2 0c20 	rsble	ip, r2, #32
   bea08:	fa01 f102 	lsl.w	r1, r1, r2
   bea0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bea10:	bfdc      	itt	le
   bea12:	ea41 010c 	orrle.w	r1, r1, ip
   bea16:	4090      	lslle	r0, r2
   bea18:	1ae4      	subs	r4, r4, r3
   bea1a:	bfa2      	ittt	ge
   bea1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bea20:	4329      	orrge	r1, r5
   bea22:	bd30      	popge	{r4, r5, pc}
   bea24:	ea6f 0404 	mvn.w	r4, r4
   bea28:	3c1f      	subs	r4, #31
   bea2a:	da1c      	bge.n	bea66 <__adddf3+0x1d2>
   bea2c:	340c      	adds	r4, #12
   bea2e:	dc0e      	bgt.n	bea4e <__adddf3+0x1ba>
   bea30:	f104 0414 	add.w	r4, r4, #20
   bea34:	f1c4 0220 	rsb	r2, r4, #32
   bea38:	fa20 f004 	lsr.w	r0, r0, r4
   bea3c:	fa01 f302 	lsl.w	r3, r1, r2
   bea40:	ea40 0003 	orr.w	r0, r0, r3
   bea44:	fa21 f304 	lsr.w	r3, r1, r4
   bea48:	ea45 0103 	orr.w	r1, r5, r3
   bea4c:	bd30      	pop	{r4, r5, pc}
   bea4e:	f1c4 040c 	rsb	r4, r4, #12
   bea52:	f1c4 0220 	rsb	r2, r4, #32
   bea56:	fa20 f002 	lsr.w	r0, r0, r2
   bea5a:	fa01 f304 	lsl.w	r3, r1, r4
   bea5e:	ea40 0003 	orr.w	r0, r0, r3
   bea62:	4629      	mov	r1, r5
   bea64:	bd30      	pop	{r4, r5, pc}
   bea66:	fa21 f004 	lsr.w	r0, r1, r4
   bea6a:	4629      	mov	r1, r5
   bea6c:	bd30      	pop	{r4, r5, pc}
   bea6e:	f094 0f00 	teq	r4, #0
   bea72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bea76:	bf06      	itte	eq
   bea78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bea7c:	3401      	addeq	r4, #1
   bea7e:	3d01      	subne	r5, #1
   bea80:	e74e      	b.n	be920 <__adddf3+0x8c>
   bea82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bea86:	bf18      	it	ne
   bea88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bea8c:	d029      	beq.n	beae2 <__adddf3+0x24e>
   bea8e:	ea94 0f05 	teq	r4, r5
   bea92:	bf08      	it	eq
   bea94:	ea90 0f02 	teqeq	r0, r2
   bea98:	d005      	beq.n	beaa6 <__adddf3+0x212>
   bea9a:	ea54 0c00 	orrs.w	ip, r4, r0
   bea9e:	bf04      	itt	eq
   beaa0:	4619      	moveq	r1, r3
   beaa2:	4610      	moveq	r0, r2
   beaa4:	bd30      	pop	{r4, r5, pc}
   beaa6:	ea91 0f03 	teq	r1, r3
   beaaa:	bf1e      	ittt	ne
   beaac:	2100      	movne	r1, #0
   beaae:	2000      	movne	r0, #0
   beab0:	bd30      	popne	{r4, r5, pc}
   beab2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   beab6:	d105      	bne.n	beac4 <__adddf3+0x230>
   beab8:	0040      	lsls	r0, r0, #1
   beaba:	4149      	adcs	r1, r1
   beabc:	bf28      	it	cs
   beabe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   beac2:	bd30      	pop	{r4, r5, pc}
   beac4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   beac8:	bf3c      	itt	cc
   beaca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   beace:	bd30      	popcc	{r4, r5, pc}
   bead0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bead4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bead8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   beadc:	f04f 0000 	mov.w	r0, #0
   beae0:	bd30      	pop	{r4, r5, pc}
   beae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   beae6:	bf1a      	itte	ne
   beae8:	4619      	movne	r1, r3
   beaea:	4610      	movne	r0, r2
   beaec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   beaf0:	bf1c      	itt	ne
   beaf2:	460b      	movne	r3, r1
   beaf4:	4602      	movne	r2, r0
   beaf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   beafa:	bf06      	itte	eq
   beafc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   beb00:	ea91 0f03 	teqeq	r1, r3
   beb04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   beb08:	bd30      	pop	{r4, r5, pc}
   beb0a:	bf00      	nop

000beb0c <__aeabi_ui2d>:
   beb0c:	f090 0f00 	teq	r0, #0
   beb10:	bf04      	itt	eq
   beb12:	2100      	moveq	r1, #0
   beb14:	4770      	bxeq	lr
   beb16:	b530      	push	{r4, r5, lr}
   beb18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   beb1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   beb20:	f04f 0500 	mov.w	r5, #0
   beb24:	f04f 0100 	mov.w	r1, #0
   beb28:	e750      	b.n	be9cc <__adddf3+0x138>
   beb2a:	bf00      	nop

000beb2c <__aeabi_i2d>:
   beb2c:	f090 0f00 	teq	r0, #0
   beb30:	bf04      	itt	eq
   beb32:	2100      	moveq	r1, #0
   beb34:	4770      	bxeq	lr
   beb36:	b530      	push	{r4, r5, lr}
   beb38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   beb3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   beb40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   beb44:	bf48      	it	mi
   beb46:	4240      	negmi	r0, r0
   beb48:	f04f 0100 	mov.w	r1, #0
   beb4c:	e73e      	b.n	be9cc <__adddf3+0x138>
   beb4e:	bf00      	nop

000beb50 <__aeabi_f2d>:
   beb50:	0042      	lsls	r2, r0, #1
   beb52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   beb56:	ea4f 0131 	mov.w	r1, r1, rrx
   beb5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   beb5e:	bf1f      	itttt	ne
   beb60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   beb64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   beb68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   beb6c:	4770      	bxne	lr
   beb6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   beb72:	bf08      	it	eq
   beb74:	4770      	bxeq	lr
   beb76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   beb7a:	bf04      	itt	eq
   beb7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   beb80:	4770      	bxeq	lr
   beb82:	b530      	push	{r4, r5, lr}
   beb84:	f44f 7460 	mov.w	r4, #896	; 0x380
   beb88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   beb8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   beb90:	e71c      	b.n	be9cc <__adddf3+0x138>
   beb92:	bf00      	nop

000beb94 <__aeabi_ul2d>:
   beb94:	ea50 0201 	orrs.w	r2, r0, r1
   beb98:	bf08      	it	eq
   beb9a:	4770      	bxeq	lr
   beb9c:	b530      	push	{r4, r5, lr}
   beb9e:	f04f 0500 	mov.w	r5, #0
   beba2:	e00a      	b.n	bebba <__aeabi_l2d+0x16>

000beba4 <__aeabi_l2d>:
   beba4:	ea50 0201 	orrs.w	r2, r0, r1
   beba8:	bf08      	it	eq
   bebaa:	4770      	bxeq	lr
   bebac:	b530      	push	{r4, r5, lr}
   bebae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bebb2:	d502      	bpl.n	bebba <__aeabi_l2d+0x16>
   bebb4:	4240      	negs	r0, r0
   bebb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bebba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bebbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bebc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bebc6:	f43f aed8 	beq.w	be97a <__adddf3+0xe6>
   bebca:	f04f 0203 	mov.w	r2, #3
   bebce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bebd2:	bf18      	it	ne
   bebd4:	3203      	addne	r2, #3
   bebd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bebda:	bf18      	it	ne
   bebdc:	3203      	addne	r2, #3
   bebde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bebe2:	f1c2 0320 	rsb	r3, r2, #32
   bebe6:	fa00 fc03 	lsl.w	ip, r0, r3
   bebea:	fa20 f002 	lsr.w	r0, r0, r2
   bebee:	fa01 fe03 	lsl.w	lr, r1, r3
   bebf2:	ea40 000e 	orr.w	r0, r0, lr
   bebf6:	fa21 f102 	lsr.w	r1, r1, r2
   bebfa:	4414      	add	r4, r2
   bebfc:	e6bd      	b.n	be97a <__adddf3+0xe6>
   bebfe:	bf00      	nop

000bec00 <__aeabi_dmul>:
   bec00:	b570      	push	{r4, r5, r6, lr}
   bec02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bec06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bec0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bec0e:	bf1d      	ittte	ne
   bec10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bec14:	ea94 0f0c 	teqne	r4, ip
   bec18:	ea95 0f0c 	teqne	r5, ip
   bec1c:	f000 f8de 	bleq	beddc <__aeabi_dmul+0x1dc>
   bec20:	442c      	add	r4, r5
   bec22:	ea81 0603 	eor.w	r6, r1, r3
   bec26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bec2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bec2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bec32:	bf18      	it	ne
   bec34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bec38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bec3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bec40:	d038      	beq.n	becb4 <__aeabi_dmul+0xb4>
   bec42:	fba0 ce02 	umull	ip, lr, r0, r2
   bec46:	f04f 0500 	mov.w	r5, #0
   bec4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bec4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bec52:	fbe0 e503 	umlal	lr, r5, r0, r3
   bec56:	f04f 0600 	mov.w	r6, #0
   bec5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bec5e:	f09c 0f00 	teq	ip, #0
   bec62:	bf18      	it	ne
   bec64:	f04e 0e01 	orrne.w	lr, lr, #1
   bec68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bec6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bec70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bec74:	d204      	bcs.n	bec80 <__aeabi_dmul+0x80>
   bec76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bec7a:	416d      	adcs	r5, r5
   bec7c:	eb46 0606 	adc.w	r6, r6, r6
   bec80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bec84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bec88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bec8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bec90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bec94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bec98:	bf88      	it	hi
   bec9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bec9e:	d81e      	bhi.n	becde <__aeabi_dmul+0xde>
   beca0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   beca4:	bf08      	it	eq
   beca6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   becaa:	f150 0000 	adcs.w	r0, r0, #0
   becae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   becb2:	bd70      	pop	{r4, r5, r6, pc}
   becb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   becb8:	ea46 0101 	orr.w	r1, r6, r1
   becbc:	ea40 0002 	orr.w	r0, r0, r2
   becc0:	ea81 0103 	eor.w	r1, r1, r3
   becc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   becc8:	bfc2      	ittt	gt
   becca:	ebd4 050c 	rsbsgt	r5, r4, ip
   becce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   becd2:	bd70      	popgt	{r4, r5, r6, pc}
   becd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   becd8:	f04f 0e00 	mov.w	lr, #0
   becdc:	3c01      	subs	r4, #1
   becde:	f300 80ab 	bgt.w	bee38 <__aeabi_dmul+0x238>
   bece2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bece6:	bfde      	ittt	le
   bece8:	2000      	movle	r0, #0
   becea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   becee:	bd70      	pople	{r4, r5, r6, pc}
   becf0:	f1c4 0400 	rsb	r4, r4, #0
   becf4:	3c20      	subs	r4, #32
   becf6:	da35      	bge.n	bed64 <__aeabi_dmul+0x164>
   becf8:	340c      	adds	r4, #12
   becfa:	dc1b      	bgt.n	bed34 <__aeabi_dmul+0x134>
   becfc:	f104 0414 	add.w	r4, r4, #20
   bed00:	f1c4 0520 	rsb	r5, r4, #32
   bed04:	fa00 f305 	lsl.w	r3, r0, r5
   bed08:	fa20 f004 	lsr.w	r0, r0, r4
   bed0c:	fa01 f205 	lsl.w	r2, r1, r5
   bed10:	ea40 0002 	orr.w	r0, r0, r2
   bed14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bed18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bed1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bed20:	fa21 f604 	lsr.w	r6, r1, r4
   bed24:	eb42 0106 	adc.w	r1, r2, r6
   bed28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bed2c:	bf08      	it	eq
   bed2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bed32:	bd70      	pop	{r4, r5, r6, pc}
   bed34:	f1c4 040c 	rsb	r4, r4, #12
   bed38:	f1c4 0520 	rsb	r5, r4, #32
   bed3c:	fa00 f304 	lsl.w	r3, r0, r4
   bed40:	fa20 f005 	lsr.w	r0, r0, r5
   bed44:	fa01 f204 	lsl.w	r2, r1, r4
   bed48:	ea40 0002 	orr.w	r0, r0, r2
   bed4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bed50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bed54:	f141 0100 	adc.w	r1, r1, #0
   bed58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bed5c:	bf08      	it	eq
   bed5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bed62:	bd70      	pop	{r4, r5, r6, pc}
   bed64:	f1c4 0520 	rsb	r5, r4, #32
   bed68:	fa00 f205 	lsl.w	r2, r0, r5
   bed6c:	ea4e 0e02 	orr.w	lr, lr, r2
   bed70:	fa20 f304 	lsr.w	r3, r0, r4
   bed74:	fa01 f205 	lsl.w	r2, r1, r5
   bed78:	ea43 0302 	orr.w	r3, r3, r2
   bed7c:	fa21 f004 	lsr.w	r0, r1, r4
   bed80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bed84:	fa21 f204 	lsr.w	r2, r1, r4
   bed88:	ea20 0002 	bic.w	r0, r0, r2
   bed8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bed90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bed94:	bf08      	it	eq
   bed96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bed9a:	bd70      	pop	{r4, r5, r6, pc}
   bed9c:	f094 0f00 	teq	r4, #0
   beda0:	d10f      	bne.n	bedc2 <__aeabi_dmul+0x1c2>
   beda2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   beda6:	0040      	lsls	r0, r0, #1
   beda8:	eb41 0101 	adc.w	r1, r1, r1
   bedac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bedb0:	bf08      	it	eq
   bedb2:	3c01      	subeq	r4, #1
   bedb4:	d0f7      	beq.n	beda6 <__aeabi_dmul+0x1a6>
   bedb6:	ea41 0106 	orr.w	r1, r1, r6
   bedba:	f095 0f00 	teq	r5, #0
   bedbe:	bf18      	it	ne
   bedc0:	4770      	bxne	lr
   bedc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bedc6:	0052      	lsls	r2, r2, #1
   bedc8:	eb43 0303 	adc.w	r3, r3, r3
   bedcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bedd0:	bf08      	it	eq
   bedd2:	3d01      	subeq	r5, #1
   bedd4:	d0f7      	beq.n	bedc6 <__aeabi_dmul+0x1c6>
   bedd6:	ea43 0306 	orr.w	r3, r3, r6
   bedda:	4770      	bx	lr
   beddc:	ea94 0f0c 	teq	r4, ip
   bede0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bede4:	bf18      	it	ne
   bede6:	ea95 0f0c 	teqne	r5, ip
   bedea:	d00c      	beq.n	bee06 <__aeabi_dmul+0x206>
   bedec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bedf0:	bf18      	it	ne
   bedf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bedf6:	d1d1      	bne.n	bed9c <__aeabi_dmul+0x19c>
   bedf8:	ea81 0103 	eor.w	r1, r1, r3
   bedfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bee00:	f04f 0000 	mov.w	r0, #0
   bee04:	bd70      	pop	{r4, r5, r6, pc}
   bee06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bee0a:	bf06      	itte	eq
   bee0c:	4610      	moveq	r0, r2
   bee0e:	4619      	moveq	r1, r3
   bee10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bee14:	d019      	beq.n	bee4a <__aeabi_dmul+0x24a>
   bee16:	ea94 0f0c 	teq	r4, ip
   bee1a:	d102      	bne.n	bee22 <__aeabi_dmul+0x222>
   bee1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bee20:	d113      	bne.n	bee4a <__aeabi_dmul+0x24a>
   bee22:	ea95 0f0c 	teq	r5, ip
   bee26:	d105      	bne.n	bee34 <__aeabi_dmul+0x234>
   bee28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bee2c:	bf1c      	itt	ne
   bee2e:	4610      	movne	r0, r2
   bee30:	4619      	movne	r1, r3
   bee32:	d10a      	bne.n	bee4a <__aeabi_dmul+0x24a>
   bee34:	ea81 0103 	eor.w	r1, r1, r3
   bee38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bee3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bee40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bee44:	f04f 0000 	mov.w	r0, #0
   bee48:	bd70      	pop	{r4, r5, r6, pc}
   bee4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bee4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bee52:	bd70      	pop	{r4, r5, r6, pc}

000bee54 <__aeabi_ddiv>:
   bee54:	b570      	push	{r4, r5, r6, lr}
   bee56:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bee5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bee5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bee62:	bf1d      	ittte	ne
   bee64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bee68:	ea94 0f0c 	teqne	r4, ip
   bee6c:	ea95 0f0c 	teqne	r5, ip
   bee70:	f000 f8a7 	bleq	befc2 <__aeabi_ddiv+0x16e>
   bee74:	eba4 0405 	sub.w	r4, r4, r5
   bee78:	ea81 0e03 	eor.w	lr, r1, r3
   bee7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bee80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bee84:	f000 8088 	beq.w	bef98 <__aeabi_ddiv+0x144>
   bee88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bee8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bee90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bee94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bee98:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bee9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   beea0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   beea4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   beea8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   beeac:	429d      	cmp	r5, r3
   beeae:	bf08      	it	eq
   beeb0:	4296      	cmpeq	r6, r2
   beeb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   beeb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   beeba:	d202      	bcs.n	beec2 <__aeabi_ddiv+0x6e>
   beebc:	085b      	lsrs	r3, r3, #1
   beebe:	ea4f 0232 	mov.w	r2, r2, rrx
   beec2:	1ab6      	subs	r6, r6, r2
   beec4:	eb65 0503 	sbc.w	r5, r5, r3
   beec8:	085b      	lsrs	r3, r3, #1
   beeca:	ea4f 0232 	mov.w	r2, r2, rrx
   beece:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   beed2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   beed6:	ebb6 0e02 	subs.w	lr, r6, r2
   beeda:	eb75 0e03 	sbcs.w	lr, r5, r3
   beede:	bf22      	ittt	cs
   beee0:	1ab6      	subcs	r6, r6, r2
   beee2:	4675      	movcs	r5, lr
   beee4:	ea40 000c 	orrcs.w	r0, r0, ip
   beee8:	085b      	lsrs	r3, r3, #1
   beeea:	ea4f 0232 	mov.w	r2, r2, rrx
   beeee:	ebb6 0e02 	subs.w	lr, r6, r2
   beef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   beef6:	bf22      	ittt	cs
   beef8:	1ab6      	subcs	r6, r6, r2
   beefa:	4675      	movcs	r5, lr
   beefc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bef00:	085b      	lsrs	r3, r3, #1
   bef02:	ea4f 0232 	mov.w	r2, r2, rrx
   bef06:	ebb6 0e02 	subs.w	lr, r6, r2
   bef0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bef0e:	bf22      	ittt	cs
   bef10:	1ab6      	subcs	r6, r6, r2
   bef12:	4675      	movcs	r5, lr
   bef14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bef18:	085b      	lsrs	r3, r3, #1
   bef1a:	ea4f 0232 	mov.w	r2, r2, rrx
   bef1e:	ebb6 0e02 	subs.w	lr, r6, r2
   bef22:	eb75 0e03 	sbcs.w	lr, r5, r3
   bef26:	bf22      	ittt	cs
   bef28:	1ab6      	subcs	r6, r6, r2
   bef2a:	4675      	movcs	r5, lr
   bef2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bef30:	ea55 0e06 	orrs.w	lr, r5, r6
   bef34:	d018      	beq.n	bef68 <__aeabi_ddiv+0x114>
   bef36:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bef3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bef3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bef42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bef46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bef4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bef4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bef52:	d1c0      	bne.n	beed6 <__aeabi_ddiv+0x82>
   bef54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bef58:	d10b      	bne.n	bef72 <__aeabi_ddiv+0x11e>
   bef5a:	ea41 0100 	orr.w	r1, r1, r0
   bef5e:	f04f 0000 	mov.w	r0, #0
   bef62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bef66:	e7b6      	b.n	beed6 <__aeabi_ddiv+0x82>
   bef68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bef6c:	bf04      	itt	eq
   bef6e:	4301      	orreq	r1, r0
   bef70:	2000      	moveq	r0, #0
   bef72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bef76:	bf88      	it	hi
   bef78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bef7c:	f63f aeaf 	bhi.w	becde <__aeabi_dmul+0xde>
   bef80:	ebb5 0c03 	subs.w	ip, r5, r3
   bef84:	bf04      	itt	eq
   bef86:	ebb6 0c02 	subseq.w	ip, r6, r2
   bef8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bef8e:	f150 0000 	adcs.w	r0, r0, #0
   bef92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bef96:	bd70      	pop	{r4, r5, r6, pc}
   bef98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bef9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   befa0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   befa4:	bfc2      	ittt	gt
   befa6:	ebd4 050c 	rsbsgt	r5, r4, ip
   befaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   befae:	bd70      	popgt	{r4, r5, r6, pc}
   befb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   befb4:	f04f 0e00 	mov.w	lr, #0
   befb8:	3c01      	subs	r4, #1
   befba:	e690      	b.n	becde <__aeabi_dmul+0xde>
   befbc:	ea45 0e06 	orr.w	lr, r5, r6
   befc0:	e68d      	b.n	becde <__aeabi_dmul+0xde>
   befc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   befc6:	ea94 0f0c 	teq	r4, ip
   befca:	bf08      	it	eq
   befcc:	ea95 0f0c 	teqeq	r5, ip
   befd0:	f43f af3b 	beq.w	bee4a <__aeabi_dmul+0x24a>
   befd4:	ea94 0f0c 	teq	r4, ip
   befd8:	d10a      	bne.n	beff0 <__aeabi_ddiv+0x19c>
   befda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   befde:	f47f af34 	bne.w	bee4a <__aeabi_dmul+0x24a>
   befe2:	ea95 0f0c 	teq	r5, ip
   befe6:	f47f af25 	bne.w	bee34 <__aeabi_dmul+0x234>
   befea:	4610      	mov	r0, r2
   befec:	4619      	mov	r1, r3
   befee:	e72c      	b.n	bee4a <__aeabi_dmul+0x24a>
   beff0:	ea95 0f0c 	teq	r5, ip
   beff4:	d106      	bne.n	bf004 <__aeabi_ddiv+0x1b0>
   beff6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   beffa:	f43f aefd 	beq.w	bedf8 <__aeabi_dmul+0x1f8>
   beffe:	4610      	mov	r0, r2
   bf000:	4619      	mov	r1, r3
   bf002:	e722      	b.n	bee4a <__aeabi_dmul+0x24a>
   bf004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bf008:	bf18      	it	ne
   bf00a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bf00e:	f47f aec5 	bne.w	bed9c <__aeabi_dmul+0x19c>
   bf012:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bf016:	f47f af0d 	bne.w	bee34 <__aeabi_dmul+0x234>
   bf01a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bf01e:	f47f aeeb 	bne.w	bedf8 <__aeabi_dmul+0x1f8>
   bf022:	e712      	b.n	bee4a <__aeabi_dmul+0x24a>

000bf024 <__gedf2>:
   bf024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf028:	e006      	b.n	bf038 <__cmpdf2+0x4>
   bf02a:	bf00      	nop

000bf02c <__ledf2>:
   bf02c:	f04f 0c01 	mov.w	ip, #1
   bf030:	e002      	b.n	bf038 <__cmpdf2+0x4>
   bf032:	bf00      	nop

000bf034 <__cmpdf2>:
   bf034:	f04f 0c01 	mov.w	ip, #1
   bf038:	f84d cd04 	str.w	ip, [sp, #-4]!
   bf03c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf048:	bf18      	it	ne
   bf04a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bf04e:	d01b      	beq.n	bf088 <__cmpdf2+0x54>
   bf050:	b001      	add	sp, #4
   bf052:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bf056:	bf0c      	ite	eq
   bf058:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bf05c:	ea91 0f03 	teqne	r1, r3
   bf060:	bf02      	ittt	eq
   bf062:	ea90 0f02 	teqeq	r0, r2
   bf066:	2000      	moveq	r0, #0
   bf068:	4770      	bxeq	lr
   bf06a:	f110 0f00 	cmn.w	r0, #0
   bf06e:	ea91 0f03 	teq	r1, r3
   bf072:	bf58      	it	pl
   bf074:	4299      	cmppl	r1, r3
   bf076:	bf08      	it	eq
   bf078:	4290      	cmpeq	r0, r2
   bf07a:	bf2c      	ite	cs
   bf07c:	17d8      	asrcs	r0, r3, #31
   bf07e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bf082:	f040 0001 	orr.w	r0, r0, #1
   bf086:	4770      	bx	lr
   bf088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf08c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf090:	d102      	bne.n	bf098 <__cmpdf2+0x64>
   bf092:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf096:	d107      	bne.n	bf0a8 <__cmpdf2+0x74>
   bf098:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf09c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf0a0:	d1d6      	bne.n	bf050 <__cmpdf2+0x1c>
   bf0a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf0a6:	d0d3      	beq.n	bf050 <__cmpdf2+0x1c>
   bf0a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   bf0ac:	4770      	bx	lr
   bf0ae:	bf00      	nop

000bf0b0 <__aeabi_cdrcmple>:
   bf0b0:	4684      	mov	ip, r0
   bf0b2:	4610      	mov	r0, r2
   bf0b4:	4662      	mov	r2, ip
   bf0b6:	468c      	mov	ip, r1
   bf0b8:	4619      	mov	r1, r3
   bf0ba:	4663      	mov	r3, ip
   bf0bc:	e000      	b.n	bf0c0 <__aeabi_cdcmpeq>
   bf0be:	bf00      	nop

000bf0c0 <__aeabi_cdcmpeq>:
   bf0c0:	b501      	push	{r0, lr}
   bf0c2:	f7ff ffb7 	bl	bf034 <__cmpdf2>
   bf0c6:	2800      	cmp	r0, #0
   bf0c8:	bf48      	it	mi
   bf0ca:	f110 0f00 	cmnmi.w	r0, #0
   bf0ce:	bd01      	pop	{r0, pc}

000bf0d0 <__aeabi_dcmpeq>:
   bf0d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0d4:	f7ff fff4 	bl	bf0c0 <__aeabi_cdcmpeq>
   bf0d8:	bf0c      	ite	eq
   bf0da:	2001      	moveq	r0, #1
   bf0dc:	2000      	movne	r0, #0
   bf0de:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0e2:	bf00      	nop

000bf0e4 <__aeabi_dcmplt>:
   bf0e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0e8:	f7ff ffea 	bl	bf0c0 <__aeabi_cdcmpeq>
   bf0ec:	bf34      	ite	cc
   bf0ee:	2001      	movcc	r0, #1
   bf0f0:	2000      	movcs	r0, #0
   bf0f2:	f85d fb08 	ldr.w	pc, [sp], #8
   bf0f6:	bf00      	nop

000bf0f8 <__aeabi_dcmple>:
   bf0f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf0fc:	f7ff ffe0 	bl	bf0c0 <__aeabi_cdcmpeq>
   bf100:	bf94      	ite	ls
   bf102:	2001      	movls	r0, #1
   bf104:	2000      	movhi	r0, #0
   bf106:	f85d fb08 	ldr.w	pc, [sp], #8
   bf10a:	bf00      	nop

000bf10c <__aeabi_dcmpge>:
   bf10c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf110:	f7ff ffce 	bl	bf0b0 <__aeabi_cdrcmple>
   bf114:	bf94      	ite	ls
   bf116:	2001      	movls	r0, #1
   bf118:	2000      	movhi	r0, #0
   bf11a:	f85d fb08 	ldr.w	pc, [sp], #8
   bf11e:	bf00      	nop

000bf120 <__aeabi_dcmpgt>:
   bf120:	f84d ed08 	str.w	lr, [sp, #-8]!
   bf124:	f7ff ffc4 	bl	bf0b0 <__aeabi_cdrcmple>
   bf128:	bf34      	ite	cc
   bf12a:	2001      	movcc	r0, #1
   bf12c:	2000      	movcs	r0, #0
   bf12e:	f85d fb08 	ldr.w	pc, [sp], #8
   bf132:	bf00      	nop

000bf134 <__aeabi_dcmpun>:
   bf134:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bf138:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf13c:	d102      	bne.n	bf144 <__aeabi_dcmpun+0x10>
   bf13e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bf142:	d10a      	bne.n	bf15a <__aeabi_dcmpun+0x26>
   bf144:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bf148:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bf14c:	d102      	bne.n	bf154 <__aeabi_dcmpun+0x20>
   bf14e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bf152:	d102      	bne.n	bf15a <__aeabi_dcmpun+0x26>
   bf154:	f04f 0000 	mov.w	r0, #0
   bf158:	4770      	bx	lr
   bf15a:	f04f 0001 	mov.w	r0, #1
   bf15e:	4770      	bx	lr

000bf160 <__aeabi_d2iz>:
   bf160:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bf164:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf168:	d215      	bcs.n	bf196 <__aeabi_d2iz+0x36>
   bf16a:	d511      	bpl.n	bf190 <__aeabi_d2iz+0x30>
   bf16c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf170:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf174:	d912      	bls.n	bf19c <__aeabi_d2iz+0x3c>
   bf176:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf17a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf17e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf182:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bf186:	fa23 f002 	lsr.w	r0, r3, r2
   bf18a:	bf18      	it	ne
   bf18c:	4240      	negne	r0, r0
   bf18e:	4770      	bx	lr
   bf190:	f04f 0000 	mov.w	r0, #0
   bf194:	4770      	bx	lr
   bf196:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf19a:	d105      	bne.n	bf1a8 <__aeabi_d2iz+0x48>
   bf19c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bf1a0:	bf08      	it	eq
   bf1a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bf1a6:	4770      	bx	lr
   bf1a8:	f04f 0000 	mov.w	r0, #0
   bf1ac:	4770      	bx	lr
   bf1ae:	bf00      	nop

000bf1b0 <__aeabi_d2uiz>:
   bf1b0:	004a      	lsls	r2, r1, #1
   bf1b2:	d211      	bcs.n	bf1d8 <__aeabi_d2uiz+0x28>
   bf1b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bf1b8:	d211      	bcs.n	bf1de <__aeabi_d2uiz+0x2e>
   bf1ba:	d50d      	bpl.n	bf1d8 <__aeabi_d2uiz+0x28>
   bf1bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bf1c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bf1c4:	d40e      	bmi.n	bf1e4 <__aeabi_d2uiz+0x34>
   bf1c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bf1ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bf1ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bf1d2:	fa23 f002 	lsr.w	r0, r3, r2
   bf1d6:	4770      	bx	lr
   bf1d8:	f04f 0000 	mov.w	r0, #0
   bf1dc:	4770      	bx	lr
   bf1de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bf1e2:	d102      	bne.n	bf1ea <__aeabi_d2uiz+0x3a>
   bf1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf1e8:	4770      	bx	lr
   bf1ea:	f04f 0000 	mov.w	r0, #0
   bf1ee:	4770      	bx	lr

000bf1f0 <asctime_r>:
   bf1f0:	b510      	push	{r4, lr}
   bf1f2:	460c      	mov	r4, r1
   bf1f4:	6941      	ldr	r1, [r0, #20]
   bf1f6:	6903      	ldr	r3, [r0, #16]
   bf1f8:	6982      	ldr	r2, [r0, #24]
   bf1fa:	b086      	sub	sp, #24
   bf1fc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bf200:	9104      	str	r1, [sp, #16]
   bf202:	6801      	ldr	r1, [r0, #0]
   bf204:	9103      	str	r1, [sp, #12]
   bf206:	6841      	ldr	r1, [r0, #4]
   bf208:	9102      	str	r1, [sp, #8]
   bf20a:	6881      	ldr	r1, [r0, #8]
   bf20c:	9101      	str	r1, [sp, #4]
   bf20e:	68c1      	ldr	r1, [r0, #12]
   bf210:	9100      	str	r1, [sp, #0]
   bf212:	4907      	ldr	r1, [pc, #28]	; (bf230 <asctime_r+0x40>)
   bf214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bf218:	440b      	add	r3, r1
   bf21a:	4906      	ldr	r1, [pc, #24]	; (bf234 <asctime_r+0x44>)
   bf21c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bf220:	440a      	add	r2, r1
   bf222:	4620      	mov	r0, r4
   bf224:	4904      	ldr	r1, [pc, #16]	; (bf238 <asctime_r+0x48>)
   bf226:	f7fc f927 	bl	bb478 <siprintf>
   bf22a:	4620      	mov	r0, r4
   bf22c:	b006      	add	sp, #24
   bf22e:	bd10      	pop	{r4, pc}
   bf230:	000c1116 	.word	0x000c1116
   bf234:	000c1101 	.word	0x000c1101
   bf238:	000c10e1 	.word	0x000c10e1

000bf23c <atexit>:
   bf23c:	2300      	movs	r3, #0
   bf23e:	4601      	mov	r1, r0
   bf240:	461a      	mov	r2, r3
   bf242:	4618      	mov	r0, r3
   bf244:	f000 ba70 	b.w	bf728 <__register_exitproc>

000bf248 <gmtime>:
   bf248:	b538      	push	{r3, r4, r5, lr}
   bf24a:	4b0b      	ldr	r3, [pc, #44]	; (bf278 <gmtime+0x30>)
   bf24c:	681d      	ldr	r5, [r3, #0]
   bf24e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bf250:	4604      	mov	r4, r0
   bf252:	b953      	cbnz	r3, bf26a <gmtime+0x22>
   bf254:	2024      	movs	r0, #36	; 0x24
   bf256:	f7fc f8f7 	bl	bb448 <malloc>
   bf25a:	4602      	mov	r2, r0
   bf25c:	63e8      	str	r0, [r5, #60]	; 0x3c
   bf25e:	b920      	cbnz	r0, bf26a <gmtime+0x22>
   bf260:	4b06      	ldr	r3, [pc, #24]	; (bf27c <gmtime+0x34>)
   bf262:	4807      	ldr	r0, [pc, #28]	; (bf280 <gmtime+0x38>)
   bf264:	2139      	movs	r1, #57	; 0x39
   bf266:	f7fc f93f 	bl	bb4e8 <__assert_func>
   bf26a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bf26c:	4620      	mov	r0, r4
   bf26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf272:	f7fc b959 	b.w	bb528 <gmtime_r>
   bf276:	bf00      	nop
   bf278:	2003de84 	.word	0x2003de84
   bf27c:	000c113a 	.word	0x000c113a
   bf280:	000c1151 	.word	0x000c1151

000bf284 <isprint>:
   bf284:	4b02      	ldr	r3, [pc, #8]	; (bf290 <isprint+0xc>)
   bf286:	4418      	add	r0, r3
   bf288:	7840      	ldrb	r0, [r0, #1]
   bf28a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bf28e:	4770      	bx	lr
   bf290:	000c1203 	.word	0x000c1203

000bf294 <memcpy>:
   bf294:	440a      	add	r2, r1
   bf296:	4291      	cmp	r1, r2
   bf298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bf29c:	d100      	bne.n	bf2a0 <memcpy+0xc>
   bf29e:	4770      	bx	lr
   bf2a0:	b510      	push	{r4, lr}
   bf2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf2a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bf2aa:	4291      	cmp	r1, r2
   bf2ac:	d1f9      	bne.n	bf2a2 <memcpy+0xe>
   bf2ae:	bd10      	pop	{r4, pc}

000bf2b0 <memmove>:
   bf2b0:	4288      	cmp	r0, r1
   bf2b2:	b510      	push	{r4, lr}
   bf2b4:	eb01 0402 	add.w	r4, r1, r2
   bf2b8:	d902      	bls.n	bf2c0 <memmove+0x10>
   bf2ba:	4284      	cmp	r4, r0
   bf2bc:	4623      	mov	r3, r4
   bf2be:	d807      	bhi.n	bf2d0 <memmove+0x20>
   bf2c0:	1e43      	subs	r3, r0, #1
   bf2c2:	42a1      	cmp	r1, r4
   bf2c4:	d008      	beq.n	bf2d8 <memmove+0x28>
   bf2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf2ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   bf2ce:	e7f8      	b.n	bf2c2 <memmove+0x12>
   bf2d0:	4402      	add	r2, r0
   bf2d2:	4601      	mov	r1, r0
   bf2d4:	428a      	cmp	r2, r1
   bf2d6:	d100      	bne.n	bf2da <memmove+0x2a>
   bf2d8:	bd10      	pop	{r4, pc}
   bf2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bf2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bf2e2:	e7f7      	b.n	bf2d4 <memmove+0x24>

000bf2e4 <memset>:
   bf2e4:	4402      	add	r2, r0
   bf2e6:	4603      	mov	r3, r0
   bf2e8:	4293      	cmp	r3, r2
   bf2ea:	d100      	bne.n	bf2ee <memset+0xa>
   bf2ec:	4770      	bx	lr
   bf2ee:	f803 1b01 	strb.w	r1, [r3], #1
   bf2f2:	e7f9      	b.n	bf2e8 <memset+0x4>

000bf2f4 <srand>:
   bf2f4:	b538      	push	{r3, r4, r5, lr}
   bf2f6:	4b10      	ldr	r3, [pc, #64]	; (bf338 <srand+0x44>)
   bf2f8:	681d      	ldr	r5, [r3, #0]
   bf2fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf2fc:	4604      	mov	r4, r0
   bf2fe:	b9b3      	cbnz	r3, bf32e <srand+0x3a>
   bf300:	2018      	movs	r0, #24
   bf302:	f7fc f8a1 	bl	bb448 <malloc>
   bf306:	4602      	mov	r2, r0
   bf308:	63a8      	str	r0, [r5, #56]	; 0x38
   bf30a:	b920      	cbnz	r0, bf316 <srand+0x22>
   bf30c:	4b0b      	ldr	r3, [pc, #44]	; (bf33c <srand+0x48>)
   bf30e:	480c      	ldr	r0, [pc, #48]	; (bf340 <srand+0x4c>)
   bf310:	2142      	movs	r1, #66	; 0x42
   bf312:	f7fc f8e9 	bl	bb4e8 <__assert_func>
   bf316:	490b      	ldr	r1, [pc, #44]	; (bf344 <srand+0x50>)
   bf318:	4b0b      	ldr	r3, [pc, #44]	; (bf348 <srand+0x54>)
   bf31a:	e9c0 1300 	strd	r1, r3, [r0]
   bf31e:	4b0b      	ldr	r3, [pc, #44]	; (bf34c <srand+0x58>)
   bf320:	6083      	str	r3, [r0, #8]
   bf322:	230b      	movs	r3, #11
   bf324:	8183      	strh	r3, [r0, #12]
   bf326:	2100      	movs	r1, #0
   bf328:	2001      	movs	r0, #1
   bf32a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bf32e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bf330:	2200      	movs	r2, #0
   bf332:	611c      	str	r4, [r3, #16]
   bf334:	615a      	str	r2, [r3, #20]
   bf336:	bd38      	pop	{r3, r4, r5, pc}
   bf338:	2003de84 	.word	0x2003de84
   bf33c:	000c113a 	.word	0x000c113a
   bf340:	000c11aa 	.word	0x000c11aa
   bf344:	abcd330e 	.word	0xabcd330e
   bf348:	e66d1234 	.word	0xe66d1234
   bf34c:	0005deec 	.word	0x0005deec

000bf350 <rand>:
   bf350:	4b16      	ldr	r3, [pc, #88]	; (bf3ac <rand+0x5c>)
   bf352:	b510      	push	{r4, lr}
   bf354:	681c      	ldr	r4, [r3, #0]
   bf356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bf358:	b9b3      	cbnz	r3, bf388 <rand+0x38>
   bf35a:	2018      	movs	r0, #24
   bf35c:	f7fc f874 	bl	bb448 <malloc>
   bf360:	63a0      	str	r0, [r4, #56]	; 0x38
   bf362:	b928      	cbnz	r0, bf370 <rand+0x20>
   bf364:	4602      	mov	r2, r0
   bf366:	4b12      	ldr	r3, [pc, #72]	; (bf3b0 <rand+0x60>)
   bf368:	4812      	ldr	r0, [pc, #72]	; (bf3b4 <rand+0x64>)
   bf36a:	214e      	movs	r1, #78	; 0x4e
   bf36c:	f7fc f8bc 	bl	bb4e8 <__assert_func>
   bf370:	4a11      	ldr	r2, [pc, #68]	; (bf3b8 <rand+0x68>)
   bf372:	4b12      	ldr	r3, [pc, #72]	; (bf3bc <rand+0x6c>)
   bf374:	e9c0 2300 	strd	r2, r3, [r0]
   bf378:	4b11      	ldr	r3, [pc, #68]	; (bf3c0 <rand+0x70>)
   bf37a:	6083      	str	r3, [r0, #8]
   bf37c:	230b      	movs	r3, #11
   bf37e:	8183      	strh	r3, [r0, #12]
   bf380:	2201      	movs	r2, #1
   bf382:	2300      	movs	r3, #0
   bf384:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bf388:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bf38a:	4a0e      	ldr	r2, [pc, #56]	; (bf3c4 <rand+0x74>)
   bf38c:	6920      	ldr	r0, [r4, #16]
   bf38e:	6963      	ldr	r3, [r4, #20]
   bf390:	490d      	ldr	r1, [pc, #52]	; (bf3c8 <rand+0x78>)
   bf392:	4342      	muls	r2, r0
   bf394:	fb01 2203 	mla	r2, r1, r3, r2
   bf398:	fba0 0101 	umull	r0, r1, r0, r1
   bf39c:	1c43      	adds	r3, r0, #1
   bf39e:	eb42 0001 	adc.w	r0, r2, r1
   bf3a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bf3a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bf3aa:	bd10      	pop	{r4, pc}
   bf3ac:	2003de84 	.word	0x2003de84
   bf3b0:	000c113a 	.word	0x000c113a
   bf3b4:	000c11aa 	.word	0x000c11aa
   bf3b8:	abcd330e 	.word	0xabcd330e
   bf3bc:	e66d1234 	.word	0xe66d1234
   bf3c0:	0005deec 	.word	0x0005deec
   bf3c4:	5851f42d 	.word	0x5851f42d
   bf3c8:	4c957f2d 	.word	0x4c957f2d

000bf3cc <strchr>:
   bf3cc:	b2c9      	uxtb	r1, r1
   bf3ce:	4603      	mov	r3, r0
   bf3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf3d4:	b11a      	cbz	r2, bf3de <strchr+0x12>
   bf3d6:	428a      	cmp	r2, r1
   bf3d8:	d1f9      	bne.n	bf3ce <strchr+0x2>
   bf3da:	4618      	mov	r0, r3
   bf3dc:	4770      	bx	lr
   bf3de:	2900      	cmp	r1, #0
   bf3e0:	bf18      	it	ne
   bf3e2:	2300      	movne	r3, #0
   bf3e4:	e7f9      	b.n	bf3da <strchr+0xe>

000bf3e6 <strchrnul>:
   bf3e6:	b510      	push	{r4, lr}
   bf3e8:	4604      	mov	r4, r0
   bf3ea:	f7ff ffef 	bl	bf3cc <strchr>
   bf3ee:	b918      	cbnz	r0, bf3f8 <strchrnul+0x12>
   bf3f0:	4620      	mov	r0, r4
   bf3f2:	f000 f832 	bl	bf45a <strlen>
   bf3f6:	4420      	add	r0, r4
   bf3f8:	bd10      	pop	{r4, pc}

000bf3fa <strcmp>:
   bf3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf402:	2a01      	cmp	r2, #1
   bf404:	bf28      	it	cs
   bf406:	429a      	cmpcs	r2, r3
   bf408:	d0f7      	beq.n	bf3fa <strcmp>
   bf40a:	1ad0      	subs	r0, r2, r3
   bf40c:	4770      	bx	lr

000bf40e <strcpy>:
   bf40e:	4603      	mov	r3, r0
   bf410:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf414:	f803 2b01 	strb.w	r2, [r3], #1
   bf418:	2a00      	cmp	r2, #0
   bf41a:	d1f9      	bne.n	bf410 <strcpy+0x2>
   bf41c:	4770      	bx	lr
	...

000bf420 <strdup>:
   bf420:	4b02      	ldr	r3, [pc, #8]	; (bf42c <strdup+0xc>)
   bf422:	4601      	mov	r1, r0
   bf424:	6818      	ldr	r0, [r3, #0]
   bf426:	f000 b803 	b.w	bf430 <_strdup_r>
   bf42a:	bf00      	nop
   bf42c:	2003de84 	.word	0x2003de84

000bf430 <_strdup_r>:
   bf430:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf432:	4604      	mov	r4, r0
   bf434:	4608      	mov	r0, r1
   bf436:	460d      	mov	r5, r1
   bf438:	f000 f80f 	bl	bf45a <strlen>
   bf43c:	1c42      	adds	r2, r0, #1
   bf43e:	4611      	mov	r1, r2
   bf440:	4620      	mov	r0, r4
   bf442:	9201      	str	r2, [sp, #4]
   bf444:	f7fc f840 	bl	bb4c8 <_malloc_r>
   bf448:	4604      	mov	r4, r0
   bf44a:	b118      	cbz	r0, bf454 <_strdup_r+0x24>
   bf44c:	9a01      	ldr	r2, [sp, #4]
   bf44e:	4629      	mov	r1, r5
   bf450:	f7ff ff20 	bl	bf294 <memcpy>
   bf454:	4620      	mov	r0, r4
   bf456:	b003      	add	sp, #12
   bf458:	bd30      	pop	{r4, r5, pc}

000bf45a <strlen>:
   bf45a:	4603      	mov	r3, r0
   bf45c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf460:	2a00      	cmp	r2, #0
   bf462:	d1fb      	bne.n	bf45c <strlen+0x2>
   bf464:	1a18      	subs	r0, r3, r0
   bf466:	3801      	subs	r0, #1
   bf468:	4770      	bx	lr

000bf46a <strncmp>:
   bf46a:	b510      	push	{r4, lr}
   bf46c:	b17a      	cbz	r2, bf48e <strncmp+0x24>
   bf46e:	4603      	mov	r3, r0
   bf470:	3901      	subs	r1, #1
   bf472:	1884      	adds	r4, r0, r2
   bf474:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf478:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bf47c:	4290      	cmp	r0, r2
   bf47e:	d101      	bne.n	bf484 <strncmp+0x1a>
   bf480:	42a3      	cmp	r3, r4
   bf482:	d101      	bne.n	bf488 <strncmp+0x1e>
   bf484:	1a80      	subs	r0, r0, r2
   bf486:	bd10      	pop	{r4, pc}
   bf488:	2800      	cmp	r0, #0
   bf48a:	d1f3      	bne.n	bf474 <strncmp+0xa>
   bf48c:	e7fa      	b.n	bf484 <strncmp+0x1a>
   bf48e:	4610      	mov	r0, r2
   bf490:	e7f9      	b.n	bf486 <strncmp+0x1c>

000bf492 <strncpy>:
   bf492:	b510      	push	{r4, lr}
   bf494:	3901      	subs	r1, #1
   bf496:	4603      	mov	r3, r0
   bf498:	b132      	cbz	r2, bf4a8 <strncpy+0x16>
   bf49a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bf49e:	f803 4b01 	strb.w	r4, [r3], #1
   bf4a2:	3a01      	subs	r2, #1
   bf4a4:	2c00      	cmp	r4, #0
   bf4a6:	d1f7      	bne.n	bf498 <strncpy+0x6>
   bf4a8:	441a      	add	r2, r3
   bf4aa:	2100      	movs	r1, #0
   bf4ac:	4293      	cmp	r3, r2
   bf4ae:	d100      	bne.n	bf4b2 <strncpy+0x20>
   bf4b0:	bd10      	pop	{r4, pc}
   bf4b2:	f803 1b01 	strb.w	r1, [r3], #1
   bf4b6:	e7f9      	b.n	bf4ac <strncpy+0x1a>

000bf4b8 <strrchr>:
   bf4b8:	b538      	push	{r3, r4, r5, lr}
   bf4ba:	4603      	mov	r3, r0
   bf4bc:	460c      	mov	r4, r1
   bf4be:	b969      	cbnz	r1, bf4dc <strrchr+0x24>
   bf4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf4c4:	f7ff bf82 	b.w	bf3cc <strchr>
   bf4c8:	1c43      	adds	r3, r0, #1
   bf4ca:	4605      	mov	r5, r0
   bf4cc:	4621      	mov	r1, r4
   bf4ce:	4618      	mov	r0, r3
   bf4d0:	f7ff ff7c 	bl	bf3cc <strchr>
   bf4d4:	2800      	cmp	r0, #0
   bf4d6:	d1f7      	bne.n	bf4c8 <strrchr+0x10>
   bf4d8:	4628      	mov	r0, r5
   bf4da:	bd38      	pop	{r3, r4, r5, pc}
   bf4dc:	2500      	movs	r5, #0
   bf4de:	e7f5      	b.n	bf4cc <strrchr+0x14>

000bf4e0 <__strtok_r>:
   bf4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf4e2:	b908      	cbnz	r0, bf4e8 <__strtok_r+0x8>
   bf4e4:	6810      	ldr	r0, [r2, #0]
   bf4e6:	b188      	cbz	r0, bf50c <__strtok_r+0x2c>
   bf4e8:	4604      	mov	r4, r0
   bf4ea:	4620      	mov	r0, r4
   bf4ec:	f814 5b01 	ldrb.w	r5, [r4], #1
   bf4f0:	460f      	mov	r7, r1
   bf4f2:	f817 6b01 	ldrb.w	r6, [r7], #1
   bf4f6:	b91e      	cbnz	r6, bf500 <__strtok_r+0x20>
   bf4f8:	b965      	cbnz	r5, bf514 <__strtok_r+0x34>
   bf4fa:	6015      	str	r5, [r2, #0]
   bf4fc:	4628      	mov	r0, r5
   bf4fe:	e005      	b.n	bf50c <__strtok_r+0x2c>
   bf500:	42b5      	cmp	r5, r6
   bf502:	d1f6      	bne.n	bf4f2 <__strtok_r+0x12>
   bf504:	2b00      	cmp	r3, #0
   bf506:	d1f0      	bne.n	bf4ea <__strtok_r+0xa>
   bf508:	6014      	str	r4, [r2, #0]
   bf50a:	7003      	strb	r3, [r0, #0]
   bf50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf50e:	461c      	mov	r4, r3
   bf510:	e00c      	b.n	bf52c <__strtok_r+0x4c>
   bf512:	b915      	cbnz	r5, bf51a <__strtok_r+0x3a>
   bf514:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf518:	460e      	mov	r6, r1
   bf51a:	f816 5b01 	ldrb.w	r5, [r6], #1
   bf51e:	42ab      	cmp	r3, r5
   bf520:	d1f7      	bne.n	bf512 <__strtok_r+0x32>
   bf522:	2b00      	cmp	r3, #0
   bf524:	d0f3      	beq.n	bf50e <__strtok_r+0x2e>
   bf526:	2300      	movs	r3, #0
   bf528:	f804 3c01 	strb.w	r3, [r4, #-1]
   bf52c:	6014      	str	r4, [r2, #0]
   bf52e:	e7ed      	b.n	bf50c <__strtok_r+0x2c>

000bf530 <strtok_r>:
   bf530:	2301      	movs	r3, #1
   bf532:	f7ff bfd5 	b.w	bf4e0 <__strtok_r>
	...

000bf538 <_strtol_l.constprop.0>:
   bf538:	2b01      	cmp	r3, #1
   bf53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf53e:	d001      	beq.n	bf544 <_strtol_l.constprop.0+0xc>
   bf540:	2b24      	cmp	r3, #36	; 0x24
   bf542:	d906      	bls.n	bf552 <_strtol_l.constprop.0+0x1a>
   bf544:	f7fb ffc8 	bl	bb4d8 <__errno>
   bf548:	2316      	movs	r3, #22
   bf54a:	6003      	str	r3, [r0, #0]
   bf54c:	2000      	movs	r0, #0
   bf54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf552:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf638 <_strtol_l.constprop.0+0x100>
   bf556:	460d      	mov	r5, r1
   bf558:	462e      	mov	r6, r5
   bf55a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf55e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf562:	f017 0708 	ands.w	r7, r7, #8
   bf566:	d1f7      	bne.n	bf558 <_strtol_l.constprop.0+0x20>
   bf568:	2c2d      	cmp	r4, #45	; 0x2d
   bf56a:	d132      	bne.n	bf5d2 <_strtol_l.constprop.0+0x9a>
   bf56c:	782c      	ldrb	r4, [r5, #0]
   bf56e:	2701      	movs	r7, #1
   bf570:	1cb5      	adds	r5, r6, #2
   bf572:	2b00      	cmp	r3, #0
   bf574:	d05b      	beq.n	bf62e <_strtol_l.constprop.0+0xf6>
   bf576:	2b10      	cmp	r3, #16
   bf578:	d109      	bne.n	bf58e <_strtol_l.constprop.0+0x56>
   bf57a:	2c30      	cmp	r4, #48	; 0x30
   bf57c:	d107      	bne.n	bf58e <_strtol_l.constprop.0+0x56>
   bf57e:	782c      	ldrb	r4, [r5, #0]
   bf580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf584:	2c58      	cmp	r4, #88	; 0x58
   bf586:	d14d      	bne.n	bf624 <_strtol_l.constprop.0+0xec>
   bf588:	786c      	ldrb	r4, [r5, #1]
   bf58a:	2310      	movs	r3, #16
   bf58c:	3502      	adds	r5, #2
   bf58e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf592:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf596:	f04f 0c00 	mov.w	ip, #0
   bf59a:	fbb8 f9f3 	udiv	r9, r8, r3
   bf59e:	4666      	mov	r6, ip
   bf5a0:	fb03 8a19 	mls	sl, r3, r9, r8
   bf5a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf5a8:	f1be 0f09 	cmp.w	lr, #9
   bf5ac:	d816      	bhi.n	bf5dc <_strtol_l.constprop.0+0xa4>
   bf5ae:	4674      	mov	r4, lr
   bf5b0:	42a3      	cmp	r3, r4
   bf5b2:	dd24      	ble.n	bf5fe <_strtol_l.constprop.0+0xc6>
   bf5b4:	f1bc 0f00 	cmp.w	ip, #0
   bf5b8:	db1e      	blt.n	bf5f8 <_strtol_l.constprop.0+0xc0>
   bf5ba:	45b1      	cmp	r9, r6
   bf5bc:	d31c      	bcc.n	bf5f8 <_strtol_l.constprop.0+0xc0>
   bf5be:	d101      	bne.n	bf5c4 <_strtol_l.constprop.0+0x8c>
   bf5c0:	45a2      	cmp	sl, r4
   bf5c2:	db19      	blt.n	bf5f8 <_strtol_l.constprop.0+0xc0>
   bf5c4:	fb06 4603 	mla	r6, r6, r3, r4
   bf5c8:	f04f 0c01 	mov.w	ip, #1
   bf5cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf5d0:	e7e8      	b.n	bf5a4 <_strtol_l.constprop.0+0x6c>
   bf5d2:	2c2b      	cmp	r4, #43	; 0x2b
   bf5d4:	bf04      	itt	eq
   bf5d6:	782c      	ldrbeq	r4, [r5, #0]
   bf5d8:	1cb5      	addeq	r5, r6, #2
   bf5da:	e7ca      	b.n	bf572 <_strtol_l.constprop.0+0x3a>
   bf5dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf5e0:	f1be 0f19 	cmp.w	lr, #25
   bf5e4:	d801      	bhi.n	bf5ea <_strtol_l.constprop.0+0xb2>
   bf5e6:	3c37      	subs	r4, #55	; 0x37
   bf5e8:	e7e2      	b.n	bf5b0 <_strtol_l.constprop.0+0x78>
   bf5ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf5ee:	f1be 0f19 	cmp.w	lr, #25
   bf5f2:	d804      	bhi.n	bf5fe <_strtol_l.constprop.0+0xc6>
   bf5f4:	3c57      	subs	r4, #87	; 0x57
   bf5f6:	e7db      	b.n	bf5b0 <_strtol_l.constprop.0+0x78>
   bf5f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf5fc:	e7e6      	b.n	bf5cc <_strtol_l.constprop.0+0x94>
   bf5fe:	f1bc 0f00 	cmp.w	ip, #0
   bf602:	da05      	bge.n	bf610 <_strtol_l.constprop.0+0xd8>
   bf604:	2322      	movs	r3, #34	; 0x22
   bf606:	6003      	str	r3, [r0, #0]
   bf608:	4646      	mov	r6, r8
   bf60a:	b942      	cbnz	r2, bf61e <_strtol_l.constprop.0+0xe6>
   bf60c:	4630      	mov	r0, r6
   bf60e:	e79e      	b.n	bf54e <_strtol_l.constprop.0+0x16>
   bf610:	b107      	cbz	r7, bf614 <_strtol_l.constprop.0+0xdc>
   bf612:	4276      	negs	r6, r6
   bf614:	2a00      	cmp	r2, #0
   bf616:	d0f9      	beq.n	bf60c <_strtol_l.constprop.0+0xd4>
   bf618:	f1bc 0f00 	cmp.w	ip, #0
   bf61c:	d000      	beq.n	bf620 <_strtol_l.constprop.0+0xe8>
   bf61e:	1e69      	subs	r1, r5, #1
   bf620:	6011      	str	r1, [r2, #0]
   bf622:	e7f3      	b.n	bf60c <_strtol_l.constprop.0+0xd4>
   bf624:	2430      	movs	r4, #48	; 0x30
   bf626:	2b00      	cmp	r3, #0
   bf628:	d1b1      	bne.n	bf58e <_strtol_l.constprop.0+0x56>
   bf62a:	2308      	movs	r3, #8
   bf62c:	e7af      	b.n	bf58e <_strtol_l.constprop.0+0x56>
   bf62e:	2c30      	cmp	r4, #48	; 0x30
   bf630:	d0a5      	beq.n	bf57e <_strtol_l.constprop.0+0x46>
   bf632:	230a      	movs	r3, #10
   bf634:	e7ab      	b.n	bf58e <_strtol_l.constprop.0+0x56>
   bf636:	bf00      	nop
   bf638:	000c1204 	.word	0x000c1204

000bf63c <strtol>:
   bf63c:	4613      	mov	r3, r2
   bf63e:	460a      	mov	r2, r1
   bf640:	4601      	mov	r1, r0
   bf642:	4802      	ldr	r0, [pc, #8]	; (bf64c <strtol+0x10>)
   bf644:	6800      	ldr	r0, [r0, #0]
   bf646:	f7ff bf77 	b.w	bf538 <_strtol_l.constprop.0>
   bf64a:	bf00      	nop
   bf64c:	2003de84 	.word	0x2003de84

000bf650 <close>:
   bf650:	4b02      	ldr	r3, [pc, #8]	; (bf65c <close+0xc>)
   bf652:	4601      	mov	r1, r0
   bf654:	6818      	ldr	r0, [r3, #0]
   bf656:	f000 b8c9 	b.w	bf7ec <_close_r>
   bf65a:	bf00      	nop
   bf65c:	2003de84 	.word	0x2003de84

000bf660 <fstat>:
   bf660:	4b02      	ldr	r3, [pc, #8]	; (bf66c <fstat+0xc>)
   bf662:	460a      	mov	r2, r1
   bf664:	4601      	mov	r1, r0
   bf666:	6818      	ldr	r0, [r3, #0]
   bf668:	f000 b8d0 	b.w	bf80c <_fstat_r>
   bf66c:	2003de84 	.word	0x2003de84

000bf670 <lseek>:
   bf670:	4613      	mov	r3, r2
   bf672:	460a      	mov	r2, r1
   bf674:	4601      	mov	r1, r0
   bf676:	4802      	ldr	r0, [pc, #8]	; (bf680 <lseek+0x10>)
   bf678:	6800      	ldr	r0, [r0, #0]
   bf67a:	f000 b8dd 	b.w	bf838 <_lseek_r>
   bf67e:	bf00      	nop
   bf680:	2003de84 	.word	0x2003de84

000bf684 <open>:
   bf684:	b40e      	push	{r1, r2, r3}
   bf686:	b503      	push	{r0, r1, lr}
   bf688:	ab03      	add	r3, sp, #12
   bf68a:	4601      	mov	r1, r0
   bf68c:	4806      	ldr	r0, [pc, #24]	; (bf6a8 <open+0x24>)
   bf68e:	f853 2b04 	ldr.w	r2, [r3], #4
   bf692:	9301      	str	r3, [sp, #4]
   bf694:	6800      	ldr	r0, [r0, #0]
   bf696:	9b04      	ldr	r3, [sp, #16]
   bf698:	f000 f8e0 	bl	bf85c <_open_r>
   bf69c:	b002      	add	sp, #8
   bf69e:	f85d eb04 	ldr.w	lr, [sp], #4
   bf6a2:	b003      	add	sp, #12
   bf6a4:	4770      	bx	lr
   bf6a6:	bf00      	nop
   bf6a8:	2003de84 	.word	0x2003de84

000bf6ac <read>:
   bf6ac:	4613      	mov	r3, r2
   bf6ae:	460a      	mov	r2, r1
   bf6b0:	4601      	mov	r1, r0
   bf6b2:	4802      	ldr	r0, [pc, #8]	; (bf6bc <read+0x10>)
   bf6b4:	6800      	ldr	r0, [r0, #0]
   bf6b6:	f000 b8e3 	b.w	bf880 <_read_r>
   bf6ba:	bf00      	nop
   bf6bc:	2003de84 	.word	0x2003de84

000bf6c0 <unlink>:
   bf6c0:	4b02      	ldr	r3, [pc, #8]	; (bf6cc <unlink+0xc>)
   bf6c2:	4601      	mov	r1, r0
   bf6c4:	6818      	ldr	r0, [r3, #0]
   bf6c6:	f000 b80d 	b.w	bf6e4 <_unlink_r>
   bf6ca:	bf00      	nop
   bf6cc:	2003de84 	.word	0x2003de84

000bf6d0 <write>:
   bf6d0:	4613      	mov	r3, r2
   bf6d2:	460a      	mov	r2, r1
   bf6d4:	4601      	mov	r1, r0
   bf6d6:	4802      	ldr	r0, [pc, #8]	; (bf6e0 <write+0x10>)
   bf6d8:	6800      	ldr	r0, [r0, #0]
   bf6da:	f000 b813 	b.w	bf704 <_write_r>
   bf6de:	bf00      	nop
   bf6e0:	2003de84 	.word	0x2003de84

000bf6e4 <_unlink_r>:
   bf6e4:	b538      	push	{r3, r4, r5, lr}
   bf6e6:	4d06      	ldr	r5, [pc, #24]	; (bf700 <_unlink_r+0x1c>)
   bf6e8:	2300      	movs	r3, #0
   bf6ea:	4604      	mov	r4, r0
   bf6ec:	4608      	mov	r0, r1
   bf6ee:	602b      	str	r3, [r5, #0]
   bf6f0:	f7fb fc86 	bl	bb000 <_unlink>
   bf6f4:	1c43      	adds	r3, r0, #1
   bf6f6:	d102      	bne.n	bf6fe <_unlink_r+0x1a>
   bf6f8:	682b      	ldr	r3, [r5, #0]
   bf6fa:	b103      	cbz	r3, bf6fe <_unlink_r+0x1a>
   bf6fc:	6023      	str	r3, [r4, #0]
   bf6fe:	bd38      	pop	{r3, r4, r5, pc}
   bf700:	2003e7f0 	.word	0x2003e7f0

000bf704 <_write_r>:
   bf704:	b538      	push	{r3, r4, r5, lr}
   bf706:	4d07      	ldr	r5, [pc, #28]	; (bf724 <_write_r+0x20>)
   bf708:	4604      	mov	r4, r0
   bf70a:	4608      	mov	r0, r1
   bf70c:	4611      	mov	r1, r2
   bf70e:	2200      	movs	r2, #0
   bf710:	602a      	str	r2, [r5, #0]
   bf712:	461a      	mov	r2, r3
   bf714:	f7fb fc3c 	bl	baf90 <_write>
   bf718:	1c43      	adds	r3, r0, #1
   bf71a:	d102      	bne.n	bf722 <_write_r+0x1e>
   bf71c:	682b      	ldr	r3, [r5, #0]
   bf71e:	b103      	cbz	r3, bf722 <_write_r+0x1e>
   bf720:	6023      	str	r3, [r4, #0]
   bf722:	bd38      	pop	{r3, r4, r5, pc}
   bf724:	2003e7f0 	.word	0x2003e7f0

000bf728 <__register_exitproc>:
   bf728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf72c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf7e8 <__register_exitproc+0xc0>
   bf730:	4606      	mov	r6, r0
   bf732:	f8d8 0000 	ldr.w	r0, [r8]
   bf736:	461f      	mov	r7, r3
   bf738:	460d      	mov	r5, r1
   bf73a:	4691      	mov	r9, r2
   bf73c:	f000 f878 	bl	bf830 <__retarget_lock_acquire_recursive>
   bf740:	4b25      	ldr	r3, [pc, #148]	; (bf7d8 <__register_exitproc+0xb0>)
   bf742:	681c      	ldr	r4, [r3, #0]
   bf744:	b934      	cbnz	r4, bf754 <__register_exitproc+0x2c>
   bf746:	4c25      	ldr	r4, [pc, #148]	; (bf7dc <__register_exitproc+0xb4>)
   bf748:	601c      	str	r4, [r3, #0]
   bf74a:	4b25      	ldr	r3, [pc, #148]	; (bf7e0 <__register_exitproc+0xb8>)
   bf74c:	b113      	cbz	r3, bf754 <__register_exitproc+0x2c>
   bf74e:	681b      	ldr	r3, [r3, #0]
   bf750:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf754:	6863      	ldr	r3, [r4, #4]
   bf756:	2b1f      	cmp	r3, #31
   bf758:	dd07      	ble.n	bf76a <__register_exitproc+0x42>
   bf75a:	f8d8 0000 	ldr.w	r0, [r8]
   bf75e:	f000 f869 	bl	bf834 <__retarget_lock_release_recursive>
   bf762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf76a:	b34e      	cbz	r6, bf7c0 <__register_exitproc+0x98>
   bf76c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf770:	b988      	cbnz	r0, bf796 <__register_exitproc+0x6e>
   bf772:	4b1c      	ldr	r3, [pc, #112]	; (bf7e4 <__register_exitproc+0xbc>)
   bf774:	b923      	cbnz	r3, bf780 <__register_exitproc+0x58>
   bf776:	f8d8 0000 	ldr.w	r0, [r8]
   bf77a:	f000 f85a 	bl	bf832 <__retarget_lock_release>
   bf77e:	e7f0      	b.n	bf762 <__register_exitproc+0x3a>
   bf780:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf784:	f7fb fe60 	bl	bb448 <malloc>
   bf788:	2800      	cmp	r0, #0
   bf78a:	d0f4      	beq.n	bf776 <__register_exitproc+0x4e>
   bf78c:	2300      	movs	r3, #0
   bf78e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf792:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf796:	6863      	ldr	r3, [r4, #4]
   bf798:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf79c:	2201      	movs	r2, #1
   bf79e:	409a      	lsls	r2, r3
   bf7a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf7a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf7a8:	4313      	orrs	r3, r2
   bf7aa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf7ae:	2e02      	cmp	r6, #2
   bf7b0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf7b4:	bf02      	ittt	eq
   bf7b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf7ba:	4313      	orreq	r3, r2
   bf7bc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf7c0:	6863      	ldr	r3, [r4, #4]
   bf7c2:	f8d8 0000 	ldr.w	r0, [r8]
   bf7c6:	1c5a      	adds	r2, r3, #1
   bf7c8:	3302      	adds	r3, #2
   bf7ca:	6062      	str	r2, [r4, #4]
   bf7cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf7d0:	f000 f830 	bl	bf834 <__retarget_lock_release_recursive>
   bf7d4:	2000      	movs	r0, #0
   bf7d6:	e7c6      	b.n	bf766 <__register_exitproc+0x3e>
   bf7d8:	2003e7e8 	.word	0x2003e7e8
   bf7dc:	2003e75c 	.word	0x2003e75c
   bf7e0:	00000000 	.word	0x00000000
   bf7e4:	000bb449 	.word	0x000bb449
   bf7e8:	2003dee8 	.word	0x2003dee8

000bf7ec <_close_r>:
   bf7ec:	b538      	push	{r3, r4, r5, lr}
   bf7ee:	4d06      	ldr	r5, [pc, #24]	; (bf808 <_close_r+0x1c>)
   bf7f0:	2300      	movs	r3, #0
   bf7f2:	4604      	mov	r4, r0
   bf7f4:	4608      	mov	r0, r1
   bf7f6:	602b      	str	r3, [r5, #0]
   bf7f8:	f7fb fbda 	bl	bafb0 <_close>
   bf7fc:	1c43      	adds	r3, r0, #1
   bf7fe:	d102      	bne.n	bf806 <_close_r+0x1a>
   bf800:	682b      	ldr	r3, [r5, #0]
   bf802:	b103      	cbz	r3, bf806 <_close_r+0x1a>
   bf804:	6023      	str	r3, [r4, #0]
   bf806:	bd38      	pop	{r3, r4, r5, pc}
   bf808:	2003e7f0 	.word	0x2003e7f0

000bf80c <_fstat_r>:
   bf80c:	b538      	push	{r3, r4, r5, lr}
   bf80e:	4d07      	ldr	r5, [pc, #28]	; (bf82c <_fstat_r+0x20>)
   bf810:	2300      	movs	r3, #0
   bf812:	4604      	mov	r4, r0
   bf814:	4608      	mov	r0, r1
   bf816:	4611      	mov	r1, r2
   bf818:	602b      	str	r3, [r5, #0]
   bf81a:	f7fb fbd1 	bl	bafc0 <_fstat>
   bf81e:	1c43      	adds	r3, r0, #1
   bf820:	d102      	bne.n	bf828 <_fstat_r+0x1c>
   bf822:	682b      	ldr	r3, [r5, #0]
   bf824:	b103      	cbz	r3, bf828 <_fstat_r+0x1c>
   bf826:	6023      	str	r3, [r4, #0]
   bf828:	bd38      	pop	{r3, r4, r5, pc}
   bf82a:	bf00      	nop
   bf82c:	2003e7f0 	.word	0x2003e7f0

000bf830 <__retarget_lock_acquire_recursive>:
   bf830:	4770      	bx	lr

000bf832 <__retarget_lock_release>:
   bf832:	4770      	bx	lr

000bf834 <__retarget_lock_release_recursive>:
   bf834:	4770      	bx	lr
	...

000bf838 <_lseek_r>:
   bf838:	b538      	push	{r3, r4, r5, lr}
   bf83a:	4d07      	ldr	r5, [pc, #28]	; (bf858 <_lseek_r+0x20>)
   bf83c:	4604      	mov	r4, r0
   bf83e:	4608      	mov	r0, r1
   bf840:	4611      	mov	r1, r2
   bf842:	2200      	movs	r2, #0
   bf844:	602a      	str	r2, [r5, #0]
   bf846:	461a      	mov	r2, r3
   bf848:	f7fb fbc2 	bl	bafd0 <_lseek>
   bf84c:	1c43      	adds	r3, r0, #1
   bf84e:	d102      	bne.n	bf856 <_lseek_r+0x1e>
   bf850:	682b      	ldr	r3, [r5, #0]
   bf852:	b103      	cbz	r3, bf856 <_lseek_r+0x1e>
   bf854:	6023      	str	r3, [r4, #0]
   bf856:	bd38      	pop	{r3, r4, r5, pc}
   bf858:	2003e7f0 	.word	0x2003e7f0

000bf85c <_open_r>:
   bf85c:	b538      	push	{r3, r4, r5, lr}
   bf85e:	4d07      	ldr	r5, [pc, #28]	; (bf87c <_open_r+0x20>)
   bf860:	4604      	mov	r4, r0
   bf862:	4608      	mov	r0, r1
   bf864:	4611      	mov	r1, r2
   bf866:	2200      	movs	r2, #0
   bf868:	602a      	str	r2, [r5, #0]
   bf86a:	461a      	mov	r2, r3
   bf86c:	f7fb fb88 	bl	baf80 <_open>
   bf870:	1c43      	adds	r3, r0, #1
   bf872:	d102      	bne.n	bf87a <_open_r+0x1e>
   bf874:	682b      	ldr	r3, [r5, #0]
   bf876:	b103      	cbz	r3, bf87a <_open_r+0x1e>
   bf878:	6023      	str	r3, [r4, #0]
   bf87a:	bd38      	pop	{r3, r4, r5, pc}
   bf87c:	2003e7f0 	.word	0x2003e7f0

000bf880 <_read_r>:
   bf880:	b538      	push	{r3, r4, r5, lr}
   bf882:	4d07      	ldr	r5, [pc, #28]	; (bf8a0 <_read_r+0x20>)
   bf884:	4604      	mov	r4, r0
   bf886:	4608      	mov	r0, r1
   bf888:	4611      	mov	r1, r2
   bf88a:	2200      	movs	r2, #0
   bf88c:	602a      	str	r2, [r5, #0]
   bf88e:	461a      	mov	r2, r3
   bf890:	f7fb fb86 	bl	bafa0 <_read>
   bf894:	1c43      	adds	r3, r0, #1
   bf896:	d102      	bne.n	bf89e <_read_r+0x1e>
   bf898:	682b      	ldr	r3, [r5, #0]
   bf89a:	b103      	cbz	r3, bf89e <_read_r+0x1e>
   bf89c:	6023      	str	r3, [r4, #0]
   bf89e:	bd38      	pop	{r3, r4, r5, pc}
   bf8a0:	2003e7f0 	.word	0x2003e7f0

000bf8a4 <dynalib_user>:
   bf8a4:	000b4021 000b405d 000b4085 000b4089     !@..]@...@...@..
   bf8b4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bf8c4:	72697620 6c617574 696e6900 61662074      virtual.init fa
   bf8d4:	64656c69 526f4c00 61522041 206f6964     iled.LoRA Radio 
   bf8e4:	74696e69 696c6169 2064657a 6e207361     initialized as n
   bf8f4:	2065646f 61206925 7720646e 20687469     ode %i and with 
   bf904:	65442061 65636976 6f204449 73252066     a DeviceID of %s
   bf914:	526f4c00 61522041 206f6964 74696e69     .LoRA Radio init
   bf924:	696c6169 2064657a 61207361 74616720     ialized as a gat
   bf934:	79617765 74697720 20612068 69766564     eway with a devi
   bf944:	44496563 20666f20 44007325 70696365     ceID of %s.Decip
   bf954:	65726568 61642064 72206174 726f7065     hered data repor
   bf964:	64252074 6f726620 6f6e206d 25206564     t %d from node %
   bf974:	65530064 7220746e 6f707365 2065736e     d.Sent response 
   bf984:	6e206f74 2065646f 6d206425 61737365     to node %d messa
   bf994:	25206567 74202c64 20656d69 7325203d     ge %d, time = %s
   bf9a4:	646e6120 65726620 6e657571 25207963      and frequency %
   bf9b4:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bf9c4:	72206573 69656365 20646576 63637573     se received succ
   bf9d4:	66737365 796c6c75 73202d20 65636375     essfully - succe
   bf9e4:	72207373 20657461 322e3425 65520066     ss rate %4.2f.Re
   bf9f4:	6e6f7073 6e206573 6120746f 6f6e6b63     sponse not ackno
   bfa04:	64656c77 20646567 7573202d 73656363     wledged - succes
   bfa14:	61722073 25206574 66322e34 6e655300     s rate %4.2f.Sen
   bfa24:	65722074 6e6f7073 74206573 6f6e206f     t response to no
   bfa34:	25206564 74202c64 20656d69 7325203d     de %d, time = %s
   bfa44:	646e6120 65726620 6e657571 25207963      and frequency %
   bfa54:	696d2064 6574756e 65520073 6e6f7073     d minutes.Respon
   bfa64:	72206573 69656365 20646576 63637573     se received succ
   bfa74:	66737365 796c6c75 73655200 736e6f70     essfully.Respons
   bfa84:	6f6e2065 63612074 776f6e6b 6764656c     e not acknowledg
   bfa94:	44006465 70696365 65726568 6c612064     ed.Deciphered al
   bfaa4:	20747265 6f706572 66207472 206d6f72     ert report from 
   bfab4:	65646f6e 00642520 746e6553 6b636120     node %d.Sent ack
   bfac4:	6c776f6e 6d676465 20746e65 4e206f74     nowledgment to N
   bfad4:	2065646f 202c6425 656d6974 25203d20     ode %d, time = %
   bfae4:	6e612073 72662064 65757165 2079636e     s and frequency 
   bfaf4:	6d206425 74756e69 52007365 6f707365     %d minutes.Respo
   bfb04:	6e69646e 73752067 20676e69 20656874     nding using the 
   bfb14:	6d207325 61737365 74206567 00657079     %s message type.
   bfb24:	69766564 44496563 206e6f20 656c6966     deviceID on file
   bfb34:	72202d20 65727465 6e697669 6f6e2067      - retreiving no
   bfb44:	44496564 6d756e20 20726562 64006425     deID number %d.d
   bfb54:	63697665 20444965 20746f6e 66206e6f     eviceID not on f
   bfb64:	20656c69 6173202d 676e6976 20736120     ile - saving as 
   bfb74:	65646f6e 6e204449 72656275 00642520     nodeID nuber %d.
   bfb84:	6c6c756e 63655200 65766965 72662064     null.Received fr
   bfb94:	64206d6f 63697665 20444965 2520666f     om deviceID of %
   bfba4:	6e612073 636e7520 69666e6f 65727567     s an unconfigure
   bfbb4:	69772064 63206c6c 676e6168 72662065     d will change fr
   bfbc4:	25206d6f 6f742064 00642520 6e696f4a     om %d to %d.Join
   bfbd4:	71657220 74736575 6f726620 6f6e206d      request from no
   bfbe4:	25206564 202d2064 74746573 20676e69     de %d - setting 
   bfbf4:	636f6c63 6544006b 65636976 69204449     clock.DeviceID i
   bfc04:	73252073 73654d00 65676173 64696420     s %s.Message did
   bfc14:	746f6e20 74616d20 74206863 4d206568      not match the M
   bfc24:	63696761 6d754e20 20726562 6749202d     agic Number - Ig
   bfc34:	69726f6e 4600676e 206d6f72 65646f6e     noring.From node
   bfc44:	20642520 68746977 73737220 64253d69      %d with rssi=%d
   bfc54:	61202d20 20732520 7373656d 20656761      - a %s message 
   bfc64:	6c20666f 74676e65 64252068 206e6920     of length %d in 
   bfc74:	68206425 0073706f 61206557 75206572     %d hops.We are u
   bfc84:	74616470 20676e69 20656874 6c627570     pdating the publ
   bfc94:	20687369 71657266 636e6575 6f742079     ish frequency to
   bfca4:	20692520 756e696d 00736574               %i minutes.

000bfcb0 <_ZTV14LoRA_Functions>:
	...
   bfcb8:	000b40cd 000b40cf 6f706552 66207472     .@...@..Report f
   bfcc8:	75716572 79636e65 20642520 736e696d     requency %d mins
   bfcd8:	656e202c 65207478 746e6576 206e6920     , next event in 
   bfce8:	20756c25 6f636573 0073646e 6d6f7246     %lu seconds.From
   bfcf8:	20732520 25206f74 69772073 69206874      %s to %s with i
   bfd08:	6c61766e 74206469 00656d69 6d6f7246     nvalid time.From
   bfd18:	20732520 25206f74 6f662073 75252072      %s to %s for %u
   bfd28:	63657320 73646e6f 6f724600 7325206d      seconds.From %s
   bfd38:	206f7420 53007325 7065656c 726f6620      to %s.Sleep for
   bfd48:	20692520 6f636573 2073646e 6c6c6974      %i seconds till
   bfd58:	78656e20 76652074 20746e65 25207461      next event at %
   bfd68:	69772073 25206874 6620696c 20656572     s with %li free 
   bfd78:	6f6d656d 41007972 656b6f77 20746120     memory.Awoke at 
   bfd88:	77207325 20687469 20696c25 65657266     %s with %li free
   bfd98:	6d656d20 0079726f 65746147 20796177      memory.Gateway 
   bfda8:	6c207369 65747369 676e696e 726f6620     is listening for
   bfdb8:	526f4c20 656d2041 67617373 7b007365      LoRA messages.{
   bfdc8:	76656422 69656369 223a2264 2c227325     "deviceid":"%s",
   bfdd8:	6f682220 796c7275 75253a22 6422202c      "hourly":%u, "d
   bfde8:	796c6961 75253a22 6162222c 72657474     aily":%u,"batter
   bfdf8:	253a2279 66322e34 656b222c 3a223179     y":%4.2f,"key1":
   bfe08:	22732522 6574222c 3a22706d 202c6425     "%s","temp":%d, 
   bfe18:	73657222 22737465 2c64253a 73737222     "resets":%d,"rss
   bfe28:	253a2269 22202c64 2267736d 2c64253a     i":%d, "msg":%d,
   bfe38:	6d697422 61747365 3a22706d 30756c25     "timestamp":%lu0
   bfe48:	007d3030 64696255 2d73746f 41526f4c     00}.Ubidots-LoRA
   bfe58:	6f6f482d 31762d6b 65654400 6f702070     -Hook-v1.Deep po
   bfe68:	20726577 6e776f64 76656420 00656369     wer down device.
   bfe78:	69007369 6f6e2073 54520074 6e692043     is.is not.RTC in
   bfe88:	61697469 657a696c 74202c64 20656d69     itialized, time 
   bfe98:	25207369 6e612073 54522064 73252043     is %s and RTC %s
   bfea8:	74657320 54534500 54444535 2e334d2c      set.EST5EDT,M3.
   bfeb8:	2f302e32 30303a32 2c30303a 2e31314d     2.0/2:00:00,M11.
   bfec8:	2f302e31 30303a32 0030303a 61636f4c     1.0/2:00:00.Loca
   bfed8:	6d69546c 6e692065 61697469 657a696c     lTime initialize
   bfee8:	74202c64 20656d69 25207369 6e612073     d, time is %s an
   bfef8:	54522064 73252043 74657320 73734100     d RTC %s set.Ass
   bff08:	69747265 61466e6f 72756c69 72732065     ertionFailure sr
   bff18:	26262063 63727320 61633e2d 61626c6c     c && src->callba
   bff28:	47006b63 77657461 73207961 74726174     ck.Gateway start
   bff38:	63207075 6c706d6f 20657465 25207461     up complete at %
   bff48:	69772073 62206874 65747461 25207972     s with battery %
   bff58:	66322e34 65735500 75622072 6e6f7474     4.2f.User button
   bff68:	65727020 64657373 6574202c 6d207473      pressed, test m
   bff78:	0065646f 75206f4e 20726573 74747562     ode.No user butt
   bff88:	70206e6f 20687375 65746564 65746863     on push detechte
   bff98:	20410064 2077656e 20796164 6572202d     d.A new day - re
   bffa8:	74746573 20676e69 72657665 69687479     setting everythi
   bffb8:	6300676e 7261656c 20676e69 20656874     ng.clearing the 
   bffc8:	65646f6e 64204449 00617461              nodeID data.

000bffd4 <_ZTV8MB85RC64>:
	...
   bffdc:	000b5629 000b563d 000b80d5 000b816b     )V..=V......k...
   bffec:	000b81ed                                ....

000bfff0 <_ZTV10nodeIDData>:
	...
   bfff8:	000b5945 000b5689 000b5667 000ba955     EY...V..gV..U...
   c0008:	000ba97d 000bab11 000baba9 000b5729     }...........)W..
   c0018:	000b573d                                =W..

000c001c <_ZTV13sysStatusData>:
	...
   c0024:	000b57a9 000b5689 000b5667 000ba955     .W...V..gV..U...
   c0034:	000ba97d 000bab11 000baba9 000b56d9     }............V..
   c0044:	000b56ed                                .V..

000c0048 <_ZTV17currentStatusData>:
	...
   c0050:	000b57c3 000b5689 000b5667 000ba955     .W...V..gV..U...
   c0060:	000ba97d 000bab11 000baba9 000b5701     }............W..
   c0070:	000b5715 74696e49 7a696c61 20676e69     .W..Initalizing 
   c0080:	20656874 4d6e6970 7365646f 696e4900     the pinModes.Ini
   c0090:	6c616974 6e697a69 6f502067 20726577     tializing Power 
   c00a0:	666e6f43 00006769                       Config..

000c00a8 <BLUE_LED>:
   c00a8:	                                         ..

000c00aa <BUTTON_PIN>:
   c00aa:	                                         ..

000c00ac <RFM95_CS>:
   c00ac:	                                         ..

000c00ae <RFM95_INT>:
   c00ae:	                                         ..

000c00b0 <TMP36_SENSE_PIN>:
   c00b0:	7525000f 6e696d20 73657275 73655900     ..%u minures.Yes
   c00c0:	006f4e00 69726556 006e6f7a 6e6b6e55     .No.Verizon.Unkn
   c00d0:	006e776f 20746f4e 72616843 676e6967     own.Not Charging
   c00e0:	61684300 64656772 73694400 72616863     .Charged.Dischar
   c00f0:	676e6967 75614600 4400746c 6e6f6369     ging.Fault.Dicon
   c0100:	7463656e 49006465 6974696e 7a696c61     nected.Initializ
   c0110:	20676e69 74726150 656c6369 6e756620     ing Particle fun
   c0120:	6f697463 6120736e 7620646e 61697261     ctions and varia
   c0130:	73656c62 776f4c00 776f5020 4d207265     bles.Low Power M
   c0140:	0065646f 656c6552 00657361 6e676953     ode.Release.Sign
   c0150:	73006c61 65746174 6843664f 61420067     al.stateOfChg.Ba
   c0160:	72657474 6e6f4379 74786574 70655200     tteryContext.Rep
   c0170:	6974726f 4620676e 75716572 79636e65     orting Frequency
   c0180:	4d495300 72614320 65530064 6f4c2074     .SIM Card.Set Lo
   c0190:	6f502077 00726577 20746553 71657246     w Power.Set Freq
   c01a0:	636e6575 68530079 2074726f 6f706572     uency.Short repo
   c01b0:	6e697472 72662067 65757165 2079636e     rting frequency 
   c01c0:	7265766f 6469722d 6c207365 7020776f     over-rides low p
   c01d0:	7265776f 70655200 2074726f 71657266     ower.Report freq
   c01e0:	636e6575 69772079 62206c6c 65732065     uency will be se
   c01f0:	6f742074 20692520 756e696d 20736574     t to %i minutes 
   c0200:	6e207461 20747865 41526f4c 6e6f6320     at next LoRA con
   c0210:	7463656e 6d695400 65790065 6f6e0073     nect.Time.yes.no
   c0220:	636e4900 73616572 20676e69 6f706572     .Increasing repo
   c0230:	6e697472 72662067 65757165 2079636e     rting frequency 
   c0240:	31206f74 696d2032 6574756e 73490073     to 12 minutes.Is
   c0250:	776f4c20 776f5020 4d207265 2065646f      Low Power Mode 
   c0260:	3f746573 00732520 20746553 56206f74     set? %s.Set to V
   c0270:	7a697265 53206e6f 53004d49 74207465     erizon SIM.Set t
   c0280:	6150206f 63697472 5320656c 49004d49     o Particle SIM.I
   c0290:	6874206e 69642065 6e6f6373 7463656e     n the disconnect
   c02a0:	6f726620 6150206d 63697472 6620656c      from Particle f
   c02b0:	74636e75 006e6f69 6c696146 74206465     unction.Failed t
   c02c0:	6964206f 6e6f6373 7463656e 6f726620     o disconnect fro
   c02d0:	6150206d 63697472 4400656c 6f637369     m Particle.Disco
   c02e0:	63656e6e 20646574 6d6f7266 72615020     nnected from Par
   c02f0:	6c636974 6e692065 20692520 6f636573     ticle in %i seco
   c0300:	0073646e 6c696146 74206465 7574206f     nds.Failed to tu
   c0310:	6f206e72 74206666 43206568 756c6c65     rn off the Cellu
   c0320:	2072616c 65646f6d 7554006d 64656e72     lar modem.Turned
   c0330:	66666f20 65687420 6c656320 616c756c      off the cellula
   c0340:	6f6d2072 206d6564 25206e69 65732069     r modem in %i se
   c0350:	646e6f63 00000073                       conds...

000c0358 <_ZTVN5spark10LogHandlerE>:
	...
   c0368:	000b40a5 000b5f2d                       .@..-_..

000c0370 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c0378:	000b5fa5 000b5fd9 000bd0b5 000b5f2f     ._..._....../_..
   c0388:	656e6f4e 46695700 53470069 4d55004d     None.WiFi.GSM.UM
   c0398:	43005354 00414d44 0045544c 45454549     TS.CDMA.LTE.IEEE
   c03a8:	31323038 4c003435 435f4554 4d5f5441     802154.LTE_CAT_M
   c03b8:	544c0031 41435f45 424e5f54 73250031     1.LTE_CAT_NB1.%s
   c03c8:	253a5320 66302e32 202c2525 32253a51      S:%2.0f%%, Q:%2
   c03d8:	2566302e 25002025 00432069 000c00cc     .0f%% .%i C.....
   c03e8:	000c0388 000c038d 000c0392 000c0396     ................
   c03f8:	000c039b 000c03a0 000c03a4 000c03af     ................
   c0408:	000c03ba 6c696166 74206465 6572206f     ....failed to re
   c0418:	72206461 64416765 253d7264 20783230     ad regAddr=%02x 
   c0428:	6e756f63 75253d74 69616600 2064656c     count=%u.failed 
   c0438:	72206f74 20646165 41676572 3d726464     to read regAddr=
   c0448:	78323025 61747320 64253d74 554f4600     %02x stat=%d.FOU
   c0458:	69642054 6f6e2064 6f672074 47494820     T did not go HIG
   c0468:	6f6e0048 65642074 74636574 66006465     H.not detected.f
   c0478:	656c6961 6f742064 69727720 72206574     ailed to write r
   c0488:	64416765 253d7264 20783230 74617473     egAddr=%02x stat
   c0498:	0064253d 57746573 25205444 61770064     =%d.setWDT %d.wa
   c04a8:	64686374 6320676f 7261656c 62206465     tchdog cleared b
   c04b8:	75736552 253d746c 61770064 64686374     Result=%d.watchd
   c04c8:	7320676f 66207465 5372756f 3d736365     og set fourSecs=
   c04d8:	62206425 75736552 253d746c 41570064     %d bResult=%d.WA
   c04e8:	44484354 4400474f 5f504545 45574f50     TCHDOG.DEEP_POWE
   c04f8:	4f445f52 43004e57 544e554f 4e574f44     R_DOWN.COUNTDOWN
   c0508:	4d49545f 41005245 4d52414c 69616600     _TIMER.ALARM.fai
   c0518:	6572756c 206e6920 61647075 61576574     lure in updateWa
   c0528:	6552656b 6e6f7361 00642520 656b6177     keReason %d.wake
   c0538:	61657220 206e6f73 7325203d 69616600      reason = %s.fai
   c0548:	6572756c 206e6920 43746573 746e756f     lure in setCount
   c0558:	6e776f64 656d6954 64252072 69616600     downTimer %d.fai
   c0568:	6572756c 206e6920 70656564 65776f50     lure in deepPowe
   c0578:	776f4472 6425206e 47455200 454c535f     rDown %d.REG_SLE
   c0588:	435f5045 3d4c5254 32257830 69640078     EP_CTRL=0x%2x.di
   c0598:	74276e64 776f7020 64207265 006e776f     dn't power down.
   c05a8:	64343025 3230252d 30252d64 25206432     %04d-%02d-%02d %
   c05b8:	3a643230 64323025 3230253a 65670064     02d:%02d:%02d.ge
   c05c8:	63745274 6d547341 00732520 52746573     tRtcAsTm %s.setR
   c05d8:	73416374 25206d54 61660073 72756c69     tcAsTm %s.failur
   c05e8:	6e692065 74657320 46637452 546d6f72     e in setRtcFromT
   c05f8:	6425206d 74657300 43545220 6f726620     m %d.set RTC fro
   c0608:	6c63206d 2064756f 73007325 73207465     m cloud %s.set s
   c0618:	65747379 6c63206d 206b636f 6d6f7266     ystem clock from
   c0628:	43545220 00732520 6c696166 74206465      RTC %s.failed t
   c0638:	6564206f 74636574 31424120 00353038     o detect AB1805.
   c0648:	2e707061 38316261 00003530              app.ab1805..

000c0654 <_ZTV6AB1805>:
	...
   c065c:	000b6895 000b6897 000b6f0d 000b6f93     .h...h...o...o..
   c066c:	6b636142 756f7267 7550646e 73696c62     BackgroundPublis
   c067c:	004b5268                                hRK.

000c0680 <_ZTV19BackgroundPublishRK>:
	...
   c0688:	000b74c9 000b74e5 253a6425 64253a64     .t...t..%d:%d:%d
   c0698:	3a303000 303a3030 33320030 3a39353a     .00:00:00.23:59:
   c06a8:	4d003935 252e6425 64252e64 5a002c00     59.M%d.%d.%d.,.Z
   c06b8:	302b2500 253a6433 00753230              .%+03d:%02u.

000c06c4 <_ZTV9LocalTime>:
	...
   c06cc:	000b7819 000b7831                       .x..1x..

000c06d4 <_ZTV12LocalTimeHMS>:
	...
   c06dc:	000b77c7 000b77cb                       .w...w..

000c06e4 <_ZTV15LocalTimeChange>:
	...
   c06ec:	000b77c9 000b77d9                       .w...w..

000c06f4 <_ZTV22LocalTimePosixTimezone>:
	...
   c06fc:	000b77e9 000b7805                       .w...x..

000c0704 <_ZTV6MB85RC>:
	...
   c070c:	000b8095 000b8097 000b80d5 000b816b     ............k...
   c071c:	000b81ed 656c6966 3d6d754e 73206425     ....fileNum=%d s
   c072c:	3d657a69 00646c25 64616572 75657551     ize=%ld.readQueu
   c073c:	6c694665 64252065 65766520 253d746e     eFile %d event=%
   c074c:	61642073 253d6174 65720073 75516461     s data=%s.readQu
   c075c:	46657565 20656c69 63206425 7572726f     eueFile %d corru
   c076c:	64657470 65766520 6e20746e 20656d61     pted event name 
   c077c:	6420726f 00617461 64616572 75657551     or data.readQueu
   c078c:	6c694665 64252065 64616220 67616d20     eFile %d bad mag
   c079c:	253d6369 786c3830 72657620 6e6f6973     ic=%08lx version
   c07ac:	2075253d 64616568 69537265 253d657a     =%u headerSize=%
   c07bc:	616e2075 654c656d 75253d6e 73752f00     u nameLen=%u./us
   c07cc:	75702f72 65757162 77006575 65746972     r/pubqueue.write
   c07dc:	75657551 466f5465 73656c69 6c696620     QueueToFiles fil
   c07ec:	6d754e65 0064253d 63736964 65647261     eNum=%d.discarde
   c07fc:	76652064 20746e65 72006425 74657365     d event %d.reset
   c080c:	20726f20 63736964 656e6e6f 65207463      or disconnect e
   c081c:	746e6576 6173202c 66206576 73656c69     vent, save files
   c082c:	206f7420 75657571 61720065 6964006d      to queue.ram.di
   c083c:	72616373 676e6964 726f6320 74707572     scarding corrupt
   c084c:	66206465 20656c69 70006425 696c6275     ed file %d.publi
   c085c:	6e696873 73252067 65766520 253d746e     shing %s event=%
   c086c:	61642073 253d6174 59530073 4d455453     s data=%s.SYSTEM
   c087c:	5248545f 28444145 42414e45 2944454c     _THREAD(ENABLED)
   c088c:	20736920 75716572 64657269 62757000      is required.pub
   c089c:	6873696c 6d6d6f43 65206e6f 746e6576     lishCommon event
   c08ac:	656d614e 2073253d 6e657665 74614474     Name=%s eventDat
   c08bc:	73253d61 6e616300 20746f6e 61657263     a=%s.cannot crea
   c08cc:	73206574 3a3a6474 75716564 616c2065     te std::deque la
   c08dc:	72656772 61687420 616d206e 69735f78     rger than max_si
   c08ec:	2928657a 6c696600 65755165 654c6575     ze().fileQueueLe
   c08fc:	75253d6e 6d617220 75657551 6e654c65     n=%u ramQueueLen
   c090c:	2075253d 6e6e6f63 65746365 64253d64     =%u connected=%d
   c091c:	65757100 20646575 72206f74 75516d61     .queued to ramQu
   c092c:	00657565 6c627570 20687369 63637573     eue.publish succ
   c093c:	20737365 72006425 766f6d65 66206465     ess %d.removed f
   c094c:	20656c69 70006425 696c6275 66206873     ile %d.publish f
   c095c:	656c6961 64252064 69727700 676e6974     ailed %d.writing
   c096c:	206f7420 656c6966 66612073 20726574      to files after 
   c097c:	6c627570 20687369 6c696166 00657275     publish failure.
   c098c:	2e707061 71627570 00000000              app.pubq....

000c0998 <_ZTV17PublishQueuePosix>:
	...
   c09a0:	000b8b21 000b8ddd 000b8e01              !...........

000c09ac <_ZTV15RHGenericDriver>:
	...
   c09bc:	000b8f21 000b40a5 000b40a5 000b40a5     !....@...@...@..
   c09cc:	000b40a5 000b8f83 000b8f25 000b8fd3     .@......%.......
   c09dc:	000b8fa1 000b8ff7 000b8f2f 000b8f37     ......../...7...
   c09ec:	000b8f3b 000b8f3f 000b8f43 000b8f47     ;...?...C...G...
   c09fc:	000b8f33 000b8f53 000b8f57 000b8f5b     3...S...W...[...
   c0a0c:	000b8f5f 000b8f63 000b8f69 000b8f6d     _...c...i...m...
   c0a1c:	000b8f2f 000b8f71 000b8f77 000b8f7d     /...q...w...}...

000c0a2c <_ZTV12RHGenericSPI>:
	...
   c0a34:	000b40a5 000b9055 000b9057 000b40a5     .@..U...W....@..
   c0a44:	000b40a5 000b905f 000b9063 000b9067     .@.._...c...g...
   c0a54:	000b9059 000b905b 000b905d 61666564     Y...[...]...defa
   c0a64:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
   c0a74:	74655349 676e6974 65642073 6c756166     ISettings defaul
   c0a84:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
   c0a94:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

000c0aa4 <_ZTVN8particle11SPISettingsE>:
	...
   c0aac:	000b90ad 000b9081 000b9083              ............

000c0ab8 <_ZTV13RHHardwareSPI>:
	...
   c0ac0:	000b9161 000b9175 000b9183 000b9191     a...u...........
   c0ad0:	000b91fd 000b905f 000b9063 000b9067     ...._...c...g...
   c0ae0:	000b920b 000b921f 000b922d              ........-...

000c0aec <_ZTV6RHMesh>:
	...
   c0af4:	000b92f9 000b95a1 000b9259 000b9245     ........Y...E...

000c0b04 <_ZTV8RHRouter>:
	...
   c0b0c:	000b980d 000b9851                       ....Q...

000c0b14 <_ZTV11RHSPIDriver>:
	...
   c0b24:	000b9aed 000b40a5 000b40a5 000b40a5     .....@...@...@..
   c0b34:	000b40a5 000b8f83 000b8f25 000b8fd3     .@......%.......
   c0b44:	000b8fa1 000b8ff7 000b8f2f 000b8f37     ......../...7...
   c0b54:	000b8f3b 000b8f3f 000b8f43 000b8f47     ;...?...C...G...
   c0b64:	000b8f33 000b8f53 000b8f57 000b8f5b     3...S...W...[...
   c0b74:	000b8f5f 000b8f63 000b8f69 000b8f6d     _...c...i...m...
   c0b84:	000b8f2f 000b8f71 000b8f77 000b8f7d     /...q...w...}...
   c0b94:	000b9b19 000b9b23                       ....#...

000c0b9c <_ZL18MODEM_CONFIG_TABLE>:
   c0b9c:	92047472 94480474 0cc47804 0004b472     rt..t.H..x..r...

000c0bac <_ZTV7RH_RF95>:
	...
   c0bb4:	000b9c8b 000b9cc3 000ba199 000ba02f     ............/...
   c0bc4:	000b9cf9 000ba077 000b9c87 000b8f83     ....w...........
   c0bd4:	000b8f25 000b8fd3 000b8fa1 000b8ff7     %...............
   c0be4:	000b9c8d 000b8f37 000b8f3b 000b8f3f     ....7...;...?...
   c0bf4:	000b8f43 000b8f47 000b8f33 000b8f53     C...G...3...S...
   c0c04:	000b8f57 000b8f5b 000b8f5f 000b8f63     W...[..._...c...
   c0c14:	000b8f69 000b8f6d 000b9cd3 000b8f71     i...m.......q...
   c0c24:	000b8f77 000b8f7d 000b9b19 000b9b23     w...}.......#...
   c0c34:	000b9c83 64383025 72002f00 766f6d65     ....%08d./.remov
   c0c44:	25206465 73250073 69786520 20737473     ed %s.%s exists 
   c0c54:	20646e61 61207369 72696420 6f746365     and is a directo
   c0c64:	66007972 20656c69 74206e69 77206568     ry.file in the w
   c0c74:	202c7961 656c6564 676e6974 00732520     ay, deleting %s.
   c0c84:	74617473 6c696620 65206465 6f6e7272     stat filed errno
   c0c94:	0064253d 61657263 20646574 20726964     =%d.created dir 
   c0ca4:	6d007325 7269646b 69616620 2064656c     %s.mkdir failed 
   c0cb4:	6e727265 64253d6f 636e7500 69666e6f     errno=%d.unconfi
   c0cc4:	65727567 69642064 74615072 63730068     gured dirPath.sc
   c0cd4:	696e6e61 2520676e 69772073 70206874     anning %s with p
   c0ce4:	65747461 25206e72 64610073 676e6964     attern %s.adding
   c0cf4:	206f7420 75657571 64252065 00732520      to queue %d %s.
   c0d04:	46746567 46656c69 516d6f72 65756575     getFileFromQueue
   c0d14:	74657220 656e7275 64252064 70706100      returned %d.app
   c0d24:	7165732e 656c6966 00000000              .seqfile....

000c0d30 <_ZTV14SequentialFile>:
	...
   c0d38:	000ba5f5 000ba621 000ba2a1 3a746f67     ....!.......got:
   c0d48:	67616d20 253d6369 20783830 73726576      magic=%08x vers
   c0d58:	3d6e6f69 78343025 7a697320 30253d65     ion=%04x size=%0
   c0d68:	68207834 3d687361 78383025 70786500     4x hash=%08x.exp
   c0d78:	616d203a 3d636967 78383025 72657620     : magic=%08x ver
   c0d88:	6e6f6973 3430253d 69732078 253d657a     sion=%04x size=%
   c0d98:	20783430 68736168 3830253d 00000078     04x hash=%08x...

000c0da8 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c0db0:	000ba94f 000ba99b 000ba94d 000ba955     O.......M...U...
   c0dc0:	000ba97d 000bab11 000baba9 74746553     }...........Sett
   c0dd0:	20676e69 756c6176 66207365 7420726f     ing values for t
   c0de0:	47206568 77657461 00007961              he Gateway..

000c0dec <_ZTVN5spark13CellularClassE>:
	...
   c0df4:	000bb633 000bb629 000bb61f 000bb5d5     3...)...........
   c0e04:	000bb613 000bb607 000bd40d 000bd415     ................
   c0e14:	000bb5fb 000bb5f3 000bb5e9 000bb5df     ................
   c0e24:	000bd445                                E...

000c0e28 <_ZTV14CellularSignal>:
	...
   c0e30:	000bb6c1 000bb725 000bb6c3 000bb735     ....%.......5...
   c0e40:	000bb769 000bb795 000bb7c9 000bb6e9     i...............
   c0e50:	000bb6c7 000bb6e3 fffffffc 00000000     ................
   c0e60:	000bb71d                                ....

000c0e64 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0e6c:	000bb80d 000bb813 000bb851 000bb821     ........Q...!...
   c0e7c:	000bb80f                                ....

000c0e80 <_ZTVN5spark13EthernetClassE>:
	...
   c0e88:	000bbe1b 000bbe11 000bbe07 000bbdfd     ................
   c0e98:	000bbdf1 000bbde5 000bd40d 000bd415     ................
   c0ea8:	000bbdd9 000bbdd1 000bbdc7 000bbdbd     ................
   c0eb8:	000bd445                                E...

000c0ebc <_ZTV7TwoWire>:
	...
   c0ec4:	000bbeeb 000bbf35 000bbf0d 000bbeed     ....5...........
   c0ed4:	000bbf15 000bbf1d 000bbf25 000bbf2d     ........%...-...

000c0ee4 <_ZTV9IPAddress>:
	...
   c0eec:	000bc0cd 000bc0bd 000bc0bf 34302575     ............u%04
   c0efc:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   c0f0c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   c0f1c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   c0f2c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   c0f3c:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   c0f4c:	69617465 3d20736c 0a0d0020 006e6c00     etails = ....ln.
   c0f5c:	63006e66 0065646f 61746564 00006c69     fn.code.detail..

000c0f6c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c0f74:	000bc579 000bc59f 000bc55d 000bc1db     y.......].......

000c0f84 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c0f8c:	000bc95d 000bc975 000bd0b5 000b5f2f     ]...u......./_..

000c0f9c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c0fa4:	000bc989 000bc99d 000bd259 000bc565     ........Y...e...

000c0fb4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c0fbc:	000bc577 000bc5ad 000bd019 000bc567     w...........g...

000c0fcc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c0fd4:	000bc575 000bc5bb 000bc8c5 000bc5dd     u...............

000c0fe4 <_ZTVN5spark12NetworkClassE>:
	...
   c0fec:	000bd3cd 000bd3d7 000bd3e1 000bd3eb     ................
   c0ffc:	000bd3f5 000bd401 000bd40d 000bd415     ................
   c100c:	000bd41d 000bd429 000bd431 000bd43b     ....)...1...;...
   c101c:	000bd445 006e616e 00666e69 0066766f     E...nan.inf.ovf.

000c102c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c102c:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   c103c:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   c104c:	72756769 6f697461 7369206e 766e6920     iguration is inv
   c105c:	64696c61 5925002e 2d6d252d 25546425     alid..%Y-%m-%dT%
   c106c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   c107c:	00000065                                e...

000c1080 <_ZTV11USARTSerial>:
	...
   c1088:	000be2a9 000be315 000be2ed 000bd695     ................
   c1098:	000be2bd 000be2d9 000be2cb 000be2e7     ................
   c10a8:	000be2ab 000be2af                       ........

000c10b0 <_ZTV9USBSerial>:
	...
   c10b8:	000be367 000be3cf 000be3a5 000bd695     g...............
   c10c8:	000be397 000be369 000be379 000be3c9     ....i...y.......
   c10d8:	000be389 000be361                       ....a...

000c10e0 <_ZSt7nothrow>:
   c10e0:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   c10f0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000c1101 <day_name.1>:
   c1101:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   c1111:	61536972                                 riSat

000c1116 <mon_name.0>:
   c1116:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   c1126:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   c1136:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   c1146:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   c1156:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   c1166:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   c1176:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   c1186:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   c1196:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   c11a6:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   c11b6:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c11c6:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c11d6:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c11e6:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c11f6:	696c6474 61722f62 632e646e               tdlib/rand.c.

000c1203 <_ctype_>:
   c1203:	20202000 20202020 28282020 20282828     .         ((((( 
   c1213:	20202020 20202020 20202020 20202020                     
   c1223:	10108820 10101010 10101010 10101010      ...............
   c1233:	04040410 04040404 10040404 10101010     ................
   c1243:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c1253:	01010101 01010101 01010101 10101010     ................
   c1263:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c1273:	02020202 02020202 02020202 10101010     ................
   c1283:	00000020 00000000 00000000 00000000      ...............
	...

000c1304 <link_const_variable_data_end>:
   c1304:	000b4ad1 	.word	0x000b4ad1
   c1308:	000b52dd 	.word	0x000b52dd
   c130c:	000b5e35 	.word	0x000b5e35
   c1310:	000b6479 	.word	0x000b6479
   c1314:	000b6889 	.word	0x000b6889
   c1318:	000b73ad 	.word	0x000b73ad
   c131c:	000b8dcd 	.word	0x000b8dcd
   c1320:	000b9235 	.word	0x000b9235
   c1324:	000ba93d 	.word	0x000ba93d
   c1328:	000bb5c5 	.word	0x000bb5c5
   c132c:	000bb691 	.word	0x000bb691
   c1330:	000bbe25 	.word	0x000bbe25
   c1334:	000bd0a5 	.word	0x000bd0a5
   c1338:	000bd51d 	.word	0x000bd51d
   c133c:	000bd985 	.word	0x000bd985
   c1340:	000bdf6d 	.word	0x000bdf6d
   c1344:	000be295 	.word	0x000be295

000c1348 <link_constructors_end>:
	...
