
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.2/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011c60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c5c80  000c5c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c5ca4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e8  2003d57c  000c5ca8  0002d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f8c  2003d868  2003d868  0003d868  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c5f90  000c5f90  00035f90  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c5fbc  000c5fbc  00035fbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002a638c  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c78d  00000000  00000000  002dc34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006f93b  00000000  00000000  00308ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005070  00000000  00000000  00378414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012998  00000000  00000000  0037d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ecc9  00000000  00000000  0038fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000963c2  00000000  00000000  003eeae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173351  00000000  00000000  00484ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f8a0  00000000  00000000  005f81f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00d f9ad 	bl	c1390 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00d f9cf 	bl	c13e0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d57c 	.word	0x2003d57c
   b404c:	000c5ca8 	.word	0x000c5ca8
   b4050:	2003d864 	.word	0x2003d864
   b4054:	2003d868 	.word	0x2003d868
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c fa71 	bl	c0548 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c5c3c 	.word	0x000c5c3c
   b4080:	000c5c80 	.word	0x000c5c80

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bd0a 	b.w	b5a9c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fded 	bl	b5c68 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c ba11 	b.w	c04b8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 b9c5 	b.w	bd424 <malloc>

000b409a <_Znaj>:
   b409a:	f009 b9c3 	b.w	bd424 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f009 b9c9 	b.w	bd434 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f009 f846 	bl	bd13c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bccdd 	.word	0x000bccdd
   b40b8:	000c37b4 	.word	0x000c37b4

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f004 fcd4 	bl	b8a90 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c3eb0 	.word	0x000c3eb0

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 fea1 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f004 fdb1 	bl	b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 fe93 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 fe6f 	bl	b8e18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 fffc 	bl	bd15c <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d86c 	.word	0x2003d86c
   b4190:	000c3ec0 	.word	0x000c3ec0

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f007 fd4f 	bl	bbc48 <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d8ec 	.word	0x2003d8ec

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f007 bd32 	b.w	bbc22 <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d8ec 	.word	0x2003d8ec

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c4:	4b17      	ldr	r3, [pc, #92]	; (b4224 <_ZN14LoRA_Functions15initializeRadioEv+0x60>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41c6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c8:	881c      	ldrh	r4, [r3, #0]
   b41ca:	2100      	movs	r1, #0
   b41cc:	4620      	mov	r0, r4
   b41ce:	f00c fa54 	bl	c067a <digitalWrite>
	delay(10);
   b41d2:	200a      	movs	r0, #10
   b41d4:	f009 f9a6 	bl	bd524 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b41d8:	2101      	movs	r1, #1
   b41da:	4620      	mov	r0, r4
   b41dc:	f00c fa4d 	bl	c067a <digitalWrite>
	delay(10);
   b41e0:	200a      	movs	r0, #10
   b41e2:	f009 f99f 	bl	bd524 <delay>

	if (!manager.init()) {
   b41e6:	4810      	ldr	r0, [pc, #64]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b41e8:	f007 fab9 	bl	bb75e <_ZN8RHRouter4initEv>
   b41ec:	4604      	mov	r4, r0
   b41ee:	b928      	cbnz	r0, b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41f0:	490e      	ldr	r1, [pc, #56]	; (b422c <_ZN14LoRA_Functions15initializeRadioEv+0x68>)
   b41f2:	480f      	ldr	r0, [pc, #60]	; (b4230 <_ZN14LoRA_Functions15initializeRadioEv+0x6c>)
   b41f4:	f7ff ffa3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
	driver.setModemConfig(RH_RF95::Bw125Cr48Sf4096);	// This optimized the radio for long range - https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html
	manager.setTimeout(2000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html

return true;
}
   b41f8:	4620      	mov	r0, r4
   b41fa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41fc:	ed9f 0a0d 	vldr	s0, [pc, #52]	; b4234 <_ZN14LoRA_Functions15initializeRadioEv+0x70>
   b4200:	480d      	ldr	r0, [pc, #52]	; (b4238 <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b4202:	f007 fda5 	bl	bbd50 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4206:	2200      	movs	r2, #0
   b4208:	480b      	ldr	r0, [pc, #44]	; (b4238 <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b420a:	2117      	movs	r1, #23
   b420c:	f007 ff1a 	bl	bc044 <_ZN7RH_RF9510setTxPowerEab>
	driver.setModemConfig(RH_RF95::Bw125Cr48Sf4096);	// This optimized the radio for long range - https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html
   b4210:	2103      	movs	r1, #3
   b4212:	4809      	ldr	r0, [pc, #36]	; (b4238 <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b4214:	f007 ff42 	bl	bc09c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
	manager.setTimeout(2000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
   b4218:	4808      	ldr	r0, [pc, #32]	; (b423c <_ZN14LoRA_Functions15initializeRadioEv+0x78>)
   b421a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b421e:	f007 f9ac 	bl	bb57a <_ZN18RHReliableDatagram10setTimeoutEt>
return true;
   b4222:	e7e9      	b.n	b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b4224:	000c4a00 	.word	0x000c4a00
   b4228:	2003e168 	.word	0x2003e168
   b422c:	000c37c9 	.word	0x000c37c9
   b4230:	2003e650 	.word	0x2003e650
   b4234:	4467b5c3 	.word	0x4467b5c3
   b4238:	2003d8ec 	.word	0x2003d8ec
   b423c:	2003e16c 	.word	0x2003e16c

000b4240 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4240:	b510      	push	{r4, lr}
   b4242:	460c      	mov	r4, r1
   b4244:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b4246:	f7ff ffbd 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b424a:	2c00      	cmp	r4, #0
   b424c:	d03c      	beq.n	b42c8 <_ZN14LoRA_Functions5setupEb+0x88>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b424e:	f002 f937 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4252:	2100      	movs	r1, #0
   b4254:	f002 fb1d 	bl	b6892 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4258:	a802      	add	r0, sp, #8
   b425a:	f009 f84b 	bl	bd2f4 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b425e:	9a02      	ldr	r2, [sp, #8]
   b4260:	4937      	ldr	r1, [pc, #220]	; (b4340 <_ZN14LoRA_Functions5setupEb+0x100>)
   b4262:	4838      	ldr	r0, [pc, #224]	; (b4344 <_ZN14LoRA_Functions5setupEb+0x104>)
   b4264:	f7ff ff6b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4268:	a802      	add	r0, sp, #8
   b426a:	f00b fc35 	bl	bfad8 <_ZN6StringD1Ev>
	jp.addString(nodeDatabase.get_nodeIDJson());				// Read in the JSON string from memory
   b426e:	f002 f9f5 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4272:	4601      	mov	r1, r0
   b4274:	a802      	add	r0, sp, #8
   b4276:	f002 fa1b 	bl	b66b0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b427a:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b427c:	9101      	str	r1, [sp, #4]
   b427e:	4608      	mov	r0, r1
   b4280:	f00d f979 	bl	c1576 <strlen>
   b4284:	9901      	ldr	r1, [sp, #4]
   b4286:	4602      	mov	r2, r0
   b4288:	482f      	ldr	r0, [pc, #188]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x108>)
   b428a:	f004 fc3c 	bl	b8b06 <_ZN10JsonBuffer7addDataEPKcj>
   b428e:	a802      	add	r0, sp, #8
   b4290:	f00b fc22 	bl	bfad8 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4294:	f002 f9e2 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4298:	4601      	mov	r1, r0
   b429a:	a802      	add	r0, sp, #8
   b429c:	f002 fa08 	bl	b66b0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b42a0:	9a02      	ldr	r2, [sp, #8]
   b42a2:	492a      	ldr	r1, [pc, #168]	; (b434c <_ZN14LoRA_Functions5setupEb+0x10c>)
   b42a4:	4827      	ldr	r0, [pc, #156]	; (b4344 <_ZN14LoRA_Functions5setupEb+0x104>)
   b42a6:	f7ff ff4a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42aa:	a802      	add	r0, sp, #8
   b42ac:	f00b fc14 	bl	bfad8 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b42b0:	4825      	ldr	r0, [pc, #148]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x108>)
   b42b2:	f005 f981 	bl	b95b8 <_ZN10JsonParser5parseEv>
   b42b6:	2800      	cmp	r0, #0
   b42b8:	d03b      	beq.n	b4332 <_ZN14LoRA_Functions5setupEb+0xf2>
   b42ba:	4925      	ldr	r1, [pc, #148]	; (b4350 <_ZN14LoRA_Functions5setupEb+0x110>)
		Log.info("Parsing error resetting nodeID database");
   b42bc:	4821      	ldr	r0, [pc, #132]	; (b4344 <_ZN14LoRA_Functions5setupEb+0x104>)
   b42be:	f7ff ff3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b42c2:	2001      	movs	r0, #1
   b42c4:	b006      	add	sp, #24
   b42c6:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b42c8:	f002 f8fa 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b42cc:	f002 fa74 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42d0:	b1d8      	cbz	r0, b430a <_ZN14LoRA_Functions5setupEb+0xca>
   b42d2:	f002 f8f5 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b42d6:	f002 fa6f 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42da:	280a      	cmp	r0, #10
   b42dc:	d815      	bhi.n	b430a <_ZN14LoRA_Functions5setupEb+0xca>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42de:	f002 f8ef 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b42e2:	f002 fa69 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42e6:	4601      	mov	r1, r0
   b42e8:	481a      	ldr	r0, [pc, #104]	; (b4354 <_ZN14LoRA_Functions5setupEb+0x114>)
   b42ea:	f006 fd62 	bl	badb2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42ee:	4819      	ldr	r0, [pc, #100]	; (b4354 <_ZN14LoRA_Functions5setupEb+0x114>)
   b42f0:	f006 fd45 	bl	bad7e <_ZN10RHDatagram11thisAddressEv>
   b42f4:	9001      	str	r0, [sp, #4]
   b42f6:	a802      	add	r0, sp, #8
   b42f8:	f008 fffc 	bl	bd2f4 <spark_deviceID>
   b42fc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4300:	4915      	ldr	r1, [pc, #84]	; (b4358 <_ZN14LoRA_Functions5setupEb+0x118>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4302:	4810      	ldr	r0, [pc, #64]	; (b4344 <_ZN14LoRA_Functions5setupEb+0x104>)
   b4304:	f7ff ff1b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4308:	e7ae      	b.n	b4268 <_ZN14LoRA_Functions5setupEb+0x28>
		sysStatus.set_nodeNumber(11);
   b430a:	f002 f8d9 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b430e:	210b      	movs	r1, #11
   b4310:	f002 fabf 	bl	b6892 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4314:	210b      	movs	r1, #11
   b4316:	480f      	ldr	r0, [pc, #60]	; (b4354 <_ZN14LoRA_Functions5setupEb+0x114>)
   b4318:	f006 fd4b 	bl	badb2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b431c:	480d      	ldr	r0, [pc, #52]	; (b4354 <_ZN14LoRA_Functions5setupEb+0x114>)
   b431e:	f006 fd2e 	bl	bad7e <_ZN10RHDatagram11thisAddressEv>
   b4322:	9001      	str	r0, [sp, #4]
   b4324:	a802      	add	r0, sp, #8
   b4326:	f008 ffe5 	bl	bd2f4 <spark_deviceID>
   b432a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b432e:	490b      	ldr	r1, [pc, #44]	; (b435c <_ZN14LoRA_Functions5setupEb+0x11c>)
   b4330:	e7e7      	b.n	b4302 <_ZN14LoRA_Functions5setupEb+0xc2>
		nodeDatabase.resetNodeIDs();
   b4332:	f002 f993 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4336:	f002 f9d3 	bl	b66e0 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b433a:	4909      	ldr	r1, [pc, #36]	; (b4360 <_ZN14LoRA_Functions5setupEb+0x120>)
   b433c:	e7be      	b.n	b42bc <_ZN14LoRA_Functions5setupEb+0x7c>
   b433e:	bf00      	nop
   b4340:	000c37d5 	.word	0x000c37d5
   b4344:	2003e650 	.word	0x2003e650
   b4348:	2003da1c 	.word	0x2003da1c
   b434c:	000c388d 	.word	0x000c388d
   b4350:	000c38a4 	.word	0x000c38a4
   b4354:	2003e16c 	.word	0x2003e16c
   b4358:	000c380f 	.word	0x000c380f
   b435c:	000c3846 	.word	0x000c3846
   b4360:	000c38b8 	.word	0x000c38b8

000b4364 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false;
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b4364:	b538      	push	{r3, r4, r5, lr}
	current.set_hourlyCount(buf[4] << 8 | buf[5]);
   b4366:	4c1e      	ldr	r4, [pc, #120]	; (b43e0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x7c>)
   b4368:	f002 f8f2 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b436c:	88a1      	ldrh	r1, [r4, #4]
   b436e:	ba49      	rev16	r1, r1
   b4370:	b289      	uxth	r1, r1
   b4372:	f002 fbde 	bl	b6b32 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[6] << 8 | buf[7]);
   b4376:	f002 f8eb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b437a:	88e1      	ldrh	r1, [r4, #6]
   b437c:	ba49      	rev16	r1, r1
   b437e:	b289      	uxth	r1, r1
   b4380:	f002 fbdd 	bl	b6b3e <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[8]);
   b4384:	f002 f8e4 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4388:	7a21      	ldrb	r1, [r4, #8]
   b438a:	f002 fae2 	bl	b6952 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[9]);
   b438e:	f002 f8df 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4392:	7a61      	ldrb	r1, [r4, #9]
   b4394:	f002 fab9 	bl	b690a <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[10]);
   b4398:	f002 f8da 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b439c:	4605      	mov	r5, r0
   b439e:	7aa0      	ldrb	r0, [r4, #10]
   b43a0:	f00c fbc4 	bl	c0b2c <__aeabi_ui2d>
   b43a4:	ec41 0b10 	vmov	d0, r0, r1
   b43a8:	4628      	mov	r0, r5
   b43aa:	f002 f919 	bl	b65e0 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b43ae:	f002 f8cf 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b43b2:	7ae1      	ldrb	r1, [r4, #11]
   b43b4:	f002 faaf 	bl	b6916 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[12]);
   b43b8:	f002 f8ca 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b43bc:	7b21      	ldrb	r1, [r4, #12]
   b43be:	f002 fab0 	bl	b6922 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[13]);
   b43c2:	f002 f8c5 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b43c6:	7b61      	ldrb	r1, [r4, #13]
   b43c8:	f002 fab1 	bl	b692e <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[14]);
   b43cc:	f002 f8c0 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b43d0:	7ba1      	ldrb	r1, [r4, #14]
   b43d2:	f002 fab2 	bl	b693a <_ZN17currentStatusData16set_successCountEh>

	lora_state = DATA_ACK;		// Prepare to respond
   b43d6:	4b03      	ldr	r3, [pc, #12]	; (b43e4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x80>)
   b43d8:	2204      	movs	r2, #4
   b43da:	701a      	strb	r2, [r3, #0]
	return true;
}
   b43dc:	2001      	movs	r0, #1
   b43de:	bd38      	pop	{r3, r4, r5, pc}
   b43e0:	2003d870 	.word	0x2003d870
   b43e4:	2003d868 	.word	0x2003d868

000b43e8 <_ZN14LoRA_Functions12findDeviceIDEii>:
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43e8:	b570      	push	{r4, r5, r6, lr}
   b43ea:	b088      	sub	sp, #32
	String nodeDeviceID;
   b43ec:	491d      	ldr	r1, [pc, #116]	; (b4464 <_ZN14LoRA_Functions12findDeviceIDEii+0x7c>)
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43ee:	4604      	mov	r4, r0
	String nodeDeviceID;
   b43f0:	a804      	add	r0, sp, #16
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43f2:	4616      	mov	r6, r2
   b43f4:	461d      	mov	r5, r3
	String nodeDeviceID;
   b43f6:	f00b fbba 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	int nodeRadioID;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b43fa:	481b      	ldr	r0, [pc, #108]	; (b4468 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43fc:	f004 fbc5 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4400:	4a1a      	ldr	r2, [pc, #104]	; (b446c <_ZN14LoRA_Functions12findDeviceIDEii+0x84>)
   b4402:	4601      	mov	r1, r0
   b4404:	ab03      	add	r3, sp, #12
   b4406:	4818      	ldr	r0, [pc, #96]	; (b4468 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4408:	f004 fd24 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b440c:	9903      	ldr	r1, [sp, #12]
   b440e:	4816      	ldr	r0, [pc, #88]	; (b4468 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4410:	1e72      	subs	r2, r6, #1
   b4412:	f004 fbdc 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4416:	4601      	mov	r1, r0
   b4418:	b948      	cbnz	r0, b442e <_ZN14LoRA_Functions12findDeviceIDEii+0x46>
   b441a:	4915      	ldr	r1, [pc, #84]	; (b4470 <_ZN14LoRA_Functions12findDeviceIDEii+0x88>)
   b441c:	4620      	mov	r0, r4
   b441e:	f00b fba6 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4422:	a804      	add	r0, sp, #16
   b4424:	f00b fb58 	bl	bfad8 <_ZN6StringD1Ev>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo

	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
	else return nodeDeviceID;
}
   b4428:	4620      	mov	r0, r4
   b442a:	b008      	add	sp, #32
   b442c:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer,"rID", nodeRadioID);				// Get the radioID to see if it is a match
   b442e:	ab02      	add	r3, sp, #8
   b4430:	9001      	str	r0, [sp, #4]
   b4432:	4a10      	ldr	r2, [pc, #64]	; (b4474 <_ZN14LoRA_Functions12findDeviceIDEii+0x8c>)
   b4434:	480c      	ldr	r0, [pc, #48]	; (b4468 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4436:	f7ff fe66 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo
   b443a:	9b02      	ldr	r3, [sp, #8]
   b443c:	9901      	ldr	r1, [sp, #4]
   b443e:	42ab      	cmp	r3, r5
   b4440:	d1eb      	bne.n	b441a <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
   b4442:	4809      	ldr	r0, [pc, #36]	; (b4468 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4444:	4a0c      	ldr	r2, [pc, #48]	; (b4478 <_ZN14LoRA_Functions12findDeviceIDEii+0x90>)
   b4446:	ab04      	add	r3, sp, #16
   b4448:	f7ff fe6b 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b444c:	2100      	movs	r1, #0
   b444e:	a804      	add	r0, sp, #16
   b4450:	f00b fc53 	bl	bfcfa <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b4454:	2800      	cmp	r0, #0
   b4456:	d1e0      	bne.n	b441a <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	else return nodeDeviceID;
   b4458:	a904      	add	r1, sp, #16
   b445a:	4620      	mov	r0, r4
   b445c:	f00b fbb8 	bl	bfbd0 <_ZN6StringC1EOS_>
   b4460:	e7df      	b.n	b4422 <_ZN14LoRA_Functions12findDeviceIDEii+0x3a>
   b4462:	bf00      	nop
   b4464:	000c5654 	.word	0x000c5654
   b4468:	2003da1c 	.word	0x2003da1c
   b446c:	000c38e0 	.word	0x000c38e0
   b4470:	000c38e6 	.word	0x000c38e6
   b4474:	000c38eb 	.word	0x000c38eb
   b4478:	000c38ef 	.word	0x000c38ef

000b447c <_ZN14LoRA_Functions14nodeConfiguredEii>:

bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b447c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nodeNumber > 10) return false;
   b447e:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b4480:	460c      	mov	r4, r1
   b4482:	9201      	str	r2, [sp, #4]
	if (nodeNumber > 10) return false;
   b4484:	dd02      	ble.n	b448c <_ZN14LoRA_Functions14nodeConfiguredEii+0x10>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question

	if (radioID == current.get_nodeID()) return true;
	else {
		Log.info("Node not configured");  // See the raw JSON string
		return false;
   b4486:	2000      	movs	r0, #0
	}
}
   b4488:	b004      	add	sp, #16
   b448a:	bd10      	pop	{r4, pc}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b448c:	4811      	ldr	r0, [pc, #68]	; (b44d4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b448e:	f004 fb7c 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4492:	4a11      	ldr	r2, [pc, #68]	; (b44d8 <_ZN14LoRA_Functions14nodeConfiguredEii+0x5c>)
   b4494:	4601      	mov	r1, r0
   b4496:	ab03      	add	r3, sp, #12
   b4498:	480e      	ldr	r0, [pc, #56]	; (b44d4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b449a:	f004 fcdb 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b449e:	9903      	ldr	r1, [sp, #12]
   b44a0:	480c      	ldr	r0, [pc, #48]	; (b44d4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44a2:	1e62      	subs	r2, r4, #1
   b44a4:	f004 fb93 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b44a8:	4601      	mov	r1, r0
   b44aa:	2800      	cmp	r0, #0
   b44ac:	d0eb      	beq.n	b4486 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question
   b44ae:	ab01      	add	r3, sp, #4
   b44b0:	4a0a      	ldr	r2, [pc, #40]	; (b44dc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b44b2:	4808      	ldr	r0, [pc, #32]	; (b44d4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44b4:	f7ff fe27 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (radioID == current.get_nodeID()) return true;
   b44b8:	f002 f84a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b44bc:	f002 fac9 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b44c0:	9b01      	ldr	r3, [sp, #4]
   b44c2:	4298      	cmp	r0, r3
   b44c4:	d004      	beq.n	b44d0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x54>
		Log.info("Node not configured");  // See the raw JSON string
   b44c6:	4906      	ldr	r1, [pc, #24]	; (b44e0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x64>)
   b44c8:	4806      	ldr	r0, [pc, #24]	; (b44e4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x68>)
   b44ca:	f7ff fe38 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b44ce:	e7da      	b.n	b4486 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	if (radioID == current.get_nodeID()) return true;
   b44d0:	2001      	movs	r0, #1
   b44d2:	e7d9      	b.n	b4488 <_ZN14LoRA_Functions14nodeConfiguredEii+0xc>
   b44d4:	2003da1c 	.word	0x2003da1c
   b44d8:	000c38e0 	.word	0x000c38e0
   b44dc:	000c38eb 	.word	0x000c38eb
   b44e0:	000c38f3 	.word	0x000c38f3
   b44e4:	2003e650 	.word	0x2003e650

000b44e8 <_ZN14LoRA_Functions7getTypeEi>:

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
	return true;
}

byte LoRA_Functions::getType(int nodeNumber) {
   b44e8:	b513      	push	{r0, r1, r4, lr}
	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ea:	4816      	ldr	r0, [pc, #88]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
byte LoRA_Functions::getType(int nodeNumber) {
   b44ec:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ee:	f004 fb4c 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b44f2:	4a15      	ldr	r2, [pc, #84]	; (b4548 <_ZN14LoRA_Functions7getTypeEi+0x60>)
   b44f4:	4601      	mov	r1, r0
   b44f6:	ab01      	add	r3, sp, #4
   b44f8:	4812      	ldr	r0, [pc, #72]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44fa:	f004 fcab 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44fe:	9901      	ldr	r1, [sp, #4]
   b4500:	4810      	ldr	r0, [pc, #64]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b4502:	1e62      	subs	r2, r4, #1
   b4504:	f004 fb63 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b4508:	4601      	mov	r1, r0
   b450a:	b970      	cbnz	r0, b452a <_ZN14LoRA_Functions7getTypeEi+0x42>
		Log.info("From getType function Node number not found so returning %d",current.get_sensorType());
   b450c:	f002 f820 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4510:	f002 f9a2 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4514:	490d      	ldr	r1, [pc, #52]	; (b454c <_ZN14LoRA_Functions7getTypeEi+0x64>)
   b4516:	4602      	mov	r2, r0
   b4518:	480d      	ldr	r0, [pc, #52]	; (b4550 <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b451a:	f7ff fe10 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries, go with what was reported by the node
   b451e:	f002 f817 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4522:	f002 f999 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
	Log.info("Returning sensor type %d",type);
	return type;
}
   b4526:	b002      	add	sp, #8
   b4528:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b452a:	4a0a      	ldr	r2, [pc, #40]	; (b4554 <_ZN14LoRA_Functions7getTypeEi+0x6c>)
   b452c:	4805      	ldr	r0, [pc, #20]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b452e:	466b      	mov	r3, sp
   b4530:	f7ff fde9 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Returning sensor type %d",type);
   b4534:	4806      	ldr	r0, [pc, #24]	; (b4550 <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4536:	9a00      	ldr	r2, [sp, #0]
   b4538:	4907      	ldr	r1, [pc, #28]	; (b4558 <_ZN14LoRA_Functions7getTypeEi+0x70>)
   b453a:	f7ff fe00 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	return type;
   b453e:	f89d 0000 	ldrb.w	r0, [sp]
   b4542:	e7f0      	b.n	b4526 <_ZN14LoRA_Functions7getTypeEi+0x3e>
   b4544:	2003da1c 	.word	0x2003da1c
   b4548:	000c38e0 	.word	0x000c38e0
   b454c:	000c3907 	.word	0x000c3907
   b4550:	2003e650 	.word	0x2003e650
   b4554:	000c3943 	.word	0x000c3943
   b4558:	000c3948 	.word	0x000c3948

000b455c <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b455c:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b455e:	b513      	push	{r0, r1, r4, lr}
   b4560:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4562:	dc13      	bgt.n	b458c <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4564:	480f      	ldr	r0, [pc, #60]	; (b45a4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4566:	f004 fb10 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b456a:	4a0f      	ldr	r2, [pc, #60]	; (b45a8 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b456c:	4601      	mov	r1, r0
   b456e:	ab01      	add	r3, sp, #4
   b4570:	480c      	ldr	r0, [pc, #48]	; (b45a4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4572:	f004 fc6f 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4576:	9901      	ldr	r1, [sp, #4]
   b4578:	480a      	ldr	r0, [pc, #40]	; (b45a4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b457a:	1e62      	subs	r2, r4, #1
   b457c:	f004 fb27 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b4580:	4601      	mov	r1, r0
   b4582:	b928      	cbnz	r0, b4590 <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b4584:	4909      	ldr	r1, [pc, #36]	; (b45ac <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b4586:	480a      	ldr	r0, [pc, #40]	; (b45b0 <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b4588:	f7ff fdd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b458c:	20ff      	movs	r0, #255	; 0xff
   b458e:	e006      	b.n	b459e <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4590:	4804      	ldr	r0, [pc, #16]	; (b45a4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4592:	4a08      	ldr	r2, [pc, #32]	; (b45b4 <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b4594:	466b      	mov	r3, sp
   b4596:	f7ff fdb6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b459a:	f89d 0000 	ldrb.w	r0, [sp]

}
   b459e:	b002      	add	sp, #8
   b45a0:	bd10      	pop	{r4, pc}
   b45a2:	bf00      	nop
   b45a4:	2003da1c 	.word	0x2003da1c
   b45a8:	000c38e0 	.word	0x000c38e0
   b45ac:	000c3961 	.word	0x000c3961
   b45b0:	2003e650 	.word	0x2003e650
   b45b4:	000c398f 	.word	0x000c398f

000b45b8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b45b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45bc:	4605      	mov	r5, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45be:	f001 ff7f 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b45c2:	f002 f9e3 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45c6:	263c      	movs	r6, #60	; 0x3c
   b45c8:	4346      	muls	r6, r0
	bool health = true;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45ca:	4821      	ldr	r0, [pc, #132]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45cc:	4f20      	ldr	r7, [pc, #128]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45ce:	f8df 809c 	ldr.w	r8, [pc, #156]	; b466c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45d2:	f004 fada 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b45d6:	4a1f      	ldr	r2, [pc, #124]	; (b4654 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9c>)
   b45d8:	4601      	mov	r1, r0
   b45da:	ab01      	add	r3, sp, #4
   b45dc:	481c      	ldr	r0, [pc, #112]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
   b45de:	f004 fc39 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45e2:	2400      	movs	r4, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45e4:	9901      	ldr	r1, [sp, #4]
   b45e6:	4622      	mov	r2, r4
   b45e8:	4638      	mov	r0, r7
   b45ea:	f004 faf0 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b45ee:	4601      	mov	r1, r0
   b45f0:	b168      	cbz	r0, b460e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x56>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45f2:	466b      	mov	r3, sp
   b45f4:	4642      	mov	r2, r8
   b45f6:	4638      	mov	r0, r7
   b45f8:	f7ff fd85 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

		if ((Time.now() - lastConnect) > secondsPerPeriod) {				// If any of the nodes fail to connect - will extend loRA dwell time
   b45fc:	f00b fe2d 	bl	c025a <_ZN9TimeClass3nowEv>
   b4600:	9b00      	ldr	r3, [sp, #0]
   b4602:	1ac0      	subs	r0, r0, r3
   b4604:	4286      	cmp	r6, r0
   b4606:	db19      	blt.n	b463c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x84>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4608:	3401      	adds	r4, #1
   b460a:	2c0a      	cmp	r4, #10
   b460c:	d1ea      	bne.n	b45e4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x2c>
			health = false;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b460e:	4a12      	ldr	r2, [pc, #72]	; (b4658 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4610:	2401      	movs	r4, #1
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b4612:	4912      	ldr	r1, [pc, #72]	; (b465c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa4>)
   b4614:	4812      	ldr	r0, [pc, #72]	; (b4660 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
   b4616:	f7ff fd92 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b461a:	b994      	cbnz	r4, b4642 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8a>
		Log.info("Node connections unhealthy, reseting LoRA radio");
   b461c:	4911      	ldr	r1, [pc, #68]	; (b4664 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>)
   b461e:	4810      	ldr	r0, [pc, #64]	; (b4660 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
   b4620:	f7ff fd8d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_connectivityMode(1);									// This will set a longer LoRA connection window
   b4624:	f001 ff4c 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4628:	2101      	movs	r1, #1
   b462a:	f002 f93e 	bl	b68aa <_ZN13sysStatusData20set_connectivityModeEh>
		LoRA_Functions::initializeRadio();
   b462e:	4628      	mov	r0, r5
   b4630:	f7ff fdc8 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	}
	else sysStatus.set_connectivityMode(0);									// This will set a normal LoRA connection window

	return health;
}
   b4634:	4620      	mov	r0, r4
   b4636:	b002      	add	sp, #8
   b4638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b463c:	4a0a      	ldr	r2, [pc, #40]	; (b4668 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb0>)
			health = false;
   b463e:	2400      	movs	r4, #0
   b4640:	e7e7      	b.n	b4612 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x5a>
	else sysStatus.set_connectivityMode(0);									// This will set a normal LoRA connection window
   b4642:	f001 ff3d 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4646:	2100      	movs	r1, #0
   b4648:	f002 f92f 	bl	b68aa <_ZN13sysStatusData20set_connectivityModeEh>
   b464c:	e7f2      	b.n	b4634 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x7c>
   b464e:	bf00      	nop
   b4650:	2003da1c 	.word	0x2003da1c
   b4654:	000c38e0 	.word	0x000c38e0
   b4658:	000c3996 	.word	0x000c3996
   b465c:	000c39a3 	.word	0x000c39a3
   b4660:	2003e650 	.word	0x2003e650
   b4664:	000c39bc 	.word	0x000c39bc
   b4668:	000c3994 	.word	0x000c3994
   b466c:	000c399e 	.word	0x000c399e

000b4670 <_ZN14LoRA_Functions14stringCheckSumE6String>:

int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4670:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b4672:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4674:	460e      	mov	r6, r1
    int result = 0;
   b4676:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b4678:	68b3      	ldr	r3, [r6, #8]
   b467a:	429d      	cmp	r5, r3
   b467c:	d218      	bcs.n	b46b0 <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b467e:	4629      	mov	r1, r5
   b4680:	4630      	mov	r0, r6
   b4682:	f00b fb61 	bl	bfd48 <_ZN6StringixEj>
   b4686:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b4688:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b468c:	2a09      	cmp	r2, #9
   b468e:	d802      	bhi.n	b4696 <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b4690:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b4692:	3501      	adds	r5, #1
   b4694:	e7f0      	b.n	b4678 <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b4696:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b469a:	2a05      	cmp	r2, #5
   b469c:	d802      	bhi.n	b46a4 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b469e:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b46a0:	441c      	add	r4, r3
   b46a2:	e7f6      	b.n	b4692 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b46a4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b46a8:	2a05      	cmp	r2, #5
   b46aa:	d8f2      	bhi.n	b4692 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b46ac:	3b57      	subs	r3, #87	; 0x57
   b46ae:	e7f7      	b.n	b46a0 <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b46b0:	4620      	mov	r0, r4
   b46b2:	bd70      	pop	{r4, r5, r6, pc}

000b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b46b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b46b6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b46b8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b46ba:	b17c      	cbz	r4, b46dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b46bc:	6863      	ldr	r3, [r4, #4]
   b46be:	3b01      	subs	r3, #1
   b46c0:	6063      	str	r3, [r4, #4]
   b46c2:	b95b      	cbnz	r3, b46dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b46c4:	6823      	ldr	r3, [r4, #0]
   b46c6:	4620      	mov	r0, r4
   b46c8:	689b      	ldr	r3, [r3, #8]
   b46ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46cc:	68a3      	ldr	r3, [r4, #8]
   b46ce:	3b01      	subs	r3, #1
   b46d0:	60a3      	str	r3, [r4, #8]
   b46d2:	b91b      	cbnz	r3, b46dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b46d4:	6823      	ldr	r3, [r4, #0]
   b46d6:	4620      	mov	r0, r4
   b46d8:	68db      	ldr	r3, [r3, #12]
   b46da:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b46dc:	4628      	mov	r0, r5
   b46de:	bd38      	pop	{r3, r4, r5, pc}

000b46e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Log.info("Acknowledge Join Request");
   b46e4:	495e      	ldr	r1, [pc, #376]	; (b4860 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x180>)
   b46e6:	485f      	ldr	r0, [pc, #380]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46e8:	4c5f      	ldr	r4, [pc, #380]	; (b4868 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46ea:	b0a6      	sub	sp, #152	; 0x98
	Log.info("Acknowledge Join Request");
   b46ec:	f7ff fd27 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46f0:	f001 fee6 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b46f4:	f002 f945 	bl	b6982 <_ZNK13sysStatusData15get_magicNumberEv>
   b46f8:	0a00      	lsrs	r0, r0, #8
   b46fa:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46fc:	f001 fee0 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4700:	f002 f93f 	bl	b6982 <_ZNK13sysStatusData15get_magicNumberEv>
   b4704:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4706:	f00b fda8 	bl	c025a <_ZN9TimeClass3nowEv>
   b470a:	1600      	asrs	r0, r0, #24
   b470c:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b470e:	f00b fda4 	bl	c025a <_ZN9TimeClass3nowEv>
   b4712:	1400      	asrs	r0, r0, #16
   b4714:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4716:	f00b fda0 	bl	c025a <_ZN9TimeClass3nowEv>
   b471a:	1200      	asrs	r0, r0, #8
   b471c:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b471e:	f00b fd9c 	bl	c025a <_ZN9TimeClass3nowEv>
   b4722:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4724:	f001 fecc 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4728:	f002 f930 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b472c:	0a00      	lsrs	r0, r0, #8
   b472e:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4730:	f001 fec6 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4734:	f002 f92a 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4738:	71e0      	strb	r0, [r4, #7]
	buf[8] = (current.get_nodeNumber() != 11) ?  0 : 1;				// Clear the alert code for the node unless the nodeNumber process failed
   b473a:	f001 ff09 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b473e:	f002 f863 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4742:	f1a0 030b 	sub.w	r3, r0, #11
   b4746:	4258      	negs	r0, r3
   b4748:	4158      	adcs	r0, r3
   b474a:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_nodeNumber();								
   b474c:	f001 ff00 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4750:	f002 f85a 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4754:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b4756:	f001 fefb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b475a:	f002 f87d 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b475e:	4b43      	ldr	r3, [pc, #268]	; (b486c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x18c>)
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b4760:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4762:	881f      	ldrh	r7, [r3, #0]
   b4764:	2101      	movs	r1, #1
   b4766:	4638      	mov	r0, r7
   b4768:	f00b ff87 	bl	c067a <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b476c:	f001 fef0 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4770:	f002 f84f 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4774:	2800      	cmp	r0, #0
   b4776:	d15d      	bne.n	b4834 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x154>
   b4778:	f001 feea 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b477c:	f002 f844 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4780:	4605      	mov	r5, r0
	Log.info("Sending response to %d with free memory = %li", nodeAddress, System.freeMemory());
   b4782:	f00b fbd9 	bl	bff38 <_ZN11SystemClass10freeMemoryEv>
   b4786:	493a      	ldr	r1, [pc, #232]	; (b4870 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x190>)
   b4788:	4603      	mov	r3, r0
   b478a:	462a      	mov	r2, r5
   b478c:	4835      	ldr	r0, [pc, #212]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b478e:	f7ff fcd6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, nodeAddress, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b4792:	2302      	movs	r3, #2
   b4794:	9300      	str	r3, [sp, #0]
   b4796:	4934      	ldr	r1, [pc, #208]	; (b4868 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
   b4798:	4836      	ldr	r0, [pc, #216]	; (b4874 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x194>)
   b479a:	462b      	mov	r3, r5
   b479c:	220b      	movs	r2, #11
   b479e:	f006 fda1 	bl	bb2e4 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b47a2:	4606      	mov	r6, r0
   b47a4:	2800      	cmp	r0, #0
   b47a6:	d14a      	bne.n	b483e <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x15e>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b47a8:	f001 fed2 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b47ac:	4680      	mov	r8, r0
   b47ae:	f001 fecf 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b47b2:	f002 f829 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b47b6:	4601      	mov	r1, r0
   b47b8:	4640      	mov	r0, r8
   b47ba:	f002 f8a0 	bl	b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b47be:	4631      	mov	r1, r6
   b47c0:	4638      	mov	r0, r7
   b47c2:	f00b ff5a 	bl	c067a <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s, alert %d and RSSI / SNR of %d / %d", nodeAddress, (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), current.get_RSSI(), current.get_SNR());
   b47c6:	7aa2      	ldrb	r2, [r4, #10]
   b47c8:	4b2b      	ldr	r3, [pc, #172]	; (b4878 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x198>)
   b47ca:	4c2c      	ldr	r4, [pc, #176]	; (b487c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19c>)
   b47cc:	2a00      	cmp	r2, #0
   b47ce:	bf18      	it	ne
   b47d0:	461c      	movne	r4, r3
   b47d2:	f001 febd 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b47d6:	f002 f83a 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b47da:	4606      	mov	r6, r0
   b47dc:	f001 feb8 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b47e0:	f002 fb10 	bl	b6e04 <_ZNK17currentStatusData8get_RSSIEv>
   b47e4:	4607      	mov	r7, r0
   b47e6:	f001 feb3 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b47ea:	f002 fb10 	bl	b6e0e <_ZNK17currentStatusData7get_SNREv>
   b47ee:	4a24      	ldr	r2, [pc, #144]	; (b4880 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a0>)
   b47f0:	462b      	mov	r3, r5
   b47f2:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b47f6:	e9cd 4600 	strd	r4, r6, [sp]
   b47fa:	2180      	movs	r1, #128	; 0x80
   b47fc:	a806      	add	r0, sp, #24
   b47fe:	f008 fe39 	bl	bd474 <snprintf>
		Log.info(messageString);
   b4802:	4818      	ldr	r0, [pc, #96]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b4804:	a906      	add	r1, sp, #24
   b4806:	f7ff fc9a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b480a:	f008 fd6b 	bl	bd2e4 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b480e:	4604      	mov	r4, r0
   b4810:	b320      	cbz	r0, b485c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x17c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4812:	4b1c      	ldr	r3, [pc, #112]	; (b4884 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4814:	491c      	ldr	r1, [pc, #112]	; (b4888 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a8>)
   b4816:	781b      	ldrb	r3, [r3, #0]
   b4818:	f88d 3000 	strb.w	r3, [sp]
   b481c:	a804      	add	r0, sp, #16
   b481e:	233c      	movs	r3, #60	; 0x3c
   b4820:	aa06      	add	r2, sp, #24
   b4822:	f009 f94b 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4826:	a805      	add	r0, sp, #20
   b4828:	f7ff ff44 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b482c:	4620      	mov	r0, r4
   b482e:	b026      	add	sp, #152	; 0x98
   b4830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4834:	f001 fe8c 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4838:	f001 ffeb 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b483c:	e7a0      	b.n	b4780 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xa0>
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b483e:	f001 fe87 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4842:	f001 ffe6 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4846:	4911      	ldr	r1, [pc, #68]	; (b488c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1ac>)
   b4848:	4602      	mov	r2, r0
   b484a:	4806      	ldr	r0, [pc, #24]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b484c:	f7ff fc77 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4850:	2100      	movs	r1, #0
   b4852:	4638      	mov	r0, r7
   b4854:	f00b ff11 	bl	c067a <digitalWrite>
		return false;
   b4858:	2400      	movs	r4, #0
   b485a:	e7e7      	b.n	b482c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14c>
		return true;
   b485c:	2401      	movs	r4, #1
   b485e:	e7e5      	b.n	b482c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14c>
   b4860:	000c39f7 	.word	0x000c39f7
   b4864:	2003e650 	.word	0x2003e650
   b4868:	2003d870 	.word	0x2003d870
   b486c:	000c49f8 	.word	0x000c49f8
   b4870:	000c3a10 	.word	0x000c3a10
   b4874:	2003e168 	.word	0x2003e168
   b4878:	000c39f0 	.word	0x000c39f0
   b487c:	000c39ec 	.word	0x000c39ec
   b4880:	000c3a3e 	.word	0x000c3a3e
   b4884:	2003d869 	.word	0x2003d869
   b4888:	000c3a84 	.word	0x000c3a84
   b488c:	000c3a8b 	.word	0x000c3a8b

000b4890 <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b4890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4894:	b0d9      	sub	sp, #356	; 0x164
   b4896:	460f      	mov	r7, r1
	String nodeDeviceID;
   b4898:	a810      	add	r0, sp, #64	; 0x40
   b489a:	4946      	ldr	r1, [pc, #280]	; (b49b4 <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b489c:	4d46      	ldr	r5, [pc, #280]	; (b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b489e:	f8df 8144 	ldr.w	r8, [pc, #324]	; b49e4 <_ZN14LoRA_Functions13printNodeDataEb+0x154>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b48a2:	f8df 9144 	ldr.w	r9, [pc, #324]	; b49e8 <_ZN14LoRA_Functions13printNodeDataEb+0x158>
	String nodeDeviceID;
   b48a6:	f00b f962 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48aa:	4843      	ldr	r0, [pc, #268]	; (b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48ac:	f004 f96d 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b48b0:	4a42      	ldr	r2, [pc, #264]	; (b49bc <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b48b2:	4601      	mov	r1, r0
   b48b4:	ab0f      	add	r3, sp, #60	; 0x3c
   b48b6:	4840      	ldr	r0, [pc, #256]	; (b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48b8:	f004 facc 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48bc:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b48c0:	4632      	mov	r2, r6
   b48c2:	4628      	mov	r0, r5
   b48c4:	f004 f983 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b48c8:	4604      	mov	r4, r0
   b48ca:	2800      	cmp	r0, #0
   b48cc:	d06c      	beq.n	b49a8 <_ZN14LoRA_Functions13printNodeDataEb+0x118>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b48ce:	4601      	mov	r1, r0
   b48d0:	ab10      	add	r3, sp, #64	; 0x40
   b48d2:	4642      	mov	r2, r8
   b48d4:	4628      	mov	r0, r5
   b48d6:	f7ff fc24 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b48da:	ab0a      	add	r3, sp, #40	; 0x28
   b48dc:	464a      	mov	r2, r9
   b48de:	4621      	mov	r1, r4
   b48e0:	4628      	mov	r0, r5
   b48e2:	f7ff fc10 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b48e6:	4a36      	ldr	r2, [pc, #216]	; (b49c0 <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b48e8:	ab09      	add	r3, sp, #36	; 0x24
   b48ea:	4621      	mov	r1, r4
   b48ec:	4628      	mov	r0, r5
   b48ee:	f7ff fc0a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b48f2:	4a34      	ldr	r2, [pc, #208]	; (b49c4 <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
   b48f4:	ab0b      	add	r3, sp, #44	; 0x2c
   b48f6:	4621      	mov	r1, r4
   b48f8:	4628      	mov	r0, r5
   b48fa:	f7ff fc04 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b48fe:	4a32      	ldr	r2, [pc, #200]	; (b49c8 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b4900:	ab0c      	add	r3, sp, #48	; 0x30
   b4902:	4621      	mov	r1, r4
   b4904:	4628      	mov	r0, r5
   b4906:	f7ff fbfe 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b490a:	4a30      	ldr	r2, [pc, #192]	; (b49cc <_ZN14LoRA_Functions13printNodeDataEb+0x13c>)
   b490c:	ab14      	add	r3, sp, #80	; 0x50
   b490e:	4621      	mov	r1, r4
   b4910:	4628      	mov	r0, r5
   b4912:	f004 fa9f 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4916:	b120      	cbz	r0, b4922 <_ZN14LoRA_Functions13printNodeDataEb+0x92>
			return getTokenValue(value, result);
   b4918:	9914      	ldr	r1, [sp, #80]	; 0x50
   b491a:	aa0d      	add	r2, sp, #52	; 0x34
   b491c:	4628      	mov	r0, r5
   b491e:	f004 f9c1 	bl	b8ca4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4922:	4621      	mov	r1, r4
   b4924:	4a2a      	ldr	r2, [pc, #168]	; (b49d0 <_ZN14LoRA_Functions13printNodeDataEb+0x140>)
   b4926:	ab0e      	add	r3, sp, #56	; 0x38
   b4928:	4628      	mov	r0, r5
   b492a:	f7ff fbec 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, checksum %d, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(), radioID, Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b492e:	e9dd b20a 	ldrd	fp, r2, [sp, #40]	; 0x28
   b4932:	a814      	add	r0, sp, #80	; 0x50
   b4934:	17d3      	asrs	r3, r2, #31
   b4936:	9c09      	ldr	r4, [sp, #36]	; 0x24
	const char * c_str() const { return buffer; }
   b4938:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   b493c:	f00b fb88 	bl	c0050 <_ZN9TimeClass7timeStrEx>
   b4940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4942:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4944:	9306      	str	r3, [sp, #24]
   b4946:	f00c f913 	bl	c0b70 <__aeabi_f2d>
   b494a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b494c:	9303      	str	r3, [sp, #12]
   b494e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b4950:	4a20      	ldr	r2, [pc, #128]	; (b49d4 <_ZN14LoRA_Functions13printNodeDataEb+0x144>)
   b4952:	f8cd a000 	str.w	sl, [sp]
   b4956:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b495a:	e9cd b301 	strd	fp, r3, [sp, #4]
   b495e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4962:	4623      	mov	r3, r4
   b4964:	a818      	add	r0, sp, #96	; 0x60
   b4966:	f008 fd85 	bl	bd474 <snprintf>
   b496a:	a814      	add	r0, sp, #80	; 0x50
   b496c:	f00b f8b4 	bl	bfad8 <_ZN6StringD1Ev>
		Log.info(data);
   b4970:	4819      	ldr	r0, [pc, #100]	; (b49d8 <_ZN14LoRA_Functions13printNodeDataEb+0x148>)
   b4972:	a918      	add	r1, sp, #96	; 0x60
   b4974:	f7ff fbe3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4978:	f008 fcb4 	bl	bd2e4 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b497c:	b188      	cbz	r0, b49a2 <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b497e:	b187      	cbz	r7, b49a2 <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b4980:	4b16      	ldr	r3, [pc, #88]	; (b49dc <_ZN14LoRA_Functions13printNodeDataEb+0x14c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4982:	4917      	ldr	r1, [pc, #92]	; (b49e0 <_ZN14LoRA_Functions13printNodeDataEb+0x150>)
   b4984:	781b      	ldrb	r3, [r3, #0]
   b4986:	f88d 3000 	strb.w	r3, [sp]
   b498a:	aa18      	add	r2, sp, #96	; 0x60
   b498c:	233c      	movs	r3, #60	; 0x3c
   b498e:	a814      	add	r0, sp, #80	; 0x50
   b4990:	f009 f894 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4994:	a815      	add	r0, sp, #84	; 0x54
   b4996:	f7ff fe8d 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b499a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b499e:	f008 fdc1 	bl	bd524 <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b49a2:	3601      	adds	r6, #1
   b49a4:	2e0a      	cmp	r6, #10
   b49a6:	d18a      	bne.n	b48be <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b49a8:	a810      	add	r0, sp, #64	; 0x40
   b49aa:	f00b f895 	bl	bfad8 <_ZN6StringD1Ev>
}
   b49ae:	b059      	add	sp, #356	; 0x164
   b49b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b49b4:	000c5654 	.word	0x000c5654
   b49b8:	2003da1c 	.word	0x2003da1c
   b49bc:	000c38e0 	.word	0x000c38e0
   b49c0:	000c3ab2 	.word	0x000c3ab2
   b49c4:	000c399e 	.word	0x000c399e
   b49c8:	000c3943 	.word	0x000c3943
   b49cc:	000c3ab7 	.word	0x000c3ab7
   b49d0:	000c398f 	.word	0x000c398f
   b49d4:	000c3abc 	.word	0x000c3abc
   b49d8:	2003e650 	.word	0x2003e650
   b49dc:	2003d869 	.word	0x2003d869
   b49e0:	000c3b20 	.word	0x000c3b20
   b49e4:	000c38ef 	.word	0x000c38ef
   b49e8:	000c38eb 	.word	0x000c38eb

000b49ec <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b49ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49ee:	4604      	mov	r4, r0
   b49f0:	4615      	mov	r5, r2
   b49f2:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b49f4:	f004 fb52 	bl	b909c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b49f8:	9901      	ldr	r1, [sp, #4]
   b49fa:	2201      	movs	r2, #1
   b49fc:	4620      	mov	r0, r4
   b49fe:	f004 fabb 	bl	b8f78 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4a02:	4620      	mov	r0, r4
   b4a04:	213a      	movs	r1, #58	; 0x3a
   b4a06:	f004 fa6b 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4a0a:	4904      	ldr	r1, [pc, #16]	; (b4a1c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4a0c:	462a      	mov	r2, r5
   b4a0e:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4a10:	b003      	add	sp, #12
   b4a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4a16:	f004 baa2 	b.w	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
   b4a1a:	bf00      	nop
   b4a1c:	000c3d47 	.word	0x000c3d47

000b4a20 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4a20:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4a22:	4b11      	ldr	r3, [pc, #68]	; (b4a68 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4a24:	4c11      	ldr	r4, [pc, #68]	; (b4a6c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4a26:	2201      	movs	r2, #1
   b4a28:	701a      	strb	r2, [r3, #0]
   b4a2a:	2332      	movs	r3, #50	; 0x32
   b4a2c:	9300      	str	r3, [sp, #0]
   b4a2e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4a32:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	f004 f88a 	bl	b8b54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4a40:	4b0b      	ldr	r3, [pc, #44]	; (b4a70 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4a42:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4a44:	4a0b      	ldr	r2, [pc, #44]	; (b4a74 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4a46:	4c0c      	ldr	r4, [pc, #48]	; (b4a78 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4a48:	490c      	ldr	r1, [pc, #48]	; (b4a7c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4a4a:	4b0d      	ldr	r3, [pc, #52]	; (b4a80 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4a4c:	7812      	ldrb	r2, [r2, #0]
   b4a4e:	7809      	ldrb	r1, [r1, #0]
   b4a50:	4620      	mov	r0, r4
   b4a52:	f007 f93f 	bl	bbcd4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a56:	480b      	ldr	r0, [pc, #44]	; (b4a84 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4a58:	2200      	movs	r2, #0
   b4a5a:	4621      	mov	r1, r4
}
   b4a5c:	b002      	add	sp, #8
   b4a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a62:	f006 bc35 	b.w	bb2d0 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4a66:	bf00      	nop
   b4a68:	2003d869 	.word	0x2003d869
   b4a6c:	2003da1c 	.word	0x2003da1c
   b4a70:	000c3eb0 	.word	0x000c3eb0
   b4a74:	000c49fe 	.word	0x000c49fe
   b4a78:	2003d8ec 	.word	0x2003d8ec
   b4a7c:	000c49fc 	.word	0x000c49fc
   b4a80:	2003e4e4 	.word	0x2003e4e4
   b4a84:	2003e168 	.word	0x2003e168

000b4a88 <_ZN14LoRA_Functions14findNodeNumberEPKci>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a8c:	b097      	sub	sp, #92	; 0x5c
   b4a8e:	4604      	mov	r4, r0
   b4a90:	460d      	mov	r5, r1
	String nodeDeviceID;
   b4a92:	a802      	add	r0, sp, #8
   b4a94:	4965      	ldr	r1, [pc, #404]	; (b4c2c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a4>)
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a96:	4690      	mov	r8, r2
	String nodeDeviceID;
   b4a98:	f00b f869 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	if (radioID != LoRA_Functions::stringCheckSum(deviceID)) {
   b4a9c:	4629      	mov	r1, r5
   b4a9e:	a806      	add	r0, sp, #24
   b4aa0:	f00b f865 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   b4aa4:	a906      	add	r1, sp, #24
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f7ff fde2 	bl	b4670 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b4aac:	4604      	mov	r4, r0
   b4aae:	a806      	add	r0, sp, #24
   b4ab0:	f00b f812 	bl	bfad8 <_ZN6StringD1Ev>
   b4ab4:	4544      	cmp	r4, r8
   b4ab6:	d00b      	beq.n	b4ad0 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x48>
		Log.info("DeviceID and checksum mismatch - setting node to 11");
   b4ab8:	495d      	ldr	r1, [pc, #372]	; (b4c30 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a8>)
   b4aba:	485e      	ldr	r0, [pc, #376]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4abc:	f7ff fb3f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 11;															// Return value for unconfigured node
   b4ac0:	240b      	movs	r4, #11
	String nodeDeviceID;
   b4ac2:	a802      	add	r0, sp, #8
   b4ac4:	f00b f808 	bl	bfad8 <_ZN6StringD1Ev>
}
   b4ac8:	4620      	mov	r0, r4
   b4aca:	b017      	add	sp, #92	; 0x5c
   b4acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else Log.info("Checksum validated");
   b4ad0:	4959      	ldr	r1, [pc, #356]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b0>)
   b4ad2:	4858      	ldr	r0, [pc, #352]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ad4:	f8df 9164 	ldr.w	r9, [pc, #356]	; b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4ad8:	f8df b174 	ldr.w	fp, [pc, #372]	; b4c50 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>
	else Log.info("Checksum validated");
   b4adc:	f7ff fb2f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ae0:	4856      	ldr	r0, [pc, #344]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ae2:	f004 f852 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4ae6:	4a56      	ldr	r2, [pc, #344]	; (b4c40 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b8>)
   b4ae8:	4601      	mov	r1, r0
   b4aea:	ab01      	add	r3, sp, #4
   b4aec:	4853      	ldr	r0, [pc, #332]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4aee:	f004 f9b1 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4af2:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4af4:	9901      	ldr	r1, [sp, #4]
   b4af6:	4632      	mov	r2, r6
   b4af8:	4648      	mov	r0, r9
   b4afa:	f004 f868 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4afe:	1c74      	adds	r4, r6, #1
		if(nodeObjectContainer == NULL) {
   b4b00:	4607      	mov	r7, r0
   b4b02:	46a2      	mov	sl, r4
   b4b04:	2800      	cmp	r0, #0
   b4b06:	d176      	bne.n	b4bf6 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x16e>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4b08:	494e      	ldr	r1, [pc, #312]	; (b4c44 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1bc>)
   b4b0a:	484a      	ldr	r0, [pc, #296]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4b0c:	4632      	mov	r2, r6
   b4b0e:	f7ff fb16 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4b12:	494a      	ldr	r1, [pc, #296]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
	nodeNumber = index;
   b4b14:	9400      	str	r4, [sp, #0]
	JsonModifier mod(jp);
   b4b16:	a806      	add	r0, sp, #24
   b4b18:	f004 fb04 	bl	b9124 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",nodeNumber, deviceID);
   b4b1c:	462b      	mov	r3, r5
   b4b1e:	9a00      	ldr	r2, [sp, #0]
   b4b20:	4949      	ldr	r1, [pc, #292]	; (b4c48 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c0>)
   b4b22:	4844      	ldr	r0, [pc, #272]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4b24:	f7ff fb0b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4b28:	4844      	ldr	r0, [pc, #272]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4b2a:	f004 f823 	bl	b8b74 <_ZNK10JsonParser13getOuterArrayEv>
   b4b2e:	4601      	mov	r1, r0
   b4b30:	a806      	add	r0, sp, #24
   b4b32:	f004 fb32 	bl	b919a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4b36:	227d      	movs	r2, #125	; 0x7d
   b4b38:	217b      	movs	r1, #123	; 0x7b
   b4b3a:	a806      	add	r0, sp, #24
   b4b3c:	f004 fab9 	bl	b90b2 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", nodeNumber);
   b4b40:	9a00      	ldr	r2, [sp, #0]
   b4b42:	4942      	ldr	r1, [pc, #264]	; (b4c4c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4b44:	a806      	add	r0, sp, #24
   b4b46:	f7ff ff51 	bl	b49ec <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b4a:	a806      	add	r0, sp, #24
   b4b4c:	f004 faa6 	bl	b909c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b50:	2201      	movs	r2, #1
   b4b52:	a806      	add	r0, sp, #24
   b4b54:	493e      	ldr	r1, [pc, #248]	; (b4c50 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>)
   b4b56:	f004 fa0f 	bl	b8f78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b5a:	a806      	add	r0, sp, #24
   b4b5c:	213a      	movs	r1, #58	; 0x3a
   b4b5e:	f004 f9bf 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4b62:	4629      	mov	r1, r5
   b4b64:	a806      	add	r0, sp, #24
   b4b66:	2201      	movs	r2, #1
   b4b68:	f004 fa06 	bl	b8f78 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("rID",radioID);
   b4b6c:	4642      	mov	r2, r8
   b4b6e:	4939      	ldr	r1, [pc, #228]	; (b4c54 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1cc>)
   b4b70:	a806      	add	r0, sp, #24
   b4b72:	f7ff ff3b 	bl	b49ec <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("last", Time.now());
   b4b76:	f00b fb70 	bl	c025a <_ZN9TimeClass3nowEv>
   b4b7a:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4b7c:	a806      	add	r0, sp, #24
   b4b7e:	f004 fa8d 	bl	b909c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b82:	2201      	movs	r2, #1
   b4b84:	a806      	add	r0, sp, #24
   b4b86:	4934      	ldr	r1, [pc, #208]	; (b4c58 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d0>)
   b4b88:	f004 f9f6 	bl	b8f78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b8c:	a806      	add	r0, sp, #24
   b4b8e:	213a      	movs	r1, #58	; 0x3a
   b4b90:	f004 f9a6 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4b94:	462a      	mov	r2, r5
   b4b96:	a806      	add	r0, sp, #24
   b4b98:	4930      	ldr	r1, [pc, #192]	; (b4c5c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d4>)
   b4b9a:	f004 f9e0 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);									// This is a temp value that will be updated
   b4b9e:	4930      	ldr	r1, [pc, #192]	; (b4c60 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d8>)
   b4ba0:	2203      	movs	r2, #3
   b4ba2:	a806      	add	r0, sp, #24
   b4ba4:	f7ff ff22 	bl	b49ec <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4ba8:	a806      	add	r0, sp, #24
   b4baa:	f004 fa77 	bl	b909c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4bae:	2201      	movs	r2, #1
   b4bb0:	a806      	add	r0, sp, #24
   b4bb2:	492c      	ldr	r1, [pc, #176]	; (b4c64 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1dc>)
   b4bb4:	f004 f9e0 	bl	b8f78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4bb8:	213a      	movs	r1, #58	; 0x3a
   b4bba:	a806      	add	r0, sp, #24
   b4bbc:	f004 f990 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4bc0:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4c68 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e0>
   b4bc4:	a806      	add	r0, sp, #24
   b4bc6:	f004 fa8d 	bl	b90e4 <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4bca:	2200      	movs	r2, #0
   b4bcc:	4927      	ldr	r1, [pc, #156]	; (b4c6c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e4>)
   b4bce:	a806      	add	r0, sp, #24
   b4bd0:	f7ff ff0c 	bl	b49ec <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4bd4:	a806      	add	r0, sp, #24
   b4bd6:	f004 f991 	bl	b8efc <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4bda:	a806      	add	r0, sp, #24
   b4bdc:	f004 fd39 	bl	b9652 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4be0:	f001 fd3c 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4be4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   b4be8:	f001 fd74 	bl	b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4bec:	a806      	add	r0, sp, #24
	return index;
   b4bee:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4bf0:	f003 ff3a 	bl	b8a68 <_ZN12JsonModifierD1Ev>
   b4bf4:	e765      	b.n	b4ac2 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4bf6:	4601      	mov	r1, r0
   b4bf8:	ab02      	add	r3, sp, #8
   b4bfa:	4648      	mov	r0, r9
   b4bfc:	465a      	mov	r2, fp
   b4bfe:	f7ff fa90 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c02:	4629      	mov	r1, r5
   b4c04:	a802      	add	r0, sp, #8
   b4c06:	f00b f878 	bl	bfcfa <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4c0a:	b140      	cbz	r0, b4c1e <_ZN14LoRA_Functions14findNodeNumberEPKci+0x196>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4c0c:	4a0f      	ldr	r2, [pc, #60]	; (b4c4c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4c0e:	480b      	ldr	r0, [pc, #44]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4c10:	466b      	mov	r3, sp
   b4c12:	4639      	mov	r1, r7
   b4c14:	f7ff fa77 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4c18:	f89d 4000 	ldrb.w	r4, [sp]
   b4c1c:	e751      	b.n	b4ac2 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		index++;															// This will be the node number for the next node if no match is found
   b4c1e:	1cb4      	adds	r4, r6, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4c20:	4656      	mov	r6, sl
   b4c22:	2e0a      	cmp	r6, #10
   b4c24:	f47f af66 	bne.w	b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x6c>
   b4c28:	e773      	b.n	b4b12 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x8a>
   b4c2a:	bf00      	nop
   b4c2c:	000c5654 	.word	0x000c5654
   b4c30:	000c3b29 	.word	0x000c3b29
   b4c34:	2003e650 	.word	0x2003e650
   b4c38:	000c3b5d 	.word	0x000c3b5d
   b4c3c:	2003da1c 	.word	0x2003da1c
   b4c40:	000c38e0 	.word	0x000c38e0
   b4c44:	000c3b70 	.word	0x000c3b70
   b4c48:	000c3b9c 	.word	0x000c3b9c
   b4c4c:	000c3ab2 	.word	0x000c3ab2
   b4c50:	000c38ef 	.word	0x000c38ef
   b4c54:	000c38eb 	.word	0x000c38eb
   b4c58:	000c399e 	.word	0x000c399e
   b4c5c:	000c4e20 	.word	0x000c4e20
   b4c60:	000c3943 	.word	0x000c3943
   b4c64:	000c3ab7 	.word	0x000c3ab7
   b4c68:	00000000 	.word	0x00000000
   b4c6c:	000c398f 	.word	0x000c398f

000b4c70 <_ZN14LoRA_Functions10nodeUpdateEif>:
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c70:	b530      	push	{r4, r5, lr}
   b4c72:	ed2d 8b02 	vpush	{d8}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c76:	4d26      	ldr	r5, [pc, #152]	; (b4d10 <_ZN14LoRA_Functions10nodeUpdateEif+0xa0>)
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c78:	b093      	sub	sp, #76	; 0x4c
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c7a:	4628      	mov	r0, r5
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c7c:	460c      	mov	r4, r1
   b4c7e:	eeb0 8a40 	vmov.f32	s16, s0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c82:	f003 ff82 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4c86:	4a23      	ldr	r2, [pc, #140]	; (b4d14 <_ZN14LoRA_Functions10nodeUpdateEif+0xa4>)
   b4c88:	4601      	mov	r1, r0
   b4c8a:	466b      	mov	r3, sp
   b4c8c:	4628      	mov	r0, r5
   b4c8e:	f004 f8e1 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c92:	1e62      	subs	r2, r4, #1
   b4c94:	9900      	ldr	r1, [sp, #0]
   b4c96:	4628      	mov	r0, r5
   b4c98:	f003 ff99 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4c9c:	4604      	mov	r4, r0
   b4c9e:	2800      	cmp	r0, #0
   b4ca0:	d032      	beq.n	b4d08 <_ZN14LoRA_Functions10nodeUpdateEif+0x98>
	jp.getValueTokenByKey(nodeObjectContainer, "last", value);			// Update last connection time
   b4ca2:	ab01      	add	r3, sp, #4
   b4ca4:	4a1c      	ldr	r2, [pc, #112]	; (b4d18 <_ZN14LoRA_Functions10nodeUpdateEif+0xa8>)
   b4ca6:	4601      	mov	r1, r0
   b4ca8:	4628      	mov	r0, r5
   b4caa:	f004 f8d3 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4cae:	4629      	mov	r1, r5
   b4cb0:	a802      	add	r0, sp, #8
   b4cb2:	f004 fa37 	bl	b9124 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4cb6:	9901      	ldr	r1, [sp, #4]
   b4cb8:	a802      	add	r0, sp, #8
   b4cba:	f004 fa45 	bl	b9148 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)Time.now());
   b4cbe:	f00b facc 	bl	c025a <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4cc2:	4916      	ldr	r1, [pc, #88]	; (b4d1c <_ZN14LoRA_Functions10nodeUpdateEif+0xac>)
   b4cc4:	4602      	mov	r2, r0
   b4cc6:	a802      	add	r0, sp, #8
   b4cc8:	f004 f949 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4ccc:	a802      	add	r0, sp, #8
   b4cce:	f004 fcc0 	bl	b9652 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "succ", value);			// Update the success percentage value
   b4cd2:	4a13      	ldr	r2, [pc, #76]	; (b4d20 <_ZN14LoRA_Functions10nodeUpdateEif+0xb0>)
   b4cd4:	ab01      	add	r3, sp, #4
   b4cd6:	4621      	mov	r1, r4
   b4cd8:	4628      	mov	r0, r5
   b4cda:	f004 f8bb 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4cde:	9901      	ldr	r1, [sp, #4]
   b4ce0:	a802      	add	r0, sp, #8
   b4ce2:	f004 fa31 	bl	b9148 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((float)successPercent);
   b4ce6:	eeb0 0a48 	vmov.f32	s0, s16
   b4cea:	a802      	add	r0, sp, #8
   b4cec:	f004 f9fa 	bl	b90e4 <_ZN10JsonWriter11insertValueEf>
	mod.finish();
   b4cf0:	a802      	add	r0, sp, #8
   b4cf2:	f004 fcae 	bl	b9652 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4cf6:	f001 fcb1 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4cfa:	6869      	ldr	r1, [r5, #4]
   b4cfc:	f001 fcea 	bl	b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4d00:	a802      	add	r0, sp, #8
   b4d02:	f003 feb1 	bl	b8a68 <_ZN12JsonModifierD1Ev>
	return true;
   b4d06:	2001      	movs	r0, #1
}
   b4d08:	b013      	add	sp, #76	; 0x4c
   b4d0a:	ecbd 8b02 	vpop	{d8}
   b4d0e:	bd30      	pop	{r4, r5, pc}
   b4d10:	2003da1c 	.word	0x2003da1c
   b4d14:	000c38e0 	.word	0x000c38e0
   b4d18:	000c399e 	.word	0x000c399e
   b4d1c:	000c3d47 	.word	0x000c3d47
   b4d20:	000c3ab7 	.word	0x000c3ab7

000b4d24 <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d24:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4d26:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d28:	b094      	sub	sp, #80	; 0x50
   b4d2a:	460c      	mov	r4, r1
   b4d2c:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4d2e:	dc3d      	bgt.n	b4dac <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4d30:	4d1f      	ldr	r5, [pc, #124]	; (b4db0 <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4d32:	4628      	mov	r0, r5
   b4d34:	f003 ff29 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4d38:	4a1e      	ldr	r2, [pc, #120]	; (b4db4 <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4d3a:	4601      	mov	r1, r0
   b4d3c:	ab02      	add	r3, sp, #8
   b4d3e:	4628      	mov	r0, r5
   b4d40:	f004 f888 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4d44:	1e62      	subs	r2, r4, #1
   b4d46:	9902      	ldr	r1, [sp, #8]
   b4d48:	4628      	mov	r0, r5
   b4d4a:	f003 ff40 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4d4e:	4604      	mov	r4, r0
   b4d50:	b360      	cbz	r0, b4dac <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4d52:	4601      	mov	r1, r0
   b4d54:	4a18      	ldr	r2, [pc, #96]	; (b4db8 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d56:	ab01      	add	r3, sp, #4
   b4d58:	4628      	mov	r0, r5
   b4d5a:	f7ff f9d4 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4d5e:	9a01      	ldr	r2, [sp, #4]
   b4d60:	4916      	ldr	r1, [pc, #88]	; (b4dbc <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4d62:	4817      	ldr	r0, [pc, #92]	; (b4dc0 <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4d64:	4633      	mov	r3, r6
   b4d66:	f7ff f9ea 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4d6a:	ab03      	add	r3, sp, #12
   b4d6c:	4a12      	ldr	r2, [pc, #72]	; (b4db8 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d6e:	4621      	mov	r1, r4
   b4d70:	4628      	mov	r0, r5
   b4d72:	f004 f86f 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4d76:	4629      	mov	r1, r5
   b4d78:	a804      	add	r0, sp, #16
   b4d7a:	f004 f9d3 	bl	b9124 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4d7e:	9903      	ldr	r1, [sp, #12]
   b4d80:	a804      	add	r0, sp, #16
   b4d82:	f004 f9e1 	bl	b9148 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4d86:	4632      	mov	r2, r6
   b4d88:	490e      	ldr	r1, [pc, #56]	; (b4dc4 <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4d8a:	a804      	add	r0, sp, #16
   b4d8c:	f004 f8e7 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4d90:	a804      	add	r0, sp, #16
   b4d92:	f004 fc5e 	bl	b9652 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4d96:	f001 fc61 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4d9a:	6869      	ldr	r1, [r5, #4]
   b4d9c:	f001 fc9a 	bl	b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4da0:	a804      	add	r0, sp, #16
   b4da2:	f003 fe61 	bl	b8a68 <_ZN12JsonModifierD1Ev>
	return true;
   b4da6:	2001      	movs	r0, #1
}
   b4da8:	b014      	add	sp, #80	; 0x50
   b4daa:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4dac:	2000      	movs	r0, #0
   b4dae:	e7fb      	b.n	b4da8 <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4db0:	2003da1c 	.word	0x2003da1c
   b4db4:	000c38e0 	.word	0x000c38e0
   b4db8:	000c3943 	.word	0x000c3943
   b4dbc:	000c3bd0 	.word	0x000c3bd0
   b4dc0:	2003e650 	.word	0x2003e650
   b4dc4:	000c3d47 	.word	0x000c3d47

000b4dc8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
		nodeDeviceID[i] = buf[i+4];
   b4dca:	4a48      	ldr	r2, [pc, #288]	; (b4eec <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x124>)
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4dcc:	b08d      	sub	sp, #52	; 0x34
		nodeDeviceID[i] = buf[i+4];
   b4dce:	ac05      	add	r4, sp, #20
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4dd0:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+4];
   b4dd2:	f102 0318 	add.w	r3, r2, #24
   b4dd6:	4627      	mov	r7, r4
   b4dd8:	6810      	ldr	r0, [r2, #0]
   b4dda:	6851      	ldr	r1, [r2, #4]
   b4ddc:	4626      	mov	r6, r4
   b4dde:	c603      	stmia	r6!, {r0, r1}
   b4de0:	3208      	adds	r2, #8
   b4de2:	429a      	cmp	r2, r3
   b4de4:	4634      	mov	r4, r6
   b4de6:	d1f7      	bne.n	b4dd8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x10>
   b4de8:	7813      	ldrb	r3, [r2, #0]
   b4dea:	7033      	strb	r3, [r6, #0]
	current.set_sensorType(buf[29]);								// Store device type in the current data buffer 
   b4dec:	f001 fbb0 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4df0:	4b3f      	ldr	r3, [pc, #252]	; (b4ef0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x128>)
   b4df2:	7f59      	ldrb	r1, [r3, #29]
   b4df4:	f001 fdad 	bl	b6952 <_ZN17currentStatusData14set_sensorTypeEh>
	if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b4df8:	f001 fbaa 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4dfc:	f001 fd04 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e00:	280a      	cmp	r0, #10
   b4e02:	d844      	bhi.n	b4e8e <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
   b4e04:	f7ff f9b4 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4e08:	4604      	mov	r4, r0
   b4e0a:	f001 fba1 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e0e:	f001 fcfb 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e12:	9003      	str	r0, [sp, #12]
   b4e14:	f001 fb9c 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e18:	f001 fe1b 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b4e1c:	9903      	ldr	r1, [sp, #12]
   b4e1e:	4602      	mov	r2, r0
   b4e20:	4620      	mov	r0, r4
   b4e22:	f7ff fb2b 	bl	b447c <_ZN14LoRA_Functions14nodeConfiguredEii>
   b4e26:	bb90      	cbnz	r0, b4e8e <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
		Log.info("Node %d join request from %s setting clock",current.get_nodeNumber(), nodeDeviceID);
   b4e28:	f001 fb92 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e2c:	f001 fcec 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e30:	4930      	ldr	r1, [pc, #192]	; (b4ef4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x12c>)
   b4e32:	4602      	mov	r2, r0
   b4e34:	463b      	mov	r3, r7
   b4e36:	4830      	ldr	r0, [pc, #192]	; (b4ef8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4e38:	f7ff f981 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4e3c:	f001 fb88 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e40:	2101      	movs	r1, #1
   b4e42:	f001 fd80 	bl	b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4e46:	f001 fb83 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e4a:	4604      	mov	r4, r0
   b4e4c:	f00b fa05 	bl	c025a <_ZN9TimeClass3nowEv>
   b4e50:	4602      	mov	r2, r0
   b4e52:	17c3      	asrs	r3, r0, #31
   b4e54:	4620      	mov	r0, r4
   b4e56:	f001 fec6 	bl	b6be6 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	if (current.get_nodeNumber() == 11) return false;
   b4e5a:	f001 fb79 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e5e:	f001 fcd3 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e62:	280b      	cmp	r0, #11
   b4e64:	d03f      	beq.n	b4ee6 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x11e>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4e66:	f001 fb73 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e6a:	f001 fccd 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e6e:	9003      	str	r0, [sp, #12]
   b4e70:	f001 fb6e 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e74:	f001 fcf0 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4e78:	9903      	ldr	r1, [sp, #12]
   b4e7a:	4602      	mov	r2, r0
   b4e7c:	4628      	mov	r0, r5
   b4e7e:	f7ff ff51 	bl	b4d24 <_ZN14LoRA_Functions10changeTypeEii>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4e82:	4b1e      	ldr	r3, [pc, #120]	; (b4efc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x134>)
   b4e84:	2202      	movs	r2, #2
   b4e86:	701a      	strb	r2, [r3, #0]
	return true;
   b4e88:	2001      	movs	r0, #1
}
   b4e8a:	b00d      	add	sp, #52	; 0x34
   b4e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4e8e:	f001 fb5f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e92:	4604      	mov	r4, r0
   b4e94:	f001 fb5c 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4e98:	f001 fcb6 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e9c:	4601      	mov	r1, r0
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	f001 fd2d 	bl	b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID,current.get_nodeID()));		// Look up the new node number
   b4ea4:	f001 fb54 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4ea8:	4604      	mov	r4, r0
   b4eaa:	f001 fb51 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4eae:	f001 fdd0 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b4eb2:	4639      	mov	r1, r7
   b4eb4:	4602      	mov	r2, r0
   b4eb6:	4628      	mov	r0, r5
   b4eb8:	f7ff fde6 	bl	b4a88 <_ZN14LoRA_Functions14findNodeNumberEPKci>
   b4ebc:	4601      	mov	r1, r0
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	f001 fd17 	bl	b68f2 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4ec4:	f001 fb44 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4ec8:	f001 fca3 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4ecc:	9003      	str	r0, [sp, #12]
   b4ece:	f001 fb3f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4ed2:	f001 fc99 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4ed6:	9a03      	ldr	r2, [sp, #12]
   b4ed8:	9000      	str	r0, [sp, #0]
   b4eda:	4909      	ldr	r1, [pc, #36]	; (b4f00 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x138>)
   b4edc:	4806      	ldr	r0, [pc, #24]	; (b4ef8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4ede:	463b      	mov	r3, r7
   b4ee0:	f7ff f92d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4ee4:	e7aa      	b.n	b4e3c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x74>
	if (current.get_nodeNumber() == 11) return false;
   b4ee6:	2000      	movs	r0, #0
   b4ee8:	e7cf      	b.n	b4e8a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc2>
   b4eea:	bf00      	nop
   b4eec:	2003d874 	.word	0x2003d874
   b4ef0:	2003d870 	.word	0x2003d870
   b4ef4:	000c3bf3 	.word	0x000c3bf3
   b4ef8:	2003e650 	.word	0x2003e650
   b4efc:	2003d868 	.word	0x2003d868
   b4f00:	000c3c1e 	.word	0x000c3c1e

000b4f04 <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4f04:	b570      	push	{r4, r5, r6, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4f06:	4d20      	ldr	r5, [pc, #128]	; (b4f88 <_ZN14LoRA_Functions11changeAlertEii+0x84>)
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4f08:	b094      	sub	sp, #80	; 0x50
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4f0a:	4628      	mov	r0, r5
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4f0c:	460c      	mov	r4, r1
   b4f0e:	4616      	mov	r6, r2
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4f10:	f003 fe3b 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b4f14:	4a1d      	ldr	r2, [pc, #116]	; (b4f8c <_ZN14LoRA_Functions11changeAlertEii+0x88>)
   b4f16:	4601      	mov	r1, r0
   b4f18:	ab02      	add	r3, sp, #8
   b4f1a:	4628      	mov	r0, r5
   b4f1c:	f003 ff9a 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   b4f20:	1e62      	subs	r2, r4, #1
   b4f22:	9902      	ldr	r1, [sp, #8]
   b4f24:	4628      	mov	r0, r5
   b4f26:	f003 fe52 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - node number entry not found triggers alert
   b4f2a:	4604      	mov	r4, r0
   b4f2c:	b350      	cbz	r0, b4f84 <_ZN14LoRA_Functions11changeAlertEii+0x80>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);			// Now we have the oject for the specific node
   b4f2e:	4601      	mov	r1, r0
   b4f30:	4a17      	ldr	r2, [pc, #92]	; (b4f90 <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f32:	ab01      	add	r3, sp, #4
   b4f34:	4628      	mov	r0, r5
   b4f36:	f7ff f8e6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4f3a:	9a01      	ldr	r2, [sp, #4]
   b4f3c:	4915      	ldr	r1, [pc, #84]	; (b4f94 <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4f3e:	4816      	ldr	r0, [pc, #88]	; (b4f98 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4f40:	4633      	mov	r3, r6
   b4f42:	f7ff f8fc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4f46:	ab03      	add	r3, sp, #12
   b4f48:	4a11      	ldr	r2, [pc, #68]	; (b4f90 <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f4a:	4621      	mov	r1, r4
   b4f4c:	4628      	mov	r0, r5
   b4f4e:	f003 ff81 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);													// Create a modifier object
   b4f52:	4629      	mov	r1, r5
   b4f54:	a804      	add	r0, sp, #16
   b4f56:	f004 f8e5 	bl	b9124 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);													// Update the pending alert value for the selected node
   b4f5a:	9903      	ldr	r1, [sp, #12]
   b4f5c:	a804      	add	r0, sp, #16
   b4f5e:	f004 f8f3 	bl	b9148 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4f62:	4632      	mov	r2, r6
   b4f64:	490d      	ldr	r1, [pc, #52]	; (b4f9c <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4f66:	a804      	add	r0, sp, #16
   b4f68:	f003 fff9 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4f6c:	a804      	add	r0, sp, #16
   b4f6e:	f004 fb70 	bl	b9652 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This updates the JSON object but doe not commit to to persistent storage
   b4f72:	f001 fb73 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b4f76:	6869      	ldr	r1, [r5, #4]
   b4f78:	f001 fbac 	bl	b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);													// Create a modifier object
   b4f7c:	a804      	add	r0, sp, #16
   b4f7e:	f003 fd73 	bl	b8a68 <_ZN12JsonModifierD1Ev>
	return true;
   b4f82:	2001      	movs	r0, #1
}
   b4f84:	b014      	add	sp, #80	; 0x50
   b4f86:	bd70      	pop	{r4, r5, r6, pc}
   b4f88:	2003da1c 	.word	0x2003da1c
   b4f8c:	000c38e0 	.word	0x000c38e0
   b4f90:	000c398f 	.word	0x000c398f
   b4f94:	000c3c59 	.word	0x000c3c59
   b4f98:	2003e650 	.word	0x2003e650
   b4f9c:	000c3d47 	.word	0x000c3d47

000b4fa0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message 
   b4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4fa2:	ed2d 8b02 	vpush	{d8}
   b4fa6:	b0a9      	sub	sp, #164	; 0xa4
   b4fa8:	4605      	mov	r5, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4faa:	f00b f956 	bl	c025a <_ZN9TimeClass3nowEv>
   b4fae:	4ca8      	ldr	r4, [pc, #672]	; (b5250 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b4fb0:	1600      	asrs	r0, r0, #24
   b4fb2:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4fb4:	f00b f951 	bl	c025a <_ZN9TimeClass3nowEv>
   b4fb8:	1400      	asrs	r0, r0, #16
   b4fba:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4fbc:	f00b f94d 	bl	c025a <_ZN9TimeClass3nowEv>
   b4fc0:	1200      	asrs	r0, r0, #8
   b4fc2:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4fc4:	f00b f949 	bl	c025a <_ZN9TimeClass3nowEv>
   b4fc8:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports set by the gateway
   b4fca:	f001 fa79 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4fce:	f001 fcdd 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fd2:	0a00      	lsrs	r0, r0, #8
   b4fd4:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4fd6:	f001 fa73 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b4fda:	f001 fcd7 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fde:	71e0      	strb	r0, [r4, #7]
	if (current.get_nodeNumber() == 11) {			// This is a data report from an unconfigured node - need to tell it to rejoin
   b4fe0:	f001 fab6 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4fe4:	f001 fc10 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fe8:	280b      	cmp	r0, #11
   b4fea:	f040 8082 	bne.w	b50f2 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x152>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b4fee:	f001 faaf 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b4ff2:	f001 fc09 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4ff6:	4997      	ldr	r1, [pc, #604]	; (b5254 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b4ff8:	4602      	mov	r2, r0
   b4ffa:	4897      	ldr	r0, [pc, #604]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b4ffc:	f7ff f89f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);				// This will ensure the node rejoins the network
   b5000:	f001 faa6 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5004:	2101      	movs	r1, #1
   b5006:	f001 fc9e 	bl	b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b500a:	f001 faa1 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b500e:	4605      	mov	r5, r0
   b5010:	f00b f923 	bl	c025a <_ZN9TimeClass3nowEv>
   b5014:	4602      	mov	r2, r0
   b5016:	17c3      	asrs	r3, r0, #31
   b5018:	4628      	mov	r0, r5
   b501a:	f001 fde4 	bl	b6be6 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();												
   b501e:	f001 fa97 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5022:	f001 fc14 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5026:	7220      	strb	r0, [r4, #8]
		buf[9] = current.get_sensorType();			// Since the node is unconfigured, we need to beleive it when it tells us the type
   b5028:	f001 fa92 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b502c:	f001 fc14 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5030:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_openHours();
   b5032:	f001 fa8d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5036:	f001 fe4f 	bl	b6cd8 <_ZNK17currentStatusData13get_openHoursEv>
   b503a:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();			// Repeat back message number
   b503c:	f001 fa88 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5040:	f001 fbfb 	bl	b683a <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5044:	4b85      	ldr	r3, [pc, #532]	; (b525c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
	buf[11] = current.get_messageCount();			// Repeat back message number
   b5046:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5048:	881d      	ldrh	r5, [r3, #0]
   b504a:	2101      	movs	r1, #1
   b504c:	4628      	mov	r0, r5
   b504e:	f00b fb14 	bl	c067a <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5052:	f001 fa7d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5056:	f001 fbdc 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b505a:	2800      	cmp	r0, #0
   b505c:	f040 80e2 	bne.w	b5224 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x284>
   b5060:	f001 fa76 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5064:	f001 fbd0 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
	if (manager.sendtoWait(buf, 12, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b5068:	2304      	movs	r3, #4
   b506a:	4979      	ldr	r1, [pc, #484]	; (b5250 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b506c:	9300      	str	r3, [sp, #0]
   b506e:	220c      	movs	r2, #12
   b5070:	4603      	mov	r3, r0
   b5072:	487b      	ldr	r0, [pc, #492]	; (b5260 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c0>)
   b5074:	f006 f936 	bl	bb2e4 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5078:	4601      	mov	r1, r0
   b507a:	2800      	cmp	r0, #0
   b507c:	f040 80d7 	bne.w	b522e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x28e>
		digitalWrite(BLUE_LED,LOW);
   b5080:	4628      	mov	r0, r5
   b5082:	f00b fafa 	bl	c067a <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and RSSI / SNR of %d / %d", current.get_nodeNumber(), buf[10], buf[8], current.get_RSSI(), current.get_SNR());
   b5086:	f001 fa63 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b508a:	f001 fbbd 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b508e:	7aa5      	ldrb	r5, [r4, #10]
   b5090:	7a26      	ldrb	r6, [r4, #8]
   b5092:	9005      	str	r0, [sp, #20]
   b5094:	f001 fa5c 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5098:	f001 feb4 	bl	b6e04 <_ZNK17currentStatusData8get_RSSIEv>
   b509c:	4604      	mov	r4, r0
   b509e:	f001 fa57 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b50a2:	f001 feb4 	bl	b6e0e <_ZNK17currentStatusData7get_SNREv>
   b50a6:	9b05      	ldr	r3, [sp, #20]
   b50a8:	4a6e      	ldr	r2, [pc, #440]	; (b5264 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c4>)
   b50aa:	e9cd 4002 	strd	r4, r0, [sp, #8]
   b50ae:	2180      	movs	r1, #128	; 0x80
   b50b0:	e9cd 5600 	strd	r5, r6, [sp]
   b50b4:	a808      	add	r0, sp, #32
   b50b6:	f008 f9dd 	bl	bd474 <snprintf>
		Log.info(messageString);
   b50ba:	4867      	ldr	r0, [pc, #412]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b50bc:	a908      	add	r1, sp, #32
   b50be:	f7ff f83e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50c2:	f008 f90f 	bl	bd2e4 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b50c6:	4604      	mov	r4, r0
   b50c8:	2800      	cmp	r0, #0
   b50ca:	f000 80bf 	beq.w	b524c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b50ce:	4b66      	ldr	r3, [pc, #408]	; (b5268 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b50d0:	4966      	ldr	r1, [pc, #408]	; (b526c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>)
   b50d2:	781b      	ldrb	r3, [r3, #0]
   b50d4:	f88d 3000 	strb.w	r3, [sp]
   b50d8:	a806      	add	r0, sp, #24
   b50da:	233c      	movs	r3, #60	; 0x3c
   b50dc:	aa08      	add	r2, sp, #32
   b50de:	f008 fced 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b50e2:	a807      	add	r0, sp, #28
   b50e4:	f7ff fae6 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50e8:	4620      	mov	r0, r4
   b50ea:	b029      	add	sp, #164	; 0xa4
   b50ec:	ecbd 8b02 	vpop	{d8}
   b50f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b50f2:	f001 fa2d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b50f6:	4606      	mov	r6, r0
   b50f8:	f001 fa2a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b50fc:	f001 fb84 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5100:	4601      	mov	r1, r0
   b5102:	4628      	mov	r0, r5
   b5104:	f7ff fa2a 	bl	b455c <_ZN14LoRA_Functions8getAlertEi>
   b5108:	4601      	mov	r1, r0
   b510a:	4630      	mov	r0, r6
   b510c:	f001 fc1b 	bl	b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>
		if (current.get_alertCodeNode() > 0) Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b5110:	f001 fa1e 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5114:	f001 fb9b 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5118:	b170      	cbz	r0, b5138 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x198>
   b511a:	f001 fa19 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b511e:	f001 fb73 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5122:	9005      	str	r0, [sp, #20]
   b5124:	f001 fa14 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5128:	f001 fb91 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b512c:	9a05      	ldr	r2, [sp, #20]
   b512e:	4950      	ldr	r1, [pc, #320]	; (b5270 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5130:	4603      	mov	r3, r0
   b5132:	4849      	ldr	r0, [pc, #292]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5134:	f7ff f803 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_alertCodeNode() == 7) {							// if it is a change in type alert - we can do that here
   b5138:	f001 fa0a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b513c:	f001 fb87 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5140:	2807      	cmp	r0, #7
   b5142:	d166      	bne.n	b5212 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x272>
			int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b5144:	f001 fa04 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5148:	f001 fb5e 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b514c:	4601      	mov	r1, r0
   b514e:	4628      	mov	r0, r5
   b5150:	f7ff f9ca 	bl	b44e8 <_ZN14LoRA_Functions7getTypeEi>
   b5154:	4606      	mov	r6, r0
			Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b5156:	f001 f9fb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b515a:	f001 fb7d 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b515e:	4945      	ldr	r1, [pc, #276]	; (b5274 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d4>)
   b5160:	4602      	mov	r2, r0
   b5162:	4633      	mov	r3, r6
   b5164:	483c      	ldr	r0, [pc, #240]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5166:	f7fe ffea 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_sensorType(newSensorType);	// Update current value for data report
   b516a:	f001 f9f1 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b516e:	4631      	mov	r1, r6
   b5170:	f001 fbef 	bl	b6952 <_ZN17currentStatusData14set_sensorTypeEh>
			buf[9] = newSensorType;
   b5174:	7266      	strb	r6, [r4, #9]
		if (current.get_alertCodeNode() != 0) LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced or applied - no longer pending
   b5176:	f001 f9eb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b517a:	f001 fb68 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b517e:	b140      	cbz	r0, b5192 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1f2>
   b5180:	f001 f9e6 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5184:	f001 fb40 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5188:	2200      	movs	r2, #0
   b518a:	4601      	mov	r1, r0
   b518c:	4628      	mov	r0, r5
   b518e:	f7ff feb9 	bl	b4f04 <_ZN14LoRA_Functions11changeAlertEii>
		buf[8] = current.get_alertCodeNode();
   b5192:	f001 f9dd 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5196:	f001 fb5a 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b519a:	7220      	strb	r0, [r4, #8]
		if (current.get_messageCount()==0) successPercent = 0.0;
   b519c:	f001 f9d8 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b51a0:	f001 fb4b 	bl	b683a <_ZNK17currentStatusData16get_messageCountEv>
   b51a4:	b3d8      	cbz	r0, b521e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x27e>
		else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b51a6:	f001 f9d3 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b51aa:	f001 fb4b 	bl	b6844 <_ZNK17currentStatusData16get_successCountEv>
   b51ae:	4605      	mov	r5, r0
   b51b0:	f001 f9ce 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b51b4:	f001 fb41 	bl	b683a <_ZNK17currentStatusData16get_messageCountEv>
   b51b8:	ee08 0a10 	vmov	s16, r0
   b51bc:	4628      	mov	r0, r5
   b51be:	f00b fcc5 	bl	c0b4c <__aeabi_i2d>
   b51c2:	4b2d      	ldr	r3, [pc, #180]	; (b5278 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d8>)
   b51c4:	2200      	movs	r2, #0
   b51c6:	f00b fb75 	bl	c08b4 <__adddf3>
   b51ca:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b51ce:	4606      	mov	r6, r0
   b51d0:	ee17 0a90 	vmov	r0, s15
   b51d4:	460f      	mov	r7, r1
   b51d6:	f00b fccb 	bl	c0b70 <__aeabi_f2d>
   b51da:	4602      	mov	r2, r0
   b51dc:	460b      	mov	r3, r1
   b51de:	4630      	mov	r0, r6
   b51e0:	4639      	mov	r1, r7
   b51e2:	f00b fe47 	bl	c0e74 <__aeabi_ddiv>
   b51e6:	4b25      	ldr	r3, [pc, #148]	; (b527c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2dc>)
   b51e8:	2200      	movs	r2, #0
   b51ea:	f00b fd19 	bl	c0c20 <__aeabi_dmul>
   b51ee:	f00c f80f 	bl	c1210 <__aeabi_d2f>
   b51f2:	ee08 0a10 	vmov	s16, r0
		LoRA_Functions::instance().nodeUpdate(current.get_nodeNumber(), successPercent);
   b51f6:	f7fe ffbb 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b51fa:	4605      	mov	r5, r0
   b51fc:	f001 f9a8 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5200:	f001 fb02 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5204:	eeb0 0a48 	vmov.f32	s0, s16
   b5208:	4601      	mov	r1, r0
   b520a:	4628      	mov	r0, r5
   b520c:	f7ff fd30 	bl	b4c70 <_ZN14LoRA_Functions10nodeUpdateEif>
   b5210:	e70f      	b.n	b5032 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x92>
		else buf[9] = current.get_sensorType();
   b5212:	f001 f99d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5216:	f001 fb1f 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b521a:	7260      	strb	r0, [r4, #9]
   b521c:	e7ab      	b.n	b5176 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d6>
		if (current.get_messageCount()==0) successPercent = 0.0;
   b521e:	ed9f 8a18 	vldr	s16, [pc, #96]	; b5280 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e0>
   b5222:	e7e8      	b.n	b51f6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x256>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5224:	f001 f994 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5228:	f001 faf3 	bl	b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b522c:	e71c      	b.n	b5068 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xc8>
		Log.info("Node %d data report response not acknowledged", current.get_nodeNumber());
   b522e:	f001 f98f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5232:	f001 fae9 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5236:	4913      	ldr	r1, [pc, #76]	; (b5284 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e4>)
   b5238:	4602      	mov	r2, r0
   b523a:	4807      	ldr	r0, [pc, #28]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b523c:	f7fe ff7f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b5240:	2100      	movs	r1, #0
   b5242:	4628      	mov	r0, r5
   b5244:	f00b fa19 	bl	c067a <digitalWrite>
		return false;
   b5248:	2400      	movs	r4, #0
   b524a:	e74d      	b.n	b50e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>
		return true;
   b524c:	2401      	movs	r4, #1
   b524e:	e74b      	b.n	b50e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>
   b5250:	2003d870 	.word	0x2003d870
   b5254:	000c3c7e 	.word	0x000c3c7e
   b5258:	2003e650 	.word	0x2003e650
   b525c:	000c49f8 	.word	0x000c49f8
   b5260:	2003e168 	.word	0x2003e168
   b5264:	000c3cfd 	.word	0x000c3cfd
   b5268:	2003d869 	.word	0x2003d869
   b526c:	000c3a84 	.word	0x000c3a84
   b5270:	000c3caa 	.word	0x000c3caa
   b5274:	000c3cc9 	.word	0x000c3cc9
   b5278:	3ff00000 	.word	0x3ff00000
   b527c:	40590000 	.word	0x40590000
   b5280:	00000000 	.word	0x00000000
   b5284:	000c3d4a 	.word	0x000c3d4a

000b5288 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5288:	b570      	push	{r4, r5, r6, lr}
   b528a:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b528c:	2379      	movs	r3, #121	; 0x79
   b528e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b5292:	f10d 031f 	add.w	r3, sp, #31
   b5296:	9303      	str	r3, [sp, #12]
   b5298:	f10d 031e 	add.w	r3, sp, #30
   b529c:	4d78      	ldr	r5, [pc, #480]	; (b5480 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f8>)
   b529e:	9302      	str	r3, [sp, #8]
   b52a0:	f10d 031d 	add.w	r3, sp, #29
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	ab07      	add	r3, sp, #28
   b52a8:	9300      	str	r3, [sp, #0]
   b52aa:	4876      	ldr	r0, [pc, #472]	; (b5484 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1fc>)
   b52ac:	f10d 031b 	add.w	r3, sp, #27
   b52b0:	f10d 021a 	add.w	r2, sp, #26
   b52b4:	4629      	mov	r1, r5
   b52b6:	f006 f849 	bl	bb34c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b52ba:	b908      	cbnz	r0, b52c0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x38>
		else {Log.info("Invalid message flag"); return false;}
   b52bc:	2000      	movs	r0, #0
   b52be:	e0c8      	b.n	b5452 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		buf[len] = 0;
   b52c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b52c4:	2400      	movs	r4, #0
   b52c6:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b52c8:	882e      	ldrh	r6, [r5, #0]
   b52ca:	f001 f8f9 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b52ce:	f001 fb58 	bl	b6982 <_ZNK13sysStatusData15get_magicNumberEv>
   b52d2:	ba76      	rev16	r6, r6
   b52d4:	b2b6      	uxth	r6, r6
   b52d6:	42b0      	cmp	r0, r6
   b52d8:	d014      	beq.n	b5304 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7c>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b52da:	f001 f939 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b52de:	f001 fa93 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b52e2:	882b      	ldrh	r3, [r5, #0]
   b52e4:	9005      	str	r0, [sp, #20]
   b52e6:	ba5b      	rev16	r3, r3
   b52e8:	b29b      	uxth	r3, r3
   b52ea:	9304      	str	r3, [sp, #16]
   b52ec:	f001 f8e8 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b52f0:	f001 fb47 	bl	b6982 <_ZNK13sysStatusData15get_magicNumberEv>
   b52f4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b52f8:	9000      	str	r0, [sp, #0]
   b52fa:	4963      	ldr	r1, [pc, #396]	; (b5488 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x200>)
   b52fc:	4863      	ldr	r0, [pc, #396]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b52fe:	f7fe ff1e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b5302:	e7db      	b.n	b52bc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);												// Captures the nodeNumber 
   b5304:	f001 f924 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5308:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b530c:	f001 faf1 	bl	b68f2 <_ZN17currentStatusData14set_nodeNumberEh>
		current.set_tempNodeNumber(0);												// Clear for new response
   b5310:	f001 f91e 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5314:	4621      	mov	r1, r4
   b5316:	f001 faf2 	bl	b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_RSSI(driver.lastRssi());										// Signal strength
   b531a:	f001 f919 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b531e:	4604      	mov	r4, r0
   b5320:	485b      	ldr	r0, [pc, #364]	; (b5490 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x208>)
   b5322:	f005 fdc4 	bl	baeae <_ZN15RHGenericDriver8lastRssiEv>
   b5326:	4601      	mov	r1, r0
   b5328:	4620      	mov	r0, r4
   b532a:	f001 fd8d 	bl	b6e48 <_ZN17currentStatusData8set_RSSIEs>
		current.set_SNR(driver.lastSNR());											// Signal to noise ratio
   b532e:	f001 f90f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5332:	4604      	mov	r4, r0
   b5334:	4856      	ldr	r0, [pc, #344]	; (b5490 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x208>)
   b5336:	f006 ff5b 	bl	bc1f0 <_ZN7RH_RF957lastSNREv>
   b533a:	b201      	sxth	r1, r0
   b533c:	4620      	mov	r0, r4
   b533e:	f001 fd89 	bl	b6e54 <_ZN17currentStatusData7set_SNREs>
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b5342:	f001 f905 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5346:	8869      	ldrh	r1, [r5, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b5348:	4c52      	ldr	r4, [pc, #328]	; (b5494 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x20c>)
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], current.get_RSSI(), current.get_SNR());
   b534a:	4d53      	ldr	r5, [pc, #332]	; (b5498 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x210>)
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b534c:	ba49      	rev16	r1, r1
   b534e:	b289      	uxth	r1, r1
   b5350:	f001 fbe9 	bl	b6b26 <_ZN17currentStatusData10set_nodeIDEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b5354:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5358:	f003 030f 	and.w	r3, r3, #15
   b535c:	7023      	strb	r3, [r4, #0]
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], current.get_RSSI(), current.get_SNR());
   b535e:	f001 f8f7 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5362:	f001 fa51 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5366:	9005      	str	r0, [sp, #20]
   b5368:	f001 f8f2 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b536c:	f001 fb71 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b5370:	7821      	ldrb	r1, [r4, #0]
   b5372:	9004      	str	r0, [sp, #16]
   b5374:	eb05 1501 	add.w	r5, r5, r1, lsl #4
   b5378:	f001 f8ea 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b537c:	f001 fd42 	bl	b6e04 <_ZNK17currentStatusData8get_RSSIEv>
   b5380:	4606      	mov	r6, r0
   b5382:	f001 f8e5 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5386:	f001 fd42 	bl	b6e0e <_ZNK17currentStatusData7get_SNREv>
   b538a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b538e:	4943      	ldr	r1, [pc, #268]	; (b549c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x214>)
   b5390:	9500      	str	r5, [sp, #0]
   b5392:	e9cd 6001 	strd	r6, r0, [sp, #4]
   b5396:	483d      	ldr	r0, [pc, #244]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b5398:	f7fe fed1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b539c:	f001 f8d8 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53a0:	f001 fa32 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b53a4:	280a      	cmp	r0, #10
   b53a6:	d825      	bhi.n	b53f4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x16c>
   b53a8:	f7fe fee2 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53ac:	4605      	mov	r5, r0
   b53ae:	f001 f8cf 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53b2:	f001 fa29 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b53b6:	9004      	str	r0, [sp, #16]
   b53b8:	f001 f8ca 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53bc:	f001 fb49 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b53c0:	9904      	ldr	r1, [sp, #16]
   b53c2:	4602      	mov	r2, r0
   b53c4:	4628      	mov	r0, r5
   b53c6:	f7ff f859 	bl	b447c <_ZN14LoRA_Functions14nodeConfiguredEii>
   b53ca:	b998      	cbnz	r0, b53f4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x16c>
			Log.info("Node not properly configured, resetting node number");
   b53cc:	4934      	ldr	r1, [pc, #208]	; (b54a0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b53ce:	482f      	ldr	r0, [pc, #188]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b53d0:	f7fe feb5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_tempNodeNumber(current.get_nodeNumber());				// Store node number in temp for the repsonse
   b53d4:	f001 f8bc 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53d8:	4605      	mov	r5, r0
   b53da:	f001 f8b9 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53de:	f001 fa13 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b53e2:	4601      	mov	r1, r0
   b53e4:	4628      	mov	r0, r5
   b53e6:	f001 fa8a 	bl	b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>
			current.set_nodeNumber(11);											// Set node number to 11
   b53ea:	f001 f8b1 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b53ee:	210b      	movs	r1, #11
   b53f0:	f001 fa7f 	bl	b68f2 <_ZN17currentStatusData14set_nodeNumberEh>
		if (lora_state == DATA_RPT) {if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b53f4:	7823      	ldrb	r3, [r4, #0]
   b53f6:	2b03      	cmp	r3, #3
   b53f8:	d12d      	bne.n	b5456 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ce>
   b53fa:	f7fe feb9 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53fe:	f7fe ffb1 	bl	b4364 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b5402:	2800      	cmp	r0, #0
   b5404:	f43f af5a 	beq.w	b52bc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              			// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b5408:	f001 f85a 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b540c:	f001 fb1c 	bl	b6a48 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b5410:	b1c0      	cbz	r0, b5444 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1bc>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());// This was the temporary value from the particle function
   b5412:	f001 f855 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5416:	4605      	mov	r5, r0
   b5418:	f001 f852 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b541c:	f001 fb14 	bl	b6a48 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b5420:	4601      	mov	r1, r0
   b5422:	4628      	mov	r0, r5
   b5424:	f001 fb73 	bl	b6b0e <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b5428:	f001 f84a 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b542c:	2100      	movs	r1, #0
   b542e:	f001 fb74 	bl	b6b1a <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b5432:	f001 f845 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5436:	f001 faa9 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b543a:	491a      	ldr	r1, [pc, #104]	; (b54a4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x21c>)
   b543c:	4602      	mov	r2, r0
   b543e:	4813      	ldr	r0, [pc, #76]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b5440:	f7fe fe7d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5444:	7823      	ldrb	r3, [r4, #0]
   b5446:	2b04      	cmp	r3, #4
   b5448:	d111      	bne.n	b546e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1e6>
   b544a:	f7fe fe91 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b544e:	f7ff fda7 	bl	b4fa0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
}
   b5452:	b008      	add	sp, #32
   b5454:	bd70      	pop	{r4, r5, r6, pc}
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b5456:	2b01      	cmp	r3, #1
   b5458:	d104      	bne.n	b5464 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1dc>
   b545a:	f7fe fe89 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b545e:	f7ff fcb3 	bl	b4dc8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b5462:	e7ce      	b.n	b5402 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x17a>
		else {Log.info("Invalid message flag, returning"); return false;}
   b5464:	4910      	ldr	r1, [pc, #64]	; (b54a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x220>)
		else {Log.info("Invalid message flag"); return false;}
   b5466:	4809      	ldr	r0, [pc, #36]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b5468:	f7fe fe69 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b546c:	e726      	b.n	b52bc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b546e:	2b02      	cmp	r3, #2
   b5470:	d104      	bne.n	b547c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f4>
   b5472:	f7fe fe7d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5476:	f7ff f933 	bl	b46e0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b547a:	e7ea      	b.n	b5452 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		else {Log.info("Invalid message flag"); return false;}
   b547c:	490b      	ldr	r1, [pc, #44]	; (b54ac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x224>)
   b547e:	e7f2      	b.n	b5466 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1de>
   b5480:	2003d870 	.word	0x2003d870
   b5484:	2003e168 	.word	0x2003e168
   b5488:	000c3d78 	.word	0x000c3d78
   b548c:	2003e650 	.word	0x2003e650
   b5490:	2003d8ec 	.word	0x2003d8ec
   b5494:	2003d868 	.word	0x2003d868
   b5498:	2003d57c 	.word	0x2003d57c
   b549c:	000c3dd2 	.word	0x000c3dd2
   b54a0:	000c3e0b 	.word	0x000c3e0b
   b54a4:	000c3e5f 	.word	0x000c3e5f
   b54a8:	000c3e3f 	.word	0x000c3e3f
   b54ac:	000c3e93 	.word	0x000c3e93

000b54b0 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b54b0:	4b01      	ldr	r3, [pc, #4]	; (b54b8 <_Z18outOfMemoryHandleryi+0x8>)
   b54b2:	601a      	str	r2, [r3, #0]
}
   b54b4:	4770      	bx	lr
   b54b6:	bf00      	nop
   b54b8:	2003d5ec 	.word	0x2003d5ec

000b54bc <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b54bc:	4b01      	ldr	r3, [pc, #4]	; (b54c4 <_Z13userSwitchISRv+0x8>)
   b54be:	2201      	movs	r2, #1
   b54c0:	701a      	strb	r2, [r3, #0]
}
   b54c2:	4770      	bx	lr
   b54c4:	2003e463 	.word	0x2003e463

000b54c8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b54c8:	b530      	push	{r4, r5, lr}
   b54ca:	b085      	sub	sp, #20
   b54cc:	4604      	mov	r4, r0
   b54ce:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b54d0:	b160      	cbz	r0, b54ec <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b54d2:	6840      	ldr	r0, [r0, #4]
   b54d4:	b150      	cbz	r0, b54ec <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b54d6:	6885      	ldr	r5, [r0, #8]
   b54d8:	b145      	cbz	r5, b54ec <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b54da:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b54de:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54e2:	68c4      	ldr	r4, [r0, #12]
   b54e4:	ab01      	add	r3, sp, #4
   b54e6:	466a      	mov	r2, sp
   b54e8:	a902      	add	r1, sp, #8
   b54ea:	47a0      	blx	r4
    }
   b54ec:	b005      	add	sp, #20
   b54ee:	bd30      	pop	{r4, r5, pc}

000b54f0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b54f0:	b530      	push	{r4, r5, lr}
   b54f2:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b54f4:	6800      	ldr	r0, [r0, #0]
   b54f6:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b54fe:	6883      	ldr	r3, [r0, #8]
   b5500:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5504:	b90b      	cbnz	r3, b550a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5506:	f00b f9c3 	bl	c0890 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b550a:	68c3      	ldr	r3, [r0, #12]
   b550c:	aa01      	add	r2, sp, #4
   b550e:	a902      	add	r1, sp, #8
   b5510:	4798      	blx	r3
      }
   b5512:	b005      	add	sp, #20
   b5514:	bd30      	pop	{r4, r5, pc}

000b5516 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5516:	2a01      	cmp	r2, #1
   b5518:	d102      	bne.n	b5520 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b551a:	6001      	str	r1, [r0, #0]
      }
   b551c:	2000      	movs	r0, #0
   b551e:	4770      	bx	lr
	  switch (__op)
   b5520:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5522:	bf04      	itt	eq
   b5524:	680b      	ldreq	r3, [r1, #0]
   b5526:	6003      	streq	r3, [r0, #0]
	      break;
   b5528:	e7f8      	b.n	b551c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b552a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b552a:	6803      	ldr	r3, [r0, #0]
   b552c:	6812      	ldr	r2, [r2, #0]
   b552e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5532:	4718      	bx	r3

000b5534 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b5534:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5536:	2000      	movs	r0, #0
   b5538:	f007 fef4 	bl	bd324 <spark_sync_time_pending>
   b553c:	b128      	cbz	r0, b554a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b553e:	f007 fed1 	bl	bd2e4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5542:	f080 0001 	eor.w	r0, r0, #1
   b5546:	b2c0      	uxtb	r0, r0
    }
   b5548:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b554a:	2001      	movs	r0, #1
   b554c:	e7fc      	b.n	b5548 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b554e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b554e:	b510      	push	{r4, lr}
      if (_M_manager)
   b5550:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5552:	4604      	mov	r4, r0
      if (_M_manager)
   b5554:	b113      	cbz	r3, b555c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5556:	2203      	movs	r2, #3
   b5558:	4601      	mov	r1, r0
   b555a:	4798      	blx	r3
    }
   b555c:	4620      	mov	r0, r4
   b555e:	bd10      	pop	{r4, pc}

000b5560 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b5560:	b510      	push	{r4, lr}
            delete callableWrapper;
   b5562:	4604      	mov	r4, r0
   b5564:	b138      	cbz	r0, b5576 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5566:	f7ff fff2 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   b556a:	4620      	mov	r0, r4
   b556c:	2110      	movs	r1, #16
        };
   b556e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b5572:	f7fe bd94 	b.w	b409e <_ZdlPvj>
        };
   b5576:	bd10      	pop	{r4, pc}

000b5578 <_Z22publishStateTransitionv>:
{
   b5578:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b557a:	4c14      	ldr	r4, [pc, #80]	; (b55cc <_Z22publishStateTransitionv+0x54>)
   b557c:	4d14      	ldr	r5, [pc, #80]	; (b55d0 <_Z22publishStateTransitionv+0x58>)
   b557e:	7823      	ldrb	r3, [r4, #0]
   b5580:	4e14      	ldr	r6, [pc, #80]	; (b55d4 <_Z22publishStateTransitionv+0x5c>)
   b5582:	2b02      	cmp	r3, #2
{
   b5584:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5586:	d117      	bne.n	b55b8 <_Z22publishStateTransitionv+0x40>
   b5588:	f00a fe4a 	bl	c0220 <_ZN9TimeClass7isValidEv>
   b558c:	b9a0      	cbnz	r0, b55b8 <_Z22publishStateTransitionv+0x40>
   b558e:	7822      	ldrb	r2, [r4, #0]
   b5590:	7833      	ldrb	r3, [r6, #0]
   b5592:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b5596:	9200      	str	r2, [sp, #0]
   b5598:	4a0f      	ldr	r2, [pc, #60]	; (b55d8 <_Z22publishStateTransitionv+0x60>)
   b559a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b559e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b55a2:	a802      	add	r0, sp, #8
   b55a4:	f007 ff66 	bl	bd474 <snprintf>
	oldState = state;
   b55a8:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b55aa:	480c      	ldr	r0, [pc, #48]	; (b55dc <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b55ac:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b55ae:	a902      	add	r1, sp, #8
   b55b0:	f7fe fdc5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b55b4:	b042      	add	sp, #264	; 0x108
   b55b6:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b55b8:	7822      	ldrb	r2, [r4, #0]
   b55ba:	7833      	ldrb	r3, [r6, #0]
   b55bc:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b55c0:	9200      	str	r2, [sp, #0]
   b55c2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b55c6:	4a06      	ldr	r2, [pc, #24]	; (b55e0 <_Z22publishStateTransitionv+0x68>)
   b55c8:	e7e9      	b.n	b559e <_Z22publishStateTransitionv+0x26>
   b55ca:	bf00      	nop
   b55cc:	2003e462 	.word	0x2003e462
   b55d0:	2003d5f0 	.word	0x2003d5f0
   b55d4:	2003e461 	.word	0x2003e461
   b55d8:	000c3ec8 	.word	0x000c3ec8
   b55dc:	2003e650 	.word	0x2003e650
   b55e0:	000c3ee8 	.word	0x000c3ee8

000b55e4 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b55e4:	b510      	push	{r4, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b55e6:	f000 ff6b 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b55ea:	f001 f9cf 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b55ee:	4604      	mov	r4, r0
   	if (Time.isValid()) {
   b55f0:	f00a fe16 	bl	c0220 <_ZN9TimeClass7isValidEv>
   b55f4:	b908      	cbnz	r0, b55fa <_Z21secondsUntilNextEventv+0x16>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b55f6:	200a      	movs	r0, #10
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
        // Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
    }
	return secondsToReturn;
}
   b55f8:	bd10      	pop	{r4, pc}
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b55fa:	203c      	movs	r0, #60	; 0x3c
   b55fc:	4344      	muls	r4, r0
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b55fe:	f00a fe2c 	bl	c025a <_ZN9TimeClass3nowEv>
   b5602:	fbb0 f3f4 	udiv	r3, r0, r4
   b5606:	fb03 0014 	mls	r0, r3, r4, r0
   b560a:	1a20      	subs	r0, r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b560c:	2809      	cmp	r0, #9
   b560e:	d9f2      	bls.n	b55f6 <_Z21secondsUntilNextEventv+0x12>
   b5610:	42a0      	cmp	r0, r4
   b5612:	bf28      	it	cs
   b5614:	4620      	movcs	r0, r4
   b5616:	e7ef      	b.n	b55f8 <_Z21secondsUntilNextEventv+0x14>

000b5618 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b561c:	ed2d 8b02 	vpush	{d8}
   b5620:	b0e7      	sub	sp, #412	; 0x19c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5622:	ad1e      	add	r5, sp, #120	; 0x78
   b5624:	2300      	movs	r3, #0
   b5626:	61eb      	str	r3, [r5, #28]
   b5628:	4b8a      	ldr	r3, [pc, #552]	; (b5854 <_Z14publishWebhookh+0x23c>)
   b562a:	602b      	str	r3, [r5, #0]
   b562c:	4b8a      	ldr	r3, [pc, #552]	; (b5858 <_Z14publishWebhookh+0x240>)
   b562e:	606b      	str	r3, [r5, #4]
   b5630:	4b8a      	ldr	r3, [pc, #552]	; (b585c <_Z14publishWebhookh+0x244>)
   b5632:	60ab      	str	r3, [r5, #8]
   b5634:	4b8a      	ldr	r3, [pc, #552]	; (b5860 <_Z14publishWebhookh+0x248>)
   b5636:	60eb      	str	r3, [r5, #12]
   b5638:	4b8a      	ldr	r3, [pc, #552]	; (b5864 <_Z14publishWebhookh+0x24c>)
   b563a:	612b      	str	r3, [r5, #16]
   b563c:	4b8a      	ldr	r3, [pc, #552]	; (b5868 <_Z14publishWebhookh+0x250>)
   b563e:	616b      	str	r3, [r5, #20]
   b5640:	4b8a      	ldr	r3, [pc, #552]	; (b586c <_Z14publishWebhookh+0x254>)
   b5642:	61ab      	str	r3, [r5, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5644:	4604      	mov	r4, r0
   b5646:	2800      	cmp	r0, #0
   b5648:	f000 80b1 	beq.w	b57ae <_Z14publishWebhookh+0x196>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b564c:	f7fe fd90 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5650:	9012      	str	r0, [sp, #72]	; 0x48
   b5652:	f000 ff7d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5656:	f001 f9fc 	bl	b6a52 <_ZNK17currentStatusData10get_nodeIDEv>
   b565a:	4622      	mov	r2, r4
   b565c:	4603      	mov	r3, r0
   b565e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5660:	a81a      	add	r0, sp, #104	; 0x68
   b5662:	f7fe fec1 	bl	b43e8 <_ZN14LoRA_Functions12findDeviceIDEii>
   b5666:	4982      	ldr	r1, [pc, #520]	; (b5870 <_Z14publishWebhookh+0x258>)
   b5668:	a81a      	add	r0, sp, #104	; 0x68
   b566a:	f00a fb46 	bl	bfcfa <_ZNK6String6equalsEPKc>
		if (deviceID == "null") return;
   b566e:	4604      	mov	r4, r0
   b5670:	b138      	cbz	r0, b5682 <_Z14publishWebhookh+0x6a>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b5672:	a81a      	add	r0, sp, #104	; 0x68
   b5674:	f00a fa30 	bl	bfad8 <_ZN6StringD1Ev>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}
	return;
}
   b5678:	b067      	add	sp, #412	; 0x19c
   b567a:	ecbd 8b02 	vpop	{d8}
   b567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5682:	f000 ff65 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5686:	f001 f8dd 	bl	b6844 <_ZNK17currentStatusData16get_successCountEv>
   b568a:	4680      	mov	r8, r0
   b568c:	f000 ff60 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5690:	f001 f8d3 	bl	b683a <_ZNK17currentStatusData16get_messageCountEv>
	const char * c_str() const { return buffer; }
   b5694:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   b5698:	4682      	mov	sl, r0
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b569a:	f000 ff59 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b569e:	f001 f9dd 	bl	b6a5c <_ZNK17currentStatusData15get_hourlyCountEv>
   b56a2:	9013      	str	r0, [sp, #76]	; 0x4c
   b56a4:	f000 ff54 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56a8:	f001 fa08 	bl	b6abc <_ZNK17currentStatusData14get_dailyCountEv>
   b56ac:	9014      	str	r0, [sp, #80]	; 0x50
   b56ae:	f000 ff4f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56b2:	f001 f8d1 	bl	b6858 <_ZNK17currentStatusData14get_sensorTypeEv>
   b56b6:	9015      	str	r0, [sp, #84]	; 0x54
   b56b8:	f000 ff4a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56bc:	f000 ff70 	bl	b65a0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b56c0:	eeb0 8a40 	vmov.f32	s16, s0
   b56c4:	eef0 8a60 	vmov.f32	s17, s1
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b56c8:	f000 ff42 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56cc:	f001 f8ab 	bl	b6826 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56d0:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   b56d4:	9312      	str	r3, [sp, #72]	; 0x48
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_messageCount(), percentSuccess, Time.now());
   b56d6:	f000 ff3b 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56da:	f001 f89f 	bl	b681c <_ZNK17currentStatusData17get_internalTempCEv>
   b56de:	9016      	str	r0, [sp, #88]	; 0x58
   b56e0:	f000 ff36 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56e4:	f001 f8a4 	bl	b6830 <_ZNK17currentStatusData14get_resetCountEv>
   b56e8:	9017      	str	r0, [sp, #92]	; 0x5c
   b56ea:	f000 ff31 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56ee:	f001 f8ae 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b56f2:	9018      	str	r0, [sp, #96]	; 0x60
   b56f4:	f000 ff2c 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b56f8:	f001 f886 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
   b56fc:	4605      	mov	r5, r0
   b56fe:	f000 ff27 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5702:	f001 fb7f 	bl	b6e04 <_ZNK17currentStatusData8get_RSSIEv>
   b5706:	4606      	mov	r6, r0
   b5708:	f000 ff22 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b570c:	f001 fb7f 	bl	b6e0e <_ZNK17currentStatusData7get_SNREv>
   b5710:	4607      	mov	r7, r0
   b5712:	f000 ff1d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5716:	f001 f890 	bl	b683a <_ZNK17currentStatusData16get_messageCountEv>
   b571a:	9019      	str	r0, [sp, #100]	; 0x64
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b571c:	f00a fd9d 	bl	c025a <_ZN9TimeClass3nowEv>
   b5720:	9010      	str	r0, [sp, #64]	; 0x40
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5722:	4640      	mov	r0, r8
   b5724:	f00b fa12 	bl	c0b4c <__aeabi_i2d>
   b5728:	4680      	mov	r8, r0
   b572a:	4650      	mov	r0, sl
   b572c:	4689      	mov	r9, r1
   b572e:	f00b fa0d 	bl	c0b4c <__aeabi_i2d>
   b5732:	4602      	mov	r2, r0
   b5734:	460b      	mov	r3, r1
   b5736:	4640      	mov	r0, r8
   b5738:	4649      	mov	r1, r9
   b573a:	f00b fb9b 	bl	c0e74 <__aeabi_ddiv>
   b573e:	4b4d      	ldr	r3, [pc, #308]	; (b5874 <_Z14publishWebhookh+0x25c>)
   b5740:	2200      	movs	r2, #0
   b5742:	f00b fa6d 	bl	c0c20 <__aeabi_dmul>
   b5746:	f00b fd63 	bl	c1210 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b574a:	f00b fa11 	bl	c0b70 <__aeabi_f2d>
   b574e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b5750:	4a49      	ldr	r2, [pc, #292]	; (b5878 <_Z14publishWebhookh+0x260>)
   b5752:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
   b5756:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5758:	9309      	str	r3, [sp, #36]	; 0x24
   b575a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b575c:	9308      	str	r3, [sp, #32]
   b575e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5760:	9307      	str	r3, [sp, #28]
   b5762:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5764:	9306      	str	r3, [sp, #24]
   b5766:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5768:	9302      	str	r3, [sp, #8]
   b576a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5770:	9300      	str	r3, [sp, #0]
   b5772:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   b5776:	465b      	mov	r3, fp
   b5778:	f44f 7180 	mov.w	r1, #256	; 0x100
   b577c:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5780:	a826      	add	r0, sp, #152	; 0x98
   b5782:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
   b5786:	f007 fe75 	bl	bd474 <snprintf>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b578a:	f004 fe6b 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b578e:	4b3b      	ldr	r3, [pc, #236]	; (b587c <_Z14publishWebhookh+0x264>)
   b5790:	4a3b      	ldr	r2, [pc, #236]	; (b5880 <_Z14publishWebhookh+0x268>)
   b5792:	781b      	ldrb	r3, [r3, #0]
   b5794:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5796:	493b      	ldr	r1, [pc, #236]	; (b5884 <_Z14publishWebhookh+0x26c>)
   b5798:	4313      	orrs	r3, r2
   b579a:	6802      	ldr	r2, [r0, #0]
   b579c:	f88d 3000 	strb.w	r3, [sp]
   b57a0:	f88d 4004 	strb.w	r4, [sp, #4]
   b57a4:	6814      	ldr	r4, [r2, #0]
   b57a6:	233c      	movs	r3, #60	; 0x3c
   b57a8:	aa26      	add	r2, sp, #152	; 0x98
   b57aa:	47a0      	blx	r4
   b57ac:	e761      	b.n	b5672 <_Z14publishWebhookh+0x5a>
		takeMeasurements();												// Loads the current values for the Gateway
   b57ae:	f002 f96b 	bl	b7a88 <_Z16takeMeasurementsv>
        return spark_deviceID();
   b57b2:	a81a      	add	r0, sp, #104	; 0x68
   b57b4:	f007 fd9e 	bl	bd2f4 <spark_deviceID>
   b57b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b57ba:	9312      	str	r3, [sp, #72]	; 0x48
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57bc:	f000 fe80 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b57c0:	f001 f81d 	bl	b67fe <_ZNK13sysStatusData14get_sensorTypeEv>
   b57c4:	4606      	mov	r6, r0
   b57c6:	f000 fec3 	bl	b6550 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57ca:	f000 fee9 	bl	b65a0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b57ce:	eeb0 8a40 	vmov.f32	s16, s0
   b57d2:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57d6:	f000 febb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b57da:	f001 f824 	bl	b6826 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57de:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
   b57e2:	f000 feb5 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b57e6:	f001 f819 	bl	b681c <_ZNK17currentStatusData17get_internalTempCEv>
   b57ea:	4605      	mov	r5, r0
   b57ec:	f000 fe68 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b57f0:	f000 ffec 	bl	b67cc <_ZNK13sysStatusData14get_resetCountEv>
   b57f4:	4607      	mov	r7, r0
   b57f6:	f000 fe63 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b57fa:	f000 ffec 	bl	b67d6 <_ZNK13sysStatusData16get_messageCountEv>
   b57fe:	4680      	mov	r8, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b5800:	f00a fd2b 	bl	c025a <_ZN9TimeClass3nowEv>
   b5804:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5806:	4a20      	ldr	r2, [pc, #128]	; (b5888 <_Z14publishWebhookh+0x270>)
   b5808:	9400      	str	r4, [sp, #0]
   b580a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b580e:	e9cd 8009 	strd	r8, r0, [sp, #36]	; 0x24
   b5812:	e9cd 4601 	strd	r4, r6, [sp, #4]
   b5816:	e9cd 5707 	strd	r5, r7, [sp, #28]
   b581a:	ed8d 8b04 	vstr	d8, [sp, #16]
   b581e:	f8cd 9018 	str.w	r9, [sp, #24]
   b5822:	a826      	add	r0, sp, #152	; 0x98
   b5824:	f007 fe26 	bl	bd474 <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5828:	a81a      	add	r0, sp, #104	; 0x68
   b582a:	f00a f955 	bl	bfad8 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b582e:	f004 fe19 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
   b5832:	4b12      	ldr	r3, [pc, #72]	; (b587c <_Z14publishWebhookh+0x264>)
   b5834:	4a12      	ldr	r2, [pc, #72]	; (b5880 <_Z14publishWebhookh+0x268>)
   b5836:	781b      	ldrb	r3, [r3, #0]
   b5838:	7812      	ldrb	r2, [r2, #0]
   b583a:	4914      	ldr	r1, [pc, #80]	; (b588c <_Z14publishWebhookh+0x274>)
   b583c:	4313      	orrs	r3, r2
   b583e:	6802      	ldr	r2, [r0, #0]
   b5840:	f88d 3000 	strb.w	r3, [sp]
   b5844:	f88d 4004 	strb.w	r4, [sp, #4]
   b5848:	6814      	ldr	r4, [r2, #0]
   b584a:	233c      	movs	r3, #60	; 0x3c
   b584c:	aa26      	add	r2, sp, #152	; 0x98
   b584e:	47a0      	blx	r4
   b5850:	e712      	b.n	b5678 <_Z14publishWebhookh+0x60>
   b5852:	bf00      	nop
   b5854:	000c3ef6 	.word	0x000c3ef6
   b5858:	000c3efe 	.word	0x000c3efe
   b585c:	000c3f02 	.word	0x000c3f02
   b5860:	000c3f0b 	.word	0x000c3f0b
   b5864:	000c3f13 	.word	0x000c3f13
   b5868:	000c3f1f 	.word	0x000c3f1f
   b586c:	000c3f25 	.word	0x000c3f25
   b5870:	000c38e6 	.word	0x000c38e6
   b5874:	40590000 	.word	0x40590000
   b5878:	000c3f31 	.word	0x000c3f31
   b587c:	2003e31d 	.word	0x2003e31d
   b5880:	2003e31c 	.word	0x2003e31c
   b5884:	000c3fff 	.word	0x000c3fff
   b5888:	000c4014 	.word	0x000c4014
   b588c:	000c40a2 	.word	0x000c40a2

000b5890 <_Z9softDelaym>:
 * @brief soft delay let's us process Particle functions and service the sensor interrupts while pausing
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
   b5890:	b570      	push	{r4, r5, r6, lr}
   b5892:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5894:	f007 fa2a 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5898:	4e06      	ldr	r6, [pc, #24]	; (b58b4 <_Z9softDelaym+0x24>)
   b589a:	4604      	mov	r4, r0
   b589c:	f007 fa26 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b58a0:	1b00      	subs	r0, r0, r4
   b58a2:	42a8      	cmp	r0, r5
   b58a4:	d205      	bcs.n	b58b2 <_Z9softDelaym+0x22>
		return HAL_Timer_Get_Milli_Seconds();
   b58a6:	f007 fa21 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b58aa:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b58ac:	f007 fd0a 	bl	bd2c4 <spark_process>
    }
   b58b0:	e7f4      	b.n	b589c <_Z9softDelaym+0xc>
}
   b58b2:	bd70      	pop	{r4, r5, r6, pc}
   b58b4:	2003e710 	.word	0x2003e710

000b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b58b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b58ba:	2300      	movs	r3, #0
   b58bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b58be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b58c0:	4604      	mov	r4, r0
   b58c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b58c4:	b12b      	cbz	r3, b58d2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58c6:	2202      	movs	r2, #2
   b58c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58ca:	68eb      	ldr	r3, [r5, #12]
   b58cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58ce:	68ab      	ldr	r3, [r5, #8]
   b58d0:	60a3      	str	r3, [r4, #8]
    }
   b58d2:	4620      	mov	r0, r4
   b58d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b58d8 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b58d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b58dc:	b095      	sub	sp, #84	; 0x54
   b58de:	4605      	mov	r5, r0
        };
   b58e0:	991c      	ldr	r1, [sp, #112]	; 0x70
   b58e2:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b58e4:	4690      	mov	r8, r2
   b58e6:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58e8:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b58ea:	f7ff ffe5 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58ee:	a904      	add	r1, sp, #16
   b58f0:	a808      	add	r0, sp, #32
   b58f2:	f7ff ffe1 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b58f6:	a908      	add	r1, sp, #32
   b58f8:	4630      	mov	r0, r6
   b58fa:	f7ff ffdd 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b58fe:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5902:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5904:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5908:	f7fe fbc5 	bl	b4096 <_Znwj>
   b590c:	4604      	mov	r4, r0
   b590e:	b1a0      	cbz	r0, b593a <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5910:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5914:	ab01      	add	r3, sp, #4
   b5916:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b591a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b591e:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5922:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b5928:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b592a:	60a3      	str	r3, [r4, #8]
   b592c:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b5932:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b5936:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5938:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b593a:	4b24      	ldr	r3, [pc, #144]	; (b59cc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b593c:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b593e:	4b24      	ldr	r3, [pc, #144]	; (b59d0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5940:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b5942:	2200      	movs	r2, #0
   b5944:	2300      	movs	r3, #0
   b5946:	f04f 0900 	mov.w	r9, #0
   b594a:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b594e:	4b21      	ldr	r3, [pc, #132]	; (b59d4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5950:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5954:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5956:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5958:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b595c:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5960:	f7fe fb99 	bl	b4096 <_Znwj>
   b5964:	4604      	mov	r4, r0
   b5966:	b1d8      	cbz	r0, b59a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b5968:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b596a:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b596e:	b133      	cbz	r3, b597e <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5970:	2202      	movs	r2, #2
   b5972:	a910      	add	r1, sp, #64	; 0x40
   b5974:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5978:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b597a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b597c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b597e:	4b16      	ldr	r3, [pc, #88]	; (b59d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5980:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5982:	4a16      	ldr	r2, [pc, #88]	; (b59dc <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5984:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5986:	ab01      	add	r3, sp, #4
   b5988:	4640      	mov	r0, r8
   b598a:	4639      	mov	r1, r7
   b598c:	f007 fc30 	bl	bd1f0 <system_subscribe_event>
        if (r) {
   b5990:	b1b0      	cbz	r0, b59c0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff fddb 	bl	b554e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b5998:	2110      	movs	r1, #16
   b599a:	4620      	mov	r0, r4
   b599c:	f7fe fb7f 	bl	b409e <_ZdlPvj>
   b59a0:	a810      	add	r0, sp, #64	; 0x40
   b59a2:	f7ff fdd4 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   b59a6:	4630      	mov	r0, r6
   b59a8:	f7ff fdd1 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   b59ac:	a808      	add	r0, sp, #32
   b59ae:	f7ff fdce 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   b59b2:	a804      	add	r0, sp, #16
   b59b4:	f7ff fdcb 	bl	b554e <_ZNSt14_Function_baseD1Ev>
    }
   b59b8:	4628      	mov	r0, r5
   b59ba:	b015      	add	sp, #84	; 0x54
   b59bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b59c0:	9b02      	ldr	r3, [sp, #8]
   b59c2:	60ab      	str	r3, [r5, #8]
   b59c4:	e9c5 8700 	strd	r8, r7, [r5]
   b59c8:	e7ea      	b.n	b59a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b59ca:	bf00      	nop
   b59cc:	000b54f1 	.word	0x000b54f1
   b59d0:	000b59e1 	.word	0x000b59e1
   b59d4:	000c0002 	.word	0x000c0002
   b59d8:	000b5561 	.word	0x000b5561
   b59dc:	000b54c9 	.word	0x000b54c9

000b59e0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b59e0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b59e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59e4:	4604      	mov	r4, r0
	switch (__op)
   b59e6:	d104      	bne.n	b59f2 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b59e8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b59ea:	6003      	str	r3, [r0, #0]
      }
   b59ec:	2000      	movs	r0, #0
   b59ee:	b003      	add	sp, #12
   b59f0:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b59f2:	2a02      	cmp	r2, #2
   b59f4:	d00c      	beq.n	b5a10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b59f6:	2a03      	cmp	r2, #3
   b59f8:	d1f8      	bne.n	b59ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b59fa:	6804      	ldr	r4, [r0, #0]
   b59fc:	2c00      	cmp	r4, #0
   b59fe:	d0f5      	beq.n	b59ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5a00:	4620      	mov	r0, r4
   b5a02:	f7ff fda4 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5a06:	2110      	movs	r1, #16
   b5a08:	4620      	mov	r0, r4
   b5a0a:	f7fe fb48 	bl	b409e <_ZdlPvj>
   b5a0e:	e7ed      	b.n	b59ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b5a10:	6809      	ldr	r1, [r1, #0]
   b5a12:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a14:	2010      	movs	r0, #16
   b5a16:	f7fe fb3e 	bl	b4096 <_Znwj>
   b5a1a:	4605      	mov	r5, r0
   b5a1c:	b110      	cbz	r0, b5a24 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5a1e:	9901      	ldr	r1, [sp, #4]
   b5a20:	f7ff ff4a 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5a24:	6025      	str	r5, [r4, #0]
	}
   b5a26:	e7e1      	b.n	b59ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b5a28 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b5a28:	4b16      	ldr	r3, [pc, #88]	; (b5a84 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b5a2a:	b510      	push	{r4, lr}
   b5a2c:	2401      	movs	r4, #1
   b5a2e:	701c      	strb	r4, [r3, #0]
   b5a30:	4b15      	ldr	r3, [pc, #84]	; (b5a88 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b5a32:	2208      	movs	r2, #8
   b5a34:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5a36:	f00a fdb9 	bl	c05ac <spark_protocol_instance>
   b5a3a:	2300      	movs	r3, #0
   b5a3c:	461a      	mov	r2, r3
   b5a3e:	2107      	movs	r1, #7
   b5a40:	f00a fdc4 	bl	c05cc <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5a44:	f00a fdb2 	bl	c05ac <spark_protocol_instance>
   b5a48:	2300      	movs	r3, #0
   b5a4a:	461a      	mov	r2, r3
   b5a4c:	210d      	movs	r1, #13
   b5a4e:	f00a fdb5 	bl	c05bc <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5a52:	4b0e      	ldr	r3, [pc, #56]	; (b5a8c <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5a54:	1d1a      	adds	r2, r3, #4
   b5a56:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5a58:	4a0d      	ldr	r2, [pc, #52]	; (b5a90 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5a5a:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5a5c:	2200      	movs	r2, #0
   b5a5e:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b5a62:	611a      	str	r2, [r3, #16]
   b5a64:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5a66:	f00a fe81 	bl	c076c <_Z19__fetch_global_Wirev>
   b5a6a:	2269      	movs	r2, #105	; 0x69
   b5a6c:	4601      	mov	r1, r0
   b5a6e:	4809      	ldr	r0, [pc, #36]	; (b5a94 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b5a70:	f002 f86a 	bl	b7b48 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5a74:	4808      	ldr	r0, [pc, #32]	; (b5a98 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5a76:	2306      	movs	r3, #6
   b5a78:	f840 3b04 	str.w	r3, [r0], #4
}
   b5a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5a80:	f003 bfa8 	b.w	b99d4 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5a84:	2003e31c 	.word	0x2003e31c
   b5a88:	2003e31d 	.word	0x2003e31d
   b5a8c:	2003e354 	.word	0x2003e354
   b5a90:	00030010 	.word	0x00030010
   b5a94:	2003e334 	.word	0x2003e334
   b5a98:	2003e370 	.word	0x2003e370

000b5a9c <setup>:
{
   b5a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5a9e:	2000      	movs	r0, #0
   b5aa0:	b09d      	sub	sp, #116	; 0x74
   b5aa2:	f007 f933 	bl	bcd0c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5aa6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5aaa:	4604      	mov	r4, r0
   b5aac:	2000      	movs	r0, #0
   b5aae:	f007 f92d 	bl	bcd0c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5ab2:	1b00      	subs	r0, r0, r4
   b5ab4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5ab8:	42a8      	cmp	r0, r5
   b5aba:	f171 0300 	sbcs.w	r3, r1, #0
   b5abe:	d207      	bcs.n	b5ad0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5ac0:	f00a fcb2 	bl	c0428 <_Z16_fetch_usbserialv>
   b5ac4:	f00a fca5 	bl	c0412 <_ZN9USBSerial11isConnectedEv>
   b5ac8:	b910      	cbnz	r0, b5ad0 <setup+0x34>
            spark_process();
   b5aca:	f007 fbfb 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   b5ace:	e7ed      	b.n	b5aac <setup+0x10>
   b5ad0:	f00a fcaa 	bl	c0428 <_Z16_fetch_usbserialv>
   b5ad4:	f00a fc9d 	bl	c0412 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5ad8:	f001 fe78 	bl	b77cc <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5adc:	f001 feaa 	bl	b7834 <_Z18initializePowerCfgv>
	sysStatus.setup();
   b5ae0:	f000 fcee 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5ae4:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5ae6:	4e50      	ldr	r6, [pc, #320]	; (b5c28 <setup+0x18c>)
   b5ae8:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5aea:	4f50      	ldr	r7, [pc, #320]	; (b5c2c <setup+0x190>)
   b5aec:	4798      	blx	r3
	current.setup();
   b5aee:	f000 fd2f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5af2:	6803      	ldr	r3, [r0, #0]
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	4798      	blx	r3
	nodeDatabase.setup();
   b5af8:	f000 fdb0 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b5afc:	6803      	ldr	r3, [r0, #0]
   b5afe:	681b      	ldr	r3, [r3, #0]
   b5b00:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5b02:	f001 fa4f 	bl	b6fa4 <_ZN18Particle_Functions8instanceEv>
   b5b06:	f001 fa5f 	bl	b6fc8 <_ZN18Particle_Functions5setupEv>
   b5b0a:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5b0c:	2101      	movs	r1, #1
   b5b0e:	4630      	mov	r0, r6
   b5b10:	8173      	strh	r3, [r6, #10]
   b5b12:	f002 fd15 	bl	b8540 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5b16:	217c      	movs	r1, #124	; 0x7c
   b5b18:	4630      	mov	r0, r6
   b5b1a:	f002 f913 	bl	b7d44 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5b1e:	4b44      	ldr	r3, [pc, #272]	; (b5c30 <setup+0x194>)
   b5b20:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5b22:	4b44      	ldr	r3, [pc, #272]	; (b5c34 <setup+0x198>)
   b5b24:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5b26:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5b28:	4b43      	ldr	r3, [pc, #268]	; (b5c38 <setup+0x19c>)
   b5b2a:	9308      	str	r3, [sp, #32]
   b5b2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5b30:	2300      	movs	r3, #0
   b5b32:	a802      	add	r0, sp, #8
   b5b34:	9500      	str	r5, [sp, #0]
   b5b36:	f7ff fecf 	bl	b58d8 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5b3a:	4628      	mov	r0, r5
   b5b3c:	f7ff fd07 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5b40:	f004 fc90 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
   b5b44:	f004 fe94 	bl	ba870 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5b48:	f7fe fb12 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5b4c:	2101      	movs	r1, #1
   b5b4e:	f7fe fb77 	bl	b4240 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5b52:	f004 f91f 	bl	b9d94 <_ZN9LocalTime8instanceEv>
   b5b56:	4939      	ldr	r1, [pc, #228]	; (b5c3c <setup+0x1a0>)
   b5b58:	4604      	mov	r4, r0
   b5b5a:	4628      	mov	r0, r5
   b5b5c:	f003 ffec 	bl	b9b38 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5b60:	a907      	add	r1, sp, #28
   b5b62:	f104 0008 	add.w	r0, r4, #8
   b5b66:	f00a f83e 	bl	bfbe6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5b6c:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5b6e:	a90d      	add	r1, sp, #52	; 0x34
   b5b70:	f104 0020 	add.w	r0, r4, #32
   b5b74:	f00a f837 	bl	bfbe6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5b7a:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5b80:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5b82:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5b84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5b86:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5b88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5b8a:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5b8c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5b90:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5b94:	4628      	mov	r0, r5
   b5b96:	f003 fd8b 	bl	b96b0 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5b9a:	f00a fb5e 	bl	c025a <_ZN9TimeClass3nowEv>
   b5b9e:	17c3      	asrs	r3, r0, #31
   b5ba0:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5ba4:	4638      	mov	r0, r7
   b5ba6:	f004 f96d 	bl	b9e84 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5baa:	f00a fb39 	bl	c0220 <_ZN9TimeClass7isValidEv>
   b5bae:	4c24      	ldr	r4, [pc, #144]	; (b5c40 <setup+0x1a4>)
   b5bb0:	2800      	cmp	r0, #0
   b5bb2:	d032      	beq.n	b5c1a <setup+0x17e>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5bb4:	4639      	mov	r1, r7
   b5bb6:	4a23      	ldr	r2, [pc, #140]	; (b5c44 <setup+0x1a8>)
   b5bb8:	4628      	mov	r0, r5
   b5bba:	f004 f84d 	bl	b9c58 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5bbe:	2301      	movs	r3, #1
   b5bc0:	461a      	mov	r2, r3
   b5bc2:	2110      	movs	r1, #16
   b5bc4:	4630      	mov	r0, r6
   b5bc6:	9f06      	ldr	r7, [sp, #24]
   b5bc8:	f002 f93d 	bl	b7e46 <_ZN6AB180510isBitClearEhhb>
   b5bcc:	491e      	ldr	r1, [pc, #120]	; (b5c48 <setup+0x1ac>)
   b5bce:	4b1f      	ldr	r3, [pc, #124]	; (b5c4c <setup+0x1b0>)
   b5bd0:	463a      	mov	r2, r7
   b5bd2:	2800      	cmp	r0, #0
   b5bd4:	bf18      	it	ne
   b5bd6:	460b      	movne	r3, r1
   b5bd8:	481d      	ldr	r0, [pc, #116]	; (b5c50 <setup+0x1b4>)
   b5bda:	491e      	ldr	r1, [pc, #120]	; (b5c54 <setup+0x1b8>)
   b5bdc:	f7fe faaf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5be0:	4628      	mov	r0, r5
   b5be2:	f009 ff79 	bl	bfad8 <_ZN6StringD1Ev>
		Log.info("User button pressed, connected mode");
   b5be6:	491c      	ldr	r1, [pc, #112]	; (b5c58 <setup+0x1bc>)
   b5be8:	4819      	ldr	r0, [pc, #100]	; (b5c50 <setup+0x1b4>)
   b5bea:	f7fe faa8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_connectivityMode(3);					  // connectivityMode Code 3 keeps both LoRA and Cellular connections on
   b5bee:	f000 fc67 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5bf2:	2103      	movs	r1, #3
   b5bf4:	f000 fe59 	bl	b68aa <_ZN13sysStatusData20set_connectivityModeEh>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5bf8:	4818      	ldr	r0, [pc, #96]	; (b5c5c <setup+0x1c0>)
   b5bfa:	4919      	ldr	r1, [pc, #100]	; (b5c60 <setup+0x1c4>)
   b5bfc:	8800      	ldrh	r0, [r0, #0]
		state = CONNECTING_STATE;
   b5bfe:	2305      	movs	r3, #5
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5c00:	2200      	movs	r2, #0
		state = CONNECTING_STATE;
   b5c02:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c08:	9200      	str	r2, [sp, #0]
   b5c0a:	f008 fa0b 	bl	be024 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5c0e:	7823      	ldrb	r3, [r4, #0]
   b5c10:	b90b      	cbnz	r3, b5c16 <setup+0x17a>
   b5c12:	2302      	movs	r3, #2
   b5c14:	7023      	strb	r3, [r4, #0]
}
   b5c16:	b01d      	add	sp, #116	; 0x74
   b5c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5c1a:	4912      	ldr	r1, [pc, #72]	; (b5c64 <setup+0x1c8>)
   b5c1c:	480c      	ldr	r0, [pc, #48]	; (b5c50 <setup+0x1b4>)
   b5c1e:	f7fe fa8e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5c22:	2305      	movs	r3, #5
   b5c24:	7023      	strb	r3, [r4, #0]
   b5c26:	e7de      	b.n	b5be6 <setup+0x14a>
   b5c28:	2003e334 	.word	0x2003e334
   b5c2c:	2003e370 	.word	0x2003e370
   b5c30:	000b54b1 	.word	0x000b54b1
   b5c34:	000b552b 	.word	0x000b552b
   b5c38:	000b5517 	.word	0x000b5517
   b5c3c:	000c40c4 	.word	0x000c40c4
   b5c40:	2003e462 	.word	0x2003e462
   b5c44:	000c40eb 	.word	0x000c40eb
   b5c48:	000c40ba 	.word	0x000c40ba
   b5c4c:	000c40bd 	.word	0x000c40bd
   b5c50:	2003e650 	.word	0x2003e650
   b5c54:	000c40f6 	.word	0x000c40f6
   b5c58:	000c4165 	.word	0x000c4165
   b5c5c:	000c49fa 	.word	0x000c49fa
   b5c60:	000b54bd 	.word	0x000b54bd
   b5c64:	000c4127 	.word	0x000c4127

000b5c68 <loop>:
void loop() {
   b5c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5c6c:	4c99      	ldr	r4, [pc, #612]	; (b5ed4 <loop+0x26c>)
   b5c6e:	7823      	ldrb	r3, [r4, #0]
   b5c70:	3b01      	subs	r3, #1
void loop() {
   b5c72:	b093      	sub	sp, #76	; 0x4c
   b5c74:	2b06      	cmp	r3, #6
   b5c76:	d822      	bhi.n	b5cbe <loop+0x56>
   b5c78:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5c7c:	000702ea 	.word	0x000702ea
   b5c80:	014c0053 	.word	0x014c0053
   b5c84:	02a70238 	.word	0x02a70238
   b5c88:	021a      	.short	0x021a
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c8a:	4b93      	ldr	r3, [pc, #588]	; (b5ed8 <loop+0x270>)
   b5c8c:	781b      	ldrb	r3, [r3, #0]
   b5c8e:	2b02      	cmp	r3, #2
   b5c90:	d001      	beq.n	b5c96 <loop+0x2e>
   b5c92:	f7ff fc71 	bl	b5578 <_Z22publishStateTransitionv>
			if (nextEventTime || sysStatus.get_connectivityMode() >= 2) {
   b5c96:	4d91      	ldr	r5, [pc, #580]	; (b5edc <loop+0x274>)
   b5c98:	782b      	ldrb	r3, [r5, #0]
   b5c9a:	b11b      	cbz	r3, b5ca4 <loop+0x3c>
				nextEventTime = false;
   b5c9c:	2300      	movs	r3, #0
   b5c9e:	702b      	strb	r3, [r5, #0]
				if (sysStatus.get_connectivityMode() >= 2) state = LoRA_STATE;			// Go back to the LoRA State if we are in connected mode
   b5ca0:	2304      	movs	r3, #4
   b5ca2:	e00b      	b.n	b5cbc <loop+0x54>
			if (nextEventTime || sysStatus.get_connectivityMode() >= 2) {
   b5ca4:	f000 fc0c 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5ca8:	f000 fd8b 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b5cac:	2801      	cmp	r0, #1
   b5cae:	d8f5      	bhi.n	b5c9c <loop+0x34>
			else if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b5cb0:	f000 fc06 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5cb4:	f000 fd94 	bl	b67e0 <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b5cb8:	b388      	cbz	r0, b5d1e <loop+0xb6>
   b5cba:	2301      	movs	r3, #1
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5cbc:	7023      	strb	r3, [r4, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5cbe:	4888      	ldr	r0, [pc, #544]	; (b5ee0 <loop+0x278>)
   b5cc0:	f002 fbec 	bl	b849c <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message 
   b5cc4:	f004 fbce 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
   b5cc8:	f004 fabe 	bl	ba248 <_ZN17PublishQueuePosix4loopEv>
	if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b5ccc:	f000 fbf8 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5cd0:	f000 fd86 	bl	b67e0 <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b5cd4:	b108      	cbz	r0, b5cda <loop+0x72>
   b5cd6:	2301      	movs	r3, #1
   b5cd8:	7023      	strb	r3, [r4, #0]
	sysStatus.loop();
   b5cda:	f000 fbf1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5cde:	f000 fc0d 	bl	b64fc <_ZN13sysStatusData4loopEv>
	current.loop();
   b5ce2:	f000 fc35 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5ce6:	f000 fc51 	bl	b658c <_ZN17currentStatusData4loopEv>
	nodeDatabase.loop();
   b5cea:	f000 fcb7 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b5cee:	f000 fcd5 	bl	b669c <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5cf2:	f7fe fa3d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5cf6:	f7fe fa4d 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5cfa:	4b7a      	ldr	r3, [pc, #488]	; (b5ee4 <loop+0x27c>)
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	2b00      	cmp	r3, #0
   b5d00:	f2c0 82fe 	blt.w	b6300 <loop+0x698>
		Log.info("Resetting due to low memory");
   b5d04:	4978      	ldr	r1, [pc, #480]	; (b5ee8 <loop+0x280>)
   b5d06:	4879      	ldr	r0, [pc, #484]	; (b5eec <loop+0x284>)
   b5d08:	f7fe fa19 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		softDelay(2000);
   b5d0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5d10:	f7ff fdbe 	bl	b5890 <_Z9softDelaym>
}
   b5d14:	b013      	add	sp, #76	; 0x4c
   b5d16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		System.reset();
   b5d1a:	f00a b8aa 	b.w	bfe72 <_ZN11SystemClass5resetEv>
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5d1e:	2303      	movs	r3, #3
   b5d20:	e7cc      	b.n	b5cbc <loop+0x54>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5d22:	4b6d      	ldr	r3, [pc, #436]	; (b5ed8 <loop+0x270>)
   b5d24:	781b      	ldrb	r3, [r3, #0]
   b5d26:	2b03      	cmp	r3, #3
   b5d28:	d001      	beq.n	b5d2e <loop+0xc6>
   b5d2a:	f7ff fc25 	bl	b5578 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5d2e:	2100      	movs	r1, #0
   b5d30:	486b      	ldr	r0, [pc, #428]	; (b5ee0 <loop+0x278>)
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5d32:	f8df 81dc 	ldr.w	r8, [pc, #476]	; b5f10 <loop+0x2a8>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5d36:	4d6e      	ldr	r5, [pc, #440]	; (b5ef0 <loop+0x288>)
   b5d38:	f002 f804 	bl	b7d44 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event minus one second for fuelgauge delay
   b5d3c:	f7ff fc52 	bl	b55e4 <_Z21secondsUntilNextEventv>
   b5d40:	4681      	mov	r9, r0
			time_t time = Time.now() + wakeInSeconds;
   b5d42:	f00a fa8a 	bl	c025a <_ZN9TimeClass3nowEv>
   b5d46:	eb00 0209 	add.w	r2, r0, r9
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5d4a:	17d3      	asrs	r3, r2, #31
   b5d4c:	4969      	ldr	r1, [pc, #420]	; (b5ef4 <loop+0x28c>)
   b5d4e:	f8cd 8000 	str.w	r8, [sp]
   b5d52:	a80a      	add	r0, sp, #40	; 0x28
   b5d54:	f00a fa22 	bl	c019c <_ZN9TimeClass6formatExPKc>
   b5d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5d5a:	9304      	str	r3, [sp, #16]
   b5d5c:	f00a f8ec 	bl	bff38 <_ZN11SystemClass10freeMemoryEv>
   b5d60:	9b04      	ldr	r3, [sp, #16]
   b5d62:	4965      	ldr	r1, [pc, #404]	; (b5ef8 <loop+0x290>)
   b5d64:	9000      	str	r0, [sp, #0]
   b5d66:	464a      	mov	r2, r9
   b5d68:	4860      	ldr	r0, [pc, #384]	; (b5eec <loop+0x284>)
   b5d6a:	f7fe f9e8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5d6e:	a80a      	add	r0, sp, #40	; 0x28
   b5d70:	f009 feb2 	bl	bfad8 <_ZN6StringD1Ev>
   b5d74:	7d2b      	ldrb	r3, [r5, #20]
   b5d76:	b10b      	cbz	r3, b5d7c <loop+0x114>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5d78:	2202      	movs	r2, #2
   b5d7a:	722a      	strb	r2, [r5, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5d7c:	4a5f      	ldr	r2, [pc, #380]	; (b5efc <loop+0x294>)
   b5d7e:	8817      	ldrh	r7, [r2, #0]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   b5d80:	2b00      	cmp	r3, #0
   b5d82:	d04a      	beq.n	b5e1a <loop+0x1b2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d84:	682b      	ldr	r3, [r5, #0]
   b5d86:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5d88:	b1f3      	cbz	r3, b5dc8 <loop+0x160>
            if (start->type == type) {
   b5d8a:	889a      	ldrh	r2, [r3, #4]
   b5d8c:	2a01      	cmp	r2, #1
   b5d8e:	d006      	beq.n	b5d9e <loop+0x136>
            start = start->next;
   b5d90:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d92:	e7f9      	b.n	b5d88 <loop+0x120>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5d94:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5d96:	b1bb      	cbz	r3, b5dc8 <loop+0x160>
            if (start->type == type) {
   b5d98:	889a      	ldrh	r2, [r3, #4]
   b5d9a:	2a01      	cmp	r2, #1
   b5d9c:	d1fa      	bne.n	b5d94 <loop+0x12c>
                if (gpioWakeup->pin == pin) {
   b5d9e:	899a      	ldrh	r2, [r3, #12]
   b5da0:	42ba      	cmp	r2, r7
   b5da2:	d1f7      	bne.n	b5d94 <loop+0x12c>
                    gpioWakeup->mode = mode;
   b5da4:	2200      	movs	r2, #0
   b5da6:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5da8:	7d2b      	ldrb	r3, [r5, #20]
   b5daa:	2b00      	cmp	r3, #0
   b5dac:	d035      	beq.n	b5e1a <loop+0x1b2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5dae:	682b      	ldr	r3, [r5, #0]
				.duration(wakeInSeconds * 1000L);
   b5db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5db4:	68db      	ldr	r3, [r3, #12]
   b5db6:	fb00 f909 	mul.w	r9, r0, r9
        if (!start) {
   b5dba:	b1d3      	cbz	r3, b5df2 <loop+0x18a>
            if (start->type == type) {
   b5dbc:	889a      	ldrh	r2, [r3, #4]
   b5dbe:	2a04      	cmp	r2, #4
   b5dc0:	f000 8299 	beq.w	b62f6 <loop+0x68e>
            start = start->next;
   b5dc4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5dc6:	e7f8      	b.n	b5dba <loop+0x152>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5dc8:	494d      	ldr	r1, [pc, #308]	; (b5f00 <loop+0x298>)
   b5dca:	2010      	movs	r0, #16
   b5dcc:	f00a fd56 	bl	c087c <_ZnwjRKSt9nothrow_t>
   b5dd0:	4606      	mov	r6, r0
   b5dd2:	2800      	cmp	r0, #0
   b5dd4:	f000 8292 	beq.w	b62fc <loop+0x694>
   b5dd8:	2210      	movs	r2, #16
   b5dda:	2100      	movs	r1, #0
   b5ddc:	f00b fb00 	bl	c13e0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5de0:	4b48      	ldr	r3, [pc, #288]	; (b5f04 <loop+0x29c>)
   b5de2:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5de4:	2301      	movs	r3, #1
   b5de6:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5de8:	692b      	ldr	r3, [r5, #16]
   b5dea:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5dec:	81b7      	strh	r7, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5dee:	612e      	str	r6, [r5, #16]
   b5df0:	e7da      	b.n	b5da8 <loop+0x140>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5df2:	4943      	ldr	r1, [pc, #268]	; (b5f00 <loop+0x298>)
   b5df4:	2010      	movs	r0, #16
   b5df6:	f00a fd41 	bl	c087c <_ZnwjRKSt9nothrow_t>
   b5dfa:	4606      	mov	r6, r0
   b5dfc:	2800      	cmp	r0, #0
   b5dfe:	f000 827d 	beq.w	b62fc <loop+0x694>
   b5e02:	2210      	movs	r2, #16
   b5e04:	2100      	movs	r1, #0
   b5e06:	f00b faeb 	bl	c13e0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5e0a:	4b3e      	ldr	r3, [pc, #248]	; (b5f04 <loop+0x29c>)
   b5e0c:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5e0e:	2304      	movs	r3, #4
   b5e10:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5e12:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5e14:	612e      	str	r6, [r5, #16]
            wakeupSource->ms = ms;
   b5e16:	e9c6 3902 	strd	r3, r9, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5e1a:	4935      	ldr	r1, [pc, #212]	; (b5ef0 <loop+0x288>)
   b5e1c:	a807      	add	r0, sp, #28
   b5e1e:	f00a f82b 	bl	bfe78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5e22:	482f      	ldr	r0, [pc, #188]	; (b5ee0 <loop+0x278>)
   b5e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5e28:	f001 ff8c 	bl	b7d44 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5e2c:	9b07      	ldr	r3, [sp, #28]
        if (wakeupSource_) {
   b5e2e:	b1eb      	cbz	r3, b5e6c <loop+0x204>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5e30:	889a      	ldrh	r2, [r3, #4]
   b5e32:	2a01      	cmp	r2, #1
   b5e34:	d11a      	bne.n	b5e6c <loop+0x204>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b5e36:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {
   b5e38:	429f      	cmp	r7, r3
   b5e3a:	d132      	bne.n	b5ea2 <loop+0x23a>
        return hal_timer_millis(nullptr);
   b5e3c:	2000      	movs	r0, #0
   b5e3e:	f006 ff65 	bl	bcd0c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5e42:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5e46:	4605      	mov	r5, r0
   b5e48:	2000      	movs	r0, #0
   b5e4a:	f006 ff5f 	bl	bcd0c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5e4e:	1b40      	subs	r0, r0, r5
   b5e50:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5e54:	42b0      	cmp	r0, r6
   b5e56:	f171 0300 	sbcs.w	r3, r1, #0
   b5e5a:	d20a      	bcs.n	b5e72 <loop+0x20a>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5e5c:	f00a fae4 	bl	c0428 <_Z16_fetch_usbserialv>
   b5e60:	f00a fad7 	bl	c0412 <_ZN9USBSerial11isConnectedEv>
   b5e64:	b928      	cbnz	r0, b5e72 <loop+0x20a>
            spark_process();
   b5e66:	f007 fa2d 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   b5e6a:	e7ed      	b.n	b5e48 <loop+0x1e0>
            return std::numeric_limits<pin_t>::max();
   b5e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5e70:	e7e2      	b.n	b5e38 <loop+0x1d0>
   b5e72:	f00a fad9 	bl	c0428 <_Z16_fetch_usbserialv>
   b5e76:	f00a facc 	bl	c0412 <_ZN9USBSerial11isConnectedEv>
				softDelay(1000);
   b5e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5e7e:	f7ff fd07 	bl	b5890 <_Z9softDelaym>
				Log.info("Woke with user button");
   b5e82:	4921      	ldr	r1, [pc, #132]	; (b5f08 <loop+0x2a0>)
   b5e84:	4819      	ldr	r0, [pc, #100]	; (b5eec <loop+0x284>)
   b5e86:	f7fe f95a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			state = IDLE_STATE;
   b5e8a:	2302      	movs	r3, #2
   b5e8c:	7023      	strb	r3, [r4, #0]
        if (wakeupSource_) {
   b5e8e:	9807      	ldr	r0, [sp, #28]
			nextEventTime = true;
   b5e90:	4b12      	ldr	r3, [pc, #72]	; (b5edc <loop+0x274>)
   b5e92:	2201      	movs	r2, #1
   b5e94:	701a      	strb	r2, [r3, #0]
   b5e96:	2800      	cmp	r0, #0
   b5e98:	f43f af11 	beq.w	b5cbe <loop+0x56>
            free(wakeupSource_);
   b5e9c:	f007 faca 	bl	bd434 <free>
		} break;
   b5ea0:	e70d      	b.n	b5cbe <loop+0x56>
				Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5ea2:	f00a f9da 	bl	c025a <_ZN9TimeClass3nowEv>
   b5ea6:	4913      	ldr	r1, [pc, #76]	; (b5ef4 <loop+0x28c>)
   b5ea8:	f8cd 8000 	str.w	r8, [sp]
   b5eac:	17c3      	asrs	r3, r0, #31
   b5eae:	4602      	mov	r2, r0
   b5eb0:	a80a      	add	r0, sp, #40	; 0x28
   b5eb2:	f00a f973 	bl	c019c <_ZN9TimeClass6formatExPKc>
   b5eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5eb8:	9204      	str	r2, [sp, #16]
   b5eba:	f00a f83d 	bl	bff38 <_ZN11SystemClass10freeMemoryEv>
   b5ebe:	9a04      	ldr	r2, [sp, #16]
   b5ec0:	4912      	ldr	r1, [pc, #72]	; (b5f0c <loop+0x2a4>)
   b5ec2:	4603      	mov	r3, r0
   b5ec4:	4809      	ldr	r0, [pc, #36]	; (b5eec <loop+0x284>)
   b5ec6:	f7fe f93a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5eca:	a80a      	add	r0, sp, #40	; 0x28
   b5ecc:	f009 fe04 	bl	bfad8 <_ZN6StringD1Ev>
   b5ed0:	e7db      	b.n	b5e8a <loop+0x222>
   b5ed2:	bf00      	nop
   b5ed4:	2003e462 	.word	0x2003e462
   b5ed8:	2003e461 	.word	0x2003e461
   b5edc:	2003e460 	.word	0x2003e460
   b5ee0:	2003e334 	.word	0x2003e334
   b5ee4:	2003d5ec 	.word	0x2003d5ec
   b5ee8:	000c42c6 	.word	0x000c42c6
   b5eec:	2003e650 	.word	0x2003e650
   b5ef0:	2003e354 	.word	0x2003e354
   b5ef4:	2003e6a8 	.word	0x2003e6a8
   b5ef8:	000c4198 	.word	0x000c4198
   b5efc:	000c49fa 	.word	0x000c49fa
   b5f00:	000c57d8 	.word	0x000c57d8
   b5f04:	00030010 	.word	0x00030010
   b5f08:	000c41d8 	.word	0x000c41d8
   b5f0c:	000c41ee 	.word	0x000c41ee
   b5f10:	000c4195 	.word	0x000c4195
			if (state != oldState) {
   b5f14:	4bbf      	ldr	r3, [pc, #764]	; (b6214 <loop+0x5ac>)
   b5f16:	f8df 8334 	ldr.w	r8, [pc, #820]	; b624c <loop+0x5e4>
   b5f1a:	781b      	ldrb	r3, [r3, #0]
   b5f1c:	4dbe      	ldr	r5, [pc, #760]	; (b6218 <loop+0x5b0>)
   b5f1e:	2b04      	cmp	r3, #4
   b5f20:	d072      	beq.n	b6008 <loop+0x3a0>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5f22:	2b07      	cmp	r3, #7
   b5f24:	d003      	beq.n	b5f2e <loop+0x2c6>
   b5f26:	f006 fee1 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   b5f2a:	f8c8 0000 	str.w	r0, [r8]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5f2e:	f7ff fb23 	bl	b5578 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5f32:	f7fe f91d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f36:	f7fe f92f 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5f3a:	f00a f98e 	bl	c025a <_ZN9TimeClass3nowEv>
   b5f3e:	4eb7      	ldr	r6, [pc, #732]	; (b621c <loop+0x5b4>)
   b5f40:	17c3      	asrs	r3, r0, #31
   b5f42:	e9c6 0318 	strd	r0, r3, [r6, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5f46:	4630      	mov	r0, r6
   b5f48:	f003 ff9c 	bl	b9e84 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5f4c:	f106 0168 	add.w	r1, r6, #104	; 0x68
   b5f50:	a807      	add	r0, sp, #28
   b5f52:	f003 fe29 	bl	b9ba8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5f56:	f99d 7020 	ldrsb.w	r7, [sp, #32]
   b5f5a:	f000 fab1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5f5e:	f000 fc44 	bl	b67ea <_ZNK13sysStatusData12get_openTimeEv>
   b5f62:	4287      	cmp	r7, r0
   b5f64:	f2c0 8093 	blt.w	b608e <loop+0x426>
   b5f68:	f106 0168 	add.w	r1, r6, #104	; 0x68
   b5f6c:	a80a      	add	r0, sp, #40	; 0x28
   b5f6e:	f003 fe1b 	bl	b9ba8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f72:	f99d 702c 	ldrsb.w	r7, [sp, #44]	; 0x2c
   b5f76:	f000 faa3 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5f7a:	f000 fc3b 	bl	b67f4 <_ZNK13sysStatusData13get_closeTimeEv>
   b5f7e:	4287      	cmp	r7, r0
   b5f80:	a80a      	add	r0, sp, #40	; 0x28
   b5f82:	bfcc      	ite	gt
   b5f84:	2700      	movgt	r7, #0
   b5f86:	2701      	movle	r7, #1
   b5f88:	f003 fb82 	bl	b9690 <_ZN12LocalTimeHMSD1Ev>
   b5f8c:	a807      	add	r0, sp, #28
   b5f8e:	f003 fb7f 	bl	b9690 <_ZN12LocalTimeHMSD1Ev>
   b5f92:	2f00      	cmp	r7, #0
   b5f94:	d07d      	beq.n	b6092 <loop+0x42a>
   b5f96:	f000 fadb 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5f9a:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5f9c:	f000 ff1a 	bl	b6dd4 <_ZN17currentStatusData13set_openHoursEb>
				if (sysStatus.get_connectivityMode() == 0) connectionWindow = DEFAULT_LORA_WINDOW;
   b5fa0:	f000 fa8e 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5fa4:	f000 fc0d 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b5fa8:	2800      	cmp	r0, #0
   b5faa:	d176      	bne.n	b609a <loop+0x432>
   b5fac:	2303      	movs	r3, #3
				else connectionWindow = STAY_CONNECTED;
   b5fae:	702b      	strb	r3, [r5, #0]
				Log.info("Gateway is listening for %u (%u) minutes for LoRA messages and the park is %s (%d / %d / %d)", connectionWindow, sysStatus.get_connectivityMode(), (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5fb0:	782a      	ldrb	r2, [r5, #0]
   b5fb2:	9205      	str	r2, [sp, #20]
   b5fb4:	f000 fa84 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5fb8:	f000 fc03 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b5fbc:	9004      	str	r0, [sp, #16]
   b5fbe:	f000 fac7 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b5fc2:	f000 fe89 	bl	b6cd8 <_ZNK17currentStatusData13get_openHoursEv>
   b5fc6:	4e96      	ldr	r6, [pc, #600]	; (b6220 <loop+0x5b8>)
   b5fc8:	4996      	ldr	r1, [pc, #600]	; (b6224 <loop+0x5bc>)
   b5fca:	2800      	cmp	r0, #0
   b5fcc:	bf08      	it	eq
   b5fce:	460e      	moveq	r6, r1
   b5fd0:	4995      	ldr	r1, [pc, #596]	; (b6228 <loop+0x5c0>)
   b5fd2:	a80a      	add	r0, sp, #40	; 0x28
   b5fd4:	f003 fde8 	bl	b9ba8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5fd8:	f99d 902c 	ldrsb.w	r9, [sp, #44]	; 0x2c
   b5fdc:	f000 fa70 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5fe0:	f000 fc03 	bl	b67ea <_ZNK13sysStatusData12get_openTimeEv>
   b5fe4:	4607      	mov	r7, r0
   b5fe6:	f000 fa6b 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b5fea:	f000 fc03 	bl	b67f4 <_ZNK13sysStatusData13get_closeTimeEv>
   b5fee:	e9cd 6900 	strd	r6, r9, [sp]
   b5ff2:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b5ff6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5ffa:	488c      	ldr	r0, [pc, #560]	; (b622c <loop+0x5c4>)
   b5ffc:	498c      	ldr	r1, [pc, #560]	; (b6230 <loop+0x5c8>)
   b5ffe:	f7fe f89e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6002:	a80a      	add	r0, sp, #40	; 0x28
   b6004:	f003 fb44 	bl	b9690 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b6008:	f7fe f8b2 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b600c:	f7ff f93c 	bl	b5288 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b6010:	b160      	cbz	r0, b602c <loop+0x3c4>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {	// We don't report Join alerts or after hours
   b6012:	f000 fa9d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6016:	f000 fc1a 	bl	b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b601a:	2801      	cmp	r0, #1
   b601c:	d006      	beq.n	b602c <loop+0x3c4>
   b601e:	f000 fa97 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6022:	f000 fe59 	bl	b6cd8 <_ZNK17currentStatusData13get_openHoursEv>
   b6026:	b108      	cbz	r0, b602c <loop+0x3c4>
					state = REPORTING_STATE; 									// Received and acknowledged data from a node - need to report the alert
   b6028:	2307      	movs	r3, #7
   b602a:	7023      	strb	r3, [r4, #0]
   b602c:	f006 fe5e 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > (connectionWindow *60000UL)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b6030:	f8d8 3000 	ldr.w	r3, [r8]
   b6034:	1ac0      	subs	r0, r0, r3
   b6036:	782b      	ldrb	r3, [r5, #0]
   b6038:	f64e 2260 	movw	r2, #60000	; 0xea60
   b603c:	4353      	muls	r3, r2
   b603e:	4298      	cmp	r0, r3
   b6040:	f67f ae3d 	bls.w	b5cbe <loop+0x56>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b6044:	f7fe f894 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6048:	f7fe fab6 	bl	b45b8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b604c:	f7fe f890 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6050:	f7fe f8b2 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b6054:	f7fe f88c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6058:	2100      	movs	r1, #0
   b605a:	f7fe fc19 	bl	b4890 <_ZN14LoRA_Functions13printNodeDataEb>
				nodeDatabase.flush(true);
   b605e:	f000 fafd 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b6062:	6803      	ldr	r3, [r0, #0]
   b6064:	2101      	movs	r1, #1
   b6066:	68db      	ldr	r3, [r3, #12]
   b6068:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b606a:	f00a f907 	bl	c027c <_ZN9TimeClass4hourEv>
   b606e:	4605      	mov	r5, r0
   b6070:	f000 fa26 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6074:	f000 fd80 	bl	b6b78 <_ZNK13sysStatusData18get_lastConnectionEv>
   b6078:	f009 ffc6 	bl	c0008 <_ZN9TimeClass4hourEx>
   b607c:	4285      	cmp	r5, r0
   b607e:	d004      	beq.n	b608a <loop+0x422>
   b6080:	f000 fa66 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6084:	f000 fe28 	bl	b6cd8 <_ZNK17currentStatusData13get_openHoursEv>
   b6088:	b980      	cbnz	r0, b60ac <loop+0x444>
				else state = IDLE_STATE;
   b608a:	2302      	movs	r3, #2
   b608c:	e616      	b.n	b5cbc <loop+0x54>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b608e:	2700      	movs	r7, #0
   b6090:	e77c      	b.n	b5f8c <loop+0x324>
				else current.set_openHours(false);
   b6092:	f000 fa5d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6096:	4639      	mov	r1, r7
   b6098:	e780      	b.n	b5f9c <loop+0x334>
				else if (sysStatus.get_connectivityMode() == 1) connectionWindow = LONG_LORA_WINDOW;
   b609a:	f000 fa11 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b609e:	f000 fb90 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b60a2:	2801      	cmp	r0, #1
   b60a4:	bf0c      	ite	eq
   b60a6:	230a      	moveq	r3, #10
				else connectionWindow = STAY_CONNECTED;
   b60a8:	233c      	movne	r3, #60	; 0x3c
   b60aa:	e780      	b.n	b5fae <loop+0x346>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b60ac:	2305      	movs	r3, #5
   b60ae:	e605      	b.n	b5cbc <loop+0x54>
			if (state != oldState) publishStateTransition();
   b60b0:	4b58      	ldr	r3, [pc, #352]	; (b6214 <loop+0x5ac>)
   b60b2:	781b      	ldrb	r3, [r3, #0]
   b60b4:	2b07      	cmp	r3, #7
   b60b6:	d001      	beq.n	b60bc <loop+0x454>
   b60b8:	f7ff fa5e 	bl	b5578 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b60bc:	f000 fa48 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b60c0:	f000 fba2 	bl	b6808 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b60c4:	f7ff faa8 	bl	b5618 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b60c8:	f000 fa42 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b60cc:	2100      	movs	r1, #0
   b60ce:	f000 fc3a 	bl	b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b60d2:	f000 f9f5 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b60d6:	4605      	mov	r5, r0
   b60d8:	f000 f9f2 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b60dc:	f000 fb7b 	bl	b67d6 <_ZNK13sysStatusData16get_messageCountEv>
   b60e0:	3001      	adds	r0, #1
   b60e2:	b2c1      	uxtb	r1, r0
   b60e4:	4628      	mov	r0, r5
   b60e6:	f000 fbec 	bl	b68c2 <_ZN13sysStatusData16set_messageCountEh>
			state = LoRA_STATE;
   b60ea:	e5d9      	b.n	b5ca0 <loop+0x38>
			if (state != oldState) {
   b60ec:	4b49      	ldr	r3, [pc, #292]	; (b6214 <loop+0x5ac>)
   b60ee:	4d51      	ldr	r5, [pc, #324]	; (b6234 <loop+0x5cc>)
   b60f0:	781b      	ldrb	r3, [r3, #0]
   b60f2:	2b05      	cmp	r3, #5
   b60f4:	d027      	beq.n	b6146 <loop+0x4de>
				publishStateTransition();  
   b60f6:	f7ff fa3f 	bl	b5578 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b60fa:	f000 f9e1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b60fe:	f000 fd3b 	bl	b6b78 <_ZNK13sysStatusData18get_lastConnectionEv>
   b6102:	f009 ff89 	bl	c0018 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b6106:	4948      	ldr	r1, [pc, #288]	; (b6228 <loop+0x5c0>)
   b6108:	4606      	mov	r6, r0
   b610a:	a80a      	add	r0, sp, #40	; 0x28
   b610c:	f003 fd69 	bl	b9be2 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b6110:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b6114:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b6118:	d007      	beq.n	b612a <loop+0x4c2>
					current.resetEverything();
   b611a:	f000 fa19 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b611e:	f000 fd67 	bl	b6bf0 <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b6122:	4945      	ldr	r1, [pc, #276]	; (b6238 <loop+0x5d0>)
   b6124:	4841      	ldr	r0, [pc, #260]	; (b622c <loop+0x5c4>)
   b6126:	f7fe f80a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b612a:	f000 f9c9 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b612e:	f000 fb43 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6132:	f7ff fa71 	bl	b5618 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6136:	f007 f8d5 	bl	bd2e4 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b613a:	b908      	cbnz	r0, b6140 <loop+0x4d8>
        spark_cloud_flag_connect();
   b613c:	f007 f8ca 	bl	bd2d4 <spark_cloud_flag_connect>
   b6140:	f006 fdd4 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b6144:	6028      	str	r0, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6146:	f007 f8cd 	bl	bd2e4 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b614a:	b338      	cbz	r0, b619c <loop+0x534>
				sysStatus.set_lastConnection(Time.now());
   b614c:	f000 f9b8 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6150:	4606      	mov	r6, r0
   b6152:	f00a f882 	bl	c025a <_ZN9TimeClass3nowEv>
   b6156:	4602      	mov	r2, r0
   b6158:	17c3      	asrs	r3, r0, #31
   b615a:	4630      	mov	r0, r6
   b615c:	f000 fd34 	bl	b6bc8 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b6160:	f000 f9ae 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6164:	4606      	mov	r6, r0
   b6166:	f006 fdc1 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   b616a:	6829      	ldr	r1, [r5, #0]
   b616c:	1a41      	subs	r1, r0, r1
   b616e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6172:	fbb1 f1f0 	udiv	r1, r1, r0
   b6176:	4630      	mov	r0, r6
   b6178:	b289      	uxth	r1, r1
   b617a:	f000 fcc2 	bl	b6b02 <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b617e:	f007 f8b1 	bl	bd2e4 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b6182:	b1c8      	cbz	r0, b61b8 <loop+0x550>
   b6184:	f007 f8ae 	bl	bd2e4 <spark_cloud_flag_connected>
        if (!connected()) {
   b6188:	b110      	cbz	r0, b6190 <loop+0x528>
        return spark_sync_time(NULL);
   b618a:	2000      	movs	r0, #0
   b618c:	f007 f8c2 	bl	bd314 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);									// Make sure sync is complete
   b6190:	f7ff f9d0 	bl	b5534 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b6194:	b950      	cbnz	r0, b61ac <loop+0x544>
            spark_process();
   b6196:	f007 f895 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   b619a:	e7f9      	b.n	b6190 <loop+0x528>
   b619c:	f006 fda6 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b61a0:	682b      	ldr	r3, [r5, #0]
   b61a2:	1ac0      	subs	r0, r0, r3
   b61a4:	4b25      	ldr	r3, [pc, #148]	; (b623c <loop+0x5d4>)
   b61a6:	4298      	cmp	r0, r3
   b61a8:	d8d0      	bhi.n	b614c <loop+0x4e4>
   b61aa:	e588      	b.n	b5cbe <loop+0x56>
					waitUntil(Particle.syncTimeDone);									// Make sure sync is complete
   b61ac:	f7ff f9c2 	bl	b5534 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b61b0:	4923      	ldr	r1, [pc, #140]	; (b6240 <loop+0x5d8>)
   b61b2:	a80a      	add	r0, sp, #40	; 0x28
   b61b4:	f007 fa30 	bl	bd618 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_connectivityMode() >= 2) state = LoRA_STATE;			// Go back to the LoRA State if we are in connected mode
   b61b8:	f000 f982 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b61bc:	f000 fb01 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b61c0:	2801      	cmp	r0, #1
   b61c2:	f63f ad6d 	bhi.w	b5ca0 <loop+0x38>
				else state = DISCONNECTING_STATE;	 									// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b61c6:	2306      	movs	r3, #6
   b61c8:	e578      	b.n	b5cbc <loop+0x54>
			if (state != oldState) {
   b61ca:	4b12      	ldr	r3, [pc, #72]	; (b6214 <loop+0x5ac>)
   b61cc:	4d1d      	ldr	r5, [pc, #116]	; (b6244 <loop+0x5dc>)
   b61ce:	781b      	ldrb	r3, [r3, #0]
   b61d0:	2b06      	cmp	r3, #6
   b61d2:	d004      	beq.n	b61de <loop+0x576>
				publishStateTransition(); 
   b61d4:	f7ff f9d0 	bl	b5578 <_Z22publishStateTransitionv>
   b61d8:	f006 fd88 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b61dc:	6028      	str	r0, [r5, #0]
   b61de:	f006 fd85 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b61e2:	682b      	ldr	r3, [r5, #0]
   b61e4:	1ac0      	subs	r0, r0, r3
   b61e6:	4b18      	ldr	r3, [pc, #96]	; (b6248 <loop+0x5e0>)
   b61e8:	4298      	cmp	r0, r3
   b61ea:	f67f ad68 	bls.w	b5cbe <loop+0x56>
   b61ee:	f004 f939 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
   b61f2:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b61f6:	2b00      	cmp	r3, #0
   b61f8:	f43f ad61 	beq.w	b5cbe <loop+0x56>
				if (sysStatus.get_connectivityMode() <= 1) Particle_Functions::instance().disconnectFromParticle();
   b61fc:	f000 f960 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6200:	f000 fadf 	bl	b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>
   b6204:	2801      	cmp	r0, #1
   b6206:	f63f af40 	bhi.w	b608a <loop+0x422>
   b620a:	f000 fecb 	bl	b6fa4 <_ZN18Particle_Functions8instanceEv>
   b620e:	f001 fa45 	bl	b769c <_ZN18Particle_Functions22disconnectFromParticleEv>
   b6212:	e73a      	b.n	b608a <loop+0x422>
   b6214:	2003e461 	.word	0x2003e461
   b6218:	2003e328 	.word	0x2003e328
   b621c:	2003e370 	.word	0x2003e370
   b6220:	000c4189 	.word	0x000c4189
   b6224:	000c418e 	.word	0x000c418e
   b6228:	2003e3d8 	.word	0x2003e3d8
   b622c:	2003e650 	.word	0x2003e650
   b6230:	000c420f 	.word	0x000c420f
   b6234:	2003e32c 	.word	0x2003e32c
   b6238:	000c426c 	.word	0x000c426c
   b623c:	000927c0 	.word	0x000927c0
   b6240:	2003e60c 	.word	0x2003e60c
   b6244:	2003e330 	.word	0x2003e330
   b6248:	00015f90 	.word	0x00015f90
   b624c:	2003e324 	.word	0x2003e324
			static system_tick_t resetTimeout = millis();
   b6250:	4d2d      	ldr	r5, [pc, #180]	; (b6308 <loop+0x6a0>)
   b6252:	4e2e      	ldr	r6, [pc, #184]	; (b630c <loop+0x6a4>)
   b6254:	782b      	ldrb	r3, [r5, #0]
   b6256:	f3bf 8f5b 	dmb	ish
   b625a:	f013 0f01 	tst.w	r3, #1
   b625e:	d109      	bne.n	b6274 <loop+0x60c>
   b6260:	4628      	mov	r0, r5
   b6262:	f7fd ff2b 	bl	b40bc <__cxa_guard_acquire>
   b6266:	b128      	cbz	r0, b6274 <loop+0x60c>
   b6268:	f006 fd40 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   b626c:	6030      	str	r0, [r6, #0]
   b626e:	4628      	mov	r0, r5
   b6270:	f7fd ff29 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) {
   b6274:	4b26      	ldr	r3, [pc, #152]	; (b6310 <loop+0x6a8>)
   b6276:	7822      	ldrb	r2, [r4, #0]
   b6278:	781b      	ldrb	r3, [r3, #0]
   b627a:	429a      	cmp	r2, r3
   b627c:	d025      	beq.n	b62ca <loop+0x662>
				publishStateTransition();
   b627e:	f7ff f97b 	bl	b5578 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6282:	f007 f82f 	bl	bd2e4 <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert","Deep power down in 30 seconds", PRIVATE);
   b6286:	b1d8      	cbz	r0, b62c0 <loop+0x658>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6288:	4b22      	ldr	r3, [pc, #136]	; (b6314 <loop+0x6ac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b628a:	4a23      	ldr	r2, [pc, #140]	; (b6318 <loop+0x6b0>)
   b628c:	781b      	ldrb	r3, [r3, #0]
   b628e:	f88d 3000 	strb.w	r3, [sp]
   b6292:	4922      	ldr	r1, [pc, #136]	; (b631c <loop+0x6b4>)
   b6294:	233c      	movs	r3, #60	; 0x3c
   b6296:	a80a      	add	r0, sp, #40	; 0x28
   b6298:	f007 fc10 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b629c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   b629e:	b17d      	cbz	r5, b62c0 <loop+0x658>
      if (--_M_use_count == 0)
   b62a0:	686b      	ldr	r3, [r5, #4]
   b62a2:	3b01      	subs	r3, #1
   b62a4:	606b      	str	r3, [r5, #4]
   b62a6:	b95b      	cbnz	r3, b62c0 <loop+0x658>
          _M_dispose();
   b62a8:	682b      	ldr	r3, [r5, #0]
   b62aa:	4628      	mov	r0, r5
   b62ac:	689b      	ldr	r3, [r3, #8]
   b62ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b62b0:	68ab      	ldr	r3, [r5, #8]
   b62b2:	3b01      	subs	r3, #1
   b62b4:	60ab      	str	r3, [r5, #8]
   b62b6:	b91b      	cbnz	r3, b62c0 <loop+0x658>
            _M_destroy();
   b62b8:	682b      	ldr	r3, [r5, #0]
   b62ba:	4628      	mov	r0, r5
   b62bc:	68db      	ldr	r3, [r3, #12]
   b62be:	4798      	blx	r3
				sysStatus.set_alertCodeGateway(0);			// Reset this
   b62c0:	f000 f8fe 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b62c4:	2100      	movs	r1, #0
   b62c6:	f000 fb02 	bl	b68ce <_ZN13sysStatusData20set_alertCodeGatewayEh>
   b62ca:	f006 fd0f 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b62ce:	6833      	ldr	r3, [r6, #0]
   b62d0:	1ac0      	subs	r0, r0, r3
   b62d2:	f247 5330 	movw	r3, #30000	; 0x7530
   b62d6:	4298      	cmp	r0, r3
   b62d8:	f67f acf1 	bls.w	b5cbe <loop+0x56>
				Log.info("Deep power down device");
   b62dc:	4910      	ldr	r1, [pc, #64]	; (b6320 <loop+0x6b8>)
   b62de:	4811      	ldr	r0, [pc, #68]	; (b6324 <loop+0x6bc>)
   b62e0:	f7fd ff2d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				softDelay(2000);
   b62e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b62e8:	f7ff fad2 	bl	b5890 <_Z9softDelaym>
				ab1805.deepPowerDown(); 
   b62ec:	211e      	movs	r1, #30
   b62ee:	480e      	ldr	r0, [pc, #56]	; (b6328 <loop+0x6c0>)
   b62f0:	f001 fe82 	bl	b7ff8 <_ZN6AB180513deepPowerDownEi>
   b62f4:	e4e3      	b.n	b5cbe <loop+0x56>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b62f6:	f8c3 900c 	str.w	r9, [r3, #12]
                return *this;
   b62fa:	e58e      	b.n	b5e1a <loop+0x1b2>
                valid_ = false;
   b62fc:	752e      	strb	r6, [r5, #20]
                return *this;
   b62fe:	e58c      	b.n	b5e1a <loop+0x1b2>
}
   b6300:	b013      	add	sp, #76	; 0x4c
   b6302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6306:	bf00      	nop
   b6308:	2003e318 	.word	0x2003e318
   b630c:	2003e320 	.word	0x2003e320
   b6310:	2003e461 	.word	0x2003e461
   b6314:	2003e31c 	.word	0x2003e31c
   b6318:	000c428b 	.word	0x000c428b
   b631c:	000c42a9 	.word	0x000c42a9
   b6320:	000c42af 	.word	0x000c42af
   b6324:	2003e650 	.word	0x2003e650
   b6328:	2003e334 	.word	0x2003e334

000b632c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b632c:	b510      	push	{r4, lr}
   b632e:	4b03      	ldr	r3, [pc, #12]	; (b633c <_ZN8MB85RC64D1Ev+0x10>)
   b6330:	6003      	str	r3, [r0, #0]
   b6332:	4604      	mov	r4, r0
   b6334:	f003 fe54 	bl	b9fe0 <_ZN6MB85RCD1Ev>
   b6338:	4620      	mov	r0, r4
   b633a:	bd10      	pop	{r4, pc}
   b633c:	000c4478 	.word	0x000c4478

000b6340 <_ZN8MB85RC64D0Ev>:
   b6340:	b510      	push	{r4, lr}
   b6342:	4604      	mov	r4, r0
   b6344:	f7ff fff2 	bl	b632c <_ZN8MB85RC64D1Ev>
   b6348:	4620      	mov	r0, r4
   b634a:	2110      	movs	r1, #16
   b634c:	f7fd fea7 	bl	b409e <_ZdlPvj>
   b6350:	4620      	mov	r0, r4
   b6352:	bd10      	pop	{r4, pc}

000b6354 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b6354:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6356:	f006 fbbd 	bl	bcad4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b635a:	4604      	mov	r4, r0
   b635c:	b920      	cbnz	r0, b6368 <_ZN10nodeIDData8validateEj+0x14>
   b635e:	4a03      	ldr	r2, [pc, #12]	; (b636c <_ZN10nodeIDData8validateEj+0x18>)
   b6360:	4903      	ldr	r1, [pc, #12]	; (b6370 <_ZN10nodeIDData8validateEj+0x1c>)
   b6362:	4804      	ldr	r0, [pc, #16]	; (b6374 <_ZN10nodeIDData8validateEj+0x20>)
   b6364:	f7fd feeb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b6368:	4620      	mov	r0, r4
   b636a:	bd10      	pop	{r4, pc}
   b636c:	000c42e2 	.word	0x000c42e2
   b6370:	000c42ec 	.word	0x000c42ec
   b6374:	2003e650 	.word	0x2003e650

000b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b6378:	b510      	push	{r4, lr}
            if (!handle_) {
   b637a:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b637c:	4604      	mov	r4, r0
            if (!handle_) {
   b637e:	b90b      	cbnz	r3, b6384 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b6380:	f006 fc64 	bl	bcc4c <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b6384:	6820      	ldr	r0, [r4, #0]
        }
   b6386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b638a:	f006 bc6f 	b.w	bcc6c <os_mutex_recursive_lock>

000b638e <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b638e:	b538      	push	{r3, r4, r5, lr}
   b6390:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6392:	3004      	adds	r0, #4
   b6394:	f7ff fff0 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b6398:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b639a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b639c:	6803      	ldr	r3, [r0, #0]
   b639e:	68dd      	ldr	r5, [r3, #12]
   b63a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b63a4:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b63a6:	6860      	ldr	r0, [r4, #4]
   b63a8:	f006 fc68 	bl	bcc7c <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b63ac:	4620      	mov	r0, r4
        } 
   b63ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b63b2:	f006 baab 	b.w	bc90c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b63b6 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b63b6:	b538      	push	{r3, r4, r5, lr}
   b63b8:	4604      	mov	r4, r0
   b63ba:	3004      	adds	r0, #4
   b63bc:	f7ff ffdc 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b63c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b63c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b63c4:	6803      	ldr	r3, [r0, #0]
   b63c6:	689d      	ldr	r5, [r3, #8]
   b63c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b63cc:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b63ce:	68a2      	ldr	r2, [r4, #8]
   b63d0:	6823      	ldr	r3, [r4, #0]
   b63d2:	88d1      	ldrh	r1, [r2, #6]
   b63d4:	695b      	ldr	r3, [r3, #20]
   b63d6:	4620      	mov	r0, r4
   b63d8:	4798      	blx	r3
   b63da:	b918      	cbnz	r0, b63e4 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b63dc:	6823      	ldr	r3, [r4, #0]
   b63de:	4620      	mov	r0, r4
   b63e0:	699b      	ldr	r3, [r3, #24]
   b63e2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b63e4:	6860      	ldr	r0, [r4, #4]
   b63e6:	f006 fc49 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b63ea:	2001      	movs	r0, #1
   b63ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63f0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b63f0:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b63f2:	4b04      	ldr	r3, [pc, #16]	; (b6404 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b63f4:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b63f6:	4604      	mov	r4, r0
            if (handle_) {
   b63f8:	6840      	ldr	r0, [r0, #4]
   b63fa:	b108      	cbz	r0, b6400 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b63fc:	f006 fc2e 	bl	bcc5c <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b6400:	4620      	mov	r0, r4
   b6402:	bd10      	pop	{r4, pc}
   b6404:	000c54cc 	.word	0x000c54cc

000b6408 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b6408:	b510      	push	{r4, lr}
   b640a:	4b03      	ldr	r3, [pc, #12]	; (b6418 <_ZN13sysStatusDataD1Ev+0x10>)
   b640c:	6003      	str	r3, [r0, #0]
   b640e:	4604      	mov	r4, r0
   b6410:	f7ff ffee 	bl	b63f0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6414:	4620      	mov	r0, r4
   b6416:	bd10      	pop	{r4, pc}
   b6418:	000c44c0 	.word	0x000c44c0

000b641c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b641c:	b510      	push	{r4, lr}
   b641e:	4604      	mov	r4, r0
}
   b6420:	f7ff fff2 	bl	b6408 <_ZN13sysStatusDataD1Ev>
   b6424:	4620      	mov	r0, r4
   b6426:	2170      	movs	r1, #112	; 0x70
   b6428:	f7fd fe39 	bl	b409e <_ZdlPvj>
   b642c:	4620      	mov	r0, r4
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b6430:	b510      	push	{r4, lr}
   b6432:	4b03      	ldr	r3, [pc, #12]	; (b6440 <_ZN17currentStatusDataD1Ev+0x10>)
   b6434:	6003      	str	r3, [r0, #0]
   b6436:	4604      	mov	r4, r0
   b6438:	f7ff ffda 	bl	b63f0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b643c:	4620      	mov	r0, r4
   b643e:	bd10      	pop	{r4, pc}
   b6440:	000c44ec 	.word	0x000c44ec

000b6444 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b6444:	b510      	push	{r4, lr}
   b6446:	4604      	mov	r4, r0
}
   b6448:	f7ff fff2 	bl	b6430 <_ZN17currentStatusDataD1Ev>
   b644c:	4620      	mov	r0, r4
   b644e:	2178      	movs	r1, #120	; 0x78
   b6450:	f7fd fe25 	bl	b409e <_ZdlPvj>
   b6454:	4620      	mov	r0, r4
   b6456:	bd10      	pop	{r4, pc}

000b6458 <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b6458:	b510      	push	{r4, lr}
   b645a:	4b03      	ldr	r3, [pc, #12]	; (b6468 <_ZN10nodeIDDataD1Ev+0x10>)
   b645c:	6003      	str	r3, [r0, #0]
   b645e:	4604      	mov	r4, r0
   b6460:	f7ff ffc6 	bl	b63f0 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6464:	4620      	mov	r0, r4
   b6466:	bd10      	pop	{r4, pc}
   b6468:	000c4494 	.word	0x000c4494

000b646c <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b646c:	b510      	push	{r4, lr}
   b646e:	4604      	mov	r4, r0
}
   b6470:	f7ff fff2 	bl	b6458 <_ZN10nodeIDDataD1Ev>
   b6474:	4620      	mov	r0, r4
   b6476:	f240 413c 	movw	r1, #1084	; 0x43c
   b647a:	f7fd fe10 	bl	b409e <_ZdlPvj>
   b647e:	4620      	mov	r0, r4
   b6480:	bd10      	pop	{r4, pc}
	...

000b6484 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b6484:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6488:	6081      	str	r1, [r0, #8]
   b648a:	490a      	ldr	r1, [pc, #40]	; (b64b4 <_ZN13sysStatusDataC1Ev+0x30>)
   b648c:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b6490:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b6494:	2101      	movs	r1, #1
   b6496:	8281      	strh	r1, [r0, #20]
   b6498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b649c:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b649e:	4906      	ldr	r1, [pc, #24]	; (b64b8 <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b64a0:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b64a2:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b64a6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b64a8:	6182      	str	r2, [r0, #24]
   b64aa:	f880 2020 	strb.w	r2, [r0, #32]
   b64ae:	4a03      	ldr	r2, [pc, #12]	; (b64bc <_ZN13sysStatusDataC1Ev+0x38>)
   b64b0:	6002      	str	r2, [r0, #0]
};
   b64b2:	4770      	bx	lr
   b64b4:	20a99e76 	.word	0x20a99e76
   b64b8:	2003e470 	.word	0x2003e470
   b64bc:	000c44c0 	.word	0x000c44c0

000b64c0 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b64c0:	b510      	push	{r4, lr}
    if (!_instance) {
   b64c2:	4c06      	ldr	r4, [pc, #24]	; (b64dc <_ZN13sysStatusData8instanceEv+0x1c>)
   b64c4:	6823      	ldr	r3, [r4, #0]
   b64c6:	b93b      	cbnz	r3, b64d8 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b64c8:	2070      	movs	r0, #112	; 0x70
   b64ca:	f7fd fde4 	bl	b4096 <_Znwj>
   b64ce:	4603      	mov	r3, r0
   b64d0:	b108      	cbz	r0, b64d6 <_ZN13sysStatusData8instanceEv+0x16>
   b64d2:	f7ff ffd7 	bl	b6484 <_ZN13sysStatusDataC1Ev>
   b64d6:	6023      	str	r3, [r4, #0]
}
   b64d8:	6820      	ldr	r0, [r4, #0]
   b64da:	bd10      	pop	{r4, pc}
   b64dc:	2003e468 	.word	0x2003e468

000b64e0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b64e0:	b510      	push	{r4, lr}
    fram.begin();
   b64e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b64e4:	f003 fd92 	bl	ba00c <_ZN6MB85RC5beginEv>
    sysStatus
   b64e8:	f7ff ffea 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b64ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b64f0:	6803      	ldr	r3, [r0, #0]
   b64f2:	61c2      	str	r2, [r0, #28]
}
   b64f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b64f8:	685b      	ldr	r3, [r3, #4]
   b64fa:	4718      	bx	r3

000b64fc <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b64fc:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b64fe:	f7ff ffdf 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6502:	6803      	ldr	r3, [r0, #0]
}
   b6504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b6508:	68db      	ldr	r3, [r3, #12]
   b650a:	2100      	movs	r1, #0
   b650c:	4718      	bx	r3
	...

000b6510 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b6510:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b6514:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6516:	6081      	str	r1, [r0, #8]
   b6518:	490a      	ldr	r1, [pc, #40]	; (b6544 <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b651a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b651c:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b6520:	6182      	str	r2, [r0, #24]
   b6522:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6526:	4a08      	ldr	r2, [pc, #32]	; (b6548 <_ZN17currentStatusDataC1Ev+0x38>)
   b6528:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b652a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b652e:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6530:	2101      	movs	r1, #1
   b6532:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6534:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6536:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b653a:	4a04      	ldr	r2, [pc, #16]	; (b654c <_ZN17currentStatusDataC1Ev+0x3c>)
   b653c:	61c1      	str	r1, [r0, #28]
   b653e:	6002      	str	r2, [r0, #0]
};
   b6540:	4770      	bx	lr
   b6542:	bf00      	nop
   b6544:	20a99e76 	.word	0x20a99e76
   b6548:	2003e470 	.word	0x2003e470
   b654c:	000c44ec 	.word	0x000c44ec

000b6550 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b6550:	b510      	push	{r4, lr}
    if (!_instance) {
   b6552:	4c06      	ldr	r4, [pc, #24]	; (b656c <_ZN17currentStatusData8instanceEv+0x1c>)
   b6554:	6823      	ldr	r3, [r4, #0]
   b6556:	b93b      	cbnz	r3, b6568 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b6558:	2078      	movs	r0, #120	; 0x78
   b655a:	f7fd fd9c 	bl	b4096 <_Znwj>
   b655e:	4603      	mov	r3, r0
   b6560:	b108      	cbz	r0, b6566 <_ZN17currentStatusData8instanceEv+0x16>
   b6562:	f7ff ffd5 	bl	b6510 <_ZN17currentStatusDataC1Ev>
   b6566:	6023      	str	r3, [r4, #0]
}
   b6568:	6820      	ldr	r0, [r4, #0]
   b656a:	bd10      	pop	{r4, pc}
   b656c:	2003e46c 	.word	0x2003e46c

000b6570 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b6570:	b510      	push	{r4, lr}
    fram.begin();
   b6572:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6574:	f003 fd4a 	bl	ba00c <_ZN6MB85RC5beginEv>
    current
   b6578:	f7ff ffea 	bl	b6550 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b657c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6580:	6803      	ldr	r3, [r0, #0]
   b6582:	61c2      	str	r2, [r0, #28]
}
   b6584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6588:	685b      	ldr	r3, [r3, #4]
   b658a:	4718      	bx	r3

000b658c <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b658c:	b510      	push	{r4, lr}
    current.flush(false);
   b658e:	f7ff ffdf 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6592:	6803      	ldr	r3, [r0, #0]
}
   b6594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b6598:	68db      	ldr	r3, [r3, #12]
   b659a:	2100      	movs	r1, #0
   b659c:	4718      	bx	r3
	...

000b65a0 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b65a0:	b510      	push	{r4, lr}
   b65a2:	4604      	mov	r4, r0
   b65a4:	ed2d 8b02 	vpush	{d8}
   b65a8:	3004      	adds	r0, #4
   b65aa:	f7ff fee5 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b65ae:	68e3      	ldr	r3, [r4, #12]
   b65b0:	3b08      	subs	r3, #8
   b65b2:	2b17      	cmp	r3, #23
   b65b4:	d90c      	bls.n	b65d0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b65b6:	68a3      	ldr	r3, [r4, #8]
   b65b8:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b65bc:	6860      	ldr	r0, [r4, #4]
   b65be:	f006 fb5d 	bl	bcc7c <os_mutex_recursive_unlock>
}
   b65c2:	eeb0 0a48 	vmov.f32	s0, s16
   b65c6:	eef0 0a68 	vmov.f32	s1, s17
   b65ca:	ecbd 8b02 	vpop	{d8}
   b65ce:	bd10      	pop	{r4, pc}
            T result = 0;
   b65d0:	ed9f 8b01 	vldr	d8, [pc, #4]	; b65d8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b65d4:	e7f2      	b.n	b65bc <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b65d6:	bf00      	nop
	...

000b65e0 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b65e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65e2:	4604      	mov	r4, r0
   b65e4:	3004      	adds	r0, #4
   b65e6:	ec57 6b10 	vmov	r6, r7, d0
   b65ea:	f7ff fec5 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b65ee:	68e3      	ldr	r3, [r4, #12]
   b65f0:	3b08      	subs	r3, #8
   b65f2:	2b17      	cmp	r3, #23
   b65f4:	d90c      	bls.n	b6610 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b65f6:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b65f8:	4630      	mov	r0, r6
   b65fa:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b65fe:	4639      	mov	r1, r7
   b6600:	f00a fd76 	bl	c10f0 <__aeabi_dcmpeq>
   b6604:	b920      	cbnz	r0, b6610 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b6606:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b660a:	4620      	mov	r0, r4
   b660c:	f006 fa26 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6610:	6860      	ldr	r0, [r4, #4]
}
   b6612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b6616:	f006 bb31 	b.w	bcc7c <os_mutex_recursive_unlock>
	...

000b661c <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b661c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b6620:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6622:	6081      	str	r1, [r0, #8]
   b6624:	490a      	ldr	r1, [pc, #40]	; (b6650 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6626:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6628:	f44f 6c82 	mov.w	ip, #1040	; 0x410
   b662c:	6182      	str	r2, [r0, #24]
   b662e:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6632:	4a08      	ldr	r2, [pc, #32]	; (b6654 <_ZN10nodeIDDataC1Ev+0x38>)
   b6634:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6636:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b663a:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b663c:	2102      	movs	r1, #2
   b663e:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6640:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6642:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6646:	4a04      	ldr	r2, [pc, #16]	; (b6658 <_ZN10nodeIDDataC1Ev+0x3c>)
   b6648:	61c1      	str	r1, [r0, #28]
   b664a:	6002      	str	r2, [r0, #0]
};
   b664c:	4770      	bx	lr
   b664e:	bf00      	nop
   b6650:	20a99e60 	.word	0x20a99e60
   b6654:	2003e470 	.word	0x2003e470
   b6658:	000c4494 	.word	0x000c4494

000b665c <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b665c:	b510      	push	{r4, lr}
    if (!_instance) {
   b665e:	4c07      	ldr	r4, [pc, #28]	; (b667c <_ZN10nodeIDData8instanceEv+0x20>)
   b6660:	6823      	ldr	r3, [r4, #0]
   b6662:	b943      	cbnz	r3, b6676 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b6664:	f240 403c 	movw	r0, #1084	; 0x43c
   b6668:	f7fd fd15 	bl	b4096 <_Znwj>
   b666c:	4603      	mov	r3, r0
   b666e:	b108      	cbz	r0, b6674 <_ZN10nodeIDData8instanceEv+0x18>
   b6670:	f7ff ffd4 	bl	b661c <_ZN10nodeIDDataC1Ev>
   b6674:	6023      	str	r3, [r4, #0]
}
   b6676:	6820      	ldr	r0, [r4, #0]
   b6678:	bd10      	pop	{r4, pc}
   b667a:	bf00      	nop
   b667c:	2003e464 	.word	0x2003e464

000b6680 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b6680:	b510      	push	{r4, lr}
    fram.begin();
   b6682:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6684:	f003 fcc2 	bl	ba00c <_ZN6MB85RC5beginEv>
    nodeDatabase
   b6688:	f7ff ffe8 	bl	b665c <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b668c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6690:	6803      	ldr	r3, [r0, #0]
   b6692:	61c2      	str	r2, [r0, #28]
}
   b6694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6698:	685b      	ldr	r3, [r3, #4]
   b669a:	4718      	bx	r3

000b669c <_ZN10nodeIDData4loopEv>:
void nodeIDData::loop() {
   b669c:	b510      	push	{r4, lr}
    nodeDatabase.flush(false);
   b669e:	f7ff ffdd 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b66a2:	6803      	ldr	r3, [r0, #0]
}
   b66a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeDatabase.flush(false);
   b66a8:	68db      	ldr	r3, [r3, #12]
   b66aa:	2100      	movs	r1, #0
   b66ac:	4718      	bx	r3
	...

000b66b0 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b66b0:	b538      	push	{r3, r4, r5, lr}
   b66b2:	4604      	mov	r4, r0
   b66b4:	460d      	mov	r5, r1
	String result;
   b66b6:	4906      	ldr	r1, [pc, #24]	; (b66d0 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b66b8:	f009 fa59 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b66bc:	4623      	mov	r3, r4
   b66be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b66c2:	2110      	movs	r1, #16
   b66c4:	4628      	mov	r0, r5
   b66c6:	f006 f957 	bl	bc978 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b66ca:	4620      	mov	r0, r4
   b66cc:	bd38      	pop	{r3, r4, r5, pc}
   b66ce:	bf00      	nop
   b66d0:	000c5654 	.word	0x000c5654

000b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b66d4:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b66d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b66da:	2110      	movs	r1, #16
   b66dc:	f006 b9ca 	b.w	bca74 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b66e0 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b66e0:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b66e2:	4c14      	ldr	r4, [pc, #80]	; (b6734 <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b66e4:	4914      	ldr	r1, [pc, #80]	; (b6738 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b66e6:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b66e8:	4668      	mov	r0, sp
   b66ea:	f009 fa40 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b66ee:	9a00      	ldr	r2, [sp, #0]
   b66f0:	4912      	ldr	r1, [pc, #72]	; (b673c <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b66f2:	4620      	mov	r0, r4
   b66f4:	f7fd fd23 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b66f8:	f7ff ffb0 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b66fc:	9900      	ldr	r1, [sp, #0]
   b66fe:	f7ff ffe9 	bl	b66d4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b6702:	f7ff ffab 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b6706:	6803      	ldr	r3, [r0, #0]
   b6708:	2101      	movs	r1, #1
   b670a:	68db      	ldr	r3, [r3, #12]
   b670c:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b670e:	f7ff ffa5 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b6712:	4601      	mov	r1, r0
   b6714:	a804      	add	r0, sp, #16
   b6716:	f7ff ffcb 	bl	b66b0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b671a:	9a04      	ldr	r2, [sp, #16]
   b671c:	4908      	ldr	r1, [pc, #32]	; (b6740 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b671e:	4620      	mov	r0, r4
   b6720:	f7fd fd0d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6724:	a804      	add	r0, sp, #16
   b6726:	f009 f9d7 	bl	bfad8 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b672a:	4668      	mov	r0, sp
   b672c:	f009 f9d4 	bl	bfad8 <_ZN6StringD1Ev>
}
   b6730:	b008      	add	sp, #32
   b6732:	bd10      	pop	{r4, pc}
   b6734:	2003e650 	.word	0x2003e650
   b6738:	000c42fe 	.word	0x000c42fe
   b673c:	000c430b 	.word	0x000c430b
   b6740:	000c4329 	.word	0x000c4329

000b6744 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b6744:	b570      	push	{r4, r5, r6, lr}
    Log.info("Erasing FRAM region");
   b6746:	4910      	ldr	r1, [pc, #64]	; (b6788 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b6748:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b674a:	4810      	ldr	r0, [pc, #64]	; (b678c <_ZN10nodeIDData10initializeEv+0x48>)
   b674c:	f7fd fcf7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6750:	25c8      	movs	r5, #200	; 0xc8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6752:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6754:	6803      	ldr	r3, [r0, #0]
   b6756:	4629      	mov	r1, r5
   b6758:	68de      	ldr	r6, [r3, #12]
   b675a:	22ff      	movs	r2, #255	; 0xff
   b675c:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b675e:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6760:	47b0      	blx	r6
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6762:	f5b5 6f9b 	cmp.w	r5, #1240	; 0x4d8
   b6766:	d1f4      	bne.n	b6752 <_ZN10nodeIDData10initializeEv+0xe>
    Log.info("Initializing data");
   b6768:	4909      	ldr	r1, [pc, #36]	; (b6790 <_ZN10nodeIDData10initializeEv+0x4c>)
   b676a:	4808      	ldr	r0, [pc, #32]	; (b678c <_ZN10nodeIDData10initializeEv+0x48>)
   b676c:	f7fd fce7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b6770:	4620      	mov	r0, r4
   b6772:	f006 fa15 	bl	bcba0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b6776:	4620      	mov	r0, r4
   b6778:	f7ff ffb2 	bl	b66e0 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b677c:	4620      	mov	r0, r4
}
   b677e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b6782:	f006 b96b 	b.w	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6786:	bf00      	nop
   b6788:	000c433f 	.word	0x000c433f
   b678c:	2003e650 	.word	0x2003e650
   b6790:	000c4353 	.word	0x000c4353

000b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6794:	b538      	push	{r3, r4, r5, lr}
   b6796:	4604      	mov	r4, r0
   b6798:	3004      	adds	r0, #4
   b679a:	460d      	mov	r5, r1
   b679c:	f7ff fdec 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b67a0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b67a2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b67a4:	3b01      	subs	r3, #1
   b67a6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b67a8:	bf26      	itte	cs
   b67aa:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b67ac:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b67ae:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b67b0:	f006 fa64 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b67b4:	4628      	mov	r0, r5
   b67b6:	bd38      	pop	{r3, r4, r5, pc}

000b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b67b8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b67ba:	2110      	movs	r1, #16
   b67bc:	f7ff ffea 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67c0:	bd08      	pop	{r3, pc}

000b67c2 <_ZNK13sysStatusData20get_connectivityModeEv>:
uint8_t sysStatusData::get_connectivityMode() const {
   b67c2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, connectivityMode));
   b67c4:	2114      	movs	r1, #20
   b67c6:	f7ff ffe5 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67ca:	bd08      	pop	{r3, pc}

000b67cc <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b67cc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b67ce:	2115      	movs	r1, #21
   b67d0:	f7ff ffe0 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67d4:	bd08      	pop	{r3, pc}

000b67d6 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b67d6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b67d8:	2116      	movs	r1, #22
   b67da:	f7ff ffdb 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67de:	bd08      	pop	{r3, pc}

000b67e0 <_ZNK13sysStatusData20get_alertCodeGatewayEv>:
uint8_t sysStatusData::get_alertCodeGateway() const {
   b67e0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeGateway));
   b67e2:	212e      	movs	r1, #46	; 0x2e
   b67e4:	f7ff ffd6 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67e8:	bd08      	pop	{r3, pc}

000b67ea <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b67ea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b67ec:	2138      	movs	r1, #56	; 0x38
   b67ee:	f7ff ffd1 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67f2:	bd08      	pop	{r3, pc}

000b67f4 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b67f4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b67f6:	2139      	movs	r1, #57	; 0x39
   b67f8:	f7ff ffcc 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67fc:	bd08      	pop	{r3, pc}

000b67fe <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b67fe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6800:	213b      	movs	r1, #59	; 0x3b
   b6802:	f7ff ffc7 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6806:	bd08      	pop	{r3, pc}

000b6808 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b6808:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b680a:	2110      	movs	r1, #16
   b680c:	f7ff ffc2 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6810:	bd08      	pop	{r3, pc}

000b6812 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6812:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b6814:	2111      	movs	r1, #17
   b6816:	f7ff ffbd 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b681a:	bd08      	pop	{r3, pc}

000b681c <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b681c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b681e:	2114      	movs	r1, #20
   b6820:	f7ff ffb8 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6824:	bd08      	pop	{r3, pc}

000b6826 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b6826:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b6828:	2120      	movs	r1, #32
   b682a:	f7ff ffb3 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b682e:	bd08      	pop	{r3, pc}

000b6830 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b6830:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b6832:	2121      	movs	r1, #33	; 0x21
   b6834:	f7ff ffae 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6838:	bd08      	pop	{r3, pc}

000b683a <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b683a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b683c:	2124      	movs	r1, #36	; 0x24
   b683e:	f7ff ffa9 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6842:	bd08      	pop	{r3, pc}

000b6844 <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b6844:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b6846:	2125      	movs	r1, #37	; 0x25
   b6848:	f7ff ffa4 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b684c:	bd08      	pop	{r3, pc}

000b684e <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b684e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b6850:	2134      	movs	r1, #52	; 0x34
   b6852:	f7ff ff9f 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6856:	bd08      	pop	{r3, pc}

000b6858 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b6858:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b685a:	2141      	movs	r1, #65	; 0x41
   b685c:	f7ff ff9a 	bl	b6794 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6860:	bd08      	pop	{r3, pc}

000b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6862:	b570      	push	{r4, r5, r6, lr}
   b6864:	4604      	mov	r4, r0
   b6866:	3004      	adds	r0, #4
   b6868:	460d      	mov	r5, r1
   b686a:	4616      	mov	r6, r2
   b686c:	f7ff fd84 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6870:	68e3      	ldr	r3, [r4, #12]
   b6872:	3b01      	subs	r3, #1
   b6874:	42ab      	cmp	r3, r5
   b6876:	d307      	bcc.n	b6888 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6878:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b687a:	5d5a      	ldrb	r2, [r3, r5]
   b687c:	42b2      	cmp	r2, r6
   b687e:	d003      	beq.n	b6888 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b6880:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6882:	4620      	mov	r0, r4
   b6884:	f006 f8ea 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6888:	6860      	ldr	r0, [r4, #4]
        }
   b688a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b688e:	f006 b9f5 	b.w	bcc7c <os_mutex_recursive_unlock>

000b6892 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6892:	b508      	push	{r3, lr}
   b6894:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6896:	2110      	movs	r1, #16
   b6898:	f7ff ffe3 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b689c:	bd08      	pop	{r3, pc}

000b689e <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b689e:	b508      	push	{r3, lr}
   b68a0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b68a2:	2111      	movs	r1, #17
   b68a4:	f7ff ffdd 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68a8:	bd08      	pop	{r3, pc}

000b68aa <_ZN13sysStatusData20set_connectivityModeEh>:
void sysStatusData::set_connectivityMode(uint8_t value) {
   b68aa:	b508      	push	{r3, lr}
   b68ac:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, connectivityMode), value);
   b68ae:	2114      	movs	r1, #20
   b68b0:	f7ff ffd7 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68b4:	bd08      	pop	{r3, pc}

000b68b6 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b68b6:	b508      	push	{r3, lr}
   b68b8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b68ba:	2115      	movs	r1, #21
   b68bc:	f7ff ffd1 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68c0:	bd08      	pop	{r3, pc}

000b68c2 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b68c2:	b508      	push	{r3, lr}
   b68c4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b68c6:	2116      	movs	r1, #22
   b68c8:	f7ff ffcb 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68cc:	bd08      	pop	{r3, pc}

000b68ce <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b68ce:	b508      	push	{r3, lr}
   b68d0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b68d2:	212e      	movs	r1, #46	; 0x2e
   b68d4:	f7ff ffc5 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68d8:	bd08      	pop	{r3, pc}

000b68da <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b68da:	b508      	push	{r3, lr}
   b68dc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b68de:	2138      	movs	r1, #56	; 0x38
   b68e0:	f7ff ffbf 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68e4:	bd08      	pop	{r3, pc}

000b68e6 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b68e6:	b508      	push	{r3, lr}
   b68e8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b68ea:	2139      	movs	r1, #57	; 0x39
   b68ec:	f7ff ffb9 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68f0:	bd08      	pop	{r3, pc}

000b68f2 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b68f2:	b508      	push	{r3, lr}
   b68f4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b68f6:	2110      	movs	r1, #16
   b68f8:	f7ff ffb3 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68fc:	bd08      	pop	{r3, pc}

000b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b68fe:	b508      	push	{r3, lr}
   b6900:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6902:	2111      	movs	r1, #17
   b6904:	f7ff ffad 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6908:	bd08      	pop	{r3, pc}

000b690a <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b690a:	b508      	push	{r3, lr}
   b690c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b690e:	2114      	movs	r1, #20
   b6910:	f7ff ffa7 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6914:	bd08      	pop	{r3, pc}

000b6916 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b6916:	b508      	push	{r3, lr}
   b6918:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b691a:	2120      	movs	r1, #32
   b691c:	f7ff ffa1 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6920:	bd08      	pop	{r3, pc}

000b6922 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6922:	b508      	push	{r3, lr}
   b6924:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b6926:	2121      	movs	r1, #33	; 0x21
   b6928:	f7ff ff9b 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b692c:	bd08      	pop	{r3, pc}

000b692e <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b692e:	b508      	push	{r3, lr}
   b6930:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b6932:	2124      	movs	r1, #36	; 0x24
   b6934:	f7ff ff95 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6938:	bd08      	pop	{r3, pc}

000b693a <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b693a:	b508      	push	{r3, lr}
   b693c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b693e:	2125      	movs	r1, #37	; 0x25
   b6940:	f7ff ff8f 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6944:	bd08      	pop	{r3, pc}

000b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b6946:	b508      	push	{r3, lr}
   b6948:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b694a:	2134      	movs	r1, #52	; 0x34
   b694c:	f7ff ff89 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6950:	bd08      	pop	{r3, pc}

000b6952 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b6952:	b508      	push	{r3, lr}
   b6954:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b6956:	2141      	movs	r1, #65	; 0x41
   b6958:	f7ff ff83 	bl	b6862 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b695c:	bd08      	pop	{r3, pc}

000b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b695e:	b538      	push	{r3, r4, r5, lr}
   b6960:	4604      	mov	r4, r0
   b6962:	3004      	adds	r0, #4
   b6964:	460d      	mov	r5, r1
   b6966:	f7ff fd07 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b696a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b696c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b696e:	3b02      	subs	r3, #2
   b6970:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6972:	bf26      	itte	cs
   b6974:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6976:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6978:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b697a:	f006 f97f 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b697e:	4628      	mov	r0, r5
   b6980:	bd38      	pop	{r3, r4, r5, pc}

000b6982 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b6982:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b6984:	2112      	movs	r1, #18
   b6986:	f7ff ffea 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b698a:	bd08      	pop	{r3, pc}

000b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b698c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b698e:	212a      	movs	r1, #42	; 0x2a
   b6990:	f7ff ffe5 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6994:	bd08      	pop	{r3, pc}
	...

000b6998 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b6998:	b513      	push	{r0, r1, r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b699a:	f006 f89b 	bl	bcad4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b699e:	4604      	mov	r4, r0
   b69a0:	b1a0      	cbz	r0, b69cc <_ZN13sysStatusData8validateEj+0x34>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b69a2:	f7ff fd8d 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69a6:	f7ff ff20 	bl	b67ea <_ZNK13sysStatusData12get_openTimeEv>
   b69aa:	280c      	cmp	r0, #12
   b69ac:	d917      	bls.n	b69de <_ZN13sysStatusData8validateEj+0x46>
            Log.info("data not valid openTime=%d and closeTime=%d", sysStatus.get_openTime(), sysStatus.get_closeTime());
   b69ae:	f7ff fd87 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69b2:	f7ff ff1a 	bl	b67ea <_ZNK13sysStatusData12get_openTimeEv>
   b69b6:	9001      	str	r0, [sp, #4]
   b69b8:	f7ff fd82 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69bc:	f7ff ff1a 	bl	b67f4 <_ZNK13sysStatusData13get_closeTimeEv>
   b69c0:	9a01      	ldr	r2, [sp, #4]
   b69c2:	491b      	ldr	r1, [pc, #108]	; (b6a30 <_ZN13sysStatusData8validateEj+0x98>)
   b69c4:	4603      	mov	r3, r0
   b69c6:	481b      	ldr	r0, [pc, #108]	; (b6a34 <_ZN13sysStatusData8validateEj+0x9c>)
   b69c8:	f7fd fbb9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b69cc:	4a1a      	ldr	r2, [pc, #104]	; (b6a38 <_ZN13sysStatusData8validateEj+0xa0>)
   b69ce:	491b      	ldr	r1, [pc, #108]	; (b6a3c <_ZN13sysStatusData8validateEj+0xa4>)
   b69d0:	4818      	ldr	r0, [pc, #96]	; (b6a34 <_ZN13sysStatusData8validateEj+0x9c>)
   b69d2:	f7fd fbb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b69d6:	2400      	movs	r4, #0
}
   b69d8:	4620      	mov	r0, r4
   b69da:	b002      	add	sp, #8
   b69dc:	bd10      	pop	{r4, pc}
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b69de:	f7ff fd6f 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69e2:	f7ff ff07 	bl	b67f4 <_ZNK13sysStatusData13get_closeTimeEv>
   b69e6:	280b      	cmp	r0, #11
   b69e8:	d9e1      	bls.n	b69ae <_ZN13sysStatusData8validateEj+0x16>
        else if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b69ea:	f7ff fd69 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69ee:	f7ff ffcd 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b69f2:	b190      	cbz	r0, b6a1a <_ZN13sysStatusData8validateEj+0x82>
   b69f4:	f7ff fd64 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b69f8:	f7ff ffc8 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b69fc:	283c      	cmp	r0, #60	; 0x3c
   b69fe:	d80c      	bhi.n	b6a1a <_ZN13sysStatusData8validateEj+0x82>
        else if (sysStatus.get_nodeNumber() != 0) {
   b6a00:	f7ff fd5e 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6a04:	f7ff fed8 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6a08:	2800      	cmp	r0, #0
   b6a0a:	d0e5      	beq.n	b69d8 <_ZN13sysStatusData8validateEj+0x40>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6a0c:	f7ff fd58 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6a10:	f7ff fed2 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6a14:	490a      	ldr	r1, [pc, #40]	; (b6a40 <_ZN13sysStatusData8validateEj+0xa8>)
   b6a16:	4602      	mov	r2, r0
   b6a18:	e005      	b.n	b6a26 <_ZN13sysStatusData8validateEj+0x8e>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b6a1a:	f7ff fd51 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6a1e:	f7ff ffb5 	bl	b698c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6a22:	4908      	ldr	r1, [pc, #32]	; (b6a44 <_ZN13sysStatusData8validateEj+0xac>)
   b6a24:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6a26:	4803      	ldr	r0, [pc, #12]	; (b6a34 <_ZN13sysStatusData8validateEj+0x9c>)
   b6a28:	f7fd fb89 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6a2c:	e7ce      	b.n	b69cc <_ZN13sysStatusData8validateEj+0x34>
   b6a2e:	bf00      	nop
   b6a30:	000c4365 	.word	0x000c4365
   b6a34:	2003e650 	.word	0x2003e650
   b6a38:	000c42e2 	.word	0x000c42e2
   b6a3c:	000c43d5 	.word	0x000c43d5
   b6a40:	000c43b6 	.word	0x000c43b6
   b6a44:	000c4391 	.word	0x000c4391

000b6a48 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b6a48:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b6a4a:	212c      	movs	r1, #44	; 0x2c
   b6a4c:	f7ff ff87 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a50:	bd08      	pop	{r3, pc}

000b6a52 <_ZNK17currentStatusData10get_nodeIDEv>:
uint16_t currentStatusData::get_nodeID() const {
   b6a52:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeID));
   b6a54:	2112      	movs	r1, #18
   b6a56:	f7ff ff82 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a5a:	bd08      	pop	{r3, pc}

000b6a5c <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b6a5c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b6a5e:	2130      	movs	r1, #48	; 0x30
   b6a60:	f7ff ff7d 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a64:	bd08      	pop	{r3, pc}
	...

000b6a68 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b6a68:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6a6a:	f006 f833 	bl	bcad4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b6a6e:	4604      	mov	r4, r0
   b6a70:	b198      	cbz	r0, b6a9a <_ZN17currentStatusData8validateEj+0x32>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount() > 1024) {
   b6a72:	f7ff fd6d 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6a76:	f7ff fff1 	bl	b6a5c <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a7a:	f7ff fd69 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6a7e:	f7ff ffed 	bl	b6a5c <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a82:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b6a86:	d90e      	bls.n	b6aa6 <_ZN17currentStatusData8validateEj+0x3e>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b6a88:	f7ff fd62 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6a8c:	f7ff ffe6 	bl	b6a5c <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a90:	4906      	ldr	r1, [pc, #24]	; (b6aac <_ZN17currentStatusData8validateEj+0x44>)
   b6a92:	4602      	mov	r2, r0
   b6a94:	4806      	ldr	r0, [pc, #24]	; (b6ab0 <_ZN17currentStatusData8validateEj+0x48>)
   b6a96:	f7fd fb52 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6a9a:	4a06      	ldr	r2, [pc, #24]	; (b6ab4 <_ZN17currentStatusData8validateEj+0x4c>)
   b6a9c:	4906      	ldr	r1, [pc, #24]	; (b6ab8 <_ZN17currentStatusData8validateEj+0x50>)
   b6a9e:	4804      	ldr	r0, [pc, #16]	; (b6ab0 <_ZN17currentStatusData8validateEj+0x48>)
   b6aa0:	f7fd fb4d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6aa4:	2400      	movs	r4, #0
}
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	bd10      	pop	{r4, pc}
   b6aaa:	bf00      	nop
   b6aac:	000c43ea 	.word	0x000c43ea
   b6ab0:	2003e650 	.word	0x2003e650
   b6ab4:	000c42e2 	.word	0x000c42e2
   b6ab8:	000c4410 	.word	0x000c4410

000b6abc <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6abc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6abe:	2132      	movs	r1, #50	; 0x32
   b6ac0:	f7ff ff4d 	bl	b695e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6ac4:	bd08      	pop	{r3, pc}

000b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6ac6:	b570      	push	{r4, r5, r6, lr}
   b6ac8:	4604      	mov	r4, r0
   b6aca:	3004      	adds	r0, #4
   b6acc:	460d      	mov	r5, r1
   b6ace:	4616      	mov	r6, r2
   b6ad0:	f7ff fc52 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6ad4:	68e3      	ldr	r3, [r4, #12]
   b6ad6:	3b02      	subs	r3, #2
   b6ad8:	42ab      	cmp	r3, r5
   b6ada:	d307      	bcc.n	b6aec <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6adc:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6ade:	5b5a      	ldrh	r2, [r3, r5]
   b6ae0:	42b2      	cmp	r2, r6
   b6ae2:	d003      	beq.n	b6aec <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6ae4:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6ae6:	4620      	mov	r0, r4
   b6ae8:	f005 ffb8 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6aec:	6860      	ldr	r0, [r4, #4]
        }
   b6aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6af2:	f006 b8c3 	b.w	bcc7c <os_mutex_recursive_unlock>

000b6af6 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6af6:	b508      	push	{r3, lr}
   b6af8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b6afa:	2112      	movs	r1, #18
   b6afc:	f7ff ffe3 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b00:	bd08      	pop	{r3, pc}

000b6b02 <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6b02:	b508      	push	{r3, lr}
   b6b04:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6b06:	2128      	movs	r1, #40	; 0x28
   b6b08:	f7ff ffdd 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b0c:	bd08      	pop	{r3, pc}

000b6b0e <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6b0e:	b508      	push	{r3, lr}
   b6b10:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6b12:	212a      	movs	r1, #42	; 0x2a
   b6b14:	f7ff ffd7 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b18:	bd08      	pop	{r3, pc}

000b6b1a <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b6b1a:	b508      	push	{r3, lr}
   b6b1c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6b1e:	212c      	movs	r1, #44	; 0x2c
   b6b20:	f7ff ffd1 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b24:	bd08      	pop	{r3, pc}

000b6b26 <_ZN17currentStatusData10set_nodeIDEt>:
void currentStatusData::set_nodeID(uint16_t value) {
   b6b26:	b508      	push	{r3, lr}
   b6b28:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeID), value);
   b6b2a:	2112      	movs	r1, #18
   b6b2c:	f7ff ffcb 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b30:	bd08      	pop	{r3, pc}

000b6b32 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b6b32:	b508      	push	{r3, lr}
   b6b34:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6b36:	2130      	movs	r1, #48	; 0x30
   b6b38:	f7ff ffc5 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b3c:	bd08      	pop	{r3, pc}

000b6b3e <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b6b3e:	b508      	push	{r3, lr}
   b6b40:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b6b42:	2132      	movs	r1, #50	; 0x32
   b6b44:	f7ff ffbf 	bl	b6ac6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6b48:	bd08      	pop	{r3, pc}

000b6b4a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b4c:	4604      	mov	r4, r0
   b6b4e:	3004      	adds	r0, #4
   b6b50:	460d      	mov	r5, r1
   b6b52:	f7ff fc11 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6b56:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6b58:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6b5a:	3b08      	subs	r3, #8
   b6b5c:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6b5e:	bf23      	ittte	cs
   b6b60:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b6b62:	1949      	addcs	r1, r1, r5
   b6b64:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6b68:	2600      	movcc	r6, #0
   b6b6a:	bf38      	it	cc
   b6b6c:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6b6e:	f006 f885 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b6b72:	4630      	mov	r0, r6
   b6b74:	4639      	mov	r1, r7
   b6b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b78 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6b78:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6b7a:	2120      	movs	r1, #32
   b6b7c:	f7ff ffe5 	bl	b6b4a <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6b80:	bd08      	pop	{r3, pc}

000b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b84:	4604      	mov	r4, r0
   b6b86:	3004      	adds	r0, #4
   b6b88:	460d      	mov	r5, r1
   b6b8a:	461e      	mov	r6, r3
   b6b8c:	4617      	mov	r7, r2
   b6b8e:	f7ff fbf3 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6b92:	68e3      	ldr	r3, [r4, #12]
   b6b94:	3b08      	subs	r3, #8
   b6b96:	42ab      	cmp	r3, r5
   b6b98:	d30c      	bcc.n	b6bb4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6b9a:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6b9c:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6b9e:	5958      	ldr	r0, [r3, r5]
   b6ba0:	6851      	ldr	r1, [r2, #4]
   b6ba2:	42b1      	cmp	r1, r6
   b6ba4:	bf08      	it	eq
   b6ba6:	42b8      	cmpeq	r0, r7
   b6ba8:	d004      	beq.n	b6bb4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b6baa:	515f      	str	r7, [r3, r5]
                        updateHash();
   b6bac:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6bae:	6056      	str	r6, [r2, #4]
                        updateHash();
   b6bb0:	f005 ff54 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6bb4:	6860      	ldr	r0, [r4, #4]
        }
   b6bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6bba:	f006 b85f 	b.w	bcc7c <os_mutex_recursive_unlock>

000b6bbe <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b6bbe:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b6bc0:	2118      	movs	r1, #24
   b6bc2:	f7ff ffde 	bl	b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6bc6:	bd08      	pop	{r3, pc}

000b6bc8 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6bc8:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6bca:	2120      	movs	r1, #32
   b6bcc:	f7ff ffd9 	bl	b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6bd0:	bd08      	pop	{r3, pc}

000b6bd2 <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6bd2:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6bd4:	2130      	movs	r1, #48	; 0x30
   b6bd6:	f7ff ffd4 	bl	b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6bda:	bd08      	pop	{r3, pc}

000b6bdc <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6bdc:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6bde:	2128      	movs	r1, #40	; 0x28
   b6be0:	f7ff ffcf 	bl	b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6be4:	bd08      	pop	{r3, pc}

000b6be6 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6be6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6be8:	2138      	movs	r1, #56	; 0x38
   b6bea:	f7ff ffca 	bl	b6b82 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6bee:	bd08      	pop	{r3, pc}

000b6bf0 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6bf0:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6bf2:	4924      	ldr	r1, [pc, #144]	; (b6c84 <_ZN17currentStatusData15resetEverythingEv+0x94>)
   b6bf4:	4824      	ldr	r0, [pc, #144]	; (b6c88 <_ZN17currentStatusData15resetEverythingEv+0x98>)
   b6bf6:	f7fd faa2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b6bfa:	f7ff fca9 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6bfe:	210b      	movs	r1, #11
   b6c00:	f7ff fe77 	bl	b68f2 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b6c04:	f7ff fca4 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c08:	2100      	movs	r1, #0
   b6c0a:	f7ff fe78 	bl	b68fe <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_nodeID(0);
   b6c0e:	f7ff fc9f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c12:	2100      	movs	r1, #0
   b6c14:	f7ff ff87 	bl	b6b26 <_ZN17currentStatusData10set_nodeIDEt>
  current.set_alertCodeNode(0);
   b6c18:	f7ff fc9a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c1c:	2100      	movs	r1, #0
   b6c1e:	f7ff fe92 	bl	b6946 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b6c22:	f7ff fc95 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c26:	2200      	movs	r2, #0
   b6c28:	2300      	movs	r3, #0
   b6c2a:	f7ff ffdc 	bl	b6be6 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b6c2e:	f7ff fc8f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c32:	2100      	movs	r1, #0
   b6c34:	f7ff ff83 	bl	b6b3e <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6c38:	f7ff fc8a 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c3c:	2100      	movs	r1, #0
   b6c3e:	f7ff ff78 	bl	b6b32 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b6c42:	f7ff fc85 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c46:	2100      	movs	r1, #0
   b6c48:	f7ff fe71 	bl	b692e <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b6c4c:	f7ff fc80 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c50:	2100      	movs	r1, #0
   b6c52:	f7ff fe72 	bl	b693a <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b6c56:	f7ff fc7b 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b6c5a:	4604      	mov	r4, r0
   b6c5c:	f009 fafd 	bl	c025a <_ZN9TimeClass3nowEv>
   b6c60:	4602      	mov	r2, r0
   b6c62:	17c3      	asrs	r3, r0, #31
   b6c64:	4620      	mov	r0, r4
   b6c66:	f7ff ffb9 	bl	b6bdc <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6c6a:	f7ff fc29 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6c6e:	2100      	movs	r1, #0
   b6c70:	f7ff fe21 	bl	b68b6 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6c74:	f7ff fc24 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
}
   b6c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6c7c:	2100      	movs	r1, #0
   b6c7e:	f7ff be20 	b.w	b68c2 <_ZN13sysStatusData16set_messageCountEh>
   b6c82:	bf00      	nop
   b6c84:	000c4423 	.word	0x000c4423
   b6c88:	2003e650 	.word	0x2003e650

000b6c8c <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b6c8c:	b510      	push	{r4, lr}
   b6c8e:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6c90:	f005 ff86 	bl	bcba0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b6c94:	4905      	ldr	r1, [pc, #20]	; (b6cac <_ZN17currentStatusData10initializeEv+0x20>)
   b6c96:	4806      	ldr	r0, [pc, #24]	; (b6cb0 <_ZN17currentStatusData10initializeEv+0x24>)
   b6c98:	f7fd fa51 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b6c9c:	4620      	mov	r0, r4
   b6c9e:	f7ff ffa7 	bl	b6bf0 <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b6ca2:	4620      	mov	r0, r4
}
   b6ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6ca8:	f005 bed8 	b.w	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6cac:	000c4444 	.word	0x000c4444
   b6cb0:	2003e650 	.word	0x2003e650

000b6cb4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6cb4:	b538      	push	{r3, r4, r5, lr}
   b6cb6:	4604      	mov	r4, r0
   b6cb8:	3004      	adds	r0, #4
   b6cba:	460d      	mov	r5, r1
   b6cbc:	f7ff fb5c 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6cc0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6cc2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6cc4:	3b01      	subs	r3, #1
   b6cc6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6cc8:	bf26      	itte	cs
   b6cca:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6ccc:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6cce:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6cd0:	f005 ffd4 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b6cd4:	4628      	mov	r0, r5
   b6cd6:	bd38      	pop	{r3, r4, r5, pc}

000b6cd8 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6cd8:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6cda:	2140      	movs	r1, #64	; 0x40
   b6cdc:	f7ff ffea 	bl	b6cb4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6ce0:	bd08      	pop	{r3, pc}

000b6ce2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6ce2:	b570      	push	{r4, r5, r6, lr}
   b6ce4:	4604      	mov	r4, r0
   b6ce6:	3004      	adds	r0, #4
   b6ce8:	460d      	mov	r5, r1
   b6cea:	4616      	mov	r6, r2
   b6cec:	f7ff fb44 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6cf0:	68e3      	ldr	r3, [r4, #12]
   b6cf2:	3b01      	subs	r3, #1
   b6cf4:	42ab      	cmp	r3, r5
   b6cf6:	d307      	bcc.n	b6d08 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6cf8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6cfa:	5d5a      	ldrb	r2, [r3, r5]
   b6cfc:	42b2      	cmp	r2, r6
   b6cfe:	d003      	beq.n	b6d08 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b6d00:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6d02:	4620      	mov	r0, r4
   b6d04:	f005 feaa 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6d08:	6860      	ldr	r0, [r4, #4]
        }
   b6d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6d0e:	f005 bfb5 	b.w	bcc7c <os_mutex_recursive_unlock>

000b6d12 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6d12:	b508      	push	{r3, lr}
   b6d14:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6d16:	213a      	movs	r1, #58	; 0x3a
   b6d18:	f7ff ffe3 	bl	b6ce2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6d1c:	bd08      	pop	{r3, pc}
	...

000b6d20 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b6d20:	b510      	push	{r4, lr}
   b6d22:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6d24:	f005 ff3c 	bl	bcba0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b6d28:	4928      	ldr	r1, [pc, #160]	; (b6dcc <_ZN13sysStatusData10initializeEv+0xac>)
   b6d2a:	4829      	ldr	r0, [pc, #164]	; (b6dd0 <_ZN13sysStatusData10initializeEv+0xb0>)
   b6d2c:	f7fd fa07 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6d30:	f7ff fbc6 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d34:	2100      	movs	r1, #0
   b6d36:	f7ff fdac 	bl	b6892 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b6d3a:	f7ff fbc1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d3e:	2101      	movs	r1, #1
   b6d40:	f7ff fdad 	bl	b689e <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b6d44:	f7ff fbbc 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d48:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6d4c:	f7ff fed3 	bl	b6af6 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_connectivityMode(0);
   b6d50:	f7ff fbb6 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d54:	2100      	movs	r1, #0
   b6d56:	f7ff fda8 	bl	b68aa <_ZN13sysStatusData20set_connectivityModeEh>
    sysStatus.set_resetCount(0);
   b6d5a:	f7ff fbb1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d5e:	2100      	movs	r1, #0
   b6d60:	f7ff fda9 	bl	b68b6 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_messageCount(0);
   b6d64:	f7ff fbac 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d68:	2100      	movs	r1, #0
   b6d6a:	f7ff fdaa 	bl	b68c2 <_ZN13sysStatusData16set_messageCountEh>
    sysStatus.set_lastHookResponse(0);
   b6d6e:	f7ff fba7 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d72:	2200      	movs	r2, #0
   b6d74:	2300      	movs	r3, #0
   b6d76:	f7ff ff22 	bl	b6bbe <_ZN13sysStatusData20set_lastHookResponseEx>
    sysStatus.set_frequencyMinutes(60);
   b6d7a:	f7ff fba1 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d7e:	213c      	movs	r1, #60	; 0x3c
   b6d80:	f7ff fec5 	bl	b6b0e <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_updatedFrequencyMinutes(0);
   b6d84:	f7ff fb9c 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d88:	2100      	movs	r1, #0
   b6d8a:	f7ff fec6 	bl	b6b1a <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
    sysStatus.set_alertCodeGateway(0);
   b6d8e:	f7ff fb97 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d92:	2100      	movs	r1, #0
   b6d94:	f7ff fd9b 	bl	b68ce <_ZN13sysStatusData20set_alertCodeGatewayEh>
    sysStatus.set_alertTimestampGateway(0);
   b6d98:	f7ff fb92 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6d9c:	2200      	movs	r2, #0
   b6d9e:	2300      	movs	r3, #0
   b6da0:	f7ff ff17 	bl	b6bd2 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
    sysStatus.set_openTime(6);
   b6da4:	f7ff fb8c 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6da8:	2106      	movs	r1, #6
   b6daa:	f7ff fd96 	bl	b68da <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(22);
   b6dae:	f7ff fb87 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6db2:	2116      	movs	r1, #22
   b6db4:	f7ff fd97 	bl	b68e6 <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_verizonSIM(false);
   b6db8:	f7ff fb82 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b6dbc:	2100      	movs	r1, #0
   b6dbe:	f7ff ffa8 	bl	b6d12 <_ZN13sysStatusData14set_verizonSIMEb>
    updateHash();
   b6dc2:	4620      	mov	r0, r4
}
   b6dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6dc8:	f005 be48 	b.w	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6dcc:	000c445d 	.word	0x000c445d
   b6dd0:	2003e650 	.word	0x2003e650

000b6dd4 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6dd8:	2140      	movs	r1, #64	; 0x40
   b6dda:	f7ff ff82 	bl	b6ce2 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6dde:	bd08      	pop	{r3, pc}

000b6de0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>:
        T getValue(size_t offset) const {
   b6de0:	b538      	push	{r3, r4, r5, lr}
   b6de2:	4604      	mov	r4, r0
   b6de4:	3004      	adds	r0, #4
   b6de6:	460d      	mov	r5, r1
   b6de8:	f7ff fac6 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6dec:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6dee:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6df0:	3b02      	subs	r3, #2
   b6df2:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6df4:	bf26      	itte	cs
   b6df6:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6df8:	5f5d      	ldrshcs	r5, [r3, r5]
            T result = 0;
   b6dfa:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6dfc:	f005 ff3e 	bl	bcc7c <os_mutex_recursive_unlock>
        }
   b6e00:	4628      	mov	r0, r5
   b6e02:	bd38      	pop	{r3, r4, r5, pc}

000b6e04 <_ZNK17currentStatusData8get_RSSIEv>:
int16_t currentStatusData::get_RSSI() const {
   b6e04:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
   b6e06:	2122      	movs	r1, #34	; 0x22
   b6e08:	f7ff ffea 	bl	b6de0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6e0c:	bd08      	pop	{r3, pc}

000b6e0e <_ZNK17currentStatusData7get_SNREv>:
int16_t currentStatusData::get_SNR() const {
   b6e0e:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, SNR));
   b6e10:	2142      	movs	r1, #66	; 0x42
   b6e12:	f7ff ffe5 	bl	b6de0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6e16:	bd08      	pop	{r3, pc}

000b6e18 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6e18:	b570      	push	{r4, r5, r6, lr}
   b6e1a:	4604      	mov	r4, r0
   b6e1c:	3004      	adds	r0, #4
   b6e1e:	460d      	mov	r5, r1
   b6e20:	4616      	mov	r6, r2
   b6e22:	f7ff faa9 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6e26:	68e3      	ldr	r3, [r4, #12]
   b6e28:	3b02      	subs	r3, #2
   b6e2a:	42ab      	cmp	r3, r5
   b6e2c:	d307      	bcc.n	b6e3e <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6e2e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6e30:	5f5a      	ldrsh	r2, [r3, r5]
   b6e32:	42b2      	cmp	r2, r6
   b6e34:	d003      	beq.n	b6e3e <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b6e36:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6e38:	4620      	mov	r0, r4
   b6e3a:	f005 fe0f 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6e3e:	6860      	ldr	r0, [r4, #4]
        }
   b6e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6e44:	f005 bf1a 	b.w	bcc7c <os_mutex_recursive_unlock>

000b6e48 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b6e4c:	2122      	movs	r1, #34	; 0x22
   b6e4e:	f7ff ffe3 	bl	b6e18 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6e52:	bd08      	pop	{r3, pc}

000b6e54 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b6e54:	b508      	push	{r3, lr}
   b6e56:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b6e58:	2142      	movs	r1, #66	; 0x42
   b6e5a:	f7ff ffdd 	bl	b6e18 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6e5e:	bd08      	pop	{r3, pc}

000b6e60 <_GLOBAL__sub_I_fram>:
}
   b6e60:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6e62:	f009 fc83 	bl	c076c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6e66:	4c05      	ldr	r4, [pc, #20]	; (b6e7c <_GLOBAL__sub_I_fram+0x1c>)
   b6e68:	4601      	mov	r1, r0
   b6e6a:	2300      	movs	r3, #0
   b6e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6e70:	4620      	mov	r0, r4
   b6e72:	f003 f8c1 	bl	b9ff8 <_ZN6MB85RCC1ER7TwoWireji>
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <_GLOBAL__sub_I_fram+0x20>)
   b6e78:	6023      	str	r3, [r4, #0]
}
   b6e7a:	bd10      	pop	{r4, pc}
   b6e7c:	2003e470 	.word	0x2003e470
   b6e80:	000c4478 	.word	0x000c4478

000b6e84 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6e84:	4770      	bx	lr

000b6e86 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6e86:	6a00      	ldr	r0, [r0, #32]
   b6e88:	6803      	ldr	r3, [r0, #0]
   b6e8a:	68db      	ldr	r3, [r3, #12]
   b6e8c:	4718      	bx	r3

000b6e8e <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6e8e:	4770      	bx	lr

000b6e90 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6e90:	b510      	push	{r4, lr}
}
   b6e92:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6e94:	4604      	mov	r4, r0
}
   b6e96:	f7fd f902 	bl	b409e <_ZdlPvj>
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	bd10      	pop	{r4, pc}
	...

000b6ea0 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6ea0:	b510      	push	{r4, lr}
   b6ea2:	4b03      	ldr	r3, [pc, #12]	; (b6eb0 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6ea4:	6003      	str	r3, [r0, #0]
   b6ea6:	4604      	mov	r4, r0
   b6ea8:	f001 fdf2 	bl	b8a90 <_ZN10JsonParserD1Ev>
   b6eac:	4620      	mov	r0, r4
   b6eae:	bd10      	pop	{r4, pc}
   b6eb0:	000c49ac 	.word	0x000c49ac

000b6eb4 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6eb4:	b510      	push	{r4, lr}
   b6eb6:	4604      	mov	r4, r0
   b6eb8:	f7ff fff2 	bl	b6ea0 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	f640 112c 	movw	r1, #2348	; 0x92c
   b6ec2:	f7fd f8ec 	bl	b409e <_ZdlPvj>
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	bd10      	pop	{r4, pc}

000b6eca <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6eca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6ecc:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6ece:	6853      	ldr	r3, [r2, #4]
   b6ed0:	6890      	ldr	r0, [r2, #8]
   b6ed2:	6814      	ldr	r4, [r2, #0]
   b6ed4:	105e      	asrs	r6, r3, #1
   b6ed6:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6eda:	07db      	lsls	r3, r3, #31
   b6edc:	bf48      	it	mi
   b6ede:	5983      	ldrmi	r3, [r0, r6]
   b6ee0:	4668      	mov	r0, sp
   b6ee2:	bf48      	it	mi
   b6ee4:	591c      	ldrmi	r4, [r3, r4]
   b6ee6:	f008 fe73 	bl	bfbd0 <_ZN6StringC1EOS_>
   b6eea:	4669      	mov	r1, sp
   b6eec:	4628      	mov	r0, r5
   b6eee:	47a0      	blx	r4
   b6ef0:	4604      	mov	r4, r0
   b6ef2:	4668      	mov	r0, sp
   b6ef4:	f008 fdf0 	bl	bfad8 <_ZN6StringD1Ev>
      }
   b6ef8:	4620      	mov	r0, r4
   b6efa:	b004      	add	sp, #16
   b6efc:	bd70      	pop	{r4, r5, r6, pc}

000b6efe <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6efe:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6f00:	b538      	push	{r3, r4, r5, lr}
   b6f02:	4604      	mov	r4, r0
	switch (__op)
   b6f04:	d102      	bne.n	b6f0c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6f06:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6f08:	6023      	str	r3, [r4, #0]
	}
   b6f0a:	e003      	b.n	b6f14 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6f0c:	2a02      	cmp	r2, #2
   b6f0e:	d003      	beq.n	b6f18 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6f10:	2a03      	cmp	r2, #3
   b6f12:	d00d      	beq.n	b6f30 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6f14:	2000      	movs	r0, #0
   b6f16:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f18:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6f1a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f1c:	f7fd f8bb 	bl	b4096 <_Znwj>
   b6f20:	4603      	mov	r3, r0
   b6f22:	2800      	cmp	r0, #0
   b6f24:	d0f0      	beq.n	b6f08 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6f26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6f2e:	e7eb      	b.n	b6f08 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6f30:	6800      	ldr	r0, [r0, #0]
   b6f32:	2800      	cmp	r0, #0
   b6f34:	d0ee      	beq.n	b6f14 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6f36:	210c      	movs	r1, #12
   b6f38:	f7fd f8b1 	bl	b409e <_ZdlPvj>
   b6f3c:	e7ea      	b.n	b6f14 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6f3e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f40:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6f42:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6f44:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6f46:	f001 ff85 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6f4a:	b120      	cbz	r0, b6f56 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6f4c:	9901      	ldr	r1, [sp, #4]
   b6f4e:	462a      	mov	r2, r5
   b6f50:	4620      	mov	r0, r4
   b6f52:	f001 ff61 	bl	b8e18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6f56:	b003      	add	sp, #12
   b6f58:	bd30      	pop	{r4, r5, pc}
	...

000b6f5c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6f5c:	4b0a      	ldr	r3, [pc, #40]	; (b6f88 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6f5e:	b510      	push	{r4, lr}
   b6f60:	4604      	mov	r4, r0
   b6f62:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6f64:	f007 fc2c 	bl	be7c0 <_ZN5spark10LogManager8instanceEv>
   b6f68:	4621      	mov	r1, r4
   b6f6a:	f007 fe30 	bl	bebce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6f6e:	f009 fa5b 	bl	c0428 <_Z16_fetch_usbserialv>
   b6f72:	f009 fa4b 	bl	c040c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6f76:	4620      	mov	r0, r4
   b6f78:	4b04      	ldr	r3, [pc, #16]	; (b6f8c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6f7a:	f840 3b04 	str.w	r3, [r0], #4
   b6f7e:	f007 fcc1 	bl	be904 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6f82:	4620      	mov	r0, r4
   b6f84:	bd10      	pop	{r4, pc}
   b6f86:	bf00      	nop
   b6f88:	000c4994 	.word	0x000c4994
   b6f8c:	000c497c 	.word	0x000c497c

000b6f90 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6f90:	b510      	push	{r4, lr}
   b6f92:	4604      	mov	r4, r0
    }
   b6f94:	f7ff ffe2 	bl	b6f5c <_ZN5spark16SerialLogHandlerD1Ev>
   b6f98:	4620      	mov	r0, r4
   b6f9a:	2124      	movs	r1, #36	; 0x24
   b6f9c:	f7fd f87f 	bl	b409e <_ZdlPvj>
   b6fa0:	4620      	mov	r0, r4
   b6fa2:	bd10      	pop	{r4, pc}

000b6fa4 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6fa4:	b510      	push	{r4, lr}
    if (!_instance) {
   b6fa6:	4c06      	ldr	r4, [pc, #24]	; (b6fc0 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6fa8:	6823      	ldr	r3, [r4, #0]
   b6faa:	b933      	cbnz	r3, b6fba <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6fac:	2004      	movs	r0, #4
   b6fae:	f7fd f872 	bl	b4096 <_Znwj>
   b6fb2:	b108      	cbz	r0, b6fb8 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6fb4:	4b03      	ldr	r3, [pc, #12]	; (b6fc4 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6fb6:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6fb8:	6020      	str	r0, [r4, #0]
}
   b6fba:	6820      	ldr	r0, [r4, #0]
   b6fbc:	bd10      	pop	{r4, pc}
   b6fbe:	bf00      	nop
   b6fc0:	2003e490 	.word	0x2003e490
   b6fc4:	000c49bc 	.word	0x000c49bc

000b6fc8 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6fc8:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6fca:	4919      	ldr	r1, [pc, #100]	; (b7030 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6fcc:	b085      	sub	sp, #20
   b6fce:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6fd0:	4818      	ldr	r0, [pc, #96]	; (b7034 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6fd2:	f7fd f8b4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6fd6:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fd8:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6fda:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fdc:	f7fd f85b 	bl	b4096 <_Znwj>
   b6fe0:	b118      	cbz	r0, b6fea <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6fe2:	4b15      	ldr	r3, [pc, #84]	; (b7038 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6fe4:	6084      	str	r4, [r0, #8]
   b6fe6:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fea:	4b14      	ldr	r3, [pc, #80]	; (b703c <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fec:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fee:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6ff0:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6ff2:	4b13      	ldr	r3, [pc, #76]	; (b7040 <_ZN18Particle_Functions5setupEv+0x78>)
   b6ff4:	9302      	str	r3, [sp, #8]
   b6ff6:	f7fd f84e 	bl	b4096 <_Znwj>
   b6ffa:	4604      	mov	r4, r0
   b6ffc:	b178      	cbz	r0, b701e <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6ffe:	2300      	movs	r3, #0
   b7000:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7002:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b7004:	b133      	cbz	r3, b7014 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7006:	2202      	movs	r2, #2
   b7008:	4669      	mov	r1, sp
   b700a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b700c:	9b03      	ldr	r3, [sp, #12]
   b700e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7010:	9b02      	ldr	r3, [sp, #8]
   b7012:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b7014:	4a0b      	ldr	r2, [pc, #44]	; (b7044 <_ZN18Particle_Functions5setupEv+0x7c>)
   b7016:	480c      	ldr	r0, [pc, #48]	; (b7048 <_ZN18Particle_Functions5setupEv+0x80>)
   b7018:	4621      	mov	r1, r4
   b701a:	f006 fc3e 	bl	bd89a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b701e:	9b02      	ldr	r3, [sp, #8]
   b7020:	b11b      	cbz	r3, b702a <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7022:	4669      	mov	r1, sp
   b7024:	2203      	movs	r2, #3
   b7026:	4608      	mov	r0, r1
   b7028:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b702a:	b005      	add	sp, #20
   b702c:	bd30      	pop	{r4, r5, pc}
   b702e:	bf00      	nop
   b7030:	000c4510 	.word	0x000c4510
   b7034:	2003e650 	.word	0x2003e650
   b7038:	000b704d 	.word	0x000b704d
   b703c:	000b6ecb 	.word	0x000b6ecb
   b7040:	000b6eff 	.word	0x000b6eff
   b7044:	000c453e 	.word	0x000c453e
   b7048:	000bd873 	.word	0x000bd873

000b704c <_ZN18Particle_Functions18jsonFunctionParserE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::jsonFunctionParser(String command) {
   b704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7050:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b7054:	460c      	mov	r4, r1
    // const char * const commandString = "{\"cmd\":[{\"node\":1,\"var\":\"hourly\",\"fn\":\"reset\"},{\"node\":0,\"var\":1,\"fn\":\"lowpowermode\"},{\"node\":2,\"var\":\"daily\",\"fn\":\"report\"}]}";
    // String to put into Uber command window {"cmd":[{"node":1,"var":"hourly","fn":"reset"},{"node":0,"var":1,"fn":"lowpowermode"},{"node":2,"var":"daily","fn":"report"}]}

	int nodeNumber;
	String variable;
   b7056:	a809      	add	r0, sp, #36	; 0x24
   b7058:	49a7      	ldr	r1, [pc, #668]	; (b72f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b705a:	f008 fd88 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b705e:	49a6      	ldr	r1, [pc, #664]	; (b72f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b7060:	a80d      	add	r0, sp, #52	; 0x34
   b7062:	f008 fd84 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b7066:	2350      	movs	r3, #80	; 0x50
   b7068:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b706c:	9300      	str	r3, [sp, #0]
   b706e:	a92c      	add	r1, sp, #176	; 0xb0
   b7070:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b7074:	a821      	add	r0, sp, #132	; 0x84
   b7076:	f001 fd6d 	bl	b8b54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b707a:	4ba0      	ldr	r3, [pc, #640]	; (b72fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
  char messaging[64];
  bool success = true;

	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens

  Log.info(command.c_str());
   b707c:	6821      	ldr	r1, [r4, #0]
   b707e:	48a0      	ldr	r0, [pc, #640]	; (b7300 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b7080:	9321      	str	r3, [sp, #132]	; 0x84
   b7082:	f7fd f85c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	jp.clear();
   b7086:	a821      	add	r0, sp, #132	; 0x84
   b7088:	f001 fd5a 	bl	b8b40 <_ZN10JsonBuffer5clearEv>
   b708c:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b708e:	9103      	str	r1, [sp, #12]
   b7090:	4608      	mov	r0, r1
   b7092:	f00a fa70 	bl	c1576 <strlen>
   b7096:	9903      	ldr	r1, [sp, #12]
   b7098:	4602      	mov	r2, r0
   b709a:	a821      	add	r0, sp, #132	; 0x84
   b709c:	f001 fd33 	bl	b8b06 <_ZN10JsonBuffer7addDataEPKcj>
	jp.addString(command);
	if (!jp.parse()) {
   b70a0:	a821      	add	r0, sp, #132	; 0x84
   b70a2:	f002 fa89 	bl	b95b8 <_ZN10JsonParser5parseEv>
   b70a6:	4604      	mov	r4, r0
   b70a8:	b990      	cbnz	r0, b70d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x84>
		Log.info("Parsing failed - check syntax");
   b70aa:	4996      	ldr	r1, [pc, #600]	; (b7304 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b70ac:	4894      	ldr	r0, [pc, #592]	; (b7300 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b70ae:	f7fd f846 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b70b2:	4b95      	ldr	r3, [pc, #596]	; (b7308 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b70b4:	4a93      	ldr	r2, [pc, #588]	; (b7304 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b70b6:	781b      	ldrb	r3, [r3, #0]
   b70b8:	f88d 3000 	strb.w	r3, [sp]
   b70bc:	a811      	add	r0, sp, #68	; 0x44
   b70be:	4993      	ldr	r1, [pc, #588]	; (b730c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b70c0:	233c      	movs	r3, #60	; 0x3c
   b70c2:	f006 fcfb 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b70c6:	a812      	add	r0, sp, #72	; 0x48
   b70c8:	f7fd faf4 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    Log.info(messaging);
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
	}
	return success;
   b70cc:	4625      	mov	r5, r4
   b70ce:	e017      	b.n	b7100 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b70d0:	a821      	add	r0, sp, #132	; 0x84
   b70d2:	f001 fd5a 	bl	b8b8a <_ZNK10JsonParser14getOuterObjectEv>
   b70d6:	4a8d      	ldr	r2, [pc, #564]	; (b730c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
		if (getValueTokenByKey(container, name, value)) {
   b70d8:	4f8d      	ldr	r7, [pc, #564]	; (b7310 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b70da:	f8df 8288 	ldr.w	r8, [pc, #648]	; b7364 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b70de:	f8df 9288 	ldr.w	r9, [pc, #648]	; b7368 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b70e2:	4601      	mov	r1, r0
   b70e4:	ab06      	add	r3, sp, #24
   b70e6:	a821      	add	r0, sp, #132	; 0x84
   b70e8:	f001 feb4 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b70ec:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b70ee:	9906      	ldr	r1, [sp, #24]
   b70f0:	462a      	mov	r2, r5
   b70f2:	a821      	add	r0, sp, #132	; 0x84
   b70f4:	f001 fd6b 	bl	b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b70f8:	4606      	mov	r6, r0
   b70fa:	b978      	cbnz	r0, b711c <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd0>
      if (i == 0) return 0;                                       // No valid entries
   b70fc:	2d00      	cmp	r5, #0
   b70fe:	d1e5      	bne.n	b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b7100:	a821      	add	r0, sp, #132	; 0x84
   b7102:	f7ff fecd 	bl	b6ea0 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b7106:	a80d      	add	r0, sp, #52	; 0x34
   b7108:	f008 fce6 	bl	bfad8 <_ZN6StringD1Ev>
	String variable;
   b710c:	a809      	add	r0, sp, #36	; 0x24
   b710e:	f008 fce3 	bl	bfad8 <_ZN6StringD1Ev>
}
   b7112:	4628      	mov	r0, r5
   b7114:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b7118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b711c:	4601      	mov	r1, r0
   b711e:	ab07      	add	r3, sp, #28
   b7120:	463a      	mov	r2, r7
   b7122:	a821      	add	r0, sp, #132	; 0x84
   b7124:	f001 fe96 	bl	b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b7128:	b120      	cbz	r0, b7134 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xe8>
			return getTokenValue(value, result);
   b712a:	9907      	ldr	r1, [sp, #28]
   b712c:	aa04      	add	r2, sp, #16
   b712e:	a821      	add	r0, sp, #132	; 0x84
   b7130:	f001 fda6 	bl	b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b7134:	ab09      	add	r3, sp, #36	; 0x24
   b7136:	4642      	mov	r2, r8
   b7138:	4631      	mov	r1, r6
   b713a:	a821      	add	r0, sp, #132	; 0x84
   b713c:	f7ff feff 	bl	b6f3e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b7140:	4631      	mov	r1, r6
   b7142:	a821      	add	r0, sp, #132	; 0x84
   b7144:	ab0d      	add	r3, sp, #52	; 0x34
   b7146:	464a      	mov	r2, r9
   b7148:	f7ff fef9 	bl	b6f3e <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b714c:	4971      	ldr	r1, [pc, #452]	; (b7314 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
   b714e:	a80d      	add	r0, sp, #52	; 0x34
   b7150:	f008 fdd3 	bl	bfcfa <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b7154:	2800      	cmp	r0, #0
   b7156:	d07b      	beq.n	b7250 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x204>
      if (nodeNumber == 0) {
   b7158:	9b04      	ldr	r3, [sp, #16]
   b715a:	2b00      	cmp	r3, #0
   b715c:	d15d      	bne.n	b721a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ce>
   b715e:	496e      	ldr	r1, [pc, #440]	; (b7318 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b7160:	a809      	add	r0, sp, #36	; 0x24
   b7162:	f008 fdca 	bl	bfcfa <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b7166:	2800      	cmp	r0, #0
   b7168:	d03a      	beq.n	b71e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x194>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b716a:	496c      	ldr	r1, [pc, #432]	; (b731c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b716c:	a811      	add	r0, sp, #68	; 0x44
   b716e:	f00a f9dc 	bl	c152a <strcpy>
          nodeDatabase.resetNodeIDs();
   b7172:	f7ff fa73 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b7176:	f7ff fab3 	bl	b66e0 <_ZN10nodeIDData12resetNodeIDsEv>
          Log.info("Resetting the Gateway node so new database is in effect");
   b717a:	4969      	ldr	r1, [pc, #420]	; (b7320 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b717c:	4860      	ldr	r0, [pc, #384]	; (b7300 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b717e:	f7fc ffde 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7182:	4b61      	ldr	r3, [pc, #388]	; (b7308 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b7184:	4a67      	ldr	r2, [pc, #412]	; (b7324 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b7186:	781b      	ldrb	r3, [r3, #0]
   b7188:	4967      	ldr	r1, [pc, #412]	; (b7328 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b718a:	f88d 3000 	strb.w	r3, [sp]
   b718e:	a807      	add	r0, sp, #28
   b7190:	233c      	movs	r3, #60	; 0x3c
   b7192:	f006 fc93 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b7196:	a808      	add	r0, sp, #32
   b7198:	f7fd fa8c 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
   b719c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b71a0:	f006 f9c0 	bl	bd524 <delay>
          System.reset();
   b71a4:	f008 fe65 	bl	bfe72 <_ZN11SystemClass5resetEv>
        current.resetEverything();
   b71a8:	f7ff f9d2 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b71ac:	f7ff fd20 	bl	b6bf0 <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b71b0:	4853      	ldr	r0, [pc, #332]	; (b7300 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b71b2:	a911      	add	r1, sp, #68	; 0x44
   b71b4:	f7fc ffc3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b71b8:	f006 f894 	bl	bd2e4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b71bc:	b160      	cbz	r0, b71d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x18c>
   b71be:	4b52      	ldr	r3, [pc, #328]	; (b7308 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b71c0:	4952      	ldr	r1, [pc, #328]	; (b730c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b71c2:	781b      	ldrb	r3, [r3, #0]
   b71c4:	f88d 3000 	strb.w	r3, [sp]
   b71c8:	a807      	add	r0, sp, #28
   b71ca:	233c      	movs	r3, #60	; 0x3c
   b71cc:	aa11      	add	r2, sp, #68	; 0x44
   b71ce:	f006 fc75 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b71d2:	a808      	add	r0, sp, #32
   b71d4:	f7fd fa6e 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b71d8:	3501      	adds	r5, #1
   b71da:	2d0a      	cmp	r5, #10
   b71dc:	d187      	bne.n	b70ee <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa2>
   b71de:	e775      	b.n	b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
   b71e0:	4952      	ldr	r1, [pc, #328]	; (b732c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b71e2:	a809      	add	r0, sp, #36	; 0x24
   b71e4:	f008 fd89 	bl	bfcfa <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b71e8:	b190      	cbz	r0, b7210 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c4>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b71ea:	4951      	ldr	r1, [pc, #324]	; (b7330 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b71ec:	a811      	add	r0, sp, #68	; 0x44
   b71ee:	f00a f99c 	bl	c152a <strcpy>
            sysStatus.initialize();                     // All will reset system values as well
   b71f2:	f7ff f965 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b71f6:	6803      	ldr	r3, [r0, #0]
   b71f8:	699b      	ldr	r3, [r3, #24]
   b71fa:	4798      	blx	r3
            current.resetEverything();
   b71fc:	f7ff f9a8 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b7200:	f7ff fcf6 	bl	b6bf0 <_ZN17currentStatusData15resetEverythingEv>
            nodeDatabase.initialize();
   b7204:	f7ff fa2a 	bl	b665c <_ZN10nodeIDData8instanceEv>
   b7208:	6803      	ldr	r3, [r0, #0]
   b720a:	699b      	ldr	r3, [r3, #24]
   b720c:	4798      	blx	r3
   b720e:	e7cb      	b.n	b71a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b7210:	4948      	ldr	r1, [pc, #288]	; (b7334 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b7212:	a811      	add	r0, sp, #68	; 0x44
   b7214:	f00a f989 	bl	c152a <strcpy>
   b7218:	e7c6      	b.n	b71a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
   b721a:	4944      	ldr	r1, [pc, #272]	; (b732c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b721c:	a809      	add	r0, sp, #36	; 0x24
   b721e:	f008 fd6c 	bl	bfcfa <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b7222:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b7224:	b158      	cbz	r0, b723e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1f2>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b7226:	4a44      	ldr	r2, [pc, #272]	; (b7338 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b7228:	2140      	movs	r1, #64	; 0x40
   b722a:	a811      	add	r0, sp, #68	; 0x44
   b722c:	f006 f922 	bl	bd474 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b7230:	f7fc ff9e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7234:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7236:	9904      	ldr	r1, [sp, #16]
   b7238:	f7fd fe64 	bl	b4f04 <_ZN14LoRA_Functions11changeAlertEii>
   b723c:	e7b8      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b723e:	4a3f      	ldr	r2, [pc, #252]	; (b733c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b7240:	2140      	movs	r1, #64	; 0x40
   b7242:	a811      	add	r0, sp, #68	; 0x44
   b7244:	f006 f916 	bl	bd474 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b7248:	f7fc ff92 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b724c:	2206      	movs	r2, #6
   b724e:	e7f2      	b.n	b7236 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ea>
   b7250:	493b      	ldr	r1, [pc, #236]	; (b7340 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b7252:	a80d      	add	r0, sp, #52	; 0x34
   b7254:	f008 fd51 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b7258:	b300      	cbz	r0, b729c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x250>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b725a:	9809      	ldr	r0, [sp, #36]	; 0x24
   b725c:	220a      	movs	r2, #10
   b725e:	a905      	add	r1, sp, #20
   b7260:	f00b f8fa 	bl	c2458 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b7264:	1e43      	subs	r3, r0, #1
   b7266:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7268:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b726a:	d811      	bhi.n	b7290 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x244>
   b726c:	233c      	movs	r3, #60	; 0x3c
   b726e:	fb93 f3f0 	sdiv	r3, r3, r0
   b7272:	4343      	muls	r3, r0
   b7274:	2b3c      	cmp	r3, #60	; 0x3c
   b7276:	d10b      	bne.n	b7290 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x244>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b7278:	4603      	mov	r3, r0
   b727a:	4a32      	ldr	r2, [pc, #200]	; (b7344 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b727c:	2140      	movs	r1, #64	; 0x40
   b727e:	a811      	add	r0, sp, #68	; 0x44
   b7280:	f006 f8f8 	bl	bd474 <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b7284:	f7ff f91c 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7288:	b2b1      	uxth	r1, r6
   b728a:	f7ff fc46 	bl	b6b1a <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b728e:	e78f      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b7290:	492d      	ldr	r1, [pc, #180]	; (b7348 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b7292:	a811      	add	r0, sp, #68	; 0x44
   b7294:	f00a f949 	bl	c152a <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b7298:	2400      	movs	r4, #0
   b729a:	e789      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b729c:	492b      	ldr	r1, [pc, #172]	; (b734c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b729e:	a80d      	add	r0, sp, #52	; 0x34
   b72a0:	f008 fd2b 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b72a4:	b1b8      	cbz	r0, b72d6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x28a>
   b72a6:	492a      	ldr	r1, [pc, #168]	; (b7350 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b72a8:	a809      	add	r0, sp, #36	; 0x24
   b72aa:	f008 fd26 	bl	bfcfa <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b72ae:	4606      	mov	r6, r0
   b72b0:	b148      	cbz	r0, b72c6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x27a>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b72b2:	4928      	ldr	r1, [pc, #160]	; (b7354 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b72b4:	a811      	add	r0, sp, #68	; 0x44
   b72b6:	f00a f938 	bl	c152a <strcpy>
        sysStatus.set_connectivityMode(3);
   b72ba:	f7ff f901 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b72be:	2103      	movs	r1, #3
        sysStatus.set_connectivityMode(0);
   b72c0:	f7ff faf3 	bl	b68aa <_ZN13sysStatusData20set_connectivityModeEh>
   b72c4:	e774      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b72c6:	4924      	ldr	r1, [pc, #144]	; (b7358 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b72c8:	a811      	add	r0, sp, #68	; 0x44
   b72ca:	f00a f92e 	bl	c152a <strcpy>
        sysStatus.set_connectivityMode(0);
   b72ce:	f7ff f8f7 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b72d2:	4631      	mov	r1, r6
   b72d4:	e7f4      	b.n	b72c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x274>
   b72d6:	4921      	ldr	r1, [pc, #132]	; (b735c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b72d8:	a80d      	add	r0, sp, #52	; 0x34
   b72da:	f008 fd0e 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b72de:	2800      	cmp	r0, #0
   b72e0:	d044      	beq.n	b736c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b72e2:	491f      	ldr	r1, [pc, #124]	; (b7360 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b72e4:	a811      	add	r0, sp, #68	; 0x44
   b72e6:	f00a f920 	bl	c152a <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b72ea:	f7fc ff41 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b72ee:	2101      	movs	r1, #1
   b72f0:	f7fd face 	bl	b4890 <_ZN14LoRA_Functions13printNodeDataEb>
   b72f4:	e75c      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b72f6:	bf00      	nop
   b72f8:	000c5654 	.word	0x000c5654
   b72fc:	000c49ac 	.word	0x000c49ac
   b7300:	2003e650 	.word	0x2003e650
   b7304:	000c454f 	.word	0x000c454f
   b7308:	2003e48c 	.word	0x2003e48c
   b730c:	000c456d 	.word	0x000c456d
   b7310:	000c3ab2 	.word	0x000c3ab2
   b7314:	000c4578 	.word	0x000c4578
   b7318:	000c3b20 	.word	0x000c3b20
   b731c:	000c457e 	.word	0x000c457e
   b7320:	000c45a0 	.word	0x000c45a0
   b7324:	000c45d8 	.word	0x000c45d8
   b7328:	000c42a9 	.word	0x000c42a9
   b732c:	000c45ea 	.word	0x000c45ea
   b7330:	000c45ee 	.word	0x000c45ee
   b7334:	000c461e 	.word	0x000c461e
   b7338:	000c4643 	.word	0x000c4643
   b733c:	000c466f 	.word	0x000c466f
   b7340:	000c4690 	.word	0x000c4690
   b7344:	000c4695 	.word	0x000c4695
   b7348:	000c46bf 	.word	0x000c46bf
   b734c:	000c46df 	.word	0x000c46df
   b7350:	000c46e4 	.word	0x000c46e4
   b7354:	000c46e9 	.word	0x000c46e9
   b7358:	000c471d 	.word	0x000c471d
   b735c:	000c473f 	.word	0x000c473f
   b7360:	000c4743 	.word	0x000c4743
   b7364:	000c4571 	.word	0x000c4571
   b7368:	000c4575 	.word	0x000c4575
   b736c:	4950      	ldr	r1, [pc, #320]	; (b74b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x464>)
   b736e:	a80d      	add	r0, sp, #52	; 0x34
   b7370:	f008 fcc3 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b7374:	b1a8      	cbz	r0, b73a2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x356>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7376:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7378:	220a      	movs	r2, #10
   b737a:	a905      	add	r1, sp, #20
   b737c:	f00b f86c 	bl	c2458 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7380:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7382:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7384:	d80b      	bhi.n	b739e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x352>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b7386:	4603      	mov	r3, r0
   b7388:	4a4a      	ldr	r2, [pc, #296]	; (b74b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x468>)
   b738a:	2140      	movs	r1, #64	; 0x40
   b738c:	a811      	add	r0, sp, #68	; 0x44
   b738e:	f006 f871 	bl	bd474 <snprintf>
        sysStatus.set_openTime(tempValue);
   b7392:	f7ff f895 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7396:	b2f1      	uxtb	r1, r6
   b7398:	f7ff fa9f 	bl	b68da <_ZN13sysStatusData12set_openTimeEh>
   b739c:	e708      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b739e:	4946      	ldr	r1, [pc, #280]	; (b74b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x46c>)
   b73a0:	e777      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b73a2:	4946      	ldr	r1, [pc, #280]	; (b74bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x470>)
   b73a4:	a80d      	add	r0, sp, #52	; 0x34
   b73a6:	f008 fca8 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b73aa:	b1b8      	cbz	r0, b73dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x390>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b73ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   b73ae:	220a      	movs	r2, #10
   b73b0:	a905      	add	r1, sp, #20
   b73b2:	f00b f851 	bl	c2458 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b73b6:	f1a0 030d 	sub.w	r3, r0, #13
   b73ba:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b73bc:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b73be:	d80b      	bhi.n	b73d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38c>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b73c0:	4603      	mov	r3, r0
   b73c2:	4a3f      	ldr	r2, [pc, #252]	; (b74c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x474>)
   b73c4:	2140      	movs	r1, #64	; 0x40
   b73c6:	a811      	add	r0, sp, #68	; 0x44
   b73c8:	f006 f854 	bl	bd474 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b73cc:	f7ff f878 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b73d0:	b2f1      	uxtb	r1, r6
   b73d2:	f7ff fa88 	bl	b68e6 <_ZN13sysStatusData13set_closeTimeEh>
   b73d6:	e6eb      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b73d8:	493a      	ldr	r1, [pc, #232]	; (b74c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x478>)
   b73da:	e75a      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b73dc:	493a      	ldr	r1, [pc, #232]	; (b74c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x47c>)
   b73de:	a80d      	add	r0, sp, #52	; 0x34
   b73e0:	f008 fc8b 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b73e4:	b1e8      	cbz	r0, b7422 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d6>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b73e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   b73e8:	220a      	movs	r2, #10
   b73ea:	a905      	add	r1, sp, #20
   b73ec:	f00b f834 	bl	c2458 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b73f0:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b73f2:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b73f4:	d813      	bhi.n	b741e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d2>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b73f6:	9b04      	ldr	r3, [sp, #16]
   b73f8:	4a34      	ldr	r2, [pc, #208]	; (b74cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x480>)
   b73fa:	9300      	str	r3, [sp, #0]
   b73fc:	2140      	movs	r1, #64	; 0x40
   b73fe:	4603      	mov	r3, r0
   b7400:	a811      	add	r0, sp, #68	; 0x44
   b7402:	f006 f837 	bl	bd474 <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7406:	f7fc feb3 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b740a:	9904      	ldr	r1, [sp, #16]
   b740c:	4632      	mov	r2, r6
   b740e:	f7fd fc89 	bl	b4d24 <_ZN14LoRA_Functions10changeTypeEii>
   b7412:	2800      	cmp	r0, #0
   b7414:	d049      	beq.n	b74aa <_ZN18Particle_Functions18jsonFunctionParserE6String+0x45e>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7416:	f7fc feab 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b741a:	2207      	movs	r2, #7
   b741c:	e70b      	b.n	b7236 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ea>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b741e:	492c      	ldr	r1, [pc, #176]	; (b74d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x484>)
   b7420:	e737      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b7422:	492c      	ldr	r1, [pc, #176]	; (b74d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x488>)
   b7424:	a80d      	add	r0, sp, #52	; 0x34
   b7426:	f008 fc68 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b742a:	b1d0      	cbz	r0, b7462 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x416>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b742c:	9809      	ldr	r0, [sp, #36]	; 0x24
   b742e:	220a      	movs	r2, #10
   b7430:	a905      	add	r1, sp, #20
   b7432:	f00b f811 	bl	c2458 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7436:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7438:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b743a:	d810      	bhi.n	b745e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x412>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b743c:	4a26      	ldr	r2, [pc, #152]	; (b74d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x48c>)
   b743e:	4b27      	ldr	r3, [pc, #156]	; (b74dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x490>)
   b7440:	2140      	movs	r1, #64	; 0x40
   b7442:	2800      	cmp	r0, #0
   b7444:	bf08      	it	eq
   b7446:	4613      	moveq	r3, r2
   b7448:	4a25      	ldr	r2, [pc, #148]	; (b74e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x494>)
   b744a:	a811      	add	r0, sp, #68	; 0x44
   b744c:	f006 f812 	bl	bd474 <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b7450:	f7ff f836 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7454:	f006 0101 	and.w	r1, r6, #1
   b7458:	f7ff fc5b 	bl	b6d12 <_ZN13sysStatusData14set_verizonSIMEb>
   b745c:	e6a8      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b745e:	4921      	ldr	r1, [pc, #132]	; (b74e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x498>)
   b7460:	e717      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b7462:	4921      	ldr	r1, [pc, #132]	; (b74e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x49c>)
   b7464:	a80d      	add	r0, sp, #52	; 0x34
   b7466:	f008 fc48 	bl	bfcfa <_ZNK6String6equalsEPKc>
    else if (function == "pwr") {
   b746a:	b1e0      	cbz	r0, b74a6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x45a>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b746c:	9809      	ldr	r0, [sp, #36]	; 0x24
   b746e:	220a      	movs	r2, #10
   b7470:	a905      	add	r1, sp, #20
   b7472:	f00a fff1 	bl	c2458 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7476:	2801      	cmp	r0, #1
   b7478:	d813      	bhi.n	b74a2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x456>
        snprintf(messaging,sizeof(messaging),"Setting Alert Code to Trigger Reset");
   b747a:	491c      	ldr	r1, [pc, #112]	; (b74ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a0>)
   b747c:	a811      	add	r0, sp, #68	; 0x44
   b747e:	f00a f854 	bl	c152a <strcpy>
        sysStatus.set_alertCodeGateway(1);
   b7482:	f7ff f81d 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7486:	2101      	movs	r1, #1
   b7488:	f7ff fa21 	bl	b68ce <_ZN13sysStatusData20set_alertCodeGatewayEh>
        sysStatus.set_alertTimestampGateway(Time.now());
   b748c:	f7ff f818 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7490:	4606      	mov	r6, r0
   b7492:	f008 fee2 	bl	c025a <_ZN9TimeClass3nowEv>
   b7496:	4602      	mov	r2, r0
   b7498:	17c3      	asrs	r3, r0, #31
   b749a:	4630      	mov	r0, r6
   b749c:	f7ff fb99 	bl	b6bd2 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
   b74a0:	e686      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b74a2:	4913      	ldr	r1, [pc, #76]	; (b74f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a4>)
   b74a4:	e6f5      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b74a6:	4913      	ldr	r1, [pc, #76]	; (b74f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a8>)
   b74a8:	e6f3      	b.n	b7292 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b74aa:	4604      	mov	r4, r0
   b74ac:	e680      	b.n	b71b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b74ae:	bf00      	nop
   b74b0:	000c4189 	.word	0x000c4189
   b74b4:	000c4758 	.word	0x000c4758
   b74b8:	000c4776 	.word	0x000c4776
   b74bc:	000c478f 	.word	0x000c478f
   b74c0:	000c4795 	.word	0x000c4795
   b74c4:	000c47b3 	.word	0x000c47b3
   b74c8:	000c3943 	.word	0x000c3943
   b74cc:	000c47ce 	.word	0x000c47ce
   b74d0:	000c47f4 	.word	0x000c47f4
   b74d4:	000c480f 	.word	0x000c480f
   b74d8:	000c48ef 	.word	0x000c48ef
   b74dc:	000c4547 	.word	0x000c4547
   b74e0:	000c4813 	.word	0x000c4813
   b74e4:	000c4825 	.word	0x000c4825
   b74e8:	000c4855 	.word	0x000c4855
   b74ec:	000c4859 	.word	0x000c4859
   b74f0:	000c487d 	.word	0x000c487d
   b74f4:	000c4898 	.word	0x000c4898

000b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b74f8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b74fa:	e9d0 5300 	ldrd	r5, r3, [r0]
   b74fe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7500:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7502:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7506:	42ae      	cmp	r6, r5
   b7508:	d004      	beq.n	b7514 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b750a:	4628      	mov	r0, r5
   b750c:	f008 fae4 	bl	bfad8 <_ZN6StringD1Ev>
   b7510:	3514      	adds	r5, #20
   b7512:	e7f8      	b.n	b7506 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7514:	6820      	ldr	r0, [r4, #0]
   b7516:	f005 ff8d 	bl	bd434 <free>
    AllocatorT::free(data_);
}
   b751a:	4620      	mov	r0, r4
   b751c:	bd70      	pop	{r4, r5, r6, pc}

000b751e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b751e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7522:	4604      	mov	r4, r0
   b7524:	460d      	mov	r5, r1
   b7526:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7528:	d916      	bls.n	b7558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b752a:	4290      	cmp	r0, r2
   b752c:	d215      	bcs.n	b755a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b752e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7532:	1a75      	subs	r5, r6, r1
   b7534:	f1a1 0714 	sub.w	r7, r1, #20
   b7538:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b753a:	42b7      	cmp	r7, r6
   b753c:	d01c      	beq.n	b7578 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b753e:	b12c      	cbz	r4, b754c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b7540:	4631      	mov	r1, r6
   b7542:	4620      	mov	r0, r4
   b7544:	f008 fb44 	bl	bfbd0 <_ZN6StringC1EOS_>
   b7548:	7c33      	ldrb	r3, [r6, #16]
   b754a:	7423      	strb	r3, [r4, #16]
   b754c:	4630      	mov	r0, r6
   b754e:	f008 fac3 	bl	bfad8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7552:	3e14      	subs	r6, #20
   b7554:	3c14      	subs	r4, #20
   b7556:	e7f0      	b.n	b753a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7558:	d00e      	beq.n	b7578 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b755a:	42b5      	cmp	r5, r6
   b755c:	d00c      	beq.n	b7578 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b755e:	b12c      	cbz	r4, b756c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b7560:	4629      	mov	r1, r5
   b7562:	4620      	mov	r0, r4
   b7564:	f008 fb34 	bl	bfbd0 <_ZN6StringC1EOS_>
   b7568:	7c2b      	ldrb	r3, [r5, #16]
   b756a:	7423      	strb	r3, [r4, #16]
   b756c:	4628      	mov	r0, r5
   b756e:	f008 fab3 	bl	bfad8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7572:	3514      	adds	r5, #20
   b7574:	3414      	adds	r4, #20
   b7576:	e7f0      	b.n	b755a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b7578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b757e:	2300      	movs	r3, #0
   b7580:	e9c0 3300 	strd	r3, r3, [r0]
   b7584:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7586:	684f      	ldr	r7, [r1, #4]
   b7588:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b758a:	4604      	mov	r4, r0
   b758c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b758e:	dd23      	ble.n	b75d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7590:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b7594:	fb08 f007 	mul.w	r0, r8, r7
   b7598:	f005 ff44 	bl	bd424 <malloc>
            if (!d) {
   b759c:	4605      	mov	r5, r0
   b759e:	b1d8      	cbz	r0, b75d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b75a0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b75a4:	fb08 1202 	mla	r2, r8, r2, r1
   b75a8:	f7ff ffb9 	bl	b751e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b75ac:	6820      	ldr	r0, [r4, #0]
   b75ae:	f005 ff41 	bl	bd434 <free>
        data_ = d;
   b75b2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b75b4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b75b6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b75ba:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b75be:	45b8      	cmp	r8, r7
   b75c0:	d008      	beq.n	b75d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b75c2:	4639      	mov	r1, r7
   b75c4:	4628      	mov	r0, r5
   b75c6:	f008 fb1d 	bl	bfc04 <_ZN6StringC1ERKS_>
   b75ca:	7c3b      	ldrb	r3, [r7, #16]
   b75cc:	742b      	strb	r3, [r5, #16]
   b75ce:	3714      	adds	r7, #20
   b75d0:	3514      	adds	r5, #20
   b75d2:	e7f4      	b.n	b75be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b75d4:	6873      	ldr	r3, [r6, #4]
   b75d6:	6063      	str	r3, [r4, #4]
}
   b75d8:	4620      	mov	r0, r4
   b75da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b75e0 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b75e0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b75e2:	4b27      	ldr	r3, [pc, #156]	; (b7680 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b75e4:	4a27      	ldr	r2, [pc, #156]	; (b7684 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b75e6:	2501      	movs	r5, #1
   b75e8:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b75ea:	4b27      	ldr	r3, [pc, #156]	; (b7688 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b75ec:	2400      	movs	r4, #0
   b75ee:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b75f0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b75f2:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b75f6:	2002      	movs	r0, #2
   b75f8:	f005 fdea 	bl	bd1d0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b75fc:	4621      	mov	r1, r4
   b75fe:	4628      	mov	r0, r5
   b7600:	f005 fdfe 	bl	bd200 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b7604:	4629      	mov	r1, r5
   b7606:	2004      	movs	r0, #4
   b7608:	f005 fb50 	bl	bccac <HAL_Feature_Set>
        capacity_(0) {
   b760c:	e9cd 4400 	strd	r4, r4, [sp]
   b7610:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b7612:	f008 ff09 	bl	c0428 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b7616:	4c1d      	ldr	r4, [pc, #116]	; (b768c <_GLOBAL__sub_I_openTimeStr+0xac>)
   b7618:	4605      	mov	r5, r0
   b761a:	4669      	mov	r1, sp
   b761c:	a803      	add	r0, sp, #12
   b761e:	f7ff ffac 	bl	b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7622:	4626      	mov	r6, r4
        stream_(&stream) {
   b7624:	a903      	add	r1, sp, #12
   b7626:	a806      	add	r0, sp, #24
   b7628:	f7ff ffa7 	bl	b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b762c:	4b18      	ldr	r3, [pc, #96]	; (b7690 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b762e:	f846 3b04 	str.w	r3, [r6], #4
   b7632:	a906      	add	r1, sp, #24
   b7634:	a809      	add	r0, sp, #36	; 0x24
   b7636:	f7ff ffa0 	bl	b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b763a:	aa09      	add	r2, sp, #36	; 0x24
   b763c:	211e      	movs	r1, #30
   b763e:	4630      	mov	r0, r6
   b7640:	f007 fba8 	bl	bed94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7644:	a809      	add	r0, sp, #36	; 0x24
   b7646:	f7ff ff57 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b764a:	a806      	add	r0, sp, #24
   b764c:	f7ff ff54 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7650:	4b10      	ldr	r3, [pc, #64]	; (b7694 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b7652:	6023      	str	r3, [r4, #0]
   b7654:	6225      	str	r5, [r4, #32]
   b7656:	a803      	add	r0, sp, #12
   b7658:	f7ff ff4e 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b765c:	4b0e      	ldr	r3, [pc, #56]	; (b7698 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b765e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b7660:	f008 fee2 	bl	c0428 <_Z16_fetch_usbserialv>
   b7664:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7668:	f008 fecc 	bl	c0404 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b766c:	f007 f8a8 	bl	be7c0 <_ZN5spark10LogManager8instanceEv>
   b7670:	4621      	mov	r1, r4
   b7672:	f007 fa65 	bl	beb40 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b7676:	4668      	mov	r0, sp
   b7678:	f7ff ff3e 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b767c:	b00c      	add	sp, #48	; 0x30
   b767e:	bd70      	pop	{r4, r5, r6, pc}
   b7680:	2003e48c 	.word	0x2003e48c
   b7684:	ffff0000 	.word	0xffff0000
   b7688:	2003e480 	.word	0x2003e480
   b768c:	2003e494 	.word	0x2003e494
   b7690:	000c497c 	.word	0x000c497c
   b7694:	000c5684 	.word	0x000c5684
   b7698:	000c4994 	.word	0x000c4994

000b769c <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b769c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76a0:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b76a2:	f008 fdda 	bl	c025a <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b76a6:	4941      	ldr	r1, [pc, #260]	; (b77ac <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b76a8:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b76aa:	4841      	ldr	r0, [pc, #260]	; (b77b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b76ac:	f7fc fd47 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b76b0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b76b2:	a801      	add	r0, sp, #4
   b76b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b76b8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b76bc:	f006 f8fe 	bl	bd8bc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b76c0:	4620      	mov	r0, r4
   b76c2:	f005 fb23 	bl	bcd0c <hal_timer_millis>
        while (_while() && !_condition()) {
   b76c6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b76ca:	4604      	mov	r4, r0
   b76cc:	2000      	movs	r0, #0
   b76ce:	f005 fb1d 	bl	bcd0c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b76d2:	1b03      	subs	r3, r0, r4
   b76d4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b76d8:	42b3      	cmp	r3, r6
   b76da:	f171 0300 	sbcs.w	r3, r1, #0
   b76de:	d205      	bcs.n	b76ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b76e0:	f005 fe00 	bl	bd2e4 <spark_cloud_flag_connected>
   b76e4:	b110      	cbz	r0, b76ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b76e6:	f005 fded 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   b76ea:	e7ef      	b.n	b76cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b76ec:	f005 fdfa 	bl	bd2e4 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   b76f0:	f005 fafc 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b76f4:	4f2f      	ldr	r7, [pc, #188]	; (b77b4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b76f6:	6038      	str	r0, [r7, #0]
    		spark_process();
   b76f8:	f005 fde4 	bl	bd2c4 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b76fc:	f005 fdf2 	bl	bd2e4 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b7700:	4604      	mov	r4, r0
   b7702:	b140      	cbz	r0, b7716 <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b7704:	492c      	ldr	r1, [pc, #176]	; (b77b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b7706:	482a      	ldr	r0, [pc, #168]	; (b77b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7708:	f7fc fd19 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b770c:	2400      	movs	r4, #0
   b770e:	4620      	mov	r0, r4
   b7710:	b005      	add	sp, #20
   b7712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b7716:	f008 fda0 	bl	c025a <_ZN9TimeClass3nowEv>
   b771a:	4928      	ldr	r1, [pc, #160]	; (b77bc <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b771c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b77c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b7720:	1b42      	subs	r2, r0, r5
   b7722:	4823      	ldr	r0, [pc, #140]	; (b77b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7724:	f7fc fd0b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b7728:	f008 fd97 	bl	c025a <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b772c:	4622      	mov	r2, r4
   b772e:	2102      	movs	r1, #2
   b7730:	4606      	mov	r6, r0
   b7732:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7736:	f005 fe25 	bl	bd384 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b773a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b773e:	4623      	mov	r3, r4
   b7740:	4622      	mov	r2, r4
   b7742:	4621      	mov	r1, r4
   b7744:	f005 fe36 	bl	bd3b4 <network_off>
        return hal_timer_millis(nullptr);
   b7748:	4620      	mov	r0, r4
   b774a:	f005 fadf 	bl	bcd0c <hal_timer_millis>
        while (_while() && !_condition()) {
   b774e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b7752:	4605      	mov	r5, r0
   b7754:	2000      	movs	r0, #0
   b7756:	f005 fad9 	bl	bcd0c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b775a:	1b43      	subs	r3, r0, r5
   b775c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b7760:	454b      	cmp	r3, r9
   b7762:	f171 0300 	sbcs.w	r3, r1, #0
   b7766:	d206      	bcs.n	b7776 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b7768:	4640      	mov	r0, r8
   b776a:	f007 fe31 	bl	bf3d0 <_ZN5spark12NetworkClass5isOffEv>
   b776e:	b910      	cbnz	r0, b7776 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b7770:	f005 fda8 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   b7774:	e7ee      	b.n	b7754 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b7776:	4812      	ldr	r0, [pc, #72]	; (b77c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7778:	f007 fe2a 	bl	bf3d0 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b777c:	f005 fab6 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7780:	6038      	str	r0, [r7, #0]
    		spark_process();
   b7782:	f005 fd9f 	bl	bd2c4 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b7786:	480e      	ldr	r0, [pc, #56]	; (b77c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7788:	f007 fe1e 	bl	bf3c8 <_ZN5spark12NetworkClass4isOnEv>
   b778c:	b120      	cbz	r0, b7798 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b778e:	490d      	ldr	r1, [pc, #52]	; (b77c4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b7790:	4807      	ldr	r0, [pc, #28]	; (b77b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7792:	f7fc fcd4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b7796:	e7ba      	b.n	b770e <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b7798:	f008 fd5f 	bl	c025a <_ZN9TimeClass3nowEv>
   b779c:	490a      	ldr	r1, [pc, #40]	; (b77c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b779e:	1b82      	subs	r2, r0, r6
   b77a0:	4803      	ldr	r0, [pc, #12]	; (b77b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b77a2:	f7fc fccc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b77a6:	2401      	movs	r4, #1
   b77a8:	e7b1      	b.n	b770e <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b77aa:	bf00      	nop
   b77ac:	000c48ac 	.word	0x000c48ac
   b77b0:	2003e650 	.word	0x2003e650
   b77b4:	2003e710 	.word	0x2003e710
   b77b8:	000c48d5 	.word	0x000c48d5
   b77bc:	000c48f8 	.word	0x000c48f8
   b77c0:	2003e60c 	.word	0x2003e60c
   b77c4:	000c4921 	.word	0x000c4921
   b77c8:	000c4947 	.word	0x000c4947

000b77cc <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b77cc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b77ce:	4917      	ldr	r1, [pc, #92]	; (b782c <_Z18initializePinModesv+0x60>)
   b77d0:	4817      	ldr	r0, [pc, #92]	; (b7830 <_Z18initializePinModesv+0x64>)
   b77d2:	f7fc fcb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b77d6:	2102      	movs	r1, #2
   b77d8:	2004      	movs	r0, #4
   b77da:	f008 ff3d 	bl	c0658 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b77de:	2100      	movs	r1, #0
   b77e0:	2008      	movs	r0, #8
   b77e2:	f008 ff39 	bl	c0658 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b77e6:	2101      	movs	r1, #1
   b77e8:	2007      	movs	r0, #7
   b77ea:	f008 ff35 	bl	c0658 <pinMode>
    pinMode(INT_PIN, INPUT);
   b77ee:	2100      	movs	r1, #0
   b77f0:	2012      	movs	r0, #18
   b77f2:	f008 ff31 	bl	c0658 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b77f6:	2101      	movs	r1, #1
   b77f8:	2011      	movs	r0, #17
   b77fa:	f008 ff2d 	bl	c0658 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b77fe:	2101      	movs	r1, #1
   b7800:	2010      	movs	r0, #16
   b7802:	f008 ff29 	bl	c0658 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b7806:	2100      	movs	r1, #0
   b7808:	2010      	movs	r0, #16
   b780a:	f008 ff36 	bl	c067a <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b780e:	2100      	movs	r1, #0
   b7810:	2011      	movs	r0, #17
   b7812:	f008 ff32 	bl	c067a <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b7816:	2101      	movs	r1, #1
   b7818:	2006      	movs	r0, #6
   b781a:	f008 ff1d 	bl	c0658 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b781e:	2101      	movs	r1, #1
   b7820:	2006      	movs	r0, #6
   b7822:	f008 ff2a 	bl	c067a <digitalWrite>
    return true;
}
   b7826:	2001      	movs	r0, #1
   b7828:	bd08      	pop	{r3, pc}
   b782a:	bf00      	nop
   b782c:	000c49c4 	.word	0x000c49c4
   b7830:	2003e650 	.word	0x2003e650

000b7834 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b7834:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b7836:	4918      	ldr	r1, [pc, #96]	; (b7898 <_Z18initializePowerCfgv+0x64>)
   b7838:	4818      	ldr	r0, [pc, #96]	; (b789c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b783a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b783c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b783e:	f7fc fc7e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7842:	4622      	mov	r2, r4
   b7844:	2100      	movs	r1, #0
   b7846:	4668      	mov	r0, sp
   b7848:	f009 fdca 	bl	c13e0 <memset>
   b784c:	4622      	mov	r2, r4
   b784e:	2100      	movs	r1, #0
   b7850:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7854:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b7858:	f009 fdc2 	bl	c13e0 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b785c:	2100      	movs	r1, #0
   b785e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7862:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b7866:	f005 fd07 	bl	bd278 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b786a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b786e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b7872:	4b0b      	ldr	r3, [pc, #44]	; (b78a0 <_Z18initializePowerCfgv+0x6c>)
   b7874:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b7876:	f241 0370 	movw	r3, #4208	; 0x1070
   b787a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b787e:	9b00      	ldr	r3, [sp, #0]
   b7880:	2100      	movs	r1, #0
   b7882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b7886:	4668      	mov	r0, sp
   b7888:	9300      	str	r3, [sp, #0]
   b788a:	f005 fcf5 	bl	bd278 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b788e:	3800      	subs	r0, #0
   b7890:	bf18      	it	ne
   b7892:	2001      	movne	r0, #1
   b7894:	b010      	add	sp, #64	; 0x40
   b7896:	bd10      	pop	{r4, pc}
   b7898:	000c49dd 	.word	0x000c49dd
   b789c:	2003e650 	.word	0x2003e650
   b78a0:	03840384 	.word	0x03840384

000b78a4 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b78a4:	ee07 0a90 	vmov	s15, r0
   b78a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b78d0 <_Z17tmp36TemperatureCi+0x2c>
   b78ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b78b0:	ee67 7a87 	vmul.f32	s15, s15, s14
   b78b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; b78d4 <_Z17tmp36TemperatureCi+0x30>
   b78b8:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b78bc:	eddf 7a06 	vldr	s15, [pc, #24]	; b78d8 <_Z17tmp36TemperatureCi+0x34>
   b78c0:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b78c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b78c8:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b78cc:	4770      	bx	lr
   b78ce:	bf00      	nop
   b78d0:	454e4000 	.word	0x454e4000
   b78d4:	457ff000 	.word	0x457ff000
   b78d8:	43fa0000 	.word	0x43fa0000

000b78dc <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b78dc:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b78de:	2101      	movs	r1, #1
   b78e0:	a801      	add	r0, sp, #4
   b78e2:	f007 fe0a 	bl	bf4fa <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b78e6:	f7fe fe33 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b78ea:	f7fe ff97 	bl	b681c <_ZNK17currentStatusData17get_internalTempCEv>
   b78ee:	f7fe fe2f 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b78f2:	f7fe ff93 	bl	b681c <_ZNK17currentStatusData17get_internalTempCEv>
   b78f6:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b78f8:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b78fa:	d90d      	bls.n	b7918 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b78fc:	f007 fe90 	bl	bf620 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b7900:	f7fe fe26 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b7904:	2101      	movs	r1, #1
   b7906:	f7ff f806 	bl	b6916 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b790a:	2400      	movs	r4, #0
  PMIC pmic(true);
   b790c:	a801      	add	r0, sp, #4
   b790e:	f007 fe03 	bl	bf518 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b7912:	4620      	mov	r0, r4
   b7914:	b002      	add	sp, #8
   b7916:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b7918:	f007 fe67 	bl	bf5ea <_ZN4PMIC14enableChargingEv>
    return true;
   b791c:	2401      	movs	r4, #1
   b791e:	e7f5      	b.n	b790c <_Z16isItSafeToChargev+0x30>

000b7920 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b7920:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b7922:	4d1b      	ldr	r5, [pc, #108]	; (b7990 <_Z17getSignalStrengthv+0x70>)
   b7924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b7926:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b7928:	ac10      	add	r4, sp, #64	; 0x40
   b792a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b792c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7930:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7934:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b7938:	4916      	ldr	r1, [pc, #88]	; (b7994 <_Z17getSignalStrengthv+0x74>)
   b793a:	a808      	add	r0, sp, #32
   b793c:	f005 fe6c 	bl	bd618 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b7940:	a808      	add	r0, sp, #32
   b7942:	f005 feac 	bl	bd69e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b7946:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b7948:	a808      	add	r0, sp, #32
   b794a:	f005 fee1 	bl	bd710 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b794e:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b7950:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b7954:	f005 ff0c 	bl	bd770 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b7958:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b795a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b795e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b7962:	f009 f905 	bl	c0b70 <__aeabi_f2d>
   b7966:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b796a:	4628      	mov	r0, r5
   b796c:	f009 f900 	bl	c0b70 <__aeabi_f2d>
   b7970:	e9cd 0100 	strd	r0, r1, [sp]
   b7974:	2110      	movs	r1, #16
   b7976:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b797a:	4a07      	ldr	r2, [pc, #28]	; (b7998 <_Z17getSignalStrengthv+0x78>)
   b797c:	eb0d 0001 	add.w	r0, sp, r1
   b7980:	f005 fd78 	bl	bd474 <snprintf>
  Log.info(signalStr);
   b7984:	4805      	ldr	r0, [pc, #20]	; (b799c <_Z17getSignalStrengthv+0x7c>)
   b7986:	a904      	add	r1, sp, #16
   b7988:	f7fc fbd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b798c:	b01b      	add	sp, #108	; 0x6c
   b798e:	bd30      	pop	{r4, r5, pc}
   b7990:	000c4a84 	.word	0x000c4a84
   b7994:	2003e60c 	.word	0x2003e60c
   b7998:	000c4a42 	.word	0x000c4a42
   b799c:	2003e650 	.word	0x2003e650

000b79a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b79a0:	b530      	push	{r4, r5, lr}
   b79a2:	b085      	sub	sp, #20
   b79a4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b79a6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b79a8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b79aa:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b79ac:	f005 fbfe 	bl	bd1ac <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b79b0:	b990      	cbnz	r0, b79d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b79b2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b79b4:	b10c      	cbz	r4, b79ba <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b79b6:	6923      	ldr	r3, [r4, #16]
   b79b8:	b923      	cbnz	r3, b79c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b79ba:	4a08      	ldr	r2, [pc, #32]	; (b79dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b79bc:	4908      	ldr	r1, [pc, #32]	; (b79e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b79be:	200a      	movs	r0, #10
   b79c0:	f005 fbbc 	bl	bd13c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b79c4:	230c      	movs	r3, #12
   b79c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b79ca:	2304      	movs	r3, #4
   b79cc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b79ce:	aa01      	add	r2, sp, #4
   b79d0:	6923      	ldr	r3, [r4, #16]
   b79d2:	2101      	movs	r1, #1
   b79d4:	4620      	mov	r0, r4
   b79d6:	4798      	blx	r3
}
   b79d8:	b005      	add	sp, #20
   b79da:	bd30      	pop	{r4, r5, pc}
   b79dc:	000bccdd 	.word	0x000bccdd
   b79e0:	000c4a5b 	.word	0x000c4a5b

000b79e4 <_Z12batteryStatev>:
bool batteryState() {
   b79e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b79e6:	4825      	ldr	r0, [pc, #148]	; (b7a7c <_Z12batteryStatev+0x98>)
   b79e8:	4d25      	ldr	r5, [pc, #148]	; (b7a80 <_Z12batteryStatev+0x9c>)
   b79ea:	f006 fa61 	bl	bdeb0 <_ZN9FuelGauge10quickStartEv>
   b79ee:	f005 f97d 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   b79f2:	4604      	mov	r4, r0
   b79f4:	f005 f97a 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b79f8:	1b00      	subs	r0, r0, r4
   b79fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b79fe:	d205      	bcs.n	b7a0c <_Z12batteryStatev+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   b7a00:	f005 f974 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7a04:	6028      	str	r0, [r5, #0]
   b7a06:	f005 fc5d 	bl	bd2c4 <spark_process>
    }
   b7a0a:	e7f3      	b.n	b79f4 <_Z12batteryStatev+0x10>
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b7a0c:	f7fe fda0 	bl	b6550 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b7a10:	a901      	add	r1, sp, #4
   b7a12:	4604      	mov	r4, r0
   b7a14:	2007      	movs	r0, #7
   b7a16:	f7ff ffc3 	bl	b79a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b7a1a:	1e01      	subs	r1, r0, #0
        return val;
   b7a1c:	bfa8      	it	ge
   b7a1e:	9901      	ldrge	r1, [sp, #4]
   b7a20:	4620      	mov	r0, r4
   b7a22:	b2c9      	uxtb	r1, r1
   b7a24:	f7fe ff77 	bl	b6916 <_ZN17currentStatusData16set_batteryStateEh>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b7a28:	f7fe fd92 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b7a2c:	a901      	add	r1, sp, #4
   b7a2e:	4604      	mov	r4, r0
   b7a30:	2003      	movs	r0, #3
   b7a32:	f7ff ffb5 	bl	b79a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b7a36:	b9e8      	cbnz	r0, b7a74 <_Z12batteryStatev+0x90>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b7a38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b7a3c:	ee07 3a90 	vmov	s15, r3
   b7a40:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b7a44:	ee17 0a90 	vmov	r0, s15
   b7a48:	f009 f892 	bl	c0b70 <__aeabi_f2d>
   b7a4c:	ec41 0b10 	vmov	d0, r0, r1
   b7a50:	4620      	mov	r0, r4
   b7a52:	f7fe fdc5 	bl	b65e0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b7a56:	f7fe fd7b 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b7a5a:	f7fe fda1 	bl	b65a0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b7a5e:	4b09      	ldr	r3, [pc, #36]	; (b7a84 <_Z12batteryStatev+0xa0>)
   b7a60:	ec51 0b10 	vmov	r0, r1, d0
   b7a64:	2200      	movs	r2, #0
   b7a66:	f009 fb6b 	bl	c1140 <__aeabi_dcmpgt>
}
   b7a6a:	3800      	subs	r0, #0
   b7a6c:	bf18      	it	ne
   b7a6e:	2001      	movne	r0, #1
   b7a70:	b003      	add	sp, #12
   b7a72:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   b7a74:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b7a78:	e7e4      	b.n	b7a44 <_Z12batteryStatev+0x60>
   b7a7a:	bf00      	nop
   b7a7c:	2003e4b8 	.word	0x2003e4b8
   b7a80:	2003e710 	.word	0x2003e710
   b7a84:	404e0000 	.word	0x404e0000

000b7a88 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b7a88:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b7a8a:	f7fe fd61 	bl	b6550 <_ZN17currentStatusData8instanceEv>
   b7a8e:	4b0f      	ldr	r3, [pc, #60]	; (b7acc <_Z16takeMeasurementsv+0x44>)
   b7a90:	4604      	mov	r4, r0
   b7a92:	8818      	ldrh	r0, [r3, #0]
   b7a94:	f008 fe1d 	bl	c06d2 <analogRead>
   b7a98:	f7ff ff04 	bl	b78a4 <_Z17tmp36TemperatureCi>
   b7a9c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	edcd 7a01 	vstr	s15, [sp, #4]
   b7aa6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b7aaa:	f7fe ff2e 	bl	b690a <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b7aae:	f7ff ff99 	bl	b79e4 <_Z12batteryStatev>
    isItSafeToCharge();
   b7ab2:	f7ff ff13 	bl	b78dc <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b7ab6:	f7fe fd03 	bl	b64c0 <_ZN13sysStatusData8instanceEv>
   b7aba:	f7fe fe7d 	bl	b67b8 <_ZNK13sysStatusData14get_nodeNumberEv>
   b7abe:	b908      	cbnz	r0, b7ac4 <_Z16takeMeasurementsv+0x3c>
   b7ac0:	f7ff ff2e 	bl	b7920 <_Z17getSignalStrengthv>
}
   b7ac4:	2001      	movs	r0, #1
   b7ac6:	b002      	add	sp, #8
   b7ac8:	bd10      	pop	{r4, pc}
   b7aca:	bf00      	nop
   b7acc:	000c4a02 	.word	0x000c4a02

000b7ad0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b7ad0:	4801      	ldr	r0, [pc, #4]	; (b7ad8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b7ad2:	2100      	movs	r1, #0
   b7ad4:	f006 b9a8 	b.w	bde28 <_ZN9FuelGaugeC1Eb>
   b7ad8:	2003e4b8 	.word	0x2003e4b8

000b7adc <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b7adc:	4770      	bx	lr

000b7ade <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b7ade:	b510      	push	{r4, lr}
}
   b7ae0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b7ae2:	4604      	mov	r4, r0
}
   b7ae4:	f7fc fadb 	bl	b409e <_ZdlPvj>
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bd10      	pop	{r4, pc}

000b7aec <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b7aec:	b510      	push	{r4, lr}
   b7aee:	4604      	mov	r4, r0
   b7af0:	b08a      	sub	sp, #40	; 0x28
   b7af2:	4608      	mov	r0, r1
    attr.flags = 0;
   b7af4:	f04f 0c20 	mov.w	ip, #32
   b7af8:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7afa:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b7afe:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7b02:	460b      	mov	r3, r1
   b7b04:	aa02      	add	r2, sp, #8
   b7b06:	6821      	ldr	r1, [r4, #0]
   b7b08:	f005 fb28 	bl	bd15c <log_message_v>
}
   b7b0c:	b00a      	add	sp, #40	; 0x28
   b7b0e:	bd10      	pop	{r4, pc}

000b7b10 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b7b10:	b40e      	push	{r1, r2, r3}
   b7b12:	b503      	push	{r0, r1, lr}
   b7b14:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b7b16:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b7b18:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7b1c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b7b1e:	f7ff ffe5 	bl	b7aec <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7b22:	b002      	add	sp, #8
   b7b24:	f85d eb04 	ldr.w	lr, [sp], #4
   b7b28:	b003      	add	sp, #12
   b7b2a:	4770      	bx	lr

000b7b2c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7b2c:	b40e      	push	{r1, r2, r3}
   b7b2e:	b503      	push	{r0, r1, lr}
   b7b30:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b7b32:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7b34:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7b38:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b7b3a:	f7ff ffd7 	bl	b7aec <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7b3e:	b002      	add	sp, #8
   b7b40:	f85d eb04 	ldr.w	lr, [sp], #4
   b7b44:	b003      	add	sp, #12
   b7b46:	4770      	bx	lr

000b7b48 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b48:	b510      	push	{r4, lr}
   b7b4a:	7202      	strb	r2, [r0, #8]
   b7b4c:	22ff      	movs	r2, #255	; 0xff
   b7b4e:	8142      	strh	r2, [r0, #10]
   b7b50:	2200      	movs	r2, #0
   b7b52:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7b56:	6142      	str	r2, [r0, #20]
   b7b58:	7602      	strb	r2, [r0, #24]
   b7b5a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b7b5c:	4a02      	ldr	r2, [pc, #8]	; (b7b68 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b5e:	4c03      	ldr	r4, [pc, #12]	; (b7b6c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b7b60:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b62:	e9c0 4100 	strd	r4, r1, [r0]
}
   b7b66:	bd10      	pop	{r4, pc}
   b7b68:	2003e4c4 	.word	0x2003e4c4
   b7b6c:	000c4cfc 	.word	0x000c4cfc

000b7b70 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b7b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b74:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b7b78:	4604      	mov	r4, r0
   b7b7a:	4689      	mov	r9, r1
   b7b7c:	4616      	mov	r6, r2
   b7b7e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b7b80:	f1b8 0f00 	cmp.w	r8, #0
   b7b84:	d002      	beq.n	b7b8c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b7b86:	6840      	ldr	r0, [r0, #4]
   b7b88:	f006 fa38 	bl	bdffc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7b8c:	7a21      	ldrb	r1, [r4, #8]
   b7b8e:	6860      	ldr	r0, [r4, #4]
   b7b90:	f006 fa11 	bl	bdfb6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7b94:	6860      	ldr	r0, [r4, #4]
   b7b96:	6803      	ldr	r3, [r0, #0]
   b7b98:	4649      	mov	r1, r9
   b7b9a:	689b      	ldr	r3, [r3, #8]
   b7b9c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7b9e:	6860      	ldr	r0, [r4, #4]
   b7ba0:	2100      	movs	r1, #0
   b7ba2:	f006 fa27 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7ba6:	4605      	mov	r5, r0
   b7ba8:	bb00      	cbnz	r0, b7bec <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7baa:	2301      	movs	r3, #1
   b7bac:	7a21      	ldrb	r1, [r4, #8]
   b7bae:	6860      	ldr	r0, [r4, #4]
   b7bb0:	463a      	mov	r2, r7
   b7bb2:	f006 f9ee 	bl	bdf92 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7bb6:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7bb8:	4603      	mov	r3, r0
        if (count == num) {
   b7bba:	d109      	bne.n	b7bd0 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b7bbc:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b7bbe:	42be      	cmp	r6, r7
   b7bc0:	d01c      	beq.n	b7bfc <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7bc2:	6860      	ldr	r0, [r4, #4]
   b7bc4:	6803      	ldr	r3, [r0, #0]
   b7bc6:	695b      	ldr	r3, [r3, #20]
   b7bc8:	4798      	blx	r3
   b7bca:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7bce:	e7f6      	b.n	b7bbe <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7bd0:	490b      	ldr	r1, [pc, #44]	; (b7c00 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7bd2:	480c      	ldr	r0, [pc, #48]	; (b7c04 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7bd4:	464a      	mov	r2, r9
   b7bd6:	f7ff ff9b 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7bda:	f1b8 0f00 	cmp.w	r8, #0
   b7bde:	d002      	beq.n	b7be6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7be0:	6860      	ldr	r0, [r4, #4]
   b7be2:	f006 fa14 	bl	be00e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7be6:	4628      	mov	r0, r5
   b7be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7bec:	4603      	mov	r3, r0
   b7bee:	4906      	ldr	r1, [pc, #24]	; (b7c08 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7bf0:	4804      	ldr	r0, [pc, #16]	; (b7c04 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7bf2:	464a      	mov	r2, r9
   b7bf4:	f7ff ff8c 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7bf8:	2500      	movs	r5, #0
   b7bfa:	e7ee      	b.n	b7bda <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7bfc:	2501      	movs	r5, #1
   b7bfe:	e7ec      	b.n	b7bda <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7c00:	000c4aac 	.word	0x000c4aac
   b7c04:	2003e4c0 	.word	0x2003e4c0
   b7c08:	000c4ad1 	.word	0x000c4ad1

000b7c0c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7c0c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7c0e:	9300      	str	r3, [sp, #0]
   b7c10:	2301      	movs	r3, #1
   b7c12:	f7ff ffad 	bl	b7b70 <_ZN6AB180513readRegistersEhPhjb>
}
   b7c16:	b003      	add	sp, #12
   b7c18:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c1c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7c1e:	8943      	ldrh	r3, [r0, #10]
   b7c20:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7c22:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7c24:	d010      	beq.n	b7c48 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7c26:	4e19      	ldr	r6, [pc, #100]	; (b7c8c <_ZN6AB180510detectChipEv+0x70>)
   b7c28:	4d19      	ldr	r5, [pc, #100]	; (b7c90 <_ZN6AB180510detectChipEv+0x74>)
   b7c2a:	f005 f85f 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7c2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7c32:	d209      	bcs.n	b7c48 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7c34:	8960      	ldrh	r0, [r4, #10]
   b7c36:	f008 fd39 	bl	c06ac <digitalRead>
   b7c3a:	2801      	cmp	r0, #1
   b7c3c:	d004      	beq.n	b7c48 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7c3e:	4631      	mov	r1, r6
   b7c40:	4628      	mov	r0, r5
   b7c42:	f7fc fa7c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7c46:	e7f0      	b.n	b7c2a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7c48:	2301      	movs	r3, #1
   b7c4a:	f10d 0207 	add.w	r2, sp, #7
   b7c4e:	2128      	movs	r1, #40	; 0x28
   b7c50:	4620      	mov	r0, r4
   b7c52:	f7ff ffdb 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7c56:	b930      	cbnz	r0, b7c66 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7c58:	480d      	ldr	r0, [pc, #52]	; (b7c90 <_ZN6AB180510detectChipEv+0x74>)
   b7c5a:	490e      	ldr	r1, [pc, #56]	; (b7c94 <_ZN6AB180510detectChipEv+0x78>)
   b7c5c:	f7fc fa6f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7c60:	2000      	movs	r0, #0
}
   b7c62:	b002      	add	sp, #8
   b7c64:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7c66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7c6a:	2b18      	cmp	r3, #24
   b7c6c:	d1f4      	bne.n	b7c58 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7c6e:	2301      	movs	r3, #1
   b7c70:	f10d 0207 	add.w	r2, sp, #7
   b7c74:	2129      	movs	r1, #41	; 0x29
   b7c76:	4620      	mov	r0, r4
   b7c78:	f7ff ffc8 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7c7c:	2800      	cmp	r0, #0
   b7c7e:	d0eb      	beq.n	b7c58 <_ZN6AB180510detectChipEv+0x3c>
   b7c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7c84:	2b05      	cmp	r3, #5
   b7c86:	d1e7      	bne.n	b7c58 <_ZN6AB180510detectChipEv+0x3c>
   b7c88:	e7eb      	b.n	b7c62 <_ZN6AB180510detectChipEv+0x46>
   b7c8a:	bf00      	nop
   b7c8c:	000c4af5 	.word	0x000c4af5
   b7c90:	2003e4c0 	.word	0x2003e4c0
   b7c94:	000c4b0a 	.word	0x000c4b0a

000b7c98 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7c98:	b507      	push	{r0, r1, r2, lr}
   b7c9a:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7c9c:	2200      	movs	r2, #0
   b7c9e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7ca2:	f10d 0207 	add.w	r2, sp, #7
   b7ca6:	f7ff ffb1 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b7caa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7cae:	b003      	add	sp, #12
   b7cb0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7cb4 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7cb8:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b7cbc:	4604      	mov	r4, r0
   b7cbe:	460f      	mov	r7, r1
   b7cc0:	4615      	mov	r5, r2
   b7cc2:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7cc4:	f1b8 0f00 	cmp.w	r8, #0
   b7cc8:	d002      	beq.n	b7cd0 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7cca:	6840      	ldr	r0, [r0, #4]
   b7ccc:	f006 f996 	bl	bdffc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7cd0:	7a21      	ldrb	r1, [r4, #8]
   b7cd2:	6860      	ldr	r0, [r4, #4]
   b7cd4:	f006 f96f 	bl	bdfb6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7cd8:	6860      	ldr	r0, [r4, #4]
   b7cda:	6803      	ldr	r3, [r0, #0]
   b7cdc:	4639      	mov	r1, r7
   b7cde:	689b      	ldr	r3, [r3, #8]
   b7ce0:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7ce2:	442e      	add	r6, r5
   b7ce4:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7ce6:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7ce8:	d005      	beq.n	b7cf6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7cea:	6803      	ldr	r3, [r0, #0]
   b7cec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7cf0:	689b      	ldr	r3, [r3, #8]
   b7cf2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7cf4:	e7f6      	b.n	b7ce4 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b7cf6:	2101      	movs	r1, #1
   b7cf8:	f006 f97c 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7cfc:	4603      	mov	r3, r0
   b7cfe:	b170      	cbz	r0, b7d1e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7d00:	4908      	ldr	r1, [pc, #32]	; (b7d24 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b7d02:	4809      	ldr	r0, [pc, #36]	; (b7d28 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b7d04:	463a      	mov	r2, r7
   b7d06:	f7ff ff03 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7d0a:	2500      	movs	r5, #0
    }

    if (lock) {
   b7d0c:	f1b8 0f00 	cmp.w	r8, #0
   b7d10:	d002      	beq.n	b7d18 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b7d12:	6860      	ldr	r0, [r4, #4]
   b7d14:	f006 f97b 	bl	be00e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7d18:	4628      	mov	r0, r5
   b7d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7d1e:	2501      	movs	r5, #1
   b7d20:	e7f4      	b.n	b7d0c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b7d22:	bf00      	nop
   b7d24:	000c4b17 	.word	0x000c4b17
   b7d28:	2003e4c0 	.word	0x2003e4c0

000b7d2c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7d2e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b7d32:	9300      	str	r3, [sp, #0]
   b7d34:	f10d 020f 	add.w	r2, sp, #15
   b7d38:	2301      	movs	r3, #1
   b7d3a:	f7ff ffbb 	bl	b7cb4 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7d3e:	b005      	add	sp, #20
   b7d40:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d44 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b7d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b7d46:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7d48:	460c      	mov	r4, r1
   b7d4a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7d4c:	491a      	ldr	r1, [pc, #104]	; (b7db8 <_ZN6AB18056setWDTEi+0x74>)
   b7d4e:	481b      	ldr	r0, [pc, #108]	; (b7dbc <_ZN6AB18056setWDTEi+0x78>)
   b7d50:	f7fc f9f5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7d54:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b7d56:	bfb8      	it	lt
   b7d58:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7d5a:	b97c      	cbnz	r4, b7d7c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7d5c:	2301      	movs	r3, #1
   b7d5e:	4622      	mov	r2, r4
   b7d60:	211b      	movs	r1, #27
   b7d62:	4628      	mov	r0, r5
   b7d64:	f7ff ffe2 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7d68:	4915      	ldr	r1, [pc, #84]	; (b7dc0 <_ZN6AB18056setWDTEi+0x7c>)
   b7d6a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7d6c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7d6e:	4813      	ldr	r0, [pc, #76]	; (b7dbc <_ZN6AB18056setWDTEi+0x78>)
   b7d70:	f7ff fedc 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7d74:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b7d76:	616c      	str	r4, [r5, #20]
}
   b7d78:	4630      	mov	r0, r6
   b7d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7d7c:	2c03      	cmp	r4, #3
   b7d7e:	dd19      	ble.n	b7db4 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7d80:	10a7      	asrs	r7, r4, #2
   b7d82:	2f1f      	cmp	r7, #31
   b7d84:	bfa8      	it	ge
   b7d86:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7d88:	00ba      	lsls	r2, r7, #2
   b7d8a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7d8e:	2301      	movs	r3, #1
   b7d90:	b2d2      	uxtb	r2, r2
   b7d92:	211b      	movs	r1, #27
   b7d94:	4628      	mov	r0, r5
   b7d96:	f7ff ffc9 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7d9a:	463a      	mov	r2, r7
   b7d9c:	4603      	mov	r3, r0
   b7d9e:	4909      	ldr	r1, [pc, #36]	; (b7dc4 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7da0:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7da2:	4806      	ldr	r0, [pc, #24]	; (b7dbc <_ZN6AB18056setWDTEi+0x78>)
   b7da4:	f7ff fec2 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7da8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7dac:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7dae:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7db0:	616f      	str	r7, [r5, #20]
   b7db2:	e7e1      	b.n	b7d78 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7db4:	2701      	movs	r7, #1
   b7db6:	e7e7      	b.n	b7d88 <_ZN6AB18056setWDTEi+0x44>
   b7db8:	000c4b3c 	.word	0x000c4b3c
   b7dbc:	2003e4c0 	.word	0x2003e4c0
   b7dc0:	000c4b46 	.word	0x000c4b46
   b7dc4:	000c4b62 	.word	0x000c4b62

000b7dc8 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7dc8:	4b06      	ldr	r3, [pc, #24]	; (b7de4 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7dca:	681a      	ldr	r2, [r3, #0]
   b7dcc:	b14a      	cbz	r2, b7de2 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7dce:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7dd2:	430b      	orrs	r3, r1
   b7dd4:	d105      	bne.n	b7de2 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7dd6:	68d3      	ldr	r3, [r2, #12]
   b7dd8:	b11b      	cbz	r3, b7de2 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7dda:	2100      	movs	r1, #0
   b7ddc:	4610      	mov	r0, r2
   b7dde:	f7ff bfb1 	b.w	b7d44 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7de2:	4770      	bx	lr
   b7de4:	2003e4c4 	.word	0x2003e4c4

000b7de8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7de8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7dec:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7df0:	4605      	mov	r5, r0
   b7df2:	4616      	mov	r6, r2
   b7df4:	461f      	mov	r7, r3
    if (lock) {
   b7df6:	f1b8 0f00 	cmp.w	r8, #0
   b7dfa:	d004      	beq.n	b7e06 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7dfc:	6840      	ldr	r0, [r0, #4]
   b7dfe:	9101      	str	r1, [sp, #4]
   b7e00:	f006 f8fc 	bl	bdffc <_ZN7TwoWire4lockEv>
   b7e04:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7e06:	9101      	str	r1, [sp, #4]
   b7e08:	2300      	movs	r3, #0
   b7e0a:	f10d 020f 	add.w	r2, sp, #15
   b7e0e:	4628      	mov	r0, r5
   b7e10:	f7ff fefc 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7e14:	4604      	mov	r4, r0
   b7e16:	b160      	cbz	r0, b7e32 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7e18:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7e1c:	ea03 0206 	and.w	r2, r3, r6
   b7e20:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7e22:	4293      	cmp	r3, r2
   b7e24:	d005      	beq.n	b7e32 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7e26:	9901      	ldr	r1, [sp, #4]
   b7e28:	2300      	movs	r3, #0
   b7e2a:	4628      	mov	r0, r5
   b7e2c:	f7ff ff7e 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
   b7e30:	4604      	mov	r4, r0
    if (lock) {
   b7e32:	f1b8 0f00 	cmp.w	r8, #0
   b7e36:	d002      	beq.n	b7e3e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7e38:	6868      	ldr	r0, [r5, #4]
   b7e3a:	f006 f8e8 	bl	be00e <_ZN7TwoWire6unlockEv>
}
   b7e3e:	4620      	mov	r0, r4
   b7e40:	b004      	add	sp, #16
   b7e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e46 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e46:	b513      	push	{r0, r1, r4, lr}
   b7e48:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7e4a:	f10d 0207 	add.w	r2, sp, #7
   b7e4e:	f7ff fedd 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7e52:	b128      	cbz	r0, b7e60 <_ZN6AB180510isBitClearEhhb+0x1a>
   b7e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7e58:	421c      	tst	r4, r3
   b7e5a:	bf0c      	ite	eq
   b7e5c:	2001      	moveq	r0, #1
   b7e5e:	2000      	movne	r0, #0
}
   b7e60:	b002      	add	sp, #8
   b7e62:	bd10      	pop	{r4, pc}

000b7e64 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e64:	b513      	push	{r0, r1, r4, lr}
   b7e66:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7e68:	f10d 0207 	add.w	r2, sp, #7
   b7e6c:	f7ff fece 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7e70:	b128      	cbz	r0, b7e7e <_ZN6AB18058isBitSetEhhb+0x1a>
   b7e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7e76:	421c      	tst	r4, r3
   b7e78:	bf14      	ite	ne
   b7e7a:	2001      	movne	r0, #1
   b7e7c:	2000      	moveq	r0, #0
}
   b7e7e:	b002      	add	sp, #8
   b7e80:	bd10      	pop	{r4, pc}

000b7e82 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e82:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7e84:	43d2      	mvns	r2, r2
   b7e86:	9300      	str	r3, [sp, #0]
   b7e88:	b2d2      	uxtb	r2, r2
   b7e8a:	2300      	movs	r3, #0
   b7e8c:	f7ff ffac 	bl	b7de8 <_ZN6AB180512maskRegisterEhhhb>
}
   b7e90:	b003      	add	sp, #12
   b7e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7e98 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7e9a:	2301      	movs	r3, #1
   b7e9c:	f10d 0207 	add.w	r2, sp, #7
   b7ea0:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7ea2:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7ea4:	f7ff feb2 	bl	b7c0c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7ea8:	4605      	mov	r5, r0
   b7eaa:	b938      	cbnz	r0, b7ebc <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7eac:	491e      	ldr	r1, [pc, #120]	; (b7f28 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7eae:	481f      	ldr	r0, [pc, #124]	; (b7f2c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7eb0:	22ad      	movs	r2, #173	; 0xad
   b7eb2:	f7ff fe2d 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
}
   b7eb6:	4628      	mov	r0, r5
   b7eb8:	b003      	add	sp, #12
   b7eba:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7ec0:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7ec4:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7ec8:	d00b      	beq.n	b7ee2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7eca:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7ecc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7ece:	210f      	movs	r1, #15
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	f7ff ffd6 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7ed6:	4a16      	ldr	r2, [pc, #88]	; (b7f30 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7ed8:	4916      	ldr	r1, [pc, #88]	; (b7f34 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7eda:	4814      	ldr	r0, [pc, #80]	; (b7f2c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7edc:	f7fc f92f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7ee0:	e7e9      	b.n	b7eb6 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7ee2:	2208      	movs	r2, #8
   b7ee4:	2117      	movs	r1, #23
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff ffbc 	bl	b7e64 <_ZN6AB18058isBitSetEhhb>
   b7eec:	b118      	cbz	r0, b7ef6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7eee:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7ef0:	4a11      	ldr	r2, [pc, #68]	; (b7f38 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7ef2:	61e3      	str	r3, [r4, #28]
   b7ef4:	e7f0      	b.n	b7ed8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7efa:	071a      	lsls	r2, r3, #28
   b7efc:	d509      	bpl.n	b7f12 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7efe:	2303      	movs	r3, #3
   b7f00:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7f02:	2208      	movs	r2, #8
   b7f04:	2301      	movs	r3, #1
   b7f06:	210f      	movs	r1, #15
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7ff ffba 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7f0e:	4a0b      	ldr	r2, [pc, #44]	; (b7f3c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7f10:	e7e2      	b.n	b7ed8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7f12:	075b      	lsls	r3, r3, #29
   b7f14:	d5cf      	bpl.n	b7eb6 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7f16:	2204      	movs	r2, #4
   b7f18:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7f1a:	2301      	movs	r3, #1
   b7f1c:	210f      	movs	r1, #15
   b7f1e:	4620      	mov	r0, r4
   b7f20:	f7ff ffaf 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7f24:	4a06      	ldr	r2, [pc, #24]	; (b7f40 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7f26:	e7d7      	b.n	b7ed8 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7f28:	000c4bb5 	.word	0x000c4bb5
   b7f2c:	2003e4c0 	.word	0x2003e4c0
   b7f30:	000c4b86 	.word	0x000c4b86
   b7f34:	000c4bd4 	.word	0x000c4bd4
   b7f38:	000c4b8f 	.word	0x000c4b8f
   b7f3c:	000c4b9f 	.word	0x000c4b9f
   b7f40:	000c4baf 	.word	0x000c4baf

000b7f44 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7f44:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7f46:	9300      	str	r3, [sp, #0]
   b7f48:	4613      	mov	r3, r2
   b7f4a:	22ff      	movs	r2, #255	; 0xff
   b7f4c:	f7ff ff4c 	bl	b7de8 <_ZN6AB180512maskRegisterEhhhb>
}
   b7f50:	b003      	add	sp, #12
   b7f52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7f58 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f5a:	460f      	mov	r7, r1
   b7f5c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7f5e:	2301      	movs	r3, #1
   b7f60:	2200      	movs	r2, #0
   b7f62:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7f64:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7f66:	f7ff fee1 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f6a:	4604      	mov	r4, r0
   b7f6c:	b938      	cbnz	r0, b7f7e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7f6e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7f72:	491f      	ldr	r1, [pc, #124]	; (b7ff0 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7f74:	481f      	ldr	r0, [pc, #124]	; (b7ff4 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7f76:	f7ff fdcb 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
}
   b7f7a:	4620      	mov	r0, r4
   b7f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7f7e:	2301      	movs	r3, #1
   b7f80:	2223      	movs	r2, #35	; 0x23
   b7f82:	2118      	movs	r1, #24
   b7f84:	4628      	mov	r0, r5
   b7f86:	f7ff fed1 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f8a:	4604      	mov	r4, r0
   b7f8c:	b910      	cbnz	r0, b7f94 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7f8e:	f240 229b 	movw	r2, #667	; 0x29b
   b7f92:	e7ee      	b.n	b7f72 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7f94:	2fff      	cmp	r7, #255	; 0xff
   b7f96:	bfa8      	it	ge
   b7f98:	27ff      	movge	r7, #255	; 0xff
   b7f9a:	2f01      	cmp	r7, #1
   b7f9c:	bfb8      	it	lt
   b7f9e:	2701      	movlt	r7, #1
   b7fa0:	2301      	movs	r3, #1
   b7fa2:	b2fa      	uxtb	r2, r7
   b7fa4:	2119      	movs	r1, #25
   b7fa6:	4628      	mov	r0, r5
   b7fa8:	f7ff fec0 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7fac:	4604      	mov	r4, r0
   b7fae:	b910      	cbnz	r0, b7fb6 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7fb0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7fb4:	e7dd      	b.n	b7f72 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7fb6:	2301      	movs	r3, #1
   b7fb8:	2208      	movs	r2, #8
   b7fba:	2112      	movs	r1, #18
   b7fbc:	4628      	mov	r0, r5
   b7fbe:	f7ff ffc1 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7fc2:	4604      	mov	r4, r0
   b7fc4:	b910      	cbnz	r0, b7fcc <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7fc6:	f240 22af 	movw	r2, #687	; 0x2af
   b7fca:	e7d2      	b.n	b7f72 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7fcc:	2e00      	cmp	r6, #0
   b7fce:	bf14      	ite	ne
   b7fd0:	2203      	movne	r2, #3
   b7fd2:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7fd4:	2301      	movs	r3, #1
   b7fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7fda:	2118      	movs	r1, #24
   b7fdc:	4628      	mov	r0, r5
   b7fde:	f7ff fea5 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7fe2:	4604      	mov	r4, r0
   b7fe4:	2800      	cmp	r0, #0
   b7fe6:	d1c8      	bne.n	b7f7a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7fe8:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7fec:	e7c1      	b.n	b7f72 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7fee:	bf00      	nop
   b7ff0:	000c4be5 	.word	0x000c4be5
   b7ff4:	2003e4c0 	.word	0x2003e4c0

000b7ff8 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7ffc:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7ffe:	4605      	mov	r5, r0
   b8000:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b8002:	484f      	ldr	r0, [pc, #316]	; (b8140 <_ZN6AB180513deepPowerDownEi+0x148>)
   b8004:	494f      	ldr	r1, [pc, #316]	; (b8144 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b8006:	f7fc f89a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b800a:	2100      	movs	r1, #0
   b800c:	4628      	mov	r0, r5
   b800e:	f7ff fe99 	bl	b7d44 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b8012:	4604      	mov	r4, r0
   b8014:	b948      	cbnz	r0, b802a <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b8016:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b801a:	494b      	ldr	r1, [pc, #300]	; (b8148 <_ZN6AB180513deepPowerDownEi+0x150>)
   b801c:	4848      	ldr	r0, [pc, #288]	; (b8140 <_ZN6AB180513deepPowerDownEi+0x148>)
   b801e:	f7ff fd77 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
}
   b8022:	4620      	mov	r0, r4
   b8024:	b003      	add	sp, #12
   b8026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b802a:	2301      	movs	r3, #1
   b802c:	461a      	mov	r2, r3
   b802e:	2130      	movs	r1, #48	; 0x30
   b8030:	4628      	mov	r0, r5
   b8032:	f7ff ff87 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b8036:	4604      	mov	r4, r0
   b8038:	b910      	cbnz	r0, b8040 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b803a:	f240 2205 	movw	r2, #517	; 0x205
   b803e:	e7ec      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b8040:	2210      	movs	r2, #16
   b8042:	2301      	movs	r3, #1
   b8044:	4611      	mov	r1, r2
   b8046:	4628      	mov	r0, r5
   b8048:	f7ff ff1b 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b804c:	4604      	mov	r4, r0
   b804e:	b910      	cbnz	r0, b8056 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b8050:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b8054:	e7e1      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b8056:	2301      	movs	r3, #1
   b8058:	2226      	movs	r2, #38	; 0x26
   b805a:	2113      	movs	r1, #19
   b805c:	4628      	mov	r0, r5
   b805e:	f7ff fe65 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b8062:	4604      	mov	r4, r0
   b8064:	b910      	cbnz	r0, b806c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b8066:	f240 2213 	movw	r2, #531	; 0x213
   b806a:	e7d6      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b806c:	2601      	movs	r6, #1
   b806e:	9600      	str	r6, [sp, #0]
   b8070:	4633      	mov	r3, r6
   b8072:	22fc      	movs	r2, #252	; 0xfc
   b8074:	2111      	movs	r1, #17
   b8076:	4628      	mov	r0, r5
   b8078:	f7ff feb6 	bl	b7de8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b807c:	4604      	mov	r4, r0
   b807e:	b910      	cbnz	r0, b8086 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b8080:	f240 221b 	movw	r2, #539	; 0x21b
   b8084:	e7c9      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b8086:	2200      	movs	r2, #0
   b8088:	4639      	mov	r1, r7
   b808a:	4628      	mov	r0, r5
   b808c:	f7ff ff64 	bl	b7f58 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b8090:	4604      	mov	r4, r0
   b8092:	b910      	cbnz	r0, b809a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b8094:	f240 2222 	movw	r2, #546	; 0x222
   b8098:	e7bf      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b809a:	9600      	str	r6, [sp, #0]
   b809c:	2302      	movs	r3, #2
   b809e:	2277      	movs	r2, #119	; 0x77
   b80a0:	2110      	movs	r1, #16
   b80a2:	4628      	mov	r0, r5
   b80a4:	f7ff fea0 	bl	b7de8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b80a8:	4604      	mov	r4, r0
   b80aa:	b910      	cbnz	r0, b80b2 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b80ac:	f240 222b 	movw	r2, #555	; 0x22b
   b80b0:	e7b3      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b80b2:	4633      	mov	r3, r6
   b80b4:	2204      	movs	r2, #4
   b80b6:	211c      	movs	r1, #28
   b80b8:	4628      	mov	r0, r5
   b80ba:	f7ff ff43 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b80be:	4604      	mov	r4, r0
   b80c0:	b910      	cbnz	r0, b80c8 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b80c2:	f240 2232 	movw	r2, #562	; 0x232
   b80c6:	e7a8      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b80c8:	9600      	str	r6, [sp, #0]
   b80ca:	2318      	movs	r3, #24
   b80cc:	22e3      	movs	r2, #227	; 0xe3
   b80ce:	2111      	movs	r1, #17
   b80d0:	4628      	mov	r0, r5
   b80d2:	f7ff fe89 	bl	b7de8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b80d6:	4604      	mov	r4, r0
   b80d8:	b910      	cbnz	r0, b80e0 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b80da:	f240 2239 	movw	r2, #569	; 0x239
   b80de:	e79c      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b80e0:	4633      	mov	r3, r6
   b80e2:	22c0      	movs	r2, #192	; 0xc0
   b80e4:	2117      	movs	r1, #23
   b80e6:	4628      	mov	r0, r5
   b80e8:	f7ff fe20 	bl	b7d2c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b80ec:	4604      	mov	r4, r0
   b80ee:	b910      	cbnz	r0, b80f6 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b80f0:	f44f 7210 	mov.w	r2, #576	; 0x240
   b80f4:	e791      	b.n	b801a <_ZN6AB180513deepPowerDownEi+0x22>
   b80f6:	f004 fdf9 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b80fa:	f8df 9054 	ldr.w	r9, [pc, #84]	; b8150 <_ZN6AB180513deepPowerDownEi+0x158>
   b80fe:	f8df 8040 	ldr.w	r8, [pc, #64]	; b8140 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b8102:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b8106:	4606      	mov	r6, r0
   b8108:	434f      	muls	r7, r1
   b810a:	f004 fdef 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   b810e:	1b80      	subs	r0, r0, r6
   b8110:	42b8      	cmp	r0, r7
   b8112:	d20e      	bcs.n	b8132 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b8114:	2201      	movs	r2, #1
   b8116:	2117      	movs	r1, #23
   b8118:	4628      	mov	r0, r5
   b811a:	f7ff fdbd 	bl	b7c98 <_ZN6AB180512readRegisterEhb>
   b811e:	4649      	mov	r1, r9
   b8120:	4602      	mov	r2, r0
   b8122:	4640      	mov	r0, r8
   b8124:	f7fc f80b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b8128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b812c:	f005 f9fa 	bl	bd524 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b8130:	e7eb      	b.n	b810a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b8132:	4906      	ldr	r1, [pc, #24]	; (b814c <_ZN6AB180513deepPowerDownEi+0x154>)
   b8134:	4802      	ldr	r0, [pc, #8]	; (b8140 <_ZN6AB180513deepPowerDownEi+0x148>)
   b8136:	f7ff fceb 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b813a:	f007 fe9a 	bl	bfe72 <_ZN11SystemClass5resetEv>
    return true;
   b813e:	e770      	b.n	b8022 <_ZN6AB180513deepPowerDownEi+0x2a>
   b8140:	2003e4c0 	.word	0x2003e4c0
   b8144:	000c4c10 	.word	0x000c4c10
   b8148:	000c4c05 	.word	0x000c4c05
   b814c:	000c4c36 	.word	0x000c4c36
   b8150:	000c4c21 	.word	0x000c4c21

000b8154 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b8154:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8158:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b815c:	4605      	mov	r5, r0
   b815e:	460c      	mov	r4, r1
   b8160:	4691      	mov	r9, r2
   b8162:	461f      	mov	r7, r3
    if (lock) {
   b8164:	f1ba 0f00 	cmp.w	sl, #0
   b8168:	d002      	beq.n	b8170 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b816a:	6840      	ldr	r0, [r0, #4]
   b816c:	f005 ff46 	bl	bdffc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b8170:	b307      	cbz	r7, b81b4 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b8172:	2f20      	cmp	r7, #32
   b8174:	463e      	mov	r6, r7
   b8176:	bf28      	it	cs
   b8178:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b817a:	2c7f      	cmp	r4, #127	; 0x7f
   b817c:	d826      	bhi.n	b81cc <_ZN6AB18057readRamEjPhjb+0x78>
   b817e:	1933      	adds	r3, r6, r4
   b8180:	2b80      	cmp	r3, #128	; 0x80
   b8182:	d901      	bls.n	b8188 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b8184:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8188:	2301      	movs	r3, #1
   b818a:	2204      	movs	r2, #4
   b818c:	213f      	movs	r1, #63	; 0x3f
   b818e:	4628      	mov	r0, r5
   b8190:	f7ff fe77 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8194:	2300      	movs	r3, #0
   b8196:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b819a:	9300      	str	r3, [sp, #0]
   b819c:	464a      	mov	r2, r9
   b819e:	4633      	mov	r3, r6
   b81a0:	b2c9      	uxtb	r1, r1
   b81a2:	4628      	mov	r0, r5
   b81a4:	f7ff fce4 	bl	b7b70 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b81a8:	4680      	mov	r8, r0
   b81aa:	b128      	cbz	r0, b81b8 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b81ac:	4434      	add	r4, r6
        dataLen -= count;
   b81ae:	1bbf      	subs	r7, r7, r6
        data += count;
   b81b0:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b81b2:	e7dd      	b.n	b8170 <_ZN6AB18057readRamEjPhjb+0x1c>
   b81b4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b81b8:	f1ba 0f00 	cmp.w	sl, #0
   b81bc:	d002      	beq.n	b81c4 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b81be:	6868      	ldr	r0, [r5, #4]
   b81c0:	f005 ff25 	bl	be00e <_ZN7TwoWire6unlockEv>
}
   b81c4:	4640      	mov	r0, r8
   b81c6:	b002      	add	sp, #8
   b81c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b81cc:	2301      	movs	r3, #1
   b81ce:	2204      	movs	r2, #4
   b81d0:	213f      	movs	r1, #63	; 0x3f
   b81d2:	4628      	mov	r0, r5
   b81d4:	f7ff feb6 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
   b81d8:	e7dc      	b.n	b8194 <_ZN6AB18057readRamEjPhjb+0x40>

000b81da <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b81da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b81de:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b81e2:	4605      	mov	r5, r0
   b81e4:	460c      	mov	r4, r1
   b81e6:	4691      	mov	r9, r2
   b81e8:	461f      	mov	r7, r3
    if (lock) {
   b81ea:	f1ba 0f00 	cmp.w	sl, #0
   b81ee:	d002      	beq.n	b81f6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b81f0:	6840      	ldr	r0, [r0, #4]
   b81f2:	f005 ff03 	bl	bdffc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b81f6:	b307      	cbz	r7, b823a <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b81f8:	2f1f      	cmp	r7, #31
   b81fa:	463e      	mov	r6, r7
   b81fc:	bf28      	it	cs
   b81fe:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8200:	2c7f      	cmp	r4, #127	; 0x7f
   b8202:	d826      	bhi.n	b8252 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b8204:	1933      	adds	r3, r6, r4
   b8206:	2b80      	cmp	r3, #128	; 0x80
   b8208:	d901      	bls.n	b820e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b820a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b820e:	2301      	movs	r3, #1
   b8210:	2204      	movs	r2, #4
   b8212:	213f      	movs	r1, #63	; 0x3f
   b8214:	4628      	mov	r0, r5
   b8216:	f7ff fe34 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b821a:	2300      	movs	r3, #0
   b821c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8220:	9300      	str	r3, [sp, #0]
   b8222:	464a      	mov	r2, r9
   b8224:	4633      	mov	r3, r6
   b8226:	b2c9      	uxtb	r1, r1
   b8228:	4628      	mov	r0, r5
   b822a:	f7ff fd43 	bl	b7cb4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b822e:	4680      	mov	r8, r0
   b8230:	b128      	cbz	r0, b823e <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b8232:	4434      	add	r4, r6
        dataLen -= count;
   b8234:	1bbf      	subs	r7, r7, r6
        data += count;
   b8236:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b8238:	e7dd      	b.n	b81f6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b823a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b823e:	f1ba 0f00 	cmp.w	sl, #0
   b8242:	d002      	beq.n	b824a <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b8244:	6868      	ldr	r0, [r5, #4]
   b8246:	f005 fee2 	bl	be00e <_ZN7TwoWire6unlockEv>
}
   b824a:	4640      	mov	r0, r8
   b824c:	b002      	add	sp, #8
   b824e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8252:	2301      	movs	r3, #1
   b8254:	2204      	movs	r2, #4
   b8256:	213f      	movs	r1, #63	; 0x3f
   b8258:	4628      	mov	r0, r5
   b825a:	f7ff fe73 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
   b825e:	e7dc      	b.n	b821a <_ZN6AB18058writeRamEjPKhjb+0x40>

000b8260 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b8260:	b530      	push	{r4, r5, lr}
   b8262:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b8264:	680d      	ldr	r5, [r1, #0]
   b8266:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b826a:	9503      	str	r5, [sp, #12]
   b826c:	684d      	ldr	r5, [r1, #4]
   b826e:	9502      	str	r5, [sp, #8]
   b8270:	688d      	ldr	r5, [r1, #8]
   b8272:	9501      	str	r5, [sp, #4]
   b8274:	68c9      	ldr	r1, [r1, #12]
   b8276:	9100      	str	r1, [sp, #0]
   b8278:	3301      	adds	r3, #1
   b827a:	4904      	ldr	r1, [pc, #16]	; (b828c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b827c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b8280:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b8282:	f007 fd8f 	bl	bfda4 <_ZN6String6formatEPKcz>
}
   b8286:	4620      	mov	r0, r4
   b8288:	b005      	add	sp, #20
   b828a:	bd30      	pop	{r4, r5, pc}
   b828c:	000c4c48 	.word	0x000c4c48

000b8290 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8290:	0903      	lsrs	r3, r0, #4
}
   b8292:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8294:	f000 000f 	and.w	r0, r0, #15
}
   b8298:	fb02 0003 	mla	r0, r2, r3, r0
   b829c:	4770      	bx	lr

000b829e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b829e:	b538      	push	{r3, r4, r5, lr}
   b82a0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b82a2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b82a4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b82a6:	f7ff fff3 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82aa:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b82ac:	7860      	ldrb	r0, [r4, #1]
   b82ae:	f7ff ffef 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82b2:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b82b4:	78a0      	ldrb	r0, [r4, #2]
   b82b6:	f7ff ffeb 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82ba:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b82bc:	78e0      	ldrb	r0, [r4, #3]
   b82be:	f7ff ffe7 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82c2:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b82c4:	7920      	ldrb	r0, [r4, #4]
   b82c6:	f7ff ffe3 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82ca:	3801      	subs	r0, #1
   b82cc:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b82ce:	b92d      	cbnz	r5, b82dc <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b82d0:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b82d2:	7828      	ldrb	r0, [r5, #0]
   b82d4:	f7ff ffdc 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82d8:	6188      	str	r0, [r1, #24]
}
   b82da:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b82dc:	7960      	ldrb	r0, [r4, #5]
   b82de:	f7ff ffd7 	bl	b8290 <_ZN6AB180510bcdToValueEh>
   b82e2:	3064      	adds	r0, #100	; 0x64
   b82e4:	1da5      	adds	r5, r4, #6
   b82e6:	6148      	str	r0, [r1, #20]
   b82e8:	e7f3      	b.n	b82d2 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b82ec <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82ec:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82ee:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82f0:	b088      	sub	sp, #32
   b82f2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82f4:	461a      	mov	r2, r3
   b82f6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82f8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82fa:	f7ff fda4 	bl	b7e46 <_ZN6AB180510isBitClearEhhb>
   b82fe:	b1f0      	cbz	r0, b833e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b8300:	2308      	movs	r3, #8
   b8302:	2601      	movs	r6, #1
   b8304:	4620      	mov	r0, r4
   b8306:	9600      	str	r6, [sp, #0]
   b8308:	eb0d 0203 	add.w	r2, sp, r3
   b830c:	2100      	movs	r1, #0
   b830e:	f7ff fc2f 	bl	b7b70 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b8312:	4604      	mov	r4, r0
   b8314:	b198      	cbz	r0, b833e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b8316:	4632      	mov	r2, r6
   b8318:	4629      	mov	r1, r5
   b831a:	f10d 0009 	add.w	r0, sp, #9
   b831e:	f7ff ffbe 	bl	b829e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b8322:	a804      	add	r0, sp, #16
   b8324:	f7ff ff9c 	bl	b8260 <_ZN6AB180510tmToStringEPK2tm>
   b8328:	4808      	ldr	r0, [pc, #32]	; (b834c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b832a:	9a04      	ldr	r2, [sp, #16]
   b832c:	4908      	ldr	r1, [pc, #32]	; (b8350 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b832e:	f7fb ff06 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b8332:	a804      	add	r0, sp, #16
   b8334:	f007 fbd0 	bl	bfad8 <_ZN6StringD1Ev>
}
   b8338:	4620      	mov	r0, r4
   b833a:	b008      	add	sp, #32
   b833c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b833e:	2224      	movs	r2, #36	; 0x24
   b8340:	2100      	movs	r1, #0
   b8342:	4628      	mov	r0, r5
   b8344:	f009 f84c 	bl	c13e0 <memset>
   b8348:	2400      	movs	r4, #0
   b834a:	e7f5      	b.n	b8338 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b834c:	2003e4c0 	.word	0x2003e4c0
   b8350:	000c4c66 	.word	0x000c4c66

000b8354 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b8354:	b530      	push	{r4, r5, lr}
   b8356:	b08b      	sub	sp, #44	; 0x2c
   b8358:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b835a:	a901      	add	r1, sp, #4
   b835c:	f7ff ffc6 	bl	b82ec <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b8360:	4604      	mov	r4, r0
   b8362:	b120      	cbz	r0, b836e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b8364:	a801      	add	r0, sp, #4
   b8366:	f005 f8d5 	bl	bd514 <mktime>
   b836a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b836e:	4620      	mov	r0, r4
   b8370:	b00b      	add	sp, #44	; 0x2c
   b8372:	bd30      	pop	{r4, r5, pc}

000b8374 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b8374:	230a      	movs	r3, #10
   b8376:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b837a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b837e:	fb91 f2f3 	sdiv	r2, r1, r3
   b8382:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b8386:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b838a:	b2c0      	uxtb	r0, r0
   b838c:	4770      	bx	lr

000b838e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b838e:	b570      	push	{r4, r5, r6, lr}
   b8390:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b8392:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8394:	460c      	mov	r4, r1
   b8396:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8398:	f7ff ffec 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b839c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b839e:	6868      	ldr	r0, [r5, #4]
   b83a0:	f7ff ffe8 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83a4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b83a6:	68a8      	ldr	r0, [r5, #8]
   b83a8:	f7ff ffe4 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83ac:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b83ae:	68e8      	ldr	r0, [r5, #12]
   b83b0:	f7ff ffe0 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83b4:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b83b6:	6928      	ldr	r0, [r5, #16]
   b83b8:	3001      	adds	r0, #1
   b83ba:	f7ff ffdb 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83be:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b83c0:	b92e      	cbnz	r6, b83ce <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b83c2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b83c4:	69a8      	ldr	r0, [r5, #24]
   b83c6:	f7ff ffd5 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83ca:	7030      	strb	r0, [r6, #0]
}
   b83cc:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b83ce:	696a      	ldr	r2, [r5, #20]
   b83d0:	2364      	movs	r3, #100	; 0x64
   b83d2:	fb92 f0f3 	sdiv	r0, r2, r3
   b83d6:	fb03 2010 	mls	r0, r3, r0, r2
   b83da:	f7ff ffcb 	bl	b8374 <_ZN6AB180510valueToBcdEi>
   b83de:	1da6      	adds	r6, r4, #6
   b83e0:	7160      	strb	r0, [r4, #5]
   b83e2:	e7ef      	b.n	b83c4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b83e4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b83e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83e6:	b087      	sub	sp, #28
   b83e8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b83ea:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b83ec:	4616      	mov	r6, r2
   b83ee:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b83f0:	f7ff ff36 	bl	b8260 <_ZN6AB180510tmToStringEPK2tm>
   b83f4:	481e      	ldr	r0, [pc, #120]	; (b8470 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b83f6:	9a02      	ldr	r2, [sp, #8]
   b83f8:	491e      	ldr	r1, [pc, #120]	; (b8474 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b83fa:	f7fb fea0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b83fe:	a802      	add	r0, sp, #8
   b8400:	f007 fb6a 	bl	bfad8 <_ZN6StringD1Ev>
    if (lock) {
   b8404:	b116      	cbz	r6, b840c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b8406:	6868      	ldr	r0, [r5, #4]
   b8408:	f005 fdf8 	bl	bdffc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b840c:	4620      	mov	r0, r4
   b840e:	2201      	movs	r2, #1
   b8410:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b8414:	2700      	movs	r7, #0
   b8416:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b841a:	f7ff ffb8 	bl	b838e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b841e:	2301      	movs	r3, #1
   b8420:	461a      	mov	r2, r3
   b8422:	2110      	movs	r1, #16
   b8424:	4628      	mov	r0, r5
   b8426:	f7ff fd8d 	bl	b7f44 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b842a:	4604      	mov	r4, r0
   b842c:	b1e8      	cbz	r0, b846a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b842e:	2308      	movs	r3, #8
   b8430:	9700      	str	r7, [sp, #0]
   b8432:	eb0d 0203 	add.w	r2, sp, r3
   b8436:	4639      	mov	r1, r7
   b8438:	4628      	mov	r0, r5
   b843a:	f7ff fc3b 	bl	b7cb4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b843e:	4604      	mov	r4, r0
   b8440:	b160      	cbz	r0, b845c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8442:	2301      	movs	r3, #1
   b8444:	461a      	mov	r2, r3
   b8446:	2110      	movs	r1, #16
   b8448:	4628      	mov	r0, r5
   b844a:	f7ff fd1a 	bl	b7e82 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b844e:	b116      	cbz	r6, b8456 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b8450:	6868      	ldr	r0, [r5, #4]
   b8452:	f005 fddc 	bl	be00e <_ZN7TwoWire6unlockEv>
}
   b8456:	4620      	mov	r0, r4
   b8458:	b007      	add	sp, #28
   b845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b845c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b8460:	4905      	ldr	r1, [pc, #20]	; (b8478 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b8462:	4803      	ldr	r0, [pc, #12]	; (b8470 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8464:	f7ff fb54 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
   b8468:	e7f1      	b.n	b844e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b846a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b846e:	e7f7      	b.n	b8460 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b8470:	2003e4c0 	.word	0x2003e4c0
   b8474:	000c4c74 	.word	0x000c4c74
   b8478:	000c4c82 	.word	0x000c4c82

000b847c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b847c:	b513      	push	{r0, r1, r4, lr}
   b847e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b8480:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b8482:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b8486:	f008 ff5d 	bl	c1344 <gmtime>
    return setRtcFromTm(tm, lock);
   b848a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b848e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b8490:	4620      	mov	r0, r4
   b8492:	f7ff ffa7 	bl	b83e4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b8496:	b002      	add	sp, #8
   b8498:	bd10      	pop	{r4, pc}
	...

000b849c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b849c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b849e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b84a0:	b089      	sub	sp, #36	; 0x24
   b84a2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b84a4:	bb75      	cbnz	r5, b8504 <_ZN6AB18054loopEv+0x68>
   b84a6:	f007 febb 	bl	c0220 <_ZN9TimeClass7isValidEv>
   b84aa:	b358      	cbz	r0, b8504 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b84ac:	2600      	movs	r6, #0
   b84ae:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b84b0:	a904      	add	r1, sp, #16
   b84b2:	4628      	mov	r0, r5
        tm = 0;
   b84b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b84b8:	f004 ff3c 	bl	bd334 <spark_sync_time_last>
   b84bc:	b310      	cbz	r0, b8504 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b84be:	2501      	movs	r5, #1
   b84c0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b84c2:	f007 feca 	bl	c025a <_ZN9TimeClass3nowEv>
   b84c6:	17c3      	asrs	r3, r0, #31
   b84c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b84cc:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b84ce:	9500      	str	r5, [sp, #0]
   b84d0:	4620      	mov	r0, r4
   b84d2:	f7ff ffd3 	bl	b847c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b84d6:	a902      	add	r1, sp, #8
   b84d8:	4620      	mov	r0, r4
        time = 0;
   b84da:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b84de:	f7ff ff39 	bl	b8354 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b84e2:	4b13      	ldr	r3, [pc, #76]	; (b8530 <_ZN6AB18054loopEv+0x94>)
   b84e4:	4913      	ldr	r1, [pc, #76]	; (b8534 <_ZN6AB18054loopEv+0x98>)
   b84e6:	681b      	ldr	r3, [r3, #0]
   b84e8:	9300      	str	r3, [sp, #0]
   b84ea:	a804      	add	r0, sp, #16
   b84ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b84f0:	f007 fe54 	bl	c019c <_ZN9TimeClass6formatExPKc>
   b84f4:	4810      	ldr	r0, [pc, #64]	; (b8538 <_ZN6AB18054loopEv+0x9c>)
   b84f6:	9a04      	ldr	r2, [sp, #16]
   b84f8:	4910      	ldr	r1, [pc, #64]	; (b853c <_ZN6AB18054loopEv+0xa0>)
   b84fa:	f7fb fe20 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b84fe:	a804      	add	r0, sp, #16
   b8500:	f007 faea 	bl	bfad8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b8504:	6963      	ldr	r3, [r4, #20]
   b8506:	b18b      	cbz	r3, b852c <_ZN6AB18054loopEv+0x90>
   b8508:	f004 fbf0 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b850c:	6923      	ldr	r3, [r4, #16]
   b850e:	1ac0      	subs	r0, r0, r3
   b8510:	6963      	ldr	r3, [r4, #20]
   b8512:	4298      	cmp	r0, r3
   b8514:	d30a      	bcc.n	b852c <_ZN6AB18054loopEv+0x90>
   b8516:	f004 fbe9 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b851a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b851e:	6120      	str	r0, [r4, #16]
            setWDT();
   b8520:	4620      	mov	r0, r4
}
   b8522:	b009      	add	sp, #36	; 0x24
   b8524:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b8528:	f7ff bc0c 	b.w	b7d44 <_ZN6AB18056setWDTEi>
}
   b852c:	b009      	add	sp, #36	; 0x24
   b852e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8530:	2003d688 	.word	0x2003d688
   b8534:	2003e6a8 	.word	0x2003e6a8
   b8538:	2003e4c0 	.word	0x2003e4c0
   b853c:	000c4c9d 	.word	0x000c4c9d

000b8540 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b8540:	b530      	push	{r4, r5, lr}
   b8542:	4604      	mov	r4, r0
   b8544:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b8546:	b111      	cbz	r1, b854e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b8548:	6840      	ldr	r0, [r0, #4]
   b854a:	f005 fd05 	bl	bdf58 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b854e:	4620      	mov	r0, r4
   b8550:	f7ff fb64 	bl	b7c1c <_ZN6AB180510detectChipEv>
   b8554:	ad06      	add	r5, sp, #24
   b8556:	2800      	cmp	r0, #0
   b8558:	d037      	beq.n	b85ca <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b855a:	4620      	mov	r0, r4
   b855c:	f7ff fc9c 	bl	b7e98 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b8560:	2301      	movs	r3, #1
   b8562:	461a      	mov	r2, r3
   b8564:	2110      	movs	r1, #16
   b8566:	4620      	mov	r0, r4
   b8568:	f7ff fc6d 	bl	b7e46 <_ZN6AB180510isBitClearEhhb>
   b856c:	b1d8      	cbz	r0, b85a6 <_ZN6AB18055setupEb+0x66>
   b856e:	f007 fe57 	bl	c0220 <_ZN9TimeClass7isValidEv>
   b8572:	b9c0      	cbnz	r0, b85a6 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b8574:	a902      	add	r1, sp, #8
   b8576:	4620      	mov	r0, r4
   b8578:	f7ff feec 	bl	b8354 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b857c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b8580:	f007 fd52 	bl	c0028 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8584:	4b13      	ldr	r3, [pc, #76]	; (b85d4 <_ZN6AB18055setupEb+0x94>)
   b8586:	4914      	ldr	r1, [pc, #80]	; (b85d8 <_ZN6AB18055setupEb+0x98>)
   b8588:	681b      	ldr	r3, [r3, #0]
   b858a:	9300      	str	r3, [sp, #0]
   b858c:	4628      	mov	r0, r5
   b858e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8592:	f007 fe03 	bl	c019c <_ZN9TimeClass6formatExPKc>
   b8596:	4811      	ldr	r0, [pc, #68]	; (b85dc <_ZN6AB18055setupEb+0x9c>)
   b8598:	9a06      	ldr	r2, [sp, #24]
   b859a:	4911      	ldr	r1, [pc, #68]	; (b85e0 <_ZN6AB18055setupEb+0xa0>)
   b859c:	f7fb fdcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b85a0:	4628      	mov	r0, r5
   b85a2:	f007 fa99 	bl	bfad8 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b85a6:	4b0f      	ldr	r3, [pc, #60]	; (b85e4 <_ZN6AB18055setupEb+0xa4>)
   b85a8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b85aa:	4b0f      	ldr	r3, [pc, #60]	; (b85e8 <_ZN6AB18055setupEb+0xa8>)
   b85ac:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b85ae:	4b0f      	ldr	r3, [pc, #60]	; (b85ec <_ZN6AB18055setupEb+0xac>)
   b85b0:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b85b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b85b6:	2300      	movs	r3, #0
   b85b8:	a802      	add	r0, sp, #8
   b85ba:	9500      	str	r5, [sp, #0]
   b85bc:	f7fd f98c 	bl	b58d8 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b85c0:	4628      	mov	r0, r5
   b85c2:	f7fc ffc4 	bl	b554e <_ZNSt14_Function_baseD1Ev>
}
   b85c6:	b00b      	add	sp, #44	; 0x2c
   b85c8:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b85ca:	4909      	ldr	r1, [pc, #36]	; (b85f0 <_ZN6AB18055setupEb+0xb0>)
   b85cc:	4803      	ldr	r0, [pc, #12]	; (b85dc <_ZN6AB18055setupEb+0x9c>)
   b85ce:	f7ff fa9f 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
   b85d2:	e7e8      	b.n	b85a6 <_ZN6AB18055setupEb+0x66>
   b85d4:	2003d688 	.word	0x2003d688
   b85d8:	2003e6a8 	.word	0x2003e6a8
   b85dc:	2003e4c0 	.word	0x2003e4c0
   b85e0:	000c4cb3 	.word	0x000c4cb3
   b85e4:	000b7dc9 	.word	0x000b7dc9
   b85e8:	000b552b 	.word	0x000b552b
   b85ec:	000b5517 	.word	0x000b5517
   b85f0:	000c4cd0 	.word	0x000c4cd0

000b85f4 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b85f4:	4b01      	ldr	r3, [pc, #4]	; (b85fc <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b85f6:	4a02      	ldr	r2, [pc, #8]	; (b8600 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b85f8:	601a      	str	r2, [r3, #0]
}
   b85fa:	4770      	bx	lr
   b85fc:	2003e4c0 	.word	0x2003e4c0
   b8600:	000c4ce8 	.word	0x000c4ce8

000b8604 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b8604:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b8606:	2301      	movs	r3, #1
   b8608:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b860a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b860c:	4604      	mov	r4, r0
        if (th->func) {
   b860e:	b143      	cbz	r3, b8622 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b8610:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8612:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b8614:	2301      	movs	r3, #1
   b8616:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b8618:	2000      	movs	r0, #0
    }
   b861a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b861e:	f004 bb35 	b.w	bcc8c <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8622:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b8624:	2800      	cmp	r0, #0
   b8626:	d0f5      	beq.n	b8614 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b8628:	6883      	ldr	r3, [r0, #8]
   b862a:	b90b      	cbnz	r3, b8630 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b862c:	f008 f930 	bl	c0890 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8630:	68c3      	ldr	r3, [r0, #12]
   b8632:	e7ee      	b.n	b8612 <_ZN6Thread3runEPv+0xe>

000b8634 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b8634:	2a01      	cmp	r2, #1
   b8636:	d102      	bne.n	b863e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8638:	6001      	str	r1, [r0, #0]
      }
   b863a:	2000      	movs	r0, #0
   b863c:	4770      	bx	lr
	  switch (__op)
   b863e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b8640:	bf04      	itt	eq
   b8642:	680b      	ldreq	r3, [r1, #0]
   b8644:	6003      	streq	r3, [r0, #0]
	      break;
   b8646:	e7f8      	b.n	b863a <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b8648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b8648:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b864a:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b864c:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b864e:	b135      	cbz	r5, b865e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b8650:	4628      	mov	r0, r5
   b8652:	f7fc ff7c 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8656:	2110      	movs	r1, #16
   b8658:	4628      	mov	r0, r5
   b865a:	f7fb fd20 	bl	b409e <_ZdlPvj>
   b865e:	4620      	mov	r0, r4
   b8660:	2114      	movs	r1, #20
      }
   b8662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b8666:	f7fb bd1a 	b.w	b409e <_ZdlPvj>

000b866a <_ZN6Thread7disposeEv>:
    void dispose()
   b866a:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b866c:	6803      	ldr	r3, [r0, #0]
   b866e:	4604      	mov	r4, r0
        if (!isValid())
   b8670:	b1ab      	cbz	r3, b869e <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b8672:	6858      	ldr	r0, [r3, #4]
   b8674:	f004 faba 	bl	bcbec <os_thread_is_current>
   b8678:	b988      	cbnz	r0, b869e <_ZN6Thread7disposeEv+0x34>
   b867a:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b867c:	7c5a      	ldrb	r2, [r3, #17]
   b867e:	b912      	cbnz	r2, b8686 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b8680:	6858      	ldr	r0, [r3, #4]
   b8682:	f004 fabb 	bl	bcbfc <os_thread_join>
        os_thread_cleanup(d_->handle);
   b8686:	6823      	ldr	r3, [r4, #0]
   b8688:	6858      	ldr	r0, [r3, #4]
   b868a:	f004 fabf 	bl	bcc0c <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b868e:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b8690:	2300      	movs	r3, #0
   b8692:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b8694:	b118      	cbz	r0, b869e <_ZN6Thread7disposeEv+0x34>
    }
   b8696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b869a:	f7ff bfd5 	b.w	b8648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b869e:	bd10      	pop	{r4, pc}

000b86a0 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b86a0:	4a05      	ldr	r2, [pc, #20]	; (b86b8 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b86a2:	6002      	str	r2, [r0, #0]
   b86a4:	2200      	movs	r2, #0
   b86a6:	6042      	str	r2, [r0, #4]
   b86a8:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b86aa:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b86ae:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b86b2:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b86b6:	4770      	bx	lr
   b86b8:	000c4d28 	.word	0x000c4d28

000b86bc <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b86bc:	b510      	push	{r4, lr}
    if (!_instance) {
   b86be:	4c07      	ldr	r4, [pc, #28]	; (b86dc <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b86c0:	6823      	ldr	r3, [r4, #0]
   b86c2:	b943      	cbnz	r3, b86d6 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b86c4:	f240 4064 	movw	r0, #1124	; 0x464
   b86c8:	f7fb fce5 	bl	b4096 <_Znwj>
   b86cc:	4603      	mov	r3, r0
   b86ce:	b108      	cbz	r0, b86d4 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b86d0:	f7ff ffe6 	bl	b86a0 <_ZN19BackgroundPublishRKC1Ev>
   b86d4:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b86d6:	6820      	ldr	r0, [r4, #0]
   b86d8:	bd10      	pop	{r4, pc}
   b86da:	bf00      	nop
   b86dc:	2003e4c8 	.word	0x2003e4c8

000b86e0 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b86e0:	b538      	push	{r3, r4, r5, lr}
   b86e2:	4604      	mov	r4, r0
    if(thread)
   b86e4:	6840      	ldr	r0, [r0, #4]
   b86e6:	b190      	cbz	r0, b870e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b86e8:	2302      	movs	r3, #2
   b86ea:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b86ec:	f7ff ffbd 	bl	b866a <_ZN6Thread7disposeEv>
        delete thread;
   b86f0:	6865      	ldr	r5, [r4, #4]
   b86f2:	b155      	cbz	r5, b870a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b86f4:	4628      	mov	r0, r5
   b86f6:	f7ff ffb8 	bl	b866a <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b86fa:	6828      	ldr	r0, [r5, #0]
   b86fc:	b108      	cbz	r0, b8702 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b86fe:	f7ff ffa3 	bl	b8648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b8702:	2104      	movs	r1, #4
   b8704:	4628      	mov	r0, r5
   b8706:	f7fb fcca 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b870a:	2300      	movs	r3, #0
   b870c:	6063      	str	r3, [r4, #4]
    }
}
   b870e:	bd38      	pop	{r3, r4, r5, pc}

000b8710 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b8710:	b510      	push	{r4, lr}
   b8712:	4b05      	ldr	r3, [pc, #20]	; (b8728 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b8714:	6003      	str	r3, [r0, #0]
   b8716:	4604      	mov	r4, r0
    stop();
   b8718:	f7ff ffe2 	bl	b86e0 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b871c:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b8720:	f7fc ff15 	bl	b554e <_ZNSt14_Function_baseD1Ev>
}
   b8724:	4620      	mov	r0, r4
   b8726:	bd10      	pop	{r4, pc}
   b8728:	000c4d28 	.word	0x000c4d28

000b872c <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b872c:	b510      	push	{r4, lr}
   b872e:	4604      	mov	r4, r0
}
   b8730:	f7ff ffee 	bl	b8710 <_ZN19BackgroundPublishRKD1Ev>
   b8734:	4620      	mov	r0, r4
   b8736:	f240 4164 	movw	r1, #1124	; 0x464
   b873a:	f7fb fcb0 	bl	b409e <_ZdlPvj>
   b873e:	4620      	mov	r0, r4
   b8740:	bd10      	pop	{r4, pc}

000b8742 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b8742:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8744:	4604      	mov	r4, r0
   b8746:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b8748:	f100 060d 	add.w	r6, r0, #13
   b874c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b8750:	7b23      	ldrb	r3, [r4, #12]
   b8752:	b91b      	cbnz	r3, b875c <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b8754:	2001      	movs	r0, #1
   b8756:	f004 fee5 	bl	bd524 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b875a:	e7f9      	b.n	b8750 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b875c:	7b23      	ldrb	r3, [r4, #12]
   b875e:	2b02      	cmp	r3, #2
   b8760:	d064      	beq.n	b882c <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b8762:	68a0      	ldr	r0, [r4, #8]
   b8764:	f004 fa62 	bl	bcc2c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b8768:	68a0      	ldr	r0, [r4, #8]
   b876a:	f004 fa67 	bl	bcc3c <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b876e:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b8772:	f88d 3000 	strb.w	r3, [sp]
   b8776:	463a      	mov	r2, r7
   b8778:	233c      	movs	r3, #60	; 0x3c
   b877a:	4631      	mov	r1, r6
   b877c:	a806      	add	r0, sp, #24
   b877e:	f005 f99d 	bl	bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b8782:	9d06      	ldr	r5, [sp, #24]
   b8784:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8786:	b933      	cbnz	r3, b8796 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b8788:	7b23      	ldrb	r3, [r4, #12]
   b878a:	2b02      	cmp	r3, #2
   b878c:	d003      	beq.n	b8796 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b878e:	2001      	movs	r0, #1
   b8790:	f004 fec8 	bl	bd524 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8794:	e7f5      	b.n	b8782 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b8796:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b879a:	b31b      	cbz	r3, b87e4 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b879c:	2000      	movs	r0, #0
   b879e:	f004 fd37 	bl	bd210 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b87a2:	b120      	cbz	r0, b87ae <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b87a4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b87a6:	b913      	cbnz	r3, b87ae <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b87a8:	f004 fd8c 	bl	bd2c4 <spark_process>
    }
   b87ac:	e7fa      	b.n	b87a4 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b87ae:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b87b0:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b87b4:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b87b6:	1e59      	subs	r1, r3, #1
   b87b8:	424b      	negs	r3, r1
   b87ba:	414b      	adcs	r3, r1
   b87bc:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b87c0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b87c4:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b87c8:	b90b      	cbnz	r3, b87ce <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b87ca:	f008 f861 	bl	c0890 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b87ce:	ab05      	add	r3, sp, #20
   b87d0:	9300      	str	r3, [sp, #0]
   b87d2:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b87d6:	ab04      	add	r3, sp, #16
   b87d8:	aa03      	add	r2, sp, #12
   b87da:	f10d 010b 	add.w	r1, sp, #11
   b87de:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b87e2:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b87e4:	68a0      	ldr	r0, [r4, #8]
   b87e6:	f004 fa21 	bl	bcc2c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b87ea:	7b23      	ldrb	r3, [r4, #12]
   b87ec:	2b02      	cmp	r3, #2
   b87ee:	d017      	beq.n	b8820 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b87f0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b87f4:	2500      	movs	r5, #0
   b87f6:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b87fa:	b143      	cbz	r3, b880e <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b87fc:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b8800:	2203      	movs	r2, #3
   b8802:	4608      	mov	r0, r1
   b8804:	4798      	blx	r3
	    _M_manager = nullptr;
   b8806:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b880a:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b880e:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b8810:	68a0      	ldr	r0, [r4, #8]
   b8812:	7323      	strb	r3, [r4, #12]
   b8814:	f004 fa12 	bl	bcc3c <os_mutex_unlock>
   b8818:	a807      	add	r0, sp, #28
   b881a:	f7fb ff4b 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b881e:	e797      	b.n	b8750 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b8820:	68a0      	ldr	r0, [r4, #8]
   b8822:	f004 fa0b 	bl	bcc3c <os_mutex_unlock>
   b8826:	a807      	add	r0, sp, #28
   b8828:	f7fb ff44 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b882c:	b009      	add	sp, #36	; 0x24
   b882e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8830 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b8830:	6800      	ldr	r0, [r0, #0]
   b8832:	f7ff bf86 	b.w	b8742 <_ZN19BackgroundPublishRK8thread_fEv>

000b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8836:	b513      	push	{r0, r1, r4, lr}
   b8838:	460b      	mov	r3, r1
   b883a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b883c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8840:	466c      	mov	r4, sp
   b8842:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8846:	e893 0003 	ldmia.w	r3, {r0, r1}
   b884a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b884e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8852:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8856:	b002      	add	sp, #8
   b8858:	bd10      	pop	{r4, pc}
	...

000b885c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b885c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8860:	4606      	mov	r6, r0
   b8862:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b8864:	2014      	movs	r0, #20
   b8866:	4926      	ldr	r1, [pc, #152]	; (b8900 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b8868:	4617      	mov	r7, r2
   b886a:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b886c:	f008 f806 	bl	c087c <_ZnwjRKSt9nothrow_t>
   b8870:	4604      	mov	r4, r0
   b8872:	b130      	cbz	r0, b8882 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b8874:	2000      	movs	r0, #0
            exited(false) {
   b8876:	e9c4 0000 	strd	r0, r0, [r4]
   b887a:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b887e:	7420      	strb	r0, [r4, #16]
   b8880:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8882:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b8884:	2c00      	cmp	r4, #0
   b8886:	d031      	beq.n	b88ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b8888:	491d      	ldr	r1, [pc, #116]	; (b8900 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b888a:	2010      	movs	r0, #16
   b888c:	f007 fff6 	bl	c087c <_ZnwjRKSt9nothrow_t>
   b8890:	4605      	mov	r5, r0
   b8892:	b168      	cbz	r0, b88b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b8894:	2300      	movs	r3, #0
   b8896:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8898:	4601      	mov	r1, r0
   b889a:	4638      	mov	r0, r7
   b889c:	f7ff ffcb 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88a0:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b88a2:	68aa      	ldr	r2, [r5, #8]
   b88a4:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b88a6:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b88a8:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88aa:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b88ac:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b88ae:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b88b0:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b88b2:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b88b4:	b137      	cbz	r7, b88c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b88b6:	4638      	mov	r0, r7
   b88b8:	f7fc fe49 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b88bc:	2110      	movs	r1, #16
   b88be:	4638      	mov	r0, r7
   b88c0:	f7fb fbed 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b88c4:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b88c6:	6803      	ldr	r3, [r0, #0]
   b88c8:	b183      	cbz	r3, b88ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b88ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b88cc:	464a      	mov	r2, r9
   b88ce:	e9cd 0300 	strd	r0, r3, [sp]
   b88d2:	4641      	mov	r1, r8
   b88d4:	4b0b      	ldr	r3, [pc, #44]	; (b8904 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b88d6:	3004      	adds	r0, #4
   b88d8:	f004 f980 	bl	bcbdc <os_thread_create>
   b88dc:	b930      	cbnz	r0, b88ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b88de:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b88e0:	7c1b      	ldrb	r3, [r3, #16]
   b88e2:	b94b      	cbnz	r3, b88f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b88e4:	2001      	movs	r0, #1
   b88e6:	f004 f9f1 	bl	bcccc <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b88ea:	e7f8      	b.n	b88de <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b88ec:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b88ee:	2300      	movs	r3, #0
   b88f0:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b88f2:	b108      	cbz	r0, b88f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b88f4:	f7ff fea8 	bl	b8648 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b88f8:	4630      	mov	r0, r6
   b88fa:	b003      	add	sp, #12
   b88fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8900:	000c57d8 	.word	0x000c57d8
   b8904:	000b8605 	.word	0x000b8605

000b8908 <_ZN19BackgroundPublishRK5startEv>:
{
   b8908:	b530      	push	{r4, r5, lr}
    if(!thread)
   b890a:	6843      	ldr	r3, [r0, #4]
{
   b890c:	b087      	sub	sp, #28
   b890e:	4604      	mov	r4, r0
    if(!thread)
   b8910:	b9c3      	cbnz	r3, b8944 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b8912:	3008      	adds	r0, #8
   b8914:	f004 f982 	bl	bcc1c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b8918:	4b0b      	ldr	r3, [pc, #44]	; (b8948 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b891a:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b891c:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b891e:	4b0b      	ldr	r3, [pc, #44]	; (b894c <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8920:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8922:	9304      	str	r3, [sp, #16]
   b8924:	f7fb fbb7 	bl	b4096 <_Znwj>
   b8928:	4605      	mov	r5, r0
   b892a:	b138      	cbz	r0, b893c <_ZN19BackgroundPublishRK5startEv+0x34>
   b892c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b8930:	9300      	str	r3, [sp, #0]
   b8932:	4907      	ldr	r1, [pc, #28]	; (b8950 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b8934:	2302      	movs	r3, #2
   b8936:	aa02      	add	r2, sp, #8
   b8938:	f7ff ff90 	bl	b885c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b893c:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b893e:	a802      	add	r0, sp, #8
   b8940:	f7fc fe05 	bl	b554e <_ZNSt14_Function_baseD1Ev>
}
   b8944:	b007      	add	sp, #28
   b8946:	bd30      	pop	{r4, r5, pc}
   b8948:	000b8831 	.word	0x000b8831
   b894c:	000b8635 	.word	0x000b8635
   b8950:	000c4d0c 	.word	0x000c4d0c

000b8954 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b8954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8958:	4604      	mov	r4, r0
   b895a:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b895c:	6880      	ldr	r0, [r0, #8]
   b895e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b8960:	4698      	mov	r8, r3
   b8962:	460d      	mov	r5, r1
   b8964:	4616      	mov	r6, r2
   b8966:	f004 f961 	bl	bcc2c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b896a:	6863      	ldr	r3, [r4, #4]
   b896c:	b11b      	cbz	r3, b8976 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b896e:	7b23      	ldrb	r3, [r4, #12]
   b8970:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b8974:	b133      	cbz	r3, b8984 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b8976:	68a0      	ldr	r0, [r4, #8]
   b8978:	f004 f960 	bl	bcc3c <os_mutex_unlock>
    {
        return false;
   b897c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b897e:	b005      	add	sp, #20
   b8980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8984:	68a0      	ldr	r0, [r4, #8]
   b8986:	f004 f959 	bl	bcc3c <os_mutex_unlock>
    if(!name)
   b898a:	2d00      	cmp	r5, #0
   b898c:	d03d      	beq.n	b8a0a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b898e:	2240      	movs	r2, #64	; 0x40
   b8990:	4629      	mov	r1, r5
   b8992:	f104 000d 	add.w	r0, r4, #13
   b8996:	f008 fe0a 	bl	c15ae <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b899a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b899e:	b38e      	cbz	r6, b8a04 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b89a0:	f240 4201 	movw	r2, #1025	; 0x401
   b89a4:	4631      	mov	r1, r6
   b89a6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b89aa:	f008 fe00 	bl	c15ae <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b89ae:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b89b2:	2300      	movs	r3, #0
   b89b4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b89b6:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b89b8:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b89bc:	b13b      	cbz	r3, b89ce <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b89be:	2202      	movs	r2, #2
   b89c0:	4639      	mov	r1, r7
   b89c2:	4668      	mov	r0, sp
   b89c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b89c6:	68fb      	ldr	r3, [r7, #12]
   b89c8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b89ca:	68bb      	ldr	r3, [r7, #8]
   b89cc:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b89ce:	4629      	mov	r1, r5
   b89d0:	4668      	mov	r0, sp
   b89d2:	f7ff ff30 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89d6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b89d8:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b89dc:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89e0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b89e2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b89e4:	4668      	mov	r0, sp
   b89e6:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b89ea:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b89ee:	9203      	str	r2, [sp, #12]
   b89f0:	f7fc fdad 	bl	b554e <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b89f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b89f6:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b89fa:	2001      	movs	r0, #1
    event_flags = flags;
   b89fc:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b8a00:	7320      	strb	r0, [r4, #12]
    return true;
   b8a02:	e7bc      	b.n	b897e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b8a04:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b8a08:	e7d3      	b.n	b89b2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b8a0a:	4628      	mov	r0, r5
   b8a0c:	e7b7      	b.n	b897e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b8a10 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b8a10:	b510      	push	{r4, lr}
   b8a12:	4b05      	ldr	r3, [pc, #20]	; (b8a28 <_ZN10JsonBufferD1Ev+0x18>)
   b8a14:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b8a16:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b8a18:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b8a1a:	b91b      	cbnz	r3, b8a24 <_ZN10JsonBufferD1Ev+0x14>
   b8a1c:	6840      	ldr	r0, [r0, #4]
   b8a1e:	b108      	cbz	r0, b8a24 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b8a20:	f004 fd08 	bl	bd434 <free>
	}
}
   b8a24:	4620      	mov	r0, r4
   b8a26:	bd10      	pop	{r4, pc}
   b8a28:	000c4d48 	.word	0x000c4d48

000b8a2c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b8a2c:	b510      	push	{r4, lr}
   b8a2e:	4604      	mov	r4, r0
}
   b8a30:	f7ff ffee 	bl	b8a10 <_ZN10JsonBufferD1Ev>
   b8a34:	4620      	mov	r0, r4
   b8a36:	2114      	movs	r1, #20
   b8a38:	f7fb fb31 	bl	b409e <_ZdlPvj>
   b8a3c:	4620      	mov	r0, r4
   b8a3e:	bd10      	pop	{r4, pc}

000b8a40 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b8a40:	b510      	push	{r4, lr}
   b8a42:	4b03      	ldr	r3, [pc, #12]	; (b8a50 <_ZN10JsonWriterD1Ev+0x10>)
   b8a44:	6003      	str	r3, [r0, #0]
   b8a46:	4604      	mov	r4, r0
   b8a48:	f7ff ffe2 	bl	b8a10 <_ZN10JsonBufferD1Ev>

}
   b8a4c:	4620      	mov	r0, r4
   b8a4e:	bd10      	pop	{r4, pc}
   b8a50:	000c4d68 	.word	0x000c4d68

000b8a54 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b8a54:	b510      	push	{r4, lr}
   b8a56:	4604      	mov	r4, r0
}
   b8a58:	f7ff fff2 	bl	b8a40 <_ZN10JsonWriterD1Ev>
   b8a5c:	4620      	mov	r0, r4
   b8a5e:	2130      	movs	r1, #48	; 0x30
   b8a60:	f7fb fb1d 	bl	b409e <_ZdlPvj>
   b8a64:	4620      	mov	r0, r4
   b8a66:	bd10      	pop	{r4, pc}

000b8a68 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b8a68:	b510      	push	{r4, lr}
   b8a6a:	4b03      	ldr	r3, [pc, #12]	; (b8a78 <_ZN12JsonModifierD1Ev+0x10>)
   b8a6c:	6003      	str	r3, [r0, #0]
   b8a6e:	4604      	mov	r4, r0
   b8a70:	f7ff ffe6 	bl	b8a40 <_ZN10JsonWriterD1Ev>

}
   b8a74:	4620      	mov	r0, r4
   b8a76:	bd10      	pop	{r4, pc}
   b8a78:	000c4d78 	.word	0x000c4d78

000b8a7c <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b8a7c:	b510      	push	{r4, lr}
   b8a7e:	4604      	mov	r4, r0
}
   b8a80:	f7ff fff2 	bl	b8a68 <_ZN12JsonModifierD1Ev>
   b8a84:	4620      	mov	r0, r4
   b8a86:	2140      	movs	r1, #64	; 0x40
   b8a88:	f7fb fb09 	bl	b409e <_ZdlPvj>
   b8a8c:	4620      	mov	r0, r4
   b8a8e:	bd10      	pop	{r4, pc}

000b8a90 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b8a90:	b510      	push	{r4, lr}
   b8a92:	4b07      	ldr	r3, [pc, #28]	; (b8ab0 <_ZN10JsonParserD1Ev+0x20>)
   b8a94:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b8a96:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b8a98:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b8a9a:	b91b      	cbnz	r3, b8aa4 <_ZN10JsonParserD1Ev+0x14>
   b8a9c:	6940      	ldr	r0, [r0, #20]
   b8a9e:	b108      	cbz	r0, b8aa4 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b8aa0:	f004 fcc8 	bl	bd434 <free>
JsonParser::~JsonParser() {
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	f7ff ffb3 	bl	b8a10 <_ZN10JsonBufferD1Ev>
}
   b8aaa:	4620      	mov	r0, r4
   b8aac:	bd10      	pop	{r4, pc}
   b8aae:	bf00      	nop
   b8ab0:	000c4d58 	.word	0x000c4d58

000b8ab4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b8ab4:	b510      	push	{r4, lr}
   b8ab6:	4604      	mov	r4, r0
}
   b8ab8:	f7ff ffea 	bl	b8a90 <_ZN10JsonParserD1Ev>
   b8abc:	4620      	mov	r0, r4
   b8abe:	212c      	movs	r1, #44	; 0x2c
   b8ac0:	f7fb faed 	bl	b409e <_ZdlPvj>
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	bd10      	pop	{r4, pc}

000b8ac8 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b8ac8:	4a03      	ldr	r2, [pc, #12]	; (b8ad8 <_ZN10JsonBufferC1Ev+0x10>)
   b8aca:	6002      	str	r2, [r0, #0]
   b8acc:	2200      	movs	r2, #0
   b8ace:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8ad2:	60c2      	str	r2, [r0, #12]
   b8ad4:	7402      	strb	r2, [r0, #16]
}
   b8ad6:	4770      	bx	lr
   b8ad8:	000c4d48 	.word	0x000c4d48

000b8adc <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b8adc:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b8ade:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b8ae0:	4604      	mov	r4, r0
   b8ae2:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b8ae4:	b10b      	cbz	r3, b8aea <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b8ae6:	2000      	movs	r0, #0
}
   b8ae8:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b8aea:	6840      	ldr	r0, [r0, #4]
   b8aec:	b138      	cbz	r0, b8afe <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b8aee:	f004 fca9 	bl	bd444 <realloc>
		if (newBuffer) {
   b8af2:	2800      	cmp	r0, #0
   b8af4:	d0f7      	beq.n	b8ae6 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b8af6:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b8afa:	2001      	movs	r0, #1
   b8afc:	e7f4      	b.n	b8ae8 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b8afe:	4608      	mov	r0, r1
   b8b00:	f004 fc90 	bl	bd424 <malloc>
   b8b04:	e7f5      	b.n	b8af2 <_ZN10JsonBuffer8allocateEj+0x16>

000b8b06 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8b06:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8b08:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8b0a:	460e      	mov	r6, r1
   b8b0c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8b0e:	18d1      	adds	r1, r2, r3
   b8b10:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8b12:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8b14:	b172      	cbz	r2, b8b34 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b8b16:	6882      	ldr	r2, [r0, #8]
   b8b18:	428a      	cmp	r2, r1
   b8b1a:	d30b      	bcc.n	b8b34 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b8b1c:	6860      	ldr	r0, [r4, #4]
   b8b1e:	68e3      	ldr	r3, [r4, #12]
   b8b20:	462a      	mov	r2, r5
   b8b22:	4631      	mov	r1, r6
   b8b24:	4418      	add	r0, r3
   b8b26:	f008 fc33 	bl	c1390 <memcpy>
	offset += dataLen;
   b8b2a:	68e2      	ldr	r2, [r4, #12]
   b8b2c:	442a      	add	r2, r5
   b8b2e:	60e2      	str	r2, [r4, #12]
	return true;
   b8b30:	2001      	movs	r0, #1
}
   b8b32:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b8b34:	4620      	mov	r0, r4
   b8b36:	f7ff ffd1 	bl	b8adc <_ZN10JsonBuffer8allocateEj>
   b8b3a:	2800      	cmp	r0, #0
   b8b3c:	d1ee      	bne.n	b8b1c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b8b3e:	e7f8      	b.n	b8b32 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b8b40 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b8b40:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b8b42:	2100      	movs	r1, #0
   b8b44:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b8b46:	b123      	cbz	r3, b8b52 <_ZN10JsonBuffer5clearEv+0x12>
   b8b48:	6882      	ldr	r2, [r0, #8]
   b8b4a:	b112      	cbz	r2, b8b52 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b8b4c:	4618      	mov	r0, r3
   b8b4e:	f008 bc47 	b.w	c13e0 <memset>
}
   b8b52:	4770      	bx	lr

000b8b54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b8b54:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b8b56:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b8b5a:	2200      	movs	r2, #0
   b8b5c:	60c2      	str	r2, [r0, #12]
   b8b5e:	2201      	movs	r2, #1
   b8b60:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b8b62:	6143      	str	r3, [r0, #20]
   b8b64:	4a02      	ldr	r2, [pc, #8]	; (b8b70 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b8b66:	9b02      	ldr	r3, [sp, #8]
   b8b68:	6002      	str	r2, [r0, #0]
   b8b6a:	61c3      	str	r3, [r0, #28]
}
   b8b6c:	bd10      	pop	{r4, pc}
   b8b6e:	bf00      	nop
   b8b70:	000c4d58 	.word	0x000c4d58

000b8b74 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8b74:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8b78:	4283      	cmp	r3, r0
   b8b7a:	d904      	bls.n	b8b86 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b8b7c:	7802      	ldrb	r2, [r0, #0]
   b8b7e:	2a02      	cmp	r2, #2
   b8b80:	d002      	beq.n	b8b88 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8b82:	3010      	adds	r0, #16
   b8b84:	e7f8      	b.n	b8b78 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b8b86:	2000      	movs	r0, #0
}
   b8b88:	4770      	bx	lr

000b8b8a <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b8b8a:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8b8e:	4298      	cmp	r0, r3
   b8b90:	d204      	bcs.n	b8b9c <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8b92:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8b94:	2b01      	cmp	r3, #1
   b8b96:	bf18      	it	ne
   b8b98:	2000      	movne	r0, #0
   b8b9a:	4770      	bx	lr
   b8b9c:	2000      	movs	r0, #0
}
   b8b9e:	4770      	bx	lr

000b8ba0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8ba0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8ba2:	6813      	ldr	r3, [r2, #0]
   b8ba4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b8ba6:	6813      	ldr	r3, [r2, #0]
   b8ba8:	f103 0410 	add.w	r4, r3, #16
   b8bac:	6014      	str	r4, [r2, #0]
   b8bae:	6986      	ldr	r6, [r0, #24]
   b8bb0:	42b4      	cmp	r4, r6
   b8bb2:	d20a      	bcs.n	b8bca <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8bb4:	699b      	ldr	r3, [r3, #24]
   b8bb6:	688c      	ldr	r4, [r1, #8]
   b8bb8:	42a3      	cmp	r3, r4
   b8bba:	da01      	bge.n	b8bc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b8bbc:	42ab      	cmp	r3, r5
   b8bbe:	ddf2      	ble.n	b8ba6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8bc0:	42a3      	cmp	r3, r4
   b8bc2:	bfcc      	ite	gt
   b8bc4:	2000      	movgt	r0, #0
   b8bc6:	2001      	movle	r0, #1
   b8bc8:	e000      	b.n	b8bcc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b8bca:	2000      	movs	r0, #0
}
   b8bcc:	bd70      	pop	{r4, r5, r6, pc}

000b8bce <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8bd0:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8bd4:	4604      	mov	r4, r0
   b8bd6:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8bd8:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8bda:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b8bdc:	9801      	ldr	r0, [sp, #4]
   b8bde:	69a3      	ldr	r3, [r4, #24]
   b8be0:	4283      	cmp	r3, r0
   b8be2:	d90b      	bls.n	b8bfc <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8be4:	6882      	ldr	r2, [r0, #8]
   b8be6:	688b      	ldr	r3, [r1, #8]
   b8be8:	429a      	cmp	r2, r3
   b8bea:	da07      	bge.n	b8bfc <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b8bec:	42b5      	cmp	r5, r6
   b8bee:	d006      	beq.n	b8bfe <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b8bf0:	aa01      	add	r2, sp, #4
   b8bf2:	4620      	mov	r0, r4
		index++;
   b8bf4:	3501      	adds	r5, #1
		skipObject(container, token);
   b8bf6:	f7ff ffd3 	bl	b8ba0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8bfa:	e7ef      	b.n	b8bdc <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b8bfc:	2000      	movs	r0, #0
}
   b8bfe:	b002      	add	sp, #8
   b8c00:	bd70      	pop	{r4, r5, r6, pc}

000b8c02 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8c02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c06:	9d08      	ldr	r5, [sp, #32]
   b8c08:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8c0a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8c0e:	4604      	mov	r4, r0
   b8c10:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8c12:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8c14:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8c16:	9801      	ldr	r0, [sp, #4]
   b8c18:	69a3      	ldr	r3, [r4, #24]
   b8c1a:	4283      	cmp	r3, r0
   b8c1c:	d91a      	bls.n	b8c54 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8c1e:	6882      	ldr	r2, [r0, #8]
   b8c20:	688b      	ldr	r3, [r1, #8]
   b8c22:	429a      	cmp	r2, r3
   b8c24:	da16      	bge.n	b8c54 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8c26:	42ae      	cmp	r6, r5
   b8c28:	d10b      	bne.n	b8c42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b8c2a:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8c2c:	aa01      	add	r2, sp, #4
   b8c2e:	4620      	mov	r0, r4
   b8c30:	f7ff ffb6 	bl	b8ba0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8c34:	b128      	cbz	r0, b8c42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8c36:	9b01      	ldr	r3, [sp, #4]
   b8c38:	f8c8 3000 	str.w	r3, [r8]
}
   b8c3c:	b002      	add	sp, #8
   b8c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8c42:	aa01      	add	r2, sp, #4
   b8c44:	4620      	mov	r0, r4
   b8c46:	f7ff ffab 	bl	b8ba0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b8c4a:	4620      	mov	r0, r4
		index++;
   b8c4c:	3601      	adds	r6, #1
		skipObject(container, token);
   b8c4e:	f7ff ffa7 	bl	b8ba0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8c52:	e7e0      	b.n	b8c16 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8c54:	2000      	movs	r0, #0
   b8c56:	e7f1      	b.n	b8c3c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8c58 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b8c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8c5a:	3b01      	subs	r3, #1
   b8c5c:	2400      	movs	r4, #0
   b8c5e:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8c62:	1bf6      	subs	r6, r6, r7
   b8c64:	42a6      	cmp	r6, r4
   b8c66:	dd08      	ble.n	b8c7a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b8c68:	42a3      	cmp	r3, r4
   b8c6a:	dd06      	ble.n	b8c7a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b8c6c:	6845      	ldr	r5, [r0, #4]
   b8c6e:	443d      	add	r5, r7
   b8c70:	5d2d      	ldrb	r5, [r5, r4]
   b8c72:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8c76:	3401      	adds	r4, #1
   b8c78:	e7f1      	b.n	b8c5e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b8c7a:	2300      	movs	r3, #0
   b8c7c:	7013      	strb	r3, [r2, #0]
}
   b8c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8c82:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8c84:	2310      	movs	r3, #16
   b8c86:	466a      	mov	r2, sp
   b8c88:	f7ff ffe6 	bl	b8c58 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b8c8c:	4904      	ldr	r1, [pc, #16]	; (b8ca0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b8c8e:	4622      	mov	r2, r4
   b8c90:	4668      	mov	r0, sp
   b8c92:	f004 fbe7 	bl	bd464 <sscanf>
}
   b8c96:	1e43      	subs	r3, r0, #1
   b8c98:	4258      	negs	r0, r3
   b8c9a:	4158      	adcs	r0, r3
   b8c9c:	b004      	add	sp, #16
   b8c9e:	bd10      	pop	{r4, pc}
   b8ca0:	000c3d47 	.word	0x000c3d47

000b8ca4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8ca6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8ca8:	2310      	movs	r3, #16
   b8caa:	466a      	mov	r2, sp
   b8cac:	f7ff ffd4 	bl	b8c58 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8cb0:	4668      	mov	r0, sp
   b8cb2:	2100      	movs	r1, #0
   b8cb4:	f009 fac6 	bl	c2244 <strtof>
}
   b8cb8:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b8cba:	ed84 0a00 	vstr	s0, [r4]
}
   b8cbe:	b004      	add	sp, #16
   b8cc0:	bd10      	pop	{r4, pc}

000b8cc2 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b8cc2:	b510      	push	{r4, lr}
   b8cc4:	4604      	mov	r4, r0
	if (str) {
   b8cc6:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8cc8:	460b      	mov	r3, r1
	if (str) {
   b8cca:	b128      	cbz	r0, b8cd8 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8ccc:	f006 ffe7 	bl	bfc9e <_ZN6String6concatEc>
		length++;
   b8cd0:	68e3      	ldr	r3, [r4, #12]
   b8cd2:	3301      	adds	r3, #1
   b8cd4:	60e3      	str	r3, [r4, #12]
}
   b8cd6:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8cd8:	6860      	ldr	r0, [r4, #4]
   b8cda:	2800      	cmp	r0, #0
   b8cdc:	d0f8      	beq.n	b8cd0 <_ZN16JsonParserString6appendEc+0xe>
   b8cde:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8ce2:	3a01      	subs	r2, #1
   b8ce4:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8ce6:	bf88      	it	hi
   b8ce8:	5443      	strbhi	r3, [r0, r1]
   b8cea:	e7f1      	b.n	b8cd0 <_ZN16JsonParserString6appendEc+0xe>

000b8cec <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8cec:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8cee:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cf2:	4608      	mov	r0, r1
		str.append((char)unicode);
   b8cf4:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b8cf6:	d804      	bhi.n	b8d02 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b8cf8:	b003      	add	sp, #12
   b8cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8cfe:	f7ff bfe0 	b.w	b8cc2 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8d02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8d0a:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8d0e:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8d12:	d207      	bcs.n	b8d24 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b8d14:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b8d18:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8d1a:	f7ff ffd2 	bl	b8cc2 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8d1e:	9801      	ldr	r0, [sp, #4]
   b8d20:	4621      	mov	r1, r4
   b8d22:	e7e9      	b.n	b8cf8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8d24:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8d26:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8d2a:	9001      	str	r0, [sp, #4]
   b8d2c:	f7ff ffc9 	bl	b8cc2 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8d30:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8d34:	9801      	ldr	r0, [sp, #4]
   b8d36:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8d3a:	e7ee      	b.n	b8d1a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b8d3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8d40:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8d42:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8d44:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8e14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8d48:	4680      	mov	r8, r0
   b8d4a:	460f      	mov	r7, r1
   b8d4c:	4615      	mov	r5, r2
			escape = false;
   b8d4e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8d50:	68b8      	ldr	r0, [r7, #8]
   b8d52:	42b0      	cmp	r0, r6
   b8d54:	dd5a      	ble.n	b8e0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8d56:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8d5a:	5d99      	ldrb	r1, [r3, r6]
   b8d5c:	199a      	adds	r2, r3, r6
		if (escape) {
   b8d5e:	2c00      	cmp	r4, #0
   b8d60:	d04b      	beq.n	b8dfa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8d62:	2975      	cmp	r1, #117	; 0x75
   b8d64:	d805      	bhi.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8d66:	296d      	cmp	r1, #109	; 0x6d
   b8d68:	d807      	bhi.n	b8d7a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8d6a:	2962      	cmp	r1, #98	; 0x62
   b8d6c:	d01e      	beq.n	b8dac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8d6e:	2966      	cmp	r1, #102	; 0x66
   b8d70:	d01e      	beq.n	b8db0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8d72:	4628      	mov	r0, r5
   b8d74:	f7ff ffa5 	bl	b8cc2 <_ZN16JsonParserString6appendEc>
				break;
   b8d78:	e03d      	b.n	b8df6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8d7a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8d7e:	2c07      	cmp	r4, #7
   b8d80:	d8f7      	bhi.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8d82:	f20f 0c08 	addw	ip, pc, #8
   b8d86:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8d8a:	bf00      	nop
   b8d8c:	000b8db5 	.word	0x000b8db5
   b8d90:	000b8d73 	.word	0x000b8d73
   b8d94:	000b8d73 	.word	0x000b8d73
   b8d98:	000b8d73 	.word	0x000b8d73
   b8d9c:	000b8db9 	.word	0x000b8db9
   b8da0:	000b8d73 	.word	0x000b8d73
   b8da4:	000b8dbd 	.word	0x000b8dbd
   b8da8:	000b8dc1 	.word	0x000b8dc1
				str.append('\b');
   b8dac:	2108      	movs	r1, #8
   b8dae:	e7e0      	b.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8db0:	210c      	movs	r1, #12
   b8db2:	e7de      	b.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8db4:	210a      	movs	r1, #10
   b8db6:	e7dc      	b.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8db8:	210d      	movs	r1, #13
   b8dba:	e7da      	b.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8dbc:	2109      	movs	r1, #9
   b8dbe:	e7d8      	b.n	b8d72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8dc0:	1d31      	adds	r1, r6, #4
   b8dc2:	4288      	cmp	r0, r1
   b8dc4:	dd17      	ble.n	b8df6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8dc6:	a902      	add	r1, sp, #8
   b8dc8:	3304      	adds	r3, #4
   b8dca:	4433      	add	r3, r6
   b8dcc:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8dce:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8dd2:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8dd6:	429a      	cmp	r2, r3
   b8dd8:	d1f9      	bne.n	b8dce <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8dda:	aa01      	add	r2, sp, #4
   b8ddc:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8dde:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8de2:	f004 fb3f 	bl	bd464 <sscanf>
   b8de6:	2801      	cmp	r0, #1
   b8de8:	d105      	bne.n	b8df6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8dea:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8dee:	4629      	mov	r1, r5
   b8df0:	f7ff ff7c 	bl	b8cec <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8df4:	3605      	adds	r6, #5
			escape = false;
   b8df6:	2400      	movs	r4, #0
   b8df8:	e004      	b.n	b8e04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8dfa:	295c      	cmp	r1, #92	; 0x5c
   b8dfc:	d004      	beq.n	b8e08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8dfe:	4628      	mov	r0, r5
   b8e00:	f7ff ff5f 	bl	b8cc2 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8e04:	3601      	adds	r6, #1
   b8e06:	e7a3      	b.n	b8d50 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8e08:	2401      	movs	r4, #1
   b8e0a:	e7fb      	b.n	b8e04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8e0c:	2001      	movs	r0, #1
   b8e0e:	b004      	add	sp, #16
   b8e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8e14:	000c55f5 	.word	0x000c55f5

000b8e18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8e1a:	460c      	mov	r4, r1
   b8e1c:	4606      	mov	r6, r0
	result = "";
   b8e1e:	490c      	ldr	r1, [pc, #48]	; (b8e50 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8e20:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8e22:	4615      	mov	r5, r2
	result = "";
   b8e24:	f006 ff01 	bl	bfc2a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8e28:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8e2c:	1ac9      	subs	r1, r1, r3
   b8e2e:	3101      	adds	r1, #1
   b8e30:	4628      	mov	r0, r5
   b8e32:	f006 fe6f 	bl	bfb14 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8e36:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8e38:	466a      	mov	r2, sp
   b8e3a:	4621      	mov	r1, r4
   b8e3c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8e3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8e42:	9500      	str	r5, [sp, #0]
   b8e44:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8e46:	f7ff ff79 	bl	b8d3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8e4a:	b004      	add	sp, #16
   b8e4c:	bd70      	pop	{r4, r5, r6, pc}
   b8e4e:	bf00      	nop
   b8e50:	000c5654 	.word	0x000c5654

000b8e54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e58:	b089      	sub	sp, #36	; 0x24
   b8e5a:	4605      	mov	r5, r0
   b8e5c:	4688      	mov	r8, r1
	String keyName;
   b8e5e:	a804      	add	r0, sp, #16
   b8e60:	4912      	ldr	r1, [pc, #72]	; (b8eac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8e62:	4616      	mov	r6, r2
   b8e64:	4699      	mov	r9, r3
	String keyName;
   b8e66:	f006 fe82 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8e6a:	2700      	movs	r7, #0
   b8e6c:	9700      	str	r7, [sp, #0]
   b8e6e:	464b      	mov	r3, r9
   b8e70:	aa03      	add	r2, sp, #12
   b8e72:	4641      	mov	r1, r8
   b8e74:	4628      	mov	r0, r5
   b8e76:	f7ff fec4 	bl	b8c02 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8e7a:	4604      	mov	r4, r0
   b8e7c:	b170      	cbz	r0, b8e9c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8e7e:	9903      	ldr	r1, [sp, #12]
   b8e80:	aa04      	add	r2, sp, #16
   b8e82:	4628      	mov	r0, r5
   b8e84:	f7ff ffc8 	bl	b8e18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8e88:	4604      	mov	r4, r0
   b8e8a:	b908      	cbnz	r0, b8e90 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8e8c:	3701      	adds	r7, #1
   b8e8e:	e7ed      	b.n	b8e6c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8e90:	4631      	mov	r1, r6
   b8e92:	a804      	add	r0, sp, #16
   b8e94:	f006 ff31 	bl	bfcfa <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8e98:	2800      	cmp	r0, #0
   b8e9a:	d0f7      	beq.n	b8e8c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8e9c:	a804      	add	r0, sp, #16
   b8e9e:	f006 fe1b 	bl	bfad8 <_ZN6StringD1Ev>
}
   b8ea2:	4620      	mov	r0, r4
   b8ea4:	b009      	add	sp, #36	; 0x24
   b8ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8eaa:	bf00      	nop
   b8eac:	000c5654 	.word	0x000c5654

000b8eb0 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8eb0:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8eb2:	2201      	movs	r2, #1
	offset = 0;
   b8eb4:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8eb6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8eb8:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8eba:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8ebe:	4770      	bx	lr

000b8ec0 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4603      	mov	r3, r0
   b8ec4:	f7ff fe00 	bl	b8ac8 <_ZN10JsonBufferC1Ev>
   b8ec8:	4a04      	ldr	r2, [pc, #16]	; (b8edc <_ZN10JsonWriterC1Ev+0x1c>)
   b8eca:	601a      	str	r2, [r3, #0]
   b8ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8ed0:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8ed4:	f7ff ffec 	bl	b8eb0 <_ZN10JsonWriter4initEv>
}
   b8ed8:	bd08      	pop	{r3, pc}
   b8eda:	bf00      	nop
   b8edc:	000c4d68 	.word	0x000c4d68

000b8ee0 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8ee0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8ee4:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8ee6:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8ee8:	bf3f      	itttt	cc
   b8eea:	6842      	ldrcc	r2, [r0, #4]
   b8eec:	1c5c      	addcc	r4, r3, #1
   b8eee:	60c4      	strcc	r4, [r0, #12]
   b8ef0:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8ef2:	bf24      	itt	cs
   b8ef4:	2301      	movcs	r3, #1
   b8ef6:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8efa:	bd10      	pop	{r4, pc}

000b8efc <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8efc:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8efe:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8f00:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8f02:	b143      	cbz	r3, b8f16 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8f04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8f08:	7e59      	ldrb	r1, [r3, #25]
   b8f0a:	b109      	cbz	r1, b8f10 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8f0c:	f7ff ffe8 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8f10:	6963      	ldr	r3, [r4, #20]
   b8f12:	3b01      	subs	r3, #1
   b8f14:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8f16:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8f1a:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8f1c:	4288      	cmp	r0, r1
   b8f1e:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8f22:	bf2a      	itet	cs
   b8f24:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8f26:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8f28:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8f2c:	bd10      	pop	{r4, pc}

000b8f2e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8f2e:	b570      	push	{r4, r5, r6, lr}
   b8f30:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8f32:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8f36:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8f38:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8f3a:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8f3c:	4430      	add	r0, r6
   b8f3e:	460a      	mov	r2, r1
   b8f40:	4629      	mov	r1, r5
   b8f42:	f004 fa9f 	bl	bd484 <vsnprintf>
	if (count <= spaceAvailable) {
   b8f46:	4285      	cmp	r5, r0
		offset += count;
   b8f48:	bf2d      	iteet	cs
   b8f4a:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8f4c:	68a3      	ldrcc	r3, [r4, #8]
   b8f4e:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8f50:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8f52:	bf36      	itet	cc
   b8f54:	2301      	movcc	r3, #1
		offset += count;
   b8f56:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8f58:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8f5c:	bd70      	pop	{r4, r5, r6, pc}

000b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8f5e:	b40e      	push	{r1, r2, r3}
   b8f60:	b503      	push	{r0, r1, lr}
   b8f62:	aa03      	add	r2, sp, #12
   b8f64:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8f68:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8f6a:	f7ff ffe0 	bl	b8f2e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8f6e:	b002      	add	sp, #8
   b8f70:	f85d eb04 	ldr.w	lr, [sp], #4
   b8f74:	b003      	add	sp, #12
   b8f76:	4770      	bx	lr

000b8f78 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f7c:	4604      	mov	r4, r0
   b8f7e:	460e      	mov	r6, r1
	if (quoted) {
   b8f80:	4617      	mov	r7, r2
   b8f82:	b112      	cbz	r2, b8f8a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8f84:	2122      	movs	r1, #34	; 0x22
   b8f86:	f7ff ffab 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8f8a:	f8df 810c 	ldr.w	r8, [pc, #268]	; b9098 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8f8e:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8f90:	5d71      	ldrb	r1, [r6, r5]
   b8f92:	eb06 0905 	add.w	r9, r6, r5
   b8f96:	2900      	cmp	r1, #0
   b8f98:	d074      	beq.n	b9084 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8f9a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8f9e:	429a      	cmp	r2, r3
   b8fa0:	d270      	bcs.n	b9084 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8fa2:	060b      	lsls	r3, r1, #24
   b8fa4:	d534      	bpl.n	b9010 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8fa6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8faa:	2be0      	cmp	r3, #224	; 0xe0
   b8fac:	f105 0901 	add.w	r9, r5, #1
   b8fb0:	d11d      	bne.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8fb2:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8fb6:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8fba:	2b80      	cmp	r3, #128	; 0x80
   b8fbc:	d139      	bne.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8fbe:	f105 0902 	add.w	r9, r5, #2
   b8fc2:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8fc6:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8fca:	2880      	cmp	r0, #128	; 0x80
   b8fcc:	d131      	bne.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8fd2:	0192      	lsls	r2, r2, #6
   b8fd4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8fd8:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8fdc:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8fde:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8fe0:	4641      	mov	r1, r8
   b8fe2:	4620      	mov	r0, r4
   b8fe4:	f7ff ffbb 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8fe8:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8fea:	3501      	adds	r5, #1
   b8fec:	e7d0      	b.n	b8f90 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8fee:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8ff2:	2bc0      	cmp	r3, #192	; 0xc0
   b8ff4:	d11d      	bne.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8ff6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8ffa:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8ffe:	2a80      	cmp	r2, #128	; 0x80
   b9000:	d117      	bne.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b9002:	0189      	lsls	r1, r1, #6
   b9004:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b9008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b900c:	431a      	orrs	r2, r3
   b900e:	e7e7      	b.n	b8fe0 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b9010:	290d      	cmp	r1, #13
   b9012:	d80a      	bhi.n	b902a <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b9014:	2907      	cmp	r1, #7
   b9016:	d90c      	bls.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9018:	f1a1 0308 	sub.w	r3, r1, #8
   b901c:	2b05      	cmp	r3, #5
   b901e:	d808      	bhi.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b9020:	e8df f003 	tbb	[pc, r3]
   b9024:	07172309 	.word	0x07172309
   b9028:	1d11      	.short	0x1d11
   b902a:	2922      	cmp	r1, #34	; 0x22
   b902c:	d023      	beq.n	b9076 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b902e:	295c      	cmp	r1, #92	; 0x5c
   b9030:	d021      	beq.n	b9076 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b9032:	4620      	mov	r0, r4
   b9034:	e004      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9036:	215c      	movs	r1, #92	; 0x5c
   b9038:	4620      	mov	r0, r4
   b903a:	f7ff ff51 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b903e:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b9040:	f7ff ff4e 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				break;
   b9044:	e7d1      	b.n	b8fea <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b9046:	215c      	movs	r1, #92	; 0x5c
   b9048:	4620      	mov	r0, r4
   b904a:	f7ff ff49 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b904e:	2166      	movs	r1, #102	; 0x66
   b9050:	e7f6      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9052:	215c      	movs	r1, #92	; 0x5c
   b9054:	4620      	mov	r0, r4
   b9056:	f7ff ff43 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b905a:	216e      	movs	r1, #110	; 0x6e
   b905c:	e7f0      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b905e:	215c      	movs	r1, #92	; 0x5c
   b9060:	4620      	mov	r0, r4
   b9062:	f7ff ff3d 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b9066:	2172      	movs	r1, #114	; 0x72
   b9068:	e7ea      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b906a:	215c      	movs	r1, #92	; 0x5c
   b906c:	4620      	mov	r0, r4
   b906e:	f7ff ff37 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b9072:	2174      	movs	r1, #116	; 0x74
   b9074:	e7e4      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9076:	215c      	movs	r1, #92	; 0x5c
   b9078:	4620      	mov	r0, r4
   b907a:	f7ff ff31 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b907e:	f899 1000 	ldrb.w	r1, [r9]
   b9082:	e7dd      	b.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b9084:	b12f      	cbz	r7, b9092 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b9086:	4620      	mov	r0, r4
   b9088:	2122      	movs	r1, #34	; 0x22
}
   b908a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b908e:	f7ff bf27 	b.w	b8ee0 <_ZN10JsonWriter10insertCharEc>
}
   b9092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9096:	bf00      	nop
   b9098:	000c4d30 	.word	0x000c4d30

000b909c <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b909c:	6942      	ldr	r2, [r0, #20]
   b909e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b90a2:	7e1a      	ldrb	r2, [r3, #24]
   b90a4:	b112      	cbz	r2, b90ac <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b90a6:	2200      	movs	r2, #0
   b90a8:	761a      	strb	r2, [r3, #24]
}
   b90aa:	4770      	bx	lr
		insertChar(',');
   b90ac:	212c      	movs	r1, #44	; 0x2c
   b90ae:	f7ff bf17 	b.w	b8ee0 <_ZN10JsonWriter10insertCharEc>

000b90b2 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b90b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b90b4:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b90b6:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b90b8:	3301      	adds	r3, #1
   b90ba:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b90bc:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b90be:	d80f      	bhi.n	b90e0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b90c0:	f7ff ffec 	bl	b909c <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b90c4:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b90c6:	9901      	ldr	r1, [sp, #4]
   b90c8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b90cc:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b90ce:	2501      	movs	r5, #1
	contextIndex++;
   b90d0:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b90d2:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b90d4:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b90d6:	f7ff ff03 	bl	b8ee0 <_ZN10JsonWriter10insertCharEc>
   b90da:	4628      	mov	r0, r5
}
   b90dc:	b002      	add	sp, #8
   b90de:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b90e0:	2000      	movs	r0, #0
   b90e2:	e7fb      	b.n	b90dc <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b90e4 <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b90e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90e6:	4604      	mov	r4, r0
   b90e8:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b90ec:	f007 fd40 	bl	c0b70 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b90f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b90f2:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b90f4:	4602      	mov	r2, r0
   b90f6:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b90f8:	db08      	blt.n	b910c <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b90fa:	e9cd 2300 	strd	r2, r3, [sp]
   b90fe:	4907      	ldr	r1, [pc, #28]	; (b911c <_ZN10JsonWriter11insertValueEf+0x38>)
   b9100:	462a      	mov	r2, r5
   b9102:	4620      	mov	r0, r4
   b9104:	f7ff ff2b 	bl	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b9108:	b003      	add	sp, #12
   b910a:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b910c:	4904      	ldr	r1, [pc, #16]	; (b9120 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b910e:	4620      	mov	r0, r4
}
   b9110:	b003      	add	sp, #12
   b9112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b9116:	f7ff bf22 	b.w	b8f5e <_ZN10JsonWriter13insertsprintfEPKcz>
   b911a:	bf00      	nop
   b911c:	000c4d37 	.word	0x000c4d37
   b9120:	000c4d3c 	.word	0x000c4d3c

000b9124 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b9124:	b510      	push	{r4, lr}
   b9126:	4604      	mov	r4, r0
   b9128:	f7ff feca 	bl	b8ec0 <_ZN10JsonWriterC1Ev>
   b912c:	4b05      	ldr	r3, [pc, #20]	; (b9144 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b912e:	6023      	str	r3, [r4, #0]
   b9130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9134:	2300      	movs	r3, #0
   b9136:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b913a:	6321      	str	r1, [r4, #48]	; 0x30
   b913c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b913e:	4620      	mov	r0, r4
   b9140:	bd10      	pop	{r4, pc}
   b9142:	bf00      	nop
   b9144:	000c4d78 	.word	0x000c4d78

000b9148 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b9148:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b914a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b914c:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b914e:	4604      	mov	r4, r0
	if (start != -1) {
   b9150:	d121      	bne.n	b9196 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b9152:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b9154:	684b      	ldr	r3, [r1, #4]
   b9156:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b9158:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b915a:	6888      	ldr	r0, [r1, #8]
   b915c:	1a1a      	subs	r2, r3, r0
   b915e:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b9160:	68ae      	ldr	r6, [r5, #8]
   b9162:	4430      	add	r0, r6
   b9164:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b9166:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9168:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b916a:	dd05      	ble.n	b9178 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b916c:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b916e:	6889      	ldr	r1, [r1, #8]
   b9170:	4401      	add	r1, r0
   b9172:	4418      	add	r0, r3
   b9174:	f008 f91a 	bl	c13ac <memmove>
   b9178:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b917a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b917c:	6852      	ldr	r2, [r2, #4]
   b917e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9180:	440a      	add	r2, r1
   b9182:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9184:	2101      	movs	r1, #1
	init();
   b9186:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b9188:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b918c:	7421      	strb	r1, [r4, #16]
	init();
   b918e:	f7ff fe8f 	bl	b8eb0 <_ZN10JsonWriter4initEv>
   b9192:	4608      	mov	r0, r1

	return true;
}
   b9194:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9196:	2000      	movs	r0, #0
   b9198:	e7fc      	b.n	b9194 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b919a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b919a:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b919c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b919e:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b91a0:	4604      	mov	r4, r0
   b91a2:	460e      	mov	r6, r1
	if (start != -1) {
   b91a4:	d129      	bne.n	b91fa <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b91a6:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b91a8:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b91aa:	3d01      	subs	r5, #1
   b91ac:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b91ae:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b91b0:	1b5a      	subs	r2, r3, r5
   b91b2:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b91b4:	6888      	ldr	r0, [r1, #8]
   b91b6:	4428      	add	r0, r5
   b91b8:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b91ba:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b91bc:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b91be:	dd04      	ble.n	b91ca <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b91c0:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b91c2:	1941      	adds	r1, r0, r5
   b91c4:	4418      	add	r0, r3
   b91c6:	f008 f8f1 	bl	c13ac <memmove>
   b91ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b91cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b91ce:	6852      	ldr	r2, [r2, #4]
   b91d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b91d2:	440a      	add	r2, r1
   b91d4:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b91d6:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b91d8:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b91dc:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b91de:	7425      	strb	r5, [r4, #16]
	init();
   b91e0:	f7ff fe66 	bl	b8eb0 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b91e4:	6963      	ldr	r3, [r4, #20]
   b91e6:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b91ea:	68f3      	ldr	r3, [r6, #12]
   b91ec:	fab3 f383 	clz	r3, r3
   b91f0:	095b      	lsrs	r3, r3, #5
   b91f2:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b91f6:	4628      	mov	r0, r5

	return true;
}
   b91f8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b91fa:	2000      	movs	r0, #0
   b91fc:	e7fc      	b.n	b91f8 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b9200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b9200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b9204:	6844      	ldr	r4, [r0, #4]
   b9206:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b920a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b920e:	f8d0 e000 	ldr.w	lr, [r0]
   b9212:	4596      	cmp	lr, r2
   b9214:	f080 81b9 	bcs.w	b958a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b9218:	f811 800e 	ldrb.w	r8, [r1, lr]
   b921c:	f1b8 0f00 	cmp.w	r8, #0
   b9220:	f000 81b3 	beq.w	b958a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b9224:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b9228:	f000 8098 	beq.w	b935c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b922c:	d833      	bhi.n	b9296 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b922e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b9232:	f000 80a6 	beq.w	b9382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b9236:	d810      	bhi.n	b925a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b9238:	f1a8 0809 	sub.w	r8, r8, #9
   b923c:	fa5f f888 	uxtb.w	r8, r8
   b9240:	f1b8 0f17 	cmp.w	r8, #23
   b9244:	d80d      	bhi.n	b9262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b9246:	4d9f      	ldr	r5, [pc, #636]	; (b94c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b9248:	fa0c f808 	lsl.w	r8, ip, r8
   b924c:	ea18 0f05 	tst.w	r8, r5
   b9250:	d007      	beq.n	b9262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9252:	6805      	ldr	r5, [r0, #0]
   b9254:	3501      	adds	r5, #1
   b9256:	6005      	str	r5, [r0, #0]
   b9258:	e7d9      	b.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b925a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b925e:	f000 8133 	beq.w	b94c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9262:	f8d0 8000 	ldr.w	r8, [r0]
   b9266:	4542      	cmp	r2, r8
   b9268:	d90e      	bls.n	b9288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b926a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b926e:	b15d      	cbz	r5, b9288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b9270:	2d3a      	cmp	r5, #58	; 0x3a
   b9272:	f200 8169 	bhi.w	b9548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b9276:	2d1f      	cmp	r5, #31
   b9278:	f200 8151 	bhi.w	b951e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b927c:	2d0a      	cmp	r5, #10
   b927e:	f200 8160 	bhi.w	b9542 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b9282:	2d08      	cmp	r5, #8
   b9284:	f240 8156 	bls.w	b9534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b9288:	2b00      	cmp	r3, #0
   b928a:	f040 8162 	bne.w	b9552 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b928e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b9292:	6005      	str	r5, [r0, #0]
   b9294:	e0a5      	b.n	b93e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b9296:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b929a:	d037      	beq.n	b930c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b929c:	d82e      	bhi.n	b92fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b929e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b92a2:	d033      	beq.n	b930c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b92a4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b92a8:	d1db      	bne.n	b9262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b92aa:	2b00      	cmp	r3, #0
   b92ac:	d0d1      	beq.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b92ae:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b92b2:	6845      	ldr	r5, [r0, #4]
   b92b4:	3d01      	subs	r5, #1
   b92b6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b92ba:	2d00      	cmp	r5, #0
   b92bc:	db55      	blt.n	b936a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b92be:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b92c2:	3701      	adds	r7, #1
   b92c4:	d04d      	beq.n	b9362 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b92c6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b92ca:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b92ce:	d148      	bne.n	b9362 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b92d0:	f898 b000 	ldrb.w	fp, [r8]
   b92d4:	45cb      	cmp	fp, r9
   b92d6:	d14b      	bne.n	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b92d8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b92dc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b92e0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b92e4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b92e8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b92ec:	3701      	adds	r7, #1
   b92ee:	d042      	beq.n	b9376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b92f0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b92f4:	3701      	adds	r7, #1
   b92f6:	d13e      	bne.n	b9376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b92f8:	6085      	str	r5, [r0, #8]
				break;
   b92fa:	e7aa      	b.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b92fc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b9300:	d1af      	bne.n	b9262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b9302:	2b00      	cmp	r3, #0
   b9304:	d0a5      	beq.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b9306:	f04f 0901 	mov.w	r9, #1
   b930a:	e7d2      	b.n	b92b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b930c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b930e:	2b00      	cmp	r3, #0
   b9310:	d09f      	beq.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b9312:	6845      	ldr	r5, [r0, #4]
   b9314:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9316:	42af      	cmp	r7, r5
   b9318:	d94a      	bls.n	b93b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b931a:	f105 0e01 	add.w	lr, r5, #1
   b931e:	f8c0 e004 	str.w	lr, [r0, #4]
   b9322:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b9326:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b932a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b932e:	2500      	movs	r5, #0
   b9330:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b9334:	6885      	ldr	r5, [r0, #8]
   b9336:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b9338:	bf1f      	itttt	ne
   b933a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b933e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b9342:	3501      	addne	r5, #1
   b9344:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b9348:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b934c:	bf0c      	ite	eq
   b934e:	2501      	moveq	r5, #1
   b9350:	2502      	movne	r5, #2
   b9352:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b9356:	6805      	ldr	r5, [r0, #0]
   b9358:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b935c:	6845      	ldr	r5, [r0, #4]
   b935e:	3d01      	subs	r5, #1
   b9360:	e7ca      	b.n	b92f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b9362:	3d01      	subs	r5, #1
   b9364:	f1a8 0810 	sub.w	r8, r8, #16
   b9368:	e7a7      	b.n	b92ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b936a:	3501      	adds	r5, #1
   b936c:	f47f af71 	bne.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b9370:	f06f 0401 	mvn.w	r4, #1
   b9374:	e01e      	b.n	b93b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b9376:	3d01      	subs	r5, #1
   b9378:	1c6f      	adds	r7, r5, #1
   b937a:	f1ae 0e10 	sub.w	lr, lr, #16
   b937e:	d1b3      	bne.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b9380:	e767      	b.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b9382:	f10e 0901 	add.w	r9, lr, #1
   b9386:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b938a:	f8d0 8000 	ldr.w	r8, [r0]
   b938e:	4542      	cmp	r2, r8
   b9390:	f240 8093 	bls.w	b94ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b9394:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9398:	2d00      	cmp	r5, #0
   b939a:	f000 808e 	beq.w	b94ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b939e:	2d22      	cmp	r5, #34	; 0x22
   b93a0:	d130      	bne.n	b9404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b93a2:	b1f3      	cbz	r3, b93e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b93a4:	6845      	ldr	r5, [r0, #4]
   b93a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b93a8:	42af      	cmp	r7, r5
   b93aa:	d806      	bhi.n	b93ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b93ac:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b93b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b93b4:	4620      	mov	r0, r4
   b93b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b93ba:	f105 0e01 	add.w	lr, r5, #1
   b93be:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b93c2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b93c6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b93ca:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b93ce:	2700      	movs	r7, #0
   b93d0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b93d2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b93d6:	f04f 0a03 	mov.w	sl, #3
   b93da:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b93de:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b93e2:	6885      	ldr	r5, [r0, #8]
   b93e4:	1c6f      	adds	r7, r5, #1
				count++;
   b93e6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b93ea:	f43f af32 	beq.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b93ee:	2b00      	cmp	r3, #0
   b93f0:	f43f af2f 	beq.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b93f4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b93f8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b93fc:	3501      	adds	r5, #1
   b93fe:	f8ce 500c 	str.w	r5, [lr, #12]
   b9402:	e726      	b.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b9404:	2d5c      	cmp	r5, #92	; 0x5c
   b9406:	d111      	bne.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9408:	f108 0501 	add.w	r5, r8, #1
   b940c:	42aa      	cmp	r2, r5
   b940e:	d90d      	bls.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b9410:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b9412:	5d4d      	ldrb	r5, [r1, r5]
   b9414:	2d75      	cmp	r5, #117	; 0x75
   b9416:	d82b      	bhi.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9418:	2d6d      	cmp	r5, #109	; 0x6d
   b941a:	d80b      	bhi.n	b9434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b941c:	2d66      	cmp	r5, #102	; 0x66
   b941e:	d827      	bhi.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9420:	2d5b      	cmp	r5, #91	; 0x5b
   b9422:	d81d      	bhi.n	b9460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b9424:	2d22      	cmp	r5, #34	; 0x22
   b9426:	d001      	beq.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9428:	2d2f      	cmp	r5, #47	; 0x2f
   b942a:	d121      	bne.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b942c:	6805      	ldr	r5, [r0, #0]
   b942e:	3501      	adds	r5, #1
   b9430:	6005      	str	r5, [r0, #0]
   b9432:	e7aa      	b.n	b938a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b9434:	3d6e      	subs	r5, #110	; 0x6e
   b9436:	2d07      	cmp	r5, #7
   b9438:	d81a      	bhi.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b943a:	a701      	add	r7, pc, #4	; (adr r7, b9440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b943c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b9440:	000b942d 	.word	0x000b942d
   b9444:	000b9471 	.word	0x000b9471
   b9448:	000b9471 	.word	0x000b9471
   b944c:	000b9471 	.word	0x000b9471
   b9450:	000b942d 	.word	0x000b942d
   b9454:	000b9471 	.word	0x000b9471
   b9458:	000b942d 	.word	0x000b942d
   b945c:	000b9477 	.word	0x000b9477
   b9460:	3d5c      	subs	r5, #92	; 0x5c
   b9462:	b2ed      	uxtb	r5, r5
   b9464:	fa0c f505 	lsl.w	r5, ip, r5
   b9468:	f240 4741 	movw	r7, #1089	; 0x441
   b946c:	423d      	tst	r5, r7
   b946e:	d1dd      	bne.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b9470:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b9474:	e77c      	b.n	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b9476:	f108 0502 	add.w	r5, r8, #2
   b947a:	6005      	str	r5, [r0, #0]
   b947c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9480:	f8d0 8000 	ldr.w	r8, [r0]
   b9484:	4542      	cmp	r2, r8
   b9486:	d803      	bhi.n	b9490 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9488:	6805      	ldr	r5, [r0, #0]
   b948a:	3d01      	subs	r5, #1
   b948c:	6005      	str	r5, [r0, #0]
					break;
   b948e:	e7cd      	b.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9490:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9494:	2d00      	cmp	r5, #0
   b9496:	d0f7      	beq.n	b9488 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9498:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b949c:	f1bb 0f09 	cmp.w	fp, #9
   b94a0:	d904      	bls.n	b94ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b94a2:	f025 0520 	bic.w	r5, r5, #32
   b94a6:	3d41      	subs	r5, #65	; 0x41
   b94a8:	2d05      	cmp	r5, #5
   b94aa:	d8e1      	bhi.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b94ac:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b94b0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b94b4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b94b6:	d1e3      	bne.n	b9480 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b94b8:	e7e6      	b.n	b9488 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b94ba:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b94be:	f06f 0402 	mvn.w	r4, #2
   b94c2:	e777      	b.n	b93b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b94c4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b94c8:	2b00      	cmp	r3, #0
   b94ca:	f43f aec2 	beq.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b94ce:	6885      	ldr	r5, [r0, #8]
   b94d0:	1c6f      	adds	r7, r5, #1
   b94d2:	f43f aebe 	beq.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b94d6:	012d      	lsls	r5, r5, #4
   b94d8:	5d5d      	ldrb	r5, [r3, r5]
   b94da:	3d01      	subs	r5, #1
   b94dc:	2d01      	cmp	r5, #1
   b94de:	f67f aeb8 	bls.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b94e2:	6845      	ldr	r5, [r0, #4]
   b94e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b94e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b94ec:	f1b8 0f00 	cmp.w	r8, #0
   b94f0:	f6ff aeaf 	blt.w	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b94f4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b94f8:	3d01      	subs	r5, #1
   b94fa:	2d01      	cmp	r5, #1
   b94fc:	d80a      	bhi.n	b9514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b94fe:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b9502:	3501      	adds	r5, #1
   b9504:	d006      	beq.n	b9514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b9506:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b950a:	3501      	adds	r5, #1
   b950c:	d102      	bne.n	b9514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b950e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b9512:	e69e      	b.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b9514:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9518:	f1ae 0e10 	sub.w	lr, lr, #16
   b951c:	e7e6      	b.n	b94ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b951e:	f1a5 0920 	sub.w	r9, r5, #32
   b9522:	4f24      	ldr	r7, [pc, #144]	; (b95b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b9524:	fa5f f989 	uxtb.w	r9, r9
   b9528:	fa0c f909 	lsl.w	r9, ip, r9
   b952c:	ea19 0f07 	tst.w	r9, r7
   b9530:	f47f aeaa 	bne.w	b9288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b9534:	3d20      	subs	r5, #32
   b9536:	2d5e      	cmp	r5, #94	; 0x5e
   b9538:	d89a      	bhi.n	b9470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b953a:	f108 0501 	add.w	r5, r8, #1
   b953e:	6005      	str	r5, [r0, #0]
   b9540:	e68f      	b.n	b9262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b9542:	2d0d      	cmp	r5, #13
   b9544:	d1f6      	bne.n	b9534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b9546:	e69f      	b.n	b9288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b9548:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b954c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b9550:	e7f8      	b.n	b9544 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b9552:	6845      	ldr	r5, [r0, #4]
   b9554:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9556:	42af      	cmp	r7, r5
   b9558:	f67f af28 	bls.w	b93ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b955c:	f105 0801 	add.w	r8, r5, #1
   b9560:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b9564:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9568:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b956c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b9570:	2700      	movs	r7, #0
   b9572:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b9574:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b9578:	f04f 0a04 	mov.w	sl, #4
   b957c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b9580:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b9584:	6805      	ldr	r5, [r0, #0]
   b9586:	3d01      	subs	r5, #1
   b9588:	e683      	b.n	b9292 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b958a:	2b00      	cmp	r3, #0
   b958c:	f43f af12 	beq.w	b93b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9590:	6842      	ldr	r2, [r0, #4]
   b9592:	1e51      	subs	r1, r2, #1
   b9594:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b9598:	2900      	cmp	r1, #0
   b959a:	f6ff af0b 	blt.w	b93b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b959e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b95a2:	3201      	adds	r2, #1
   b95a4:	d003      	beq.n	b95ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b95a6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b95aa:	3201      	adds	r2, #1
   b95ac:	d087      	beq.n	b94be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b95ae:	3901      	subs	r1, #1
   b95b0:	3b10      	subs	r3, #16
   b95b2:	e7f1      	b.n	b9598 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b95b4:	04001001 	.word	0x04001001

000b95b8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b95b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b95ba:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b95bc:	4604      	mov	r4, r0
	if (offset == 0) {
   b95be:	b912      	cbnz	r2, b95c6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b95c0:	2000      	movs	r0, #0
}
   b95c2:	b003      	add	sp, #12
   b95c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b95c6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b95c8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b95cc:	b1ab      	cbz	r3, b95fa <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b95ce:	2100      	movs	r1, #0
	parser->toknext = 0;
   b95d0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b95d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b95d8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b95da:	69c1      	ldr	r1, [r0, #28]
   b95dc:	9100      	str	r1, [sp, #0]
   b95de:	6841      	ldr	r1, [r0, #4]
   b95e0:	4630      	mov	r0, r6
   b95e2:	f7ff fe0d 	bl	b9200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b95e6:	1c43      	adds	r3, r0, #1
   b95e8:	d128      	bne.n	b963c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b95ea:	7c25      	ldrb	r5, [r4, #16]
   b95ec:	2d00      	cmp	r5, #0
   b95ee:	d1e7      	bne.n	b95c0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b95f0:	6960      	ldr	r0, [r4, #20]
   b95f2:	f003 ff1f 	bl	bd434 <free>
			tokens = 0;
   b95f6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b95f8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b95fa:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b95fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b9600:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b9604:	68e2      	ldr	r2, [r4, #12]
   b9606:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b9608:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b960a:	9500      	str	r5, [sp, #0]
   b960c:	462b      	mov	r3, r5
   b960e:	4630      	mov	r0, r6
   b9610:	f7ff fdf6 	bl	b9200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b9614:	2800      	cmp	r0, #0
   b9616:	dbd3      	blt.n	b95c0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b9618:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b961a:	d017      	beq.n	b964c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b961c:	0100      	lsls	r0, r0, #4
   b961e:	f003 ff01 	bl	bd424 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9622:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b9624:	6160      	str	r0, [r4, #20]
   b9626:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9628:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b962a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b962e:	68e2      	ldr	r2, [r4, #12]
   b9630:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b9632:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9634:	4630      	mov	r0, r6
   b9636:	f7ff fde3 	bl	b9200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b963a:	e001      	b.n	b9640 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b963c:	2800      	cmp	r0, #0
   b963e:	dbbf      	blt.n	b95c0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b9640:	6963      	ldr	r3, [r4, #20]
   b9642:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b9646:	61a0      	str	r0, [r4, #24]
	return true;
   b9648:	2001      	movs	r0, #1
   b964a:	e7ba      	b.n	b95c2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b964c:	6963      	ldr	r3, [r4, #20]
   b964e:	61a3      	str	r3, [r4, #24]
   b9650:	e7fa      	b.n	b9648 <_ZN10JsonParser5parseEv+0x90>

000b9652 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b9652:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b9654:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9656:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b9658:	4604      	mov	r4, r0
	if (start == -1) {
   b965a:	d018      	beq.n	b968e <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b965c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b965e:	2a00      	cmp	r2, #0
   b9660:	dd08      	ble.n	b9674 <_ZN12JsonModifier6finishEv+0x22>
   b9662:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b9664:	68e5      	ldr	r5, [r4, #12]
   b9666:	6848      	ldr	r0, [r1, #4]
   b9668:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b966a:	442b      	add	r3, r5
   b966c:	4401      	add	r1, r0
   b966e:	4418      	add	r0, r3
   b9670:	f007 fe9c 	bl	c13ac <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b9674:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b9678:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b967a:	440b      	add	r3, r1
   b967c:	68e1      	ldr	r1, [r4, #12]
   b967e:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b9680:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b9682:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b9684:	f7ff ff98 	bl	b95b8 <_ZN10JsonParser5parseEv>
	start = -1;
   b9688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b968c:	6363      	str	r3, [r4, #52]	; 0x34
}
   b968e:	bd38      	pop	{r3, r4, r5, pc}

000b9690 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b9690:	4770      	bx	lr

000b9692 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b9692:	4770      	bx	lr

000b9694 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b9694:	b510      	push	{r4, lr}
}
   b9696:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b9698:	4604      	mov	r4, r0
}
   b969a:	f7fa fd00 	bl	b409e <_ZdlPvj>
   b969e:	4620      	mov	r0, r4
   b96a0:	bd10      	pop	{r4, pc}

000b96a2 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b96a2:	b510      	push	{r4, lr}
}
   b96a4:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b96a6:	4604      	mov	r4, r0
}
   b96a8:	f7fa fcf9 	bl	b409e <_ZdlPvj>
   b96ac:	4620      	mov	r0, r4
   b96ae:	bd10      	pop	{r4, pc}

000b96b0 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b96b0:	b510      	push	{r4, lr}
   b96b2:	4b05      	ldr	r3, [pc, #20]	; (b96c8 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b96b4:	4604      	mov	r4, r0
   b96b6:	f840 3b1c 	str.w	r3, [r0], #28
   b96ba:	f006 fa0d 	bl	bfad8 <_ZN6StringD1Ev>
   b96be:	1d20      	adds	r0, r4, #4
   b96c0:	f006 fa0a 	bl	bfad8 <_ZN6StringD1Ev>
}
   b96c4:	4620      	mov	r0, r4
   b96c6:	bd10      	pop	{r4, pc}
   b96c8:	000c4dec 	.word	0x000c4dec

000b96cc <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b96cc:	b510      	push	{r4, lr}
   b96ce:	4604      	mov	r4, r0
}
   b96d0:	f7ff ffee 	bl	b96b0 <_ZN22LocalTimePosixTimezoneD1Ev>
   b96d4:	4620      	mov	r0, r4
   b96d6:	2158      	movs	r1, #88	; 0x58
   b96d8:	f7fa fce1 	bl	b409e <_ZdlPvj>
   b96dc:	4620      	mov	r0, r4
   b96de:	bd10      	pop	{r4, pc}

000b96e0 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b96e0:	b510      	push	{r4, lr}
   b96e2:	4b04      	ldr	r3, [pc, #16]	; (b96f4 <_ZN9LocalTimeD1Ev+0x14>)
   b96e4:	4604      	mov	r4, r0
   b96e6:	f840 3b04 	str.w	r3, [r0], #4
   b96ea:	f7ff ffe1 	bl	b96b0 <_ZN22LocalTimePosixTimezoneD1Ev>
   b96ee:	4620      	mov	r0, r4
   b96f0:	bd10      	pop	{r4, pc}
   b96f2:	bf00      	nop
   b96f4:	000c4dbc 	.word	0x000c4dbc

000b96f8 <_ZN9LocalTimeD0Ev>:
   b96f8:	b510      	push	{r4, lr}
   b96fa:	4604      	mov	r4, r0
   b96fc:	f7ff fff0 	bl	b96e0 <_ZN9LocalTimeD1Ev>
   b9700:	4620      	mov	r0, r4
   b9702:	2160      	movs	r1, #96	; 0x60
   b9704:	f7fa fccb 	bl	b409e <_ZdlPvj>
   b9708:	4620      	mov	r0, r4
   b970a:	bd10      	pop	{r4, pc}

000b970c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b970c:	f020 0302 	bic.w	r3, r0, #2
   b9710:	2b01      	cmp	r3, #1
   b9712:	d003      	beq.n	b971c <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b9714:	1f43      	subs	r3, r0, #5
   b9716:	4258      	negs	r0, r3
   b9718:	4158      	adcs	r0, r3
   b971a:	4770      	bx	lr
   b971c:	4618      	mov	r0, r3
   b971e:	4770      	bx	lr

000b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b9720:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b9724:	7103      	strb	r3, [r0, #4]
   b9726:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b972a:	7143      	strb	r3, [r0, #5]
   b972c:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b9730:	7183      	strb	r3, [r0, #6]
   b9732:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b9736:	71c3      	strb	r3, [r0, #7]
   b9738:	4770      	bx	lr

000b973a <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b973a:	b538      	push	{r3, r4, r5, lr}
   b973c:	4604      	mov	r4, r0
   b973e:	460d      	mov	r5, r1
   b9740:	3004      	adds	r0, #4
   b9742:	3104      	adds	r1, #4
   b9744:	f006 fa4f 	bl	bfbe6 <_ZN6StringaSERKS_>
   b9748:	f105 0114 	add.w	r1, r5, #20
   b974c:	f104 0014 	add.w	r0, r4, #20
   b9750:	f7ff ffe6 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9754:	f105 011c 	add.w	r1, r5, #28
   b9758:	f104 001c 	add.w	r0, r4, #28
   b975c:	f006 fa43 	bl	bfbe6 <_ZN6StringaSERKS_>
   b9760:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b9764:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9768:	f7ff ffda 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b976c:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b9770:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b9774:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b9778:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b977c:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b9780:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b9784:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b9788:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b978c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b9790:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9794:	f7ff ffc4 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9798:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b979c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b97a0:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b97a4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b97a8:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b97ac:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b97b0:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b97b4:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b97b8:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b97bc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b97c0:	f7ff ffae 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b97c4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b97c8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b97cc:	bd38      	pop	{r3, r4, r5, pc}

000b97ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b97ce:	680b      	ldr	r3, [r1, #0]
   b97d0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b97d2:	684b      	ldr	r3, [r1, #4]
   b97d4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b97d6:	b113      	cbz	r3, b97de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b97d8:	685a      	ldr	r2, [r3, #4]
   b97da:	3201      	adds	r2, #1
   b97dc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b97de:	4770      	bx	lr

000b97e0 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b97e0:	4a02      	ldr	r2, [pc, #8]	; (b97ec <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b97e2:	6002      	str	r2, [r0, #0]
   b97e4:	684a      	ldr	r2, [r1, #4]
   b97e6:	6042      	str	r2, [r0, #4]
   b97e8:	4770      	bx	lr
   b97ea:	bf00      	nop
   b97ec:	000c4dcc 	.word	0x000c4dcc

000b97f0 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b97f0:	694a      	ldr	r2, [r1, #20]
   b97f2:	6803      	ldr	r3, [r0, #0]
   b97f4:	f362 0316 	bfi	r3, r2, #0, #23
   b97f8:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b97fa:	690b      	ldr	r3, [r1, #16]
   b97fc:	1c5a      	adds	r2, r3, #1
   b97fe:	8843      	ldrh	r3, [r0, #2]
   b9800:	f362 13ca 	bfi	r3, r2, #7, #4
   b9804:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b9806:	68ca      	ldr	r2, [r1, #12]
   b9808:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b980c:	f362 03c7 	bfi	r3, r2, #3, #5
   b9810:	70c3      	strb	r3, [r0, #3]
}
   b9812:	4770      	bx	lr

000b9814 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b9814:	4a02      	ldr	r2, [pc, #8]	; (b9820 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b9816:	6002      	str	r2, [r0, #0]
   b9818:	2200      	movs	r2, #0
   b981a:	6042      	str	r2, [r0, #4]
}
   b981c:	4770      	bx	lr
   b981e:	bf00      	nop
   b9820:	000c4dcc 	.word	0x000c4dcc

000b9824 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b9824:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b9826:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b9828:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b982a:	8083      	strh	r3, [r0, #4]
   b982c:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b982e:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b9830:	ab05      	add	r3, sp, #20
   b9832:	9300      	str	r3, [sp, #0]
   b9834:	4913      	ldr	r1, [pc, #76]	; (b9884 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b9836:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b9838:	ab04      	add	r3, sp, #16
   b983a:	aa03      	add	r2, sp, #12
   b983c:	4628      	mov	r0, r5
   b983e:	f003 fe11 	bl	bd464 <sscanf>
   b9842:	2803      	cmp	r0, #3
   b9844:	d107      	bne.n	b9856 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b9846:	9b03      	ldr	r3, [sp, #12]
   b9848:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b984a:	9b04      	ldr	r3, [sp, #16]
   b984c:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b984e:	9b05      	ldr	r3, [sp, #20]
   b9850:	71a3      	strb	r3, [r4, #6]
}
   b9852:	b007      	add	sp, #28
   b9854:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b9856:	490c      	ldr	r1, [pc, #48]	; (b9888 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b9858:	ab04      	add	r3, sp, #16
   b985a:	aa03      	add	r2, sp, #12
   b985c:	4628      	mov	r0, r5
   b985e:	f003 fe01 	bl	bd464 <sscanf>
   b9862:	2802      	cmp	r0, #2
   b9864:	d104      	bne.n	b9870 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b9866:	9b03      	ldr	r3, [sp, #12]
   b9868:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b986a:	9b04      	ldr	r3, [sp, #16]
   b986c:	7163      	strb	r3, [r4, #5]
   b986e:	e7f0      	b.n	b9852 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b9870:	4906      	ldr	r1, [pc, #24]	; (b988c <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b9872:	aa03      	add	r2, sp, #12
   b9874:	4628      	mov	r0, r5
   b9876:	f003 fdf5 	bl	bd464 <sscanf>
   b987a:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b987c:	bf04      	itt	eq
   b987e:	9b03      	ldreq	r3, [sp, #12]
   b9880:	7123      	strbeq	r3, [r4, #4]
}
   b9882:	e7e6      	b.n	b9852 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b9884:	000c4d80 	.word	0x000c4d80
   b9888:	000c4d83 	.word	0x000c4d83
   b988c:	000c3d47 	.word	0x000c3d47

000b9890 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b9890:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9894:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9898:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b989c:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b989e:	bfb8      	it	lt
   b98a0:	4808      	ldrlt	r0, [pc, #32]	; (b98c4 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b98a2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b98a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b98aa:	bfbd      	ittte	lt
   b98ac:	fb00 3002 	mlalt	r0, r0, r2, r3
   b98b0:	1840      	addlt	r0, r0, r1
   b98b2:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b98b4:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b98b8:	bfa4      	itt	ge
   b98ba:	fb00 3002 	mlage	r0, r0, r2, r3
   b98be:	1840      	addge	r0, r0, r1
}
   b98c0:	4770      	bx	lr
   b98c2:	bf00      	nop
   b98c4:	fffff1f0 	.word	0xfffff1f0

000b98c8 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b98c8:	b508      	push	{r3, lr}
   b98ca:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b98ce:	b14b      	cbz	r3, b98e4 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b98d0:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b98d4:	b943      	cbnz	r3, b98e8 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b98d6:	302c      	adds	r0, #44	; 0x2c
   b98d8:	f7ff ffda 	bl	b9890 <_ZNK12LocalTimeHMS9toSecondsEv>
   b98dc:	fab0 f080 	clz	r0, r0
   b98e0:	0940      	lsrs	r0, r0, #5
   b98e2:	bd08      	pop	{r3, pc}
   b98e4:	2001      	movs	r0, #1
   b98e6:	e7fc      	b.n	b98e2 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b98e8:	2000      	movs	r0, #0
   b98ea:	e7fa      	b.n	b98e2 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b98ec <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b98ec:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b98f0:	b943      	cbnz	r3, b9904 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b98f2:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b98f6:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b98f8:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b98fc:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b98fe:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b9902:	600b      	str	r3, [r1, #0]
}
   b9904:	4770      	bx	lr

000b9906 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b9906:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b990a:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b990c:	b9b3      	cbnz	r3, b993c <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b990e:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b9912:	688c      	ldr	r4, [r1, #8]
   b9914:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b9916:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b991a:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b991c:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b9920:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b9922:	bfb5      	itete	lt
   b9924:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b9926:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b9928:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b992a:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b992c:	bfb5      	itete	lt
   b992e:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b9932:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b9936:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b9938:	189b      	addge	r3, r3, r2
   b993a:	600b      	str	r3, [r1, #0]
}
   b993c:	bd30      	pop	{r4, r5, pc}
	...

000b9940 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b9940:	b508      	push	{r3, lr}
   b9942:	4a05      	ldr	r2, [pc, #20]	; (b9958 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b9944:	6002      	str	r2, [r0, #0]
   b9946:	2200      	movs	r2, #0
   b9948:	4603      	mov	r3, r0
   b994a:	6042      	str	r2, [r0, #4]
   b994c:	3008      	adds	r0, #8
   b994e:	f7ff ff61 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
}
   b9952:	4618      	mov	r0, r3
   b9954:	bd08      	pop	{r3, pc}
   b9956:	bf00      	nop
   b9958:	000c4ddc 	.word	0x000c4ddc

000b995c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b995c:	2300      	movs	r3, #0
   b995e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b9960:	8183      	strh	r3, [r0, #12]
   b9962:	7383      	strb	r3, [r0, #14]
}
   b9964:	4770      	bx	lr
	...

000b9968 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b9968:	b530      	push	{r4, r5, lr}
   b996a:	4604      	mov	r4, r0
   b996c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b996e:	460d      	mov	r5, r1
   b9970:	b111      	cbz	r1, b9978 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b9972:	780b      	ldrb	r3, [r1, #0]
   b9974:	2b4d      	cmp	r3, #77	; 0x4d
   b9976:	d005      	beq.n	b9984 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b9978:	4620      	mov	r0, r4
}
   b997a:	b007      	add	sp, #28
   b997c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b9980:	f7ff bfec 	b.w	b995c <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b9984:	ab05      	add	r3, sp, #20
   b9986:	9300      	str	r3, [sp, #0]
   b9988:	4911      	ldr	r1, [pc, #68]	; (b99d0 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b998a:	ab04      	add	r3, sp, #16
   b998c:	aa03      	add	r2, sp, #12
   b998e:	4628      	mov	r0, r5
   b9990:	f003 fd68 	bl	bd464 <sscanf>
   b9994:	2803      	cmp	r0, #3
   b9996:	d116      	bne.n	b99c6 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b9998:	9b03      	ldr	r3, [sp, #12]
   b999a:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b999c:	9b04      	ldr	r3, [sp, #16]
   b999e:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b99a0:	9b05      	ldr	r3, [sp, #20]
   b99a2:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b99a4:	212f      	movs	r1, #47	; 0x2f
   b99a6:	4628      	mov	r0, r5
   b99a8:	f007 fd9e 	bl	c14e8 <strchr>
        if (cp) {
   b99ac:	b140      	cbz	r0, b99c0 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b99ae:	1c41      	adds	r1, r0, #1
   b99b0:	f104 0008 	add.w	r0, r4, #8
   b99b4:	f7ff ff36 	bl	b9824 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b99b8:	2301      	movs	r3, #1
   b99ba:	71e3      	strb	r3, [r4, #7]
}
   b99bc:	b007      	add	sp, #28
   b99be:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b99c0:	81a0      	strh	r0, [r4, #12]
   b99c2:	73a0      	strb	r0, [r4, #14]
}
   b99c4:	e7f8      	b.n	b99b8 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b99c6:	4620      	mov	r0, r4
   b99c8:	f7ff ffc8 	bl	b995c <_ZN15LocalTimeChange5clearEv>
   b99cc:	e7f6      	b.n	b99bc <_ZN15LocalTimeChange5parseEPKc+0x54>
   b99ce:	bf00      	nop
   b99d0:	000c4d9b 	.word	0x000c4d9b

000b99d4 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b99d4:	4b10      	ldr	r3, [pc, #64]	; (b9a18 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b99d6:	4911      	ldr	r1, [pc, #68]	; (b9a1c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b99d8:	b510      	push	{r4, lr}
   b99da:	4604      	mov	r4, r0
   b99dc:	f840 3b04 	str.w	r3, [r0], #4
   b99e0:	f006 f8c5 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   b99e4:	f104 0014 	add.w	r0, r4, #20
   b99e8:	f7ff ff14 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
   b99ec:	490b      	ldr	r1, [pc, #44]	; (b9a1c <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b99ee:	f104 001c 	add.w	r0, r4, #28
   b99f2:	f006 f8bc 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   b99f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b99fa:	f7ff ff0b 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
   b99fe:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9a02:	f7ff ff9d 	bl	b9940 <_ZN15LocalTimeChangeC1Ev>
   b9a06:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9a0a:	f7ff ff99 	bl	b9940 <_ZN15LocalTimeChangeC1Ev>
   b9a0e:	2300      	movs	r3, #0
   b9a10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b9a14:	4620      	mov	r0, r4
   b9a16:	bd10      	pop	{r4, pc}
   b9a18:	000c4dec 	.word	0x000c4dec
   b9a1c:	000c5654 	.word	0x000c5654

000b9a20 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b9a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a24:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b9a26:	4608      	mov	r0, r1
   b9a28:	f007 fd88 	bl	c153c <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b9a2c:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b9a2e:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b9a30:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b9a32:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b9a36:	493f      	ldr	r1, [pc, #252]	; (b9b34 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b9a38:	9801      	ldr	r0, [sp, #4]
   b9a3a:	aa01      	add	r2, sp, #4
   b9a3c:	f008 fc86 	bl	c234c <strtok_r>
   b9a40:	4601      	mov	r1, r0
   b9a42:	2800      	cmp	r0, #0
   b9a44:	d062      	beq.n	b9b0c <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b9a46:	2d01      	cmp	r5, #1
   b9a48:	f105 0301 	add.w	r3, r5, #1
   b9a4c:	d053      	beq.n	b9af6 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b9a4e:	2d02      	cmp	r5, #2
   b9a50:	d056      	beq.n	b9b00 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b9a52:	2d00      	cmp	r5, #0
   b9a54:	d146      	bne.n	b9ae4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b9a56:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b9a58:	f892 9000 	ldrb.w	r9, [r2]
   b9a5c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b9a60:	4615      	mov	r5, r2
   b9a62:	4617      	mov	r7, r2
   b9a64:	f102 0201 	add.w	r2, r2, #1
   b9a68:	d8f6      	bhi.n	b9a58 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b9a6a:	2200      	movs	r2, #0
   b9a6c:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b9a6e:	f104 001c 	add.w	r0, r4, #28
   b9a72:	f006 f8da 	bl	bfc2a <_ZN6StringaSEPKc>
                valid = true;
   b9a76:	2201      	movs	r2, #1
                *cp = save2;
   b9a78:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b9a7c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b9a80:	782a      	ldrb	r2, [r5, #0]
   b9a82:	b36a      	cbz	r2, b9ae0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b9a84:	f897 a000 	ldrb.w	sl, [r7]
   b9a88:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b9a8c:	2a3f      	cmp	r2, #63	; 0x3f
   b9a8e:	46b9      	mov	r9, r7
   b9a90:	46bb      	mov	fp, r7
   b9a92:	f107 0701 	add.w	r7, r7, #1
   b9a96:	d9f5      	bls.n	b9a84 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b9a98:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b9a9a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b9a9e:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b9aa2:	4629      	mov	r1, r5
   b9aa4:	4638      	mov	r0, r7
   b9aa6:	f7ff febd 	bl	b9824 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b9aaa:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b9aae:	f1ba 0f00 	cmp.w	sl, #0
   b9ab2:	d015      	beq.n	b9ae0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b9ab4:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b9ab6:	f81b ab01 	ldrb.w	sl, [fp], #1
   b9aba:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b9abe:	d8f9      	bhi.n	b9ab4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b9ac0:	2200      	movs	r2, #0
   b9ac2:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b9ac4:	4649      	mov	r1, r9
   b9ac6:	1d20      	adds	r0, r4, #4
   b9ac8:	f006 f8af 	bl	bfc2a <_ZN6StringaSEPKc>
                        *cp = save2;
   b9acc:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b9ad0:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b9ad4:	f1ba 0f00 	cmp.w	sl, #0
   b9ad8:	d006      	beq.n	b9ae8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b9ada:	4629      	mov	r1, r5
   b9adc:	f7ff fea2 	bl	b9824 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b9ae0:	2501      	movs	r5, #1
   b9ae2:	e7a8      	b.n	b9a36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b9ae4:	461d      	mov	r5, r3
   b9ae6:	e7a6      	b.n	b9a36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b9ae8:	4639      	mov	r1, r7
   b9aea:	f7ff fe19 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b9aee:	7e23      	ldrb	r3, [r4, #24]
   b9af0:	3b01      	subs	r3, #1
   b9af2:	7623      	strb	r3, [r4, #24]
   b9af4:	e7f4      	b.n	b9ae0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b9af6:	4640      	mov	r0, r8
   b9af8:	f7ff ff36 	bl	b9968 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9afc:	2502      	movs	r5, #2
   b9afe:	e79a      	b.n	b9a36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b9b00:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9b04:	f7ff ff30 	bl	b9968 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9b08:	2503      	movs	r5, #3
   b9b0a:	e794      	b.n	b9a36 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b9b0c:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b9b10:	b143      	cbz	r3, b9b24 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b9b12:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b9b16:	b92a      	cbnz	r2, b9b24 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b9b18:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9b1c:	f7ff ff1e 	bl	b995c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b9b20:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b9b24:	4630      	mov	r0, r6
   b9b26:	f003 fc85 	bl	bd434 <free>

    return valid;
}
   b9b2a:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b9b2e:	b003      	add	sp, #12
   b9b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b34:	000c4da5 	.word	0x000c4da5

000b9b38 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b9b38:	b538      	push	{r3, r4, r5, lr}
   b9b3a:	4b13      	ldr	r3, [pc, #76]	; (b9b88 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b9b3c:	4604      	mov	r4, r0
   b9b3e:	460d      	mov	r5, r1
   b9b40:	f840 3b04 	str.w	r3, [r0], #4
   b9b44:	4911      	ldr	r1, [pc, #68]	; (b9b8c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9b46:	f006 f812 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   b9b4a:	f104 0014 	add.w	r0, r4, #20
   b9b4e:	f7ff fe61 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
   b9b52:	490e      	ldr	r1, [pc, #56]	; (b9b8c <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9b54:	f104 001c 	add.w	r0, r4, #28
   b9b58:	f006 f809 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   b9b5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9b60:	f7ff fe58 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
   b9b64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9b68:	f7ff feea 	bl	b9940 <_ZN15LocalTimeChangeC1Ev>
   b9b6c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9b70:	f7ff fee6 	bl	b9940 <_ZN15LocalTimeChangeC1Ev>
   b9b74:	2300      	movs	r3, #0
   b9b76:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b9b7a:	4629      	mov	r1, r5
   b9b7c:	4620      	mov	r0, r4
   b9b7e:	f7ff ff4f 	bl	b9a20 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b9b82:	4620      	mov	r0, r4
   b9b84:	bd38      	pop	{r3, r4, r5, pc}
   b9b86:	bf00      	nop
   b9b88:	000c4dec 	.word	0x000c4dec
   b9b8c:	000c5654 	.word	0x000c5654

000b9b90 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9b90:	b508      	push	{r3, lr}
   b9b92:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9b94:	f7ff fe3e 	bl	b9814 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b9b98:	688a      	ldr	r2, [r1, #8]
   b9b9a:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b9b9c:	684a      	ldr	r2, [r1, #4]
   b9b9e:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9ba0:	680a      	ldr	r2, [r1, #0]
   b9ba2:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9ba4:	4618      	mov	r0, r3
   b9ba6:	bd08      	pop	{r3, pc}

000b9ba8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b9ba8:	b513      	push	{r0, r1, r4, lr}
   b9baa:	4b07      	ldr	r3, [pc, #28]	; (b9bc8 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b9bac:	6003      	str	r3, [r0, #0]
   b9bae:	2300      	movs	r3, #0
   b9bb0:	6043      	str	r3, [r0, #4]
   b9bb2:	4604      	mov	r4, r0
    *this = value.hms();
   b9bb4:	4668      	mov	r0, sp
   b9bb6:	f7ff ffeb 	bl	b9b90 <_ZNK14LocalTimeValue3hmsEv>
   b9bba:	4620      	mov	r0, r4
   b9bbc:	4669      	mov	r1, sp
   b9bbe:	f7ff fdaf 	bl	b9720 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b9bc2:	b002      	add	sp, #8
   b9bc4:	bd10      	pop	{r4, pc}
   b9bc6:	bf00      	nop
   b9bc8:	000c4dcc 	.word	0x000c4dcc

000b9bcc <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b9bcc:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b9bce:	2300      	movs	r3, #0
   b9bd0:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b9bd2:	a801      	add	r0, sp, #4
   b9bd4:	9301      	str	r3, [sp, #4]
   b9bd6:	f7ff fe0b 	bl	b97f0 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b9bda:	9801      	ldr	r0, [sp, #4]
   b9bdc:	b003      	add	sp, #12
   b9bde:	f85d fb04 	ldr.w	pc, [sp], #4

000b9be2 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b9be2:	b510      	push	{r4, lr}
   b9be4:	4604      	mov	r4, r0
    *this = value.ymd();
   b9be6:	4608      	mov	r0, r1
   b9be8:	f7ff fff0 	bl	b9bcc <_ZNK14LocalTimeValue3ymdEv>
   b9bec:	6020      	str	r0, [r4, #0]
}
   b9bee:	bd10      	pop	{r4, pc}

000b9bf0 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b9bf0:	b510      	push	{r4, lr}
   b9bf2:	4604      	mov	r4, r0
   b9bf4:	b088      	sub	sp, #32
   b9bf6:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b9bf8:	3068      	adds	r0, #104	; 0x68
   b9bfa:	a901      	add	r1, sp, #4
   b9bfc:	f007 fb76 	bl	c12ec <asctime_r>
    int len = strlen(ascstr);
   b9c00:	a801      	add	r0, sp, #4
   b9c02:	f007 fcb8 	bl	c1576 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9c06:	ab08      	add	r3, sp, #32
   b9c08:	4418      	add	r0, r3
   b9c0a:	2300      	movs	r3, #0
   b9c0c:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b9c10:	a901      	add	r1, sp, #4
   b9c12:	4620      	mov	r0, r4
   b9c14:	f005 ffab 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9c18:	4620      	mov	r0, r4
   b9c1a:	b008      	add	sp, #32
   b9c1c:	bd10      	pop	{r4, pc}
	...

000b9c20 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9c20:	b538      	push	{r3, r4, r5, lr}
   b9c22:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9c24:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b9c26:	460d      	mov	r5, r1
    if (config.isZ()) {
   b9c28:	f7ff fe4e 	bl	b98c8 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9c2c:	b128      	cbz	r0, b9c3a <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9c2e:	4909      	ldr	r1, [pc, #36]	; (b9c54 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9c30:	4620      	mov	r0, r4
   b9c32:	f005 ff9c 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b9c36:	4620      	mov	r0, r4
   b9c38:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b9c3a:	6828      	ldr	r0, [r5, #0]
   b9c3c:	f7ff fd66 	bl	b970c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9c40:	b128      	cbz	r0, b9c4e <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9c42:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b9c46:	4620      	mov	r0, r4
   b9c48:	f005 ffdc 	bl	bfc04 <_ZN6StringC1ERKS_>
   b9c4c:	e7f3      	b.n	b9c36 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9c4e:	f105 0120 	add.w	r1, r5, #32
   b9c52:	e7f8      	b.n	b9c46 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9c54:	000c4da7 	.word	0x000c4da7

000b9c58 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b9c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c5c:	4680      	mov	r8, r0
   b9c5e:	b0a8      	sub	sp, #160	; 0xa0
   b9c60:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9c62:	4615      	mov	r5, r2
   b9c64:	b12a      	cbz	r2, b9c72 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b9c66:	4b47      	ldr	r3, [pc, #284]	; (b9d84 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b9c68:	4610      	mov	r0, r2
   b9c6a:	6819      	ldr	r1, [r3, #0]
   b9c6c:	f007 fc53 	bl	c1516 <strcmp>
   b9c70:	b938      	cbnz	r0, b9c82 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9c72:	4621      	mov	r1, r4
   b9c74:	4640      	mov	r0, r8
   b9c76:	f7ff ffbb 	bl	b9bf0 <_ZN16LocalTimeConvert7timeStrEv>
}
   b9c7a:	4640      	mov	r0, r8
   b9c7c:	b028      	add	sp, #160	; 0xa0
   b9c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9c82:	4629      	mov	r1, r5
   b9c84:	223f      	movs	r2, #63	; 0x3f
   b9c86:	a818      	add	r0, sp, #96	; 0x60
   b9c88:	f007 fc91 	bl	c15ae <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9c8c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c8e:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9c90:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c94:	f007 fc6f 	bl	c1576 <strlen>
    String zoneNameStr = zoneName();
   b9c98:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c9a:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9c9c:	a803      	add	r0, sp, #12
   b9c9e:	f7ff ffbf 	bl	b9c20 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9ca2:	1d20      	adds	r0, r4, #4
   b9ca4:	f7ff fe10 	bl	b98c8 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9ca8:	b348      	cbz	r0, b9cfe <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b9caa:	4937      	ldr	r1, [pc, #220]	; (b9d88 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b9cac:	a807      	add	r0, sp, #28
   b9cae:	f007 fc3c 	bl	c152a <strcpy>
   b9cb2:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9cb4:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b9cb6:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b9cba:	45ba      	cmp	sl, r7
   b9cbc:	d94c      	bls.n	b9d58 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b9cbe:	7833      	ldrb	r3, [r6, #0]
   b9cc0:	2b25      	cmp	r3, #37	; 0x25
   b9cc2:	f107 0901 	add.w	r9, r7, #1
   b9cc6:	d117      	bne.n	b9cf8 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b9cc8:	7873      	ldrb	r3, [r6, #1]
   b9cca:	2b7a      	cmp	r3, #122	; 0x7a
   b9ccc:	d136      	bne.n	b9d3c <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b9cce:	a807      	add	r0, sp, #28
   b9cd0:	f007 fc51 	bl	c1576 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9cd4:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b9cd6:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9cd8:	1838      	adds	r0, r7, r0
   b9cda:	ebaa 0207 	sub.w	r2, sl, r7
   b9cde:	1cb1      	adds	r1, r6, #2
   b9ce0:	4418      	add	r0, r3
   b9ce2:	f007 fb55 	bl	c1390 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9ce6:	462a      	mov	r2, r5
   b9ce8:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9cea:	4630      	mov	r0, r6
   b9cec:	f007 fb50 	bl	c1390 <memcpy>
            len = strlen(format_str);
   b9cf0:	a818      	add	r0, sp, #96	; 0x60
   b9cf2:	f007 fc40 	bl	c1576 <strlen>
   b9cf6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b9cf8:	3601      	adds	r6, #1
   b9cfa:	464f      	mov	r7, r9
   b9cfc:	e7db      	b.n	b9cb6 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9cfe:	6820      	ldr	r0, [r4, #0]
   b9d00:	f7ff fd04 	bl	b970c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9d04:	b1b8      	cbz	r0, b9d36 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b9d06:	f104 0018 	add.w	r0, r4, #24
   b9d0a:	f7ff fdc1 	bl	b9890 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b9d0e:	223c      	movs	r2, #60	; 0x3c
   b9d10:	fb90 f3f2 	sdiv	r3, r0, r2
   b9d14:	2b00      	cmp	r3, #0
   b9d16:	bfb8      	it	lt
   b9d18:	425b      	neglt	r3, r3
   b9d1a:	fbb3 f1f2 	udiv	r1, r3, r2
   b9d1e:	fb02 3311 	mls	r3, r2, r1, r3
   b9d22:	9300      	str	r3, [sp, #0]
   b9d24:	4a19      	ldr	r2, [pc, #100]	; (b9d8c <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b9d26:	4b1a      	ldr	r3, [pc, #104]	; (b9d90 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b9d28:	fb90 f3f3 	sdiv	r3, r0, r3
   b9d2c:	2110      	movs	r1, #16
   b9d2e:	a807      	add	r0, sp, #28
   b9d30:	f003 fba0 	bl	bd474 <snprintf>
   b9d34:	e7bd      	b.n	b9cb2 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9d36:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b9d3a:	e7e6      	b.n	b9d0a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9d3c:	2b5a      	cmp	r3, #90	; 0x5a
   b9d3e:	d1db      	bne.n	b9cf8 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9d40:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9d42:	ab18      	add	r3, sp, #96	; 0x60
   b9d44:	1978      	adds	r0, r7, r5
   b9d46:	ebaa 0207 	sub.w	r2, sl, r7
   b9d4a:	1cb1      	adds	r1, r6, #2
   b9d4c:	4418      	add	r0, r3
   b9d4e:	f007 fb1f 	bl	c1390 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9d52:	9903      	ldr	r1, [sp, #12]
   b9d54:	462a      	mov	r2, r5
   b9d56:	e7c8      	b.n	b9cea <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b9d58:	2100      	movs	r1, #0
   b9d5a:	222e      	movs	r2, #46	; 0x2e
   b9d5c:	a80c      	add	r0, sp, #48	; 0x30
   b9d5e:	910b      	str	r1, [sp, #44]	; 0x2c
   b9d60:	f007 fb3e 	bl	c13e0 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9d64:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b9d68:	aa18      	add	r2, sp, #96	; 0x60
   b9d6a:	2132      	movs	r1, #50	; 0x32
   b9d6c:	a80b      	add	r0, sp, #44	; 0x2c
   b9d6e:	f003 fbb9 	bl	bd4e4 <strftime>
    return String(buf);    
   b9d72:	a90b      	add	r1, sp, #44	; 0x2c
   b9d74:	4640      	mov	r0, r8
   b9d76:	f005 fefa 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b9d7a:	a803      	add	r0, sp, #12
   b9d7c:	f005 feac 	bl	bfad8 <_ZN6StringD1Ev>
   b9d80:	e77b      	b.n	b9c7a <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9d82:	bf00      	nop
   b9d84:	2003d688 	.word	0x2003d688
   b9d88:	000c4da7 	.word	0x000c4da7
   b9d8c:	000c4da9 	.word	0x000c4da9
   b9d90:	fffff1f0 	.word	0xfffff1f0

000b9d94 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9d94:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b9d96:	4d09      	ldr	r5, [pc, #36]	; (b9dbc <_ZN9LocalTime8instanceEv+0x28>)
   b9d98:	682b      	ldr	r3, [r5, #0]
   b9d9a:	b963      	cbnz	r3, b9db6 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9d9c:	2060      	movs	r0, #96	; 0x60
   b9d9e:	f7fa f97a 	bl	b4096 <_Znwj>
   b9da2:	4604      	mov	r4, r0
   b9da4:	b130      	cbz	r0, b9db4 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b9da6:	4b06      	ldr	r3, [pc, #24]	; (b9dc0 <_ZN9LocalTime8instanceEv+0x2c>)
   b9da8:	f840 3b04 	str.w	r3, [r0], #4
   b9dac:	f7ff fe12 	bl	b99d4 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9db0:	2364      	movs	r3, #100	; 0x64
   b9db2:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9db4:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b9db6:	6828      	ldr	r0, [r5, #0]
   b9db8:	bd38      	pop	{r3, r4, r5, pc}
   b9dba:	bf00      	nop
   b9dbc:	2003e4cc 	.word	0x2003e4cc
   b9dc0:	000c4dbc 	.word	0x000c4dbc

000b9dc4 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9dc4:	f003 bba6 	b.w	bd514 <mktime>

000b9dc8 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b9dc8:	3901      	subs	r1, #1
   b9dca:	290b      	cmp	r1, #11
   b9dcc:	d815      	bhi.n	b9dfa <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9dce:	e8df f001 	tbb	[pc, r1]
   b9dd2:	0816      	.short	0x0816
   b9dd4:	06160616 	.word	0x06160616
   b9dd8:	16061616 	.word	0x16061616
   b9ddc:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9dde:	201e      	movs	r0, #30
   b9de0:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9de2:	0783      	lsls	r3, r0, #30
   b9de4:	d10d      	bne.n	b9e02 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b9de6:	2364      	movs	r3, #100	; 0x64
   b9de8:	fb90 f2f3 	sdiv	r2, r0, r3
   b9dec:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9df0:	2800      	cmp	r0, #0
   b9df2:	bf0c      	ite	eq
   b9df4:	201c      	moveq	r0, #28
   b9df6:	201d      	movne	r0, #29
   b9df8:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b9dfa:	2000      	movs	r0, #0
   b9dfc:	4770      	bx	lr
            return 31;
   b9dfe:	201f      	movs	r0, #31
   b9e00:	4770      	bx	lr
                return 28;
   b9e02:	201c      	movs	r0, #28
}
   b9e04:	4770      	bx	lr

000b9e06 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b9e08:	2301      	movs	r3, #1
   b9e0a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9e0c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9e10:	3b01      	subs	r3, #1
   b9e12:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9e14:	2300      	movs	r3, #0
   b9e16:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9e1a:	4606      	mov	r6, r0
   b9e1c:	460c      	mov	r4, r1
   b9e1e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9e20:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9e22:	4620      	mov	r0, r4
   b9e24:	f7ff ffce 	bl	b9dc4 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9e28:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9e2c:	69a2      	ldr	r2, [r4, #24]
   b9e2e:	429a      	cmp	r2, r3
   b9e30:	d003      	beq.n	b9e3a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9e32:	68e3      	ldr	r3, [r4, #12]
   b9e34:	3301      	adds	r3, #1
   b9e36:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9e38:	e7f3      	b.n	b9e22 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9e3a:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9e3e:	2d01      	cmp	r5, #1
   b9e40:	d013      	beq.n	b9e6a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9e42:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9e44:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9e46:	3d01      	subs	r5, #1
   b9e48:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9e4c:	441d      	add	r5, r3
   b9e4e:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9e50:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9e54:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9e58:	f7ff ffb6 	bl	b9dc8 <_ZN9LocalTime14lastDayOfMonthEii>
   b9e5c:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9e5e:	bfc4      	itt	gt
   b9e60:	3d07      	subgt	r5, #7
   b9e62:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9e64:	4620      	mov	r0, r4
   b9e66:	f7ff ffad 	bl	b9dc4 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9e6a:	4621      	mov	r1, r4
   b9e6c:	f106 0008 	add.w	r0, r6, #8
   b9e70:	f7ff fd3c 	bl	b98ec <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9e74:	4638      	mov	r0, r7
   b9e76:	f7ff fd46 	bl	b9906 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9e7a:	4620      	mov	r0, r4
}
   b9e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9e80:	f003 bb48 	b.w	bd514 <mktime>

000b9e84 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9e86:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9e8a:	b085      	sub	sp, #20
   b9e8c:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9e8e:	b92b      	cbnz	r3, b9e9c <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9e90:	f7ff ff80 	bl	b9d94 <_ZN9LocalTime8instanceEv>
   b9e94:	1d01      	adds	r1, r0, #4
   b9e96:	1d20      	adds	r0, r4, #4
   b9e98:	f7ff fc4f 	bl	b973a <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9e9c:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9ea0:	2b00      	cmp	r3, #0
   b9ea2:	d065      	beq.n	b9f70 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9ea4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9ea8:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9eac:	4639      	mov	r1, r7
   b9eae:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9eb0:	463e      	mov	r6, r7
   b9eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9eb6:	f003 fb1d 	bl	bd4f4 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9eba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9ebc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9ec6:	6833      	ldr	r3, [r6, #0]
   b9ec8:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9eca:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9ece:	a802      	add	r0, sp, #8
   b9ed0:	f7ff fc86 	bl	b97e0 <_ZN12LocalTimeHMSC1ERKS_>
   b9ed4:	aa02      	add	r2, sp, #8
   b9ed6:	4639      	mov	r1, r7
   b9ed8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9edc:	f7ff ff93 	bl	b9e06 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9ee0:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9ee4:	f104 0118 	add.w	r1, r4, #24
   b9ee8:	a802      	add	r0, sp, #8
   b9eea:	f7ff fc79 	bl	b97e0 <_ZN12LocalTimeHMSC1ERKS_>
   b9eee:	aa02      	add	r2, sp, #8
   b9ef0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9ef4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9ef8:	f7ff ff85 	bl	b9e06 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9efc:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9f00:	4286      	cmp	r6, r0
   b9f02:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9f06:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9f0a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9f0e:	da23      	bge.n	b9f58 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9f10:	42b2      	cmp	r2, r6
   b9f12:	eb73 0505 	sbcs.w	r5, r3, r5
   b9f16:	da19      	bge.n	b9f4c <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9f18:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9f1a:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9f1c:	6820      	ldr	r0, [r4, #0]
   b9f1e:	f7ff fbf5 	bl	b970c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9f22:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9f26:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9f2a:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9f2c:	bb10      	cbnz	r0, b9f74 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9f2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9f32:	f7ff fcad 	bl	b9890 <_ZNK12LocalTimeHMS9toSecondsEv>
   b9f36:	1a2d      	subs	r5, r5, r0
   b9f38:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9f3c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9f40:	9901      	ldr	r1, [sp, #4]
   b9f42:	a802      	add	r0, sp, #8
   b9f44:	f003 fad6 	bl	bd4f4 <localtime_r>
}
   b9f48:	b005      	add	sp, #20
   b9f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9f4c:	4282      	cmp	r2, r0
   b9f4e:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9f50:	bfb4      	ite	lt
   b9f52:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9f54:	2302      	movge	r3, #2
   b9f56:	e7e0      	b.n	b9f1a <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9f58:	4282      	cmp	r2, r0
   b9f5a:	eb73 0101 	sbcs.w	r1, r3, r1
   b9f5e:	da01      	bge.n	b9f64 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9f60:	2303      	movs	r3, #3
   b9f62:	e7da      	b.n	b9f1a <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9f64:	42b2      	cmp	r2, r6
   b9f66:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9f68:	bfb4      	ite	lt
   b9f6a:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9f6c:	2305      	movge	r3, #5
   b9f6e:	e7d4      	b.n	b9f1a <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9f70:	2306      	movs	r3, #6
   b9f72:	e7d2      	b.n	b9f1a <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9f74:	f104 0018 	add.w	r0, r4, #24
   b9f78:	e7db      	b.n	b9f32 <_ZN16LocalTimeConvert7convertEv+0xae>

000b9f7a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9f7c:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f7e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9f80:	4668      	mov	r0, sp
   b9f82:	f7ff fc24 	bl	b97ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9f86:	466a      	mov	r2, sp
   b9f88:	4629      	mov	r1, r5
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f004 f9d4 	bl	be338 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9f90:	a801      	add	r0, sp, #4
   b9f92:	f7fa fb8f 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f96:	4620      	mov	r0, r4
   b9f98:	b003      	add	sp, #12
   b9f9a:	bd30      	pop	{r4, r5, pc}

000b9f9c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9f9e:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9fa0:	4604      	mov	r4, r0
   b9fa2:	4668      	mov	r0, sp
   b9fa4:	f7ff fc13 	bl	b97ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9fa8:	466a      	mov	r2, sp
   b9faa:	4629      	mov	r1, r5
   b9fac:	4620      	mov	r0, r4
   b9fae:	f004 f99f 	bl	be2f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9fb2:	a801      	add	r0, sp, #4
   b9fb4:	f7fa fb7e 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9fb8:	4620      	mov	r0, r4
   b9fba:	b003      	add	sp, #12
   b9fbc:	bd30      	pop	{r4, r5, pc}

000b9fbe <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9fc0:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9fc2:	4604      	mov	r4, r0
   b9fc4:	4668      	mov	r0, sp
   b9fc6:	f7ff fc02 	bl	b97ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9fca:	466a      	mov	r2, sp
   b9fcc:	4629      	mov	r1, r5
   b9fce:	4620      	mov	r0, r4
   b9fd0:	f004 f937 	bl	be242 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9fd4:	a801      	add	r0, sp, #4
   b9fd6:	f7fa fb6d 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9fda:	4620      	mov	r0, r4
   b9fdc:	b003      	add	sp, #12
   b9fde:	bd30      	pop	{r4, r5, pc}

000b9fe0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9fe0:	4770      	bx	lr

000b9fe2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9fe2:	b510      	push	{r4, lr}
}
   b9fe4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9fe6:	4604      	mov	r4, r0
}
   b9fe8:	f7fa f859 	bl	b409e <_ZdlPvj>
   b9fec:	4620      	mov	r0, r4
   b9fee:	bd10      	pop	{r4, pc}

000b9ff0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9ff0:	6803      	ldr	r3, [r0, #0]
   b9ff2:	b2c9      	uxtb	r1, r1
   b9ff4:	689b      	ldr	r3, [r3, #8]
   b9ff6:	4718      	bx	r3

000b9ff8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9ff8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9ffa:	4d03      	ldr	r5, [pc, #12]	; (ba008 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9ffc:	e9c0 2302 	strd	r2, r3, [r0, #8]
   ba000:	e9c0 5100 	strd	r5, r1, [r0]
}
   ba004:	bd30      	pop	{r4, r5, pc}
   ba006:	bf00      	nop
   ba008:	000c4dfc 	.word	0x000c4dfc

000ba00c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   ba00c:	6840      	ldr	r0, [r0, #4]
   ba00e:	f003 bfa3 	b.w	bdf58 <_ZN7TwoWire5beginEv>

000ba012 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   ba012:	b510      	push	{r4, lr}
   ba014:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba016:	6800      	ldr	r0, [r0, #0]
   ba018:	f003 fff9 	bl	be00e <_ZN7TwoWire6unlockEv>
   ba01c:	4620      	mov	r0, r4
   ba01e:	bd10      	pop	{r4, pc}

000ba020 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   ba020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba024:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   ba026:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba028:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   ba02a:	460d      	mov	r5, r1
   ba02c:	4616      	mov	r6, r2
   ba02e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   ba030:	f003 ffe4 	bl	bdffc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   ba034:	b1a7      	cbz	r7, ba060 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   ba036:	68e1      	ldr	r1, [r4, #12]
   ba038:	6860      	ldr	r0, [r4, #4]
   ba03a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   ba03e:	f003 ffbe 	bl	bdfbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   ba042:	0a29      	lsrs	r1, r5, #8
   ba044:	6860      	ldr	r0, [r4, #4]
   ba046:	f7ff ffd3 	bl	b9ff0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   ba04a:	4629      	mov	r1, r5
   ba04c:	6860      	ldr	r0, [r4, #4]
   ba04e:	f7ff ffcf 	bl	b9ff0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   ba052:	6860      	ldr	r0, [r4, #4]
   ba054:	2100      	movs	r1, #0
   ba056:	f003 ffcd 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   ba05a:	b148      	cbz	r0, ba070 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   ba05c:	2400      	movs	r4, #0
   ba05e:	e000      	b.n	ba062 <_ZN6MB85RC8readDataEjPhj+0x42>
   ba060:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   ba062:	a801      	add	r0, sp, #4
   ba064:	f7ff ffd5 	bl	ba012 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   ba068:	4620      	mov	r0, r4
   ba06a:	b003      	add	sp, #12
   ba06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   ba070:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   ba072:	7b21      	ldrb	r1, [r4, #12]
   ba074:	6860      	ldr	r0, [r4, #4]
   ba076:	46b8      	mov	r8, r7
   ba078:	bf28      	it	cs
   ba07a:	f04f 0820 	movcs.w	r8, #32
   ba07e:	2301      	movs	r3, #1
   ba080:	4642      	mov	r2, r8
   ba082:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   ba086:	f003 ff84 	bl	bdf92 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   ba08a:	f006 fb6f 	bl	c076c <_Z19__fetch_global_Wirev>
   ba08e:	6803      	ldr	r3, [r0, #0]
   ba090:	691b      	ldr	r3, [r3, #16]
   ba092:	4798      	blx	r3
   ba094:	4540      	cmp	r0, r8
   ba096:	dbe1      	blt.n	ba05c <_ZN6MB85RC8readDataEjPhj+0x3c>
   ba098:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   ba09c:	f006 fb66 	bl	c076c <_Z19__fetch_global_Wirev>
   ba0a0:	6803      	ldr	r3, [r0, #0]
   ba0a2:	695b      	ldr	r3, [r3, #20]
   ba0a4:	4798      	blx	r3
   ba0a6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   ba0aa:	454e      	cmp	r6, r9
   ba0ac:	d1f6      	bne.n	ba09c <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   ba0ae:	4445      	add	r5, r8
				dataLen--;
   ba0b0:	eba7 0708 	sub.w	r7, r7, r8
   ba0b4:	e7be      	b.n	ba034 <_ZN6MB85RC8readDataEjPhj+0x14>

000ba0b6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   ba0b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0ba:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   ba0bc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba0be:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   ba0c0:	460e      	mov	r6, r1
   ba0c2:	4690      	mov	r8, r2
   ba0c4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   ba0c6:	f003 ff99 	bl	bdffc <_ZN7TwoWire4lockEv>
   ba0ca:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   ba0ce:	f1b9 0f00 	cmp.w	r9, #0
   ba0d2:	d02a      	beq.n	ba12a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   ba0d4:	b34d      	cbz	r5, ba12a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   ba0d6:	68e1      	ldr	r1, [r4, #12]
   ba0d8:	6860      	ldr	r0, [r4, #4]
   ba0da:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   ba0de:	f003 ff6e 	bl	bdfbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   ba0e2:	0a31      	lsrs	r1, r6, #8
   ba0e4:	6860      	ldr	r0, [r4, #4]
   ba0e6:	f7ff ff83 	bl	b9ff0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   ba0ea:	6860      	ldr	r0, [r4, #4]
   ba0ec:	4631      	mov	r1, r6
   ba0ee:	f7ff ff7f 	bl	b9ff0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba0f2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   ba0f6:	4647      	mov	r7, r8
   ba0f8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   ba0fc:	6860      	ldr	r0, [r4, #4]
   ba0fe:	f817 1b01 	ldrb.w	r1, [r7], #1
   ba102:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   ba104:	3d01      	subs	r5, #1
				wire.write(*data);
   ba106:	689b      	ldr	r3, [r3, #8]
   ba108:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba10a:	4555      	cmp	r5, sl
   ba10c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   ba110:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba112:	d001      	beq.n	ba118 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   ba114:	2d00      	cmp	r5, #0
   ba116:	d1f1      	bne.n	ba0fc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   ba118:	6860      	ldr	r0, [r4, #4]
   ba11a:	2101      	movs	r1, #1
   ba11c:	f003 ff6a 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   ba120:	2800      	cmp	r0, #0
   ba122:	d0d7      	beq.n	ba0d4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   ba124:	f04f 0900 	mov.w	r9, #0
   ba128:	e7d1      	b.n	ba0ce <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   ba12a:	a801      	add	r0, sp, #4
   ba12c:	f7ff ff71 	bl	ba012 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   ba130:	4648      	mov	r0, r9
   ba132:	b003      	add	sp, #12
   ba134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba138 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba13c:	b08b      	sub	sp, #44	; 0x2c
   ba13e:	460e      	mov	r6, r1
   ba140:	4615      	mov	r5, r2
   ba142:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   ba144:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba146:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba148:	461c      	mov	r4, r3
      { _M_device.lock(); }
   ba14a:	f003 ff57 	bl	bdffc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   ba14e:	42ae      	cmp	r6, r5
   ba150:	d229      	bcs.n	ba1a6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   ba152:	4426      	add	r6, r4
			framAddrTo += numBytes;
   ba154:	4425      	add	r5, r4
			while(numBytes > 0) {
   ba156:	b18c      	cbz	r4, ba17c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   ba158:	2c1e      	cmp	r4, #30
   ba15a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   ba15c:	f8d8 3000 	ldr.w	r3, [r8]
   ba160:	bf28      	it	cs
   ba162:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   ba164:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   ba166:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba16a:	aa02      	add	r2, sp, #8
   ba16c:	463b      	mov	r3, r7
   ba16e:	4631      	mov	r1, r6
   ba170:	4640      	mov	r0, r8
				framAddrTo -= count;
   ba172:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   ba174:	47c8      	blx	r9
				if (!result) {
   ba176:	b948      	cbnz	r0, ba18c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba178:	2400      	movs	r4, #0
   ba17a:	e000      	b.n	ba17e <_ZN6MB85RC8moveDataEjjj+0x46>
   ba17c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   ba17e:	a801      	add	r0, sp, #4
   ba180:	f7ff ff47 	bl	ba012 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   ba184:	4620      	mov	r0, r4
   ba186:	b00b      	add	sp, #44	; 0x2c
   ba188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   ba18c:	f8d8 3000 	ldr.w	r3, [r8]
   ba190:	aa02      	add	r2, sp, #8
   ba192:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba196:	4629      	mov	r1, r5
   ba198:	463b      	mov	r3, r7
   ba19a:	4640      	mov	r0, r8
   ba19c:	47c8      	blx	r9
				if (!result) {
   ba19e:	2800      	cmp	r0, #0
   ba1a0:	d0ea      	beq.n	ba178 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   ba1a2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba1a4:	e7d7      	b.n	ba156 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   ba1a6:	d9e9      	bls.n	ba17c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   ba1a8:	2c00      	cmp	r4, #0
   ba1aa:	d0e7      	beq.n	ba17c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   ba1ac:	f8d8 3000 	ldr.w	r3, [r8]
   ba1b0:	2c1e      	cmp	r4, #30
   ba1b2:	4627      	mov	r7, r4
   ba1b4:	bf28      	it	cs
   ba1b6:	271e      	movcs	r7, #30
   ba1b8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba1bc:	aa02      	add	r2, sp, #8
   ba1be:	463b      	mov	r3, r7
   ba1c0:	4631      	mov	r1, r6
   ba1c2:	4640      	mov	r0, r8
   ba1c4:	47c8      	blx	r9
				if (!result) {
   ba1c6:	2800      	cmp	r0, #0
   ba1c8:	d0d6      	beq.n	ba178 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   ba1ca:	f8d8 3000 	ldr.w	r3, [r8]
   ba1ce:	aa02      	add	r2, sp, #8
   ba1d0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba1d4:	4629      	mov	r1, r5
   ba1d6:	463b      	mov	r3, r7
   ba1d8:	4640      	mov	r0, r8
   ba1da:	47c8      	blx	r9
				if (!result) {
   ba1dc:	2800      	cmp	r0, #0
   ba1de:	d0cb      	beq.n	ba178 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   ba1e0:	443e      	add	r6, r7
				framAddrTo += count;
   ba1e2:	443d      	add	r5, r7
				numBytes -= count;
   ba1e4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba1e6:	e7df      	b.n	ba1a8 <_ZN6MB85RC8moveDataEjjj+0x70>

000ba1e8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   ba1e8:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba1ea:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   ba1ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   ba1f0:	2101      	movs	r1, #1
   ba1f2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   ba1f6:	4770      	bx	lr

000ba1f8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba1f8:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   ba1fa:	6842      	ldr	r2, [r0, #4]
   ba1fc:	4603      	mov	r3, r0
   ba1fe:	1054      	asrs	r4, r2, #1
   ba200:	eb01 0062 	add.w	r0, r1, r2, asr #1
   ba204:	07d2      	lsls	r2, r2, #31
   ba206:	bf48      	it	mi
   ba208:	590a      	ldrmi	r2, [r1, r4]
   ba20a:	681b      	ldr	r3, [r3, #0]
      }
   ba20c:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba210:	bf48      	it	mi
   ba212:	58d3      	ldrmi	r3, [r2, r3]
   ba214:	4718      	bx	r3

000ba216 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   ba216:	2a01      	cmp	r2, #1
   ba218:	d102      	bne.n	ba220 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba21a:	6001      	str	r1, [r0, #0]
      }
   ba21c:	2000      	movs	r0, #0
   ba21e:	4770      	bx	lr
	  switch (__op)
   ba220:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba222:	bf04      	itt	eq
   ba224:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   ba228:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   ba22c:	e7f6      	b.n	ba21c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000ba22e <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   ba22e:	2a01      	cmp	r2, #1
   ba230:	d102      	bne.n	ba238 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba232:	6001      	str	r1, [r0, #0]
      }
   ba234:	2000      	movs	r0, #0
   ba236:	4770      	bx	lr
	  switch (__op)
   ba238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba23a:	bf04      	itt	eq
   ba23c:	680b      	ldreq	r3, [r1, #0]
   ba23e:	6003      	streq	r3, [r0, #0]
	      break;
   ba240:	e7f8      	b.n	ba234 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000ba242 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   ba242:	6f40      	ldr	r0, [r0, #116]	; 0x74
   ba244:	f002 bd12 	b.w	bcc6c <os_mutex_recursive_lock>

000ba248 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   ba248:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   ba24c:	4601      	mov	r1, r0
    if (stateHandler) {
   ba24e:	b11b      	cbz	r3, ba258 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba250:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   ba254:	30c0      	adds	r0, #192	; 0xc0
   ba256:	4718      	bx	r3
}
   ba258:	4770      	bx	lr
	...

000ba25c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   ba25e:	4d12      	ldr	r5, [pc, #72]	; (ba2a8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba260:	4608      	mov	r0, r1
        eventData = "";
   ba262:	2a00      	cmp	r2, #0
   ba264:	bf18      	it	ne
   ba266:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba268:	460e      	mov	r6, r1
   ba26a:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba26c:	f007 f983 	bl	c1576 <strlen>
   ba270:	2840      	cmp	r0, #64	; 0x40
   ba272:	d816      	bhi.n	ba2a2 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   ba274:	4628      	mov	r0, r5
   ba276:	f007 f97e 	bl	c1576 <strlen>
   ba27a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   ba27e:	d810      	bhi.n	ba2a2 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   ba280:	3043      	adds	r0, #67	; 0x43
   ba282:	f7f9 ff0a 	bl	b409a <_Znaj>
    if (event) {
   ba286:	4604      	mov	r4, r0
   ba288:	b148      	cbz	r0, ba29e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   ba28a:	4631      	mov	r1, r6
        event->flags = flags;
   ba28c:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   ba290:	f007 f94b 	bl	c152a <strcpy>
        strcpy(event->eventData, eventData);
   ba294:	4629      	mov	r1, r5
   ba296:	f104 0042 	add.w	r0, r4, #66	; 0x42
   ba29a:	f007 f946 	bl	c152a <strcpy>
}
   ba29e:	4620      	mov	r0, r4
   ba2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   ba2a2:	2400      	movs	r4, #0
   ba2a4:	e7fb      	b.n	ba29e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   ba2a6:	bf00      	nop
   ba2a8:	000c5654 	.word	0x000c5654

000ba2ac <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba2ae:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba2b0:	460a      	mov	r2, r1
   ba2b2:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba2b4:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba2b6:	1d01      	adds	r1, r0, #4
   ba2b8:	a808      	add	r0, sp, #32
   ba2ba:	f002 f887 	bl	bc3cc <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba2be:	9808      	ldr	r0, [sp, #32]
   ba2c0:	2100      	movs	r1, #0
   ba2c2:	f008 f8ed 	bl	c24a0 <open>
   ba2c6:	4605      	mov	r5, r0
   ba2c8:	a808      	add	r0, sp, #32
   ba2ca:	f005 fc05 	bl	bfad8 <_ZN6StringD1Ev>
    if (fd) {
   ba2ce:	2d00      	cmp	r5, #0
   ba2d0:	d060      	beq.n	ba394 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   ba2d2:	a908      	add	r1, sp, #32
   ba2d4:	4628      	mov	r0, r5
   ba2d6:	f008 f8d1 	bl	c247c <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   ba2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba2dc:	492e      	ldr	r1, [pc, #184]	; (ba398 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   ba2de:	482f      	ldr	r0, [pc, #188]	; (ba39c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba2e0:	4632      	mov	r2, r6
   ba2e2:	f7fd fc23 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   ba2e6:	2200      	movs	r2, #0
   ba2e8:	4611      	mov	r1, r2
   ba2ea:	4628      	mov	r0, r5
   ba2ec:	f008 f8ce 	bl	c248c <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   ba2f0:	2208      	movs	r2, #8
   ba2f2:	a906      	add	r1, sp, #24
   ba2f4:	4628      	mov	r0, r5
   ba2f6:	f008 f8e7 	bl	c24c8 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   ba2fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba2fc:	2f4a      	cmp	r7, #74	; 0x4a
   ba2fe:	dd39      	ble.n	ba374 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   ba300:	4b27      	ldr	r3, [pc, #156]	; (ba3a0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   ba302:	9a06      	ldr	r2, [sp, #24]
   ba304:	429a      	cmp	r2, r3
   ba306:	d135      	bne.n	ba374 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   ba308:	4b26      	ldr	r3, [pc, #152]	; (ba3a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   ba30a:	9a07      	ldr	r2, [sp, #28]
   ba30c:	429a      	cmp	r2, r3
   ba30e:	d131      	bne.n	ba374 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   ba310:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   ba314:	4610      	mov	r0, r2
   ba316:	9205      	str	r2, [sp, #20]
   ba318:	f7f9 febf 	bl	b409a <_Znaj>
            if (result) {
   ba31c:	4604      	mov	r4, r0
   ba31e:	b1c0      	cbz	r0, ba352 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba320:	4427      	add	r7, r4
                read(fd, result, eventSize);
   ba322:	4601      	mov	r1, r0
   ba324:	9a05      	ldr	r2, [sp, #20]
   ba326:	4628      	mov	r0, r5
   ba328:	f008 f8ce 	bl	c24c8 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba32c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   ba330:	b9ab      	cbnz	r3, ba35e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   ba332:	1c63      	adds	r3, r4, #1
   ba334:	4618      	mov	r0, r3
   ba336:	9305      	str	r3, [sp, #20]
   ba338:	f007 f91d 	bl	c1576 <strlen>
   ba33c:	283f      	cmp	r0, #63	; 0x3f
   ba33e:	9b05      	ldr	r3, [sp, #20]
   ba340:	d80d      	bhi.n	ba35e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   ba342:	f104 0242 	add.w	r2, r4, #66	; 0x42
   ba346:	9200      	str	r2, [sp, #0]
   ba348:	4917      	ldr	r1, [pc, #92]	; (ba3a8 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   ba34a:	4814      	ldr	r0, [pc, #80]	; (ba39c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba34c:	4632      	mov	r2, r6
   ba34e:	f7fd fbed 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba352:	4628      	mov	r0, r5
   ba354:	f008 f88a 	bl	c246c <close>
}
   ba358:	4620      	mov	r0, r4
   ba35a:	b01f      	add	sp, #124	; 0x7c
   ba35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba35e:	4913      	ldr	r1, [pc, #76]	; (ba3ac <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba360:	480e      	ldr	r0, [pc, #56]	; (ba39c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba362:	4632      	mov	r2, r6
   ba364:	f7fd fbe2 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba368:	2143      	movs	r1, #67	; 0x43
   ba36a:	4620      	mov	r0, r4
   ba36c:	f7f9 fe97 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba370:	2400      	movs	r4, #0
   ba372:	e7ee      	b.n	ba352 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba374:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba378:	9302      	str	r3, [sp, #8]
   ba37a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba37e:	9301      	str	r3, [sp, #4]
   ba380:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba384:	9300      	str	r3, [sp, #0]
   ba386:	490a      	ldr	r1, [pc, #40]	; (ba3b0 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba388:	9b06      	ldr	r3, [sp, #24]
   ba38a:	4804      	ldr	r0, [pc, #16]	; (ba39c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba38c:	4632      	mov	r2, r6
   ba38e:	f7fd fbcd 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
   ba392:	e7ed      	b.n	ba370 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba394:	462c      	mov	r4, r5
    return result;
   ba396:	e7df      	b.n	ba358 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba398:	000c4e10 	.word	0x000c4e10
   ba39c:	2003e4d0 	.word	0x2003e4d0
   ba3a0:	31b67663 	.word	0x31b67663
   ba3a4:	00410801 	.word	0x00410801
   ba3a8:	000c4e24 	.word	0x000c4e24
   ba3ac:	000c4e46 	.word	0x000c4e46
   ba3b0:	000c4e74 	.word	0x000c4e74

000ba3b4 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba3b8:	4680      	mov	r8, r0
   ba3ba:	4b28      	ldr	r3, [pc, #160]	; (ba45c <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba3bc:	f848 3b04 	str.w	r3, [r8], #4
   ba3c0:	4604      	mov	r4, r0
   ba3c2:	4640      	mov	r0, r8
   ba3c4:	f001 ff1a 	bl	bc1fc <_ZN14SequentialFileC1Ev>
   ba3c8:	2202      	movs	r2, #2
   ba3ca:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba3cc:	2500      	movs	r5, #0
   ba3ce:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba3d2:	2308      	movs	r3, #8
   ba3d4:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba3d6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba3da:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba3de:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba3e2:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba3e6:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba3e8:	2020      	movs	r0, #32
   ba3ea:	f7f9 fe54 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3ee:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba3f0:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3f2:	3e01      	subs	r6, #1
   ba3f4:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba3f6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba3fa:	4607      	mov	r7, r0
   ba3fc:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba400:	f7f9 fe49 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba404:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba408:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba40c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba410:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba418:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba41c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba420:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba424:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba428:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba42c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba430:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba434:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba438:	4909      	ldr	r1, [pc, #36]	; (ba460 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba43a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba43e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba442:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba446:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba44a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba44e:	4640      	mov	r0, r8
   ba450:	f001 ff1a 	bl	bc288 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba454:	4620      	mov	r0, r4
   ba456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba45a:	bf00      	nop
   ba45c:	000c5090 	.word	0x000c5090
   ba460:	000c4eb9 	.word	0x000c4eb9

000ba464 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba464:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba466:	4d06      	ldr	r5, [pc, #24]	; (ba480 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba468:	682b      	ldr	r3, [r5, #0]
   ba46a:	b93b      	cbnz	r3, ba47c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba46c:	20d0      	movs	r0, #208	; 0xd0
   ba46e:	f7f9 fe12 	bl	b4096 <_Znwj>
   ba472:	4604      	mov	r4, r0
   ba474:	b108      	cbz	r0, ba47a <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba476:	f7ff ff9d 	bl	ba3b4 <_ZN17PublishQueuePosixC1Ev>
   ba47a:	602c      	str	r4, [r5, #0]
}
   ba47c:	6828      	ldr	r0, [r5, #0]
   ba47e:	bd38      	pop	{r3, r4, r5, pc}
   ba480:	2003e4d4 	.word	0x2003e4d4

000ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba484:	6942      	ldr	r2, [r0, #20]
   ba486:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba488:	1a9b      	subs	r3, r3, r2
   ba48a:	109b      	asrs	r3, r3, #2
   ba48c:	1e5a      	subs	r2, r3, #1
   ba48e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba492:	1a5b      	subs	r3, r3, r1
   ba494:	109b      	asrs	r3, r3, #2
   ba496:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba49a:	6902      	ldr	r2, [r0, #16]
   ba49c:	6880      	ldr	r0, [r0, #8]
   ba49e:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba4a0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba4a4:	4770      	bx	lr

000ba4a6 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba4a6:	b538      	push	{r3, r4, r5, lr}
   ba4a8:	4605      	mov	r5, r0
   ba4aa:	f7ff feca 	bl	ba242 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba4ae:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba4b2:	f7ff ffe7 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba4b6:	4604      	mov	r4, r0
   ba4b8:	b950      	cbnz	r0, ba4d0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba4ba:	1d28      	adds	r0, r5, #4
   ba4bc:	f002 f9da 	bl	bc874 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba4c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba4c4:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba4c6:	b11b      	cbz	r3, ba4d0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba4c8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba4cc:	b903      	cbnz	r3, ba4d0 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba4ce:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba4d0:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba4d2:	f002 fbd3 	bl	bcc7c <os_mutex_recursive_unlock>
}
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	bd38      	pop	{r3, r4, r5, pc}

000ba4da <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba4da:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba4dc:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba4de:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba4e0:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba4e2:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba4e4:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba4e6:	d002      	beq.n	ba4ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba4e8:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba4ea:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba4ec:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba4ee:	68c0      	ldr	r0, [r0, #12]
   ba4f0:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba4f4:	f7f9 fdd3 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba4f8:	6963      	ldr	r3, [r4, #20]
   ba4fa:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba4fc:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba4fe:	685b      	ldr	r3, [r3, #4]
   ba500:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba502:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba506:	6122      	str	r2, [r4, #16]
   ba508:	e7ef      	b.n	ba4ea <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba50c <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba510:	b085      	sub	sp, #20
   ba512:	4604      	mov	r4, r0
   ba514:	f7ff fe95 	bl	ba242 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba518:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba5c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba51c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba5c4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba520:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba5c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba524:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba528:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba52c:	4293      	cmp	r3, r2
   ba52e:	d105      	bne.n	ba53c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba530:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba532:	b005      	add	sp, #20
   ba534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba538:	f002 bba0 	b.w	bcc7c <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba53c:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba540:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba544:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba546:	f7ff ffc8 	bl	ba4da <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba54a:	4640      	mov	r0, r8
   ba54c:	f002 f936 	bl	bc7bc <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba550:	2300      	movs	r3, #0
   ba552:	4602      	mov	r2, r0
   ba554:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba556:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba558:	4668      	mov	r0, sp
   ba55a:	f001 ff37 	bl	bc3cc <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba55e:	9800      	ldr	r0, [sp, #0]
   ba560:	f240 2102 	movw	r1, #514	; 0x202
   ba564:	f007 ff9c 	bl	c24a0 <open>
   ba568:	4605      	mov	r5, r0
   ba56a:	4668      	mov	r0, sp
   ba56c:	f005 fab4 	bl	bfad8 <_ZN6StringD1Ev>
            if (fd) {
   ba570:	b1c5      	cbz	r5, ba5a4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba572:	2208      	movs	r2, #8
   ba574:	4669      	mov	r1, sp
   ba576:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba578:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba57c:	f007 ffb6 	bl	c24ec <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba580:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba584:	f006 fff7 	bl	c1576 <strlen>
   ba588:	4639      	mov	r1, r7
   ba58a:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba58e:	4628      	mov	r0, r5
   ba590:	f007 ffac 	bl	c24ec <write>
                close(fd);
   ba594:	4628      	mov	r0, r5
   ba596:	f007 ff69 	bl	c246c <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba59a:	4808      	ldr	r0, [pc, #32]	; (ba5bc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba59c:	4632      	mov	r2, r6
   ba59e:	4659      	mov	r1, fp
   ba5a0:	f7fd fac4 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba5a4:	4631      	mov	r1, r6
   ba5a6:	4640      	mov	r0, r8
   ba5a8:	f002 f94a 	bl	bc840 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba5ac:	2f00      	cmp	r7, #0
   ba5ae:	d0b9      	beq.n	ba524 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba5b0:	2143      	movs	r1, #67	; 0x43
   ba5b2:	4638      	mov	r0, r7
   ba5b4:	f7f9 fd73 	bl	b409e <_ZdlPvj>
   ba5b8:	e7b2      	b.n	ba520 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba5ba:	bf00      	nop
   ba5bc:	2003e4d0 	.word	0x2003e4d0
   ba5c0:	31b67663 	.word	0x31b67663
   ba5c4:	00410801 	.word	0x00410801
   ba5c8:	000c4ec7 	.word	0x000c4ec7

000ba5cc <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5d0:	4604      	mov	r4, r0
   ba5d2:	f7ff fe36 	bl	ba242 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba5d6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba5da:	f7ff ff53 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba5de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba5e0:	4298      	cmp	r0, r3
   ba5e2:	d902      	bls.n	ba5ea <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba5e4:	4620      	mov	r0, r4
   ba5e6:	f7ff ff91 	bl	ba50c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba5ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba630 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba5ee:	4f0f      	ldr	r7, [pc, #60]	; (ba62c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba5f0:	1d26      	adds	r6, r4, #4
   ba5f2:	4630      	mov	r0, r6
   ba5f4:	f002 f93e 	bl	bc874 <_ZNK14SequentialFile11getQueueLenEv>
   ba5f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba5fa:	4298      	cmp	r0, r3
   ba5fc:	dc04      	bgt.n	ba608 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba5fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba604:	f002 bb3a 	b.w	bcc7c <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba608:	2101      	movs	r1, #1
   ba60a:	4630      	mov	r0, r6
   ba60c:	f002 f8e2 	bl	bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba610:	4605      	mov	r5, r0
   ba612:	2800      	cmp	r0, #0
   ba614:	d0ed      	beq.n	ba5f2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba616:	4601      	mov	r1, r0
   ba618:	2200      	movs	r2, #0
   ba61a:	4630      	mov	r0, r6
   ba61c:	f001 ff12 	bl	bc444 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba620:	462a      	mov	r2, r5
   ba622:	4641      	mov	r1, r8
   ba624:	4638      	mov	r0, r7
   ba626:	f7f9 fd8a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   ba62a:	e7e2      	b.n	ba5f2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba62c:	2003e4d0 	.word	0x2003e4d0
   ba630:	000c4ee4 	.word	0x000c4ee4

000ba634 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba634:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba636:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba63a:	430b      	orrs	r3, r1
   ba63c:	d005      	beq.n	ba64a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba63e:	3840      	subs	r0, #64	; 0x40
   ba640:	ea50 0301 	orrs.w	r3, r0, r1
   ba644:	d10b      	bne.n	ba65e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba646:	2a09      	cmp	r2, #9
   ba648:	d109      	bne.n	ba65e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba64a:	4905      	ldr	r1, [pc, #20]	; (ba660 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba64c:	4805      	ldr	r0, [pc, #20]	; (ba664 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba64e:	f7fd fa6d 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba652:	f7ff ff07 	bl	ba464 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba65a:	f7ff bf57 	b.w	ba50c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba65e:	bd08      	pop	{r3, pc}
   ba660:	000c4ef7 	.word	0x000c4ef7
   ba664:	2003e4d0 	.word	0x2003e4d0

000ba668 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba668:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba66a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba66c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba66e:	b183      	cbz	r3, ba692 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba670:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba672:	6945      	ldr	r5, [r0, #20]
   ba674:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba676:	42ae      	cmp	r6, r5
   ba678:	d906      	bls.n	ba688 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba67a:	f855 0b04 	ldr.w	r0, [r5], #4
   ba67e:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba682:	f7f9 fd0c 	bl	b409e <_ZdlPvj>
   ba686:	e7f6      	b.n	ba676 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba688:	6861      	ldr	r1, [r4, #4]
   ba68a:	6820      	ldr	r0, [r4, #0]
   ba68c:	0089      	lsls	r1, r1, #2
   ba68e:	f7f9 fd06 	bl	b409e <_ZdlPvj>
    }
   ba692:	4620      	mov	r0, r4
   ba694:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba69a:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba69e:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba6a0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba6a2:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba6a4:	b90a      	cbnz	r2, ba6aa <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba6a6:	07d9      	lsls	r1, r3, #31
   ba6a8:	d505      	bpl.n	ba6b6 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba6aa:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba6ae:	4b0a      	ldr	r3, [pc, #40]	; (ba6d8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba6b0:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba6b2:	4b0a      	ldr	r3, [pc, #40]	; (ba6dc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba6b4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba6b6:	4621      	mov	r1, r4
   ba6b8:	4668      	mov	r0, sp
   ba6ba:	f7fe f8bc 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6be:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba6c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba6c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6c4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba6c6:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba6c8:	4668      	mov	r0, sp
   ba6ca:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba6cc:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba6ce:	9203      	str	r2, [sp, #12]
   ba6d0:	f7fa ff3d 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	}
   ba6d4:	b004      	add	sp, #16
   ba6d6:	bd10      	pop	{r4, pc}
   ba6d8:	000ba1f9 	.word	0x000ba1f9
   ba6dc:	000ba217 	.word	0x000ba217

000ba6e0 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba6e0:	b570      	push	{r4, r5, r6, lr}
   ba6e2:	b086      	sub	sp, #24
   ba6e4:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba6e6:	f002 fdfd 	bl	bd2e4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba6ea:	b948      	cbnz	r0, ba700 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba6ec:	4b43      	ldr	r3, [pc, #268]	; (ba7fc <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba6ee:	a902      	add	r1, sp, #8
   ba6f0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba6f4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba6f8:	f7ff ffce 	bl	ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba6fc:	b006      	add	sp, #24
   ba6fe:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba700:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba704:	b11d      	cbz	r5, ba70e <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba706:	2301      	movs	r3, #1
   ba708:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba70c:	e7f6      	b.n	ba6fc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba70e:	f002 faed 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba712:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba716:	1ac0      	subs	r0, r0, r3
   ba718:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba71c:	4298      	cmp	r0, r3
   ba71e:	d3ed      	bcc.n	ba6fc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba720:	1d26      	adds	r6, r4, #4
   ba722:	4629      	mov	r1, r5
   ba724:	4630      	mov	r0, r6
   ba726:	f002 f855 	bl	bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>
   ba72a:	4601      	mov	r1, r0
   ba72c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba730:	2800      	cmp	r0, #0
   ba732:	d052      	beq.n	ba7da <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba734:	4620      	mov	r0, r4
   ba736:	f7ff fdb9 	bl	ba2ac <_ZN17PublishQueuePosix13readQueueFileEi>
   ba73a:	4605      	mov	r5, r0
   ba73c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba740:	2800      	cmp	r0, #0
   ba742:	d035      	beq.n	ba7b0 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba744:	f002 fad2 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba748:	ae02      	add	r6, sp, #8
   ba74a:	2500      	movs	r5, #0
   ba74c:	4b2c      	ldr	r3, [pc, #176]	; (ba800 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba74e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba752:	4631      	mov	r1, r6
   ba754:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba758:	9302      	str	r3, [sp, #8]
   ba75a:	9503      	str	r5, [sp, #12]
   ba75c:	f7ff ff9c 	bl	ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba760:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba764:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba768:	9200      	str	r2, [sp, #0]
   ba76a:	4926      	ldr	r1, [pc, #152]	; (ba804 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba76c:	4a26      	ldr	r2, [pc, #152]	; (ba808 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba76e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba772:	42a8      	cmp	r0, r5
   ba774:	bf08      	it	eq
   ba776:	460a      	moveq	r2, r1
   ba778:	3301      	adds	r3, #1
   ba77a:	4924      	ldr	r1, [pc, #144]	; (ba80c <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba77c:	4824      	ldr	r0, [pc, #144]	; (ba810 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba77e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba782:	f7fd f9d3 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba786:	f7fd ff99 	bl	b86bc <_ZN19BackgroundPublishRK8instanceEv>
   ba78a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba78e:	4b21      	ldr	r3, [pc, #132]	; (ba814 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba790:	9305      	str	r3, [sp, #20]
   ba792:	e9cd 6500 	strd	r6, r5, [sp]
   ba796:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba798:	4b1f      	ldr	r3, [pc, #124]	; (ba818 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba79a:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba79c:	9304      	str	r3, [sp, #16]
   ba79e:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba7a2:	3242      	adds	r2, #66	; 0x42
   ba7a4:	f7fe f8d6 	bl	b8954 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba7a8:	4630      	mov	r0, r6
   ba7aa:	f7fa fed0 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   ba7ae:	e7a5      	b.n	ba6fc <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba7b0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba7b4:	4919      	ldr	r1, [pc, #100]	; (ba81c <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba7b6:	4816      	ldr	r0, [pc, #88]	; (ba810 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba7b8:	f7f9 fcc1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba7bc:	2101      	movs	r1, #1
   ba7be:	4630      	mov	r0, r6
   ba7c0:	f002 f808 	bl	bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba7c4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba7c8:	462a      	mov	r2, r5
   ba7ca:	4630      	mov	r0, r6
   ba7cc:	f001 fe3a 	bl	bc444 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba7d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba7d4:	2b00      	cmp	r3, #0
   ba7d6:	d1b5      	bne.n	ba744 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba7d8:	e795      	b.n	ba706 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba7da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba7de:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba7e2:	429a      	cmp	r2, r3
   ba7e4:	d007      	beq.n	ba7f6 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba7e6:	681b      	ldr	r3, [r3, #0]
   ba7e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba7ec:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba7f0:	f7ff fe73 	bl	ba4da <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba7f4:	e7ec      	b.n	ba7d0 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba7f6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba7fa:	e784      	b.n	ba706 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba7fc:	000ba821 	.word	0x000ba821
   ba800:	000baba1 	.word	0x000baba1
   ba804:	000c4f26 	.word	0x000c4f26
   ba808:	000c5418 	.word	0x000c5418
   ba80c:	000c4f47 	.word	0x000c4f47
   ba810:	2003e4d0 	.word	0x2003e4d0
   ba814:	000ba1e9 	.word	0x000ba1e9
   ba818:	000ba22f 	.word	0x000ba22f
   ba81c:	000c4f2a 	.word	0x000c4f2a

000ba820 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba820:	b513      	push	{r0, r1, r4, lr}
   ba822:	4604      	mov	r4, r0
   ba824:	f002 fd5e 	bl	bd2e4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba828:	b190      	cbz	r0, ba850 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba82a:	f002 fa5f 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba82e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba832:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba836:	4b0d      	ldr	r3, [pc, #52]	; (ba86c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba838:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba83c:	9300      	str	r3, [sp, #0]
   ba83e:	4669      	mov	r1, sp
   ba840:	2300      	movs	r3, #0
   ba842:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba846:	9301      	str	r3, [sp, #4]
   ba848:	f7ff ff26 	bl	ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba84c:	b002      	add	sp, #8
   ba84e:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba850:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba854:	b11b      	cbz	r3, ba85e <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba856:	2301      	movs	r3, #1
   ba858:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba85c:	e7f6      	b.n	ba84c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba85e:	4620      	mov	r0, r4
   ba860:	f7ff fe21 	bl	ba4a6 <_ZN17PublishQueuePosix12getNumEventsEv>
   ba864:	2800      	cmp	r0, #0
   ba866:	d0f6      	beq.n	ba856 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba868:	e7f0      	b.n	ba84c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba86a:	bf00      	nop
   ba86c:	000ba6e1 	.word	0x000ba6e1

000ba870 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba870:	b570      	push	{r4, r5, r6, lr}
   ba872:	4605      	mov	r5, r0
   ba874:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba876:	2000      	movs	r0, #0
   ba878:	f002 fcda 	bl	bd230 <system_thread_get_state>
   ba87c:	2801      	cmp	r0, #1
   ba87e:	d005      	beq.n	ba88c <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba880:	493e      	ldr	r1, [pc, #248]	; (ba97c <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba882:	483f      	ldr	r0, [pc, #252]	; (ba980 <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba884:	f7fd f944 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
}
   ba888:	b018      	add	sp, #96	; 0x60
   ba88a:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba88c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba890:	f002 f9dc 	bl	bcc4c <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba894:	4b3b      	ldr	r3, [pc, #236]	; (ba984 <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba896:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba898:	4b3b      	ldr	r3, [pc, #236]	; (ba988 <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba89a:	9307      	str	r3, [sp, #28]
        };
   ba89c:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba89e:	4b3b      	ldr	r3, [pc, #236]	; (ba98c <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba8a0:	9306      	str	r3, [sp, #24]
   ba8a2:	a808      	add	r0, sp, #32
   ba8a4:	f7fb f808 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba8a8:	a908      	add	r1, sp, #32
   ba8aa:	a80c      	add	r0, sp, #48	; 0x30
   ba8ac:	f7fb f804 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba8b0:	a90c      	add	r1, sp, #48	; 0x30
   ba8b2:	a810      	add	r0, sp, #64	; 0x40
   ba8b4:	f7fb f800 	bl	b58b8 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba8b8:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba8ba:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba8bc:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba8be:	f7f9 fbea 	bl	b4096 <_Znwj>
   ba8c2:	4604      	mov	r4, r0
   ba8c4:	b160      	cbz	r0, ba8e0 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba8c6:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba8c8:	4601      	mov	r1, r0
   ba8ca:	a810      	add	r0, sp, #64	; 0x40
   ba8cc:	f7fd ffb3 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba8d2:	68a2      	ldr	r2, [r4, #8]
   ba8d4:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba8d6:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba8d8:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba8da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba8dc:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba8de:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba8e0:	4b2b      	ldr	r3, [pc, #172]	; (ba990 <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba8e2:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba8e4:	4b2b      	ldr	r3, [pc, #172]	; (ba994 <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba8e6:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba8e8:	4b2b      	ldr	r3, [pc, #172]	; (ba998 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba8ea:	9414      	str	r4, [sp, #80]	; 0x50
   ba8ec:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba8ee:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba8f0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba8f4:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba8f6:	f7f9 fbce 	bl	b4096 <_Znwj>
   ba8fa:	4604      	mov	r4, r0
   ba8fc:	b1d8      	cbz	r0, ba936 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba8fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba900:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba902:	b133      	cbz	r3, ba912 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba904:	2202      	movs	r2, #2
   ba906:	a914      	add	r1, sp, #80	; 0x50
   ba908:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba90a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba90c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba90e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba910:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba912:	4b22      	ldr	r3, [pc, #136]	; (ba99c <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba914:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba916:	4a22      	ldr	r2, [pc, #136]	; (ba9a0 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba918:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba91a:	ab01      	add	r3, sp, #4
   ba91c:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba920:	2100      	movs	r1, #0
   ba922:	f002 fc65 	bl	bd1f0 <system_subscribe_event>
        if (r) {
   ba926:	b130      	cbz	r0, ba936 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba928:	4620      	mov	r0, r4
   ba92a:	f7fa fe10 	bl	b554e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba92e:	2110      	movs	r1, #16
   ba930:	4620      	mov	r0, r4
   ba932:	f7f9 fbb4 	bl	b409e <_ZdlPvj>
   ba936:	a814      	add	r0, sp, #80	; 0x50
   ba938:	f7fa fe09 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   ba93c:	a810      	add	r0, sp, #64	; 0x40
   ba93e:	f7fa fe06 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   ba942:	a80c      	add	r0, sp, #48	; 0x30
   ba944:	f7fa fe03 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   ba948:	a808      	add	r0, sp, #32
   ba94a:	f7fa fe00 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   ba94e:	a804      	add	r0, sp, #16
   ba950:	f7fa fdfd 	bl	b554e <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba954:	f7fd feb2 	bl	b86bc <_ZN19BackgroundPublishRK8instanceEv>
   ba958:	f7fd ffd6 	bl	b8908 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba95c:	1d28      	adds	r0, r5, #4
   ba95e:	f001 feb5 	bl	bc6cc <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba962:	4628      	mov	r0, r5
   ba964:	f7ff fe32 	bl	ba5cc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba968:	4b0e      	ldr	r3, [pc, #56]	; (ba9a4 <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba96a:	9314      	str	r3, [sp, #80]	; 0x50
   ba96c:	a914      	add	r1, sp, #80	; 0x50
   ba96e:	2300      	movs	r3, #0
   ba970:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba974:	9315      	str	r3, [sp, #84]	; 0x54
   ba976:	f7ff fe8f 	bl	ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba97a:	e785      	b.n	ba888 <_ZN17PublishQueuePosix5setupEv+0x18>
   ba97c:	000c4f66 	.word	0x000c4f66
   ba980:	2003e4d0 	.word	0x2003e4d0
   ba984:	000ba635 	.word	0x000ba635
   ba988:	000b552b 	.word	0x000b552b
   ba98c:	000b5517 	.word	0x000b5517
   ba990:	000b54f1 	.word	0x000b54f1
   ba994:	000b59e1 	.word	0x000b59e1
   ba998:	000c0002 	.word	0x000c0002
   ba99c:	000b5561 	.word	0x000b5561
   ba9a0:	000b54c9 	.word	0x000b54c9
   ba9a4:	000ba821 	.word	0x000ba821

000ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba9ac:	4606      	mov	r6, r0
   ba9ae:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba9b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba9b2:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba9b4:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba9b6:	1a47      	subs	r7, r0, r1
   ba9b8:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba9bc:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba9be:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba9c2:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba9c4:	d927      	bls.n	baa16 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba9c6:	1b5d      	subs	r5, r3, r5
   ba9c8:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba9ca:	6832      	ldr	r2, [r6, #0]
   ba9cc:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba9ce:	b10c      	cbz	r4, ba9d4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba9d0:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba9d4:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba9d6:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba9d8:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba9da:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba9dc:	eba3 0201 	sub.w	r2, r3, r1
   ba9e0:	d913      	bls.n	baa0a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba9e2:	4299      	cmp	r1, r3
   ba9e4:	d002      	beq.n	ba9ec <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba9e6:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba9e8:	f006 fce0 	bl	c13ac <memmove>
	_M_node = __new_node;
   ba9ec:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba9ee:	6823      	ldr	r3, [r4, #0]
   ba9f0:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba9f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba9f6:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba9f8:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba9fa:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba9fc:	59e3      	ldr	r3, [r4, r7]
   ba9fe:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   baa00:	f503 7300 	add.w	r3, r3, #512	; 0x200
   baa04:	6233      	str	r3, [r6, #32]
    }
   baa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   baa0a:	4299      	cmp	r1, r3
   baa0c:	d0ee      	beq.n	ba9ec <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   baa0e:	1d38      	adds	r0, r7, #4
   baa10:	1a80      	subs	r0, r0, r2
   baa12:	4420      	add	r0, r4
   baa14:	e7e8      	b.n	ba9e8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   baa16:	f103 0802 	add.w	r8, r3, #2
   baa1a:	454b      	cmp	r3, r9
   baa1c:	bf2c      	ite	cs
   baa1e:	4498      	addcs	r8, r3
   baa20:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   baa22:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   baa26:	d301      	bcc.n	baa2c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   baa28:	f005 ff2c 	bl	c0884 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   baa2c:	ea4f 0088 	mov.w	r0, r8, lsl #2
   baa30:	f7f9 fb31 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   baa34:	eba8 0505 	sub.w	r5, r8, r5
   baa38:	086d      	lsrs	r5, r5, #1
   baa3a:	4682      	mov	sl, r0
   baa3c:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   baa3e:	b10c      	cbz	r4, baa44 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   baa40:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   baa44:	6a72      	ldr	r2, [r6, #36]	; 0x24
   baa46:	6971      	ldr	r1, [r6, #20]
   baa48:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   baa4a:	442c      	add	r4, r5
	  if (_Num)
   baa4c:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   baa4e:	4454      	add	r4, sl
   baa50:	d003      	beq.n	baa5a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   baa52:	1a52      	subs	r2, r2, r1
   baa54:	4620      	mov	r0, r4
   baa56:	f006 fca9 	bl	c13ac <memmove>
	::operator delete(__p
   baa5a:	6871      	ldr	r1, [r6, #4]
   baa5c:	6830      	ldr	r0, [r6, #0]
   baa5e:	0089      	lsls	r1, r1, #2
   baa60:	f7f9 fb1d 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   baa64:	e9c6 a800 	strd	sl, r8, [r6]
   baa68:	e7c0      	b.n	ba9ec <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000baa6c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa6e:	b085      	sub	sp, #20
   baa70:	4604      	mov	r4, r0
   baa72:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   baa76:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baa7a:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baa7c:	460f      	mov	r7, r1
   baa7e:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baa80:	f7ff fbec 	bl	ba25c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   baa84:	4605      	mov	r5, r0
   baa86:	2800      	cmp	r0, #0
   baa88:	d03c      	beq.n	bab04 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   baa8a:	4b3f      	ldr	r3, [pc, #252]	; (bab88 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   baa8c:	493f      	ldr	r1, [pc, #252]	; (bab8c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   baa8e:	4840      	ldr	r0, [pc, #256]	; (bab90 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baa90:	2e00      	cmp	r6, #0
   baa92:	bf18      	it	ne
   baa94:	4633      	movne	r3, r6
   baa96:	463a      	mov	r2, r7
   baa98:	f7fd f848 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
   baa9c:	4620      	mov	r0, r4
   baa9e:	f7ff fbd0 	bl	ba242 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   baaa2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   baaa6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   baaaa:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   baaac:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   baaae:	f104 0678 	add.w	r6, r4, #120	; 0x78
   baab2:	d029      	beq.n	bab08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   baab4:	b103      	cbz	r3, baab8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   baab6:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   baab8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   baabc:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   baabe:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   baac0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   baac4:	4628      	mov	r0, r5
   baac6:	f001 fed5 	bl	bc874 <_ZNK14SequentialFile11getQueueLenEv>
   baaca:	9003      	str	r0, [sp, #12]
   baacc:	4630      	mov	r0, r6
   baace:	f7ff fcd9 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baad2:	9002      	str	r0, [sp, #8]
   baad4:	f002 fc06 	bl	bd2e4 <spark_cloud_flag_connected>
   baad8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   baadc:	9000      	str	r0, [sp, #0]
   baade:	492d      	ldr	r1, [pc, #180]	; (bab94 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   baae0:	482b      	ldr	r0, [pc, #172]	; (bab90 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baae2:	f7fd f823 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   baae6:	4628      	mov	r0, r5
   baae8:	f001 fec4 	bl	bc874 <_ZNK14SequentialFile11getQueueLenEv>
   baaec:	2800      	cmp	r0, #0
   baaee:	d03b      	beq.n	bab68 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   baaf0:	4620      	mov	r0, r4
   baaf2:	f7ff fd0b 	bl	ba50c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   baaf6:	4620      	mov	r0, r4
   baaf8:	f7ff fd68 	bl	ba5cc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   baafc:	6f60      	ldr	r0, [r4, #116]	; 0x74
   baafe:	f002 f8bd 	bl	bcc7c <os_mutex_recursive_unlock>
    return true;
   bab02:	2001      	movs	r0, #1
}
   bab04:	b005      	add	sp, #20
   bab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   bab08:	4630      	mov	r0, r6
   bab0a:	f7ff fcbb 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bab0e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bab12:	4298      	cmp	r0, r3
   bab14:	d102      	bne.n	bab1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   bab16:	4820      	ldr	r0, [pc, #128]	; (bab98 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   bab18:	f005 feb7 	bl	c088a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bab1c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bab20:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bab22:	1a9a      	subs	r2, r3, r2
   bab24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   bab26:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bab2a:	2b01      	cmp	r3, #1
   bab2c:	d804      	bhi.n	bab38 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   bab2e:	2200      	movs	r2, #0
   bab30:	2101      	movs	r1, #1
   bab32:	4630      	mov	r0, r6
   bab34:	f7ff ff38 	bl	ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bab38:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bab3c:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   bab40:	f7f9 faa9 	bl	b4096 <_Znwj>
   bab44:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bab46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab4a:	b103      	cbz	r3, bab4e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   bab4c:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bab4e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bab52:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bab54:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   bab58:	685b      	ldr	r3, [r3, #4]
   bab5a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   bab5e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bab62:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   bab66:	e7aa      	b.n	baabe <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   bab68:	4630      	mov	r0, r6
   bab6a:	f7ff fc8b 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bab6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bab70:	4298      	cmp	r0, r3
   bab72:	d8bd      	bhi.n	baaf0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   bab74:	f002 fbb6 	bl	bd2e4 <spark_cloud_flag_connected>
   bab78:	2800      	cmp	r0, #0
   bab7a:	d0b9      	beq.n	baaf0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   bab7c:	4907      	ldr	r1, [pc, #28]	; (bab9c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   bab7e:	4804      	ldr	r0, [pc, #16]	; (bab90 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   bab80:	f7fc ffd4 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
   bab84:	e7b7      	b.n	baaf6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   bab86:	bf00      	nop
   bab88:	000c5654 	.word	0x000c5654
   bab8c:	000c4f89 	.word	0x000c4f89
   bab90:	2003e4d0 	.word	0x2003e4d0
   bab94:	000c4fe1 	.word	0x000c4fe1
   bab98:	000c4fb1 	.word	0x000c4fb1
   bab9c:	000c500d 	.word	0x000c500d

000baba0 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   baba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   baba2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   baba6:	4604      	mov	r4, r0
    if (!publishComplete) {
   baba8:	2b00      	cmp	r3, #0
   babaa:	d041      	beq.n	bac30 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   babac:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   babb0:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   babb4:	2b00      	cmp	r3, #0
   babb6:	d03d      	beq.n	bac34 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   babb8:	4950      	ldr	r1, [pc, #320]	; (bacfc <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   babba:	4851      	ldr	r0, [pc, #324]	; (bad00 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   babbc:	f7fc ffb6 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   babc0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   babc4:	b1d3      	cbz	r3, babfc <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   babc6:	1d26      	adds	r6, r4, #4
   babc8:	2100      	movs	r1, #0
   babca:	4630      	mov	r0, r6
   babcc:	f001 fe02 	bl	bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   babd0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   babd4:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   babd6:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   babd8:	d10d      	bne.n	babf6 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   babda:	2101      	movs	r1, #1
   babdc:	4630      	mov	r0, r6
   babde:	f001 fdf9 	bl	bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   babe2:	2200      	movs	r2, #0
   babe4:	4629      	mov	r1, r5
   babe6:	4630      	mov	r0, r6
   babe8:	f001 fc2c 	bl	bc444 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   babec:	4945      	ldr	r1, [pc, #276]	; (bad04 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   babee:	4844      	ldr	r0, [pc, #272]	; (bad00 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   babf0:	462a      	mov	r2, r5
   babf2:	f7fc ff9b 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   babf6:	2300      	movs	r3, #0
   babf8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   babfc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   bac00:	b110      	cbz	r0, bac08 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   bac02:	2143      	movs	r1, #67	; 0x43
   bac04:	f7f9 fa4b 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   bac08:	2300      	movs	r3, #0
   bac0a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   bac0e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   bac12:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   bac16:	4b3c      	ldr	r3, [pc, #240]	; (bad08 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   bac18:	9300      	str	r3, [sp, #0]
   bac1a:	4669      	mov	r1, sp
   bac1c:	2300      	movs	r3, #0
   bac1e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   bac22:	9301      	str	r3, [sp, #4]
   bac24:	f7ff fd38 	bl	ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   bac28:	f002 f860 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   bac2c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   bac30:	b002      	add	sp, #8
   bac32:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   bac34:	4935      	ldr	r1, [pc, #212]	; (bad0c <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   bac36:	4832      	ldr	r0, [pc, #200]	; (bad00 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bac38:	f7fc ff78 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   bac3c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   bac40:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   bac44:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bac48:	b14b      	cbz	r3, bac5e <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   bac4a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   bac4e:	b110      	cbz	r0, bac56 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   bac50:	2143      	movs	r1, #67	; 0x43
   bac52:	f7f9 fa24 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   bac56:	2300      	movs	r3, #0
   bac58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   bac5c:	e7db      	b.n	bac16 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   bac5e:	4620      	mov	r0, r4
   bac60:	f7ff faef 	bl	ba242 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   bac64:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   bac68:	4293      	cmp	r3, r2
   bac6a:	d013      	beq.n	bac94 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   bac6c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bac70:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   bac74:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bac78:	3b04      	subs	r3, #4
   bac7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   bac7e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   bac80:	f001 fffc 	bl	bcc7c <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   bac84:	4922      	ldr	r1, [pc, #136]	; (bad10 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   bac86:	481e      	ldr	r0, [pc, #120]	; (bad00 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bac88:	f7fc ff50 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   bac8c:	4620      	mov	r0, r4
   bac8e:	f7ff fc3d 	bl	ba50c <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   bac92:	e7c0      	b.n	bac16 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   bac94:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   bac98:	4628      	mov	r0, r5
   bac9a:	f7ff fbf3 	bl	ba484 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bac9e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   baca2:	4298      	cmp	r0, r3
   baca4:	d102      	bne.n	bacac <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   baca6:	481b      	ldr	r0, [pc, #108]	; (bad14 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   baca8:	f005 fdef 	bl	c088a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   bacac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bacb0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacb2:	429a      	cmp	r2, r3
   bacb4:	d104      	bne.n	bacc0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   bacb6:	2201      	movs	r2, #1
   bacb8:	4611      	mov	r1, r2
   bacba:	4628      	mov	r0, r5
   bacbc:	f7ff fe74 	bl	ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bacc0:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   bacc4:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   bacc8:	f7f9 f9e5 	bl	b4096 <_Znwj>
   baccc:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   bacd0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bacd4:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   bacd6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   bacda:	f853 3c04 	ldr.w	r3, [r3, #-4]
   bacde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   bace2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bace6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   bacea:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   bacee:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bacf2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bacf6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   bacfa:	e7c0      	b.n	bac7e <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   bacfc:	000c5020 	.word	0x000c5020
   bad00:	2003e4d0 	.word	0x2003e4d0
   bad04:	000c5033 	.word	0x000c5033
   bad08:	000ba6e1 	.word	0x000ba6e1
   bad0c:	000c5043 	.word	0x000c5043
   bad10:	000c5055 	.word	0x000c5055
   bad14:	000c4fb1 	.word	0x000c4fb1

000bad18 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   bad18:	4b01      	ldr	r3, [pc, #4]	; (bad20 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   bad1a:	4a02      	ldr	r2, [pc, #8]	; (bad24 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   bad1c:	601a      	str	r2, [r3, #0]
}
   bad1e:	4770      	bx	lr
   bad20:	2003e4d0 	.word	0x2003e4d0
   bad24:	000c507c 	.word	0x000c507c

000bad28 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bad28:	b510      	push	{r4, lr}
   bad2a:	4b07      	ldr	r3, [pc, #28]	; (bad48 <_ZN17PublishQueuePosixD1Ev+0x20>)
   bad2c:	4604      	mov	r4, r0
   bad2e:	f840 3bc0 	str.w	r3, [r0], #192
   bad32:	f7fa fc0c 	bl	b554e <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bad36:	f104 0078 	add.w	r0, r4, #120	; 0x78
   bad3a:	f7ff fc95 	bl	ba668 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   bad3e:	1d20      	adds	r0, r4, #4
   bad40:	f001 fc04 	bl	bc54c <_ZN14SequentialFileD1Ev>
}
   bad44:	4620      	mov	r0, r4
   bad46:	bd10      	pop	{r4, pc}
   bad48:	000c5090 	.word	0x000c5090

000bad4c <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bad4c:	b510      	push	{r4, lr}
   bad4e:	4604      	mov	r4, r0
}
   bad50:	f7ff ffea 	bl	bad28 <_ZN17PublishQueuePosixD1Ev>
   bad54:	4620      	mov	r0, r4
   bad56:	21d0      	movs	r1, #208	; 0xd0
   bad58:	f7f9 f9a1 	bl	b409e <_ZdlPvj>
   bad5c:	4620      	mov	r0, r4
   bad5e:	bd10      	pop	{r4, pc}

000bad60 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   bad60:	6001      	str	r1, [r0, #0]
   bad62:	7102      	strb	r2, [r0, #4]
{
}
   bad64:	4770      	bx	lr

000bad66 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   bad66:	6800      	ldr	r0, [r0, #0]
   bad68:	6803      	ldr	r3, [r0, #0]
   bad6a:	68db      	ldr	r3, [r3, #12]
   bad6c:	4718      	bx	r3

000bad6e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   bad6e:	6800      	ldr	r0, [r0, #0]
   bad70:	6803      	ldr	r3, [r0, #0]
   bad72:	6a1b      	ldr	r3, [r3, #32]
   bad74:	4718      	bx	r3

000bad76 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   bad76:	6800      	ldr	r0, [r0, #0]
   bad78:	6803      	ldr	r3, [r0, #0]
   bad7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bad7c:	4718      	bx	r3

000bad7e <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   bad7e:	7900      	ldrb	r0, [r0, #4]
   bad80:	4770      	bx	lr

000bad82 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   bad82:	6800      	ldr	r0, [r0, #0]
   bad84:	6803      	ldr	r3, [r0, #0]
   bad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bad88:	4718      	bx	r3

000bad8a <_ZN10RHDatagram6sendtoEPhhh>:
{
   bad8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad8c:	4605      	mov	r5, r0
   bad8e:	460c      	mov	r4, r1
    setHeaderTo(address);
   bad90:	4619      	mov	r1, r3
{
   bad92:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   bad94:	f7ff fff5 	bl	bad82 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   bad98:	6828      	ldr	r0, [r5, #0]
   bad9a:	9a01      	ldr	r2, [sp, #4]
   bad9c:	6803      	ldr	r3, [r0, #0]
   bad9e:	695b      	ldr	r3, [r3, #20]
   bada0:	4621      	mov	r1, r4
}
   bada2:	b003      	add	sp, #12
   bada4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   bada8:	4718      	bx	r3

000badaa <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   badaa:	6800      	ldr	r0, [r0, #0]
   badac:	6803      	ldr	r3, [r0, #0]
   badae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   badb0:	4718      	bx	r3

000badb2 <_ZN10RHDatagram14setThisAddressEh>:
{
   badb2:	b538      	push	{r3, r4, r5, lr}
   badb4:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   badb6:	6800      	ldr	r0, [r0, #0]
   badb8:	6803      	ldr	r3, [r0, #0]
{
   badba:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   badbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   badbe:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   badc0:	4629      	mov	r1, r5
   badc2:	4620      	mov	r0, r4
   badc4:	f7ff fff1 	bl	badaa <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   badc8:	7125      	strb	r5, [r4, #4]
}
   badca:	bd38      	pop	{r3, r4, r5, pc}

000badcc <_ZN10RHDatagram4initEv>:
{
   badcc:	b538      	push	{r3, r4, r5, lr}
   badce:	4604      	mov	r4, r0
    bool ret = _driver.init();
   badd0:	6800      	ldr	r0, [r0, #0]
   badd2:	6803      	ldr	r3, [r0, #0]
   badd4:	689b      	ldr	r3, [r3, #8]
   badd6:	4798      	blx	r3
    if (ret)
   badd8:	4605      	mov	r5, r0
   badda:	b118      	cbz	r0, bade4 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   baddc:	7921      	ldrb	r1, [r4, #4]
   badde:	4620      	mov	r0, r4
   bade0:	f7ff ffe7 	bl	badb2 <_ZN10RHDatagram14setThisAddressEh>
}
   bade4:	4628      	mov	r0, r5
   bade6:	bd38      	pop	{r3, r4, r5, pc}

000bade8 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   bade8:	6800      	ldr	r0, [r0, #0]
   badea:	6803      	ldr	r3, [r0, #0]
   badec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   badee:	4718      	bx	r3

000badf0 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   badf0:	6800      	ldr	r0, [r0, #0]
   badf2:	6803      	ldr	r3, [r0, #0]
   badf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   badf6:	4718      	bx	r3

000badf8 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   badf8:	6800      	ldr	r0, [r0, #0]
   badfa:	6803      	ldr	r3, [r0, #0]
   badfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   badfe:	4718      	bx	r3

000bae00 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   bae00:	6800      	ldr	r0, [r0, #0]
   bae02:	6803      	ldr	r3, [r0, #0]
   bae04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bae06:	4718      	bx	r3

000bae08 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   bae08:	6800      	ldr	r0, [r0, #0]
   bae0a:	6803      	ldr	r3, [r0, #0]
   bae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bae0e:	4718      	bx	r3

000bae10 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   bae10:	6800      	ldr	r0, [r0, #0]
   bae12:	6803      	ldr	r3, [r0, #0]
   bae14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bae16:	4718      	bx	r3

000bae18 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   bae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bae1c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   bae1e:	6800      	ldr	r0, [r0, #0]
{
   bae20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   bae22:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   bae24:	6803      	ldr	r3, [r0, #0]
   bae26:	691b      	ldr	r3, [r3, #16]
{
   bae28:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   bae2c:	4798      	blx	r3
   bae2e:	4605      	mov	r5, r0
   bae30:	b1c8      	cbz	r0, bae66 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   bae32:	b11e      	cbz	r6, bae3c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   bae34:	4620      	mov	r0, r4
   bae36:	f7ff ffe3 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
   bae3a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   bae3c:	f1b9 0f00 	cmp.w	r9, #0
   bae40:	d004      	beq.n	bae4c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   bae42:	4620      	mov	r0, r4
   bae44:	f7ff ffd8 	bl	badf8 <_ZN10RHDatagram8headerToEv>
   bae48:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   bae4c:	f1b8 0f00 	cmp.w	r8, #0
   bae50:	d004      	beq.n	bae5c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bae52:	4620      	mov	r0, r4
   bae54:	f7ff ffd8 	bl	bae08 <_ZN10RHDatagram8headerIdEv>
   bae58:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bae5c:	b11f      	cbz	r7, bae66 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bae5e:	4620      	mov	r0, r4
   bae60:	f7ff ffd6 	bl	bae10 <_ZN10RHDatagram11headerFlagsEv>
   bae64:	7038      	strb	r0, [r7, #0]
}
   bae66:	4628      	mov	r0, r5
   bae68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bae6c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bae6c:	2001      	movs	r0, #1
   bae6e:	4770      	bx	lr

000bae70 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bae70:	7903      	ldrb	r3, [r0, #4]
   bae72:	2b03      	cmp	r3, #3
   bae74:	d0fc      	beq.n	bae70 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bae76:	2001      	movs	r0, #1
   bae78:	4770      	bx	lr

000bae7a <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bae7a:	2000      	movs	r0, #0
   bae7c:	4770      	bx	lr

000bae7e <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bae7e:	7181      	strb	r1, [r0, #6]
}
   bae80:	4770      	bx	lr

000bae82 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bae82:	7141      	strb	r1, [r0, #5]
}
   bae84:	4770      	bx	lr

000bae86 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bae86:	72c1      	strb	r1, [r0, #11]
}
   bae88:	4770      	bx	lr

000bae8a <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bae8a:	7301      	strb	r1, [r0, #12]
}
   bae8c:	4770      	bx	lr

000bae8e <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bae8e:	7341      	strb	r1, [r0, #13]
}
   bae90:	4770      	bx	lr

000bae92 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bae92:	7b83      	ldrb	r3, [r0, #14]
   bae94:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bae98:	4311      	orrs	r1, r2
   bae9a:	7381      	strb	r1, [r0, #14]
}
   bae9c:	4770      	bx	lr

000bae9e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bae9e:	79c0      	ldrb	r0, [r0, #7]
}
   baea0:	4770      	bx	lr

000baea2 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   baea2:	7a00      	ldrb	r0, [r0, #8]
}
   baea4:	4770      	bx	lr

000baea6 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   baea6:	7a40      	ldrb	r0, [r0, #9]
}
   baea8:	4770      	bx	lr

000baeaa <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   baeaa:	7a80      	ldrb	r0, [r0, #10]
}
   baeac:	4770      	bx	lr

000baeae <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   baeae:	8a00      	ldrh	r0, [r0, #16]
}
   baeb0:	b200      	sxth	r0, r0
   baeb2:	4770      	bx	lr

000baeb4 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   baeb4:	7900      	ldrb	r0, [r0, #4]
}
   baeb6:	4770      	bx	lr

000baeb8 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   baeb8:	7101      	strb	r1, [r0, #4]
}
   baeba:	4770      	bx	lr

000baebc <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   baebc:	8a40      	ldrh	r0, [r0, #18]
}
   baebe:	b280      	uxth	r0, r0
   baec0:	4770      	bx	lr

000baec2 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   baec2:	8a80      	ldrh	r0, [r0, #20]
}
   baec4:	b280      	uxth	r0, r0
   baec6:	4770      	bx	lr

000baec8 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   baec8:	8ac0      	ldrh	r0, [r0, #22]
}
   baeca:	b280      	uxth	r0, r0
   baecc:	4770      	bx	lr

000baece <_ZN15RHGenericDriver13waitAvailableEt>:
{
   baece:	b538      	push	{r3, r4, r5, lr}
   baed0:	4605      	mov	r5, r0
   baed2:	460c      	mov	r4, r1
    while (!available())
   baed4:	682b      	ldr	r3, [r5, #0]
   baed6:	4628      	mov	r0, r5
   baed8:	68db      	ldr	r3, [r3, #12]
   baeda:	4798      	blx	r3
   baedc:	b928      	cbnz	r0, baeea <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   baede:	2c00      	cmp	r4, #0
   baee0:	d0f8      	beq.n	baed4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   baee2:	4620      	mov	r0, r4
   baee4:	f002 fb1e 	bl	bd524 <delay>
   baee8:	e7f4      	b.n	baed4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   baeea:	bd38      	pop	{r3, r4, r5, pc}

000baeec <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   baeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baeee:	4605      	mov	r5, r0
   baef0:	460f      	mov	r7, r1
   baef2:	4614      	mov	r4, r2
   baef4:	f001 fefa 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   baef8:	4606      	mov	r6, r0
   baefa:	f001 fef7 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   baefe:	1b80      	subs	r0, r0, r6
   baf00:	42b8      	cmp	r0, r7
   baf02:	d20a      	bcs.n	baf1a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   baf04:	682b      	ldr	r3, [r5, #0]
   baf06:	4628      	mov	r0, r5
   baf08:	68db      	ldr	r3, [r3, #12]
   baf0a:	4798      	blx	r3
   baf0c:	b930      	cbnz	r0, baf1c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   baf0e:	2c00      	cmp	r4, #0
   baf10:	d0f3      	beq.n	baefa <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   baf12:	4620      	mov	r0, r4
   baf14:	f002 fb06 	bl	bd524 <delay>
   baf18:	e7ef      	b.n	baefa <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   baf1a:	2000      	movs	r0, #0
}
   baf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf1e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   baf1e:	b570      	push	{r4, r5, r6, lr}
   baf20:	4604      	mov	r4, r0
   baf22:	460e      	mov	r6, r1
   baf24:	f001 fee2 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   baf28:	4605      	mov	r5, r0
   baf2a:	f001 fedf 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   baf2e:	1b40      	subs	r0, r0, r5
   baf30:	42b0      	cmp	r0, r6
   baf32:	d204      	bcs.n	baf3e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   baf34:	7923      	ldrb	r3, [r4, #4]
   baf36:	2b03      	cmp	r3, #3
   baf38:	d0f7      	beq.n	baf2a <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   baf3a:	2001      	movs	r0, #1
}
   baf3c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   baf3e:	2000      	movs	r0, #0
   baf40:	e7fc      	b.n	baf3c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000baf42 <_ZN15RHGenericDriver7waitCADEv>:
{
   baf42:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   baf44:	69c3      	ldr	r3, [r0, #28]
{
   baf46:	4604      	mov	r4, r0
    if (!_cad_timeout)
   baf48:	b1b3      	cbz	r3, baf78 <_ZN15RHGenericDriver7waitCADEv+0x36>
   baf4a:	f001 fecf 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   baf4e:	2664      	movs	r6, #100	; 0x64
   baf50:	4605      	mov	r5, r0
    while (isChannelActive())
   baf52:	6823      	ldr	r3, [r4, #0]
   baf54:	4620      	mov	r0, r4
   baf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baf58:	4798      	blx	r3
   baf5a:	b168      	cbz	r0, baf78 <_ZN15RHGenericDriver7waitCADEv+0x36>
   baf5c:	f001 fec6 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   baf60:	69e3      	ldr	r3, [r4, #28]
   baf62:	1b40      	subs	r0, r0, r5
   baf64:	4298      	cmp	r0, r3
   baf66:	d809      	bhi.n	baf7c <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   baf68:	210a      	movs	r1, #10
   baf6a:	2001      	movs	r0, #1
   baf6c:	f004 fcdd 	bl	bf92a <_Z6randomii>
   baf70:	4370      	muls	r0, r6
   baf72:	f002 fad7 	bl	bd524 <delay>
    while (isChannelActive())
   baf76:	e7ec      	b.n	baf52 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   baf78:	2001      	movs	r0, #1
}
   baf7a:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   baf7c:	2000      	movs	r0, #0
   baf7e:	e7fc      	b.n	baf7a <_ZN15RHGenericDriver7waitCADEv+0x38>

000baf80 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   baf80:	4a06      	ldr	r2, [pc, #24]	; (baf9c <_ZN15RHGenericDriverC1Ev+0x1c>)
   baf82:	6002      	str	r2, [r0, #0]
   baf84:	21ff      	movs	r1, #255	; 0xff
   baf86:	2200      	movs	r2, #0
   baf88:	7102      	strb	r2, [r0, #4]
   baf8a:	7141      	strb	r1, [r0, #5]
   baf8c:	8242      	strh	r2, [r0, #18]
   baf8e:	72c1      	strb	r1, [r0, #11]
   baf90:	8282      	strh	r2, [r0, #20]
   baf92:	8181      	strh	r1, [r0, #12]
   baf94:	7382      	strb	r2, [r0, #14]
   baf96:	82c2      	strh	r2, [r0, #22]
   baf98:	61c2      	str	r2, [r0, #28]
}
   baf9a:	4770      	bx	lr
   baf9c:	000c50a4 	.word	0x000c50a4

000bafa0 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bafa0:	4770      	bx	lr

000bafa2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bafa2:	4770      	bx	lr

000bafa4 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bafa4:	4770      	bx	lr

000bafa6 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bafa6:	4770      	bx	lr

000bafa8 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bafa8:	4770      	bx	lr

000bafaa <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bafaa:	7141      	strb	r1, [r0, #5]
}
   bafac:	4770      	bx	lr

000bafae <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bafae:	7181      	strb	r1, [r0, #6]
}
   bafb0:	4770      	bx	lr

000bafb2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bafb2:	7101      	strb	r1, [r0, #4]
}
   bafb4:	4770      	bx	lr
	...

000bafb8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bafb8:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bafba:	4d03      	ldr	r5, [pc, #12]	; (bafc8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   bafbc:	6005      	str	r5, [r0, #0]
   bafbe:	7101      	strb	r1, [r0, #4]
   bafc0:	7142      	strb	r2, [r0, #5]
   bafc2:	7183      	strb	r3, [r0, #6]
}
   bafc4:	bd30      	pop	{r4, r5, pc}
   bafc6:	bf00      	nop
   bafc8:	000c5124 	.word	0x000c5124

000bafcc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   bafcc:	4770      	bx	lr

000bafce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   bafce:	b510      	push	{r4, lr}
  }
   bafd0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   bafd2:	4604      	mov	r4, r0
  }
   bafd4:	f7f9 f863 	bl	b409e <_ZdlPvj>
   bafd8:	4620      	mov	r0, r4
   bafda:	bd10      	pop	{r4, pc}

000bafdc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bafdc:	b40e      	push	{r1, r2, r3}
   bafde:	b503      	push	{r0, r1, lr}
   bafe0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   bafe2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bafe4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bafe8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bafea:	f004 fc62 	bl	bf8b2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bafee:	b002      	add	sp, #8
   baff0:	f85d eb04 	ldr.w	lr, [sp], #4
   baff4:	b003      	add	sp, #12
   baff6:	4770      	bx	lr

000baff8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   baff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   baffa:	4604      	mov	r4, r0
   baffc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   baffe:	7922      	ldrb	r2, [r4, #4]
   bb000:	68a3      	ldr	r3, [r4, #8]
   bb002:	b132      	cbz	r2, bb012 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bb004:	b9a3      	cbnz	r3, bb030 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bb006:	490b      	ldr	r1, [pc, #44]	; (bb034 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bb008:	b002      	add	sp, #8
   bb00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bb00e:	f004 bb47 	b.w	bf6a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bb012:	4a09      	ldr	r2, [pc, #36]	; (bb038 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bb014:	7b26      	ldrb	r6, [r4, #12]
   bb016:	4d09      	ldr	r5, [pc, #36]	; (bb03c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bb018:	4909      	ldr	r1, [pc, #36]	; (bb040 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bb01a:	7b64      	ldrb	r4, [r4, #13]
   bb01c:	2e01      	cmp	r6, #1
   bb01e:	bf18      	it	ne
   bb020:	4629      	movne	r1, r5
   bb022:	e9cd 1400 	strd	r1, r4, [sp]
   bb026:	4907      	ldr	r1, [pc, #28]	; (bb044 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   bb028:	f7ff ffd8 	bl	bafdc <_ZN5Print6printfEPKcz>
  }
   bb02c:	b002      	add	sp, #8
   bb02e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bb030:	4a05      	ldr	r2, [pc, #20]	; (bb048 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   bb032:	e7ef      	b.n	bb014 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   bb034:	000c5161 	.word	0x000c5161
   bb038:	000c5654 	.word	0x000c5654
   bb03c:	000c515d 	.word	0x000c515d
   bb040:	000c5159 	.word	0x000c5159
   bb044:	000c5177 	.word	0x000c5177
   bb048:	000c5150 	.word	0x000c5150

000bb04c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bb04c:	b510      	push	{r4, lr}
   bb04e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   bb050:	f7ff ffb2 	bl	bafb8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   bb054:	4b05      	ldr	r3, [pc, #20]	; (bb06c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   bb056:	6023      	str	r3, [r4, #0]
  {
   bb058:	4b05      	ldr	r3, [pc, #20]	; (bb070 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   bb05a:	60a3      	str	r3, [r4, #8]
   bb05c:	2301      	movs	r3, #1
   bb05e:	7323      	strb	r3, [r4, #12]
   bb060:	2300      	movs	r3, #0
   bb062:	6123      	str	r3, [r4, #16]
   bb064:	82a3      	strh	r3, [r4, #20]
{
}
   bb066:	4620      	mov	r0, r4
   bb068:	bd10      	pop	{r4, pc}
   bb06a:	bf00      	nop
   bb06c:	000c51b0 	.word	0x000c51b0
   bb070:	000c519c 	.word	0x000c519c

000bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bb074:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bb076:	4c0b      	ldr	r4, [pc, #44]	; (bb0a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bb078:	7821      	ldrb	r1, [r4, #0]
   bb07a:	f3bf 8f5b 	dmb	ish
   bb07e:	f011 0101 	ands.w	r1, r1, #1
   bb082:	d10b      	bne.n	bb09c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb084:	4620      	mov	r0, r4
   bb086:	9101      	str	r1, [sp, #4]
   bb088:	f7f9 f818 	bl	b40bc <__cxa_guard_acquire>
   bb08c:	9901      	ldr	r1, [sp, #4]
   bb08e:	b128      	cbz	r0, bb09c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb090:	4805      	ldr	r0, [pc, #20]	; (bb0a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb092:	f004 fc61 	bl	bf958 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb096:	4620      	mov	r0, r4
   bb098:	f7f9 f815 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   bb09c:	4802      	ldr	r0, [pc, #8]	; (bb0a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb09e:	b002      	add	sp, #8
   bb0a0:	bd10      	pop	{r4, pc}
   bb0a2:	bf00      	nop
   bb0a4:	2003e4d8 	.word	0x2003e4d8
   bb0a8:	2003e4dc 	.word	0x2003e4dc

000bb0ac <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   bb0ac:	b507      	push	{r0, r1, r2, lr}
   bb0ae:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   bb0b0:	f7ff ffe0 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bb0b4:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   bb0b6:	b003      	add	sp, #12
   bb0b8:	f85d eb04 	ldr.w	lr, [sp], #4
   bb0bc:	f004 bd04 	b.w	bfac8 <_ZN8SPIClass8transferEh>

000bb0c0 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   bb0c0:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   bb0c2:	f7ff ffd7 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   bb0c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb0ca:	f004 bd03 	b.w	bfad4 <_ZN8SPIClass15attachInterruptEv>

000bb0ce <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   bb0ce:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   bb0d0:	f7ff ffd0 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   bb0d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb0d8:	f004 bcfd 	b.w	bfad6 <_ZN8SPIClass15detachInterruptEv>

000bb0dc <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   bb0dc:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   bb0de:	7903      	ldrb	r3, [r0, #4]
   bb0e0:	2b04      	cmp	r3, #4
   bb0e2:	d020      	beq.n	bb126 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   bb0e4:	2b03      	cmp	r3, #3
   bb0e6:	d020      	beq.n	bb12a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   bb0e8:	2b02      	cmp	r3, #2
   bb0ea:	d020      	beq.n	bb12e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   bb0ec:	4a11      	ldr	r2, [pc, #68]	; (bb134 <_ZN13RHHardwareSPI5beginEv+0x58>)
   bb0ee:	4912      	ldr	r1, [pc, #72]	; (bb138 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   bb0f0:	2b01      	cmp	r3, #1
   bb0f2:	bf18      	it	ne
   bb0f4:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   bb0f6:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   bb0f8:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   bb0fa:	3901      	subs	r1, #1
   bb0fc:	bf18      	it	ne
   bb0fe:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   bb100:	b133      	cbz	r3, bb110 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   bb102:	2b01      	cmp	r3, #1
   bb104:	d004      	beq.n	bb110 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   bb106:	2b02      	cmp	r3, #2
   bb108:	d002      	beq.n	bb110 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   bb10a:	2b03      	cmp	r3, #3
   bb10c:	bf18      	it	ne
   bb10e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   bb110:	2400      	movs	r4, #0
   bb112:	7304      	strb	r4, [r0, #12]
   bb114:	6102      	str	r2, [r0, #16]
   bb116:	7501      	strb	r1, [r0, #20]
   bb118:	7543      	strb	r3, [r0, #21]
        instance().begin();
   bb11a:	f7ff ffab 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   bb11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb122:	f004 bc23 	b.w	bf96c <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   bb126:	4a05      	ldr	r2, [pc, #20]	; (bb13c <_ZN13RHHardwareSPI5beginEv+0x60>)
   bb128:	e7e5      	b.n	bb0f6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bb12a:	4a05      	ldr	r2, [pc, #20]	; (bb140 <_ZN13RHHardwareSPI5beginEv+0x64>)
   bb12c:	e7e3      	b.n	bb0f6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bb12e:	4a05      	ldr	r2, [pc, #20]	; (bb144 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bb130:	e7e1      	b.n	bb0f6 <_ZN13RHHardwareSPI5beginEv+0x1a>
   bb132:	bf00      	nop
   bb134:	001e8480 	.word	0x001e8480
   bb138:	000f4240 	.word	0x000f4240
   bb13c:	00f42400 	.word	0x00f42400
   bb140:	007a1200 	.word	0x007a1200
   bb144:	003d0900 	.word	0x003d0900

000bb148 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bb148:	b508      	push	{r3, lr}
        instance().end();
   bb14a:	f7ff ff93 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bb14e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb152:	f004 bc1f 	b.w	bf994 <_ZN8SPIClass3endEv>

000bb156 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bb156:	b510      	push	{r4, lr}
   bb158:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bb15a:	f7ff ff8b 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bb15e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bb162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb166:	f004 bc41 	b.w	bf9ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bb16a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bb16a:	b508      	push	{r3, lr}
        instance().endTransaction();
   bb16c:	f7ff ff82 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bb170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb174:	f004 bc20 	b.w	bf9b8 <_ZN8SPIClass14endTransactionEv>

000bb178 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   bb178:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   bb17a:	f7ff ff7b 	bl	bb074 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   bb17e:	bd08      	pop	{r3, pc}

000bb180 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   bb180:	2300      	movs	r3, #0
   bb182:	4802      	ldr	r0, [pc, #8]	; (bb18c <_GLOBAL__sub_I_hardware_spi+0xc>)
   bb184:	461a      	mov	r2, r3
   bb186:	4619      	mov	r1, r3
   bb188:	f7ff bf60 	b.w	bb04c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bb18c:	2003e4e4 	.word	0x2003e4e4

000bb190 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bb190:	2a01      	cmp	r2, #1
   bb192:	d105      	bne.n	bb1a0 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bb194:	7a00      	ldrb	r0, [r0, #8]
   bb196:	780b      	ldrb	r3, [r1, #0]
   bb198:	1a1b      	subs	r3, r3, r0
   bb19a:	4258      	negs	r0, r3
   bb19c:	4158      	adcs	r0, r3
   bb19e:	4770      	bx	lr
   bb1a0:	2000      	movs	r0, #0
}
   bb1a2:	4770      	bx	lr

000bb1a4 <_ZN6RHMesh5doArpEh>:
{
   bb1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb1a8:	4c25      	ldr	r4, [pc, #148]	; (bb240 <_ZN6RHMesh5doArpEh+0x9c>)
   bb1aa:	2301      	movs	r3, #1
{
   bb1ac:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb1ae:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bb1b0:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb1b2:	2300      	movs	r3, #0
{
   bb1b4:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bb1b6:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb1b8:	9300      	str	r3, [sp, #0]
   bb1ba:	2203      	movs	r2, #3
   bb1bc:	23ff      	movs	r3, #255	; 0xff
   bb1be:	4621      	mov	r1, r4
{
   bb1c0:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb1c2:	f000 fbb9 	bl	bb938 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bb1c6:	b120      	cbz	r0, bb1d2 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bb1c8:	2500      	movs	r5, #0
}
   bb1ca:	4628      	mov	r0, r5
   bb1cc:	b006      	add	sp, #24
   bb1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bb1d2:	237a      	movs	r3, #122	; 0x7a
   bb1d4:	f88d 3017 	strb.w	r3, [sp, #23]
   bb1d8:	f001 fd88 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bb1dc:	f106 0904 	add.w	r9, r6, #4
   bb1e0:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bb1e2:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   bb1e6:	f001 fd81 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   bb1ea:	1a29      	subs	r1, r5, r0
   bb1ec:	2900      	cmp	r1, #0
   bb1ee:	ddeb      	ble.n	bb1c8 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   bb1f0:	2200      	movs	r2, #0
   bb1f2:	b289      	uxth	r1, r1
   bb1f4:	4648      	mov	r0, r9
   bb1f6:	f7ff fdbe 	bl	bad76 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb1fa:	2800      	cmp	r0, #0
   bb1fc:	d0f3      	beq.n	bb1e6 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bb1fe:	2300      	movs	r3, #0
   bb200:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bb204:	e9cd 3300 	strd	r3, r3, [sp]
   bb208:	f10d 0217 	add.w	r2, sp, #23
   bb20c:	4621      	mov	r1, r4
   bb20e:	4630      	mov	r0, r6
   bb210:	f000 fb9c 	bl	bb94c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb214:	4605      	mov	r5, r0
   bb216:	2800      	cmp	r0, #0
   bb218:	d0e3      	beq.n	bb1e2 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   bb21a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bb21e:	2b01      	cmp	r3, #1
   bb220:	d9df      	bls.n	bb1e2 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb222:	f894 a000 	ldrb.w	sl, [r4]
   bb226:	f1ba 0f02 	cmp.w	sl, #2
   bb22a:	d1da      	bne.n	bb1e2 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bb22c:	4648      	mov	r0, r9
   bb22e:	f7ff fde7 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
   bb232:	4653      	mov	r3, sl
   bb234:	4602      	mov	r2, r0
   bb236:	4639      	mov	r1, r7
   bb238:	4630      	mov	r0, r6
   bb23a:	f000 faf5 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bb23e:	e7c4      	b.n	bb1ca <_ZN6RHMesh5doArpEh+0x26>
   bb240:	2003e4fc 	.word	0x2003e4fc

000bb244 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bb244:	2a01      	cmp	r2, #1
{
   bb246:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bb24a:	4607      	mov	r7, r0
   bb24c:	460e      	mov	r6, r1
   bb24e:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bb250:	d93b      	bls.n	bb2ca <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb252:	794d      	ldrb	r5, [r1, #5]
   bb254:	2d02      	cmp	r5, #2
   bb256:	d130      	bne.n	bb2ba <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bb258:	f100 0804 	add.w	r8, r0, #4
   bb25c:	79c9      	ldrb	r1, [r1, #7]
   bb25e:	9101      	str	r1, [sp, #4]
   bb260:	4640      	mov	r0, r8
   bb262:	f7ff fdcd 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb266:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bb268:	462b      	mov	r3, r5
   bb26a:	4602      	mov	r2, r0
   bb26c:	9901      	ldr	r1, [sp, #4]
   bb26e:	4638      	mov	r0, r7
   bb270:	f000 fada 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb274:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bb276:	f106 0308 	add.w	r3, r6, #8
   bb27a:	2400      	movs	r4, #0
   bb27c:	4622      	mov	r2, r4
   bb27e:	4295      	cmp	r5, r2
   bb280:	f104 0401 	add.w	r4, r4, #1
   bb284:	b2e4      	uxtb	r4, r4
   bb286:	d904      	bls.n	bb292 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bb288:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb28c:	7a39      	ldrb	r1, [r7, #8]
   bb28e:	4291      	cmp	r1, r2
   bb290:	d1f4      	bne.n	bb27c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bb292:	f104 0108 	add.w	r1, r4, #8
   bb296:	440e      	add	r6, r1
	while (i < numRoutes)
   bb298:	42a5      	cmp	r5, r4
   bb29a:	d916      	bls.n	bb2ca <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bb29c:	f816 1b01 	ldrb.w	r1, [r6], #1
   bb2a0:	9101      	str	r1, [sp, #4]
   bb2a2:	4640      	mov	r0, r8
   bb2a4:	f7ff fdac 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
   bb2a8:	3401      	adds	r4, #1
   bb2aa:	4602      	mov	r2, r0
   bb2ac:	9901      	ldr	r1, [sp, #4]
   bb2ae:	2302      	movs	r3, #2
   bb2b0:	4638      	mov	r0, r7
   bb2b2:	b2e4      	uxtb	r4, r4
   bb2b4:	f000 fab8 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bb2b8:	e7ee      	b.n	bb298 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bb2ba:	2d03      	cmp	r5, #3
   bb2bc:	d105      	bne.n	bb2ca <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   bb2be:	7989      	ldrb	r1, [r1, #6]
}
   bb2c0:	b002      	add	sp, #8
   bb2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   bb2c6:	f000 ba98 	b.w	bb7fa <_ZN8RHRouter13deleteRouteToEh>
}
   bb2ca:	b002      	add	sp, #8
   bb2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb2d0 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   bb2d0:	b510      	push	{r4, lr}
   bb2d2:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   bb2d4:	f000 fae8 	bl	bb8a8 <_ZN8RHRouterC1ER15RHGenericDriverh>
   bb2d8:	4b01      	ldr	r3, [pc, #4]	; (bb2e0 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   bb2da:	6023      	str	r3, [r4, #0]
}
   bb2dc:	4620      	mov	r0, r4
   bb2de:	bd10      	pop	{r4, pc}
   bb2e0:	000c51e4 	.word	0x000c51e4

000bb2e4 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   bb2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb2e8:	2a79      	cmp	r2, #121	; 0x79
{
   bb2ea:	f89d 9020 	ldrb.w	r9, [sp, #32]
   bb2ee:	4606      	mov	r6, r0
   bb2f0:	460f      	mov	r7, r1
   bb2f2:	4614      	mov	r4, r2
   bb2f4:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb2f6:	d825      	bhi.n	bb344 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   bb2f8:	2bff      	cmp	r3, #255	; 0xff
   bb2fa:	d114      	bne.n	bb326 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb2fc:	f8df 8048 	ldr.w	r8, [pc, #72]	; bb348 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   bb300:	4640      	mov	r0, r8
   bb302:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bb304:	4622      	mov	r2, r4
   bb306:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb308:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bb30c:	f006 f840 	bl	c1390 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb310:	1c62      	adds	r2, r4, #1
   bb312:	f8cd 9020 	str.w	r9, [sp, #32]
   bb316:	462b      	mov	r3, r5
   bb318:	4641      	mov	r1, r8
   bb31a:	4630      	mov	r0, r6
   bb31c:	b2d2      	uxtb	r2, r2
}
   bb31e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb322:	f000 bb09 	b.w	bb938 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bb326:	4619      	mov	r1, r3
   bb328:	f000 fa23 	bl	bb772 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bb32c:	2800      	cmp	r0, #0
   bb32e:	d1e5      	bne.n	bb2fc <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   bb330:	6833      	ldr	r3, [r6, #0]
   bb332:	4629      	mov	r1, r5
   bb334:	689b      	ldr	r3, [r3, #8]
   bb336:	4630      	mov	r0, r6
   bb338:	4798      	blx	r3
   bb33a:	2800      	cmp	r0, #0
   bb33c:	d1de      	bne.n	bb2fc <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb33e:	2002      	movs	r0, #2
}
   bb340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   bb344:	2001      	movs	r0, #1
   bb346:	e7fb      	b.n	bb340 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   bb348:	2003e4fc 	.word	0x2003e4fc

000bb34c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   bb34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb350:	b089      	sub	sp, #36	; 0x24
   bb352:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb354:	237a      	movs	r3, #122	; 0x7a
   bb356:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb35a:	f10d 031f 	add.w	r3, sp, #31
   bb35e:	9303      	str	r3, [sp, #12]
   bb360:	f10d 031e 	add.w	r3, sp, #30
   bb364:	9302      	str	r3, [sp, #8]
   bb366:	4e5d      	ldr	r6, [pc, #372]	; (bb4dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb368:	f10d 031d 	add.w	r3, sp, #29
   bb36c:	9301      	str	r3, [sp, #4]
   bb36e:	ab07      	add	r3, sp, #28
   bb370:	9300      	str	r3, [sp, #0]
{     
   bb372:	4689      	mov	r9, r1
   bb374:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb376:	f10d 031b 	add.w	r3, sp, #27
   bb37a:	f10d 021a 	add.w	r2, sp, #26
   bb37e:	4631      	mov	r1, r6
{     
   bb380:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bb384:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb386:	f000 fae1 	bl	bb94c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb38a:	4604      	mov	r4, r0
   bb38c:	b920      	cbnz	r0, bb398 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bb38e:	2400      	movs	r4, #0
}
   bb390:	4620      	mov	r0, r4
   bb392:	b009      	add	sp, #36	; 0x24
   bb394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bb398:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bb39c:	b373      	cbz	r3, bb3fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bb39e:	7832      	ldrb	r2, [r6, #0]
   bb3a0:	bb62      	cbnz	r2, bb3fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bb3a2:	f1b8 0f00 	cmp.w	r8, #0
   bb3a6:	d003      	beq.n	bb3b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bb3a8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bb3ac:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bb3b0:	f1bb 0f00 	cmp.w	fp, #0
   bb3b4:	d003      	beq.n	bb3be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bb3b6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb3ba:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bb3be:	f1ba 0f00 	cmp.w	sl, #0
   bb3c2:	d003      	beq.n	bb3cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bb3c4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bb3c8:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bb3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb3ce:	b11a      	cbz	r2, bb3d8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bb3d0:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb3d2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bb3d6:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bb3d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bb3da:	b11a      	cbz	r2, bb3e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bb3dc:	9915      	ldr	r1, [sp, #84]	; 0x54
   bb3de:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb3e2:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bb3e4:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb3e6:	493e      	ldr	r1, [pc, #248]	; (bb4e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bb3e8:	3b01      	subs	r3, #1
   bb3ea:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb3ec:	429a      	cmp	r2, r3
		*len = msgLen;
   bb3ee:	bf88      	it	hi
   bb3f0:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb3f2:	783a      	ldrb	r2, [r7, #0]
   bb3f4:	4648      	mov	r0, r9
   bb3f6:	f005 ffcb 	bl	c1390 <memcpy>
	    return true;
   bb3fa:	e7c9      	b.n	bb390 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bb3fc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb400:	2aff      	cmp	r2, #255	; 0xff
   bb402:	d1c4      	bne.n	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bb404:	2b01      	cmp	r3, #1
   bb406:	d9c2      	bls.n	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bb408:	7832      	ldrb	r2, [r6, #0]
   bb40a:	2a01      	cmp	r2, #1
   bb40c:	d1bf      	bne.n	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bb40e:	7a2a      	ldrb	r2, [r5, #8]
   bb410:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bb414:	42a2      	cmp	r2, r4
   bb416:	d0ba      	beq.n	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bb418:	1edf      	subs	r7, r3, #3
   bb41a:	4932      	ldr	r1, [pc, #200]	; (bb4e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb41c:	b2ff      	uxtb	r7, r7
   bb41e:	2300      	movs	r3, #0
   bb420:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb424:	4547      	cmp	r7, r8
   bb426:	d906      	bls.n	bb436 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb428:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb42c:	4282      	cmp	r2, r0
   bb42e:	f103 0301 	add.w	r3, r3, #1
   bb432:	d1f5      	bne.n	bb420 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb434:	e7ab      	b.n	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb436:	f105 0904 	add.w	r9, r5, #4
   bb43a:	4648      	mov	r0, r9
   bb43c:	f7ff fce0 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
   bb440:	2302      	movs	r3, #2
   bb442:	4602      	mov	r2, r0
   bb444:	4621      	mov	r1, r4
   bb446:	4628      	mov	r0, r5
   bb448:	f000 f9ee 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb44c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb450:	b193      	cbz	r3, bb478 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb452:	4c22      	ldr	r4, [pc, #136]	; (bb4dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb454:	1ba3      	subs	r3, r4, r6
   bb456:	b2db      	uxtb	r3, r3
   bb458:	429f      	cmp	r7, r3
   bb45a:	d90c      	bls.n	bb476 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb45c:	78e1      	ldrb	r1, [r4, #3]
   bb45e:	9105      	str	r1, [sp, #20]
   bb460:	4648      	mov	r0, r9
   bb462:	f7ff fccd 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
   bb466:	9905      	ldr	r1, [sp, #20]
   bb468:	4602      	mov	r2, r0
   bb46a:	2302      	movs	r3, #2
   bb46c:	4628      	mov	r0, r5
   bb46e:	f000 f9db 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb472:	3401      	adds	r4, #1
   bb474:	e7ee      	b.n	bb454 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb476:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb478:	682b      	ldr	r3, [r5, #0]
   bb47a:	7872      	ldrb	r2, [r6, #1]
   bb47c:	68db      	ldr	r3, [r3, #12]
   bb47e:	491a      	ldr	r1, [pc, #104]	; (bb4e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb480:	4628      	mov	r0, r5
   bb482:	4798      	blx	r3
   bb484:	4604      	mov	r4, r0
   bb486:	b160      	cbz	r0, bb4a2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb488:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb48a:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb48c:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb48e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb492:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb496:	4911      	ldr	r1, [pc, #68]	; (bb4dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb498:	9400      	str	r4, [sp, #0]
   bb49a:	4628      	mov	r0, r5
   bb49c:	f000 fa4c 	bl	bb938 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb4a0:	e776      	b.n	bb390 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb4a2:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb4a6:	4543      	cmp	r3, r8
   bb4a8:	f67f af71 	bls.w	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb4ac:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb4b0:	2b00      	cmp	r3, #0
   bb4b2:	f43f af6c 	beq.w	bb38e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb4b6:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb4ba:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb4bc:	4907      	ldr	r1, [pc, #28]	; (bb4dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb4be:	443e      	add	r6, r7
		tmpMessageLen++;
   bb4c0:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb4c2:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb4c4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb4c8:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb4ca:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb4cc:	9300      	str	r3, [sp, #0]
   bb4ce:	4628      	mov	r0, r5
   bb4d0:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb4d2:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb4d6:	f000 f9f9 	bl	bb8cc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb4da:	e759      	b.n	bb390 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb4dc:	2003e4fc 	.word	0x2003e4fc
   bb4e0:	2003e4fd 	.word	0x2003e4fd
   bb4e4:	2003e4ff 	.word	0x2003e4ff
   bb4e8:	2003e4fe 	.word	0x2003e4fe

000bb4ec <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb4ee:	b085      	sub	sp, #20
   bb4f0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4f2:	3004      	adds	r0, #4
{
   bb4f4:	460e      	mov	r6, r1
   bb4f6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4f8:	f7ff fc82 	bl	bae00 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb4fc:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4fe:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb500:	4631      	mov	r1, r6
   bb502:	4628      	mov	r0, r5
   bb504:	f000 f94c 	bl	bb7a0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb508:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb50a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb50c:	d001      	beq.n	bb512 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb50e:	2805      	cmp	r0, #5
   bb510:	d11b      	bne.n	bb54a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb512:	7831      	ldrb	r1, [r6, #0]
   bb514:	4628      	mov	r0, r5
   bb516:	f000 f970 	bl	bb7fa <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb51a:	7872      	ldrb	r2, [r6, #1]
   bb51c:	7a2b      	ldrb	r3, [r5, #8]
   bb51e:	429a      	cmp	r2, r3
   bb520:	d013      	beq.n	bb54a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb522:	4c0b      	ldr	r4, [pc, #44]	; (bb550 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb524:	2303      	movs	r3, #3
   bb526:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb528:	7833      	ldrb	r3, [r6, #0]
   bb52a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb52c:	7871      	ldrb	r1, [r6, #1]
   bb52e:	2302      	movs	r3, #2
   bb530:	463a      	mov	r2, r7
   bb532:	4628      	mov	r0, r5
   bb534:	f000 f978 	bl	bb828 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb538:	2300      	movs	r3, #0
   bb53a:	9300      	str	r3, [sp, #0]
   bb53c:	4621      	mov	r1, r4
   bb53e:	7873      	ldrb	r3, [r6, #1]
   bb540:	2202      	movs	r2, #2
   bb542:	4628      	mov	r0, r5
   bb544:	f000 f9f8 	bl	bb938 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb548:	4604      	mov	r4, r0
}
   bb54a:	4620      	mov	r0, r4
   bb54c:	b005      	add	sp, #20
   bb54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb550:	2003e4fc 	.word	0x2003e4fc

000bb554 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb554:	b510      	push	{r4, lr}
   bb556:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb558:	f7ff fc02 	bl	bad60 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb55c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb55e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb560:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb562:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb564:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb566:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb568:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb56a:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb56e:	f104 0011 	add.w	r0, r4, #17
   bb572:	f005 ff35 	bl	c13e0 <memset>
}
   bb576:	4620      	mov	r0, r4
   bb578:	bd10      	pop	{r4, pc}

000bb57a <_ZN18RHReliableDatagram10setTimeoutEt>:

////////////////////////////////////////////////////////////////////
// Public methods
void RHReliableDatagram::setTimeout(uint16_t timeout)
{
    _timeout = timeout;
   bb57a:	81c1      	strh	r1, [r0, #14]
}
   bb57c:	4770      	bx	lr

000bb57e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb57e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb580:	4604      	mov	r4, r0
   bb582:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb584:	f7ff fc30 	bl	bade8 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb588:	4620      	mov	r0, r4
   bb58a:	2200      	movs	r2, #0
   bb58c:	2180      	movs	r1, #128	; 0x80
   bb58e:	f7ff fc2f 	bl	badf0 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb592:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb594:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb596:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb59a:	f10d 010f 	add.w	r1, sp, #15
   bb59e:	2201      	movs	r2, #1
   bb5a0:	4620      	mov	r0, r4
   bb5a2:	f7ff fbf2 	bl	bad8a <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb5a6:	4620      	mov	r0, r4
   bb5a8:	f7ff fbe1 	bl	bad6e <_ZN10RHDatagram14waitPacketSentEv>
}
   bb5ac:	b004      	add	sp, #16
   bb5ae:	bd10      	pop	{r4, pc}

000bb5b0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb5b4:	7b05      	ldrb	r5, [r0, #12]
   bb5b6:	3501      	adds	r5, #1
   bb5b8:	b2ed      	uxtb	r5, r5
{
   bb5ba:	b087      	sub	sp, #28
   bb5bc:	4604      	mov	r4, r0
   bb5be:	4689      	mov	r9, r1
   bb5c0:	4692      	mov	sl, r2
   bb5c2:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb5c4:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb5c6:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb5c8:	7c22      	ldrb	r2, [r4, #16]
   bb5ca:	463b      	mov	r3, r7
   bb5cc:	429a      	cmp	r2, r3
   bb5ce:	f107 0701 	add.w	r7, r7, #1
   bb5d2:	b2ff      	uxtb	r7, r7
   bb5d4:	d36b      	bcc.n	bb6ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb5d6:	4629      	mov	r1, r5
   bb5d8:	4620      	mov	r0, r4
   bb5da:	f7ff fc05 	bl	bade8 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb5de:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb5e0:	bf0d      	iteet	eq
   bb5e2:	22c0      	moveq	r2, #192	; 0xc0
   bb5e4:	2280      	movne	r2, #128	; 0x80
   bb5e6:	2140      	movne	r1, #64	; 0x40
   bb5e8:	2100      	moveq	r1, #0
   bb5ea:	4620      	mov	r0, r4
   bb5ec:	f7ff fc00 	bl	badf0 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb5f0:	4643      	mov	r3, r8
   bb5f2:	4652      	mov	r2, sl
   bb5f4:	4649      	mov	r1, r9
   bb5f6:	4620      	mov	r0, r4
   bb5f8:	f7ff fbc7 	bl	bad8a <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb5fc:	4620      	mov	r0, r4
   bb5fe:	f7ff fbb6 	bl	bad6e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb602:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb606:	d054      	beq.n	bb6b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb608:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb60a:	bf82      	ittt	hi
   bb60c:	68a3      	ldrhi	r3, [r4, #8]
   bb60e:	3301      	addhi	r3, #1
   bb610:	60a3      	strhi	r3, [r4, #8]
   bb612:	f001 fb6b 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb616:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb61a:	4683      	mov	fp, r0
   bb61c:	2000      	movs	r0, #0
   bb61e:	89e6      	ldrh	r6, [r4, #14]
   bb620:	f004 f983 	bl	bf92a <_Z6randomii>
   bb624:	4370      	muls	r0, r6
   bb626:	bf48      	it	mi
   bb628:	30ff      	addmi	r0, #255	; 0xff
   bb62a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb62e:	fa1b f686 	uxtah	r6, fp, r6
   bb632:	f001 fb5b 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
   bb636:	1a30      	subs	r0, r6, r0
   bb638:	2800      	cmp	r0, #0
   bb63a:	ddc5      	ble.n	bb5c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb63c:	b281      	uxth	r1, r0
   bb63e:	2200      	movs	r2, #0
   bb640:	4620      	mov	r0, r4
   bb642:	f7ff fb98 	bl	bad76 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb646:	2800      	cmp	r0, #0
   bb648:	d0f3      	beq.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb64a:	f10d 0317 	add.w	r3, sp, #23
   bb64e:	9302      	str	r3, [sp, #8]
   bb650:	f10d 0316 	add.w	r3, sp, #22
   bb654:	9301      	str	r3, [sp, #4]
   bb656:	2200      	movs	r2, #0
   bb658:	f10d 0315 	add.w	r3, sp, #21
   bb65c:	9300      	str	r3, [sp, #0]
   bb65e:	4611      	mov	r1, r2
   bb660:	ab05      	add	r3, sp, #20
   bb662:	4620      	mov	r0, r4
   bb664:	f7ff fbd8 	bl	bae18 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb668:	2800      	cmp	r0, #0
   bb66a:	d0e2      	beq.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb66c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb670:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb674:	4542      	cmp	r2, r8
   bb676:	d10e      	bne.n	bb696 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb678:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb67c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb680:	458c      	cmp	ip, r1
   bb682:	d108      	bne.n	bb696 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb684:	2b00      	cmp	r3, #0
   bb686:	da08      	bge.n	bb69a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb688:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb68c:	42ab      	cmp	r3, r5
   bb68e:	d1d0      	bne.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb690:	b007      	add	sp, #28
   bb692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb696:	2b00      	cmp	r3, #0
   bb698:	dbcb      	blt.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb69a:	18a1      	adds	r1, r4, r2
   bb69c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb6a0:	7c49      	ldrb	r1, [r1, #17]
   bb6a2:	4299      	cmp	r1, r3
   bb6a4:	d1c5      	bne.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb6a6:	4620      	mov	r0, r4
   bb6a8:	f7ff ff69 	bl	bb57e <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb6ac:	e7c1      	b.n	bb632 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb6ae:	2000      	movs	r0, #0
   bb6b0:	e7ee      	b.n	bb690 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb6b2:	2001      	movs	r0, #1
   bb6b4:	e7ec      	b.n	bb690 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb6b6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb6b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb6ba:	b089      	sub	sp, #36	; 0x24
   bb6bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb6c0:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb6c4:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb6c6:	4604      	mov	r4, r0
   bb6c8:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb6ca:	f7ff fb4c 	bl	bad66 <_ZN10RHDatagram9availableEv>
   bb6ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb6d2:	b920      	cbnz	r0, bb6de <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb6d4:	2500      	movs	r5, #0
}
   bb6d6:	4628      	mov	r0, r5
   bb6d8:	b009      	add	sp, #36	; 0x24
   bb6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb6de:	f10d 031f 	add.w	r3, sp, #31
   bb6e2:	9302      	str	r3, [sp, #8]
   bb6e4:	f10d 031e 	add.w	r3, sp, #30
   bb6e8:	9301      	str	r3, [sp, #4]
   bb6ea:	f10d 031d 	add.w	r3, sp, #29
   bb6ee:	9300      	str	r3, [sp, #0]
   bb6f0:	4620      	mov	r0, r4
   bb6f2:	ab07      	add	r3, sp, #28
   bb6f4:	f7ff fb90 	bl	bae18 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb6f8:	4605      	mov	r5, r0
   bb6fa:	2800      	cmp	r0, #0
   bb6fc:	d0ea      	beq.n	bb6d4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb6fe:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb702:	2b00      	cmp	r3, #0
   bb704:	dbe6      	blt.n	bb6d4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb706:	7922      	ldrb	r2, [r4, #4]
   bb708:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb70c:	429a      	cmp	r2, r3
   bb70e:	d106      	bne.n	bb71e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb710:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb714:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb718:	4620      	mov	r0, r4
   bb71a:	f7ff ff30 	bl	bb57e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb71e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb722:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb726:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb72a:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb72e:	440c      	add	r4, r1
   bb730:	d002      	beq.n	bb738 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb732:	7c60      	ldrb	r0, [r4, #17]
   bb734:	4298      	cmp	r0, r3
   bb736:	d0cd      	beq.n	bb6d4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb738:	b106      	cbz	r6, bb73c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb73a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb73c:	f1b9 0f00 	cmp.w	r9, #0
   bb740:	d003      	beq.n	bb74a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb742:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb746:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb74a:	f1b8 0f00 	cmp.w	r8, #0
   bb74e:	d001      	beq.n	bb754 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb750:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb754:	b107      	cbz	r7, bb758 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb756:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb758:	7463      	strb	r3, [r4, #17]
		return true;
   bb75a:	e7bc      	b.n	bb6d6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb75c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb75c:	4770      	bx	lr

000bb75e <_ZN8RHRouter4initEv>:
{
   bb75e:	b510      	push	{r4, lr}
   bb760:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb762:	3004      	adds	r0, #4
   bb764:	f7ff fb32 	bl	badcc <_ZN10RHDatagram4initEv>
    if (ret)
   bb768:	b110      	cbz	r0, bb770 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb76a:	231e      	movs	r3, #30
   bb76c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb770:	bd10      	pop	{r4, pc}

000bb772 <_ZN8RHRouter10getRouteToEh>:
{
   bb772:	b510      	push	{r4, lr}
   bb774:	4602      	mov	r2, r0
   bb776:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb778:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb77c:	428c      	cmp	r4, r1
   bb77e:	d108      	bne.n	bb792 <_ZN8RHRouter10getRouteToEh+0x20>
   bb780:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb784:	b12c      	cbz	r4, bb792 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb78a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb78e:	4418      	add	r0, r3
}
   bb790:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb792:	3301      	adds	r3, #1
   bb794:	2b32      	cmp	r3, #50	; 0x32
   bb796:	f102 0203 	add.w	r2, r2, #3
   bb79a:	d1ed      	bne.n	bb778 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb79c:	2000      	movs	r0, #0
   bb79e:	e7f7      	b.n	bb790 <_ZN8RHRouter10getRouteToEh+0x1e>

000bb7a0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb7a2:	780b      	ldrb	r3, [r1, #0]
   bb7a4:	2bff      	cmp	r3, #255	; 0xff
{
   bb7a6:	4605      	mov	r5, r0
   bb7a8:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb7aa:	d006      	beq.n	bb7ba <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb7ac:	4619      	mov	r1, r3
   bb7ae:	9201      	str	r2, [sp, #4]
   bb7b0:	f7ff ffdf 	bl	bb772 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb7b4:	b158      	cbz	r0, bb7ce <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb7b6:	7843      	ldrb	r3, [r0, #1]
   bb7b8:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb7ba:	4621      	mov	r1, r4
   bb7bc:	1d28      	adds	r0, r5, #4
   bb7be:	f7ff fef7 	bl	bb5b0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb7c2:	2800      	cmp	r0, #0
   bb7c4:	bf14      	ite	ne
   bb7c6:	2000      	movne	r0, #0
   bb7c8:	2005      	moveq	r0, #5
}
   bb7ca:	b003      	add	sp, #12
   bb7cc:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb7ce:	2002      	movs	r0, #2
   bb7d0:	e7fb      	b.n	bb7ca <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb7d2 <_ZN8RHRouter11deleteRouteEh>:
{
   bb7d2:	b510      	push	{r4, lr}
   bb7d4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb7d8:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb7da:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb7de:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb7e2:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb7e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb7ea:	4421      	add	r1, r4
   bb7ec:	4420      	add	r0, r4
   bb7ee:	f005 fdcf 	bl	c1390 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb7f2:	2300      	movs	r3, #0
   bb7f4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb7f8:	bd10      	pop	{r4, pc}

000bb7fa <_ZN8RHRouter13deleteRouteToEh>:
{
   bb7fa:	b538      	push	{r3, r4, r5, lr}
   bb7fc:	460a      	mov	r2, r1
   bb7fe:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb800:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb804:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb808:	b2d9      	uxtb	r1, r3
   bb80a:	5d65      	ldrb	r5, [r4, r5]
   bb80c:	4295      	cmp	r5, r2
   bb80e:	d103      	bne.n	bb818 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb810:	f7ff ffdf 	bl	bb7d2 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb814:	2001      	movs	r0, #1
}
   bb816:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb818:	3301      	adds	r3, #1
   bb81a:	2b32      	cmp	r3, #50	; 0x32
   bb81c:	d1f2      	bne.n	bb804 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb81e:	2000      	movs	r0, #0
   bb820:	e7f9      	b.n	bb816 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb822 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb822:	2100      	movs	r1, #0
   bb824:	f7ff bfd5 	b.w	bb7d2 <_ZN8RHRouter11deleteRouteEh>

000bb828 <_ZN8RHRouter10addRouteToEhhh>:
{
   bb828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb82a:	4616      	mov	r6, r2
   bb82c:	461f      	mov	r7, r3
   bb82e:	4604      	mov	r4, r0
   bb830:	460d      	mov	r5, r1
   bb832:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb834:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb838:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb83c:	5c11      	ldrb	r1, [r2, r0]
   bb83e:	42a9      	cmp	r1, r5
   bb840:	d105      	bne.n	bb84e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb842:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb844:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb848:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb84e:	3301      	adds	r3, #1
   bb850:	2b32      	cmp	r3, #50	; 0x32
   bb852:	d1f1      	bne.n	bb838 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb854:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb856:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb85a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb85e:	5c11      	ldrb	r1, [r2, r0]
   bb860:	b919      	cbnz	r1, bb86a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb862:	4420      	add	r0, r4
   bb864:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb868:	e7ec      	b.n	bb844 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb86a:	3301      	adds	r3, #1
   bb86c:	2b32      	cmp	r3, #50	; 0x32
   bb86e:	d1f4      	bne.n	bb85a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb870:	4620      	mov	r0, r4
   bb872:	f7ff ffd6 	bl	bb822 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb876:	4620      	mov	r0, r4
   bb878:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb87c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb880:	b92a      	cbnz	r2, bb88e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb882:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb886:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb88a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb88e:	3003      	adds	r0, #3
   bb890:	4298      	cmp	r0, r3
   bb892:	d1f3      	bne.n	bb87c <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb894:	e7da      	b.n	bb84c <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb896 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb896:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb89a:	2200      	movs	r2, #0
   bb89c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb8a0:	3003      	adds	r0, #3
   bb8a2:	4298      	cmp	r0, r3
   bb8a4:	d1fa      	bne.n	bb89c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb8a6:	4770      	bx	lr

000bb8a8 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb8a8:	b510      	push	{r4, lr}
   bb8aa:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb8ac:	3004      	adds	r0, #4
   bb8ae:	f7ff fe51 	bl	bb554 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb8b2:	4b05      	ldr	r3, [pc, #20]	; (bb8c8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb8b4:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb8b6:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb8ba:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb8bc:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb8c0:	f7ff ffe9 	bl	bb896 <_ZN8RHRouter17clearRoutingTableEv>
}
   bb8c4:	4620      	mov	r0, r4
   bb8c6:	bd10      	pop	{r4, pc}
   bb8c8:	000c51fc 	.word	0x000c51fc

000bb8cc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb8cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb8d0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb8d2:	6840      	ldr	r0, [r0, #4]
{
   bb8d4:	9101      	str	r1, [sp, #4]
   bb8d6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb8d8:	6803      	ldr	r3, [r0, #0]
{
   bb8da:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb8de:	699b      	ldr	r3, [r3, #24]
{
   bb8e0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb8e4:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb8e6:	4798      	blx	r3
   bb8e8:	f106 0805 	add.w	r8, r6, #5
   bb8ec:	4580      	cmp	r8, r0
   bb8ee:	d81c      	bhi.n	bb92a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb8f0:	4d10      	ldr	r5, [pc, #64]	; (bb934 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb8f2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb8f4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb8f8:	2300      	movs	r3, #0
   bb8fa:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb8fc:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb900:	70eb      	strb	r3, [r5, #3]
   bb902:	1c5a      	adds	r2, r3, #1
   bb904:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb908:	1d68      	adds	r0, r5, #5
   bb90a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb90c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb90e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb912:	f005 fd3d 	bl	c1390 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb916:	6823      	ldr	r3, [r4, #0]
   bb918:	685b      	ldr	r3, [r3, #4]
   bb91a:	fa5f f288 	uxtb.w	r2, r8
   bb91e:	4629      	mov	r1, r5
   bb920:	4620      	mov	r0, r4
}
   bb922:	b002      	add	sp, #8
   bb924:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb928:	4718      	bx	r3
}
   bb92a:	2001      	movs	r0, #1
   bb92c:	b002      	add	sp, #8
   bb92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb932:	bf00      	nop
   bb934:	2003e576 	.word	0x2003e576

000bb938 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb938:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb93a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb93e:	9401      	str	r4, [sp, #4]
   bb940:	7a04      	ldrb	r4, [r0, #8]
   bb942:	9400      	str	r4, [sp, #0]
   bb944:	f7ff ffc2 	bl	bb8cc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb948:	b002      	add	sp, #8
   bb94a:	bd10      	pop	{r4, pc}

000bb94c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb950:	b087      	sub	sp, #28
   bb952:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb954:	237f      	movs	r3, #127	; 0x7f
   bb956:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb95a:	f10d 0317 	add.w	r3, sp, #23
   bb95e:	9302      	str	r3, [sp, #8]
   bb960:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb964:	f10d 0316 	add.w	r3, sp, #22
   bb968:	9301      	str	r3, [sp, #4]
   bb96a:	f10d 0315 	add.w	r3, sp, #21
   bb96e:	9300      	str	r3, [sp, #0]
{  
   bb970:	4604      	mov	r4, r0
   bb972:	4688      	mov	r8, r1
   bb974:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb976:	ab05      	add	r3, sp, #20
   bb978:	f10d 0213 	add.w	r2, sp, #19
   bb97c:	4649      	mov	r1, r9
   bb97e:	3004      	adds	r0, #4
{  
   bb980:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb984:	f7ff fe97 	bl	bb6b6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb988:	4605      	mov	r5, r0
   bb98a:	b908      	cbnz	r0, bb990 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb98c:	2500      	movs	r5, #0
   bb98e:	e038      	b.n	bba02 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb990:	6823      	ldr	r3, [r4, #0]
   bb992:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb996:	681b      	ldr	r3, [r3, #0]
   bb998:	4649      	mov	r1, r9
   bb99a:	4620      	mov	r0, r4
   bb99c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb99e:	f899 3000 	ldrb.w	r3, [r9]
   bb9a2:	7a22      	ldrb	r2, [r4, #8]
   bb9a4:	429a      	cmp	r2, r3
   bb9a6:	d001      	beq.n	bb9ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb9a8:	2bff      	cmp	r3, #255	; 0xff
   bb9aa:	d12e      	bne.n	bba0a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb9ac:	b117      	cbz	r7, bb9b4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb9ae:	4b21      	ldr	r3, [pc, #132]	; (bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb9b0:	785b      	ldrb	r3, [r3, #1]
   bb9b2:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb9b4:	f1bb 0f00 	cmp.w	fp, #0
   bb9b8:	d003      	beq.n	bb9c2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb9ba:	4b1e      	ldr	r3, [pc, #120]	; (bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb9bc:	781b      	ldrb	r3, [r3, #0]
   bb9be:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb9c2:	f1ba 0f00 	cmp.w	sl, #0
   bb9c6:	d003      	beq.n	bb9d0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb9c8:	4b1a      	ldr	r3, [pc, #104]	; (bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb9ca:	78db      	ldrb	r3, [r3, #3]
   bb9cc:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb9d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb9d2:	b11b      	cbz	r3, bb9dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb9d4:	4b17      	ldr	r3, [pc, #92]	; (bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb9d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb9d8:	791b      	ldrb	r3, [r3, #4]
   bb9da:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb9dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb9de:	b11b      	cbz	r3, bb9e8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb9e0:	4b14      	ldr	r3, [pc, #80]	; (bba34 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb9e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb9e4:	789b      	ldrb	r3, [r3, #2]
   bb9e6:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb9e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb9ec:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb9ee:	4912      	ldr	r1, [pc, #72]	; (bba38 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb9f0:	3b05      	subs	r3, #5
   bb9f2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb9f4:	429a      	cmp	r2, r3
		*len = msgLen;
   bb9f6:	bf88      	it	hi
   bb9f8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb9fa:	7832      	ldrb	r2, [r6, #0]
   bb9fc:	4640      	mov	r0, r8
   bb9fe:	f005 fcc7 	bl	c1390 <memcpy>
}
   bba02:	4628      	mov	r0, r5
   bba04:	b007      	add	sp, #28
   bba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bba0a:	f899 3002 	ldrb.w	r3, [r9, #2]
   bba0e:	1c5a      	adds	r2, r3, #1
   bba10:	f889 2002 	strb.w	r2, [r9, #2]
   bba14:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bba18:	429a      	cmp	r2, r3
   bba1a:	d9b7      	bls.n	bb98c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bba1c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bba20:	2b00      	cmp	r3, #0
   bba22:	d0b3      	beq.n	bb98c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bba24:	6823      	ldr	r3, [r4, #0]
   bba26:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bba2a:	685b      	ldr	r3, [r3, #4]
   bba2c:	4649      	mov	r1, r9
   bba2e:	4620      	mov	r0, r4
   bba30:	4798      	blx	r3
   bba32:	e7ab      	b.n	bb98c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bba34:	2003e576 	.word	0x2003e576
   bba38:	2003e57b 	.word	0x2003e57b

000bba3c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bba3c:	b510      	push	{r4, lr}
   bba3e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bba40:	6a00      	ldr	r0, [r0, #32]
   bba42:	6803      	ldr	r3, [r0, #0]
   bba44:	68db      	ldr	r3, [r3, #12]
   bba46:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bba48:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bba4c:	28ff      	cmp	r0, #255	; 0xff
   bba4e:	d002      	beq.n	bba56 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bba50:	2101      	movs	r1, #1
   bba52:	f004 fe01 	bl	c0658 <pinMode>

    deselectSlave();
   bba56:	6823      	ldr	r3, [r4, #0]
   bba58:	4620      	mov	r0, r4
   bba5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bba5c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bba5e:	2064      	movs	r0, #100	; 0x64
   bba60:	f001 fd60 	bl	bd524 <delay>
#endif
    
    return true;
}
   bba64:	2001      	movs	r0, #1
   bba66:	bd10      	pop	{r4, pc}

000bba68 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bba68:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bba6c:	2100      	movs	r1, #0
   bba6e:	f004 be04 	b.w	c067a <digitalWrite>

000bba72 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bba72:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bba76:	2101      	movs	r1, #1
   bba78:	f004 bdff 	b.w	c067a <digitalWrite>

000bba7c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bba7c:	b570      	push	{r4, r5, r6, lr}
   bba7e:	4604      	mov	r4, r0
   bba80:	460d      	mov	r5, r1
   bba82:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bba84:	f7ff fa7c 	bl	baf80 <_ZN15RHGenericDriverC1Ev>
   bba88:	4b03      	ldr	r3, [pc, #12]	; (bba98 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bba8a:	6023      	str	r3, [r4, #0]
   bba8c:	6226      	str	r6, [r4, #32]
   bba8e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bba92:	4620      	mov	r0, r4
   bba94:	bd70      	pop	{r4, r5, r6, pc}
   bba96:	bf00      	nop
   bba98:	000c520c 	.word	0x000c520c

000bba9c <_ZN11RHSPIDriver7spiReadEh>:
{
   bba9c:	b538      	push	{r3, r4, r5, lr}
   bba9e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbaa0:	6a00      	ldr	r0, [r0, #32]
   bbaa2:	6803      	ldr	r3, [r0, #0]
   bbaa4:	6a1b      	ldr	r3, [r3, #32]
{
   bbaa6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bbaa8:	4798      	blx	r3
    selectSlave();
   bbaaa:	6823      	ldr	r3, [r4, #0]
   bbaac:	4620      	mov	r0, r4
   bbaae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbab0:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bbab2:	6a20      	ldr	r0, [r4, #32]
   bbab4:	6803      	ldr	r3, [r0, #0]
   bbab6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bbaba:	681b      	ldr	r3, [r3, #0]
   bbabc:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bbabe:	6a20      	ldr	r0, [r4, #32]
   bbac0:	6803      	ldr	r3, [r0, #0]
   bbac2:	2100      	movs	r1, #0
   bbac4:	681b      	ldr	r3, [r3, #0]
   bbac6:	4798      	blx	r3
    deselectSlave();
   bbac8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bbaca:	4605      	mov	r5, r0
    deselectSlave();
   bbacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbace:	4620      	mov	r0, r4
   bbad0:	4798      	blx	r3
    _spi.endTransaction();
   bbad2:	6a20      	ldr	r0, [r4, #32]
   bbad4:	6803      	ldr	r3, [r0, #0]
   bbad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbad8:	4798      	blx	r3
}
   bbada:	4628      	mov	r0, r5
   bbadc:	bd38      	pop	{r3, r4, r5, pc}

000bbade <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bbade:	b570      	push	{r4, r5, r6, lr}
   bbae0:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbae2:	6a00      	ldr	r0, [r0, #32]
   bbae4:	6803      	ldr	r3, [r0, #0]
   bbae6:	6a1b      	ldr	r3, [r3, #32]
{
   bbae8:	4616      	mov	r6, r2
   bbaea:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bbaec:	4798      	blx	r3
    selectSlave();
   bbaee:	6823      	ldr	r3, [r4, #0]
   bbaf0:	4620      	mov	r0, r4
   bbaf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbaf4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bbaf6:	6a20      	ldr	r0, [r4, #32]
   bbaf8:	6803      	ldr	r3, [r0, #0]
   bbafa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bbafe:	681b      	ldr	r3, [r3, #0]
   bbb00:	4798      	blx	r3
   bbb02:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bbb04:	6a20      	ldr	r0, [r4, #32]
   bbb06:	6803      	ldr	r3, [r0, #0]
   bbb08:	4631      	mov	r1, r6
   bbb0a:	681b      	ldr	r3, [r3, #0]
   bbb0c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bbb0e:	2001      	movs	r0, #1
   bbb10:	f001 f8e4 	bl	bccdc <HAL_Delay_Microseconds>
    deselectSlave();
   bbb14:	6823      	ldr	r3, [r4, #0]
   bbb16:	4620      	mov	r0, r4
   bbb18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbb1a:	4798      	blx	r3
    _spi.endTransaction();
   bbb1c:	6a20      	ldr	r0, [r4, #32]
   bbb1e:	6803      	ldr	r3, [r0, #0]
   bbb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbb22:	4798      	blx	r3
}
   bbb24:	4628      	mov	r0, r5
   bbb26:	bd70      	pop	{r4, r5, r6, pc}

000bbb28 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bbb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbb2a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbb2c:	6a00      	ldr	r0, [r0, #32]
{
   bbb2e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bbb30:	6803      	ldr	r3, [r0, #0]
   bbb32:	6a1b      	ldr	r3, [r3, #32]
{
   bbb34:	460f      	mov	r7, r1
   bbb36:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bbb38:	4798      	blx	r3
    selectSlave();
   bbb3a:	6823      	ldr	r3, [r4, #0]
   bbb3c:	4620      	mov	r0, r4
   bbb3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbb40:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bbb42:	6a20      	ldr	r0, [r4, #32]
   bbb44:	6803      	ldr	r3, [r0, #0]
   bbb46:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bbb4a:	681b      	ldr	r3, [r3, #0]
   bbb4c:	4798      	blx	r3
   bbb4e:	442e      	add	r6, r5
   bbb50:	4607      	mov	r7, r0
    while (len--)
   bbb52:	42b5      	cmp	r5, r6
   bbb54:	d007      	beq.n	bbb66 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bbb56:	6a20      	ldr	r0, [r4, #32]
   bbb58:	6803      	ldr	r3, [r0, #0]
   bbb5a:	2100      	movs	r1, #0
   bbb5c:	681b      	ldr	r3, [r3, #0]
   bbb5e:	4798      	blx	r3
   bbb60:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bbb64:	e7f5      	b.n	bbb52 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bbb66:	6823      	ldr	r3, [r4, #0]
   bbb68:	4620      	mov	r0, r4
   bbb6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbb6c:	4798      	blx	r3
    _spi.endTransaction();
   bbb6e:	6a20      	ldr	r0, [r4, #32]
   bbb70:	6803      	ldr	r3, [r0, #0]
   bbb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbb74:	4798      	blx	r3
}
   bbb76:	4638      	mov	r0, r7
   bbb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbb7a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bbb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbb7c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbb7e:	6a00      	ldr	r0, [r0, #32]
{
   bbb80:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bbb82:	6803      	ldr	r3, [r0, #0]
   bbb84:	6a1b      	ldr	r3, [r3, #32]
{
   bbb86:	460f      	mov	r7, r1
   bbb88:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bbb8a:	4798      	blx	r3
    selectSlave();
   bbb8c:	6823      	ldr	r3, [r4, #0]
   bbb8e:	4620      	mov	r0, r4
   bbb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbb92:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bbb94:	6a20      	ldr	r0, [r4, #32]
   bbb96:	6803      	ldr	r3, [r0, #0]
   bbb98:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bbb9c:	681b      	ldr	r3, [r3, #0]
   bbb9e:	4798      	blx	r3
   bbba0:	442e      	add	r6, r5
   bbba2:	4607      	mov	r7, r0
    while (len--)
   bbba4:	42b5      	cmp	r5, r6
   bbba6:	d006      	beq.n	bbbb6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bbba8:	6a20      	ldr	r0, [r4, #32]
   bbbaa:	f815 1b01 	ldrb.w	r1, [r5], #1
   bbbae:	6803      	ldr	r3, [r0, #0]
   bbbb0:	681b      	ldr	r3, [r3, #0]
   bbbb2:	4798      	blx	r3
    while (len--)
   bbbb4:	e7f6      	b.n	bbba4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bbbb6:	6823      	ldr	r3, [r4, #0]
   bbbb8:	4620      	mov	r0, r4
   bbbba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbbbc:	4798      	blx	r3
    _spi.endTransaction();
   bbbbe:	6a20      	ldr	r0, [r4, #32]
   bbbc0:	6803      	ldr	r3, [r0, #0]
   bbbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbbc4:	4798      	blx	r3
}
   bbbc6:	4638      	mov	r0, r7
   bbbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbbca <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bbbca:	6a00      	ldr	r0, [r0, #32]
   bbbcc:	6803      	ldr	r3, [r0, #0]
   bbbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbbd0:	4718      	bx	r3

000bbbd2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bbbd2:	2001      	movs	r0, #1
   bbbd4:	4770      	bx	lr

000bbbd6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bbbd6:	20fb      	movs	r0, #251	; 0xfb
   bbbd8:	4770      	bx	lr

000bbbda <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bbbda:	4770      	bx	lr

000bbbdc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bbbdc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bbbde:	7903      	ldrb	r3, [r0, #4]
   bbbe0:	2b05      	cmp	r3, #5
{
   bbbe2:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bbbe4:	d010      	beq.n	bbc08 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bbbe6:	6803      	ldr	r3, [r0, #0]
   bbbe8:	2105      	movs	r1, #5
   bbbea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbbee:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bbbf0:	2207      	movs	r2, #7
   bbbf2:	2101      	movs	r1, #1
   bbbf4:	4620      	mov	r0, r4
   bbbf6:	f7ff ff72 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bbbfa:	2280      	movs	r2, #128	; 0x80
   bbbfc:	2140      	movs	r1, #64	; 0x40
   bbbfe:	4620      	mov	r0, r4
   bbc00:	f7ff ff6d 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bbc04:	2305      	movs	r3, #5
   bbc06:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bbc08:	7923      	ldrb	r3, [r4, #4]
   bbc0a:	2b05      	cmp	r3, #5
   bbc0c:	d0fc      	beq.n	bbc08 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bbc0e:	7e20      	ldrb	r0, [r4, #24]
}
   bbc10:	bd10      	pop	{r4, pc}

000bbc12 <_ZN7RH_RF95D0Ev>:
   bbc12:	b510      	push	{r4, lr}
   bbc14:	f44f 7198 	mov.w	r1, #304	; 0x130
   bbc18:	4604      	mov	r4, r0
   bbc1a:	f7f8 fa40 	bl	b409e <_ZdlPvj>
   bbc1e:	4620      	mov	r0, r4
   bbc20:	bd10      	pop	{r4, pc}

000bbc22 <_ZN7RH_RF955sleepEv>:
{
   bbc22:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bbc24:	7903      	ldrb	r3, [r0, #4]
   bbc26:	2b01      	cmp	r3, #1
{
   bbc28:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bbc2a:	d00b      	beq.n	bbc44 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bbc2c:	6803      	ldr	r3, [r0, #0]
   bbc2e:	2101      	movs	r1, #1
   bbc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbc34:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bbc36:	2200      	movs	r2, #0
   bbc38:	2101      	movs	r1, #1
   bbc3a:	4620      	mov	r0, r4
   bbc3c:	f7ff ff4f 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bbc40:	2301      	movs	r3, #1
   bbc42:	7123      	strb	r3, [r4, #4]
}
   bbc44:	2001      	movs	r0, #1
   bbc46:	bd10      	pop	{r4, pc}

000bbc48 <_ZN7RH_RF954recvEPhS0_>:
{
   bbc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bbc4a:	6803      	ldr	r3, [r0, #0]
   bbc4c:	68db      	ldr	r3, [r3, #12]
{
   bbc4e:	4604      	mov	r4, r0
   bbc50:	460f      	mov	r7, r1
   bbc52:	4615      	mov	r5, r2
    if (!available())
   bbc54:	4798      	blx	r3
   bbc56:	4606      	mov	r6, r0
   bbc58:	b1b0      	cbz	r0, bbc88 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bbc5a:	b187      	cbz	r7, bbc7e <_ZN7RH_RF954recvEPhS0_+0x36>
   bbc5c:	b17d      	cbz	r5, bbc7e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bbc5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bbc62:	782a      	ldrb	r2, [r5, #0]
   bbc64:	3b03      	subs	r3, #3
   bbc66:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bbc68:	bfde      	ittt	le
   bbc6a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bbc6e:	3b04      	suble	r3, #4
   bbc70:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bbc72:	782a      	ldrb	r2, [r5, #0]
   bbc74:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bbc78:	4638      	mov	r0, r7
   bbc7a:	f005 fb89 	bl	c1390 <memcpy>
    _rxBufValid = false;
   bbc7e:	2300      	movs	r3, #0
   bbc80:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbc84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bbc88:	4630      	mov	r0, r6
   bbc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc8c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bbc8c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bbc8e:	b538      	push	{r3, r4, r5, lr}
   bbc90:	4605      	mov	r5, r0
   bbc92:	460c      	mov	r4, r1
	if (power > 20)
   bbc94:	dc14      	bgt.n	bbcc0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bbc96:	2901      	cmp	r1, #1
   bbc98:	dd14      	ble.n	bbcc4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bbc9a:	2911      	cmp	r1, #17
   bbc9c:	dd13      	ble.n	bbcc6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bbc9e:	2207      	movs	r2, #7
   bbca0:	214d      	movs	r1, #77	; 0x4d
   bbca2:	4628      	mov	r0, r5
   bbca4:	f7ff ff1b 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bbca8:	3c03      	subs	r4, #3
   bbcaa:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbcac:	1ea2      	subs	r2, r4, #2
   bbcae:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bbcb2:	4628      	mov	r0, r5
   bbcb4:	b2d2      	uxtb	r2, r2
}
   bbcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbcba:	2109      	movs	r1, #9
   bbcbc:	f7ff bf0f 	b.w	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bbcc0:	2414      	movs	r4, #20
   bbcc2:	e7ec      	b.n	bbc9e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bbcc4:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbcc6:	2204      	movs	r2, #4
   bbcc8:	214d      	movs	r1, #77	; 0x4d
   bbcca:	4628      	mov	r0, r5
   bbccc:	f7ff ff07 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
   bbcd0:	e7ec      	b.n	bbcac <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bbcd4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bbcd4:	b538      	push	{r3, r4, r5, lr}
   bbcd6:	4604      	mov	r4, r0
   bbcd8:	4615      	mov	r5, r2
    _rxBufValid(0)
   bbcda:	461a      	mov	r2, r3
   bbcdc:	f7ff fece 	bl	bba7c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bbce0:	4b09      	ldr	r3, [pc, #36]	; (bbd08 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bbce2:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bbce4:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bbce6:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bbce8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bbcec:	2201      	movs	r2, #1
    _rxBufValid(0)
   bbcee:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbcf2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bbcf6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bbcfa:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bbcfe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bbd02:	4620      	mov	r0, r4
   bbd04:	bd38      	pop	{r3, r4, r5, pc}
   bbd06:	bf00      	nop
   bbd08:	000c52a4 	.word	0x000c52a4

000bbd0c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bbd0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bbd10:	2b03      	cmp	r3, #3
   bbd12:	d91b      	bls.n	bbd4c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bbd14:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bbd18:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bbd1a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bbd1e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bbd20:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bbd24:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bbd26:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bbd2a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bbd2c:	7983      	ldrb	r3, [r0, #6]
   bbd2e:	b933      	cbnz	r3, bbd3e <_ZN7RH_RF9513validateRxBufEv+0x32>
   bbd30:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bbd32:	7942      	ldrb	r2, [r0, #5]
   bbd34:	429a      	cmp	r2, r3
   bbd36:	d002      	beq.n	bbd3e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bbd38:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bbd3a:	2bff      	cmp	r3, #255	; 0xff
   bbd3c:	d106      	bne.n	bbd4c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bbd3e:	8a83      	ldrh	r3, [r0, #20]
   bbd40:	3301      	adds	r3, #1
   bbd42:	b29b      	uxth	r3, r3
   bbd44:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bbd46:	2301      	movs	r3, #1
   bbd48:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bbd4c:	4770      	bx	lr
	...

000bbd50 <_ZN7RH_RF9512setFrequencyEf>:
{
   bbd50:	b538      	push	{r3, r4, r5, lr}
   bbd52:	4604      	mov	r4, r0
   bbd54:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd58:	ee10 0a10 	vmov	r0, s0
{
   bbd5c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd60:	f004 ff06 	bl	c0b70 <__aeabi_f2d>
   bbd64:	a317      	add	r3, pc, #92	; (adr r3, bbdc4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bbd66:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd6a:	f004 ff59 	bl	c0c20 <__aeabi_dmul>
   bbd6e:	a317      	add	r3, pc, #92	; (adr r3, bbdcc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bbd70:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd74:	f005 f87e 	bl	c0e74 <__aeabi_ddiv>
   bbd78:	f005 fa2a 	bl	c11d0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbd7c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd7e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbd80:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bbd84:	4620      	mov	r0, r4
   bbd86:	f7ff feaa 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bbd8a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bbd8e:	2107      	movs	r1, #7
   bbd90:	4620      	mov	r0, r4
   bbd92:	f7ff fea4 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bbd96:	b2ea      	uxtb	r2, r5
   bbd98:	2108      	movs	r1, #8
   bbd9a:	4620      	mov	r0, r4
   bbd9c:	f7ff fe9f 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bbda0:	eddf 7a07 	vldr	s15, [pc, #28]	; bbdc0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bbda4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bbda8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bbdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbdb0:	bfac      	ite	ge
   bbdb2:	2301      	movge	r3, #1
   bbdb4:	2300      	movlt	r3, #0
}
   bbdb6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bbdb8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bbdbc:	bd38      	pop	{r3, r4, r5, pc}
   bbdbe:	bf00      	nop
   bbdc0:	4442c000 	.word	0x4442c000
   bbdc4:	00000000 	.word	0x00000000
   bbdc8:	412e8480 	.word	0x412e8480
   bbdcc:	00000000 	.word	0x00000000
   bbdd0:	404e8480 	.word	0x404e8480

000bbdd4 <_ZN7RH_RF9511setModeIdleEv>:
{
   bbdd4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bbdd6:	7903      	ldrb	r3, [r0, #4]
   bbdd8:	2b02      	cmp	r3, #2
{
   bbdda:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bbddc:	d00b      	beq.n	bbdf6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bbdde:	6803      	ldr	r3, [r0, #0]
   bbde0:	2102      	movs	r1, #2
   bbde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbde6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bbde8:	2201      	movs	r2, #1
   bbdea:	4611      	mov	r1, r2
   bbdec:	4620      	mov	r0, r4
   bbdee:	f7ff fe76 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bbdf2:	2302      	movs	r3, #2
   bbdf4:	7123      	strb	r3, [r4, #4]
}
   bbdf6:	bd10      	pop	{r4, pc}

000bbdf8 <_ZN7RH_RF9515handleInterruptEv>:
{
   bbdf8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbdfa:	2112      	movs	r1, #18
{
   bbdfc:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbdfe:	f7ff fe4d 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbe02:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbe04:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbe06:	4620      	mov	r0, r4
   bbe08:	f7ff fe48 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe0c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbe0e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe10:	2112      	movs	r1, #18
   bbe12:	4620      	mov	r0, r4
   bbe14:	f7ff fe63 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bbe18:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bbe1a:	2b04      	cmp	r3, #4
   bbe1c:	d107      	bne.n	bbe2e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbe1e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bbe22:	d117      	bne.n	bbe54 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bbe24:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bbe28:	b10b      	cbz	r3, bbe2e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbe2a:	0670      	lsls	r0, r6, #25
   bbe2c:	d512      	bpl.n	bbe54 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bbe2e:	7923      	ldrb	r3, [r4, #4]
   bbe30:	2b04      	cmp	r3, #4
   bbe32:	d101      	bne.n	bbe38 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bbe34:	0669      	lsls	r1, r5, #25
   bbe36:	d422      	bmi.n	bbe7e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bbe38:	7923      	ldrb	r3, [r4, #4]
   bbe3a:	2b03      	cmp	r3, #3
   bbe3c:	d101      	bne.n	bbe42 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bbe3e:	072a      	lsls	r2, r5, #28
   bbe40:	d468      	bmi.n	bbf14 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bbe42:	7923      	ldrb	r3, [r4, #4]
   bbe44:	2b05      	cmp	r3, #5
   bbe46:	d10e      	bne.n	bbe66 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bbe48:	076b      	lsls	r3, r5, #29
   bbe4a:	d50c      	bpl.n	bbe66 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bbe4c:	f005 0501 	and.w	r5, r5, #1
   bbe50:	7625      	strb	r5, [r4, #24]
   bbe52:	e063      	b.n	bbf1c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bbe54:	8a63      	ldrh	r3, [r4, #18]
   bbe56:	3301      	adds	r3, #1
   bbe58:	b29b      	uxth	r3, r3
   bbe5a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bbe5c:	2300      	movs	r3, #0
   bbe5e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbe62:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe66:	22ff      	movs	r2, #255	; 0xff
   bbe68:	2112      	movs	r1, #18
   bbe6a:	4620      	mov	r0, r4
   bbe6c:	f7ff fe37 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe70:	4620      	mov	r0, r4
   bbe72:	22ff      	movs	r2, #255	; 0xff
}
   bbe74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe78:	2112      	movs	r1, #18
   bbe7a:	f7ff be30 	b.w	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbe7e:	2113      	movs	r1, #19
   bbe80:	4620      	mov	r0, r4
   bbe82:	f7ff fe0b 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbe86:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbe88:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbe8a:	4620      	mov	r0, r4
   bbe8c:	f7ff fe06 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
   bbe90:	210d      	movs	r1, #13
   bbe92:	4602      	mov	r2, r0
   bbe94:	4620      	mov	r0, r4
   bbe96:	f7ff fe22 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bbe9a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bbe9e:	462b      	mov	r3, r5
   bbea0:	2100      	movs	r1, #0
   bbea2:	4620      	mov	r0, r4
   bbea4:	f7ff fe40 	bl	bbb28 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbea8:	2119      	movs	r1, #25
	_bufLen = len;
   bbeaa:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbeae:	4620      	mov	r0, r4
   bbeb0:	f7ff fdf4 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
   bbeb4:	b240      	sxtb	r0, r0
   bbeb6:	2800      	cmp	r0, #0
   bbeb8:	bfb8      	it	lt
   bbeba:	3003      	addlt	r0, #3
   bbebc:	1080      	asrs	r0, r0, #2
   bbebe:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbec2:	211a      	movs	r1, #26
   bbec4:	4620      	mov	r0, r4
   bbec6:	f7ff fde9 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbeca:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbece:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbed0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbed2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbed4:	bfa9      	itett	ge
   bbed6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbed8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbeda:	b21b      	sxthge	r3, r3
   bbedc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbede:	bfb2      	itee	lt
   bbee0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbee2:	220f      	movge	r2, #15
   bbee4:	fb93 f3f2 	sdivge	r3, r3, r2
   bbee8:	b21b      	sxth	r3, r3
   bbeea:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbeec:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbef0:	b16b      	cbz	r3, bbf0e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbef2:	8a23      	ldrh	r3, [r4, #16]
   bbef4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbef6:	b21b      	sxth	r3, r3
   bbef8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbefa:	4620      	mov	r0, r4
   bbefc:	f7ff ff06 	bl	bbd0c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbf00:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbf04:	2b00      	cmp	r3, #0
   bbf06:	d0ae      	beq.n	bbe66 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbf08:	f7ff ff64 	bl	bbdd4 <_ZN7RH_RF9511setModeIdleEv>
   bbf0c:	e7ab      	b.n	bbe66 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbf0e:	8a23      	ldrh	r3, [r4, #16]
   bbf10:	3ba4      	subs	r3, #164	; 0xa4
   bbf12:	e7f0      	b.n	bbef6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbf14:	8ae3      	ldrh	r3, [r4, #22]
   bbf16:	3301      	adds	r3, #1
   bbf18:	b29b      	uxth	r3, r3
   bbf1a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	e7f3      	b.n	bbf08 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbf20 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbf20:	4b02      	ldr	r3, [pc, #8]	; (bbf2c <_ZN7RH_RF954isr0Ev+0xc>)
   bbf22:	6818      	ldr	r0, [r3, #0]
   bbf24:	b108      	cbz	r0, bbf2a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbf26:	f7ff bf67 	b.w	bbdf8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbf2a:	4770      	bx	lr
   bbf2c:	2003e5f8 	.word	0x2003e5f8

000bbf30 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbf30:	4b02      	ldr	r3, [pc, #8]	; (bbf3c <_ZN7RH_RF954isr1Ev+0xc>)
   bbf32:	6858      	ldr	r0, [r3, #4]
   bbf34:	b108      	cbz	r0, bbf3a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbf36:	f7ff bf5f 	b.w	bbdf8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbf3a:	4770      	bx	lr
   bbf3c:	2003e5f8 	.word	0x2003e5f8

000bbf40 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbf40:	4b02      	ldr	r3, [pc, #8]	; (bbf4c <_ZN7RH_RF954isr2Ev+0xc>)
   bbf42:	6898      	ldr	r0, [r3, #8]
   bbf44:	b108      	cbz	r0, bbf4a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbf46:	f7ff bf57 	b.w	bbdf8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbf4a:	4770      	bx	lr
   bbf4c:	2003e5f8 	.word	0x2003e5f8

000bbf50 <_ZN7RH_RF959setModeRxEv>:
{
   bbf50:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbf52:	7903      	ldrb	r3, [r0, #4]
   bbf54:	2b04      	cmp	r3, #4
{
   bbf56:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbf58:	d010      	beq.n	bbf7c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbf5a:	6803      	ldr	r3, [r0, #0]
   bbf5c:	2104      	movs	r1, #4
   bbf5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbf62:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbf64:	2205      	movs	r2, #5
   bbf66:	2101      	movs	r1, #1
   bbf68:	4620      	mov	r0, r4
   bbf6a:	f7ff fdb8 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbf6e:	2200      	movs	r2, #0
   bbf70:	2140      	movs	r1, #64	; 0x40
   bbf72:	4620      	mov	r0, r4
   bbf74:	f7ff fdb3 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbf78:	2304      	movs	r3, #4
   bbf7a:	7123      	strb	r3, [r4, #4]
}
   bbf7c:	bd10      	pop	{r4, pc}

000bbf7e <_ZN7RH_RF959availableEv>:
{
   bbf7e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbf80:	7903      	ldrb	r3, [r0, #4]
   bbf82:	2b03      	cmp	r3, #3
{
   bbf84:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbf86:	d005      	beq.n	bbf94 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbf88:	f7ff ffe2 	bl	bbf50 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbf8c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbf90:	b2c0      	uxtb	r0, r0
}
   bbf92:	bd10      	pop	{r4, pc}
	return false;
   bbf94:	2000      	movs	r0, #0
   bbf96:	e7fc      	b.n	bbf92 <_ZN7RH_RF959availableEv+0x14>

000bbf98 <_ZN7RH_RF959setModeTxEv>:
{
   bbf98:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbf9a:	7903      	ldrb	r3, [r0, #4]
   bbf9c:	2b03      	cmp	r3, #3
{
   bbf9e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbfa0:	d010      	beq.n	bbfc4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbfa2:	6803      	ldr	r3, [r0, #0]
   bbfa4:	2103      	movs	r1, #3
   bbfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbfaa:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbfac:	2203      	movs	r2, #3
   bbfae:	2101      	movs	r1, #1
   bbfb0:	4620      	mov	r0, r4
   bbfb2:	f7ff fd94 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbfb6:	2240      	movs	r2, #64	; 0x40
   bbfb8:	4611      	mov	r1, r2
   bbfba:	4620      	mov	r0, r4
   bbfbc:	f7ff fd8f 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbfc0:	2303      	movs	r3, #3
   bbfc2:	7123      	strb	r3, [r4, #4]
}
   bbfc4:	bd10      	pop	{r4, pc}

000bbfc6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbfc6:	2afb      	cmp	r2, #251	; 0xfb
{
   bbfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbfca:	4604      	mov	r4, r0
   bbfcc:	460f      	mov	r7, r1
   bbfce:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbfd0:	d902      	bls.n	bbfd8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbfd2:	2600      	movs	r6, #0
}
   bbfd4:	4630      	mov	r0, r6
   bbfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbfd8:	6803      	ldr	r3, [r0, #0]
   bbfda:	6a1b      	ldr	r3, [r3, #32]
   bbfdc:	4798      	blx	r3
    setModeIdle();
   bbfde:	4620      	mov	r0, r4
   bbfe0:	f7ff fef8 	bl	bbdd4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbfe4:	6823      	ldr	r3, [r4, #0]
   bbfe6:	4620      	mov	r0, r4
   bbfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbfea:	4798      	blx	r3
   bbfec:	4606      	mov	r6, r0
   bbfee:	2800      	cmp	r0, #0
   bbff0:	d0ef      	beq.n	bbfd2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbff2:	2200      	movs	r2, #0
   bbff4:	210d      	movs	r1, #13
   bbff6:	4620      	mov	r0, r4
   bbff8:	f7ff fd71 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbffc:	7ae2      	ldrb	r2, [r4, #11]
   bbffe:	2100      	movs	r1, #0
   bc000:	4620      	mov	r0, r4
   bc002:	f7ff fd6c 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bc006:	7b22      	ldrb	r2, [r4, #12]
   bc008:	2100      	movs	r1, #0
   bc00a:	4620      	mov	r0, r4
   bc00c:	f7ff fd67 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bc010:	7b62      	ldrb	r2, [r4, #13]
   bc012:	2100      	movs	r1, #0
   bc014:	4620      	mov	r0, r4
   bc016:	f7ff fd62 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bc01a:	7ba2      	ldrb	r2, [r4, #14]
   bc01c:	2100      	movs	r1, #0
   bc01e:	4620      	mov	r0, r4
   bc020:	f7ff fd5d 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bc024:	462b      	mov	r3, r5
   bc026:	463a      	mov	r2, r7
   bc028:	2100      	movs	r1, #0
   bc02a:	4620      	mov	r0, r4
   bc02c:	f7ff fda5 	bl	bbb7a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bc030:	1d2a      	adds	r2, r5, #4
   bc032:	b2d2      	uxtb	r2, r2
   bc034:	2122      	movs	r1, #34	; 0x22
   bc036:	4620      	mov	r0, r4
   bc038:	f7ff fd51 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bc03c:	4620      	mov	r0, r4
   bc03e:	f7ff ffab 	bl	bbf98 <_ZN7RH_RF959setModeTxEv>
    return true;
   bc042:	e7c7      	b.n	bbfd4 <_ZN7RH_RF954sendEPKhh+0xe>

000bc044 <_ZN7RH_RF9510setTxPowerEab>:
{
   bc044:	b510      	push	{r4, lr}
   bc046:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bc048:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bc04c:	b172      	cbz	r2, bc06c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bc04e:	f381 0204 	usat	r2, #4, r1
   bc052:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bc056:	b2d2      	uxtb	r2, r2
   bc058:	2109      	movs	r1, #9
   bc05a:	f7ff fd40 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bc05e:	4620      	mov	r0, r4
   bc060:	2204      	movs	r2, #4
}
   bc062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bc066:	214d      	movs	r1, #77	; 0x4d
   bc068:	f7ff bd39 	b.w	bbade <_ZN11RHSPIDriver8spiWriteEhh>
}
   bc06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc070:	f7ff be0c 	b.w	bbc8c <_ZN7RH_RF9510setTxPowerEab.part.0>

000bc074 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bc074:	b538      	push	{r3, r4, r5, lr}
   bc076:	460c      	mov	r4, r1
   bc078:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bc07a:	780a      	ldrb	r2, [r1, #0]
   bc07c:	211d      	movs	r1, #29
   bc07e:	f7ff fd2e 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bc082:	7862      	ldrb	r2, [r4, #1]
   bc084:	211e      	movs	r1, #30
   bc086:	4628      	mov	r0, r5
   bc088:	f7ff fd29 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bc08c:	78a2      	ldrb	r2, [r4, #2]
   bc08e:	4628      	mov	r0, r5
   bc090:	2126      	movs	r1, #38	; 0x26
}
   bc092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bc096:	f7ff bd22 	b.w	bbade <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bc09c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bc09c:	2905      	cmp	r1, #5
{
   bc09e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bc0a0:	d80f      	bhi.n	bc0c2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bc0a2:	4b09      	ldr	r3, [pc, #36]	; (bc0c8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bc0a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bc0a8:	185c      	adds	r4, r3, r1
   bc0aa:	5a5a      	ldrh	r2, [r3, r1]
   bc0ac:	78a3      	ldrb	r3, [r4, #2]
   bc0ae:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bc0b2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bc0b4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bc0b8:	f7ff ffdc 	bl	bc074 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bc0bc:	2001      	movs	r0, #1
}
   bc0be:	b002      	add	sp, #8
   bc0c0:	bd10      	pop	{r4, pc}
        return false;
   bc0c2:	2000      	movs	r0, #0
   bc0c4:	e7fb      	b.n	bc0be <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bc0c6:	bf00      	nop
   bc0c8:	000c528c 	.word	0x000c528c

000bc0cc <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bc0cc:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bc0ce:	0a0a      	lsrs	r2, r1, #8
{
   bc0d0:	4605      	mov	r5, r0
   bc0d2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bc0d4:	2120      	movs	r1, #32
   bc0d6:	f7ff fd02 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bc0da:	b2e2      	uxtb	r2, r4
   bc0dc:	4628      	mov	r0, r5
   bc0de:	2121      	movs	r1, #33	; 0x21
}
   bc0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bc0e4:	f7ff bcfb 	b.w	bbade <_ZN11RHSPIDriver8spiWriteEhh>

000bc0e8 <_ZN7RH_RF954initEv>:
{
   bc0e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc0ea:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bc0ec:	f7ff fca6 	bl	bba3c <_ZN11RHSPIDriver4initEv>
   bc0f0:	4606      	mov	r6, r0
   bc0f2:	b918      	cbnz	r0, bc0fc <_ZN7RH_RF954initEv+0x14>
	return false;
   bc0f4:	2600      	movs	r6, #0
}
   bc0f6:	4630      	mov	r0, r6
   bc0f8:	b002      	add	sp, #8
   bc0fa:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bc0fc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bc100:	2dff      	cmp	r5, #255	; 0xff
   bc102:	d054      	beq.n	bc1ae <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bc104:	4629      	mov	r1, r5
   bc106:	4620      	mov	r0, r4
   bc108:	f7ff fd5f 	bl	bbbca <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bc10c:	2280      	movs	r2, #128	; 0x80
   bc10e:	2101      	movs	r1, #1
   bc110:	4620      	mov	r0, r4
   bc112:	f7ff fce4 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bc116:	200a      	movs	r0, #10
   bc118:	f001 fa04 	bl	bd524 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bc11c:	2101      	movs	r1, #1
   bc11e:	4620      	mov	r0, r4
   bc120:	f7ff fcbc 	bl	bba9c <_ZN11RHSPIDriver7spiReadEh>
   bc124:	2880      	cmp	r0, #128	; 0x80
   bc126:	d1e5      	bne.n	bc0f4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bc128:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bc12c:	28ff      	cmp	r0, #255	; 0xff
   bc12e:	d01c      	beq.n	bc16a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bc130:	2100      	movs	r1, #0
   bc132:	f004 fa91 	bl	c0658 <pinMode>
	if (_myInterruptIndex == 0xff)
   bc136:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bc13a:	2bff      	cmp	r3, #255	; 0xff
   bc13c:	d107      	bne.n	bc14e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bc13e:	4a26      	ldr	r2, [pc, #152]	; (bc1d8 <_ZN7RH_RF954initEv+0xf0>)
   bc140:	7813      	ldrb	r3, [r2, #0]
   bc142:	2b03      	cmp	r3, #3
   bc144:	d8d6      	bhi.n	bc0f4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bc146:	1c59      	adds	r1, r3, #1
   bc148:	7011      	strb	r1, [r2, #0]
   bc14a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bc14e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bc152:	4b22      	ldr	r3, [pc, #136]	; (bc1dc <_ZN7RH_RF954initEv+0xf4>)
   bc154:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bc158:	bb62      	cbnz	r2, bc1b4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bc15a:	4921      	ldr	r1, [pc, #132]	; (bc1e0 <_ZN7RH_RF954initEv+0xf8>)
   bc15c:	9200      	str	r2, [sp, #0]
   bc15e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc162:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc164:	b2a8      	uxth	r0, r5
   bc166:	f001 ff5d 	bl	be024 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bc16a:	2200      	movs	r2, #0
   bc16c:	210e      	movs	r1, #14
   bc16e:	4620      	mov	r0, r4
   bc170:	f7ff fcb5 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bc174:	2200      	movs	r2, #0
   bc176:	210f      	movs	r1, #15
   bc178:	4620      	mov	r0, r4
   bc17a:	f7ff fcb0 	bl	bbade <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bc17e:	4620      	mov	r0, r4
   bc180:	f7ff fe28 	bl	bbdd4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bc184:	2100      	movs	r1, #0
   bc186:	4620      	mov	r0, r4
   bc188:	f7ff ff88 	bl	bc09c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bc18c:	2108      	movs	r1, #8
   bc18e:	4620      	mov	r0, r4
   bc190:	f7ff ff9c 	bl	bc0cc <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bc194:	ed9f 0a13 	vldr	s0, [pc, #76]	; bc1e4 <_ZN7RH_RF954initEv+0xfc>
   bc198:	4620      	mov	r0, r4
   bc19a:	f7ff fdd9 	bl	bbd50 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bc19e:	2300      	movs	r3, #0
   bc1a0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bc1a4:	210d      	movs	r1, #13
   bc1a6:	4620      	mov	r0, r4
   bc1a8:	f7ff fd70 	bl	bbc8c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bc1ac:	e7a3      	b.n	bc0f6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bc1ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bc1b2:	e7ab      	b.n	bc10c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bc1b4:	2a01      	cmp	r2, #1
   bc1b6:	f04f 0300 	mov.w	r3, #0
   bc1ba:	d104      	bne.n	bc1c6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bc1bc:	9300      	str	r3, [sp, #0]
   bc1be:	490a      	ldr	r1, [pc, #40]	; (bc1e8 <_ZN7RH_RF954initEv+0x100>)
   bc1c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc1c4:	e7ce      	b.n	bc164 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bc1c6:	2a02      	cmp	r2, #2
   bc1c8:	d194      	bne.n	bc0f4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc1ca:	9300      	str	r3, [sp, #0]
   bc1cc:	4907      	ldr	r1, [pc, #28]	; (bc1ec <_ZN7RH_RF954initEv+0x104>)
   bc1ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc1d2:	2201      	movs	r2, #1
   bc1d4:	e7c6      	b.n	bc164 <_ZN7RH_RF954initEv+0x7c>
   bc1d6:	bf00      	nop
   bc1d8:	2003e5f5 	.word	0x2003e5f5
   bc1dc:	2003e5f8 	.word	0x2003e5f8
   bc1e0:	000bbf21 	.word	0x000bbf21
   bc1e4:	43d90000 	.word	0x43d90000
   bc1e8:	000bbf31 	.word	0x000bbf31
   bc1ec:	000bbf41 	.word	0x000bbf41

000bc1f0 <_ZN7RH_RF957lastSNREv>:
}

int RH_RF95::lastSNR()
{
    return _lastSNR;
}
   bc1f0:	f990 012a 	ldrsb.w	r0, [r0, #298]	; 0x12a
   bc1f4:	4770      	bx	lr

000bc1f6 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bc1f6:	2001      	movs	r0, #1
   bc1f8:	4770      	bx	lr
	...

000bc1fc <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bc1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc1fe:	4d1f      	ldr	r5, [pc, #124]	; (bc27c <_ZN14SequentialFileC1Ev+0x80>)
   bc200:	4b1f      	ldr	r3, [pc, #124]	; (bc280 <_ZN14SequentialFileC1Ev+0x84>)
   bc202:	4604      	mov	r4, r0
   bc204:	4629      	mov	r1, r5
   bc206:	f840 3b04 	str.w	r3, [r0], #4
   bc20a:	f003 fcb0 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc20e:	491d      	ldr	r1, [pc, #116]	; (bc284 <_ZN14SequentialFileC1Ev+0x88>)
   bc210:	f104 0014 	add.w	r0, r4, #20
   bc214:	f003 fcab 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc218:	4629      	mov	r1, r5
   bc21a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc21e:	f003 fca6 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc222:	2300      	movs	r3, #0
   bc224:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bc228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bc22c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bc230:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bc234:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bc238:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bc23c:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bc23e:	2308      	movs	r3, #8
   bc240:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc242:	2020      	movs	r0, #32
   bc244:	f7f7 ff27 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc248:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bc24a:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc24c:	3d01      	subs	r5, #1
   bc24e:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bc250:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bc254:	4606      	mov	r6, r0
   bc256:	f44f 7000 	mov.w	r0, #512	; 0x200
   bc25a:	f7f7 ff1c 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc25e:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bc262:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bc266:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bc26a:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bc26c:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bc26e:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bc270:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc272:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bc274:	6667      	str	r7, [r4, #100]	; 0x64

}
   bc276:	4620      	mov	r0, r4
   bc278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc27a:	bf00      	nop
   bc27c:	000c5654 	.word	0x000c5654
   bc280:	000c5428 	.word	0x000c5428
   bc284:	000c5328 	.word	0x000c5328

000bc288 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bc28a:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc28c:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bc28e:	4628      	mov	r0, r5
   bc290:	f003 fccb 	bl	bfc2a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bc294:	490e      	ldr	r1, [pc, #56]	; (bc2d0 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bc296:	4668      	mov	r0, sp
   bc298:	f003 fc69 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc29c:	4669      	mov	r1, sp
   bc29e:	4628      	mov	r0, r5
   bc2a0:	f003 fd3d 	bl	bfd1e <_ZNK6String8endsWithERKS_>
   bc2a4:	4606      	mov	r6, r0
   bc2a6:	4668      	mov	r0, sp
   bc2a8:	f003 fc16 	bl	bfad8 <_ZN6StringD1Ev>
   bc2ac:	b16e      	cbz	r6, bc2ca <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bc2ae:	68e3      	ldr	r3, [r4, #12]
   bc2b0:	2200      	movs	r2, #0
   bc2b2:	3b01      	subs	r3, #1
   bc2b4:	4629      	mov	r1, r5
   bc2b6:	4668      	mov	r0, sp
   bc2b8:	f003 fd54 	bl	bfd64 <_ZNK6String9substringEjj>
   bc2bc:	4669      	mov	r1, sp
   bc2be:	4628      	mov	r0, r5
   bc2c0:	f003 fcab 	bl	bfc1a <_ZN6StringaSEOS_>
   bc2c4:	4668      	mov	r0, sp
   bc2c6:	f003 fc07 	bl	bfad8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bc2ca:	4620      	mov	r0, r4
   bc2cc:	b004      	add	sp, #16
   bc2ce:	bd70      	pop	{r4, r5, r6, pc}
   bc2d0:	000c532d 	.word	0x000c532d

000bc2d4 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bc2d4:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bc2d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bc2d8:	4604      	mov	r4, r0
    if (!queueMutex) {
   bc2da:	b913      	cbnz	r3, bc2e2 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bc2dc:	303c      	adds	r0, #60	; 0x3c
   bc2de:	f000 fc9d 	bl	bcc1c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bc2e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bc2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bc2e8:	f000 bca0 	b.w	bcc2c <os_mutex_lock>

000bc2ec <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bc2ec:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bc2ee:	f000 bca5 	b.w	bcc3c <os_mutex_unlock>
	...

000bc2f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc2f4:	b510      	push	{r4, lr}
   bc2f6:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bc2f8:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc2fa:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bc2fc:	f000 fe56 	bl	bcfac <stat>
    if (result == 0) {
   bc300:	b9d0      	cbnz	r0, bc338 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc302:	9b01      	ldr	r3, [sp, #4]
   bc304:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bc306:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc308:	d506      	bpl.n	bc318 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bc30a:	4915      	ldr	r1, [pc, #84]	; (bc360 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bc30c:	4815      	ldr	r0, [pc, #84]	; (bc364 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc30e:	f7f7 ff16 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bc312:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bc314:	b016      	add	sp, #88	; 0x58
   bc316:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bc318:	4812      	ldr	r0, [pc, #72]	; (bc364 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc31a:	4913      	ldr	r1, [pc, #76]	; (bc368 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bc31c:	f7fb fbf8 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bc320:	4620      	mov	r0, r4
   bc322:	f006 f8db 	bl	c24dc <unlink>
    result = mkdir(path, 0777);
   bc326:	f240 11ff 	movw	r1, #511	; 0x1ff
   bc32a:	4620      	mov	r0, r4
   bc32c:	f000 fe46 	bl	bcfbc <mkdir>
    if (result == 0) {
   bc330:	b980      	cbnz	r0, bc354 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bc332:	490e      	ldr	r1, [pc, #56]	; (bc36c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bc334:	4622      	mov	r2, r4
   bc336:	e7e9      	b.n	bc30c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bc338:	f001 f8bc 	bl	bd4b4 <__errno>
   bc33c:	6803      	ldr	r3, [r0, #0]
   bc33e:	2b02      	cmp	r3, #2
   bc340:	d0f1      	beq.n	bc326 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bc342:	f001 f8b7 	bl	bd4b4 <__errno>
   bc346:	490a      	ldr	r1, [pc, #40]	; (bc370 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bc348:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bc34a:	4806      	ldr	r0, [pc, #24]	; (bc364 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc34c:	f7fb fbe0 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc350:	2000      	movs	r0, #0
   bc352:	e7df      	b.n	bc314 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bc354:	f001 f8ae 	bl	bd4b4 <__errno>
   bc358:	4906      	ldr	r1, [pc, #24]	; (bc374 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bc35a:	6802      	ldr	r2, [r0, #0]
   bc35c:	e7f5      	b.n	bc34a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bc35e:	bf00      	nop
   bc360:	000c533a 	.word	0x000c533a
   bc364:	2003e604 	.word	0x2003e604
   bc368:	000c5357 	.word	0x000c5357
   bc36c:	000c5388 	.word	0x000c5388
   bc370:	000c5374 	.word	0x000c5374
   bc374:	000c5397 	.word	0x000c5397

000bc378 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bc378:	b538      	push	{r3, r4, r5, lr}
   bc37a:	4615      	mov	r5, r2
   bc37c:	4604      	mov	r4, r0
    String result = name;
   bc37e:	f003 fbf6 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bc382:	b14d      	cbz	r5, bc398 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bc384:	782b      	ldrb	r3, [r5, #0]
   bc386:	b13b      	cbz	r3, bc398 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bc388:	4904      	ldr	r1, [pc, #16]	; (bc39c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bc38a:	4620      	mov	r0, r4
   bc38c:	f003 fc76 	bl	bfc7c <_ZN6String6concatEPKc>
   bc390:	4629      	mov	r1, r5
   bc392:	4620      	mov	r0, r4
   bc394:	f003 fc72 	bl	bfc7c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bc398:	4620      	mov	r0, r4
   bc39a:	bd38      	pop	{r3, r4, r5, pc}
   bc39c:	000c5758 	.word	0x000c5758

000bc3a0 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bc3a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc3a2:	4605      	mov	r5, r0
   bc3a4:	460e      	mov	r6, r1
   bc3a6:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bc3a8:	6949      	ldr	r1, [r1, #20]
   bc3aa:	4668      	mov	r0, sp
   bc3ac:	f003 fcfa 	bl	bfda4 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bc3b0:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bc3b2:	b904      	cbnz	r4, bc3b6 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bc3b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc3b6:	4622      	mov	r2, r4
   bc3b8:	4628      	mov	r0, r5
   bc3ba:	f7ff ffdd 	bl	bc378 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bc3be:	4668      	mov	r0, sp
   bc3c0:	f003 fb8a 	bl	bfad8 <_ZN6StringD1Ev>
}
   bc3c4:	4628      	mov	r0, r5
   bc3c6:	b004      	add	sp, #16
   bc3c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc3cc <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc3cc:	b570      	push	{r4, r5, r6, lr}
   bc3ce:	460c      	mov	r4, r1
   bc3d0:	b08e      	sub	sp, #56	; 0x38
    String result;
   bc3d2:	491a      	ldr	r1, [pc, #104]	; (bc43c <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc3d4:	e9cd 3200 	strd	r3, r2, [sp]
   bc3d8:	4605      	mov	r5, r0
    String result;
   bc3da:	f003 fbc8 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bc3de:	68e0      	ldr	r0, [r4, #12]
   bc3e0:	69e1      	ldr	r1, [r4, #28]
   bc3e2:	4401      	add	r1, r0
   bc3e4:	3104      	adds	r1, #4
   bc3e6:	4628      	mov	r0, r5
   bc3e8:	f003 fb94 	bl	bfb14 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bc3ec:	1d21      	adds	r1, r4, #4
   bc3ee:	a806      	add	r0, sp, #24
   bc3f0:	f003 fc08 	bl	bfc04 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bc3f4:	4912      	ldr	r1, [pc, #72]	; (bc440 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bc3f6:	a802      	add	r0, sp, #8
   bc3f8:	f003 fbb9 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc3fc:	a902      	add	r1, sp, #8
   bc3fe:	a806      	add	r0, sp, #24
   bc400:	f003 fc5a 	bl	bfcb8 <_ZplRK15StringSumHelperRK6String>
   bc404:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc408:	4606      	mov	r6, r0
   bc40a:	4621      	mov	r1, r4
   bc40c:	a80a      	add	r0, sp, #40	; 0x28
   bc40e:	f7ff ffc7 	bl	bc3a0 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bc412:	a90a      	add	r1, sp, #40	; 0x28
   bc414:	4630      	mov	r0, r6
   bc416:	f003 fc4f 	bl	bfcb8 <_ZplRK15StringSumHelperRK6String>
   bc41a:	4601      	mov	r1, r0
   bc41c:	4628      	mov	r0, r5
   bc41e:	f003 fbe2 	bl	bfbe6 <_ZN6StringaSERKS_>
   bc422:	a80a      	add	r0, sp, #40	; 0x28
   bc424:	f003 fb58 	bl	bfad8 <_ZN6StringD1Ev>
   bc428:	a802      	add	r0, sp, #8
   bc42a:	f003 fb55 	bl	bfad8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc42e:	a806      	add	r0, sp, #24
   bc430:	f003 fb52 	bl	bfad8 <_ZN6StringD1Ev>
}
   bc434:	4628      	mov	r0, r5
   bc436:	b00e      	add	sp, #56	; 0x38
   bc438:	bd70      	pop	{r4, r5, r6, pc}
   bc43a:	bf00      	nop
   bc43c:	000c5654 	.word	0x000c5654
   bc440:	000c532d 	.word	0x000c532d

000bc444 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc448:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc44a:	b08e      	sub	sp, #56	; 0x38
   bc44c:	4605      	mov	r5, r0
   bc44e:	460f      	mov	r7, r1
    if (allExtensions) {
   bc450:	2a00      	cmp	r2, #0
   bc452:	d04a      	beq.n	bc4ea <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc454:	6840      	ldr	r0, [r0, #4]
   bc456:	f000 fdc1 	bl	bcfdc <opendir>
        if (dir) {
   bc45a:	4606      	mov	r6, r0
   bc45c:	2800      	cmp	r0, #0
   bc45e:	d054      	beq.n	bc50a <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc460:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc518 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc464:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc514 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc468:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc510 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc46c:	4630      	mov	r0, r6
   bc46e:	f000 fdbd 	bl	bcfec <readdir>
                if (!ent) {
   bc472:	2800      	cmp	r0, #0
   bc474:	d033      	beq.n	bc4de <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc476:	7a82      	ldrb	r2, [r0, #10]
   bc478:	2a08      	cmp	r2, #8
   bc47a:	d1f7      	bne.n	bc46c <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc47c:	f100 040b 	add.w	r4, r0, #11
   bc480:	6969      	ldr	r1, [r5, #20]
   bc482:	aa01      	add	r2, sp, #4
   bc484:	4620      	mov	r0, r4
   bc486:	f000 ffed 	bl	bd464 <sscanf>
   bc48a:	2801      	cmp	r0, #1
   bc48c:	d1ee      	bne.n	bc46c <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc48e:	9b01      	ldr	r3, [sp, #4]
   bc490:	42bb      	cmp	r3, r7
   bc492:	d1eb      	bne.n	bc46c <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc494:	1d29      	adds	r1, r5, #4
   bc496:	a80a      	add	r0, sp, #40	; 0x28
   bc498:	f003 fbb4 	bl	bfc04 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc49c:	4651      	mov	r1, sl
   bc49e:	a806      	add	r0, sp, #24
   bc4a0:	f003 fb65 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc4a4:	a906      	add	r1, sp, #24
   bc4a6:	a80a      	add	r0, sp, #40	; 0x28
   bc4a8:	f003 fc06 	bl	bfcb8 <_ZplRK15StringSumHelperRK6String>
   bc4ac:	4621      	mov	r1, r4
   bc4ae:	f003 fc0f 	bl	bfcd0 <_ZplRK15StringSumHelperPKc>
   bc4b2:	4601      	mov	r1, r0
   bc4b4:	a802      	add	r0, sp, #8
   bc4b6:	f003 fba5 	bl	bfc04 <_ZN6StringC1ERKS_>
   bc4ba:	a806      	add	r0, sp, #24
   bc4bc:	f003 fb0c 	bl	bfad8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc4c0:	a80a      	add	r0, sp, #40	; 0x28
   bc4c2:	f003 fb09 	bl	bfad8 <_ZN6StringD1Ev>
                        unlink(path);
   bc4c6:	9802      	ldr	r0, [sp, #8]
   bc4c8:	f006 f808 	bl	c24dc <unlink>
                        _log.trace("removed %s", path.c_str());
   bc4cc:	4640      	mov	r0, r8
   bc4ce:	9a02      	ldr	r2, [sp, #8]
   bc4d0:	4649      	mov	r1, r9
   bc4d2:	f7fb fb2b 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc4d6:	a802      	add	r0, sp, #8
   bc4d8:	f003 fafe 	bl	bfad8 <_ZN6StringD1Ev>
                    continue;
   bc4dc:	e7c6      	b.n	bc46c <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc4de:	4630      	mov	r0, r6
}
   bc4e0:	b00e      	add	sp, #56	; 0x38
   bc4e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc4e6:	f000 bd89 	b.w	bcffc <closedir>
        String path = getPathForFileNum(fileNum); 
   bc4ea:	460a      	mov	r2, r1
   bc4ec:	4601      	mov	r1, r0
   bc4ee:	a80a      	add	r0, sp, #40	; 0x28
   bc4f0:	f7ff ff6c 	bl	bc3cc <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc4f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc4f6:	f005 fff1 	bl	c24dc <unlink>
        _log.trace("removed %s", path.c_str());
   bc4fa:	4805      	ldr	r0, [pc, #20]	; (bc510 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc4fe:	4905      	ldr	r1, [pc, #20]	; (bc514 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc500:	f7fb fb14 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc504:	a80a      	add	r0, sp, #40	; 0x28
   bc506:	f003 fae7 	bl	bfad8 <_ZN6StringD1Ev>
}
   bc50a:	b00e      	add	sp, #56	; 0x38
   bc50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc510:	2003e604 	.word	0x2003e604
   bc514:	000c532f 	.word	0x000c532f
   bc518:	000c532d 	.word	0x000c532d

000bc51c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc51c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc51e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc520:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc522:	b183      	cbz	r3, bc546 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc524:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc526:	6945      	ldr	r5, [r0, #20]
   bc528:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc52a:	42ae      	cmp	r6, r5
   bc52c:	d906      	bls.n	bc53c <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc52e:	f855 0b04 	ldr.w	r0, [r5], #4
   bc532:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc536:	f7f7 fdb2 	bl	b409e <_ZdlPvj>
   bc53a:	e7f6      	b.n	bc52a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc53c:	6861      	ldr	r1, [r4, #4]
   bc53e:	6820      	ldr	r0, [r4, #0]
   bc540:	0089      	lsls	r1, r1, #2
   bc542:	f7f7 fdac 	bl	b409e <_ZdlPvj>
    }
   bc546:	4620      	mov	r0, r4
   bc548:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc54c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc54c:	b510      	push	{r4, lr}
   bc54e:	4b09      	ldr	r3, [pc, #36]	; (bc574 <_ZN14SequentialFileD1Ev+0x28>)
   bc550:	4604      	mov	r4, r0
   bc552:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc556:	f7ff ffe1 	bl	bc51c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc55a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc55e:	f003 fabb 	bl	bfad8 <_ZN6StringD1Ev>
   bc562:	f104 0014 	add.w	r0, r4, #20
   bc566:	f003 fab7 	bl	bfad8 <_ZN6StringD1Ev>
   bc56a:	1d20      	adds	r0, r4, #4
   bc56c:	f003 fab4 	bl	bfad8 <_ZN6StringD1Ev>
}
   bc570:	4620      	mov	r0, r4
   bc572:	bd10      	pop	{r4, pc}
   bc574:	000c5428 	.word	0x000c5428

000bc578 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc578:	b510      	push	{r4, lr}
   bc57a:	4604      	mov	r4, r0
}
   bc57c:	f7ff ffe6 	bl	bc54c <_ZN14SequentialFileD1Ev>
   bc580:	4620      	mov	r0, r4
   bc582:	2168      	movs	r1, #104	; 0x68
   bc584:	f7f7 fd8b 	bl	b409e <_ZdlPvj>
   bc588:	4620      	mov	r0, r4
   bc58a:	bd10      	pop	{r4, pc}

000bc58c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc58c:	68c3      	ldr	r3, [r0, #12]
   bc58e:	68ca      	ldr	r2, [r1, #12]
   bc590:	1a9b      	subs	r3, r3, r2
   bc592:	109b      	asrs	r3, r3, #2
   bc594:	1e5a      	subs	r2, r3, #1
   bc596:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc59a:	1a1b      	subs	r3, r3, r0
   bc59c:	109b      	asrs	r3, r3, #2
   bc59e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc5a2:	6888      	ldr	r0, [r1, #8]
   bc5a4:	680a      	ldr	r2, [r1, #0]
   bc5a6:	1a80      	subs	r0, r0, r2
      }
   bc5a8:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc5ac:	4770      	bx	lr
	...

000bc5b0 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc5b4:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc5b6:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc5b8:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc5ba:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc5bc:	4604      	mov	r4, r0
   bc5be:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc5c0:	d007      	beq.n	bc5d2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc5c2:	b10b      	cbz	r3, bc5c8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc5c4:	680a      	ldr	r2, [r1, #0]
   bc5c6:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc5c8:	69a3      	ldr	r3, [r4, #24]
   bc5ca:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc5cc:	61a3      	str	r3, [r4, #24]
      }
   bc5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc5d2:	f100 0108 	add.w	r1, r0, #8
   bc5d6:	3018      	adds	r0, #24
   bc5d8:	f7ff ffd8 	bl	bc58c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc5dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc5e0:	4298      	cmp	r0, r3
   bc5e2:	d102      	bne.n	bc5ea <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc5e4:	4838      	ldr	r0, [pc, #224]	; (bc6c8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc5e6:	f004 f950 	bl	c088a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc5ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc5ec:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc5ee:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc5f0:	1a11      	subs	r1, r2, r0
   bc5f2:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc5f6:	2901      	cmp	r1, #1
   bc5f8:	d825      	bhi.n	bc646 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc5fa:	6961      	ldr	r1, [r4, #20]
   bc5fc:	eba2 0801 	sub.w	r8, r2, r1
   bc600:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc604:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc606:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc60a:	d936      	bls.n	bc67a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc60c:	1b5d      	subs	r5, r3, r5
   bc60e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc610:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc614:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc616:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc618:	eba3 0201 	sub.w	r2, r3, r1
   bc61c:	d926      	bls.n	bc66c <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc61e:	428b      	cmp	r3, r1
   bc620:	d002      	beq.n	bc628 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc622:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc624:	f004 fec2 	bl	c13ac <memmove>
	_M_node = __new_node;
   bc628:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc62a:	682b      	ldr	r3, [r5, #0]
   bc62c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc62e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc632:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc634:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc638:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc63a:	f855 3008 	ldr.w	r3, [r5, r8]
   bc63e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc640:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc644:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc646:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc64a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc64c:	f7f7 fd23 	bl	b4096 <_Znwj>
   bc650:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc652:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc654:	b10b      	cbz	r3, bc65a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc656:	683a      	ldr	r2, [r7, #0]
   bc658:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc65c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc65e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc660:	685b      	ldr	r3, [r3, #4]
   bc662:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc664:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc668:	6222      	str	r2, [r4, #32]
   bc66a:	e7af      	b.n	bc5cc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc66c:	428b      	cmp	r3, r1
   bc66e:	d0db      	beq.n	bc628 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc670:	f108 0004 	add.w	r0, r8, #4
   bc674:	1a80      	subs	r0, r0, r2
   bc676:	4428      	add	r0, r5
   bc678:	e7d4      	b.n	bc624 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc67a:	f103 0902 	add.w	r9, r3, #2
   bc67e:	2b01      	cmp	r3, #1
   bc680:	bf2c      	ite	cs
   bc682:	4499      	addcs	r9, r3
   bc684:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc688:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc68c:	d301      	bcc.n	bc692 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc68e:	f004 f8f9 	bl	c0884 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc692:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc696:	f7f7 fcfe 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc69a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc69c:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc69e:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc6a2:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc6a4:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc6a6:	4291      	cmp	r1, r2
   bc6a8:	4682      	mov	sl, r0
   bc6aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc6ae:	d003      	beq.n	bc6b8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc6b0:	1a52      	subs	r2, r2, r1
   bc6b2:	4628      	mov	r0, r5
   bc6b4:	f004 fe7a 	bl	c13ac <memmove>
	::operator delete(__p
   bc6b8:	6861      	ldr	r1, [r4, #4]
   bc6ba:	6820      	ldr	r0, [r4, #0]
   bc6bc:	0089      	lsls	r1, r1, #2
   bc6be:	f7f7 fcee 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc6c2:	e9c4 a900 	strd	sl, r9, [r4]
   bc6c6:	e7af      	b.n	bc628 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc6c8:	000c4fb1 	.word	0x000c4fb1

000bc6cc <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc6d0:	68c3      	ldr	r3, [r0, #12]
   bc6d2:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc6d4:	b086      	sub	sp, #24
   bc6d6:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc6d8:	d808      	bhi.n	bc6ec <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc6da:	4934      	ldr	r1, [pc, #208]	; (bc7ac <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc6dc:	4834      	ldr	r0, [pc, #208]	; (bc7b0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc6de:	f7fb fa17 	bl	b7b10 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc6e2:	2600      	movs	r6, #0
}
   bc6e4:	4630      	mov	r0, r6
   bc6e6:	b006      	add	sp, #24
   bc6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc6ec:	6840      	ldr	r0, [r0, #4]
   bc6ee:	f7ff fe01 	bl	bc2f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc6f2:	4606      	mov	r6, r0
   bc6f4:	2800      	cmp	r0, #0
   bc6f6:	d0f4      	beq.n	bc6e2 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc6f8:	6963      	ldr	r3, [r4, #20]
   bc6fa:	6862      	ldr	r2, [r4, #4]
   bc6fc:	492d      	ldr	r1, [pc, #180]	; (bc7b4 <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc6fe:	482c      	ldr	r0, [pc, #176]	; (bc7b0 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc700:	f7fb fa14 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc704:	6860      	ldr	r0, [r4, #4]
   bc706:	f000 fc69 	bl	bcfdc <opendir>
    if (!dir) {
   bc70a:	4607      	mov	r7, r0
   bc70c:	2800      	cmp	r0, #0
   bc70e:	d0e8      	beq.n	bc6e2 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc710:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc712:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc7b8 <_ZN14SequentialFile7scanDirEv+0xec>
   bc716:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc7b0 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc71a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc71c:	4638      	mov	r0, r7
   bc71e:	f000 fc65 	bl	bcfec <readdir>
        if (!ent) {
   bc722:	4605      	mov	r5, r0
   bc724:	2800      	cmp	r0, #0
   bc726:	d039      	beq.n	bc79c <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc728:	7a83      	ldrb	r3, [r0, #10]
   bc72a:	2b08      	cmp	r3, #8
   bc72c:	d1f6      	bne.n	bc71c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc72e:	350b      	adds	r5, #11
   bc730:	6961      	ldr	r1, [r4, #20]
   bc732:	aa01      	add	r2, sp, #4
   bc734:	4628      	mov	r0, r5
   bc736:	f000 fe95 	bl	bd464 <sscanf>
   bc73a:	2801      	cmp	r0, #1
   bc73c:	d1ee      	bne.n	bc71c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc73e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc740:	b17b      	cbz	r3, bc762 <_ZN14SequentialFile7scanDirEv+0x96>
   bc742:	4629      	mov	r1, r5
   bc744:	a802      	add	r0, sp, #8
   bc746:	f003 fa12 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
   bc74a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc74e:	a802      	add	r0, sp, #8
   bc750:	f003 fae5 	bl	bfd1e <_ZNK6String8endsWithERKS_>
   bc754:	4682      	mov	sl, r0
   bc756:	a802      	add	r0, sp, #8
   bc758:	f003 f9be 	bl	bfad8 <_ZN6StringD1Ev>
   bc75c:	f1ba 0f00 	cmp.w	sl, #0
   bc760:	d0dc      	beq.n	bc71c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc762:	6823      	ldr	r3, [r4, #0]
   bc764:	4629      	mov	r1, r5
   bc766:	689b      	ldr	r3, [r3, #8]
   bc768:	4620      	mov	r0, r4
   bc76a:	4798      	blx	r3
   bc76c:	2800      	cmp	r0, #0
   bc76e:	d0d5      	beq.n	bc71c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc770:	9a01      	ldr	r2, [sp, #4]
   bc772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc774:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc776:	bfb8      	it	lt
   bc778:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc77a:	462b      	mov	r3, r5
   bc77c:	4649      	mov	r1, r9
   bc77e:	4640      	mov	r0, r8
   bc780:	f7fb f9d4 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc784:	4620      	mov	r0, r4
   bc786:	f7ff fda5 	bl	bc2d4 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc78a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc78e:	a901      	add	r1, sp, #4
   bc790:	f7ff ff0e 	bl	bc5b0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc794:	4620      	mov	r0, r4
   bc796:	f7ff fda9 	bl	bc2ec <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc79a:	e7bf      	b.n	bc71c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc79c:	4638      	mov	r0, r7
   bc79e:	f000 fc2d 	bl	bcffc <closedir>
    scanDirCompleted = true;
   bc7a2:	2301      	movs	r3, #1
   bc7a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc7a8:	e79c      	b.n	bc6e4 <_ZN14SequentialFile7scanDirEv+0x18>
   bc7aa:	bf00      	nop
   bc7ac:	000c53ad 	.word	0x000c53ad
   bc7b0:	2003e604 	.word	0x2003e604
   bc7b4:	000c53c2 	.word	0x000c53c2
   bc7b8:	000c53de 	.word	0x000c53de

000bc7bc <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc7bc:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc7be:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc7c2:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc7c4:	b90b      	cbnz	r3, bc7ca <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc7c6:	f7ff ff81 	bl	bc6cc <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc7ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc7cc:	3001      	adds	r0, #1
   bc7ce:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc7d0:	bd10      	pop	{r4, pc}
	...

000bc7d4 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc7d4:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc7d6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc7da:	4604      	mov	r4, r0
   bc7dc:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc7de:	b90b      	cbnz	r3, bc7e4 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc7e0:	f7ff ff74 	bl	bc6cc <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc7e4:	4620      	mov	r0, r4
   bc7e6:	f7ff fd75 	bl	bc2d4 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc7ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc7ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc7ee:	429a      	cmp	r2, r3
   bc7f0:	d020      	beq.n	bc834 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc7f2:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc7f6:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc7f8:	b126      	cbz	r6, bc804 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc7fa:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc7fc:	4293      	cmp	r3, r2
   bc7fe:	d00c      	beq.n	bc81a <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc800:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc802:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc804:	4620      	mov	r0, r4
   bc806:	f7ff fd71 	bl	bc2ec <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc80a:	b125      	cbz	r5, bc816 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc80c:	490a      	ldr	r1, [pc, #40]	; (bc838 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc80e:	480b      	ldr	r0, [pc, #44]	; (bc83c <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc810:	462a      	mov	r2, r5
   bc812:	f7fb f98b 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
}
   bc816:	4628      	mov	r0, r5
   bc818:	bd70      	pop	{r4, r5, r6, pc}
   bc81a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc81e:	f7f7 fc3e 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc822:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc824:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc826:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc828:	685b      	ldr	r3, [r3, #4]
   bc82a:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc82c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc830:	6522      	str	r2, [r4, #80]	; 0x50
   bc832:	e7e6      	b.n	bc802 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc834:	2500      	movs	r5, #0
   bc836:	e7e5      	b.n	bc804 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc838:	000c53f4 	.word	0x000c53f4
   bc83c:	2003e604 	.word	0x2003e604

000bc840 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc840:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc842:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc846:	9101      	str	r1, [sp, #4]
   bc848:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc84a:	b90b      	cbnz	r3, bc850 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc84c:	f7ff ff3e 	bl	bc6cc <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc850:	9b01      	ldr	r3, [sp, #4]
   bc852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc854:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc856:	bfb8      	it	lt
   bc858:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc85a:	4620      	mov	r0, r4
   bc85c:	f7ff fd3a 	bl	bc2d4 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc860:	a901      	add	r1, sp, #4
   bc862:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc866:	f7ff fea3 	bl	bc5b0 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc86a:	4620      	mov	r0, r4
   bc86c:	f7ff fd3e 	bl	bc2ec <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc870:	b002      	add	sp, #8
   bc872:	bd10      	pop	{r4, pc}

000bc874 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc874:	b538      	push	{r3, r4, r5, lr}
   bc876:	4604      	mov	r4, r0
    queueMutexLock();
   bc878:	f7ff fd2c 	bl	bc2d4 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc87c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc880:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc884:	f7ff fe82 	bl	bc58c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc888:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc88a:	4620      	mov	r0, r4
   bc88c:	f7ff fd2e 	bl	bc2ec <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc890:	4628      	mov	r0, r5
   bc892:	bd38      	pop	{r3, r4, r5, pc}

000bc894 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc894:	4b01      	ldr	r3, [pc, #4]	; (bc89c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc896:	4a02      	ldr	r2, [pc, #8]	; (bc8a0 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc898:	601a      	str	r2, [r3, #0]
}
   bc89a:	4770      	bx	lr
   bc89c:	2003e604 	.word	0x2003e604
   bc8a0:	000c5411 	.word	0x000c5411

000bc8a4 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc8a4:	6803      	ldr	r3, [r0, #0]
   bc8a6:	685b      	ldr	r3, [r3, #4]
   bc8a8:	4718      	bx	r3

000bc8aa <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc8aa:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc8ac:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc8ae:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc8b0:	b133      	cbz	r3, bc8c0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc8b2:	b131      	cbz	r1, bc8c2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc8b4:	6823      	ldr	r3, [r4, #0]
   bc8b6:	4620      	mov	r0, r4
   bc8b8:	689b      	ldr	r3, [r3, #8]
   bc8ba:	4798      	blx	r3
            lastUpdate = 0;
   bc8bc:	2300      	movs	r3, #0
   bc8be:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc8c0:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc8c2:	f000 fa13 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc8c6:	69a3      	ldr	r3, [r4, #24]
   bc8c8:	1ac0      	subs	r0, r0, r3
   bc8ca:	69e3      	ldr	r3, [r4, #28]
   bc8cc:	4298      	cmp	r0, r3
   bc8ce:	d2f1      	bcs.n	bc8b4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc8d0:	e7f6      	b.n	bc8c0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc8d2 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc8d2:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc8d4:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc8d6:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc8d8:	b11b      	cbz	r3, bc8e2 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc8da:	f000 fa07 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc8de:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc8e0:	bd10      	pop	{r4, pc}
        save();
   bc8e2:	6803      	ldr	r3, [r0, #0]
}
   bc8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc8e8:	689b      	ldr	r3, [r3, #8]
   bc8ea:	4718      	bx	r3

000bc8ec <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   bc8ec:	f000 b9c6 	b.w	bcc7c <os_mutex_recursive_unlock>

000bc8f0 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   bc8f0:	b507      	push	{r0, r1, r2, lr}
   bc8f2:	4613      	mov	r3, r2
    if (data) {
   bc8f4:	b139      	cbz	r1, bc906 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   bc8f6:	2200      	movs	r2, #0
   bc8f8:	e9cd 2200 	strd	r2, r2, [sp]
   bc8fc:	460a      	mov	r2, r1
   bc8fe:	6801      	ldr	r1, [r0, #0]
   bc900:	201e      	movs	r0, #30
   bc902:	f000 fc3b 	bl	bd17c <log_dump>
}
   bc906:	b003      	add	sp, #12
   bc908:	f85d fb04 	ldr.w	pc, [sp], #4

000bc90c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   bc90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   bc90e:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   bc912:	4604      	mov	r4, r0
    if (logData) {
   bc914:	b19b      	cbz	r3, bc93e <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   bc916:	6883      	ldr	r3, [r0, #8]
   bc918:	4d0a      	ldr	r5, [pc, #40]	; (bc944 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   bc91a:	88da      	ldrh	r2, [r3, #6]
   bc91c:	490a      	ldr	r1, [pc, #40]	; (bc948 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   bc91e:	4628      	mov	r0, r5
   bc920:	f7f7 fc0d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   bc924:	68a1      	ldr	r1, [r4, #8]
   bc926:	4628      	mov	r0, r5
   bc928:	88ca      	ldrh	r2, [r1, #6]
   bc92a:	f7ff ffe1 	bl	bc8f0 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   bc92e:	2300      	movs	r3, #0
   bc930:	9300      	str	r3, [sp, #0]
   bc932:	4a06      	ldr	r2, [pc, #24]	; (bc94c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   bc934:	6829      	ldr	r1, [r5, #0]
   bc936:	2301      	movs	r3, #1
   bc938:	201e      	movs	r0, #30
   bc93a:	f000 fc17 	bl	bd16c <log_write>
        Log.print("\n");
    }
}
   bc93e:	b003      	add	sp, #12
   bc940:	bd30      	pop	{r4, r5, pc}
   bc942:	bf00      	nop
   bc944:	2003e650 	.word	0x2003e650
   bc948:	000c5434 	.word	0x000c5434
   bc94c:	000c5653 	.word	0x000c5653

000bc950 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc950:	b510      	push	{r4, lr}
   bc952:	4604      	mov	r4, r0
   bc954:	3004      	adds	r0, #4
   bc956:	f7f9 fd0f 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc95a:	6823      	ldr	r3, [r4, #0]
   bc95c:	68e1      	ldr	r1, [r4, #12]
   bc95e:	695b      	ldr	r3, [r3, #20]
   bc960:	4620      	mov	r0, r4
   bc962:	4798      	blx	r3
   bc964:	b918      	cbnz	r0, bc96e <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc966:	6823      	ldr	r3, [r4, #0]
   bc968:	4620      	mov	r0, r4
   bc96a:	699b      	ldr	r3, [r3, #24]
   bc96c:	4798      	blx	r3
      { _M_device.unlock(); }
   bc96e:	6860      	ldr	r0, [r4, #4]
   bc970:	f7ff ffbc 	bl	bc8ec <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc974:	2001      	movs	r0, #1
   bc976:	bd10      	pop	{r4, pc}

000bc978 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:
bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc97a:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc97c:	3004      	adds	r0, #4
   bc97e:	4614      	mov	r4, r2
   bc980:	460e      	mov	r6, r1
   bc982:	461f      	mov	r7, r3
   bc984:	f7f9 fcf8 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1))) {
   bc988:	68ea      	ldr	r2, [r5, #12]
   bc98a:	f1c4 0401 	rsb	r4, r4, #1
   bc98e:	4414      	add	r4, r2
   bc990:	42b4      	cmp	r4, r6
   bc992:	d30a      	bcc.n	bc9aa <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bc994:	68a9      	ldr	r1, [r5, #8]
            value = p; // copies string
   bc996:	4638      	mov	r0, r7
   bc998:	4431      	add	r1, r6
   bc99a:	f003 f946 	bl	bfc2a <_ZN6StringaSEPKc>
            result = true;
   bc99e:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bc9a0:	6868      	ldr	r0, [r5, #4]
   bc9a2:	f7ff ffa3 	bl	bc8ec <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc9a6:	4620      	mov	r0, r4
   bc9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bc9aa:	2400      	movs	r4, #0
   bc9ac:	e7f8      	b.n	bc9a0 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000bc9b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bc9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc9b2:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bc9b6:	4f18      	ldr	r7, [pc, #96]	; (bca18 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bc9b8:	4e18      	ldr	r6, [pc, #96]	; (bca1c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bc9ba:	4d19      	ldr	r5, [pc, #100]	; (bca20 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bc9bc:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bc9be:	42a0      	cmp	r0, r4
   bc9c0:	d00c      	beq.n	bc9dc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bc9c2:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bc9c6:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bc9c8:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bc9cc:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bc9ce:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bc9d0:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bc9d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bc9d8:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bc9da:	e7f0      	b.n	bc9be <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bc9dc:	f001 0403 	and.w	r4, r1, #3
   bc9e0:	4404      	add	r4, r0
    k = 0;
   bc9e2:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bc9e4:	42a0      	cmp	r0, r4
   bc9e6:	d004      	beq.n	bc9f2 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bc9e8:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bc9ec:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bc9f0:	e7f8      	b.n	bc9e4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bc9f2:	4809      	ldr	r0, [pc, #36]	; (bca18 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bc9f4:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bc9f6:	4809      	ldr	r0, [pc, #36]	; (bca1c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bc9f8:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bc9fc:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bc9fe:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bca00:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bca02:	4b08      	ldr	r3, [pc, #32]	; (bca24 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bca04:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bca08:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bca0a:	4b07      	ldr	r3, [pc, #28]	; (bca28 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bca0c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bca10:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bca12:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bca18:	cc9e2d51 	.word	0xcc9e2d51
   bca1c:	1b873593 	.word	0x1b873593
   bca20:	e6546b64 	.word	0xe6546b64
   bca24:	85ebca6b 	.word	0x85ebca6b
   bca28:	c2b2ae35 	.word	0xc2b2ae35

000bca2c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bca2e:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bca30:	3004      	adds	r0, #4
   bca32:	f7f9 fca1 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bca36:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bca38:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bca3a:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bca3c:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bca3e:	68a6      	ldr	r6, [r4, #8]
   bca40:	4a05      	ldr	r2, [pc, #20]	; (bca58 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bca42:	88f1      	ldrh	r1, [r6, #6]
   bca44:	4630      	mov	r0, r6
   bca46:	f7ff ffb3 	bl	bc9b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bca4a:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bca4c:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bca4e:	6860      	ldr	r0, [r4, #4]
   bca50:	f7ff ff4c 	bl	bc8ec <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bca54:	4628      	mov	r0, r5
   bca56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bca58:	851c2a3f 	.word	0x851c2a3f

000bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   bca5c:	b570      	push	{r4, r5, r6, lr}
   bca5e:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   bca60:	6885      	ldr	r5, [r0, #8]
   bca62:	f7ff ffe3 	bl	bca2c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bca66:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   bca68:	6823      	ldr	r3, [r4, #0]
   bca6a:	4620      	mov	r0, r4
   bca6c:	691b      	ldr	r3, [r3, #16]
}
   bca6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   bca72:	4718      	bx	r3

000bca74 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bca78:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bca7a:	3004      	adds	r0, #4
   bca7c:	4690      	mov	r8, r2
   bca7e:	460d      	mov	r5, r1
   bca80:	461f      	mov	r7, r3
   bca82:	f7f9 fc79 	bl	b6378 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bca86:	68e2      	ldr	r2, [r4, #12]
   bca88:	f1c8 0301 	rsb	r3, r8, #1
   bca8c:	4413      	add	r3, r2
   bca8e:	42ab      	cmp	r3, r5
   bca90:	d319      	bcc.n	bcac6 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   bca92:	4638      	mov	r0, r7
   bca94:	f004 fd6f 	bl	c1576 <strlen>
   bca98:	4540      	cmp	r0, r8
   bca9a:	d214      	bcs.n	bcac6 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   bca9c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bca9e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bcaa0:	4629      	mov	r1, r5
   bcaa2:	4638      	mov	r0, r7
   bcaa4:	f004 fd37 	bl	c1516 <strcmp>
   bcaa8:	b158      	cbz	r0, bcac2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   bcaaa:	4642      	mov	r2, r8
   bcaac:	2100      	movs	r1, #0
   bcaae:	4628      	mov	r0, r5
   bcab0:	f004 fc96 	bl	c13e0 <memset>
                strcpy(p, value);
   bcab4:	4639      	mov	r1, r7
   bcab6:	4628      	mov	r0, r5
   bcab8:	f004 fd37 	bl	c152a <strcpy>
                updateHash();
   bcabc:	4620      	mov	r0, r4
   bcabe:	f7ff ffcd 	bl	bca5c <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   bcac2:	2501      	movs	r5, #1
   bcac4:	e000      	b.n	bcac8 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   bcac6:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bcac8:	6860      	ldr	r0, [r4, #4]
   bcaca:	f7ff ff0f 	bl	bc8ec <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bcace:	4628      	mov	r0, r5
   bcad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcad4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bcad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bcad6:	4604      	mov	r4, r0
   bcad8:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   bcada:	f7ff ffa7 	bl	bca2c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   bcade:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   bcae2:	4606      	mov	r6, r0
    if (logData) {
   bcae4:	b193      	cbz	r3, bcb0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   bcae6:	4f29      	ldr	r7, [pc, #164]	; (bcb8c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcae8:	4929      	ldr	r1, [pc, #164]	; (bcb90 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   bcaea:	462a      	mov	r2, r5
   bcaec:	4638      	mov	r0, r7
   bcaee:	f7f7 fb26 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   bcaf2:	68a1      	ldr	r1, [r4, #8]
   bcaf4:	462a      	mov	r2, r5
   bcaf6:	4638      	mov	r0, r7
   bcaf8:	f7ff fefa 	bl	bc8f0 <_ZNK5spark6Logger4dumpEPKvj>
   bcafc:	2300      	movs	r3, #0
   bcafe:	9300      	str	r3, [sp, #0]
   bcb00:	4a24      	ldr	r2, [pc, #144]	; (bcb94 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   bcb02:	6839      	ldr	r1, [r7, #0]
   bcb04:	2301      	movs	r3, #1
   bcb06:	201e      	movs	r0, #30
   bcb08:	f000 fb30 	bl	bd16c <log_write>
    if (dataSize >= 12 && 
   bcb0c:	2d0b      	cmp	r5, #11
   bcb0e:	d923      	bls.n	bcb58 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   bcb10:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bcb12:	6922      	ldr	r2, [r4, #16]
   bcb14:	6819      	ldr	r1, [r3, #0]
   bcb16:	4291      	cmp	r1, r2
   bcb18:	d11f      	bne.n	bcb5a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   bcb1a:	8899      	ldrh	r1, [r3, #4]
   bcb1c:	8aa2      	ldrh	r2, [r4, #20]
   bcb1e:	4291      	cmp	r1, r2
   bcb20:	d11b      	bne.n	bcb5a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   bcb22:	88d9      	ldrh	r1, [r3, #6]
   bcb24:	b2aa      	uxth	r2, r5
   bcb26:	4291      	cmp	r1, r2
   bcb28:	d817      	bhi.n	bcb5a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bcb2a:	689a      	ldr	r2, [r3, #8]
   bcb2c:	42b2      	cmp	r2, r6
   bcb2e:	d114      	bne.n	bcb5a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   bcb30:	68e2      	ldr	r2, [r4, #12]
   bcb32:	42aa      	cmp	r2, r5
   bcb34:	d905      	bls.n	bcb42 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   bcb36:	2100      	movs	r1, #0
   bcb38:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bcb3a:	68e2      	ldr	r2, [r4, #12]
   bcb3c:	3501      	adds	r5, #1
   bcb3e:	42aa      	cmp	r2, r5
   bcb40:	d8fa      	bhi.n	bcb38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bcb42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bcb46:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bcb48:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bcb4a:	68a5      	ldr	r5, [r4, #8]
   bcb4c:	f7ff ff6e 	bl	bca2c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bcb50:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bcb52:	2001      	movs	r0, #1
}
   bcb54:	b003      	add	sp, #12
   bcb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bcb58:	b19d      	cbz	r5, bcb82 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   bcb5a:	68a1      	ldr	r1, [r4, #8]
   bcb5c:	680a      	ldr	r2, [r1, #0]
   bcb5e:	b192      	cbz	r2, bcb86 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bcb60:	6888      	ldr	r0, [r1, #8]
   bcb62:	888b      	ldrh	r3, [r1, #4]
   bcb64:	9001      	str	r0, [sp, #4]
   bcb66:	88c9      	ldrh	r1, [r1, #6]
   bcb68:	4808      	ldr	r0, [pc, #32]	; (bcb8c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcb6a:	9100      	str	r1, [sp, #0]
   bcb6c:	490a      	ldr	r1, [pc, #40]	; (bcb98 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   bcb6e:	f7fa ffdd 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bcb72:	e9cd 5600 	strd	r5, r6, [sp]
   bcb76:	8aa3      	ldrh	r3, [r4, #20]
   bcb78:	6922      	ldr	r2, [r4, #16]
   bcb7a:	4908      	ldr	r1, [pc, #32]	; (bcb9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   bcb7c:	4803      	ldr	r0, [pc, #12]	; (bcb8c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcb7e:	f7fa ffd5 	bl	b7b2c <_ZNK5spark6Logger5traceEPKcz>
   bcb82:	2000      	movs	r0, #0
   bcb84:	e7e6      	b.n	bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bcb86:	4610      	mov	r0, r2
   bcb88:	e7e4      	b.n	bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bcb8a:	bf00      	nop
   bcb8c:	2003e650 	.word	0x2003e650
   bcb90:	000c5448 	.word	0x000c5448
   bcb94:	000c5653 	.word	0x000c5653
   bcb98:	000c5460 	.word	0x000c5460
   bcb9c:	000c5491 	.word	0x000c5491

000bcba0 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bcba0:	b538      	push	{r3, r4, r5, lr}
   bcba2:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bcba4:	68c2      	ldr	r2, [r0, #12]
   bcba6:	6880      	ldr	r0, [r0, #8]
   bcba8:	2100      	movs	r1, #0
   bcbaa:	f004 fc19 	bl	c13e0 <memset>
    savedDataHeader->magic = savedDataMagic;
   bcbae:	68a3      	ldr	r3, [r4, #8]
   bcbb0:	6922      	ldr	r2, [r4, #16]
   bcbb2:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bcbb4:	68a3      	ldr	r3, [r4, #8]
   bcbb6:	8aa2      	ldrh	r2, [r4, #20]
   bcbb8:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bcbba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bcbbe:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bcbc0:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bcbc2:	68a5      	ldr	r5, [r4, #8]
   bcbc4:	f7ff ff32 	bl	bca2c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bcbc8:	60a8      	str	r0, [r5, #8]
}
   bcbca:	bd38      	pop	{r3, r4, r5, pc}

000bcbcc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bcbcc:	b508      	push	{r3, lr}
   bcbce:	4b02      	ldr	r3, [pc, #8]	; (bcbd8 <cellular_signal+0xc>)
   bcbd0:	681b      	ldr	r3, [r3, #0]
   bcbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcbd4:	9301      	str	r3, [sp, #4]
   bcbd6:	bd08      	pop	{r3, pc}
   bcbd8:	00030274 	.word	0x00030274

000bcbdc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bcbdc:	b508      	push	{r3, lr}
   bcbde:	4b02      	ldr	r3, [pc, #8]	; (bcbe8 <os_thread_create+0xc>)
   bcbe0:	681b      	ldr	r3, [r3, #0]
   bcbe2:	685b      	ldr	r3, [r3, #4]
   bcbe4:	9301      	str	r3, [sp, #4]
   bcbe6:	bd08      	pop	{r3, pc}
   bcbe8:	00030248 	.word	0x00030248

000bcbec <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bcbec:	b508      	push	{r3, lr}
   bcbee:	4b02      	ldr	r3, [pc, #8]	; (bcbf8 <os_thread_is_current+0xc>)
   bcbf0:	681b      	ldr	r3, [r3, #0]
   bcbf2:	689b      	ldr	r3, [r3, #8]
   bcbf4:	9301      	str	r3, [sp, #4]
   bcbf6:	bd08      	pop	{r3, pc}
   bcbf8:	00030248 	.word	0x00030248

000bcbfc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bcbfc:	b508      	push	{r3, lr}
   bcbfe:	4b02      	ldr	r3, [pc, #8]	; (bcc08 <os_thread_join+0xc>)
   bcc00:	681b      	ldr	r3, [r3, #0]
   bcc02:	691b      	ldr	r3, [r3, #16]
   bcc04:	9301      	str	r3, [sp, #4]
   bcc06:	bd08      	pop	{r3, pc}
   bcc08:	00030248 	.word	0x00030248

000bcc0c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bcc0c:	b508      	push	{r3, lr}
   bcc0e:	4b02      	ldr	r3, [pc, #8]	; (bcc18 <os_thread_cleanup+0xc>)
   bcc10:	681b      	ldr	r3, [r3, #0]
   bcc12:	695b      	ldr	r3, [r3, #20]
   bcc14:	9301      	str	r3, [sp, #4]
   bcc16:	bd08      	pop	{r3, pc}
   bcc18:	00030248 	.word	0x00030248

000bcc1c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bcc1c:	b508      	push	{r3, lr}
   bcc1e:	4b02      	ldr	r3, [pc, #8]	; (bcc28 <os_mutex_create+0xc>)
   bcc20:	681b      	ldr	r3, [r3, #0]
   bcc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcc24:	9301      	str	r3, [sp, #4]
   bcc26:	bd08      	pop	{r3, pc}
   bcc28:	00030248 	.word	0x00030248

000bcc2c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bcc2c:	b508      	push	{r3, lr}
   bcc2e:	4b02      	ldr	r3, [pc, #8]	; (bcc38 <os_mutex_lock+0xc>)
   bcc30:	681b      	ldr	r3, [r3, #0]
   bcc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bcc34:	9301      	str	r3, [sp, #4]
   bcc36:	bd08      	pop	{r3, pc}
   bcc38:	00030248 	.word	0x00030248

000bcc3c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bcc3c:	b508      	push	{r3, lr}
   bcc3e:	4b02      	ldr	r3, [pc, #8]	; (bcc48 <os_mutex_unlock+0xc>)
   bcc40:	681b      	ldr	r3, [r3, #0]
   bcc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcc44:	9301      	str	r3, [sp, #4]
   bcc46:	bd08      	pop	{r3, pc}
   bcc48:	00030248 	.word	0x00030248

000bcc4c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bcc4c:	b508      	push	{r3, lr}
   bcc4e:	4b02      	ldr	r3, [pc, #8]	; (bcc58 <os_mutex_recursive_create+0xc>)
   bcc50:	681b      	ldr	r3, [r3, #0]
   bcc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcc54:	9301      	str	r3, [sp, #4]
   bcc56:	bd08      	pop	{r3, pc}
   bcc58:	00030248 	.word	0x00030248

000bcc5c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bcc5c:	b508      	push	{r3, lr}
   bcc5e:	4b02      	ldr	r3, [pc, #8]	; (bcc68 <os_mutex_recursive_destroy+0xc>)
   bcc60:	681b      	ldr	r3, [r3, #0]
   bcc62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcc64:	9301      	str	r3, [sp, #4]
   bcc66:	bd08      	pop	{r3, pc}
   bcc68:	00030248 	.word	0x00030248

000bcc6c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bcc6c:	b508      	push	{r3, lr}
   bcc6e:	4b02      	ldr	r3, [pc, #8]	; (bcc78 <os_mutex_recursive_lock+0xc>)
   bcc70:	681b      	ldr	r3, [r3, #0]
   bcc72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcc74:	9301      	str	r3, [sp, #4]
   bcc76:	bd08      	pop	{r3, pc}
   bcc78:	00030248 	.word	0x00030248

000bcc7c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bcc7c:	b508      	push	{r3, lr}
   bcc7e:	4b02      	ldr	r3, [pc, #8]	; (bcc88 <os_mutex_recursive_unlock+0xc>)
   bcc80:	681b      	ldr	r3, [r3, #0]
   bcc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcc84:	9301      	str	r3, [sp, #4]
   bcc86:	bd08      	pop	{r3, pc}
   bcc88:	00030248 	.word	0x00030248

000bcc8c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bcc8c:	b508      	push	{r3, lr}
   bcc8e:	4b02      	ldr	r3, [pc, #8]	; (bcc98 <os_thread_exit+0xc>)
   bcc90:	681b      	ldr	r3, [r3, #0]
   bcc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bcc94:	9301      	str	r3, [sp, #4]
   bcc96:	bd08      	pop	{r3, pc}
   bcc98:	00030248 	.word	0x00030248

000bcc9c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bcc9c:	b508      	push	{r3, lr}
   bcc9e:	4b02      	ldr	r3, [pc, #8]	; (bcca8 <HAL_Core_Runtime_Info+0xc>)
   bcca0:	681b      	ldr	r3, [r3, #0]
   bcca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcca4:	9301      	str	r3, [sp, #4]
   bcca6:	bd08      	pop	{r3, pc}
   bcca8:	00030234 	.word	0x00030234

000bccac <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bccac:	b508      	push	{r3, lr}
   bccae:	4b02      	ldr	r3, [pc, #8]	; (bccb8 <HAL_Feature_Set+0xc>)
   bccb0:	681b      	ldr	r3, [r3, #0]
   bccb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bccb4:	9301      	str	r3, [sp, #4]
   bccb6:	bd08      	pop	{r3, pc}
   bccb8:	00030234 	.word	0x00030234

000bccbc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bccbc:	b508      	push	{r3, lr}
   bccbe:	4b02      	ldr	r3, [pc, #8]	; (bccc8 <HAL_RNG_GetRandomNumber+0xc>)
   bccc0:	681b      	ldr	r3, [r3, #0]
   bccc2:	685b      	ldr	r3, [r3, #4]
   bccc4:	9301      	str	r3, [sp, #4]
   bccc6:	bd08      	pop	{r3, pc}
   bccc8:	00030218 	.word	0x00030218

000bcccc <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bcccc:	b508      	push	{r3, lr}
   bccce:	4b02      	ldr	r3, [pc, #8]	; (bccd8 <HAL_Delay_Milliseconds+0xc>)
   bccd0:	681b      	ldr	r3, [r3, #0]
   bccd2:	689b      	ldr	r3, [r3, #8]
   bccd4:	9301      	str	r3, [sp, #4]
   bccd6:	bd08      	pop	{r3, pc}
   bccd8:	00030218 	.word	0x00030218

000bccdc <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bccdc:	b508      	push	{r3, lr}
   bccde:	4b02      	ldr	r3, [pc, #8]	; (bcce8 <HAL_Delay_Microseconds+0xc>)
   bcce0:	681b      	ldr	r3, [r3, #0]
   bcce2:	68db      	ldr	r3, [r3, #12]
   bcce4:	9301      	str	r3, [sp, #4]
   bcce6:	bd08      	pop	{r3, pc}
   bcce8:	00030218 	.word	0x00030218

000bccec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bccec:	b508      	push	{r3, lr}
   bccee:	4b02      	ldr	r3, [pc, #8]	; (bccf8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bccf0:	681b      	ldr	r3, [r3, #0]
   bccf2:	695b      	ldr	r3, [r3, #20]
   bccf4:	9301      	str	r3, [sp, #4]
   bccf6:	bd08      	pop	{r3, pc}
   bccf8:	00030218 	.word	0x00030218

000bccfc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bccfc:	b508      	push	{r3, lr}
   bccfe:	4b02      	ldr	r3, [pc, #8]	; (bcd08 <hal_rtc_time_is_valid+0xc>)
   bcd00:	681b      	ldr	r3, [r3, #0]
   bcd02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcd04:	9301      	str	r3, [sp, #4]
   bcd06:	bd08      	pop	{r3, pc}
   bcd08:	00030218 	.word	0x00030218

000bcd0c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bcd0c:	b508      	push	{r3, lr}
   bcd0e:	4b02      	ldr	r3, [pc, #8]	; (bcd18 <hal_timer_millis+0xc>)
   bcd10:	681b      	ldr	r3, [r3, #0]
   bcd12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bcd14:	9301      	str	r3, [sp, #4]
   bcd16:	bd08      	pop	{r3, pc}
   bcd18:	00030218 	.word	0x00030218

000bcd1c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bcd1c:	b508      	push	{r3, lr}
   bcd1e:	4b02      	ldr	r3, [pc, #8]	; (bcd28 <hal_rtc_get_time+0xc>)
   bcd20:	681b      	ldr	r3, [r3, #0]
   bcd22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcd24:	9301      	str	r3, [sp, #4]
   bcd26:	bd08      	pop	{r3, pc}
   bcd28:	00030218 	.word	0x00030218

000bcd2c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bcd2c:	b508      	push	{r3, lr}
   bcd2e:	4b02      	ldr	r3, [pc, #8]	; (bcd38 <hal_rtc_set_time+0xc>)
   bcd30:	681b      	ldr	r3, [r3, #0]
   bcd32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bcd34:	9301      	str	r3, [sp, #4]
   bcd36:	bd08      	pop	{r3, pc}
   bcd38:	00030218 	.word	0x00030218

000bcd3c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bcd3c:	b508      	push	{r3, lr}
   bcd3e:	4b02      	ldr	r3, [pc, #8]	; (bcd48 <HAL_Validate_Pin_Function+0xc>)
   bcd40:	681b      	ldr	r3, [r3, #0]
   bcd42:	685b      	ldr	r3, [r3, #4]
   bcd44:	9301      	str	r3, [sp, #4]
   bcd46:	bd08      	pop	{r3, pc}
   bcd48:	0003022c 	.word	0x0003022c

000bcd4c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bcd4c:	b508      	push	{r3, lr}
   bcd4e:	4b02      	ldr	r3, [pc, #8]	; (bcd58 <HAL_Pin_Mode+0xc>)
   bcd50:	681b      	ldr	r3, [r3, #0]
   bcd52:	689b      	ldr	r3, [r3, #8]
   bcd54:	9301      	str	r3, [sp, #4]
   bcd56:	bd08      	pop	{r3, pc}
   bcd58:	0003022c 	.word	0x0003022c

000bcd5c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bcd5c:	b508      	push	{r3, lr}
   bcd5e:	4b02      	ldr	r3, [pc, #8]	; (bcd68 <HAL_Get_Pin_Mode+0xc>)
   bcd60:	681b      	ldr	r3, [r3, #0]
   bcd62:	68db      	ldr	r3, [r3, #12]
   bcd64:	9301      	str	r3, [sp, #4]
   bcd66:	bd08      	pop	{r3, pc}
   bcd68:	0003022c 	.word	0x0003022c

000bcd6c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bcd6c:	b508      	push	{r3, lr}
   bcd6e:	4b02      	ldr	r3, [pc, #8]	; (bcd78 <HAL_GPIO_Write+0xc>)
   bcd70:	681b      	ldr	r3, [r3, #0]
   bcd72:	691b      	ldr	r3, [r3, #16]
   bcd74:	9301      	str	r3, [sp, #4]
   bcd76:	bd08      	pop	{r3, pc}
   bcd78:	0003022c 	.word	0x0003022c

000bcd7c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bcd7c:	b508      	push	{r3, lr}
   bcd7e:	4b02      	ldr	r3, [pc, #8]	; (bcd88 <HAL_GPIO_Read+0xc>)
   bcd80:	681b      	ldr	r3, [r3, #0]
   bcd82:	695b      	ldr	r3, [r3, #20]
   bcd84:	9301      	str	r3, [sp, #4]
   bcd86:	bd08      	pop	{r3, pc}
   bcd88:	0003022c 	.word	0x0003022c

000bcd8c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bcd8c:	b508      	push	{r3, lr}
   bcd8e:	4b02      	ldr	r3, [pc, #8]	; (bcd98 <HAL_Interrupts_Attach+0xc>)
   bcd90:	681b      	ldr	r3, [r3, #0]
   bcd92:	699b      	ldr	r3, [r3, #24]
   bcd94:	9301      	str	r3, [sp, #4]
   bcd96:	bd08      	pop	{r3, pc}
   bcd98:	0003022c 	.word	0x0003022c

000bcd9c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bcd9c:	b508      	push	{r3, lr}
   bcd9e:	4b02      	ldr	r3, [pc, #8]	; (bcda8 <HAL_Interrupts_Detach+0xc>)
   bcda0:	681b      	ldr	r3, [r3, #0]
   bcda2:	69db      	ldr	r3, [r3, #28]
   bcda4:	9301      	str	r3, [sp, #4]
   bcda6:	bd08      	pop	{r3, pc}
   bcda8:	0003022c 	.word	0x0003022c

000bcdac <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bcdac:	b508      	push	{r3, lr}
   bcdae:	4b02      	ldr	r3, [pc, #8]	; (bcdb8 <hal_adc_read+0xc>)
   bcdb0:	681b      	ldr	r3, [r3, #0]
   bcdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcdb4:	9301      	str	r3, [sp, #4]
   bcdb6:	bd08      	pop	{r3, pc}
   bcdb8:	0003022c 	.word	0x0003022c

000bcdbc <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bcdbc:	b508      	push	{r3, lr}
   bcdbe:	4b02      	ldr	r3, [pc, #8]	; (bcdc8 <hal_i2c_begin+0xc>)
   bcdc0:	681b      	ldr	r3, [r3, #0]
   bcdc2:	68db      	ldr	r3, [r3, #12]
   bcdc4:	9301      	str	r3, [sp, #4]
   bcdc6:	bd08      	pop	{r3, pc}
   bcdc8:	00030228 	.word	0x00030228

000bcdcc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bcdcc:	b508      	push	{r3, lr}
   bcdce:	4b02      	ldr	r3, [pc, #8]	; (bcdd8 <hal_i2c_begin_transmission+0xc>)
   bcdd0:	681b      	ldr	r3, [r3, #0]
   bcdd2:	699b      	ldr	r3, [r3, #24]
   bcdd4:	9301      	str	r3, [sp, #4]
   bcdd6:	bd08      	pop	{r3, pc}
   bcdd8:	00030228 	.word	0x00030228

000bcddc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bcddc:	b508      	push	{r3, lr}
   bcdde:	4b02      	ldr	r3, [pc, #8]	; (bcde8 <hal_i2c_end_transmission+0xc>)
   bcde0:	681b      	ldr	r3, [r3, #0]
   bcde2:	69db      	ldr	r3, [r3, #28]
   bcde4:	9301      	str	r3, [sp, #4]
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	00030228 	.word	0x00030228

000bcdec <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bcdec:	b508      	push	{r3, lr}
   bcdee:	4b02      	ldr	r3, [pc, #8]	; (bcdf8 <hal_i2c_write+0xc>)
   bcdf0:	681b      	ldr	r3, [r3, #0]
   bcdf2:	6a1b      	ldr	r3, [r3, #32]
   bcdf4:	9301      	str	r3, [sp, #4]
   bcdf6:	bd08      	pop	{r3, pc}
   bcdf8:	00030228 	.word	0x00030228

000bcdfc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bcdfc:	b508      	push	{r3, lr}
   bcdfe:	4b02      	ldr	r3, [pc, #8]	; (bce08 <hal_i2c_available+0xc>)
   bce00:	681b      	ldr	r3, [r3, #0]
   bce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bce04:	9301      	str	r3, [sp, #4]
   bce06:	bd08      	pop	{r3, pc}
   bce08:	00030228 	.word	0x00030228

000bce0c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bce0c:	b508      	push	{r3, lr}
   bce0e:	4b02      	ldr	r3, [pc, #8]	; (bce18 <hal_i2c_read+0xc>)
   bce10:	681b      	ldr	r3, [r3, #0]
   bce12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bce14:	9301      	str	r3, [sp, #4]
   bce16:	bd08      	pop	{r3, pc}
   bce18:	00030228 	.word	0x00030228

000bce1c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bce1c:	b508      	push	{r3, lr}
   bce1e:	4b02      	ldr	r3, [pc, #8]	; (bce28 <hal_i2c_peek+0xc>)
   bce20:	681b      	ldr	r3, [r3, #0]
   bce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bce24:	9301      	str	r3, [sp, #4]
   bce26:	bd08      	pop	{r3, pc}
   bce28:	00030228 	.word	0x00030228

000bce2c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bce2c:	b508      	push	{r3, lr}
   bce2e:	4b02      	ldr	r3, [pc, #8]	; (bce38 <hal_i2c_flush+0xc>)
   bce30:	681b      	ldr	r3, [r3, #0]
   bce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bce34:	9301      	str	r3, [sp, #4]
   bce36:	bd08      	pop	{r3, pc}
   bce38:	00030228 	.word	0x00030228

000bce3c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bce3c:	b508      	push	{r3, lr}
   bce3e:	4b02      	ldr	r3, [pc, #8]	; (bce48 <hal_i2c_is_enabled+0xc>)
   bce40:	681b      	ldr	r3, [r3, #0]
   bce42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	bd08      	pop	{r3, pc}
   bce48:	00030228 	.word	0x00030228

000bce4c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bce4c:	b508      	push	{r3, lr}
   bce4e:	4b02      	ldr	r3, [pc, #8]	; (bce58 <hal_i2c_init+0xc>)
   bce50:	681b      	ldr	r3, [r3, #0]
   bce52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bce54:	9301      	str	r3, [sp, #4]
   bce56:	bd08      	pop	{r3, pc}
   bce58:	00030228 	.word	0x00030228

000bce5c <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bce5c:	b508      	push	{r3, lr}
   bce5e:	4b02      	ldr	r3, [pc, #8]	; (bce68 <hal_i2c_lock+0xc>)
   bce60:	681b      	ldr	r3, [r3, #0]
   bce62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bce64:	9301      	str	r3, [sp, #4]
   bce66:	bd08      	pop	{r3, pc}
   bce68:	00030228 	.word	0x00030228

000bce6c <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bce6c:	b508      	push	{r3, lr}
   bce6e:	4b02      	ldr	r3, [pc, #8]	; (bce78 <hal_i2c_unlock+0xc>)
   bce70:	681b      	ldr	r3, [r3, #0]
   bce72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bce74:	9301      	str	r3, [sp, #4]
   bce76:	bd08      	pop	{r3, pc}
   bce78:	00030228 	.word	0x00030228

000bce7c <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bce7c:	b508      	push	{r3, lr}
   bce7e:	4b02      	ldr	r3, [pc, #8]	; (bce88 <hal_i2c_request_ex+0xc>)
   bce80:	681b      	ldr	r3, [r3, #0]
   bce82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bce84:	9301      	str	r3, [sp, #4]
   bce86:	bd08      	pop	{r3, pc}
   bce88:	00030228 	.word	0x00030228

000bce8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bce8c:	b508      	push	{r3, lr}
   bce8e:	4b02      	ldr	r3, [pc, #8]	; (bce98 <inet_inet_ntop+0xc>)
   bce90:	681b      	ldr	r3, [r3, #0]
   bce92:	695b      	ldr	r3, [r3, #20]
   bce94:	9301      	str	r3, [sp, #4]
   bce96:	bd08      	pop	{r3, pc}
   bce98:	00030264 	.word	0x00030264

000bce9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bce9c:	b508      	push	{r3, lr}
   bce9e:	4b02      	ldr	r3, [pc, #8]	; (bcea8 <netdb_freeaddrinfo+0xc>)
   bcea0:	681b      	ldr	r3, [r3, #0]
   bcea2:	689b      	ldr	r3, [r3, #8]
   bcea4:	9301      	str	r3, [sp, #4]
   bcea6:	bd08      	pop	{r3, pc}
   bcea8:	00030268 	.word	0x00030268

000bceac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bceac:	b508      	push	{r3, lr}
   bceae:	4b02      	ldr	r3, [pc, #8]	; (bceb8 <netdb_getaddrinfo+0xc>)
   bceb0:	681b      	ldr	r3, [r3, #0]
   bceb2:	68db      	ldr	r3, [r3, #12]
   bceb4:	9301      	str	r3, [sp, #4]
   bceb6:	bd08      	pop	{r3, pc}
   bceb8:	00030268 	.word	0x00030268

000bcebc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bcebc:	b508      	push	{r3, lr}
   bcebe:	4b02      	ldr	r3, [pc, #8]	; (bcec8 <hal_spi_begin+0xc>)
   bcec0:	681b      	ldr	r3, [r3, #0]
   bcec2:	681b      	ldr	r3, [r3, #0]
   bcec4:	9301      	str	r3, [sp, #4]
   bcec6:	bd08      	pop	{r3, pc}
   bcec8:	00030230 	.word	0x00030230

000bcecc <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bcecc:	b508      	push	{r3, lr}
   bcece:	4b02      	ldr	r3, [pc, #8]	; (bced8 <hal_spi_end+0xc>)
   bced0:	681b      	ldr	r3, [r3, #0]
   bced2:	685b      	ldr	r3, [r3, #4]
   bced4:	9301      	str	r3, [sp, #4]
   bced6:	bd08      	pop	{r3, pc}
   bced8:	00030230 	.word	0x00030230

000bcedc <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bcedc:	b508      	push	{r3, lr}
   bcede:	4b02      	ldr	r3, [pc, #8]	; (bcee8 <hal_spi_transfer+0xc>)
   bcee0:	681b      	ldr	r3, [r3, #0]
   bcee2:	695b      	ldr	r3, [r3, #20]
   bcee4:	9301      	str	r3, [sp, #4]
   bcee6:	bd08      	pop	{r3, pc}
   bcee8:	00030230 	.word	0x00030230

000bceec <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bceec:	b508      	push	{r3, lr}
   bceee:	4b02      	ldr	r3, [pc, #8]	; (bcef8 <hal_spi_init+0xc>)
   bcef0:	681b      	ldr	r3, [r3, #0]
   bcef2:	69db      	ldr	r3, [r3, #28]
   bcef4:	9301      	str	r3, [sp, #4]
   bcef6:	bd08      	pop	{r3, pc}
   bcef8:	00030230 	.word	0x00030230

000bcefc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bcefc:	b508      	push	{r3, lr}
   bcefe:	4b02      	ldr	r3, [pc, #8]	; (bcf08 <hal_spi_is_enabled+0xc>)
   bcf00:	681b      	ldr	r3, [r3, #0]
   bcf02:	6a1b      	ldr	r3, [r3, #32]
   bcf04:	9301      	str	r3, [sp, #4]
   bcf06:	bd08      	pop	{r3, pc}
   bcf08:	00030230 	.word	0x00030230

000bcf0c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bcf0c:	b508      	push	{r3, lr}
   bcf0e:	4b02      	ldr	r3, [pc, #8]	; (bcf18 <hal_spi_info+0xc>)
   bcf10:	681b      	ldr	r3, [r3, #0]
   bcf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcf14:	9301      	str	r3, [sp, #4]
   bcf16:	bd08      	pop	{r3, pc}
   bcf18:	00030230 	.word	0x00030230

000bcf1c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bcf1c:	b508      	push	{r3, lr}
   bcf1e:	4b02      	ldr	r3, [pc, #8]	; (bcf28 <hal_spi_set_settings+0xc>)
   bcf20:	681b      	ldr	r3, [r3, #0]
   bcf22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcf24:	9301      	str	r3, [sp, #4]
   bcf26:	bd08      	pop	{r3, pc}
   bcf28:	00030230 	.word	0x00030230

000bcf2c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bcf2c:	b508      	push	{r3, lr}
   bcf2e:	4b02      	ldr	r3, [pc, #8]	; (bcf38 <hal_spi_acquire+0xc>)
   bcf30:	681b      	ldr	r3, [r3, #0]
   bcf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcf34:	9301      	str	r3, [sp, #4]
   bcf36:	bd08      	pop	{r3, pc}
   bcf38:	00030230 	.word	0x00030230

000bcf3c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bcf3c:	b508      	push	{r3, lr}
   bcf3e:	4b02      	ldr	r3, [pc, #8]	; (bcf48 <hal_spi_release+0xc>)
   bcf40:	681b      	ldr	r3, [r3, #0]
   bcf42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcf44:	9301      	str	r3, [sp, #4]
   bcf46:	bd08      	pop	{r3, pc}
   bcf48:	00030230 	.word	0x00030230

000bcf4c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bcf4c:	b508      	push	{r3, lr}
   bcf4e:	4b02      	ldr	r3, [pc, #8]	; (bcf58 <_open+0xc>)
   bcf50:	681b      	ldr	r3, [r3, #0]
   bcf52:	681b      	ldr	r3, [r3, #0]
   bcf54:	9301      	str	r3, [sp, #4]
   bcf56:	bd08      	pop	{r3, pc}
   bcf58:	00030284 	.word	0x00030284

000bcf5c <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bcf5c:	b508      	push	{r3, lr}
   bcf5e:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <_write+0xc>)
   bcf60:	681b      	ldr	r3, [r3, #0]
   bcf62:	685b      	ldr	r3, [r3, #4]
   bcf64:	9301      	str	r3, [sp, #4]
   bcf66:	bd08      	pop	{r3, pc}
   bcf68:	00030284 	.word	0x00030284

000bcf6c <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcf6c:	b508      	push	{r3, lr}
   bcf6e:	4b02      	ldr	r3, [pc, #8]	; (bcf78 <_read+0xc>)
   bcf70:	681b      	ldr	r3, [r3, #0]
   bcf72:	689b      	ldr	r3, [r3, #8]
   bcf74:	9301      	str	r3, [sp, #4]
   bcf76:	bd08      	pop	{r3, pc}
   bcf78:	00030284 	.word	0x00030284

000bcf7c <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcf7c:	b508      	push	{r3, lr}
   bcf7e:	4b02      	ldr	r3, [pc, #8]	; (bcf88 <_close+0xc>)
   bcf80:	681b      	ldr	r3, [r3, #0]
   bcf82:	68db      	ldr	r3, [r3, #12]
   bcf84:	9301      	str	r3, [sp, #4]
   bcf86:	bd08      	pop	{r3, pc}
   bcf88:	00030284 	.word	0x00030284

000bcf8c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bcf8c:	b508      	push	{r3, lr}
   bcf8e:	4b02      	ldr	r3, [pc, #8]	; (bcf98 <_fstat+0xc>)
   bcf90:	681b      	ldr	r3, [r3, #0]
   bcf92:	695b      	ldr	r3, [r3, #20]
   bcf94:	9301      	str	r3, [sp, #4]
   bcf96:	bd08      	pop	{r3, pc}
   bcf98:	00030284 	.word	0x00030284

000bcf9c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bcf9c:	b508      	push	{r3, lr}
   bcf9e:	4b02      	ldr	r3, [pc, #8]	; (bcfa8 <_lseek+0xc>)
   bcfa0:	681b      	ldr	r3, [r3, #0]
   bcfa2:	6a1b      	ldr	r3, [r3, #32]
   bcfa4:	9301      	str	r3, [sp, #4]
   bcfa6:	bd08      	pop	{r3, pc}
   bcfa8:	00030284 	.word	0x00030284

000bcfac <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bcfac:	b508      	push	{r3, lr}
   bcfae:	4b02      	ldr	r3, [pc, #8]	; (bcfb8 <stat+0xc>)
   bcfb0:	681b      	ldr	r3, [r3, #0]
   bcfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcfb4:	9301      	str	r3, [sp, #4]
   bcfb6:	bd08      	pop	{r3, pc}
   bcfb8:	00030284 	.word	0x00030284

000bcfbc <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bcfbc:	b508      	push	{r3, lr}
   bcfbe:	4b02      	ldr	r3, [pc, #8]	; (bcfc8 <mkdir+0xc>)
   bcfc0:	681b      	ldr	r3, [r3, #0]
   bcfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcfc4:	9301      	str	r3, [sp, #4]
   bcfc6:	bd08      	pop	{r3, pc}
   bcfc8:	00030284 	.word	0x00030284

000bcfcc <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bcfcc:	b508      	push	{r3, lr}
   bcfce:	4b02      	ldr	r3, [pc, #8]	; (bcfd8 <_unlink+0xc>)
   bcfd0:	681b      	ldr	r3, [r3, #0]
   bcfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcfd4:	9301      	str	r3, [sp, #4]
   bcfd6:	bd08      	pop	{r3, pc}
   bcfd8:	00030284 	.word	0x00030284

000bcfdc <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bcfdc:	b508      	push	{r3, lr}
   bcfde:	4b02      	ldr	r3, [pc, #8]	; (bcfe8 <opendir+0xc>)
   bcfe0:	681b      	ldr	r3, [r3, #0]
   bcfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcfe4:	9301      	str	r3, [sp, #4]
   bcfe6:	bd08      	pop	{r3, pc}
   bcfe8:	00030284 	.word	0x00030284

000bcfec <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bcfec:	b508      	push	{r3, lr}
   bcfee:	4b02      	ldr	r3, [pc, #8]	; (bcff8 <readdir+0xc>)
   bcff0:	681b      	ldr	r3, [r3, #0]
   bcff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcff4:	9301      	str	r3, [sp, #4]
   bcff6:	bd08      	pop	{r3, pc}
   bcff8:	00030284 	.word	0x00030284

000bcffc <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bcffc:	b508      	push	{r3, lr}
   bcffe:	4b02      	ldr	r3, [pc, #8]	; (bd008 <closedir+0xc>)
   bd000:	681b      	ldr	r3, [r3, #0]
   bd002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd004:	9301      	str	r3, [sp, #4]
   bd006:	bd08      	pop	{r3, pc}
   bd008:	00030284 	.word	0x00030284

000bd00c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd00c:	b508      	push	{r3, lr}
   bd00e:	4b02      	ldr	r3, [pc, #8]	; (bd018 <hal_usart_end+0xc>)
   bd010:	681b      	ldr	r3, [r3, #0]
   bd012:	689b      	ldr	r3, [r3, #8]
   bd014:	9301      	str	r3, [sp, #4]
   bd016:	bd08      	pop	{r3, pc}
   bd018:	0003023c 	.word	0x0003023c

000bd01c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd01c:	b508      	push	{r3, lr}
   bd01e:	4b02      	ldr	r3, [pc, #8]	; (bd028 <hal_usart_write+0xc>)
   bd020:	681b      	ldr	r3, [r3, #0]
   bd022:	68db      	ldr	r3, [r3, #12]
   bd024:	9301      	str	r3, [sp, #4]
   bd026:	bd08      	pop	{r3, pc}
   bd028:	0003023c 	.word	0x0003023c

000bd02c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd02c:	b508      	push	{r3, lr}
   bd02e:	4b02      	ldr	r3, [pc, #8]	; (bd038 <hal_usart_available+0xc>)
   bd030:	681b      	ldr	r3, [r3, #0]
   bd032:	691b      	ldr	r3, [r3, #16]
   bd034:	9301      	str	r3, [sp, #4]
   bd036:	bd08      	pop	{r3, pc}
   bd038:	0003023c 	.word	0x0003023c

000bd03c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd03c:	b508      	push	{r3, lr}
   bd03e:	4b02      	ldr	r3, [pc, #8]	; (bd048 <hal_usart_read+0xc>)
   bd040:	681b      	ldr	r3, [r3, #0]
   bd042:	695b      	ldr	r3, [r3, #20]
   bd044:	9301      	str	r3, [sp, #4]
   bd046:	bd08      	pop	{r3, pc}
   bd048:	0003023c 	.word	0x0003023c

000bd04c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd04c:	b508      	push	{r3, lr}
   bd04e:	4b02      	ldr	r3, [pc, #8]	; (bd058 <hal_usart_peek+0xc>)
   bd050:	681b      	ldr	r3, [r3, #0]
   bd052:	699b      	ldr	r3, [r3, #24]
   bd054:	9301      	str	r3, [sp, #4]
   bd056:	bd08      	pop	{r3, pc}
   bd058:	0003023c 	.word	0x0003023c

000bd05c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd05c:	b508      	push	{r3, lr}
   bd05e:	4b02      	ldr	r3, [pc, #8]	; (bd068 <hal_usart_flush+0xc>)
   bd060:	681b      	ldr	r3, [r3, #0]
   bd062:	69db      	ldr	r3, [r3, #28]
   bd064:	9301      	str	r3, [sp, #4]
   bd066:	bd08      	pop	{r3, pc}
   bd068:	0003023c 	.word	0x0003023c

000bd06c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd06c:	b508      	push	{r3, lr}
   bd06e:	4b02      	ldr	r3, [pc, #8]	; (bd078 <hal_usart_is_enabled+0xc>)
   bd070:	681b      	ldr	r3, [r3, #0]
   bd072:	6a1b      	ldr	r3, [r3, #32]
   bd074:	9301      	str	r3, [sp, #4]
   bd076:	bd08      	pop	{r3, pc}
   bd078:	0003023c 	.word	0x0003023c

000bd07c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd07c:	b508      	push	{r3, lr}
   bd07e:	4b02      	ldr	r3, [pc, #8]	; (bd088 <hal_usart_available_data_for_write+0xc>)
   bd080:	681b      	ldr	r3, [r3, #0]
   bd082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd084:	9301      	str	r3, [sp, #4]
   bd086:	bd08      	pop	{r3, pc}
   bd088:	0003023c 	.word	0x0003023c

000bd08c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd08c:	b508      	push	{r3, lr}
   bd08e:	4b02      	ldr	r3, [pc, #8]	; (bd098 <hal_usart_begin_config+0xc>)
   bd090:	681b      	ldr	r3, [r3, #0]
   bd092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd094:	9301      	str	r3, [sp, #4]
   bd096:	bd08      	pop	{r3, pc}
   bd098:	0003023c 	.word	0x0003023c

000bd09c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd09c:	b508      	push	{r3, lr}
   bd09e:	4b02      	ldr	r3, [pc, #8]	; (bd0a8 <hal_usart_init_ex+0xc>)
   bd0a0:	681b      	ldr	r3, [r3, #0]
   bd0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd0a4:	9301      	str	r3, [sp, #4]
   bd0a6:	bd08      	pop	{r3, pc}
   bd0a8:	0003023c 	.word	0x0003023c

000bd0ac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd0ac:	b508      	push	{r3, lr}
   bd0ae:	4b02      	ldr	r3, [pc, #8]	; (bd0b8 <HAL_USB_USART_Init+0xc>)
   bd0b0:	681b      	ldr	r3, [r3, #0]
   bd0b2:	681b      	ldr	r3, [r3, #0]
   bd0b4:	9301      	str	r3, [sp, #4]
   bd0b6:	bd08      	pop	{r3, pc}
   bd0b8:	0003024c 	.word	0x0003024c

000bd0bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd0bc:	b508      	push	{r3, lr}
   bd0be:	4b02      	ldr	r3, [pc, #8]	; (bd0c8 <HAL_USB_USART_Begin+0xc>)
   bd0c0:	681b      	ldr	r3, [r3, #0]
   bd0c2:	685b      	ldr	r3, [r3, #4]
   bd0c4:	9301      	str	r3, [sp, #4]
   bd0c6:	bd08      	pop	{r3, pc}
   bd0c8:	0003024c 	.word	0x0003024c

000bd0cc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd0cc:	b508      	push	{r3, lr}
   bd0ce:	4b02      	ldr	r3, [pc, #8]	; (bd0d8 <HAL_USB_USART_End+0xc>)
   bd0d0:	681b      	ldr	r3, [r3, #0]
   bd0d2:	689b      	ldr	r3, [r3, #8]
   bd0d4:	9301      	str	r3, [sp, #4]
   bd0d6:	bd08      	pop	{r3, pc}
   bd0d8:	0003024c 	.word	0x0003024c

000bd0dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd0dc:	b508      	push	{r3, lr}
   bd0de:	4b02      	ldr	r3, [pc, #8]	; (bd0e8 <HAL_USB_USART_Available_Data+0xc>)
   bd0e0:	681b      	ldr	r3, [r3, #0]
   bd0e2:	691b      	ldr	r3, [r3, #16]
   bd0e4:	9301      	str	r3, [sp, #4]
   bd0e6:	bd08      	pop	{r3, pc}
   bd0e8:	0003024c 	.word	0x0003024c

000bd0ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd0ec:	b508      	push	{r3, lr}
   bd0ee:	4b02      	ldr	r3, [pc, #8]	; (bd0f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd0f0:	681b      	ldr	r3, [r3, #0]
   bd0f2:	695b      	ldr	r3, [r3, #20]
   bd0f4:	9301      	str	r3, [sp, #4]
   bd0f6:	bd08      	pop	{r3, pc}
   bd0f8:	0003024c 	.word	0x0003024c

000bd0fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd0fc:	b508      	push	{r3, lr}
   bd0fe:	4b02      	ldr	r3, [pc, #8]	; (bd108 <HAL_USB_USART_Receive_Data+0xc>)
   bd100:	681b      	ldr	r3, [r3, #0]
   bd102:	699b      	ldr	r3, [r3, #24]
   bd104:	9301      	str	r3, [sp, #4]
   bd106:	bd08      	pop	{r3, pc}
   bd108:	0003024c 	.word	0x0003024c

000bd10c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd10c:	b508      	push	{r3, lr}
   bd10e:	4b02      	ldr	r3, [pc, #8]	; (bd118 <HAL_USB_USART_Send_Data+0xc>)
   bd110:	681b      	ldr	r3, [r3, #0]
   bd112:	69db      	ldr	r3, [r3, #28]
   bd114:	9301      	str	r3, [sp, #4]
   bd116:	bd08      	pop	{r3, pc}
   bd118:	0003024c 	.word	0x0003024c

000bd11c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd11c:	b508      	push	{r3, lr}
   bd11e:	4b02      	ldr	r3, [pc, #8]	; (bd128 <HAL_USB_USART_Flush_Data+0xc>)
   bd120:	681b      	ldr	r3, [r3, #0]
   bd122:	6a1b      	ldr	r3, [r3, #32]
   bd124:	9301      	str	r3, [sp, #4]
   bd126:	bd08      	pop	{r3, pc}
   bd128:	0003024c 	.word	0x0003024c

000bd12c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bd12c:	b508      	push	{r3, lr}
   bd12e:	4b02      	ldr	r3, [pc, #8]	; (bd138 <HAL_USB_USART_Is_Connected+0xc>)
   bd130:	681b      	ldr	r3, [r3, #0]
   bd132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd134:	9301      	str	r3, [sp, #4]
   bd136:	bd08      	pop	{r3, pc}
   bd138:	0003024c 	.word	0x0003024c

000bd13c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd13c:	b508      	push	{r3, lr}
   bd13e:	4b02      	ldr	r3, [pc, #8]	; (bd148 <panic_+0xc>)
   bd140:	681b      	ldr	r3, [r3, #0]
   bd142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd144:	9301      	str	r3, [sp, #4]
   bd146:	bd08      	pop	{r3, pc}
   bd148:	00030260 	.word	0x00030260

000bd14c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd14c:	b508      	push	{r3, lr}
   bd14e:	4b02      	ldr	r3, [pc, #8]	; (bd158 <log_message+0xc>)
   bd150:	681b      	ldr	r3, [r3, #0]
   bd152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd154:	9301      	str	r3, [sp, #4]
   bd156:	bd08      	pop	{r3, pc}
   bd158:	00030260 	.word	0x00030260

000bd15c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bd15c:	b508      	push	{r3, lr}
   bd15e:	4b02      	ldr	r3, [pc, #8]	; (bd168 <log_message_v+0xc>)
   bd160:	681b      	ldr	r3, [r3, #0]
   bd162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd164:	9301      	str	r3, [sp, #4]
   bd166:	bd08      	pop	{r3, pc}
   bd168:	00030260 	.word	0x00030260

000bd16c <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   bd16c:	b508      	push	{r3, lr}
   bd16e:	4b02      	ldr	r3, [pc, #8]	; (bd178 <log_write+0xc>)
   bd170:	681b      	ldr	r3, [r3, #0]
   bd172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd174:	9301      	str	r3, [sp, #4]
   bd176:	bd08      	pop	{r3, pc}
   bd178:	00030260 	.word	0x00030260

000bd17c <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   bd17c:	b508      	push	{r3, lr}
   bd17e:	4b02      	ldr	r3, [pc, #8]	; (bd188 <log_dump+0xc>)
   bd180:	681b      	ldr	r3, [r3, #0]
   bd182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd184:	9301      	str	r3, [sp, #4]
   bd186:	bd08      	pop	{r3, pc}
   bd188:	00030260 	.word	0x00030260

000bd18c <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd18c:	b508      	push	{r3, lr}
   bd18e:	4b02      	ldr	r3, [pc, #8]	; (bd198 <log_level_name+0xc>)
   bd190:	681b      	ldr	r3, [r3, #0]
   bd192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd194:	9301      	str	r3, [sp, #4]
   bd196:	bd08      	pop	{r3, pc}
   bd198:	00030260 	.word	0x00030260

000bd19c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd19c:	b508      	push	{r3, lr}
   bd19e:	4b02      	ldr	r3, [pc, #8]	; (bd1a8 <log_set_callbacks+0xc>)
   bd1a0:	681b      	ldr	r3, [r3, #0]
   bd1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd1a4:	9301      	str	r3, [sp, #4]
   bd1a6:	bd08      	pop	{r3, pc}
   bd1a8:	00030260 	.word	0x00030260

000bd1ac <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bd1ac:	b508      	push	{r3, lr}
   bd1ae:	4b03      	ldr	r3, [pc, #12]	; (bd1bc <diag_get_source+0x10>)
   bd1b0:	681b      	ldr	r3, [r3, #0]
   bd1b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd1b6:	9301      	str	r3, [sp, #4]
   bd1b8:	bd08      	pop	{r3, pc}
   bd1ba:	0000      	.short	0x0000
   bd1bc:	00030260 	.word	0x00030260

000bd1c0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd1c0:	b508      	push	{r3, lr}
   bd1c2:	4b02      	ldr	r3, [pc, #8]	; (bd1cc <system_mode+0xc>)
   bd1c4:	681b      	ldr	r3, [r3, #0]
   bd1c6:	681b      	ldr	r3, [r3, #0]
   bd1c8:	9301      	str	r3, [sp, #4]
   bd1ca:	bd08      	pop	{r3, pc}
   bd1cc:	00030220 	.word	0x00030220

000bd1d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd1d0:	b508      	push	{r3, lr}
   bd1d2:	4b02      	ldr	r3, [pc, #8]	; (bd1dc <set_system_mode+0xc>)
   bd1d4:	681b      	ldr	r3, [r3, #0]
   bd1d6:	685b      	ldr	r3, [r3, #4]
   bd1d8:	9301      	str	r3, [sp, #4]
   bd1da:	bd08      	pop	{r3, pc}
   bd1dc:	00030220 	.word	0x00030220

000bd1e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd1e0:	b508      	push	{r3, lr}
   bd1e2:	4b02      	ldr	r3, [pc, #8]	; (bd1ec <system_delay_ms+0xc>)
   bd1e4:	681b      	ldr	r3, [r3, #0]
   bd1e6:	695b      	ldr	r3, [r3, #20]
   bd1e8:	9301      	str	r3, [sp, #4]
   bd1ea:	bd08      	pop	{r3, pc}
   bd1ec:	00030220 	.word	0x00030220

000bd1f0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bd1f0:	b508      	push	{r3, lr}
   bd1f2:	4b02      	ldr	r3, [pc, #8]	; (bd1fc <system_subscribe_event+0xc>)
   bd1f4:	681b      	ldr	r3, [r3, #0]
   bd1f6:	6a1b      	ldr	r3, [r3, #32]
   bd1f8:	9301      	str	r3, [sp, #4]
   bd1fa:	bd08      	pop	{r3, pc}
   bd1fc:	00030220 	.word	0x00030220

000bd200 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bd200:	b508      	push	{r3, lr}
   bd202:	4b02      	ldr	r3, [pc, #8]	; (bd20c <system_thread_set_state+0xc>)
   bd204:	681b      	ldr	r3, [r3, #0]
   bd206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd208:	9301      	str	r3, [sp, #4]
   bd20a:	bd08      	pop	{r3, pc}
   bd20c:	00030220 	.word	0x00030220

000bd210 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd210:	b508      	push	{r3, lr}
   bd212:	4b02      	ldr	r3, [pc, #8]	; (bd21c <application_thread_current+0xc>)
   bd214:	681b      	ldr	r3, [r3, #0]
   bd216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd218:	9301      	str	r3, [sp, #4]
   bd21a:	bd08      	pop	{r3, pc}
   bd21c:	00030220 	.word	0x00030220

000bd220 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd220:	b508      	push	{r3, lr}
   bd222:	4b02      	ldr	r3, [pc, #8]	; (bd22c <application_thread_invoke+0xc>)
   bd224:	681b      	ldr	r3, [r3, #0]
   bd226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd228:	9301      	str	r3, [sp, #4]
   bd22a:	bd08      	pop	{r3, pc}
   bd22c:	00030220 	.word	0x00030220

000bd230 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd230:	b508      	push	{r3, lr}
   bd232:	4b02      	ldr	r3, [pc, #8]	; (bd23c <system_thread_get_state+0xc>)
   bd234:	681b      	ldr	r3, [r3, #0]
   bd236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd238:	9301      	str	r3, [sp, #4]
   bd23a:	bd08      	pop	{r3, pc}
   bd23c:	00030220 	.word	0x00030220

000bd240 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bd240:	b508      	push	{r3, lr}
   bd242:	4b02      	ldr	r3, [pc, #8]	; (bd24c <system_notify_time_changed+0xc>)
   bd244:	681b      	ldr	r3, [r3, #0]
   bd246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bd248:	9301      	str	r3, [sp, #4]
   bd24a:	bd08      	pop	{r3, pc}
   bd24c:	00030220 	.word	0x00030220

000bd250 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd250:	b508      	push	{r3, lr}
   bd252:	4b03      	ldr	r3, [pc, #12]	; (bd260 <system_ctrl_set_app_request_handler+0x10>)
   bd254:	681b      	ldr	r3, [r3, #0]
   bd256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd25a:	9301      	str	r3, [sp, #4]
   bd25c:	bd08      	pop	{r3, pc}
   bd25e:	0000      	.short	0x0000
   bd260:	00030220 	.word	0x00030220

000bd264 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd264:	b508      	push	{r3, lr}
   bd266:	4b03      	ldr	r3, [pc, #12]	; (bd274 <system_ctrl_set_result+0x10>)
   bd268:	681b      	ldr	r3, [r3, #0]
   bd26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd26e:	9301      	str	r3, [sp, #4]
   bd270:	bd08      	pop	{r3, pc}
   bd272:	0000      	.short	0x0000
   bd274:	00030220 	.word	0x00030220

000bd278 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bd278:	b508      	push	{r3, lr}
   bd27a:	4b03      	ldr	r3, [pc, #12]	; (bd288 <system_power_management_set_config+0x10>)
   bd27c:	681b      	ldr	r3, [r3, #0]
   bd27e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd282:	9301      	str	r3, [sp, #4]
   bd284:	bd08      	pop	{r3, pc}
   bd286:	0000      	.short	0x0000
   bd288:	00030220 	.word	0x00030220

000bd28c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bd28c:	b508      	push	{r3, lr}
   bd28e:	4b03      	ldr	r3, [pc, #12]	; (bd29c <system_sleep_ext+0x10>)
   bd290:	681b      	ldr	r3, [r3, #0]
   bd292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bd296:	9301      	str	r3, [sp, #4]
   bd298:	bd08      	pop	{r3, pc}
   bd29a:	0000      	.short	0x0000
   bd29c:	00030220 	.word	0x00030220

000bd2a0 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bd2a0:	b508      	push	{r3, lr}
   bd2a2:	4b03      	ldr	r3, [pc, #12]	; (bd2b0 <system_reset+0x10>)
   bd2a4:	681b      	ldr	r3, [r3, #0]
   bd2a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bd2aa:	9301      	str	r3, [sp, #4]
   bd2ac:	bd08      	pop	{r3, pc}
   bd2ae:	0000      	.short	0x0000
   bd2b0:	00030220 	.word	0x00030220

000bd2b4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bd2b4:	b508      	push	{r3, lr}
   bd2b6:	4b02      	ldr	r3, [pc, #8]	; (bd2c0 <spark_function+0xc>)
   bd2b8:	681b      	ldr	r3, [r3, #0]
   bd2ba:	685b      	ldr	r3, [r3, #4]
   bd2bc:	9301      	str	r3, [sp, #4]
   bd2be:	bd08      	pop	{r3, pc}
   bd2c0:	00030244 	.word	0x00030244

000bd2c4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd2c4:	b508      	push	{r3, lr}
   bd2c6:	4b02      	ldr	r3, [pc, #8]	; (bd2d0 <spark_process+0xc>)
   bd2c8:	681b      	ldr	r3, [r3, #0]
   bd2ca:	689b      	ldr	r3, [r3, #8]
   bd2cc:	9301      	str	r3, [sp, #4]
   bd2ce:	bd08      	pop	{r3, pc}
   bd2d0:	00030244 	.word	0x00030244

000bd2d4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bd2d4:	b508      	push	{r3, lr}
   bd2d6:	4b02      	ldr	r3, [pc, #8]	; (bd2e0 <spark_cloud_flag_connect+0xc>)
   bd2d8:	681b      	ldr	r3, [r3, #0]
   bd2da:	68db      	ldr	r3, [r3, #12]
   bd2dc:	9301      	str	r3, [sp, #4]
   bd2de:	bd08      	pop	{r3, pc}
   bd2e0:	00030244 	.word	0x00030244

000bd2e4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd2e4:	b508      	push	{r3, lr}
   bd2e6:	4b02      	ldr	r3, [pc, #8]	; (bd2f0 <spark_cloud_flag_connected+0xc>)
   bd2e8:	681b      	ldr	r3, [r3, #0]
   bd2ea:	695b      	ldr	r3, [r3, #20]
   bd2ec:	9301      	str	r3, [sp, #4]
   bd2ee:	bd08      	pop	{r3, pc}
   bd2f0:	00030244 	.word	0x00030244

000bd2f4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bd2f4:	b508      	push	{r3, lr}
   bd2f6:	4b02      	ldr	r3, [pc, #8]	; (bd300 <spark_deviceID+0xc>)
   bd2f8:	681b      	ldr	r3, [r3, #0]
   bd2fa:	69db      	ldr	r3, [r3, #28]
   bd2fc:	9301      	str	r3, [sp, #4]
   bd2fe:	bd08      	pop	{r3, pc}
   bd300:	00030244 	.word	0x00030244

000bd304 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd304:	b508      	push	{r3, lr}
   bd306:	4b02      	ldr	r3, [pc, #8]	; (bd310 <spark_send_event+0xc>)
   bd308:	681b      	ldr	r3, [r3, #0]
   bd30a:	6a1b      	ldr	r3, [r3, #32]
   bd30c:	9301      	str	r3, [sp, #4]
   bd30e:	bd08      	pop	{r3, pc}
   bd310:	00030244 	.word	0x00030244

000bd314 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bd314:	b508      	push	{r3, lr}
   bd316:	4b02      	ldr	r3, [pc, #8]	; (bd320 <spark_sync_time+0xc>)
   bd318:	681b      	ldr	r3, [r3, #0]
   bd31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd31c:	9301      	str	r3, [sp, #4]
   bd31e:	bd08      	pop	{r3, pc}
   bd320:	00030244 	.word	0x00030244

000bd324 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd324:	b508      	push	{r3, lr}
   bd326:	4b02      	ldr	r3, [pc, #8]	; (bd330 <spark_sync_time_pending+0xc>)
   bd328:	681b      	ldr	r3, [r3, #0]
   bd32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd32c:	9301      	str	r3, [sp, #4]
   bd32e:	bd08      	pop	{r3, pc}
   bd330:	00030244 	.word	0x00030244

000bd334 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bd334:	b508      	push	{r3, lr}
   bd336:	4b02      	ldr	r3, [pc, #8]	; (bd340 <spark_sync_time_last+0xc>)
   bd338:	681b      	ldr	r3, [r3, #0]
   bd33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd33c:	9301      	str	r3, [sp, #4]
   bd33e:	bd08      	pop	{r3, pc}
   bd340:	00030244 	.word	0x00030244

000bd344 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd344:	b508      	push	{r3, lr}
   bd346:	4b02      	ldr	r3, [pc, #8]	; (bd350 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd348:	681b      	ldr	r3, [r3, #0]
   bd34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd34c:	9301      	str	r3, [sp, #4]
   bd34e:	bd08      	pop	{r3, pc}
   bd350:	00030244 	.word	0x00030244

000bd354 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bd354:	b508      	push	{r3, lr}
   bd356:	4b02      	ldr	r3, [pc, #8]	; (bd360 <spark_cloud_disconnect+0xc>)
   bd358:	681b      	ldr	r3, [r3, #0]
   bd35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd35c:	9301      	str	r3, [sp, #4]
   bd35e:	bd08      	pop	{r3, pc}
   bd360:	00030244 	.word	0x00030244

000bd364 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd364:	b508      	push	{r3, lr}
   bd366:	4b02      	ldr	r3, [pc, #8]	; (bd370 <network_connect+0xc>)
   bd368:	681b      	ldr	r3, [r3, #0]
   bd36a:	685b      	ldr	r3, [r3, #4]
   bd36c:	9301      	str	r3, [sp, #4]
   bd36e:	bd08      	pop	{r3, pc}
   bd370:	00030240 	.word	0x00030240

000bd374 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd374:	b508      	push	{r3, lr}
   bd376:	4b02      	ldr	r3, [pc, #8]	; (bd380 <network_connecting+0xc>)
   bd378:	681b      	ldr	r3, [r3, #0]
   bd37a:	689b      	ldr	r3, [r3, #8]
   bd37c:	9301      	str	r3, [sp, #4]
   bd37e:	bd08      	pop	{r3, pc}
   bd380:	00030240 	.word	0x00030240

000bd384 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd384:	b508      	push	{r3, lr}
   bd386:	4b02      	ldr	r3, [pc, #8]	; (bd390 <network_disconnect+0xc>)
   bd388:	681b      	ldr	r3, [r3, #0]
   bd38a:	68db      	ldr	r3, [r3, #12]
   bd38c:	9301      	str	r3, [sp, #4]
   bd38e:	bd08      	pop	{r3, pc}
   bd390:	00030240 	.word	0x00030240

000bd394 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd394:	b508      	push	{r3, lr}
   bd396:	4b02      	ldr	r3, [pc, #8]	; (bd3a0 <network_ready+0xc>)
   bd398:	681b      	ldr	r3, [r3, #0]
   bd39a:	691b      	ldr	r3, [r3, #16]
   bd39c:	9301      	str	r3, [sp, #4]
   bd39e:	bd08      	pop	{r3, pc}
   bd3a0:	00030240 	.word	0x00030240

000bd3a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd3a4:	b508      	push	{r3, lr}
   bd3a6:	4b02      	ldr	r3, [pc, #8]	; (bd3b0 <network_on+0xc>)
   bd3a8:	681b      	ldr	r3, [r3, #0]
   bd3aa:	695b      	ldr	r3, [r3, #20]
   bd3ac:	9301      	str	r3, [sp, #4]
   bd3ae:	bd08      	pop	{r3, pc}
   bd3b0:	00030240 	.word	0x00030240

000bd3b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd3b4:	b508      	push	{r3, lr}
   bd3b6:	4b02      	ldr	r3, [pc, #8]	; (bd3c0 <network_off+0xc>)
   bd3b8:	681b      	ldr	r3, [r3, #0]
   bd3ba:	699b      	ldr	r3, [r3, #24]
   bd3bc:	9301      	str	r3, [sp, #4]
   bd3be:	bd08      	pop	{r3, pc}
   bd3c0:	00030240 	.word	0x00030240

000bd3c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd3c4:	b508      	push	{r3, lr}
   bd3c6:	4b02      	ldr	r3, [pc, #8]	; (bd3d0 <network_listen+0xc>)
   bd3c8:	681b      	ldr	r3, [r3, #0]
   bd3ca:	69db      	ldr	r3, [r3, #28]
   bd3cc:	9301      	str	r3, [sp, #4]
   bd3ce:	bd08      	pop	{r3, pc}
   bd3d0:	00030240 	.word	0x00030240

000bd3d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd3d4:	b508      	push	{r3, lr}
   bd3d6:	4b02      	ldr	r3, [pc, #8]	; (bd3e0 <network_listening+0xc>)
   bd3d8:	681b      	ldr	r3, [r3, #0]
   bd3da:	6a1b      	ldr	r3, [r3, #32]
   bd3dc:	9301      	str	r3, [sp, #4]
   bd3de:	bd08      	pop	{r3, pc}
   bd3e0:	00030240 	.word	0x00030240

000bd3e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd3e4:	b508      	push	{r3, lr}
   bd3e6:	4b02      	ldr	r3, [pc, #8]	; (bd3f0 <network_set_listen_timeout+0xc>)
   bd3e8:	681b      	ldr	r3, [r3, #0]
   bd3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd3ec:	9301      	str	r3, [sp, #4]
   bd3ee:	bd08      	pop	{r3, pc}
   bd3f0:	00030240 	.word	0x00030240

000bd3f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd3f4:	b508      	push	{r3, lr}
   bd3f6:	4b02      	ldr	r3, [pc, #8]	; (bd400 <network_get_listen_timeout+0xc>)
   bd3f8:	681b      	ldr	r3, [r3, #0]
   bd3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd3fc:	9301      	str	r3, [sp, #4]
   bd3fe:	bd08      	pop	{r3, pc}
   bd400:	00030240 	.word	0x00030240

000bd404 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd404:	b508      	push	{r3, lr}
   bd406:	4b02      	ldr	r3, [pc, #8]	; (bd410 <network_is_on+0xc>)
   bd408:	681b      	ldr	r3, [r3, #0]
   bd40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd40c:	9301      	str	r3, [sp, #4]
   bd40e:	bd08      	pop	{r3, pc}
   bd410:	00030240 	.word	0x00030240

000bd414 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd414:	b508      	push	{r3, lr}
   bd416:	4b02      	ldr	r3, [pc, #8]	; (bd420 <network_is_off+0xc>)
   bd418:	681b      	ldr	r3, [r3, #0]
   bd41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd41c:	9301      	str	r3, [sp, #4]
   bd41e:	bd08      	pop	{r3, pc}
   bd420:	00030240 	.word	0x00030240

000bd424 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd424:	b508      	push	{r3, lr}
   bd426:	4b02      	ldr	r3, [pc, #8]	; (bd430 <malloc+0xc>)
   bd428:	681b      	ldr	r3, [r3, #0]
   bd42a:	681b      	ldr	r3, [r3, #0]
   bd42c:	9301      	str	r3, [sp, #4]
   bd42e:	bd08      	pop	{r3, pc}
   bd430:	0003021c 	.word	0x0003021c

000bd434 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd434:	b508      	push	{r3, lr}
   bd436:	4b02      	ldr	r3, [pc, #8]	; (bd440 <free+0xc>)
   bd438:	681b      	ldr	r3, [r3, #0]
   bd43a:	685b      	ldr	r3, [r3, #4]
   bd43c:	9301      	str	r3, [sp, #4]
   bd43e:	bd08      	pop	{r3, pc}
   bd440:	0003021c 	.word	0x0003021c

000bd444 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd444:	b508      	push	{r3, lr}
   bd446:	4b02      	ldr	r3, [pc, #8]	; (bd450 <realloc+0xc>)
   bd448:	681b      	ldr	r3, [r3, #0]
   bd44a:	689b      	ldr	r3, [r3, #8]
   bd44c:	9301      	str	r3, [sp, #4]
   bd44e:	bd08      	pop	{r3, pc}
   bd450:	0003021c 	.word	0x0003021c

000bd454 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bd454:	b508      	push	{r3, lr}
   bd456:	4b02      	ldr	r3, [pc, #8]	; (bd460 <siprintf+0xc>)
   bd458:	681b      	ldr	r3, [r3, #0]
   bd45a:	691b      	ldr	r3, [r3, #16]
   bd45c:	9301      	str	r3, [sp, #4]
   bd45e:	bd08      	pop	{r3, pc}
   bd460:	0003021c 	.word	0x0003021c

000bd464 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd464:	b508      	push	{r3, lr}
   bd466:	4b02      	ldr	r3, [pc, #8]	; (bd470 <sscanf+0xc>)
   bd468:	681b      	ldr	r3, [r3, #0]
   bd46a:	695b      	ldr	r3, [r3, #20]
   bd46c:	9301      	str	r3, [sp, #4]
   bd46e:	bd08      	pop	{r3, pc}
   bd470:	0003021c 	.word	0x0003021c

000bd474 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd474:	b508      	push	{r3, lr}
   bd476:	4b02      	ldr	r3, [pc, #8]	; (bd480 <snprintf+0xc>)
   bd478:	681b      	ldr	r3, [r3, #0]
   bd47a:	69db      	ldr	r3, [r3, #28]
   bd47c:	9301      	str	r3, [sp, #4]
   bd47e:	bd08      	pop	{r3, pc}
   bd480:	0003021c 	.word	0x0003021c

000bd484 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd484:	b508      	push	{r3, lr}
   bd486:	4b02      	ldr	r3, [pc, #8]	; (bd490 <vsnprintf+0xc>)
   bd488:	681b      	ldr	r3, [r3, #0]
   bd48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd48c:	9301      	str	r3, [sp, #4]
   bd48e:	bd08      	pop	{r3, pc}
   bd490:	0003021c 	.word	0x0003021c

000bd494 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd494:	b508      	push	{r3, lr}
   bd496:	4b02      	ldr	r3, [pc, #8]	; (bd4a0 <abort+0xc>)
   bd498:	681b      	ldr	r3, [r3, #0]
   bd49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd49c:	9301      	str	r3, [sp, #4]
   bd49e:	bd08      	pop	{r3, pc}
   bd4a0:	0003021c 	.word	0x0003021c

000bd4a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd4a4:	b508      	push	{r3, lr}
   bd4a6:	4b02      	ldr	r3, [pc, #8]	; (bd4b0 <_malloc_r+0xc>)
   bd4a8:	681b      	ldr	r3, [r3, #0]
   bd4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd4ac:	9301      	str	r3, [sp, #4]
   bd4ae:	bd08      	pop	{r3, pc}
   bd4b0:	0003021c 	.word	0x0003021c

000bd4b4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd4b4:	b508      	push	{r3, lr}
   bd4b6:	4b02      	ldr	r3, [pc, #8]	; (bd4c0 <__errno+0xc>)
   bd4b8:	681b      	ldr	r3, [r3, #0]
   bd4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd4bc:	9301      	str	r3, [sp, #4]
   bd4be:	bd08      	pop	{r3, pc}
   bd4c0:	0003021c 	.word	0x0003021c

000bd4c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd4c4:	b508      	push	{r3, lr}
   bd4c6:	4b02      	ldr	r3, [pc, #8]	; (bd4d0 <__assert_func+0xc>)
   bd4c8:	681b      	ldr	r3, [r3, #0]
   bd4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd4cc:	9301      	str	r3, [sp, #4]
   bd4ce:	bd08      	pop	{r3, pc}
   bd4d0:	0003021c 	.word	0x0003021c

000bd4d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd4d4:	b508      	push	{r3, lr}
   bd4d6:	4b02      	ldr	r3, [pc, #8]	; (bd4e0 <newlib_impure_ptr_callback+0xc>)
   bd4d8:	681b      	ldr	r3, [r3, #0]
   bd4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd4dc:	9301      	str	r3, [sp, #4]
   bd4de:	bd08      	pop	{r3, pc}
   bd4e0:	0003021c 	.word	0x0003021c

000bd4e4 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bd4e4:	b508      	push	{r3, lr}
   bd4e6:	4b02      	ldr	r3, [pc, #8]	; (bd4f0 <strftime+0xc>)
   bd4e8:	681b      	ldr	r3, [r3, #0]
   bd4ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd4ec:	9301      	str	r3, [sp, #4]
   bd4ee:	bd08      	pop	{r3, pc}
   bd4f0:	0003021c 	.word	0x0003021c

000bd4f4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd4f4:	b508      	push	{r3, lr}
   bd4f6:	4b02      	ldr	r3, [pc, #8]	; (bd500 <localtime_r+0xc>)
   bd4f8:	681b      	ldr	r3, [r3, #0]
   bd4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd4fc:	9301      	str	r3, [sp, #4]
   bd4fe:	bd08      	pop	{r3, pc}
   bd500:	0003021c 	.word	0x0003021c

000bd504 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd504:	b508      	push	{r3, lr}
   bd506:	4b02      	ldr	r3, [pc, #8]	; (bd510 <gmtime_r+0xc>)
   bd508:	681b      	ldr	r3, [r3, #0]
   bd50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd50c:	9301      	str	r3, [sp, #4]
   bd50e:	bd08      	pop	{r3, pc}
   bd510:	0003021c 	.word	0x0003021c

000bd514 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd514:	b508      	push	{r3, lr}
   bd516:	4b02      	ldr	r3, [pc, #8]	; (bd520 <mktime+0xc>)
   bd518:	681b      	ldr	r3, [r3, #0]
   bd51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd51c:	9301      	str	r3, [sp, #4]
   bd51e:	bd08      	pop	{r3, pc}
   bd520:	0003021c 	.word	0x0003021c

000bd524 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd524:	2100      	movs	r1, #0
   bd526:	f7ff be5b 	b.w	bd1e0 <system_delay_ms>

000bd52a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd52a:	b510      	push	{r4, lr}
      if (_M_empty())
   bd52c:	6883      	ldr	r3, [r0, #8]
   bd52e:	4604      	mov	r4, r0
   bd530:	b90b      	cbnz	r3, bd536 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd532:	f003 f9ad 	bl	c0890 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd536:	68c3      	ldr	r3, [r0, #12]
   bd538:	4798      	blx	r3
      if (_M_manager)
   bd53a:	68a3      	ldr	r3, [r4, #8]
   bd53c:	b11b      	cbz	r3, bd546 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd53e:	2203      	movs	r2, #3
   bd540:	4621      	mov	r1, r4
   bd542:	4620      	mov	r0, r4
   bd544:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd546:	4620      	mov	r0, r4
   bd548:	2110      	movs	r1, #16
}
   bd54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd54e:	f7f6 bda6 	b.w	b409e <_ZdlPvj>

000bd552 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd552:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd554:	6843      	ldr	r3, [r0, #4]
   bd556:	3b01      	subs	r3, #1
    {
   bd558:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd55a:	6043      	str	r3, [r0, #4]
   bd55c:	b963      	cbnz	r3, bd578 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd55e:	6803      	ldr	r3, [r0, #0]
   bd560:	689b      	ldr	r3, [r3, #8]
   bd562:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd564:	68a3      	ldr	r3, [r4, #8]
   bd566:	3b01      	subs	r3, #1
   bd568:	60a3      	str	r3, [r4, #8]
   bd56a:	b92b      	cbnz	r3, bd578 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd56c:	6823      	ldr	r3, [r4, #0]
   bd56e:	4620      	mov	r0, r4
   bd570:	68db      	ldr	r3, [r3, #12]
    }
   bd572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd576:	4718      	bx	r3
    }
   bd578:	bd10      	pop	{r4, pc}

000bd57a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd57a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd57c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd580:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd582:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd586:	42ae      	cmp	r6, r5
   bd588:	d004      	beq.n	bd594 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd58a:	4628      	mov	r0, r5
   bd58c:	f002 faa4 	bl	bfad8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd590:	3510      	adds	r5, #16
   bd592:	e7f8      	b.n	bd586 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd594:	6820      	ldr	r0, [r4, #0]
   bd596:	f7ff ff4d 	bl	bd434 <free>
    AllocatorT::free(data_);
}
   bd59a:	4620      	mov	r0, r4
   bd59c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd5a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd5a0:	4802      	ldr	r0, [pc, #8]	; (bd5ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd5a2:	2300      	movs	r3, #0
   bd5a4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd5a6:	f7ff bb51 	b.w	bcc4c <os_mutex_recursive_create>
   bd5aa:	bf00      	nop
   bd5ac:	2003e608 	.word	0x2003e608

000bd5b0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd5b0:	2200      	movs	r2, #0
   bd5b2:	6840      	ldr	r0, [r0, #4]
   bd5b4:	4611      	mov	r1, r2
   bd5b6:	f7ff beed 	b.w	bd394 <network_ready>

000bd5ba <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd5ba:	2200      	movs	r2, #0
   bd5bc:	6840      	ldr	r0, [r0, #4]
   bd5be:	4611      	mov	r1, r2
   bd5c0:	f7ff bf08 	b.w	bd3d4 <network_listening>

000bd5c4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd5c4:	2200      	movs	r2, #0
   bd5c6:	6840      	ldr	r0, [r0, #4]
   bd5c8:	4611      	mov	r1, r2
   bd5ca:	f7ff bf13 	b.w	bd3f4 <network_get_listen_timeout>

000bd5ce <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd5ce:	6840      	ldr	r0, [r0, #4]
   bd5d0:	2200      	movs	r2, #0
   bd5d2:	f7ff bf07 	b.w	bd3e4 <network_set_listen_timeout>

000bd5d6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd5d6:	6840      	ldr	r0, [r0, #4]
   bd5d8:	2200      	movs	r2, #0
   bd5da:	f081 0101 	eor.w	r1, r1, #1
   bd5de:	f7ff bef1 	b.w	bd3c4 <network_listen>

000bd5e2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd5e2:	2300      	movs	r3, #0
   bd5e4:	6840      	ldr	r0, [r0, #4]
   bd5e6:	461a      	mov	r2, r3
   bd5e8:	4619      	mov	r1, r3
   bd5ea:	f7ff bee3 	b.w	bd3b4 <network_off>

000bd5ee <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd5ee:	2300      	movs	r3, #0
   bd5f0:	6840      	ldr	r0, [r0, #4]
   bd5f2:	461a      	mov	r2, r3
   bd5f4:	4619      	mov	r1, r3
   bd5f6:	f7ff bed5 	b.w	bd3a4 <network_on>

000bd5fa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd5fa:	2200      	movs	r2, #0
   bd5fc:	6840      	ldr	r0, [r0, #4]
   bd5fe:	4611      	mov	r1, r2
   bd600:	f7ff beb8 	b.w	bd374 <network_connecting>

000bd604 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd604:	6840      	ldr	r0, [r0, #4]
   bd606:	2200      	movs	r2, #0
   bd608:	2102      	movs	r1, #2
   bd60a:	f7ff bebb 	b.w	bd384 <network_disconnect>

000bd60e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd60e:	2300      	movs	r3, #0
   bd610:	6840      	ldr	r0, [r0, #4]
   bd612:	461a      	mov	r2, r3
   bd614:	f7ff bea6 	b.w	bd364 <network_connect>

000bd618 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd618:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd61a:	4b13      	ldr	r3, [pc, #76]	; (bd668 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd61c:	6003      	str	r3, [r0, #0]
   bd61e:	2518      	movs	r5, #24
   bd620:	3330      	adds	r3, #48	; 0x30
   bd622:	b086      	sub	sp, #24
   bd624:	460e      	mov	r6, r1
   bd626:	6043      	str	r3, [r0, #4]
   bd628:	462a      	mov	r2, r5
   bd62a:	2100      	movs	r1, #0
   bd62c:	4604      	mov	r4, r0
   bd62e:	3008      	adds	r0, #8
   bd630:	f003 fed6 	bl	c13e0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd634:	2200      	movs	r2, #0
   bd636:	6870      	ldr	r0, [r6, #4]
   bd638:	4611      	mov	r1, r2
   bd63a:	f7ff feab 	bl	bd394 <network_ready>
   bd63e:	b178      	cbz	r0, bd660 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd640:	2100      	movs	r1, #0
   bd642:	462a      	mov	r2, r5
   bd644:	4668      	mov	r0, sp
   bd646:	f003 fecb 	bl	c13e0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd64a:	4669      	mov	r1, sp
   bd64c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd64e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd652:	f7ff fabb 	bl	bcbcc <cellular_signal>
   bd656:	b918      	cbnz	r0, bd660 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd658:	4669      	mov	r1, sp
   bd65a:	4620      	mov	r0, r4
   bd65c:	f000 f8b8 	bl	bd7d0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd660:	4620      	mov	r0, r4
   bd662:	b006      	add	sp, #24
   bd664:	bd70      	pop	{r4, r5, r6, pc}
   bd666:	bf00      	nop
   bd668:	000c552c 	.word	0x000c552c

000bd66c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd66c:	4b08      	ldr	r3, [pc, #32]	; (bd690 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd66e:	b510      	push	{r4, lr}
   bd670:	2428      	movs	r4, #40	; 0x28
   bd672:	4622      	mov	r2, r4
   bd674:	4618      	mov	r0, r3
   bd676:	2100      	movs	r1, #0
   bd678:	f003 feb2 	bl	c13e0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd67c:	4b05      	ldr	r3, [pc, #20]	; (bd694 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd67e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd684:	6042      	str	r2, [r0, #4]
   bd686:	2204      	movs	r2, #4
   bd688:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd68a:	4a03      	ldr	r2, [pc, #12]	; (bd698 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd68c:	601a      	str	r2, [r3, #0]
   bd68e:	bd10      	pop	{r4, pc}
   bd690:	2003e614 	.word	0x2003e614
   bd694:	2003e60c 	.word	0x2003e60c
   bd698:	000c54f0 	.word	0x000c54f0

000bd69c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd69c:	4770      	bx	lr

000bd69e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd69e:	7b00      	ldrb	r0, [r0, #12]
   bd6a0:	4770      	bx	lr

000bd6a2 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd6a2:	7b03      	ldrb	r3, [r0, #12]
   bd6a4:	b14b      	cbz	r3, bd6ba <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd6a6:	6903      	ldr	r3, [r0, #16]
   bd6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd6ac:	d005      	beq.n	bd6ba <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd6ae:	6980      	ldr	r0, [r0, #24]
   bd6b0:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd6b4:	bf18      	it	ne
   bd6b6:	2001      	movne	r0, #1
   bd6b8:	4770      	bx	lr
   bd6ba:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd6bc:	4770      	bx	lr

000bd6be <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd6be:	6803      	ldr	r3, [r0, #0]
   bd6c0:	6a1b      	ldr	r3, [r3, #32]
   bd6c2:	4718      	bx	r3

000bd6c4 <_ZNK14CellularSignal7printToER5Print>:
{
   bd6c4:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd6c6:	6803      	ldr	r3, [r0, #0]
{
   bd6c8:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd6ca:	691b      	ldr	r3, [r3, #16]
{
   bd6cc:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd6ce:	4798      	blx	r3
   bd6d0:	2102      	movs	r1, #2
   bd6d2:	4628      	mov	r0, r5
   bd6d4:	f002 f8de 	bl	bf894 <_ZN5Print5printEfi>
    n += p.print(',');
   bd6d8:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd6da:	4604      	mov	r4, r0
    n += p.print(',');
   bd6dc:	4628      	mov	r0, r5
   bd6de:	f001 ffe3 	bl	bf6a8 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd6e2:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd6e4:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd6e6:	699b      	ldr	r3, [r3, #24]
   bd6e8:	4630      	mov	r0, r6
   bd6ea:	4798      	blx	r3
   bd6ec:	2102      	movs	r1, #2
   bd6ee:	4628      	mov	r0, r5
   bd6f0:	f002 f8d0 	bl	bf894 <_ZN5Print5printEfi>
}
   bd6f4:	4420      	add	r0, r4
   bd6f6:	bd70      	pop	{r4, r5, r6, pc}

000bd6f8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd6f8:	f1a0 0004 	sub.w	r0, r0, #4
   bd6fc:	f7ff bfe2 	b.w	bd6c4 <_ZNK14CellularSignal7printToER5Print>

000bd700 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd700:	b510      	push	{r4, lr}
   bd702:	2120      	movs	r1, #32
   bd704:	4604      	mov	r4, r0
   bd706:	f7f6 fcca 	bl	b409e <_ZdlPvj>
   bd70a:	4620      	mov	r0, r4
   bd70c:	bd10      	pop	{r4, pc}
	...

000bd710 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd710:	7b03      	ldrb	r3, [r0, #12]
   bd712:	b17b      	cbz	r3, bd734 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd714:	6943      	ldr	r3, [r0, #20]
   bd716:	2b00      	cmp	r3, #0
   bd718:	db0c      	blt.n	bd734 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd71a:	ee07 3a90 	vmov	s15, r3
   bd71e:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd73c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd726:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd72a:	eddf 7a05 	vldr	s15, [pc, #20]	; bd740 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd72e:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd732:	4770      	bx	lr
    return -1.0f;
   bd734:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd738:	4770      	bx	lr
   bd73a:	bf00      	nop
   bd73c:	477fff00 	.word	0x477fff00
   bd740:	42c80000 	.word	0x42c80000

000bd744 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd744:	7b03      	ldrb	r3, [r0, #12]
   bd746:	b163      	cbz	r3, bd762 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd748:	6903      	ldr	r3, [r0, #16]
   bd74a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd74e:	d008      	beq.n	bd762 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd750:	ee07 3a90 	vmov	s15, r3
   bd754:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd768 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd75c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd760:	4770      	bx	lr
    return 0.0f;
   bd762:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd76c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd766:	4770      	bx	lr
   bd768:	42c80000 	.word	0x42c80000
   bd76c:	00000000 	.word	0x00000000

000bd770 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd770:	7b03      	ldrb	r3, [r0, #12]
   bd772:	b17b      	cbz	r3, bd794 <_ZNK14CellularSignal10getQualityEv+0x24>
   bd774:	69c3      	ldr	r3, [r0, #28]
   bd776:	2b00      	cmp	r3, #0
   bd778:	db0c      	blt.n	bd794 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd77a:	ee07 3a90 	vmov	s15, r3
   bd77e:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd79c <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd786:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd78a:	eddf 7a05 	vldr	s15, [pc, #20]	; bd7a0 <_ZNK14CellularSignal10getQualityEv+0x30>
   bd78e:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd792:	4770      	bx	lr
    return -1.0f;
   bd794:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd798:	4770      	bx	lr
   bd79a:	bf00      	nop
   bd79c:	477fff00 	.word	0x477fff00
   bd7a0:	42c80000 	.word	0x42c80000

000bd7a4 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd7a4:	7b03      	ldrb	r3, [r0, #12]
   bd7a6:	b163      	cbz	r3, bd7c2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd7a8:	6983      	ldr	r3, [r0, #24]
   bd7aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd7ae:	d008      	beq.n	bd7c2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd7b0:	ee07 3a90 	vmov	s15, r3
   bd7b4:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd7c8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd7b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd7bc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd7c0:	4770      	bx	lr
    return 0.0f;
   bd7c2:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd7cc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd7c6:	4770      	bx	lr
   bd7c8:	42c80000 	.word	0x42c80000
   bd7cc:	00000000 	.word	0x00000000

000bd7d0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd7d0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd7d2:	460d      	mov	r5, r1
   bd7d4:	f100 0408 	add.w	r4, r0, #8
   bd7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd7dc:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd7e0:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd7e4:	2001      	movs	r0, #1
   bd7e6:	bd30      	pop	{r4, r5, pc}

000bd7e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd7e8:	4770      	bx	lr

000bd7ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd7ea:	2000      	movs	r0, #0
   bd7ec:	4770      	bx	lr

000bd7ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd7ee:	b510      	push	{r4, lr}
   bd7f0:	2110      	movs	r1, #16
   bd7f2:	4604      	mov	r4, r0
   bd7f4:	f7f6 fc53 	bl	b409e <_ZdlPvj>
   bd7f8:	4620      	mov	r0, r4
   bd7fa:	bd10      	pop	{r4, pc}

000bd7fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd7fc:	b508      	push	{r3, lr}
      { delete this; }
   bd7fe:	f7ff fff6 	bl	bd7ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd802:	bd08      	pop	{r3, pc}

000bd804 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd804:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd806:	2200      	movs	r2, #0
   bd808:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd80c:	6002      	str	r2, [r0, #0]
   bd80e:	8084      	strh	r4, [r0, #4]
   bd810:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd812:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd814:	680c      	ldr	r4, [r1, #0]
   bd816:	8085      	strh	r5, [r0, #4]
   bd818:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd81a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd81c:	bd30      	pop	{r4, r5, pc}

000bd81e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd81e:	b510      	push	{r4, lr}
   bd820:	4604      	mov	r4, r0
    free((void*)msg_);
   bd822:	6800      	ldr	r0, [r0, #0]
   bd824:	f7ff fe06 	bl	bd434 <free>
}
   bd828:	4620      	mov	r0, r4
   bd82a:	bd10      	pop	{r4, pc}

000bd82c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd82c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd82e:	68c4      	ldr	r4, [r0, #12]
   bd830:	b1f4      	cbz	r4, bd870 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd832:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd834:	2b02      	cmp	r3, #2
   bd836:	d103      	bne.n	bd840 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd838:	f104 000c 	add.w	r0, r4, #12
   bd83c:	f7ff ffef 	bl	bd81e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd840:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd842:	b135      	cbz	r5, bd852 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd844:	4628      	mov	r0, r5
   bd846:	f7f7 fe82 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   bd84a:	2110      	movs	r1, #16
   bd84c:	4628      	mov	r0, r5
   bd84e:	f7f6 fc26 	bl	b409e <_ZdlPvj>
   bd852:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd854:	b135      	cbz	r5, bd864 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd856:	4628      	mov	r0, r5
   bd858:	f7f7 fe79 	bl	b554e <_ZNSt14_Function_baseD1Ev>
   bd85c:	2110      	movs	r1, #16
   bd85e:	4628      	mov	r0, r5
   bd860:	f7f6 fc1d 	bl	b409e <_ZdlPvj>
   bd864:	4620      	mov	r0, r4
   bd866:	2114      	movs	r1, #20
   bd868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd86c:	f7f6 bc17 	b.w	b409e <_ZdlPvj>
   bd870:	bd38      	pop	{r3, r4, r5, pc}

000bd872 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd874:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd876:	4668      	mov	r0, sp
   bd878:	f002 f979 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd87c:	68a3      	ldr	r3, [r4, #8]
   bd87e:	b90b      	cbnz	r3, bd884 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd880:	f003 f806 	bl	c0890 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd884:	68e3      	ldr	r3, [r4, #12]
   bd886:	4669      	mov	r1, sp
   bd888:	4620      	mov	r0, r4
   bd88a:	4798      	blx	r3
   bd88c:	4604      	mov	r4, r0
   bd88e:	4668      	mov	r0, sp
   bd890:	f002 f922 	bl	bfad8 <_ZN6StringD1Ev>
}
   bd894:	4620      	mov	r0, r4
   bd896:	b004      	add	sp, #16
   bd898:	bd10      	pop	{r4, pc}

000bd89a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd89a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd89c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd8a2:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd8a4:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd8a6:	461a      	mov	r2, r3
   bd8a8:	4669      	mov	r1, sp
   bd8aa:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd8ac:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd8b0:	f8ad 4000 	strh.w	r4, [sp]
   bd8b4:	f7ff fcfe 	bl	bd2b4 <spark_function>
}
   bd8b8:	b004      	add	sp, #16
   bd8ba:	bd10      	pop	{r4, pc}

000bd8bc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd8bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd8be:	230c      	movs	r3, #12
   bd8c0:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd8c4:	6803      	ldr	r3, [r0, #0]
   bd8c6:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd8ca:	7a03      	ldrb	r3, [r0, #8]
   bd8cc:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd8d0:	6843      	ldr	r3, [r0, #4]
   bd8d2:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd8d4:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd8d6:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd8d8:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd8dc:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd8de:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd8e2:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd8e6:	f7ff fd35 	bl	bd354 <spark_cloud_disconnect>
}
   bd8ea:	b005      	add	sp, #20
   bd8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000bd8f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd8f0:	680b      	ldr	r3, [r1, #0]
   bd8f2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd8f4:	684b      	ldr	r3, [r1, #4]
   bd8f6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd8f8:	b113      	cbz	r3, bd900 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd8fa:	685a      	ldr	r2, [r3, #4]
   bd8fc:	3201      	adds	r2, #1
   bd8fe:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd900:	4770      	bx	lr

000bd902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd902:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd904:	4604      	mov	r4, r0
   bd906:	4668      	mov	r0, sp
   bd908:	460d      	mov	r5, r1
   bd90a:	f7ff fff1 	bl	bd8f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd90e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd910:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd912:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd914:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd916:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd918:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd91a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd91c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd91e:	f7f6 fec9 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd922:	b135      	cbz	r5, bd932 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd924:	1d28      	adds	r0, r5, #4
   bd926:	f7f6 fec5 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd92a:	2108      	movs	r1, #8
   bd92c:	4628      	mov	r0, r5
   bd92e:	f7f6 fbb6 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd932:	4620      	mov	r0, r4
   bd934:	b003      	add	sp, #12
   bd936:	bd30      	pop	{r4, r5, pc}

000bd938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd938:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd93a:	b510      	push	{r4, lr}
      if (_M_empty())
   bd93c:	b90a      	cbnz	r2, bd942 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd93e:	f002 ffa7 	bl	c0890 <_ZSt25__throw_bad_function_callv>
    }
   bd942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd946:	68c3      	ldr	r3, [r0, #12]
   bd948:	4718      	bx	r3

000bd94a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd94a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd94c:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd94e:	f100 0110 	add.w	r1, r0, #16
   bd952:	f7ff fff1 	bl	bd938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd956:	bd08      	pop	{r3, pc}

000bd958 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd958:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd95a:	b510      	push	{r4, lr}
      if (_M_empty())
   bd95c:	b90a      	cbnz	r2, bd962 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd95e:	f002 ff97 	bl	c0890 <_ZSt25__throw_bad_function_callv>
    }
   bd962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd966:	68c3      	ldr	r3, [r0, #12]
   bd968:	4718      	bx	r3

000bd96a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd96a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd96c:	6800      	ldr	r0, [r0, #0]
   bd96e:	f100 0110 	add.w	r1, r0, #16
   bd972:	f7ff fff1 	bl	bd958 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd976:	bd08      	pop	{r3, pc}

000bd978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd978:	b538      	push	{r3, r4, r5, lr}
   bd97a:	2300      	movs	r3, #0
   bd97c:	4604      	mov	r4, r0
   bd97e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd980:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd982:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd984:	f7f6 fb87 	bl	b4096 <_Znwj>
   bd988:	b128      	cbz	r0, bd996 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd98a:	2301      	movs	r3, #1
   bd98c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd990:	4b02      	ldr	r3, [pc, #8]	; (bd99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd992:	6003      	str	r3, [r0, #0]
   bd994:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd996:	6020      	str	r0, [r4, #0]
	}
   bd998:	4620      	mov	r0, r4
   bd99a:	bd38      	pop	{r3, r4, r5, pc}
   bd99c:	000c5568 	.word	0x000c5568

000bd9a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd9a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd9a2:	2300      	movs	r3, #0
   bd9a4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd9a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd9a8:	4604      	mov	r4, r0
   bd9aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd9ac:	b12b      	cbz	r3, bd9ba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd9ae:	2202      	movs	r2, #2
   bd9b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd9b2:	68eb      	ldr	r3, [r5, #12]
   bd9b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd9b6:	68ab      	ldr	r3, [r5, #8]
   bd9b8:	60a3      	str	r3, [r4, #8]
    }
   bd9ba:	4620      	mov	r0, r4
   bd9bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd9c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd9c2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd9c4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd9c6:	4668      	mov	r0, sp
   bd9c8:	f7ff ff1c 	bl	bd804 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd9cc:	f04f 0302 	mov.w	r3, #2
   bd9d0:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd9d4:	2a00      	cmp	r2, #0
   bd9d6:	d103      	bne.n	bd9e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd9d8:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd9dc:	2900      	cmp	r1, #0
   bd9de:	d1f7      	bne.n	bd9d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd9e0:	d125      	bne.n	bda2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd9e2:	f104 050c 	add.w	r5, r4, #12
   bd9e6:	4669      	mov	r1, sp
   bd9e8:	4628      	mov	r0, r5
   bd9ea:	f7ff ff0b 	bl	bd804 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd9ee:	f3bf 8f5b 	dmb	ish
   bd9f2:	2301      	movs	r3, #1
   bd9f4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd9f6:	2000      	movs	r0, #0
   bd9f8:	f104 0308 	add.w	r3, r4, #8
   bd9fc:	f3bf 8f5b 	dmb	ish
   bda00:	e853 6f00 	ldrex	r6, [r3]
   bda04:	e843 0200 	strex	r2, r0, [r3]
   bda08:	2a00      	cmp	r2, #0
   bda0a:	d1f9      	bne.n	bda00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bda0c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bda10:	b16e      	cbz	r6, bda2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bda12:	f7ff fbfd 	bl	bd210 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bda16:	b178      	cbz	r0, bda38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bda18:	4629      	mov	r1, r5
   bda1a:	4630      	mov	r0, r6
   bda1c:	f7ff ff8c 	bl	bd938 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bda20:	4630      	mov	r0, r6
   bda22:	f7f7 fd94 	bl	b554e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bda26:	2110      	movs	r1, #16
   bda28:	4630      	mov	r0, r6
   bda2a:	f7f6 fb38 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bda2e:	4668      	mov	r0, sp
   bda30:	f7ff fef5 	bl	bd81e <_ZN8particle5ErrorD1Ev>
    }
   bda34:	b009      	add	sp, #36	; 0x24
   bda36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bda38:	4631      	mov	r1, r6
   bda3a:	a802      	add	r0, sp, #8
   bda3c:	f7ff ffb0 	bl	bd9a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bda40:	68e0      	ldr	r0, [r4, #12]
   bda42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bda46:	b108      	cbz	r0, bda4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bda48:	f003 fd78 	bl	c153c <strdup>
        type_(type) {
   bda4c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bda4e:	2010      	movs	r0, #16
   bda50:	f8ad 501c 	strh.w	r5, [sp, #28]
   bda54:	f7f6 fb1f 	bl	b4096 <_Znwj>
   bda58:	4605      	mov	r5, r0
   bda5a:	b1e8      	cbz	r0, bda98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bda5c:	2700      	movs	r7, #0
   bda5e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bda60:	2018      	movs	r0, #24
   bda62:	f7f6 fb18 	bl	b4096 <_Znwj>
   bda66:	4604      	mov	r4, r0
   bda68:	b188      	cbz	r0, bda8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bda6a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bda6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bda6e:	a802      	add	r0, sp, #8
   bda70:	f7fa fee1 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bda74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bda76:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bda78:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bda7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bda7c:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bda7e:	a906      	add	r1, sp, #24
   bda80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bda82:	60e3      	str	r3, [r4, #12]
   bda84:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bda88:	9205      	str	r2, [sp, #20]
   bda8a:	f7ff febb 	bl	bd804 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bda8e:	4b08      	ldr	r3, [pc, #32]	; (bdab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bda90:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bda92:	4b08      	ldr	r3, [pc, #32]	; (bdab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bda94:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bda96:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bda98:	a806      	add	r0, sp, #24
   bda9a:	f7ff fec0 	bl	bd81e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bda9e:	a802      	add	r0, sp, #8
   bdaa0:	f7f7 fd55 	bl	b554e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bdaa4:	2200      	movs	r2, #0
   bdaa6:	4629      	mov	r1, r5
   bdaa8:	4803      	ldr	r0, [pc, #12]	; (bdab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bdaaa:	f7ff fbb9 	bl	bd220 <application_thread_invoke>
   bdaae:	e7b7      	b.n	bda20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bdab0:	000bd94b 	.word	0x000bd94b
   bdab4:	000bdbcd 	.word	0x000bdbcd
   bdab8:	000bd52b 	.word	0x000bd52b

000bdabc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bdabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdac0:	b08b      	sub	sp, #44	; 0x2c
   bdac2:	4605      	mov	r5, r0
   bdac4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bdac8:	460f      	mov	r7, r1
   bdaca:	4690      	mov	r8, r2
   bdacc:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdace:	f7ff fc09 	bl	bd2e4 <spark_cloud_flag_connected>
   bdad2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bdad4:	4683      	mov	fp, r0
   bdad6:	bb38      	cbnz	r0, bdb28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bdad8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bdadc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bdade:	a905      	add	r1, sp, #20
   bdae0:	4630      	mov	r0, r6
   bdae2:	f8ad 3018 	strh.w	r3, [sp, #24]
   bdae6:	f7ff fe8d 	bl	bd804 <_ZN8particle5ErrorC1EOS0_>
   bdaea:	2014      	movs	r0, #20
   bdaec:	f7f6 fad3 	bl	b4096 <_Znwj>
   bdaf0:	4604      	mov	r4, r0
   bdaf2:	b148      	cbz	r0, bdb08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bdaf4:	2302      	movs	r3, #2
   bdaf6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdaf8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bdafa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdafe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bdb00:	4631      	mov	r1, r6
   bdb02:	300c      	adds	r0, #12
   bdb04:	f7ff fe7e 	bl	bd804 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdb08:	4628      	mov	r0, r5
	: __shared_count(__p)
   bdb0a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdb0c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bdb10:	f7ff ff32 	bl	bd978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bdb14:	4630      	mov	r0, r6
   bdb16:	f7ff fe82 	bl	bd81e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bdb1a:	a805      	add	r0, sp, #20
   bdb1c:	f7ff fe7f 	bl	bd81e <_ZN8particle5ErrorD1Ev>
}
   bdb20:	4628      	mov	r0, r5
   bdb22:	b00b      	add	sp, #44	; 0x2c
   bdb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bdb28:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bdb2a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bdb2c:	2014      	movs	r0, #20
   bdb2e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bdb32:	9307      	str	r3, [sp, #28]
   bdb34:	f7f6 faaf 	bl	b4096 <_Znwj>
   bdb38:	4601      	mov	r1, r0
   bdb3a:	b118      	cbz	r0, bdb44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bdb3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdb40:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdb42:	7044      	strb	r4, [r0, #1]
   bdb44:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdb46:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bdb48:	f7ff ff16 	bl	bd978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bdb4c:	4b1e      	ldr	r3, [pc, #120]	; (bdbc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bdb4e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bdb50:	2008      	movs	r0, #8
   bdb52:	f7f6 faa0 	bl	b4096 <_Znwj>
   bdb56:	4604      	mov	r4, r0
   bdb58:	b110      	cbz	r0, bdb60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bdb5a:	a903      	add	r1, sp, #12
   bdb5c:	f7ff fec8 	bl	bd8f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bdb60:	9600      	str	r6, [sp, #0]
   bdb62:	fa5f f38a 	uxtb.w	r3, sl
   bdb66:	464a      	mov	r2, r9
   bdb68:	4641      	mov	r1, r8
   bdb6a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bdb6c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bdb6e:	f7ff fbc9 	bl	bd304 <spark_send_event>
   bdb72:	b9b8      	cbnz	r0, bdba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bdb74:	9b03      	ldr	r3, [sp, #12]
   bdb76:	785b      	ldrb	r3, [r3, #1]
   bdb78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bdb7c:	b993      	cbnz	r3, bdba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bdb7e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bdb82:	a905      	add	r1, sp, #20
   bdb84:	a803      	add	r0, sp, #12
   bdb86:	9205      	str	r2, [sp, #20]
   bdb88:	f8ad 3018 	strh.w	r3, [sp, #24]
   bdb8c:	f7ff ff18 	bl	bd9c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdb90:	a805      	add	r0, sp, #20
   bdb92:	f7ff fe44 	bl	bd81e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bdb96:	a805      	add	r0, sp, #20
   bdb98:	9909      	ldr	r1, [sp, #36]	; 0x24
   bdb9a:	f7ff feb2 	bl	bd902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bdb9e:	a806      	add	r0, sp, #24
   bdba0:	f7f6 fd88 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdba4:	a903      	add	r1, sp, #12
   bdba6:	a805      	add	r0, sp, #20
   bdba8:	f7ff fea2 	bl	bd8f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bdbac:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdbae:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bdbb0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bdbb2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bdbb4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bdbb6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bdbb8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bdbba:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bdbbc:	f7f6 fd7a 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdbc0:	a804      	add	r0, sp, #16
   bdbc2:	f7f6 fd77 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bdbc6:	e7ab      	b.n	bdb20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bdbc8:	000bdc49 	.word	0x000bdc49

000bdbcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bdbcc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bdbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdbd0:	4605      	mov	r5, r0
	switch (__op)
   bdbd2:	d103      	bne.n	bdbdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bdbd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bdbd6:	6003      	str	r3, [r0, #0]
      }
   bdbd8:	2000      	movs	r0, #0
   bdbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bdbdc:	2a02      	cmp	r2, #2
   bdbde:	d010      	beq.n	bdc02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bdbe0:	2a03      	cmp	r2, #3
   bdbe2:	d1f9      	bne.n	bdbd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdbe4:	6804      	ldr	r4, [r0, #0]
   bdbe6:	2c00      	cmp	r4, #0
   bdbe8:	d0f6      	beq.n	bdbd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bdbea:	f104 0010 	add.w	r0, r4, #16
   bdbee:	f7ff fe16 	bl	bd81e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bdbf2:	4620      	mov	r0, r4
   bdbf4:	f7f7 fcab 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bdbf8:	2118      	movs	r1, #24
   bdbfa:	4620      	mov	r0, r4
   bdbfc:	f7f6 fa4f 	bl	b409e <_ZdlPvj>
   bdc00:	e7ea      	b.n	bdbd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bdc02:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bdc04:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bdc06:	f7f6 fa46 	bl	b4096 <_Znwj>
   bdc0a:	4604      	mov	r4, r0
   bdc0c:	b150      	cbz	r0, bdc24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bdc0e:	4631      	mov	r1, r6
   bdc10:	f7ff fec6 	bl	bd9a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bdc14:	6930      	ldr	r0, [r6, #16]
   bdc16:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdc1a:	b108      	cbz	r0, bdc20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bdc1c:	f003 fc8e 	bl	c153c <strdup>
        type_(type) {
   bdc20:	6120      	str	r0, [r4, #16]
   bdc22:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bdc24:	602c      	str	r4, [r5, #0]
	}
   bdc26:	e7d7      	b.n	bdbd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bdc28 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bdc28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bdc2a:	2300      	movs	r3, #0
   bdc2c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bdc2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bdc30:	4604      	mov	r4, r0
   bdc32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bdc34:	b12b      	cbz	r3, bdc42 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bdc36:	2202      	movs	r2, #2
   bdc38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bdc3a:	68eb      	ldr	r3, [r5, #12]
   bdc3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bdc3e:	68ab      	ldr	r3, [r5, #8]
   bdc40:	60a3      	str	r3, [r4, #8]
    }
   bdc42:	4620      	mov	r0, r4
   bdc44:	bd38      	pop	{r3, r4, r5, pc}
	...

000bdc48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bdc48:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdc4a:	b089      	sub	sp, #36	; 0x24
   bdc4c:	4604      	mov	r4, r0
   bdc4e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bdc50:	a801      	add	r0, sp, #4
   bdc52:	4611      	mov	r1, r2
   bdc54:	f7ff fe55 	bl	bd902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bdc58:	b1a4      	cbz	r4, bdc84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bdc5a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdc5c:	b11d      	cbz	r5, bdc66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bdc5e:	4628      	mov	r0, r5
   bdc60:	f003 fc6c 	bl	c153c <strdup>
   bdc64:	4605      	mov	r5, r0
   bdc66:	a801      	add	r0, sp, #4
   bdc68:	a903      	add	r1, sp, #12
        type_(type) {
   bdc6a:	9503      	str	r5, [sp, #12]
   bdc6c:	f8ad 4010 	strh.w	r4, [sp, #16]
   bdc70:	f7ff fea6 	bl	bd9c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdc74:	a803      	add	r0, sp, #12
   bdc76:	f7ff fdd2 	bl	bd81e <_ZN8particle5ErrorD1Ev>
   bdc7a:	a802      	add	r0, sp, #8
   bdc7c:	f7f6 fd1a 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdc80:	b009      	add	sp, #36	; 0x24
   bdc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bdc84:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bdc86:	2301      	movs	r3, #1
   bdc88:	e8d5 2f4f 	ldrexb	r2, [r5]
   bdc8c:	2a00      	cmp	r2, #0
   bdc8e:	d103      	bne.n	bdc98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bdc90:	e8c5 3f41 	strexb	r1, r3, [r5]
   bdc94:	2900      	cmp	r1, #0
   bdc96:	d1f7      	bne.n	bdc88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bdc98:	d1ef      	bne.n	bdc7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bdc9a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bdc9c:	f3bf 8f5b 	dmb	ish
   bdca0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bdca2:	1d2b      	adds	r3, r5, #4
   bdca4:	f3bf 8f5b 	dmb	ish
   bdca8:	e853 6f00 	ldrex	r6, [r3]
   bdcac:	e843 4200 	strex	r2, r4, [r3]
   bdcb0:	2a00      	cmp	r2, #0
   bdcb2:	d1f9      	bne.n	bdca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bdcb4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bdcb8:	2e00      	cmp	r6, #0
   bdcba:	d0de      	beq.n	bdc7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bdcbc:	4620      	mov	r0, r4
   bdcbe:	f7ff faa7 	bl	bd210 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bdcc2:	4607      	mov	r7, r0
   bdcc4:	b160      	cbz	r0, bdce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bdcc6:	f105 010c 	add.w	r1, r5, #12
   bdcca:	4630      	mov	r0, r6
   bdccc:	f7ff fe44 	bl	bd958 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bdcd0:	4630      	mov	r0, r6
   bdcd2:	f7f7 fc3c 	bl	b554e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bdcd6:	2110      	movs	r1, #16
   bdcd8:	4630      	mov	r0, r6
   bdcda:	f7f6 f9e0 	bl	b409e <_ZdlPvj>
   bdcde:	e7cc      	b.n	bdc7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdce0:	4631      	mov	r1, r6
   bdce2:	a803      	add	r0, sp, #12
   bdce4:	f7ff ffa0 	bl	bdc28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdce8:	7b2b      	ldrb	r3, [r5, #12]
   bdcea:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bdcee:	2010      	movs	r0, #16
   bdcf0:	f7f6 f9d1 	bl	b4096 <_Znwj>
   bdcf4:	4605      	mov	r5, r0
   bdcf6:	b1d0      	cbz	r0, bdd2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bdcf8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdcfa:	2014      	movs	r0, #20
   bdcfc:	f7f6 f9cb 	bl	b4096 <_Znwj>
   bdd00:	4604      	mov	r4, r0
   bdd02:	b178      	cbz	r0, bdd24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bdd04:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bdd06:	4601      	mov	r1, r0
   bdd08:	a803      	add	r0, sp, #12
   bdd0a:	f7fa fd94 	bl	b8836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdd0e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdd10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdd12:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdd14:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bdd16:	9205      	str	r2, [sp, #20]
   bdd18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdd1a:	60e3      	str	r3, [r4, #12]
   bdd1c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bdd20:	9206      	str	r2, [sp, #24]
   bdd22:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bdd24:	4b06      	ldr	r3, [pc, #24]	; (bdd40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bdd26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdd28:	4b06      	ldr	r3, [pc, #24]	; (bdd44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdd2a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdd2c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bdd2e:	a803      	add	r0, sp, #12
   bdd30:	f7f7 fc0d 	bl	b554e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bdd34:	2200      	movs	r2, #0
   bdd36:	4629      	mov	r1, r5
   bdd38:	4803      	ldr	r0, [pc, #12]	; (bdd48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bdd3a:	f7ff fa71 	bl	bd220 <application_thread_invoke>
   bdd3e:	e7c7      	b.n	bdcd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bdd40:	000bd96b 	.word	0x000bd96b
   bdd44:	000bdd4d 	.word	0x000bdd4d
   bdd48:	000bd52b 	.word	0x000bd52b

000bdd4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bdd4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bdd4e:	b570      	push	{r4, r5, r6, lr}
   bdd50:	4604      	mov	r4, r0
	switch (__op)
   bdd52:	d103      	bne.n	bdd5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bdd54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bdd56:	6003      	str	r3, [r0, #0]
      }
   bdd58:	2000      	movs	r0, #0
   bdd5a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bdd5c:	2a02      	cmp	r2, #2
   bdd5e:	d00c      	beq.n	bdd7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bdd60:	2a03      	cmp	r2, #3
   bdd62:	d1f9      	bne.n	bdd58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdd64:	6804      	ldr	r4, [r0, #0]
   bdd66:	2c00      	cmp	r4, #0
   bdd68:	d0f6      	beq.n	bdd58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bdd6a:	4620      	mov	r0, r4
   bdd6c:	f7f7 fbef 	bl	b554e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bdd70:	2114      	movs	r1, #20
   bdd72:	4620      	mov	r0, r4
   bdd74:	f7f6 f993 	bl	b409e <_ZdlPvj>
   bdd78:	e7ee      	b.n	bdd58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bdd7a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bdd7c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bdd7e:	f7f6 f98a 	bl	b4096 <_Znwj>
   bdd82:	4605      	mov	r5, r0
   bdd84:	b120      	cbz	r0, bdd90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bdd86:	4631      	mov	r1, r6
   bdd88:	f7ff ff4e 	bl	bdc28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bdd8c:	7c33      	ldrb	r3, [r6, #16]
   bdd8e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bdd90:	6025      	str	r5, [r4, #0]
	}
   bdd92:	e7e1      	b.n	bdd58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bdd94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bdd94:	2200      	movs	r2, #0
   bdd96:	6840      	ldr	r0, [r0, #4]
   bdd98:	4611      	mov	r1, r2
   bdd9a:	f7ff bb1b 	b.w	bd3d4 <network_listening>

000bdd9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bdd9e:	2200      	movs	r2, #0
   bdda0:	6840      	ldr	r0, [r0, #4]
   bdda2:	4611      	mov	r1, r2
   bdda4:	f7ff bb26 	b.w	bd3f4 <network_get_listen_timeout>

000bdda8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bdda8:	6840      	ldr	r0, [r0, #4]
   bddaa:	2200      	movs	r2, #0
   bddac:	f7ff bb1a 	b.w	bd3e4 <network_set_listen_timeout>

000bddb0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bddb0:	6840      	ldr	r0, [r0, #4]
   bddb2:	2200      	movs	r2, #0
   bddb4:	f081 0101 	eor.w	r1, r1, #1
   bddb8:	f7ff bb04 	b.w	bd3c4 <network_listen>

000bddbc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bddbc:	2300      	movs	r3, #0
   bddbe:	6840      	ldr	r0, [r0, #4]
   bddc0:	461a      	mov	r2, r3
   bddc2:	4619      	mov	r1, r3
   bddc4:	f7ff baf6 	b.w	bd3b4 <network_off>

000bddc8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bddc8:	2300      	movs	r3, #0
   bddca:	6840      	ldr	r0, [r0, #4]
   bddcc:	461a      	mov	r2, r3
   bddce:	4619      	mov	r1, r3
   bddd0:	f7ff bae8 	b.w	bd3a4 <network_on>

000bddd4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bddd4:	2200      	movs	r2, #0
   bddd6:	6840      	ldr	r0, [r0, #4]
   bddd8:	4611      	mov	r1, r2
   bddda:	f7ff badb 	b.w	bd394 <network_ready>

000bddde <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bddde:	2200      	movs	r2, #0
   bdde0:	6840      	ldr	r0, [r0, #4]
   bdde2:	4611      	mov	r1, r2
   bdde4:	f7ff bac6 	b.w	bd374 <network_connecting>

000bdde8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bdde8:	6840      	ldr	r0, [r0, #4]
   bddea:	2200      	movs	r2, #0
   bddec:	2102      	movs	r1, #2
   bddee:	f7ff bac9 	b.w	bd384 <network_disconnect>

000bddf2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bddf2:	2300      	movs	r3, #0
   bddf4:	6840      	ldr	r0, [r0, #4]
   bddf6:	461a      	mov	r2, r3
   bddf8:	f7ff bab4 	b.w	bd364 <network_connect>

000bddfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bddfc:	4b02      	ldr	r3, [pc, #8]	; (bde08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bddfe:	2203      	movs	r2, #3
   bde00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bde02:	4a02      	ldr	r2, [pc, #8]	; (bde0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bde04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bde06:	4770      	bx	lr
   bde08:	2003e63c 	.word	0x2003e63c
   bde0c:	000c5584 	.word	0x000c5584

000bde10 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bde10:	6800      	ldr	r0, [r0, #0]
   bde12:	f000 b8f3 	b.w	bdffc <_ZN7TwoWire4lockEv>

000bde16 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bde16:	b510      	push	{r4, lr}
   bde18:	4604      	mov	r4, r0
      lock_(_lock) {
   bde1a:	6001      	str	r1, [r0, #0]
   bde1c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bde1e:	b10a      	cbz	r2, bde24 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bde20:	f7ff fff6 	bl	bde10 <_ZN9FuelGauge4lockEv>
}
   bde24:	4620      	mov	r0, r4
   bde26:	bd10      	pop	{r4, pc}

000bde28 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bde28:	b513      	push	{r0, r1, r4, lr}
   bde2a:	4604      	mov	r4, r0
   bde2c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bde2e:	f002 fcc1 	bl	c07b4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bde32:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bde34:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bde36:	4620      	mov	r0, r4
   bde38:	f7ff ffed 	bl	bde16 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bde3c:	4620      	mov	r0, r4
   bde3e:	b002      	add	sp, #8
   bde40:	bd10      	pop	{r4, pc}

000bde42 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bde42:	6800      	ldr	r0, [r0, #0]
   bde44:	f000 b8e3 	b.w	be00e <_ZN7TwoWire6unlockEv>

000bde48 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bde48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bde4c:	4604      	mov	r4, r0
   bde4e:	461d      	mov	r5, r3
   bde50:	460f      	mov	r7, r1
   bde52:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bde54:	f7ff ffdc 	bl	bde10 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bde58:	2236      	movs	r2, #54	; 0x36
   bde5a:	2300      	movs	r3, #0
   bde5c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bde60:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bde62:	f04f 0801 	mov.w	r8, #1
   bde66:	230a      	movs	r3, #10
   bde68:	4669      	mov	r1, sp
   bde6a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bde6e:	f000 f8a9 	bl	bdfc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bde72:	6820      	ldr	r0, [r4, #0]
   bde74:	6803      	ldr	r3, [r0, #0]
   bde76:	4639      	mov	r1, r7
   bde78:	689b      	ldr	r3, [r3, #8]
   bde7a:	4798      	blx	r3
    i2c_.write(MSB);
   bde7c:	6820      	ldr	r0, [r4, #0]
   bde7e:	6803      	ldr	r3, [r0, #0]
   bde80:	4631      	mov	r1, r6
   bde82:	689b      	ldr	r3, [r3, #8]
   bde84:	4798      	blx	r3
    i2c_.write(LSB);
   bde86:	6820      	ldr	r0, [r4, #0]
   bde88:	6803      	ldr	r3, [r0, #0]
   bde8a:	4629      	mov	r1, r5
   bde8c:	689b      	ldr	r3, [r3, #8]
   bde8e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bde90:	4641      	mov	r1, r8
   bde92:	6820      	ldr	r0, [r4, #0]
   bde94:	f000 f8ae 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
   bde98:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bde9a:	4620      	mov	r0, r4
   bde9c:	bf0c      	ite	eq
   bde9e:	2500      	moveq	r5, #0
   bdea0:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bdea4:	f7ff ffcd 	bl	bde42 <_ZN9FuelGauge6unlockEv>
}
   bdea8:	4628      	mov	r0, r5
   bdeaa:	b004      	add	sp, #16
   bdeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdeb0 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bdeb0:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bdeb2:	2240      	movs	r2, #64	; 0x40
   bdeb4:	2300      	movs	r3, #0
   bdeb6:	2106      	movs	r1, #6
   bdeb8:	f7ff ffc6 	bl	bde48 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bdebc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdec0:	bd08      	pop	{r3, pc}

000bdec2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bdec2:	4770      	bx	lr

000bdec4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bdec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdec6:	4606      	mov	r6, r0
   bdec8:	4615      	mov	r5, r2
   bdeca:	460c      	mov	r4, r1
   bdecc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bdece:	42bc      	cmp	r4, r7
   bded0:	d006      	beq.n	bdee0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bded2:	6833      	ldr	r3, [r6, #0]
   bded4:	f814 1b01 	ldrb.w	r1, [r4], #1
   bded8:	689b      	ldr	r3, [r3, #8]
   bdeda:	4630      	mov	r0, r6
   bdedc:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bdede:	e7f6      	b.n	bdece <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bdee0:	4628      	mov	r0, r5
   bdee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdee4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bdee4:	7c00      	ldrb	r0, [r0, #16]
   bdee6:	2200      	movs	r2, #0
   bdee8:	f7fe bf80 	b.w	bcdec <hal_i2c_write>

000bdeec <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bdeec:	7c00      	ldrb	r0, [r0, #16]
   bdeee:	2100      	movs	r1, #0
   bdef0:	f7fe bf84 	b.w	bcdfc <hal_i2c_available>

000bdef4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bdef4:	7c00      	ldrb	r0, [r0, #16]
   bdef6:	2100      	movs	r1, #0
   bdef8:	f7fe bf88 	b.w	bce0c <hal_i2c_read>

000bdefc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bdefc:	7c00      	ldrb	r0, [r0, #16]
   bdefe:	2100      	movs	r1, #0
   bdf00:	f7fe bf8c 	b.w	bce1c <hal_i2c_peek>

000bdf04 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bdf04:	7c00      	ldrb	r0, [r0, #16]
   bdf06:	2100      	movs	r1, #0
   bdf08:	f7fe bf90 	b.w	bce2c <hal_i2c_flush>

000bdf0c <_ZN7TwoWireD0Ev>:
   bdf0c:	b510      	push	{r4, lr}
   bdf0e:	2114      	movs	r1, #20
   bdf10:	4604      	mov	r4, r0
   bdf12:	f7f6 f8c4 	bl	b409e <_ZdlPvj>
   bdf16:	4620      	mov	r0, r4
   bdf18:	bd10      	pop	{r4, pc}
	...

000bdf1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdf1c:	b538      	push	{r3, r4, r5, lr}
   bdf1e:	4604      	mov	r4, r0
   bdf20:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bdf22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdf26:	2200      	movs	r2, #0
   bdf28:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdf2c:	4b09      	ldr	r3, [pc, #36]	; (bdf54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bdf2e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdf30:	4608      	mov	r0, r1
   bdf32:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bdf34:	4629      	mov	r1, r5
   bdf36:	f7fe ff89 	bl	bce4c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdf3a:	30bf      	adds	r0, #191	; 0xbf
   bdf3c:	d108      	bne.n	bdf50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bdf3e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdf40:	07db      	lsls	r3, r3, #31
   bdf42:	d505      	bpl.n	bdf50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bdf44:	6868      	ldr	r0, [r5, #4]
   bdf46:	f7ff fa75 	bl	bd434 <free>
    free(conf.tx_buffer);
   bdf4a:	68e8      	ldr	r0, [r5, #12]
   bdf4c:	f7ff fa72 	bl	bd434 <free>
}
   bdf50:	4620      	mov	r0, r4
   bdf52:	bd38      	pop	{r3, r4, r5, pc}
   bdf54:	000c55c0 	.word	0x000c55c0

000bdf58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bdf58:	2300      	movs	r3, #0
   bdf5a:	7c00      	ldrb	r0, [r0, #16]
   bdf5c:	461a      	mov	r2, r3
   bdf5e:	4619      	mov	r1, r3
   bdf60:	f7fe bf2c 	b.w	bcdbc <hal_i2c_begin>

000bdf64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bdf64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdf66:	2200      	movs	r2, #0
   bdf68:	2314      	movs	r3, #20
   bdf6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bdf6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bdf72:	780b      	ldrb	r3, [r1, #0]
   bdf74:	f88d 3008 	strb.w	r3, [sp, #8]
   bdf78:	684b      	ldr	r3, [r1, #4]
   bdf7a:	9303      	str	r3, [sp, #12]
   bdf7c:	68cb      	ldr	r3, [r1, #12]
   bdf7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bdf80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bdf82:	7a0b      	ldrb	r3, [r1, #8]
   bdf84:	9305      	str	r3, [sp, #20]
   bdf86:	a901      	add	r1, sp, #4
   bdf88:	f7fe ff78 	bl	bce7c <hal_i2c_request_ex>
}
   bdf8c:	b007      	add	sp, #28
   bdf8e:	f85d fb04 	ldr.w	pc, [sp], #4

000bdf92 <_ZN7TwoWire11requestFromEhjh>:
{
   bdf92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bdf94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdf96:	f88d 1000 	strb.w	r1, [sp]
   bdf9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bdf9e:	9103      	str	r1, [sp, #12]
   bdfa0:	bf18      	it	ne
   bdfa2:	2301      	movne	r3, #1
   bdfa4:	4669      	mov	r1, sp
    size_ = size;
   bdfa6:	9201      	str	r2, [sp, #4]
   bdfa8:	f88d 3008 	strb.w	r3, [sp, #8]
   bdfac:	f7ff ffda 	bl	bdf64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bdfb0:	b005      	add	sp, #20
   bdfb2:	f85d fb04 	ldr.w	pc, [sp], #4

000bdfb6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bdfb6:	7c00      	ldrb	r0, [r0, #16]
   bdfb8:	2200      	movs	r2, #0
   bdfba:	f7fe bf07 	b.w	bcdcc <hal_i2c_begin_transmission>

000bdfbe <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bdfbe:	b2c9      	uxtb	r1, r1
   bdfc0:	f7ff bff9 	b.w	bdfb6 <_ZN7TwoWire17beginTransmissionEh>

000bdfc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bdfc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdfc6:	2300      	movs	r3, #0
   bdfc8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bdfcc:	684a      	ldr	r2, [r1, #4]
   bdfce:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bdfd0:	2314      	movs	r3, #20
    };
   bdfd2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bdfd4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bdfd8:	780b      	ldrb	r3, [r1, #0]
    };
   bdfda:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bdfdc:	7a0a      	ldrb	r2, [r1, #8]
   bdfde:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bdfe0:	7c00      	ldrb	r0, [r0, #16]
    };
   bdfe2:	f88d 3008 	strb.w	r3, [sp, #8]
   bdfe6:	aa01      	add	r2, sp, #4
   bdfe8:	4619      	mov	r1, r3
   bdfea:	f7fe feef 	bl	bcdcc <hal_i2c_begin_transmission>
}
   bdfee:	b007      	add	sp, #28
   bdff0:	f85d fb04 	ldr.w	pc, [sp], #4

000bdff4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bdff4:	7c00      	ldrb	r0, [r0, #16]
   bdff6:	2200      	movs	r2, #0
   bdff8:	f7fe bef0 	b.w	bcddc <hal_i2c_end_transmission>

000bdffc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bdffc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bdffe:	2100      	movs	r1, #0
   be000:	7c00      	ldrb	r0, [r0, #16]
   be002:	f7fe ff2b 	bl	bce5c <hal_i2c_lock>
}
   be006:	fab0 f080 	clz	r0, r0
   be00a:	0940      	lsrs	r0, r0, #5
   be00c:	bd08      	pop	{r3, pc}

000be00e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   be00e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   be010:	2100      	movs	r1, #0
   be012:	7c00      	ldrb	r0, [r0, #16]
   be014:	f7fe ff2a 	bl	bce6c <hal_i2c_unlock>
}
   be018:	fab0 f080 	clz	r0, r0
   be01c:	0940      	lsrs	r0, r0, #5
   be01e:	bd08      	pop	{r3, pc}

000be020 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   be020:	4700      	bx	r0
	...

000be024 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   be024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   be028:	2400      	movs	r4, #0
{
   be02a:	461d      	mov	r5, r3
   be02c:	460f      	mov	r7, r1
   be02e:	4690      	mov	r8, r2
   be030:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   be032:	f7fe feb3 	bl	bcd9c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   be036:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   be038:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   be03c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   be040:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   be044:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   be048:	bfa2      	ittt	ge
   be04a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   be04e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   be052:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   be054:	4907      	ldr	r1, [pc, #28]	; (be074 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   be056:	9400      	str	r4, [sp, #0]
   be058:	4643      	mov	r3, r8
   be05a:	463a      	mov	r2, r7
   be05c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   be05e:	bfa8      	it	ge
   be060:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   be064:	f7fe fe92 	bl	bcd8c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   be068:	fab0 f080 	clz	r0, r0
   be06c:	0940      	lsrs	r0, r0, #5
   be06e:	b004      	add	sp, #16
   be070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be074:	000be021 	.word	0x000be021

000be078 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   be078:	4770      	bx	lr

000be07a <_ZN9IPAddressD0Ev>:
   be07a:	b510      	push	{r4, lr}
   be07c:	2118      	movs	r1, #24
   be07e:	4604      	mov	r4, r0
   be080:	f7f6 f80d 	bl	b409e <_ZdlPvj>
   be084:	4620      	mov	r0, r4
   be086:	bd10      	pop	{r4, pc}

000be088 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   be088:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   be08a:	7d03      	ldrb	r3, [r0, #20]
   be08c:	2b06      	cmp	r3, #6
{
   be08e:	b08d      	sub	sp, #52	; 0x34
   be090:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be092:	f100 0704 	add.w	r7, r0, #4
   be096:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   be09a:	d012      	beq.n	be0c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   be09c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   be0a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   be0a4:	220a      	movs	r2, #10
   be0a6:	4630      	mov	r0, r6
   be0a8:	f001 fb0d 	bl	bf6c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   be0ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   be0ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   be0b0:	d019      	beq.n	be0e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   be0b2:	2c00      	cmp	r4, #0
   be0b4:	d0f4      	beq.n	be0a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   be0b6:	212e      	movs	r1, #46	; 0x2e
   be0b8:	4630      	mov	r0, r6
   be0ba:	f001 faf5 	bl	bf6a8 <_ZN5Print5printEc>
   be0be:	4404      	add	r4, r0
   be0c0:	e7ee      	b.n	be0a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be0c2:	232f      	movs	r3, #47	; 0x2f
   be0c4:	466a      	mov	r2, sp
   be0c6:	4639      	mov	r1, r7
   be0c8:	200a      	movs	r0, #10
		buf[0] = 0;
   be0ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be0ce:	f7fe fedd 	bl	bce8c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   be0d2:	4668      	mov	r0, sp
   be0d4:	f003 fa4f 	bl	c1576 <strlen>
   be0d8:	6833      	ldr	r3, [r6, #0]
   be0da:	4602      	mov	r2, r0
   be0dc:	68db      	ldr	r3, [r3, #12]
   be0de:	4669      	mov	r1, sp
   be0e0:	4630      	mov	r0, r6
   be0e2:	4798      	blx	r3
   be0e4:	4604      	mov	r4, r0
    }
    return n;
}
   be0e6:	4620      	mov	r0, r4
   be0e8:	b00d      	add	sp, #52	; 0x34
   be0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000be0ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   be0ec:	b510      	push	{r4, lr}
   be0ee:	4b05      	ldr	r3, [pc, #20]	; (be104 <_ZN9IPAddressC1Ev+0x18>)
   be0f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   be0f2:	2211      	movs	r2, #17
   be0f4:	f840 3b04 	str.w	r3, [r0], #4
   be0f8:	2100      	movs	r1, #0
   be0fa:	f003 f971 	bl	c13e0 <memset>
}
   be0fe:	4620      	mov	r0, r4
   be100:	bd10      	pop	{r4, pc}
   be102:	bf00      	nop
   be104:	000c55e8 	.word	0x000c55e8

000be108 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   be108:	4603      	mov	r3, r0
   be10a:	4a07      	ldr	r2, [pc, #28]	; (be128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   be10c:	b510      	push	{r4, lr}
   be10e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   be112:	f101 0210 	add.w	r2, r1, #16
   be116:	f851 4b04 	ldr.w	r4, [r1], #4
   be11a:	f843 4b04 	str.w	r4, [r3], #4
   be11e:	4291      	cmp	r1, r2
   be120:	d1f9      	bne.n	be116 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   be122:	780a      	ldrb	r2, [r1, #0]
   be124:	701a      	strb	r2, [r3, #0]
}
   be126:	bd10      	pop	{r4, pc}
   be128:	000c55e8 	.word	0x000c55e8

000be12c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   be12c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   be12e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   be132:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   be136:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   be13a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   be13e:	2304      	movs	r3, #4
   be140:	6041      	str	r1, [r0, #4]
   be142:	7503      	strb	r3, [r0, #20]
}
   be144:	bd10      	pop	{r4, pc}
	...

000be148 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   be148:	b507      	push	{r0, r1, r2, lr}
   be14a:	4b06      	ldr	r3, [pc, #24]	; (be164 <_ZN9IPAddressC1EPKh+0x1c>)
   be14c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   be14e:	78cb      	ldrb	r3, [r1, #3]
   be150:	9300      	str	r3, [sp, #0]
   be152:	788b      	ldrb	r3, [r1, #2]
   be154:	784a      	ldrb	r2, [r1, #1]
   be156:	7809      	ldrb	r1, [r1, #0]
   be158:	f7ff ffe8 	bl	be12c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   be15c:	b003      	add	sp, #12
   be15e:	f85d fb04 	ldr.w	pc, [sp], #4
   be162:	bf00      	nop
   be164:	000c55e8 	.word	0x000c55e8

000be168 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   be168:	f100 0310 	add.w	r3, r0, #16
   be16c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   be16e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   be172:	2901      	cmp	r1, #1
   be174:	4618      	mov	r0, r3
   be176:	d108      	bne.n	be18a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   be178:	f853 1c04 	ldr.w	r1, [r3, #-4]
   be17c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   be180:	3a01      	subs	r2, #1
   be182:	f103 0310 	add.w	r3, r3, #16
   be186:	d1f2      	bne.n	be16e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   be188:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   be18a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   be18c:	bf04      	itt	eq
   be18e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   be192:	1852      	addeq	r2, r2, r1
   be194:	e7f4      	b.n	be180 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000be196 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   be196:	b40e      	push	{r1, r2, r3}
   be198:	b5f0      	push	{r4, r5, r6, r7, lr}
   be19a:	b088      	sub	sp, #32
   be19c:	af00      	add	r7, sp, #0
   be19e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1a2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   be1a4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1a8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   be1aa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1ac:	462b      	mov	r3, r5
   be1ae:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   be1b0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1b2:	f7ff f967 	bl	bd484 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   be1b6:	280f      	cmp	r0, #15
   be1b8:	687a      	ldr	r2, [r7, #4]
   be1ba:	d91a      	bls.n	be1f2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   be1bc:	f100 0308 	add.w	r3, r0, #8
   be1c0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   be1c4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   be1c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1ca:	1c41      	adds	r1, r0, #1
   be1cc:	462b      	mov	r3, r5
   be1ce:	4668      	mov	r0, sp
        va_start(args, fmt);
   be1d0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be1d2:	f7ff f957 	bl	bd484 <vsnprintf>
        if (n > 0) {
   be1d6:	1e02      	subs	r2, r0, #0
   be1d8:	dd04      	ble.n	be1e4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   be1da:	6823      	ldr	r3, [r4, #0]
   be1dc:	4669      	mov	r1, sp
   be1de:	689b      	ldr	r3, [r3, #8]
   be1e0:	4620      	mov	r0, r4
   be1e2:	4798      	blx	r3
   be1e4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   be1e6:	3720      	adds	r7, #32
   be1e8:	46bd      	mov	sp, r7
   be1ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   be1ee:	b003      	add	sp, #12
   be1f0:	4770      	bx	lr
    } else if (n > 0) {
   be1f2:	2800      	cmp	r0, #0
   be1f4:	d0f7      	beq.n	be1e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   be1f6:	6823      	ldr	r3, [r4, #0]
   be1f8:	4602      	mov	r2, r0
   be1fa:	689b      	ldr	r3, [r3, #8]
   be1fc:	f107 0110 	add.w	r1, r7, #16
   be200:	4620      	mov	r0, r4
   be202:	4798      	blx	r3
}
   be204:	e7ef      	b.n	be1e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000be206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be206:	b538      	push	{r3, r4, r5, lr}
   be208:	680b      	ldr	r3, [r1, #0]
   be20a:	6003      	str	r3, [r0, #0]
   be20c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   be20e:	6843      	ldr	r3, [r0, #4]
   be210:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be212:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   be214:	d008      	beq.n	be228 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   be216:	b115      	cbz	r5, be21e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   be218:	686b      	ldr	r3, [r5, #4]
   be21a:	3301      	adds	r3, #1
   be21c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   be21e:	6860      	ldr	r0, [r4, #4]
   be220:	b108      	cbz	r0, be226 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   be222:	f7ff f996 	bl	bd552 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   be226:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be228:	bd38      	pop	{r3, r4, r5, pc}

000be22a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   be22a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be22c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   be22e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be232:	689b      	ldr	r3, [r3, #8]
   be234:	2201      	movs	r2, #1
   be236:	f10d 0107 	add.w	r1, sp, #7
   be23a:	4798      	blx	r3
}
   be23c:	b003      	add	sp, #12
   be23e:	f85d fb04 	ldr.w	pc, [sp], #4

000be242 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   be242:	460b      	mov	r3, r1
   be244:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   be246:	2200      	movs	r2, #0
   be248:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   be24a:	e9c0 2200 	strd	r2, r2, [r0]
   be24e:	4604      	mov	r4, r0
        t_ = t;
   be250:	6083      	str	r3, [r0, #8]
    if (t) {
   be252:	b90b      	cbnz	r3, be258 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   be254:	4620      	mov	r0, r4
   be256:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   be258:	f7ff ffd5 	bl	be206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   be25c:	e7fa      	b.n	be254 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000be25e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   be25e:	6883      	ldr	r3, [r0, #8]
   be260:	b1eb      	cbz	r3, be29e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   be262:	781a      	ldrb	r2, [r3, #0]
   be264:	2a03      	cmp	r2, #3
   be266:	d81a      	bhi.n	be29e <_ZNK5spark9JSONValue4typeEv+0x40>
   be268:	e8df f002 	tbb	[pc, r2]
   be26c:	1b021704 	.word	0x1b021704
   be270:	2005      	movs	r0, #5
   be272:	4770      	bx	lr
        const char c = d_->json[t_->start];
   be274:	6802      	ldr	r2, [r0, #0]
   be276:	685b      	ldr	r3, [r3, #4]
   be278:	6852      	ldr	r2, [r2, #4]
   be27a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   be27c:	282d      	cmp	r0, #45	; 0x2d
   be27e:	d012      	beq.n	be2a6 <_ZNK5spark9JSONValue4typeEv+0x48>
   be280:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be284:	2b09      	cmp	r3, #9
   be286:	d90e      	bls.n	be2a6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   be288:	2874      	cmp	r0, #116	; 0x74
   be28a:	d00e      	beq.n	be2aa <_ZNK5spark9JSONValue4typeEv+0x4c>
   be28c:	2866      	cmp	r0, #102	; 0x66
   be28e:	d00c      	beq.n	be2aa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   be290:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   be294:	4258      	negs	r0, r3
   be296:	4158      	adcs	r0, r3
   be298:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   be29a:	2006      	movs	r0, #6
   be29c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   be29e:	2000      	movs	r0, #0
   be2a0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   be2a2:	2004      	movs	r0, #4
   be2a4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   be2a6:	2003      	movs	r0, #3
   be2a8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   be2aa:	2002      	movs	r0, #2
}
   be2ac:	4770      	bx	lr

000be2ae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   be2ae:	b510      	push	{r4, lr}
   be2b0:	4604      	mov	r4, r0
    switch (type()) {
   be2b2:	f7ff ffd4 	bl	be25e <_ZNK5spark9JSONValue4typeEv>
   be2b6:	2802      	cmp	r0, #2
   be2b8:	d00e      	beq.n	be2d8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   be2ba:	1ec3      	subs	r3, r0, #3
   be2bc:	b2db      	uxtb	r3, r3
   be2be:	2b01      	cmp	r3, #1
   be2c0:	d814      	bhi.n	be2ec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   be2c2:	6822      	ldr	r2, [r4, #0]
   be2c4:	68a3      	ldr	r3, [r4, #8]
   be2c6:	6850      	ldr	r0, [r2, #4]
   be2c8:	685b      	ldr	r3, [r3, #4]
}
   be2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   be2ce:	220a      	movs	r2, #10
   be2d0:	2100      	movs	r1, #0
   be2d2:	4418      	add	r0, r3
   be2d4:	f004 b8c0 	b.w	c2458 <strtol>
        const char* const s = d_->json + t_->start;
   be2d8:	6822      	ldr	r2, [r4, #0]
   be2da:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   be2dc:	6852      	ldr	r2, [r2, #4]
   be2de:	685b      	ldr	r3, [r3, #4]
   be2e0:	5cd0      	ldrb	r0, [r2, r3]
   be2e2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   be2e6:	4258      	negs	r0, r3
   be2e8:	4158      	adcs	r0, r3
}
   be2ea:	bd10      	pop	{r4, pc}
    switch (type()) {
   be2ec:	2000      	movs	r0, #0
   be2ee:	e7fc      	b.n	be2ea <_ZNK5spark9JSONValue5toIntEv+0x3c>

000be2f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   be2f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be2f2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   be2f4:	e9c0 3300 	strd	r3, r3, [r0]
   be2f8:	4604      	mov	r4, r0
        n_(0) {
   be2fa:	480e      	ldr	r0, [pc, #56]	; (be334 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   be2fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   be300:	b1a9      	cbz	r1, be32e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   be302:	780b      	ldrb	r3, [r1, #0]
   be304:	2b03      	cmp	r3, #3
   be306:	d006      	beq.n	be316 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   be308:	b98b      	cbnz	r3, be32e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   be30a:	6813      	ldr	r3, [r2, #0]
   be30c:	6858      	ldr	r0, [r3, #4]
   be30e:	684b      	ldr	r3, [r1, #4]
   be310:	5cc3      	ldrb	r3, [r0, r3]
   be312:	2b6e      	cmp	r3, #110	; 0x6e
   be314:	d007      	beq.n	be326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   be316:	6813      	ldr	r3, [r2, #0]
   be318:	684d      	ldr	r5, [r1, #4]
   be31a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   be31c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   be31e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   be320:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   be322:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   be324:	60e3      	str	r3, [r4, #12]
   be326:	4611      	mov	r1, r2
   be328:	4620      	mov	r0, r4
   be32a:	f7ff ff6c 	bl	be206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be32e:	4620      	mov	r0, r4
   be330:	bd38      	pop	{r3, r4, r5, pc}
   be332:	bf00      	nop
   be334:	000c5654 	.word	0x000c5654

000be338 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   be338:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be33a:	2500      	movs	r5, #0
   be33c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   be33e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   be342:	e9c0 5502 	strd	r5, r5, [r0, #8]
   be346:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be34a:	4604      	mov	r4, r0
   be34c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   be34e:	b14b      	cbz	r3, be364 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   be350:	781a      	ldrb	r2, [r3, #0]
   be352:	2a01      	cmp	r2, #1
   be354:	d106      	bne.n	be364 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   be356:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   be35a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   be35c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   be35e:	6143      	str	r3, [r0, #20]
   be360:	f7ff ff51 	bl	be206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be364:	4620      	mov	r0, r4
   be366:	bd38      	pop	{r3, r4, r5, pc}

000be368 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   be368:	b510      	push	{r4, lr}
    if (!n_) {
   be36a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   be36c:	4604      	mov	r4, r0
    if (!n_) {
   be36e:	b163      	cbz	r3, be38a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   be370:	6880      	ldr	r0, [r0, #8]
   be372:	60e0      	str	r0, [r4, #12]
    --n_;
   be374:	3b01      	subs	r3, #1
    ++t_;
   be376:	3010      	adds	r0, #16
   be378:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   be37a:	6120      	str	r0, [r4, #16]
    --n_;
   be37c:	6163      	str	r3, [r4, #20]
    if (n_) {
   be37e:	b113      	cbz	r3, be386 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   be380:	f7ff fef2 	bl	be168 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   be384:	60a0      	str	r0, [r4, #8]
    return true;
   be386:	2001      	movs	r0, #1
   be388:	e000      	b.n	be38c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   be38a:	4618      	mov	r0, r3
}
   be38c:	bd10      	pop	{r4, pc}

000be38e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   be38e:	b510      	push	{r4, lr}
    write('}');
   be390:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   be392:	4604      	mov	r4, r0
    write('}');
   be394:	f7ff ff49 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   be398:	2301      	movs	r3, #1
   be39a:	7123      	strb	r3, [r4, #4]
}
   be39c:	4620      	mov	r0, r4
   be39e:	bd10      	pop	{r4, pc}

000be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   be3a0:	b508      	push	{r3, lr}
    switch (state_) {
   be3a2:	7903      	ldrb	r3, [r0, #4]
   be3a4:	2b01      	cmp	r3, #1
   be3a6:	d002      	beq.n	be3ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   be3a8:	2b02      	cmp	r3, #2
   be3aa:	d004      	beq.n	be3b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   be3ac:	bd08      	pop	{r3, pc}
        write(',');
   be3ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
   be3b0:	f7ff ff3b 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
}
   be3b4:	e7fa      	b.n	be3ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   be3b6:	213a      	movs	r1, #58	; 0x3a
   be3b8:	e7fa      	b.n	be3b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000be3ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   be3ba:	b510      	push	{r4, lr}
   be3bc:	4604      	mov	r4, r0
    writeSeparator();
   be3be:	f7ff ffef 	bl	be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   be3c2:	4620      	mov	r0, r4
   be3c4:	217b      	movs	r1, #123	; 0x7b
   be3c6:	f7ff ff30 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   be3ca:	2300      	movs	r3, #0
   be3cc:	7123      	strb	r3, [r4, #4]
}
   be3ce:	4620      	mov	r0, r4
   be3d0:	bd10      	pop	{r4, pc}
	...

000be3d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   be3d4:	b513      	push	{r0, r1, r4, lr}
   be3d6:	4604      	mov	r4, r0
   be3d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be3da:	f7ff ffe1 	bl	be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   be3de:	6823      	ldr	r3, [r4, #0]
   be3e0:	9a01      	ldr	r2, [sp, #4]
   be3e2:	68db      	ldr	r3, [r3, #12]
   be3e4:	4903      	ldr	r1, [pc, #12]	; (be3f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   be3e6:	4620      	mov	r0, r4
   be3e8:	4798      	blx	r3
    state_ = NEXT;
   be3ea:	2301      	movs	r3, #1
}
   be3ec:	4620      	mov	r0, r4
    state_ = NEXT;
   be3ee:	7123      	strb	r3, [r4, #4]
}
   be3f0:	b002      	add	sp, #8
   be3f2:	bd10      	pop	{r4, pc}
   be3f4:	000c3d47 	.word	0x000c3d47

000be3f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   be3f8:	b513      	push	{r0, r1, r4, lr}
   be3fa:	4604      	mov	r4, r0
   be3fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be3fe:	f7ff ffcf 	bl	be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   be402:	6823      	ldr	r3, [r4, #0]
   be404:	9a01      	ldr	r2, [sp, #4]
   be406:	68db      	ldr	r3, [r3, #12]
   be408:	4903      	ldr	r1, [pc, #12]	; (be418 <_ZN5spark10JSONWriter5valueEj+0x20>)
   be40a:	4620      	mov	r0, r4
   be40c:	4798      	blx	r3
    state_ = NEXT;
   be40e:	2301      	movs	r3, #1
}
   be410:	4620      	mov	r0, r4
    state_ = NEXT;
   be412:	7123      	strb	r3, [r4, #4]
}
   be414:	b002      	add	sp, #8
   be416:	bd10      	pop	{r4, pc}
   be418:	000c4eb6 	.word	0x000c4eb6

000be41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be420:	460d      	mov	r5, r1
    write('"');
   be422:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be424:	4690      	mov	r8, r2
   be426:	4604      	mov	r4, r0
    write('"');
   be428:	f7ff feff 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   be42c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; be4d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   be430:	44a8      	add	r8, r5
    const char *s = str;
   be432:	462f      	mov	r7, r5
    while (s != end) {
   be434:	4547      	cmp	r7, r8
   be436:	46ba      	mov	sl, r7
   be438:	d03d      	beq.n	be4b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   be43a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   be43e:	2e22      	cmp	r6, #34	; 0x22
   be440:	d006      	beq.n	be450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be442:	2e5c      	cmp	r6, #92	; 0x5c
   be444:	d004      	beq.n	be450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be446:	4630      	mov	r0, r6
   be448:	f002 ff9a 	bl	c1380 <isprint>
   be44c:	2800      	cmp	r0, #0
   be44e:	d1f1      	bne.n	be434 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   be450:	6823      	ldr	r3, [r4, #0]
   be452:	ebaa 0205 	sub.w	r2, sl, r5
   be456:	689b      	ldr	r3, [r3, #8]
   be458:	4629      	mov	r1, r5
   be45a:	4620      	mov	r0, r4
   be45c:	4798      	blx	r3
            write('\\');
   be45e:	215c      	movs	r1, #92	; 0x5c
   be460:	4620      	mov	r0, r4
   be462:	f7ff fee2 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   be466:	2e0d      	cmp	r6, #13
   be468:	d80a      	bhi.n	be480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   be46a:	2e07      	cmp	r6, #7
   be46c:	d91c      	bls.n	be4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be46e:	f1a6 0308 	sub.w	r3, r6, #8
   be472:	2b05      	cmp	r3, #5
   be474:	d818      	bhi.n	be4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be476:	e8df f003 	tbb	[pc, r3]
   be47a:	0f0d      	.short	0x0f0d
   be47c:	15131711 	.word	0x15131711
   be480:	2e22      	cmp	r6, #34	; 0x22
   be482:	d001      	beq.n	be488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   be484:	2e5c      	cmp	r6, #92	; 0x5c
   be486:	d10f      	bne.n	be4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   be488:	4631      	mov	r1, r6
                write('b');
   be48a:	4620      	mov	r0, r4
   be48c:	f7ff fecd 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   be490:	463d      	mov	r5, r7
    while (s != end) {
   be492:	e7cf      	b.n	be434 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   be494:	2162      	movs	r1, #98	; 0x62
   be496:	e7f8      	b.n	be48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   be498:	2174      	movs	r1, #116	; 0x74
   be49a:	e7f6      	b.n	be48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   be49c:	216e      	movs	r1, #110	; 0x6e
   be49e:	e7f4      	b.n	be48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   be4a0:	2166      	movs	r1, #102	; 0x66
   be4a2:	e7f2      	b.n	be48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   be4a4:	2172      	movs	r1, #114	; 0x72
   be4a6:	e7f0      	b.n	be48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   be4a8:	6823      	ldr	r3, [r4, #0]
   be4aa:	4632      	mov	r2, r6
   be4ac:	68db      	ldr	r3, [r3, #12]
   be4ae:	4649      	mov	r1, r9
   be4b0:	4620      	mov	r0, r4
   be4b2:	4798      	blx	r3
                break;
   be4b4:	e7ec      	b.n	be490 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   be4b6:	42bd      	cmp	r5, r7
   be4b8:	d005      	beq.n	be4c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   be4ba:	6823      	ldr	r3, [r4, #0]
   be4bc:	1b7a      	subs	r2, r7, r5
   be4be:	689b      	ldr	r3, [r3, #8]
   be4c0:	4629      	mov	r1, r5
   be4c2:	4620      	mov	r0, r4
   be4c4:	4798      	blx	r3
    }
    write('"');
   be4c6:	2122      	movs	r1, #34	; 0x22
   be4c8:	4620      	mov	r0, r4
   be4ca:	f7ff feae 	bl	be22a <_ZN5spark10JSONWriter5writeEc>
}
   be4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be4d2:	bf00      	nop
   be4d4:	000c55f4 	.word	0x000c55f4

000be4d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   be4d8:	b513      	push	{r0, r1, r4, lr}
   be4da:	4604      	mov	r4, r0
   be4dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be4e0:	f7ff ff5e 	bl	be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   be4e4:	4620      	mov	r0, r4
   be4e6:	e9dd 2100 	ldrd	r2, r1, [sp]
   be4ea:	f7ff ff97 	bl	be41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be4ee:	2302      	movs	r3, #2
}
   be4f0:	4620      	mov	r0, r4
    state_ = VALUE;
   be4f2:	7123      	strb	r3, [r4, #4]
}
   be4f4:	b002      	add	sp, #8
   be4f6:	bd10      	pop	{r4, pc}

000be4f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be4f8:	b513      	push	{r0, r1, r4, lr}
   be4fa:	4604      	mov	r4, r0
   be4fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be500:	f7ff ff4e 	bl	be3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be504:	4620      	mov	r0, r4
   be506:	e9dd 2100 	ldrd	r2, r1, [sp]
   be50a:	f7ff ff87 	bl	be41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be50e:	2301      	movs	r3, #1
}
   be510:	4620      	mov	r0, r4
    state_ = NEXT;
   be512:	7123      	strb	r3, [r4, #4]
}
   be514:	b002      	add	sp, #8
   be516:	bd10      	pop	{r4, pc}

000be518 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be518:	6880      	ldr	r0, [r0, #8]
   be51a:	6803      	ldr	r3, [r0, #0]
   be51c:	68db      	ldr	r3, [r3, #12]
   be51e:	4718      	bx	r3

000be520 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be520:	4770      	bx	lr

000be522 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be522:	4608      	mov	r0, r1
   be524:	b111      	cbz	r1, be52c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be526:	680b      	ldr	r3, [r1, #0]
   be528:	685b      	ldr	r3, [r3, #4]
   be52a:	4718      	bx	r3
}
   be52c:	4770      	bx	lr

000be52e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be52e:	4770      	bx	lr

000be530 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be530:	4770      	bx	lr

000be532 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be532:	4770      	bx	lr

000be534 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be534:	4770      	bx	lr

000be536 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be536:	b538      	push	{r3, r4, r5, lr}
   be538:	4604      	mov	r4, r0
   be53a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be53c:	6800      	ldr	r0, [r0, #0]
   be53e:	212e      	movs	r1, #46	; 0x2e
   be540:	f002 ffdf 	bl	c1502 <strchrnul>
    size = s - category;
   be544:	6823      	ldr	r3, [r4, #0]
   be546:	1ac3      	subs	r3, r0, r3
   be548:	602b      	str	r3, [r5, #0]
    if (size) {
   be54a:	b123      	cbz	r3, be556 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be54c:	7803      	ldrb	r3, [r0, #0]
   be54e:	b103      	cbz	r3, be552 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be550:	3001      	adds	r0, #1
   be552:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be554:	6020      	str	r0, [r4, #0]
}
   be556:	4618      	mov	r0, r3
   be558:	bd38      	pop	{r3, r4, r5, pc}

000be55a <_ZN5spark16JSONStreamWriterD0Ev>:
   be55a:	b510      	push	{r4, lr}
   be55c:	210c      	movs	r1, #12
   be55e:	4604      	mov	r4, r0
   be560:	f7f5 fd9d 	bl	b409e <_ZdlPvj>
   be564:	4620      	mov	r0, r4
   be566:	bd10      	pop	{r4, pc}

000be568 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be568:	b510      	push	{r4, lr}
   be56a:	2104      	movs	r1, #4
   be56c:	4604      	mov	r4, r0
   be56e:	f7f5 fd96 	bl	b409e <_ZdlPvj>
   be572:	4620      	mov	r0, r4
   be574:	bd10      	pop	{r4, pc}

000be576 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be576:	b510      	push	{r4, lr}
   be578:	2104      	movs	r1, #4
   be57a:	4604      	mov	r4, r0
   be57c:	f7f5 fd8f 	bl	b409e <_ZdlPvj>
   be580:	4620      	mov	r0, r4
   be582:	bd10      	pop	{r4, pc}

000be584 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be584:	f7fe bb72 	b.w	bcc6c <os_mutex_recursive_lock>

000be588 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be588:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be58a:	f002 ffc4 	bl	c1516 <strcmp>
}
   be58e:	fab0 f080 	clz	r0, r0
   be592:	0940      	lsrs	r0, r0, #5
   be594:	bd08      	pop	{r3, pc}

000be596 <__tcf_1>:
   be596:	4770      	bx	lr

000be598 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be598:	b510      	push	{r4, lr}
   be59a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be59c:	f001 ff44 	bl	c0428 <_Z16_fetch_usbserialv>
   be5a0:	4284      	cmp	r4, r0
   be5a2:	d010      	beq.n	be5c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be5a4:	f002 f946 	bl	c0834 <_Z22__fetch_global_Serial1v>
   be5a8:	4284      	cmp	r4, r0
   be5aa:	d105      	bne.n	be5b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be5ac:	f002 f942 	bl	c0834 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be5b4:	f001 bed1 	b.w	c035a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be5b8:	b12c      	cbz	r4, be5c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be5ba:	6823      	ldr	r3, [r4, #0]
   be5bc:	4620      	mov	r0, r4
   be5be:	685b      	ldr	r3, [r3, #4]
}
   be5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be5c4:	4718      	bx	r3
   be5c6:	bd10      	pop	{r4, pc}

000be5c8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be5c8:	b513      	push	{r0, r1, r4, lr}
   be5ca:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be5cc:	4608      	mov	r0, r1
   be5ce:	9101      	str	r1, [sp, #4]
   be5d0:	f002 ffd1 	bl	c1576 <strlen>
   be5d4:	9901      	ldr	r1, [sp, #4]
   be5d6:	4602      	mov	r2, r0
   be5d8:	4620      	mov	r0, r4
}
   be5da:	b002      	add	sp, #8
   be5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be5e0:	f7ff bf8a 	b.w	be4f8 <_ZN5spark10JSONWriter5valueEPKcj>

000be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be5e4:	b513      	push	{r0, r1, r4, lr}
   be5e6:	4604      	mov	r4, r0
    write(str, strlen(str));
   be5e8:	4608      	mov	r0, r1
   be5ea:	9101      	str	r1, [sp, #4]
   be5ec:	f002 ffc3 	bl	c1576 <strlen>
   be5f0:	6823      	ldr	r3, [r4, #0]
   be5f2:	9901      	ldr	r1, [sp, #4]
   be5f4:	68db      	ldr	r3, [r3, #12]
   be5f6:	4602      	mov	r2, r0
   be5f8:	4620      	mov	r0, r4
}
   be5fa:	b002      	add	sp, #8
   be5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be600:	4718      	bx	r3

000be602 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be602:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be604:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be606:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be60a:	68db      	ldr	r3, [r3, #12]
   be60c:	2201      	movs	r2, #1
   be60e:	f10d 0107 	add.w	r1, sp, #7
   be612:	4798      	blx	r3
}
   be614:	b003      	add	sp, #12
   be616:	f85d fb04 	ldr.w	pc, [sp], #4

000be61a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be61a:	b40e      	push	{r1, r2, r3}
   be61c:	b503      	push	{r0, r1, lr}
   be61e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be620:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be622:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be626:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be628:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be62a:	f001 f942 	bl	bf8b2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be62e:	b002      	add	sp, #8
   be630:	f85d eb04 	ldr.w	lr, [sp], #4
   be634:	b003      	add	sp, #12
   be636:	4770      	bx	lr

000be638 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be638:	680a      	ldr	r2, [r1, #0]
   be63a:	6002      	str	r2, [r0, #0]
   be63c:	684a      	ldr	r2, [r1, #4]
   be63e:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be640:	2200      	movs	r2, #0
   be642:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be646:	b510      	push	{r4, lr}
   be648:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be64a:	688c      	ldr	r4, [r1, #8]
   be64c:	6084      	str	r4, [r0, #8]
   be64e:	68cc      	ldr	r4, [r1, #12]
   be650:	60c4      	str	r4, [r0, #12]
   be652:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be654:	608a      	str	r2, [r1, #8]
   be656:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be658:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be65a:	610a      	str	r2, [r1, #16]
   be65c:	bd10      	pop	{r4, pc}
	...

000be660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be664:	e9d0 8400 	ldrd	r8, r4, [r0]
   be668:	f04f 0a14 	mov.w	sl, #20
   be66c:	9300      	str	r3, [sp, #0]
   be66e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be672:	4b18      	ldr	r3, [pc, #96]	; (be6d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be674:	10a4      	asrs	r4, r4, #2
   be676:	4617      	mov	r7, r2
   be678:	435c      	muls	r4, r3
   be67a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be67c:	2c00      	cmp	r4, #0
   be67e:	dd21      	ble.n	be6c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be680:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be682:	fb0a f006 	mul.w	r0, sl, r6
   be686:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be68a:	463a      	mov	r2, r7
   be68c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be690:	5828      	ldr	r0, [r5, r0]
   be692:	9101      	str	r1, [sp, #4]
   be694:	455f      	cmp	r7, fp
   be696:	bf28      	it	cs
   be698:	465a      	movcs	r2, fp
   be69a:	f002 ff74 	bl	c1586 <strncmp>
                if (cmp == 0) {
   be69e:	2800      	cmp	r0, #0
   be6a0:	9901      	ldr	r1, [sp, #4]
   be6a2:	f04f 0301 	mov.w	r3, #1
   be6a6:	d10b      	bne.n	be6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be6a8:	455f      	cmp	r7, fp
   be6aa:	d103      	bne.n	be6b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be6ac:	9a00      	ldr	r2, [sp, #0]
   be6ae:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be6b0:	4634      	mov	r4, r6
   be6b2:	e7e3      	b.n	be67c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be6b4:	d9fc      	bls.n	be6b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be6b6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be6b8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be6bc:	3e01      	subs	r6, #1
   be6be:	e7f7      	b.n	be6b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be6c0:	dbf9      	blt.n	be6b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be6c2:	e7f5      	b.n	be6b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be6c4:	eba5 0508 	sub.w	r5, r5, r8
}
   be6c8:	4802      	ldr	r0, [pc, #8]	; (be6d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be6ca:	10ad      	asrs	r5, r5, #2
   be6cc:	4368      	muls	r0, r5
   be6ce:	b003      	add	sp, #12
   be6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be6d4:	cccccccd 	.word	0xcccccccd

000be6d8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be6d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be6da:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be6dc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be6de:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be6e0:	b303      	cbz	r3, be724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be6e2:	b1f9      	cbz	r1, be724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be6e4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be6e6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be6ea:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be6ec:	a903      	add	r1, sp, #12
   be6ee:	a801      	add	r0, sp, #4
   be6f0:	f7ff ff21 	bl	be536 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be6f4:	4601      	mov	r1, r0
   be6f6:	b1a8      	cbz	r0, be724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be6f8:	f10d 030b 	add.w	r3, sp, #11
   be6fc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be6fe:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be702:	4620      	mov	r0, r4
   be704:	f7ff ffac 	bl	be660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be708:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be70c:	b153      	cbz	r3, be724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be70e:	6823      	ldr	r3, [r4, #0]
   be710:	2414      	movs	r4, #20
   be712:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be716:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be718:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be71c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be71e:	bfa8      	it	ge
   be720:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be722:	e7e3      	b.n	be6ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be724:	4628      	mov	r0, r5
   be726:	b004      	add	sp, #16
   be728:	bd70      	pop	{r4, r5, r6, pc}
	...

000be72c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be72c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be72e:	4c09      	ldr	r4, [pc, #36]	; (be754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be730:	7823      	ldrb	r3, [r4, #0]
   be732:	f3bf 8f5b 	dmb	ish
   be736:	07db      	lsls	r3, r3, #31
   be738:	d409      	bmi.n	be74e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be73a:	4620      	mov	r0, r4
   be73c:	f7f5 fcbe 	bl	b40bc <__cxa_guard_acquire>
   be740:	b128      	cbz	r0, be74e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be742:	4620      	mov	r0, r4
   be744:	f7f5 fcbf 	bl	b40c6 <__cxa_guard_release>
   be748:	4803      	ldr	r0, [pc, #12]	; (be758 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be74a:	f002 fdf5 	bl	c1338 <atexit>
}
   be74e:	4803      	ldr	r0, [pc, #12]	; (be75c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be750:	bd10      	pop	{r4, pc}
   be752:	bf00      	nop
   be754:	2003e648 	.word	0x2003e648
   be758:	000be52f 	.word	0x000be52f
   be75c:	2003d680 	.word	0x2003d680

000be760 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be760:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be762:	4c09      	ldr	r4, [pc, #36]	; (be788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be764:	7823      	ldrb	r3, [r4, #0]
   be766:	f3bf 8f5b 	dmb	ish
   be76a:	07db      	lsls	r3, r3, #31
   be76c:	d409      	bmi.n	be782 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be76e:	4620      	mov	r0, r4
   be770:	f7f5 fca4 	bl	b40bc <__cxa_guard_acquire>
   be774:	b128      	cbz	r0, be782 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be776:	4620      	mov	r0, r4
   be778:	f7f5 fca5 	bl	b40c6 <__cxa_guard_release>
   be77c:	4803      	ldr	r0, [pc, #12]	; (be78c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be77e:	f002 fddb 	bl	c1338 <atexit>
    return &factory;
}
   be782:	4803      	ldr	r0, [pc, #12]	; (be790 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be784:	bd10      	pop	{r4, pc}
   be786:	bf00      	nop
   be788:	2003e64c 	.word	0x2003e64c
   be78c:	000be597 	.word	0x000be597
   be790:	2003d684 	.word	0x2003d684

000be794 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be794:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be796:	2500      	movs	r5, #0
   be798:	4604      	mov	r4, r0
   be79a:	e9c0 5500 	strd	r5, r5, [r0]
   be79e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be7a2:	6085      	str	r5, [r0, #8]
   be7a4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be7a6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be7aa:	f7fe fa4f 	bl	bcc4c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be7ae:	f7ff ffbd 	bl	be72c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be7b2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be7b4:	f7ff ffd4 	bl	be760 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be7b8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be7ba:	6220      	str	r0, [r4, #32]
}
   be7bc:	4620      	mov	r0, r4
   be7be:	bd38      	pop	{r3, r4, r5, pc}

000be7c0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be7c0:	b510      	push	{r4, lr}
    static LogManager mgr;
   be7c2:	4c0a      	ldr	r4, [pc, #40]	; (be7ec <_ZN5spark10LogManager8instanceEv+0x2c>)
   be7c4:	7823      	ldrb	r3, [r4, #0]
   be7c6:	f3bf 8f5b 	dmb	ish
   be7ca:	07db      	lsls	r3, r3, #31
   be7cc:	d40c      	bmi.n	be7e8 <_ZN5spark10LogManager8instanceEv+0x28>
   be7ce:	4620      	mov	r0, r4
   be7d0:	f7f5 fc74 	bl	b40bc <__cxa_guard_acquire>
   be7d4:	b140      	cbz	r0, be7e8 <_ZN5spark10LogManager8instanceEv+0x28>
   be7d6:	4806      	ldr	r0, [pc, #24]	; (be7f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   be7d8:	f7ff ffdc 	bl	be794 <_ZN5spark10LogManagerC1Ev>
   be7dc:	4620      	mov	r0, r4
   be7de:	f7f5 fc72 	bl	b40c6 <__cxa_guard_release>
   be7e2:	4804      	ldr	r0, [pc, #16]	; (be7f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   be7e4:	f002 fda8 	bl	c1338 <atexit>
    return &mgr;
}
   be7e8:	4801      	ldr	r0, [pc, #4]	; (be7f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   be7ea:	bd10      	pop	{r4, pc}
   be7ec:	2003e644 	.word	0x2003e644
   be7f0:	2003e654 	.word	0x2003e654
   be7f4:	000becad 	.word	0x000becad

000be7f8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be7f8:	4a02      	ldr	r2, [pc, #8]	; (be804 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be7fa:	4903      	ldr	r1, [pc, #12]	; (be808 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be7fc:	4803      	ldr	r0, [pc, #12]	; (be80c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be7fe:	2300      	movs	r3, #0
   be800:	f7fe bccc 	b.w	bd19c <log_set_callbacks>
   be804:	000bea91 	.word	0x000bea91
   be808:	000bea1d 	.word	0x000bea1d
   be80c:	000be99d 	.word	0x000be99d

000be810 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be810:	2300      	movs	r3, #0
   be812:	461a      	mov	r2, r3
   be814:	4619      	mov	r1, r3
   be816:	4618      	mov	r0, r3
   be818:	f7fe bcc0 	b.w	bd19c <log_set_callbacks>

000be81c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be81c:	b570      	push	{r4, r5, r6, lr}
   be81e:	b08a      	sub	sp, #40	; 0x28
   be820:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be822:	4601      	mov	r1, r0
   be824:	a804      	add	r0, sp, #16
   be826:	f7fb fba8 	bl	b9f7a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be82a:	4e14      	ldr	r6, [pc, #80]	; (be87c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be82c:	a804      	add	r0, sp, #16
   be82e:	f7ff fd9b 	bl	be368 <_ZN5spark18JSONObjectIterator4nextEv>
   be832:	b1e8      	cbz	r0, be870 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be834:	a904      	add	r1, sp, #16
   be836:	4668      	mov	r0, sp
   be838:	f7fb fbb0 	bl	b9f9c <_ZNK5spark18JSONObjectIterator4nameEv>
   be83c:	9802      	ldr	r0, [sp, #8]
   be83e:	4631      	mov	r1, r6
   be840:	f7ff fea2 	bl	be588 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be844:	4604      	mov	r4, r0
   be846:	b110      	cbz	r0, be84e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be848:	1e2c      	subs	r4, r5, #0
   be84a:	bf18      	it	ne
   be84c:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be84e:	a801      	add	r0, sp, #4
   be850:	f7f5 ff30 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be854:	2c00      	cmp	r4, #0
   be856:	d0e9      	beq.n	be82c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be858:	a904      	add	r1, sp, #16
   be85a:	4668      	mov	r0, sp
   be85c:	f7fb fbaf 	bl	b9fbe <_ZNK5spark18JSONObjectIterator5valueEv>
   be860:	4668      	mov	r0, sp
   be862:	f7ff fd24 	bl	be2ae <_ZNK5spark9JSONValue5toIntEv>
   be866:	6028      	str	r0, [r5, #0]
   be868:	a801      	add	r0, sp, #4
   be86a:	f7f5 ff23 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be86e:	e7dd      	b.n	be82c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be870:	a805      	add	r0, sp, #20
   be872:	f7f5 ff1f 	bl	b46b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be876:	b00a      	add	sp, #40	; 0x28
   be878:	bd70      	pop	{r4, r5, r6, pc}
   be87a:	bf00      	nop
   be87c:	000c55fa 	.word	0x000c55fa

000be880 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be880:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be882:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be884:	4620      	mov	r0, r4
   be886:	4913      	ldr	r1, [pc, #76]	; (be8d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be888:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be88a:	f002 fe44 	bl	c1516 <strcmp>
   be88e:	b950      	cbnz	r0, be8a6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be890:	f001 fdca 	bl	c0428 <_Z16_fetch_usbserialv>
   be894:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be898:	f001 fdb4 	bl	c0404 <_ZN9USBSerial5beginEl>
}
   be89c:	b003      	add	sp, #12
   be89e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be8a2:	f001 bdc1 	b.w	c0428 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be8a6:	490c      	ldr	r1, [pc, #48]	; (be8d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be8a8:	4620      	mov	r0, r4
   be8aa:	f002 fe34 	bl	c1516 <strcmp>
   be8ae:	b978      	cbnz	r0, be8d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be8b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be8b4:	a901      	add	r1, sp, #4
   be8b6:	4628      	mov	r0, r5
        int baud = 9600;
   be8b8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be8ba:	f7ff ffaf 	bl	be81c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be8be:	f001 ffb9 	bl	c0834 <_Z22__fetch_global_Serial1v>
   be8c2:	9901      	ldr	r1, [sp, #4]
   be8c4:	f001 fd46 	bl	c0354 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be8c8:	f001 ffb4 	bl	c0834 <_Z22__fetch_global_Serial1v>
}
   be8cc:	b003      	add	sp, #12
   be8ce:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be8d0:	2000      	movs	r0, #0
   be8d2:	e7fb      	b.n	be8cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be8d4:	000c55ff 	.word	0x000c55ff
   be8d8:	000c5606 	.word	0x000c5606

000be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be8dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be8de:	e9d0 5300 	ldrd	r5, r3, [r0]
   be8e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be8e4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be8e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be8ea:	42ae      	cmp	r6, r5
   be8ec:	d005      	beq.n	be8fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be8ee:	f105 0008 	add.w	r0, r5, #8
   be8f2:	f7ff fff3 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be8f6:	3514      	adds	r5, #20
   be8f8:	e7f7      	b.n	be8ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be8fa:	6820      	ldr	r0, [r4, #0]
   be8fc:	f7fe fd9a 	bl	bd434 <free>
}
   be900:	4620      	mov	r0, r4
   be902:	bd70      	pop	{r4, r5, r6, pc}

000be904 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be904:	b510      	push	{r4, lr}
   be906:	4604      	mov	r4, r0
   be908:	300c      	adds	r0, #12
   be90a:	f7ff ffe7 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be90e:	4620      	mov	r0, r4
   be910:	f7fe fe33 	bl	bd57a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be914:	4620      	mov	r0, r4
   be916:	bd10      	pop	{r4, pc}

000be918 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be918:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be91a:	4b04      	ldr	r3, [pc, #16]	; (be92c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be91c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be91e:	f840 3b04 	str.w	r3, [r0], #4
   be922:	f7ff ffef 	bl	be904 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be926:	4620      	mov	r0, r4
   be928:	bd10      	pop	{r4, pc}
   be92a:	bf00      	nop
   be92c:	000c497c 	.word	0x000c497c

000be930 <_ZN5spark16StreamLogHandlerD0Ev>:
   be930:	b510      	push	{r4, lr}
   be932:	4604      	mov	r4, r0
   be934:	f7ff fff0 	bl	be918 <_ZN5spark16StreamLogHandlerD1Ev>
   be938:	4620      	mov	r0, r4
   be93a:	2124      	movs	r1, #36	; 0x24
   be93c:	f7f5 fbaf 	bl	b409e <_ZdlPvj>
   be940:	4620      	mov	r0, r4
   be942:	bd10      	pop	{r4, pc}

000be944 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be944:	b510      	push	{r4, lr}
   be946:	4b03      	ldr	r3, [pc, #12]	; (be954 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be948:	6003      	str	r3, [r0, #0]
   be94a:	4604      	mov	r4, r0
   be94c:	f7ff ffe4 	bl	be918 <_ZN5spark16StreamLogHandlerD1Ev>
   be950:	4620      	mov	r0, r4
   be952:	bd10      	pop	{r4, pc}
   be954:	000c569c 	.word	0x000c569c

000be958 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be958:	b510      	push	{r4, lr}
   be95a:	4604      	mov	r4, r0
   be95c:	f7ff fff2 	bl	be944 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be960:	4620      	mov	r0, r4
   be962:	2124      	movs	r1, #36	; 0x24
   be964:	f7f5 fb9b 	bl	b409e <_ZdlPvj>
   be968:	4620      	mov	r0, r4
   be96a:	bd10      	pop	{r4, pc}

000be96c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be96c:	2200      	movs	r2, #0
   be96e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be972:	b510      	push	{r4, lr}
        capacity_(0) {
   be974:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be976:	680c      	ldr	r4, [r1, #0]
   be978:	6004      	str	r4, [r0, #0]
   be97a:	684c      	ldr	r4, [r1, #4]
   be97c:	6044      	str	r4, [r0, #4]
   be97e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be980:	600a      	str	r2, [r1, #0]
   be982:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   be984:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be986:	608a      	str	r2, [r1, #8]
}
   be988:	bd10      	pop	{r4, pc}

000be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   be98a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be98c:	6803      	ldr	r3, [r0, #0]
   be98e:	4604      	mov	r4, r0
   be990:	6818      	ldr	r0, [r3, #0]
   be992:	f7fe f973 	bl	bcc7c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   be996:	4620      	mov	r0, r4
   be998:	bd10      	pop	{r4, pc}
	...

000be99c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   be99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be9a0:	b087      	sub	sp, #28
   be9a2:	4680      	mov	r8, r0
   be9a4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   be9a6:	4b1c      	ldr	r3, [pc, #112]	; (bea18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   be9a8:	685b      	ldr	r3, [r3, #4]
   be9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be9ae:	4689      	mov	r9, r1
   be9b0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   be9b2:	b96b      	cbnz	r3, be9d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   be9b4:	f7ff ff04 	bl	be7c0 <_ZN5spark10LogManager8instanceEv>
   be9b8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be9ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   be9be:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be9c0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   be9c2:	f7ff fddf 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   be9c6:	7b23      	ldrb	r3, [r4, #12]
   be9c8:	b12b      	cbz	r3, be9d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   be9ca:	a805      	add	r0, sp, #20
   be9cc:	f7ff ffdd 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   be9d0:	b007      	add	sp, #28
   be9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   be9d6:	2301      	movs	r3, #1
   be9d8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   be9da:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   be9de:	fa5f f989 	uxtb.w	r9, r9
   be9e2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be9e6:	45aa      	cmp	sl, r5
   be9e8:	d012      	beq.n	bea10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   be9ea:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   be9ee:	4631      	mov	r1, r6
   be9f0:	1d38      	adds	r0, r7, #4
   be9f2:	f7ff fe71 	bl	be6d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be9f6:	4581      	cmp	r9, r0
   be9f8:	d3f5      	bcc.n	be9e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   be9fa:	683b      	ldr	r3, [r7, #0]
   be9fc:	9a03      	ldr	r2, [sp, #12]
   be9fe:	9200      	str	r2, [sp, #0]
   bea00:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bea04:	464a      	mov	r2, r9
   bea06:	4633      	mov	r3, r6
   bea08:	4641      	mov	r1, r8
   bea0a:	4638      	mov	r0, r7
   bea0c:	47d8      	blx	fp
   bea0e:	e7ea      	b.n	be9e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bea10:	2300      	movs	r3, #0
   bea12:	7323      	strb	r3, [r4, #12]
   bea14:	e7d9      	b.n	be9ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bea16:	bf00      	nop
   bea18:	e000ed00 	.word	0xe000ed00

000bea1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bea1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea20:	469b      	mov	fp, r3
   bea22:	4b1a      	ldr	r3, [pc, #104]	; (bea8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bea24:	685b      	ldr	r3, [r3, #4]
   bea26:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bea2a:	4680      	mov	r8, r0
   bea2c:	4689      	mov	r9, r1
   bea2e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bea30:	b96b      	cbnz	r3, bea4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bea32:	f7ff fec5 	bl	be7c0 <_ZN5spark10LogManager8instanceEv>
   bea36:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bea38:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bea3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bea3e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bea40:	f7ff fda0 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bea44:	7b23      	ldrb	r3, [r4, #12]
   bea46:	b12b      	cbz	r3, bea54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bea48:	a801      	add	r0, sp, #4
   bea4a:	f7ff ff9e 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bea4e:	b003      	add	sp, #12
   bea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bea54:	2301      	movs	r3, #1
   bea56:	7323      	strb	r3, [r4, #12]
   bea58:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bea5c:	b2f6      	uxtb	r6, r6
   bea5e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bea62:	4555      	cmp	r5, sl
   bea64:	d00e      	beq.n	bea84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bea66:	f855 7b04 	ldr.w	r7, [r5], #4
   bea6a:	4659      	mov	r1, fp
   bea6c:	1d38      	adds	r0, r7, #4
   bea6e:	f7ff fe33 	bl	be6d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bea72:	4286      	cmp	r6, r0
   bea74:	d3f5      	bcc.n	bea62 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bea76:	683b      	ldr	r3, [r7, #0]
   bea78:	464a      	mov	r2, r9
   bea7a:	68db      	ldr	r3, [r3, #12]
   bea7c:	4641      	mov	r1, r8
   bea7e:	4638      	mov	r0, r7
   bea80:	4798      	blx	r3
   bea82:	e7ee      	b.n	bea62 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bea84:	2300      	movs	r3, #0
   bea86:	7323      	strb	r3, [r4, #12]
   bea88:	e7de      	b.n	bea48 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bea8a:	bf00      	nop
   bea8c:	e000ed00 	.word	0xe000ed00

000bea90 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bea90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bea94:	4b16      	ldr	r3, [pc, #88]	; (beaf0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bea96:	685b      	ldr	r3, [r3, #4]
   bea98:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bea9c:	4605      	mov	r5, r0
   bea9e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   beaa0:	bb1b      	cbnz	r3, beaea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   beaa2:	f7ff fe8d 	bl	be7c0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   beaa6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   beaaa:	4604      	mov	r4, r0
   beaac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beaae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   beab0:	f7ff fd68 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
   beab4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   beab8:	2446      	movs	r4, #70	; 0x46
   beaba:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   beabe:	45b0      	cmp	r8, r6
   beac0:	d109      	bne.n	bead6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   beac2:	a801      	add	r0, sp, #4
   beac4:	f7ff ff61 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   beac8:	42a5      	cmp	r5, r4
   beaca:	bfb4      	ite	lt
   beacc:	2000      	movlt	r0, #0
   beace:	2001      	movge	r0, #1
}
   bead0:	b002      	add	sp, #8
   bead2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bead6:	f856 0b04 	ldr.w	r0, [r6], #4
   beada:	4639      	mov	r1, r7
   beadc:	3004      	adds	r0, #4
   beade:	f7ff fdfb 	bl	be6d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   beae2:	4284      	cmp	r4, r0
   beae4:	bfa8      	it	ge
   beae6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   beae8:	e7e9      	b.n	beabe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   beaea:	2000      	movs	r0, #0
   beaec:	e7f0      	b.n	bead0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   beaee:	bf00      	nop
   beaf0:	e000ed00 	.word	0xe000ed00

000beaf4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beaf6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   beafa:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beafc:	4604      	mov	r4, r0
   beafe:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beb00:	db0d      	blt.n	beb1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   beb02:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   beb04:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   beb06:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   beb08:	dd04      	ble.n	beb14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   beb0a:	00b9      	lsls	r1, r7, #2
   beb0c:	f7fe fc9a 	bl	bd444 <realloc>
            if (!d) {
   beb10:	b918      	cbnz	r0, beb1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   beb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   beb14:	f7fe fc8e 	bl	bd434 <free>
        T* d = nullptr;
   beb18:	2000      	movs	r0, #0
        data_ = d;
   beb1a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   beb1c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   beb1e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   beb20:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beb22:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   beb26:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   beb28:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   beb2c:	1d08      	adds	r0, r1, #4
   beb2e:	f002 fc3d 	bl	c13ac <memmove>
    new(p) T(std::move(value));
   beb32:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   beb36:	6863      	ldr	r3, [r4, #4]
   beb38:	3301      	adds	r3, #1
   beb3a:	6063      	str	r3, [r4, #4]
    return true;
   beb3c:	2001      	movs	r0, #1
   beb3e:	e7e8      	b.n	beb12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000beb40 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   beb40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   beb42:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   beb46:	4604      	mov	r4, r0
   beb48:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beb4a:	9301      	str	r3, [sp, #4]
   beb4c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   beb4e:	f7ff fd19 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   beb52:	e9d4 3200 	ldrd	r3, r2, [r4]
   beb56:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   beb5a:	4293      	cmp	r3, r2
   beb5c:	4619      	mov	r1, r3
   beb5e:	d00b      	beq.n	beb78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   beb60:	6809      	ldr	r1, [r1, #0]
   beb62:	42a9      	cmp	r1, r5
   beb64:	f103 0304 	add.w	r3, r3, #4
   beb68:	d1f7      	bne.n	beb5a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   beb6a:	a801      	add	r0, sp, #4
   beb6c:	f7ff ff0d 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   beb70:	2500      	movs	r5, #0
}
   beb72:	4628      	mov	r0, r5
   beb74:	b003      	add	sp, #12
   beb76:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   beb78:	4629      	mov	r1, r5
   beb7a:	4620      	mov	r0, r4
   beb7c:	f7ff ffba 	bl	beaf4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   beb80:	4605      	mov	r5, r0
   beb82:	2800      	cmp	r0, #0
   beb84:	d0f1      	beq.n	beb6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   beb86:	6863      	ldr	r3, [r4, #4]
   beb88:	2b01      	cmp	r3, #1
   beb8a:	d101      	bne.n	beb90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   beb8c:	f7ff fe34 	bl	be7f8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   beb90:	a801      	add	r0, sp, #4
   beb92:	f7ff fefa 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   beb96:	e7ec      	b.n	beb72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000beb98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   beb98:	b570      	push	{r4, r5, r6, lr}
   beb9a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   beb9c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   beba0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   beba2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   beba6:	4282      	cmp	r2, r0
   beba8:	d00f      	beq.n	bebca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bebaa:	4601      	mov	r1, r0
            if (*p == value) {
   bebac:	681d      	ldr	r5, [r3, #0]
   bebae:	f851 6b04 	ldr.w	r6, [r1], #4
   bebb2:	42ae      	cmp	r6, r5
   bebb4:	d107      	bne.n	bebc6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebb6:	1a52      	subs	r2, r2, r1
   bebb8:	f002 fbf8 	bl	c13ac <memmove>
    --size_;
   bebbc:	6863      	ldr	r3, [r4, #4]
   bebbe:	3b01      	subs	r3, #1
   bebc0:	6063      	str	r3, [r4, #4]
    return true;
   bebc2:	2001      	movs	r0, #1
}
   bebc4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bebc6:	4608      	mov	r0, r1
   bebc8:	e7ed      	b.n	beba6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bebca:	2000      	movs	r0, #0
   bebcc:	e7fa      	b.n	bebc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bebce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bebce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bebd0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bebd4:	4604      	mov	r4, r0
   bebd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bebd8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bebda:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bebdc:	f7ff fcd2 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bebe0:	a901      	add	r1, sp, #4
   bebe2:	4620      	mov	r0, r4
   bebe4:	f7ff ffd8 	bl	beb98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bebe8:	b118      	cbz	r0, bebf2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bebea:	6863      	ldr	r3, [r4, #4]
   bebec:	b90b      	cbnz	r3, bebf2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bebee:	f7ff fe0f 	bl	be810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bebf2:	a803      	add	r0, sp, #12
   bebf4:	f7ff fec9 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bebf8:	b004      	add	sp, #16
   bebfa:	bd10      	pop	{r4, pc}

000bebfc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bebfc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bebfe:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bec02:	2318      	movs	r3, #24
   bec04:	4604      	mov	r4, r0
   bec06:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bec0a:	42ae      	cmp	r6, r5
   bec0c:	d015      	beq.n	bec3a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bec0e:	f105 0110 	add.w	r1, r5, #16
   bec12:	4620      	mov	r0, r4
   bec14:	f7ff ffc0 	bl	beb98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bec18:	6863      	ldr	r3, [r4, #4]
   bec1a:	b90b      	cbnz	r3, bec20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bec1c:	f7ff fdf8 	bl	be810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bec20:	69e0      	ldr	r0, [r4, #28]
   bec22:	6929      	ldr	r1, [r5, #16]
   bec24:	6803      	ldr	r3, [r0, #0]
   bec26:	68db      	ldr	r3, [r3, #12]
   bec28:	4798      	blx	r3
        if (h.stream) {
   bec2a:	6969      	ldr	r1, [r5, #20]
   bec2c:	b119      	cbz	r1, bec36 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bec2e:	6a20      	ldr	r0, [r4, #32]
   bec30:	6803      	ldr	r3, [r0, #0]
   bec32:	68db      	ldr	r3, [r3, #12]
   bec34:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bec36:	3518      	adds	r5, #24
   bec38:	e7e7      	b.n	bec0a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bec3a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bec3e:	2618      	movs	r6, #24
   bec40:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bec44:	42ae      	cmp	r6, r5
   bec46:	d004      	beq.n	bec52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bec48:	4628      	mov	r0, r5
   bec4a:	f000 ff45 	bl	bfad8 <_ZN6StringD1Ev>
   bec4e:	3518      	adds	r5, #24
   bec50:	e7f8      	b.n	bec44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bec52:	2300      	movs	r3, #0
   bec54:	6163      	str	r3, [r4, #20]
}
   bec56:	bd70      	pop	{r4, r5, r6, pc}

000bec58 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bec58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bec5a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bec5c:	f7ff fdd8 	bl	be810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bec60:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bec64:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bec66:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bec68:	f7ff fc8c 	bl	be584 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bec6c:	4620      	mov	r0, r4
   bec6e:	f7ff ffc5 	bl	bebfc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bec72:	a801      	add	r0, sp, #4
   bec74:	f7ff fe89 	bl	be98a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bec78:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bec7a:	b108      	cbz	r0, bec80 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bec7c:	f7fd ffee 	bl	bcc5c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bec80:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bec84:	2618      	movs	r6, #24
   bec86:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bec8a:	42ae      	cmp	r6, r5
   bec8c:	d004      	beq.n	bec98 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bec8e:	4628      	mov	r0, r5
   bec90:	f000 ff22 	bl	bfad8 <_ZN6StringD1Ev>
   bec94:	3518      	adds	r5, #24
   bec96:	e7f8      	b.n	bec8a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bec98:	6920      	ldr	r0, [r4, #16]
   bec9a:	f7fe fbcb 	bl	bd434 <free>
   bec9e:	6820      	ldr	r0, [r4, #0]
   beca0:	f7fe fbc8 	bl	bd434 <free>
}
   beca4:	4620      	mov	r0, r4
   beca6:	b002      	add	sp, #8
   beca8:	bd70      	pop	{r4, r5, r6, pc}
	...

000becac <__tcf_2>:
    static LogManager mgr;
   becac:	4801      	ldr	r0, [pc, #4]	; (becb4 <__tcf_2+0x8>)
   becae:	f7ff bfd3 	b.w	bec58 <_ZN5spark10LogManagerD1Ev>
   becb2:	bf00      	nop
   becb4:	2003e654 	.word	0x2003e654

000becb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   becb8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   becba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   becbc:	4604      	mov	r4, r0
   becbe:	460d      	mov	r5, r1
   becc0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   becc2:	d915      	bls.n	becf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   becc4:	4290      	cmp	r0, r2
   becc6:	d214      	bcs.n	becf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   becc8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   beccc:	1a75      	subs	r5, r6, r1
   becce:	f1a1 0714 	sub.w	r7, r1, #20
   becd2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   becd4:	42b7      	cmp	r7, r6
   becd6:	d01a      	beq.n	bed0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   becd8:	b11c      	cbz	r4, bece2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   becda:	4631      	mov	r1, r6
   becdc:	4620      	mov	r0, r4
   becde:	f7ff fcab 	bl	be638 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bece2:	f106 0008 	add.w	r0, r6, #8
   bece6:	f7ff fdf9 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   becea:	3e14      	subs	r6, #20
   becec:	3c14      	subs	r4, #20
   becee:	e7f1      	b.n	becd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   becf0:	d00d      	beq.n	bed0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   becf2:	42b5      	cmp	r5, r6
   becf4:	d00b      	beq.n	bed0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   becf6:	b11c      	cbz	r4, bed00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   becf8:	4629      	mov	r1, r5
   becfa:	4620      	mov	r0, r4
   becfc:	f7ff fc9c 	bl	be638 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bed00:	f105 0008 	add.w	r0, r5, #8
   bed04:	f7ff fdea 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bed08:	3514      	adds	r5, #20
   bed0a:	3414      	adds	r4, #20
   bed0c:	e7f1      	b.n	becf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bed0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bed10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed14:	4604      	mov	r4, r0
   bed16:	460d      	mov	r5, r1
   bed18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed1a:	d914      	bls.n	bed46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bed1c:	4290      	cmp	r0, r2
   bed1e:	d213      	bcs.n	bed48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bed20:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bed24:	1a75      	subs	r5, r6, r1
   bed26:	f1a1 0710 	sub.w	r7, r1, #16
   bed2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bed2c:	42b7      	cmp	r7, r6
   bed2e:	d018      	beq.n	bed62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bed30:	b11c      	cbz	r4, bed3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bed32:	4631      	mov	r1, r6
   bed34:	4620      	mov	r0, r4
   bed36:	f000 ff4b 	bl	bfbd0 <_ZN6StringC1EOS_>
                end->~T();
   bed3a:	4630      	mov	r0, r6
   bed3c:	f000 fecc 	bl	bfad8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bed40:	3e10      	subs	r6, #16
   bed42:	3c10      	subs	r4, #16
   bed44:	e7f2      	b.n	bed2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bed46:	d00c      	beq.n	bed62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bed48:	42b5      	cmp	r5, r6
   bed4a:	d00a      	beq.n	bed62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bed4c:	b11c      	cbz	r4, bed56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bed4e:	4629      	mov	r1, r5
   bed50:	4620      	mov	r0, r4
   bed52:	f000 ff3d 	bl	bfbd0 <_ZN6StringC1EOS_>
                p->~T();
   bed56:	4628      	mov	r0, r5
   bed58:	f000 febe 	bl	bfad8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bed5c:	3510      	adds	r5, #16
   bed5e:	3410      	adds	r4, #16
   bed60:	e7f2      	b.n	bed48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bed62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bed64:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bed66:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bed68:	4605      	mov	r5, r0
        if (n > 0) {
   bed6a:	dd11      	ble.n	bed90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bed6c:	0130      	lsls	r0, r6, #4
   bed6e:	f7fe fb59 	bl	bd424 <malloc>
            if (!d) {
   bed72:	4604      	mov	r4, r0
   bed74:	b158      	cbz	r0, bed8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bed76:	e9d5 1200 	ldrd	r1, r2, [r5]
   bed7a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bed7e:	f7ff ffc7 	bl	bed10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bed82:	6828      	ldr	r0, [r5, #0]
   bed84:	f7fe fb56 	bl	bd434 <free>
        data_ = d;
   bed88:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bed8a:	60ae      	str	r6, [r5, #8]
        return true;
   bed8c:	2001      	movs	r0, #1
    }
   bed8e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bed90:	2400      	movs	r4, #0
   bed92:	e7f6      	b.n	bed82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bed94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bed98:	4690      	mov	r8, r2
   bed9a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bed9c:	2300      	movs	r3, #0
   bed9e:	9103      	str	r1, [sp, #12]
    return size_;
   beda0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   beda4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   beda6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   beda8:	4299      	cmp	r1, r3
        capacity_(0) {
   bedaa:	e9c0 3300 	strd	r3, r3, [r0]
   bedae:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bedb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bedb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bedba:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bedbc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bedbe:	dc23      	bgt.n	bee08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bedc0:	e9d8 5700 	ldrd	r5, r7, [r8]
   bedc4:	2314      	movs	r3, #20
   bedc6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bedca:	42af      	cmp	r7, r5
   bedcc:	d03b      	beq.n	bee46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bedce:	4629      	mov	r1, r5
   bedd0:	a80b      	add	r0, sp, #44	; 0x2c
   bedd2:	f000 fefd 	bl	bfbd0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bedd6:	a90b      	add	r1, sp, #44	; 0x2c
   bedd8:	a80f      	add	r0, sp, #60	; 0x3c
   bedda:	9e09      	ldr	r6, [sp, #36]	; 0x24
   beddc:	f000 fef8 	bl	bfbd0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bede0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bede4:	4299      	cmp	r1, r3
   bede6:	da1b      	bge.n	bee20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bede8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bedea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bedec:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bedf0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bedf4:	4631      	mov	r1, r6
   bedf6:	f106 0010 	add.w	r0, r6, #16
   bedfa:	f7ff ff89 	bl	bed10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bedfe:	b9ee      	cbnz	r6, bee3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bee00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bee02:	3301      	adds	r3, #1
   bee04:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bee06:	e011      	b.n	bee2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bee08:	a808      	add	r0, sp, #32
   bee0a:	f7ff ffab 	bl	bed64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bee0e:	2800      	cmp	r0, #0
   bee10:	d1d6      	bne.n	bedc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bee12:	a808      	add	r0, sp, #32
   bee14:	f7fe fbb1 	bl	bd57a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bee18:	4620      	mov	r0, r4
   bee1a:	b015      	add	sp, #84	; 0x54
   bee1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bee20:	3101      	adds	r1, #1
   bee22:	a808      	add	r0, sp, #32
   bee24:	f7ff ff9e 	bl	bed64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bee28:	2800      	cmp	r0, #0
   bee2a:	d1dd      	bne.n	bede8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bee2c:	a80f      	add	r0, sp, #60	; 0x3c
   bee2e:	f000 fe53 	bl	bfad8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bee32:	a80b      	add	r0, sp, #44	; 0x2c
   bee34:	f000 fe50 	bl	bfad8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bee38:	3514      	adds	r5, #20
   bee3a:	e7c6      	b.n	bedca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bee3c:	a90f      	add	r1, sp, #60	; 0x3c
   bee3e:	4630      	mov	r0, r6
   bee40:	f000 fec6 	bl	bfbd0 <_ZN6StringC1EOS_>
   bee44:	e7dc      	b.n	bee00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bee46:	2600      	movs	r6, #0
   bee48:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bee4c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bee4e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bee52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bee56:	429e      	cmp	r6, r3
   bee58:	da7c      	bge.n	bef54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bee5a:	0133      	lsls	r3, r6, #4
   bee5c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bee5e:	9306      	str	r3, [sp, #24]
        if (!category) {
   bee60:	b90b      	cbnz	r3, bee66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bee62:	3601      	adds	r6, #1
   bee64:	e7f5      	b.n	bee52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bee66:	2300      	movs	r3, #0
   bee68:	9307      	str	r3, [sp, #28]
   bee6a:	fb09 f306 	mul.w	r3, r9, r6
   bee6e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bee70:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bee72:	a907      	add	r1, sp, #28
   bee74:	a806      	add	r0, sp, #24
   bee76:	f7ff fb5e 	bl	be536 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bee7a:	4682      	mov	sl, r0
   bee7c:	2800      	cmp	r0, #0
   bee7e:	d0f0      	beq.n	bee62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bee80:	f04f 0300 	mov.w	r3, #0
   bee84:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bee88:	4601      	mov	r1, r0
   bee8a:	9a07      	ldr	r2, [sp, #28]
   bee8c:	f10d 0317 	add.w	r3, sp, #23
   bee90:	4628      	mov	r0, r5
   bee92:	f7ff fbe5 	bl	be660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bee96:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bee9a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bee9c:	2f00      	cmp	r7, #0
   bee9e:	d14a      	bne.n	bef36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   beea0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   beea4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   beea8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   beeac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   beeb0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   beeb4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   beeb8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beeba:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   beebe:	4293      	cmp	r3, r2
   beec0:	db17      	blt.n	beef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   beec2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   beec6:	f1ba 0f00 	cmp.w	sl, #0
   beeca:	dd30      	ble.n	bef2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   beecc:	fb09 f00a 	mul.w	r0, r9, sl
   beed0:	f7fe faa8 	bl	bd424 <malloc>
            if (!d) {
   beed4:	4683      	mov	fp, r0
   beed6:	b360      	cbz	r0, bef32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   beed8:	e9d5 1200 	ldrd	r1, r2, [r5]
   beedc:	fb09 1202 	mla	r2, r9, r2, r1
   beee0:	f7ff feea 	bl	becb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   beee4:	6828      	ldr	r0, [r5, #0]
   beee6:	f7fe faa5 	bl	bd434 <free>
        data_ = d;
   beeea:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   beeee:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   beef2:	682b      	ldr	r3, [r5, #0]
   beef4:	9a01      	ldr	r2, [sp, #4]
   beef6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   beefa:	686a      	ldr	r2, [r5, #4]
   beefc:	4651      	mov	r1, sl
   beefe:	fb09 3202 	mla	r2, r9, r2, r3
   bef02:	f10a 0014 	add.w	r0, sl, #20
   bef06:	f7ff fed7 	bl	becb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bef0a:	f1ba 0f00 	cmp.w	sl, #0
   bef0e:	d003      	beq.n	bef18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bef10:	a90f      	add	r1, sp, #60	; 0x3c
   bef12:	4650      	mov	r0, sl
   bef14:	f7ff fb90 	bl	be638 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bef18:	686b      	ldr	r3, [r5, #4]
   bef1a:	3301      	adds	r3, #1
   bef1c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bef1e:	a811      	add	r0, sp, #68	; 0x44
   bef20:	f7ff fcdc 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bef24:	b13f      	cbz	r7, bef36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bef26:	a80b      	add	r0, sp, #44	; 0x2c
   bef28:	f7ff fcd8 	bl	be8dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bef2c:	e771      	b.n	bee12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bef2e:	46bb      	mov	fp, r7
   bef30:	e7d8      	b.n	beee4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bef32:	2701      	movs	r7, #1
   bef34:	e7f3      	b.n	bef1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bef36:	9b01      	ldr	r3, [sp, #4]
   bef38:	682d      	ldr	r5, [r5, #0]
   bef3a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bef3e:	9b06      	ldr	r3, [sp, #24]
   bef40:	781b      	ldrb	r3, [r3, #0]
   bef42:	b92b      	cbnz	r3, bef50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bef44:	f8d8 3000 	ldr.w	r3, [r8]
   bef48:	9a02      	ldr	r2, [sp, #8]
   bef4a:	4413      	add	r3, r2
   bef4c:	7c1b      	ldrb	r3, [r3, #16]
   bef4e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bef50:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bef52:	e78e      	b.n	bee72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef54:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bef56:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef58:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bef5a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef5c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bef5e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bef60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bef62:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef64:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bef66:	60a2      	str	r2, [r4, #8]
   bef68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bef6a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef6c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bef6e:	60e2      	str	r2, [r4, #12]
   bef70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bef72:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef74:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bef76:	6122      	str	r2, [r4, #16]
   bef78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bef7a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bef7c:	9b03      	ldr	r3, [sp, #12]
   bef7e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bef80:	6162      	str	r2, [r4, #20]
   bef82:	7623      	strb	r3, [r4, #24]
   bef84:	e7cf      	b.n	bef26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bef88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bef88:	b5f0      	push	{r4, r5, r6, r7, lr}
   bef8a:	4604      	mov	r4, r0
   bef8c:	b087      	sub	sp, #28
   bef8e:	460d      	mov	r5, r1
        filter_(level, filters) {
   bef90:	4626      	mov	r6, r4
        stream_(&stream) {
   bef92:	4619      	mov	r1, r3
   bef94:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bef96:	4617      	mov	r7, r2
        stream_(&stream) {
   bef98:	f7f8 faef 	bl	b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bef9c:	4b0b      	ldr	r3, [pc, #44]	; (befcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bef9e:	f846 3b04 	str.w	r3, [r6], #4
   befa2:	4669      	mov	r1, sp
   befa4:	a803      	add	r0, sp, #12
   befa6:	f7f8 fae8 	bl	b757a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   befaa:	aa03      	add	r2, sp, #12
   befac:	4639      	mov	r1, r7
   befae:	4630      	mov	r0, r6
   befb0:	f7ff fef0 	bl	bed94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   befb4:	a803      	add	r0, sp, #12
   befb6:	f7f8 fa9f 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   befba:	4668      	mov	r0, sp
   befbc:	f7f8 fa9c 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   befc0:	4b03      	ldr	r3, [pc, #12]	; (befd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   befc2:	6023      	str	r3, [r4, #0]
}
   befc4:	4620      	mov	r0, r4
        stream_(&stream) {
   befc6:	6225      	str	r5, [r4, #32]
}
   befc8:	b007      	add	sp, #28
   befca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   befcc:	000c497c 	.word	0x000c497c
   befd0:	000c5684 	.word	0x000c5684

000befd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   befd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   befd6:	460f      	mov	r7, r1
   befd8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   befda:	491d      	ldr	r1, [pc, #116]	; (bf050 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   befdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   befde:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   befe0:	4616      	mov	r6, r2
   befe2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   befe4:	f002 fa97 	bl	c1516 <strcmp>
   befe8:	b9c0      	cbnz	r0, bf01c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   befea:	b1a4      	cbz	r4, bf016 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   befec:	4629      	mov	r1, r5
   befee:	a801      	add	r0, sp, #4
   beff0:	f7ff fcbc 	bl	be96c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   beff4:	4917      	ldr	r1, [pc, #92]	; (bf054 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   beff6:	2024      	movs	r0, #36	; 0x24
   beff8:	f001 fc40 	bl	c087c <_ZnwjRKSt9nothrow_t>
   beffc:	4605      	mov	r5, r0
   beffe:	b130      	cbz	r0, bf00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bf000:	ab01      	add	r3, sp, #4
   bf002:	4632      	mov	r2, r6
   bf004:	4621      	mov	r1, r4
   bf006:	f7ff ffbf 	bl	bef88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf00a:	4b13      	ldr	r3, [pc, #76]	; (bf058 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bf00c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf00e:	a801      	add	r0, sp, #4
   bf010:	f7f8 fa72 	bl	b74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bf014:	462c      	mov	r4, r5
}
   bf016:	4620      	mov	r0, r4
   bf018:	b005      	add	sp, #20
   bf01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bf01c:	490f      	ldr	r1, [pc, #60]	; (bf05c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bf01e:	4638      	mov	r0, r7
   bf020:	f002 fa79 	bl	c1516 <strcmp>
   bf024:	b990      	cbnz	r0, bf04c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bf026:	2c00      	cmp	r4, #0
   bf028:	d0f5      	beq.n	bf016 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf02a:	4629      	mov	r1, r5
   bf02c:	a801      	add	r0, sp, #4
   bf02e:	f7ff fc9d 	bl	be96c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bf032:	4908      	ldr	r1, [pc, #32]	; (bf054 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bf034:	2024      	movs	r0, #36	; 0x24
   bf036:	f001 fc21 	bl	c087c <_ZnwjRKSt9nothrow_t>
   bf03a:	4605      	mov	r5, r0
   bf03c:	2800      	cmp	r0, #0
   bf03e:	d0e6      	beq.n	bf00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bf040:	ab01      	add	r3, sp, #4
   bf042:	4632      	mov	r2, r6
   bf044:	4621      	mov	r1, r4
   bf046:	f7ff ff9f 	bl	bef88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf04a:	e7e0      	b.n	bf00e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bf04c:	2400      	movs	r4, #0
   bf04e:	e7e2      	b.n	bf016 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bf050:	000c560e 	.word	0x000c560e
   bf054:	000c57d8 	.word	0x000c57d8
   bf058:	000c569c 	.word	0x000c569c
   bf05c:	000c5612 	.word	0x000c5612

000bf060 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bf060:	4b01      	ldr	r3, [pc, #4]	; (bf068 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bf062:	4a02      	ldr	r2, [pc, #8]	; (bf06c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bf064:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bf066:	4770      	bx	lr
   bf068:	2003e650 	.word	0x2003e650
   bf06c:	000c5623 	.word	0x000c5623

000bf070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf074:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bf076:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf07a:	4604      	mov	r4, r0
   bf07c:	460e      	mov	r6, r1
   bf07e:	4617      	mov	r7, r2
   bf080:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bf082:	f001 f9d1 	bl	c0428 <_Z16_fetch_usbserialv>
   bf086:	4581      	cmp	r9, r0
   bf088:	d04c      	beq.n	bf124 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bf08a:	792b      	ldrb	r3, [r5, #4]
   bf08c:	0719      	lsls	r1, r3, #28
   bf08e:	d504      	bpl.n	bf09a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bf090:	696a      	ldr	r2, [r5, #20]
   bf092:	4954      	ldr	r1, [pc, #336]	; (bf1e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bf094:	4620      	mov	r0, r4
   bf096:	f7ff fac0 	bl	be61a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bf09a:	f1b8 0f00 	cmp.w	r8, #0
   bf09e:	d00d      	beq.n	bf0bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bf0a0:	215b      	movs	r1, #91	; 0x5b
   bf0a2:	4620      	mov	r0, r4
   bf0a4:	f7ff faad 	bl	be602 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bf0a8:	4641      	mov	r1, r8
   bf0aa:	4620      	mov	r0, r4
   bf0ac:	f7ff fa9a 	bl	be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bf0b0:	6823      	ldr	r3, [r4, #0]
   bf0b2:	494d      	ldr	r1, [pc, #308]	; (bf1e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bf0b4:	68db      	ldr	r3, [r3, #12]
   bf0b6:	2202      	movs	r2, #2
   bf0b8:	4620      	mov	r0, r4
   bf0ba:	4798      	blx	r3
    if (attr.has_file) {
   bf0bc:	792b      	ldrb	r3, [r5, #4]
   bf0be:	07da      	lsls	r2, r3, #31
   bf0c0:	d523      	bpl.n	bf10a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bf0c2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bf0c6:	212f      	movs	r1, #47	; 0x2f
   bf0c8:	4640      	mov	r0, r8
   bf0ca:	f002 fa83 	bl	c15d4 <strrchr>
    if (s1) {
   bf0ce:	b108      	cbz	r0, bf0d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bf0d0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bf0d4:	4641      	mov	r1, r8
   bf0d6:	4620      	mov	r0, r4
   bf0d8:	f7ff fa84 	bl	be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bf0dc:	792b      	ldrb	r3, [r5, #4]
   bf0de:	079b      	lsls	r3, r3, #30
   bf0e0:	d508      	bpl.n	bf0f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bf0e2:	213a      	movs	r1, #58	; 0x3a
   bf0e4:	4620      	mov	r0, r4
   bf0e6:	f7ff fa8c 	bl	be602 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bf0ea:	68ea      	ldr	r2, [r5, #12]
   bf0ec:	493f      	ldr	r1, [pc, #252]	; (bf1ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bf0ee:	4620      	mov	r0, r4
   bf0f0:	f7ff fa93 	bl	be61a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bf0f4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bf0f6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bf0f8:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bf0fc:	68db      	ldr	r3, [r3, #12]
   bf0fe:	bf14      	ite	ne
   bf100:	493b      	ldrne	r1, [pc, #236]	; (bf1f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bf102:	493c      	ldreq	r1, [pc, #240]	; (bf1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bf104:	2202      	movs	r2, #2
            write(": ", 2);
   bf106:	4620      	mov	r0, r4
   bf108:	4798      	blx	r3
    if (attr.has_function) {
   bf10a:	792b      	ldrb	r3, [r5, #4]
   bf10c:	0758      	lsls	r0, r3, #29
   bf10e:	d51d      	bpl.n	bf14c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf110:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf112:	460b      	mov	r3, r1
   bf114:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bf116:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf11a:	b160      	cbz	r0, bf136 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bf11c:	2820      	cmp	r0, #32
   bf11e:	d108      	bne.n	bf132 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bf120:	4619      	mov	r1, r3
   bf122:	e7f7      	b.n	bf114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bf124:	4834      	ldr	r0, [pc, #208]	; (bf1f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bf126:	f000 f966 	bl	bf3f6 <_ZN5spark12NetworkClass9listeningEv>
   bf12a:	2800      	cmp	r0, #0
   bf12c:	d0ad      	beq.n	bf08a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bf12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bf132:	2828      	cmp	r0, #40	; 0x28
   bf134:	d1ee      	bne.n	bf114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bf136:	6823      	ldr	r3, [r4, #0]
   bf138:	1a52      	subs	r2, r2, r1
   bf13a:	68db      	ldr	r3, [r3, #12]
   bf13c:	4620      	mov	r0, r4
   bf13e:	4798      	blx	r3
        write("(): ", 4);
   bf140:	6823      	ldr	r3, [r4, #0]
   bf142:	492e      	ldr	r1, [pc, #184]	; (bf1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bf144:	68db      	ldr	r3, [r3, #12]
   bf146:	2204      	movs	r2, #4
   bf148:	4620      	mov	r0, r4
   bf14a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bf14c:	2100      	movs	r1, #0
   bf14e:	4638      	mov	r0, r7
   bf150:	f7fe f81c 	bl	bd18c <log_level_name>
   bf154:	4601      	mov	r1, r0
    write(s);
   bf156:	4620      	mov	r0, r4
   bf158:	f7ff fa44 	bl	be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bf15c:	6823      	ldr	r3, [r4, #0]
   bf15e:	4925      	ldr	r1, [pc, #148]	; (bf1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bf160:	68db      	ldr	r3, [r3, #12]
   bf162:	2202      	movs	r2, #2
   bf164:	4620      	mov	r0, r4
   bf166:	4798      	blx	r3
    if (msg) {
   bf168:	b11e      	cbz	r6, bf172 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bf16a:	4631      	mov	r1, r6
   bf16c:	4620      	mov	r0, r4
   bf16e:	f7ff fa39 	bl	be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bf172:	792b      	ldrb	r3, [r5, #4]
   bf174:	f013 0f30 	tst.w	r3, #48	; 0x30
   bf178:	d02c      	beq.n	bf1d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bf17a:	6823      	ldr	r3, [r4, #0]
   bf17c:	4920      	ldr	r1, [pc, #128]	; (bf200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bf17e:	68db      	ldr	r3, [r3, #12]
   bf180:	2202      	movs	r2, #2
   bf182:	4620      	mov	r0, r4
   bf184:	4798      	blx	r3
        if (attr.has_code) {
   bf186:	792b      	ldrb	r3, [r5, #4]
   bf188:	06d9      	lsls	r1, r3, #27
   bf18a:	d50a      	bpl.n	bf1a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bf18c:	6823      	ldr	r3, [r4, #0]
   bf18e:	491d      	ldr	r1, [pc, #116]	; (bf204 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bf190:	68db      	ldr	r3, [r3, #12]
   bf192:	2207      	movs	r2, #7
   bf194:	4620      	mov	r0, r4
   bf196:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bf198:	69aa      	ldr	r2, [r5, #24]
   bf19a:	491b      	ldr	r1, [pc, #108]	; (bf208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bf19c:	4620      	mov	r0, r4
   bf19e:	f7ff fa3c 	bl	be61a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bf1a2:	792b      	ldrb	r3, [r5, #4]
   bf1a4:	069a      	lsls	r2, r3, #26
   bf1a6:	d511      	bpl.n	bf1cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bf1a8:	06db      	lsls	r3, r3, #27
   bf1aa:	d505      	bpl.n	bf1b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bf1ac:	6823      	ldr	r3, [r4, #0]
   bf1ae:	4910      	ldr	r1, [pc, #64]	; (bf1f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bf1b0:	68db      	ldr	r3, [r3, #12]
   bf1b2:	2202      	movs	r2, #2
   bf1b4:	4620      	mov	r0, r4
   bf1b6:	4798      	blx	r3
            write("details = ", 10);
   bf1b8:	6823      	ldr	r3, [r4, #0]
   bf1ba:	4914      	ldr	r1, [pc, #80]	; (bf20c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bf1bc:	68db      	ldr	r3, [r3, #12]
   bf1be:	4620      	mov	r0, r4
   bf1c0:	220a      	movs	r2, #10
   bf1c2:	4798      	blx	r3
            write(attr.details);
   bf1c4:	69e9      	ldr	r1, [r5, #28]
   bf1c6:	4620      	mov	r0, r4
   bf1c8:	f7ff fa0c 	bl	be5e4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bf1cc:	215d      	movs	r1, #93	; 0x5d
   bf1ce:	4620      	mov	r0, r4
   bf1d0:	f7ff fa17 	bl	be602 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bf1d4:	6823      	ldr	r3, [r4, #0]
   bf1d6:	490e      	ldr	r1, [pc, #56]	; (bf210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bf1d8:	68db      	ldr	r3, [r3, #12]
   bf1da:	4620      	mov	r0, r4
   bf1dc:	2202      	movs	r2, #2
}
   bf1de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bf1e2:	4718      	bx	r3
   bf1e4:	000c5627 	.word	0x000c5627
   bf1e8:	000c562e 	.word	0x000c562e
   bf1ec:	000c3d47 	.word	0x000c3d47
   bf1f0:	000c5631 	.word	0x000c5631
   bf1f4:	000c5636 	.word	0x000c5636
   bf1f8:	2003e67c 	.word	0x2003e67c
   bf1fc:	000c5634 	.word	0x000c5634
   bf200:	000c5639 	.word	0x000c5639
   bf204:	000c563c 	.word	0x000c563c
   bf208:	000c5644 	.word	0x000c5644
   bf20c:	000c5647 	.word	0x000c5647
   bf210:	000c5652 	.word	0x000c5652

000bf214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf218:	b085      	sub	sp, #20
    return stream_;
   bf21a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bf21e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bf220:	4605      	mov	r5, r0
   bf222:	460f      	mov	r7, r1
   bf224:	4690      	mov	r8, r2
   bf226:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bf228:	f001 f8fe 	bl	c0428 <_Z16_fetch_usbserialv>
   bf22c:	4581      	cmp	r9, r0
   bf22e:	d105      	bne.n	bf23c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bf230:	4849      	ldr	r0, [pc, #292]	; (bf358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bf232:	f000 f8e0 	bl	bf3f6 <_ZN5spark12NetworkClass9listeningEv>
   bf236:	2800      	cmp	r0, #0
   bf238:	f040 808a 	bne.w	bf350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bf23c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bf23e:	4a47      	ldr	r2, [pc, #284]	; (bf35c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bf240:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bf242:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bf246:	a801      	add	r0, sp, #4
        strm_(stream) {
   bf248:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bf24a:	f88d 9008 	strb.w	r9, [sp, #8]
   bf24e:	f7ff f8b4 	bl	be3ba <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bf252:	4649      	mov	r1, r9
   bf254:	4640      	mov	r0, r8
   bf256:	f7fd ff99 	bl	bd18c <log_level_name>
    json.name("l", 1).value(s);
   bf25a:	4941      	ldr	r1, [pc, #260]	; (bf360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bf25c:	4680      	mov	r8, r0
   bf25e:	2201      	movs	r2, #1
   bf260:	a801      	add	r0, sp, #4
   bf262:	f7ff f939 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf266:	4641      	mov	r1, r8
   bf268:	f7ff f9ae 	bl	be5c8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bf26c:	b13f      	cbz	r7, bf27e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bf26e:	493d      	ldr	r1, [pc, #244]	; (bf364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bf270:	2201      	movs	r2, #1
   bf272:	a801      	add	r0, sp, #4
   bf274:	f7ff f930 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf278:	4639      	mov	r1, r7
   bf27a:	f7ff f9a5 	bl	be5c8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bf27e:	b13e      	cbz	r6, bf290 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bf280:	4939      	ldr	r1, [pc, #228]	; (bf368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bf282:	2201      	movs	r2, #1
   bf284:	a801      	add	r0, sp, #4
   bf286:	f7ff f927 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf28a:	4631      	mov	r1, r6
   bf28c:	f7ff f99c 	bl	be5c8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bf290:	7923      	ldrb	r3, [r4, #4]
   bf292:	07df      	lsls	r7, r3, #31
   bf294:	d50e      	bpl.n	bf2b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bf296:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bf298:	212f      	movs	r1, #47	; 0x2f
   bf29a:	4630      	mov	r0, r6
   bf29c:	f002 f99a 	bl	c15d4 <strrchr>
    if (s1) {
   bf2a0:	b100      	cbz	r0, bf2a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bf2a2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bf2a4:	4931      	ldr	r1, [pc, #196]	; (bf36c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bf2a6:	2201      	movs	r2, #1
   bf2a8:	a801      	add	r0, sp, #4
   bf2aa:	f7ff f915 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf2ae:	4631      	mov	r1, r6
   bf2b0:	f7ff f98a 	bl	be5c8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bf2b4:	7923      	ldrb	r3, [r4, #4]
   bf2b6:	079e      	lsls	r6, r3, #30
   bf2b8:	d507      	bpl.n	bf2ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bf2ba:	492d      	ldr	r1, [pc, #180]	; (bf370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bf2bc:	2202      	movs	r2, #2
   bf2be:	a801      	add	r0, sp, #4
   bf2c0:	f7ff f90a 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf2c4:	68e1      	ldr	r1, [r4, #12]
   bf2c6:	f7ff f885 	bl	be3d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bf2ca:	7923      	ldrb	r3, [r4, #4]
   bf2cc:	0758      	lsls	r0, r3, #29
   bf2ce:	d514      	bpl.n	bf2fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf2d0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf2d2:	4633      	mov	r3, r6
   bf2d4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bf2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf2da:	b12a      	cbz	r2, bf2e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bf2dc:	2a20      	cmp	r2, #32
   bf2de:	d101      	bne.n	bf2e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bf2e0:	461e      	mov	r6, r3
   bf2e2:	e7f7      	b.n	bf2d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bf2e4:	2a28      	cmp	r2, #40	; 0x28
   bf2e6:	d1f5      	bne.n	bf2d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bf2e8:	4922      	ldr	r1, [pc, #136]	; (bf374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bf2ea:	2202      	movs	r2, #2
   bf2ec:	a801      	add	r0, sp, #4
   bf2ee:	f7ff f8f3 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf2f2:	1bba      	subs	r2, r7, r6
   bf2f4:	4631      	mov	r1, r6
   bf2f6:	f7ff f8ff 	bl	be4f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bf2fa:	7923      	ldrb	r3, [r4, #4]
   bf2fc:	0719      	lsls	r1, r3, #28
   bf2fe:	d507      	bpl.n	bf310 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bf300:	491d      	ldr	r1, [pc, #116]	; (bf378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bf302:	2201      	movs	r2, #1
   bf304:	a801      	add	r0, sp, #4
   bf306:	f7ff f8e7 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf30a:	6961      	ldr	r1, [r4, #20]
   bf30c:	f7ff f874 	bl	be3f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bf310:	7923      	ldrb	r3, [r4, #4]
   bf312:	06da      	lsls	r2, r3, #27
   bf314:	d508      	bpl.n	bf328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bf316:	2204      	movs	r2, #4
   bf318:	4918      	ldr	r1, [pc, #96]	; (bf37c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bf31a:	eb0d 0002 	add.w	r0, sp, r2
   bf31e:	f7ff f8db 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf322:	69a1      	ldr	r1, [r4, #24]
   bf324:	f7ff f856 	bl	be3d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bf328:	7923      	ldrb	r3, [r4, #4]
   bf32a:	069b      	lsls	r3, r3, #26
   bf32c:	d507      	bpl.n	bf33e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bf32e:	4914      	ldr	r1, [pc, #80]	; (bf380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bf330:	2206      	movs	r2, #6
   bf332:	a801      	add	r0, sp, #4
   bf334:	f7ff f8d0 	bl	be4d8 <_ZN5spark10JSONWriter4nameEPKcj>
   bf338:	69e1      	ldr	r1, [r4, #28]
   bf33a:	f7ff f945 	bl	be5c8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bf33e:	a801      	add	r0, sp, #4
   bf340:	f7ff f825 	bl	be38e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bf344:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bf346:	490f      	ldr	r1, [pc, #60]	; (bf384 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bf348:	6803      	ldr	r3, [r0, #0]
   bf34a:	2202      	movs	r2, #2
   bf34c:	68db      	ldr	r3, [r3, #12]
   bf34e:	4798      	blx	r3
}
   bf350:	b005      	add	sp, #20
   bf352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf356:	bf00      	nop
   bf358:	2003e67c 	.word	0x2003e67c
   bf35c:	000c566c 	.word	0x000c566c
   bf360:	000c5604 	.word	0x000c5604
   bf364:	000c4f28 	.word	0x000c4f28
   bf368:	000c5b38 	.word	0x000c5b38
   bf36c:	000c4d3d 	.word	0x000c4d3d
   bf370:	000c5655 	.word	0x000c5655
   bf374:	000c4575 	.word	0x000c4575
   bf378:	000c45d6 	.word	0x000c45d6
   bf37c:	000c5658 	.word	0x000c5658
   bf380:	000c565d 	.word	0x000c565d
   bf384:	000c5652 	.word	0x000c5652

000bf388 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bf388:	2300      	movs	r3, #0
   bf38a:	6840      	ldr	r0, [r0, #4]
   bf38c:	461a      	mov	r2, r3
   bf38e:	f7fd bfe9 	b.w	bd364 <network_connect>

000bf392 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bf392:	6840      	ldr	r0, [r0, #4]
   bf394:	2200      	movs	r2, #0
   bf396:	2102      	movs	r1, #2
   bf398:	f7fd bff4 	b.w	bd384 <network_disconnect>

000bf39c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bf39c:	2200      	movs	r2, #0
   bf39e:	6840      	ldr	r0, [r0, #4]
   bf3a0:	4611      	mov	r1, r2
   bf3a2:	f7fd bfe7 	b.w	bd374 <network_connecting>

000bf3a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bf3a6:	2200      	movs	r2, #0
   bf3a8:	6840      	ldr	r0, [r0, #4]
   bf3aa:	4611      	mov	r1, r2
   bf3ac:	f7fd bff2 	b.w	bd394 <network_ready>

000bf3b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bf3b0:	2300      	movs	r3, #0
   bf3b2:	6840      	ldr	r0, [r0, #4]
   bf3b4:	461a      	mov	r2, r3
   bf3b6:	4619      	mov	r1, r3
   bf3b8:	f7fd bff4 	b.w	bd3a4 <network_on>

000bf3bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bf3bc:	2300      	movs	r3, #0
   bf3be:	6840      	ldr	r0, [r0, #4]
   bf3c0:	461a      	mov	r2, r3
   bf3c2:	4619      	mov	r1, r3
   bf3c4:	f7fd bff6 	b.w	bd3b4 <network_off>

000bf3c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bf3c8:	6840      	ldr	r0, [r0, #4]
   bf3ca:	2100      	movs	r1, #0
   bf3cc:	f7fe b81a 	b.w	bd404 <network_is_on>

000bf3d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bf3d0:	6840      	ldr	r0, [r0, #4]
   bf3d2:	2100      	movs	r1, #0
   bf3d4:	f7fe b81e 	b.w	bd414 <network_is_off>

000bf3d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bf3d8:	6840      	ldr	r0, [r0, #4]
   bf3da:	2200      	movs	r2, #0
   bf3dc:	f081 0101 	eor.w	r1, r1, #1
   bf3e0:	f7fd bff0 	b.w	bd3c4 <network_listen>

000bf3e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bf3e4:	6840      	ldr	r0, [r0, #4]
   bf3e6:	2200      	movs	r2, #0
   bf3e8:	f7fd bffc 	b.w	bd3e4 <network_set_listen_timeout>

000bf3ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bf3ec:	2200      	movs	r2, #0
   bf3ee:	6840      	ldr	r0, [r0, #4]
   bf3f0:	4611      	mov	r1, r2
   bf3f2:	f7fd bfff 	b.w	bd3f4 <network_get_listen_timeout>

000bf3f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bf3f6:	2200      	movs	r2, #0
   bf3f8:	6840      	ldr	r0, [r0, #4]
   bf3fa:	4611      	mov	r1, r2
   bf3fc:	f7fd bfea 	b.w	bd3d4 <network_listening>

000bf400 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bf400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf404:	b095      	sub	sp, #84	; 0x54
   bf406:	4614      	mov	r4, r2
   bf408:	460d      	mov	r5, r1
   bf40a:	4607      	mov	r7, r0
    IPAddress addr;
   bf40c:	f7fe fe6e 	bl	be0ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bf410:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bf412:	221c      	movs	r2, #28
   bf414:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bf416:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bf418:	f001 ffe2 	bl	c13e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bf41c:	2340      	movs	r3, #64	; 0x40
   bf41e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bf420:	4620      	mov	r0, r4
   bf422:	466b      	mov	r3, sp
   bf424:	aa0c      	add	r2, sp, #48	; 0x30
   bf426:	2100      	movs	r1, #0
   bf428:	f7fd fd40 	bl	bceac <netdb_getaddrinfo>
    if (!r) {
   bf42c:	4604      	mov	r4, r0
   bf42e:	2800      	cmp	r0, #0
   bf430:	d14b      	bne.n	bf4ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf432:	4602      	mov	r2, r0
   bf434:	2101      	movs	r1, #1
   bf436:	6868      	ldr	r0, [r5, #4]
   bf438:	f7fd ffac 	bl	bd394 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf43c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf43e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf440:	4622      	mov	r2, r4
   bf442:	6868      	ldr	r0, [r5, #4]
   bf444:	f7fd ffa6 	bl	bd394 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf448:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf44a:	4681      	mov	r9, r0
        bool ok = false;
   bf44c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf44e:	2e00      	cmp	r6, #0
   bf450:	d03b      	beq.n	bf4ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bf452:	2900      	cmp	r1, #0
   bf454:	d139      	bne.n	bf4ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bf456:	6873      	ldr	r3, [r6, #4]
   bf458:	2b02      	cmp	r3, #2
   bf45a:	d003      	beq.n	bf464 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bf45c:	2b0a      	cmp	r3, #10
   bf45e:	d011      	beq.n	bf484 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf460:	69f6      	ldr	r6, [r6, #28]
   bf462:	e7f4      	b.n	bf44e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bf464:	f1b8 0f00 	cmp.w	r8, #0
   bf468:	d0fa      	beq.n	bf460 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bf46a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bf46c:	a806      	add	r0, sp, #24
   bf46e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bf470:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bf472:	f7fe fe69 	bl	be148 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bf476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf478:	1d3c      	adds	r4, r7, #4
   bf47a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf47c:	682b      	ldr	r3, [r5, #0]
   bf47e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf480:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bf482:	e7ed      	b.n	bf460 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bf484:	f1b9 0f00 	cmp.w	r9, #0
   bf488:	d0ea      	beq.n	bf460 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bf48a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bf48c:	2210      	movs	r2, #16
   bf48e:	a801      	add	r0, sp, #4
   bf490:	f001 ffa6 	bl	c13e0 <memset>
                    a.v = 6;
   bf494:	2306      	movs	r3, #6
   bf496:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bf49a:	ad01      	add	r5, sp, #4
   bf49c:	f104 0308 	add.w	r3, r4, #8
   bf4a0:	3418      	adds	r4, #24
   bf4a2:	6818      	ldr	r0, [r3, #0]
   bf4a4:	6859      	ldr	r1, [r3, #4]
   bf4a6:	462a      	mov	r2, r5
   bf4a8:	c203      	stmia	r2!, {r0, r1}
   bf4aa:	3308      	adds	r3, #8
   bf4ac:	42a3      	cmp	r3, r4
   bf4ae:	4615      	mov	r5, r2
   bf4b0:	d1f7      	bne.n	bf4a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bf4b2:	a901      	add	r1, sp, #4
   bf4b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bf4b6:	ad07      	add	r5, sp, #28
   bf4b8:	f7fe fe26 	bl	be108 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bf4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf4be:	1d3c      	adds	r4, r7, #4
   bf4c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf4c2:	682b      	ldr	r3, [r5, #0]
   bf4c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf4c6:	4649      	mov	r1, r9
   bf4c8:	e7ca      	b.n	bf460 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bf4ca:	9800      	ldr	r0, [sp, #0]
   bf4cc:	f7fd fce6 	bl	bce9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bf4d0:	4638      	mov	r0, r7
   bf4d2:	b015      	add	sp, #84	; 0x54
   bf4d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bf4d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bf4d8:	4b02      	ldr	r3, [pc, #8]	; (bf4e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bf4da:	4a03      	ldr	r2, [pc, #12]	; (bf4e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bf4dc:	601a      	str	r2, [r3, #0]
   bf4de:	2200      	movs	r2, #0
   bf4e0:	605a      	str	r2, [r3, #4]

} // spark
   bf4e2:	4770      	bx	lr
   bf4e4:	2003e67c 	.word	0x2003e67c
   bf4e8:	000c56e4 	.word	0x000c56e4

000bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf4ec:	b508      	push	{r3, lr}
            return &Wire1;
   bf4ee:	f001 f961 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf4f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf4f6:	f7fe bd81 	b.w	bdffc <_ZN7TwoWire4lockEv>

000bf4fa <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf4fa:	b510      	push	{r4, lr}
   bf4fc:	4604      	mov	r4, r0
    lock_(_lock)
   bf4fe:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf500:	b109      	cbz	r1, bf506 <_ZN4PMICC1Eb+0xc>
        lock();
   bf502:	f7ff fff3 	bl	bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf506:	4620      	mov	r0, r4
   bf508:	bd10      	pop	{r4, pc}

000bf50a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf50a:	b508      	push	{r3, lr}
            return &Wire1;
   bf50c:	f001 f952 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf514:	f7fe bd7b 	b.w	be00e <_ZN7TwoWire6unlockEv>

000bf518 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf518:	b510      	push	{r4, lr}
    if (lock_) {
   bf51a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf51c:	4604      	mov	r4, r0
    if (lock_) {
   bf51e:	b10b      	cbz	r3, bf524 <_ZN4PMICD1Ev+0xc>
        unlock();
   bf520:	f7ff fff3 	bl	bf50a <_ZN4PMIC6unlockEv>
}
   bf524:	4620      	mov	r0, r4
   bf526:	bd10      	pop	{r4, pc}

000bf528 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf528:	b510      	push	{r4, lr}
   bf52a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf52c:	6800      	ldr	r0, [r0, #0]
   bf52e:	f7ff ffec 	bl	bf50a <_ZN4PMIC6unlockEv>
   bf532:	4620      	mov	r0, r4
   bf534:	bd10      	pop	{r4, pc}

000bf536 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf536:	b530      	push	{r4, r5, lr}
   bf538:	b087      	sub	sp, #28
   bf53a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf53c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf53e:	f7ff ffd5 	bl	bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf542:	226b      	movs	r2, #107	; 0x6b
   bf544:	2300      	movs	r3, #0
   bf546:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf54a:	2401      	movs	r4, #1
   bf54c:	230a      	movs	r3, #10
   bf54e:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf552:	f001 f92f 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf556:	a902      	add	r1, sp, #8
   bf558:	f7fe fd34 	bl	bdfc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf55c:	f001 f92a 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf560:	6803      	ldr	r3, [r0, #0]
   bf562:	4629      	mov	r1, r5
   bf564:	689b      	ldr	r3, [r3, #8]
   bf566:	4798      	blx	r3
            return &Wire1;
   bf568:	f001 f924 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf56c:	4621      	mov	r1, r4
   bf56e:	f7fe fd41 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf572:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf574:	f001 f91e 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf578:	a902      	add	r1, sp, #8
   bf57a:	f7fe fcf3 	bl	bdf64 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf57e:	f001 f919 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf582:	6803      	ldr	r3, [r0, #0]
   bf584:	695b      	ldr	r3, [r3, #20]
   bf586:	4798      	blx	r3
   bf588:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf58a:	a801      	add	r0, sp, #4
   bf58c:	f7ff ffcc 	bl	bf528 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf590:	b2e0      	uxtb	r0, r4
   bf592:	b007      	add	sp, #28
   bf594:	bd30      	pop	{r4, r5, pc}

000bf596 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf596:	b570      	push	{r4, r5, r6, lr}
   bf598:	b086      	sub	sp, #24
   bf59a:	460d      	mov	r5, r1
   bf59c:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf59e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf5a0:	f7ff ffa4 	bl	bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf5a4:	226b      	movs	r2, #107	; 0x6b
   bf5a6:	2300      	movs	r3, #0
   bf5a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf5ac:	2601      	movs	r6, #1
   bf5ae:	230a      	movs	r3, #10
   bf5b0:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf5b4:	f001 f8fe 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf5b8:	a902      	add	r1, sp, #8
   bf5ba:	f7fe fd03 	bl	bdfc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf5be:	f001 f8f9 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf5c2:	6803      	ldr	r3, [r0, #0]
   bf5c4:	4629      	mov	r1, r5
   bf5c6:	689b      	ldr	r3, [r3, #8]
   bf5c8:	4798      	blx	r3
            return &Wire1;
   bf5ca:	f001 f8f3 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf5ce:	6803      	ldr	r3, [r0, #0]
   bf5d0:	4621      	mov	r1, r4
   bf5d2:	689b      	ldr	r3, [r3, #8]
   bf5d4:	4798      	blx	r3
            return &Wire1;
   bf5d6:	f001 f8ed 	bl	c07b4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf5da:	4631      	mov	r1, r6
   bf5dc:	f7fe fd0a 	bl	bdff4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf5e0:	a801      	add	r0, sp, #4
   bf5e2:	f7ff ffa1 	bl	bf528 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf5e6:	b006      	add	sp, #24
   bf5e8:	bd70      	pop	{r4, r5, r6, pc}

000bf5ea <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf5ea:	b513      	push	{r0, r1, r4, lr}
   bf5ec:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf5ee:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf5f0:	f7ff ff7c 	bl	bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf5f4:	2101      	movs	r1, #1
   bf5f6:	4620      	mov	r0, r4
   bf5f8:	f7ff ff9d 	bl	bf536 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf5fc:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf600:	2b10      	cmp	r3, #16
   bf602:	d007      	beq.n	bf614 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf604:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf608:	f042 0210 	orr.w	r2, r2, #16
   bf60c:	2101      	movs	r1, #1
   bf60e:	4620      	mov	r0, r4
   bf610:	f7ff ffc1 	bl	bf596 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf614:	a801      	add	r0, sp, #4
   bf616:	f7ff ff87 	bl	bf528 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf61a:	2001      	movs	r0, #1
   bf61c:	b002      	add	sp, #8
   bf61e:	bd10      	pop	{r4, pc}

000bf620 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf620:	b513      	push	{r0, r1, r4, lr}
   bf622:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf624:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf626:	f7ff ff61 	bl	bf4ec <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf62a:	2101      	movs	r1, #1
   bf62c:	4620      	mov	r0, r4
   bf62e:	f7ff ff82 	bl	bf536 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf632:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf636:	d005      	beq.n	bf644 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf638:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf63c:	2101      	movs	r1, #1
   bf63e:	4620      	mov	r0, r4
   bf640:	f7ff ffa9 	bl	bf596 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf644:	a801      	add	r0, sp, #4
   bf646:	f7ff ff6f 	bl	bf528 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf64a:	2001      	movs	r0, #1
   bf64c:	b002      	add	sp, #8
   bf64e:	bd10      	pop	{r4, pc}

000bf650 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf652:	4606      	mov	r6, r0
   bf654:	460d      	mov	r5, r1
  size_t n = 0;
   bf656:	188f      	adds	r7, r1, r2
   bf658:	2400      	movs	r4, #0
  while (size--) {
   bf65a:	42bd      	cmp	r5, r7
   bf65c:	d00c      	beq.n	bf678 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf65e:	6833      	ldr	r3, [r6, #0]
   bf660:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf664:	689b      	ldr	r3, [r3, #8]
   bf666:	4630      	mov	r0, r6
   bf668:	4798      	blx	r3
     if (chunk>=0)
   bf66a:	1e03      	subs	r3, r0, #0
   bf66c:	db01      	blt.n	bf672 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf66e:	441c      	add	r4, r3
  while (size--) {
   bf670:	e7f3      	b.n	bf65a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf672:	2c00      	cmp	r4, #0
   bf674:	bf08      	it	eq
   bf676:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf678:	4620      	mov	r0, r4
   bf67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf67c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf67c:	b513      	push	{r0, r1, r4, lr}
   bf67e:	4604      	mov	r4, r0
    }
   bf680:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf682:	b159      	cbz	r1, bf69c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf684:	9101      	str	r1, [sp, #4]
   bf686:	f001 ff76 	bl	c1576 <strlen>
   bf68a:	6823      	ldr	r3, [r4, #0]
   bf68c:	9901      	ldr	r1, [sp, #4]
   bf68e:	68db      	ldr	r3, [r3, #12]
   bf690:	4602      	mov	r2, r0
   bf692:	4620      	mov	r0, r4
    }
   bf694:	b002      	add	sp, #8
   bf696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf69a:	4718      	bx	r3
    }
   bf69c:	b002      	add	sp, #8
   bf69e:	bd10      	pop	{r4, pc}

000bf6a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf6a0:	b508      	push	{r3, lr}
  return write(str);
   bf6a2:	f7ff ffeb 	bl	bf67c <_ZN5Print5writeEPKc>
}
   bf6a6:	bd08      	pop	{r3, pc}

000bf6a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf6a8:	6803      	ldr	r3, [r0, #0]
   bf6aa:	689b      	ldr	r3, [r3, #8]
   bf6ac:	4718      	bx	r3

000bf6ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf6ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf6b0:	210d      	movs	r1, #13
{
   bf6b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf6b4:	f7ff fff8 	bl	bf6a8 <_ZN5Print5printEc>
  n += print('\n');
   bf6b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf6ba:	4604      	mov	r4, r0
  n += print('\n');
   bf6bc:	4628      	mov	r0, r5
   bf6be:	f7ff fff3 	bl	bf6a8 <_ZN5Print5printEc>
  return n;
}
   bf6c2:	4420      	add	r0, r4
   bf6c4:	bd38      	pop	{r3, r4, r5, pc}

000bf6c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf6c6:	b530      	push	{r4, r5, lr}
   bf6c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf6ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf6cc:	2a01      	cmp	r2, #1
  *str = '\0';
   bf6ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf6d2:	bf98      	it	ls
   bf6d4:	220a      	movls	r2, #10
   bf6d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf6d8:	460d      	mov	r5, r1
   bf6da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf6de:	fb01 5312 	mls	r3, r1, r2, r5
   bf6e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf6e6:	2b09      	cmp	r3, #9
   bf6e8:	bf94      	ite	ls
   bf6ea:	3330      	addls	r3, #48	; 0x30
   bf6ec:	3337      	addhi	r3, #55	; 0x37
   bf6ee:	b2db      	uxtb	r3, r3
  } while(n);
   bf6f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf6f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf6f6:	d9ef      	bls.n	bf6d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf6f8:	4621      	mov	r1, r4
   bf6fa:	f7ff ffbf 	bl	bf67c <_ZN5Print5writeEPKc>
}
   bf6fe:	b00b      	add	sp, #44	; 0x2c
   bf700:	bd30      	pop	{r4, r5, pc}
	...

000bf704 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf708:	ec55 4b10 	vmov	r4, r5, d0
   bf70c:	4606      	mov	r6, r0
   bf70e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf710:	ee10 2a10 	vmov	r2, s0
   bf714:	ee10 0a10 	vmov	r0, s0
   bf718:	462b      	mov	r3, r5
   bf71a:	4629      	mov	r1, r5
   bf71c:	f001 fd1a 	bl	c1154 <__aeabi_dcmpun>
   bf720:	b140      	cbz	r0, bf734 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf722:	4953      	ldr	r1, [pc, #332]	; (bf870 <_ZN5Print10printFloatEdh+0x16c>)
   bf724:	4630      	mov	r0, r6
   bf726:	f7ff ffa9 	bl	bf67c <_ZN5Print5writeEPKc>
   bf72a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf72c:	4650      	mov	r0, sl
   bf72e:	b003      	add	sp, #12
   bf730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf734:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf738:	4b4e      	ldr	r3, [pc, #312]	; (bf874 <_ZN5Print10printFloatEdh+0x170>)
   bf73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf73e:	4620      	mov	r0, r4
   bf740:	4649      	mov	r1, r9
   bf742:	f001 fd07 	bl	c1154 <__aeabi_dcmpun>
   bf746:	b948      	cbnz	r0, bf75c <_ZN5Print10printFloatEdh+0x58>
   bf748:	4b4a      	ldr	r3, [pc, #296]	; (bf874 <_ZN5Print10printFloatEdh+0x170>)
   bf74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf74e:	4620      	mov	r0, r4
   bf750:	4649      	mov	r1, r9
   bf752:	f001 fce1 	bl	c1118 <__aeabi_dcmple>
   bf756:	b908      	cbnz	r0, bf75c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf758:	4947      	ldr	r1, [pc, #284]	; (bf878 <_ZN5Print10printFloatEdh+0x174>)
   bf75a:	e7e3      	b.n	bf724 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf75c:	4b47      	ldr	r3, [pc, #284]	; (bf87c <_ZN5Print10printFloatEdh+0x178>)
   bf75e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf762:	4620      	mov	r0, r4
   bf764:	4629      	mov	r1, r5
   bf766:	f001 fceb 	bl	c1140 <__aeabi_dcmpgt>
   bf76a:	b108      	cbz	r0, bf770 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf76c:	4944      	ldr	r1, [pc, #272]	; (bf880 <_ZN5Print10printFloatEdh+0x17c>)
   bf76e:	e7d9      	b.n	bf724 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf770:	4b44      	ldr	r3, [pc, #272]	; (bf884 <_ZN5Print10printFloatEdh+0x180>)
   bf772:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf776:	4620      	mov	r0, r4
   bf778:	4629      	mov	r1, r5
   bf77a:	f001 fcc3 	bl	c1104 <__aeabi_dcmplt>
   bf77e:	2800      	cmp	r0, #0
   bf780:	d1f4      	bne.n	bf76c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf782:	2200      	movs	r2, #0
   bf784:	2300      	movs	r3, #0
   bf786:	4620      	mov	r0, r4
   bf788:	4629      	mov	r1, r5
   bf78a:	f001 fcbb 	bl	c1104 <__aeabi_dcmplt>
   bf78e:	b1d0      	cbz	r0, bf7c6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf790:	212d      	movs	r1, #45	; 0x2d
   bf792:	4630      	mov	r0, r6
   bf794:	f7ff ff88 	bl	bf6a8 <_ZN5Print5printEc>
     number = -number;
   bf798:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf79c:	4682      	mov	sl, r0
     number = -number;
   bf79e:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf7a0:	4939      	ldr	r1, [pc, #228]	; (bf888 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf7a2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf890 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf7a6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf7aa:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf7ac:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf7b0:	fa5f f38b 	uxtb.w	r3, fp
   bf7b4:	429f      	cmp	r7, r3
   bf7b6:	d908      	bls.n	bf7ca <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf7b8:	4642      	mov	r2, r8
   bf7ba:	464b      	mov	r3, r9
   bf7bc:	f001 fb5a 	bl	c0e74 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf7c0:	f10b 0b01 	add.w	fp, fp, #1
   bf7c4:	e7f4      	b.n	bf7b0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf7c6:	4682      	mov	sl, r0
   bf7c8:	e7ea      	b.n	bf7a0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf7ca:	4622      	mov	r2, r4
   bf7cc:	462b      	mov	r3, r5
   bf7ce:	f001 f871 	bl	c08b4 <__adddf3>
   bf7d2:	460d      	mov	r5, r1
   bf7d4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf7d6:	f001 fcfb 	bl	c11d0 <__aeabi_d2uiz>
   bf7da:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf7dc:	f001 f9a6 	bl	c0b2c <__aeabi_ui2d>
   bf7e0:	4602      	mov	r2, r0
   bf7e2:	460b      	mov	r3, r1
   bf7e4:	4620      	mov	r0, r4
   bf7e6:	4629      	mov	r1, r5
   bf7e8:	f001 f862 	bl	c08b0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf7ec:	220a      	movs	r2, #10
   bf7ee:	4604      	mov	r4, r0
   bf7f0:	460d      	mov	r5, r1
   bf7f2:	4630      	mov	r0, r6
   bf7f4:	4641      	mov	r1, r8
   bf7f6:	f7ff ff66 	bl	bf6c6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf7fa:	4482      	add	sl, r0
  if (digits > 0) {
   bf7fc:	2f00      	cmp	r7, #0
   bf7fe:	d095      	beq.n	bf72c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf800:	4922      	ldr	r1, [pc, #136]	; (bf88c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf802:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf890 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf806:	4630      	mov	r0, r6
   bf808:	f7ff ff38 	bl	bf67c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf80c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf810:	4482      	add	sl, r0
  while (digits-- > 0)
   bf812:	2f00      	cmp	r7, #0
   bf814:	d08a      	beq.n	bf72c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf816:	4642      	mov	r2, r8
   bf818:	464b      	mov	r3, r9
   bf81a:	4620      	mov	r0, r4
   bf81c:	4629      	mov	r1, r5
   bf81e:	f001 f9ff 	bl	c0c20 <__aeabi_dmul>
   bf822:	4604      	mov	r4, r0
   bf824:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf826:	f001 fcab 	bl	c1180 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf82a:	f1b0 0b00 	subs.w	fp, r0, #0
   bf82e:	da1c      	bge.n	bf86a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf830:	212d      	movs	r1, #45	; 0x2d
   bf832:	4630      	mov	r0, r6
   bf834:	f7ff ff38 	bl	bf6a8 <_ZN5Print5printEc>
            val = -n;
   bf838:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf83c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf83e:	220a      	movs	r2, #10
   bf840:	4630      	mov	r0, r6
   bf842:	9301      	str	r3, [sp, #4]
   bf844:	f7ff ff3f 	bl	bf6c6 <_ZN5Print11printNumberEmh>
   bf848:	9b01      	ldr	r3, [sp, #4]
   bf84a:	4418      	add	r0, r3
    n += print(toPrint);
   bf84c:	4482      	add	sl, r0
    remainder -= toPrint;
   bf84e:	4658      	mov	r0, fp
   bf850:	f001 f97c 	bl	c0b4c <__aeabi_i2d>
   bf854:	4602      	mov	r2, r0
   bf856:	460b      	mov	r3, r1
   bf858:	4620      	mov	r0, r4
   bf85a:	4629      	mov	r1, r5
   bf85c:	f001 f828 	bl	c08b0 <__aeabi_dsub>
   bf860:	3f01      	subs	r7, #1
   bf862:	4604      	mov	r4, r0
   bf864:	460d      	mov	r5, r1
   bf866:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf868:	e7d3      	b.n	bf812 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf86a:	4659      	mov	r1, fp
        size_t t = 0;
   bf86c:	2300      	movs	r3, #0
   bf86e:	e7e6      	b.n	bf83e <_ZN5Print10printFloatEdh+0x13a>
   bf870:	000c5718 	.word	0x000c5718
   bf874:	7fefffff 	.word	0x7fefffff
   bf878:	000c571c 	.word	0x000c571c
   bf87c:	41efffff 	.word	0x41efffff
   bf880:	000c5720 	.word	0x000c5720
   bf884:	c1efffff 	.word	0xc1efffff
   bf888:	3fe00000 	.word	0x3fe00000
   bf88c:	000c5758 	.word	0x000c5758
   bf890:	40240000 	.word	0x40240000

000bf894 <_ZN5Print5printEfi>:
{
   bf894:	b538      	push	{r3, r4, r5, lr}
   bf896:	4604      	mov	r4, r0
   bf898:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf89c:	b2cd      	uxtb	r5, r1
   bf89e:	f001 f967 	bl	c0b70 <__aeabi_f2d>
   bf8a2:	ec41 0b10 	vmov	d0, r0, r1
   bf8a6:	4629      	mov	r1, r5
   bf8a8:	4620      	mov	r0, r4
}
   bf8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf8ae:	f7ff bf29 	b.w	bf704 <_ZN5Print10printFloatEdh>

000bf8b2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf8b6:	b086      	sub	sp, #24
   bf8b8:	af00      	add	r7, sp, #0
   bf8ba:	4605      	mov	r5, r0
   bf8bc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf8be:	1d38      	adds	r0, r7, #4
   bf8c0:	2114      	movs	r1, #20
{
   bf8c2:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf8c4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf8c6:	f7fd fddd 	bl	bd484 <vsnprintf>

    if (n<bufsize)
   bf8ca:	2813      	cmp	r0, #19
   bf8cc:	d80e      	bhi.n	bf8ec <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf8ce:	1d39      	adds	r1, r7, #4
   bf8d0:	4628      	mov	r0, r5
   bf8d2:	f7ff fed3 	bl	bf67c <_ZN5Print5writeEPKc>
   bf8d6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf8d8:	b11e      	cbz	r6, bf8e2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf8da:	4628      	mov	r0, r5
   bf8dc:	f7ff fee7 	bl	bf6ae <_ZN5Print7printlnEv>
   bf8e0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf8e2:	4620      	mov	r0, r4
   bf8e4:	3718      	adds	r7, #24
   bf8e6:	46bd      	mov	sp, r7
   bf8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf8ec:	f100 0308 	add.w	r3, r0, #8
   bf8f0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf8f4:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf8f6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf8fa:	4622      	mov	r2, r4
   bf8fc:	1c41      	adds	r1, r0, #1
   bf8fe:	683b      	ldr	r3, [r7, #0]
   bf900:	4668      	mov	r0, sp
   bf902:	f7fd fdbf 	bl	bd484 <vsnprintf>
  return write(str);
   bf906:	4669      	mov	r1, sp
   bf908:	4628      	mov	r0, r5
   bf90a:	f7ff feb7 	bl	bf67c <_ZN5Print5writeEPKc>
   bf90e:	4604      	mov	r4, r0
   bf910:	46c5      	mov	sp, r8
   bf912:	e7e1      	b.n	bf8d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf914 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf914:	b510      	push	{r4, lr}
  if (0 == max) {
   bf916:	4604      	mov	r4, r0
   bf918:	b128      	cbz	r0, bf926 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf91a:	f001 fda7 	bl	c146c <rand>
   bf91e:	fb90 f3f4 	sdiv	r3, r0, r4
   bf922:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf926:	4620      	mov	r0, r4
   bf928:	bd10      	pop	{r4, pc}

000bf92a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf92a:	4288      	cmp	r0, r1
{
   bf92c:	b510      	push	{r4, lr}
   bf92e:	4604      	mov	r4, r0
  if (min >= max) {
   bf930:	da03      	bge.n	bf93a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf932:	1a08      	subs	r0, r1, r0
   bf934:	f7ff ffee 	bl	bf914 <_Z6randomi>
   bf938:	4404      	add	r4, r0
}
   bf93a:	4620      	mov	r0, r4
   bf93c:	bd10      	pop	{r4, pc}
	...

000bf940 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf940:	4b01      	ldr	r3, [pc, #4]	; (bf948 <_GLOBAL__sub_I_RGB+0x8>)
   bf942:	2200      	movs	r2, #0
   bf944:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf946:	4770      	bx	lr
   bf948:	2003e684 	.word	0x2003e684

000bf94c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf94c:	2100      	movs	r1, #0
   bf94e:	f7fd baf5 	b.w	bcf3c <hal_spi_release>

000bf952 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf952:	2100      	movs	r1, #0
   bf954:	f7fd baea 	b.w	bcf2c <hal_spi_acquire>

000bf958 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf958:	b510      	push	{r4, lr}
   bf95a:	4604      	mov	r4, r0
   bf95c:	4608      	mov	r0, r1
{
    _spi = spi;
   bf95e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf960:	f7fd fac4 	bl	bceec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf964:	2300      	movs	r3, #0
   bf966:	6063      	str	r3, [r4, #4]
}
   bf968:	4620      	mov	r0, r4
   bf96a:	bd10      	pop	{r4, pc}

000bf96c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf96c:	b513      	push	{r0, r1, r4, lr}
   bf96e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf970:	7800      	ldrb	r0, [r0, #0]
   bf972:	f7ff ffee 	bl	bf952 <_ZN8SPIClass4lockEv.isra.0>
   bf976:	b958      	cbnz	r0, bf990 <_ZN8SPIClass5beginEv+0x24>
   bf978:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf97a:	9001      	str	r0, [sp, #4]
   bf97c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf980:	f7fd fa9c 	bl	bcebc <hal_spi_begin>
        unlock();
   bf984:	9801      	ldr	r0, [sp, #4]
    }
}
   bf986:	b002      	add	sp, #8
   bf988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf98c:	f7ff bfde 	b.w	bf94c <_ZN8SPIClass6unlockEv.isra.0>
   bf990:	b002      	add	sp, #8
   bf992:	bd10      	pop	{r4, pc}

000bf994 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bf994:	b513      	push	{r0, r1, r4, lr}
   bf996:	4604      	mov	r4, r0
    if (!lock())
   bf998:	7800      	ldrb	r0, [r0, #0]
   bf99a:	f7ff ffda 	bl	bf952 <_ZN8SPIClass4lockEv.isra.0>
   bf99e:	b948      	cbnz	r0, bf9b4 <_ZN8SPIClass3endEv+0x20>
   bf9a0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bf9a2:	9001      	str	r0, [sp, #4]
   bf9a4:	f7fd fa92 	bl	bcecc <hal_spi_end>
        unlock();
   bf9a8:	9801      	ldr	r0, [sp, #4]
    }
}
   bf9aa:	b002      	add	sp, #8
   bf9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf9b0:	f7ff bfcc 	b.w	bf94c <_ZN8SPIClass6unlockEv.isra.0>
   bf9b4:	b002      	add	sp, #8
   bf9b6:	bd10      	pop	{r4, pc}

000bf9b8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bf9b8:	7800      	ldrb	r0, [r0, #0]
   bf9ba:	f7ff bfc7 	b.w	bf94c <_ZN8SPIClass6unlockEv.isra.0>
	...

000bf9c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bf9c0:	0840      	lsrs	r0, r0, #1
{
   bf9c2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bf9c4:	6018      	str	r0, [r3, #0]
   bf9c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bf9c8:	6818      	ldr	r0, [r3, #0]
   bf9ca:	4288      	cmp	r0, r1
   bf9cc:	b2e5      	uxtb	r5, r4
   bf9ce:	d906      	bls.n	bf9de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bf9d0:	3401      	adds	r4, #1
   bf9d2:	2c08      	cmp	r4, #8
   bf9d4:	d002      	beq.n	bf9dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bf9d6:	0840      	lsrs	r0, r0, #1
   bf9d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bf9da:	e7f5      	b.n	bf9c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bf9dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bf9de:	4b02      	ldr	r3, [pc, #8]	; (bf9e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bf9e0:	5d5b      	ldrb	r3, [r3, r5]
   bf9e2:	7013      	strb	r3, [r2, #0]
}
   bf9e4:	bd30      	pop	{r4, r5, pc}
   bf9e6:	bf00      	nop
   bf9e8:	000c5724 	.word	0x000c5724

000bf9ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bf9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf9f0:	4606      	mov	r6, r0
   bf9f2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bf9f4:	7800      	ldrb	r0, [r0, #0]
{
   bf9f6:	460c      	mov	r4, r1
    CHECK(lock());
   bf9f8:	f7ff ffab 	bl	bf952 <_ZN8SPIClass4lockEv.isra.0>
   bf9fc:	2800      	cmp	r0, #0
   bf9fe:	db1b      	blt.n	bfa38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bfa00:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bfa02:	2214      	movs	r2, #20
   bfa04:	2100      	movs	r1, #0
   bfa06:	a809      	add	r0, sp, #36	; 0x24
   bfa08:	f001 fcea 	bl	c13e0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bfa0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bfa0e:	2200      	movs	r2, #0
   bfa10:	a909      	add	r1, sp, #36	; 0x24
   bfa12:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bfa14:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bfa18:	f7fd fa78 	bl	bcf0c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bfa1c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bfa20:	b113      	cbz	r3, bfa28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bfa22:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bfa26:	b155      	cbz	r5, bfa3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bfa28:	2700      	movs	r7, #0
   bfa2a:	46b9      	mov	r9, r7
   bfa2c:	46b8      	mov	r8, r7
   bfa2e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bfa30:	7923      	ldrb	r3, [r4, #4]
   bfa32:	b15d      	cbz	r5, bfa4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bfa34:	b1c3      	cbz	r3, bfa68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bfa36:	2000      	movs	r0, #0
}
   bfa38:	b00f      	add	sp, #60	; 0x3c
   bfa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bfa3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bfa42:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bfa46:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bfa4a:	e7f1      	b.n	bfa30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bfa4c:	2b00      	cmp	r3, #0
   bfa4e:	d135      	bne.n	bfabc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bfa50:	68a3      	ldr	r3, [r4, #8]
   bfa52:	4543      	cmp	r3, r8
   bfa54:	d108      	bne.n	bfa68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bfa56:	f88d 9020 	strb.w	r9, [sp, #32]
   bfa5a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bfa5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bfa62:	89a3      	ldrh	r3, [r4, #12]
   bfa64:	429a      	cmp	r2, r3
   bfa66:	d0e6      	beq.n	bfa36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bfa68:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bfa6a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bfa6c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bfa70:	980a      	ldr	r0, [sp, #40]	; 0x28
   bfa72:	ab04      	add	r3, sp, #16
   bfa74:	f10d 020f 	add.w	r2, sp, #15
   bfa78:	f7ff ffa2 	bl	bf9c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bfa7c:	7921      	ldrb	r1, [r4, #4]
   bfa7e:	b985      	cbnz	r5, bfaa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bfa80:	b989      	cbnz	r1, bfaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bfa82:	68a3      	ldr	r3, [r4, #8]
   bfa84:	4543      	cmp	r3, r8
   bfa86:	d30e      	bcc.n	bfaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bfa88:	f88d 9020 	strb.w	r9, [sp, #32]
   bfa8c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bfa90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bfa94:	89a3      	ldrh	r3, [r4, #12]
   bfa96:	429a      	cmp	r2, r3
   bfa98:	d105      	bne.n	bfaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bfa9a:	9b04      	ldr	r3, [sp, #16]
   bfa9c:	4543      	cmp	r3, r8
   bfa9e:	d102      	bne.n	bfaa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bfaa0:	e7c9      	b.n	bfa36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bfaa2:	2900      	cmp	r1, #0
   bfaa4:	d1f9      	bne.n	bfa9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bfaa6:	2300      	movs	r3, #0
   bfaa8:	9301      	str	r3, [sp, #4]
   bfaaa:	7b63      	ldrb	r3, [r4, #13]
   bfaac:	9300      	str	r3, [sp, #0]
   bfaae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bfab2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bfab4:	7830      	ldrb	r0, [r6, #0]
   bfab6:	f7fd fa31 	bl	bcf1c <hal_spi_set_settings>
   bfaba:	e7bc      	b.n	bfa36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bfabc:	e9cd 5500 	strd	r5, r5, [sp]
   bfac0:	462b      	mov	r3, r5
   bfac2:	462a      	mov	r2, r5
   bfac4:	2101      	movs	r1, #1
   bfac6:	e7f5      	b.n	bfab4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bfac8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bfac8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bfaca:	7800      	ldrb	r0, [r0, #0]
   bfacc:	f7fd fa06 	bl	bcedc <hal_spi_transfer>
}
   bfad0:	b2c0      	uxtb	r0, r0
   bfad2:	bd08      	pop	{r3, pc}

000bfad4 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bfad4:	4770      	bx	lr

000bfad6 <_ZN8SPIClass15detachInterruptEv>:
   bfad6:	4770      	bx	lr

000bfad8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bfad8:	b510      	push	{r4, lr}
   bfada:	4604      	mov	r4, r0
{
	free(buffer);
   bfadc:	6800      	ldr	r0, [r0, #0]
   bfade:	f7fd fca9 	bl	bd434 <free>
}
   bfae2:	4620      	mov	r0, r4
   bfae4:	bd10      	pop	{r4, pc}

000bfae6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bfae6:	b510      	push	{r4, lr}
   bfae8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bfaea:	6800      	ldr	r0, [r0, #0]
   bfaec:	b108      	cbz	r0, bfaf2 <_ZN6String10invalidateEv+0xc>
   bfaee:	f7fd fca1 	bl	bd434 <free>
	buffer = NULL;
   bfaf2:	2300      	movs	r3, #0
	capacity = len = 0;
   bfaf4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bfaf8:	6023      	str	r3, [r4, #0]
}
   bfafa:	bd10      	pop	{r4, pc}

000bfafc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bfafc:	b538      	push	{r3, r4, r5, lr}
   bfafe:	4604      	mov	r4, r0
   bfb00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bfb02:	6800      	ldr	r0, [r0, #0]
   bfb04:	3101      	adds	r1, #1
   bfb06:	f7fd fc9d 	bl	bd444 <realloc>
	if (newbuffer) {
   bfb0a:	b110      	cbz	r0, bfb12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bfb0c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bfb10:	2001      	movs	r0, #1
	}
	return 0;
}
   bfb12:	bd38      	pop	{r3, r4, r5, pc}

000bfb14 <_ZN6String7reserveEj>:
{
   bfb14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bfb16:	6803      	ldr	r3, [r0, #0]
{
   bfb18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bfb1a:	b123      	cbz	r3, bfb26 <_ZN6String7reserveEj+0x12>
   bfb1c:	6843      	ldr	r3, [r0, #4]
   bfb1e:	428b      	cmp	r3, r1
   bfb20:	d301      	bcc.n	bfb26 <_ZN6String7reserveEj+0x12>
   bfb22:	2001      	movs	r0, #1
}
   bfb24:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bfb26:	4620      	mov	r0, r4
   bfb28:	f7ff ffe8 	bl	bfafc <_ZN6String12changeBufferEj>
   bfb2c:	2800      	cmp	r0, #0
   bfb2e:	d0f9      	beq.n	bfb24 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bfb30:	68a3      	ldr	r3, [r4, #8]
   bfb32:	2b00      	cmp	r3, #0
   bfb34:	d1f5      	bne.n	bfb22 <_ZN6String7reserveEj+0xe>
   bfb36:	6822      	ldr	r2, [r4, #0]
   bfb38:	7013      	strb	r3, [r2, #0]
   bfb3a:	e7f2      	b.n	bfb22 <_ZN6String7reserveEj+0xe>

000bfb3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bfb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfb3e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bfb40:	4611      	mov	r1, r2
   bfb42:	9201      	str	r2, [sp, #4]
{
   bfb44:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bfb46:	f7ff ffe5 	bl	bfb14 <_ZN6String7reserveEj>
   bfb4a:	9a01      	ldr	r2, [sp, #4]
   bfb4c:	b928      	cbnz	r0, bfb5a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bfb4e:	4620      	mov	r0, r4
   bfb50:	f7ff ffc9 	bl	bfae6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bfb54:	4620      	mov	r0, r4
   bfb56:	b003      	add	sp, #12
   bfb58:	bd30      	pop	{r4, r5, pc}
	len = length;
   bfb5a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bfb5c:	4629      	mov	r1, r5
   bfb5e:	6820      	ldr	r0, [r4, #0]
   bfb60:	f001 fc16 	bl	c1390 <memcpy>
	buffer[len] = 0;
   bfb64:	6822      	ldr	r2, [r4, #0]
   bfb66:	68a3      	ldr	r3, [r4, #8]
   bfb68:	2100      	movs	r1, #0
   bfb6a:	54d1      	strb	r1, [r2, r3]
	return *this;
   bfb6c:	e7f2      	b.n	bfb54 <_ZN6String4copyEPKcj+0x18>

000bfb6e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bfb6e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bfb70:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bfb72:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bfb76:	4604      	mov	r4, r0
	len = 0;
   bfb78:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfb7a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bfb7c:	b141      	cbz	r1, bfb90 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bfb7e:	4608      	mov	r0, r1
   bfb80:	9101      	str	r1, [sp, #4]
   bfb82:	f001 fcf8 	bl	c1576 <strlen>
   bfb86:	9901      	ldr	r1, [sp, #4]
   bfb88:	4602      	mov	r2, r0
   bfb8a:	4620      	mov	r0, r4
   bfb8c:	f7ff ffd6 	bl	bfb3c <_ZN6String4copyEPKcj>
}
   bfb90:	4620      	mov	r0, r4
   bfb92:	b002      	add	sp, #8
   bfb94:	bd10      	pop	{r4, pc}

000bfb96 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bfb96:	b538      	push	{r3, r4, r5, lr}
   bfb98:	4605      	mov	r5, r0
	if (buffer) {
   bfb9a:	6800      	ldr	r0, [r0, #0]
{
   bfb9c:	460c      	mov	r4, r1
	if (buffer) {
   bfb9e:	b168      	cbz	r0, bfbbc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bfba0:	686a      	ldr	r2, [r5, #4]
   bfba2:	688b      	ldr	r3, [r1, #8]
   bfba4:	429a      	cmp	r2, r3
   bfba6:	d307      	bcc.n	bfbb8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bfba8:	6809      	ldr	r1, [r1, #0]
   bfbaa:	f001 fcbe 	bl	c152a <strcpy>
			len = rhs.len;
   bfbae:	68a3      	ldr	r3, [r4, #8]
   bfbb0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bfbb2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bfbb4:	60a3      	str	r3, [r4, #8]
}
   bfbb6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bfbb8:	f7fd fc3c 	bl	bd434 <free>
	buffer = rhs.buffer;
   bfbbc:	6823      	ldr	r3, [r4, #0]
   bfbbe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bfbc0:	6863      	ldr	r3, [r4, #4]
   bfbc2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bfbc4:	68a3      	ldr	r3, [r4, #8]
   bfbc6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bfbc8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bfbca:	e9c4 3300 	strd	r3, r3, [r4]
   bfbce:	e7f1      	b.n	bfbb4 <_ZN6String4moveERS_+0x1e>

000bfbd0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bfbd0:	b510      	push	{r4, lr}
	buffer = NULL;
   bfbd2:	2300      	movs	r3, #0
	capacity = 0;
   bfbd4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bfbd8:	4604      	mov	r4, r0
	len = 0;
   bfbda:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfbdc:	7303      	strb	r3, [r0, #12]
	move(rval);
   bfbde:	f7ff ffda 	bl	bfb96 <_ZN6String4moveERS_>
}
   bfbe2:	4620      	mov	r0, r4
   bfbe4:	bd10      	pop	{r4, pc}

000bfbe6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bfbe6:	4288      	cmp	r0, r1
{
   bfbe8:	b510      	push	{r4, lr}
   bfbea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bfbec:	d005      	beq.n	bfbfa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bfbee:	680b      	ldr	r3, [r1, #0]
   bfbf0:	b12b      	cbz	r3, bfbfe <_ZN6StringaSERKS_+0x18>
   bfbf2:	688a      	ldr	r2, [r1, #8]
   bfbf4:	4619      	mov	r1, r3
   bfbf6:	f7ff ffa1 	bl	bfb3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfbfa:	4620      	mov	r0, r4
   bfbfc:	bd10      	pop	{r4, pc}
	else invalidate();
   bfbfe:	f7ff ff72 	bl	bfae6 <_ZN6String10invalidateEv>
   bfc02:	e7fa      	b.n	bfbfa <_ZN6StringaSERKS_+0x14>

000bfc04 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bfc04:	b510      	push	{r4, lr}
	buffer = NULL;
   bfc06:	2300      	movs	r3, #0
String::String(const String &value)
   bfc08:	4604      	mov	r4, r0
	capacity = 0;
   bfc0a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bfc0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfc10:	7303      	strb	r3, [r0, #12]
	*this = value;
   bfc12:	f7ff ffe8 	bl	bfbe6 <_ZN6StringaSERKS_>
}
   bfc16:	4620      	mov	r0, r4
   bfc18:	bd10      	pop	{r4, pc}

000bfc1a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bfc1a:	4288      	cmp	r0, r1
{
   bfc1c:	b510      	push	{r4, lr}
   bfc1e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bfc20:	d001      	beq.n	bfc26 <_ZN6StringaSEOS_+0xc>
   bfc22:	f7ff ffb8 	bl	bfb96 <_ZN6String4moveERS_>
	return *this;
}
   bfc26:	4620      	mov	r0, r4
   bfc28:	bd10      	pop	{r4, pc}

000bfc2a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bfc2a:	b513      	push	{r0, r1, r4, lr}
   bfc2c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bfc2e:	b159      	cbz	r1, bfc48 <_ZN6StringaSEPKc+0x1e>
   bfc30:	4608      	mov	r0, r1
   bfc32:	9101      	str	r1, [sp, #4]
   bfc34:	f001 fc9f 	bl	c1576 <strlen>
   bfc38:	9901      	ldr	r1, [sp, #4]
   bfc3a:	4602      	mov	r2, r0
   bfc3c:	4620      	mov	r0, r4
   bfc3e:	f7ff ff7d 	bl	bfb3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfc42:	4620      	mov	r0, r4
   bfc44:	b002      	add	sp, #8
   bfc46:	bd10      	pop	{r4, pc}
	else invalidate();
   bfc48:	f7ff ff4d 	bl	bfae6 <_ZN6String10invalidateEv>
   bfc4c:	e7f9      	b.n	bfc42 <_ZN6StringaSEPKc+0x18>

000bfc4e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bfc4e:	b570      	push	{r4, r5, r6, lr}
   bfc50:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bfc52:	460e      	mov	r6, r1
   bfc54:	b909      	cbnz	r1, bfc5a <_ZN6String6concatEPKcj+0xc>
   bfc56:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bfc58:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bfc5a:	b16a      	cbz	r2, bfc78 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bfc5c:	6884      	ldr	r4, [r0, #8]
   bfc5e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bfc60:	4621      	mov	r1, r4
   bfc62:	f7ff ff57 	bl	bfb14 <_ZN6String7reserveEj>
   bfc66:	2800      	cmp	r0, #0
   bfc68:	d0f5      	beq.n	bfc56 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bfc6a:	6828      	ldr	r0, [r5, #0]
   bfc6c:	68ab      	ldr	r3, [r5, #8]
   bfc6e:	4631      	mov	r1, r6
   bfc70:	4418      	add	r0, r3
   bfc72:	f001 fc5a 	bl	c152a <strcpy>
	len = newlen;
   bfc76:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bfc78:	2001      	movs	r0, #1
   bfc7a:	e7ed      	b.n	bfc58 <_ZN6String6concatEPKcj+0xa>

000bfc7c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bfc7c:	b513      	push	{r0, r1, r4, lr}
   bfc7e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bfc80:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bfc82:	b151      	cbz	r1, bfc9a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bfc84:	9101      	str	r1, [sp, #4]
   bfc86:	f001 fc76 	bl	c1576 <strlen>
   bfc8a:	9901      	ldr	r1, [sp, #4]
   bfc8c:	4602      	mov	r2, r0
   bfc8e:	4620      	mov	r0, r4
}
   bfc90:	b002      	add	sp, #8
   bfc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bfc96:	f7ff bfda 	b.w	bfc4e <_ZN6String6concatEPKcj>
}
   bfc9a:	b002      	add	sp, #8
   bfc9c:	bd10      	pop	{r4, pc}

000bfc9e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bfc9e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bfca0:	2300      	movs	r3, #0
	buf[0] = c;
   bfca2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bfca6:	2201      	movs	r2, #1
   bfca8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bfcaa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bfcae:	f7ff ffce 	bl	bfc4e <_ZN6String6concatEPKcj>
}
   bfcb2:	b003      	add	sp, #12
   bfcb4:	f85d fb04 	ldr.w	pc, [sp], #4

000bfcb8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bfcb8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfcba:	688a      	ldr	r2, [r1, #8]
   bfcbc:	6809      	ldr	r1, [r1, #0]
{
   bfcbe:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfcc0:	f7ff ffc5 	bl	bfc4e <_ZN6String6concatEPKcj>
   bfcc4:	b910      	cbnz	r0, bfccc <_ZplRK15StringSumHelperRK6String+0x14>
   bfcc6:	4620      	mov	r0, r4
   bfcc8:	f7ff ff0d 	bl	bfae6 <_ZN6String10invalidateEv>
	return a;
}
   bfccc:	4620      	mov	r0, r4
   bfcce:	bd10      	pop	{r4, pc}

000bfcd0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bfcd0:	b513      	push	{r0, r1, r4, lr}
   bfcd2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfcd4:	b929      	cbnz	r1, bfce2 <_ZplRK15StringSumHelperPKc+0x12>
   bfcd6:	4620      	mov	r0, r4
   bfcd8:	f7ff ff05 	bl	bfae6 <_ZN6String10invalidateEv>
	return a;
}
   bfcdc:	4620      	mov	r0, r4
   bfcde:	b002      	add	sp, #8
   bfce0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfce2:	4608      	mov	r0, r1
   bfce4:	9101      	str	r1, [sp, #4]
   bfce6:	f001 fc46 	bl	c1576 <strlen>
   bfcea:	9901      	ldr	r1, [sp, #4]
   bfcec:	4602      	mov	r2, r0
   bfcee:	4620      	mov	r0, r4
   bfcf0:	f7ff ffad 	bl	bfc4e <_ZN6String6concatEPKcj>
   bfcf4:	2800      	cmp	r0, #0
   bfcf6:	d0ee      	beq.n	bfcd6 <_ZplRK15StringSumHelperPKc+0x6>
   bfcf8:	e7f0      	b.n	bfcdc <_ZplRK15StringSumHelperPKc+0xc>

000bfcfa <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bfcfa:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfcfc:	6882      	ldr	r2, [r0, #8]
   bfcfe:	b93a      	cbnz	r2, bfd10 <_ZNK6String6equalsEPKc+0x16>
   bfd00:	b121      	cbz	r1, bfd0c <_ZNK6String6equalsEPKc+0x12>
   bfd02:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bfd04:	fab0 f080 	clz	r0, r0
   bfd08:	0940      	lsrs	r0, r0, #5
   bfd0a:	e000      	b.n	bfd0e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfd0c:	2001      	movs	r0, #1
}
   bfd0e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bfd10:	6800      	ldr	r0, [r0, #0]
   bfd12:	b909      	cbnz	r1, bfd18 <_ZNK6String6equalsEPKc+0x1e>
   bfd14:	7800      	ldrb	r0, [r0, #0]
   bfd16:	e7f5      	b.n	bfd04 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bfd18:	f001 fbfd 	bl	c1516 <strcmp>
   bfd1c:	e7f2      	b.n	bfd04 <_ZNK6String6equalsEPKc+0xa>

000bfd1e <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bfd1e:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfd20:	6883      	ldr	r3, [r0, #8]
   bfd22:	688a      	ldr	r2, [r1, #8]
   bfd24:	4293      	cmp	r3, r2
   bfd26:	d30b      	bcc.n	bfd40 <_ZNK6String8endsWithERKS_+0x22>
   bfd28:	6800      	ldr	r0, [r0, #0]
   bfd2a:	b140      	cbz	r0, bfd3e <_ZNK6String8endsWithERKS_+0x20>
   bfd2c:	6809      	ldr	r1, [r1, #0]
   bfd2e:	b149      	cbz	r1, bfd44 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bfd30:	1a9b      	subs	r3, r3, r2
   bfd32:	4418      	add	r0, r3
   bfd34:	f001 fbef 	bl	c1516 <strcmp>
   bfd38:	fab0 f080 	clz	r0, r0
   bfd3c:	0940      	lsrs	r0, r0, #5
}
   bfd3e:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfd40:	2000      	movs	r0, #0
   bfd42:	e7fc      	b.n	bfd3e <_ZNK6String8endsWithERKS_+0x20>
   bfd44:	4608      	mov	r0, r1
   bfd46:	e7fa      	b.n	bfd3e <_ZNK6String8endsWithERKS_+0x20>

000bfd48 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bfd48:	6883      	ldr	r3, [r0, #8]
   bfd4a:	428b      	cmp	r3, r1
   bfd4c:	d901      	bls.n	bfd52 <_ZN6StringixEj+0xa>
   bfd4e:	6800      	ldr	r0, [r0, #0]
   bfd50:	b918      	cbnz	r0, bfd5a <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bfd52:	4803      	ldr	r0, [pc, #12]	; (bfd60 <_ZN6StringixEj+0x18>)
   bfd54:	2300      	movs	r3, #0
   bfd56:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bfd58:	4770      	bx	lr
	}
	return buffer[index];
   bfd5a:	4408      	add	r0, r1
}
   bfd5c:	4770      	bx	lr
   bfd5e:	bf00      	nop
   bfd60:	2003e694 	.word	0x2003e694

000bfd64 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bfd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bfd66:	429a      	cmp	r2, r3
{
   bfd68:	460f      	mov	r7, r1
   bfd6a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bfd6c:	490c      	ldr	r1, [pc, #48]	; (bfda0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bfd6e:	bf88      	it	hi
   bfd70:	4613      	movhi	r3, r2
{
   bfd72:	4614      	mov	r4, r2
   bfd74:	4606      	mov	r6, r0
	if (left > right) {
   bfd76:	bf84      	itt	hi
   bfd78:	462c      	movhi	r4, r5
   bfd7a:	461d      	movhi	r5, r3
	String out;
   bfd7c:	f7ff fef7 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bfd80:	68bb      	ldr	r3, [r7, #8]
   bfd82:	42a3      	cmp	r3, r4
   bfd84:	d30a      	bcc.n	bfd9c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bfd86:	6839      	ldr	r1, [r7, #0]
   bfd88:	42ab      	cmp	r3, r5
   bfd8a:	bf94      	ite	ls
   bfd8c:	ebc4 0203 	rsbls	r2, r4, r3
   bfd90:	ebc4 0205 	rsbhi	r2, r4, r5
   bfd94:	4421      	add	r1, r4
   bfd96:	4630      	mov	r0, r6
   bfd98:	f7ff fed0 	bl	bfb3c <_ZN6String4copyEPKcj>
	return out;
}
   bfd9c:	4630      	mov	r0, r6
   bfd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bfda0:	000c5654 	.word	0x000c5654

000bfda4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bfda4:	b40e      	push	{r1, r2, r3}
   bfda6:	b570      	push	{r4, r5, r6, lr}
   bfda8:	b087      	sub	sp, #28
   bfdaa:	ad0b      	add	r5, sp, #44	; 0x2c
   bfdac:	4604      	mov	r4, r0
   bfdae:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfdb2:	9201      	str	r2, [sp, #4]
   bfdb4:	462b      	mov	r3, r5
   bfdb6:	2105      	movs	r1, #5
   bfdb8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bfdba:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfdbc:	f7fd fb62 	bl	bd484 <vsnprintf>
    va_end(marker);

    String result;
   bfdc0:	490b      	ldr	r1, [pc, #44]	; (bfdf0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfdc2:	4606      	mov	r6, r0
    String result;
   bfdc4:	4620      	mov	r0, r4
   bfdc6:	f7ff fed2 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bfdca:	4631      	mov	r1, r6
   bfdcc:	4620      	mov	r0, r4
   bfdce:	f7ff fea1 	bl	bfb14 <_ZN6String7reserveEj>
    if (result.buffer) {
   bfdd2:	6820      	ldr	r0, [r4, #0]
   bfdd4:	b130      	cbz	r0, bfde4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfdd6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bfdd8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfdda:	462b      	mov	r3, r5
   bfddc:	1c71      	adds	r1, r6, #1
   bfdde:	f7fd fb51 	bl	bd484 <vsnprintf>
        va_end(marker);
        result.len = n;
   bfde2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bfde4:	4620      	mov	r0, r4
   bfde6:	b007      	add	sp, #28
   bfde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bfdec:	b003      	add	sp, #12
   bfdee:	4770      	bx	lr
   bfdf0:	000c5654 	.word	0x000c5654

000bfdf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bfdf4:	b510      	push	{r4, lr}
   bfdf6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bfdf8:	6800      	ldr	r0, [r0, #0]
   bfdfa:	b118      	cbz	r0, bfe04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bfdfc:	f7fd fb1a 	bl	bd434 <free>
            wakeupSource_ = nullptr;
   bfe00:	2300      	movs	r3, #0
   bfe02:	6023      	str	r3, [r4, #0]
        }
    }
   bfe04:	bd10      	pop	{r4, pc}

000bfe06 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bfe06:	b538      	push	{r3, r4, r5, lr}
   bfe08:	460c      	mov	r4, r1
   bfe0a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfe0c:	f7ff fff2 	bl	bfdf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bfe10:	b154      	cbz	r4, bfe28 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bfe12:	8820      	ldrh	r0, [r4, #0]
   bfe14:	f7fd fb06 	bl	bd424 <malloc>
   bfe18:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bfe1a:	b128      	cbz	r0, bfe28 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bfe1c:	8822      	ldrh	r2, [r4, #0]
   bfe1e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bfe20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bfe24:	f001 bab4 	b.w	c1390 <memcpy>
    }
   bfe28:	bd38      	pop	{r3, r4, r5, pc}

000bfe2a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfe2a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bfe2c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bfe30:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bfe32:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bfe36:	f8c0 3006 	str.w	r3, [r0, #6]
   bfe3a:	894b      	ldrh	r3, [r1, #10]
   bfe3c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfe3e:	460c      	mov	r4, r1
   bfe40:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfe42:	f7ff ffd7 	bl	bfdf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bfe46:	6823      	ldr	r3, [r4, #0]
   bfe48:	b113      	cbz	r3, bfe50 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bfe4a:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bfe4c:	2300      	movs	r3, #0
   bfe4e:	6023      	str	r3, [r4, #0]
    }
   bfe50:	bd38      	pop	{r3, r4, r5, pc}

000bfe52 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bfe52:	b507      	push	{r0, r1, r2, lr}
   bfe54:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfe56:	2100      	movs	r1, #0
{
   bfe58:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfe5a:	9100      	str	r1, [sp, #0]
   bfe5c:	2001      	movs	r0, #1
   bfe5e:	218c      	movs	r1, #140	; 0x8c
   bfe60:	f7fd fa1e 	bl	bd2a0 <system_reset>
}
   bfe64:	b003      	add	sp, #12
   bfe66:	f85d fb04 	ldr.w	pc, [sp], #4

000bfe6a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bfe6a:	4601      	mov	r1, r0
    reset(0, flags);
   bfe6c:	2000      	movs	r0, #0
   bfe6e:	f7ff bff0 	b.w	bfe52 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bfe72 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bfe72:	2000      	movs	r0, #0
   bfe74:	f7ff bff9 	b.w	bfe6a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bfe78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bfe78:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfe7a:	4d2b      	ldr	r5, [pc, #172]	; (bff28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bfe7c:	7d0b      	ldrb	r3, [r1, #20]
   bfe7e:	4604      	mov	r4, r0
   bfe80:	b08b      	sub	sp, #44	; 0x2c
   bfe82:	4608      	mov	r0, r1
   bfe84:	1daf      	adds	r7, r5, #6
   bfe86:	2b00      	cmp	r3, #0
   bfe88:	d036      	beq.n	bfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bfe8a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bfe8c:	791b      	ldrb	r3, [r3, #4]
   bfe8e:	2b00      	cmp	r3, #0
   bfe90:	d032      	beq.n	bfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bfe92:	4b26      	ldr	r3, [pc, #152]	; (bff2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bfe94:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bfe96:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bfe98:	a902      	add	r1, sp, #8
   bfe9a:	3004      	adds	r0, #4
   bfe9c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bfea0:	f7fd f9f4 	bl	bd28c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bfea4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bfea8:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bfeac:	b200      	sxth	r0, r0
   bfeae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bfeb2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bfeb6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bfeb8:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bfeba:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfebc:	4628      	mov	r0, r5
   bfebe:	f7ff ffa2 	bl	bfe06 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bfec2:	a802      	add	r0, sp, #8
   bfec4:	f7ff ff96 	bl	bfdf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bfec8:	2300      	movs	r3, #0
   bfeca:	6023      	str	r3, [r4, #0]
   bfecc:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bfece:	71a3      	strb	r3, [r4, #6]
   bfed0:	8123      	strh	r3, [r4, #8]
   bfed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bfed6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bfed8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bfedc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bfede:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bfee2:	f8c4 3006 	str.w	r3, [r4, #6]
   bfee6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfee8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bfeea:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bfeec:	4620      	mov	r0, r4
   bfeee:	f7ff ff8a 	bl	bfe06 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bfef2:	4620      	mov	r0, r4
   bfef4:	b00b      	add	sp, #44	; 0x2c
   bfef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bfef8:	2600      	movs	r6, #0
   bfefa:	2320      	movs	r3, #32
   bfefc:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bff00:	4b0b      	ldr	r3, [pc, #44]	; (bff30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bff02:	9300      	str	r3, [sp, #0]
   bff04:	aa02      	add	r2, sp, #8
   bff06:	4633      	mov	r3, r6
   bff08:	490a      	ldr	r1, [pc, #40]	; (bff34 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bff0a:	2032      	movs	r0, #50	; 0x32
   bff0c:	f7fd f91e 	bl	bd14c <log_message>
            : wakeupSource_(nullptr),
   bff10:	4b06      	ldr	r3, [pc, #24]	; (bff2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bff12:	4805      	ldr	r0, [pc, #20]	; (bff28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bff14:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bff16:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bff1a:	a902      	add	r1, sp, #8
   bff1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bff20:	f7ff ff83 	bl	bfe2a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bff24:	e7cd      	b.n	bfec2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bff26:	bf00      	nop
   bff28:	2003e698 	.word	0x2003e698
   bff2c:	ffff0000 	.word	0xffff0000
   bff30:	000c5733 	.word	0x000c5733
   bff34:	000c572c 	.word	0x000c572c

000bff38 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bff38:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bff3a:	2420      	movs	r4, #32
{
   bff3c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bff3e:	4622      	mov	r2, r4
   bff40:	2100      	movs	r1, #0
   bff42:	4668      	mov	r0, sp
   bff44:	f001 fa4c 	bl	c13e0 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bff48:	2100      	movs	r1, #0
   bff4a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bff4c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bff50:	f7fc fea4 	bl	bcc9c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bff54:	9801      	ldr	r0, [sp, #4]
   bff56:	b008      	add	sp, #32
   bff58:	bd10      	pop	{r4, pc}
	...

000bff5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bff5c:	4b05      	ldr	r3, [pc, #20]	; (bff74 <_GLOBAL__sub_I_System+0x18>)
   bff5e:	2202      	movs	r2, #2
   bff60:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bff62:	4b05      	ldr	r3, [pc, #20]	; (bff78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bff64:	4a05      	ldr	r2, [pc, #20]	; (bff7c <_GLOBAL__sub_I_System+0x20>)
   bff66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bff68:	2000      	movs	r0, #0
   bff6a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bff6e:	f7fd b92f 	b.w	bd1d0 <set_system_mode>
   bff72:	bf00      	nop
   bff74:	2003e6a4 	.word	0x2003e6a4
   bff78:	2003e698 	.word	0x2003e698
   bff7c:	ffff0000 	.word	0xffff0000

000bff80 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bff84:	4a15      	ldr	r2, [pc, #84]	; (bffdc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bff86:	f8df 8060 	ldr.w	r8, [pc, #96]	; bffe8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bff8a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bff8e:	1980      	adds	r0, r0, r6
   bff90:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bff94:	4b12      	ldr	r3, [pc, #72]	; (bffe0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bff96:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bff9a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bff9e:	1986      	adds	r6, r0, r6
   bffa0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bffa4:	42bb      	cmp	r3, r7
   bffa6:	bf08      	it	eq
   bffa8:	42b2      	cmpeq	r2, r6
{
   bffaa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bffac:	d013      	beq.n	bffd6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bffae:	a903      	add	r1, sp, #12
   bffb0:	4668      	mov	r0, sp
   bffb2:	e9cd 6700 	strd	r6, r7, [sp]
   bffb6:	f7fd fa9d 	bl	bd4f4 <localtime_r>
	calendar_time.tm_year += 1900;
   bffba:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bffbc:	4d09      	ldr	r5, [pc, #36]	; (bffe4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bffbe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bffc2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bffc4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bffc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bffc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bffca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bffcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bffce:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bffd2:	6823      	ldr	r3, [r4, #0]
   bffd4:	602b      	str	r3, [r5, #0]
    }
}
   bffd6:	b00c      	add	sp, #48	; 0x30
   bffd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bffdc:	2003e6e0 	.word	0x2003e6e0
   bffe0:	2003e6d8 	.word	0x2003e6d8
   bffe4:	2003e6b0 	.word	0x2003e6b0
   bffe8:	2003e6e8 	.word	0x2003e6e8

000bffec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bffec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bffee:	2000      	movs	r0, #0
   bfff0:	f7fd f998 	bl	bd324 <spark_sync_time_pending>
   bfff4:	b128      	cbz	r0, c0002 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfff6:	f7fd f975 	bl	bd2e4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfffa:	f080 0001 	eor.w	r0, r0, #1
   bfffe:	b2c0      	uxtb	r0, r0
    }
   c0000:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0002:	2001      	movs	r0, #1
   c0004:	e7fc      	b.n	c0000 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0008 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   c0008:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c000a:	f7ff ffb9 	bl	bff80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   c000e:	4b01      	ldr	r3, [pc, #4]	; (c0014 <_ZN9TimeClass4hourEx+0xc>)
   c0010:	6898      	ldr	r0, [r3, #8]
   c0012:	bd08      	pop	{r3, pc}
   c0014:	2003e6b0 	.word	0x2003e6b0

000c0018 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   c0018:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c001a:	f7ff ffb1 	bl	bff80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   c001e:	4b01      	ldr	r3, [pc, #4]	; (c0024 <_ZN9TimeClass3dayEx+0xc>)
   c0020:	68d8      	ldr	r0, [r3, #12]
   c0022:	bd08      	pop	{r3, pc}
   c0024:	2003e6b0 	.word	0x2003e6b0

000c0028 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   c0028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c002a:	4602      	mov	r2, r0
   c002c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c002e:	4668      	mov	r0, sp
    struct timeval tv = {
   c0030:	2100      	movs	r1, #0
    };
   c0032:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   c0036:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c003a:	f7fc fe77 	bl	bcd2c <hal_rtc_set_time>
   c003e:	4602      	mov	r2, r0
   c0040:	b910      	cbnz	r0, c0048 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   c0042:	4601      	mov	r1, r0
   c0044:	f7fd f8fc 	bl	bd240 <system_notify_time_changed>
    }
}
   c0048:	b005      	add	sp, #20
   c004a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0050 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   c0050:	b530      	push	{r4, r5, lr}
   c0052:	b093      	sub	sp, #76	; 0x4c
   c0054:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   c0058:	4b19      	ldr	r3, [pc, #100]	; (c00c0 <_ZN9TimeClass7timeStrEx+0x70>)
{
   c005a:	4604      	mov	r4, r0
    t += time_zone_cache;
   c005c:	e9d3 1000 	ldrd	r1, r0, [r3]
   c0060:	9b01      	ldr	r3, [sp, #4]
   c0062:	1852      	adds	r2, r2, r1
   c0064:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   c0068:	4816      	ldr	r0, [pc, #88]	; (c00c4 <_ZN9TimeClass7timeStrEx+0x74>)
   c006a:	e9d0 1000 	ldrd	r1, r0, [r0]
   c006e:	1852      	adds	r2, r2, r1
   c0070:	eb43 0300 	adc.w	r3, r3, r0
   c0074:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   c0078:	2224      	movs	r2, #36	; 0x24
   c007a:	eb0d 0002 	add.w	r0, sp, r2
   c007e:	2100      	movs	r1, #0
   c0080:	f001 f9ae 	bl	c13e0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   c0084:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   c0086:	a909      	add	r1, sp, #36	; 0x24
   c0088:	4668      	mov	r0, sp
   c008a:	f7fd fa33 	bl	bd4f4 <localtime_r>
    char ascstr[26] = {};
   c008e:	2216      	movs	r2, #22
   c0090:	4629      	mov	r1, r5
   c0092:	a803      	add	r0, sp, #12
   c0094:	9502      	str	r5, [sp, #8]
   c0096:	f001 f9a3 	bl	c13e0 <memset>
    asctime_r(&calendar_time, ascstr);
   c009a:	a902      	add	r1, sp, #8
   c009c:	a809      	add	r0, sp, #36	; 0x24
   c009e:	f001 f925 	bl	c12ec <asctime_r>
    int len = strlen(ascstr);
   c00a2:	a802      	add	r0, sp, #8
   c00a4:	f001 fa67 	bl	c1576 <strlen>
    ascstr[len-1] = 0; // remove final newline
   c00a8:	ab12      	add	r3, sp, #72	; 0x48
   c00aa:	4418      	add	r0, r3
    return String(ascstr);
   c00ac:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   c00ae:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   c00b2:	4620      	mov	r0, r4
   c00b4:	f7ff fd5b 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   c00b8:	4620      	mov	r0, r4
   c00ba:	b013      	add	sp, #76	; 0x4c
   c00bc:	bd30      	pop	{r4, r5, pc}
   c00be:	bf00      	nop
   c00c0:	2003e6e0 	.word	0x2003e6e0
   c00c4:	2003e6d8 	.word	0x2003e6d8

000c00c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   c00c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c00cc:	b0a4      	sub	sp, #144	; 0x90
   c00ce:	4607      	mov	r7, r0
   c00d0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c00d2:	a814      	add	r0, sp, #80	; 0x50
{
   c00d4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c00d6:	223f      	movs	r2, #63	; 0x3f
{
   c00d8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c00da:	f001 fa68 	bl	c15ae <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c00de:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c00e0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c00e2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c00e6:	f001 fa46 	bl	c1576 <strlen>
   c00ea:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   c00ec:	bb4c      	cbnz	r4, c0142 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   c00ee:	4929      	ldr	r1, [pc, #164]	; (c0194 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   c00f0:	a803      	add	r0, sp, #12
   c00f2:	f001 fa1a 	bl	c152a <strcpy>
   c00f6:	ac14      	add	r4, sp, #80	; 0x50
{
   c00f8:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   c00fa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   c00fe:	45b1      	cmp	r9, r6
   c0100:	d934      	bls.n	c016c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   c0102:	7823      	ldrb	r3, [r4, #0]
   c0104:	2b25      	cmp	r3, #37	; 0x25
   c0106:	f106 0a01 	add.w	sl, r6, #1
   c010a:	d117      	bne.n	c013c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   c010c:	7863      	ldrb	r3, [r4, #1]
   c010e:	2b7a      	cmp	r3, #122	; 0x7a
   c0110:	d114      	bne.n	c013c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   c0112:	a803      	add	r0, sp, #12
   c0114:	f001 fa2f 	bl	c1576 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c0118:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   c011a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c011c:	1830      	adds	r0, r6, r0
   c011e:	4418      	add	r0, r3
   c0120:	eba9 0206 	sub.w	r2, r9, r6
   c0124:	1ca1      	adds	r1, r4, #2
   c0126:	f001 f933 	bl	c1390 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   c012a:	462a      	mov	r2, r5
   c012c:	a903      	add	r1, sp, #12
   c012e:	4620      	mov	r0, r4
   c0130:	f001 f92e 	bl	c1390 <memcpy>
            len = strlen(format_str);
   c0134:	a814      	add	r0, sp, #80	; 0x50
   c0136:	f001 fa1e 	bl	c1576 <strlen>
   c013a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   c013c:	3401      	adds	r4, #1
   c013e:	4656      	mov	r6, sl
   c0140:	e7db      	b.n	c00fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   c0142:	233c      	movs	r3, #60	; 0x3c
   c0144:	fb94 f2f3 	sdiv	r2, r4, r3
   c0148:	2a00      	cmp	r2, #0
   c014a:	bfb8      	it	lt
   c014c:	4252      	neglt	r2, r2
   c014e:	fbb2 f1f3 	udiv	r1, r2, r3
   c0152:	fb03 2211 	mls	r2, r3, r1, r2
   c0156:	9200      	str	r2, [sp, #0]
   c0158:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   c015c:	4a0e      	ldr	r2, [pc, #56]	; (c0198 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   c015e:	fb94 f3f3 	sdiv	r3, r4, r3
   c0162:	2110      	movs	r1, #16
   c0164:	a803      	add	r0, sp, #12
   c0166:	f7fd f985 	bl	bd474 <snprintf>
   c016a:	e7c4      	b.n	c00f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   c016c:	2100      	movs	r1, #0
   c016e:	222e      	movs	r2, #46	; 0x2e
   c0170:	a808      	add	r0, sp, #32
   c0172:	9107      	str	r1, [sp, #28]
   c0174:	f001 f934 	bl	c13e0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   c0178:	4643      	mov	r3, r8
   c017a:	aa14      	add	r2, sp, #80	; 0x50
   c017c:	2132      	movs	r1, #50	; 0x32
   c017e:	a807      	add	r0, sp, #28
   c0180:	f7fd f9b0 	bl	bd4e4 <strftime>
    return String(buf);
   c0184:	a907      	add	r1, sp, #28
   c0186:	4638      	mov	r0, r7
   c0188:	f7ff fcf1 	bl	bfb6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   c018c:	4638      	mov	r0, r7
   c018e:	b024      	add	sp, #144	; 0x90
   c0190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0194:	000c4da7 	.word	0x000c4da7
   c0198:	000c4da9 	.word	0x000c4da9

000c019c <_ZN9TimeClass6formatExPKc>:
{
   c019c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c019e:	b08d      	sub	sp, #52	; 0x34
   c01a0:	e9cd 2300 	strd	r2, r3, [sp]
   c01a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   c01a6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   c01a8:	b915      	cbnz	r5, c01b0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   c01aa:	4b19      	ldr	r3, [pc, #100]	; (c0210 <_ZN9TimeClass6formatExPKc+0x74>)
   c01ac:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   c01ae:	b12d      	cbz	r5, c01bc <_ZN9TimeClass6formatExPKc+0x20>
   c01b0:	4b18      	ldr	r3, [pc, #96]	; (c0214 <_ZN9TimeClass6formatExPKc+0x78>)
   c01b2:	4628      	mov	r0, r5
   c01b4:	6819      	ldr	r1, [r3, #0]
   c01b6:	f001 f9ae 	bl	c1516 <strcmp>
   c01ba:	b938      	cbnz	r0, c01cc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   c01bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   c01c0:	4620      	mov	r0, r4
   c01c2:	f7ff ff45 	bl	c0050 <_ZN9TimeClass7timeStrEx>
}
   c01c6:	4620      	mov	r0, r4
   c01c8:	b00d      	add	sp, #52	; 0x34
   c01ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   c01cc:	4e12      	ldr	r6, [pc, #72]	; (c0218 <_ZN9TimeClass6formatExPKc+0x7c>)
   c01ce:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   c01d0:	4f12      	ldr	r7, [pc, #72]	; (c021c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   c01d2:	e9d6 3200 	ldrd	r3, r2, [r6]
   c01d6:	185b      	adds	r3, r3, r1
   c01d8:	9901      	ldr	r1, [sp, #4]
   c01da:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   c01de:	e9d7 0100 	ldrd	r0, r1, [r7]
   c01e2:	181b      	adds	r3, r3, r0
   c01e4:	eb42 0201 	adc.w	r2, r2, r1
   c01e8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   c01ec:	2100      	movs	r1, #0
   c01ee:	2224      	movs	r2, #36	; 0x24
   c01f0:	a803      	add	r0, sp, #12
   c01f2:	f001 f8f5 	bl	c13e0 <memset>
    localtime_r(&t, &calendar_time);
   c01f6:	a903      	add	r1, sp, #12
   c01f8:	4668      	mov	r0, sp
   c01fa:	f7fd f97b 	bl	bd4f4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   c01fe:	6832      	ldr	r2, [r6, #0]
   c0200:	683b      	ldr	r3, [r7, #0]
   c0202:	a903      	add	r1, sp, #12
   c0204:	4413      	add	r3, r2
   c0206:	4620      	mov	r0, r4
   c0208:	462a      	mov	r2, r5
   c020a:	f7ff ff5d 	bl	c00c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   c020e:	e7da      	b.n	c01c6 <_ZN9TimeClass6formatExPKc+0x2a>
   c0210:	2003e6ac 	.word	0x2003e6ac
   c0214:	2003d688 	.word	0x2003d688
   c0218:	2003e6e0 	.word	0x2003e6e0
   c021c:	2003e6d8 	.word	0x2003e6d8

000c0220 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   c0220:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0222:	2000      	movs	r0, #0
   c0224:	f7fc fd6a 	bl	bccfc <hal_rtc_time_is_valid>
    if (rtcstate)
   c0228:	4604      	mov	r4, r0
   c022a:	b9a0      	cbnz	r0, c0256 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c022c:	f7fc ffc8 	bl	bd1c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0230:	2801      	cmp	r0, #1
   c0232:	d110      	bne.n	c0256 <_ZN9TimeClass7isValidEv+0x36>
   c0234:	4620      	mov	r0, r4
   c0236:	f7fc fffb 	bl	bd230 <system_thread_get_state>
   c023a:	b960      	cbnz	r0, c0256 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c023c:	f7ff fed6 	bl	bffec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0240:	b910      	cbnz	r0, c0248 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0242:	f7fd f83f 	bl	bd2c4 <spark_process>
        while (_while() && !_condition()) {
   c0246:	e7f9      	b.n	c023c <_ZN9TimeClass7isValidEv+0x1c>
   c0248:	f7ff fed0 	bl	bffec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c024c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0250:	2000      	movs	r0, #0
   c0252:	f7fc bd53 	b.w	bccfc <hal_rtc_time_is_valid>
}
   c0256:	4620      	mov	r0, r4
   c0258:	bd10      	pop	{r4, pc}

000c025a <_ZN9TimeClass3nowEv>:
{
   c025a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c025c:	f7ff ffe0 	bl	c0220 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0260:	2210      	movs	r2, #16
   c0262:	2100      	movs	r1, #0
   c0264:	4668      	mov	r0, sp
   c0266:	f001 f8bb 	bl	c13e0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c026a:	2100      	movs	r1, #0
   c026c:	4668      	mov	r0, sp
   c026e:	f7fc fd55 	bl	bcd1c <hal_rtc_get_time>
}
   c0272:	9800      	ldr	r0, [sp, #0]
   c0274:	b005      	add	sp, #20
   c0276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c027c <_ZN9TimeClass4hourEv>:
{
   c027c:	b508      	push	{r3, lr}
	return hour(now());
   c027e:	f7ff ffec 	bl	c025a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0282:	17c1      	asrs	r1, r0, #31
   c0284:	f7ff fe7c 	bl	bff80 <_ZL22Refresh_UnixTime_Cachex>
}
   c0288:	4b01      	ldr	r3, [pc, #4]	; (c0290 <_ZN9TimeClass4hourEv+0x14>)
   c028a:	6898      	ldr	r0, [r3, #8]
   c028c:	bd08      	pop	{r3, pc}
   c028e:	bf00      	nop
   c0290:	2003e6b0 	.word	0x2003e6b0

000c0294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0294:	4b02      	ldr	r3, [pc, #8]	; (c02a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0296:	681a      	ldr	r2, [r3, #0]
   c0298:	4b02      	ldr	r3, [pc, #8]	; (c02a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c029a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c029c:	4770      	bx	lr
   c029e:	bf00      	nop
   c02a0:	2003d688 	.word	0x2003d688
   c02a4:	2003e6ac 	.word	0x2003e6ac

000c02a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c02a8:	4770      	bx	lr

000c02aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c02aa:	7441      	strb	r1, [r0, #17]
}
   c02ac:	4770      	bx	lr

000c02ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c02ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c02b0:	7c00      	ldrb	r0, [r0, #16]
   c02b2:	f7fc fee3 	bl	bd07c <hal_usart_available_data_for_write>
}
   c02b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c02ba:	bd08      	pop	{r3, pc}

000c02bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c02bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c02be:	7c00      	ldrb	r0, [r0, #16]
   c02c0:	f7fc feb4 	bl	bd02c <hal_usart_available>
}
   c02c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c02c8:	bd08      	pop	{r3, pc}

000c02ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c02ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c02cc:	7c00      	ldrb	r0, [r0, #16]
   c02ce:	f7fc febd 	bl	bd04c <hal_usart_peek>
}
   c02d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c02d6:	bd08      	pop	{r3, pc}

000c02d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c02d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c02da:	7c00      	ldrb	r0, [r0, #16]
   c02dc:	f7fc feae 	bl	bd03c <hal_usart_read>
}
   c02e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c02e4:	bd08      	pop	{r3, pc}

000c02e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c02e6:	7c00      	ldrb	r0, [r0, #16]
   c02e8:	f7fc beb8 	b.w	bd05c <hal_usart_flush>

000c02ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c02ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c02ee:	7c45      	ldrb	r5, [r0, #17]
{
   c02f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c02f2:	b12d      	cbz	r5, c0300 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c02f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c02f6:	b003      	add	sp, #12
   c02f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c02fc:	f7fc be8e 	b.w	bd01c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0300:	7c00      	ldrb	r0, [r0, #16]
   c0302:	9101      	str	r1, [sp, #4]
   c0304:	f7fc feba 	bl	bd07c <hal_usart_available_data_for_write>
   c0308:	2800      	cmp	r0, #0
   c030a:	9901      	ldr	r1, [sp, #4]
   c030c:	dcf2      	bgt.n	c02f4 <_ZN11USARTSerial5writeEh+0x8>
}
   c030e:	4628      	mov	r0, r5
   c0310:	b003      	add	sp, #12
   c0312:	bd30      	pop	{r4, r5, pc}

000c0314 <_ZN11USARTSerialD0Ev>:
   c0314:	b510      	push	{r4, lr}
   c0316:	2114      	movs	r1, #20
   c0318:	4604      	mov	r4, r0
   c031a:	f7f3 fec0 	bl	b409e <_ZdlPvj>
   c031e:	4620      	mov	r0, r4
   c0320:	bd10      	pop	{r4, pc}
	...

000c0324 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c0324:	b510      	push	{r4, lr}
   c0326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c032a:	4604      	mov	r4, r0
   c032c:	4608      	mov	r0, r1
   c032e:	4611      	mov	r1, r2
   c0330:	2200      	movs	r2, #0
   c0332:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c0336:	4b04      	ldr	r3, [pc, #16]	; (c0348 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c0338:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c033a:	2301      	movs	r3, #1
  _serial = serial;
   c033c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c033e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c0340:	f7fc feac 	bl	bd09c <hal_usart_init_ex>
}
   c0344:	4620      	mov	r0, r4
   c0346:	bd10      	pop	{r4, pc}
   c0348:	000c5780 	.word	0x000c5780

000c034c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c034c:	7c00      	ldrb	r0, [r0, #16]
   c034e:	2300      	movs	r3, #0
   c0350:	f7fc be9c 	b.w	bd08c <hal_usart_begin_config>

000c0354 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c0354:	2200      	movs	r2, #0
   c0356:	f7ff bff9 	b.w	c034c <_ZN11USARTSerial5beginEmm>

000c035a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c035a:	7c00      	ldrb	r0, [r0, #16]
   c035c:	f7fc be56 	b.w	bd00c <hal_usart_end>

000c0360 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0360:	7441      	strb	r1, [r0, #17]
}
   c0362:	4770      	bx	lr

000c0364 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0364:	4770      	bx	lr

000c0366 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c0366:	4770      	bx	lr

000c0368 <_ZN9USBSerial4readEv>:
{
   c0368:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c036a:	2100      	movs	r1, #0
   c036c:	7c00      	ldrb	r0, [r0, #16]
   c036e:	f7fc fec5 	bl	bd0fc <HAL_USB_USART_Receive_Data>
}
   c0372:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0376:	bd08      	pop	{r3, pc}

000c0378 <_ZN9USBSerial4peekEv>:
{
   c0378:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c037a:	2101      	movs	r1, #1
   c037c:	7c00      	ldrb	r0, [r0, #16]
   c037e:	f7fc febd 	bl	bd0fc <HAL_USB_USART_Receive_Data>
}
   c0382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0386:	bd08      	pop	{r3, pc}

000c0388 <_ZN9USBSerial17availableForWriteEv>:
{
   c0388:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c038a:	7c00      	ldrb	r0, [r0, #16]
   c038c:	f7fc feae 	bl	bd0ec <HAL_USB_USART_Available_Data_For_Write>
}
   c0390:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0394:	bd08      	pop	{r3, pc}

000c0396 <_ZN9USBSerial9availableEv>:
{
   c0396:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0398:	7c00      	ldrb	r0, [r0, #16]
   c039a:	f7fc fe9f 	bl	bd0dc <HAL_USB_USART_Available_Data>
}
   c039e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c03a2:	bd08      	pop	{r3, pc}

000c03a4 <_ZN9USBSerial5writeEh>:
{
   c03a4:	b513      	push	{r0, r1, r4, lr}
   c03a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c03a8:	7c00      	ldrb	r0, [r0, #16]
{
   c03aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c03ac:	f7fc fe9e 	bl	bd0ec <HAL_USB_USART_Available_Data_For_Write>
   c03b0:	2800      	cmp	r0, #0
   c03b2:	9901      	ldr	r1, [sp, #4]
   c03b4:	dc01      	bgt.n	c03ba <_ZN9USBSerial5writeEh+0x16>
   c03b6:	7c60      	ldrb	r0, [r4, #17]
   c03b8:	b120      	cbz	r0, c03c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c03ba:	7c20      	ldrb	r0, [r4, #16]
   c03bc:	f7fc fea6 	bl	bd10c <HAL_USB_USART_Send_Data>
   c03c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c03c4:	b002      	add	sp, #8
   c03c6:	bd10      	pop	{r4, pc}

000c03c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c03c8:	7c00      	ldrb	r0, [r0, #16]
   c03ca:	f7fc bea7 	b.w	bd11c <HAL_USB_USART_Flush_Data>

000c03ce <_ZN9USBSerialD0Ev>:
   c03ce:	b510      	push	{r4, lr}
   c03d0:	2114      	movs	r1, #20
   c03d2:	4604      	mov	r4, r0
   c03d4:	f7f3 fe63 	bl	b409e <_ZdlPvj>
   c03d8:	4620      	mov	r0, r4
   c03da:	bd10      	pop	{r4, pc}

000c03dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c03dc:	b510      	push	{r4, lr}
   c03de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c03e2:	4604      	mov	r4, r0
   c03e4:	4608      	mov	r0, r1
   c03e6:	2100      	movs	r1, #0
   c03e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c03ec:	4b04      	ldr	r3, [pc, #16]	; (c0400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c03ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c03f0:	2301      	movs	r3, #1
  _serial = serial;
   c03f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c03f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c03f6:	4611      	mov	r1, r2
   c03f8:	f7fc fe58 	bl	bd0ac <HAL_USB_USART_Init>
}
   c03fc:	4620      	mov	r0, r4
   c03fe:	bd10      	pop	{r4, pc}
   c0400:	000c57b0 	.word	0x000c57b0

000c0404 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c0404:	7c00      	ldrb	r0, [r0, #16]
   c0406:	2200      	movs	r2, #0
   c0408:	f7fc be58 	b.w	bd0bc <HAL_USB_USART_Begin>

000c040c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c040c:	7c00      	ldrb	r0, [r0, #16]
   c040e:	f7fc be5d 	b.w	bd0cc <HAL_USB_USART_End>

000c0412 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c0412:	7c00      	ldrb	r0, [r0, #16]
   c0414:	f7fc be8a 	b.w	bd12c <HAL_USB_USART_Is_Connected>

000c0418 <_Z19acquireSerialBufferv>:
{
   c0418:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c041a:	2214      	movs	r2, #20
{
   c041c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c041e:	2100      	movs	r1, #0
   c0420:	f000 ffde 	bl	c13e0 <memset>
}
   c0424:	4620      	mov	r0, r4
   c0426:	bd10      	pop	{r4, pc}

000c0428 <_Z16_fetch_usbserialv>:
{
   c0428:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c042a:	4c0f      	ldr	r4, [pc, #60]	; (c0468 <_Z16_fetch_usbserialv+0x40>)
{
   c042c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c042e:	a803      	add	r0, sp, #12
   c0430:	f7ff fff2 	bl	c0418 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0434:	7821      	ldrb	r1, [r4, #0]
   c0436:	f3bf 8f5b 	dmb	ish
   c043a:	f011 0101 	ands.w	r1, r1, #1
   c043e:	d10f      	bne.n	c0460 <_Z16_fetch_usbserialv+0x38>
   c0440:	4620      	mov	r0, r4
   c0442:	9101      	str	r1, [sp, #4]
   c0444:	f7f3 fe3a 	bl	b40bc <__cxa_guard_acquire>
   c0448:	9901      	ldr	r1, [sp, #4]
   c044a:	b148      	cbz	r0, c0460 <_Z16_fetch_usbserialv+0x38>
   c044c:	aa03      	add	r2, sp, #12
   c044e:	4807      	ldr	r0, [pc, #28]	; (c046c <_Z16_fetch_usbserialv+0x44>)
   c0450:	f7ff ffc4 	bl	c03dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c0454:	4620      	mov	r0, r4
   c0456:	f7f3 fe36 	bl	b40c6 <__cxa_guard_release>
   c045a:	4805      	ldr	r0, [pc, #20]	; (c0470 <_Z16_fetch_usbserialv+0x48>)
   c045c:	f000 ff6c 	bl	c1338 <atexit>
	return _usbserial;
}
   c0460:	4802      	ldr	r0, [pc, #8]	; (c046c <_Z16_fetch_usbserialv+0x44>)
   c0462:	b008      	add	sp, #32
   c0464:	bd10      	pop	{r4, pc}
   c0466:	bf00      	nop
   c0468:	2003e6f0 	.word	0x2003e6f0
   c046c:	2003e6f4 	.word	0x2003e6f4
   c0470:	000c0365 	.word	0x000c0365

000c0474 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0474:	4b01      	ldr	r3, [pc, #4]	; (c047c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c0476:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0478:	4770      	bx	lr
   c047a:	bf00      	nop
   c047c:	2003d68c 	.word	0x2003d68c

000c0480 <serialEventRun>:
{
   c0480:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0482:	4b0b      	ldr	r3, [pc, #44]	; (c04b0 <serialEventRun+0x30>)
   c0484:	b143      	cbz	r3, c0498 <serialEventRun+0x18>
   c0486:	f7ff ffcf 	bl	c0428 <_Z16_fetch_usbserialv>
   c048a:	6803      	ldr	r3, [r0, #0]
   c048c:	691b      	ldr	r3, [r3, #16]
   c048e:	4798      	blx	r3
   c0490:	2800      	cmp	r0, #0
   c0492:	dd01      	ble.n	c0498 <serialEventRun+0x18>
        serialEvent();
   c0494:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0498:	4b06      	ldr	r3, [pc, #24]	; (c04b4 <serialEventRun+0x34>)
   c049a:	b143      	cbz	r3, c04ae <serialEventRun+0x2e>
   c049c:	f000 f9ca 	bl	c0834 <_Z22__fetch_global_Serial1v>
   c04a0:	6803      	ldr	r3, [r0, #0]
   c04a2:	691b      	ldr	r3, [r3, #16]
   c04a4:	4798      	blx	r3
   c04a6:	2800      	cmp	r0, #0
   c04a8:	dd01      	ble.n	c04ae <serialEventRun+0x2e>
        serialEvent1();
   c04aa:	f3af 8000 	nop.w
}
   c04ae:	bd08      	pop	{r3, pc}
	...

000c04b8 <_post_loop>:
{
   c04b8:	b508      	push	{r3, lr}
	serialEventRun();
   c04ba:	f7ff ffe1 	bl	c0480 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c04be:	f7fc fc15 	bl	bccec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c04c2:	4b01      	ldr	r3, [pc, #4]	; (c04c8 <_post_loop+0x10>)
   c04c4:	6018      	str	r0, [r3, #0]
}
   c04c6:	bd08      	pop	{r3, pc}
   c04c8:	2003e710 	.word	0x2003e710

000c04cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c04cc:	4805      	ldr	r0, [pc, #20]	; (c04e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   c04ce:	4a06      	ldr	r2, [pc, #24]	; (c04e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c04d0:	4906      	ldr	r1, [pc, #24]	; (c04ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c04d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c04d4:	1a12      	subs	r2, r2, r0
   c04d6:	f000 ff5b 	bl	c1390 <memcpy>
    __backup_sram_signature = signature;
   c04da:	4b05      	ldr	r3, [pc, #20]	; (c04f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   c04dc:	4a05      	ldr	r2, [pc, #20]	; (c04f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   c04de:	601a      	str	r2, [r3, #0]
}
   c04e0:	bd08      	pop	{r3, pc}
   c04e2:	bf00      	nop
   c04e4:	2003f400 	.word	0x2003f400
   c04e8:	2003f404 	.word	0x2003f404
   c04ec:	000c5ca4 	.word	0x000c5ca4
   c04f0:	2003f400 	.word	0x2003f400
   c04f4:	9a271c1e 	.word	0x9a271c1e

000c04f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c04f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c04fa:	2300      	movs	r3, #0
   c04fc:	9300      	str	r3, [sp, #0]
   c04fe:	461a      	mov	r2, r3
   c0500:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0504:	f7fc feae 	bl	bd264 <system_ctrl_set_result>
}
   c0508:	b003      	add	sp, #12
   c050a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0510 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0510:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0512:	8843      	ldrh	r3, [r0, #2]
   c0514:	2b0a      	cmp	r3, #10
   c0516:	d008      	beq.n	c052a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0518:	2b50      	cmp	r3, #80	; 0x50
   c051a:	d10b      	bne.n	c0534 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c051c:	4b09      	ldr	r3, [pc, #36]	; (c0544 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c051e:	681b      	ldr	r3, [r3, #0]
   c0520:	b14b      	cbz	r3, c0536 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0522:	b003      	add	sp, #12
   c0524:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0528:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c052a:	f7ff ffe5 	bl	c04f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c052e:	b003      	add	sp, #12
   c0530:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0534:	2300      	movs	r3, #0
   c0536:	9300      	str	r3, [sp, #0]
   c0538:	461a      	mov	r2, r3
   c053a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c053e:	f7fc fe91 	bl	bd264 <system_ctrl_set_result>
}
   c0542:	e7f4      	b.n	c052e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0544:	2003e70c 	.word	0x2003e70c

000c0548 <module_user_init_hook>:
{
   c0548:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c054a:	4812      	ldr	r0, [pc, #72]	; (c0594 <module_user_init_hook+0x4c>)
   c054c:	2100      	movs	r1, #0
   c054e:	f7fc ffc1 	bl	bd4d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0552:	4b11      	ldr	r3, [pc, #68]	; (c0598 <module_user_init_hook+0x50>)
   c0554:	681a      	ldr	r2, [r3, #0]
   c0556:	4b11      	ldr	r3, [pc, #68]	; (c059c <module_user_init_hook+0x54>)
   c0558:	429a      	cmp	r2, r3
   c055a:	4b11      	ldr	r3, [pc, #68]	; (c05a0 <module_user_init_hook+0x58>)
   c055c:	bf0c      	ite	eq
   c055e:	2201      	moveq	r2, #1
   c0560:	2200      	movne	r2, #0
   c0562:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0564:	d001      	beq.n	c056a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c0566:	f7ff ffb1 	bl	c04cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c056a:	f7fc fba7 	bl	bccbc <HAL_RNG_GetRandomNumber>
   c056e:	4604      	mov	r4, r0
    srand(seed);
   c0570:	f000 ff4e 	bl	c1410 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c0574:	4b0b      	ldr	r3, [pc, #44]	; (c05a4 <module_user_init_hook+0x5c>)
   c0576:	b113      	cbz	r3, c057e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c0578:	4620      	mov	r0, r4
   c057a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c057e:	2100      	movs	r1, #0
   c0580:	4808      	ldr	r0, [pc, #32]	; (c05a4 <module_user_init_hook+0x5c>)
   c0582:	f7fc fedf 	bl	bd344 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c0586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c058a:	4807      	ldr	r0, [pc, #28]	; (c05a8 <module_user_init_hook+0x60>)
   c058c:	2100      	movs	r1, #0
   c058e:	f7fc be5f 	b.w	bd250 <system_ctrl_set_app_request_handler>
   c0592:	bf00      	nop
   c0594:	000c0475 	.word	0x000c0475
   c0598:	2003f400 	.word	0x2003f400
   c059c:	9a271c1e 	.word	0x9a271c1e
   c05a0:	2003e708 	.word	0x2003e708
   c05a4:	00000000 	.word	0x00000000
   c05a8:	000c0511 	.word	0x000c0511

000c05ac <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c05ac:	b508      	push	{r3, lr}
   c05ae:	4b02      	ldr	r3, [pc, #8]	; (c05b8 <spark_protocol_instance+0xc>)
   c05b0:	681b      	ldr	r3, [r3, #0]
   c05b2:	681b      	ldr	r3, [r3, #0]
   c05b4:	9301      	str	r3, [sp, #4]
   c05b6:	bd08      	pop	{r3, pc}
   c05b8:	0003025c 	.word	0x0003025c

000c05bc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c05bc:	b508      	push	{r3, lr}
   c05be:	4b02      	ldr	r3, [pc, #8]	; (c05c8 <spark_protocol_set_product_id+0xc>)
   c05c0:	681b      	ldr	r3, [r3, #0]
   c05c2:	685b      	ldr	r3, [r3, #4]
   c05c4:	9301      	str	r3, [sp, #4]
   c05c6:	bd08      	pop	{r3, pc}
   c05c8:	0003025c 	.word	0x0003025c

000c05cc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c05cc:	b508      	push	{r3, lr}
   c05ce:	4b02      	ldr	r3, [pc, #8]	; (c05d8 <spark_protocol_set_product_firmware_version+0xc>)
   c05d0:	681b      	ldr	r3, [r3, #0]
   c05d2:	689b      	ldr	r3, [r3, #8]
   c05d4:	9301      	str	r3, [sp, #4]
   c05d6:	bd08      	pop	{r3, pc}
   c05d8:	0003025c 	.word	0x0003025c

000c05dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c05dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c05de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c05e0:	d902      	bls.n	c05e8 <pinAvailable+0xc>
    return false;
   c05e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c05e4:	b002      	add	sp, #8
   c05e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c05e8:	f1a0 030b 	sub.w	r3, r0, #11
   c05ec:	2b02      	cmp	r3, #2
   c05ee:	d81a      	bhi.n	c0626 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c05f0:	4c17      	ldr	r4, [pc, #92]	; (c0650 <pinAvailable+0x74>)
   c05f2:	7821      	ldrb	r1, [r4, #0]
   c05f4:	f3bf 8f5b 	dmb	ish
   c05f8:	f011 0101 	ands.w	r1, r1, #1
   c05fc:	d10b      	bne.n	c0616 <pinAvailable+0x3a>
   c05fe:	4620      	mov	r0, r4
   c0600:	9101      	str	r1, [sp, #4]
   c0602:	f7f3 fd5b 	bl	b40bc <__cxa_guard_acquire>
   c0606:	9901      	ldr	r1, [sp, #4]
   c0608:	b128      	cbz	r0, c0616 <pinAvailable+0x3a>
   c060a:	4812      	ldr	r0, [pc, #72]	; (c0654 <pinAvailable+0x78>)
   c060c:	f7ff f9a4 	bl	bf958 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c0610:	4620      	mov	r0, r4
   c0612:	f7f3 fd58 	bl	b40c6 <__cxa_guard_release>
   c0616:	4b0f      	ldr	r3, [pc, #60]	; (c0654 <pinAvailable+0x78>)
   c0618:	7818      	ldrb	r0, [r3, #0]
   c061a:	f7fc fc6f 	bl	bcefc <hal_spi_is_enabled>
   c061e:	2800      	cmp	r0, #0
   c0620:	d1df      	bne.n	c05e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   c0622:	2001      	movs	r0, #1
   c0624:	e7de      	b.n	c05e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c0626:	2801      	cmp	r0, #1
   c0628:	d809      	bhi.n	c063e <pinAvailable+0x62>
   c062a:	f000 f89f 	bl	c076c <_Z19__fetch_global_Wirev>
   c062e:	2100      	movs	r1, #0
   c0630:	7c00      	ldrb	r0, [r0, #16]
   c0632:	f7fc fc03 	bl	bce3c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c0636:	f080 0001 	eor.w	r0, r0, #1
   c063a:	b2c0      	uxtb	r0, r0
   c063c:	e7d2      	b.n	c05e4 <pinAvailable+0x8>
   c063e:	3809      	subs	r0, #9
   c0640:	2801      	cmp	r0, #1
   c0642:	d8ee      	bhi.n	c0622 <pinAvailable+0x46>
   c0644:	f000 f8f6 	bl	c0834 <_Z22__fetch_global_Serial1v>
   c0648:	7c00      	ldrb	r0, [r0, #16]
   c064a:	f7fc fd0f 	bl	bd06c <hal_usart_is_enabled>
   c064e:	e7f2      	b.n	c0636 <pinAvailable+0x5a>
   c0650:	2003e4d8 	.word	0x2003e4d8
   c0654:	2003e4dc 	.word	0x2003e4dc

000c0658 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0658:	2823      	cmp	r0, #35	; 0x23
{
   c065a:	b538      	push	{r3, r4, r5, lr}
   c065c:	4604      	mov	r4, r0
   c065e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0660:	d80a      	bhi.n	c0678 <pinMode+0x20>
   c0662:	29ff      	cmp	r1, #255	; 0xff
   c0664:	d008      	beq.n	c0678 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c0666:	f7ff ffb9 	bl	c05dc <pinAvailable>
   c066a:	b128      	cbz	r0, c0678 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c066c:	4629      	mov	r1, r5
   c066e:	4620      	mov	r0, r4
}
   c0670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c0674:	f7fc bb6a 	b.w	bcd4c <HAL_Pin_Mode>
}
   c0678:	bd38      	pop	{r3, r4, r5, pc}

000c067a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c067a:	b538      	push	{r3, r4, r5, lr}
   c067c:	4604      	mov	r4, r0
   c067e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0680:	f7fc fb6c 	bl	bcd5c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c0684:	28ff      	cmp	r0, #255	; 0xff
   c0686:	d010      	beq.n	c06aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c0688:	2806      	cmp	r0, #6
   c068a:	d804      	bhi.n	c0696 <digitalWrite+0x1c>
   c068c:	234d      	movs	r3, #77	; 0x4d
   c068e:	fa23 f000 	lsr.w	r0, r3, r0
   c0692:	07c3      	lsls	r3, r0, #31
   c0694:	d409      	bmi.n	c06aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c0696:	4620      	mov	r0, r4
   c0698:	f7ff ffa0 	bl	c05dc <pinAvailable>
   c069c:	b128      	cbz	r0, c06aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c069e:	4629      	mov	r1, r5
   c06a0:	4620      	mov	r0, r4
}
   c06a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c06a6:	f7fc bb61 	b.w	bcd6c <HAL_GPIO_Write>
}
   c06aa:	bd38      	pop	{r3, r4, r5, pc}

000c06ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c06ac:	b510      	push	{r4, lr}
   c06ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c06b0:	f7fc fb54 	bl	bcd5c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c06b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c06b6:	b2db      	uxtb	r3, r3
   c06b8:	2b01      	cmp	r3, #1
   c06ba:	d908      	bls.n	c06ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c06bc:	4620      	mov	r0, r4
   c06be:	f7ff ff8d 	bl	c05dc <pinAvailable>
   c06c2:	b120      	cbz	r0, c06ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c06c4:	4620      	mov	r0, r4
}
   c06c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c06ca:	f7fc bb57 	b.w	bcd7c <HAL_GPIO_Read>
}
   c06ce:	2000      	movs	r0, #0
   c06d0:	bd10      	pop	{r4, pc}

000c06d2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c06d2:	280d      	cmp	r0, #13
{
   c06d4:	b510      	push	{r4, lr}
   c06d6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c06d8:	bf9c      	itt	ls
   c06da:	340e      	addls	r4, #14
   c06dc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c06de:	4620      	mov	r0, r4
   c06e0:	f7ff ff7c 	bl	c05dc <pinAvailable>
   c06e4:	b150      	cbz	r0, c06fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c06e6:	2103      	movs	r1, #3
   c06e8:	4620      	mov	r0, r4
   c06ea:	f7fc fb27 	bl	bcd3c <HAL_Validate_Pin_Function>
   c06ee:	2803      	cmp	r0, #3
   c06f0:	d104      	bne.n	c06fc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c06f2:	4620      	mov	r0, r4
}
   c06f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c06f8:	f7fc bb58 	b.w	bcdac <hal_adc_read>
}
   c06fc:	2000      	movs	r0, #0
   c06fe:	bd10      	pop	{r4, pc}

000c0700 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0700:	4770      	bx	lr

000c0702 <__tcf_1>:
   c0702:	4770      	bx	lr

000c0704 <_Z17acquireWireBufferv>:
{
   c0704:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0706:	4b0a      	ldr	r3, [pc, #40]	; (c0730 <_Z17acquireWireBufferv+0x2c>)
   c0708:	6003      	str	r3, [r0, #0]
   c070a:	2301      	movs	r3, #1
{
   c070c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c070e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0710:	4908      	ldr	r1, [pc, #32]	; (c0734 <_Z17acquireWireBufferv+0x30>)
   c0712:	2020      	movs	r0, #32
   c0714:	f000 f8b4 	bl	c0880 <_ZnajRKSt9nothrow_t>
	};
   c0718:	2520      	movs	r5, #32
   c071a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c071c:	4905      	ldr	r1, [pc, #20]	; (c0734 <_Z17acquireWireBufferv+0x30>)
	};
   c071e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0720:	4628      	mov	r0, r5
   c0722:	f000 f8ad 	bl	c0880 <_ZnajRKSt9nothrow_t>
	};
   c0726:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c072a:	4620      	mov	r0, r4
   c072c:	bd38      	pop	{r3, r4, r5, pc}
   c072e:	bf00      	nop
   c0730:	00010018 	.word	0x00010018
   c0734:	000c57d8 	.word	0x000c57d8

000c0738 <_Z18acquireWire1Bufferv>:
{
   c0738:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c073a:	4b0a      	ldr	r3, [pc, #40]	; (c0764 <_Z18acquireWire1Bufferv+0x2c>)
   c073c:	6003      	str	r3, [r0, #0]
   c073e:	2301      	movs	r3, #1
{
   c0740:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c0742:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0744:	4908      	ldr	r1, [pc, #32]	; (c0768 <_Z18acquireWire1Bufferv+0x30>)
   c0746:	2020      	movs	r0, #32
   c0748:	f000 f89a 	bl	c0880 <_ZnajRKSt9nothrow_t>
	};
   c074c:	2520      	movs	r5, #32
   c074e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0750:	4905      	ldr	r1, [pc, #20]	; (c0768 <_Z18acquireWire1Bufferv+0x30>)
	};
   c0752:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0754:	4628      	mov	r0, r5
   c0756:	f000 f893 	bl	c0880 <_ZnajRKSt9nothrow_t>
	};
   c075a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c075e:	4620      	mov	r0, r4
   c0760:	bd38      	pop	{r3, r4, r5, pc}
   c0762:	bf00      	nop
   c0764:	00010018 	.word	0x00010018
   c0768:	000c57d8 	.word	0x000c57d8

000c076c <_Z19__fetch_global_Wirev>:
{
   c076c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c076e:	4d0e      	ldr	r5, [pc, #56]	; (c07a8 <_Z19__fetch_global_Wirev+0x3c>)
   c0770:	7829      	ldrb	r1, [r5, #0]
   c0772:	f3bf 8f5b 	dmb	ish
   c0776:	f011 0401 	ands.w	r4, r1, #1
{
   c077a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c077c:	d111      	bne.n	c07a2 <_Z19__fetch_global_Wirev+0x36>
   c077e:	4628      	mov	r0, r5
   c0780:	f7f3 fc9c 	bl	b40bc <__cxa_guard_acquire>
   c0784:	b168      	cbz	r0, c07a2 <_Z19__fetch_global_Wirev+0x36>
   c0786:	4668      	mov	r0, sp
   c0788:	f7ff ffbc 	bl	c0704 <_Z17acquireWireBufferv>
   c078c:	466a      	mov	r2, sp
   c078e:	4621      	mov	r1, r4
   c0790:	4806      	ldr	r0, [pc, #24]	; (c07ac <_Z19__fetch_global_Wirev+0x40>)
   c0792:	f7fd fbc3 	bl	bdf1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0796:	4628      	mov	r0, r5
   c0798:	f7f3 fc95 	bl	b40c6 <__cxa_guard_release>
   c079c:	4804      	ldr	r0, [pc, #16]	; (c07b0 <_Z19__fetch_global_Wirev+0x44>)
   c079e:	f000 fdcb 	bl	c1338 <atexit>
	return wire;
}
   c07a2:	4802      	ldr	r0, [pc, #8]	; (c07ac <_Z19__fetch_global_Wirev+0x40>)
   c07a4:	b007      	add	sp, #28
   c07a6:	bd30      	pop	{r4, r5, pc}
   c07a8:	2003e714 	.word	0x2003e714
   c07ac:	2003e71c 	.word	0x2003e71c
   c07b0:	000c0701 	.word	0x000c0701

000c07b4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c07b4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c07b6:	4c0e      	ldr	r4, [pc, #56]	; (c07f0 <_Z20__fetch_global_Wire1v+0x3c>)
   c07b8:	7823      	ldrb	r3, [r4, #0]
   c07ba:	f3bf 8f5b 	dmb	ish
   c07be:	07db      	lsls	r3, r3, #31
{
   c07c0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c07c2:	d411      	bmi.n	c07e8 <_Z20__fetch_global_Wire1v+0x34>
   c07c4:	4620      	mov	r0, r4
   c07c6:	f7f3 fc79 	bl	b40bc <__cxa_guard_acquire>
   c07ca:	b168      	cbz	r0, c07e8 <_Z20__fetch_global_Wire1v+0x34>
   c07cc:	4668      	mov	r0, sp
   c07ce:	f7ff ffb3 	bl	c0738 <_Z18acquireWire1Bufferv>
   c07d2:	466a      	mov	r2, sp
   c07d4:	2101      	movs	r1, #1
   c07d6:	4807      	ldr	r0, [pc, #28]	; (c07f4 <_Z20__fetch_global_Wire1v+0x40>)
   c07d8:	f7fd fba0 	bl	bdf1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c07dc:	4620      	mov	r0, r4
   c07de:	f7f3 fc72 	bl	b40c6 <__cxa_guard_release>
   c07e2:	4805      	ldr	r0, [pc, #20]	; (c07f8 <_Z20__fetch_global_Wire1v+0x44>)
   c07e4:	f000 fda8 	bl	c1338 <atexit>
	return wire;
}
   c07e8:	4802      	ldr	r0, [pc, #8]	; (c07f4 <_Z20__fetch_global_Wire1v+0x40>)
   c07ea:	b006      	add	sp, #24
   c07ec:	bd10      	pop	{r4, pc}
   c07ee:	bf00      	nop
   c07f0:	2003e718 	.word	0x2003e718
   c07f4:	2003e730 	.word	0x2003e730
   c07f8:	000c0703 	.word	0x000c0703

000c07fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c07fc:	4770      	bx	lr
	...

000c0800 <_Z20acquireSerial1Bufferv>:
{
   c0800:	b538      	push	{r3, r4, r5, lr}
   c0802:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c0804:	2514      	movs	r5, #20
   c0806:	462a      	mov	r2, r5
   c0808:	2100      	movs	r1, #0
   c080a:	f000 fde9 	bl	c13e0 <memset>
   c080e:	8025      	strh	r5, [r4, #0]
   c0810:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0812:	4907      	ldr	r1, [pc, #28]	; (c0830 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c0814:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0816:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c0818:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c081a:	f000 f831 	bl	c0880 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c081e:	4904      	ldr	r1, [pc, #16]	; (c0830 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c0820:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0822:	4628      	mov	r0, r5
   c0824:	f000 f82c 	bl	c0880 <_ZnajRKSt9nothrow_t>
    };
   c0828:	60e0      	str	r0, [r4, #12]
}
   c082a:	4620      	mov	r0, r4
   c082c:	bd38      	pop	{r3, r4, r5, pc}
   c082e:	bf00      	nop
   c0830:	000c57d8 	.word	0x000c57d8

000c0834 <_Z22__fetch_global_Serial1v>:
{
   c0834:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0836:	4d0e      	ldr	r5, [pc, #56]	; (c0870 <_Z22__fetch_global_Serial1v+0x3c>)
   c0838:	7829      	ldrb	r1, [r5, #0]
   c083a:	f3bf 8f5b 	dmb	ish
   c083e:	f011 0401 	ands.w	r4, r1, #1
{
   c0842:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0844:	d111      	bne.n	c086a <_Z22__fetch_global_Serial1v+0x36>
   c0846:	4628      	mov	r0, r5
   c0848:	f7f3 fc38 	bl	b40bc <__cxa_guard_acquire>
   c084c:	b168      	cbz	r0, c086a <_Z22__fetch_global_Serial1v+0x36>
   c084e:	a801      	add	r0, sp, #4
   c0850:	f7ff ffd6 	bl	c0800 <_Z20acquireSerial1Bufferv>
   c0854:	aa01      	add	r2, sp, #4
   c0856:	4621      	mov	r1, r4
   c0858:	4806      	ldr	r0, [pc, #24]	; (c0874 <_Z22__fetch_global_Serial1v+0x40>)
   c085a:	f7ff fd63 	bl	c0324 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c085e:	4628      	mov	r0, r5
   c0860:	f7f3 fc31 	bl	b40c6 <__cxa_guard_release>
   c0864:	4804      	ldr	r0, [pc, #16]	; (c0878 <_Z22__fetch_global_Serial1v+0x44>)
   c0866:	f000 fd67 	bl	c1338 <atexit>
    return serial1;
}
   c086a:	4802      	ldr	r0, [pc, #8]	; (c0874 <_Z22__fetch_global_Serial1v+0x40>)
   c086c:	b007      	add	sp, #28
   c086e:	bd30      	pop	{r4, r5, pc}
   c0870:	2003e744 	.word	0x2003e744
   c0874:	2003e748 	.word	0x2003e748
   c0878:	000c07fd 	.word	0x000c07fd

000c087c <_ZnwjRKSt9nothrow_t>:
   c087c:	f7f3 bc0b 	b.w	b4096 <_Znwj>

000c0880 <_ZnajRKSt9nothrow_t>:
   c0880:	f7f3 bc0b 	b.w	b409a <_Znaj>

000c0884 <_ZSt17__throw_bad_allocv>:
   c0884:	b508      	push	{r3, lr}
   c0886:	f7fc fe05 	bl	bd494 <abort>

000c088a <_ZSt20__throw_length_errorPKc>:
   c088a:	b508      	push	{r3, lr}
   c088c:	f7fc fe02 	bl	bd494 <abort>

000c0890 <_ZSt25__throw_bad_function_callv>:
   c0890:	b508      	push	{r3, lr}
   c0892:	f7fc fdff 	bl	bd494 <abort>
	...

000c0898 <nan>:
   c0898:	ed9f 0b01 	vldr	d0, [pc, #4]	; c08a0 <nan+0x8>
   c089c:	4770      	bx	lr
   c089e:	bf00      	nop
   c08a0:	00000000 	.word	0x00000000
   c08a4:	7ff80000 	.word	0x7ff80000

000c08a8 <__aeabi_drsub>:
   c08a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c08ac:	e002      	b.n	c08b4 <__adddf3>
   c08ae:	bf00      	nop

000c08b0 <__aeabi_dsub>:
   c08b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c08b4 <__adddf3>:
   c08b4:	b530      	push	{r4, r5, lr}
   c08b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c08ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c08be:	ea94 0f05 	teq	r4, r5
   c08c2:	bf08      	it	eq
   c08c4:	ea90 0f02 	teqeq	r0, r2
   c08c8:	bf1f      	itttt	ne
   c08ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   c08ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   c08d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c08d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c08da:	f000 80e2 	beq.w	c0aa2 <__adddf3+0x1ee>
   c08de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c08e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c08e6:	bfb8      	it	lt
   c08e8:	426d      	neglt	r5, r5
   c08ea:	dd0c      	ble.n	c0906 <__adddf3+0x52>
   c08ec:	442c      	add	r4, r5
   c08ee:	ea80 0202 	eor.w	r2, r0, r2
   c08f2:	ea81 0303 	eor.w	r3, r1, r3
   c08f6:	ea82 0000 	eor.w	r0, r2, r0
   c08fa:	ea83 0101 	eor.w	r1, r3, r1
   c08fe:	ea80 0202 	eor.w	r2, r0, r2
   c0902:	ea81 0303 	eor.w	r3, r1, r3
   c0906:	2d36      	cmp	r5, #54	; 0x36
   c0908:	bf88      	it	hi
   c090a:	bd30      	pophi	{r4, r5, pc}
   c090c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0910:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0914:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0918:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c091c:	d002      	beq.n	c0924 <__adddf3+0x70>
   c091e:	4240      	negs	r0, r0
   c0920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0924:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c0928:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c092c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c0930:	d002      	beq.n	c0938 <__adddf3+0x84>
   c0932:	4252      	negs	r2, r2
   c0934:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c0938:	ea94 0f05 	teq	r4, r5
   c093c:	f000 80a7 	beq.w	c0a8e <__adddf3+0x1da>
   c0940:	f1a4 0401 	sub.w	r4, r4, #1
   c0944:	f1d5 0e20 	rsbs	lr, r5, #32
   c0948:	db0d      	blt.n	c0966 <__adddf3+0xb2>
   c094a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c094e:	fa22 f205 	lsr.w	r2, r2, r5
   c0952:	1880      	adds	r0, r0, r2
   c0954:	f141 0100 	adc.w	r1, r1, #0
   c0958:	fa03 f20e 	lsl.w	r2, r3, lr
   c095c:	1880      	adds	r0, r0, r2
   c095e:	fa43 f305 	asr.w	r3, r3, r5
   c0962:	4159      	adcs	r1, r3
   c0964:	e00e      	b.n	c0984 <__adddf3+0xd0>
   c0966:	f1a5 0520 	sub.w	r5, r5, #32
   c096a:	f10e 0e20 	add.w	lr, lr, #32
   c096e:	2a01      	cmp	r2, #1
   c0970:	fa03 fc0e 	lsl.w	ip, r3, lr
   c0974:	bf28      	it	cs
   c0976:	f04c 0c02 	orrcs.w	ip, ip, #2
   c097a:	fa43 f305 	asr.w	r3, r3, r5
   c097e:	18c0      	adds	r0, r0, r3
   c0980:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c0984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0988:	d507      	bpl.n	c099a <__adddf3+0xe6>
   c098a:	f04f 0e00 	mov.w	lr, #0
   c098e:	f1dc 0c00 	rsbs	ip, ip, #0
   c0992:	eb7e 0000 	sbcs.w	r0, lr, r0
   c0996:	eb6e 0101 	sbc.w	r1, lr, r1
   c099a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c099e:	d31b      	bcc.n	c09d8 <__adddf3+0x124>
   c09a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c09a4:	d30c      	bcc.n	c09c0 <__adddf3+0x10c>
   c09a6:	0849      	lsrs	r1, r1, #1
   c09a8:	ea5f 0030 	movs.w	r0, r0, rrx
   c09ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c09b0:	f104 0401 	add.w	r4, r4, #1
   c09b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c09b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c09bc:	f080 809a 	bcs.w	c0af4 <__adddf3+0x240>
   c09c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c09c4:	bf08      	it	eq
   c09c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c09ca:	f150 0000 	adcs.w	r0, r0, #0
   c09ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c09d2:	ea41 0105 	orr.w	r1, r1, r5
   c09d6:	bd30      	pop	{r4, r5, pc}
   c09d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c09dc:	4140      	adcs	r0, r0
   c09de:	eb41 0101 	adc.w	r1, r1, r1
   c09e2:	3c01      	subs	r4, #1
   c09e4:	bf28      	it	cs
   c09e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c09ea:	d2e9      	bcs.n	c09c0 <__adddf3+0x10c>
   c09ec:	f091 0f00 	teq	r1, #0
   c09f0:	bf04      	itt	eq
   c09f2:	4601      	moveq	r1, r0
   c09f4:	2000      	moveq	r0, #0
   c09f6:	fab1 f381 	clz	r3, r1
   c09fa:	bf08      	it	eq
   c09fc:	3320      	addeq	r3, #32
   c09fe:	f1a3 030b 	sub.w	r3, r3, #11
   c0a02:	f1b3 0220 	subs.w	r2, r3, #32
   c0a06:	da0c      	bge.n	c0a22 <__adddf3+0x16e>
   c0a08:	320c      	adds	r2, #12
   c0a0a:	dd08      	ble.n	c0a1e <__adddf3+0x16a>
   c0a0c:	f102 0c14 	add.w	ip, r2, #20
   c0a10:	f1c2 020c 	rsb	r2, r2, #12
   c0a14:	fa01 f00c 	lsl.w	r0, r1, ip
   c0a18:	fa21 f102 	lsr.w	r1, r1, r2
   c0a1c:	e00c      	b.n	c0a38 <__adddf3+0x184>
   c0a1e:	f102 0214 	add.w	r2, r2, #20
   c0a22:	bfd8      	it	le
   c0a24:	f1c2 0c20 	rsble	ip, r2, #32
   c0a28:	fa01 f102 	lsl.w	r1, r1, r2
   c0a2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c0a30:	bfdc      	itt	le
   c0a32:	ea41 010c 	orrle.w	r1, r1, ip
   c0a36:	4090      	lslle	r0, r2
   c0a38:	1ae4      	subs	r4, r4, r3
   c0a3a:	bfa2      	ittt	ge
   c0a3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c0a40:	4329      	orrge	r1, r5
   c0a42:	bd30      	popge	{r4, r5, pc}
   c0a44:	ea6f 0404 	mvn.w	r4, r4
   c0a48:	3c1f      	subs	r4, #31
   c0a4a:	da1c      	bge.n	c0a86 <__adddf3+0x1d2>
   c0a4c:	340c      	adds	r4, #12
   c0a4e:	dc0e      	bgt.n	c0a6e <__adddf3+0x1ba>
   c0a50:	f104 0414 	add.w	r4, r4, #20
   c0a54:	f1c4 0220 	rsb	r2, r4, #32
   c0a58:	fa20 f004 	lsr.w	r0, r0, r4
   c0a5c:	fa01 f302 	lsl.w	r3, r1, r2
   c0a60:	ea40 0003 	orr.w	r0, r0, r3
   c0a64:	fa21 f304 	lsr.w	r3, r1, r4
   c0a68:	ea45 0103 	orr.w	r1, r5, r3
   c0a6c:	bd30      	pop	{r4, r5, pc}
   c0a6e:	f1c4 040c 	rsb	r4, r4, #12
   c0a72:	f1c4 0220 	rsb	r2, r4, #32
   c0a76:	fa20 f002 	lsr.w	r0, r0, r2
   c0a7a:	fa01 f304 	lsl.w	r3, r1, r4
   c0a7e:	ea40 0003 	orr.w	r0, r0, r3
   c0a82:	4629      	mov	r1, r5
   c0a84:	bd30      	pop	{r4, r5, pc}
   c0a86:	fa21 f004 	lsr.w	r0, r1, r4
   c0a8a:	4629      	mov	r1, r5
   c0a8c:	bd30      	pop	{r4, r5, pc}
   c0a8e:	f094 0f00 	teq	r4, #0
   c0a92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c0a96:	bf06      	itte	eq
   c0a98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c0a9c:	3401      	addeq	r4, #1
   c0a9e:	3d01      	subne	r5, #1
   c0aa0:	e74e      	b.n	c0940 <__adddf3+0x8c>
   c0aa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0aa6:	bf18      	it	ne
   c0aa8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c0aac:	d029      	beq.n	c0b02 <__adddf3+0x24e>
   c0aae:	ea94 0f05 	teq	r4, r5
   c0ab2:	bf08      	it	eq
   c0ab4:	ea90 0f02 	teqeq	r0, r2
   c0ab8:	d005      	beq.n	c0ac6 <__adddf3+0x212>
   c0aba:	ea54 0c00 	orrs.w	ip, r4, r0
   c0abe:	bf04      	itt	eq
   c0ac0:	4619      	moveq	r1, r3
   c0ac2:	4610      	moveq	r0, r2
   c0ac4:	bd30      	pop	{r4, r5, pc}
   c0ac6:	ea91 0f03 	teq	r1, r3
   c0aca:	bf1e      	ittt	ne
   c0acc:	2100      	movne	r1, #0
   c0ace:	2000      	movne	r0, #0
   c0ad0:	bd30      	popne	{r4, r5, pc}
   c0ad2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c0ad6:	d105      	bne.n	c0ae4 <__adddf3+0x230>
   c0ad8:	0040      	lsls	r0, r0, #1
   c0ada:	4149      	adcs	r1, r1
   c0adc:	bf28      	it	cs
   c0ade:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c0ae2:	bd30      	pop	{r4, r5, pc}
   c0ae4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c0ae8:	bf3c      	itt	cc
   c0aea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c0aee:	bd30      	popcc	{r4, r5, pc}
   c0af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0af4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c0af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0afc:	f04f 0000 	mov.w	r0, #0
   c0b00:	bd30      	pop	{r4, r5, pc}
   c0b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0b06:	bf1a      	itte	ne
   c0b08:	4619      	movne	r1, r3
   c0b0a:	4610      	movne	r0, r2
   c0b0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0b10:	bf1c      	itt	ne
   c0b12:	460b      	movne	r3, r1
   c0b14:	4602      	movne	r2, r0
   c0b16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0b1a:	bf06      	itte	eq
   c0b1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0b20:	ea91 0f03 	teqeq	r1, r3
   c0b24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c0b28:	bd30      	pop	{r4, r5, pc}
   c0b2a:	bf00      	nop

000c0b2c <__aeabi_ui2d>:
   c0b2c:	f090 0f00 	teq	r0, #0
   c0b30:	bf04      	itt	eq
   c0b32:	2100      	moveq	r1, #0
   c0b34:	4770      	bxeq	lr
   c0b36:	b530      	push	{r4, r5, lr}
   c0b38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0b3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0b40:	f04f 0500 	mov.w	r5, #0
   c0b44:	f04f 0100 	mov.w	r1, #0
   c0b48:	e750      	b.n	c09ec <__adddf3+0x138>
   c0b4a:	bf00      	nop

000c0b4c <__aeabi_i2d>:
   c0b4c:	f090 0f00 	teq	r0, #0
   c0b50:	bf04      	itt	eq
   c0b52:	2100      	moveq	r1, #0
   c0b54:	4770      	bxeq	lr
   c0b56:	b530      	push	{r4, r5, lr}
   c0b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0b60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c0b64:	bf48      	it	mi
   c0b66:	4240      	negmi	r0, r0
   c0b68:	f04f 0100 	mov.w	r1, #0
   c0b6c:	e73e      	b.n	c09ec <__adddf3+0x138>
   c0b6e:	bf00      	nop

000c0b70 <__aeabi_f2d>:
   c0b70:	0042      	lsls	r2, r0, #1
   c0b72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c0b76:	ea4f 0131 	mov.w	r1, r1, rrx
   c0b7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c0b7e:	bf1f      	itttt	ne
   c0b80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c0b84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c0b88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c0b8c:	4770      	bxne	lr
   c0b8e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c0b92:	bf08      	it	eq
   c0b94:	4770      	bxeq	lr
   c0b96:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c0b9a:	bf04      	itt	eq
   c0b9c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c0ba0:	4770      	bxeq	lr
   c0ba2:	b530      	push	{r4, r5, lr}
   c0ba4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c0ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0bb0:	e71c      	b.n	c09ec <__adddf3+0x138>
   c0bb2:	bf00      	nop

000c0bb4 <__aeabi_ul2d>:
   c0bb4:	ea50 0201 	orrs.w	r2, r0, r1
   c0bb8:	bf08      	it	eq
   c0bba:	4770      	bxeq	lr
   c0bbc:	b530      	push	{r4, r5, lr}
   c0bbe:	f04f 0500 	mov.w	r5, #0
   c0bc2:	e00a      	b.n	c0bda <__aeabi_l2d+0x16>

000c0bc4 <__aeabi_l2d>:
   c0bc4:	ea50 0201 	orrs.w	r2, r0, r1
   c0bc8:	bf08      	it	eq
   c0bca:	4770      	bxeq	lr
   c0bcc:	b530      	push	{r4, r5, lr}
   c0bce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c0bd2:	d502      	bpl.n	c0bda <__aeabi_l2d+0x16>
   c0bd4:	4240      	negs	r0, r0
   c0bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0bda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0bde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0be2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c0be6:	f43f aed8 	beq.w	c099a <__adddf3+0xe6>
   c0bea:	f04f 0203 	mov.w	r2, #3
   c0bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0bf2:	bf18      	it	ne
   c0bf4:	3203      	addne	r2, #3
   c0bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0bfa:	bf18      	it	ne
   c0bfc:	3203      	addne	r2, #3
   c0bfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0c02:	f1c2 0320 	rsb	r3, r2, #32
   c0c06:	fa00 fc03 	lsl.w	ip, r0, r3
   c0c0a:	fa20 f002 	lsr.w	r0, r0, r2
   c0c0e:	fa01 fe03 	lsl.w	lr, r1, r3
   c0c12:	ea40 000e 	orr.w	r0, r0, lr
   c0c16:	fa21 f102 	lsr.w	r1, r1, r2
   c0c1a:	4414      	add	r4, r2
   c0c1c:	e6bd      	b.n	c099a <__adddf3+0xe6>
   c0c1e:	bf00      	nop

000c0c20 <__aeabi_dmul>:
   c0c20:	b570      	push	{r4, r5, r6, lr}
   c0c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0c2e:	bf1d      	ittte	ne
   c0c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0c34:	ea94 0f0c 	teqne	r4, ip
   c0c38:	ea95 0f0c 	teqne	r5, ip
   c0c3c:	f000 f8de 	bleq	c0dfc <__aeabi_dmul+0x1dc>
   c0c40:	442c      	add	r4, r5
   c0c42:	ea81 0603 	eor.w	r6, r1, r3
   c0c46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c0c4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c0c4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0c52:	bf18      	it	ne
   c0c54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0c60:	d038      	beq.n	c0cd4 <__aeabi_dmul+0xb4>
   c0c62:	fba0 ce02 	umull	ip, lr, r0, r2
   c0c66:	f04f 0500 	mov.w	r5, #0
   c0c6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c0c6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c0c72:	fbe0 e503 	umlal	lr, r5, r0, r3
   c0c76:	f04f 0600 	mov.w	r6, #0
   c0c7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c0c7e:	f09c 0f00 	teq	ip, #0
   c0c82:	bf18      	it	ne
   c0c84:	f04e 0e01 	orrne.w	lr, lr, #1
   c0c88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c0c8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c0c90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c0c94:	d204      	bcs.n	c0ca0 <__aeabi_dmul+0x80>
   c0c96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c0c9a:	416d      	adcs	r5, r5
   c0c9c:	eb46 0606 	adc.w	r6, r6, r6
   c0ca0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c0ca4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c0ca8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c0cac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c0cb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c0cb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0cb8:	bf88      	it	hi
   c0cba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0cbe:	d81e      	bhi.n	c0cfe <__aeabi_dmul+0xde>
   c0cc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0cc4:	bf08      	it	eq
   c0cc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c0cca:	f150 0000 	adcs.w	r0, r0, #0
   c0cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0cd2:	bd70      	pop	{r4, r5, r6, pc}
   c0cd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0cd8:	ea46 0101 	orr.w	r1, r6, r1
   c0cdc:	ea40 0002 	orr.w	r0, r0, r2
   c0ce0:	ea81 0103 	eor.w	r1, r1, r3
   c0ce4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0ce8:	bfc2      	ittt	gt
   c0cea:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0cee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0cf2:	bd70      	popgt	{r4, r5, r6, pc}
   c0cf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0cf8:	f04f 0e00 	mov.w	lr, #0
   c0cfc:	3c01      	subs	r4, #1
   c0cfe:	f300 80ab 	bgt.w	c0e58 <__aeabi_dmul+0x238>
   c0d02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0d06:	bfde      	ittt	le
   c0d08:	2000      	movle	r0, #0
   c0d0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c0d0e:	bd70      	pople	{r4, r5, r6, pc}
   c0d10:	f1c4 0400 	rsb	r4, r4, #0
   c0d14:	3c20      	subs	r4, #32
   c0d16:	da35      	bge.n	c0d84 <__aeabi_dmul+0x164>
   c0d18:	340c      	adds	r4, #12
   c0d1a:	dc1b      	bgt.n	c0d54 <__aeabi_dmul+0x134>
   c0d1c:	f104 0414 	add.w	r4, r4, #20
   c0d20:	f1c4 0520 	rsb	r5, r4, #32
   c0d24:	fa00 f305 	lsl.w	r3, r0, r5
   c0d28:	fa20 f004 	lsr.w	r0, r0, r4
   c0d2c:	fa01 f205 	lsl.w	r2, r1, r5
   c0d30:	ea40 0002 	orr.w	r0, r0, r2
   c0d34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0d40:	fa21 f604 	lsr.w	r6, r1, r4
   c0d44:	eb42 0106 	adc.w	r1, r2, r6
   c0d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0d4c:	bf08      	it	eq
   c0d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0d52:	bd70      	pop	{r4, r5, r6, pc}
   c0d54:	f1c4 040c 	rsb	r4, r4, #12
   c0d58:	f1c4 0520 	rsb	r5, r4, #32
   c0d5c:	fa00 f304 	lsl.w	r3, r0, r4
   c0d60:	fa20 f005 	lsr.w	r0, r0, r5
   c0d64:	fa01 f204 	lsl.w	r2, r1, r4
   c0d68:	ea40 0002 	orr.w	r0, r0, r2
   c0d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0d70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0d74:	f141 0100 	adc.w	r1, r1, #0
   c0d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0d7c:	bf08      	it	eq
   c0d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0d82:	bd70      	pop	{r4, r5, r6, pc}
   c0d84:	f1c4 0520 	rsb	r5, r4, #32
   c0d88:	fa00 f205 	lsl.w	r2, r0, r5
   c0d8c:	ea4e 0e02 	orr.w	lr, lr, r2
   c0d90:	fa20 f304 	lsr.w	r3, r0, r4
   c0d94:	fa01 f205 	lsl.w	r2, r1, r5
   c0d98:	ea43 0302 	orr.w	r3, r3, r2
   c0d9c:	fa21 f004 	lsr.w	r0, r1, r4
   c0da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0da4:	fa21 f204 	lsr.w	r2, r1, r4
   c0da8:	ea20 0002 	bic.w	r0, r0, r2
   c0dac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c0db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0db4:	bf08      	it	eq
   c0db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0dba:	bd70      	pop	{r4, r5, r6, pc}
   c0dbc:	f094 0f00 	teq	r4, #0
   c0dc0:	d10f      	bne.n	c0de2 <__aeabi_dmul+0x1c2>
   c0dc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0dc6:	0040      	lsls	r0, r0, #1
   c0dc8:	eb41 0101 	adc.w	r1, r1, r1
   c0dcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0dd0:	bf08      	it	eq
   c0dd2:	3c01      	subeq	r4, #1
   c0dd4:	d0f7      	beq.n	c0dc6 <__aeabi_dmul+0x1a6>
   c0dd6:	ea41 0106 	orr.w	r1, r1, r6
   c0dda:	f095 0f00 	teq	r5, #0
   c0dde:	bf18      	it	ne
   c0de0:	4770      	bxne	lr
   c0de2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c0de6:	0052      	lsls	r2, r2, #1
   c0de8:	eb43 0303 	adc.w	r3, r3, r3
   c0dec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c0df0:	bf08      	it	eq
   c0df2:	3d01      	subeq	r5, #1
   c0df4:	d0f7      	beq.n	c0de6 <__aeabi_dmul+0x1c6>
   c0df6:	ea43 0306 	orr.w	r3, r3, r6
   c0dfa:	4770      	bx	lr
   c0dfc:	ea94 0f0c 	teq	r4, ip
   c0e00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0e04:	bf18      	it	ne
   c0e06:	ea95 0f0c 	teqne	r5, ip
   c0e0a:	d00c      	beq.n	c0e26 <__aeabi_dmul+0x206>
   c0e0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0e10:	bf18      	it	ne
   c0e12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0e16:	d1d1      	bne.n	c0dbc <__aeabi_dmul+0x19c>
   c0e18:	ea81 0103 	eor.w	r1, r1, r3
   c0e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0e20:	f04f 0000 	mov.w	r0, #0
   c0e24:	bd70      	pop	{r4, r5, r6, pc}
   c0e26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0e2a:	bf06      	itte	eq
   c0e2c:	4610      	moveq	r0, r2
   c0e2e:	4619      	moveq	r1, r3
   c0e30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0e34:	d019      	beq.n	c0e6a <__aeabi_dmul+0x24a>
   c0e36:	ea94 0f0c 	teq	r4, ip
   c0e3a:	d102      	bne.n	c0e42 <__aeabi_dmul+0x222>
   c0e3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0e40:	d113      	bne.n	c0e6a <__aeabi_dmul+0x24a>
   c0e42:	ea95 0f0c 	teq	r5, ip
   c0e46:	d105      	bne.n	c0e54 <__aeabi_dmul+0x234>
   c0e48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c0e4c:	bf1c      	itt	ne
   c0e4e:	4610      	movne	r0, r2
   c0e50:	4619      	movne	r1, r3
   c0e52:	d10a      	bne.n	c0e6a <__aeabi_dmul+0x24a>
   c0e54:	ea81 0103 	eor.w	r1, r1, r3
   c0e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0e5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0e64:	f04f 0000 	mov.w	r0, #0
   c0e68:	bd70      	pop	{r4, r5, r6, pc}
   c0e6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0e6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0e72:	bd70      	pop	{r4, r5, r6, pc}

000c0e74 <__aeabi_ddiv>:
   c0e74:	b570      	push	{r4, r5, r6, lr}
   c0e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0e82:	bf1d      	ittte	ne
   c0e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0e88:	ea94 0f0c 	teqne	r4, ip
   c0e8c:	ea95 0f0c 	teqne	r5, ip
   c0e90:	f000 f8a7 	bleq	c0fe2 <__aeabi_ddiv+0x16e>
   c0e94:	eba4 0405 	sub.w	r4, r4, r5
   c0e98:	ea81 0e03 	eor.w	lr, r1, r3
   c0e9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0ea4:	f000 8088 	beq.w	c0fb8 <__aeabi_ddiv+0x144>
   c0ea8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0eac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c0eb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c0eb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c0eb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c0ebc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c0ec0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c0ec4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c0ec8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c0ecc:	429d      	cmp	r5, r3
   c0ece:	bf08      	it	eq
   c0ed0:	4296      	cmpeq	r6, r2
   c0ed2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c0ed6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c0eda:	d202      	bcs.n	c0ee2 <__aeabi_ddiv+0x6e>
   c0edc:	085b      	lsrs	r3, r3, #1
   c0ede:	ea4f 0232 	mov.w	r2, r2, rrx
   c0ee2:	1ab6      	subs	r6, r6, r2
   c0ee4:	eb65 0503 	sbc.w	r5, r5, r3
   c0ee8:	085b      	lsrs	r3, r3, #1
   c0eea:	ea4f 0232 	mov.w	r2, r2, rrx
   c0eee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c0ef2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c0ef6:	ebb6 0e02 	subs.w	lr, r6, r2
   c0efa:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0efe:	bf22      	ittt	cs
   c0f00:	1ab6      	subcs	r6, r6, r2
   c0f02:	4675      	movcs	r5, lr
   c0f04:	ea40 000c 	orrcs.w	r0, r0, ip
   c0f08:	085b      	lsrs	r3, r3, #1
   c0f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0f0e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0f12:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0f16:	bf22      	ittt	cs
   c0f18:	1ab6      	subcs	r6, r6, r2
   c0f1a:	4675      	movcs	r5, lr
   c0f1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0f20:	085b      	lsrs	r3, r3, #1
   c0f22:	ea4f 0232 	mov.w	r2, r2, rrx
   c0f26:	ebb6 0e02 	subs.w	lr, r6, r2
   c0f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0f2e:	bf22      	ittt	cs
   c0f30:	1ab6      	subcs	r6, r6, r2
   c0f32:	4675      	movcs	r5, lr
   c0f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0f38:	085b      	lsrs	r3, r3, #1
   c0f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0f3e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0f42:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0f46:	bf22      	ittt	cs
   c0f48:	1ab6      	subcs	r6, r6, r2
   c0f4a:	4675      	movcs	r5, lr
   c0f4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0f50:	ea55 0e06 	orrs.w	lr, r5, r6
   c0f54:	d018      	beq.n	c0f88 <__aeabi_ddiv+0x114>
   c0f56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c0f5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0f5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0f62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c0f66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c0f6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0f6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0f72:	d1c0      	bne.n	c0ef6 <__aeabi_ddiv+0x82>
   c0f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0f78:	d10b      	bne.n	c0f92 <__aeabi_ddiv+0x11e>
   c0f7a:	ea41 0100 	orr.w	r1, r1, r0
   c0f7e:	f04f 0000 	mov.w	r0, #0
   c0f82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c0f86:	e7b6      	b.n	c0ef6 <__aeabi_ddiv+0x82>
   c0f88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0f8c:	bf04      	itt	eq
   c0f8e:	4301      	orreq	r1, r0
   c0f90:	2000      	moveq	r0, #0
   c0f92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0f96:	bf88      	it	hi
   c0f98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0f9c:	f63f aeaf 	bhi.w	c0cfe <__aeabi_dmul+0xde>
   c0fa0:	ebb5 0c03 	subs.w	ip, r5, r3
   c0fa4:	bf04      	itt	eq
   c0fa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c0faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0fae:	f150 0000 	adcs.w	r0, r0, #0
   c0fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0fb6:	bd70      	pop	{r4, r5, r6, pc}
   c0fb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c0fbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0fc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0fc4:	bfc2      	ittt	gt
   c0fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0fce:	bd70      	popgt	{r4, r5, r6, pc}
   c0fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0fd4:	f04f 0e00 	mov.w	lr, #0
   c0fd8:	3c01      	subs	r4, #1
   c0fda:	e690      	b.n	c0cfe <__aeabi_dmul+0xde>
   c0fdc:	ea45 0e06 	orr.w	lr, r5, r6
   c0fe0:	e68d      	b.n	c0cfe <__aeabi_dmul+0xde>
   c0fe2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0fe6:	ea94 0f0c 	teq	r4, ip
   c0fea:	bf08      	it	eq
   c0fec:	ea95 0f0c 	teqeq	r5, ip
   c0ff0:	f43f af3b 	beq.w	c0e6a <__aeabi_dmul+0x24a>
   c0ff4:	ea94 0f0c 	teq	r4, ip
   c0ff8:	d10a      	bne.n	c1010 <__aeabi_ddiv+0x19c>
   c0ffa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0ffe:	f47f af34 	bne.w	c0e6a <__aeabi_dmul+0x24a>
   c1002:	ea95 0f0c 	teq	r5, ip
   c1006:	f47f af25 	bne.w	c0e54 <__aeabi_dmul+0x234>
   c100a:	4610      	mov	r0, r2
   c100c:	4619      	mov	r1, r3
   c100e:	e72c      	b.n	c0e6a <__aeabi_dmul+0x24a>
   c1010:	ea95 0f0c 	teq	r5, ip
   c1014:	d106      	bne.n	c1024 <__aeabi_ddiv+0x1b0>
   c1016:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c101a:	f43f aefd 	beq.w	c0e18 <__aeabi_dmul+0x1f8>
   c101e:	4610      	mov	r0, r2
   c1020:	4619      	mov	r1, r3
   c1022:	e722      	b.n	c0e6a <__aeabi_dmul+0x24a>
   c1024:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1028:	bf18      	it	ne
   c102a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c102e:	f47f aec5 	bne.w	c0dbc <__aeabi_dmul+0x19c>
   c1032:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c1036:	f47f af0d 	bne.w	c0e54 <__aeabi_dmul+0x234>
   c103a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c103e:	f47f aeeb 	bne.w	c0e18 <__aeabi_dmul+0x1f8>
   c1042:	e712      	b.n	c0e6a <__aeabi_dmul+0x24a>

000c1044 <__gedf2>:
   c1044:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c1048:	e006      	b.n	c1058 <__cmpdf2+0x4>
   c104a:	bf00      	nop

000c104c <__ledf2>:
   c104c:	f04f 0c01 	mov.w	ip, #1
   c1050:	e002      	b.n	c1058 <__cmpdf2+0x4>
   c1052:	bf00      	nop

000c1054 <__cmpdf2>:
   c1054:	f04f 0c01 	mov.w	ip, #1
   c1058:	f84d cd04 	str.w	ip, [sp, #-4]!
   c105c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1068:	bf18      	it	ne
   c106a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c106e:	d01b      	beq.n	c10a8 <__cmpdf2+0x54>
   c1070:	b001      	add	sp, #4
   c1072:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c1076:	bf0c      	ite	eq
   c1078:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c107c:	ea91 0f03 	teqne	r1, r3
   c1080:	bf02      	ittt	eq
   c1082:	ea90 0f02 	teqeq	r0, r2
   c1086:	2000      	moveq	r0, #0
   c1088:	4770      	bxeq	lr
   c108a:	f110 0f00 	cmn.w	r0, #0
   c108e:	ea91 0f03 	teq	r1, r3
   c1092:	bf58      	it	pl
   c1094:	4299      	cmppl	r1, r3
   c1096:	bf08      	it	eq
   c1098:	4290      	cmpeq	r0, r2
   c109a:	bf2c      	ite	cs
   c109c:	17d8      	asrcs	r0, r3, #31
   c109e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c10a2:	f040 0001 	orr.w	r0, r0, #1
   c10a6:	4770      	bx	lr
   c10a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c10ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c10b0:	d102      	bne.n	c10b8 <__cmpdf2+0x64>
   c10b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c10b6:	d107      	bne.n	c10c8 <__cmpdf2+0x74>
   c10b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c10bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c10c0:	d1d6      	bne.n	c1070 <__cmpdf2+0x1c>
   c10c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c10c6:	d0d3      	beq.n	c1070 <__cmpdf2+0x1c>
   c10c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c10cc:	4770      	bx	lr
   c10ce:	bf00      	nop

000c10d0 <__aeabi_cdrcmple>:
   c10d0:	4684      	mov	ip, r0
   c10d2:	4610      	mov	r0, r2
   c10d4:	4662      	mov	r2, ip
   c10d6:	468c      	mov	ip, r1
   c10d8:	4619      	mov	r1, r3
   c10da:	4663      	mov	r3, ip
   c10dc:	e000      	b.n	c10e0 <__aeabi_cdcmpeq>
   c10de:	bf00      	nop

000c10e0 <__aeabi_cdcmpeq>:
   c10e0:	b501      	push	{r0, lr}
   c10e2:	f7ff ffb7 	bl	c1054 <__cmpdf2>
   c10e6:	2800      	cmp	r0, #0
   c10e8:	bf48      	it	mi
   c10ea:	f110 0f00 	cmnmi.w	r0, #0
   c10ee:	bd01      	pop	{r0, pc}

000c10f0 <__aeabi_dcmpeq>:
   c10f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c10f4:	f7ff fff4 	bl	c10e0 <__aeabi_cdcmpeq>
   c10f8:	bf0c      	ite	eq
   c10fa:	2001      	moveq	r0, #1
   c10fc:	2000      	movne	r0, #0
   c10fe:	f85d fb08 	ldr.w	pc, [sp], #8
   c1102:	bf00      	nop

000c1104 <__aeabi_dcmplt>:
   c1104:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1108:	f7ff ffea 	bl	c10e0 <__aeabi_cdcmpeq>
   c110c:	bf34      	ite	cc
   c110e:	2001      	movcc	r0, #1
   c1110:	2000      	movcs	r0, #0
   c1112:	f85d fb08 	ldr.w	pc, [sp], #8
   c1116:	bf00      	nop

000c1118 <__aeabi_dcmple>:
   c1118:	f84d ed08 	str.w	lr, [sp, #-8]!
   c111c:	f7ff ffe0 	bl	c10e0 <__aeabi_cdcmpeq>
   c1120:	bf94      	ite	ls
   c1122:	2001      	movls	r0, #1
   c1124:	2000      	movhi	r0, #0
   c1126:	f85d fb08 	ldr.w	pc, [sp], #8
   c112a:	bf00      	nop

000c112c <__aeabi_dcmpge>:
   c112c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1130:	f7ff ffce 	bl	c10d0 <__aeabi_cdrcmple>
   c1134:	bf94      	ite	ls
   c1136:	2001      	movls	r0, #1
   c1138:	2000      	movhi	r0, #0
   c113a:	f85d fb08 	ldr.w	pc, [sp], #8
   c113e:	bf00      	nop

000c1140 <__aeabi_dcmpgt>:
   c1140:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1144:	f7ff ffc4 	bl	c10d0 <__aeabi_cdrcmple>
   c1148:	bf34      	ite	cc
   c114a:	2001      	movcc	r0, #1
   c114c:	2000      	movcs	r0, #0
   c114e:	f85d fb08 	ldr.w	pc, [sp], #8
   c1152:	bf00      	nop

000c1154 <__aeabi_dcmpun>:
   c1154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c115c:	d102      	bne.n	c1164 <__aeabi_dcmpun+0x10>
   c115e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c1162:	d10a      	bne.n	c117a <__aeabi_dcmpun+0x26>
   c1164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c116c:	d102      	bne.n	c1174 <__aeabi_dcmpun+0x20>
   c116e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c1172:	d102      	bne.n	c117a <__aeabi_dcmpun+0x26>
   c1174:	f04f 0000 	mov.w	r0, #0
   c1178:	4770      	bx	lr
   c117a:	f04f 0001 	mov.w	r0, #1
   c117e:	4770      	bx	lr

000c1180 <__aeabi_d2iz>:
   c1180:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c1184:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1188:	d215      	bcs.n	c11b6 <__aeabi_d2iz+0x36>
   c118a:	d511      	bpl.n	c11b0 <__aeabi_d2iz+0x30>
   c118c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1190:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1194:	d912      	bls.n	c11bc <__aeabi_d2iz+0x3c>
   c1196:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c119a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c119e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c11a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c11a6:	fa23 f002 	lsr.w	r0, r3, r2
   c11aa:	bf18      	it	ne
   c11ac:	4240      	negne	r0, r0
   c11ae:	4770      	bx	lr
   c11b0:	f04f 0000 	mov.w	r0, #0
   c11b4:	4770      	bx	lr
   c11b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c11ba:	d105      	bne.n	c11c8 <__aeabi_d2iz+0x48>
   c11bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c11c0:	bf08      	it	eq
   c11c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c11c6:	4770      	bx	lr
   c11c8:	f04f 0000 	mov.w	r0, #0
   c11cc:	4770      	bx	lr
   c11ce:	bf00      	nop

000c11d0 <__aeabi_d2uiz>:
   c11d0:	004a      	lsls	r2, r1, #1
   c11d2:	d211      	bcs.n	c11f8 <__aeabi_d2uiz+0x28>
   c11d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c11d8:	d211      	bcs.n	c11fe <__aeabi_d2uiz+0x2e>
   c11da:	d50d      	bpl.n	c11f8 <__aeabi_d2uiz+0x28>
   c11dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c11e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c11e4:	d40e      	bmi.n	c1204 <__aeabi_d2uiz+0x34>
   c11e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c11ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c11ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c11f2:	fa23 f002 	lsr.w	r0, r3, r2
   c11f6:	4770      	bx	lr
   c11f8:	f04f 0000 	mov.w	r0, #0
   c11fc:	4770      	bx	lr
   c11fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c1202:	d102      	bne.n	c120a <__aeabi_d2uiz+0x3a>
   c1204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c1208:	4770      	bx	lr
   c120a:	f04f 0000 	mov.w	r0, #0
   c120e:	4770      	bx	lr

000c1210 <__aeabi_d2f>:
   c1210:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c1214:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c1218:	bf24      	itt	cs
   c121a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c121e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c1222:	d90d      	bls.n	c1240 <__aeabi_d2f+0x30>
   c1224:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c1228:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c122c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c1230:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c1234:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c1238:	bf08      	it	eq
   c123a:	f020 0001 	biceq.w	r0, r0, #1
   c123e:	4770      	bx	lr
   c1240:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c1244:	d121      	bne.n	c128a <__aeabi_d2f+0x7a>
   c1246:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c124a:	bfbc      	itt	lt
   c124c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c1250:	4770      	bxlt	lr
   c1252:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1256:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c125a:	f1c2 0218 	rsb	r2, r2, #24
   c125e:	f1c2 0c20 	rsb	ip, r2, #32
   c1262:	fa10 f30c 	lsls.w	r3, r0, ip
   c1266:	fa20 f002 	lsr.w	r0, r0, r2
   c126a:	bf18      	it	ne
   c126c:	f040 0001 	orrne.w	r0, r0, #1
   c1270:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1274:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c1278:	fa03 fc0c 	lsl.w	ip, r3, ip
   c127c:	ea40 000c 	orr.w	r0, r0, ip
   c1280:	fa23 f302 	lsr.w	r3, r3, r2
   c1284:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c1288:	e7cc      	b.n	c1224 <__aeabi_d2f+0x14>
   c128a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c128e:	d107      	bne.n	c12a0 <__aeabi_d2f+0x90>
   c1290:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c1294:	bf1e      	ittt	ne
   c1296:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c129a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c129e:	4770      	bxne	lr
   c12a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c12a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c12a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c12ac:	4770      	bx	lr
   c12ae:	bf00      	nop

000c12b0 <__aeabi_d2ulz>:
   c12b0:	b5d0      	push	{r4, r6, r7, lr}
   c12b2:	4b0c      	ldr	r3, [pc, #48]	; (c12e4 <__aeabi_d2ulz+0x34>)
   c12b4:	2200      	movs	r2, #0
   c12b6:	4606      	mov	r6, r0
   c12b8:	460f      	mov	r7, r1
   c12ba:	f7ff fcb1 	bl	c0c20 <__aeabi_dmul>
   c12be:	f7ff ff87 	bl	c11d0 <__aeabi_d2uiz>
   c12c2:	4604      	mov	r4, r0
   c12c4:	f7ff fc32 	bl	c0b2c <__aeabi_ui2d>
   c12c8:	4b07      	ldr	r3, [pc, #28]	; (c12e8 <__aeabi_d2ulz+0x38>)
   c12ca:	2200      	movs	r2, #0
   c12cc:	f7ff fca8 	bl	c0c20 <__aeabi_dmul>
   c12d0:	4602      	mov	r2, r0
   c12d2:	460b      	mov	r3, r1
   c12d4:	4630      	mov	r0, r6
   c12d6:	4639      	mov	r1, r7
   c12d8:	f7ff faea 	bl	c08b0 <__aeabi_dsub>
   c12dc:	f7ff ff78 	bl	c11d0 <__aeabi_d2uiz>
   c12e0:	4621      	mov	r1, r4
   c12e2:	bdd0      	pop	{r4, r6, r7, pc}
   c12e4:	3df00000 	.word	0x3df00000
   c12e8:	41f00000 	.word	0x41f00000

000c12ec <asctime_r>:
   c12ec:	b510      	push	{r4, lr}
   c12ee:	460c      	mov	r4, r1
   c12f0:	6941      	ldr	r1, [r0, #20]
   c12f2:	6903      	ldr	r3, [r0, #16]
   c12f4:	6982      	ldr	r2, [r0, #24]
   c12f6:	b086      	sub	sp, #24
   c12f8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c12fc:	9104      	str	r1, [sp, #16]
   c12fe:	6801      	ldr	r1, [r0, #0]
   c1300:	9103      	str	r1, [sp, #12]
   c1302:	6841      	ldr	r1, [r0, #4]
   c1304:	9102      	str	r1, [sp, #8]
   c1306:	6881      	ldr	r1, [r0, #8]
   c1308:	9101      	str	r1, [sp, #4]
   c130a:	68c1      	ldr	r1, [r0, #12]
   c130c:	9100      	str	r1, [sp, #0]
   c130e:	4907      	ldr	r1, [pc, #28]	; (c132c <asctime_r+0x40>)
   c1310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c1314:	440b      	add	r3, r1
   c1316:	4906      	ldr	r1, [pc, #24]	; (c1330 <asctime_r+0x44>)
   c1318:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c131c:	440a      	add	r2, r1
   c131e:	4620      	mov	r0, r4
   c1320:	4904      	ldr	r1, [pc, #16]	; (c1334 <asctime_r+0x48>)
   c1322:	f7fc f897 	bl	bd454 <siprintf>
   c1326:	4620      	mov	r0, r4
   c1328:	b006      	add	sp, #24
   c132a:	bd10      	pop	{r4, pc}
   c132c:	000c580e 	.word	0x000c580e
   c1330:	000c57f9 	.word	0x000c57f9
   c1334:	000c57d9 	.word	0x000c57d9

000c1338 <atexit>:
   c1338:	2300      	movs	r3, #0
   c133a:	4601      	mov	r1, r0
   c133c:	461a      	mov	r2, r3
   c133e:	4618      	mov	r0, r3
   c1340:	f001 b900 	b.w	c2544 <__register_exitproc>

000c1344 <gmtime>:
   c1344:	b538      	push	{r3, r4, r5, lr}
   c1346:	4b0b      	ldr	r3, [pc, #44]	; (c1374 <gmtime+0x30>)
   c1348:	681d      	ldr	r5, [r3, #0]
   c134a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c134c:	4604      	mov	r4, r0
   c134e:	b953      	cbnz	r3, c1366 <gmtime+0x22>
   c1350:	2024      	movs	r0, #36	; 0x24
   c1352:	f7fc f867 	bl	bd424 <malloc>
   c1356:	4602      	mov	r2, r0
   c1358:	63e8      	str	r0, [r5, #60]	; 0x3c
   c135a:	b920      	cbnz	r0, c1366 <gmtime+0x22>
   c135c:	4b06      	ldr	r3, [pc, #24]	; (c1378 <gmtime+0x34>)
   c135e:	4807      	ldr	r0, [pc, #28]	; (c137c <gmtime+0x38>)
   c1360:	2139      	movs	r1, #57	; 0x39
   c1362:	f7fc f8af 	bl	bd4c4 <__assert_func>
   c1366:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c1368:	4620      	mov	r0, r4
   c136a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c136e:	f7fc b8c9 	b.w	bd504 <gmtime_r>
   c1372:	bf00      	nop
   c1374:	2003d68c 	.word	0x2003d68c
   c1378:	000c5832 	.word	0x000c5832
   c137c:	000c5849 	.word	0x000c5849

000c1380 <isprint>:
   c1380:	4b02      	ldr	r3, [pc, #8]	; (c138c <isprint+0xc>)
   c1382:	4418      	add	r0, r3
   c1384:	7840      	ldrb	r0, [r0, #1]
   c1386:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c138a:	4770      	bx	lr
   c138c:	000c5958 	.word	0x000c5958

000c1390 <memcpy>:
   c1390:	440a      	add	r2, r1
   c1392:	4291      	cmp	r1, r2
   c1394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c1398:	d100      	bne.n	c139c <memcpy+0xc>
   c139a:	4770      	bx	lr
   c139c:	b510      	push	{r4, lr}
   c139e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c13a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   c13a6:	4291      	cmp	r1, r2
   c13a8:	d1f9      	bne.n	c139e <memcpy+0xe>
   c13aa:	bd10      	pop	{r4, pc}

000c13ac <memmove>:
   c13ac:	4288      	cmp	r0, r1
   c13ae:	b510      	push	{r4, lr}
   c13b0:	eb01 0402 	add.w	r4, r1, r2
   c13b4:	d902      	bls.n	c13bc <memmove+0x10>
   c13b6:	4284      	cmp	r4, r0
   c13b8:	4623      	mov	r3, r4
   c13ba:	d807      	bhi.n	c13cc <memmove+0x20>
   c13bc:	1e43      	subs	r3, r0, #1
   c13be:	42a1      	cmp	r1, r4
   c13c0:	d008      	beq.n	c13d4 <memmove+0x28>
   c13c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c13c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c13ca:	e7f8      	b.n	c13be <memmove+0x12>
   c13cc:	4402      	add	r2, r0
   c13ce:	4601      	mov	r1, r0
   c13d0:	428a      	cmp	r2, r1
   c13d2:	d100      	bne.n	c13d6 <memmove+0x2a>
   c13d4:	bd10      	pop	{r4, pc}
   c13d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c13da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c13de:	e7f7      	b.n	c13d0 <memmove+0x24>

000c13e0 <memset>:
   c13e0:	4402      	add	r2, r0
   c13e2:	4603      	mov	r3, r0
   c13e4:	4293      	cmp	r3, r2
   c13e6:	d100      	bne.n	c13ea <memset+0xa>
   c13e8:	4770      	bx	lr
   c13ea:	f803 1b01 	strb.w	r1, [r3], #1
   c13ee:	e7f9      	b.n	c13e4 <memset+0x4>

000c13f0 <_calloc_r>:
   c13f0:	b513      	push	{r0, r1, r4, lr}
   c13f2:	434a      	muls	r2, r1
   c13f4:	4611      	mov	r1, r2
   c13f6:	9201      	str	r2, [sp, #4]
   c13f8:	f7fc f854 	bl	bd4a4 <_malloc_r>
   c13fc:	4604      	mov	r4, r0
   c13fe:	b118      	cbz	r0, c1408 <_calloc_r+0x18>
   c1400:	9a01      	ldr	r2, [sp, #4]
   c1402:	2100      	movs	r1, #0
   c1404:	f7ff ffec 	bl	c13e0 <memset>
   c1408:	4620      	mov	r0, r4
   c140a:	b002      	add	sp, #8
   c140c:	bd10      	pop	{r4, pc}
	...

000c1410 <srand>:
   c1410:	b538      	push	{r3, r4, r5, lr}
   c1412:	4b10      	ldr	r3, [pc, #64]	; (c1454 <srand+0x44>)
   c1414:	681d      	ldr	r5, [r3, #0]
   c1416:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1418:	4604      	mov	r4, r0
   c141a:	b9b3      	cbnz	r3, c144a <srand+0x3a>
   c141c:	2018      	movs	r0, #24
   c141e:	f7fc f801 	bl	bd424 <malloc>
   c1422:	4602      	mov	r2, r0
   c1424:	63a8      	str	r0, [r5, #56]	; 0x38
   c1426:	b920      	cbnz	r0, c1432 <srand+0x22>
   c1428:	4b0b      	ldr	r3, [pc, #44]	; (c1458 <srand+0x48>)
   c142a:	480c      	ldr	r0, [pc, #48]	; (c145c <srand+0x4c>)
   c142c:	2142      	movs	r1, #66	; 0x42
   c142e:	f7fc f849 	bl	bd4c4 <__assert_func>
   c1432:	490b      	ldr	r1, [pc, #44]	; (c1460 <srand+0x50>)
   c1434:	4b0b      	ldr	r3, [pc, #44]	; (c1464 <srand+0x54>)
   c1436:	e9c0 1300 	strd	r1, r3, [r0]
   c143a:	4b0b      	ldr	r3, [pc, #44]	; (c1468 <srand+0x58>)
   c143c:	6083      	str	r3, [r0, #8]
   c143e:	230b      	movs	r3, #11
   c1440:	8183      	strh	r3, [r0, #12]
   c1442:	2100      	movs	r1, #0
   c1444:	2001      	movs	r0, #1
   c1446:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c144a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c144c:	2200      	movs	r2, #0
   c144e:	611c      	str	r4, [r3, #16]
   c1450:	615a      	str	r2, [r3, #20]
   c1452:	bd38      	pop	{r3, r4, r5, pc}
   c1454:	2003d68c 	.word	0x2003d68c
   c1458:	000c5832 	.word	0x000c5832
   c145c:	000c58a2 	.word	0x000c58a2
   c1460:	abcd330e 	.word	0xabcd330e
   c1464:	e66d1234 	.word	0xe66d1234
   c1468:	0005deec 	.word	0x0005deec

000c146c <rand>:
   c146c:	4b16      	ldr	r3, [pc, #88]	; (c14c8 <rand+0x5c>)
   c146e:	b510      	push	{r4, lr}
   c1470:	681c      	ldr	r4, [r3, #0]
   c1472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c1474:	b9b3      	cbnz	r3, c14a4 <rand+0x38>
   c1476:	2018      	movs	r0, #24
   c1478:	f7fb ffd4 	bl	bd424 <malloc>
   c147c:	63a0      	str	r0, [r4, #56]	; 0x38
   c147e:	b928      	cbnz	r0, c148c <rand+0x20>
   c1480:	4602      	mov	r2, r0
   c1482:	4b12      	ldr	r3, [pc, #72]	; (c14cc <rand+0x60>)
   c1484:	4812      	ldr	r0, [pc, #72]	; (c14d0 <rand+0x64>)
   c1486:	214e      	movs	r1, #78	; 0x4e
   c1488:	f7fc f81c 	bl	bd4c4 <__assert_func>
   c148c:	4a11      	ldr	r2, [pc, #68]	; (c14d4 <rand+0x68>)
   c148e:	4b12      	ldr	r3, [pc, #72]	; (c14d8 <rand+0x6c>)
   c1490:	e9c0 2300 	strd	r2, r3, [r0]
   c1494:	4b11      	ldr	r3, [pc, #68]	; (c14dc <rand+0x70>)
   c1496:	6083      	str	r3, [r0, #8]
   c1498:	230b      	movs	r3, #11
   c149a:	8183      	strh	r3, [r0, #12]
   c149c:	2201      	movs	r2, #1
   c149e:	2300      	movs	r3, #0
   c14a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c14a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c14a6:	4a0e      	ldr	r2, [pc, #56]	; (c14e0 <rand+0x74>)
   c14a8:	6920      	ldr	r0, [r4, #16]
   c14aa:	6963      	ldr	r3, [r4, #20]
   c14ac:	490d      	ldr	r1, [pc, #52]	; (c14e4 <rand+0x78>)
   c14ae:	4342      	muls	r2, r0
   c14b0:	fb01 2203 	mla	r2, r1, r3, r2
   c14b4:	fba0 0101 	umull	r0, r1, r0, r1
   c14b8:	1c43      	adds	r3, r0, #1
   c14ba:	eb42 0001 	adc.w	r0, r2, r1
   c14be:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c14c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c14c6:	bd10      	pop	{r4, pc}
   c14c8:	2003d68c 	.word	0x2003d68c
   c14cc:	000c5832 	.word	0x000c5832
   c14d0:	000c58a2 	.word	0x000c58a2
   c14d4:	abcd330e 	.word	0xabcd330e
   c14d8:	e66d1234 	.word	0xe66d1234
   c14dc:	0005deec 	.word	0x0005deec
   c14e0:	5851f42d 	.word	0x5851f42d
   c14e4:	4c957f2d 	.word	0x4c957f2d

000c14e8 <strchr>:
   c14e8:	b2c9      	uxtb	r1, r1
   c14ea:	4603      	mov	r3, r0
   c14ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   c14f0:	b11a      	cbz	r2, c14fa <strchr+0x12>
   c14f2:	428a      	cmp	r2, r1
   c14f4:	d1f9      	bne.n	c14ea <strchr+0x2>
   c14f6:	4618      	mov	r0, r3
   c14f8:	4770      	bx	lr
   c14fa:	2900      	cmp	r1, #0
   c14fc:	bf18      	it	ne
   c14fe:	2300      	movne	r3, #0
   c1500:	e7f9      	b.n	c14f6 <strchr+0xe>

000c1502 <strchrnul>:
   c1502:	b510      	push	{r4, lr}
   c1504:	4604      	mov	r4, r0
   c1506:	f7ff ffef 	bl	c14e8 <strchr>
   c150a:	b918      	cbnz	r0, c1514 <strchrnul+0x12>
   c150c:	4620      	mov	r0, r4
   c150e:	f000 f832 	bl	c1576 <strlen>
   c1512:	4420      	add	r0, r4
   c1514:	bd10      	pop	{r4, pc}

000c1516 <strcmp>:
   c1516:	f810 2b01 	ldrb.w	r2, [r0], #1
   c151a:	f811 3b01 	ldrb.w	r3, [r1], #1
   c151e:	2a01      	cmp	r2, #1
   c1520:	bf28      	it	cs
   c1522:	429a      	cmpcs	r2, r3
   c1524:	d0f7      	beq.n	c1516 <strcmp>
   c1526:	1ad0      	subs	r0, r2, r3
   c1528:	4770      	bx	lr

000c152a <strcpy>:
   c152a:	4603      	mov	r3, r0
   c152c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1530:	f803 2b01 	strb.w	r2, [r3], #1
   c1534:	2a00      	cmp	r2, #0
   c1536:	d1f9      	bne.n	c152c <strcpy+0x2>
   c1538:	4770      	bx	lr
	...

000c153c <strdup>:
   c153c:	4b02      	ldr	r3, [pc, #8]	; (c1548 <strdup+0xc>)
   c153e:	4601      	mov	r1, r0
   c1540:	6818      	ldr	r0, [r3, #0]
   c1542:	f000 b803 	b.w	c154c <_strdup_r>
   c1546:	bf00      	nop
   c1548:	2003d68c 	.word	0x2003d68c

000c154c <_strdup_r>:
   c154c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c154e:	4604      	mov	r4, r0
   c1550:	4608      	mov	r0, r1
   c1552:	460d      	mov	r5, r1
   c1554:	f000 f80f 	bl	c1576 <strlen>
   c1558:	1c42      	adds	r2, r0, #1
   c155a:	4611      	mov	r1, r2
   c155c:	4620      	mov	r0, r4
   c155e:	9201      	str	r2, [sp, #4]
   c1560:	f7fb ffa0 	bl	bd4a4 <_malloc_r>
   c1564:	4604      	mov	r4, r0
   c1566:	b118      	cbz	r0, c1570 <_strdup_r+0x24>
   c1568:	9a01      	ldr	r2, [sp, #4]
   c156a:	4629      	mov	r1, r5
   c156c:	f7ff ff10 	bl	c1390 <memcpy>
   c1570:	4620      	mov	r0, r4
   c1572:	b003      	add	sp, #12
   c1574:	bd30      	pop	{r4, r5, pc}

000c1576 <strlen>:
   c1576:	4603      	mov	r3, r0
   c1578:	f813 2b01 	ldrb.w	r2, [r3], #1
   c157c:	2a00      	cmp	r2, #0
   c157e:	d1fb      	bne.n	c1578 <strlen+0x2>
   c1580:	1a18      	subs	r0, r3, r0
   c1582:	3801      	subs	r0, #1
   c1584:	4770      	bx	lr

000c1586 <strncmp>:
   c1586:	b510      	push	{r4, lr}
   c1588:	b17a      	cbz	r2, c15aa <strncmp+0x24>
   c158a:	4603      	mov	r3, r0
   c158c:	3901      	subs	r1, #1
   c158e:	1884      	adds	r4, r0, r2
   c1590:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c1598:	4290      	cmp	r0, r2
   c159a:	d101      	bne.n	c15a0 <strncmp+0x1a>
   c159c:	42a3      	cmp	r3, r4
   c159e:	d101      	bne.n	c15a4 <strncmp+0x1e>
   c15a0:	1a80      	subs	r0, r0, r2
   c15a2:	bd10      	pop	{r4, pc}
   c15a4:	2800      	cmp	r0, #0
   c15a6:	d1f3      	bne.n	c1590 <strncmp+0xa>
   c15a8:	e7fa      	b.n	c15a0 <strncmp+0x1a>
   c15aa:	4610      	mov	r0, r2
   c15ac:	e7f9      	b.n	c15a2 <strncmp+0x1c>

000c15ae <strncpy>:
   c15ae:	b510      	push	{r4, lr}
   c15b0:	3901      	subs	r1, #1
   c15b2:	4603      	mov	r3, r0
   c15b4:	b132      	cbz	r2, c15c4 <strncpy+0x16>
   c15b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c15ba:	f803 4b01 	strb.w	r4, [r3], #1
   c15be:	3a01      	subs	r2, #1
   c15c0:	2c00      	cmp	r4, #0
   c15c2:	d1f7      	bne.n	c15b4 <strncpy+0x6>
   c15c4:	441a      	add	r2, r3
   c15c6:	2100      	movs	r1, #0
   c15c8:	4293      	cmp	r3, r2
   c15ca:	d100      	bne.n	c15ce <strncpy+0x20>
   c15cc:	bd10      	pop	{r4, pc}
   c15ce:	f803 1b01 	strb.w	r1, [r3], #1
   c15d2:	e7f9      	b.n	c15c8 <strncpy+0x1a>

000c15d4 <strrchr>:
   c15d4:	b538      	push	{r3, r4, r5, lr}
   c15d6:	4603      	mov	r3, r0
   c15d8:	460c      	mov	r4, r1
   c15da:	b969      	cbnz	r1, c15f8 <strrchr+0x24>
   c15dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c15e0:	f7ff bf82 	b.w	c14e8 <strchr>
   c15e4:	1c43      	adds	r3, r0, #1
   c15e6:	4605      	mov	r5, r0
   c15e8:	4621      	mov	r1, r4
   c15ea:	4618      	mov	r0, r3
   c15ec:	f7ff ff7c 	bl	c14e8 <strchr>
   c15f0:	2800      	cmp	r0, #0
   c15f2:	d1f7      	bne.n	c15e4 <strrchr+0x10>
   c15f4:	4628      	mov	r0, r5
   c15f6:	bd38      	pop	{r3, r4, r5, pc}
   c15f8:	2500      	movs	r5, #0
   c15fa:	e7f5      	b.n	c15e8 <strrchr+0x14>

000c15fc <sulp>:
   c15fc:	b570      	push	{r4, r5, r6, lr}
   c15fe:	4604      	mov	r4, r0
   c1600:	460d      	mov	r5, r1
   c1602:	ec45 4b10 	vmov	d0, r4, r5
   c1606:	4616      	mov	r6, r2
   c1608:	f001 ff2a 	bl	c3460 <__ulp>
   c160c:	ec51 0b10 	vmov	r0, r1, d0
   c1610:	b17e      	cbz	r6, c1632 <sulp+0x36>
   c1612:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c1616:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c161a:	2b00      	cmp	r3, #0
   c161c:	dd09      	ble.n	c1632 <sulp+0x36>
   c161e:	051b      	lsls	r3, r3, #20
   c1620:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c1624:	2400      	movs	r4, #0
   c1626:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c162a:	4622      	mov	r2, r4
   c162c:	462b      	mov	r3, r5
   c162e:	f7ff faf7 	bl	c0c20 <__aeabi_dmul>
   c1632:	bd70      	pop	{r4, r5, r6, pc}
   c1634:	0000      	movs	r0, r0
	...

000c1638 <_strtod_l>:
   c1638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c163c:	ed2d 8b02 	vpush	{d8}
   c1640:	b09d      	sub	sp, #116	; 0x74
   c1642:	461f      	mov	r7, r3
   c1644:	2300      	movs	r3, #0
   c1646:	9318      	str	r3, [sp, #96]	; 0x60
   c1648:	4ba2      	ldr	r3, [pc, #648]	; (c18d4 <_strtod_l+0x29c>)
   c164a:	9213      	str	r2, [sp, #76]	; 0x4c
   c164c:	681b      	ldr	r3, [r3, #0]
   c164e:	9305      	str	r3, [sp, #20]
   c1650:	4604      	mov	r4, r0
   c1652:	4618      	mov	r0, r3
   c1654:	4688      	mov	r8, r1
   c1656:	f7ff ff8e 	bl	c1576 <strlen>
   c165a:	f04f 0a00 	mov.w	sl, #0
   c165e:	4605      	mov	r5, r0
   c1660:	f04f 0b00 	mov.w	fp, #0
   c1664:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c166a:	781a      	ldrb	r2, [r3, #0]
   c166c:	2a2b      	cmp	r2, #43	; 0x2b
   c166e:	d04e      	beq.n	c170e <_strtod_l+0xd6>
   c1670:	d83b      	bhi.n	c16ea <_strtod_l+0xb2>
   c1672:	2a0d      	cmp	r2, #13
   c1674:	d834      	bhi.n	c16e0 <_strtod_l+0xa8>
   c1676:	2a08      	cmp	r2, #8
   c1678:	d834      	bhi.n	c16e4 <_strtod_l+0xac>
   c167a:	2a00      	cmp	r2, #0
   c167c:	d03e      	beq.n	c16fc <_strtod_l+0xc4>
   c167e:	2300      	movs	r3, #0
   c1680:	930a      	str	r3, [sp, #40]	; 0x28
   c1682:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c1684:	7833      	ldrb	r3, [r6, #0]
   c1686:	2b30      	cmp	r3, #48	; 0x30
   c1688:	f040 80b0 	bne.w	c17ec <_strtod_l+0x1b4>
   c168c:	7873      	ldrb	r3, [r6, #1]
   c168e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c1692:	2b58      	cmp	r3, #88	; 0x58
   c1694:	d168      	bne.n	c1768 <_strtod_l+0x130>
   c1696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1698:	9301      	str	r3, [sp, #4]
   c169a:	ab18      	add	r3, sp, #96	; 0x60
   c169c:	9702      	str	r7, [sp, #8]
   c169e:	9300      	str	r3, [sp, #0]
   c16a0:	4a8d      	ldr	r2, [pc, #564]	; (c18d8 <_strtod_l+0x2a0>)
   c16a2:	ab19      	add	r3, sp, #100	; 0x64
   c16a4:	a917      	add	r1, sp, #92	; 0x5c
   c16a6:	4620      	mov	r0, r4
   c16a8:	f001 f838 	bl	c271c <__gethex>
   c16ac:	f010 0707 	ands.w	r7, r0, #7
   c16b0:	4605      	mov	r5, r0
   c16b2:	d005      	beq.n	c16c0 <_strtod_l+0x88>
   c16b4:	2f06      	cmp	r7, #6
   c16b6:	d12c      	bne.n	c1712 <_strtod_l+0xda>
   c16b8:	3601      	adds	r6, #1
   c16ba:	2300      	movs	r3, #0
   c16bc:	9617      	str	r6, [sp, #92]	; 0x5c
   c16be:	930a      	str	r3, [sp, #40]	; 0x28
   c16c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c16c2:	2b00      	cmp	r3, #0
   c16c4:	f040 8590 	bne.w	c21e8 <_strtod_l+0xbb0>
   c16c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c16ca:	b1eb      	cbz	r3, c1708 <_strtod_l+0xd0>
   c16cc:	4652      	mov	r2, sl
   c16ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c16d2:	ec43 2b10 	vmov	d0, r2, r3
   c16d6:	b01d      	add	sp, #116	; 0x74
   c16d8:	ecbd 8b02 	vpop	{d8}
   c16dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c16e0:	2a20      	cmp	r2, #32
   c16e2:	d1cc      	bne.n	c167e <_strtod_l+0x46>
   c16e4:	3301      	adds	r3, #1
   c16e6:	9317      	str	r3, [sp, #92]	; 0x5c
   c16e8:	e7be      	b.n	c1668 <_strtod_l+0x30>
   c16ea:	2a2d      	cmp	r2, #45	; 0x2d
   c16ec:	d1c7      	bne.n	c167e <_strtod_l+0x46>
   c16ee:	2201      	movs	r2, #1
   c16f0:	920a      	str	r2, [sp, #40]	; 0x28
   c16f2:	1c5a      	adds	r2, r3, #1
   c16f4:	9217      	str	r2, [sp, #92]	; 0x5c
   c16f6:	785b      	ldrb	r3, [r3, #1]
   c16f8:	2b00      	cmp	r3, #0
   c16fa:	d1c2      	bne.n	c1682 <_strtod_l+0x4a>
   c16fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c16fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1702:	2b00      	cmp	r3, #0
   c1704:	f040 856e 	bne.w	c21e4 <_strtod_l+0xbac>
   c1708:	4652      	mov	r2, sl
   c170a:	465b      	mov	r3, fp
   c170c:	e7e1      	b.n	c16d2 <_strtod_l+0x9a>
   c170e:	2200      	movs	r2, #0
   c1710:	e7ee      	b.n	c16f0 <_strtod_l+0xb8>
   c1712:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1714:	b13a      	cbz	r2, c1726 <_strtod_l+0xee>
   c1716:	2135      	movs	r1, #53	; 0x35
   c1718:	a81a      	add	r0, sp, #104	; 0x68
   c171a:	f001 ffac 	bl	c3676 <__copybits>
   c171e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1720:	4620      	mov	r0, r4
   c1722:	f001 fb6b 	bl	c2dfc <_Bfree>
   c1726:	3f01      	subs	r7, #1
   c1728:	2f04      	cmp	r7, #4
   c172a:	d806      	bhi.n	c173a <_strtod_l+0x102>
   c172c:	e8df f007 	tbb	[pc, r7]
   c1730:	1714030a 	.word	0x1714030a
   c1734:	0a          	.byte	0x0a
   c1735:	00          	.byte	0x00
   c1736:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c173a:	0728      	lsls	r0, r5, #28
   c173c:	d5c0      	bpl.n	c16c0 <_strtod_l+0x88>
   c173e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c1742:	e7bd      	b.n	c16c0 <_strtod_l+0x88>
   c1744:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c1748:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c174a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c174e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c1752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c1756:	e7f0      	b.n	c173a <_strtod_l+0x102>
   c1758:	f8df b180 	ldr.w	fp, [pc, #384]	; c18dc <_strtod_l+0x2a4>
   c175c:	e7ed      	b.n	c173a <_strtod_l+0x102>
   c175e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c1762:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1766:	e7e8      	b.n	c173a <_strtod_l+0x102>
   c1768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c176a:	1c5a      	adds	r2, r3, #1
   c176c:	9217      	str	r2, [sp, #92]	; 0x5c
   c176e:	785b      	ldrb	r3, [r3, #1]
   c1770:	2b30      	cmp	r3, #48	; 0x30
   c1772:	d0f9      	beq.n	c1768 <_strtod_l+0x130>
   c1774:	2b00      	cmp	r3, #0
   c1776:	d0a3      	beq.n	c16c0 <_strtod_l+0x88>
   c1778:	2301      	movs	r3, #1
   c177a:	f04f 0900 	mov.w	r9, #0
   c177e:	9304      	str	r3, [sp, #16]
   c1780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1782:	9308      	str	r3, [sp, #32]
   c1784:	f8cd 901c 	str.w	r9, [sp, #28]
   c1788:	464f      	mov	r7, r9
   c178a:	220a      	movs	r2, #10
   c178c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c178e:	7806      	ldrb	r6, [r0, #0]
   c1790:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c1794:	b2d9      	uxtb	r1, r3
   c1796:	2909      	cmp	r1, #9
   c1798:	d92a      	bls.n	c17f0 <_strtod_l+0x1b8>
   c179a:	9905      	ldr	r1, [sp, #20]
   c179c:	462a      	mov	r2, r5
   c179e:	f7ff fef2 	bl	c1586 <strncmp>
   c17a2:	b398      	cbz	r0, c180c <_strtod_l+0x1d4>
   c17a4:	2000      	movs	r0, #0
   c17a6:	4632      	mov	r2, r6
   c17a8:	463d      	mov	r5, r7
   c17aa:	9005      	str	r0, [sp, #20]
   c17ac:	4603      	mov	r3, r0
   c17ae:	2a65      	cmp	r2, #101	; 0x65
   c17b0:	d001      	beq.n	c17b6 <_strtod_l+0x17e>
   c17b2:	2a45      	cmp	r2, #69	; 0x45
   c17b4:	d118      	bne.n	c17e8 <_strtod_l+0x1b0>
   c17b6:	b91d      	cbnz	r5, c17c0 <_strtod_l+0x188>
   c17b8:	9a04      	ldr	r2, [sp, #16]
   c17ba:	4302      	orrs	r2, r0
   c17bc:	d09e      	beq.n	c16fc <_strtod_l+0xc4>
   c17be:	2500      	movs	r5, #0
   c17c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c17c4:	f108 0201 	add.w	r2, r8, #1
   c17c8:	9217      	str	r2, [sp, #92]	; 0x5c
   c17ca:	f898 2001 	ldrb.w	r2, [r8, #1]
   c17ce:	2a2b      	cmp	r2, #43	; 0x2b
   c17d0:	d075      	beq.n	c18be <_strtod_l+0x286>
   c17d2:	2a2d      	cmp	r2, #45	; 0x2d
   c17d4:	d07b      	beq.n	c18ce <_strtod_l+0x296>
   c17d6:	f04f 0c00 	mov.w	ip, #0
   c17da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c17de:	2909      	cmp	r1, #9
   c17e0:	f240 8082 	bls.w	c18e8 <_strtod_l+0x2b0>
   c17e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c17e8:	2600      	movs	r6, #0
   c17ea:	e09d      	b.n	c1928 <_strtod_l+0x2f0>
   c17ec:	2300      	movs	r3, #0
   c17ee:	e7c4      	b.n	c177a <_strtod_l+0x142>
   c17f0:	2f08      	cmp	r7, #8
   c17f2:	bfd8      	it	le
   c17f4:	9907      	ldrle	r1, [sp, #28]
   c17f6:	f100 0001 	add.w	r0, r0, #1
   c17fa:	bfda      	itte	le
   c17fc:	fb02 3301 	mlale	r3, r2, r1, r3
   c1800:	9307      	strle	r3, [sp, #28]
   c1802:	fb02 3909 	mlagt	r9, r2, r9, r3
   c1806:	3701      	adds	r7, #1
   c1808:	9017      	str	r0, [sp, #92]	; 0x5c
   c180a:	e7bf      	b.n	c178c <_strtod_l+0x154>
   c180c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c180e:	195a      	adds	r2, r3, r5
   c1810:	9217      	str	r2, [sp, #92]	; 0x5c
   c1812:	5d5a      	ldrb	r2, [r3, r5]
   c1814:	2f00      	cmp	r7, #0
   c1816:	d037      	beq.n	c1888 <_strtod_l+0x250>
   c1818:	9005      	str	r0, [sp, #20]
   c181a:	463d      	mov	r5, r7
   c181c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1820:	2b09      	cmp	r3, #9
   c1822:	d912      	bls.n	c184a <_strtod_l+0x212>
   c1824:	2301      	movs	r3, #1
   c1826:	e7c2      	b.n	c17ae <_strtod_l+0x176>
   c1828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c182a:	1c5a      	adds	r2, r3, #1
   c182c:	9217      	str	r2, [sp, #92]	; 0x5c
   c182e:	785a      	ldrb	r2, [r3, #1]
   c1830:	3001      	adds	r0, #1
   c1832:	2a30      	cmp	r2, #48	; 0x30
   c1834:	d0f8      	beq.n	c1828 <_strtod_l+0x1f0>
   c1836:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c183a:	2b08      	cmp	r3, #8
   c183c:	f200 84d9 	bhi.w	c21f2 <_strtod_l+0xbba>
   c1840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1842:	9005      	str	r0, [sp, #20]
   c1844:	2000      	movs	r0, #0
   c1846:	9308      	str	r3, [sp, #32]
   c1848:	4605      	mov	r5, r0
   c184a:	3a30      	subs	r2, #48	; 0x30
   c184c:	f100 0301 	add.w	r3, r0, #1
   c1850:	d014      	beq.n	c187c <_strtod_l+0x244>
   c1852:	9905      	ldr	r1, [sp, #20]
   c1854:	4419      	add	r1, r3
   c1856:	9105      	str	r1, [sp, #20]
   c1858:	462b      	mov	r3, r5
   c185a:	eb00 0e05 	add.w	lr, r0, r5
   c185e:	210a      	movs	r1, #10
   c1860:	4573      	cmp	r3, lr
   c1862:	d113      	bne.n	c188c <_strtod_l+0x254>
   c1864:	182b      	adds	r3, r5, r0
   c1866:	2b08      	cmp	r3, #8
   c1868:	f105 0501 	add.w	r5, r5, #1
   c186c:	4405      	add	r5, r0
   c186e:	dc1c      	bgt.n	c18aa <_strtod_l+0x272>
   c1870:	9907      	ldr	r1, [sp, #28]
   c1872:	230a      	movs	r3, #10
   c1874:	fb03 2301 	mla	r3, r3, r1, r2
   c1878:	9307      	str	r3, [sp, #28]
   c187a:	2300      	movs	r3, #0
   c187c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c187e:	1c51      	adds	r1, r2, #1
   c1880:	9117      	str	r1, [sp, #92]	; 0x5c
   c1882:	7852      	ldrb	r2, [r2, #1]
   c1884:	4618      	mov	r0, r3
   c1886:	e7c9      	b.n	c181c <_strtod_l+0x1e4>
   c1888:	4638      	mov	r0, r7
   c188a:	e7d2      	b.n	c1832 <_strtod_l+0x1fa>
   c188c:	2b08      	cmp	r3, #8
   c188e:	dc04      	bgt.n	c189a <_strtod_l+0x262>
   c1890:	9e07      	ldr	r6, [sp, #28]
   c1892:	434e      	muls	r6, r1
   c1894:	9607      	str	r6, [sp, #28]
   c1896:	3301      	adds	r3, #1
   c1898:	e7e2      	b.n	c1860 <_strtod_l+0x228>
   c189a:	f103 0c01 	add.w	ip, r3, #1
   c189e:	f1bc 0f10 	cmp.w	ip, #16
   c18a2:	bfd8      	it	le
   c18a4:	fb01 f909 	mulle.w	r9, r1, r9
   c18a8:	e7f5      	b.n	c1896 <_strtod_l+0x25e>
   c18aa:	2d10      	cmp	r5, #16
   c18ac:	bfdc      	itt	le
   c18ae:	230a      	movle	r3, #10
   c18b0:	fb03 2909 	mlale	r9, r3, r9, r2
   c18b4:	e7e1      	b.n	c187a <_strtod_l+0x242>
   c18b6:	2300      	movs	r3, #0
   c18b8:	9305      	str	r3, [sp, #20]
   c18ba:	2301      	movs	r3, #1
   c18bc:	e77c      	b.n	c17b8 <_strtod_l+0x180>
   c18be:	f04f 0c00 	mov.w	ip, #0
   c18c2:	f108 0202 	add.w	r2, r8, #2
   c18c6:	9217      	str	r2, [sp, #92]	; 0x5c
   c18c8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c18cc:	e785      	b.n	c17da <_strtod_l+0x1a2>
   c18ce:	f04f 0c01 	mov.w	ip, #1
   c18d2:	e7f6      	b.n	c18c2 <_strtod_l+0x28a>
   c18d4:	000c5acc 	.word	0x000c5acc
   c18d8:	000c5904 	.word	0x000c5904
   c18dc:	7ff00000 	.word	0x7ff00000
   c18e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c18e2:	1c51      	adds	r1, r2, #1
   c18e4:	9117      	str	r1, [sp, #92]	; 0x5c
   c18e6:	7852      	ldrb	r2, [r2, #1]
   c18e8:	2a30      	cmp	r2, #48	; 0x30
   c18ea:	d0f9      	beq.n	c18e0 <_strtod_l+0x2a8>
   c18ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c18f0:	2908      	cmp	r1, #8
   c18f2:	f63f af79 	bhi.w	c17e8 <_strtod_l+0x1b0>
   c18f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c18fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c18fc:	9206      	str	r2, [sp, #24]
   c18fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1900:	1c51      	adds	r1, r2, #1
   c1902:	9117      	str	r1, [sp, #92]	; 0x5c
   c1904:	7852      	ldrb	r2, [r2, #1]
   c1906:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c190a:	2e09      	cmp	r6, #9
   c190c:	d937      	bls.n	c197e <_strtod_l+0x346>
   c190e:	9e06      	ldr	r6, [sp, #24]
   c1910:	1b89      	subs	r1, r1, r6
   c1912:	2908      	cmp	r1, #8
   c1914:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1918:	dc02      	bgt.n	c1920 <_strtod_l+0x2e8>
   c191a:	4576      	cmp	r6, lr
   c191c:	bfa8      	it	ge
   c191e:	4676      	movge	r6, lr
   c1920:	f1bc 0f00 	cmp.w	ip, #0
   c1924:	d000      	beq.n	c1928 <_strtod_l+0x2f0>
   c1926:	4276      	negs	r6, r6
   c1928:	2d00      	cmp	r5, #0
   c192a:	d14d      	bne.n	c19c8 <_strtod_l+0x390>
   c192c:	9904      	ldr	r1, [sp, #16]
   c192e:	4301      	orrs	r1, r0
   c1930:	f47f aec6 	bne.w	c16c0 <_strtod_l+0x88>
   c1934:	2b00      	cmp	r3, #0
   c1936:	f47f aee1 	bne.w	c16fc <_strtod_l+0xc4>
   c193a:	2a69      	cmp	r2, #105	; 0x69
   c193c:	d027      	beq.n	c198e <_strtod_l+0x356>
   c193e:	dc24      	bgt.n	c198a <_strtod_l+0x352>
   c1940:	2a49      	cmp	r2, #73	; 0x49
   c1942:	d024      	beq.n	c198e <_strtod_l+0x356>
   c1944:	2a4e      	cmp	r2, #78	; 0x4e
   c1946:	f47f aed9 	bne.w	c16fc <_strtod_l+0xc4>
   c194a:	499f      	ldr	r1, [pc, #636]	; (c1bc8 <_strtod_l+0x590>)
   c194c:	a817      	add	r0, sp, #92	; 0x5c
   c194e:	f001 f93d 	bl	c2bcc <__match>
   c1952:	2800      	cmp	r0, #0
   c1954:	f43f aed2 	beq.w	c16fc <_strtod_l+0xc4>
   c1958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c195a:	781b      	ldrb	r3, [r3, #0]
   c195c:	2b28      	cmp	r3, #40	; 0x28
   c195e:	d12d      	bne.n	c19bc <_strtod_l+0x384>
   c1960:	499a      	ldr	r1, [pc, #616]	; (c1bcc <_strtod_l+0x594>)
   c1962:	aa1a      	add	r2, sp, #104	; 0x68
   c1964:	a817      	add	r0, sp, #92	; 0x5c
   c1966:	f001 f945 	bl	c2bf4 <__hexnan>
   c196a:	2805      	cmp	r0, #5
   c196c:	d126      	bne.n	c19bc <_strtod_l+0x384>
   c196e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c1970:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c1974:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c1978:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c197c:	e6a0      	b.n	c16c0 <_strtod_l+0x88>
   c197e:	210a      	movs	r1, #10
   c1980:	fb01 2e0e 	mla	lr, r1, lr, r2
   c1984:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c1988:	e7b9      	b.n	c18fe <_strtod_l+0x2c6>
   c198a:	2a6e      	cmp	r2, #110	; 0x6e
   c198c:	e7db      	b.n	c1946 <_strtod_l+0x30e>
   c198e:	4990      	ldr	r1, [pc, #576]	; (c1bd0 <_strtod_l+0x598>)
   c1990:	a817      	add	r0, sp, #92	; 0x5c
   c1992:	f001 f91b 	bl	c2bcc <__match>
   c1996:	2800      	cmp	r0, #0
   c1998:	f43f aeb0 	beq.w	c16fc <_strtod_l+0xc4>
   c199c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c199e:	498d      	ldr	r1, [pc, #564]	; (c1bd4 <_strtod_l+0x59c>)
   c19a0:	3b01      	subs	r3, #1
   c19a2:	a817      	add	r0, sp, #92	; 0x5c
   c19a4:	9317      	str	r3, [sp, #92]	; 0x5c
   c19a6:	f001 f911 	bl	c2bcc <__match>
   c19aa:	b910      	cbnz	r0, c19b2 <_strtod_l+0x37a>
   c19ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c19ae:	3301      	adds	r3, #1
   c19b0:	9317      	str	r3, [sp, #92]	; 0x5c
   c19b2:	f8df b230 	ldr.w	fp, [pc, #560]	; c1be4 <_strtod_l+0x5ac>
   c19b6:	f04f 0a00 	mov.w	sl, #0
   c19ba:	e681      	b.n	c16c0 <_strtod_l+0x88>
   c19bc:	4886      	ldr	r0, [pc, #536]	; (c1bd8 <_strtod_l+0x5a0>)
   c19be:	f7fe ff6b 	bl	c0898 <nan>
   c19c2:	ec5b ab10 	vmov	sl, fp, d0
   c19c6:	e67b      	b.n	c16c0 <_strtod_l+0x88>
   c19c8:	9b05      	ldr	r3, [sp, #20]
   c19ca:	9807      	ldr	r0, [sp, #28]
   c19cc:	1af3      	subs	r3, r6, r3
   c19ce:	2f00      	cmp	r7, #0
   c19d0:	bf08      	it	eq
   c19d2:	462f      	moveq	r7, r5
   c19d4:	2d10      	cmp	r5, #16
   c19d6:	9306      	str	r3, [sp, #24]
   c19d8:	46a8      	mov	r8, r5
   c19da:	bfa8      	it	ge
   c19dc:	f04f 0810 	movge.w	r8, #16
   c19e0:	f7ff f8a4 	bl	c0b2c <__aeabi_ui2d>
   c19e4:	2d09      	cmp	r5, #9
   c19e6:	4682      	mov	sl, r0
   c19e8:	468b      	mov	fp, r1
   c19ea:	dd13      	ble.n	c1a14 <_strtod_l+0x3dc>
   c19ec:	4b7b      	ldr	r3, [pc, #492]	; (c1bdc <_strtod_l+0x5a4>)
   c19ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c19f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c19f6:	f7ff f913 	bl	c0c20 <__aeabi_dmul>
   c19fa:	4682      	mov	sl, r0
   c19fc:	4648      	mov	r0, r9
   c19fe:	468b      	mov	fp, r1
   c1a00:	f7ff f894 	bl	c0b2c <__aeabi_ui2d>
   c1a04:	4602      	mov	r2, r0
   c1a06:	460b      	mov	r3, r1
   c1a08:	4650      	mov	r0, sl
   c1a0a:	4659      	mov	r1, fp
   c1a0c:	f7fe ff52 	bl	c08b4 <__adddf3>
   c1a10:	4682      	mov	sl, r0
   c1a12:	468b      	mov	fp, r1
   c1a14:	2d0f      	cmp	r5, #15
   c1a16:	dc38      	bgt.n	c1a8a <_strtod_l+0x452>
   c1a18:	9b06      	ldr	r3, [sp, #24]
   c1a1a:	2b00      	cmp	r3, #0
   c1a1c:	f43f ae50 	beq.w	c16c0 <_strtod_l+0x88>
   c1a20:	dd24      	ble.n	c1a6c <_strtod_l+0x434>
   c1a22:	2b16      	cmp	r3, #22
   c1a24:	dc0b      	bgt.n	c1a3e <_strtod_l+0x406>
   c1a26:	496d      	ldr	r1, [pc, #436]	; (c1bdc <_strtod_l+0x5a4>)
   c1a28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c1a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1a30:	4652      	mov	r2, sl
   c1a32:	465b      	mov	r3, fp
   c1a34:	f7ff f8f4 	bl	c0c20 <__aeabi_dmul>
   c1a38:	4682      	mov	sl, r0
   c1a3a:	468b      	mov	fp, r1
   c1a3c:	e640      	b.n	c16c0 <_strtod_l+0x88>
   c1a3e:	9a06      	ldr	r2, [sp, #24]
   c1a40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c1a44:	4293      	cmp	r3, r2
   c1a46:	db20      	blt.n	c1a8a <_strtod_l+0x452>
   c1a48:	4c64      	ldr	r4, [pc, #400]	; (c1bdc <_strtod_l+0x5a4>)
   c1a4a:	f1c5 050f 	rsb	r5, r5, #15
   c1a4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c1a52:	4652      	mov	r2, sl
   c1a54:	465b      	mov	r3, fp
   c1a56:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1a5a:	f7ff f8e1 	bl	c0c20 <__aeabi_dmul>
   c1a5e:	9b06      	ldr	r3, [sp, #24]
   c1a60:	1b5d      	subs	r5, r3, r5
   c1a62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c1a66:	e9d4 2300 	ldrd	r2, r3, [r4]
   c1a6a:	e7e3      	b.n	c1a34 <_strtod_l+0x3fc>
   c1a6c:	9b06      	ldr	r3, [sp, #24]
   c1a6e:	3316      	adds	r3, #22
   c1a70:	db0b      	blt.n	c1a8a <_strtod_l+0x452>
   c1a72:	9b05      	ldr	r3, [sp, #20]
   c1a74:	1b9e      	subs	r6, r3, r6
   c1a76:	4b59      	ldr	r3, [pc, #356]	; (c1bdc <_strtod_l+0x5a4>)
   c1a78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c1a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c1a80:	4650      	mov	r0, sl
   c1a82:	4659      	mov	r1, fp
   c1a84:	f7ff f9f6 	bl	c0e74 <__aeabi_ddiv>
   c1a88:	e7d6      	b.n	c1a38 <_strtod_l+0x400>
   c1a8a:	9b06      	ldr	r3, [sp, #24]
   c1a8c:	eba5 0808 	sub.w	r8, r5, r8
   c1a90:	4498      	add	r8, r3
   c1a92:	f1b8 0f00 	cmp.w	r8, #0
   c1a96:	dd74      	ble.n	c1b82 <_strtod_l+0x54a>
   c1a98:	f018 030f 	ands.w	r3, r8, #15
   c1a9c:	d00a      	beq.n	c1ab4 <_strtod_l+0x47c>
   c1a9e:	494f      	ldr	r1, [pc, #316]	; (c1bdc <_strtod_l+0x5a4>)
   c1aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c1aa4:	4652      	mov	r2, sl
   c1aa6:	465b      	mov	r3, fp
   c1aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1aac:	f7ff f8b8 	bl	c0c20 <__aeabi_dmul>
   c1ab0:	4682      	mov	sl, r0
   c1ab2:	468b      	mov	fp, r1
   c1ab4:	f038 080f 	bics.w	r8, r8, #15
   c1ab8:	d04f      	beq.n	c1b5a <_strtod_l+0x522>
   c1aba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c1abe:	dd22      	ble.n	c1b06 <_strtod_l+0x4ce>
   c1ac0:	2500      	movs	r5, #0
   c1ac2:	462e      	mov	r6, r5
   c1ac4:	9507      	str	r5, [sp, #28]
   c1ac6:	9505      	str	r5, [sp, #20]
   c1ac8:	2322      	movs	r3, #34	; 0x22
   c1aca:	f8df b118 	ldr.w	fp, [pc, #280]	; c1be4 <_strtod_l+0x5ac>
   c1ace:	6023      	str	r3, [r4, #0]
   c1ad0:	f04f 0a00 	mov.w	sl, #0
   c1ad4:	9b07      	ldr	r3, [sp, #28]
   c1ad6:	2b00      	cmp	r3, #0
   c1ad8:	f43f adf2 	beq.w	c16c0 <_strtod_l+0x88>
   c1adc:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1ade:	4620      	mov	r0, r4
   c1ae0:	f001 f98c 	bl	c2dfc <_Bfree>
   c1ae4:	9905      	ldr	r1, [sp, #20]
   c1ae6:	4620      	mov	r0, r4
   c1ae8:	f001 f988 	bl	c2dfc <_Bfree>
   c1aec:	4631      	mov	r1, r6
   c1aee:	4620      	mov	r0, r4
   c1af0:	f001 f984 	bl	c2dfc <_Bfree>
   c1af4:	9907      	ldr	r1, [sp, #28]
   c1af6:	4620      	mov	r0, r4
   c1af8:	f001 f980 	bl	c2dfc <_Bfree>
   c1afc:	4629      	mov	r1, r5
   c1afe:	4620      	mov	r0, r4
   c1b00:	f001 f97c 	bl	c2dfc <_Bfree>
   c1b04:	e5dc      	b.n	c16c0 <_strtod_l+0x88>
   c1b06:	4b36      	ldr	r3, [pc, #216]	; (c1be0 <_strtod_l+0x5a8>)
   c1b08:	9304      	str	r3, [sp, #16]
   c1b0a:	2300      	movs	r3, #0
   c1b0c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1b10:	4650      	mov	r0, sl
   c1b12:	4659      	mov	r1, fp
   c1b14:	4699      	mov	r9, r3
   c1b16:	f1b8 0f01 	cmp.w	r8, #1
   c1b1a:	dc21      	bgt.n	c1b60 <_strtod_l+0x528>
   c1b1c:	b10b      	cbz	r3, c1b22 <_strtod_l+0x4ea>
   c1b1e:	4682      	mov	sl, r0
   c1b20:	468b      	mov	fp, r1
   c1b22:	4b2f      	ldr	r3, [pc, #188]	; (c1be0 <_strtod_l+0x5a8>)
   c1b24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c1b28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c1b2c:	4652      	mov	r2, sl
   c1b2e:	465b      	mov	r3, fp
   c1b30:	e9d9 0100 	ldrd	r0, r1, [r9]
   c1b34:	f7ff f874 	bl	c0c20 <__aeabi_dmul>
   c1b38:	4b2a      	ldr	r3, [pc, #168]	; (c1be4 <_strtod_l+0x5ac>)
   c1b3a:	460a      	mov	r2, r1
   c1b3c:	400b      	ands	r3, r1
   c1b3e:	492a      	ldr	r1, [pc, #168]	; (c1be8 <_strtod_l+0x5b0>)
   c1b40:	428b      	cmp	r3, r1
   c1b42:	4682      	mov	sl, r0
   c1b44:	d8bc      	bhi.n	c1ac0 <_strtod_l+0x488>
   c1b46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c1b4a:	428b      	cmp	r3, r1
   c1b4c:	bf86      	itte	hi
   c1b4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c1bec <_strtod_l+0x5b4>
   c1b52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c1b56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c1b5a:	2300      	movs	r3, #0
   c1b5c:	9304      	str	r3, [sp, #16]
   c1b5e:	e084      	b.n	c1c6a <_strtod_l+0x632>
   c1b60:	f018 0f01 	tst.w	r8, #1
   c1b64:	d005      	beq.n	c1b72 <_strtod_l+0x53a>
   c1b66:	9b04      	ldr	r3, [sp, #16]
   c1b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b6c:	f7ff f858 	bl	c0c20 <__aeabi_dmul>
   c1b70:	2301      	movs	r3, #1
   c1b72:	9a04      	ldr	r2, [sp, #16]
   c1b74:	3208      	adds	r2, #8
   c1b76:	f109 0901 	add.w	r9, r9, #1
   c1b7a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c1b7e:	9204      	str	r2, [sp, #16]
   c1b80:	e7c9      	b.n	c1b16 <_strtod_l+0x4de>
   c1b82:	d0ea      	beq.n	c1b5a <_strtod_l+0x522>
   c1b84:	f1c8 0800 	rsb	r8, r8, #0
   c1b88:	f018 020f 	ands.w	r2, r8, #15
   c1b8c:	d00a      	beq.n	c1ba4 <_strtod_l+0x56c>
   c1b8e:	4b13      	ldr	r3, [pc, #76]	; (c1bdc <_strtod_l+0x5a4>)
   c1b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c1b94:	4650      	mov	r0, sl
   c1b96:	4659      	mov	r1, fp
   c1b98:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b9c:	f7ff f96a 	bl	c0e74 <__aeabi_ddiv>
   c1ba0:	4682      	mov	sl, r0
   c1ba2:	468b      	mov	fp, r1
   c1ba4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c1ba8:	d0d7      	beq.n	c1b5a <_strtod_l+0x522>
   c1baa:	f1b8 0f1f 	cmp.w	r8, #31
   c1bae:	dd1f      	ble.n	c1bf0 <_strtod_l+0x5b8>
   c1bb0:	2500      	movs	r5, #0
   c1bb2:	462e      	mov	r6, r5
   c1bb4:	9507      	str	r5, [sp, #28]
   c1bb6:	9505      	str	r5, [sp, #20]
   c1bb8:	2322      	movs	r3, #34	; 0x22
   c1bba:	f04f 0a00 	mov.w	sl, #0
   c1bbe:	f04f 0b00 	mov.w	fp, #0
   c1bc2:	6023      	str	r3, [r4, #0]
   c1bc4:	e786      	b.n	c1ad4 <_strtod_l+0x49c>
   c1bc6:	bf00      	nop
   c1bc8:	000c5719 	.word	0x000c5719
   c1bcc:	000c5918 	.word	0x000c5918
   c1bd0:	000c571d 	.word	0x000c571d
   c1bd4:	000c58fb 	.word	0x000c58fb
   c1bd8:	000c5654 	.word	0x000c5654
   c1bdc:	000c5b68 	.word	0x000c5b68
   c1be0:	000c5b40 	.word	0x000c5b40
   c1be4:	7ff00000 	.word	0x7ff00000
   c1be8:	7ca00000 	.word	0x7ca00000
   c1bec:	7fefffff 	.word	0x7fefffff
   c1bf0:	f018 0310 	ands.w	r3, r8, #16
   c1bf4:	bf18      	it	ne
   c1bf6:	236a      	movne	r3, #106	; 0x6a
   c1bf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c1fa8 <_strtod_l+0x970>
   c1bfc:	9304      	str	r3, [sp, #16]
   c1bfe:	4650      	mov	r0, sl
   c1c00:	4659      	mov	r1, fp
   c1c02:	2300      	movs	r3, #0
   c1c04:	f018 0f01 	tst.w	r8, #1
   c1c08:	d004      	beq.n	c1c14 <_strtod_l+0x5dc>
   c1c0a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c1c0e:	f7ff f807 	bl	c0c20 <__aeabi_dmul>
   c1c12:	2301      	movs	r3, #1
   c1c14:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1c18:	f109 0908 	add.w	r9, r9, #8
   c1c1c:	d1f2      	bne.n	c1c04 <_strtod_l+0x5cc>
   c1c1e:	b10b      	cbz	r3, c1c24 <_strtod_l+0x5ec>
   c1c20:	4682      	mov	sl, r0
   c1c22:	468b      	mov	fp, r1
   c1c24:	9b04      	ldr	r3, [sp, #16]
   c1c26:	b1c3      	cbz	r3, c1c5a <_strtod_l+0x622>
   c1c28:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c1c2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1c30:	2b00      	cmp	r3, #0
   c1c32:	4659      	mov	r1, fp
   c1c34:	dd11      	ble.n	c1c5a <_strtod_l+0x622>
   c1c36:	2b1f      	cmp	r3, #31
   c1c38:	f340 8124 	ble.w	c1e84 <_strtod_l+0x84c>
   c1c3c:	2b34      	cmp	r3, #52	; 0x34
   c1c3e:	bfde      	ittt	le
   c1c40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1c44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c1c48:	fa03 f202 	lslle.w	r2, r3, r2
   c1c4c:	f04f 0a00 	mov.w	sl, #0
   c1c50:	bfcc      	ite	gt
   c1c52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1c56:	ea02 0b01 	andle.w	fp, r2, r1
   c1c5a:	2200      	movs	r2, #0
   c1c5c:	2300      	movs	r3, #0
   c1c5e:	4650      	mov	r0, sl
   c1c60:	4659      	mov	r1, fp
   c1c62:	f7ff fa45 	bl	c10f0 <__aeabi_dcmpeq>
   c1c66:	2800      	cmp	r0, #0
   c1c68:	d1a2      	bne.n	c1bb0 <_strtod_l+0x578>
   c1c6a:	9b07      	ldr	r3, [sp, #28]
   c1c6c:	9300      	str	r3, [sp, #0]
   c1c6e:	9908      	ldr	r1, [sp, #32]
   c1c70:	462b      	mov	r3, r5
   c1c72:	463a      	mov	r2, r7
   c1c74:	4620      	mov	r0, r4
   c1c76:	f001 f929 	bl	c2ecc <__s2b>
   c1c7a:	9007      	str	r0, [sp, #28]
   c1c7c:	2800      	cmp	r0, #0
   c1c7e:	f43f af1f 	beq.w	c1ac0 <_strtod_l+0x488>
   c1c82:	9b05      	ldr	r3, [sp, #20]
   c1c84:	1b9e      	subs	r6, r3, r6
   c1c86:	9b06      	ldr	r3, [sp, #24]
   c1c88:	2b00      	cmp	r3, #0
   c1c8a:	bfb4      	ite	lt
   c1c8c:	4633      	movlt	r3, r6
   c1c8e:	2300      	movge	r3, #0
   c1c90:	930c      	str	r3, [sp, #48]	; 0x30
   c1c92:	9b06      	ldr	r3, [sp, #24]
   c1c94:	2500      	movs	r5, #0
   c1c96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c1c9a:	9312      	str	r3, [sp, #72]	; 0x48
   c1c9c:	462e      	mov	r6, r5
   c1c9e:	9b07      	ldr	r3, [sp, #28]
   c1ca0:	4620      	mov	r0, r4
   c1ca2:	6859      	ldr	r1, [r3, #4]
   c1ca4:	f001 f86a 	bl	c2d7c <_Balloc>
   c1ca8:	9005      	str	r0, [sp, #20]
   c1caa:	2800      	cmp	r0, #0
   c1cac:	f43f af0c 	beq.w	c1ac8 <_strtod_l+0x490>
   c1cb0:	9b07      	ldr	r3, [sp, #28]
   c1cb2:	691a      	ldr	r2, [r3, #16]
   c1cb4:	3202      	adds	r2, #2
   c1cb6:	f103 010c 	add.w	r1, r3, #12
   c1cba:	0092      	lsls	r2, r2, #2
   c1cbc:	300c      	adds	r0, #12
   c1cbe:	f7ff fb67 	bl	c1390 <memcpy>
   c1cc2:	ec4b ab10 	vmov	d0, sl, fp
   c1cc6:	aa1a      	add	r2, sp, #104	; 0x68
   c1cc8:	a919      	add	r1, sp, #100	; 0x64
   c1cca:	4620      	mov	r0, r4
   c1ccc:	f001 fc44 	bl	c3558 <__d2b>
   c1cd0:	ec4b ab18 	vmov	d8, sl, fp
   c1cd4:	9018      	str	r0, [sp, #96]	; 0x60
   c1cd6:	2800      	cmp	r0, #0
   c1cd8:	f43f aef6 	beq.w	c1ac8 <_strtod_l+0x490>
   c1cdc:	2101      	movs	r1, #1
   c1cde:	4620      	mov	r0, r4
   c1ce0:	f001 f98e 	bl	c3000 <__i2b>
   c1ce4:	4606      	mov	r6, r0
   c1ce6:	2800      	cmp	r0, #0
   c1ce8:	f43f aeee 	beq.w	c1ac8 <_strtod_l+0x490>
   c1cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c1cee:	9904      	ldr	r1, [sp, #16]
   c1cf0:	2b00      	cmp	r3, #0
   c1cf2:	bfab      	itete	ge
   c1cf4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c1cf6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c1cf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c1cfa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c1cfe:	bfac      	ite	ge
   c1d00:	eb03 0902 	addge.w	r9, r3, r2
   c1d04:	1ad7      	sublt	r7, r2, r3
   c1d06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1d08:	eba3 0801 	sub.w	r8, r3, r1
   c1d0c:	4490      	add	r8, r2
   c1d0e:	4ba1      	ldr	r3, [pc, #644]	; (c1f94 <_strtod_l+0x95c>)
   c1d10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1d14:	4598      	cmp	r8, r3
   c1d16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c1d1a:	f280 80c7 	bge.w	c1eac <_strtod_l+0x874>
   c1d1e:	eba3 0308 	sub.w	r3, r3, r8
   c1d22:	2b1f      	cmp	r3, #31
   c1d24:	eba2 0203 	sub.w	r2, r2, r3
   c1d28:	f04f 0101 	mov.w	r1, #1
   c1d2c:	f300 80b1 	bgt.w	c1e92 <_strtod_l+0x85a>
   c1d30:	fa01 f303 	lsl.w	r3, r1, r3
   c1d34:	930d      	str	r3, [sp, #52]	; 0x34
   c1d36:	2300      	movs	r3, #0
   c1d38:	9308      	str	r3, [sp, #32]
   c1d3a:	eb09 0802 	add.w	r8, r9, r2
   c1d3e:	9b04      	ldr	r3, [sp, #16]
   c1d40:	45c1      	cmp	r9, r8
   c1d42:	4417      	add	r7, r2
   c1d44:	441f      	add	r7, r3
   c1d46:	464b      	mov	r3, r9
   c1d48:	bfa8      	it	ge
   c1d4a:	4643      	movge	r3, r8
   c1d4c:	42bb      	cmp	r3, r7
   c1d4e:	bfa8      	it	ge
   c1d50:	463b      	movge	r3, r7
   c1d52:	2b00      	cmp	r3, #0
   c1d54:	bfc2      	ittt	gt
   c1d56:	eba8 0803 	subgt.w	r8, r8, r3
   c1d5a:	1aff      	subgt	r7, r7, r3
   c1d5c:	eba9 0903 	subgt.w	r9, r9, r3
   c1d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c1d62:	2b00      	cmp	r3, #0
   c1d64:	dd17      	ble.n	c1d96 <_strtod_l+0x75e>
   c1d66:	4631      	mov	r1, r6
   c1d68:	461a      	mov	r2, r3
   c1d6a:	4620      	mov	r0, r4
   c1d6c:	f001 fa08 	bl	c3180 <__pow5mult>
   c1d70:	4606      	mov	r6, r0
   c1d72:	2800      	cmp	r0, #0
   c1d74:	f43f aea8 	beq.w	c1ac8 <_strtod_l+0x490>
   c1d78:	4601      	mov	r1, r0
   c1d7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1d7c:	4620      	mov	r0, r4
   c1d7e:	f001 f955 	bl	c302c <__multiply>
   c1d82:	900b      	str	r0, [sp, #44]	; 0x2c
   c1d84:	2800      	cmp	r0, #0
   c1d86:	f43f ae9f 	beq.w	c1ac8 <_strtod_l+0x490>
   c1d8a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1d8c:	4620      	mov	r0, r4
   c1d8e:	f001 f835 	bl	c2dfc <_Bfree>
   c1d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1d94:	9318      	str	r3, [sp, #96]	; 0x60
   c1d96:	f1b8 0f00 	cmp.w	r8, #0
   c1d9a:	f300 808c 	bgt.w	c1eb6 <_strtod_l+0x87e>
   c1d9e:	9b06      	ldr	r3, [sp, #24]
   c1da0:	2b00      	cmp	r3, #0
   c1da2:	dd08      	ble.n	c1db6 <_strtod_l+0x77e>
   c1da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c1da6:	9905      	ldr	r1, [sp, #20]
   c1da8:	4620      	mov	r0, r4
   c1daa:	f001 f9e9 	bl	c3180 <__pow5mult>
   c1dae:	9005      	str	r0, [sp, #20]
   c1db0:	2800      	cmp	r0, #0
   c1db2:	f43f ae89 	beq.w	c1ac8 <_strtod_l+0x490>
   c1db6:	2f00      	cmp	r7, #0
   c1db8:	dd08      	ble.n	c1dcc <_strtod_l+0x794>
   c1dba:	9905      	ldr	r1, [sp, #20]
   c1dbc:	463a      	mov	r2, r7
   c1dbe:	4620      	mov	r0, r4
   c1dc0:	f001 fa38 	bl	c3234 <__lshift>
   c1dc4:	9005      	str	r0, [sp, #20]
   c1dc6:	2800      	cmp	r0, #0
   c1dc8:	f43f ae7e 	beq.w	c1ac8 <_strtod_l+0x490>
   c1dcc:	f1b9 0f00 	cmp.w	r9, #0
   c1dd0:	dd08      	ble.n	c1de4 <_strtod_l+0x7ac>
   c1dd2:	4631      	mov	r1, r6
   c1dd4:	464a      	mov	r2, r9
   c1dd6:	4620      	mov	r0, r4
   c1dd8:	f001 fa2c 	bl	c3234 <__lshift>
   c1ddc:	4606      	mov	r6, r0
   c1dde:	2800      	cmp	r0, #0
   c1de0:	f43f ae72 	beq.w	c1ac8 <_strtod_l+0x490>
   c1de4:	9a05      	ldr	r2, [sp, #20]
   c1de6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1de8:	4620      	mov	r0, r4
   c1dea:	f001 faaf 	bl	c334c <__mdiff>
   c1dee:	4605      	mov	r5, r0
   c1df0:	2800      	cmp	r0, #0
   c1df2:	f43f ae69 	beq.w	c1ac8 <_strtod_l+0x490>
   c1df6:	68c3      	ldr	r3, [r0, #12]
   c1df8:	930b      	str	r3, [sp, #44]	; 0x2c
   c1dfa:	2300      	movs	r3, #0
   c1dfc:	60c3      	str	r3, [r0, #12]
   c1dfe:	4631      	mov	r1, r6
   c1e00:	f001 fa88 	bl	c3314 <__mcmp>
   c1e04:	2800      	cmp	r0, #0
   c1e06:	da60      	bge.n	c1eca <_strtod_l+0x892>
   c1e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1e0a:	ea53 030a 	orrs.w	r3, r3, sl
   c1e0e:	f040 8082 	bne.w	c1f16 <_strtod_l+0x8de>
   c1e12:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1e16:	2b00      	cmp	r3, #0
   c1e18:	d17d      	bne.n	c1f16 <_strtod_l+0x8de>
   c1e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1e1e:	0d1b      	lsrs	r3, r3, #20
   c1e20:	051b      	lsls	r3, r3, #20
   c1e22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1e26:	d976      	bls.n	c1f16 <_strtod_l+0x8de>
   c1e28:	696b      	ldr	r3, [r5, #20]
   c1e2a:	b913      	cbnz	r3, c1e32 <_strtod_l+0x7fa>
   c1e2c:	692b      	ldr	r3, [r5, #16]
   c1e2e:	2b01      	cmp	r3, #1
   c1e30:	dd71      	ble.n	c1f16 <_strtod_l+0x8de>
   c1e32:	4629      	mov	r1, r5
   c1e34:	2201      	movs	r2, #1
   c1e36:	4620      	mov	r0, r4
   c1e38:	f001 f9fc 	bl	c3234 <__lshift>
   c1e3c:	4631      	mov	r1, r6
   c1e3e:	4605      	mov	r5, r0
   c1e40:	f001 fa68 	bl	c3314 <__mcmp>
   c1e44:	2800      	cmp	r0, #0
   c1e46:	dd66      	ble.n	c1f16 <_strtod_l+0x8de>
   c1e48:	9904      	ldr	r1, [sp, #16]
   c1e4a:	4a53      	ldr	r2, [pc, #332]	; (c1f98 <_strtod_l+0x960>)
   c1e4c:	465b      	mov	r3, fp
   c1e4e:	2900      	cmp	r1, #0
   c1e50:	f000 8081 	beq.w	c1f56 <_strtod_l+0x91e>
   c1e54:	ea02 010b 	and.w	r1, r2, fp
   c1e58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c1e5c:	dc7b      	bgt.n	c1f56 <_strtod_l+0x91e>
   c1e5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1e62:	f77f aea9 	ble.w	c1bb8 <_strtod_l+0x580>
   c1e66:	4b4d      	ldr	r3, [pc, #308]	; (c1f9c <_strtod_l+0x964>)
   c1e68:	4650      	mov	r0, sl
   c1e6a:	4659      	mov	r1, fp
   c1e6c:	2200      	movs	r2, #0
   c1e6e:	f7fe fed7 	bl	c0c20 <__aeabi_dmul>
   c1e72:	460b      	mov	r3, r1
   c1e74:	4303      	orrs	r3, r0
   c1e76:	bf08      	it	eq
   c1e78:	2322      	moveq	r3, #34	; 0x22
   c1e7a:	4682      	mov	sl, r0
   c1e7c:	468b      	mov	fp, r1
   c1e7e:	bf08      	it	eq
   c1e80:	6023      	streq	r3, [r4, #0]
   c1e82:	e62b      	b.n	c1adc <_strtod_l+0x4a4>
   c1e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1e88:	fa02 f303 	lsl.w	r3, r2, r3
   c1e8c:	ea03 0a0a 	and.w	sl, r3, sl
   c1e90:	e6e3      	b.n	c1c5a <_strtod_l+0x622>
   c1e92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1e96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c1e9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c1e9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c1ea2:	fa01 f308 	lsl.w	r3, r1, r8
   c1ea6:	9308      	str	r3, [sp, #32]
   c1ea8:	910d      	str	r1, [sp, #52]	; 0x34
   c1eaa:	e746      	b.n	c1d3a <_strtod_l+0x702>
   c1eac:	2300      	movs	r3, #0
   c1eae:	9308      	str	r3, [sp, #32]
   c1eb0:	2301      	movs	r3, #1
   c1eb2:	930d      	str	r3, [sp, #52]	; 0x34
   c1eb4:	e741      	b.n	c1d3a <_strtod_l+0x702>
   c1eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1eb8:	4642      	mov	r2, r8
   c1eba:	4620      	mov	r0, r4
   c1ebc:	f001 f9ba 	bl	c3234 <__lshift>
   c1ec0:	9018      	str	r0, [sp, #96]	; 0x60
   c1ec2:	2800      	cmp	r0, #0
   c1ec4:	f47f af6b 	bne.w	c1d9e <_strtod_l+0x766>
   c1ec8:	e5fe      	b.n	c1ac8 <_strtod_l+0x490>
   c1eca:	465f      	mov	r7, fp
   c1ecc:	d16e      	bne.n	c1fac <_strtod_l+0x974>
   c1ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1ed0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1ed4:	b342      	cbz	r2, c1f28 <_strtod_l+0x8f0>
   c1ed6:	4a32      	ldr	r2, [pc, #200]	; (c1fa0 <_strtod_l+0x968>)
   c1ed8:	4293      	cmp	r3, r2
   c1eda:	d128      	bne.n	c1f2e <_strtod_l+0x8f6>
   c1edc:	9b04      	ldr	r3, [sp, #16]
   c1ede:	4651      	mov	r1, sl
   c1ee0:	b1eb      	cbz	r3, c1f1e <_strtod_l+0x8e6>
   c1ee2:	4b2d      	ldr	r3, [pc, #180]	; (c1f98 <_strtod_l+0x960>)
   c1ee4:	403b      	ands	r3, r7
   c1ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1eee:	d819      	bhi.n	c1f24 <_strtod_l+0x8ec>
   c1ef0:	0d1b      	lsrs	r3, r3, #20
   c1ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c1ef6:	fa02 f303 	lsl.w	r3, r2, r3
   c1efa:	4299      	cmp	r1, r3
   c1efc:	d117      	bne.n	c1f2e <_strtod_l+0x8f6>
   c1efe:	4b29      	ldr	r3, [pc, #164]	; (c1fa4 <_strtod_l+0x96c>)
   c1f00:	429f      	cmp	r7, r3
   c1f02:	d102      	bne.n	c1f0a <_strtod_l+0x8d2>
   c1f04:	3101      	adds	r1, #1
   c1f06:	f43f addf 	beq.w	c1ac8 <_strtod_l+0x490>
   c1f0a:	4b23      	ldr	r3, [pc, #140]	; (c1f98 <_strtod_l+0x960>)
   c1f0c:	403b      	ands	r3, r7
   c1f0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c1f12:	f04f 0a00 	mov.w	sl, #0
   c1f16:	9b04      	ldr	r3, [sp, #16]
   c1f18:	2b00      	cmp	r3, #0
   c1f1a:	d1a4      	bne.n	c1e66 <_strtod_l+0x82e>
   c1f1c:	e5de      	b.n	c1adc <_strtod_l+0x4a4>
   c1f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c1f22:	e7ea      	b.n	c1efa <_strtod_l+0x8c2>
   c1f24:	4613      	mov	r3, r2
   c1f26:	e7e8      	b.n	c1efa <_strtod_l+0x8c2>
   c1f28:	ea53 030a 	orrs.w	r3, r3, sl
   c1f2c:	d08c      	beq.n	c1e48 <_strtod_l+0x810>
   c1f2e:	9b08      	ldr	r3, [sp, #32]
   c1f30:	b1db      	cbz	r3, c1f6a <_strtod_l+0x932>
   c1f32:	423b      	tst	r3, r7
   c1f34:	d0ef      	beq.n	c1f16 <_strtod_l+0x8de>
   c1f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1f38:	9a04      	ldr	r2, [sp, #16]
   c1f3a:	4650      	mov	r0, sl
   c1f3c:	4659      	mov	r1, fp
   c1f3e:	b1c3      	cbz	r3, c1f72 <_strtod_l+0x93a>
   c1f40:	f7ff fb5c 	bl	c15fc <sulp>
   c1f44:	4602      	mov	r2, r0
   c1f46:	460b      	mov	r3, r1
   c1f48:	ec51 0b18 	vmov	r0, r1, d8
   c1f4c:	f7fe fcb2 	bl	c08b4 <__adddf3>
   c1f50:	4682      	mov	sl, r0
   c1f52:	468b      	mov	fp, r1
   c1f54:	e7df      	b.n	c1f16 <_strtod_l+0x8de>
   c1f56:	4013      	ands	r3, r2
   c1f58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c1f5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c1f60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c1f64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1f68:	e7d5      	b.n	c1f16 <_strtod_l+0x8de>
   c1f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1f6c:	ea13 0f0a 	tst.w	r3, sl
   c1f70:	e7e0      	b.n	c1f34 <_strtod_l+0x8fc>
   c1f72:	f7ff fb43 	bl	c15fc <sulp>
   c1f76:	4602      	mov	r2, r0
   c1f78:	460b      	mov	r3, r1
   c1f7a:	ec51 0b18 	vmov	r0, r1, d8
   c1f7e:	f7fe fc97 	bl	c08b0 <__aeabi_dsub>
   c1f82:	2200      	movs	r2, #0
   c1f84:	2300      	movs	r3, #0
   c1f86:	4682      	mov	sl, r0
   c1f88:	468b      	mov	fp, r1
   c1f8a:	f7ff f8b1 	bl	c10f0 <__aeabi_dcmpeq>
   c1f8e:	2800      	cmp	r0, #0
   c1f90:	d0c1      	beq.n	c1f16 <_strtod_l+0x8de>
   c1f92:	e611      	b.n	c1bb8 <_strtod_l+0x580>
   c1f94:	fffffc02 	.word	0xfffffc02
   c1f98:	7ff00000 	.word	0x7ff00000
   c1f9c:	39500000 	.word	0x39500000
   c1fa0:	000fffff 	.word	0x000fffff
   c1fa4:	7fefffff 	.word	0x7fefffff
   c1fa8:	000c5930 	.word	0x000c5930
   c1fac:	4631      	mov	r1, r6
   c1fae:	4628      	mov	r0, r5
   c1fb0:	f001 fb2e 	bl	c3610 <__ratio>
   c1fb4:	ec59 8b10 	vmov	r8, r9, d0
   c1fb8:	ee10 0a10 	vmov	r0, s0
   c1fbc:	2200      	movs	r2, #0
   c1fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c1fc2:	4649      	mov	r1, r9
   c1fc4:	f7ff f8a8 	bl	c1118 <__aeabi_dcmple>
   c1fc8:	2800      	cmp	r0, #0
   c1fca:	d07a      	beq.n	c20c2 <_strtod_l+0xa8a>
   c1fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1fce:	2b00      	cmp	r3, #0
   c1fd0:	d04a      	beq.n	c2068 <_strtod_l+0xa30>
   c1fd2:	4b95      	ldr	r3, [pc, #596]	; (c2228 <_strtod_l+0xbf0>)
   c1fd4:	2200      	movs	r2, #0
   c1fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1fda:	f8df 924c 	ldr.w	r9, [pc, #588]	; c2228 <_strtod_l+0xbf0>
   c1fde:	f04f 0800 	mov.w	r8, #0
   c1fe2:	4b92      	ldr	r3, [pc, #584]	; (c222c <_strtod_l+0xbf4>)
   c1fe4:	403b      	ands	r3, r7
   c1fe6:	930d      	str	r3, [sp, #52]	; 0x34
   c1fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1fea:	4b91      	ldr	r3, [pc, #580]	; (c2230 <_strtod_l+0xbf8>)
   c1fec:	429a      	cmp	r2, r3
   c1fee:	f040 80b0 	bne.w	c2152 <_strtod_l+0xb1a>
   c1ff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1ff6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c1ffa:	ec4b ab10 	vmov	d0, sl, fp
   c1ffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2002:	f001 fa2d 	bl	c3460 <__ulp>
   c2006:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c200a:	ec53 2b10 	vmov	r2, r3, d0
   c200e:	f7fe fe07 	bl	c0c20 <__aeabi_dmul>
   c2012:	4652      	mov	r2, sl
   c2014:	465b      	mov	r3, fp
   c2016:	f7fe fc4d 	bl	c08b4 <__adddf3>
   c201a:	460b      	mov	r3, r1
   c201c:	4983      	ldr	r1, [pc, #524]	; (c222c <_strtod_l+0xbf4>)
   c201e:	4a85      	ldr	r2, [pc, #532]	; (c2234 <_strtod_l+0xbfc>)
   c2020:	4019      	ands	r1, r3
   c2022:	4291      	cmp	r1, r2
   c2024:	4682      	mov	sl, r0
   c2026:	d960      	bls.n	c20ea <_strtod_l+0xab2>
   c2028:	ee18 3a90 	vmov	r3, s17
   c202c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c2030:	4293      	cmp	r3, r2
   c2032:	d104      	bne.n	c203e <_strtod_l+0xa06>
   c2034:	ee18 3a10 	vmov	r3, s16
   c2038:	3301      	adds	r3, #1
   c203a:	f43f ad45 	beq.w	c1ac8 <_strtod_l+0x490>
   c203e:	f8df b200 	ldr.w	fp, [pc, #512]	; c2240 <_strtod_l+0xc08>
   c2042:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2046:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2048:	4620      	mov	r0, r4
   c204a:	f000 fed7 	bl	c2dfc <_Bfree>
   c204e:	9905      	ldr	r1, [sp, #20]
   c2050:	4620      	mov	r0, r4
   c2052:	f000 fed3 	bl	c2dfc <_Bfree>
   c2056:	4631      	mov	r1, r6
   c2058:	4620      	mov	r0, r4
   c205a:	f000 fecf 	bl	c2dfc <_Bfree>
   c205e:	4629      	mov	r1, r5
   c2060:	4620      	mov	r0, r4
   c2062:	f000 fecb 	bl	c2dfc <_Bfree>
   c2066:	e61a      	b.n	c1c9e <_strtod_l+0x666>
   c2068:	f1ba 0f00 	cmp.w	sl, #0
   c206c:	d11b      	bne.n	c20a6 <_strtod_l+0xa6e>
   c206e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2072:	b9f3      	cbnz	r3, c20b2 <_strtod_l+0xa7a>
   c2074:	4b6c      	ldr	r3, [pc, #432]	; (c2228 <_strtod_l+0xbf0>)
   c2076:	2200      	movs	r2, #0
   c2078:	4640      	mov	r0, r8
   c207a:	4649      	mov	r1, r9
   c207c:	f7ff f842 	bl	c1104 <__aeabi_dcmplt>
   c2080:	b9d0      	cbnz	r0, c20b8 <_strtod_l+0xa80>
   c2082:	4640      	mov	r0, r8
   c2084:	4649      	mov	r1, r9
   c2086:	4b6c      	ldr	r3, [pc, #432]	; (c2238 <_strtod_l+0xc00>)
   c2088:	2200      	movs	r2, #0
   c208a:	f7fe fdc9 	bl	c0c20 <__aeabi_dmul>
   c208e:	4680      	mov	r8, r0
   c2090:	4689      	mov	r9, r1
   c2092:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c2096:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c209a:	9315      	str	r3, [sp, #84]	; 0x54
   c209c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c20a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c20a4:	e79d      	b.n	c1fe2 <_strtod_l+0x9aa>
   c20a6:	f1ba 0f01 	cmp.w	sl, #1
   c20aa:	d102      	bne.n	c20b2 <_strtod_l+0xa7a>
   c20ac:	2f00      	cmp	r7, #0
   c20ae:	f43f ad83 	beq.w	c1bb8 <_strtod_l+0x580>
   c20b2:	4b62      	ldr	r3, [pc, #392]	; (c223c <_strtod_l+0xc04>)
   c20b4:	2200      	movs	r2, #0
   c20b6:	e78e      	b.n	c1fd6 <_strtod_l+0x99e>
   c20b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c2238 <_strtod_l+0xc00>
   c20bc:	f04f 0800 	mov.w	r8, #0
   c20c0:	e7e7      	b.n	c2092 <_strtod_l+0xa5a>
   c20c2:	4b5d      	ldr	r3, [pc, #372]	; (c2238 <_strtod_l+0xc00>)
   c20c4:	4640      	mov	r0, r8
   c20c6:	4649      	mov	r1, r9
   c20c8:	2200      	movs	r2, #0
   c20ca:	f7fe fda9 	bl	c0c20 <__aeabi_dmul>
   c20ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c20d0:	4680      	mov	r8, r0
   c20d2:	4689      	mov	r9, r1
   c20d4:	b933      	cbnz	r3, c20e4 <_strtod_l+0xaac>
   c20d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c20da:	900e      	str	r0, [sp, #56]	; 0x38
   c20dc:	930f      	str	r3, [sp, #60]	; 0x3c
   c20de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c20e2:	e7dd      	b.n	c20a0 <_strtod_l+0xa68>
   c20e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c20e8:	e7f9      	b.n	c20de <_strtod_l+0xaa6>
   c20ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c20ee:	9b04      	ldr	r3, [sp, #16]
   c20f0:	2b00      	cmp	r3, #0
   c20f2:	d1a8      	bne.n	c2046 <_strtod_l+0xa0e>
   c20f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c20f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c20fa:	0d1b      	lsrs	r3, r3, #20
   c20fc:	051b      	lsls	r3, r3, #20
   c20fe:	429a      	cmp	r2, r3
   c2100:	d1a1      	bne.n	c2046 <_strtod_l+0xa0e>
   c2102:	4640      	mov	r0, r8
   c2104:	4649      	mov	r1, r9
   c2106:	f001 fb33 	bl	c3770 <__aeabi_d2lz>
   c210a:	f7fe fd5b 	bl	c0bc4 <__aeabi_l2d>
   c210e:	4602      	mov	r2, r0
   c2110:	460b      	mov	r3, r1
   c2112:	4640      	mov	r0, r8
   c2114:	4649      	mov	r1, r9
   c2116:	f7fe fbcb 	bl	c08b0 <__aeabi_dsub>
   c211a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c211c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2120:	ea43 030a 	orr.w	r3, r3, sl
   c2124:	4313      	orrs	r3, r2
   c2126:	4680      	mov	r8, r0
   c2128:	4689      	mov	r9, r1
   c212a:	d055      	beq.n	c21d8 <_strtod_l+0xba0>
   c212c:	a336      	add	r3, pc, #216	; (adr r3, c2208 <_strtod_l+0xbd0>)
   c212e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2132:	f7fe ffe7 	bl	c1104 <__aeabi_dcmplt>
   c2136:	2800      	cmp	r0, #0
   c2138:	f47f acd0 	bne.w	c1adc <_strtod_l+0x4a4>
   c213c:	a334      	add	r3, pc, #208	; (adr r3, c2210 <_strtod_l+0xbd8>)
   c213e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2142:	4640      	mov	r0, r8
   c2144:	4649      	mov	r1, r9
   c2146:	f7fe fffb 	bl	c1140 <__aeabi_dcmpgt>
   c214a:	2800      	cmp	r0, #0
   c214c:	f43f af7b 	beq.w	c2046 <_strtod_l+0xa0e>
   c2150:	e4c4      	b.n	c1adc <_strtod_l+0x4a4>
   c2152:	9b04      	ldr	r3, [sp, #16]
   c2154:	b333      	cbz	r3, c21a4 <_strtod_l+0xb6c>
   c2156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2158:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c215c:	d822      	bhi.n	c21a4 <_strtod_l+0xb6c>
   c215e:	a32e      	add	r3, pc, #184	; (adr r3, c2218 <_strtod_l+0xbe0>)
   c2160:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2164:	4640      	mov	r0, r8
   c2166:	4649      	mov	r1, r9
   c2168:	f7fe ffd6 	bl	c1118 <__aeabi_dcmple>
   c216c:	b1a0      	cbz	r0, c2198 <_strtod_l+0xb60>
   c216e:	4649      	mov	r1, r9
   c2170:	4640      	mov	r0, r8
   c2172:	f7ff f82d 	bl	c11d0 <__aeabi_d2uiz>
   c2176:	2801      	cmp	r0, #1
   c2178:	bf38      	it	cc
   c217a:	2001      	movcc	r0, #1
   c217c:	f7fe fcd6 	bl	c0b2c <__aeabi_ui2d>
   c2180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2182:	4680      	mov	r8, r0
   c2184:	4689      	mov	r9, r1
   c2186:	bb23      	cbnz	r3, c21d2 <_strtod_l+0xb9a>
   c2188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c218c:	9010      	str	r0, [sp, #64]	; 0x40
   c218e:	9311      	str	r3, [sp, #68]	; 0x44
   c2190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c2194:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2198:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c219a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c219c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c21a0:	1a9b      	subs	r3, r3, r2
   c21a2:	9309      	str	r3, [sp, #36]	; 0x24
   c21a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c21a8:	eeb0 0a48 	vmov.f32	s0, s16
   c21ac:	eef0 0a68 	vmov.f32	s1, s17
   c21b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c21b4:	f001 f954 	bl	c3460 <__ulp>
   c21b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c21bc:	ec53 2b10 	vmov	r2, r3, d0
   c21c0:	f7fe fd2e 	bl	c0c20 <__aeabi_dmul>
   c21c4:	ec53 2b18 	vmov	r2, r3, d8
   c21c8:	f7fe fb74 	bl	c08b4 <__adddf3>
   c21cc:	4682      	mov	sl, r0
   c21ce:	468b      	mov	fp, r1
   c21d0:	e78d      	b.n	c20ee <_strtod_l+0xab6>
   c21d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c21d6:	e7db      	b.n	c2190 <_strtod_l+0xb58>
   c21d8:	a311      	add	r3, pc, #68	; (adr r3, c2220 <_strtod_l+0xbe8>)
   c21da:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21de:	f7fe ff91 	bl	c1104 <__aeabi_dcmplt>
   c21e2:	e7b2      	b.n	c214a <_strtod_l+0xb12>
   c21e4:	2300      	movs	r3, #0
   c21e6:	930a      	str	r3, [sp, #40]	; 0x28
   c21e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c21ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c21ec:	6013      	str	r3, [r2, #0]
   c21ee:	f7ff ba6b 	b.w	c16c8 <_strtod_l+0x90>
   c21f2:	2a65      	cmp	r2, #101	; 0x65
   c21f4:	f43f ab5f 	beq.w	c18b6 <_strtod_l+0x27e>
   c21f8:	2a45      	cmp	r2, #69	; 0x45
   c21fa:	f43f ab5c 	beq.w	c18b6 <_strtod_l+0x27e>
   c21fe:	2301      	movs	r3, #1
   c2200:	f7ff bb94 	b.w	c192c <_strtod_l+0x2f4>
   c2204:	f3af 8000 	nop.w
   c2208:	94a03595 	.word	0x94a03595
   c220c:	3fdfffff 	.word	0x3fdfffff
   c2210:	35afe535 	.word	0x35afe535
   c2214:	3fe00000 	.word	0x3fe00000
   c2218:	ffc00000 	.word	0xffc00000
   c221c:	41dfffff 	.word	0x41dfffff
   c2220:	94a03595 	.word	0x94a03595
   c2224:	3fcfffff 	.word	0x3fcfffff
   c2228:	3ff00000 	.word	0x3ff00000
   c222c:	7ff00000 	.word	0x7ff00000
   c2230:	7fe00000 	.word	0x7fe00000
   c2234:	7c9fffff 	.word	0x7c9fffff
   c2238:	3fe00000 	.word	0x3fe00000
   c223c:	bff00000 	.word	0xbff00000
   c2240:	7fefffff 	.word	0x7fefffff

000c2244 <strtof>:
   c2244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2248:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c22f8 <strtof+0xb4>
   c224c:	4b26      	ldr	r3, [pc, #152]	; (c22e8 <strtof+0xa4>)
   c224e:	460a      	mov	r2, r1
   c2250:	ed2d 8b02 	vpush	{d8}
   c2254:	4601      	mov	r1, r0
   c2256:	f8d8 0000 	ldr.w	r0, [r8]
   c225a:	f7ff f9ed 	bl	c1638 <_strtod_l>
   c225e:	ec55 4b10 	vmov	r4, r5, d0
   c2262:	ee10 2a10 	vmov	r2, s0
   c2266:	ee10 0a10 	vmov	r0, s0
   c226a:	462b      	mov	r3, r5
   c226c:	4629      	mov	r1, r5
   c226e:	f7fe ff71 	bl	c1154 <__aeabi_dcmpun>
   c2272:	b190      	cbz	r0, c229a <strtof+0x56>
   c2274:	2d00      	cmp	r5, #0
   c2276:	481d      	ldr	r0, [pc, #116]	; (c22ec <strtof+0xa8>)
   c2278:	da09      	bge.n	c228e <strtof+0x4a>
   c227a:	f001 fa65 	bl	c3748 <nanf>
   c227e:	eeb1 8a40 	vneg.f32	s16, s0
   c2282:	eeb0 0a48 	vmov.f32	s0, s16
   c2286:	ecbd 8b02 	vpop	{d8}
   c228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c228e:	ecbd 8b02 	vpop	{d8}
   c2292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c2296:	f001 ba57 	b.w	c3748 <nanf>
   c229a:	4620      	mov	r0, r4
   c229c:	4629      	mov	r1, r5
   c229e:	f7fe ffb7 	bl	c1210 <__aeabi_d2f>
   c22a2:	ee08 0a10 	vmov	s16, r0
   c22a6:	eddf 7a12 	vldr	s15, [pc, #72]	; c22f0 <strtof+0xac>
   c22aa:	eeb0 7ac8 	vabs.f32	s14, s16
   c22ae:	eeb4 7a67 	vcmp.f32	s14, s15
   c22b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c22b6:	dde4      	ble.n	c2282 <strtof+0x3e>
   c22b8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c22bc:	4b0d      	ldr	r3, [pc, #52]	; (c22f4 <strtof+0xb0>)
   c22be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c22c2:	4620      	mov	r0, r4
   c22c4:	4639      	mov	r1, r7
   c22c6:	f7fe ff45 	bl	c1154 <__aeabi_dcmpun>
   c22ca:	b940      	cbnz	r0, c22de <strtof+0x9a>
   c22cc:	4b09      	ldr	r3, [pc, #36]	; (c22f4 <strtof+0xb0>)
   c22ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c22d2:	4620      	mov	r0, r4
   c22d4:	4639      	mov	r1, r7
   c22d6:	f7fe ff1f 	bl	c1118 <__aeabi_dcmple>
   c22da:	2800      	cmp	r0, #0
   c22dc:	d0d1      	beq.n	c2282 <strtof+0x3e>
   c22de:	f8d8 3000 	ldr.w	r3, [r8]
   c22e2:	2222      	movs	r2, #34	; 0x22
   c22e4:	601a      	str	r2, [r3, #0]
   c22e6:	e7cc      	b.n	c2282 <strtof+0x3e>
   c22e8:	2003d6f8 	.word	0x2003d6f8
   c22ec:	000c5654 	.word	0x000c5654
   c22f0:	7f7fffff 	.word	0x7f7fffff
   c22f4:	7fefffff 	.word	0x7fefffff
   c22f8:	2003d68c 	.word	0x2003d68c

000c22fc <__strtok_r>:
   c22fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   c22fe:	b908      	cbnz	r0, c2304 <__strtok_r+0x8>
   c2300:	6810      	ldr	r0, [r2, #0]
   c2302:	b188      	cbz	r0, c2328 <__strtok_r+0x2c>
   c2304:	4604      	mov	r4, r0
   c2306:	4620      	mov	r0, r4
   c2308:	f814 5b01 	ldrb.w	r5, [r4], #1
   c230c:	460f      	mov	r7, r1
   c230e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c2312:	b91e      	cbnz	r6, c231c <__strtok_r+0x20>
   c2314:	b965      	cbnz	r5, c2330 <__strtok_r+0x34>
   c2316:	6015      	str	r5, [r2, #0]
   c2318:	4628      	mov	r0, r5
   c231a:	e005      	b.n	c2328 <__strtok_r+0x2c>
   c231c:	42b5      	cmp	r5, r6
   c231e:	d1f6      	bne.n	c230e <__strtok_r+0x12>
   c2320:	2b00      	cmp	r3, #0
   c2322:	d1f0      	bne.n	c2306 <__strtok_r+0xa>
   c2324:	6014      	str	r4, [r2, #0]
   c2326:	7003      	strb	r3, [r0, #0]
   c2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c232a:	461c      	mov	r4, r3
   c232c:	e00c      	b.n	c2348 <__strtok_r+0x4c>
   c232e:	b915      	cbnz	r5, c2336 <__strtok_r+0x3a>
   c2330:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2334:	460e      	mov	r6, r1
   c2336:	f816 5b01 	ldrb.w	r5, [r6], #1
   c233a:	42ab      	cmp	r3, r5
   c233c:	d1f7      	bne.n	c232e <__strtok_r+0x32>
   c233e:	2b00      	cmp	r3, #0
   c2340:	d0f3      	beq.n	c232a <__strtok_r+0x2e>
   c2342:	2300      	movs	r3, #0
   c2344:	f804 3c01 	strb.w	r3, [r4, #-1]
   c2348:	6014      	str	r4, [r2, #0]
   c234a:	e7ed      	b.n	c2328 <__strtok_r+0x2c>

000c234c <strtok_r>:
   c234c:	2301      	movs	r3, #1
   c234e:	f7ff bfd5 	b.w	c22fc <__strtok_r>
	...

000c2354 <_strtol_l.constprop.0>:
   c2354:	2b01      	cmp	r3, #1
   c2356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c235a:	d001      	beq.n	c2360 <_strtol_l.constprop.0+0xc>
   c235c:	2b24      	cmp	r3, #36	; 0x24
   c235e:	d906      	bls.n	c236e <_strtol_l.constprop.0+0x1a>
   c2360:	f7fb f8a8 	bl	bd4b4 <__errno>
   c2364:	2316      	movs	r3, #22
   c2366:	6003      	str	r3, [r0, #0]
   c2368:	2000      	movs	r0, #0
   c236a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c236e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c2454 <_strtol_l.constprop.0+0x100>
   c2372:	460d      	mov	r5, r1
   c2374:	462e      	mov	r6, r5
   c2376:	f815 4b01 	ldrb.w	r4, [r5], #1
   c237a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c237e:	f017 0708 	ands.w	r7, r7, #8
   c2382:	d1f7      	bne.n	c2374 <_strtol_l.constprop.0+0x20>
   c2384:	2c2d      	cmp	r4, #45	; 0x2d
   c2386:	d132      	bne.n	c23ee <_strtol_l.constprop.0+0x9a>
   c2388:	782c      	ldrb	r4, [r5, #0]
   c238a:	2701      	movs	r7, #1
   c238c:	1cb5      	adds	r5, r6, #2
   c238e:	2b00      	cmp	r3, #0
   c2390:	d05b      	beq.n	c244a <_strtol_l.constprop.0+0xf6>
   c2392:	2b10      	cmp	r3, #16
   c2394:	d109      	bne.n	c23aa <_strtol_l.constprop.0+0x56>
   c2396:	2c30      	cmp	r4, #48	; 0x30
   c2398:	d107      	bne.n	c23aa <_strtol_l.constprop.0+0x56>
   c239a:	782c      	ldrb	r4, [r5, #0]
   c239c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c23a0:	2c58      	cmp	r4, #88	; 0x58
   c23a2:	d14d      	bne.n	c2440 <_strtol_l.constprop.0+0xec>
   c23a4:	786c      	ldrb	r4, [r5, #1]
   c23a6:	2310      	movs	r3, #16
   c23a8:	3502      	adds	r5, #2
   c23aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c23ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c23b2:	f04f 0c00 	mov.w	ip, #0
   c23b6:	fbb8 f9f3 	udiv	r9, r8, r3
   c23ba:	4666      	mov	r6, ip
   c23bc:	fb03 8a19 	mls	sl, r3, r9, r8
   c23c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c23c4:	f1be 0f09 	cmp.w	lr, #9
   c23c8:	d816      	bhi.n	c23f8 <_strtol_l.constprop.0+0xa4>
   c23ca:	4674      	mov	r4, lr
   c23cc:	42a3      	cmp	r3, r4
   c23ce:	dd24      	ble.n	c241a <_strtol_l.constprop.0+0xc6>
   c23d0:	f1bc 0f00 	cmp.w	ip, #0
   c23d4:	db1e      	blt.n	c2414 <_strtol_l.constprop.0+0xc0>
   c23d6:	45b1      	cmp	r9, r6
   c23d8:	d31c      	bcc.n	c2414 <_strtol_l.constprop.0+0xc0>
   c23da:	d101      	bne.n	c23e0 <_strtol_l.constprop.0+0x8c>
   c23dc:	45a2      	cmp	sl, r4
   c23de:	db19      	blt.n	c2414 <_strtol_l.constprop.0+0xc0>
   c23e0:	fb06 4603 	mla	r6, r6, r3, r4
   c23e4:	f04f 0c01 	mov.w	ip, #1
   c23e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   c23ec:	e7e8      	b.n	c23c0 <_strtol_l.constprop.0+0x6c>
   c23ee:	2c2b      	cmp	r4, #43	; 0x2b
   c23f0:	bf04      	itt	eq
   c23f2:	782c      	ldrbeq	r4, [r5, #0]
   c23f4:	1cb5      	addeq	r5, r6, #2
   c23f6:	e7ca      	b.n	c238e <_strtol_l.constprop.0+0x3a>
   c23f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c23fc:	f1be 0f19 	cmp.w	lr, #25
   c2400:	d801      	bhi.n	c2406 <_strtol_l.constprop.0+0xb2>
   c2402:	3c37      	subs	r4, #55	; 0x37
   c2404:	e7e2      	b.n	c23cc <_strtol_l.constprop.0+0x78>
   c2406:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c240a:	f1be 0f19 	cmp.w	lr, #25
   c240e:	d804      	bhi.n	c241a <_strtol_l.constprop.0+0xc6>
   c2410:	3c57      	subs	r4, #87	; 0x57
   c2412:	e7db      	b.n	c23cc <_strtol_l.constprop.0+0x78>
   c2414:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c2418:	e7e6      	b.n	c23e8 <_strtol_l.constprop.0+0x94>
   c241a:	f1bc 0f00 	cmp.w	ip, #0
   c241e:	da05      	bge.n	c242c <_strtol_l.constprop.0+0xd8>
   c2420:	2322      	movs	r3, #34	; 0x22
   c2422:	6003      	str	r3, [r0, #0]
   c2424:	4646      	mov	r6, r8
   c2426:	b942      	cbnz	r2, c243a <_strtol_l.constprop.0+0xe6>
   c2428:	4630      	mov	r0, r6
   c242a:	e79e      	b.n	c236a <_strtol_l.constprop.0+0x16>
   c242c:	b107      	cbz	r7, c2430 <_strtol_l.constprop.0+0xdc>
   c242e:	4276      	negs	r6, r6
   c2430:	2a00      	cmp	r2, #0
   c2432:	d0f9      	beq.n	c2428 <_strtol_l.constprop.0+0xd4>
   c2434:	f1bc 0f00 	cmp.w	ip, #0
   c2438:	d000      	beq.n	c243c <_strtol_l.constprop.0+0xe8>
   c243a:	1e69      	subs	r1, r5, #1
   c243c:	6011      	str	r1, [r2, #0]
   c243e:	e7f3      	b.n	c2428 <_strtol_l.constprop.0+0xd4>
   c2440:	2430      	movs	r4, #48	; 0x30
   c2442:	2b00      	cmp	r3, #0
   c2444:	d1b1      	bne.n	c23aa <_strtol_l.constprop.0+0x56>
   c2446:	2308      	movs	r3, #8
   c2448:	e7af      	b.n	c23aa <_strtol_l.constprop.0+0x56>
   c244a:	2c30      	cmp	r4, #48	; 0x30
   c244c:	d0a5      	beq.n	c239a <_strtol_l.constprop.0+0x46>
   c244e:	230a      	movs	r3, #10
   c2450:	e7ab      	b.n	c23aa <_strtol_l.constprop.0+0x56>
   c2452:	bf00      	nop
   c2454:	000c5959 	.word	0x000c5959

000c2458 <strtol>:
   c2458:	4613      	mov	r3, r2
   c245a:	460a      	mov	r2, r1
   c245c:	4601      	mov	r1, r0
   c245e:	4802      	ldr	r0, [pc, #8]	; (c2468 <strtol+0x10>)
   c2460:	6800      	ldr	r0, [r0, #0]
   c2462:	f7ff bf77 	b.w	c2354 <_strtol_l.constprop.0>
   c2466:	bf00      	nop
   c2468:	2003d68c 	.word	0x2003d68c

000c246c <close>:
   c246c:	4b02      	ldr	r3, [pc, #8]	; (c2478 <close+0xc>)
   c246e:	4601      	mov	r1, r0
   c2470:	6818      	ldr	r0, [r3, #0]
   c2472:	f000 b8c9 	b.w	c2608 <_close_r>
   c2476:	bf00      	nop
   c2478:	2003d68c 	.word	0x2003d68c

000c247c <fstat>:
   c247c:	4b02      	ldr	r3, [pc, #8]	; (c2488 <fstat+0xc>)
   c247e:	460a      	mov	r2, r1
   c2480:	4601      	mov	r1, r0
   c2482:	6818      	ldr	r0, [r3, #0]
   c2484:	f000 b8d0 	b.w	c2628 <_fstat_r>
   c2488:	2003d68c 	.word	0x2003d68c

000c248c <lseek>:
   c248c:	4613      	mov	r3, r2
   c248e:	460a      	mov	r2, r1
   c2490:	4601      	mov	r1, r0
   c2492:	4802      	ldr	r0, [pc, #8]	; (c249c <lseek+0x10>)
   c2494:	6800      	ldr	r0, [r0, #0]
   c2496:	f000 bc4d 	b.w	c2d34 <_lseek_r>
   c249a:	bf00      	nop
   c249c:	2003d68c 	.word	0x2003d68c

000c24a0 <open>:
   c24a0:	b40e      	push	{r1, r2, r3}
   c24a2:	b503      	push	{r0, r1, lr}
   c24a4:	ab03      	add	r3, sp, #12
   c24a6:	4601      	mov	r1, r0
   c24a8:	4806      	ldr	r0, [pc, #24]	; (c24c4 <open+0x24>)
   c24aa:	f853 2b04 	ldr.w	r2, [r3], #4
   c24ae:	9301      	str	r3, [sp, #4]
   c24b0:	6800      	ldr	r0, [r0, #0]
   c24b2:	9b04      	ldr	r3, [sp, #16]
   c24b4:	f001 f924 	bl	c3700 <_open_r>
   c24b8:	b002      	add	sp, #8
   c24ba:	f85d eb04 	ldr.w	lr, [sp], #4
   c24be:	b003      	add	sp, #12
   c24c0:	4770      	bx	lr
   c24c2:	bf00      	nop
   c24c4:	2003d68c 	.word	0x2003d68c

000c24c8 <read>:
   c24c8:	4613      	mov	r3, r2
   c24ca:	460a      	mov	r2, r1
   c24cc:	4601      	mov	r1, r0
   c24ce:	4802      	ldr	r0, [pc, #8]	; (c24d8 <read+0x10>)
   c24d0:	6800      	ldr	r0, [r0, #0]
   c24d2:	f001 b927 	b.w	c3724 <_read_r>
   c24d6:	bf00      	nop
   c24d8:	2003d68c 	.word	0x2003d68c

000c24dc <unlink>:
   c24dc:	4b02      	ldr	r3, [pc, #8]	; (c24e8 <unlink+0xc>)
   c24de:	4601      	mov	r1, r0
   c24e0:	6818      	ldr	r0, [r3, #0]
   c24e2:	f000 b80d 	b.w	c2500 <_unlink_r>
   c24e6:	bf00      	nop
   c24e8:	2003d68c 	.word	0x2003d68c

000c24ec <write>:
   c24ec:	4613      	mov	r3, r2
   c24ee:	460a      	mov	r2, r1
   c24f0:	4601      	mov	r1, r0
   c24f2:	4802      	ldr	r0, [pc, #8]	; (c24fc <write+0x10>)
   c24f4:	6800      	ldr	r0, [r0, #0]
   c24f6:	f000 b813 	b.w	c2520 <_write_r>
   c24fa:	bf00      	nop
   c24fc:	2003d68c 	.word	0x2003d68c

000c2500 <_unlink_r>:
   c2500:	b538      	push	{r3, r4, r5, lr}
   c2502:	4d06      	ldr	r5, [pc, #24]	; (c251c <_unlink_r+0x1c>)
   c2504:	2300      	movs	r3, #0
   c2506:	4604      	mov	r4, r0
   c2508:	4608      	mov	r0, r1
   c250a:	602b      	str	r3, [r5, #0]
   c250c:	f7fa fd5e 	bl	bcfcc <_unlink>
   c2510:	1c43      	adds	r3, r0, #1
   c2512:	d102      	bne.n	c251a <_unlink_r+0x1a>
   c2514:	682b      	ldr	r3, [r5, #0]
   c2516:	b103      	cbz	r3, c251a <_unlink_r+0x1a>
   c2518:	6023      	str	r3, [r4, #0]
   c251a:	bd38      	pop	{r3, r4, r5, pc}
   c251c:	2003e7f0 	.word	0x2003e7f0

000c2520 <_write_r>:
   c2520:	b538      	push	{r3, r4, r5, lr}
   c2522:	4d07      	ldr	r5, [pc, #28]	; (c2540 <_write_r+0x20>)
   c2524:	4604      	mov	r4, r0
   c2526:	4608      	mov	r0, r1
   c2528:	4611      	mov	r1, r2
   c252a:	2200      	movs	r2, #0
   c252c:	602a      	str	r2, [r5, #0]
   c252e:	461a      	mov	r2, r3
   c2530:	f7fa fd14 	bl	bcf5c <_write>
   c2534:	1c43      	adds	r3, r0, #1
   c2536:	d102      	bne.n	c253e <_write_r+0x1e>
   c2538:	682b      	ldr	r3, [r5, #0]
   c253a:	b103      	cbz	r3, c253e <_write_r+0x1e>
   c253c:	6023      	str	r3, [r4, #0]
   c253e:	bd38      	pop	{r3, r4, r5, pc}
   c2540:	2003e7f0 	.word	0x2003e7f0

000c2544 <__register_exitproc>:
   c2544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2548:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c2604 <__register_exitproc+0xc0>
   c254c:	4606      	mov	r6, r0
   c254e:	f8d8 0000 	ldr.w	r0, [r8]
   c2552:	461f      	mov	r7, r3
   c2554:	460d      	mov	r5, r1
   c2556:	4691      	mov	r9, r2
   c2558:	f000 fbe8 	bl	c2d2c <__retarget_lock_acquire_recursive>
   c255c:	4b25      	ldr	r3, [pc, #148]	; (c25f4 <__register_exitproc+0xb0>)
   c255e:	681c      	ldr	r4, [r3, #0]
   c2560:	b934      	cbnz	r4, c2570 <__register_exitproc+0x2c>
   c2562:	4c25      	ldr	r4, [pc, #148]	; (c25f8 <__register_exitproc+0xb4>)
   c2564:	601c      	str	r4, [r3, #0]
   c2566:	4b25      	ldr	r3, [pc, #148]	; (c25fc <__register_exitproc+0xb8>)
   c2568:	b113      	cbz	r3, c2570 <__register_exitproc+0x2c>
   c256a:	681b      	ldr	r3, [r3, #0]
   c256c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c2570:	6863      	ldr	r3, [r4, #4]
   c2572:	2b1f      	cmp	r3, #31
   c2574:	dd07      	ble.n	c2586 <__register_exitproc+0x42>
   c2576:	f8d8 0000 	ldr.w	r0, [r8]
   c257a:	f000 fbd9 	bl	c2d30 <__retarget_lock_release_recursive>
   c257e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2586:	b34e      	cbz	r6, c25dc <__register_exitproc+0x98>
   c2588:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c258c:	b988      	cbnz	r0, c25b2 <__register_exitproc+0x6e>
   c258e:	4b1c      	ldr	r3, [pc, #112]	; (c2600 <__register_exitproc+0xbc>)
   c2590:	b923      	cbnz	r3, c259c <__register_exitproc+0x58>
   c2592:	f8d8 0000 	ldr.w	r0, [r8]
   c2596:	f000 fbca 	bl	c2d2e <__retarget_lock_release>
   c259a:	e7f0      	b.n	c257e <__register_exitproc+0x3a>
   c259c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c25a0:	f7fa ff40 	bl	bd424 <malloc>
   c25a4:	2800      	cmp	r0, #0
   c25a6:	d0f4      	beq.n	c2592 <__register_exitproc+0x4e>
   c25a8:	2300      	movs	r3, #0
   c25aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c25ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c25b2:	6863      	ldr	r3, [r4, #4]
   c25b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c25b8:	2201      	movs	r2, #1
   c25ba:	409a      	lsls	r2, r3
   c25bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c25c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c25c4:	4313      	orrs	r3, r2
   c25c6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c25ca:	2e02      	cmp	r6, #2
   c25cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c25d0:	bf02      	ittt	eq
   c25d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c25d6:	4313      	orreq	r3, r2
   c25d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c25dc:	6863      	ldr	r3, [r4, #4]
   c25de:	f8d8 0000 	ldr.w	r0, [r8]
   c25e2:	1c5a      	adds	r2, r3, #1
   c25e4:	3302      	adds	r3, #2
   c25e6:	6062      	str	r2, [r4, #4]
   c25e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c25ec:	f000 fba0 	bl	c2d30 <__retarget_lock_release_recursive>
   c25f0:	2000      	movs	r0, #0
   c25f2:	e7c6      	b.n	c2582 <__register_exitproc+0x3e>
   c25f4:	2003e7e8 	.word	0x2003e7e8
   c25f8:	2003e75c 	.word	0x2003e75c
   c25fc:	00000000 	.word	0x00000000
   c2600:	000bd425 	.word	0x000bd425
   c2604:	2003d6f0 	.word	0x2003d6f0

000c2608 <_close_r>:
   c2608:	b538      	push	{r3, r4, r5, lr}
   c260a:	4d06      	ldr	r5, [pc, #24]	; (c2624 <_close_r+0x1c>)
   c260c:	2300      	movs	r3, #0
   c260e:	4604      	mov	r4, r0
   c2610:	4608      	mov	r0, r1
   c2612:	602b      	str	r3, [r5, #0]
   c2614:	f7fa fcb2 	bl	bcf7c <_close>
   c2618:	1c43      	adds	r3, r0, #1
   c261a:	d102      	bne.n	c2622 <_close_r+0x1a>
   c261c:	682b      	ldr	r3, [r5, #0]
   c261e:	b103      	cbz	r3, c2622 <_close_r+0x1a>
   c2620:	6023      	str	r3, [r4, #0]
   c2622:	bd38      	pop	{r3, r4, r5, pc}
   c2624:	2003e7f0 	.word	0x2003e7f0

000c2628 <_fstat_r>:
   c2628:	b538      	push	{r3, r4, r5, lr}
   c262a:	4d07      	ldr	r5, [pc, #28]	; (c2648 <_fstat_r+0x20>)
   c262c:	2300      	movs	r3, #0
   c262e:	4604      	mov	r4, r0
   c2630:	4608      	mov	r0, r1
   c2632:	4611      	mov	r1, r2
   c2634:	602b      	str	r3, [r5, #0]
   c2636:	f7fa fca9 	bl	bcf8c <_fstat>
   c263a:	1c43      	adds	r3, r0, #1
   c263c:	d102      	bne.n	c2644 <_fstat_r+0x1c>
   c263e:	682b      	ldr	r3, [r5, #0]
   c2640:	b103      	cbz	r3, c2644 <_fstat_r+0x1c>
   c2642:	6023      	str	r3, [r4, #0]
   c2644:	bd38      	pop	{r3, r4, r5, pc}
   c2646:	bf00      	nop
   c2648:	2003e7f0 	.word	0x2003e7f0

000c264c <rshift>:
   c264c:	6903      	ldr	r3, [r0, #16]
   c264e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c2652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c2656:	ea4f 1261 	mov.w	r2, r1, asr #5
   c265a:	f100 0414 	add.w	r4, r0, #20
   c265e:	dd45      	ble.n	c26ec <rshift+0xa0>
   c2660:	f011 011f 	ands.w	r1, r1, #31
   c2664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c2668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c266c:	d10c      	bne.n	c2688 <rshift+0x3c>
   c266e:	f100 0710 	add.w	r7, r0, #16
   c2672:	4629      	mov	r1, r5
   c2674:	42b1      	cmp	r1, r6
   c2676:	d334      	bcc.n	c26e2 <rshift+0x96>
   c2678:	1a9b      	subs	r3, r3, r2
   c267a:	009b      	lsls	r3, r3, #2
   c267c:	1eea      	subs	r2, r5, #3
   c267e:	4296      	cmp	r6, r2
   c2680:	bf38      	it	cc
   c2682:	2300      	movcc	r3, #0
   c2684:	4423      	add	r3, r4
   c2686:	e015      	b.n	c26b4 <rshift+0x68>
   c2688:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c268c:	f1c1 0820 	rsb	r8, r1, #32
   c2690:	40cf      	lsrs	r7, r1
   c2692:	f105 0e04 	add.w	lr, r5, #4
   c2696:	46a1      	mov	r9, r4
   c2698:	4576      	cmp	r6, lr
   c269a:	46f4      	mov	ip, lr
   c269c:	d815      	bhi.n	c26ca <rshift+0x7e>
   c269e:	1a9a      	subs	r2, r3, r2
   c26a0:	0092      	lsls	r2, r2, #2
   c26a2:	3a04      	subs	r2, #4
   c26a4:	3501      	adds	r5, #1
   c26a6:	42ae      	cmp	r6, r5
   c26a8:	bf38      	it	cc
   c26aa:	2200      	movcc	r2, #0
   c26ac:	18a3      	adds	r3, r4, r2
   c26ae:	50a7      	str	r7, [r4, r2]
   c26b0:	b107      	cbz	r7, c26b4 <rshift+0x68>
   c26b2:	3304      	adds	r3, #4
   c26b4:	1b1a      	subs	r2, r3, r4
   c26b6:	42a3      	cmp	r3, r4
   c26b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c26bc:	bf08      	it	eq
   c26be:	2300      	moveq	r3, #0
   c26c0:	6102      	str	r2, [r0, #16]
   c26c2:	bf08      	it	eq
   c26c4:	6143      	streq	r3, [r0, #20]
   c26c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c26ca:	f8dc c000 	ldr.w	ip, [ip]
   c26ce:	fa0c fc08 	lsl.w	ip, ip, r8
   c26d2:	ea4c 0707 	orr.w	r7, ip, r7
   c26d6:	f849 7b04 	str.w	r7, [r9], #4
   c26da:	f85e 7b04 	ldr.w	r7, [lr], #4
   c26de:	40cf      	lsrs	r7, r1
   c26e0:	e7da      	b.n	c2698 <rshift+0x4c>
   c26e2:	f851 cb04 	ldr.w	ip, [r1], #4
   c26e6:	f847 cf04 	str.w	ip, [r7, #4]!
   c26ea:	e7c3      	b.n	c2674 <rshift+0x28>
   c26ec:	4623      	mov	r3, r4
   c26ee:	e7e1      	b.n	c26b4 <rshift+0x68>

000c26f0 <__hexdig_fun>:
   c26f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c26f4:	2b09      	cmp	r3, #9
   c26f6:	d802      	bhi.n	c26fe <__hexdig_fun+0xe>
   c26f8:	3820      	subs	r0, #32
   c26fa:	b2c0      	uxtb	r0, r0
   c26fc:	4770      	bx	lr
   c26fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c2702:	2b05      	cmp	r3, #5
   c2704:	d801      	bhi.n	c270a <__hexdig_fun+0x1a>
   c2706:	3847      	subs	r0, #71	; 0x47
   c2708:	e7f7      	b.n	c26fa <__hexdig_fun+0xa>
   c270a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c270e:	2b05      	cmp	r3, #5
   c2710:	d801      	bhi.n	c2716 <__hexdig_fun+0x26>
   c2712:	3827      	subs	r0, #39	; 0x27
   c2714:	e7f1      	b.n	c26fa <__hexdig_fun+0xa>
   c2716:	2000      	movs	r0, #0
   c2718:	4770      	bx	lr
	...

000c271c <__gethex>:
   c271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2720:	ed2d 8b02 	vpush	{d8}
   c2724:	b089      	sub	sp, #36	; 0x24
   c2726:	ee08 0a10 	vmov	s16, r0
   c272a:	9304      	str	r3, [sp, #16]
   c272c:	4bb4      	ldr	r3, [pc, #720]	; (c2a00 <__gethex+0x2e4>)
   c272e:	681b      	ldr	r3, [r3, #0]
   c2730:	9301      	str	r3, [sp, #4]
   c2732:	4618      	mov	r0, r3
   c2734:	468b      	mov	fp, r1
   c2736:	4690      	mov	r8, r2
   c2738:	f7fe ff1d 	bl	c1576 <strlen>
   c273c:	9b01      	ldr	r3, [sp, #4]
   c273e:	f8db 2000 	ldr.w	r2, [fp]
   c2742:	4403      	add	r3, r0
   c2744:	4682      	mov	sl, r0
   c2746:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c274a:	9305      	str	r3, [sp, #20]
   c274c:	1c93      	adds	r3, r2, #2
   c274e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c2752:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c2756:	32fe      	adds	r2, #254	; 0xfe
   c2758:	18d1      	adds	r1, r2, r3
   c275a:	461f      	mov	r7, r3
   c275c:	f813 0b01 	ldrb.w	r0, [r3], #1
   c2760:	9100      	str	r1, [sp, #0]
   c2762:	2830      	cmp	r0, #48	; 0x30
   c2764:	d0f8      	beq.n	c2758 <__gethex+0x3c>
   c2766:	f7ff ffc3 	bl	c26f0 <__hexdig_fun>
   c276a:	4604      	mov	r4, r0
   c276c:	2800      	cmp	r0, #0
   c276e:	d13a      	bne.n	c27e6 <__gethex+0xca>
   c2770:	9901      	ldr	r1, [sp, #4]
   c2772:	4652      	mov	r2, sl
   c2774:	4638      	mov	r0, r7
   c2776:	f7fe ff06 	bl	c1586 <strncmp>
   c277a:	4605      	mov	r5, r0
   c277c:	2800      	cmp	r0, #0
   c277e:	d168      	bne.n	c2852 <__gethex+0x136>
   c2780:	f817 000a 	ldrb.w	r0, [r7, sl]
   c2784:	eb07 060a 	add.w	r6, r7, sl
   c2788:	f7ff ffb2 	bl	c26f0 <__hexdig_fun>
   c278c:	2800      	cmp	r0, #0
   c278e:	d062      	beq.n	c2856 <__gethex+0x13a>
   c2790:	4633      	mov	r3, r6
   c2792:	7818      	ldrb	r0, [r3, #0]
   c2794:	2830      	cmp	r0, #48	; 0x30
   c2796:	461f      	mov	r7, r3
   c2798:	f103 0301 	add.w	r3, r3, #1
   c279c:	d0f9      	beq.n	c2792 <__gethex+0x76>
   c279e:	f7ff ffa7 	bl	c26f0 <__hexdig_fun>
   c27a2:	2301      	movs	r3, #1
   c27a4:	fab0 f480 	clz	r4, r0
   c27a8:	0964      	lsrs	r4, r4, #5
   c27aa:	4635      	mov	r5, r6
   c27ac:	9300      	str	r3, [sp, #0]
   c27ae:	463a      	mov	r2, r7
   c27b0:	4616      	mov	r6, r2
   c27b2:	3201      	adds	r2, #1
   c27b4:	7830      	ldrb	r0, [r6, #0]
   c27b6:	f7ff ff9b 	bl	c26f0 <__hexdig_fun>
   c27ba:	2800      	cmp	r0, #0
   c27bc:	d1f8      	bne.n	c27b0 <__gethex+0x94>
   c27be:	9901      	ldr	r1, [sp, #4]
   c27c0:	4652      	mov	r2, sl
   c27c2:	4630      	mov	r0, r6
   c27c4:	f7fe fedf 	bl	c1586 <strncmp>
   c27c8:	b980      	cbnz	r0, c27ec <__gethex+0xd0>
   c27ca:	b94d      	cbnz	r5, c27e0 <__gethex+0xc4>
   c27cc:	eb06 050a 	add.w	r5, r6, sl
   c27d0:	462a      	mov	r2, r5
   c27d2:	4616      	mov	r6, r2
   c27d4:	3201      	adds	r2, #1
   c27d6:	7830      	ldrb	r0, [r6, #0]
   c27d8:	f7ff ff8a 	bl	c26f0 <__hexdig_fun>
   c27dc:	2800      	cmp	r0, #0
   c27de:	d1f8      	bne.n	c27d2 <__gethex+0xb6>
   c27e0:	1bad      	subs	r5, r5, r6
   c27e2:	00ad      	lsls	r5, r5, #2
   c27e4:	e004      	b.n	c27f0 <__gethex+0xd4>
   c27e6:	2400      	movs	r4, #0
   c27e8:	4625      	mov	r5, r4
   c27ea:	e7e0      	b.n	c27ae <__gethex+0x92>
   c27ec:	2d00      	cmp	r5, #0
   c27ee:	d1f7      	bne.n	c27e0 <__gethex+0xc4>
   c27f0:	7833      	ldrb	r3, [r6, #0]
   c27f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c27f6:	2b50      	cmp	r3, #80	; 0x50
   c27f8:	d13b      	bne.n	c2872 <__gethex+0x156>
   c27fa:	7873      	ldrb	r3, [r6, #1]
   c27fc:	2b2b      	cmp	r3, #43	; 0x2b
   c27fe:	d02c      	beq.n	c285a <__gethex+0x13e>
   c2800:	2b2d      	cmp	r3, #45	; 0x2d
   c2802:	d02e      	beq.n	c2862 <__gethex+0x146>
   c2804:	1c71      	adds	r1, r6, #1
   c2806:	f04f 0900 	mov.w	r9, #0
   c280a:	7808      	ldrb	r0, [r1, #0]
   c280c:	f7ff ff70 	bl	c26f0 <__hexdig_fun>
   c2810:	1e43      	subs	r3, r0, #1
   c2812:	b2db      	uxtb	r3, r3
   c2814:	2b18      	cmp	r3, #24
   c2816:	d82c      	bhi.n	c2872 <__gethex+0x156>
   c2818:	f1a0 0210 	sub.w	r2, r0, #16
   c281c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c2820:	f7ff ff66 	bl	c26f0 <__hexdig_fun>
   c2824:	1e43      	subs	r3, r0, #1
   c2826:	b2db      	uxtb	r3, r3
   c2828:	2b18      	cmp	r3, #24
   c282a:	d91d      	bls.n	c2868 <__gethex+0x14c>
   c282c:	f1b9 0f00 	cmp.w	r9, #0
   c2830:	d000      	beq.n	c2834 <__gethex+0x118>
   c2832:	4252      	negs	r2, r2
   c2834:	4415      	add	r5, r2
   c2836:	f8cb 1000 	str.w	r1, [fp]
   c283a:	b1e4      	cbz	r4, c2876 <__gethex+0x15a>
   c283c:	9b00      	ldr	r3, [sp, #0]
   c283e:	2b00      	cmp	r3, #0
   c2840:	bf14      	ite	ne
   c2842:	2700      	movne	r7, #0
   c2844:	2706      	moveq	r7, #6
   c2846:	4638      	mov	r0, r7
   c2848:	b009      	add	sp, #36	; 0x24
   c284a:	ecbd 8b02 	vpop	{d8}
   c284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2852:	463e      	mov	r6, r7
   c2854:	4625      	mov	r5, r4
   c2856:	2401      	movs	r4, #1
   c2858:	e7ca      	b.n	c27f0 <__gethex+0xd4>
   c285a:	f04f 0900 	mov.w	r9, #0
   c285e:	1cb1      	adds	r1, r6, #2
   c2860:	e7d3      	b.n	c280a <__gethex+0xee>
   c2862:	f04f 0901 	mov.w	r9, #1
   c2866:	e7fa      	b.n	c285e <__gethex+0x142>
   c2868:	230a      	movs	r3, #10
   c286a:	fb03 0202 	mla	r2, r3, r2, r0
   c286e:	3a10      	subs	r2, #16
   c2870:	e7d4      	b.n	c281c <__gethex+0x100>
   c2872:	4631      	mov	r1, r6
   c2874:	e7df      	b.n	c2836 <__gethex+0x11a>
   c2876:	1bf3      	subs	r3, r6, r7
   c2878:	3b01      	subs	r3, #1
   c287a:	4621      	mov	r1, r4
   c287c:	2b07      	cmp	r3, #7
   c287e:	dc0b      	bgt.n	c2898 <__gethex+0x17c>
   c2880:	ee18 0a10 	vmov	r0, s16
   c2884:	f000 fa7a 	bl	c2d7c <_Balloc>
   c2888:	4604      	mov	r4, r0
   c288a:	b940      	cbnz	r0, c289e <__gethex+0x182>
   c288c:	4b5d      	ldr	r3, [pc, #372]	; (c2a04 <__gethex+0x2e8>)
   c288e:	4602      	mov	r2, r0
   c2890:	21de      	movs	r1, #222	; 0xde
   c2892:	485d      	ldr	r0, [pc, #372]	; (c2a08 <__gethex+0x2ec>)
   c2894:	f7fa fe16 	bl	bd4c4 <__assert_func>
   c2898:	3101      	adds	r1, #1
   c289a:	105b      	asrs	r3, r3, #1
   c289c:	e7ee      	b.n	c287c <__gethex+0x160>
   c289e:	f100 0914 	add.w	r9, r0, #20
   c28a2:	f04f 0b00 	mov.w	fp, #0
   c28a6:	f1ca 0301 	rsb	r3, sl, #1
   c28aa:	f8cd 9008 	str.w	r9, [sp, #8]
   c28ae:	f8cd b000 	str.w	fp, [sp]
   c28b2:	9306      	str	r3, [sp, #24]
   c28b4:	42b7      	cmp	r7, r6
   c28b6:	d340      	bcc.n	c293a <__gethex+0x21e>
   c28b8:	9802      	ldr	r0, [sp, #8]
   c28ba:	9b00      	ldr	r3, [sp, #0]
   c28bc:	f840 3b04 	str.w	r3, [r0], #4
   c28c0:	eba0 0009 	sub.w	r0, r0, r9
   c28c4:	1080      	asrs	r0, r0, #2
   c28c6:	0146      	lsls	r6, r0, #5
   c28c8:	6120      	str	r0, [r4, #16]
   c28ca:	4618      	mov	r0, r3
   c28cc:	f000 fb48 	bl	c2f60 <__hi0bits>
   c28d0:	1a30      	subs	r0, r6, r0
   c28d2:	f8d8 6000 	ldr.w	r6, [r8]
   c28d6:	42b0      	cmp	r0, r6
   c28d8:	dd63      	ble.n	c29a2 <__gethex+0x286>
   c28da:	1b87      	subs	r7, r0, r6
   c28dc:	4639      	mov	r1, r7
   c28de:	4620      	mov	r0, r4
   c28e0:	f000 feec 	bl	c36bc <__any_on>
   c28e4:	4682      	mov	sl, r0
   c28e6:	b1a8      	cbz	r0, c2914 <__gethex+0x1f8>
   c28e8:	1e7b      	subs	r3, r7, #1
   c28ea:	1159      	asrs	r1, r3, #5
   c28ec:	f003 021f 	and.w	r2, r3, #31
   c28f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c28f4:	f04f 0a01 	mov.w	sl, #1
   c28f8:	fa0a f202 	lsl.w	r2, sl, r2
   c28fc:	420a      	tst	r2, r1
   c28fe:	d009      	beq.n	c2914 <__gethex+0x1f8>
   c2900:	4553      	cmp	r3, sl
   c2902:	dd05      	ble.n	c2910 <__gethex+0x1f4>
   c2904:	1eb9      	subs	r1, r7, #2
   c2906:	4620      	mov	r0, r4
   c2908:	f000 fed8 	bl	c36bc <__any_on>
   c290c:	2800      	cmp	r0, #0
   c290e:	d145      	bne.n	c299c <__gethex+0x280>
   c2910:	f04f 0a02 	mov.w	sl, #2
   c2914:	4639      	mov	r1, r7
   c2916:	4620      	mov	r0, r4
   c2918:	f7ff fe98 	bl	c264c <rshift>
   c291c:	443d      	add	r5, r7
   c291e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2922:	42ab      	cmp	r3, r5
   c2924:	da4c      	bge.n	c29c0 <__gethex+0x2a4>
   c2926:	ee18 0a10 	vmov	r0, s16
   c292a:	4621      	mov	r1, r4
   c292c:	f000 fa66 	bl	c2dfc <_Bfree>
   c2930:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2932:	2300      	movs	r3, #0
   c2934:	6013      	str	r3, [r2, #0]
   c2936:	27a3      	movs	r7, #163	; 0xa3
   c2938:	e785      	b.n	c2846 <__gethex+0x12a>
   c293a:	1e73      	subs	r3, r6, #1
   c293c:	9a05      	ldr	r2, [sp, #20]
   c293e:	9303      	str	r3, [sp, #12]
   c2940:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c2944:	4293      	cmp	r3, r2
   c2946:	d019      	beq.n	c297c <__gethex+0x260>
   c2948:	f1bb 0f20 	cmp.w	fp, #32
   c294c:	d107      	bne.n	c295e <__gethex+0x242>
   c294e:	9b02      	ldr	r3, [sp, #8]
   c2950:	9a00      	ldr	r2, [sp, #0]
   c2952:	f843 2b04 	str.w	r2, [r3], #4
   c2956:	9302      	str	r3, [sp, #8]
   c2958:	2300      	movs	r3, #0
   c295a:	9300      	str	r3, [sp, #0]
   c295c:	469b      	mov	fp, r3
   c295e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c2962:	f7ff fec5 	bl	c26f0 <__hexdig_fun>
   c2966:	9b00      	ldr	r3, [sp, #0]
   c2968:	f000 000f 	and.w	r0, r0, #15
   c296c:	fa00 f00b 	lsl.w	r0, r0, fp
   c2970:	4303      	orrs	r3, r0
   c2972:	9300      	str	r3, [sp, #0]
   c2974:	f10b 0b04 	add.w	fp, fp, #4
   c2978:	9b03      	ldr	r3, [sp, #12]
   c297a:	e00d      	b.n	c2998 <__gethex+0x27c>
   c297c:	9b03      	ldr	r3, [sp, #12]
   c297e:	9a06      	ldr	r2, [sp, #24]
   c2980:	4413      	add	r3, r2
   c2982:	42bb      	cmp	r3, r7
   c2984:	d3e0      	bcc.n	c2948 <__gethex+0x22c>
   c2986:	4618      	mov	r0, r3
   c2988:	9901      	ldr	r1, [sp, #4]
   c298a:	9307      	str	r3, [sp, #28]
   c298c:	4652      	mov	r2, sl
   c298e:	f7fe fdfa 	bl	c1586 <strncmp>
   c2992:	9b07      	ldr	r3, [sp, #28]
   c2994:	2800      	cmp	r0, #0
   c2996:	d1d7      	bne.n	c2948 <__gethex+0x22c>
   c2998:	461e      	mov	r6, r3
   c299a:	e78b      	b.n	c28b4 <__gethex+0x198>
   c299c:	f04f 0a03 	mov.w	sl, #3
   c29a0:	e7b8      	b.n	c2914 <__gethex+0x1f8>
   c29a2:	da0a      	bge.n	c29ba <__gethex+0x29e>
   c29a4:	1a37      	subs	r7, r6, r0
   c29a6:	4621      	mov	r1, r4
   c29a8:	ee18 0a10 	vmov	r0, s16
   c29ac:	463a      	mov	r2, r7
   c29ae:	f000 fc41 	bl	c3234 <__lshift>
   c29b2:	1bed      	subs	r5, r5, r7
   c29b4:	4604      	mov	r4, r0
   c29b6:	f100 0914 	add.w	r9, r0, #20
   c29ba:	f04f 0a00 	mov.w	sl, #0
   c29be:	e7ae      	b.n	c291e <__gethex+0x202>
   c29c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c29c4:	42a8      	cmp	r0, r5
   c29c6:	dd72      	ble.n	c2aae <__gethex+0x392>
   c29c8:	1b45      	subs	r5, r0, r5
   c29ca:	42ae      	cmp	r6, r5
   c29cc:	dc36      	bgt.n	c2a3c <__gethex+0x320>
   c29ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c29d2:	2b02      	cmp	r3, #2
   c29d4:	d02a      	beq.n	c2a2c <__gethex+0x310>
   c29d6:	2b03      	cmp	r3, #3
   c29d8:	d02c      	beq.n	c2a34 <__gethex+0x318>
   c29da:	2b01      	cmp	r3, #1
   c29dc:	d11c      	bne.n	c2a18 <__gethex+0x2fc>
   c29de:	42ae      	cmp	r6, r5
   c29e0:	d11a      	bne.n	c2a18 <__gethex+0x2fc>
   c29e2:	2e01      	cmp	r6, #1
   c29e4:	d112      	bne.n	c2a0c <__gethex+0x2f0>
   c29e6:	9a04      	ldr	r2, [sp, #16]
   c29e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c29ec:	6013      	str	r3, [r2, #0]
   c29ee:	2301      	movs	r3, #1
   c29f0:	6123      	str	r3, [r4, #16]
   c29f2:	f8c9 3000 	str.w	r3, [r9]
   c29f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c29f8:	2762      	movs	r7, #98	; 0x62
   c29fa:	601c      	str	r4, [r3, #0]
   c29fc:	e723      	b.n	c2846 <__gethex+0x12a>
   c29fe:	bf00      	nop
   c2a00:	000c5acc 	.word	0x000c5acc
   c2a04:	000c5a59 	.word	0x000c5a59
   c2a08:	000c5a6a 	.word	0x000c5a6a
   c2a0c:	1e71      	subs	r1, r6, #1
   c2a0e:	4620      	mov	r0, r4
   c2a10:	f000 fe54 	bl	c36bc <__any_on>
   c2a14:	2800      	cmp	r0, #0
   c2a16:	d1e6      	bne.n	c29e6 <__gethex+0x2ca>
   c2a18:	ee18 0a10 	vmov	r0, s16
   c2a1c:	4621      	mov	r1, r4
   c2a1e:	f000 f9ed 	bl	c2dfc <_Bfree>
   c2a22:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2a24:	2300      	movs	r3, #0
   c2a26:	6013      	str	r3, [r2, #0]
   c2a28:	2750      	movs	r7, #80	; 0x50
   c2a2a:	e70c      	b.n	c2846 <__gethex+0x12a>
   c2a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2a2e:	2b00      	cmp	r3, #0
   c2a30:	d1f2      	bne.n	c2a18 <__gethex+0x2fc>
   c2a32:	e7d8      	b.n	c29e6 <__gethex+0x2ca>
   c2a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2a36:	2b00      	cmp	r3, #0
   c2a38:	d1d5      	bne.n	c29e6 <__gethex+0x2ca>
   c2a3a:	e7ed      	b.n	c2a18 <__gethex+0x2fc>
   c2a3c:	1e6f      	subs	r7, r5, #1
   c2a3e:	f1ba 0f00 	cmp.w	sl, #0
   c2a42:	d131      	bne.n	c2aa8 <__gethex+0x38c>
   c2a44:	b127      	cbz	r7, c2a50 <__gethex+0x334>
   c2a46:	4639      	mov	r1, r7
   c2a48:	4620      	mov	r0, r4
   c2a4a:	f000 fe37 	bl	c36bc <__any_on>
   c2a4e:	4682      	mov	sl, r0
   c2a50:	117b      	asrs	r3, r7, #5
   c2a52:	2101      	movs	r1, #1
   c2a54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c2a58:	f007 071f 	and.w	r7, r7, #31
   c2a5c:	fa01 f707 	lsl.w	r7, r1, r7
   c2a60:	421f      	tst	r7, r3
   c2a62:	4629      	mov	r1, r5
   c2a64:	4620      	mov	r0, r4
   c2a66:	bf18      	it	ne
   c2a68:	f04a 0a02 	orrne.w	sl, sl, #2
   c2a6c:	1b76      	subs	r6, r6, r5
   c2a6e:	f7ff fded 	bl	c264c <rshift>
   c2a72:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c2a76:	2702      	movs	r7, #2
   c2a78:	f1ba 0f00 	cmp.w	sl, #0
   c2a7c:	d048      	beq.n	c2b10 <__gethex+0x3f4>
   c2a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c2a82:	2b02      	cmp	r3, #2
   c2a84:	d015      	beq.n	c2ab2 <__gethex+0x396>
   c2a86:	2b03      	cmp	r3, #3
   c2a88:	d017      	beq.n	c2aba <__gethex+0x39e>
   c2a8a:	2b01      	cmp	r3, #1
   c2a8c:	d109      	bne.n	c2aa2 <__gethex+0x386>
   c2a8e:	f01a 0f02 	tst.w	sl, #2
   c2a92:	d006      	beq.n	c2aa2 <__gethex+0x386>
   c2a94:	f8d9 0000 	ldr.w	r0, [r9]
   c2a98:	ea4a 0a00 	orr.w	sl, sl, r0
   c2a9c:	f01a 0f01 	tst.w	sl, #1
   c2aa0:	d10e      	bne.n	c2ac0 <__gethex+0x3a4>
   c2aa2:	f047 0710 	orr.w	r7, r7, #16
   c2aa6:	e033      	b.n	c2b10 <__gethex+0x3f4>
   c2aa8:	f04f 0a01 	mov.w	sl, #1
   c2aac:	e7d0      	b.n	c2a50 <__gethex+0x334>
   c2aae:	2701      	movs	r7, #1
   c2ab0:	e7e2      	b.n	c2a78 <__gethex+0x35c>
   c2ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2ab4:	f1c3 0301 	rsb	r3, r3, #1
   c2ab8:	9315      	str	r3, [sp, #84]	; 0x54
   c2aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2abc:	2b00      	cmp	r3, #0
   c2abe:	d0f0      	beq.n	c2aa2 <__gethex+0x386>
   c2ac0:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c2ac4:	f104 0314 	add.w	r3, r4, #20
   c2ac8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c2acc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c2ad0:	f04f 0c00 	mov.w	ip, #0
   c2ad4:	4618      	mov	r0, r3
   c2ad6:	f853 2b04 	ldr.w	r2, [r3], #4
   c2ada:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c2ade:	d01c      	beq.n	c2b1a <__gethex+0x3fe>
   c2ae0:	3201      	adds	r2, #1
   c2ae2:	6002      	str	r2, [r0, #0]
   c2ae4:	2f02      	cmp	r7, #2
   c2ae6:	f104 0314 	add.w	r3, r4, #20
   c2aea:	d13f      	bne.n	c2b6c <__gethex+0x450>
   c2aec:	f8d8 2000 	ldr.w	r2, [r8]
   c2af0:	3a01      	subs	r2, #1
   c2af2:	42b2      	cmp	r2, r6
   c2af4:	d10a      	bne.n	c2b0c <__gethex+0x3f0>
   c2af6:	1171      	asrs	r1, r6, #5
   c2af8:	2201      	movs	r2, #1
   c2afa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c2afe:	f006 061f 	and.w	r6, r6, #31
   c2b02:	fa02 f606 	lsl.w	r6, r2, r6
   c2b06:	421e      	tst	r6, r3
   c2b08:	bf18      	it	ne
   c2b0a:	4617      	movne	r7, r2
   c2b0c:	f047 0720 	orr.w	r7, r7, #32
   c2b10:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2b12:	601c      	str	r4, [r3, #0]
   c2b14:	9b04      	ldr	r3, [sp, #16]
   c2b16:	601d      	str	r5, [r3, #0]
   c2b18:	e695      	b.n	c2846 <__gethex+0x12a>
   c2b1a:	4299      	cmp	r1, r3
   c2b1c:	f843 cc04 	str.w	ip, [r3, #-4]
   c2b20:	d8d8      	bhi.n	c2ad4 <__gethex+0x3b8>
   c2b22:	68a3      	ldr	r3, [r4, #8]
   c2b24:	459b      	cmp	fp, r3
   c2b26:	db19      	blt.n	c2b5c <__gethex+0x440>
   c2b28:	6861      	ldr	r1, [r4, #4]
   c2b2a:	ee18 0a10 	vmov	r0, s16
   c2b2e:	3101      	adds	r1, #1
   c2b30:	f000 f924 	bl	c2d7c <_Balloc>
   c2b34:	4681      	mov	r9, r0
   c2b36:	b918      	cbnz	r0, c2b40 <__gethex+0x424>
   c2b38:	4b1a      	ldr	r3, [pc, #104]	; (c2ba4 <__gethex+0x488>)
   c2b3a:	4602      	mov	r2, r0
   c2b3c:	2184      	movs	r1, #132	; 0x84
   c2b3e:	e6a8      	b.n	c2892 <__gethex+0x176>
   c2b40:	6922      	ldr	r2, [r4, #16]
   c2b42:	3202      	adds	r2, #2
   c2b44:	f104 010c 	add.w	r1, r4, #12
   c2b48:	0092      	lsls	r2, r2, #2
   c2b4a:	300c      	adds	r0, #12
   c2b4c:	f7fe fc20 	bl	c1390 <memcpy>
   c2b50:	4621      	mov	r1, r4
   c2b52:	ee18 0a10 	vmov	r0, s16
   c2b56:	f000 f951 	bl	c2dfc <_Bfree>
   c2b5a:	464c      	mov	r4, r9
   c2b5c:	6923      	ldr	r3, [r4, #16]
   c2b5e:	1c5a      	adds	r2, r3, #1
   c2b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c2b64:	6122      	str	r2, [r4, #16]
   c2b66:	2201      	movs	r2, #1
   c2b68:	615a      	str	r2, [r3, #20]
   c2b6a:	e7bb      	b.n	c2ae4 <__gethex+0x3c8>
   c2b6c:	6922      	ldr	r2, [r4, #16]
   c2b6e:	455a      	cmp	r2, fp
   c2b70:	dd0b      	ble.n	c2b8a <__gethex+0x46e>
   c2b72:	2101      	movs	r1, #1
   c2b74:	4620      	mov	r0, r4
   c2b76:	f7ff fd69 	bl	c264c <rshift>
   c2b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2b7e:	3501      	adds	r5, #1
   c2b80:	42ab      	cmp	r3, r5
   c2b82:	f6ff aed0 	blt.w	c2926 <__gethex+0x20a>
   c2b86:	2701      	movs	r7, #1
   c2b88:	e7c0      	b.n	c2b0c <__gethex+0x3f0>
   c2b8a:	f016 061f 	ands.w	r6, r6, #31
   c2b8e:	d0fa      	beq.n	c2b86 <__gethex+0x46a>
   c2b90:	4453      	add	r3, sl
   c2b92:	f1c6 0620 	rsb	r6, r6, #32
   c2b96:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c2b9a:	f000 f9e1 	bl	c2f60 <__hi0bits>
   c2b9e:	42b0      	cmp	r0, r6
   c2ba0:	dbe7      	blt.n	c2b72 <__gethex+0x456>
   c2ba2:	e7f0      	b.n	c2b86 <__gethex+0x46a>
   c2ba4:	000c5a59 	.word	0x000c5a59

000c2ba8 <L_shift>:
   c2ba8:	f1c2 0208 	rsb	r2, r2, #8
   c2bac:	0092      	lsls	r2, r2, #2
   c2bae:	b570      	push	{r4, r5, r6, lr}
   c2bb0:	f1c2 0620 	rsb	r6, r2, #32
   c2bb4:	6843      	ldr	r3, [r0, #4]
   c2bb6:	6804      	ldr	r4, [r0, #0]
   c2bb8:	fa03 f506 	lsl.w	r5, r3, r6
   c2bbc:	432c      	orrs	r4, r5
   c2bbe:	40d3      	lsrs	r3, r2
   c2bc0:	6004      	str	r4, [r0, #0]
   c2bc2:	f840 3f04 	str.w	r3, [r0, #4]!
   c2bc6:	4288      	cmp	r0, r1
   c2bc8:	d3f4      	bcc.n	c2bb4 <L_shift+0xc>
   c2bca:	bd70      	pop	{r4, r5, r6, pc}

000c2bcc <__match>:
   c2bcc:	b530      	push	{r4, r5, lr}
   c2bce:	6803      	ldr	r3, [r0, #0]
   c2bd0:	3301      	adds	r3, #1
   c2bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2bd6:	b914      	cbnz	r4, c2bde <__match+0x12>
   c2bd8:	6003      	str	r3, [r0, #0]
   c2bda:	2001      	movs	r0, #1
   c2bdc:	bd30      	pop	{r4, r5, pc}
   c2bde:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2be2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c2be6:	2d19      	cmp	r5, #25
   c2be8:	bf98      	it	ls
   c2bea:	3220      	addls	r2, #32
   c2bec:	42a2      	cmp	r2, r4
   c2bee:	d0f0      	beq.n	c2bd2 <__match+0x6>
   c2bf0:	2000      	movs	r0, #0
   c2bf2:	e7f3      	b.n	c2bdc <__match+0x10>

000c2bf4 <__hexnan>:
   c2bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2bf8:	680b      	ldr	r3, [r1, #0]
   c2bfa:	115e      	asrs	r6, r3, #5
   c2bfc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2c00:	f013 031f 	ands.w	r3, r3, #31
   c2c04:	b087      	sub	sp, #28
   c2c06:	bf18      	it	ne
   c2c08:	3604      	addne	r6, #4
   c2c0a:	2500      	movs	r5, #0
   c2c0c:	1f37      	subs	r7, r6, #4
   c2c0e:	4690      	mov	r8, r2
   c2c10:	6802      	ldr	r2, [r0, #0]
   c2c12:	9301      	str	r3, [sp, #4]
   c2c14:	4682      	mov	sl, r0
   c2c16:	f846 5c04 	str.w	r5, [r6, #-4]
   c2c1a:	46b9      	mov	r9, r7
   c2c1c:	463c      	mov	r4, r7
   c2c1e:	9502      	str	r5, [sp, #8]
   c2c20:	46ab      	mov	fp, r5
   c2c22:	7851      	ldrb	r1, [r2, #1]
   c2c24:	1c53      	adds	r3, r2, #1
   c2c26:	9303      	str	r3, [sp, #12]
   c2c28:	b341      	cbz	r1, c2c7c <__hexnan+0x88>
   c2c2a:	4608      	mov	r0, r1
   c2c2c:	9205      	str	r2, [sp, #20]
   c2c2e:	9104      	str	r1, [sp, #16]
   c2c30:	f7ff fd5e 	bl	c26f0 <__hexdig_fun>
   c2c34:	2800      	cmp	r0, #0
   c2c36:	d14f      	bne.n	c2cd8 <__hexnan+0xe4>
   c2c38:	9904      	ldr	r1, [sp, #16]
   c2c3a:	9a05      	ldr	r2, [sp, #20]
   c2c3c:	2920      	cmp	r1, #32
   c2c3e:	d818      	bhi.n	c2c72 <__hexnan+0x7e>
   c2c40:	9b02      	ldr	r3, [sp, #8]
   c2c42:	459b      	cmp	fp, r3
   c2c44:	dd13      	ble.n	c2c6e <__hexnan+0x7a>
   c2c46:	454c      	cmp	r4, r9
   c2c48:	d206      	bcs.n	c2c58 <__hexnan+0x64>
   c2c4a:	2d07      	cmp	r5, #7
   c2c4c:	dc04      	bgt.n	c2c58 <__hexnan+0x64>
   c2c4e:	462a      	mov	r2, r5
   c2c50:	4649      	mov	r1, r9
   c2c52:	4620      	mov	r0, r4
   c2c54:	f7ff ffa8 	bl	c2ba8 <L_shift>
   c2c58:	4544      	cmp	r4, r8
   c2c5a:	d950      	bls.n	c2cfe <__hexnan+0x10a>
   c2c5c:	2300      	movs	r3, #0
   c2c5e:	f1a4 0904 	sub.w	r9, r4, #4
   c2c62:	f844 3c04 	str.w	r3, [r4, #-4]
   c2c66:	f8cd b008 	str.w	fp, [sp, #8]
   c2c6a:	464c      	mov	r4, r9
   c2c6c:	461d      	mov	r5, r3
   c2c6e:	9a03      	ldr	r2, [sp, #12]
   c2c70:	e7d7      	b.n	c2c22 <__hexnan+0x2e>
   c2c72:	2929      	cmp	r1, #41	; 0x29
   c2c74:	d156      	bne.n	c2d24 <__hexnan+0x130>
   c2c76:	3202      	adds	r2, #2
   c2c78:	f8ca 2000 	str.w	r2, [sl]
   c2c7c:	f1bb 0f00 	cmp.w	fp, #0
   c2c80:	d050      	beq.n	c2d24 <__hexnan+0x130>
   c2c82:	454c      	cmp	r4, r9
   c2c84:	d206      	bcs.n	c2c94 <__hexnan+0xa0>
   c2c86:	2d07      	cmp	r5, #7
   c2c88:	dc04      	bgt.n	c2c94 <__hexnan+0xa0>
   c2c8a:	462a      	mov	r2, r5
   c2c8c:	4649      	mov	r1, r9
   c2c8e:	4620      	mov	r0, r4
   c2c90:	f7ff ff8a 	bl	c2ba8 <L_shift>
   c2c94:	4544      	cmp	r4, r8
   c2c96:	d934      	bls.n	c2d02 <__hexnan+0x10e>
   c2c98:	f1a8 0204 	sub.w	r2, r8, #4
   c2c9c:	4623      	mov	r3, r4
   c2c9e:	f853 1b04 	ldr.w	r1, [r3], #4
   c2ca2:	f842 1f04 	str.w	r1, [r2, #4]!
   c2ca6:	429f      	cmp	r7, r3
   c2ca8:	d2f9      	bcs.n	c2c9e <__hexnan+0xaa>
   c2caa:	1b3b      	subs	r3, r7, r4
   c2cac:	f023 0303 	bic.w	r3, r3, #3
   c2cb0:	3304      	adds	r3, #4
   c2cb2:	3401      	adds	r4, #1
   c2cb4:	3e03      	subs	r6, #3
   c2cb6:	42b4      	cmp	r4, r6
   c2cb8:	bf88      	it	hi
   c2cba:	2304      	movhi	r3, #4
   c2cbc:	4443      	add	r3, r8
   c2cbe:	2200      	movs	r2, #0
   c2cc0:	f843 2b04 	str.w	r2, [r3], #4
   c2cc4:	429f      	cmp	r7, r3
   c2cc6:	d2fb      	bcs.n	c2cc0 <__hexnan+0xcc>
   c2cc8:	683b      	ldr	r3, [r7, #0]
   c2cca:	b91b      	cbnz	r3, c2cd4 <__hexnan+0xe0>
   c2ccc:	4547      	cmp	r7, r8
   c2cce:	d127      	bne.n	c2d20 <__hexnan+0x12c>
   c2cd0:	2301      	movs	r3, #1
   c2cd2:	603b      	str	r3, [r7, #0]
   c2cd4:	2005      	movs	r0, #5
   c2cd6:	e026      	b.n	c2d26 <__hexnan+0x132>
   c2cd8:	3501      	adds	r5, #1
   c2cda:	2d08      	cmp	r5, #8
   c2cdc:	f10b 0b01 	add.w	fp, fp, #1
   c2ce0:	dd06      	ble.n	c2cf0 <__hexnan+0xfc>
   c2ce2:	4544      	cmp	r4, r8
   c2ce4:	d9c3      	bls.n	c2c6e <__hexnan+0x7a>
   c2ce6:	2300      	movs	r3, #0
   c2ce8:	f844 3c04 	str.w	r3, [r4, #-4]
   c2cec:	2501      	movs	r5, #1
   c2cee:	3c04      	subs	r4, #4
   c2cf0:	6822      	ldr	r2, [r4, #0]
   c2cf2:	f000 000f 	and.w	r0, r0, #15
   c2cf6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c2cfa:	6022      	str	r2, [r4, #0]
   c2cfc:	e7b7      	b.n	c2c6e <__hexnan+0x7a>
   c2cfe:	2508      	movs	r5, #8
   c2d00:	e7b5      	b.n	c2c6e <__hexnan+0x7a>
   c2d02:	9b01      	ldr	r3, [sp, #4]
   c2d04:	2b00      	cmp	r3, #0
   c2d06:	d0df      	beq.n	c2cc8 <__hexnan+0xd4>
   c2d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2d0c:	f1c3 0320 	rsb	r3, r3, #32
   c2d10:	fa22 f303 	lsr.w	r3, r2, r3
   c2d14:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2d18:	401a      	ands	r2, r3
   c2d1a:	f846 2c04 	str.w	r2, [r6, #-4]
   c2d1e:	e7d3      	b.n	c2cc8 <__hexnan+0xd4>
   c2d20:	3f04      	subs	r7, #4
   c2d22:	e7d1      	b.n	c2cc8 <__hexnan+0xd4>
   c2d24:	2004      	movs	r0, #4
   c2d26:	b007      	add	sp, #28
   c2d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c2d2c <__retarget_lock_acquire_recursive>:
   c2d2c:	4770      	bx	lr

000c2d2e <__retarget_lock_release>:
   c2d2e:	4770      	bx	lr

000c2d30 <__retarget_lock_release_recursive>:
   c2d30:	4770      	bx	lr
	...

000c2d34 <_lseek_r>:
   c2d34:	b538      	push	{r3, r4, r5, lr}
   c2d36:	4d07      	ldr	r5, [pc, #28]	; (c2d54 <_lseek_r+0x20>)
   c2d38:	4604      	mov	r4, r0
   c2d3a:	4608      	mov	r0, r1
   c2d3c:	4611      	mov	r1, r2
   c2d3e:	2200      	movs	r2, #0
   c2d40:	602a      	str	r2, [r5, #0]
   c2d42:	461a      	mov	r2, r3
   c2d44:	f7fa f92a 	bl	bcf9c <_lseek>
   c2d48:	1c43      	adds	r3, r0, #1
   c2d4a:	d102      	bne.n	c2d52 <_lseek_r+0x1e>
   c2d4c:	682b      	ldr	r3, [r5, #0]
   c2d4e:	b103      	cbz	r3, c2d52 <_lseek_r+0x1e>
   c2d50:	6023      	str	r3, [r4, #0]
   c2d52:	bd38      	pop	{r3, r4, r5, pc}
   c2d54:	2003e7f0 	.word	0x2003e7f0

000c2d58 <__ascii_mbtowc>:
   c2d58:	b082      	sub	sp, #8
   c2d5a:	b901      	cbnz	r1, c2d5e <__ascii_mbtowc+0x6>
   c2d5c:	a901      	add	r1, sp, #4
   c2d5e:	b142      	cbz	r2, c2d72 <__ascii_mbtowc+0x1a>
   c2d60:	b14b      	cbz	r3, c2d76 <__ascii_mbtowc+0x1e>
   c2d62:	7813      	ldrb	r3, [r2, #0]
   c2d64:	600b      	str	r3, [r1, #0]
   c2d66:	7812      	ldrb	r2, [r2, #0]
   c2d68:	1e10      	subs	r0, r2, #0
   c2d6a:	bf18      	it	ne
   c2d6c:	2001      	movne	r0, #1
   c2d6e:	b002      	add	sp, #8
   c2d70:	4770      	bx	lr
   c2d72:	4610      	mov	r0, r2
   c2d74:	e7fb      	b.n	c2d6e <__ascii_mbtowc+0x16>
   c2d76:	f06f 0001 	mvn.w	r0, #1
   c2d7a:	e7f8      	b.n	c2d6e <__ascii_mbtowc+0x16>

000c2d7c <_Balloc>:
   c2d7c:	b570      	push	{r4, r5, r6, lr}
   c2d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2d80:	4604      	mov	r4, r0
   c2d82:	460d      	mov	r5, r1
   c2d84:	b976      	cbnz	r6, c2da4 <_Balloc+0x28>
   c2d86:	2010      	movs	r0, #16
   c2d88:	f7fa fb4c 	bl	bd424 <malloc>
   c2d8c:	4602      	mov	r2, r0
   c2d8e:	6260      	str	r0, [r4, #36]	; 0x24
   c2d90:	b920      	cbnz	r0, c2d9c <_Balloc+0x20>
   c2d92:	4b18      	ldr	r3, [pc, #96]	; (c2df4 <_Balloc+0x78>)
   c2d94:	4818      	ldr	r0, [pc, #96]	; (c2df8 <_Balloc+0x7c>)
   c2d96:	2166      	movs	r1, #102	; 0x66
   c2d98:	f7fa fb94 	bl	bd4c4 <__assert_func>
   c2d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2da0:	6006      	str	r6, [r0, #0]
   c2da2:	60c6      	str	r6, [r0, #12]
   c2da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c2da6:	68f3      	ldr	r3, [r6, #12]
   c2da8:	b183      	cbz	r3, c2dcc <_Balloc+0x50>
   c2daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2dac:	68db      	ldr	r3, [r3, #12]
   c2dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c2db2:	b9b8      	cbnz	r0, c2de4 <_Balloc+0x68>
   c2db4:	2101      	movs	r1, #1
   c2db6:	fa01 f605 	lsl.w	r6, r1, r5
   c2dba:	1d72      	adds	r2, r6, #5
   c2dbc:	0092      	lsls	r2, r2, #2
   c2dbe:	4620      	mov	r0, r4
   c2dc0:	f7fe fb16 	bl	c13f0 <_calloc_r>
   c2dc4:	b160      	cbz	r0, c2de0 <_Balloc+0x64>
   c2dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c2dca:	e00e      	b.n	c2dea <_Balloc+0x6e>
   c2dcc:	2221      	movs	r2, #33	; 0x21
   c2dce:	2104      	movs	r1, #4
   c2dd0:	4620      	mov	r0, r4
   c2dd2:	f7fe fb0d 	bl	c13f0 <_calloc_r>
   c2dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2dd8:	60f0      	str	r0, [r6, #12]
   c2dda:	68db      	ldr	r3, [r3, #12]
   c2ddc:	2b00      	cmp	r3, #0
   c2dde:	d1e4      	bne.n	c2daa <_Balloc+0x2e>
   c2de0:	2000      	movs	r0, #0
   c2de2:	bd70      	pop	{r4, r5, r6, pc}
   c2de4:	6802      	ldr	r2, [r0, #0]
   c2de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c2dea:	2300      	movs	r3, #0
   c2dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c2df0:	e7f7      	b.n	c2de2 <_Balloc+0x66>
   c2df2:	bf00      	nop
   c2df4:	000c5832 	.word	0x000c5832
   c2df8:	000c5ae0 	.word	0x000c5ae0

000c2dfc <_Bfree>:
   c2dfc:	b570      	push	{r4, r5, r6, lr}
   c2dfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2e00:	4605      	mov	r5, r0
   c2e02:	460c      	mov	r4, r1
   c2e04:	b976      	cbnz	r6, c2e24 <_Bfree+0x28>
   c2e06:	2010      	movs	r0, #16
   c2e08:	f7fa fb0c 	bl	bd424 <malloc>
   c2e0c:	4602      	mov	r2, r0
   c2e0e:	6268      	str	r0, [r5, #36]	; 0x24
   c2e10:	b920      	cbnz	r0, c2e1c <_Bfree+0x20>
   c2e12:	4b09      	ldr	r3, [pc, #36]	; (c2e38 <_Bfree+0x3c>)
   c2e14:	4809      	ldr	r0, [pc, #36]	; (c2e3c <_Bfree+0x40>)
   c2e16:	218a      	movs	r1, #138	; 0x8a
   c2e18:	f7fa fb54 	bl	bd4c4 <__assert_func>
   c2e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2e20:	6006      	str	r6, [r0, #0]
   c2e22:	60c6      	str	r6, [r0, #12]
   c2e24:	b13c      	cbz	r4, c2e36 <_Bfree+0x3a>
   c2e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2e28:	6862      	ldr	r2, [r4, #4]
   c2e2a:	68db      	ldr	r3, [r3, #12]
   c2e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2e30:	6021      	str	r1, [r4, #0]
   c2e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2e36:	bd70      	pop	{r4, r5, r6, pc}
   c2e38:	000c5832 	.word	0x000c5832
   c2e3c:	000c5ae0 	.word	0x000c5ae0

000c2e40 <__multadd>:
   c2e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2e44:	690d      	ldr	r5, [r1, #16]
   c2e46:	4607      	mov	r7, r0
   c2e48:	460c      	mov	r4, r1
   c2e4a:	461e      	mov	r6, r3
   c2e4c:	f101 0c14 	add.w	ip, r1, #20
   c2e50:	2000      	movs	r0, #0
   c2e52:	f8dc 3000 	ldr.w	r3, [ip]
   c2e56:	b299      	uxth	r1, r3
   c2e58:	fb02 6101 	mla	r1, r2, r1, r6
   c2e5c:	0c1e      	lsrs	r6, r3, #16
   c2e5e:	0c0b      	lsrs	r3, r1, #16
   c2e60:	fb02 3306 	mla	r3, r2, r6, r3
   c2e64:	b289      	uxth	r1, r1
   c2e66:	3001      	adds	r0, #1
   c2e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c2e6c:	4285      	cmp	r5, r0
   c2e6e:	f84c 1b04 	str.w	r1, [ip], #4
   c2e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2e76:	dcec      	bgt.n	c2e52 <__multadd+0x12>
   c2e78:	b30e      	cbz	r6, c2ebe <__multadd+0x7e>
   c2e7a:	68a3      	ldr	r3, [r4, #8]
   c2e7c:	42ab      	cmp	r3, r5
   c2e7e:	dc19      	bgt.n	c2eb4 <__multadd+0x74>
   c2e80:	6861      	ldr	r1, [r4, #4]
   c2e82:	4638      	mov	r0, r7
   c2e84:	3101      	adds	r1, #1
   c2e86:	f7ff ff79 	bl	c2d7c <_Balloc>
   c2e8a:	4680      	mov	r8, r0
   c2e8c:	b928      	cbnz	r0, c2e9a <__multadd+0x5a>
   c2e8e:	4602      	mov	r2, r0
   c2e90:	4b0c      	ldr	r3, [pc, #48]	; (c2ec4 <__multadd+0x84>)
   c2e92:	480d      	ldr	r0, [pc, #52]	; (c2ec8 <__multadd+0x88>)
   c2e94:	21b5      	movs	r1, #181	; 0xb5
   c2e96:	f7fa fb15 	bl	bd4c4 <__assert_func>
   c2e9a:	6922      	ldr	r2, [r4, #16]
   c2e9c:	3202      	adds	r2, #2
   c2e9e:	f104 010c 	add.w	r1, r4, #12
   c2ea2:	0092      	lsls	r2, r2, #2
   c2ea4:	300c      	adds	r0, #12
   c2ea6:	f7fe fa73 	bl	c1390 <memcpy>
   c2eaa:	4621      	mov	r1, r4
   c2eac:	4638      	mov	r0, r7
   c2eae:	f7ff ffa5 	bl	c2dfc <_Bfree>
   c2eb2:	4644      	mov	r4, r8
   c2eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c2eb8:	3501      	adds	r5, #1
   c2eba:	615e      	str	r6, [r3, #20]
   c2ebc:	6125      	str	r5, [r4, #16]
   c2ebe:	4620      	mov	r0, r4
   c2ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2ec4:	000c5a59 	.word	0x000c5a59
   c2ec8:	000c5ae0 	.word	0x000c5ae0

000c2ecc <__s2b>:
   c2ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2ed0:	460c      	mov	r4, r1
   c2ed2:	4615      	mov	r5, r2
   c2ed4:	461f      	mov	r7, r3
   c2ed6:	2209      	movs	r2, #9
   c2ed8:	3308      	adds	r3, #8
   c2eda:	4606      	mov	r6, r0
   c2edc:	fb93 f3f2 	sdiv	r3, r3, r2
   c2ee0:	2100      	movs	r1, #0
   c2ee2:	2201      	movs	r2, #1
   c2ee4:	429a      	cmp	r2, r3
   c2ee6:	db09      	blt.n	c2efc <__s2b+0x30>
   c2ee8:	4630      	mov	r0, r6
   c2eea:	f7ff ff47 	bl	c2d7c <_Balloc>
   c2eee:	b940      	cbnz	r0, c2f02 <__s2b+0x36>
   c2ef0:	4602      	mov	r2, r0
   c2ef2:	4b19      	ldr	r3, [pc, #100]	; (c2f58 <__s2b+0x8c>)
   c2ef4:	4819      	ldr	r0, [pc, #100]	; (c2f5c <__s2b+0x90>)
   c2ef6:	21ce      	movs	r1, #206	; 0xce
   c2ef8:	f7fa fae4 	bl	bd4c4 <__assert_func>
   c2efc:	0052      	lsls	r2, r2, #1
   c2efe:	3101      	adds	r1, #1
   c2f00:	e7f0      	b.n	c2ee4 <__s2b+0x18>
   c2f02:	9b08      	ldr	r3, [sp, #32]
   c2f04:	6143      	str	r3, [r0, #20]
   c2f06:	2d09      	cmp	r5, #9
   c2f08:	f04f 0301 	mov.w	r3, #1
   c2f0c:	6103      	str	r3, [r0, #16]
   c2f0e:	dd16      	ble.n	c2f3e <__s2b+0x72>
   c2f10:	f104 0909 	add.w	r9, r4, #9
   c2f14:	46c8      	mov	r8, r9
   c2f16:	442c      	add	r4, r5
   c2f18:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2f1c:	4601      	mov	r1, r0
   c2f1e:	3b30      	subs	r3, #48	; 0x30
   c2f20:	220a      	movs	r2, #10
   c2f22:	4630      	mov	r0, r6
   c2f24:	f7ff ff8c 	bl	c2e40 <__multadd>
   c2f28:	45a0      	cmp	r8, r4
   c2f2a:	d1f5      	bne.n	c2f18 <__s2b+0x4c>
   c2f2c:	f1a5 0408 	sub.w	r4, r5, #8
   c2f30:	444c      	add	r4, r9
   c2f32:	1b2d      	subs	r5, r5, r4
   c2f34:	1963      	adds	r3, r4, r5
   c2f36:	42bb      	cmp	r3, r7
   c2f38:	db04      	blt.n	c2f44 <__s2b+0x78>
   c2f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2f3e:	340a      	adds	r4, #10
   c2f40:	2509      	movs	r5, #9
   c2f42:	e7f6      	b.n	c2f32 <__s2b+0x66>
   c2f44:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2f48:	4601      	mov	r1, r0
   c2f4a:	3b30      	subs	r3, #48	; 0x30
   c2f4c:	220a      	movs	r2, #10
   c2f4e:	4630      	mov	r0, r6
   c2f50:	f7ff ff76 	bl	c2e40 <__multadd>
   c2f54:	e7ee      	b.n	c2f34 <__s2b+0x68>
   c2f56:	bf00      	nop
   c2f58:	000c5a59 	.word	0x000c5a59
   c2f5c:	000c5ae0 	.word	0x000c5ae0

000c2f60 <__hi0bits>:
   c2f60:	0c03      	lsrs	r3, r0, #16
   c2f62:	041b      	lsls	r3, r3, #16
   c2f64:	b9d3      	cbnz	r3, c2f9c <__hi0bits+0x3c>
   c2f66:	0400      	lsls	r0, r0, #16
   c2f68:	2310      	movs	r3, #16
   c2f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2f6e:	bf04      	itt	eq
   c2f70:	0200      	lsleq	r0, r0, #8
   c2f72:	3308      	addeq	r3, #8
   c2f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2f78:	bf04      	itt	eq
   c2f7a:	0100      	lsleq	r0, r0, #4
   c2f7c:	3304      	addeq	r3, #4
   c2f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2f82:	bf04      	itt	eq
   c2f84:	0080      	lsleq	r0, r0, #2
   c2f86:	3302      	addeq	r3, #2
   c2f88:	2800      	cmp	r0, #0
   c2f8a:	db05      	blt.n	c2f98 <__hi0bits+0x38>
   c2f8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2f90:	f103 0301 	add.w	r3, r3, #1
   c2f94:	bf08      	it	eq
   c2f96:	2320      	moveq	r3, #32
   c2f98:	4618      	mov	r0, r3
   c2f9a:	4770      	bx	lr
   c2f9c:	2300      	movs	r3, #0
   c2f9e:	e7e4      	b.n	c2f6a <__hi0bits+0xa>

000c2fa0 <__lo0bits>:
   c2fa0:	6803      	ldr	r3, [r0, #0]
   c2fa2:	f013 0207 	ands.w	r2, r3, #7
   c2fa6:	4601      	mov	r1, r0
   c2fa8:	d00b      	beq.n	c2fc2 <__lo0bits+0x22>
   c2faa:	07da      	lsls	r2, r3, #31
   c2fac:	d423      	bmi.n	c2ff6 <__lo0bits+0x56>
   c2fae:	0798      	lsls	r0, r3, #30
   c2fb0:	bf49      	itett	mi
   c2fb2:	085b      	lsrmi	r3, r3, #1
   c2fb4:	089b      	lsrpl	r3, r3, #2
   c2fb6:	2001      	movmi	r0, #1
   c2fb8:	600b      	strmi	r3, [r1, #0]
   c2fba:	bf5c      	itt	pl
   c2fbc:	600b      	strpl	r3, [r1, #0]
   c2fbe:	2002      	movpl	r0, #2
   c2fc0:	4770      	bx	lr
   c2fc2:	b298      	uxth	r0, r3
   c2fc4:	b9a8      	cbnz	r0, c2ff2 <__lo0bits+0x52>
   c2fc6:	0c1b      	lsrs	r3, r3, #16
   c2fc8:	2010      	movs	r0, #16
   c2fca:	b2da      	uxtb	r2, r3
   c2fcc:	b90a      	cbnz	r2, c2fd2 <__lo0bits+0x32>
   c2fce:	3008      	adds	r0, #8
   c2fd0:	0a1b      	lsrs	r3, r3, #8
   c2fd2:	071a      	lsls	r2, r3, #28
   c2fd4:	bf04      	itt	eq
   c2fd6:	091b      	lsreq	r3, r3, #4
   c2fd8:	3004      	addeq	r0, #4
   c2fda:	079a      	lsls	r2, r3, #30
   c2fdc:	bf04      	itt	eq
   c2fde:	089b      	lsreq	r3, r3, #2
   c2fe0:	3002      	addeq	r0, #2
   c2fe2:	07da      	lsls	r2, r3, #31
   c2fe4:	d403      	bmi.n	c2fee <__lo0bits+0x4e>
   c2fe6:	085b      	lsrs	r3, r3, #1
   c2fe8:	f100 0001 	add.w	r0, r0, #1
   c2fec:	d005      	beq.n	c2ffa <__lo0bits+0x5a>
   c2fee:	600b      	str	r3, [r1, #0]
   c2ff0:	4770      	bx	lr
   c2ff2:	4610      	mov	r0, r2
   c2ff4:	e7e9      	b.n	c2fca <__lo0bits+0x2a>
   c2ff6:	2000      	movs	r0, #0
   c2ff8:	4770      	bx	lr
   c2ffa:	2020      	movs	r0, #32
   c2ffc:	4770      	bx	lr
	...

000c3000 <__i2b>:
   c3000:	b510      	push	{r4, lr}
   c3002:	460c      	mov	r4, r1
   c3004:	2101      	movs	r1, #1
   c3006:	f7ff feb9 	bl	c2d7c <_Balloc>
   c300a:	4602      	mov	r2, r0
   c300c:	b928      	cbnz	r0, c301a <__i2b+0x1a>
   c300e:	4b05      	ldr	r3, [pc, #20]	; (c3024 <__i2b+0x24>)
   c3010:	4805      	ldr	r0, [pc, #20]	; (c3028 <__i2b+0x28>)
   c3012:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c3016:	f7fa fa55 	bl	bd4c4 <__assert_func>
   c301a:	2301      	movs	r3, #1
   c301c:	6144      	str	r4, [r0, #20]
   c301e:	6103      	str	r3, [r0, #16]
   c3020:	bd10      	pop	{r4, pc}
   c3022:	bf00      	nop
   c3024:	000c5a59 	.word	0x000c5a59
   c3028:	000c5ae0 	.word	0x000c5ae0

000c302c <__multiply>:
   c302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3030:	4691      	mov	r9, r2
   c3032:	690a      	ldr	r2, [r1, #16]
   c3034:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c3038:	429a      	cmp	r2, r3
   c303a:	bfb8      	it	lt
   c303c:	460b      	movlt	r3, r1
   c303e:	460c      	mov	r4, r1
   c3040:	bfbc      	itt	lt
   c3042:	464c      	movlt	r4, r9
   c3044:	4699      	movlt	r9, r3
   c3046:	6927      	ldr	r7, [r4, #16]
   c3048:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c304c:	68a3      	ldr	r3, [r4, #8]
   c304e:	6861      	ldr	r1, [r4, #4]
   c3050:	eb07 060a 	add.w	r6, r7, sl
   c3054:	42b3      	cmp	r3, r6
   c3056:	b085      	sub	sp, #20
   c3058:	bfb8      	it	lt
   c305a:	3101      	addlt	r1, #1
   c305c:	f7ff fe8e 	bl	c2d7c <_Balloc>
   c3060:	b930      	cbnz	r0, c3070 <__multiply+0x44>
   c3062:	4602      	mov	r2, r0
   c3064:	4b44      	ldr	r3, [pc, #272]	; (c3178 <__multiply+0x14c>)
   c3066:	4845      	ldr	r0, [pc, #276]	; (c317c <__multiply+0x150>)
   c3068:	f240 115d 	movw	r1, #349	; 0x15d
   c306c:	f7fa fa2a 	bl	bd4c4 <__assert_func>
   c3070:	f100 0514 	add.w	r5, r0, #20
   c3074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c3078:	462b      	mov	r3, r5
   c307a:	2200      	movs	r2, #0
   c307c:	4543      	cmp	r3, r8
   c307e:	d321      	bcc.n	c30c4 <__multiply+0x98>
   c3080:	f104 0314 	add.w	r3, r4, #20
   c3084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c3088:	f109 0314 	add.w	r3, r9, #20
   c308c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c3090:	9202      	str	r2, [sp, #8]
   c3092:	1b3a      	subs	r2, r7, r4
   c3094:	3a15      	subs	r2, #21
   c3096:	f022 0203 	bic.w	r2, r2, #3
   c309a:	3204      	adds	r2, #4
   c309c:	f104 0115 	add.w	r1, r4, #21
   c30a0:	428f      	cmp	r7, r1
   c30a2:	bf38      	it	cc
   c30a4:	2204      	movcc	r2, #4
   c30a6:	9201      	str	r2, [sp, #4]
   c30a8:	9a02      	ldr	r2, [sp, #8]
   c30aa:	9303      	str	r3, [sp, #12]
   c30ac:	429a      	cmp	r2, r3
   c30ae:	d80c      	bhi.n	c30ca <__multiply+0x9e>
   c30b0:	2e00      	cmp	r6, #0
   c30b2:	dd03      	ble.n	c30bc <__multiply+0x90>
   c30b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c30b8:	2b00      	cmp	r3, #0
   c30ba:	d05a      	beq.n	c3172 <__multiply+0x146>
   c30bc:	6106      	str	r6, [r0, #16]
   c30be:	b005      	add	sp, #20
   c30c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c30c4:	f843 2b04 	str.w	r2, [r3], #4
   c30c8:	e7d8      	b.n	c307c <__multiply+0x50>
   c30ca:	f8b3 a000 	ldrh.w	sl, [r3]
   c30ce:	f1ba 0f00 	cmp.w	sl, #0
   c30d2:	d024      	beq.n	c311e <__multiply+0xf2>
   c30d4:	f104 0e14 	add.w	lr, r4, #20
   c30d8:	46a9      	mov	r9, r5
   c30da:	f04f 0c00 	mov.w	ip, #0
   c30de:	f85e 2b04 	ldr.w	r2, [lr], #4
   c30e2:	f8d9 1000 	ldr.w	r1, [r9]
   c30e6:	fa1f fb82 	uxth.w	fp, r2
   c30ea:	b289      	uxth	r1, r1
   c30ec:	fb0a 110b 	mla	r1, sl, fp, r1
   c30f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c30f4:	f8d9 2000 	ldr.w	r2, [r9]
   c30f8:	4461      	add	r1, ip
   c30fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c30fe:	fb0a c20b 	mla	r2, sl, fp, ip
   c3102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c3106:	b289      	uxth	r1, r1
   c3108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c310c:	4577      	cmp	r7, lr
   c310e:	f849 1b04 	str.w	r1, [r9], #4
   c3112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c3116:	d8e2      	bhi.n	c30de <__multiply+0xb2>
   c3118:	9a01      	ldr	r2, [sp, #4]
   c311a:	f845 c002 	str.w	ip, [r5, r2]
   c311e:	9a03      	ldr	r2, [sp, #12]
   c3120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c3124:	3304      	adds	r3, #4
   c3126:	f1b9 0f00 	cmp.w	r9, #0
   c312a:	d020      	beq.n	c316e <__multiply+0x142>
   c312c:	6829      	ldr	r1, [r5, #0]
   c312e:	f104 0c14 	add.w	ip, r4, #20
   c3132:	46ae      	mov	lr, r5
   c3134:	f04f 0a00 	mov.w	sl, #0
   c3138:	f8bc b000 	ldrh.w	fp, [ip]
   c313c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c3140:	fb09 220b 	mla	r2, r9, fp, r2
   c3144:	4492      	add	sl, r2
   c3146:	b289      	uxth	r1, r1
   c3148:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c314c:	f84e 1b04 	str.w	r1, [lr], #4
   c3150:	f85c 2b04 	ldr.w	r2, [ip], #4
   c3154:	f8be 1000 	ldrh.w	r1, [lr]
   c3158:	0c12      	lsrs	r2, r2, #16
   c315a:	fb09 1102 	mla	r1, r9, r2, r1
   c315e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c3162:	4567      	cmp	r7, ip
   c3164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c3168:	d8e6      	bhi.n	c3138 <__multiply+0x10c>
   c316a:	9a01      	ldr	r2, [sp, #4]
   c316c:	50a9      	str	r1, [r5, r2]
   c316e:	3504      	adds	r5, #4
   c3170:	e79a      	b.n	c30a8 <__multiply+0x7c>
   c3172:	3e01      	subs	r6, #1
   c3174:	e79c      	b.n	c30b0 <__multiply+0x84>
   c3176:	bf00      	nop
   c3178:	000c5a59 	.word	0x000c5a59
   c317c:	000c5ae0 	.word	0x000c5ae0

000c3180 <__pow5mult>:
   c3180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3184:	4615      	mov	r5, r2
   c3186:	f012 0203 	ands.w	r2, r2, #3
   c318a:	4606      	mov	r6, r0
   c318c:	460f      	mov	r7, r1
   c318e:	d007      	beq.n	c31a0 <__pow5mult+0x20>
   c3190:	4c25      	ldr	r4, [pc, #148]	; (c3228 <__pow5mult+0xa8>)
   c3192:	3a01      	subs	r2, #1
   c3194:	2300      	movs	r3, #0
   c3196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c319a:	f7ff fe51 	bl	c2e40 <__multadd>
   c319e:	4607      	mov	r7, r0
   c31a0:	10ad      	asrs	r5, r5, #2
   c31a2:	d03d      	beq.n	c3220 <__pow5mult+0xa0>
   c31a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c31a6:	b97c      	cbnz	r4, c31c8 <__pow5mult+0x48>
   c31a8:	2010      	movs	r0, #16
   c31aa:	f7fa f93b 	bl	bd424 <malloc>
   c31ae:	4602      	mov	r2, r0
   c31b0:	6270      	str	r0, [r6, #36]	; 0x24
   c31b2:	b928      	cbnz	r0, c31c0 <__pow5mult+0x40>
   c31b4:	4b1d      	ldr	r3, [pc, #116]	; (c322c <__pow5mult+0xac>)
   c31b6:	481e      	ldr	r0, [pc, #120]	; (c3230 <__pow5mult+0xb0>)
   c31b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c31bc:	f7fa f982 	bl	bd4c4 <__assert_func>
   c31c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c31c4:	6004      	str	r4, [r0, #0]
   c31c6:	60c4      	str	r4, [r0, #12]
   c31c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c31cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c31d0:	b94c      	cbnz	r4, c31e6 <__pow5mult+0x66>
   c31d2:	f240 2171 	movw	r1, #625	; 0x271
   c31d6:	4630      	mov	r0, r6
   c31d8:	f7ff ff12 	bl	c3000 <__i2b>
   c31dc:	2300      	movs	r3, #0
   c31de:	f8c8 0008 	str.w	r0, [r8, #8]
   c31e2:	4604      	mov	r4, r0
   c31e4:	6003      	str	r3, [r0, #0]
   c31e6:	f04f 0900 	mov.w	r9, #0
   c31ea:	07eb      	lsls	r3, r5, #31
   c31ec:	d50a      	bpl.n	c3204 <__pow5mult+0x84>
   c31ee:	4639      	mov	r1, r7
   c31f0:	4622      	mov	r2, r4
   c31f2:	4630      	mov	r0, r6
   c31f4:	f7ff ff1a 	bl	c302c <__multiply>
   c31f8:	4639      	mov	r1, r7
   c31fa:	4680      	mov	r8, r0
   c31fc:	4630      	mov	r0, r6
   c31fe:	f7ff fdfd 	bl	c2dfc <_Bfree>
   c3202:	4647      	mov	r7, r8
   c3204:	106d      	asrs	r5, r5, #1
   c3206:	d00b      	beq.n	c3220 <__pow5mult+0xa0>
   c3208:	6820      	ldr	r0, [r4, #0]
   c320a:	b938      	cbnz	r0, c321c <__pow5mult+0x9c>
   c320c:	4622      	mov	r2, r4
   c320e:	4621      	mov	r1, r4
   c3210:	4630      	mov	r0, r6
   c3212:	f7ff ff0b 	bl	c302c <__multiply>
   c3216:	6020      	str	r0, [r4, #0]
   c3218:	f8c0 9000 	str.w	r9, [r0]
   c321c:	4604      	mov	r4, r0
   c321e:	e7e4      	b.n	c31ea <__pow5mult+0x6a>
   c3220:	4638      	mov	r0, r7
   c3222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3226:	bf00      	nop
   c3228:	000c5c30 	.word	0x000c5c30
   c322c:	000c5832 	.word	0x000c5832
   c3230:	000c5ae0 	.word	0x000c5ae0

000c3234 <__lshift>:
   c3234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3238:	460c      	mov	r4, r1
   c323a:	6849      	ldr	r1, [r1, #4]
   c323c:	6923      	ldr	r3, [r4, #16]
   c323e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c3242:	68a3      	ldr	r3, [r4, #8]
   c3244:	4607      	mov	r7, r0
   c3246:	4691      	mov	r9, r2
   c3248:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c324c:	f108 0601 	add.w	r6, r8, #1
   c3250:	42b3      	cmp	r3, r6
   c3252:	db0b      	blt.n	c326c <__lshift+0x38>
   c3254:	4638      	mov	r0, r7
   c3256:	f7ff fd91 	bl	c2d7c <_Balloc>
   c325a:	4605      	mov	r5, r0
   c325c:	b948      	cbnz	r0, c3272 <__lshift+0x3e>
   c325e:	4602      	mov	r2, r0
   c3260:	4b2a      	ldr	r3, [pc, #168]	; (c330c <__lshift+0xd8>)
   c3262:	482b      	ldr	r0, [pc, #172]	; (c3310 <__lshift+0xdc>)
   c3264:	f240 11d9 	movw	r1, #473	; 0x1d9
   c3268:	f7fa f92c 	bl	bd4c4 <__assert_func>
   c326c:	3101      	adds	r1, #1
   c326e:	005b      	lsls	r3, r3, #1
   c3270:	e7ee      	b.n	c3250 <__lshift+0x1c>
   c3272:	2300      	movs	r3, #0
   c3274:	f100 0114 	add.w	r1, r0, #20
   c3278:	f100 0210 	add.w	r2, r0, #16
   c327c:	4618      	mov	r0, r3
   c327e:	4553      	cmp	r3, sl
   c3280:	db37      	blt.n	c32f2 <__lshift+0xbe>
   c3282:	6920      	ldr	r0, [r4, #16]
   c3284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c3288:	f104 0314 	add.w	r3, r4, #20
   c328c:	f019 091f 	ands.w	r9, r9, #31
   c3290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c3294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3298:	d02f      	beq.n	c32fa <__lshift+0xc6>
   c329a:	f1c9 0e20 	rsb	lr, r9, #32
   c329e:	468a      	mov	sl, r1
   c32a0:	f04f 0c00 	mov.w	ip, #0
   c32a4:	681a      	ldr	r2, [r3, #0]
   c32a6:	fa02 f209 	lsl.w	r2, r2, r9
   c32aa:	ea42 020c 	orr.w	r2, r2, ip
   c32ae:	f84a 2b04 	str.w	r2, [sl], #4
   c32b2:	f853 2b04 	ldr.w	r2, [r3], #4
   c32b6:	4298      	cmp	r0, r3
   c32b8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c32bc:	d8f2      	bhi.n	c32a4 <__lshift+0x70>
   c32be:	1b03      	subs	r3, r0, r4
   c32c0:	3b15      	subs	r3, #21
   c32c2:	f023 0303 	bic.w	r3, r3, #3
   c32c6:	3304      	adds	r3, #4
   c32c8:	f104 0215 	add.w	r2, r4, #21
   c32cc:	4290      	cmp	r0, r2
   c32ce:	bf38      	it	cc
   c32d0:	2304      	movcc	r3, #4
   c32d2:	f841 c003 	str.w	ip, [r1, r3]
   c32d6:	f1bc 0f00 	cmp.w	ip, #0
   c32da:	d001      	beq.n	c32e0 <__lshift+0xac>
   c32dc:	f108 0602 	add.w	r6, r8, #2
   c32e0:	3e01      	subs	r6, #1
   c32e2:	4638      	mov	r0, r7
   c32e4:	612e      	str	r6, [r5, #16]
   c32e6:	4621      	mov	r1, r4
   c32e8:	f7ff fd88 	bl	c2dfc <_Bfree>
   c32ec:	4628      	mov	r0, r5
   c32ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c32f2:	f842 0f04 	str.w	r0, [r2, #4]!
   c32f6:	3301      	adds	r3, #1
   c32f8:	e7c1      	b.n	c327e <__lshift+0x4a>
   c32fa:	3904      	subs	r1, #4
   c32fc:	f853 2b04 	ldr.w	r2, [r3], #4
   c3300:	f841 2f04 	str.w	r2, [r1, #4]!
   c3304:	4298      	cmp	r0, r3
   c3306:	d8f9      	bhi.n	c32fc <__lshift+0xc8>
   c3308:	e7ea      	b.n	c32e0 <__lshift+0xac>
   c330a:	bf00      	nop
   c330c:	000c5a59 	.word	0x000c5a59
   c3310:	000c5ae0 	.word	0x000c5ae0

000c3314 <__mcmp>:
   c3314:	b530      	push	{r4, r5, lr}
   c3316:	6902      	ldr	r2, [r0, #16]
   c3318:	690c      	ldr	r4, [r1, #16]
   c331a:	1b12      	subs	r2, r2, r4
   c331c:	d10e      	bne.n	c333c <__mcmp+0x28>
   c331e:	f100 0314 	add.w	r3, r0, #20
   c3322:	3114      	adds	r1, #20
   c3324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c3328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c332c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c3330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c3334:	42a5      	cmp	r5, r4
   c3336:	d003      	beq.n	c3340 <__mcmp+0x2c>
   c3338:	d305      	bcc.n	c3346 <__mcmp+0x32>
   c333a:	2201      	movs	r2, #1
   c333c:	4610      	mov	r0, r2
   c333e:	bd30      	pop	{r4, r5, pc}
   c3340:	4283      	cmp	r3, r0
   c3342:	d3f3      	bcc.n	c332c <__mcmp+0x18>
   c3344:	e7fa      	b.n	c333c <__mcmp+0x28>
   c3346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c334a:	e7f7      	b.n	c333c <__mcmp+0x28>

000c334c <__mdiff>:
   c334c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3350:	460c      	mov	r4, r1
   c3352:	4606      	mov	r6, r0
   c3354:	4611      	mov	r1, r2
   c3356:	4620      	mov	r0, r4
   c3358:	4690      	mov	r8, r2
   c335a:	f7ff ffdb 	bl	c3314 <__mcmp>
   c335e:	1e05      	subs	r5, r0, #0
   c3360:	d110      	bne.n	c3384 <__mdiff+0x38>
   c3362:	4629      	mov	r1, r5
   c3364:	4630      	mov	r0, r6
   c3366:	f7ff fd09 	bl	c2d7c <_Balloc>
   c336a:	b930      	cbnz	r0, c337a <__mdiff+0x2e>
   c336c:	4b3a      	ldr	r3, [pc, #232]	; (c3458 <__mdiff+0x10c>)
   c336e:	4602      	mov	r2, r0
   c3370:	f240 2132 	movw	r1, #562	; 0x232
   c3374:	4839      	ldr	r0, [pc, #228]	; (c345c <__mdiff+0x110>)
   c3376:	f7fa f8a5 	bl	bd4c4 <__assert_func>
   c337a:	2301      	movs	r3, #1
   c337c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c3380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3384:	bfa4      	itt	ge
   c3386:	4643      	movge	r3, r8
   c3388:	46a0      	movge	r8, r4
   c338a:	4630      	mov	r0, r6
   c338c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3390:	bfa6      	itte	ge
   c3392:	461c      	movge	r4, r3
   c3394:	2500      	movge	r5, #0
   c3396:	2501      	movlt	r5, #1
   c3398:	f7ff fcf0 	bl	c2d7c <_Balloc>
   c339c:	b920      	cbnz	r0, c33a8 <__mdiff+0x5c>
   c339e:	4b2e      	ldr	r3, [pc, #184]	; (c3458 <__mdiff+0x10c>)
   c33a0:	4602      	mov	r2, r0
   c33a2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c33a6:	e7e5      	b.n	c3374 <__mdiff+0x28>
   c33a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c33ac:	6926      	ldr	r6, [r4, #16]
   c33ae:	60c5      	str	r5, [r0, #12]
   c33b0:	f104 0914 	add.w	r9, r4, #20
   c33b4:	f108 0514 	add.w	r5, r8, #20
   c33b8:	f100 0e14 	add.w	lr, r0, #20
   c33bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c33c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c33c4:	f108 0210 	add.w	r2, r8, #16
   c33c8:	46f2      	mov	sl, lr
   c33ca:	2100      	movs	r1, #0
   c33cc:	f859 3b04 	ldr.w	r3, [r9], #4
   c33d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c33d4:	fa1f f883 	uxth.w	r8, r3
   c33d8:	fa11 f18b 	uxtah	r1, r1, fp
   c33dc:	0c1b      	lsrs	r3, r3, #16
   c33de:	eba1 0808 	sub.w	r8, r1, r8
   c33e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c33e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c33ea:	fa1f f888 	uxth.w	r8, r8
   c33ee:	1419      	asrs	r1, r3, #16
   c33f0:	454e      	cmp	r6, r9
   c33f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c33f6:	f84a 3b04 	str.w	r3, [sl], #4
   c33fa:	d8e7      	bhi.n	c33cc <__mdiff+0x80>
   c33fc:	1b33      	subs	r3, r6, r4
   c33fe:	3b15      	subs	r3, #21
   c3400:	f023 0303 	bic.w	r3, r3, #3
   c3404:	3304      	adds	r3, #4
   c3406:	3415      	adds	r4, #21
   c3408:	42a6      	cmp	r6, r4
   c340a:	bf38      	it	cc
   c340c:	2304      	movcc	r3, #4
   c340e:	441d      	add	r5, r3
   c3410:	4473      	add	r3, lr
   c3412:	469e      	mov	lr, r3
   c3414:	462e      	mov	r6, r5
   c3416:	4566      	cmp	r6, ip
   c3418:	d30e      	bcc.n	c3438 <__mdiff+0xec>
   c341a:	f10c 0203 	add.w	r2, ip, #3
   c341e:	1b52      	subs	r2, r2, r5
   c3420:	f022 0203 	bic.w	r2, r2, #3
   c3424:	3d03      	subs	r5, #3
   c3426:	45ac      	cmp	ip, r5
   c3428:	bf38      	it	cc
   c342a:	2200      	movcc	r2, #0
   c342c:	441a      	add	r2, r3
   c342e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c3432:	b17b      	cbz	r3, c3454 <__mdiff+0x108>
   c3434:	6107      	str	r7, [r0, #16]
   c3436:	e7a3      	b.n	c3380 <__mdiff+0x34>
   c3438:	f856 8b04 	ldr.w	r8, [r6], #4
   c343c:	fa11 f288 	uxtah	r2, r1, r8
   c3440:	1414      	asrs	r4, r2, #16
   c3442:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c3446:	b292      	uxth	r2, r2
   c3448:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c344c:	f84e 2b04 	str.w	r2, [lr], #4
   c3450:	1421      	asrs	r1, r4, #16
   c3452:	e7e0      	b.n	c3416 <__mdiff+0xca>
   c3454:	3f01      	subs	r7, #1
   c3456:	e7ea      	b.n	c342e <__mdiff+0xe2>
   c3458:	000c5a59 	.word	0x000c5a59
   c345c:	000c5ae0 	.word	0x000c5ae0

000c3460 <__ulp>:
   c3460:	b082      	sub	sp, #8
   c3462:	ed8d 0b00 	vstr	d0, [sp]
   c3466:	9b01      	ldr	r3, [sp, #4]
   c3468:	4912      	ldr	r1, [pc, #72]	; (c34b4 <__ulp+0x54>)
   c346a:	4019      	ands	r1, r3
   c346c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c3470:	2900      	cmp	r1, #0
   c3472:	dd05      	ble.n	c3480 <__ulp+0x20>
   c3474:	2200      	movs	r2, #0
   c3476:	460b      	mov	r3, r1
   c3478:	ec43 2b10 	vmov	d0, r2, r3
   c347c:	b002      	add	sp, #8
   c347e:	4770      	bx	lr
   c3480:	4249      	negs	r1, r1
   c3482:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c3486:	ea4f 5021 	mov.w	r0, r1, asr #20
   c348a:	f04f 0200 	mov.w	r2, #0
   c348e:	f04f 0300 	mov.w	r3, #0
   c3492:	da04      	bge.n	c349e <__ulp+0x3e>
   c3494:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c3498:	fa41 f300 	asr.w	r3, r1, r0
   c349c:	e7ec      	b.n	c3478 <__ulp+0x18>
   c349e:	f1a0 0114 	sub.w	r1, r0, #20
   c34a2:	291e      	cmp	r1, #30
   c34a4:	bfda      	itte	le
   c34a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c34aa:	fa20 f101 	lsrle.w	r1, r0, r1
   c34ae:	2101      	movgt	r1, #1
   c34b0:	460a      	mov	r2, r1
   c34b2:	e7e1      	b.n	c3478 <__ulp+0x18>
   c34b4:	7ff00000 	.word	0x7ff00000

000c34b8 <__b2d>:
   c34b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c34ba:	6905      	ldr	r5, [r0, #16]
   c34bc:	f100 0714 	add.w	r7, r0, #20
   c34c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c34c4:	1f2e      	subs	r6, r5, #4
   c34c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c34ca:	4620      	mov	r0, r4
   c34cc:	f7ff fd48 	bl	c2f60 <__hi0bits>
   c34d0:	f1c0 0320 	rsb	r3, r0, #32
   c34d4:	280a      	cmp	r0, #10
   c34d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c3554 <__b2d+0x9c>
   c34da:	600b      	str	r3, [r1, #0]
   c34dc:	dc14      	bgt.n	c3508 <__b2d+0x50>
   c34de:	f1c0 0e0b 	rsb	lr, r0, #11
   c34e2:	fa24 f10e 	lsr.w	r1, r4, lr
   c34e6:	42b7      	cmp	r7, r6
   c34e8:	ea41 030c 	orr.w	r3, r1, ip
   c34ec:	bf34      	ite	cc
   c34ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c34f2:	2100      	movcs	r1, #0
   c34f4:	3015      	adds	r0, #21
   c34f6:	fa04 f000 	lsl.w	r0, r4, r0
   c34fa:	fa21 f10e 	lsr.w	r1, r1, lr
   c34fe:	ea40 0201 	orr.w	r2, r0, r1
   c3502:	ec43 2b10 	vmov	d0, r2, r3
   c3506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3508:	42b7      	cmp	r7, r6
   c350a:	bf3a      	itte	cc
   c350c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3510:	f1a5 0608 	subcc.w	r6, r5, #8
   c3514:	2100      	movcs	r1, #0
   c3516:	380b      	subs	r0, #11
   c3518:	d017      	beq.n	c354a <__b2d+0x92>
   c351a:	f1c0 0c20 	rsb	ip, r0, #32
   c351e:	fa04 f500 	lsl.w	r5, r4, r0
   c3522:	42be      	cmp	r6, r7
   c3524:	fa21 f40c 	lsr.w	r4, r1, ip
   c3528:	ea45 0504 	orr.w	r5, r5, r4
   c352c:	bf8c      	ite	hi
   c352e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c3532:	2400      	movls	r4, #0
   c3534:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c3538:	fa01 f000 	lsl.w	r0, r1, r0
   c353c:	fa24 f40c 	lsr.w	r4, r4, ip
   c3540:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c3544:	ea40 0204 	orr.w	r2, r0, r4
   c3548:	e7db      	b.n	c3502 <__b2d+0x4a>
   c354a:	ea44 030c 	orr.w	r3, r4, ip
   c354e:	460a      	mov	r2, r1
   c3550:	e7d7      	b.n	c3502 <__b2d+0x4a>
   c3552:	bf00      	nop
   c3554:	3ff00000 	.word	0x3ff00000

000c3558 <__d2b>:
   c3558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c355c:	4689      	mov	r9, r1
   c355e:	2101      	movs	r1, #1
   c3560:	ec57 6b10 	vmov	r6, r7, d0
   c3564:	4690      	mov	r8, r2
   c3566:	f7ff fc09 	bl	c2d7c <_Balloc>
   c356a:	4604      	mov	r4, r0
   c356c:	b930      	cbnz	r0, c357c <__d2b+0x24>
   c356e:	4602      	mov	r2, r0
   c3570:	4b25      	ldr	r3, [pc, #148]	; (c3608 <__d2b+0xb0>)
   c3572:	4826      	ldr	r0, [pc, #152]	; (c360c <__d2b+0xb4>)
   c3574:	f240 310a 	movw	r1, #778	; 0x30a
   c3578:	f7f9 ffa4 	bl	bd4c4 <__assert_func>
   c357c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c3580:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c3584:	bb35      	cbnz	r5, c35d4 <__d2b+0x7c>
   c3586:	2e00      	cmp	r6, #0
   c3588:	9301      	str	r3, [sp, #4]
   c358a:	d028      	beq.n	c35de <__d2b+0x86>
   c358c:	4668      	mov	r0, sp
   c358e:	9600      	str	r6, [sp, #0]
   c3590:	f7ff fd06 	bl	c2fa0 <__lo0bits>
   c3594:	9900      	ldr	r1, [sp, #0]
   c3596:	b300      	cbz	r0, c35da <__d2b+0x82>
   c3598:	9a01      	ldr	r2, [sp, #4]
   c359a:	f1c0 0320 	rsb	r3, r0, #32
   c359e:	fa02 f303 	lsl.w	r3, r2, r3
   c35a2:	430b      	orrs	r3, r1
   c35a4:	40c2      	lsrs	r2, r0
   c35a6:	6163      	str	r3, [r4, #20]
   c35a8:	9201      	str	r2, [sp, #4]
   c35aa:	9b01      	ldr	r3, [sp, #4]
   c35ac:	61a3      	str	r3, [r4, #24]
   c35ae:	2b00      	cmp	r3, #0
   c35b0:	bf14      	ite	ne
   c35b2:	2202      	movne	r2, #2
   c35b4:	2201      	moveq	r2, #1
   c35b6:	6122      	str	r2, [r4, #16]
   c35b8:	b1d5      	cbz	r5, c35f0 <__d2b+0x98>
   c35ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c35be:	4405      	add	r5, r0
   c35c0:	f8c9 5000 	str.w	r5, [r9]
   c35c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c35c8:	f8c8 0000 	str.w	r0, [r8]
   c35cc:	4620      	mov	r0, r4
   c35ce:	b003      	add	sp, #12
   c35d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c35d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c35d8:	e7d5      	b.n	c3586 <__d2b+0x2e>
   c35da:	6161      	str	r1, [r4, #20]
   c35dc:	e7e5      	b.n	c35aa <__d2b+0x52>
   c35de:	a801      	add	r0, sp, #4
   c35e0:	f7ff fcde 	bl	c2fa0 <__lo0bits>
   c35e4:	9b01      	ldr	r3, [sp, #4]
   c35e6:	6163      	str	r3, [r4, #20]
   c35e8:	2201      	movs	r2, #1
   c35ea:	6122      	str	r2, [r4, #16]
   c35ec:	3020      	adds	r0, #32
   c35ee:	e7e3      	b.n	c35b8 <__d2b+0x60>
   c35f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c35f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c35f8:	f8c9 0000 	str.w	r0, [r9]
   c35fc:	6918      	ldr	r0, [r3, #16]
   c35fe:	f7ff fcaf 	bl	c2f60 <__hi0bits>
   c3602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c3606:	e7df      	b.n	c35c8 <__d2b+0x70>
   c3608:	000c5a59 	.word	0x000c5a59
   c360c:	000c5ae0 	.word	0x000c5ae0

000c3610 <__ratio>:
   c3610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3614:	4688      	mov	r8, r1
   c3616:	4669      	mov	r1, sp
   c3618:	4681      	mov	r9, r0
   c361a:	f7ff ff4d 	bl	c34b8 <__b2d>
   c361e:	a901      	add	r1, sp, #4
   c3620:	4640      	mov	r0, r8
   c3622:	ec55 4b10 	vmov	r4, r5, d0
   c3626:	f7ff ff47 	bl	c34b8 <__b2d>
   c362a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c362e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c3632:	eba3 0c02 	sub.w	ip, r3, r2
   c3636:	e9dd 3200 	ldrd	r3, r2, [sp]
   c363a:	1a9b      	subs	r3, r3, r2
   c363c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c3640:	ec51 0b10 	vmov	r0, r1, d0
   c3644:	2b00      	cmp	r3, #0
   c3646:	bfd6      	itet	le
   c3648:	460a      	movle	r2, r1
   c364a:	462a      	movgt	r2, r5
   c364c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c3650:	468b      	mov	fp, r1
   c3652:	462f      	mov	r7, r5
   c3654:	bfd4      	ite	le
   c3656:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c365a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c365e:	4620      	mov	r0, r4
   c3660:	ee10 2a10 	vmov	r2, s0
   c3664:	465b      	mov	r3, fp
   c3666:	4639      	mov	r1, r7
   c3668:	f7fd fc04 	bl	c0e74 <__aeabi_ddiv>
   c366c:	ec41 0b10 	vmov	d0, r0, r1
   c3670:	b003      	add	sp, #12
   c3672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3676 <__copybits>:
   c3676:	3901      	subs	r1, #1
   c3678:	b570      	push	{r4, r5, r6, lr}
   c367a:	1149      	asrs	r1, r1, #5
   c367c:	6914      	ldr	r4, [r2, #16]
   c367e:	3101      	adds	r1, #1
   c3680:	f102 0314 	add.w	r3, r2, #20
   c3684:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c3688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c368c:	1f05      	subs	r5, r0, #4
   c368e:	42a3      	cmp	r3, r4
   c3690:	d30c      	bcc.n	c36ac <__copybits+0x36>
   c3692:	1aa3      	subs	r3, r4, r2
   c3694:	3b11      	subs	r3, #17
   c3696:	f023 0303 	bic.w	r3, r3, #3
   c369a:	3211      	adds	r2, #17
   c369c:	42a2      	cmp	r2, r4
   c369e:	bf88      	it	hi
   c36a0:	2300      	movhi	r3, #0
   c36a2:	4418      	add	r0, r3
   c36a4:	2300      	movs	r3, #0
   c36a6:	4288      	cmp	r0, r1
   c36a8:	d305      	bcc.n	c36b6 <__copybits+0x40>
   c36aa:	bd70      	pop	{r4, r5, r6, pc}
   c36ac:	f853 6b04 	ldr.w	r6, [r3], #4
   c36b0:	f845 6f04 	str.w	r6, [r5, #4]!
   c36b4:	e7eb      	b.n	c368e <__copybits+0x18>
   c36b6:	f840 3b04 	str.w	r3, [r0], #4
   c36ba:	e7f4      	b.n	c36a6 <__copybits+0x30>

000c36bc <__any_on>:
   c36bc:	f100 0214 	add.w	r2, r0, #20
   c36c0:	6900      	ldr	r0, [r0, #16]
   c36c2:	114b      	asrs	r3, r1, #5
   c36c4:	4298      	cmp	r0, r3
   c36c6:	b510      	push	{r4, lr}
   c36c8:	db11      	blt.n	c36ee <__any_on+0x32>
   c36ca:	dd0a      	ble.n	c36e2 <__any_on+0x26>
   c36cc:	f011 011f 	ands.w	r1, r1, #31
   c36d0:	d007      	beq.n	c36e2 <__any_on+0x26>
   c36d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c36d6:	fa24 f001 	lsr.w	r0, r4, r1
   c36da:	fa00 f101 	lsl.w	r1, r0, r1
   c36de:	428c      	cmp	r4, r1
   c36e0:	d10b      	bne.n	c36fa <__any_on+0x3e>
   c36e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c36e6:	4293      	cmp	r3, r2
   c36e8:	d803      	bhi.n	c36f2 <__any_on+0x36>
   c36ea:	2000      	movs	r0, #0
   c36ec:	bd10      	pop	{r4, pc}
   c36ee:	4603      	mov	r3, r0
   c36f0:	e7f7      	b.n	c36e2 <__any_on+0x26>
   c36f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c36f6:	2900      	cmp	r1, #0
   c36f8:	d0f5      	beq.n	c36e6 <__any_on+0x2a>
   c36fa:	2001      	movs	r0, #1
   c36fc:	e7f6      	b.n	c36ec <__any_on+0x30>
	...

000c3700 <_open_r>:
   c3700:	b538      	push	{r3, r4, r5, lr}
   c3702:	4d07      	ldr	r5, [pc, #28]	; (c3720 <_open_r+0x20>)
   c3704:	4604      	mov	r4, r0
   c3706:	4608      	mov	r0, r1
   c3708:	4611      	mov	r1, r2
   c370a:	2200      	movs	r2, #0
   c370c:	602a      	str	r2, [r5, #0]
   c370e:	461a      	mov	r2, r3
   c3710:	f7f9 fc1c 	bl	bcf4c <_open>
   c3714:	1c43      	adds	r3, r0, #1
   c3716:	d102      	bne.n	c371e <_open_r+0x1e>
   c3718:	682b      	ldr	r3, [r5, #0]
   c371a:	b103      	cbz	r3, c371e <_open_r+0x1e>
   c371c:	6023      	str	r3, [r4, #0]
   c371e:	bd38      	pop	{r3, r4, r5, pc}
   c3720:	2003e7f0 	.word	0x2003e7f0

000c3724 <_read_r>:
   c3724:	b538      	push	{r3, r4, r5, lr}
   c3726:	4d07      	ldr	r5, [pc, #28]	; (c3744 <_read_r+0x20>)
   c3728:	4604      	mov	r4, r0
   c372a:	4608      	mov	r0, r1
   c372c:	4611      	mov	r1, r2
   c372e:	2200      	movs	r2, #0
   c3730:	602a      	str	r2, [r5, #0]
   c3732:	461a      	mov	r2, r3
   c3734:	f7f9 fc1a 	bl	bcf6c <_read>
   c3738:	1c43      	adds	r3, r0, #1
   c373a:	d102      	bne.n	c3742 <_read_r+0x1e>
   c373c:	682b      	ldr	r3, [r5, #0]
   c373e:	b103      	cbz	r3, c3742 <_read_r+0x1e>
   c3740:	6023      	str	r3, [r4, #0]
   c3742:	bd38      	pop	{r3, r4, r5, pc}
   c3744:	2003e7f0 	.word	0x2003e7f0

000c3748 <nanf>:
   c3748:	ed9f 0a01 	vldr	s0, [pc, #4]	; c3750 <nanf+0x8>
   c374c:	4770      	bx	lr
   c374e:	bf00      	nop
   c3750:	7fc00000 	.word	0x7fc00000

000c3754 <__ascii_wctomb>:
   c3754:	b149      	cbz	r1, c376a <__ascii_wctomb+0x16>
   c3756:	2aff      	cmp	r2, #255	; 0xff
   c3758:	bf85      	ittet	hi
   c375a:	238a      	movhi	r3, #138	; 0x8a
   c375c:	6003      	strhi	r3, [r0, #0]
   c375e:	700a      	strbls	r2, [r1, #0]
   c3760:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c3764:	bf98      	it	ls
   c3766:	2001      	movls	r0, #1
   c3768:	4770      	bx	lr
   c376a:	4608      	mov	r0, r1
   c376c:	4770      	bx	lr
	...

000c3770 <__aeabi_d2lz>:
   c3770:	b538      	push	{r3, r4, r5, lr}
   c3772:	2200      	movs	r2, #0
   c3774:	2300      	movs	r3, #0
   c3776:	4604      	mov	r4, r0
   c3778:	460d      	mov	r5, r1
   c377a:	f7fd fcc3 	bl	c1104 <__aeabi_dcmplt>
   c377e:	b928      	cbnz	r0, c378c <__aeabi_d2lz+0x1c>
   c3780:	4620      	mov	r0, r4
   c3782:	4629      	mov	r1, r5
   c3784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3788:	f7fd bd92 	b.w	c12b0 <__aeabi_d2ulz>
   c378c:	4620      	mov	r0, r4
   c378e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c3792:	f7fd fd8d 	bl	c12b0 <__aeabi_d2ulz>
   c3796:	4240      	negs	r0, r0
   c3798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c379c:	bd38      	pop	{r3, r4, r5, pc}
   c379e:	bf00      	nop

000c37a0 <dynalib_user>:
   c37a0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c37b0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c37c0:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c37d0:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c37e0:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c37f0:	6720 7461 7765 7961 7720 7469 2068 2061      gateway with a 
   c3800:	6564 6976 6563 4449 6f20 2066 7325 4c00     deviceID of %s.L
   c3810:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   c3820:	696c 657a 2064 7361 6e20 646f 2065 6925     lized as node %i
   c3830:	6120 646e 6120 6420 7665 6369 4965 2044      and a deviceID 
   c3840:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   c3850:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   c3860:	6e61 7520 636e 6e6f 6966 7567 6572 2064     an unconfigured 
   c3870:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   c3880:	6976 6563 4449 6f20 2066 7325 5400 6568     viceID of %s.The
   c3890:	6e20 646f 2065 7473 6972 676e 6920 3a73      node string is:
   c38a0:	2520 0073 6150 7372 6465 5320 6375 6563      %s.Parsed Succe
   c38b0:	7373 7566 6c6c 0079 6150 7372 6e69 2067     ssfully.Parsing 
   c38c0:	7265 6f72 2072 6572 6573 7474 6e69 2067     error resetting 
   c38d0:	6f6e 6564 4449 6420 7461 6261 7361 0065     nodeID database.
   c38e0:	6f6e 6564 0073 756e 6c6c 7200 4449 6400     nodes.null.rID.d
   c38f0:	4449 4e00 646f 2065 6f6e 2074 6f63 666e     ID.Node not conf
   c3900:	6769 7275 6465 4600 6f72 206d 6567 5474     igured.From getT
   c3910:	7079 2065 7566 636e 6974 6e6f 4e20 646f     ype function Nod
   c3920:	2065 756e 626d 7265 6e20 746f 6620 756f     e number not fou
   c3930:	646e 7320 206f 6572 7574 6e72 6e69 2067     nd so returning 
   c3940:	6425 7400 7079 0065 6552 7574 6e72 6e69     %d.type.Returnin
   c3950:	2067 6573 736e 726f 7420 7079 2065 6425     g sensor type %d
   c3960:	4600 6f72 206d 6567 4174 656c 7472 6620     .From getAlert f
   c3970:	6e75 7463 6f69 2c6e 4e20 646f 2065 756e     unction, Node nu
   c3980:	626d 7265 6e20 746f 6620 756f 646e 7000     mber not found.p
   c3990:	6e65 0064 6e75 6568 6c61 6874 0079 616c     end.unhealthy.la
   c39a0:	7473 4e00 646f 2065 6f63 6e6e 6365 6974     st.Node connecti
   c39b0:	6e6f 2073 7261 2065 7325 0020 6f4e 6564     ons are %s .Node
   c39c0:	6320 6e6f 656e 7463 6f69 736e 7520 686e      connections unh
   c39d0:	6165 746c 7968 202c 6572 6573 6974 676e     ealthy, reseting
   c39e0:	4c20 526f 2041 6172 6964 006f 6163 0072      LoRA radio.car.
   c39f0:	6570 7372 6e6f 4100 6b63 6f6e 6c77 6465     person.Acknowled
   c3a00:	6567 4a20 696f 206e 6552 7571 7365 0074     ge Join Request.
   c3a10:	6553 646e 6e69 2067 6572 7073 6e6f 6573     Sending response
   c3a20:	7420 206f 6425 7720 7469 2068 7266 6565      to %d with free
   c3a30:	6d20 6d65 726f 2079 203d 6c25 0069 6f4e      memory = %li.No
   c3a40:	6564 2520 2064 6f6a 6e69 6465 7720 7469     de %d joined wit
   c3a50:	2068 6573 736e 726f 7954 6570 2520 2c73     h sensorType %s,
   c3a60:	6120 656c 7472 2520 2064 6e61 2064 5352      alert %d and RS
   c3a70:	4953 2f20 5320 524e 6f20 2066 6425 2f20     SI / SNR of %d /
   c3a80:	2520 0064 7473 7461 7375 4e00 646f 2065      %d.status.Node 
   c3a90:	6425 6a20 696f 206e 6572 7073 6e6f 6573     %d join response
   c3aa0:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   c3ab0:	0064 6f6e 6564 7300 6375 0063 6f4e 6564     d.node.succ.Node
   c3ac0:	2520 2c64 6420 7665 6369 4965 3a44 2520      %d, deviceID: %
   c3ad0:	2c73 6320 6568 6b63 7573 206d 6425 202c     s, checksum %d, 
   c3ae0:	616c 7473 6f43 6e6e 6365 6574 3a64 2520     lastConnected: %
   c3af0:	2c73 7420 7079 2065 6425 202c 7573 6363     s, type %d, succ
   c3b00:	7365 2073 3425 322e 2066 6977 6874 7020     ess %4.2f with p
   c3b10:	6e65 6964 676e 6120 656c 7472 2520 0064     ending alert %d.
   c3b20:	6f6e 6564 6144 6174 4400 7665 6369 4965     nodeData.DeviceI
   c3b30:	2044 6e61 2064 6863 6365 736b 6d75 6d20     D and checksum m
   c3b40:	7369 616d 6374 2068 202d 6573 7474 6e69     ismatch - settin
   c3b50:	2067 6f6e 6564 7420 206f 3131 4300 6568     g node to 11.Che
   c3b60:	6b63 7573 206d 6176 696c 6164 6574 0064     cksum validated.
   c3b70:	6966 646e 6f4e 6564 754e 626d 7265 7220     findNodeNumber r
   c3b80:	6e61 6f20 7475 6f20 2066 6e65 7274 6569     an out of entrie
   c3b90:	2073 7461 6920 3d20 2520 0064 654e 2077     s at i = %d.New 
   c3ba0:	6f6e 6564 7720 6c69 206c 6562 6120 7373     node will be ass
   c3bb0:	6769 656e 2064 756e 626d 7265 2520 2c64     igned number %d,
   c3bc0:	6420 7665 6369 4965 2044 666f 2520 0073      deviceID of %s.
   c3bd0:	6843 6e61 6967 676e 7320 6e65 6f73 2072     Changing sensor 
   c3be0:	7974 6570 6620 6f72 206d 6425 7420 206f     type from %d to 
   c3bf0:	6425 4e00 646f 2065 6425 6a20 696f 206e     %d.Node %d join 
   c3c00:	6572 7571 7365 2074 7266 6d6f 2520 2073     request from %s 
   c3c10:	6573 7474 6e69 2067 6c63 636f 006b 6f4e     setting clock.No
   c3c20:	6564 2520 2064 6f6a 6e69 7220 7165 6575     de %d join reque
   c3c30:	7473 6620 6f72 206d 7325 7720 6c69 206c     st from %s will 
   c3c40:	6863 6e61 6567 6e20 646f 2065 756e 626d     change node numb
   c3c50:	7265 7420 206f 6425 4300 6168 676e 6e69     er to %d.Changin
   c3c60:	2067 6570 646e 6e69 2067 6c61 7265 2074     g pending alert 
   c3c70:	7266 6d6f 2520 2064 6f74 2520 0064 6f4e     from %d to %d.No
   c3c80:	6564 2520 2064 7369 6920 766e 6c61 6469     de %d is invalid
   c3c90:	202c 6573 7474 6e69 2067 6c61 7265 2074     , setting alert 
   c3ca0:	6f63 6564 7420 206f 0031 6f4e 6564 2520     code to 1.Node %
   c3cb0:	2064 6168 2073 2061 6570 646e 6e69 2067     d has a pending 
   c3cc0:	6c61 7265 2074 6425 4900 206e 6164 6174     alert %d.In data
   c3cd0:	6120 6b63 6f6e 6c77 6465 6567 202c 6863      acknowledge, ch
   c3ce0:	6e61 6967 676e 7420 7079 2065 6f74 6620     anging type to f
   c3cf0:	6f72 206d 6425 7420 206f 6425 4e00 646f     rom %d to %d.Nod
   c3d00:	2065 6425 6420 7461 2061 6572 6f70 7472     e %d data report
   c3d10:	2520 2064 6361 6e6b 776f 656c 6764 6465      %d acknowledged
   c3d20:	7720 7469 2068 6c61 7265 2074 6425 202c      with alert %d, 
   c3d30:	6e61 2064 5352 4953 2f20 5320 524e 6f20     and RSSI / SNR o
   c3d40:	2066 6425 2f20 2520 0064 6f4e 6564 2520     f %d / %d.Node %
   c3d50:	2064 6164 6174 7220 7065 726f 2074 6572     d data report re
   c3d60:	7073 6e6f 6573 6e20 746f 6120 6b63 6f6e     sponse not ackno
   c3d70:	6c77 6465 6567 0064 6f4e 6564 2520 2064     wledged.Node %d 
   c3d80:	656d 7373 6761 2065 616d 6967 2063 756e     message magic nu
   c3d90:	626d 7265 6f20 2066 6425 6420 6469 6e20     mber of %d did n
   c3da0:	746f 6d20 7461 6863 7420 6568 4d20 6761     ot match the Mag
   c3db0:	6369 4e20 6d75 6562 2072 6e69 6d20 6d65     ic Number in mem
   c3dc0:	726f 2079 6425 2d20 4920 6e67 726f 6e69     ory %d - Ignorin
   c3dd0:	0067 6f4e 6564 2520 2064 6977 6874 4920     g.Node %d with I
   c3de0:	2044 6425 6120 2520 2073 656d 7373 6761     D %d a %s messag
   c3df0:	2065 6977 6874 5220 5353 2f49 4e53 2052     e with RSSI/SNR 
   c3e00:	666f 2520 2064 202f 6425 4e00 646f 2065     of %d / %d.Node 
   c3e10:	6f6e 2074 7270 706f 7265 796c 6320 6e6f     not properly con
   c3e20:	6966 7567 6572 2c64 7220 7365 7465 6974     figured, resetti
   c3e30:	676e 6e20 646f 2065 756e 626d 7265 4900     ng node number.I
   c3e40:	766e 6c61 6469 6d20 7365 6173 6567 6620     nvalid message f
   c3e50:	616c 2c67 7220 7465 7275 696e 676e 5700     lag, returning.W
   c3e60:	2065 7261 2065 7075 6164 6974 676e 7420     e are updating t
   c3e70:	6568 7020 6275 696c 6873 6620 6572 7571     he publish frequ
   c3e80:	6e65 7963 7420 206f 6925 6d20 6e69 7475     ency to %i minut
   c3e90:	7365 4900 766e 6c61 6469 6d20 7365 6173     es.Invalid messa
   c3ea0:	6567 6620 616c 0067                         ge flag.

000c3ea8 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c3eb0:	40dd 000b 40f1 000b                         .@...@..

000c3eb8 <_ZTV14LoRA_Functions>:
	...
   c3ec0:	40cd 000b 40cf 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c3ed0:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c3ee0:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c3ef0:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c3f00:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c3f10:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c3f20:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c3f30:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c3f40:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c3f50:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c3f60:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c3f70:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c3f80:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c3f90:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c3fa0:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c3fb0:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c3fc0:	253a 2c64 2020 7322 726e 3a22 6425 202c     :%d,  "snr":%d, 
   c3fd0:	6d22 6773 3a22 6425 202c 7322 6375 6563     "msg":%d, "succe
   c3fe0:	7373 3a22 3425 322e 2c66 2220 6974 656d     ss":%4.2f, "time
   c3ff0:	7473 6d61 2270 253a 756c 3030 7d30 5500     stamp":%lu000}.U
   c4000:	6962 6f64 7374 4c2d 526f 2d41 6f4e 6564     bidots-LoRA-Node
   c4010:	762d 0031 227b 6564 6976 6563 6469 3a22     -v1.{"deviceid":
   c4020:	2522 2273 202c 6822 756f 6c72 2279 253a     "%s", "hourly":%
   c4030:	2c75 2220 6164 6c69 2279 253a 2c75 2220     u, "daily":%u, "
   c4040:	6573 736e 726f 7974 6570 3a22 6425 202c     sensortype":%d, 
   c4050:	6222 7461 6574 7972 3a22 3425 322e 2c66     "battery":%4.2f,
   c4060:	6b22 7965 2231 223a 7325 2c22 7422 6d65     "key1":"%s","tem
   c4070:	2270 253a 2c64 2220 6572 6573 7374 3a22     p":%d, "resets":
   c4080:	6425 202c 6d22 6773 3a22 6425 202c 7422     %d, "msg":%d, "t
   c4090:	6d69 7365 6174 706d 3a22 6c25 3075 3030     imestamp":%lu000
   c40a0:	007d 6255 6469 746f 2d73 6f4c 4152 472d     }.Ubidots-LoRA-G
   c40b0:	7461 7765 7961 762d 0031 7369 6900 2073     ateway-v1.is.is 
   c40c0:	6f6e 0074 5345 3554 4445 2c54 334d 322e     not.EST5EDT,M3.2
   c40d0:	302e 322f 303a 3a30 3030 4d2c 3131 312e     .0/2:00:00,M11.1
   c40e0:	302e 322f 303a 3a30 3030 2500 3a49 4d25     .0/2:00:00.%I:%M
   c40f0:	253a 2553 0070 6f4c 6163 546c 6d69 2065     :%S%p.LocalTime 
   c4100:	6e69 7469 6169 696c 657a 2c64 7420 6d69     initialized, tim
   c4110:	2065 7369 2520 2073 6e61 2064 5452 2043     e is %s and RTC 
   c4120:	7325 7320 7465 4c00 636f 6c61 6954 656d     %s set.LocalTime
   c4130:	6e20 746f 6920 696e 6974 6c61 7a69 6465      not initialized
   c4140:	7320 206f 6977 6c6c 6e20 6565 2064 6f74      so will need to
   c4150:	4320 6e6f 656e 7463 7420 206f 6150 7472      Connect to Part
   c4160:	6369 656c 5500 6573 2072 7562 7474 6e6f     icle.User button
   c4170:	7020 6572 7373 6465 202c 6f63 6e6e 6365      pressed, connec
   c4180:	6574 2064 6f6d 6564 6f00 6570 006e 6c63     ted mode.open.cl
   c4190:	736f 6465 2500 0054 6c53 6565 2070 6f66     osed.%T.Sleep fo
   c41a0:	2072 6925 7320 6365 6e6f 7364 7420 6c69     r %i seconds til
   c41b0:	206c 656e 7478 6520 6576 746e 6120 2074     l next event at 
   c41c0:	7325 7720 7469 2068 6c25 2069 7266 6565     %s with %li free
   c41d0:	6d20 6d65 726f 0079 6f57 656b 7720 7469      memory.Woke wit
   c41e0:	2068 7375 7265 6220 7475 6f74 006e 7741     h user button.Aw
   c41f0:	6b6f 2065 7461 2520 2073 6977 6874 2520     oke at %s with %
   c4200:	696c 6620 6572 2065 656d 6f6d 7972 4700     li free memory.G
   c4210:	7461 7765 7961 6920 2073 696c 7473 6e65     ateway is listen
   c4220:	6e69 2067 6f66 2072 7525 2820 7525 2029     ing for %u (%u) 
   c4230:	696d 756e 6574 2073 6f66 2072 6f4c 4152     minutes for LoRA
   c4240:	6d20 7365 6173 6567 2073 6e61 2064 6874      messages and th
   c4250:	2065 6170 6b72 6920 2073 7325 2820 6425     e park is %s (%d
   c4260:	2f20 2520 2064 202f 6425 0029 654e 2077      / %d / %d).New 
   c4270:	6144 2079 202d 6552 6573 7474 6e69 2067     Day - Resetting 
   c4280:	7665 7265 7479 6968 676e 4400 6565 2070     everything.Deep 
   c4290:	6f70 6577 2072 6f64 6e77 6920 206e 3033     power down in 30
   c42a0:	7320 6365 6e6f 7364 4100 656c 7472 4400      seconds.Alert.D
   c42b0:	6565 2070 6f70 6577 2072 6f64 6e77 6420     eep power down d
   c42c0:	7665 6369 0065 6552 6573 7474 6e69 2067     evice.Resetting 
   c42d0:	7564 2065 6f74 6c20 776f 6d20 6d65 726f     due to low memor
   c42e0:	0079 6f6e 2074 6176 696c 0064 6f6e 6564     y.not valid.node
   c42f0:	4449 6420 7461 2061 7369 2520 0073 227b     ID data is %s.{"
   c4300:	6f6e 6564 2273 5b3a 7d5d 5200 7365 7465     nodes":[]}.Reset
   c4310:	6974 2067 6f4e 6564 4449 6320 6e6f 6966     tig NodeID confi
   c4320:	2067 6f74 203a 7325 4e00 646f 4965 2044     g to: %s.NodeID 
   c4330:	6164 6174 6920 2073 6f6e 2077 7325 4500     data is now %s.E
   c4340:	6172 6973 676e 4620 4152 204d 6572 6967     rasing FRAM regi
   c4350:	6e6f 4900 696e 6974 6c61 7a69 6e69 2067     on.Initializing 
   c4360:	6164 6174 6400 7461 2061 6f6e 2074 6176     data.data not va
   c4370:	696c 2064 706f 6e65 6954 656d 253d 2064     lid openTime=%d 
   c4380:	6e61 2064 6c63 736f 5465 6d69 3d65 6425     and closeTime=%d
   c4390:	6400 7461 2061 6f6e 2074 6176 696c 2064     .data not valid 
   c43a0:	7266 7165 6575 636e 2079 696d 756e 6574     frequency minute
   c43b0:	2073 253d 0064 6164 6174 6e20 746f 7620     s =%d.data not v
   c43c0:	6c61 6469 6e20 646f 2065 756e 626d 7265     alid node number
   c43d0:	3d20 6425 7300 7379 7453 7461 7375 6420      =%d.sysStatus d
   c43e0:	7461 2061 7369 2520 0073 7563 7272 6e65     ata is %s.curren
   c43f0:	2074 6164 6174 6e20 746f 7620 6c61 6469     t data not valid
   c4400:	6820 756f 6c72 4379 756f 746e 253d 0064      hourlyCount=%d.
   c4410:	7563 7272 6e65 2074 6164 6174 6920 2073     current data is 
   c4420:	7325 4100 6e20 7765 6420 7961 2d20 7220     %s.A new day - r
   c4430:	7365 7465 6974 676e 6520 6576 7972 6874     esetting everyth
   c4440:	6e69 0067 7543 7272 6e65 2074 6144 6174     ing.Current Data
   c4450:	4920 696e 6974 6c61 7a69 6465 6400 7461      Initialized.dat
   c4460:	2061 6e69 7469 6169 696c 657a 0064 0000     a initialized...

000c4470 <_ZTV8MB85RC64>:
	...
   c4478:	632d 000b 6341 000b a021 000b a0b7 000b     -c..Ac..!.......
   c4488:	a139 000b                                   9...

000c448c <_ZTV10nodeIDData>:
	...
   c4494:	6681 000b 63b7 000b 638f 000b c8ab 000b     .f...c...c......
   c44a4:	c8d3 000b 6355 000b 6745 000b 6459 000b     ....Uc..Eg..Yd..
   c44b4:	646d 000b                                   md..

000c44b8 <_ZTV13sysStatusData>:
	...
   c44c0:	64e1 000b 63b7 000b 638f 000b c8ab 000b     .d...c...c......
   c44d0:	c8d3 000b 6999 000b 6d21 000b 6409 000b     .....i..!m...d..
   c44e0:	641d 000b                                   .d..

000c44e4 <_ZTV17currentStatusData>:
	...
   c44ec:	6571 000b 63b7 000b 638f 000b c8ab 000b     qe...c...c......
   c44fc:	c8d3 000b 6a69 000b 6c8d 000b 6431 000b     ....ij...l..1d..
   c450c:	6445 000b 6e49 7469 6169 696c 697a 676e     Ed..Initializing
   c451c:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c452c:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c453c:	0073 6f43 6d6d 6e61 7364 5600 7265 7a69     s.Commands.Veriz
   c454c:	6e6f 5000 7261 6973 676e 6620 6961 656c     on.Parsing faile
   c455c:	2064 202d 6863 6365 206b 7973 746e 7861     d - check syntax
   c456c:	6300 646d 7600 7261 6600 006e 6572 6573     .cmd.var.fn.rese
   c457c:	0074 6552 6573 7474 6e69 2067 6874 2065     t.Resetting the 
   c458c:	6167 6574 6177 2779 2073 6f6e 6564 4420     gateway's node D
   c459c:	7461 0061 6552 6573 7474 6e69 2067 6874     ata.Resetting th
   c45ac:	2065 6147 6574 6177 2079 6f6e 6564 7320     e Gateway node s
   c45bc:	206f 656e 2077 6164 6174 6162 6573 6920     o new database i
   c45cc:	2073 6e69 6520 6666 6365 0074 6552 6573     s in effect.Rese
   c45dc:	7474 6e69 2067 6147 6574 6177 0079 6c61     tting Gateway.al
   c45ec:	006c 6552 6573 7474 6e69 2067 6874 2065     l.Resetting the 
   c45fc:	6167 6574 6177 2779 2073 7973 7473 6d65     gateway's system
   c460c:	6120 646e 6320 7275 6572 746e 6420 7461      and current dat
   c461c:	0061 6552 6573 7474 6e69 2067 6874 2065     a.Resetting the 
   c462c:	6167 6574 6177 2779 2073 7563 7272 6e65     gateway's curren
   c463c:	2074 6164 6174 5200 7365 7465 6974 676e     t data.Resetting
   c464c:	6e20 646f 2065 6425 7327 7320 7379 6574      node %d's syste
   c465c:	206d 6e61 2064 7563 7272 6e65 2074 6164     m and current da
   c466c:	6174 5200 7365 7465 6974 676e 6e20 646f     ta.Resetting nod
   c467c:	2065 6425 7327 6320 7275 6572 746e 6420     e %d's current d
   c468c:	7461 0061 7266 7165 5300 7465 6974 676e     ata.freq.Setting
   c469c:	7220 7065 726f 6974 676e 6620 6572 7571      reporting frequ
   c46ac:	6e65 7963 7420 206f 6425 6d20 6e69 7475     ency to %d minut
   c46bc:	7365 4e00 746f 6120 7620 6c61 6469 7220     es.Not a valid r
   c46cc:	7065 726f 6974 676e 6620 6572 7571 6e65     eporting frequen
   c46dc:	7963 7300 6174 0079 7274 6575 4700 696f     cy.stay.true.Goi
   c46ec:	676e 7420 206f 656b 7065 4720 7461 7765     ng to keep Gatew
   c46fc:	7961 6f20 206e 6150 7472 6369 656c 6120     ay on Particle a
   c470c:	646e 4c20 526f 2041 656e 7774 726f 736b     nd LoRA networks
   c471c:	4700 696f 676e 6220 6361 206b 6f74 6e20     .Going back to n
   c472c:	726f 616d 206c 6f63 6e6e 6365 6974 6976     ormal connectivi
   c473c:	7974 7200 7470 5000 6972 746e 6e69 2067     ty.rpt.Printing 
   c474c:	6f6e 6564 4449 4420 7461 0061 6553 7474     nodeID Data.Sett
   c475c:	6e69 2067 706f 6e65 6e69 2067 6f68 7275     ing opening hour
   c476c:	7420 206f 6425 303a 0030 704f 6e65 6820      to %d:00.Open h
   c477c:	756f 2072 202d 756d 7473 6220 2065 2d30     our - must be 0-
   c478c:	3231 6300 6f6c 6573 5300 7465 6974 676e     12.close.Setting
   c479c:	6320 6f6c 6973 676e 6820 756f 2072 6f74      closing hour to
   c47ac:	2520 3a64 3030 4300 6f6c 6573 6820 756f      %d:00.Close hou
   c47bc:	2072 202d 756d 7473 6220 2065 3331 322d     r - must be 13-2
   c47cc:	0034 6553 7474 6e69 2067 6573 736e 726f     4.Setting sensor
   c47dc:	7420 7079 2065 6f74 2520 2064 6f66 2072      type to %d for 
   c47ec:	6f6e 6564 2520 0064 6553 736e 726f 5420     node %d.Sensor T
   c47fc:	7079 2065 2d20 6d20 7375 2074 6562 3020     ype  - must be 0
   c480c:	322d 7300 6d69 5300 7465 6974 676e 5320     -2.sim.Setting S
   c481c:	4d49 7420 206f 7325 5300 4d49 5420 7079     IM to %s.SIM Typ
   c482c:	2065 2d20 6d20 7375 2074 6562 3020 2820     e  - must be 0 (
   c483c:	6150 7472 6369 656c 2029 726f 3120 2820     Particle) or 1 (
   c484c:	6556 6972 6f7a 296e 7000 7277 5300 7465     Verizon).pwr.Set
   c485c:	6974 676e 4120 656c 7472 4320 646f 2065     ting Alert Code 
   c486c:	6f74 5420 6972 6767 7265 5220 7365 7465     to Trigger Reset
   c487c:	5000 776f 7265 4320 6379 656c 7620 6c61     .Power Cycle val
   c488c:	6575 6e20 746f 3d20 3120 0029 6f4e 2074     ue not = 1).Not 
   c489c:	2061 6176 696c 2064 6f63 6d6d 6e61 0064     a valid command.
   c48ac:	6e49 7420 6568 6420 7369 6f63 6e6e 6365     In the disconnec
   c48bc:	2074 7266 6d6f 5020 7261 6974 6c63 2065     t from Particle 
   c48cc:	7566 636e 6974 6e6f 4600 6961 656c 2064     function.Failed 
   c48dc:	6f74 6420 7369 6f63 6e6e 6365 2074 7266     to disconnect fr
   c48ec:	6d6f 5020 7261 6974 6c63 0065 6944 6373     om Particle.Disc
   c48fc:	6e6f 656e 7463 6465 6620 6f72 206d 6150     onnected from Pa
   c490c:	7472 6369 656c 6920 206e 6925 7320 6365     rticle in %i sec
   c491c:	6e6f 7364 4600 6961 656c 2064 6f74 7420     onds.Failed to t
   c492c:	7275 206e 666f 2066 6874 2065 6543 6c6c     urn off the Cell
   c493c:	6c75 7261 6d20 646f 6d65 5400 7275 656e     ular modem.Turne
   c494c:	2064 666f 2066 6874 2065 6563 6c6c 6c75     d off the cellul
   c495c:	7261 6d20 646f 6d65 6920 206e 6925 7320     ar modem in %i s
   c496c:	6365 6e6f 7364 0000                         econds..

000c4974 <_ZTVN5spark10LogHandlerE>:
	...
   c4984:	40a5 000b 6e85 000b                         .@...n..

000c498c <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4994:	6f5d 000b 6f91 000b f071 000b 6e87 000b     ]o...o..q....n..

000c49a4 <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c49ac:	6ea1 000b 6eb5 000b                         .n...n..

000c49b4 <_ZTV18Particle_Functions>:
	...
   c49bc:	6e8f 000b 6e91 000b 6e49 7469 6c61 7a69     .n...n..Initaliz
   c49cc:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c49dc:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c49ec:	6577 2072 6f43 666e 6769 0000               wer Config..

000c49f8 <BLUE_LED>:
   c49f8:	0007                                        ..

000c49fa <BUTTON_PIN>:
   c49fa:	0004                                        ..

000c49fc <RFM95_CS>:
   c49fc:	0005                                        ..

000c49fe <RFM95_INT>:
   c49fe:	0002                                        ..

000c4a00 <RFM95_RST>:
   c4a00:	0006                                        ..

000c4a02 <TMP36_SENSE_PIN>:
   c4a02:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c4a12:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c4a22:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c4a32:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c4a42:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c4a52:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c4a62:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c4a72:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c4a82:	0000 3ef6 000c 4a04 000c 4a09 000c 4a0e     ...>...J...J...J
   c4a92:	000c 4a12 000c 4a17 000c 4a1c 000c 4a20     ...J...J...J.. J
   c4aa2:	000c 4a2b 000c 4a36 000c 6166 6c69 6465     ..+J..6J..failed
   c4ab2:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c4ac2:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c4ad2:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c4ae2:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c4af2:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c4b02:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c4b12:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c4b22:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c4b32:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c4b42:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c4b52:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c4b62:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c4b72:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c4b82:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c4b92:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c4ba2:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c4bb2:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c4bc2:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c4bd2:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c4be2:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c4bf2:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c4c02:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c4c12:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c4c22:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c4c32:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c4c42:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c4c52:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c4c62:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c4c72:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c4c82:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c4c92:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c4ca2:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c4cb2:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c4cc2:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c4cd2:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c4ce2:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c4cf4 <_ZTV6AB1805>:
	...
   c4cfc:	7add 000b 7adf 000b 8155 000b 81db 000b     .z...z..U.......
   c4d0c:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c4d1c:	5268 004b                                   hRK.

000c4d20 <_ZTV19BackgroundPublishRK>:
	...
   c4d28:	8711 000b 872d 000b 755c 3025 5834 2500     ....-...\u%04X.%
   c4d38:	2a2e 0066 6625 0000                         .*f.%f..

000c4d40 <_ZTV10JsonBuffer>:
	...
   c4d48:	8a11 000b 8a2d 000b                         ....-...

000c4d50 <_ZTV10JsonParser>:
	...
   c4d58:	8a91 000b 8ab5 000b                         ........

000c4d60 <_ZTV10JsonWriter>:
	...
   c4d68:	8a41 000b 8a55 000b                         A...U...

000c4d70 <_ZTV12JsonModifier>:
	...
   c4d78:	8a69 000b 8a7d 000b 6425 253a 3a64 6425     i...}...%d:%d:%d
   c4d88:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c4d98:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c4da8:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c4db4 <_ZTV9LocalTime>:
	...
   c4dbc:	96e1 000b 96f9 000b                         ........

000c4dc4 <_ZTV12LocalTimeHMS>:
	...
   c4dcc:	9691 000b 9695 000b                         ........

000c4dd4 <_ZTV15LocalTimeChange>:
	...
   c4ddc:	9693 000b 96a3 000b                         ........

000c4de4 <_ZTV22LocalTimePosixTimezone>:
	...
   c4dec:	96b1 000b 96cd 000b                         ........

000c4df4 <_ZTV6MB85RC>:
	...
   c4dfc:	9fe1 000b 9fe3 000b a021 000b a0b7 000b     ........!.......
   c4e0c:	a139 000b 6966 656c 754e 3d6d 6425 7320     9...fileNum=%d s
   c4e1c:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c4e2c:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c4e3c:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c4e4c:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c4e5c:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c4e6c:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c4e7c:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c4e8c:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c4e9c:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c4eac:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c4ebc:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c4ecc:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c4edc:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c4eec:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c4efc:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c4f0c:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c4f1c:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c4f2c:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c4f3c:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c4f4c:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c4f5c:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c4f6c:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c4f7c:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c4f8c:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c4f9c:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c4fac:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c4fbc:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c4fcc:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c4fdc:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c4fec:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c4ffc:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c500c:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c501c:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c502c:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c503c:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c504c:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c505c:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c506c:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c507c:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c5088 <_ZTV17PublishQueuePosix>:
	...
   c5090:	aa6d 000b ad29 000b ad4d 000b               m...)...M...

000c509c <_ZTV15RHGenericDriver>:
	...
   c50ac:	ae6d 000b 40a5 000b 40a5 000b 40a5 000b     m....@...@...@..
   c50bc:	40a5 000b aecf 000b ae71 000b af1f 000b     .@......q.......
   c50cc:	aeed 000b af43 000b ae7b 000b ae83 000b     ....C...{.......
   c50dc:	ae87 000b ae8b 000b ae8f 000b ae93 000b     ................
   c50ec:	ae7f 000b ae9f 000b aea3 000b aea7 000b     ................
   c50fc:	aeab 000b aeaf 000b aeb5 000b aeb9 000b     ................
   c510c:	ae7b 000b aebd 000b aec3 000b aec9 000b     {...............

000c511c <_ZTV12RHGenericSPI>:
	...
   c5124:	40a5 000b afa1 000b afa3 000b 40a5 000b     .@...........@..
   c5134:	40a5 000b afab 000b afaf 000b afb3 000b     .@..............
   c5144:	afa5 000b afa7 000b afa9 000b 6564 6166     ............defa
   c5154:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c5164:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c5174:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c5184:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c5194 <_ZTVN8particle11SPISettingsE>:
	...
   c519c:	aff9 000b afcd 000b afcf 000b               ............

000c51a8 <_ZTV13RHHardwareSPI>:
	...
   c51b0:	b0ad 000b b0c1 000b b0cf 000b b0dd 000b     ................
   c51c0:	b149 000b afab 000b afaf 000b afb3 000b     I...............
   c51d0:	b157 000b b16b 000b b179 000b               W...k...y...

000c51dc <_ZTV6RHMesh>:
	...
   c51e4:	b245 000b b4ed 000b b1a5 000b b191 000b     E...............

000c51f4 <_ZTV8RHRouter>:
	...
   c51fc:	b75d 000b b7a1 000b                         ].......

000c5204 <_ZTV11RHSPIDriver>:
	...
   c5214:	ba3d 000b 40a5 000b 40a5 000b 40a5 000b     =....@...@...@..
   c5224:	40a5 000b aecf 000b ae71 000b af1f 000b     .@......q.......
   c5234:	aeed 000b af43 000b ae7b 000b ae83 000b     ....C...{.......
   c5244:	ae87 000b ae8b 000b ae8f 000b ae93 000b     ................
   c5254:	ae7f 000b ae9f 000b aea3 000b aea7 000b     ................
   c5264:	aeab 000b aeaf 000b aeb5 000b aeb9 000b     ................
   c5274:	ae7b 000b aebd 000b aec3 000b aec9 000b     {...............
   c5284:	ba69 000b ba73 000b                         i...s...

000c528c <_ZL18MODEM_CONFIG_TABLE>:
   c528c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c529c <_ZTV7RH_RF95>:
	...
   c52a4:	bbdb 000b bc13 000b c0e9 000b bf7f 000b     ................
   c52b4:	bc49 000b bfc7 000b bbd7 000b aecf 000b     I...............
   c52c4:	ae71 000b af1f 000b aeed 000b af43 000b     q...........C...
   c52d4:	bbdd 000b ae83 000b ae87 000b ae8b 000b     ................
   c52e4:	ae8f 000b ae93 000b ae7f 000b ae9f 000b     ................
   c52f4:	aea3 000b aea7 000b aeab 000b aeaf 000b     ................
   c5304:	aeb5 000b aeb9 000b bc23 000b aebd 000b     ........#.......
   c5314:	aec3 000b aec9 000b ba69 000b ba73 000b     ........i...s...
   c5324:	bbd3 000b 3025 6438 2f00 7200 6d65 766f     ....%08d./.remov
   c5334:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c5344:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c5354:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c5364:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c5374:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c5384:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c5394:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c53a4:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c53b4:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c53c4:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c53d4:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c53e4:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c53f4:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c5404:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c5414:	732e 7165 6966 656c 0000 0000               .seqfile....

000c5420 <_ZTV14SequentialFile>:
	...
   c5428:	c54d 000b c579 000b c1f7 000b 6173 6976     M...y.......savi
   c5438:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   c5448:	6176 696c 6164 6974 676e 6420 7461 2061     validating data 
   c5458:	6973 657a 253d 0064 6f67 3a74 6d20 6761     size=%d.got: mag
   c5468:	6369 253d 3830 2078 6576 7372 6f69 3d6e     ic=%08x version=
   c5478:	3025 7834 7320 7a69 3d65 3025 7834 6820     %04x size=%04x h
   c5488:	7361 3d68 3025 7838 6500 7078 203a 616d     ash=%08x.exp: ma
   c5498:	6967 3d63 3025 7838 7620 7265 6973 6e6f     gic=%08x version
   c54a8:	253d 3430 2078 6973 657a 253d 3430 2078     =%04x size=%04x 
   c54b8:	6168 6873 253d 3830 0078 0000               hash=%08x...

000c54c4 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c54cc:	c8a5 000b c951 000b c90d 000b c8ab 000b     ....Q...........
   c54dc:	c8d3 000b cad5 000b cba1 000b               ............

000c54e8 <_ZTVN5spark13CellularClassE>:
	...
   c54f0:	d60f 000b d605 000b d5fb 000b d5b1 000b     ................
   c5500:	d5ef 000b d5e3 000b f3c9 000b f3d1 000b     ................
   c5510:	d5d7 000b d5cf 000b d5c5 000b d5bb 000b     ................
   c5520:	f401 000b                                   ....

000c5524 <_ZTV14CellularSignal>:
	...
   c552c:	d69d 000b d701 000b d69f 000b d711 000b     ................
   c553c:	d745 000b d771 000b d7a5 000b d6c5 000b     E...q...........
   c554c:	d6a3 000b d6bf 000b fffc ffff 0000 0000     ................
   c555c:	d6f9 000b                                   ....

000c5560 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5568:	d7e9 000b d7ef 000b d82d 000b d7fd 000b     ........-.......
   c5578:	d7eb 000b                                   ....

000c557c <_ZTVN5spark13EthernetClassE>:
	...
   c5584:	ddf3 000b dde9 000b dddf 000b ddd5 000b     ................
   c5594:	ddc9 000b ddbd 000b f3c9 000b f3d1 000b     ................
   c55a4:	ddb1 000b dda9 000b dd9f 000b dd95 000b     ................
   c55b4:	f401 000b                                   ....

000c55b8 <_ZTV7TwoWire>:
	...
   c55c0:	dec3 000b df0d 000b dee5 000b dec5 000b     ................
   c55d0:	deed 000b def5 000b defd 000b df05 000b     ................

000c55e0 <_ZTV9IPAddress>:
	...
   c55e8:	e089 000b e079 000b e07b 000b 2575 3430     ....y...{...u%04
   c55f8:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c5608:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c5618:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c5628:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c5638:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c5648:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c5658:	6f63 6564 6400 7465 6961 006c               code.detail.

000c5664 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c566c:	e535 000b e55b 000b e519 000b e197 000b     5...[...........

000c567c <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5684:	e919 000b e931 000b f071 000b 6e87 000b     ....1...q....n..

000c5694 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c569c:	e945 000b e959 000b f215 000b e521 000b     E...Y.......!...

000c56ac <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c56b4:	e533 000b e569 000b efd5 000b e523 000b     3...i.......#...

000c56c4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c56cc:	e531 000b e577 000b e881 000b e599 000b     1...w...........

000c56dc <_ZTVN5spark12NetworkClassE>:
	...
   c56e4:	f389 000b f393 000b f39d 000b f3a7 000b     ................
   c56f4:	f3b1 000b f3bd 000b f3c9 000b f3d1 000b     ................
   c5704:	f3d9 000b f3e5 000b f3ed 000b f3f7 000b     ................
   c5714:	f401 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000c5724 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c5724:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c5734:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c5744:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c5754:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c5764:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c5774:	0065 0000                                   e...

000c5778 <_ZTV11USARTSerial>:
	...
   c5780:	02a9 000c 0315 000c 02ed 000c f651 000b     ............Q...
   c5790:	02bd 000c 02d9 000c 02cb 000c 02e7 000c     ................
   c57a0:	02ab 000c 02af 000c                         ........

000c57a8 <_ZTV9USBSerial>:
	...
   c57b0:	0367 000c 03cf 000c 03a5 000c f651 000b     g...........Q...
   c57c0:	0397 000c 0369 000c 0379 000c 03c9 000c     ....i...y.......
   c57d0:	0389 000c 0361 000c                         ....a...

000c57d8 <_ZSt7nothrow>:
   c57d8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   c57e8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000c57f9 <day_name.1>:
   c57f9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c5809:	6972 6153                                    riSat

000c580e <mon_name.0>:
   c580e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c581e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c582e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c583e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c584e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c585e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c586e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c587e:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c588e:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c589e:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c58ae:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c58be:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c58ce:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c58de:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c58ee:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c58fe:	7974 0000 0000                              ty....

000c5904 <fpi.1>:
   c5904:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5914:	0000 0000                                   ....

000c5918 <fpinan.0>:
   c5918:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c5930 <tinytens>:
   c5930:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5940:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5950:	6f43 64ac 0628 1168                         Co.d(.h.

000c5958 <_ctype_>:
   c5958:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5968:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5978:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5988:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5998:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c59a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c59b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c59c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c59d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5a58:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5a68:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5a78:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5a88:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5a98:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5aa8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5ab8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c5ac8:	632e 0000                                   .c..

000c5acc <_C_numeric_locale>:
   c5acc:	5758 000c 5654 000c d6f4 2003 0043 4f50     XW..TV..... C.PO
   c5adc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c5aec:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5afc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5b0c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c5b1c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c5b2c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c5b3c:	0000 0000                                   ....

000c5b40 <__mprec_bigtens>:
   c5b40:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5b50:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5b60:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5b68 <__mprec_tens>:
   c5b68:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5b78:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c5b88:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c5b98:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c5ba8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c5bb8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c5bc8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c5bd8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c5be8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c5bf8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5c08:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c5c18:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c5c28:	9db4 79d9 7843 44ea                         ...yCx.D

000c5c30 <p05.0>:
   c5c30:	0005 0000 0019 0000 007d 0000               ........}...

000c5c3c <link_const_variable_data_end>:
   c5c3c:	000b4a21 	.word	0x000b4a21
   c5c40:	000b5a29 	.word	0x000b5a29
   c5c44:	000b6e61 	.word	0x000b6e61
   c5c48:	000b75e1 	.word	0x000b75e1
   c5c4c:	000b7ad1 	.word	0x000b7ad1
   c5c50:	000b85f5 	.word	0x000b85f5
   c5c54:	000bad19 	.word	0x000bad19
   c5c58:	000bb181 	.word	0x000bb181
   c5c5c:	000bc895 	.word	0x000bc895
   c5c60:	000bd5a1 	.word	0x000bd5a1
   c5c64:	000bd66d 	.word	0x000bd66d
   c5c68:	000bddfd 	.word	0x000bddfd
   c5c6c:	000bf061 	.word	0x000bf061
   c5c70:	000bf4d9 	.word	0x000bf4d9
   c5c74:	000bf941 	.word	0x000bf941
   c5c78:	000bff5d 	.word	0x000bff5d
   c5c7c:	000c0295 	.word	0x000c0295
