
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.2/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012e60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c6e80  000c6e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c6ea4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002ec  2003d578  000c6ea8  0002d578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f8c  2003d868  2003d868  0003d868  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c7194  000c7194  00037194  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c71c0  000c71c0  000371c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002a649a  00000000  00000000  000371c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c762  00000000  00000000  002dd65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006f9ae  00000000  00000000  00309dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005088  00000000  00000000  0037976e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012968  00000000  00000000  0037e7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ecc3  00000000  00000000  0039115e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0009637d  00000000  00000000  003efe21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001733f3  00000000  00000000  0048619e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fae0  00000000  00000000  005f9594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00e fa77 	bl	c2524 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00e fa99 	bl	c2574 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d578 	.word	0x2003d578
   b404c:	000c6ea8 	.word	0x000c6ea8
   b4050:	2003d864 	.word	0x2003d864
   b4054:	2003d868 	.word	0x2003d868
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c fabd 	bl	c05e0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c6e34 	.word	0x000c6e34
   b4080:	000c6e78 	.word	0x000c6e78

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bcc4 	b.w	b5a10 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fdb3 	bl	b5bf4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c ba5d 	b.w	c0550 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 ba05 	b.w	bd4a4 <malloc>

000b409a <_Znaj>:
   b409a:	f009 ba03 	b.w	bd4a4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f009 ba09 	b.w	bd4b4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f009 f886 	bl	bd1bc <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bcd5d 	.word	0x000bcd5d
   b40b8:	000c4944 	.word	0x000c4944

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f004 fcb2 	bl	b8a4c <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c5000 	.word	0x000c5000

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 fe7f 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f004 fd8f 	bl	b8c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 fe71 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 fe4d 	bl	b8dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f009 f83c 	bl	bd1dc <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d86c 	.word	0x2003d86c
   b4190:	000c5010 	.word	0x000c5010

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f007 fd2d 	bl	bbc04 <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d8ec 	.word	0x2003d8ec

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f007 bd10 	b.w	bbbde <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d8ec 	.word	0x2003d8ec

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c4:	4b19      	ldr	r3, [pc, #100]	; (b422c <_ZN14LoRA_Functions15initializeRadioEv+0x68>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41c6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c8:	881c      	ldrh	r4, [r3, #0]
   b41ca:	2100      	movs	r1, #0
   b41cc:	4620      	mov	r0, r4
   b41ce:	f00c faa0 	bl	c0712 <digitalWrite>
	delay(10);
   b41d2:	200a      	movs	r0, #10
   b41d4:	f009 f9e6 	bl	bd5a4 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b41d8:	2101      	movs	r1, #1
   b41da:	4620      	mov	r0, r4
   b41dc:	f00c fa99 	bl	c0712 <digitalWrite>
	delay(10);
   b41e0:	200a      	movs	r0, #10
   b41e2:	f009 f9df 	bl	bd5a4 <delay>

	if (!manager.init()) {
   b41e6:	4812      	ldr	r0, [pc, #72]	; (b4230 <_ZN14LoRA_Functions15initializeRadioEv+0x6c>)
   b41e8:	f007 fa97 	bl	bb71a <_ZN8RHRouter4initEv>
   b41ec:	4604      	mov	r4, r0
   b41ee:	b928      	cbnz	r0, b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41f0:	4910      	ldr	r1, [pc, #64]	; (b4234 <_ZN14LoRA_Functions15initializeRadioEv+0x70>)
   b41f2:	4811      	ldr	r0, [pc, #68]	; (b4238 <_ZN14LoRA_Functions15initializeRadioEv+0x74>)
   b41f4:	f7ff ffa3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	driver.setModemConfig(RH_RF95::Bw125Cr45Sf2048);
	//driver.setModemConfig(RH_RF95::Bw125Cr48Sf4096);	// This optimized the radio for long range - https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html
	driver.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
	manager.setTimeout(2000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
return true;
}
   b41f8:	4620      	mov	r0, r4
   b41fa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41fc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; b423c <_ZN14LoRA_Functions15initializeRadioEv+0x78>
   b4200:	480f      	ldr	r0, [pc, #60]	; (b4240 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b4202:	f007 fd85 	bl	bbd10 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4206:	2200      	movs	r2, #0
   b4208:	480d      	ldr	r0, [pc, #52]	; (b4240 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b420a:	2117      	movs	r1, #23
   b420c:	f007 fefa 	bl	bc004 <_ZN7RH_RF9510setTxPowerEab>
	driver.setModemConfig(RH_RF95::Bw125Cr45Sf2048);
   b4210:	2104      	movs	r1, #4
   b4212:	480b      	ldr	r0, [pc, #44]	; (b4240 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b4214:	f007 ff22 	bl	bc05c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
	driver.setLowDatarate();						// https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#a8e2df6a6d2cb192b13bd572a7005da67
   b4218:	4809      	ldr	r0, [pc, #36]	; (b4240 <_ZN14LoRA_Functions15initializeRadioEv+0x7c>)
   b421a:	f007 ffcd 	bl	bc1b8 <_ZN7RH_RF9514setLowDatarateEv>
	manager.setTimeout(2000);						// 200mSec is the default - may need to extend once we play with other settings on the modem - https://www.airspayce.com/mikem/arduino/RadioHead/classRHReliableDatagram.html
   b421e:	4809      	ldr	r0, [pc, #36]	; (b4244 <_ZN14LoRA_Functions15initializeRadioEv+0x80>)
   b4220:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b4224:	f007 f987 	bl	bb536 <_ZN18RHReliableDatagram10setTimeoutEt>
return true;
   b4228:	e7e6      	b.n	b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b422a:	bf00      	nop
   b422c:	000c5b94 	.word	0x000c5b94
   b4230:	2003e168 	.word	0x2003e168
   b4234:	000c4959 	.word	0x000c4959
   b4238:	2003e650 	.word	0x2003e650
   b423c:	4467b5c3 	.word	0x4467b5c3
   b4240:	2003d8ec 	.word	0x2003d8ec
   b4244:	2003e16c 	.word	0x2003e16c

000b4248 <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b4248:	b510      	push	{r4, lr}
   b424a:	460c      	mov	r4, r1
   b424c:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b424e:	f7ff ffb9 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b4252:	2c00      	cmp	r4, #0
   b4254:	d03d      	beq.n	b42d2 <_ZN14LoRA_Functions5setupEb+0x8a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4256:	f002 f8f5 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b425a:	2100      	movs	r1, #0
   b425c:	f002 fae2 	bl	b6824 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4260:	a802      	add	r0, sp, #8
   b4262:	f009 f887 	bl	bd374 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway (address %d) with a deviceID of %s", GATEWAY_ADDRESS, System.deviceID().c_str());
   b4266:	9b02      	ldr	r3, [sp, #8]
   b4268:	4936      	ldr	r1, [pc, #216]	; (b4344 <_ZN14LoRA_Functions5setupEb+0xfc>)
   b426a:	2200      	movs	r2, #0
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b426c:	4836      	ldr	r0, [pc, #216]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x100>)
   b426e:	f7ff ff66 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4272:	a802      	add	r0, sp, #8
   b4274:	f00b fc70 	bl	bfb58 <_ZN6StringD1Ev>
	jp.addString(nodeDatabase.get_nodeIDJson());				// Read in the JSON string from memory
   b4278:	f002 f9b4 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b427c:	4601      	mov	r1, r0
   b427e:	a802      	add	r0, sp, #8
   b4280:	f002 f9da 	bl	b6638 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4284:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4286:	9101      	str	r1, [sp, #4]
   b4288:	4608      	mov	r0, r1
   b428a:	f00e fa3e 	bl	c270a <strlen>
   b428e:	9901      	ldr	r1, [sp, #4]
   b4290:	4602      	mov	r2, r0
   b4292:	482e      	ldr	r0, [pc, #184]	; (b434c <_ZN14LoRA_Functions5setupEb+0x104>)
   b4294:	f004 fc15 	bl	b8ac2 <_ZN10JsonBuffer7addDataEPKcj>
   b4298:	a802      	add	r0, sp, #8
   b429a:	f00b fc5d 	bl	bfb58 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b429e:	f002 f9a1 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b42a2:	4601      	mov	r1, r0
   b42a4:	a802      	add	r0, sp, #8
   b42a6:	f002 f9c7 	bl	b6638 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b42aa:	9a02      	ldr	r2, [sp, #8]
   b42ac:	4928      	ldr	r1, [pc, #160]	; (b4350 <_ZN14LoRA_Functions5setupEb+0x108>)
   b42ae:	4826      	ldr	r0, [pc, #152]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x100>)
   b42b0:	f7ff ff45 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42b4:	a802      	add	r0, sp, #8
   b42b6:	f00b fc4f 	bl	bfb58 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b42ba:	4824      	ldr	r0, [pc, #144]	; (b434c <_ZN14LoRA_Functions5setupEb+0x104>)
   b42bc:	f005 f95a 	bl	b9574 <_ZN10JsonParser5parseEv>
   b42c0:	2800      	cmp	r0, #0
   b42c2:	d038      	beq.n	b4336 <_ZN14LoRA_Functions5setupEb+0xee>
   b42c4:	4923      	ldr	r1, [pc, #140]	; (b4354 <_ZN14LoRA_Functions5setupEb+0x10c>)
		Log.info("Parsing error resetting nodeID database");
   b42c6:	4820      	ldr	r0, [pc, #128]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x100>)
   b42c8:	f7ff ff39 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b42cc:	2001      	movs	r0, #1
   b42ce:	b006      	add	sp, #24
   b42d0:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b42d2:	f002 f8b7 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b42d6:	f002 fa33 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42da:	b1c0      	cbz	r0, b430e <_ZN14LoRA_Functions5setupEb+0xc6>
   b42dc:	f002 f8b2 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b42e0:	f002 fa2e 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42e4:	280a      	cmp	r0, #10
   b42e6:	d812      	bhi.n	b430e <_ZN14LoRA_Functions5setupEb+0xc6>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42e8:	f002 f8ac 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b42ec:	f002 fa28 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42f0:	4601      	mov	r1, r0
   b42f2:	4819      	ldr	r0, [pc, #100]	; (b4358 <_ZN14LoRA_Functions5setupEb+0x110>)
   b42f4:	f006 fd3b 	bl	bad6e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42f8:	4817      	ldr	r0, [pc, #92]	; (b4358 <_ZN14LoRA_Functions5setupEb+0x110>)
   b42fa:	f006 fd1e 	bl	bad3a <_ZN10RHDatagram11thisAddressEv>
   b42fe:	9001      	str	r0, [sp, #4]
   b4300:	a802      	add	r0, sp, #8
   b4302:	f009 f837 	bl	bd374 <spark_deviceID>
   b4306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b430a:	4914      	ldr	r1, [pc, #80]	; (b435c <_ZN14LoRA_Functions5setupEb+0x114>)
   b430c:	e7ae      	b.n	b426c <_ZN14LoRA_Functions5setupEb+0x24>
		sysStatus.set_nodeNumber(11);
   b430e:	f002 f899 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b4312:	210b      	movs	r1, #11
   b4314:	f002 fa86 	bl	b6824 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4318:	210b      	movs	r1, #11
   b431a:	480f      	ldr	r0, [pc, #60]	; (b4358 <_ZN14LoRA_Functions5setupEb+0x110>)
   b431c:	f006 fd27 	bl	bad6e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4320:	480d      	ldr	r0, [pc, #52]	; (b4358 <_ZN14LoRA_Functions5setupEb+0x110>)
   b4322:	f006 fd0a 	bl	bad3a <_ZN10RHDatagram11thisAddressEv>
   b4326:	9001      	str	r0, [sp, #4]
   b4328:	a802      	add	r0, sp, #8
   b432a:	f009 f823 	bl	bd374 <spark_deviceID>
   b432e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4332:	490b      	ldr	r1, [pc, #44]	; (b4360 <_ZN14LoRA_Functions5setupEb+0x118>)
   b4334:	e79a      	b.n	b426c <_ZN14LoRA_Functions5setupEb+0x24>
		nodeDatabase.resetNodeIDs();
   b4336:	f002 f955 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b433a:	f002 f995 	bl	b6668 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b433e:	4909      	ldr	r1, [pc, #36]	; (b4364 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b4340:	e7c1      	b.n	b42c6 <_ZN14LoRA_Functions5setupEb+0x7e>
   b4342:	bf00      	nop
   b4344:	000c4965 	.word	0x000c4965
   b4348:	2003e650 	.word	0x2003e650
   b434c:	2003da1c 	.word	0x2003da1c
   b4350:	000c4a2a 	.word	0x000c4a2a
   b4354:	000c4a41 	.word	0x000c4a41
   b4358:	2003e16c 	.word	0x2003e16c
   b435c:	000c49ac 	.word	0x000c49ac
   b4360:	000c49e3 	.word	0x000c49e3
   b4364:	000c4a55 	.word	0x000c4a55

000b4368 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:

}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b4368:	b538      	push	{r3, r4, r5, lr}
	current.set_hourlyCount(buf[4] << 8 | buf[5]);
   b436a:	4c25      	ldr	r4, [pc, #148]	; (b4400 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b436c:	f002 f8b2 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4370:	88a1      	ldrh	r1, [r4, #4]
   b4372:	ba49      	rev16	r1, r1
   b4374:	b289      	uxth	r1, r1
   b4376:	f002 fbaa 	bl	b6ace <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[6] << 8 | buf[7]);
   b437a:	f002 f8ab 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b437e:	88e1      	ldrh	r1, [r4, #6]
   b4380:	ba49      	rev16	r1, r1
   b4382:	b289      	uxth	r1, r1
   b4384:	f002 fba9 	bl	b6ada <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[8]);
   b4388:	f002 f8a4 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b438c:	7a21      	ldrb	r1, [r4, #8]
   b438e:	f002 faa9 	bl	b68e4 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[9]);
   b4392:	f002 f89f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4396:	7a61      	ldrb	r1, [r4, #9]
   b4398:	f002 fa80 	bl	b689c <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[10]);
   b439c:	f002 f89a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43a0:	4605      	mov	r5, r0
   b43a2:	7aa0      	ldrb	r0, [r4, #10]
   b43a4:	f00d fc8c 	bl	c1cc0 <__aeabi_ui2d>
   b43a8:	ec41 0b10 	vmov	d0, r0, r1
   b43ac:	4628      	mov	r0, r5
   b43ae:	f002 f8db 	bl	b6568 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b43b2:	f002 f88f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43b6:	7ae1      	ldrb	r1, [r4, #11]
   b43b8:	f002 fa76 	bl	b68a8 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[12]);
   b43bc:	f002 f88a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43c0:	7b21      	ldrb	r1, [r4, #12]
   b43c2:	f002 fa77 	bl	b68b4 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[13]);
   b43c6:	f002 f885 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43ca:	7b61      	ldrb	r1, [r4, #13]
   b43cc:	f002 fa78 	bl	b68c0 <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[14]);
   b43d0:	f002 f880 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43d4:	7ba1      	ldrb	r1, [r4, #14]
   b43d6:	f002 fa79 	bl	b68cc <_ZN17currentStatusData16set_successCountEh>
	current.set_RSSI(buf[15] << 8 | buf[16]);				// These values are from the node based on the last successful data report
   b43da:	f002 f87b 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43de:	f8b4 100f 	ldrh.w	r1, [r4, #15]
   b43e2:	bac9      	revsh	r1, r1
   b43e4:	f002 fcfe 	bl	b6de4 <_ZN17currentStatusData8set_RSSIEs>
	current.set_SNR(buf[17] << 8 | buf[18]);
   b43e8:	f002 f874 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b43ec:	f8b4 1011 	ldrh.w	r1, [r4, #17]
   b43f0:	bac9      	revsh	r1, r1
   b43f2:	f002 fcfd 	bl	b6df0 <_ZN17currentStatusData7set_SNREs>

	lora_state = DATA_ACK;		// Prepare to respond
   b43f6:	4b03      	ldr	r3, [pc, #12]	; (b4404 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b43f8:	2204      	movs	r2, #4
   b43fa:	701a      	strb	r2, [r3, #0]
	return true;
}
   b43fc:	2001      	movs	r0, #1
   b43fe:	bd38      	pop	{r3, r4, r5, pc}
   b4400:	2003d870 	.word	0x2003d870
   b4404:	2003d868 	.word	0x2003d868

000b4408 <_ZN14LoRA_Functions12findDeviceIDEii>:
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b4408:	b570      	push	{r4, r5, r6, lr}
   b440a:	b088      	sub	sp, #32
	String nodeDeviceID;
   b440c:	491d      	ldr	r1, [pc, #116]	; (b4484 <_ZN14LoRA_Functions12findDeviceIDEii+0x7c>)
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b440e:	4604      	mov	r4, r0
	String nodeDeviceID;
   b4410:	a804      	add	r0, sp, #16
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b4412:	4616      	mov	r6, r2
   b4414:	461d      	mov	r5, r3
	String nodeDeviceID;
   b4416:	f00b fbea 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	int nodeRadioID;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b441a:	481b      	ldr	r0, [pc, #108]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b441c:	f004 fb93 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4420:	4a1a      	ldr	r2, [pc, #104]	; (b448c <_ZN14LoRA_Functions12findDeviceIDEii+0x84>)
   b4422:	4601      	mov	r1, r0
   b4424:	ab03      	add	r3, sp, #12
   b4426:	4818      	ldr	r0, [pc, #96]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4428:	f004 fcf2 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b442c:	9903      	ldr	r1, [sp, #12]
   b442e:	4816      	ldr	r0, [pc, #88]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4430:	1e72      	subs	r2, r6, #1
   b4432:	f004 fbaa 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4436:	4601      	mov	r1, r0
   b4438:	b948      	cbnz	r0, b444e <_ZN14LoRA_Functions12findDeviceIDEii+0x46>
   b443a:	4915      	ldr	r1, [pc, #84]	; (b4490 <_ZN14LoRA_Functions12findDeviceIDEii+0x88>)
   b443c:	4620      	mov	r0, r4
   b443e:	f00b fbd6 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4442:	a804      	add	r0, sp, #16
   b4444:	f00b fb88 	bl	bfb58 <_ZN6StringD1Ev>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo

	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
	else return nodeDeviceID;
}
   b4448:	4620      	mov	r0, r4
   b444a:	b008      	add	sp, #32
   b444c:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer,"rID", nodeRadioID);				// Get the radioID to see if it is a match
   b444e:	ab02      	add	r3, sp, #8
   b4450:	9001      	str	r0, [sp, #4]
   b4452:	4a10      	ldr	r2, [pc, #64]	; (b4494 <_ZN14LoRA_Functions12findDeviceIDEii+0x8c>)
   b4454:	480c      	ldr	r0, [pc, #48]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4456:	f7ff fe56 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo
   b445a:	9b02      	ldr	r3, [sp, #8]
   b445c:	9901      	ldr	r1, [sp, #4]
   b445e:	42ab      	cmp	r3, r5
   b4460:	d1eb      	bne.n	b443a <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
   b4462:	4809      	ldr	r0, [pc, #36]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4464:	4a0c      	ldr	r2, [pc, #48]	; (b4498 <_ZN14LoRA_Functions12findDeviceIDEii+0x90>)
   b4466:	ab04      	add	r3, sp, #16
   b4468:	f7ff fe5b 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b446c:	2100      	movs	r1, #0
   b446e:	a804      	add	r0, sp, #16
   b4470:	f00b fc83 	bl	bfd7a <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b4474:	2800      	cmp	r0, #0
   b4476:	d1e0      	bne.n	b443a <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	else return nodeDeviceID;
   b4478:	a904      	add	r1, sp, #16
   b447a:	4620      	mov	r0, r4
   b447c:	f00b fbe8 	bl	bfc50 <_ZN6StringC1EOS_>
   b4480:	e7df      	b.n	b4442 <_ZN14LoRA_Functions12findDeviceIDEii+0x3a>
   b4482:	bf00      	nop
   b4484:	000c6838 	.word	0x000c6838
   b4488:	2003da1c 	.word	0x2003da1c
   b448c:	000c4a7d 	.word	0x000c4a7d
   b4490:	000c4a83 	.word	0x000c4a83
   b4494:	000c4a88 	.word	0x000c4a88
   b4498:	000c4a8c 	.word	0x000c4a8c

000b449c <_ZN14LoRA_Functions14nodeConfiguredEii>:

bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b449c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nodeNumber > 10) return false;
   b449e:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b44a0:	460c      	mov	r4, r1
   b44a2:	9201      	str	r2, [sp, #4]
	if (nodeNumber > 10) return false;
   b44a4:	dd02      	ble.n	b44ac <_ZN14LoRA_Functions14nodeConfiguredEii+0x10>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question

	if (radioID == current.get_nodeID()) return true;
	else {
		Log.info("Node not configured");  // See the raw JSON string
		return false;
   b44a6:	2000      	movs	r0, #0
	}
}
   b44a8:	b004      	add	sp, #16
   b44aa:	bd10      	pop	{r4, pc}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ac:	4811      	ldr	r0, [pc, #68]	; (b44f4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44ae:	f004 fb4a 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b44b2:	4a11      	ldr	r2, [pc, #68]	; (b44f8 <_ZN14LoRA_Functions14nodeConfiguredEii+0x5c>)
   b44b4:	4601      	mov	r1, r0
   b44b6:	ab03      	add	r3, sp, #12
   b44b8:	480e      	ldr	r0, [pc, #56]	; (b44f4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44ba:	f004 fca9 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44be:	9903      	ldr	r1, [sp, #12]
   b44c0:	480c      	ldr	r0, [pc, #48]	; (b44f4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44c2:	1e62      	subs	r2, r4, #1
   b44c4:	f004 fb61 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b44c8:	4601      	mov	r1, r0
   b44ca:	2800      	cmp	r0, #0
   b44cc:	d0eb      	beq.n	b44a6 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question
   b44ce:	ab01      	add	r3, sp, #4
   b44d0:	4a0a      	ldr	r2, [pc, #40]	; (b44fc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b44d2:	4808      	ldr	r0, [pc, #32]	; (b44f4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44d4:	f7ff fe17 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (radioID == current.get_nodeID()) return true;
   b44d8:	f001 fffc 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b44dc:	f002 fa87 	bl	b69ee <_ZNK17currentStatusData10get_nodeIDEv>
   b44e0:	9b01      	ldr	r3, [sp, #4]
   b44e2:	4298      	cmp	r0, r3
   b44e4:	d004      	beq.n	b44f0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x54>
		Log.info("Node not configured");  // See the raw JSON string
   b44e6:	4906      	ldr	r1, [pc, #24]	; (b4500 <_ZN14LoRA_Functions14nodeConfiguredEii+0x64>)
   b44e8:	4806      	ldr	r0, [pc, #24]	; (b4504 <_ZN14LoRA_Functions14nodeConfiguredEii+0x68>)
   b44ea:	f7ff fe28 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b44ee:	e7da      	b.n	b44a6 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	if (radioID == current.get_nodeID()) return true;
   b44f0:	2001      	movs	r0, #1
   b44f2:	e7d9      	b.n	b44a8 <_ZN14LoRA_Functions14nodeConfiguredEii+0xc>
   b44f4:	2003da1c 	.word	0x2003da1c
   b44f8:	000c4a7d 	.word	0x000c4a7d
   b44fc:	000c4a88 	.word	0x000c4a88
   b4500:	000c4a90 	.word	0x000c4a90
   b4504:	2003e650 	.word	0x2003e650

000b4508 <_ZN14LoRA_Functions7getTypeEi>:

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
	return true;
}

byte LoRA_Functions::getType(int nodeNumber) {
   b4508:	b513      	push	{r0, r1, r4, lr}
	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b450a:	4816      	ldr	r0, [pc, #88]	; (b4564 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
byte LoRA_Functions::getType(int nodeNumber) {
   b450c:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b450e:	f004 fb1a 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4512:	4a15      	ldr	r2, [pc, #84]	; (b4568 <_ZN14LoRA_Functions7getTypeEi+0x60>)
   b4514:	4601      	mov	r1, r0
   b4516:	ab01      	add	r3, sp, #4
   b4518:	4812      	ldr	r0, [pc, #72]	; (b4564 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b451a:	f004 fc79 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b451e:	9901      	ldr	r1, [sp, #4]
   b4520:	4810      	ldr	r0, [pc, #64]	; (b4564 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b4522:	1e62      	subs	r2, r4, #1
   b4524:	f004 fb31 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b4528:	4601      	mov	r1, r0
   b452a:	b970      	cbnz	r0, b454a <_ZN14LoRA_Functions7getTypeEi+0x42>
		Log.info("From getType function Node number not found so returning %d",current.get_sensorType());
   b452c:	f001 ffd2 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4530:	f002 f956 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4534:	490d      	ldr	r1, [pc, #52]	; (b456c <_ZN14LoRA_Functions7getTypeEi+0x64>)
   b4536:	4602      	mov	r2, r0
   b4538:	480d      	ldr	r0, [pc, #52]	; (b4570 <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b453a:	f7ff fe00 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries, go with what was reported by the node
   b453e:	f001 ffc9 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4542:	f002 f94d 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
	Log.info("Returning sensor type %d",type);
	return type;
}
   b4546:	b002      	add	sp, #8
   b4548:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b454a:	4a0a      	ldr	r2, [pc, #40]	; (b4574 <_ZN14LoRA_Functions7getTypeEi+0x6c>)
   b454c:	4805      	ldr	r0, [pc, #20]	; (b4564 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b454e:	466b      	mov	r3, sp
   b4550:	f7ff fdd9 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Returning sensor type %d",type);
   b4554:	4806      	ldr	r0, [pc, #24]	; (b4570 <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4556:	9a00      	ldr	r2, [sp, #0]
   b4558:	4907      	ldr	r1, [pc, #28]	; (b4578 <_ZN14LoRA_Functions7getTypeEi+0x70>)
   b455a:	f7ff fdf0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	return type;
   b455e:	f89d 0000 	ldrb.w	r0, [sp]
   b4562:	e7f0      	b.n	b4546 <_ZN14LoRA_Functions7getTypeEi+0x3e>
   b4564:	2003da1c 	.word	0x2003da1c
   b4568:	000c4a7d 	.word	0x000c4a7d
   b456c:	000c4aa4 	.word	0x000c4aa4
   b4570:	2003e650 	.word	0x2003e650
   b4574:	000c4ae0 	.word	0x000c4ae0
   b4578:	000c4ae5 	.word	0x000c4ae5

000b457c <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b457c:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b457e:	b513      	push	{r0, r1, r4, lr}
   b4580:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4582:	dc13      	bgt.n	b45ac <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4584:	480f      	ldr	r0, [pc, #60]	; (b45c4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4586:	f004 fade 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b458a:	4a0f      	ldr	r2, [pc, #60]	; (b45c8 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b458c:	4601      	mov	r1, r0
   b458e:	ab01      	add	r3, sp, #4
   b4590:	480c      	ldr	r0, [pc, #48]	; (b45c4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4592:	f004 fc3d 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4596:	9901      	ldr	r1, [sp, #4]
   b4598:	480a      	ldr	r0, [pc, #40]	; (b45c4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b459a:	1e62      	subs	r2, r4, #1
   b459c:	f004 faf5 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b45a0:	4601      	mov	r1, r0
   b45a2:	b928      	cbnz	r0, b45b0 <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b45a4:	4909      	ldr	r1, [pc, #36]	; (b45cc <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b45a6:	480a      	ldr	r0, [pc, #40]	; (b45d0 <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b45a8:	f7ff fdc9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b45ac:	20ff      	movs	r0, #255	; 0xff
   b45ae:	e006      	b.n	b45be <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b45b0:	4804      	ldr	r0, [pc, #16]	; (b45c4 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b45b2:	4a08      	ldr	r2, [pc, #32]	; (b45d4 <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b45b4:	466b      	mov	r3, sp
   b45b6:	f7ff fda6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b45ba:	f89d 0000 	ldrb.w	r0, [sp]

}
   b45be:	b002      	add	sp, #8
   b45c0:	bd10      	pop	{r4, pc}
   b45c2:	bf00      	nop
   b45c4:	2003da1c 	.word	0x2003da1c
   b45c8:	000c4a7d 	.word	0x000c4a7d
   b45cc:	000c4afe 	.word	0x000c4afe
   b45d0:	2003e650 	.word	0x2003e650
   b45d4:	000c4b2c 	.word	0x000c4b2c

000b45d8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b45d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45dc:	4605      	mov	r5, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45de:	f001 ff31 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b45e2:	f002 f9a2 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45e6:	263c      	movs	r6, #60	; 0x3c
   b45e8:	4346      	muls	r6, r0
	bool health = true;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45ea:	4819      	ldr	r0, [pc, #100]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x78>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45ec:	4f18      	ldr	r7, [pc, #96]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x78>)
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45ee:	f8df 8078 	ldr.w	r8, [pc, #120]	; b4668 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45f2:	f004 faa8 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b45f6:	4a17      	ldr	r2, [pc, #92]	; (b4654 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x7c>)
   b45f8:	4601      	mov	r1, r0
   b45fa:	ab01      	add	r3, sp, #4
   b45fc:	4814      	ldr	r0, [pc, #80]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x78>)
   b45fe:	f004 fc07 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4602:	2400      	movs	r4, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4604:	9901      	ldr	r1, [sp, #4]
   b4606:	4622      	mov	r2, r4
   b4608:	4638      	mov	r0, r7
   b460a:	f004 fabe 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b460e:	4601      	mov	r1, r0
   b4610:	b168      	cbz	r0, b462e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x56>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4612:	466b      	mov	r3, sp
   b4614:	4642      	mov	r2, r8
   b4616:	4638      	mov	r0, r7
   b4618:	f7ff fd75 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

		if ((Time.now() - lastConnect) > secondsPerPeriod) {				// If any of the nodes fail to connect - will extend loRA dwell time
   b461c:	f00b fe5d 	bl	c02da <_ZN9TimeClass3nowEv>
   b4620:	9b00      	ldr	r3, [sp, #0]
   b4622:	1ac0      	subs	r0, r0, r3
   b4624:	4286      	cmp	r6, r0
   b4626:	db10      	blt.n	b464a <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x72>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4628:	3401      	adds	r4, #1
   b462a:	2c0a      	cmp	r4, #10
   b462c:	d1ea      	bne.n	b4604 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x2c>
			health = false;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b462e:	4a0a      	ldr	r2, [pc, #40]	; (b4658 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x80>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4630:	2401      	movs	r4, #1
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b4632:	490a      	ldr	r1, [pc, #40]	; (b465c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x84>)
   b4634:	480a      	ldr	r0, [pc, #40]	; (b4660 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x88>)
   b4636:	f7ff fd82 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if(!health) LoRA_Functions::initializeRadio();
   b463a:	b914      	cbnz	r4, b4642 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x6a>
   b463c:	4628      	mov	r0, r5
   b463e:	f7ff fdc1 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	return health;
}
   b4642:	4620      	mov	r0, r4
   b4644:	b002      	add	sp, #8
   b4646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b464a:	4a06      	ldr	r2, [pc, #24]	; (b4664 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8c>)
			health = false;
   b464c:	2400      	movs	r4, #0
   b464e:	e7f0      	b.n	b4632 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x5a>
   b4650:	2003da1c 	.word	0x2003da1c
   b4654:	000c4a7d 	.word	0x000c4a7d
   b4658:	000c4b33 	.word	0x000c4b33
   b465c:	000c4b40 	.word	0x000c4b40
   b4660:	2003e650 	.word	0x2003e650
   b4664:	000c4b31 	.word	0x000c4b31
   b4668:	000c4b3b 	.word	0x000c4b3b

000b466c <_ZN14LoRA_Functions14stringCheckSumE6String>:

int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b466c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b466e:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4670:	460e      	mov	r6, r1
    int result = 0;
   b4672:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b4674:	68b3      	ldr	r3, [r6, #8]
   b4676:	429d      	cmp	r5, r3
   b4678:	d218      	bcs.n	b46ac <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b467a:	4629      	mov	r1, r5
   b467c:	4630      	mov	r0, r6
   b467e:	f00b fba3 	bl	bfdc8 <_ZN6StringixEj>
   b4682:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b4684:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4688:	2a09      	cmp	r2, #9
   b468a:	d802      	bhi.n	b4692 <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b468c:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b468e:	3501      	adds	r5, #1
   b4690:	e7f0      	b.n	b4674 <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b4692:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b4696:	2a05      	cmp	r2, #5
   b4698:	d802      	bhi.n	b46a0 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b469a:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b469c:	441c      	add	r4, r3
   b469e:	e7f6      	b.n	b468e <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b46a0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b46a4:	2a05      	cmp	r2, #5
   b46a6:	d8f2      	bhi.n	b468e <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b46a8:	3b57      	subs	r3, #87	; 0x57
   b46aa:	e7f7      	b.n	b469c <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b46ac:	4620      	mov	r0, r4
   b46ae:	bd70      	pop	{r4, r5, r6, pc}

000b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b46b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b46b2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b46b4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b46b6:	b17c      	cbz	r4, b46d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b46b8:	6863      	ldr	r3, [r4, #4]
   b46ba:	3b01      	subs	r3, #1
   b46bc:	6063      	str	r3, [r4, #4]
   b46be:	b95b      	cbnz	r3, b46d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b46c0:	6823      	ldr	r3, [r4, #0]
   b46c2:	4620      	mov	r0, r4
   b46c4:	689b      	ldr	r3, [r3, #8]
   b46c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46c8:	68a3      	ldr	r3, [r4, #8]
   b46ca:	3b01      	subs	r3, #1
   b46cc:	60a3      	str	r3, [r4, #8]
   b46ce:	b91b      	cbnz	r3, b46d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b46d0:	6823      	ldr	r3, [r4, #0]
   b46d2:	4620      	mov	r0, r4
   b46d4:	68db      	ldr	r3, [r3, #12]
   b46d6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b46d8:	4628      	mov	r0, r5
   b46da:	bd38      	pop	{r3, r4, r5, pc}

000b46dc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Log.info("Acknowledge Join Request");
   b46de:	495b      	ldr	r1, [pc, #364]	; (b484c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x170>)
   b46e0:	485b      	ldr	r0, [pc, #364]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x174>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46e2:	4c5c      	ldr	r4, [pc, #368]	; (b4854 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46e4:	b0a9      	sub	sp, #164	; 0xa4
	Log.info("Acknowledge Join Request");
   b46e6:	f7ff fd2a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46ea:	f001 feab 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b46ee:	f002 f917 	bl	b6920 <_ZNK13sysStatusData15get_magicNumberEv>
   b46f2:	0a00      	lsrs	r0, r0, #8
   b46f4:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46f6:	f001 fea5 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b46fa:	f002 f911 	bl	b6920 <_ZNK13sysStatusData15get_magicNumberEv>
   b46fe:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b4700:	f00b fdeb 	bl	c02da <_ZN9TimeClass3nowEv>
   b4704:	1600      	asrs	r0, r0, #24
   b4706:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b4708:	f00b fde7 	bl	c02da <_ZN9TimeClass3nowEv>
   b470c:	1400      	asrs	r0, r0, #16
   b470e:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4710:	f00b fde3 	bl	c02da <_ZN9TimeClass3nowEv>
   b4714:	1200      	asrs	r0, r0, #8
   b4716:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b4718:	f00b fddf 	bl	c02da <_ZN9TimeClass3nowEv>
   b471c:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b471e:	f001 fe91 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b4722:	f002 f902 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4726:	0a00      	lsrs	r0, r0, #8
   b4728:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b472a:	f001 fe8b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b472e:	f002 f8fc 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4732:	71e0      	strb	r0, [r4, #7]
	buf[8] = (current.get_nodeNumber() != 11) ?  0 : 1;				// Clear the alert code for the node unless the nodeNumber process failed
   b4734:	f001 fece 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4738:	f002 f82a 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b473c:	f1a0 030b 	sub.w	r3, r0, #11
   b4740:	4258      	negs	r0, r3
   b4742:	4158      	adcs	r0, r3
   b4744:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_nodeNumber();								
   b4746:	f001 fec5 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b474a:	f002 f821 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b474e:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b4750:	f001 fec0 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4754:	f002 f844 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4758:	4b3f      	ldr	r3, [pc, #252]	; (b4858 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x17c>)
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b475a:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b475c:	881e      	ldrh	r6, [r3, #0]
   b475e:	2101      	movs	r1, #1
   b4760:	4630      	mov	r0, r6
   b4762:	f00b ffd6 	bl	c0712 <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4766:	f001 feb5 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b476a:	f002 f816 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b476e:	2800      	cmp	r0, #0
   b4770:	d156      	bne.n	b4820 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x144>
   b4772:	f001 feaf 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4776:	f002 f80b 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b477a:	4605      	mov	r5, r0
	Log.info("Sending response to %d with free memory = %li", nodeAddress, System.freeMemory());
   b477c:	f00b fc1c 	bl	bffb8 <_ZN11SystemClass10freeMemoryEv>
   b4780:	4936      	ldr	r1, [pc, #216]	; (b485c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x180>)
   b4782:	4603      	mov	r3, r0
   b4784:	462a      	mov	r2, r5
   b4786:	4832      	ldr	r0, [pc, #200]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x174>)
   b4788:	f7ff fcd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, nodeAddress, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b478c:	2302      	movs	r3, #2
   b478e:	9300      	str	r3, [sp, #0]
   b4790:	4930      	ldr	r1, [pc, #192]	; (b4854 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
   b4792:	4833      	ldr	r0, [pc, #204]	; (b4860 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b4794:	462b      	mov	r3, r5
   b4796:	220b      	movs	r2, #11
   b4798:	f006 fd82 	bl	bb2a0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b479c:	9005      	str	r0, [sp, #20]
   b479e:	2800      	cmp	r0, #0
   b47a0:	d143      	bne.n	b482a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14e>
		current.set_tempNodeNumber(0);								// Temp no longer needed
   b47a2:	f001 fe97 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b47a6:	9905      	ldr	r1, [sp, #20]
   b47a8:	f002 f872 	bl	b6890 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b47ac:	9905      	ldr	r1, [sp, #20]
   b47ae:	4630      	mov	r0, r6
   b47b0:	f00b ffaf 	bl	c0712 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s, alert %d and RSSI / SNR of %d / %d", nodeAddress, (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), current.get_RSSI(), current.get_SNR());
   b47b4:	7aa2      	ldrb	r2, [r4, #10]
   b47b6:	4b2b      	ldr	r3, [pc, #172]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
   b47b8:	4c2b      	ldr	r4, [pc, #172]	; (b4868 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x18c>)
   b47ba:	2a00      	cmp	r2, #0
   b47bc:	bf18      	it	ne
   b47be:	461c      	movne	r4, r3
   b47c0:	f001 fe88 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b47c4:	f002 f807 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b47c8:	4606      	mov	r6, r0
   b47ca:	f001 fe83 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b47ce:	f002 fae7 	bl	b6da0 <_ZNK17currentStatusData8get_RSSIEv>
   b47d2:	4607      	mov	r7, r0
   b47d4:	f001 fe7e 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b47d8:	f002 fae7 	bl	b6daa <_ZNK17currentStatusData7get_SNREv>
   b47dc:	4a23      	ldr	r2, [pc, #140]	; (b486c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x190>)
   b47de:	462b      	mov	r3, r5
   b47e0:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b47e4:	e9cd 4600 	strd	r4, r6, [sp]
   b47e8:	2180      	movs	r1, #128	; 0x80
   b47ea:	a808      	add	r0, sp, #32
   b47ec:	f008 fe82 	bl	bd4f4 <snprintf>
		Log.info(messageString);
   b47f0:	4817      	ldr	r0, [pc, #92]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x174>)
   b47f2:	a908      	add	r1, sp, #32
   b47f4:	f7ff fca3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b47f8:	f008 fdb4 	bl	bd364 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b47fc:	4604      	mov	r4, r0
   b47fe:	b318      	cbz	r0, b4848 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x16c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4800:	4b1b      	ldr	r3, [pc, #108]	; (b4870 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x194>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4802:	491c      	ldr	r1, [pc, #112]	; (b4874 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x198>)
   b4804:	781b      	ldrb	r3, [r3, #0]
   b4806:	f88d 3000 	strb.w	r3, [sp]
   b480a:	a806      	add	r0, sp, #24
   b480c:	233c      	movs	r3, #60	; 0x3c
   b480e:	aa08      	add	r2, sp, #32
   b4810:	f009 f994 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4814:	a807      	add	r0, sp, #28
   b4816:	f7ff ff4b 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b481a:	4620      	mov	r0, r4
   b481c:	b029      	add	sp, #164	; 0xa4
   b481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4820:	f001 fe58 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4824:	f001 ffb9 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4828:	e7a7      	b.n	b477a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x9e>
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b482a:	f001 fe53 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b482e:	f001 ffb4 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4832:	4911      	ldr	r1, [pc, #68]	; (b4878 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19c>)
   b4834:	4602      	mov	r2, r0
   b4836:	4806      	ldr	r0, [pc, #24]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x174>)
   b4838:	f7ff fc81 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b483c:	2100      	movs	r1, #0
   b483e:	4630      	mov	r0, r6
   b4840:	f00b ff67 	bl	c0712 <digitalWrite>
		return false;
   b4844:	2400      	movs	r4, #0
   b4846:	e7e8      	b.n	b481a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13e>
		return true;
   b4848:	2401      	movs	r4, #1
   b484a:	e7e6      	b.n	b481a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13e>
   b484c:	000c4b64 	.word	0x000c4b64
   b4850:	2003e650 	.word	0x2003e650
   b4854:	2003d870 	.word	0x2003d870
   b4858:	000c5b8c 	.word	0x000c5b8c
   b485c:	000c4b7d 	.word	0x000c4b7d
   b4860:	2003e168 	.word	0x2003e168
   b4864:	000c4b5d 	.word	0x000c4b5d
   b4868:	000c4b59 	.word	0x000c4b59
   b486c:	000c4bab 	.word	0x000c4bab
   b4870:	2003d869 	.word	0x2003d869
   b4874:	000c4bf1 	.word	0x000c4bf1
   b4878:	000c4bf8 	.word	0x000c4bf8

000b487c <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4880:	b0d9      	sub	sp, #356	; 0x164
   b4882:	460f      	mov	r7, r1
	String nodeDeviceID;
   b4884:	a810      	add	r0, sp, #64	; 0x40
   b4886:	4946      	ldr	r1, [pc, #280]	; (b49a0 <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4888:	4d46      	ldr	r5, [pc, #280]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b488a:	f8df 8144 	ldr.w	r8, [pc, #324]	; b49d0 <_ZN14LoRA_Functions13printNodeDataEb+0x154>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b488e:	f8df 9144 	ldr.w	r9, [pc, #324]	; b49d4 <_ZN14LoRA_Functions13printNodeDataEb+0x158>
	String nodeDeviceID;
   b4892:	f00b f9ac 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4896:	4843      	ldr	r0, [pc, #268]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b4898:	f004 f955 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b489c:	4a42      	ldr	r2, [pc, #264]	; (b49a8 <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b489e:	4601      	mov	r1, r0
   b48a0:	ab0f      	add	r3, sp, #60	; 0x3c
   b48a2:	4840      	ldr	r0, [pc, #256]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48a4:	f004 fab4 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48a8:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b48ac:	4632      	mov	r2, r6
   b48ae:	4628      	mov	r0, r5
   b48b0:	f004 f96b 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b48b4:	4604      	mov	r4, r0
   b48b6:	2800      	cmp	r0, #0
   b48b8:	d06c      	beq.n	b4994 <_ZN14LoRA_Functions13printNodeDataEb+0x118>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b48ba:	4601      	mov	r1, r0
   b48bc:	ab10      	add	r3, sp, #64	; 0x40
   b48be:	4642      	mov	r2, r8
   b48c0:	4628      	mov	r0, r5
   b48c2:	f7ff fc2e 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b48c6:	ab0a      	add	r3, sp, #40	; 0x28
   b48c8:	464a      	mov	r2, r9
   b48ca:	4621      	mov	r1, r4
   b48cc:	4628      	mov	r0, r5
   b48ce:	f7ff fc1a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b48d2:	4a36      	ldr	r2, [pc, #216]	; (b49ac <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b48d4:	ab09      	add	r3, sp, #36	; 0x24
   b48d6:	4621      	mov	r1, r4
   b48d8:	4628      	mov	r0, r5
   b48da:	f7ff fc14 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b48de:	4a34      	ldr	r2, [pc, #208]	; (b49b0 <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
   b48e0:	ab0b      	add	r3, sp, #44	; 0x2c
   b48e2:	4621      	mov	r1, r4
   b48e4:	4628      	mov	r0, r5
   b48e6:	f7ff fc0e 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b48ea:	4a32      	ldr	r2, [pc, #200]	; (b49b4 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b48ec:	ab0c      	add	r3, sp, #48	; 0x30
   b48ee:	4621      	mov	r1, r4
   b48f0:	4628      	mov	r0, r5
   b48f2:	f7ff fc08 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b48f6:	4a30      	ldr	r2, [pc, #192]	; (b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x13c>)
   b48f8:	ab14      	add	r3, sp, #80	; 0x50
   b48fa:	4621      	mov	r1, r4
   b48fc:	4628      	mov	r0, r5
   b48fe:	f004 fa87 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4902:	b120      	cbz	r0, b490e <_ZN14LoRA_Functions13printNodeDataEb+0x92>
			return getTokenValue(value, result);
   b4904:	9914      	ldr	r1, [sp, #80]	; 0x50
   b4906:	aa0d      	add	r2, sp, #52	; 0x34
   b4908:	4628      	mov	r0, r5
   b490a:	f004 f9a9 	bl	b8c60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b490e:	4621      	mov	r1, r4
   b4910:	4a2a      	ldr	r2, [pc, #168]	; (b49bc <_ZN14LoRA_Functions13printNodeDataEb+0x140>)
   b4912:	ab0e      	add	r3, sp, #56	; 0x38
   b4914:	4628      	mov	r0, r5
   b4916:	f7ff fbf6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, checksum %d, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(), radioID, Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b491a:	e9dd b20a 	ldrd	fp, r2, [sp, #40]	; 0x28
   b491e:	a814      	add	r0, sp, #80	; 0x50
   b4920:	17d3      	asrs	r3, r2, #31
   b4922:	9c09      	ldr	r4, [sp, #36]	; 0x24
	const char * c_str() const { return buffer; }
   b4924:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   b4928:	f00b fbd2 	bl	c00d0 <_ZN9TimeClass7timeStrEx>
   b492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b492e:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4930:	9306      	str	r3, [sp, #24]
   b4932:	f00d f9e7 	bl	c1d04 <__aeabi_f2d>
   b4936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4938:	9303      	str	r3, [sp, #12]
   b493a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b493c:	4a20      	ldr	r2, [pc, #128]	; (b49c0 <_ZN14LoRA_Functions13printNodeDataEb+0x144>)
   b493e:	f8cd a000 	str.w	sl, [sp]
   b4942:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4946:	e9cd b301 	strd	fp, r3, [sp, #4]
   b494a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b494e:	4623      	mov	r3, r4
   b4950:	a818      	add	r0, sp, #96	; 0x60
   b4952:	f008 fdcf 	bl	bd4f4 <snprintf>
   b4956:	a814      	add	r0, sp, #80	; 0x50
   b4958:	f00b f8fe 	bl	bfb58 <_ZN6StringD1Ev>
		Log.info(data);
   b495c:	4819      	ldr	r0, [pc, #100]	; (b49c4 <_ZN14LoRA_Functions13printNodeDataEb+0x148>)
   b495e:	a918      	add	r1, sp, #96	; 0x60
   b4960:	f7ff fbed 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4964:	f008 fcfe 	bl	bd364 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4968:	b188      	cbz	r0, b498e <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b496a:	b187      	cbz	r7, b498e <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b496c:	4b16      	ldr	r3, [pc, #88]	; (b49c8 <_ZN14LoRA_Functions13printNodeDataEb+0x14c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b496e:	4917      	ldr	r1, [pc, #92]	; (b49cc <_ZN14LoRA_Functions13printNodeDataEb+0x150>)
   b4970:	781b      	ldrb	r3, [r3, #0]
   b4972:	f88d 3000 	strb.w	r3, [sp]
   b4976:	aa18      	add	r2, sp, #96	; 0x60
   b4978:	233c      	movs	r3, #60	; 0x3c
   b497a:	a814      	add	r0, sp, #80	; 0x50
   b497c:	f009 f8de 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4980:	a815      	add	r0, sp, #84	; 0x54
   b4982:	f7ff fe95 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b4986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b498a:	f008 fe0b 	bl	bd5a4 <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b498e:	3601      	adds	r6, #1
   b4990:	2e0a      	cmp	r6, #10
   b4992:	d18a      	bne.n	b48aa <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b4994:	a810      	add	r0, sp, #64	; 0x40
   b4996:	f00b f8df 	bl	bfb58 <_ZN6StringD1Ev>
}
   b499a:	b059      	add	sp, #356	; 0x164
   b499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b49a0:	000c6838 	.word	0x000c6838
   b49a4:	2003da1c 	.word	0x2003da1c
   b49a8:	000c4a7d 	.word	0x000c4a7d
   b49ac:	000c4c1f 	.word	0x000c4c1f
   b49b0:	000c4b3b 	.word	0x000c4b3b
   b49b4:	000c4ae0 	.word	0x000c4ae0
   b49b8:	000c4c24 	.word	0x000c4c24
   b49bc:	000c4b2c 	.word	0x000c4b2c
   b49c0:	000c4c29 	.word	0x000c4c29
   b49c4:	2003e650 	.word	0x2003e650
   b49c8:	2003d869 	.word	0x2003d869
   b49cc:	000c4c8d 	.word	0x000c4c8d
   b49d0:	000c4a8c 	.word	0x000c4a8c
   b49d4:	000c4a88 	.word	0x000c4a88

000b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b49d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49da:	4604      	mov	r4, r0
   b49dc:	4615      	mov	r5, r2
   b49de:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b49e0:	f004 fb3a 	bl	b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b49e4:	9901      	ldr	r1, [sp, #4]
   b49e6:	2201      	movs	r2, #1
   b49e8:	4620      	mov	r0, r4
   b49ea:	f004 faa3 	bl	b8f34 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b49ee:	4620      	mov	r0, r4
   b49f0:	213a      	movs	r1, #58	; 0x3a
   b49f2:	f004 fa53 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b49f6:	4904      	ldr	r1, [pc, #16]	; (b4a08 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b49f8:	462a      	mov	r2, r5
   b49fa:	4620      	mov	r0, r4
		insertValue(value);
	}
   b49fc:	b003      	add	sp, #12
   b49fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4a02:	f004 ba8a 	b.w	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
   b4a06:	bf00      	nop
   b4a08:	000c4e89 	.word	0x000c4e89

000b4a0c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4a0c:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4a0e:	4b11      	ldr	r3, [pc, #68]	; (b4a54 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4a10:	4c11      	ldr	r4, [pc, #68]	; (b4a58 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4a12:	2201      	movs	r2, #1
   b4a14:	701a      	strb	r2, [r3, #0]
   b4a16:	2332      	movs	r3, #50	; 0x32
   b4a18:	9300      	str	r3, [sp, #0]
   b4a1a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4a1e:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4a26:	4620      	mov	r0, r4
   b4a28:	f004 f872 	bl	b8b10 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4a2c:	4b0b      	ldr	r3, [pc, #44]	; (b4a5c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4a2e:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4a30:	4a0b      	ldr	r2, [pc, #44]	; (b4a60 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4a32:	4c0c      	ldr	r4, [pc, #48]	; (b4a64 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4a34:	490c      	ldr	r1, [pc, #48]	; (b4a68 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4a36:	4b0d      	ldr	r3, [pc, #52]	; (b4a6c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4a38:	7812      	ldrb	r2, [r2, #0]
   b4a3a:	7809      	ldrb	r1, [r1, #0]
   b4a3c:	4620      	mov	r0, r4
   b4a3e:	f007 f927 	bl	bbc90 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a42:	480b      	ldr	r0, [pc, #44]	; (b4a70 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4a44:	2200      	movs	r2, #0
   b4a46:	4621      	mov	r1, r4
}
   b4a48:	b002      	add	sp, #8
   b4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a4e:	f006 bc1d 	b.w	bb28c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4a52:	bf00      	nop
   b4a54:	2003d869 	.word	0x2003d869
   b4a58:	2003da1c 	.word	0x2003da1c
   b4a5c:	000c5000 	.word	0x000c5000
   b4a60:	000c5b92 	.word	0x000c5b92
   b4a64:	2003d8ec 	.word	0x2003d8ec
   b4a68:	000c5b90 	.word	0x000c5b90
   b4a6c:	2003e4e4 	.word	0x2003e4e4
   b4a70:	2003e168 	.word	0x2003e168

000b4a74 <_ZN14LoRA_Functions14findNodeNumberEPKci>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a78:	b097      	sub	sp, #92	; 0x5c
   b4a7a:	4604      	mov	r4, r0
   b4a7c:	460d      	mov	r5, r1
	String nodeDeviceID;
   b4a7e:	a802      	add	r0, sp, #8
   b4a80:	4965      	ldr	r1, [pc, #404]	; (b4c18 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a4>)
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a82:	4690      	mov	r8, r2
	String nodeDeviceID;
   b4a84:	f00b f8b3 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	if (radioID != LoRA_Functions::stringCheckSum(deviceID)) {
   b4a88:	4629      	mov	r1, r5
   b4a8a:	a806      	add	r0, sp, #24
   b4a8c:	f00b f8af 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   b4a90:	a906      	add	r1, sp, #24
   b4a92:	4620      	mov	r0, r4
   b4a94:	f7ff fdea 	bl	b466c <_ZN14LoRA_Functions14stringCheckSumE6String>
   b4a98:	4604      	mov	r4, r0
   b4a9a:	a806      	add	r0, sp, #24
   b4a9c:	f00b f85c 	bl	bfb58 <_ZN6StringD1Ev>
   b4aa0:	4544      	cmp	r4, r8
   b4aa2:	d00b      	beq.n	b4abc <_ZN14LoRA_Functions14findNodeNumberEPKci+0x48>
		Log.info("DeviceID and checksum mismatch - setting node to 11");
   b4aa4:	495d      	ldr	r1, [pc, #372]	; (b4c1c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a8>)
   b4aa6:	485e      	ldr	r0, [pc, #376]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4aa8:	f7ff fb49 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 11;															// Return value for unconfigured node
   b4aac:	240b      	movs	r4, #11
	String nodeDeviceID;
   b4aae:	a802      	add	r0, sp, #8
   b4ab0:	f00b f852 	bl	bfb58 <_ZN6StringD1Ev>
}
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	b017      	add	sp, #92	; 0x5c
   b4ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else Log.info("Checksum validated");
   b4abc:	4959      	ldr	r1, [pc, #356]	; (b4c24 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b0>)
   b4abe:	4858      	ldr	r0, [pc, #352]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ac0:	f8df 9164 	ldr.w	r9, [pc, #356]	; b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4ac4:	f8df b174 	ldr.w	fp, [pc, #372]	; b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>
	else Log.info("Checksum validated");
   b4ac8:	f7ff fb39 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4acc:	4856      	ldr	r0, [pc, #344]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ace:	f004 f83a 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4ad2:	4a56      	ldr	r2, [pc, #344]	; (b4c2c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b8>)
   b4ad4:	4601      	mov	r1, r0
   b4ad6:	ab01      	add	r3, sp, #4
   b4ad8:	4853      	ldr	r0, [pc, #332]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ada:	f004 f999 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4ade:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ae0:	9901      	ldr	r1, [sp, #4]
   b4ae2:	4632      	mov	r2, r6
   b4ae4:	4648      	mov	r0, r9
   b4ae6:	f004 f850 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4aea:	1c74      	adds	r4, r6, #1
		if(nodeObjectContainer == NULL) {
   b4aec:	4607      	mov	r7, r0
   b4aee:	46a2      	mov	sl, r4
   b4af0:	2800      	cmp	r0, #0
   b4af2:	d176      	bne.n	b4be2 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x16e>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4af4:	494e      	ldr	r1, [pc, #312]	; (b4c30 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1bc>)
   b4af6:	484a      	ldr	r0, [pc, #296]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4af8:	4632      	mov	r2, r6
   b4afa:	f7ff fb20 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4afe:	494a      	ldr	r1, [pc, #296]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
	nodeNumber = index;
   b4b00:	9400      	str	r4, [sp, #0]
	JsonModifier mod(jp);
   b4b02:	a806      	add	r0, sp, #24
   b4b04:	f004 faec 	bl	b90e0 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",nodeNumber, deviceID);
   b4b08:	462b      	mov	r3, r5
   b4b0a:	9a00      	ldr	r2, [sp, #0]
   b4b0c:	4949      	ldr	r1, [pc, #292]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c0>)
   b4b0e:	4844      	ldr	r0, [pc, #272]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4b10:	f7ff fb15 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4b14:	4844      	ldr	r0, [pc, #272]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4b16:	f004 f80b 	bl	b8b30 <_ZNK10JsonParser13getOuterArrayEv>
   b4b1a:	4601      	mov	r1, r0
   b4b1c:	a806      	add	r0, sp, #24
   b4b1e:	f004 fb1a 	bl	b9156 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4b22:	227d      	movs	r2, #125	; 0x7d
   b4b24:	217b      	movs	r1, #123	; 0x7b
   b4b26:	a806      	add	r0, sp, #24
   b4b28:	f004 faa1 	bl	b906e <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", nodeNumber);
   b4b2c:	9a00      	ldr	r2, [sp, #0]
   b4b2e:	4942      	ldr	r1, [pc, #264]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4b30:	a806      	add	r0, sp, #24
   b4b32:	f7ff ff51 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b36:	a806      	add	r0, sp, #24
   b4b38:	f004 fa8e 	bl	b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b3c:	2201      	movs	r2, #1
   b4b3e:	a806      	add	r0, sp, #24
   b4b40:	493e      	ldr	r1, [pc, #248]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>)
   b4b42:	f004 f9f7 	bl	b8f34 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b46:	a806      	add	r0, sp, #24
   b4b48:	213a      	movs	r1, #58	; 0x3a
   b4b4a:	f004 f9a7 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4b4e:	4629      	mov	r1, r5
   b4b50:	a806      	add	r0, sp, #24
   b4b52:	2201      	movs	r2, #1
   b4b54:	f004 f9ee 	bl	b8f34 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("rID",radioID);
   b4b58:	4642      	mov	r2, r8
   b4b5a:	4939      	ldr	r1, [pc, #228]	; (b4c40 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1cc>)
   b4b5c:	a806      	add	r0, sp, #24
   b4b5e:	f7ff ff3b 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("last", Time.now());
   b4b62:	f00b fbba 	bl	c02da <_ZN9TimeClass3nowEv>
   b4b66:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4b68:	a806      	add	r0, sp, #24
   b4b6a:	f004 fa75 	bl	b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b6e:	2201      	movs	r2, #1
   b4b70:	a806      	add	r0, sp, #24
   b4b72:	4934      	ldr	r1, [pc, #208]	; (b4c44 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d0>)
   b4b74:	f004 f9de 	bl	b8f34 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b78:	a806      	add	r0, sp, #24
   b4b7a:	213a      	movs	r1, #58	; 0x3a
   b4b7c:	f004 f98e 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4b80:	462a      	mov	r2, r5
   b4b82:	a806      	add	r0, sp, #24
   b4b84:	4930      	ldr	r1, [pc, #192]	; (b4c48 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d4>)
   b4b86:	f004 f9c8 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);									// This is a temp value that will be updated
   b4b8a:	4930      	ldr	r1, [pc, #192]	; (b4c4c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d8>)
   b4b8c:	2203      	movs	r2, #3
   b4b8e:	a806      	add	r0, sp, #24
   b4b90:	f7ff ff22 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b94:	a806      	add	r0, sp, #24
   b4b96:	f004 fa5f 	bl	b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b9a:	2201      	movs	r2, #1
   b4b9c:	a806      	add	r0, sp, #24
   b4b9e:	492c      	ldr	r1, [pc, #176]	; (b4c50 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1dc>)
   b4ba0:	f004 f9c8 	bl	b8f34 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4ba4:	213a      	movs	r1, #58	; 0x3a
   b4ba6:	a806      	add	r0, sp, #24
   b4ba8:	f004 f978 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4bac:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4c54 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e0>
   b4bb0:	a806      	add	r0, sp, #24
   b4bb2:	f004 fa75 	bl	b90a0 <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4bb6:	2200      	movs	r2, #0
   b4bb8:	4927      	ldr	r1, [pc, #156]	; (b4c58 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e4>)
   b4bba:	a806      	add	r0, sp, #24
   b4bbc:	f7ff ff0c 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4bc0:	a806      	add	r0, sp, #24
   b4bc2:	f004 f979 	bl	b8eb8 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4bc6:	a806      	add	r0, sp, #24
   b4bc8:	f004 fd21 	bl	b960e <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4bcc:	f001 fd0a 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b4bd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   b4bd4:	f001 fd42 	bl	b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4bd8:	a806      	add	r0, sp, #24
	return index;
   b4bda:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4bdc:	f003 ff22 	bl	b8a24 <_ZN12JsonModifierD1Ev>
   b4be0:	e765      	b.n	b4aae <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4be2:	4601      	mov	r1, r0
   b4be4:	ab02      	add	r3, sp, #8
   b4be6:	4648      	mov	r0, r9
   b4be8:	465a      	mov	r2, fp
   b4bea:	f7ff fa9a 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4bee:	4629      	mov	r1, r5
   b4bf0:	a802      	add	r0, sp, #8
   b4bf2:	f00b f8c2 	bl	bfd7a <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4bf6:	b140      	cbz	r0, b4c0a <_ZN14LoRA_Functions14findNodeNumberEPKci+0x196>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4bf8:	4a0f      	ldr	r2, [pc, #60]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4bfa:	480b      	ldr	r0, [pc, #44]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4bfc:	466b      	mov	r3, sp
   b4bfe:	4639      	mov	r1, r7
   b4c00:	f7ff fa81 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4c04:	f89d 4000 	ldrb.w	r4, [sp]
   b4c08:	e751      	b.n	b4aae <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		index++;															// This will be the node number for the next node if no match is found
   b4c0a:	1cb4      	adds	r4, r6, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4c0c:	4656      	mov	r6, sl
   b4c0e:	2e0a      	cmp	r6, #10
   b4c10:	f47f af66 	bne.w	b4ae0 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x6c>
   b4c14:	e773      	b.n	b4afe <_ZN14LoRA_Functions14findNodeNumberEPKci+0x8a>
   b4c16:	bf00      	nop
   b4c18:	000c6838 	.word	0x000c6838
   b4c1c:	000c4c96 	.word	0x000c4c96
   b4c20:	2003e650 	.word	0x2003e650
   b4c24:	000c4cca 	.word	0x000c4cca
   b4c28:	2003da1c 	.word	0x2003da1c
   b4c2c:	000c4a7d 	.word	0x000c4a7d
   b4c30:	000c4cdd 	.word	0x000c4cdd
   b4c34:	000c4d09 	.word	0x000c4d09
   b4c38:	000c4c1f 	.word	0x000c4c1f
   b4c3c:	000c4a8c 	.word	0x000c4a8c
   b4c40:	000c4a88 	.word	0x000c4a88
   b4c44:	000c4b3b 	.word	0x000c4b3b
   b4c48:	000c5fb4 	.word	0x000c5fb4
   b4c4c:	000c4ae0 	.word	0x000c4ae0
   b4c50:	000c4c24 	.word	0x000c4c24
   b4c54:	00000000 	.word	0x00000000
   b4c58:	000c4b2c 	.word	0x000c4b2c

000b4c5c <_ZN14LoRA_Functions10nodeUpdateEif>:
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c5c:	b530      	push	{r4, r5, lr}
   b4c5e:	ed2d 8b02 	vpush	{d8}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c62:	4d26      	ldr	r5, [pc, #152]	; (b4cfc <_ZN14LoRA_Functions10nodeUpdateEif+0xa0>)
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c64:	b093      	sub	sp, #76	; 0x4c
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c66:	4628      	mov	r0, r5
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c68:	460c      	mov	r4, r1
   b4c6a:	eeb0 8a40 	vmov.f32	s16, s0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c6e:	f003 ff6a 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4c72:	4a23      	ldr	r2, [pc, #140]	; (b4d00 <_ZN14LoRA_Functions10nodeUpdateEif+0xa4>)
   b4c74:	4601      	mov	r1, r0
   b4c76:	466b      	mov	r3, sp
   b4c78:	4628      	mov	r0, r5
   b4c7a:	f004 f8c9 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c7e:	1e62      	subs	r2, r4, #1
   b4c80:	9900      	ldr	r1, [sp, #0]
   b4c82:	4628      	mov	r0, r5
   b4c84:	f003 ff81 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4c88:	4604      	mov	r4, r0
   b4c8a:	2800      	cmp	r0, #0
   b4c8c:	d032      	beq.n	b4cf4 <_ZN14LoRA_Functions10nodeUpdateEif+0x98>
	jp.getValueTokenByKey(nodeObjectContainer, "last", value);			// Update last connection time
   b4c8e:	ab01      	add	r3, sp, #4
   b4c90:	4a1c      	ldr	r2, [pc, #112]	; (b4d04 <_ZN14LoRA_Functions10nodeUpdateEif+0xa8>)
   b4c92:	4601      	mov	r1, r0
   b4c94:	4628      	mov	r0, r5
   b4c96:	f004 f8bb 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4c9a:	4629      	mov	r1, r5
   b4c9c:	a802      	add	r0, sp, #8
   b4c9e:	f004 fa1f 	bl	b90e0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4ca2:	9901      	ldr	r1, [sp, #4]
   b4ca4:	a802      	add	r0, sp, #8
   b4ca6:	f004 fa2d 	bl	b9104 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)Time.now());
   b4caa:	f00b fb16 	bl	c02da <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4cae:	4916      	ldr	r1, [pc, #88]	; (b4d08 <_ZN14LoRA_Functions10nodeUpdateEif+0xac>)
   b4cb0:	4602      	mov	r2, r0
   b4cb2:	a802      	add	r0, sp, #8
   b4cb4:	f004 f931 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4cb8:	a802      	add	r0, sp, #8
   b4cba:	f004 fca8 	bl	b960e <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "succ", value);			// Update the success percentage value
   b4cbe:	4a13      	ldr	r2, [pc, #76]	; (b4d0c <_ZN14LoRA_Functions10nodeUpdateEif+0xb0>)
   b4cc0:	ab01      	add	r3, sp, #4
   b4cc2:	4621      	mov	r1, r4
   b4cc4:	4628      	mov	r0, r5
   b4cc6:	f004 f8a3 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4cca:	9901      	ldr	r1, [sp, #4]
   b4ccc:	a802      	add	r0, sp, #8
   b4cce:	f004 fa19 	bl	b9104 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((float)successPercent);
   b4cd2:	eeb0 0a48 	vmov.f32	s0, s16
   b4cd6:	a802      	add	r0, sp, #8
   b4cd8:	f004 f9e2 	bl	b90a0 <_ZN10JsonWriter11insertValueEf>
	mod.finish();
   b4cdc:	a802      	add	r0, sp, #8
   b4cde:	f004 fc96 	bl	b960e <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4ce2:	f001 fc7f 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b4ce6:	6869      	ldr	r1, [r5, #4]
   b4ce8:	f001 fcb8 	bl	b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4cec:	a802      	add	r0, sp, #8
   b4cee:	f003 fe99 	bl	b8a24 <_ZN12JsonModifierD1Ev>
	return true;
   b4cf2:	2001      	movs	r0, #1
}
   b4cf4:	b013      	add	sp, #76	; 0x4c
   b4cf6:	ecbd 8b02 	vpop	{d8}
   b4cfa:	bd30      	pop	{r4, r5, pc}
   b4cfc:	2003da1c 	.word	0x2003da1c
   b4d00:	000c4a7d 	.word	0x000c4a7d
   b4d04:	000c4b3b 	.word	0x000c4b3b
   b4d08:	000c4e89 	.word	0x000c4e89
   b4d0c:	000c4c24 	.word	0x000c4c24

000b4d10 <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d10:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4d12:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d14:	b094      	sub	sp, #80	; 0x50
   b4d16:	460c      	mov	r4, r1
   b4d18:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4d1a:	dc3d      	bgt.n	b4d98 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4d1c:	4d1f      	ldr	r5, [pc, #124]	; (b4d9c <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4d1e:	4628      	mov	r0, r5
   b4d20:	f003 ff11 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4d24:	4a1e      	ldr	r2, [pc, #120]	; (b4da0 <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4d26:	4601      	mov	r1, r0
   b4d28:	ab02      	add	r3, sp, #8
   b4d2a:	4628      	mov	r0, r5
   b4d2c:	f004 f870 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4d30:	1e62      	subs	r2, r4, #1
   b4d32:	9902      	ldr	r1, [sp, #8]
   b4d34:	4628      	mov	r0, r5
   b4d36:	f003 ff28 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4d3a:	4604      	mov	r4, r0
   b4d3c:	b360      	cbz	r0, b4d98 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4d3e:	4601      	mov	r1, r0
   b4d40:	4a18      	ldr	r2, [pc, #96]	; (b4da4 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d42:	ab01      	add	r3, sp, #4
   b4d44:	4628      	mov	r0, r5
   b4d46:	f7ff f9de 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4d4a:	9a01      	ldr	r2, [sp, #4]
   b4d4c:	4916      	ldr	r1, [pc, #88]	; (b4da8 <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4d4e:	4817      	ldr	r0, [pc, #92]	; (b4dac <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4d50:	4633      	mov	r3, r6
   b4d52:	f7ff f9f4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4d56:	ab03      	add	r3, sp, #12
   b4d58:	4a12      	ldr	r2, [pc, #72]	; (b4da4 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d5a:	4621      	mov	r1, r4
   b4d5c:	4628      	mov	r0, r5
   b4d5e:	f004 f857 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4d62:	4629      	mov	r1, r5
   b4d64:	a804      	add	r0, sp, #16
   b4d66:	f004 f9bb 	bl	b90e0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4d6a:	9903      	ldr	r1, [sp, #12]
   b4d6c:	a804      	add	r0, sp, #16
   b4d6e:	f004 f9c9 	bl	b9104 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4d72:	4632      	mov	r2, r6
   b4d74:	490e      	ldr	r1, [pc, #56]	; (b4db0 <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4d76:	a804      	add	r0, sp, #16
   b4d78:	f004 f8cf 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4d7c:	a804      	add	r0, sp, #16
   b4d7e:	f004 fc46 	bl	b960e <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4d82:	f001 fc2f 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b4d86:	6869      	ldr	r1, [r5, #4]
   b4d88:	f001 fc68 	bl	b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4d8c:	a804      	add	r0, sp, #16
   b4d8e:	f003 fe49 	bl	b8a24 <_ZN12JsonModifierD1Ev>
	return true;
   b4d92:	2001      	movs	r0, #1
}
   b4d94:	b014      	add	sp, #80	; 0x50
   b4d96:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4d98:	2000      	movs	r0, #0
   b4d9a:	e7fb      	b.n	b4d94 <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4d9c:	2003da1c 	.word	0x2003da1c
   b4da0:	000c4a7d 	.word	0x000c4a7d
   b4da4:	000c4ae0 	.word	0x000c4ae0
   b4da8:	000c4d3d 	.word	0x000c4d3d
   b4dac:	2003e650 	.word	0x2003e650
   b4db0:	000c4e89 	.word	0x000c4e89

000b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4db4:	b5f0      	push	{r4, r5, r6, r7, lr}
		nodeDeviceID[i] = buf[i+4];
   b4db6:	4a2d      	ldr	r2, [pc, #180]	; (b4e6c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xb8>)
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4db8:	b08d      	sub	sp, #52	; 0x34
		nodeDeviceID[i] = buf[i+4];
   b4dba:	ac05      	add	r4, sp, #20
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4dbc:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+4];
   b4dbe:	f102 0318 	add.w	r3, r2, #24
   b4dc2:	4627      	mov	r7, r4
   b4dc4:	6810      	ldr	r0, [r2, #0]
   b4dc6:	6851      	ldr	r1, [r2, #4]
   b4dc8:	4626      	mov	r6, r4
   b4dca:	c603      	stmia	r6!, {r0, r1}
   b4dcc:	3208      	adds	r2, #8
   b4dce:	429a      	cmp	r2, r3
   b4dd0:	4634      	mov	r4, r6
   b4dd2:	d1f7      	bne.n	b4dc4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x10>
   b4dd4:	7813      	ldrb	r3, [r2, #0]
   b4dd6:	7033      	strb	r3, [r6, #0]
	current.set_sensorType(buf[29]);								// Store device type in the current data buffer 
   b4dd8:	f001 fb7c 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4ddc:	4b24      	ldr	r3, [pc, #144]	; (b4e70 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xbc>)
   b4dde:	7f59      	ldrb	r1, [r3, #29]
   b4de0:	f001 fd80 	bl	b68e4 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_nodeNumber(findNodeNumber(nodeDeviceID,current.get_nodeID()));		// Look up the new node number
   b4de4:	f001 fb76 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4de8:	4604      	mov	r4, r0
   b4dea:	f001 fb73 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4dee:	f001 fdfe 	bl	b69ee <_ZNK17currentStatusData10get_nodeIDEv>
   b4df2:	4639      	mov	r1, r7
   b4df4:	4602      	mov	r2, r0
   b4df6:	4628      	mov	r0, r5
   b4df8:	f7ff fe3c 	bl	b4a74 <_ZN14LoRA_Functions14findNodeNumberEPKci>
   b4dfc:	4601      	mov	r1, r0
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f001 fd40 	bl	b6884 <_ZN17currentStatusData14set_nodeNumberEh>
	Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4e04:	f001 fb66 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e08:	f001 fcc7 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4e0c:	9003      	str	r0, [sp, #12]
   b4e0e:	f001 fb61 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e12:	f001 fcbd 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e16:	9a03      	ldr	r2, [sp, #12]
   b4e18:	4916      	ldr	r1, [pc, #88]	; (b4e74 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc0>)
   b4e1a:	9000      	str	r0, [sp, #0]
   b4e1c:	463b      	mov	r3, r7
   b4e1e:	4816      	ldr	r0, [pc, #88]	; (b4e78 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc4>)
   b4e20:	f7ff f98d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4e24:	f001 fb56 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e28:	2101      	movs	r1, #1
   b4e2a:	f001 fd55 	bl	b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4e2e:	f001 fb51 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e32:	4604      	mov	r4, r0
   b4e34:	f00b fa51 	bl	c02da <_ZN9TimeClass3nowEv>
   b4e38:	17c3      	asrs	r3, r0, #31
   b4e3a:	4602      	mov	r2, r0
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	f001 fea0 	bl	b6b82 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4e42:	f001 fb47 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e46:	f001 fca3 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e4a:	9003      	str	r0, [sp, #12]
   b4e4c:	f001 fb42 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4e50:	f001 fcc6 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4e54:	9903      	ldr	r1, [sp, #12]
   b4e56:	4602      	mov	r2, r0
   b4e58:	4628      	mov	r0, r5
   b4e5a:	f7ff ff59 	bl	b4d10 <_ZN14LoRA_Functions10changeTypeEii>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4e5e:	4b07      	ldr	r3, [pc, #28]	; (b4e7c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc8>)
   b4e60:	2202      	movs	r2, #2
}
   b4e62:	2001      	movs	r0, #1
	lora_state = JOIN_ACK;			// Prepare to respond
   b4e64:	701a      	strb	r2, [r3, #0]
}
   b4e66:	b00d      	add	sp, #52	; 0x34
   b4e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4e6a:	bf00      	nop
   b4e6c:	2003d874 	.word	0x2003d874
   b4e70:	2003d870 	.word	0x2003d870
   b4e74:	000c4d60 	.word	0x000c4d60
   b4e78:	2003e650 	.word	0x2003e650
   b4e7c:	2003d868 	.word	0x2003d868

000b4e80 <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4e80:	b570      	push	{r4, r5, r6, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4e82:	4d20      	ldr	r5, [pc, #128]	; (b4f04 <_ZN14LoRA_Functions11changeAlertEii+0x84>)
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4e84:	b094      	sub	sp, #80	; 0x50
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4e86:	4628      	mov	r0, r5
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4e88:	460c      	mov	r4, r1
   b4e8a:	4616      	mov	r6, r2
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4e8c:	f003 fe5b 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b4e90:	4a1d      	ldr	r2, [pc, #116]	; (b4f08 <_ZN14LoRA_Functions11changeAlertEii+0x88>)
   b4e92:	4601      	mov	r1, r0
   b4e94:	ab02      	add	r3, sp, #8
   b4e96:	4628      	mov	r0, r5
   b4e98:	f003 ffba 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   b4e9c:	1e62      	subs	r2, r4, #1
   b4e9e:	9902      	ldr	r1, [sp, #8]
   b4ea0:	4628      	mov	r0, r5
   b4ea2:	f003 fe72 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - node number entry not found triggers alert
   b4ea6:	4604      	mov	r4, r0
   b4ea8:	b350      	cbz	r0, b4f00 <_ZN14LoRA_Functions11changeAlertEii+0x80>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);			// Now we have the oject for the specific node
   b4eaa:	4601      	mov	r1, r0
   b4eac:	4a17      	ldr	r2, [pc, #92]	; (b4f0c <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4eae:	ab01      	add	r3, sp, #4
   b4eb0:	4628      	mov	r0, r5
   b4eb2:	f7ff f928 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4eb6:	9a01      	ldr	r2, [sp, #4]
   b4eb8:	4915      	ldr	r1, [pc, #84]	; (b4f10 <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4eba:	4816      	ldr	r0, [pc, #88]	; (b4f14 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4ebc:	4633      	mov	r3, r6
   b4ebe:	f7ff f93e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4ec2:	ab03      	add	r3, sp, #12
   b4ec4:	4a11      	ldr	r2, [pc, #68]	; (b4f0c <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4ec6:	4621      	mov	r1, r4
   b4ec8:	4628      	mov	r0, r5
   b4eca:	f003 ffa1 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);													// Create a modifier object
   b4ece:	4629      	mov	r1, r5
   b4ed0:	a804      	add	r0, sp, #16
   b4ed2:	f004 f905 	bl	b90e0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);													// Update the pending alert value for the selected node
   b4ed6:	9903      	ldr	r1, [sp, #12]
   b4ed8:	a804      	add	r0, sp, #16
   b4eda:	f004 f913 	bl	b9104 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4ede:	4632      	mov	r2, r6
   b4ee0:	490d      	ldr	r1, [pc, #52]	; (b4f18 <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4ee2:	a804      	add	r0, sp, #16
   b4ee4:	f004 f819 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4ee8:	a804      	add	r0, sp, #16
   b4eea:	f004 fb90 	bl	b960e <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This updates the JSON object but doe not commit to to persistent storage
   b4eee:	f001 fb79 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b4ef2:	6869      	ldr	r1, [r5, #4]
   b4ef4:	f001 fbb2 	bl	b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);													// Create a modifier object
   b4ef8:	a804      	add	r0, sp, #16
   b4efa:	f003 fd93 	bl	b8a24 <_ZN12JsonModifierD1Ev>
	return true;
   b4efe:	2001      	movs	r0, #1
}
   b4f00:	b014      	add	sp, #80	; 0x50
   b4f02:	bd70      	pop	{r4, r5, r6, pc}
   b4f04:	2003da1c 	.word	0x2003da1c
   b4f08:	000c4a7d 	.word	0x000c4a7d
   b4f0c:	000c4b2c 	.word	0x000c4b2c
   b4f10:	000c4d9b 	.word	0x000c4d9b
   b4f14:	2003e650 	.word	0x2003e650
   b4f18:	000c4e89 	.word	0x000c4e89

000b4f1c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message 
   b4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f1e:	ed2d 8b02 	vpush	{d8}
   b4f22:	b0a9      	sub	sp, #164	; 0xa4
   b4f24:	4605      	mov	r5, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4f26:	f00b f9d8 	bl	c02da <_ZN9TimeClass3nowEv>
   b4f2a:	4ca7      	ldr	r4, [pc, #668]	; (b51c8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>)
   b4f2c:	1600      	asrs	r0, r0, #24
   b4f2e:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4f30:	f00b f9d3 	bl	c02da <_ZN9TimeClass3nowEv>
   b4f34:	1400      	asrs	r0, r0, #16
   b4f36:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4f38:	f00b f9cf 	bl	c02da <_ZN9TimeClass3nowEv>
   b4f3c:	1200      	asrs	r0, r0, #8
   b4f3e:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4f40:	f00b f9cb 	bl	c02da <_ZN9TimeClass3nowEv>
   b4f44:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports set by the gateway
   b4f46:	f001 fa7d 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b4f4a:	f001 fcee 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4f4e:	0a00      	lsrs	r0, r0, #8
   b4f50:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4f52:	f001 fa77 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b4f56:	f001 fce8 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4f5a:	71e0      	strb	r0, [r4, #7]
	if (current.get_nodeNumber() == 11) {			// This is a data report from an unconfigured node - need to tell it to rejoin
   b4f5c:	f001 faba 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4f60:	f001 fc16 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f64:	280b      	cmp	r0, #11
   b4f66:	f040 8083 	bne.w	b5070 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x154>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b4f6a:	f001 fab3 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4f6e:	f001 fc0f 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f72:	4996      	ldr	r1, [pc, #600]	; (b51cc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b4f74:	4602      	mov	r2, r0
   b4f76:	4896      	ldr	r0, [pc, #600]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b4f78:	f7ff f8e1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);				// This will ensure the node rejoins the network
   b4f7c:	f001 faaa 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4f80:	2101      	movs	r1, #1
   b4f82:	f001 fca9 	bl	b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4f86:	f001 faa5 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4f8a:	4605      	mov	r5, r0
   b4f8c:	f00b f9a5 	bl	c02da <_ZN9TimeClass3nowEv>
   b4f90:	4602      	mov	r2, r0
   b4f92:	17c3      	asrs	r3, r0, #31
   b4f94:	4628      	mov	r0, r5
   b4f96:	f001 fdf4 	bl	b6b82 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();												
   b4f9a:	f001 fa9b 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4f9e:	f001 fc1a 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4fa2:	7220      	strb	r0, [r4, #8]
		buf[9] = current.get_sensorType();			// Since the node is unconfigured, we need to beleive it when it tells us the type
   b4fa4:	f001 fa96 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4fa8:	f001 fc1a 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4fac:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_openHours();
   b4fae:	f001 fa91 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4fb2:	f001 fe5f 	bl	b6c74 <_ZNK17currentStatusData13get_openHoursEv>
   b4fb6:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();			// Repeat back message number
   b4fb8:	f001 fa8c 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4fbc:	f001 fc01 	bl	b67c2 <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b4fc0:	4b84      	ldr	r3, [pc, #528]	; (b51d4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
	buf[11] = current.get_messageCount();			// Repeat back message number
   b4fc2:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b4fc4:	881e      	ldrh	r6, [r3, #0]
   b4fc6:	2101      	movs	r1, #1
   b4fc8:	4630      	mov	r0, r6
   b4fca:	f00b fba2 	bl	c0712 <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4fce:	f001 fa81 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4fd2:	f001 fbe2 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	f040 80e3 	bne.w	b51a2 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x286>
   b4fdc:	f001 fa7a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b4fe0:	f001 fbd6 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
	if (manager.sendtoWait(buf, 12, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4fe4:	2304      	movs	r3, #4
   b4fe6:	4978      	ldr	r1, [pc, #480]	; (b51c8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>)
   b4fe8:	9300      	str	r3, [sp, #0]
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4fea:	4605      	mov	r5, r0
	if (manager.sendtoWait(buf, 12, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4fec:	4603      	mov	r3, r0
   b4fee:	220c      	movs	r2, #12
   b4ff0:	4879      	ldr	r0, [pc, #484]	; (b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b4ff2:	f006 f955 	bl	bb2a0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4ff6:	4601      	mov	r1, r0
   b4ff8:	2800      	cmp	r0, #0
   b4ffa:	f040 80d7 	bne.w	b51ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x290>
		digitalWrite(BLUE_LED,LOW);
   b4ffe:	4630      	mov	r0, r6
   b5000:	f00b fb87 	bl	c0712 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and RSSI / SNR of %d / %d", current.get_nodeNumber(), buf[10], buf[8], current.get_RSSI(), current.get_SNR());
   b5004:	f001 fa66 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5008:	f001 fbc2 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b500c:	7aa5      	ldrb	r5, [r4, #10]
   b500e:	7a26      	ldrb	r6, [r4, #8]
   b5010:	9005      	str	r0, [sp, #20]
   b5012:	f001 fa5f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5016:	f001 fec3 	bl	b6da0 <_ZNK17currentStatusData8get_RSSIEv>
   b501a:	4604      	mov	r4, r0
   b501c:	f001 fa5a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5020:	f001 fec3 	bl	b6daa <_ZNK17currentStatusData7get_SNREv>
   b5024:	9b05      	ldr	r3, [sp, #20]
   b5026:	4a6d      	ldr	r2, [pc, #436]	; (b51dc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c0>)
   b5028:	e9cd 4002 	strd	r4, r0, [sp, #8]
   b502c:	2180      	movs	r1, #128	; 0x80
   b502e:	e9cd 5600 	strd	r5, r6, [sp]
   b5032:	a808      	add	r0, sp, #32
   b5034:	f008 fa5e 	bl	bd4f4 <snprintf>
		Log.info(messageString);
   b5038:	4865      	ldr	r0, [pc, #404]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b503a:	a908      	add	r1, sp, #32
   b503c:	f7ff f87f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5040:	f008 f990 	bl	bd364 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b5044:	4604      	mov	r4, r0
   b5046:	2800      	cmp	r0, #0
   b5048:	f000 80bb 	beq.w	b51c2 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a6>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b504c:	4b64      	ldr	r3, [pc, #400]	; (b51e0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b504e:	4965      	ldr	r1, [pc, #404]	; (b51e4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
   b5050:	781b      	ldrb	r3, [r3, #0]
   b5052:	f88d 3000 	strb.w	r3, [sp]
   b5056:	a806      	add	r0, sp, #24
   b5058:	233c      	movs	r3, #60	; 0x3c
   b505a:	aa08      	add	r2, sp, #32
   b505c:	f008 fd6e 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5060:	a807      	add	r0, sp, #28
   b5062:	f7ff fb25 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5066:	4620      	mov	r0, r4
   b5068:	b029      	add	sp, #164	; 0xa4
   b506a:	ecbd 8b02 	vpop	{d8}
   b506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b5070:	f001 fa30 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5074:	4606      	mov	r6, r0
   b5076:	f001 fa2d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b507a:	f001 fb89 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b507e:	4601      	mov	r1, r0
   b5080:	4628      	mov	r0, r5
   b5082:	f7ff fa7b 	bl	b457c <_ZN14LoRA_Functions8getAlertEi>
   b5086:	4601      	mov	r1, r0
   b5088:	4630      	mov	r0, r6
   b508a:	f001 fc25 	bl	b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>
		if (current.get_alertCodeNode() > 0) Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b508e:	f001 fa21 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5092:	f001 fba0 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5096:	b170      	cbz	r0, b50b6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x19a>
   b5098:	f001 fa1c 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b509c:	f001 fb78 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50a0:	9005      	str	r0, [sp, #20]
   b50a2:	f001 fa17 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50a6:	f001 fb96 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50aa:	9a05      	ldr	r2, [sp, #20]
   b50ac:	494e      	ldr	r1, [pc, #312]	; (b51e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>)
   b50ae:	4603      	mov	r3, r0
   b50b0:	4847      	ldr	r0, [pc, #284]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b50b2:	f7ff f844 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_alertCodeNode() == 7) {		// if it is a change in type alert - we can do that here
   b50b6:	f001 fa0d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50ba:	f001 fb8c 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50be:	2807      	cmp	r0, #7
   b50c0:	d166      	bne.n	b5190 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x274>
			int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b50c2:	f001 fa07 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50c6:	f001 fb63 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50ca:	4601      	mov	r1, r0
   b50cc:	4628      	mov	r0, r5
   b50ce:	f7ff fa1b 	bl	b4508 <_ZN14LoRA_Functions7getTypeEi>
   b50d2:	4606      	mov	r6, r0
			Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b50d4:	f001 f9fe 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50d8:	f001 fb82 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b50dc:	4943      	ldr	r1, [pc, #268]	; (b51ec <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b50de:	4602      	mov	r2, r0
   b50e0:	4633      	mov	r3, r6
   b50e2:	483b      	ldr	r0, [pc, #236]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b50e4:	f7ff f82b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_sensorType(newSensorType);	// Update current value for data report
   b50e8:	f001 f9f4 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50ec:	4631      	mov	r1, r6
   b50ee:	f001 fbf9 	bl	b68e4 <_ZN17currentStatusData14set_sensorTypeEh>
			buf[9] = newSensorType;
   b50f2:	7266      	strb	r6, [r4, #9]
		if (current.get_alertCodeNode() != 0) LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced or applied - no longer pending
   b50f4:	f001 f9ee 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b50f8:	f001 fb6d 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50fc:	b140      	cbz	r0, b5110 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1f4>
   b50fe:	f001 f9e9 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5102:	f001 fb45 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5106:	2200      	movs	r2, #0
   b5108:	4601      	mov	r1, r0
   b510a:	4628      	mov	r0, r5
   b510c:	f7ff feb8 	bl	b4e80 <_ZN14LoRA_Functions11changeAlertEii>
		buf[8] = current.get_alertCodeNode();
   b5110:	f001 f9e0 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5114:	f001 fb5f 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5118:	7220      	strb	r0, [r4, #8]
		if (current.get_messageCount()==0) successPercent = 0.0;
   b511a:	f001 f9db 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b511e:	f001 fb50 	bl	b67c2 <_ZNK17currentStatusData16get_messageCountEv>
   b5122:	b3d8      	cbz	r0, b519c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x280>
		else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b5124:	f001 f9d6 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5128:	f001 fb50 	bl	b67cc <_ZNK17currentStatusData16get_successCountEv>
   b512c:	4605      	mov	r5, r0
   b512e:	f001 f9d1 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5132:	f001 fb46 	bl	b67c2 <_ZNK17currentStatusData16get_messageCountEv>
   b5136:	ee08 0a10 	vmov	s16, r0
   b513a:	4628      	mov	r0, r5
   b513c:	f00c fdd0 	bl	c1ce0 <__aeabi_i2d>
   b5140:	4b2b      	ldr	r3, [pc, #172]	; (b51f0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d4>)
   b5142:	2200      	movs	r2, #0
   b5144:	f00c fc80 	bl	c1a48 <__adddf3>
   b5148:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b514c:	4606      	mov	r6, r0
   b514e:	ee17 0a90 	vmov	r0, s15
   b5152:	460f      	mov	r7, r1
   b5154:	f00c fdd6 	bl	c1d04 <__aeabi_f2d>
   b5158:	4602      	mov	r2, r0
   b515a:	460b      	mov	r3, r1
   b515c:	4630      	mov	r0, r6
   b515e:	4639      	mov	r1, r7
   b5160:	f00c ff52 	bl	c2008 <__aeabi_ddiv>
   b5164:	4b23      	ldr	r3, [pc, #140]	; (b51f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d8>)
   b5166:	2200      	movs	r2, #0
   b5168:	f00c fe24 	bl	c1db4 <__aeabi_dmul>
   b516c:	f00d f91a 	bl	c23a4 <__aeabi_d2f>
   b5170:	ee08 0a10 	vmov	s16, r0
		LoRA_Functions::instance().nodeUpdate(current.get_nodeNumber(), successPercent);
   b5174:	f7fe fffc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5178:	4605      	mov	r5, r0
   b517a:	f001 f9ab 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b517e:	f001 fb07 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5182:	eeb0 0a48 	vmov.f32	s0, s16
   b5186:	4601      	mov	r1, r0
   b5188:	4628      	mov	r0, r5
   b518a:	f7ff fd67 	bl	b4c5c <_ZN14LoRA_Functions10nodeUpdateEif>
   b518e:	e70e      	b.n	b4fae <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x92>
		else buf[9] = current.get_sensorType();
   b5190:	f001 f9a0 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5194:	f001 fb24 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5198:	7260      	strb	r0, [r4, #9]
   b519a:	e7ab      	b.n	b50f4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d8>
		if (current.get_messageCount()==0) successPercent = 0.0;
   b519c:	ed9f 8a16 	vldr	s16, [pc, #88]	; b51f8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2dc>
   b51a0:	e7e8      	b.n	b5174 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x258>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b51a2:	f001 f997 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b51a6:	f001 faf8 	bl	b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b51aa:	e71b      	b.n	b4fe4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xc8>
		Log.info("Node %d data report response not acknowledged", nodeAddress);
   b51ac:	4913      	ldr	r1, [pc, #76]	; (b51fc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e0>)
   b51ae:	4808      	ldr	r0, [pc, #32]	; (b51d0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b51b0:	462a      	mov	r2, r5
   b51b2:	f7fe ffc4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b51b6:	2100      	movs	r1, #0
   b51b8:	4630      	mov	r0, r6
   b51ba:	f00b faaa 	bl	c0712 <digitalWrite>
		return false;
   b51be:	2400      	movs	r4, #0
   b51c0:	e751      	b.n	b5066 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14a>
		return true;
   b51c2:	2401      	movs	r4, #1
   b51c4:	e74f      	b.n	b5066 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x14a>
   b51c6:	bf00      	nop
   b51c8:	2003d870 	.word	0x2003d870
   b51cc:	000c4dc0 	.word	0x000c4dc0
   b51d0:	2003e650 	.word	0x2003e650
   b51d4:	000c5b8c 	.word	0x000c5b8c
   b51d8:	2003e168 	.word	0x2003e168
   b51dc:	000c4e3f 	.word	0x000c4e3f
   b51e0:	2003d869 	.word	0x2003d869
   b51e4:	000c4bf1 	.word	0x000c4bf1
   b51e8:	000c4dec 	.word	0x000c4dec
   b51ec:	000c4e0b 	.word	0x000c4e0b
   b51f0:	3ff00000 	.word	0x3ff00000
   b51f4:	40590000 	.word	0x40590000
   b51f8:	00000000 	.word	0x00000000
   b51fc:	000c4e8c 	.word	0x000c4e8c

000b5200 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5200:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5202:	b089      	sub	sp, #36	; 0x24
	uint8_t len = sizeof(buf);
   b5204:	2379      	movs	r3, #121	; 0x79
   b5206:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b520a:	f10d 031f 	add.w	r3, sp, #31
   b520e:	9303      	str	r3, [sp, #12]
   b5210:	f10d 031e 	add.w	r3, sp, #30
   b5214:	9302      	str	r3, [sp, #8]
   b5216:	4d7d      	ldr	r5, [pc, #500]	; (b540c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x20c>)
   b5218:	f10d 031d 	add.w	r3, sp, #29
   b521c:	9301      	str	r3, [sp, #4]
   b521e:	ab07      	add	r3, sp, #28
   b5220:	9300      	str	r3, [sp, #0]
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5222:	4606      	mov	r6, r0
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b5224:	f10d 031b 	add.w	r3, sp, #27
   b5228:	4879      	ldr	r0, [pc, #484]	; (b5410 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x210>)
   b522a:	f10d 021a 	add.w	r2, sp, #26
   b522e:	4629      	mov	r1, r5
   b5230:	f006 f86a 	bl	bb308 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b5234:	4604      	mov	r4, r0
   b5236:	2800      	cmp	r0, #0
   b5238:	f000 80e3 	beq.w	b5402 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x202>
		buf[len] = 0;
   b523c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5240:	2400      	movs	r4, #0
   b5242:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b5244:	882e      	ldrh	r6, [r5, #0]
   b5246:	f001 f8fd 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b524a:	f001 fb69 	bl	b6920 <_ZNK13sysStatusData15get_magicNumberEv>
   b524e:	ba76      	rev16	r6, r6
   b5250:	b2b6      	uxth	r6, r6
   b5252:	42b0      	cmp	r0, r6
   b5254:	d016      	beq.n	b5284 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x84>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b5256:	f001 f93d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b525a:	f001 fa99 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b525e:	882b      	ldrh	r3, [r5, #0]
   b5260:	9005      	str	r0, [sp, #20]
   b5262:	ba5b      	rev16	r3, r3
   b5264:	b29b      	uxth	r3, r3
   b5266:	9304      	str	r3, [sp, #16]
   b5268:	f001 f8ec 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b526c:	f001 fb58 	bl	b6920 <_ZNK13sysStatusData15get_magicNumberEv>
   b5270:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5274:	9000      	str	r0, [sp, #0]
   b5276:	4967      	ldr	r1, [pc, #412]	; (b5414 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x214>)
   b5278:	4867      	ldr	r0, [pc, #412]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b527a:	f7fe ff60 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b527e:	4620      	mov	r0, r4
   b5280:	b009      	add	sp, #36	; 0x24
   b5282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_nodeNumber(from);												// Captures the nodeNumber 
   b5284:	f001 f926 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5288:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b528c:	f001 fafa 	bl	b6884 <_ZN17currentStatusData14set_nodeNumberEh>
		current.set_tempNodeNumber(0);												// Clear for new response
   b5290:	f001 f920 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5294:	4621      	mov	r1, r4
   b5296:	f001 fafb 	bl	b6890 <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_hops(hops);														// How many hops to get here
   b529a:	f001 f91b 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b529e:	f89d 101f 	ldrb.w	r1, [sp, #31]
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b52a2:	4c5e      	ldr	r4, [pc, #376]	; (b541c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x21c>)
		current.set_hops(hops);														// How many hops to get here
   b52a4:	f001 fb24 	bl	b68f0 <_ZN17currentStatusData8set_hopsEh>
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b52a8:	f001 f914 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b52ac:	8869      	ldrh	r1, [r5, #2]
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d in %d hops", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], driver.lastRssi(), driver.lastSNR(), current.get_hops());
   b52ae:	4d5c      	ldr	r5, [pc, #368]	; (b5420 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x220>)
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b52b0:	ba49      	rev16	r1, r1
   b52b2:	b289      	uxth	r1, r1
   b52b4:	f001 fc05 	bl	b6ac2 <_ZN17currentStatusData10set_nodeIDEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b52b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b52bc:	f003 030f 	and.w	r3, r3, #15
   b52c0:	7023      	strb	r3, [r4, #0]
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d in %d hops", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], driver.lastRssi(), driver.lastSNR(), current.get_hops());
   b52c2:	f001 f907 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b52c6:	f001 fa63 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b52ca:	9005      	str	r0, [sp, #20]
   b52cc:	f001 f902 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b52d0:	f001 fb8d 	bl	b69ee <_ZNK17currentStatusData10get_nodeIDEv>
   b52d4:	7821      	ldrb	r1, [r4, #0]
   b52d6:	9004      	str	r0, [sp, #16]
   b52d8:	4852      	ldr	r0, [pc, #328]	; (b5424 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x224>)
   b52da:	eb05 1501 	add.w	r5, r5, r1, lsl #4
   b52de:	f005 fdc4 	bl	bae6a <_ZN15RHGenericDriver8lastRssiEv>
   b52e2:	4606      	mov	r6, r0
   b52e4:	484f      	ldr	r0, [pc, #316]	; (b5424 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x224>)
   b52e6:	f006 ff63 	bl	bc1b0 <_ZN7RH_RF957lastSNREv>
   b52ea:	4607      	mov	r7, r0
   b52ec:	f001 f8f2 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b52f0:	f001 fa7b 	bl	b67ea <_ZNK17currentStatusData8get_hopsEv>
   b52f4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b52f8:	494b      	ldr	r1, [pc, #300]	; (b5428 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x228>)
   b52fa:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b52fe:	e9cd 5600 	strd	r5, r6, [sp]
   b5302:	4845      	ldr	r0, [pc, #276]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b5304:	f7fe ff1b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b5308:	f001 f8e4 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b530c:	f001 fa40 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5310:	280a      	cmp	r0, #10
   b5312:	d82f      	bhi.n	b5374 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x174>
   b5314:	f7fe ff2c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5318:	4605      	mov	r5, r0
   b531a:	f001 f8db 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b531e:	f001 fa37 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5322:	9004      	str	r0, [sp, #16]
   b5324:	f001 f8d6 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5328:	f001 fb61 	bl	b69ee <_ZNK17currentStatusData10get_nodeIDEv>
   b532c:	9904      	ldr	r1, [sp, #16]
   b532e:	4602      	mov	r2, r0
   b5330:	4628      	mov	r0, r5
   b5332:	f7ff f8b3 	bl	b449c <_ZN14LoRA_Functions14nodeConfiguredEii>
   b5336:	b9e8      	cbnz	r0, b5374 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x174>
			Log.info("Node not properly configured, resetting node number");
   b5338:	493c      	ldr	r1, [pc, #240]	; (b542c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x22c>)
   b533a:	4837      	ldr	r0, [pc, #220]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b533c:	f7fe feff 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_tempNodeNumber(current.get_nodeNumber());					// Store node number in temp for the repsonse
   b5340:	f001 f8c8 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5344:	4605      	mov	r5, r0
   b5346:	f001 f8c5 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b534a:	f001 fa21 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b534e:	4601      	mov	r1, r0
   b5350:	4628      	mov	r0, r5
			current.set_tempNodeNumber(from);										// We need this address for the reply					
   b5352:	f001 fa9d 	bl	b6890 <_ZN17currentStatusData18set_tempNodeNumberEh>
			current.set_nodeNumber(11);												// This way an unconfigured nor invalid node ends up wtih a node number of 11
   b5356:	f001 f8bd 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b535a:	210b      	movs	r1, #11
   b535c:	f001 fa92 	bl	b6884 <_ZN17currentStatusData14set_nodeNumberEh>
		if (lora_state == DATA_RPT) {if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b5360:	7823      	ldrb	r3, [r4, #0]
   b5362:	2b03      	cmp	r3, #3
   b5364:	d111      	bne.n	b538a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x18a>
   b5366:	f7fe ff03 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b536a:	f7fe fffd 	bl	b4368 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
   b536e:	b9c0      	cbnz	r0, b53a2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1a2>
		else {Log.info("Invalid message flag, returning"); return false;}
   b5370:	2400      	movs	r4, #0
   b5372:	e784      	b.n	b527e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7e>
		else if (current.get_nodeNumber() >= 11) {
   b5374:	f001 f8ae 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5378:	f001 fa0a 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b537c:	280a      	cmp	r0, #10
   b537e:	d9ef      	bls.n	b5360 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x160>
			current.set_tempNodeNumber(from);										// We need this address for the reply					
   b5380:	f001 f8a8 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5384:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b5388:	e7e3      	b.n	b5352 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x152>
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b538a:	2b01      	cmp	r3, #1
   b538c:	d104      	bne.n	b5398 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x198>
   b538e:	f7fe feef 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5392:	f7ff fd0f 	bl	b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b5396:	e7ea      	b.n	b536e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x16e>
		else {Log.info("Invalid message flag, returning"); return false;}
   b5398:	4925      	ldr	r1, [pc, #148]	; (b5430 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x230>)
   b539a:	481f      	ldr	r0, [pc, #124]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b539c:	f7fe fecf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b53a0:	e7e6      	b.n	b5370 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x170>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              			// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b53a2:	f001 f84f 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b53a6:	f001 fb1d 	bl	b69e4 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b53aa:	b1c0      	cbz	r0, b53de <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1de>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());// This was the temporary value from the particle function
   b53ac:	f001 f84a 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b53b0:	4605      	mov	r5, r0
   b53b2:	f001 f847 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b53b6:	f001 fb15 	bl	b69e4 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b53ba:	4601      	mov	r1, r0
   b53bc:	4628      	mov	r0, r5
   b53be:	f001 fb74 	bl	b6aaa <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b53c2:	f001 f83f 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b53c6:	2100      	movs	r1, #0
   b53c8:	f001 fb75 	bl	b6ab6 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b53cc:	f001 f83a 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b53d0:	f001 faab 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b53d4:	4917      	ldr	r1, [pc, #92]	; (b5434 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x234>)
   b53d6:	4602      	mov	r2, r0
   b53d8:	480f      	ldr	r0, [pc, #60]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b53da:	f7fe feb0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b53de:	7823      	ldrb	r3, [r4, #0]
   b53e0:	2b04      	cmp	r3, #4
   b53e2:	d105      	bne.n	b53f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f0>
   b53e4:	f7fe fec4 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53e8:	f7ff fd98 	bl	b4f1c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b53ec:	4604      	mov	r4, r0
   b53ee:	e746      	b.n	b527e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7e>
   b53f0:	2b02      	cmp	r3, #2
   b53f2:	d104      	bne.n	b53fe <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1fe>
   b53f4:	f7fe febc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53f8:	f7ff f970 	bl	b46dc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b53fc:	e7f6      	b.n	b53ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ec>
		else {Log.info("Invalid message flag"); return false;}
   b53fe:	490e      	ldr	r1, [pc, #56]	; (b5438 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x238>)
   b5400:	e7cb      	b.n	b539a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x19a>
	else LoRA_Functions::clearBuffer();
   b5402:	4630      	mov	r0, r6
   b5404:	f7fe fec8 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5408:	e739      	b.n	b527e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7e>
   b540a:	bf00      	nop
   b540c:	2003d870 	.word	0x2003d870
   b5410:	2003e168 	.word	0x2003e168
   b5414:	000c4eba 	.word	0x000c4eba
   b5418:	2003e650 	.word	0x2003e650
   b541c:	2003d868 	.word	0x2003d868
   b5420:	2003d578 	.word	0x2003d578
   b5424:	2003d8ec 	.word	0x2003d8ec
   b5428:	000c4f14 	.word	0x000c4f14
   b542c:	000c4f58 	.word	0x000c4f58
   b5430:	000c4f8c 	.word	0x000c4f8c
   b5434:	000c4fac 	.word	0x000c4fac
   b5438:	000c4fe0 	.word	0x000c4fe0

000b543c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b543c:	4b01      	ldr	r3, [pc, #4]	; (b5444 <_Z18outOfMemoryHandleryi+0x8>)
   b543e:	601a      	str	r2, [r3, #0]
}
   b5440:	4770      	bx	lr
   b5442:	bf00      	nop
   b5444:	2003d5e8 	.word	0x2003d5e8

000b5448 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b5448:	4b01      	ldr	r3, [pc, #4]	; (b5450 <_Z13userSwitchISRv+0x8>)
   b544a:	2201      	movs	r2, #1
   b544c:	701a      	strb	r2, [r3, #0]
}
   b544e:	4770      	bx	lr
   b5450:	2003e462 	.word	0x2003e462

000b5454 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5454:	b530      	push	{r4, r5, lr}
   b5456:	b085      	sub	sp, #20
   b5458:	4604      	mov	r4, r0
   b545a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b545c:	b160      	cbz	r0, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b545e:	6840      	ldr	r0, [r0, #4]
   b5460:	b150      	cbz	r0, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5462:	6885      	ldr	r5, [r0, #8]
   b5464:	b145      	cbz	r5, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b5466:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b546a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b546e:	68c4      	ldr	r4, [r0, #12]
   b5470:	ab01      	add	r3, sp, #4
   b5472:	466a      	mov	r2, sp
   b5474:	a902      	add	r1, sp, #8
   b5476:	47a0      	blx	r4
    }
   b5478:	b005      	add	sp, #20
   b547a:	bd30      	pop	{r4, r5, pc}

000b547c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b547c:	b530      	push	{r4, r5, lr}
   b547e:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5480:	6800      	ldr	r0, [r0, #0]
   b5482:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5484:	9301      	str	r3, [sp, #4]
   b5486:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b548a:	6883      	ldr	r3, [r0, #8]
   b548c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5490:	b90b      	cbnz	r3, b5496 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5492:	f00b fa49 	bl	c0928 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5496:	68c3      	ldr	r3, [r0, #12]
   b5498:	aa01      	add	r2, sp, #4
   b549a:	a902      	add	r1, sp, #8
   b549c:	4798      	blx	r3
      }
   b549e:	b005      	add	sp, #20
   b54a0:	bd30      	pop	{r4, r5, pc}

000b54a2 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b54a2:	2a01      	cmp	r2, #1
   b54a4:	d102      	bne.n	b54ac <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54a6:	6001      	str	r1, [r0, #0]
      }
   b54a8:	2000      	movs	r0, #0
   b54aa:	4770      	bx	lr
	  switch (__op)
   b54ac:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b54ae:	bf04      	itt	eq
   b54b0:	680b      	ldreq	r3, [r1, #0]
   b54b2:	6003      	streq	r3, [r0, #0]
	      break;
   b54b4:	e7f8      	b.n	b54a8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b54b6 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b54b6:	6803      	ldr	r3, [r0, #0]
   b54b8:	6812      	ldr	r2, [r2, #0]
   b54ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   b54be:	4718      	bx	r3

000b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b54c0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54c2:	2000      	movs	r0, #0
   b54c4:	f007 ff6e 	bl	bd3a4 <spark_sync_time_pending>
   b54c8:	b128      	cbz	r0, b54d6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b54ca:	f007 ff4b 	bl	bd364 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54ce:	f080 0001 	eor.w	r0, r0, #1
   b54d2:	b2c0      	uxtb	r0, r0
    }
   b54d4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54d6:	2001      	movs	r0, #1
   b54d8:	e7fc      	b.n	b54d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b54da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b54da:	b510      	push	{r4, lr}
      if (_M_manager)
   b54dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b54de:	4604      	mov	r4, r0
      if (_M_manager)
   b54e0:	b113      	cbz	r3, b54e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54e2:	2203      	movs	r2, #3
   b54e4:	4601      	mov	r1, r0
   b54e6:	4798      	blx	r3
    }
   b54e8:	4620      	mov	r0, r4
   b54ea:	bd10      	pop	{r4, pc}

000b54ec <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b54ec:	b510      	push	{r4, lr}
            delete callableWrapper;
   b54ee:	4604      	mov	r4, r0
   b54f0:	b138      	cbz	r0, b5502 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b54f2:	f7ff fff2 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b54f6:	4620      	mov	r0, r4
   b54f8:	2110      	movs	r1, #16
        };
   b54fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b54fe:	f7fe bdce 	b.w	b409e <_ZdlPvj>
        };
   b5502:	bd10      	pop	{r4, pc}

000b5504 <_Z22publishStateTransitionv>:
{
   b5504:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5506:	4c14      	ldr	r4, [pc, #80]	; (b5558 <_Z22publishStateTransitionv+0x54>)
   b5508:	4d14      	ldr	r5, [pc, #80]	; (b555c <_Z22publishStateTransitionv+0x58>)
   b550a:	7823      	ldrb	r3, [r4, #0]
   b550c:	4e14      	ldr	r6, [pc, #80]	; (b5560 <_Z22publishStateTransitionv+0x5c>)
   b550e:	2b02      	cmp	r3, #2
{
   b5510:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5512:	d117      	bne.n	b5544 <_Z22publishStateTransitionv+0x40>
   b5514:	f00a fec4 	bl	c02a0 <_ZN9TimeClass7isValidEv>
   b5518:	b9a0      	cbnz	r0, b5544 <_Z22publishStateTransitionv+0x40>
   b551a:	7822      	ldrb	r2, [r4, #0]
   b551c:	7833      	ldrb	r3, [r6, #0]
   b551e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b5522:	9200      	str	r2, [sp, #0]
   b5524:	4a0f      	ldr	r2, [pc, #60]	; (b5564 <_Z22publishStateTransitionv+0x60>)
   b5526:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b552a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b552e:	a802      	add	r0, sp, #8
   b5530:	f007 ffe0 	bl	bd4f4 <snprintf>
	oldState = state;
   b5534:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b5536:	480c      	ldr	r0, [pc, #48]	; (b5568 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b5538:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b553a:	a902      	add	r1, sp, #8
   b553c:	f7fe fdff 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b5540:	b042      	add	sp, #264	; 0x108
   b5542:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b5544:	7822      	ldrb	r2, [r4, #0]
   b5546:	7833      	ldrb	r3, [r6, #0]
   b5548:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b554c:	9200      	str	r2, [sp, #0]
   b554e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b5552:	4a06      	ldr	r2, [pc, #24]	; (b556c <_Z22publishStateTransitionv+0x68>)
   b5554:	e7e9      	b.n	b552a <_Z22publishStateTransitionv+0x26>
   b5556:	bf00      	nop
   b5558:	2003e461 	.word	0x2003e461
   b555c:	2003d5ec 	.word	0x2003d5ec
   b5560:	2003e460 	.word	0x2003e460
   b5564:	000c5018 	.word	0x000c5018
   b5568:	2003e650 	.word	0x2003e650
   b556c:	000c5038 	.word	0x000c5038

000b5570 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5574:	ed2d 8b02 	vpush	{d8}
   b5578:	b0eb      	sub	sp, #428	; 0x1ac
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b557a:	ad22      	add	r5, sp, #136	; 0x88
   b557c:	2300      	movs	r3, #0
   b557e:	61eb      	str	r3, [r5, #28]
   b5580:	4b91      	ldr	r3, [pc, #580]	; (b57c8 <_Z14publishWebhookh+0x258>)
   b5582:	602b      	str	r3, [r5, #0]
   b5584:	4b91      	ldr	r3, [pc, #580]	; (b57cc <_Z14publishWebhookh+0x25c>)
   b5586:	606b      	str	r3, [r5, #4]
   b5588:	4b91      	ldr	r3, [pc, #580]	; (b57d0 <_Z14publishWebhookh+0x260>)
   b558a:	60ab      	str	r3, [r5, #8]
   b558c:	4b91      	ldr	r3, [pc, #580]	; (b57d4 <_Z14publishWebhookh+0x264>)
   b558e:	60eb      	str	r3, [r5, #12]
   b5590:	4b91      	ldr	r3, [pc, #580]	; (b57d8 <_Z14publishWebhookh+0x268>)
   b5592:	612b      	str	r3, [r5, #16]
   b5594:	4b91      	ldr	r3, [pc, #580]	; (b57dc <_Z14publishWebhookh+0x26c>)
   b5596:	616b      	str	r3, [r5, #20]
   b5598:	4b91      	ldr	r3, [pc, #580]	; (b57e0 <_Z14publishWebhookh+0x270>)
   b559a:	61ab      	str	r3, [r5, #24]
void publishWebhook(uint8_t nodeNumber) {
   b559c:	4604      	mov	r4, r0

	if (!Time.isValid()) return;										// A webhook without a valid timestamp is worthless
   b559e:	f00a fe7f 	bl	c02a0 <_ZN9TimeClass7isValidEv>
   b55a2:	b300      	cbz	r0, b55e6 <_Z14publishWebhookh+0x76>
	unsigned long endTimePeriod = Time.now() - (Time.second() + 1);		// Moves the timestamp withing the reporting boundary - so 18:00:14 becomes 17:59:59 - helps in Ubidots reporting
   b55a4:	f00a fe99 	bl	c02da <_ZN9TimeClass3nowEv>
   b55a8:	4680      	mov	r8, r0
   b55aa:	f00a feb3 	bl	c0314 <_ZN9TimeClass6secondEv>
   b55ae:	1c43      	adds	r3, r0, #1
   b55b0:	eba8 0803 	sub.w	r8, r8, r3

	if (nodeNumber > 0) {												// Webhook for a node
   b55b4:	2c00      	cmp	r4, #0
   b55b6:	f000 80b7 	beq.w	b5728 <_Z14publishWebhookh+0x1b8>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b55ba:	f7fe fdd9 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b55be:	9015      	str	r0, [sp, #84]	; 0x54
   b55c0:	f000 ff88 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b55c4:	f001 fa13 	bl	b69ee <_ZNK17currentStatusData10get_nodeIDEv>
   b55c8:	4622      	mov	r2, r4
   b55ca:	4603      	mov	r3, r0
   b55cc:	9915      	ldr	r1, [sp, #84]	; 0x54
   b55ce:	a81e      	add	r0, sp, #120	; 0x78
   b55d0:	f7fe ff1a 	bl	b4408 <_ZN14LoRA_Functions12findDeviceIDEii>
   b55d4:	4983      	ldr	r1, [pc, #524]	; (b57e4 <_Z14publishWebhookh+0x274>)
   b55d6:	a81e      	add	r0, sp, #120	; 0x78
   b55d8:	f00a fbcf 	bl	bfd7a <_ZNK6String6equalsEPKc>
		if (deviceID == "null") return;									// A webhook without a deviceID is worthless
   b55dc:	4604      	mov	r4, r0
   b55de:	b138      	cbz	r0, b55f0 <_Z14publishWebhookh+0x80>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b55e0:	a81e      	add	r0, sp, #120	; 0x78
   b55e2:	f00a fab9 	bl	bfb58 <_ZN6StringD1Ev>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), endTimePeriod);
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}
	return;
}
   b55e6:	b06b      	add	sp, #428	; 0x1ac
   b55e8:	ecbd 8b02 	vpop	{d8}
   b55ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b55f0:	f000 ff70 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b55f4:	f001 f8ea 	bl	b67cc <_ZNK17currentStatusData16get_successCountEv>
   b55f8:	4681      	mov	r9, r0
   b55fa:	f000 ff6b 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b55fe:	f001 f8e0 	bl	b67c2 <_ZNK17currentStatusData16get_messageCountEv>
	const char * c_str() const { return buffer; }
   b5602:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
   b5606:	4682      	mov	sl, r0
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5608:	f000 ff64 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b560c:	f001 f9f4 	bl	b69f8 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5610:	9016      	str	r0, [sp, #88]	; 0x58
   b5612:	f000 ff5f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5616:	f001 fa1f 	bl	b6a58 <_ZNK17currentStatusData14get_dailyCountEv>
   b561a:	9017      	str	r0, [sp, #92]	; 0x5c
   b561c:	f000 ff5a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5620:	f001 f8de 	bl	b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5624:	9018      	str	r0, [sp, #96]	; 0x60
   b5626:	f000 ff55 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b562a:	f000 ff7d 	bl	b6528 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b562e:	eeb0 8a40 	vmov.f32	s16, s0
   b5632:	eef0 8a60 	vmov.f32	s17, s1
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5636:	f000 ff4d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b563a:	f001 f8b8 	bl	b67ae <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b563e:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   b5642:	9315      	str	r3, [sp, #84]	; 0x54
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_hops(), current.get_messageCount(), percentSuccess, endTimePeriod);
   b5644:	f000 ff46 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5648:	f001 f8ac 	bl	b67a4 <_ZNK17currentStatusData17get_internalTempCEv>
   b564c:	9019      	str	r0, [sp, #100]	; 0x64
   b564e:	f000 ff41 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5652:	f001 f8b1 	bl	b67b8 <_ZNK17currentStatusData14get_resetCountEv>
   b5656:	901a      	str	r0, [sp, #104]	; 0x68
   b5658:	f000 ff3c 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b565c:	f001 f8bb 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5660:	901b      	str	r0, [sp, #108]	; 0x6c
   b5662:	f000 ff37 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5666:	f001 f893 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b566a:	901c      	str	r0, [sp, #112]	; 0x70
   b566c:	f000 ff32 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5670:	f001 fb96 	bl	b6da0 <_ZNK17currentStatusData8get_RSSIEv>
   b5674:	4605      	mov	r5, r0
   b5676:	f000 ff2d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b567a:	f001 fb96 	bl	b6daa <_ZNK17currentStatusData7get_SNREv>
   b567e:	4606      	mov	r6, r0
   b5680:	f000 ff28 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5684:	f001 f8b1 	bl	b67ea <_ZNK17currentStatusData8get_hopsEv>
   b5688:	4607      	mov	r7, r0
   b568a:	f000 ff23 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b568e:	f001 f898 	bl	b67c2 <_ZNK17currentStatusData16get_messageCountEv>
   b5692:	901d      	str	r0, [sp, #116]	; 0x74
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5694:	4648      	mov	r0, r9
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b5696:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b569a:	f00c fb21 	bl	c1ce0 <__aeabi_i2d>
   b569e:	4680      	mov	r8, r0
   b56a0:	4650      	mov	r0, sl
   b56a2:	4689      	mov	r9, r1
   b56a4:	f00c fb1c 	bl	c1ce0 <__aeabi_i2d>
   b56a8:	4602      	mov	r2, r0
   b56aa:	460b      	mov	r3, r1
   b56ac:	4640      	mov	r0, r8
   b56ae:	4649      	mov	r1, r9
   b56b0:	f00c fcaa 	bl	c2008 <__aeabi_ddiv>
   b56b4:	4b4c      	ldr	r3, [pc, #304]	; (b57e8 <_Z14publishWebhookh+0x278>)
   b56b6:	2200      	movs	r2, #0
   b56b8:	f00c fb7c 	bl	c1db4 <__aeabi_dmul>
   b56bc:	f00c fe72 	bl	c23a4 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"hops\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56c0:	f00c fb20 	bl	c1d04 <__aeabi_f2d>
   b56c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b56c6:	4a49      	ldr	r2, [pc, #292]	; (b57ec <_Z14publishWebhookh+0x27c>)
   b56c8:	e9cd 730d 	strd	r7, r3, [sp, #52]	; 0x34
   b56cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b56ce:	930a      	str	r3, [sp, #40]	; 0x28
   b56d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b56d2:	9309      	str	r3, [sp, #36]	; 0x24
   b56d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b56d6:	9308      	str	r3, [sp, #32]
   b56d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b56da:	9307      	str	r3, [sp, #28]
   b56dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b56de:	9306      	str	r3, [sp, #24]
   b56e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b56e2:	9302      	str	r3, [sp, #8]
   b56e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b56e6:	9301      	str	r3, [sp, #4]
   b56e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b56ea:	9300      	str	r3, [sp, #0]
   b56ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   b56f0:	465b      	mov	r3, fp
   b56f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   b56f6:	a82a      	add	r0, sp, #168	; 0xa8
   b56f8:	e9cd 560b 	strd	r5, r6, [sp, #44]	; 0x2c
   b56fc:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5700:	f007 fef8 	bl	bd4f4 <snprintf>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b5704:	f004 fe8c 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b5708:	4b39      	ldr	r3, [pc, #228]	; (b57f0 <_Z14publishWebhookh+0x280>)
   b570a:	4a3a      	ldr	r2, [pc, #232]	; (b57f4 <_Z14publishWebhookh+0x284>)
   b570c:	781b      	ldrb	r3, [r3, #0]
   b570e:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5710:	4939      	ldr	r1, [pc, #228]	; (b57f8 <_Z14publishWebhookh+0x288>)
   b5712:	4313      	orrs	r3, r2
   b5714:	6802      	ldr	r2, [r0, #0]
   b5716:	f88d 3000 	strb.w	r3, [sp]
   b571a:	f88d 4004 	strb.w	r4, [sp, #4]
   b571e:	6814      	ldr	r4, [r2, #0]
   b5720:	233c      	movs	r3, #60	; 0x3c
   b5722:	aa2a      	add	r2, sp, #168	; 0xa8
   b5724:	47a0      	blx	r4
   b5726:	e75b      	b.n	b55e0 <_Z14publishWebhookh+0x70>
		takeMeasurements();												// Loads the current values for the Gateway
   b5728:	f002 f98c 	bl	b7a44 <_Z16takeMeasurementsv>
        return spark_deviceID();
   b572c:	a81e      	add	r0, sp, #120	; 0x78
   b572e:	f007 fe21 	bl	bd374 <spark_deviceID>
   b5732:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b5734:	9315      	str	r3, [sp, #84]	; 0x54
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5736:	f000 fe85 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b573a:	f001 f824 	bl	b6786 <_ZNK13sysStatusData14get_sensorTypeEv>
   b573e:	4606      	mov	r6, r0
   b5740:	f000 fec8 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b5744:	f000 fef0 	bl	b6528 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5748:	eeb0 8a40 	vmov.f32	s16, s0
   b574c:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5750:	f000 fec0 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5754:	f001 f82b 	bl	b67ae <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b5758:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), endTimePeriod);
   b575c:	f000 feba 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5760:	f001 f820 	bl	b67a4 <_ZNK17currentStatusData17get_internalTempCEv>
   b5764:	4605      	mov	r5, r0
   b5766:	f000 fe6d 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b576a:	f000 fff3 	bl	b6754 <_ZNK13sysStatusData14get_resetCountEv>
   b576e:	4607      	mov	r7, r0
   b5770:	f000 fe68 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5774:	f000 fff3 	bl	b675e <_ZNK13sysStatusData16get_messageCountEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b5778:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b577a:	4a20      	ldr	r2, [pc, #128]	; (b57fc <_Z14publishWebhookh+0x28c>)
   b577c:	9400      	str	r4, [sp, #0]
   b577e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5782:	e9cd 0809 	strd	r0, r8, [sp, #36]	; 0x24
   b5786:	e9cd 4601 	strd	r4, r6, [sp, #4]
   b578a:	e9cd 5707 	strd	r5, r7, [sp, #28]
   b578e:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5792:	f8cd 9018 	str.w	r9, [sp, #24]
   b5796:	a82a      	add	r0, sp, #168	; 0xa8
   b5798:	f007 feac 	bl	bd4f4 <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b579c:	a81e      	add	r0, sp, #120	; 0x78
   b579e:	f00a f9db 	bl	bfb58 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b57a2:	f004 fe3d 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
   b57a6:	4b12      	ldr	r3, [pc, #72]	; (b57f0 <_Z14publishWebhookh+0x280>)
   b57a8:	4a12      	ldr	r2, [pc, #72]	; (b57f4 <_Z14publishWebhookh+0x284>)
   b57aa:	781b      	ldrb	r3, [r3, #0]
   b57ac:	7812      	ldrb	r2, [r2, #0]
   b57ae:	4914      	ldr	r1, [pc, #80]	; (b5800 <_Z14publishWebhookh+0x290>)
   b57b0:	4313      	orrs	r3, r2
   b57b2:	6802      	ldr	r2, [r0, #0]
   b57b4:	f88d 3000 	strb.w	r3, [sp]
   b57b8:	f88d 4004 	strb.w	r4, [sp, #4]
   b57bc:	6814      	ldr	r4, [r2, #0]
   b57be:	233c      	movs	r3, #60	; 0x3c
   b57c0:	aa2a      	add	r2, sp, #168	; 0xa8
   b57c2:	47a0      	blx	r4
   b57c4:	e70f      	b.n	b55e6 <_Z14publishWebhookh+0x76>
   b57c6:	bf00      	nop
   b57c8:	000c5046 	.word	0x000c5046
   b57cc:	000c504e 	.word	0x000c504e
   b57d0:	000c5052 	.word	0x000c5052
   b57d4:	000c505b 	.word	0x000c505b
   b57d8:	000c5063 	.word	0x000c5063
   b57dc:	000c506f 	.word	0x000c506f
   b57e0:	000c5075 	.word	0x000c5075
   b57e4:	000c4a83 	.word	0x000c4a83
   b57e8:	40590000 	.word	0x40590000
   b57ec:	000c5081 	.word	0x000c5081
   b57f0:	2003e31d 	.word	0x2003e31d
   b57f4:	2003e31c 	.word	0x2003e31c
   b57f8:	000c515a 	.word	0x000c515a
   b57fc:	000c516f 	.word	0x000c516f
   b5800:	000c51fd 	.word	0x000c51fd

000b5804 <_Z9softDelaym>:
 * @brief soft delay let's us process Particle functions and service the sensor interrupts while pausing
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
   b5804:	b570      	push	{r4, r5, r6, lr}
   b5806:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5808:	f007 fab0 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b580c:	4e06      	ldr	r6, [pc, #24]	; (b5828 <_Z9softDelaym+0x24>)
   b580e:	4604      	mov	r4, r0
   b5810:	f007 faac 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b5814:	1b00      	subs	r0, r0, r4
   b5816:	42a8      	cmp	r0, r5
   b5818:	d205      	bcs.n	b5826 <_Z9softDelaym+0x22>
		return HAL_Timer_Get_Milli_Seconds();
   b581a:	f007 faa7 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b581e:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b5820:	f007 fd90 	bl	bd344 <spark_process>
    }
   b5824:	e7f4      	b.n	b5810 <_Z9softDelaym+0xc>
}
   b5826:	bd70      	pop	{r4, r5, r6, pc}
   b5828:	2003e710 	.word	0x2003e710

000b582c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b582c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b582e:	2300      	movs	r3, #0
   b5830:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5832:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5834:	4604      	mov	r4, r0
   b5836:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5838:	b12b      	cbz	r3, b5846 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b583a:	2202      	movs	r2, #2
   b583c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b583e:	68eb      	ldr	r3, [r5, #12]
   b5840:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5842:	68ab      	ldr	r3, [r5, #8]
   b5844:	60a3      	str	r3, [r4, #8]
    }
   b5846:	4620      	mov	r0, r4
   b5848:	bd38      	pop	{r3, r4, r5, pc}
	...

000b584c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b584c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5850:	b095      	sub	sp, #84	; 0x54
   b5852:	4605      	mov	r5, r0
        };
   b5854:	991c      	ldr	r1, [sp, #112]	; 0x70
   b5856:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5858:	4690      	mov	r8, r2
   b585a:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b585c:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b585e:	f7ff ffe5 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5862:	a904      	add	r1, sp, #16
   b5864:	a808      	add	r0, sp, #32
   b5866:	f7ff ffe1 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b586a:	a908      	add	r1, sp, #32
   b586c:	4630      	mov	r0, r6
   b586e:	f7ff ffdd 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b5872:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5876:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5878:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b587c:	f7fe fc0b 	bl	b4096 <_Znwj>
   b5880:	4604      	mov	r4, r0
   b5882:	b1a0      	cbz	r0, b58ae <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5884:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5888:	ab01      	add	r3, sp, #4
   b588a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b588e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5892:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5896:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b589a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b589c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b589e:	60a3      	str	r3, [r4, #8]
   b58a0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b58a6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b58aa:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b58ac:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b58ae:	4b24      	ldr	r3, [pc, #144]	; (b5940 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b58b0:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b58b2:	4b24      	ldr	r3, [pc, #144]	; (b5944 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b58b4:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b58b6:	2200      	movs	r2, #0
   b58b8:	2300      	movs	r3, #0
   b58ba:	f04f 0900 	mov.w	r9, #0
   b58be:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b58c2:	4b21      	ldr	r3, [pc, #132]	; (b5948 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b58c4:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b58c8:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58ca:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b58cc:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b58d0:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b58d4:	f7fe fbdf 	bl	b4096 <_Znwj>
   b58d8:	4604      	mov	r4, r0
   b58da:	b1d8      	cbz	r0, b5914 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b58dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b58de:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b58e2:	b133      	cbz	r3, b58f2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58e4:	2202      	movs	r2, #2
   b58e6:	a910      	add	r1, sp, #64	; 0x40
   b58e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b58ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b58f0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b58f2:	4b16      	ldr	r3, [pc, #88]	; (b594c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b58f4:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b58f6:	4a16      	ldr	r2, [pc, #88]	; (b5950 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b58f8:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b58fa:	ab01      	add	r3, sp, #4
   b58fc:	4640      	mov	r0, r8
   b58fe:	4639      	mov	r1, r7
   b5900:	f007 fcb6 	bl	bd270 <system_subscribe_event>
        if (r) {
   b5904:	b1b0      	cbz	r0, b5934 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5906:	4620      	mov	r0, r4
   b5908:	f7ff fde7 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b590c:	2110      	movs	r1, #16
   b590e:	4620      	mov	r0, r4
   b5910:	f7fe fbc5 	bl	b409e <_ZdlPvj>
   b5914:	a810      	add	r0, sp, #64	; 0x40
   b5916:	f7ff fde0 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b591a:	4630      	mov	r0, r6
   b591c:	f7ff fddd 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b5920:	a808      	add	r0, sp, #32
   b5922:	f7ff fdda 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b5926:	a804      	add	r0, sp, #16
   b5928:	f7ff fdd7 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    }
   b592c:	4628      	mov	r0, r5
   b592e:	b015      	add	sp, #84	; 0x54
   b5930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5934:	9b02      	ldr	r3, [sp, #8]
   b5936:	60ab      	str	r3, [r5, #8]
   b5938:	e9c5 8700 	strd	r8, r7, [r5]
   b593c:	e7ea      	b.n	b5914 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b593e:	bf00      	nop
   b5940:	000b547d 	.word	0x000b547d
   b5944:	000b5955 	.word	0x000b5955
   b5948:	000c0002 	.word	0x000c0002
   b594c:	000b54ed 	.word	0x000b54ed
   b5950:	000b5455 	.word	0x000b5455

000b5954 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b5954:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5956:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5958:	4604      	mov	r4, r0
	switch (__op)
   b595a:	d104      	bne.n	b5966 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b595c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b595e:	6003      	str	r3, [r0, #0]
      }
   b5960:	2000      	movs	r0, #0
   b5962:	b003      	add	sp, #12
   b5964:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b5966:	2a02      	cmp	r2, #2
   b5968:	d00c      	beq.n	b5984 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b596a:	2a03      	cmp	r2, #3
   b596c:	d1f8      	bne.n	b5960 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b596e:	6804      	ldr	r4, [r0, #0]
   b5970:	2c00      	cmp	r4, #0
   b5972:	d0f5      	beq.n	b5960 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5974:	4620      	mov	r0, r4
   b5976:	f7ff fdb0 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b597a:	2110      	movs	r1, #16
   b597c:	4620      	mov	r0, r4
   b597e:	f7fe fb8e 	bl	b409e <_ZdlPvj>
   b5982:	e7ed      	b.n	b5960 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b5984:	6809      	ldr	r1, [r1, #0]
   b5986:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5988:	2010      	movs	r0, #16
   b598a:	f7fe fb84 	bl	b4096 <_Znwj>
   b598e:	4605      	mov	r5, r0
   b5990:	b110      	cbz	r0, b5998 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5992:	9901      	ldr	r1, [sp, #4]
   b5994:	f7ff ff4a 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5998:	6025      	str	r5, [r4, #0]
	}
   b599a:	e7e1      	b.n	b5960 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b599c <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b599c:	4b16      	ldr	r3, [pc, #88]	; (b59f8 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b599e:	b510      	push	{r4, lr}
   b59a0:	2401      	movs	r4, #1
   b59a2:	701c      	strb	r4, [r3, #0]
   b59a4:	4b15      	ldr	r3, [pc, #84]	; (b59fc <_GLOBAL__sub_I___appProductVersion+0x60>)
   b59a6:	2208      	movs	r2, #8
   b59a8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b59aa:	f00a fe4b 	bl	c0644 <spark_protocol_instance>
   b59ae:	2300      	movs	r3, #0
   b59b0:	461a      	mov	r2, r3
   b59b2:	2109      	movs	r1, #9
   b59b4:	f00a fe56 	bl	c0664 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b59b8:	f00a fe44 	bl	c0644 <spark_protocol_instance>
   b59bc:	2300      	movs	r3, #0
   b59be:	461a      	mov	r2, r3
   b59c0:	210d      	movs	r1, #13
   b59c2:	f00a fe47 	bl	c0654 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b59c6:	4b0e      	ldr	r3, [pc, #56]	; (b5a00 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b59c8:	1d1a      	adds	r2, r3, #4
   b59ca:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b59cc:	4a0d      	ldr	r2, [pc, #52]	; (b5a04 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b59ce:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b59d0:	2200      	movs	r2, #0
   b59d2:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b59d6:	611a      	str	r2, [r3, #16]
   b59d8:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b59da:	f00a ff13 	bl	c0804 <_Z19__fetch_global_Wirev>
   b59de:	2269      	movs	r2, #105	; 0x69
   b59e0:	4601      	mov	r1, r0
   b59e2:	4809      	ldr	r0, [pc, #36]	; (b5a08 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b59e4:	f002 f88e 	bl	b7b04 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b59e8:	4808      	ldr	r0, [pc, #32]	; (b5a0c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b59ea:	2306      	movs	r3, #6
   b59ec:	f840 3b04 	str.w	r3, [r0], #4
}
   b59f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b59f4:	f003 bfcc 	b.w	b9990 <_ZN22LocalTimePosixTimezoneC1Ev>
   b59f8:	2003e31c 	.word	0x2003e31c
   b59fc:	2003e31d 	.word	0x2003e31d
   b5a00:	2003e354 	.word	0x2003e354
   b5a04:	00030010 	.word	0x00030010
   b5a08:	2003e334 	.word	0x2003e334
   b5a0c:	2003e370 	.word	0x2003e370

000b5a10 <setup>:
{
   b5a10:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5a12:	2000      	movs	r0, #0
   b5a14:	b09d      	sub	sp, #116	; 0x74
   b5a16:	f007 f9b9 	bl	bcd8c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5a1a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5a1e:	4604      	mov	r4, r0
   b5a20:	2000      	movs	r0, #0
   b5a22:	f007 f9b3 	bl	bcd8c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5a26:	1b00      	subs	r0, r0, r4
   b5a28:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5a2c:	42a8      	cmp	r0, r5
   b5a2e:	f171 0300 	sbcs.w	r3, r1, #0
   b5a32:	d207      	bcs.n	b5a44 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5a34:	f00a fd44 	bl	c04c0 <_Z16_fetch_usbserialv>
   b5a38:	f00a fd37 	bl	c04aa <_ZN9USBSerial11isConnectedEv>
   b5a3c:	b910      	cbnz	r0, b5a44 <setup+0x34>
            spark_process();
   b5a3e:	f007 fc81 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   b5a42:	e7ed      	b.n	b5a20 <setup+0x10>
   b5a44:	f00a fd3c 	bl	c04c0 <_Z16_fetch_usbserialv>
   b5a48:	f00a fd2f 	bl	c04aa <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5a4c:	f001 fe9c 	bl	b7788 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5a50:	f001 fece 	bl	b77f0 <_Z18initializePowerCfgv>
	sysStatus.setup();
   b5a54:	f000 fcf6 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5a58:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5a5a:	4e56      	ldr	r6, [pc, #344]	; (b5bb4 <setup+0x1a4>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5a5e:	4f56      	ldr	r7, [pc, #344]	; (b5bb8 <setup+0x1a8>)
   b5a60:	4798      	blx	r3
	current.setup();
   b5a62:	f000 fd37 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5a66:	6803      	ldr	r3, [r0, #0]
   b5a68:	681b      	ldr	r3, [r3, #0]
   b5a6a:	4798      	blx	r3
	nodeDatabase.setup();
   b5a6c:	f000 fdba 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b5a70:	6803      	ldr	r3, [r0, #0]
   b5a72:	681b      	ldr	r3, [r3, #0]
   b5a74:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5a76:	f001 fa63 	bl	b6f40 <_ZN18Particle_Functions8instanceEv>
   b5a7a:	f001 fa73 	bl	b6f64 <_ZN18Particle_Functions5setupEv>
   b5a7e:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5a80:	2101      	movs	r1, #1
   b5a82:	4630      	mov	r0, r6
   b5a84:	8173      	strh	r3, [r6, #10]
   b5a86:	f002 fd39 	bl	b84fc <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5a8a:	217c      	movs	r1, #124	; 0x7c
   b5a8c:	4630      	mov	r0, r6
   b5a8e:	f002 f937 	bl	b7d00 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a92:	4b4a      	ldr	r3, [pc, #296]	; (b5bbc <setup+0x1ac>)
   b5a94:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5a96:	4b4a      	ldr	r3, [pc, #296]	; (b5bc0 <setup+0x1b0>)
   b5a98:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5a9a:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5a9c:	4b49      	ldr	r3, [pc, #292]	; (b5bc4 <setup+0x1b4>)
   b5a9e:	9308      	str	r3, [sp, #32]
   b5aa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5aa4:	2300      	movs	r3, #0
   b5aa6:	a802      	add	r0, sp, #8
   b5aa8:	9500      	str	r5, [sp, #0]
   b5aaa:	f7ff fecf 	bl	b584c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5aae:	4628      	mov	r0, r5
   b5ab0:	f7ff fd13 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5ab4:	f004 fcb4 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
   b5ab8:	f004 feb8 	bl	ba82c <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5abc:	f7fe fb58 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5ac0:	2101      	movs	r1, #1
   b5ac2:	f7fe fbc1 	bl	b4248 <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5ac6:	f004 f943 	bl	b9d50 <_ZN9LocalTime8instanceEv>
   b5aca:	493f      	ldr	r1, [pc, #252]	; (b5bc8 <setup+0x1b8>)
   b5acc:	4604      	mov	r4, r0
   b5ace:	4628      	mov	r0, r5
   b5ad0:	f004 f810 	bl	b9af4 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5ad4:	a907      	add	r1, sp, #28
   b5ad6:	f104 0008 	add.w	r0, r4, #8
   b5ada:	f00a f8c4 	bl	bfc66 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5ae0:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5ae2:	a90d      	add	r1, sp, #52	; 0x34
   b5ae4:	f104 0020 	add.w	r0, r4, #32
   b5ae8:	f00a f8bd 	bl	bfc66 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5aee:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5af2:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5af4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5af6:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5af8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5afa:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5afc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5afe:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5b00:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5b04:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5b08:	4628      	mov	r0, r5
   b5b0a:	f003 fdaf 	bl	b966c <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5b0e:	f00a fbe4 	bl	c02da <_ZN9TimeClass3nowEv>
   b5b12:	17c3      	asrs	r3, r0, #31
   b5b14:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5b18:	4638      	mov	r0, r7
   b5b1a:	f004 f991 	bl	b9e40 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5b1e:	f00a fbbf 	bl	c02a0 <_ZN9TimeClass7isValidEv>
   b5b22:	4c2a      	ldr	r4, [pc, #168]	; (b5bcc <setup+0x1bc>)
   b5b24:	2800      	cmp	r0, #0
   b5b26:	d037      	beq.n	b5b98 <setup+0x188>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5b28:	4639      	mov	r1, r7
   b5b2a:	4a29      	ldr	r2, [pc, #164]	; (b5bd0 <setup+0x1c0>)
   b5b2c:	4628      	mov	r0, r5
   b5b2e:	f004 f871 	bl	b9c14 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5b32:	2301      	movs	r3, #1
   b5b34:	461a      	mov	r2, r3
   b5b36:	2110      	movs	r1, #16
   b5b38:	4630      	mov	r0, r6
   b5b3a:	9f06      	ldr	r7, [sp, #24]
   b5b3c:	f002 f961 	bl	b7e02 <_ZN6AB180510isBitClearEhhb>
   b5b40:	4924      	ldr	r1, [pc, #144]	; (b5bd4 <setup+0x1c4>)
   b5b42:	4b25      	ldr	r3, [pc, #148]	; (b5bd8 <setup+0x1c8>)
   b5b44:	463a      	mov	r2, r7
   b5b46:	2800      	cmp	r0, #0
   b5b48:	bf18      	it	ne
   b5b4a:	460b      	movne	r3, r1
   b5b4c:	4823      	ldr	r0, [pc, #140]	; (b5bdc <setup+0x1cc>)
   b5b4e:	4924      	ldr	r1, [pc, #144]	; (b5be0 <setup+0x1d0>)
   b5b50:	f7fe faf5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5b54:	4628      	mov	r0, r5
   b5b56:	f009 ffff 	bl	bfb58 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN) || sysStatus.get_connectivityMode()== 1) {
   b5b5a:	4b22      	ldr	r3, [pc, #136]	; (b5be4 <setup+0x1d4>)
   b5b5c:	881d      	ldrh	r5, [r3, #0]
   b5b5e:	4628      	mov	r0, r5
   b5b60:	f00a fdf0 	bl	c0744 <digitalRead>
   b5b64:	b9f8      	cbnz	r0, b5ba6 <setup+0x196>
		Log.info("User button or pre-existing set to connected mode");
   b5b66:	4920      	ldr	r1, [pc, #128]	; (b5be8 <setup+0x1d8>)
   b5b68:	481c      	ldr	r0, [pc, #112]	; (b5bdc <setup+0x1cc>)
   b5b6a:	f7fe fae8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_connectivityMode(1);					  // connectivityMode Code 1 keeps both LoRA and Cellular connections on
   b5b6e:	f000 fc69 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5b72:	2101      	movs	r1, #1
   b5b74:	f000 fe62 	bl	b683c <_ZN13sysStatusData20set_connectivityModeEh>
		state = CONNECTING_STATE;
   b5b78:	2305      	movs	r3, #5
   b5b7a:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5b7c:	2200      	movs	r2, #0
   b5b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b82:	491a      	ldr	r1, [pc, #104]	; (b5bec <setup+0x1dc>)
   b5b84:	9200      	str	r2, [sp, #0]
   b5b86:	4628      	mov	r0, r5
   b5b88:	f008 fa8c 	bl	be0a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5b8c:	7823      	ldrb	r3, [r4, #0]
   b5b8e:	b90b      	cbnz	r3, b5b94 <setup+0x184>
   b5b90:	2303      	movs	r3, #3
   b5b92:	7023      	strb	r3, [r4, #0]
}
   b5b94:	b01d      	add	sp, #116	; 0x74
   b5b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5b98:	4915      	ldr	r1, [pc, #84]	; (b5bf0 <setup+0x1e0>)
   b5b9a:	4810      	ldr	r0, [pc, #64]	; (b5bdc <setup+0x1cc>)
   b5b9c:	f7fe facf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5ba0:	2305      	movs	r3, #5
   b5ba2:	7023      	strb	r3, [r4, #0]
   b5ba4:	e7d9      	b.n	b5b5a <setup+0x14a>
	if (!digitalRead(BUTTON_PIN) || sysStatus.get_connectivityMode()== 1) {
   b5ba6:	f000 fc4d 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5baa:	f000 fdce 	bl	b674a <_ZNK13sysStatusData20get_connectivityModeEv>
   b5bae:	2801      	cmp	r0, #1
   b5bb0:	d1e4      	bne.n	b5b7c <setup+0x16c>
   b5bb2:	e7d8      	b.n	b5b66 <setup+0x156>
   b5bb4:	2003e334 	.word	0x2003e334
   b5bb8:	2003e370 	.word	0x2003e370
   b5bbc:	000b543d 	.word	0x000b543d
   b5bc0:	000b54b7 	.word	0x000b54b7
   b5bc4:	000b54a3 	.word	0x000b54a3
   b5bc8:	000c521f 	.word	0x000c521f
   b5bcc:	2003e461 	.word	0x2003e461
   b5bd0:	000c5246 	.word	0x000c5246
   b5bd4:	000c5215 	.word	0x000c5215
   b5bd8:	000c5218 	.word	0x000c5218
   b5bdc:	2003e650 	.word	0x2003e650
   b5be0:	000c5251 	.word	0x000c5251
   b5be4:	000c5b8e 	.word	0x000c5b8e
   b5be8:	000c52c0 	.word	0x000c52c0
   b5bec:	000b5449 	.word	0x000b5449
   b5bf0:	000c5282 	.word	0x000c5282

000b5bf4 <loop>:
void loop() {
   b5bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5bf8:	4c93      	ldr	r4, [pc, #588]	; (b5e48 <loop+0x254>)
   b5bfa:	7823      	ldrb	r3, [r4, #0]
   b5bfc:	3b01      	subs	r3, #1
void loop() {
   b5bfe:	b093      	sub	sp, #76	; 0x4c
   b5c00:	2b06      	cmp	r3, #6
   b5c02:	d817      	bhi.n	b5c34 <loop+0x40>
   b5c04:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5c08:	000702ea 	.word	0x000702ea
   b5c0c:	013e0045 	.word	0x013e0045
   b5c10:	02a3022a 	.word	0x02a3022a
   b5c14:	020f      	.short	0x020f
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c16:	4b8d      	ldr	r3, [pc, #564]	; (b5e4c <loop+0x258>)
   b5c18:	781b      	ldrb	r3, [r3, #0]
   b5c1a:	2b02      	cmp	r3, #2
   b5c1c:	d001      	beq.n	b5c22 <loop+0x2e>
   b5c1e:	f7ff fc71 	bl	b5504 <_Z22publishStateTransitionv>
			if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b5c22:	f000 fc0f 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5c26:	f000 fd9f 	bl	b6768 <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b5c2a:	2800      	cmp	r0, #0
   b5c2c:	f000 8214 	beq.w	b6058 <loop+0x464>
   b5c30:	2301      	movs	r3, #1
			else state = LoRA_STATE;											// Go to the LoRA state to start the next cycle									
   b5c32:	7023      	strb	r3, [r4, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5c34:	4886      	ldr	r0, [pc, #536]	; (b5e50 <loop+0x25c>)
   b5c36:	f002 fc0f 	bl	b8458 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message 
   b5c3a:	f004 fbf1 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
   b5c3e:	f004 fae1 	bl	ba204 <_ZN17PublishQueuePosix4loopEv>
	sysStatus.loop();
   b5c42:	f000 fbff 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5c46:	f000 fc1b 	bl	b6480 <_ZN13sysStatusData4loopEv>
	current.loop();
   b5c4a:	f000 fc43 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5c4e:	f000 fc5f 	bl	b6510 <_ZN17currentStatusData4loopEv>
	nodeDatabase.loop();
   b5c52:	f000 fcc7 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b5c56:	f000 fce5 	bl	b6624 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5c5a:	f7fe fa89 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5c5e:	f7fe fa99 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5c62:	4b7c      	ldr	r3, [pc, #496]	; (b5e54 <loop+0x260>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	2b00      	cmp	r3, #0
   b5c68:	db09      	blt.n	b5c7e <loop+0x8a>
		Log.info("Resetting due to low memory");
   b5c6a:	497b      	ldr	r1, [pc, #492]	; (b5e58 <loop+0x264>)
   b5c6c:	487b      	ldr	r0, [pc, #492]	; (b5e5c <loop+0x268>)
   b5c6e:	f7fe fa66 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		softDelay(2000);
   b5c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5c76:	f7ff fdc5 	bl	b5804 <_Z9softDelaym>
		System.reset();
   b5c7a:	f00a f93a 	bl	bfef2 <_ZN11SystemClass5resetEv>
	if (sysStatus.get_alertCodeGateway() > 0) state = ERROR_STATE;
   b5c7e:	f000 fbe1 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5c82:	f000 fd71 	bl	b6768 <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b5c86:	b108      	cbz	r0, b5c8c <loop+0x98>
   b5c88:	2301      	movs	r3, #1
   b5c8a:	7023      	strb	r3, [r4, #0]
}
   b5c8c:	b013      	add	sp, #76	; 0x4c
   b5c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c92:	f7ff fc37 	bl	b5504 <_Z22publishStateTransitionv>
			wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b5c96:	f000 fbd5 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5c9a:	f000 fe46 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5c9e:	263c      	movs	r6, #60	; 0x3c
   b5ca0:	fb06 f500 	mul.w	r5, r6, r0
			wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b5ca4:	f00a fb19 	bl	c02da <_ZN9TimeClass3nowEv>
   b5ca8:	fbb0 f6f5 	udiv	r6, r0, r5
   b5cac:	fb06 0615 	mls	r6, r6, r5, r0
   b5cb0:	1bae      	subs	r6, r5, r6
   b5cb2:	42ae      	cmp	r6, r5
   b5cb4:	bf28      	it	cs
   b5cb6:	462e      	movcs	r6, r5
			time = Time.now() + wakeInSeconds;
   b5cb8:	f00a fb0f 	bl	c02da <_ZN9TimeClass3nowEv>
			Log.info("Sleep for %lu seconds until next event at %s", wakeInSeconds, Time.format(time, "%T").c_str());
   b5cbc:	f8df 91c0 	ldr.w	r9, [pc, #448]	; b5e80 <loop+0x28c>
   b5cc0:	4967      	ldr	r1, [pc, #412]	; (b5e60 <loop+0x26c>)
   b5cc2:	f8cd 9000 	str.w	r9, [sp]
   b5cc6:	1982      	adds	r2, r0, r6
   b5cc8:	2300      	movs	r3, #0
   b5cca:	a80a      	add	r0, sp, #40	; 0x28
   b5ccc:	f00a faa6 	bl	c021c <_ZN9TimeClass6formatExPKc>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5cd0:	4d64      	ldr	r5, [pc, #400]	; (b5e64 <loop+0x270>)
   b5cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5cd4:	4964      	ldr	r1, [pc, #400]	; (b5e68 <loop+0x274>)
   b5cd6:	4861      	ldr	r0, [pc, #388]	; (b5e5c <loop+0x268>)
   b5cd8:	4632      	mov	r2, r6
   b5cda:	f7fe fa30 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5cde:	a80a      	add	r0, sp, #40	; 0x28
   b5ce0:	f009 ff3a 	bl	bfb58 <_ZN6StringD1Ev>
   b5ce4:	7d2b      	ldrb	r3, [r5, #20]
   b5ce6:	b10b      	cbz	r3, b5cec <loop+0xf8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5ce8:	2202      	movs	r2, #2
   b5cea:	722a      	strb	r2, [r5, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5cec:	4a5f      	ldr	r2, [pc, #380]	; (b5e6c <loop+0x278>)
   b5cee:	f8b2 8000 	ldrh.w	r8, [r2]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   b5cf2:	2b00      	cmp	r3, #0
   b5cf4:	d04a      	beq.n	b5d8c <loop+0x198>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5cf6:	682b      	ldr	r3, [r5, #0]
   b5cf8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5cfa:	b1eb      	cbz	r3, b5d38 <loop+0x144>
            if (start->type == type) {
   b5cfc:	889a      	ldrh	r2, [r3, #4]
   b5cfe:	2a01      	cmp	r2, #1
   b5d00:	d006      	beq.n	b5d10 <loop+0x11c>
            start = start->next;
   b5d02:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d04:	e7f9      	b.n	b5cfa <loop+0x106>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5d06:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5d08:	b1b3      	cbz	r3, b5d38 <loop+0x144>
            if (start->type == type) {
   b5d0a:	889a      	ldrh	r2, [r3, #4]
   b5d0c:	2a01      	cmp	r2, #1
   b5d0e:	d1fa      	bne.n	b5d06 <loop+0x112>
                if (gpioWakeup->pin == pin) {
   b5d10:	899a      	ldrh	r2, [r3, #12]
   b5d12:	4542      	cmp	r2, r8
   b5d14:	d1f7      	bne.n	b5d06 <loop+0x112>
                    gpioWakeup->mode = mode;
   b5d16:	2200      	movs	r2, #0
   b5d18:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5d1a:	7d2b      	ldrb	r3, [r5, #20]
   b5d1c:	2b00      	cmp	r3, #0
   b5d1e:	d035      	beq.n	b5d8c <loop+0x198>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d20:	682b      	ldr	r3, [r5, #0]
				.duration(wakeInSeconds * 1000L);
   b5d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5d26:	68db      	ldr	r3, [r3, #12]
   b5d28:	4346      	muls	r6, r0
        if (!start) {
   b5d2a:	b1db      	cbz	r3, b5d64 <loop+0x170>
            if (start->type == type) {
   b5d2c:	889a      	ldrh	r2, [r3, #4]
   b5d2e:	2a04      	cmp	r2, #4
   b5d30:	f000 82a7 	beq.w	b6282 <loop+0x68e>
            start = start->next;
   b5d34:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d36:	e7f8      	b.n	b5d2a <loop+0x136>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5d38:	494d      	ldr	r1, [pc, #308]	; (b5e70 <loop+0x27c>)
   b5d3a:	2010      	movs	r0, #16
   b5d3c:	f00a fdea 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   b5d40:	4607      	mov	r7, r0
   b5d42:	2800      	cmp	r0, #0
   b5d44:	f000 829f 	beq.w	b6286 <loop+0x692>
   b5d48:	2210      	movs	r2, #16
   b5d4a:	2100      	movs	r1, #0
   b5d4c:	f00c fc12 	bl	c2574 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5d50:	4b48      	ldr	r3, [pc, #288]	; (b5e74 <loop+0x280>)
   b5d52:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5d54:	2301      	movs	r3, #1
   b5d56:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d58:	692b      	ldr	r3, [r5, #16]
   b5d5a:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b5d5c:	f8a7 800c 	strh.w	r8, [r7, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d60:	612f      	str	r7, [r5, #16]
   b5d62:	e7da      	b.n	b5d1a <loop+0x126>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5d64:	4942      	ldr	r1, [pc, #264]	; (b5e70 <loop+0x27c>)
   b5d66:	2010      	movs	r0, #16
   b5d68:	f00a fdd4 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   b5d6c:	4607      	mov	r7, r0
   b5d6e:	2800      	cmp	r0, #0
   b5d70:	f000 8289 	beq.w	b6286 <loop+0x692>
   b5d74:	2210      	movs	r2, #16
   b5d76:	2100      	movs	r1, #0
   b5d78:	f00c fbfc 	bl	c2574 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5d7c:	4b3d      	ldr	r3, [pc, #244]	; (b5e74 <loop+0x280>)
   b5d7e:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5d80:	2304      	movs	r3, #4
   b5d82:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d84:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d86:	612f      	str	r7, [r5, #16]
            wakeupSource->ms = ms;
   b5d88:	e9c7 3602 	strd	r3, r6, [r7, #8]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5d8c:	2100      	movs	r1, #0
   b5d8e:	4830      	ldr	r0, [pc, #192]	; (b5e50 <loop+0x25c>)
   b5d90:	f001 ffb6 	bl	b7d00 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5d94:	4933      	ldr	r1, [pc, #204]	; (b5e64 <loop+0x270>)
   b5d96:	a807      	add	r0, sp, #28
   b5d98:	f00a f8ae 	bl	bfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5d9c:	482c      	ldr	r0, [pc, #176]	; (b5e50 <loop+0x25c>)
   b5d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5da2:	f001 ffad 	bl	b7d00 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5da6:	9b07      	ldr	r3, [sp, #28]
        if (wakeupSource_) {
   b5da8:	b1eb      	cbz	r3, b5de6 <loop+0x1f2>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b5daa:	889a      	ldrh	r2, [r3, #4]
   b5dac:	2a01      	cmp	r2, #1
   b5dae:	d11a      	bne.n	b5de6 <loop+0x1f2>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b5db0:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {
   b5db2:	4598      	cmp	r8, r3
   b5db4:	d12f      	bne.n	b5e16 <loop+0x222>
        return hal_timer_millis(nullptr);
   b5db6:	2000      	movs	r0, #0
   b5db8:	f006 ffe8 	bl	bcd8c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5dbc:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5dc0:	4605      	mov	r5, r0
   b5dc2:	2000      	movs	r0, #0
   b5dc4:	f006 ffe2 	bl	bcd8c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5dc8:	1b40      	subs	r0, r0, r5
   b5dca:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5dce:	42b0      	cmp	r0, r6
   b5dd0:	f171 0300 	sbcs.w	r3, r1, #0
   b5dd4:	d20a      	bcs.n	b5dec <loop+0x1f8>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5dd6:	f00a fb73 	bl	c04c0 <_Z16_fetch_usbserialv>
   b5dda:	f00a fb66 	bl	c04aa <_ZN9USBSerial11isConnectedEv>
   b5dde:	b928      	cbnz	r0, b5dec <loop+0x1f8>
            spark_process();
   b5de0:	f007 fab0 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   b5de4:	e7ed      	b.n	b5dc2 <loop+0x1ce>
            return std::numeric_limits<pin_t>::max();
   b5de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5dea:	e7e2      	b.n	b5db2 <loop+0x1be>
   b5dec:	f00a fb68 	bl	c04c0 <_Z16_fetch_usbserialv>
   b5df0:	f00a fb5b 	bl	c04aa <_ZN9USBSerial11isConnectedEv>
				softDelay(1000);
   b5df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5df8:	f7ff fd04 	bl	b5804 <_Z9softDelaym>
				Log.info("Woke with user button");
   b5dfc:	491e      	ldr	r1, [pc, #120]	; (b5e78 <loop+0x284>)
   b5dfe:	4817      	ldr	r0, [pc, #92]	; (b5e5c <loop+0x268>)
   b5e00:	f7fe f99d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   b5e04:	9807      	ldr	r0, [sp, #28]
			state = IDLE_STATE;
   b5e06:	2302      	movs	r3, #2
   b5e08:	7023      	strb	r3, [r4, #0]
   b5e0a:	2800      	cmp	r0, #0
   b5e0c:	f43f af12 	beq.w	b5c34 <loop+0x40>
            free(wakeupSource_);
   b5e10:	f007 fb50 	bl	bd4b4 <free>
		} break;
   b5e14:	e70e      	b.n	b5c34 <loop+0x40>
				Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5e16:	f00a fa60 	bl	c02da <_ZN9TimeClass3nowEv>
   b5e1a:	4911      	ldr	r1, [pc, #68]	; (b5e60 <loop+0x26c>)
   b5e1c:	f8cd 9000 	str.w	r9, [sp]
   b5e20:	17c3      	asrs	r3, r0, #31
   b5e22:	4602      	mov	r2, r0
   b5e24:	a80a      	add	r0, sp, #40	; 0x28
   b5e26:	f00a f9f9 	bl	c021c <_ZN9TimeClass6formatExPKc>
   b5e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5e2c:	9204      	str	r2, [sp, #16]
   b5e2e:	f00a f8c3 	bl	bffb8 <_ZN11SystemClass10freeMemoryEv>
   b5e32:	9a04      	ldr	r2, [sp, #16]
   b5e34:	4911      	ldr	r1, [pc, #68]	; (b5e7c <loop+0x288>)
   b5e36:	4603      	mov	r3, r0
   b5e38:	4808      	ldr	r0, [pc, #32]	; (b5e5c <loop+0x268>)
   b5e3a:	f7fe f980 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5e3e:	a80a      	add	r0, sp, #40	; 0x28
   b5e40:	f009 fe8a 	bl	bfb58 <_ZN6StringD1Ev>
   b5e44:	e7de      	b.n	b5e04 <loop+0x210>
   b5e46:	bf00      	nop
   b5e48:	2003e461 	.word	0x2003e461
   b5e4c:	2003e460 	.word	0x2003e460
   b5e50:	2003e334 	.word	0x2003e334
   b5e54:	2003d5e8 	.word	0x2003d5e8
   b5e58:	000c5459 	.word	0x000c5459
   b5e5c:	2003e650 	.word	0x2003e650
   b5e60:	2003e6a8 	.word	0x2003e6a8
   b5e64:	2003e354 	.word	0x2003e354
   b5e68:	000c5301 	.word	0x000c5301
   b5e6c:	000c5b8e 	.word	0x000c5b8e
   b5e70:	000c69bc 	.word	0x000c69bc
   b5e74:	00030010 	.word	0x00030010
   b5e78:	000c532e 	.word	0x000c532e
   b5e7c:	000c5344 	.word	0x000c5344
   b5e80:	000c52fe 	.word	0x000c52fe
			if (state != oldState) {
   b5e84:	4bc4      	ldr	r3, [pc, #784]	; (b6198 <loop+0x5a4>)
   b5e86:	f8df 8350 	ldr.w	r8, [pc, #848]	; b61d8 <loop+0x5e4>
   b5e8a:	781b      	ldrb	r3, [r3, #0]
   b5e8c:	4fc3      	ldr	r7, [pc, #780]	; (b619c <loop+0x5a8>)
   b5e8e:	2b04      	cmp	r3, #4
   b5e90:	d072      	beq.n	b5f78 <loop+0x384>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5e92:	2b07      	cmp	r3, #7
   b5e94:	d003      	beq.n	b5e9e <loop+0x2aa>
   b5e96:	f006 ff69 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   b5e9a:	f8c8 0000 	str.w	r0, [r8]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5e9e:	f7ff fb31 	bl	b5504 <_Z22publishStateTransitionv>
   b5ea2:	f00a fa1a 	bl	c02da <_ZN9TimeClass3nowEv>
   b5ea6:	4dbe      	ldr	r5, [pc, #760]	; (b61a0 <loop+0x5ac>)
   b5ea8:	17c3      	asrs	r3, r0, #31
   b5eaa:	e9c5 0318 	strd	r0, r3, [r5, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5eae:	4628      	mov	r0, r5
   b5eb0:	f003 ffc6 	bl	b9e40 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5eb4:	f105 0168 	add.w	r1, r5, #104	; 0x68
   b5eb8:	a807      	add	r0, sp, #28
   b5eba:	f003 fe53 	bl	b9b64 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5ebe:	f99d 6020 	ldrsb.w	r6, [sp, #32]
   b5ec2:	f000 fabf 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5ec6:	f000 fc54 	bl	b6772 <_ZNK13sysStatusData12get_openTimeEv>
   b5eca:	4286      	cmp	r6, r0
   b5ecc:	f2c0 809d 	blt.w	b600a <loop+0x416>
   b5ed0:	f105 0168 	add.w	r1, r5, #104	; 0x68
   b5ed4:	a80a      	add	r0, sp, #40	; 0x28
   b5ed6:	f003 fe45 	bl	b9b64 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5eda:	f99d 602c 	ldrsb.w	r6, [sp, #44]	; 0x2c
   b5ede:	f000 fab1 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5ee2:	f000 fc4b 	bl	b677c <_ZNK13sysStatusData13get_closeTimeEv>
   b5ee6:	4286      	cmp	r6, r0
   b5ee8:	a80a      	add	r0, sp, #40	; 0x28
   b5eea:	bfcc      	ite	gt
   b5eec:	2600      	movgt	r6, #0
   b5eee:	2601      	movle	r6, #1
   b5ef0:	f003 fbac 	bl	b964c <_ZN12LocalTimeHMSD1Ev>
   b5ef4:	a807      	add	r0, sp, #28
   b5ef6:	f003 fba9 	bl	b964c <_ZN12LocalTimeHMSD1Ev>
   b5efa:	2e00      	cmp	r6, #0
   b5efc:	f000 8087 	beq.w	b600e <loop+0x41a>
   b5f00:	f000 fae8 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5f04:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5f06:	f000 ff33 	bl	b6d70 <_ZN17currentStatusData13set_openHoursEb>
				if (sysStatus.get_connectivityMode() == 0) connectionWindow = DEFAULT_LORA_WINDOW;
   b5f0a:	f000 fa9b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5f0e:	f000 fc1c 	bl	b674a <_ZNK13sysStatusData20get_connectivityModeEv>
				else connectionWindow = STAY_CONNECTED;
   b5f12:	2800      	cmp	r0, #0
   b5f14:	bf0c      	ite	eq
   b5f16:	2305      	moveq	r3, #5
   b5f18:	233c      	movne	r3, #60	; 0x3c
   b5f1a:	703b      	strb	r3, [r7, #0]
				Log.info("Gateway is listening for %d minutes for LoRA messages and the park is %s (%d / %d / %d)", (sysStatus.get_connectivityMode() == 0) ? DEFAULT_LORA_WINDOW : 60, (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5f1c:	f000 fa92 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5f20:	f000 fc13 	bl	b674a <_ZNK13sysStatusData20get_connectivityModeEv>
   b5f24:	2800      	cmp	r0, #0
   b5f26:	bf0c      	ite	eq
   b5f28:	2205      	moveq	r2, #5
   b5f2a:	223c      	movne	r2, #60	; 0x3c
   b5f2c:	9205      	str	r2, [sp, #20]
   b5f2e:	f000 fad1 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5f32:	f000 fe9f 	bl	b6c74 <_ZNK17currentStatusData13get_openHoursEv>
   b5f36:	499b      	ldr	r1, [pc, #620]	; (b61a4 <loop+0x5b0>)
   b5f38:	4b9b      	ldr	r3, [pc, #620]	; (b61a8 <loop+0x5b4>)
   b5f3a:	2800      	cmp	r0, #0
   b5f3c:	bf08      	it	eq
   b5f3e:	460b      	moveq	r3, r1
   b5f40:	499a      	ldr	r1, [pc, #616]	; (b61ac <loop+0x5b8>)
   b5f42:	9304      	str	r3, [sp, #16]
   b5f44:	a80a      	add	r0, sp, #40	; 0x28
   b5f46:	f003 fe0d 	bl	b9b64 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f4a:	f99d 602c 	ldrsb.w	r6, [sp, #44]	; 0x2c
   b5f4e:	f000 fa79 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5f52:	f000 fc0e 	bl	b6772 <_ZNK13sysStatusData12get_openTimeEv>
   b5f56:	4605      	mov	r5, r0
   b5f58:	f000 fa74 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5f5c:	f000 fc0e 	bl	b677c <_ZNK13sysStatusData13get_closeTimeEv>
   b5f60:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5f64:	e9cd 5001 	strd	r5, r0, [sp, #4]
   b5f68:	4991      	ldr	r1, [pc, #580]	; (b61b0 <loop+0x5bc>)
   b5f6a:	4892      	ldr	r0, [pc, #584]	; (b61b4 <loop+0x5c0>)
   b5f6c:	9600      	str	r6, [sp, #0]
   b5f6e:	f7fe f8e6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5f72:	a80a      	add	r0, sp, #40	; 0x28
   b5f74:	f003 fb6a 	bl	b964c <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5f78:	f7fe f8fa 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f7c:	f7ff f940 	bl	b5200 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5f80:	b160      	cbz	r0, b5f9c <loop+0x3a8>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {				// We don't report Join alerts or after hours
   b5f82:	f000 faa7 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5f86:	f000 fc26 	bl	b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5f8a:	2801      	cmp	r0, #1
   b5f8c:	d006      	beq.n	b5f9c <loop+0x3a8>
   b5f8e:	f000 faa1 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b5f92:	f000 fe6f 	bl	b6c74 <_ZNK17currentStatusData13get_openHoursEv>
   b5f96:	b108      	cbz	r0, b5f9c <loop+0x3a8>
					state = REPORTING_STATE; 													// Received and acknowledged data from a node - need to report the alert
   b5f98:	2307      	movs	r3, #7
   b5f9a:	7023      	strb	r3, [r4, #0]
   b5f9c:	f006 fee6 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > (connectionWindow *60000UL)) { 					// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5fa0:	f8d8 3000 	ldr.w	r3, [r8]
   b5fa4:	1ac0      	subs	r0, r0, r3
   b5fa6:	783b      	ldrb	r3, [r7, #0]
   b5fa8:	f64e 2260 	movw	r2, #60000	; 0xea60
   b5fac:	4353      	muls	r3, r2
   b5fae:	4298      	cmp	r0, r3
   b5fb0:	f67f ae40 	bls.w	b5c34 <loop+0x40>
				Log.info("Listening window over");
   b5fb4:	4980      	ldr	r1, [pc, #512]	; (b61b8 <loop+0x5c4>)
   b5fb6:	487f      	ldr	r0, [pc, #508]	; (b61b4 <loop+0x5c0>)
   b5fb8:	f7fe f8c1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				LoRA_Functions::instance().nodeConnectionsHealthy();							// Will see if any nodes checked in - if not - will reset
   b5fbc:	f7fe f8d8 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5fc0:	f7fe fb0a 	bl	b45d8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();									// Done with the LoRA phase - put the radio to sleep
   b5fc4:	f7fe f8d4 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5fc8:	f7fe f8f6 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b5fcc:	f7fe f8d0 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5fd0:	2100      	movs	r1, #0
   b5fd2:	f7fe fc53 	bl	b487c <_ZN14LoRA_Functions13printNodeDataEb>
				nodeDatabase.flush(true);
   b5fd6:	f000 fb05 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b5fda:	6803      	ldr	r3, [r0, #0]
   b5fdc:	2101      	movs	r1, #1
   b5fde:	68db      	ldr	r3, [r3, #12]
   b5fe0:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open			
   b5fe2:	f00a f98b 	bl	c02fc <_ZN9TimeClass4hourEv>
   b5fe6:	4605      	mov	r5, r0
   b5fe8:	f000 fa2c 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5fec:	f000 fd92 	bl	b6b14 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5ff0:	f00a f84a 	bl	c0088 <_ZN9TimeClass4hourEx>
   b5ff4:	4285      	cmp	r5, r0
   b5ff6:	d10e      	bne.n	b6016 <loop+0x422>
				else if (sysStatus.get_alertCodeGateway() != 0) state = ERROR_STATE;
   b5ff8:	f000 fa24 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b5ffc:	f000 fbb4 	bl	b6768 <_ZNK13sysStatusData20get_alertCodeGatewayEv>
   b6000:	2800      	cmp	r0, #0
   b6002:	f47f ae15 	bne.w	b5c30 <loop+0x3c>
				else state = SLEEPING_STATE;
   b6006:	2303      	movs	r3, #3
   b6008:	e613      	b.n	b5c32 <loop+0x3e>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b600a:	2600      	movs	r6, #0
   b600c:	e772      	b.n	b5ef4 <loop+0x300>
				else current.set_openHours(false);
   b600e:	f000 fa61 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6012:	4631      	mov	r1, r6
   b6014:	e777      	b.n	b5f06 <loop+0x312>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open			
   b6016:	f000 fa5d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b601a:	f000 fe2b 	bl	b6c74 <_ZNK17currentStatusData13get_openHoursEv>
   b601e:	2800      	cmp	r0, #0
   b6020:	d0ea      	beq.n	b5ff8 <loop+0x404>
   b6022:	2305      	movs	r3, #5
   b6024:	e605      	b.n	b5c32 <loop+0x3e>
			publishStateTransition();
   b6026:	f7ff fa6d 	bl	b5504 <_Z22publishStateTransitionv>
			publishWebhook(current.get_nodeNumber());							// Gateway or node webhook
   b602a:	f000 fa53 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b602e:	f000 fbaf 	bl	b6790 <_ZNK17currentStatusData14get_nodeNumberEv>
   b6032:	f7ff fa9d 	bl	b5570 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b6036:	f000 fa4d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b603a:	2100      	movs	r1, #0
   b603c:	f000 fc4c 	bl	b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b6040:	f000 fa00 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6044:	4605      	mov	r5, r0
   b6046:	f000 f9fd 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b604a:	f000 fb88 	bl	b675e <_ZNK13sysStatusData16get_messageCountEv>
   b604e:	3001      	adds	r0, #1
   b6050:	b2c1      	uxtb	r1, r0
   b6052:	4628      	mov	r0, r5
   b6054:	f000 fbfe 	bl	b6854 <_ZN13sysStatusData16set_messageCountEh>
			else state = LoRA_STATE;											// Go to the LoRA state to start the next cycle									
   b6058:	2304      	movs	r3, #4
   b605a:	e5ea      	b.n	b5c32 <loop+0x3e>
			if (state != oldState) {
   b605c:	4b4e      	ldr	r3, [pc, #312]	; (b6198 <loop+0x5a4>)
   b605e:	4e57      	ldr	r6, [pc, #348]	; (b61bc <loop+0x5c8>)
   b6060:	781b      	ldrb	r3, [r3, #0]
   b6062:	2b05      	cmp	r3, #5
   b6064:	d027      	beq.n	b60b6 <loop+0x4c2>
				publishStateTransition();  
   b6066:	f7ff fa4d 	bl	b5504 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b606a:	f000 f9eb 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b606e:	f000 fd51 	bl	b6b14 <_ZNK13sysStatusData18get_lastConnectionEv>
   b6072:	f00a f811 	bl	c0098 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b6076:	494d      	ldr	r1, [pc, #308]	; (b61ac <loop+0x5b8>)
   b6078:	4605      	mov	r5, r0
   b607a:	a80a      	add	r0, sp, #40	; 0x28
   b607c:	f003 fd8f 	bl	b9b9e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b6080:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b6084:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   b6088:	d007      	beq.n	b609a <loop+0x4a6>
					current.resetEverything();
   b608a:	f000 fa23 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b608e:	f000 fd7d 	bl	b6b8c <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b6092:	494b      	ldr	r1, [pc, #300]	; (b61c0 <loop+0x5cc>)
   b6094:	4847      	ldr	r0, [pc, #284]	; (b61b4 <loop+0x5c0>)
   b6096:	f7fe f852 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b609a:	f000 f9d3 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b609e:	f000 fb4f 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b60a2:	f7ff fa65 	bl	b5570 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b60a6:	f007 f95d 	bl	bd364 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b60aa:	b908      	cbnz	r0, b60b0 <loop+0x4bc>
        spark_cloud_flag_connect();
   b60ac:	f007 f952 	bl	bd354 <spark_cloud_flag_connect>
   b60b0:	f006 fe5c 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b60b4:	6030      	str	r0, [r6, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b60b6:	f007 f955 	bl	bd364 <spark_cloud_flag_connected>
			if (Particle.connected()) {													// Either we will connect or we will timeout - will try for 10 minutes 
   b60ba:	4605      	mov	r5, r0
   b60bc:	b3a8      	cbz	r0, b612a <loop+0x536>
				sysStatus.set_lastConnection(Time.now());
   b60be:	f000 f9c1 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b60c2:	4605      	mov	r5, r0
   b60c4:	f00a f909 	bl	c02da <_ZN9TimeClass3nowEv>
   b60c8:	4602      	mov	r2, r0
   b60ca:	17c3      	asrs	r3, r0, #31
   b60cc:	4628      	mov	r0, r5
   b60ce:	f000 fd49 	bl	b6b64 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b60d2:	f000 f9b7 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b60d6:	4605      	mov	r5, r0
   b60d8:	f006 fe48 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   b60dc:	6831      	ldr	r1, [r6, #0]
   b60de:	1a41      	subs	r1, r0, r1
   b60e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b60e4:	fbb1 f1f0 	udiv	r1, r1, r0
   b60e8:	4628      	mov	r0, r5
   b60ea:	b289      	uxth	r1, r1
   b60ec:	f000 fcd7 	bl	b6a9e <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b60f0:	f007 f938 	bl	bd364 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b60f4:	b188      	cbz	r0, b611a <loop+0x526>
   b60f6:	f007 f935 	bl	bd364 <spark_cloud_flag_connected>
        if (!connected()) {
   b60fa:	b110      	cbz	r0, b6102 <loop+0x50e>
        return spark_sync_time(NULL);
   b60fc:	2000      	movs	r0, #0
   b60fe:	f007 f949 	bl	bd394 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);									// Make sure sync is complete
   b6102:	f7ff f9dd 	bl	b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b6106:	b910      	cbnz	r0, b610e <loop+0x51a>
            spark_process();
   b6108:	f007 f91c 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   b610c:	e7f9      	b.n	b6102 <loop+0x50e>
   b610e:	f7ff f9d7 	bl	b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b6112:	492c      	ldr	r1, [pc, #176]	; (b61c4 <loop+0x5d0>)
   b6114:	a80a      	add	r0, sp, #40	; 0x28
   b6116:	f007 fabf 	bl	bd698 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_connectivityMode() == 1) state = LoRA_STATE;			// Go back to the LoRA State if we are in connected mode
   b611a:	f000 f993 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b611e:	f000 fb14 	bl	b674a <_ZNK13sysStatusData20get_connectivityModeEv>
   b6122:	2801      	cmp	r0, #1
   b6124:	d098      	beq.n	b6058 <loop+0x464>
				state = DISCONNECTING_STATE;											// Makes sure we turn off the radio
   b6126:	2306      	movs	r3, #6
   b6128:	e583      	b.n	b5c32 <loop+0x3e>
   b612a:	f006 fe1f 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
			else if (millis() - connectingTimeout > 600000L) {
   b612e:	6833      	ldr	r3, [r6, #0]
   b6130:	1ac0      	subs	r0, r0, r3
   b6132:	4b25      	ldr	r3, [pc, #148]	; (b61c8 <loop+0x5d4>)
   b6134:	4298      	cmp	r0, r3
   b6136:	f67f ad7d 	bls.w	b5c34 <loop+0x40>
				Log.info("Failed to connect in 10 minutes - giving up");
   b613a:	4924      	ldr	r1, [pc, #144]	; (b61cc <loop+0x5d8>)
   b613c:	481d      	ldr	r0, [pc, #116]	; (b61b4 <loop+0x5c0>)
   b613e:	f7fd fffe 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_connectivityMode(0);										// Setting back to zero - must not have coverage here or here at this time
   b6142:	f000 f97f 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6146:	4629      	mov	r1, r5
   b6148:	f000 fb78 	bl	b683c <_ZN13sysStatusData20set_connectivityModeEh>
   b614c:	e7eb      	b.n	b6126 <loop+0x532>
			if (state != oldState) {
   b614e:	4b12      	ldr	r3, [pc, #72]	; (b6198 <loop+0x5a4>)
   b6150:	4d1f      	ldr	r5, [pc, #124]	; (b61d0 <loop+0x5dc>)
   b6152:	781b      	ldrb	r3, [r3, #0]
   b6154:	2b06      	cmp	r3, #6
   b6156:	d004      	beq.n	b6162 <loop+0x56e>
				publishStateTransition(); 
   b6158:	f7ff f9d4 	bl	b5504 <_Z22publishStateTransitionv>
   b615c:	f006 fe06 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b6160:	6028      	str	r0, [r5, #0]
   b6162:	f006 fe03 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b6166:	682b      	ldr	r3, [r5, #0]
   b6168:	1ac0      	subs	r0, r0, r3
   b616a:	4b1a      	ldr	r3, [pc, #104]	; (b61d4 <loop+0x5e0>)
   b616c:	4298      	cmp	r0, r3
   b616e:	f67f ad61 	bls.w	b5c34 <loop+0x40>
   b6172:	f004 f955 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
   b6176:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b617a:	2b00      	cmp	r3, #0
   b617c:	f43f ad5a 	beq.w	b5c34 <loop+0x40>
				if (sysStatus.get_connectivityMode() == 0) Particle_Functions::instance().disconnectFromParticle();
   b6180:	f000 f960 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6184:	f000 fae1 	bl	b674a <_ZNK13sysStatusData20get_connectivityModeEv>
   b6188:	2800      	cmp	r0, #0
   b618a:	f47f af3c 	bne.w	b6006 <loop+0x412>
   b618e:	f000 fed7 	bl	b6f40 <_ZN18Particle_Functions8instanceEv>
   b6192:	f000 fffb 	bl	b718c <_ZN18Particle_Functions22disconnectFromParticleEv>
   b6196:	e736      	b.n	b6006 <loop+0x412>
   b6198:	2003e460 	.word	0x2003e460
   b619c:	2003e328 	.word	0x2003e328
   b61a0:	2003e370 	.word	0x2003e370
   b61a4:	000c52f7 	.word	0x000c52f7
   b61a8:	000c52f2 	.word	0x000c52f2
   b61ac:	2003e3d8 	.word	0x2003e3d8
   b61b0:	000c5365 	.word	0x000c5365
   b61b4:	2003e650 	.word	0x2003e650
   b61b8:	000c53bd 	.word	0x000c53bd
   b61bc:	2003e32c 	.word	0x2003e32c
   b61c0:	000c53d3 	.word	0x000c53d3
   b61c4:	2003e60c 	.word	0x2003e60c
   b61c8:	000927c0 	.word	0x000927c0
   b61cc:	000c53f2 	.word	0x000c53f2
   b61d0:	2003e330 	.word	0x2003e330
   b61d4:	00015f90 	.word	0x00015f90
   b61d8:	2003e324 	.word	0x2003e324
			static system_tick_t resetTimeout = millis();
   b61dc:	4d2b      	ldr	r5, [pc, #172]	; (b628c <loop+0x698>)
   b61de:	4e2c      	ldr	r6, [pc, #176]	; (b6290 <loop+0x69c>)
   b61e0:	782b      	ldrb	r3, [r5, #0]
   b61e2:	f3bf 8f5b 	dmb	ish
   b61e6:	f013 0f01 	tst.w	r3, #1
   b61ea:	d109      	bne.n	b6200 <loop+0x60c>
   b61ec:	4628      	mov	r0, r5
   b61ee:	f7fd ff65 	bl	b40bc <__cxa_guard_acquire>
   b61f2:	b128      	cbz	r0, b6200 <loop+0x60c>
   b61f4:	f006 fdba 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   b61f8:	6030      	str	r0, [r6, #0]
   b61fa:	4628      	mov	r0, r5
   b61fc:	f7fd ff63 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) {
   b6200:	4b24      	ldr	r3, [pc, #144]	; (b6294 <loop+0x6a0>)
   b6202:	7822      	ldrb	r2, [r4, #0]
   b6204:	781b      	ldrb	r3, [r3, #0]
   b6206:	429a      	cmp	r2, r3
   b6208:	d025      	beq.n	b6256 <loop+0x662>
				publishStateTransition();
   b620a:	f7ff f97b 	bl	b5504 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b620e:	f007 f8a9 	bl	bd364 <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert","Deep power down in 30 seconds", PRIVATE);
   b6212:	b1d8      	cbz	r0, b624c <loop+0x658>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6214:	4b20      	ldr	r3, [pc, #128]	; (b6298 <loop+0x6a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6216:	4a21      	ldr	r2, [pc, #132]	; (b629c <loop+0x6a8>)
   b6218:	781b      	ldrb	r3, [r3, #0]
   b621a:	f88d 3000 	strb.w	r3, [sp]
   b621e:	4920      	ldr	r1, [pc, #128]	; (b62a0 <loop+0x6ac>)
   b6220:	233c      	movs	r3, #60	; 0x3c
   b6222:	a80a      	add	r0, sp, #40	; 0x28
   b6224:	f007 fc8a 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b6228:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   b622a:	b17d      	cbz	r5, b624c <loop+0x658>
      if (--_M_use_count == 0)
   b622c:	686b      	ldr	r3, [r5, #4]
   b622e:	3b01      	subs	r3, #1
   b6230:	606b      	str	r3, [r5, #4]
   b6232:	b95b      	cbnz	r3, b624c <loop+0x658>
          _M_dispose();
   b6234:	682b      	ldr	r3, [r5, #0]
   b6236:	4628      	mov	r0, r5
   b6238:	689b      	ldr	r3, [r3, #8]
   b623a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b623c:	68ab      	ldr	r3, [r5, #8]
   b623e:	3b01      	subs	r3, #1
   b6240:	60ab      	str	r3, [r5, #8]
   b6242:	b91b      	cbnz	r3, b624c <loop+0x658>
            _M_destroy();
   b6244:	682b      	ldr	r3, [r5, #0]
   b6246:	4628      	mov	r0, r5
   b6248:	68db      	ldr	r3, [r3, #12]
   b624a:	4798      	blx	r3
				sysStatus.set_alertCodeGateway(0);			// Reset this
   b624c:	f000 f8fa 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6250:	2100      	movs	r1, #0
   b6252:	f000 fb05 	bl	b6860 <_ZN13sysStatusData20set_alertCodeGatewayEh>
   b6256:	f006 fd89 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b625a:	6833      	ldr	r3, [r6, #0]
   b625c:	1ac0      	subs	r0, r0, r3
   b625e:	f247 5330 	movw	r3, #30000	; 0x7530
   b6262:	4298      	cmp	r0, r3
   b6264:	f67f ace6 	bls.w	b5c34 <loop+0x40>
				Log.info("Deep power down device");
   b6268:	490e      	ldr	r1, [pc, #56]	; (b62a4 <loop+0x6b0>)
   b626a:	480f      	ldr	r0, [pc, #60]	; (b62a8 <loop+0x6b4>)
   b626c:	f7fd ff67 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				softDelay(2000);
   b6270:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6274:	f7ff fac6 	bl	b5804 <_Z9softDelaym>
				ab1805.deepPowerDown(); 
   b6278:	211e      	movs	r1, #30
   b627a:	480c      	ldr	r0, [pc, #48]	; (b62ac <loop+0x6b8>)
   b627c:	f001 fe9a 	bl	b7fb4 <_ZN6AB180513deepPowerDownEi>
   b6280:	e4d8      	b.n	b5c34 <loop+0x40>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b6282:	60de      	str	r6, [r3, #12]
                return *this;
   b6284:	e582      	b.n	b5d8c <loop+0x198>
                valid_ = false;
   b6286:	752f      	strb	r7, [r5, #20]
                return *this;
   b6288:	e580      	b.n	b5d8c <loop+0x198>
   b628a:	bf00      	nop
   b628c:	2003e318 	.word	0x2003e318
   b6290:	2003e320 	.word	0x2003e320
   b6294:	2003e460 	.word	0x2003e460
   b6298:	2003e31c 	.word	0x2003e31c
   b629c:	000c541e 	.word	0x000c541e
   b62a0:	000c543c 	.word	0x000c543c
   b62a4:	000c5442 	.word	0x000c5442
   b62a8:	2003e650 	.word	0x2003e650
   b62ac:	2003e334 	.word	0x2003e334

000b62b0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b62b0:	b510      	push	{r4, lr}
   b62b2:	4b03      	ldr	r3, [pc, #12]	; (b62c0 <_ZN8MB85RC64D1Ev+0x10>)
   b62b4:	6003      	str	r3, [r0, #0]
   b62b6:	4604      	mov	r4, r0
   b62b8:	f003 fe70 	bl	b9f9c <_ZN6MB85RCD1Ev>
   b62bc:	4620      	mov	r0, r4
   b62be:	bd10      	pop	{r4, pc}
   b62c0:	000c560c 	.word	0x000c560c

000b62c4 <_ZN8MB85RC64D0Ev>:
   b62c4:	b510      	push	{r4, lr}
   b62c6:	4604      	mov	r4, r0
   b62c8:	f7ff fff2 	bl	b62b0 <_ZN8MB85RC64D1Ev>
   b62cc:	4620      	mov	r0, r4
   b62ce:	2110      	movs	r1, #16
   b62d0:	f7fd fee5 	bl	b409e <_ZdlPvj>
   b62d4:	4620      	mov	r0, r4
   b62d6:	bd10      	pop	{r4, pc}

000b62d8 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b62d8:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b62da:	f006 fc3b 	bl	bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b62de:	4604      	mov	r4, r0
   b62e0:	b920      	cbnz	r0, b62ec <_ZN10nodeIDData8validateEj+0x14>
   b62e2:	4a03      	ldr	r2, [pc, #12]	; (b62f0 <_ZN10nodeIDData8validateEj+0x18>)
   b62e4:	4903      	ldr	r1, [pc, #12]	; (b62f4 <_ZN10nodeIDData8validateEj+0x1c>)
   b62e6:	4804      	ldr	r0, [pc, #16]	; (b62f8 <_ZN10nodeIDData8validateEj+0x20>)
   b62e8:	f7fd ff29 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b62ec:	4620      	mov	r0, r4
   b62ee:	bd10      	pop	{r4, pc}
   b62f0:	000c5475 	.word	0x000c5475
   b62f4:	000c547f 	.word	0x000c547f
   b62f8:	2003e650 	.word	0x2003e650

000b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b62fc:	b510      	push	{r4, lr}
            if (!handle_) {
   b62fe:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b6300:	4604      	mov	r4, r0
            if (!handle_) {
   b6302:	b90b      	cbnz	r3, b6308 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b6304:	f006 fce2 	bl	bcccc <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b6308:	6820      	ldr	r0, [r4, #0]
        }
   b630a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b630e:	f006 bced 	b.w	bccec <os_mutex_recursive_lock>

000b6312 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b6312:	b538      	push	{r3, r4, r5, lr}
   b6314:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6316:	3004      	adds	r0, #4
   b6318:	f7ff fff0 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b631c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b631e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b6320:	6803      	ldr	r3, [r0, #0]
   b6322:	68dd      	ldr	r5, [r3, #12]
   b6324:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b6328:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b632a:	6860      	ldr	r0, [r4, #4]
   b632c:	f006 fce6 	bl	bccfc <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b6330:	4620      	mov	r0, r4
        } 
   b6332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b6336:	f006 bb29 	b.w	bc98c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b633a <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b633a:	b538      	push	{r3, r4, r5, lr}
   b633c:	4604      	mov	r4, r0
   b633e:	3004      	adds	r0, #4
   b6340:	f7ff ffdc 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b6344:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6346:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b6348:	6803      	ldr	r3, [r0, #0]
   b634a:	689d      	ldr	r5, [r3, #8]
   b634c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b6350:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b6352:	68a2      	ldr	r2, [r4, #8]
   b6354:	6823      	ldr	r3, [r4, #0]
   b6356:	88d1      	ldrh	r1, [r2, #6]
   b6358:	695b      	ldr	r3, [r3, #20]
   b635a:	4620      	mov	r0, r4
   b635c:	4798      	blx	r3
   b635e:	b918      	cbnz	r0, b6368 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b6360:	6823      	ldr	r3, [r4, #0]
   b6362:	4620      	mov	r0, r4
   b6364:	699b      	ldr	r3, [r3, #24]
   b6366:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b6368:	6860      	ldr	r0, [r4, #4]
   b636a:	f006 fcc7 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b636e:	2001      	movs	r0, #1
   b6370:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6374 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b6374:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b6376:	4b04      	ldr	r3, [pc, #16]	; (b6388 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b6378:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b637a:	4604      	mov	r4, r0
            if (handle_) {
   b637c:	6840      	ldr	r0, [r0, #4]
   b637e:	b108      	cbz	r0, b6384 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b6380:	f006 fcac 	bl	bccdc <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b6384:	4620      	mov	r0, r4
   b6386:	bd10      	pop	{r4, pc}
   b6388:	000c66b0 	.word	0x000c66b0

000b638c <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b638c:	b510      	push	{r4, lr}
   b638e:	4b03      	ldr	r3, [pc, #12]	; (b639c <_ZN13sysStatusDataD1Ev+0x10>)
   b6390:	6003      	str	r3, [r0, #0]
   b6392:	4604      	mov	r4, r0
   b6394:	f7ff ffee 	bl	b6374 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6398:	4620      	mov	r0, r4
   b639a:	bd10      	pop	{r4, pc}
   b639c:	000c5654 	.word	0x000c5654

000b63a0 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b63a0:	b510      	push	{r4, lr}
   b63a2:	4604      	mov	r4, r0
}
   b63a4:	f7ff fff2 	bl	b638c <_ZN13sysStatusDataD1Ev>
   b63a8:	4620      	mov	r0, r4
   b63aa:	2170      	movs	r1, #112	; 0x70
   b63ac:	f7fd fe77 	bl	b409e <_ZdlPvj>
   b63b0:	4620      	mov	r0, r4
   b63b2:	bd10      	pop	{r4, pc}

000b63b4 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b63b4:	b510      	push	{r4, lr}
   b63b6:	4b03      	ldr	r3, [pc, #12]	; (b63c4 <_ZN17currentStatusDataD1Ev+0x10>)
   b63b8:	6003      	str	r3, [r0, #0]
   b63ba:	4604      	mov	r4, r0
   b63bc:	f7ff ffda 	bl	b6374 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b63c0:	4620      	mov	r0, r4
   b63c2:	bd10      	pop	{r4, pc}
   b63c4:	000c5680 	.word	0x000c5680

000b63c8 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b63c8:	b510      	push	{r4, lr}
   b63ca:	4604      	mov	r4, r0
}
   b63cc:	f7ff fff2 	bl	b63b4 <_ZN17currentStatusDataD1Ev>
   b63d0:	4620      	mov	r0, r4
   b63d2:	2178      	movs	r1, #120	; 0x78
   b63d4:	f7fd fe63 	bl	b409e <_ZdlPvj>
   b63d8:	4620      	mov	r0, r4
   b63da:	bd10      	pop	{r4, pc}

000b63dc <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b63dc:	b510      	push	{r4, lr}
   b63de:	4b03      	ldr	r3, [pc, #12]	; (b63ec <_ZN10nodeIDDataD1Ev+0x10>)
   b63e0:	6003      	str	r3, [r0, #0]
   b63e2:	4604      	mov	r4, r0
   b63e4:	f7ff ffc6 	bl	b6374 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b63e8:	4620      	mov	r0, r4
   b63ea:	bd10      	pop	{r4, pc}
   b63ec:	000c5628 	.word	0x000c5628

000b63f0 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b63f0:	b510      	push	{r4, lr}
   b63f2:	4604      	mov	r4, r0
}
   b63f4:	f7ff fff2 	bl	b63dc <_ZN10nodeIDDataD1Ev>
   b63f8:	4620      	mov	r0, r4
   b63fa:	f240 413c 	movw	r1, #1084	; 0x43c
   b63fe:	f7fd fe4e 	bl	b409e <_ZdlPvj>
   b6402:	4620      	mov	r0, r4
   b6404:	bd10      	pop	{r4, pc}
	...

000b6408 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b6408:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b640c:	6081      	str	r1, [r0, #8]
   b640e:	490a      	ldr	r1, [pc, #40]	; (b6438 <_ZN13sysStatusDataC1Ev+0x30>)
   b6410:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b6414:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b6418:	2101      	movs	r1, #1
   b641a:	8281      	strh	r1, [r0, #20]
   b641c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6420:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6422:	4906      	ldr	r1, [pc, #24]	; (b643c <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6424:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6426:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b642a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b642c:	6182      	str	r2, [r0, #24]
   b642e:	f880 2020 	strb.w	r2, [r0, #32]
   b6432:	4a03      	ldr	r2, [pc, #12]	; (b6440 <_ZN13sysStatusDataC1Ev+0x38>)
   b6434:	6002      	str	r2, [r0, #0]
};
   b6436:	4770      	bx	lr
   b6438:	20a99e76 	.word	0x20a99e76
   b643c:	2003e470 	.word	0x2003e470
   b6440:	000c5654 	.word	0x000c5654

000b6444 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b6444:	b510      	push	{r4, lr}
    if (!_instance) {
   b6446:	4c06      	ldr	r4, [pc, #24]	; (b6460 <_ZN13sysStatusData8instanceEv+0x1c>)
   b6448:	6823      	ldr	r3, [r4, #0]
   b644a:	b93b      	cbnz	r3, b645c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b644c:	2070      	movs	r0, #112	; 0x70
   b644e:	f7fd fe22 	bl	b4096 <_Znwj>
   b6452:	4603      	mov	r3, r0
   b6454:	b108      	cbz	r0, b645a <_ZN13sysStatusData8instanceEv+0x16>
   b6456:	f7ff ffd7 	bl	b6408 <_ZN13sysStatusDataC1Ev>
   b645a:	6023      	str	r3, [r4, #0]
}
   b645c:	6820      	ldr	r0, [r4, #0]
   b645e:	bd10      	pop	{r4, pc}
   b6460:	2003e468 	.word	0x2003e468

000b6464 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b6464:	b510      	push	{r4, lr}
    fram.begin();
   b6466:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6468:	f003 fdae 	bl	b9fc8 <_ZN6MB85RC5beginEv>
    sysStatus
   b646c:	f7ff ffea 	bl	b6444 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b6470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6474:	6803      	ldr	r3, [r0, #0]
   b6476:	61c2      	str	r2, [r0, #28]
}
   b6478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b647c:	685b      	ldr	r3, [r3, #4]
   b647e:	4718      	bx	r3

000b6480 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b6480:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b6482:	f7ff ffdf 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6486:	6803      	ldr	r3, [r0, #0]
}
   b6488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b648c:	68db      	ldr	r3, [r3, #12]
   b648e:	2100      	movs	r1, #0
   b6490:	4718      	bx	r3
	...

000b6494 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b6494:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b6498:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b649a:	6081      	str	r1, [r0, #8]
   b649c:	490a      	ldr	r1, [pc, #40]	; (b64c8 <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b649e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b64a0:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b64a4:	6182      	str	r2, [r0, #24]
   b64a6:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b64aa:	4a08      	ldr	r2, [pc, #32]	; (b64cc <_ZN17currentStatusDataC1Ev+0x38>)
   b64ac:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b64ae:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b64b2:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b64b4:	2103      	movs	r1, #3
   b64b6:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b64b8:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b64ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b64be:	4a04      	ldr	r2, [pc, #16]	; (b64d0 <_ZN17currentStatusDataC1Ev+0x3c>)
   b64c0:	61c1      	str	r1, [r0, #28]
   b64c2:	6002      	str	r2, [r0, #0]
};
   b64c4:	4770      	bx	lr
   b64c6:	bf00      	nop
   b64c8:	20a99e80 	.word	0x20a99e80
   b64cc:	2003e470 	.word	0x2003e470
   b64d0:	000c5680 	.word	0x000c5680

000b64d4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b64d4:	b510      	push	{r4, lr}
    if (!_instance) {
   b64d6:	4c06      	ldr	r4, [pc, #24]	; (b64f0 <_ZN17currentStatusData8instanceEv+0x1c>)
   b64d8:	6823      	ldr	r3, [r4, #0]
   b64da:	b93b      	cbnz	r3, b64ec <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b64dc:	2078      	movs	r0, #120	; 0x78
   b64de:	f7fd fdda 	bl	b4096 <_Znwj>
   b64e2:	4603      	mov	r3, r0
   b64e4:	b108      	cbz	r0, b64ea <_ZN17currentStatusData8instanceEv+0x16>
   b64e6:	f7ff ffd5 	bl	b6494 <_ZN17currentStatusDataC1Ev>
   b64ea:	6023      	str	r3, [r4, #0]
}
   b64ec:	6820      	ldr	r0, [r4, #0]
   b64ee:	bd10      	pop	{r4, pc}
   b64f0:	2003e46c 	.word	0x2003e46c

000b64f4 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b64f4:	b510      	push	{r4, lr}
    fram.begin();
   b64f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b64f8:	f003 fd66 	bl	b9fc8 <_ZN6MB85RC5beginEv>
    current
   b64fc:	f7ff ffea 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b6500:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6504:	6803      	ldr	r3, [r0, #0]
   b6506:	61c2      	str	r2, [r0, #28]
}
   b6508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b650c:	685b      	ldr	r3, [r3, #4]
   b650e:	4718      	bx	r3

000b6510 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b6510:	b510      	push	{r4, lr}
    current.flush(false);
   b6512:	f7ff ffdf 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6516:	6803      	ldr	r3, [r0, #0]
}
   b6518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b651c:	68db      	ldr	r3, [r3, #12]
   b651e:	2100      	movs	r1, #0
   b6520:	4718      	bx	r3
   b6522:	0000      	movs	r0, r0
   b6524:	0000      	movs	r0, r0
	...

000b6528 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b6528:	b510      	push	{r4, lr}
   b652a:	4604      	mov	r4, r0
   b652c:	ed2d 8b02 	vpush	{d8}
   b6530:	3004      	adds	r0, #4
   b6532:	f7ff fee3 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6536:	68e3      	ldr	r3, [r4, #12]
   b6538:	3b08      	subs	r3, #8
   b653a:	2b17      	cmp	r3, #23
   b653c:	d90c      	bls.n	b6558 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b653e:	68a3      	ldr	r3, [r4, #8]
   b6540:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b6544:	6860      	ldr	r0, [r4, #4]
   b6546:	f006 fbd9 	bl	bccfc <os_mutex_recursive_unlock>
}
   b654a:	eeb0 0a48 	vmov.f32	s0, s16
   b654e:	eef0 0a68 	vmov.f32	s1, s17
   b6552:	ecbd 8b02 	vpop	{d8}
   b6556:	bd10      	pop	{r4, pc}
            T result = 0;
   b6558:	ed9f 8b01 	vldr	d8, [pc, #4]	; b6560 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b655c:	e7f2      	b.n	b6544 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b655e:	bf00      	nop
	...

000b6568 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b6568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b656a:	4604      	mov	r4, r0
   b656c:	3004      	adds	r0, #4
   b656e:	ec57 6b10 	vmov	r6, r7, d0
   b6572:	f7ff fec3 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6576:	68e3      	ldr	r3, [r4, #12]
   b6578:	3b08      	subs	r3, #8
   b657a:	2b17      	cmp	r3, #23
   b657c:	d90c      	bls.n	b6598 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b657e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b6580:	4630      	mov	r0, r6
   b6582:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6586:	4639      	mov	r1, r7
   b6588:	f00b fe7c 	bl	c2284 <__aeabi_dcmpeq>
   b658c:	b920      	cbnz	r0, b6598 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b658e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b6592:	4620      	mov	r0, r4
   b6594:	f006 faa2 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6598:	6860      	ldr	r0, [r4, #4]
}
   b659a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b659e:	f006 bbad 	b.w	bccfc <os_mutex_recursive_unlock>
	...

000b65a4 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b65a4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b65a8:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b65aa:	6081      	str	r1, [r0, #8]
   b65ac:	490a      	ldr	r1, [pc, #40]	; (b65d8 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b65ae:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b65b0:	f44f 6c82 	mov.w	ip, #1040	; 0x410
   b65b4:	6182      	str	r2, [r0, #24]
   b65b6:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b65ba:	4a08      	ldr	r2, [pc, #32]	; (b65dc <_ZN10nodeIDDataC1Ev+0x38>)
   b65bc:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b65be:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b65c2:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b65c4:	2102      	movs	r1, #2
   b65c6:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b65c8:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b65ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b65ce:	4a04      	ldr	r2, [pc, #16]	; (b65e0 <_ZN10nodeIDDataC1Ev+0x3c>)
   b65d0:	61c1      	str	r1, [r0, #28]
   b65d2:	6002      	str	r2, [r0, #0]
};
   b65d4:	4770      	bx	lr
   b65d6:	bf00      	nop
   b65d8:	20a99e60 	.word	0x20a99e60
   b65dc:	2003e470 	.word	0x2003e470
   b65e0:	000c5628 	.word	0x000c5628

000b65e4 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b65e4:	b510      	push	{r4, lr}
    if (!_instance) {
   b65e6:	4c07      	ldr	r4, [pc, #28]	; (b6604 <_ZN10nodeIDData8instanceEv+0x20>)
   b65e8:	6823      	ldr	r3, [r4, #0]
   b65ea:	b943      	cbnz	r3, b65fe <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b65ec:	f240 403c 	movw	r0, #1084	; 0x43c
   b65f0:	f7fd fd51 	bl	b4096 <_Znwj>
   b65f4:	4603      	mov	r3, r0
   b65f6:	b108      	cbz	r0, b65fc <_ZN10nodeIDData8instanceEv+0x18>
   b65f8:	f7ff ffd4 	bl	b65a4 <_ZN10nodeIDDataC1Ev>
   b65fc:	6023      	str	r3, [r4, #0]
}
   b65fe:	6820      	ldr	r0, [r4, #0]
   b6600:	bd10      	pop	{r4, pc}
   b6602:	bf00      	nop
   b6604:	2003e464 	.word	0x2003e464

000b6608 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b6608:	b510      	push	{r4, lr}
    fram.begin();
   b660a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b660c:	f003 fcdc 	bl	b9fc8 <_ZN6MB85RC5beginEv>
    nodeDatabase
   b6610:	f7ff ffe8 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b6614:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6618:	6803      	ldr	r3, [r0, #0]
   b661a:	61c2      	str	r2, [r0, #28]
}
   b661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6620:	685b      	ldr	r3, [r3, #4]
   b6622:	4718      	bx	r3

000b6624 <_ZN10nodeIDData4loopEv>:
void nodeIDData::loop() {
   b6624:	b510      	push	{r4, lr}
    nodeDatabase.flush(false);
   b6626:	f7ff ffdd 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b662a:	6803      	ldr	r3, [r0, #0]
}
   b662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeDatabase.flush(false);
   b6630:	68db      	ldr	r3, [r3, #12]
   b6632:	2100      	movs	r1, #0
   b6634:	4718      	bx	r3
	...

000b6638 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b6638:	b538      	push	{r3, r4, r5, lr}
   b663a:	4604      	mov	r4, r0
   b663c:	460d      	mov	r5, r1
	String result;
   b663e:	4906      	ldr	r1, [pc, #24]	; (b6658 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b6640:	f009 fad5 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b6644:	4623      	mov	r3, r4
   b6646:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b664a:	2110      	movs	r1, #16
   b664c:	4628      	mov	r0, r5
   b664e:	f006 f9d3 	bl	bc9f8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b6652:	4620      	mov	r0, r4
   b6654:	bd38      	pop	{r3, r4, r5, pc}
   b6656:	bf00      	nop
   b6658:	000c6838 	.word	0x000c6838

000b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b665c:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b665e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6662:	2110      	movs	r1, #16
   b6664:	f006 ba46 	b.w	bcaf4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b6668 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b6668:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b666a:	4c14      	ldr	r4, [pc, #80]	; (b66bc <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b666c:	4914      	ldr	r1, [pc, #80]	; (b66c0 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b666e:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b6670:	4668      	mov	r0, sp
   b6672:	f009 fabc 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b6676:	9a00      	ldr	r2, [sp, #0]
   b6678:	4912      	ldr	r1, [pc, #72]	; (b66c4 <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b667a:	4620      	mov	r0, r4
   b667c:	f7fd fd5f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b6680:	f7ff ffb0 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b6684:	9900      	ldr	r1, [sp, #0]
   b6686:	f7ff ffe9 	bl	b665c <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b668a:	f7ff ffab 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b668e:	6803      	ldr	r3, [r0, #0]
   b6690:	2101      	movs	r1, #1
   b6692:	68db      	ldr	r3, [r3, #12]
   b6694:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b6696:	f7ff ffa5 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b669a:	4601      	mov	r1, r0
   b669c:	a804      	add	r0, sp, #16
   b669e:	f7ff ffcb 	bl	b6638 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b66a2:	9a04      	ldr	r2, [sp, #16]
   b66a4:	4908      	ldr	r1, [pc, #32]	; (b66c8 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b66a6:	4620      	mov	r0, r4
   b66a8:	f7fd fd49 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b66ac:	a804      	add	r0, sp, #16
   b66ae:	f009 fa53 	bl	bfb58 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b66b2:	4668      	mov	r0, sp
   b66b4:	f009 fa50 	bl	bfb58 <_ZN6StringD1Ev>
}
   b66b8:	b008      	add	sp, #32
   b66ba:	bd10      	pop	{r4, pc}
   b66bc:	2003e650 	.word	0x2003e650
   b66c0:	000c5491 	.word	0x000c5491
   b66c4:	000c549e 	.word	0x000c549e
   b66c8:	000c54bc 	.word	0x000c54bc

000b66cc <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b66cc:	b570      	push	{r4, r5, r6, lr}
    Log.info("Erasing FRAM region");
   b66ce:	4910      	ldr	r1, [pc, #64]	; (b6710 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b66d0:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b66d2:	4810      	ldr	r0, [pc, #64]	; (b6714 <_ZN10nodeIDData10initializeEv+0x48>)
   b66d4:	f7fd fd33 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b66d8:	25c8      	movs	r5, #200	; 0xc8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b66da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b66dc:	6803      	ldr	r3, [r0, #0]
   b66de:	4629      	mov	r1, r5
   b66e0:	68de      	ldr	r6, [r3, #12]
   b66e2:	22ff      	movs	r2, #255	; 0xff
   b66e4:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b66e6:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b66e8:	47b0      	blx	r6
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b66ea:	f5b5 6f9b 	cmp.w	r5, #1240	; 0x4d8
   b66ee:	d1f4      	bne.n	b66da <_ZN10nodeIDData10initializeEv+0xe>
    Log.info("Initializing data");
   b66f0:	4909      	ldr	r1, [pc, #36]	; (b6718 <_ZN10nodeIDData10initializeEv+0x4c>)
   b66f2:	4808      	ldr	r0, [pc, #32]	; (b6714 <_ZN10nodeIDData10initializeEv+0x48>)
   b66f4:	f7fd fd23 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b66f8:	4620      	mov	r0, r4
   b66fa:	f006 fa91 	bl	bcc20 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b66fe:	4620      	mov	r0, r4
   b6700:	f7ff ffb2 	bl	b6668 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b6704:	4620      	mov	r0, r4
}
   b6706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b670a:	f006 b9e7 	b.w	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b670e:	bf00      	nop
   b6710:	000c54d2 	.word	0x000c54d2
   b6714:	2003e650 	.word	0x2003e650
   b6718:	000c54e6 	.word	0x000c54e6

000b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b671c:	b538      	push	{r3, r4, r5, lr}
   b671e:	4604      	mov	r4, r0
   b6720:	3004      	adds	r0, #4
   b6722:	460d      	mov	r5, r1
   b6724:	f7ff fdea 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6728:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b672a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b672c:	3b01      	subs	r3, #1
   b672e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6730:	bf26      	itte	cs
   b6732:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6734:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6736:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6738:	f006 fae0 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b673c:	4628      	mov	r0, r5
   b673e:	bd38      	pop	{r3, r4, r5, pc}

000b6740 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b6740:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b6742:	2110      	movs	r1, #16
   b6744:	f7ff ffea 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6748:	bd08      	pop	{r3, pc}

000b674a <_ZNK13sysStatusData20get_connectivityModeEv>:
uint8_t sysStatusData::get_connectivityMode() const {
   b674a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, connectivityMode));
   b674c:	2114      	movs	r1, #20
   b674e:	f7ff ffe5 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6752:	bd08      	pop	{r3, pc}

000b6754 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b6754:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b6756:	2115      	movs	r1, #21
   b6758:	f7ff ffe0 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b675c:	bd08      	pop	{r3, pc}

000b675e <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b675e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b6760:	2116      	movs	r1, #22
   b6762:	f7ff ffdb 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6766:	bd08      	pop	{r3, pc}

000b6768 <_ZNK13sysStatusData20get_alertCodeGatewayEv>:
uint8_t sysStatusData::get_alertCodeGateway() const {
   b6768:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeGateway));
   b676a:	212e      	movs	r1, #46	; 0x2e
   b676c:	f7ff ffd6 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6770:	bd08      	pop	{r3, pc}

000b6772 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b6772:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b6774:	2138      	movs	r1, #56	; 0x38
   b6776:	f7ff ffd1 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b677a:	bd08      	pop	{r3, pc}

000b677c <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b677c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b677e:	2139      	movs	r1, #57	; 0x39
   b6780:	f7ff ffcc 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6784:	bd08      	pop	{r3, pc}

000b6786 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b6786:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6788:	213b      	movs	r1, #59	; 0x3b
   b678a:	f7ff ffc7 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b678e:	bd08      	pop	{r3, pc}

000b6790 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b6790:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b6792:	2110      	movs	r1, #16
   b6794:	f7ff ffc2 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6798:	bd08      	pop	{r3, pc}

000b679a <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b679a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b679c:	2111      	movs	r1, #17
   b679e:	f7ff ffbd 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67a2:	bd08      	pop	{r3, pc}

000b67a4 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b67a4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b67a6:	2114      	movs	r1, #20
   b67a8:	f7ff ffb8 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67ac:	bd08      	pop	{r3, pc}

000b67ae <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b67ae:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b67b0:	2120      	movs	r1, #32
   b67b2:	f7ff ffb3 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67b6:	bd08      	pop	{r3, pc}

000b67b8 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b67b8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b67ba:	2121      	movs	r1, #33	; 0x21
   b67bc:	f7ff ffae 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67c0:	bd08      	pop	{r3, pc}

000b67c2 <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b67c2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b67c4:	2126      	movs	r1, #38	; 0x26
   b67c6:	f7ff ffa9 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67ca:	bd08      	pop	{r3, pc}

000b67cc <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b67cc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b67ce:	2127      	movs	r1, #39	; 0x27
   b67d0:	f7ff ffa4 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67d4:	bd08      	pop	{r3, pc}

000b67d6 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b67d6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b67d8:	2134      	movs	r1, #52	; 0x34
   b67da:	f7ff ff9f 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67de:	bd08      	pop	{r3, pc}

000b67e0 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b67e0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b67e2:	2141      	movs	r1, #65	; 0x41
   b67e4:	f7ff ff9a 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67e8:	bd08      	pop	{r3, pc}

000b67ea <_ZNK17currentStatusData8get_hopsEv>:
uint8_t currentStatusData::get_hops() const {
   b67ea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, hops));
   b67ec:	2142      	movs	r1, #66	; 0x42
   b67ee:	f7ff ff95 	bl	b671c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67f2:	bd08      	pop	{r3, pc}

000b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b67f4:	b570      	push	{r4, r5, r6, lr}
   b67f6:	4604      	mov	r4, r0
   b67f8:	3004      	adds	r0, #4
   b67fa:	460d      	mov	r5, r1
   b67fc:	4616      	mov	r6, r2
   b67fe:	f7ff fd7d 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6802:	68e3      	ldr	r3, [r4, #12]
   b6804:	3b01      	subs	r3, #1
   b6806:	42ab      	cmp	r3, r5
   b6808:	d307      	bcc.n	b681a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b680a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b680c:	5d5a      	ldrb	r2, [r3, r5]
   b680e:	42b2      	cmp	r2, r6
   b6810:	d003      	beq.n	b681a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b6812:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6814:	4620      	mov	r0, r4
   b6816:	f006 f961 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b681a:	6860      	ldr	r0, [r4, #4]
        }
   b681c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6820:	f006 ba6c 	b.w	bccfc <os_mutex_recursive_unlock>

000b6824 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6824:	b508      	push	{r3, lr}
   b6826:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6828:	2110      	movs	r1, #16
   b682a:	f7ff ffe3 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b682e:	bd08      	pop	{r3, pc}

000b6830 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b6830:	b508      	push	{r3, lr}
   b6832:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6834:	2111      	movs	r1, #17
   b6836:	f7ff ffdd 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b683a:	bd08      	pop	{r3, pc}

000b683c <_ZN13sysStatusData20set_connectivityModeEh>:
void sysStatusData::set_connectivityMode(uint8_t value) {
   b683c:	b508      	push	{r3, lr}
   b683e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, connectivityMode), value);
   b6840:	2114      	movs	r1, #20
   b6842:	f7ff ffd7 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6846:	bd08      	pop	{r3, pc}

000b6848 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b6848:	b508      	push	{r3, lr}
   b684a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b684c:	2115      	movs	r1, #21
   b684e:	f7ff ffd1 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6852:	bd08      	pop	{r3, pc}

000b6854 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6854:	b508      	push	{r3, lr}
   b6856:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b6858:	2116      	movs	r1, #22
   b685a:	f7ff ffcb 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b685e:	bd08      	pop	{r3, pc}

000b6860 <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b6860:	b508      	push	{r3, lr}
   b6862:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b6864:	212e      	movs	r1, #46	; 0x2e
   b6866:	f7ff ffc5 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b686a:	bd08      	pop	{r3, pc}

000b686c <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b686c:	b508      	push	{r3, lr}
   b686e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b6870:	2138      	movs	r1, #56	; 0x38
   b6872:	f7ff ffbf 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6876:	bd08      	pop	{r3, pc}

000b6878 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b6878:	b508      	push	{r3, lr}
   b687a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b687c:	2139      	movs	r1, #57	; 0x39
   b687e:	f7ff ffb9 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6882:	bd08      	pop	{r3, pc}

000b6884 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b6884:	b508      	push	{r3, lr}
   b6886:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b6888:	2110      	movs	r1, #16
   b688a:	f7ff ffb3 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b688e:	bd08      	pop	{r3, pc}

000b6890 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b6890:	b508      	push	{r3, lr}
   b6892:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6894:	2111      	movs	r1, #17
   b6896:	f7ff ffad 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b689a:	bd08      	pop	{r3, pc}

000b689c <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b689c:	b508      	push	{r3, lr}
   b689e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b68a0:	2114      	movs	r1, #20
   b68a2:	f7ff ffa7 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68a6:	bd08      	pop	{r3, pc}

000b68a8 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b68a8:	b508      	push	{r3, lr}
   b68aa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b68ac:	2120      	movs	r1, #32
   b68ae:	f7ff ffa1 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68b2:	bd08      	pop	{r3, pc}

000b68b4 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b68b4:	b508      	push	{r3, lr}
   b68b6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b68b8:	2121      	movs	r1, #33	; 0x21
   b68ba:	f7ff ff9b 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68be:	bd08      	pop	{r3, pc}

000b68c0 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b68c0:	b508      	push	{r3, lr}
   b68c2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b68c4:	2126      	movs	r1, #38	; 0x26
   b68c6:	f7ff ff95 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68ca:	bd08      	pop	{r3, pc}

000b68cc <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b68cc:	b508      	push	{r3, lr}
   b68ce:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b68d0:	2127      	movs	r1, #39	; 0x27
   b68d2:	f7ff ff8f 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68d6:	bd08      	pop	{r3, pc}

000b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b68d8:	b508      	push	{r3, lr}
   b68da:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b68dc:	2134      	movs	r1, #52	; 0x34
   b68de:	f7ff ff89 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68e2:	bd08      	pop	{r3, pc}

000b68e4 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b68e4:	b508      	push	{r3, lr}
   b68e6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b68e8:	2141      	movs	r1, #65	; 0x41
   b68ea:	f7ff ff83 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68ee:	bd08      	pop	{r3, pc}

000b68f0 <_ZN17currentStatusData8set_hopsEh>:
void currentStatusData::set_hops(uint8_t value) {
   b68f0:	b508      	push	{r3, lr}
   b68f2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, hops), value);
   b68f4:	2142      	movs	r1, #66	; 0x42
   b68f6:	f7ff ff7d 	bl	b67f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68fa:	bd08      	pop	{r3, pc}

000b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b68fc:	b538      	push	{r3, r4, r5, lr}
   b68fe:	4604      	mov	r4, r0
   b6900:	3004      	adds	r0, #4
   b6902:	460d      	mov	r5, r1
   b6904:	f7ff fcfa 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6908:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b690a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b690c:	3b02      	subs	r3, #2
   b690e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6910:	bf26      	itte	cs
   b6912:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6914:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6916:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6918:	f006 f9f0 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b691c:	4628      	mov	r0, r5
   b691e:	bd38      	pop	{r3, r4, r5, pc}

000b6920 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b6920:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b6922:	2112      	movs	r1, #18
   b6924:	f7ff ffea 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6928:	bd08      	pop	{r3, pc}

000b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b692a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b692c:	212a      	movs	r1, #42	; 0x2a
   b692e:	f7ff ffe5 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6932:	bd08      	pop	{r3, pc}

000b6934 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b6934:	b513      	push	{r0, r1, r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6936:	f006 f90d 	bl	bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b693a:	4604      	mov	r4, r0
   b693c:	b1a0      	cbz	r0, b6968 <_ZN13sysStatusData8validateEj+0x34>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b693e:	f7ff fd81 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6942:	f7ff ff16 	bl	b6772 <_ZNK13sysStatusData12get_openTimeEv>
   b6946:	280c      	cmp	r0, #12
   b6948:	d917      	bls.n	b697a <_ZN13sysStatusData8validateEj+0x46>
            Log.info("data not valid openTime=%d and closeTime=%d", sysStatus.get_openTime(), sysStatus.get_closeTime());
   b694a:	f7ff fd7b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b694e:	f7ff ff10 	bl	b6772 <_ZNK13sysStatusData12get_openTimeEv>
   b6952:	9001      	str	r0, [sp, #4]
   b6954:	f7ff fd76 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6958:	f7ff ff10 	bl	b677c <_ZNK13sysStatusData13get_closeTimeEv>
   b695c:	9a01      	ldr	r2, [sp, #4]
   b695e:	491b      	ldr	r1, [pc, #108]	; (b69cc <_ZN13sysStatusData8validateEj+0x98>)
   b6960:	4603      	mov	r3, r0
   b6962:	481b      	ldr	r0, [pc, #108]	; (b69d0 <_ZN13sysStatusData8validateEj+0x9c>)
   b6964:	f7fd fbeb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6968:	4a1a      	ldr	r2, [pc, #104]	; (b69d4 <_ZN13sysStatusData8validateEj+0xa0>)
   b696a:	491b      	ldr	r1, [pc, #108]	; (b69d8 <_ZN13sysStatusData8validateEj+0xa4>)
   b696c:	4818      	ldr	r0, [pc, #96]	; (b69d0 <_ZN13sysStatusData8validateEj+0x9c>)
   b696e:	f7fd fbe6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6972:	2400      	movs	r4, #0
}
   b6974:	4620      	mov	r0, r4
   b6976:	b002      	add	sp, #8
   b6978:	bd10      	pop	{r4, pc}
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b697a:	f7ff fd63 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b697e:	f7ff fefd 	bl	b677c <_ZNK13sysStatusData13get_closeTimeEv>
   b6982:	280b      	cmp	r0, #11
   b6984:	d9e1      	bls.n	b694a <_ZN13sysStatusData8validateEj+0x16>
        else if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b6986:	f7ff fd5d 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b698a:	f7ff ffce 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b698e:	b190      	cbz	r0, b69b6 <_ZN13sysStatusData8validateEj+0x82>
   b6990:	f7ff fd58 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6994:	f7ff ffc9 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6998:	283c      	cmp	r0, #60	; 0x3c
   b699a:	d80c      	bhi.n	b69b6 <_ZN13sysStatusData8validateEj+0x82>
        else if (sysStatus.get_nodeNumber() != 0) {
   b699c:	f7ff fd52 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b69a0:	f7ff fece 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b69a4:	2800      	cmp	r0, #0
   b69a6:	d0e5      	beq.n	b6974 <_ZN13sysStatusData8validateEj+0x40>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b69a8:	f7ff fd4c 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b69ac:	f7ff fec8 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b69b0:	490a      	ldr	r1, [pc, #40]	; (b69dc <_ZN13sysStatusData8validateEj+0xa8>)
   b69b2:	4602      	mov	r2, r0
   b69b4:	e005      	b.n	b69c2 <_ZN13sysStatusData8validateEj+0x8e>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b69b6:	f7ff fd45 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b69ba:	f7ff ffb6 	bl	b692a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b69be:	4908      	ldr	r1, [pc, #32]	; (b69e0 <_ZN13sysStatusData8validateEj+0xac>)
   b69c0:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b69c2:	4803      	ldr	r0, [pc, #12]	; (b69d0 <_ZN13sysStatusData8validateEj+0x9c>)
   b69c4:	f7fd fbbb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b69c8:	e7ce      	b.n	b6968 <_ZN13sysStatusData8validateEj+0x34>
   b69ca:	bf00      	nop
   b69cc:	000c54f8 	.word	0x000c54f8
   b69d0:	2003e650 	.word	0x2003e650
   b69d4:	000c5475 	.word	0x000c5475
   b69d8:	000c5568 	.word	0x000c5568
   b69dc:	000c5549 	.word	0x000c5549
   b69e0:	000c5524 	.word	0x000c5524

000b69e4 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b69e4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b69e6:	212c      	movs	r1, #44	; 0x2c
   b69e8:	f7ff ff88 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69ec:	bd08      	pop	{r3, pc}

000b69ee <_ZNK17currentStatusData10get_nodeIDEv>:
uint16_t currentStatusData::get_nodeID() const {
   b69ee:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeID));
   b69f0:	2112      	movs	r1, #18
   b69f2:	f7ff ff83 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69f6:	bd08      	pop	{r3, pc}

000b69f8 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b69f8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b69fa:	2130      	movs	r1, #48	; 0x30
   b69fc:	f7ff ff7e 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a00:	bd08      	pop	{r3, pc}
	...

000b6a04 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b6a04:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6a06:	f006 f8a5 	bl	bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b6a0a:	4604      	mov	r4, r0
   b6a0c:	b198      	cbz	r0, b6a36 <_ZN17currentStatusData8validateEj+0x32>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount() > 1024) {
   b6a0e:	f7ff fd61 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6a12:	f7ff fff1 	bl	b69f8 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a16:	f7ff fd5d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6a1a:	f7ff ffed 	bl	b69f8 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a1e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b6a22:	d90e      	bls.n	b6a42 <_ZN17currentStatusData8validateEj+0x3e>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b6a24:	f7ff fd56 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6a28:	f7ff ffe6 	bl	b69f8 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a2c:	4906      	ldr	r1, [pc, #24]	; (b6a48 <_ZN17currentStatusData8validateEj+0x44>)
   b6a2e:	4602      	mov	r2, r0
   b6a30:	4806      	ldr	r0, [pc, #24]	; (b6a4c <_ZN17currentStatusData8validateEj+0x48>)
   b6a32:	f7fd fb84 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6a36:	4a06      	ldr	r2, [pc, #24]	; (b6a50 <_ZN17currentStatusData8validateEj+0x4c>)
   b6a38:	4906      	ldr	r1, [pc, #24]	; (b6a54 <_ZN17currentStatusData8validateEj+0x50>)
   b6a3a:	4804      	ldr	r0, [pc, #16]	; (b6a4c <_ZN17currentStatusData8validateEj+0x48>)
   b6a3c:	f7fd fb7f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6a40:	2400      	movs	r4, #0
}
   b6a42:	4620      	mov	r0, r4
   b6a44:	bd10      	pop	{r4, pc}
   b6a46:	bf00      	nop
   b6a48:	000c557d 	.word	0x000c557d
   b6a4c:	2003e650 	.word	0x2003e650
   b6a50:	000c5475 	.word	0x000c5475
   b6a54:	000c55a3 	.word	0x000c55a3

000b6a58 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6a58:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6a5a:	2132      	movs	r1, #50	; 0x32
   b6a5c:	f7ff ff4e 	bl	b68fc <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a60:	bd08      	pop	{r3, pc}

000b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6a62:	b570      	push	{r4, r5, r6, lr}
   b6a64:	4604      	mov	r4, r0
   b6a66:	3004      	adds	r0, #4
   b6a68:	460d      	mov	r5, r1
   b6a6a:	4616      	mov	r6, r2
   b6a6c:	f7ff fc46 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a70:	68e3      	ldr	r3, [r4, #12]
   b6a72:	3b02      	subs	r3, #2
   b6a74:	42ab      	cmp	r3, r5
   b6a76:	d307      	bcc.n	b6a88 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6a78:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6a7a:	5b5a      	ldrh	r2, [r3, r5]
   b6a7c:	42b2      	cmp	r2, r6
   b6a7e:	d003      	beq.n	b6a88 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6a80:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6a82:	4620      	mov	r0, r4
   b6a84:	f006 f82a 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6a88:	6860      	ldr	r0, [r4, #4]
        }
   b6a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6a8e:	f006 b935 	b.w	bccfc <os_mutex_recursive_unlock>

000b6a92 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6a92:	b508      	push	{r3, lr}
   b6a94:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b6a96:	2112      	movs	r1, #18
   b6a98:	f7ff ffe3 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a9c:	bd08      	pop	{r3, pc}

000b6a9e <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6a9e:	b508      	push	{r3, lr}
   b6aa0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6aa2:	2128      	movs	r1, #40	; 0x28
   b6aa4:	f7ff ffdd 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6aa8:	bd08      	pop	{r3, pc}

000b6aaa <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6aaa:	b508      	push	{r3, lr}
   b6aac:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6aae:	212a      	movs	r1, #42	; 0x2a
   b6ab0:	f7ff ffd7 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ab4:	bd08      	pop	{r3, pc}

000b6ab6 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b6ab6:	b508      	push	{r3, lr}
   b6ab8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6aba:	212c      	movs	r1, #44	; 0x2c
   b6abc:	f7ff ffd1 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ac0:	bd08      	pop	{r3, pc}

000b6ac2 <_ZN17currentStatusData10set_nodeIDEt>:
void currentStatusData::set_nodeID(uint16_t value) {
   b6ac2:	b508      	push	{r3, lr}
   b6ac4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeID), value);
   b6ac6:	2112      	movs	r1, #18
   b6ac8:	f7ff ffcb 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6acc:	bd08      	pop	{r3, pc}

000b6ace <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b6ace:	b508      	push	{r3, lr}
   b6ad0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6ad2:	2130      	movs	r1, #48	; 0x30
   b6ad4:	f7ff ffc5 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ad8:	bd08      	pop	{r3, pc}

000b6ada <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b6ada:	b508      	push	{r3, lr}
   b6adc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b6ade:	2132      	movs	r1, #50	; 0x32
   b6ae0:	f7ff ffbf 	bl	b6a62 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ae4:	bd08      	pop	{r3, pc}

000b6ae6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ae8:	4604      	mov	r4, r0
   b6aea:	3004      	adds	r0, #4
   b6aec:	460d      	mov	r5, r1
   b6aee:	f7ff fc05 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6af2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6af4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6af6:	3b08      	subs	r3, #8
   b6af8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6afa:	bf23      	ittte	cs
   b6afc:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b6afe:	1949      	addcs	r1, r1, r5
   b6b00:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6b04:	2600      	movcc	r6, #0
   b6b06:	bf38      	it	cc
   b6b08:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6b0a:	f006 f8f7 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b6b0e:	4630      	mov	r0, r6
   b6b10:	4639      	mov	r1, r7
   b6b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b14 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6b14:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6b16:	2120      	movs	r1, #32
   b6b18:	f7ff ffe5 	bl	b6ae6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6b1c:	bd08      	pop	{r3, pc}

000b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b20:	4604      	mov	r4, r0
   b6b22:	3004      	adds	r0, #4
   b6b24:	460d      	mov	r5, r1
   b6b26:	461e      	mov	r6, r3
   b6b28:	4617      	mov	r7, r2
   b6b2a:	f7ff fbe7 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6b2e:	68e3      	ldr	r3, [r4, #12]
   b6b30:	3b08      	subs	r3, #8
   b6b32:	42ab      	cmp	r3, r5
   b6b34:	d30c      	bcc.n	b6b50 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6b36:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6b38:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6b3a:	5958      	ldr	r0, [r3, r5]
   b6b3c:	6851      	ldr	r1, [r2, #4]
   b6b3e:	42b1      	cmp	r1, r6
   b6b40:	bf08      	it	eq
   b6b42:	42b8      	cmpeq	r0, r7
   b6b44:	d004      	beq.n	b6b50 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b6b46:	515f      	str	r7, [r3, r5]
                        updateHash();
   b6b48:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6b4a:	6056      	str	r6, [r2, #4]
                        updateHash();
   b6b4c:	f005 ffc6 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6b50:	6860      	ldr	r0, [r4, #4]
        }
   b6b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6b56:	f006 b8d1 	b.w	bccfc <os_mutex_recursive_unlock>

000b6b5a <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b6b5a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b6b5c:	2118      	movs	r1, #24
   b6b5e:	f7ff ffde 	bl	b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b62:	bd08      	pop	{r3, pc}

000b6b64 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6b64:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6b66:	2120      	movs	r1, #32
   b6b68:	f7ff ffd9 	bl	b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b6c:	bd08      	pop	{r3, pc}

000b6b6e <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6b6e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6b70:	2130      	movs	r1, #48	; 0x30
   b6b72:	f7ff ffd4 	bl	b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b76:	bd08      	pop	{r3, pc}

000b6b78 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6b78:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6b7a:	2128      	movs	r1, #40	; 0x28
   b6b7c:	f7ff ffcf 	bl	b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b80:	bd08      	pop	{r3, pc}

000b6b82 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6b82:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6b84:	2138      	movs	r1, #56	; 0x38
   b6b86:	f7ff ffca 	bl	b6b1e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b8a:	bd08      	pop	{r3, pc}

000b6b8c <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6b8c:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6b8e:	4924      	ldr	r1, [pc, #144]	; (b6c20 <_ZN17currentStatusData15resetEverythingEv+0x94>)
   b6b90:	4824      	ldr	r0, [pc, #144]	; (b6c24 <_ZN17currentStatusData15resetEverythingEv+0x98>)
   b6b92:	f7fd fad4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b6b96:	f7ff fc9d 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6b9a:	210b      	movs	r1, #11
   b6b9c:	f7ff fe72 	bl	b6884 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b6ba0:	f7ff fc98 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6ba4:	2100      	movs	r1, #0
   b6ba6:	f7ff fe73 	bl	b6890 <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_nodeID(0);
   b6baa:	f7ff fc93 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bae:	2100      	movs	r1, #0
   b6bb0:	f7ff ff87 	bl	b6ac2 <_ZN17currentStatusData10set_nodeIDEt>
  current.set_alertCodeNode(0);
   b6bb4:	f7ff fc8e 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bb8:	2100      	movs	r1, #0
   b6bba:	f7ff fe8d 	bl	b68d8 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b6bbe:	f7ff fc89 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bc2:	2200      	movs	r2, #0
   b6bc4:	2300      	movs	r3, #0
   b6bc6:	f7ff ffdc 	bl	b6b82 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b6bca:	f7ff fc83 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bce:	2100      	movs	r1, #0
   b6bd0:	f7ff ff83 	bl	b6ada <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6bd4:	f7ff fc7e 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bd8:	2100      	movs	r1, #0
   b6bda:	f7ff ff78 	bl	b6ace <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b6bde:	f7ff fc79 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6be2:	2100      	movs	r1, #0
   b6be4:	f7ff fe6c 	bl	b68c0 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b6be8:	f7ff fc74 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bec:	2100      	movs	r1, #0
   b6bee:	f7ff fe6d 	bl	b68cc <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b6bf2:	f7ff fc6f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b6bf6:	4604      	mov	r4, r0
   b6bf8:	f009 fb6f 	bl	c02da <_ZN9TimeClass3nowEv>
   b6bfc:	4602      	mov	r2, r0
   b6bfe:	17c3      	asrs	r3, r0, #31
   b6c00:	4620      	mov	r0, r4
   b6c02:	f7ff ffb9 	bl	b6b78 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6c06:	f7ff fc1d 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6c0a:	2100      	movs	r1, #0
   b6c0c:	f7ff fe1c 	bl	b6848 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6c10:	f7ff fc18 	bl	b6444 <_ZN13sysStatusData8instanceEv>
}
   b6c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6c18:	2100      	movs	r1, #0
   b6c1a:	f7ff be1b 	b.w	b6854 <_ZN13sysStatusData16set_messageCountEh>
   b6c1e:	bf00      	nop
   b6c20:	000c55b6 	.word	0x000c55b6
   b6c24:	2003e650 	.word	0x2003e650

000b6c28 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b6c28:	b510      	push	{r4, lr}
   b6c2a:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6c2c:	f005 fff8 	bl	bcc20 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b6c30:	4905      	ldr	r1, [pc, #20]	; (b6c48 <_ZN17currentStatusData10initializeEv+0x20>)
   b6c32:	4806      	ldr	r0, [pc, #24]	; (b6c4c <_ZN17currentStatusData10initializeEv+0x24>)
   b6c34:	f7fd fa83 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b6c38:	4620      	mov	r0, r4
   b6c3a:	f7ff ffa7 	bl	b6b8c <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b6c3e:	4620      	mov	r0, r4
}
   b6c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6c44:	f005 bf4a 	b.w	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6c48:	000c55d7 	.word	0x000c55d7
   b6c4c:	2003e650 	.word	0x2003e650

000b6c50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6c50:	b538      	push	{r3, r4, r5, lr}
   b6c52:	4604      	mov	r4, r0
   b6c54:	3004      	adds	r0, #4
   b6c56:	460d      	mov	r5, r1
   b6c58:	f7ff fb50 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c5c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6c5e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c60:	3b01      	subs	r3, #1
   b6c62:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6c64:	bf26      	itte	cs
   b6c66:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6c68:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6c6a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6c6c:	f006 f846 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b6c70:	4628      	mov	r0, r5
   b6c72:	bd38      	pop	{r3, r4, r5, pc}

000b6c74 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6c74:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6c76:	2140      	movs	r1, #64	; 0x40
   b6c78:	f7ff ffea 	bl	b6c50 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6c7c:	bd08      	pop	{r3, pc}

000b6c7e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6c7e:	b570      	push	{r4, r5, r6, lr}
   b6c80:	4604      	mov	r4, r0
   b6c82:	3004      	adds	r0, #4
   b6c84:	460d      	mov	r5, r1
   b6c86:	4616      	mov	r6, r2
   b6c88:	f7ff fb38 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c8c:	68e3      	ldr	r3, [r4, #12]
   b6c8e:	3b01      	subs	r3, #1
   b6c90:	42ab      	cmp	r3, r5
   b6c92:	d307      	bcc.n	b6ca4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6c94:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6c96:	5d5a      	ldrb	r2, [r3, r5]
   b6c98:	42b2      	cmp	r2, r6
   b6c9a:	d003      	beq.n	b6ca4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b6c9c:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	f005 ff1c 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6ca4:	6860      	ldr	r0, [r4, #4]
        }
   b6ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6caa:	f006 b827 	b.w	bccfc <os_mutex_recursive_unlock>

000b6cae <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6cae:	b508      	push	{r3, lr}
   b6cb0:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6cb2:	213a      	movs	r1, #58	; 0x3a
   b6cb4:	f7ff ffe3 	bl	b6c7e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6cb8:	bd08      	pop	{r3, pc}
	...

000b6cbc <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b6cbc:	b510      	push	{r4, lr}
   b6cbe:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6cc0:	f005 ffae 	bl	bcc20 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b6cc4:	4928      	ldr	r1, [pc, #160]	; (b6d68 <_ZN13sysStatusData10initializeEv+0xac>)
   b6cc6:	4829      	ldr	r0, [pc, #164]	; (b6d6c <_ZN13sysStatusData10initializeEv+0xb0>)
   b6cc8:	f7fd fa39 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6ccc:	f7ff fbba 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6cd0:	2100      	movs	r1, #0
   b6cd2:	f7ff fda7 	bl	b6824 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b6cd6:	f7ff fbb5 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6cda:	2101      	movs	r1, #1
   b6cdc:	f7ff fda8 	bl	b6830 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b6ce0:	f7ff fbb0 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6ce4:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6ce8:	f7ff fed3 	bl	b6a92 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_connectivityMode(0);
   b6cec:	f7ff fbaa 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6cf0:	2100      	movs	r1, #0
   b6cf2:	f7ff fda3 	bl	b683c <_ZN13sysStatusData20set_connectivityModeEh>
    sysStatus.set_resetCount(0);
   b6cf6:	f7ff fba5 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6cfa:	2100      	movs	r1, #0
   b6cfc:	f7ff fda4 	bl	b6848 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_messageCount(0);
   b6d00:	f7ff fba0 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d04:	2100      	movs	r1, #0
   b6d06:	f7ff fda5 	bl	b6854 <_ZN13sysStatusData16set_messageCountEh>
    sysStatus.set_lastHookResponse(0);
   b6d0a:	f7ff fb9b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d0e:	2200      	movs	r2, #0
   b6d10:	2300      	movs	r3, #0
   b6d12:	f7ff ff22 	bl	b6b5a <_ZN13sysStatusData20set_lastHookResponseEx>
    sysStatus.set_frequencyMinutes(60);
   b6d16:	f7ff fb95 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d1a:	213c      	movs	r1, #60	; 0x3c
   b6d1c:	f7ff fec5 	bl	b6aaa <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_updatedFrequencyMinutes(0);
   b6d20:	f7ff fb90 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d24:	2100      	movs	r1, #0
   b6d26:	f7ff fec6 	bl	b6ab6 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
    sysStatus.set_alertCodeGateway(0);
   b6d2a:	f7ff fb8b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d2e:	2100      	movs	r1, #0
   b6d30:	f7ff fd96 	bl	b6860 <_ZN13sysStatusData20set_alertCodeGatewayEh>
    sysStatus.set_alertTimestampGateway(0);
   b6d34:	f7ff fb86 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d38:	2200      	movs	r2, #0
   b6d3a:	2300      	movs	r3, #0
   b6d3c:	f7ff ff17 	bl	b6b6e <_ZN13sysStatusData25set_alertTimestampGatewayEx>
    sysStatus.set_openTime(6);
   b6d40:	f7ff fb80 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d44:	2106      	movs	r1, #6
   b6d46:	f7ff fd91 	bl	b686c <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(22);
   b6d4a:	f7ff fb7b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d4e:	2116      	movs	r1, #22
   b6d50:	f7ff fd92 	bl	b6878 <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_verizonSIM(false);
   b6d54:	f7ff fb76 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b6d58:	2100      	movs	r1, #0
   b6d5a:	f7ff ffa8 	bl	b6cae <_ZN13sysStatusData14set_verizonSIMEb>
    updateHash();
   b6d5e:	4620      	mov	r0, r4
}
   b6d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6d64:	f005 beba 	b.w	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6d68:	000c55f0 	.word	0x000c55f0
   b6d6c:	2003e650 	.word	0x2003e650

000b6d70 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6d70:	b508      	push	{r3, lr}
   b6d72:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6d74:	2140      	movs	r1, #64	; 0x40
   b6d76:	f7ff ff82 	bl	b6c7e <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6d7a:	bd08      	pop	{r3, pc}

000b6d7c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>:
        T getValue(size_t offset) const {
   b6d7c:	b538      	push	{r3, r4, r5, lr}
   b6d7e:	4604      	mov	r4, r0
   b6d80:	3004      	adds	r0, #4
   b6d82:	460d      	mov	r5, r1
   b6d84:	f7ff faba 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6d88:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6d8a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6d8c:	3b02      	subs	r3, #2
   b6d8e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6d90:	bf26      	itte	cs
   b6d92:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6d94:	5f5d      	ldrshcs	r5, [r3, r5]
            T result = 0;
   b6d96:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6d98:	f005 ffb0 	bl	bccfc <os_mutex_recursive_unlock>
        }
   b6d9c:	4628      	mov	r0, r5
   b6d9e:	bd38      	pop	{r3, r4, r5, pc}

000b6da0 <_ZNK17currentStatusData8get_RSSIEv>:
int16_t currentStatusData::get_RSSI() const {
   b6da0:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
   b6da2:	2122      	movs	r1, #34	; 0x22
   b6da4:	f7ff ffea 	bl	b6d7c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6da8:	bd08      	pop	{r3, pc}

000b6daa <_ZNK17currentStatusData7get_SNREv>:
int16_t currentStatusData::get_SNR() const {
   b6daa:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, SNR));
   b6dac:	2124      	movs	r1, #36	; 0x24
   b6dae:	f7ff ffe5 	bl	b6d7c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6db2:	bd08      	pop	{r3, pc}

000b6db4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6db4:	b570      	push	{r4, r5, r6, lr}
   b6db6:	4604      	mov	r4, r0
   b6db8:	3004      	adds	r0, #4
   b6dba:	460d      	mov	r5, r1
   b6dbc:	4616      	mov	r6, r2
   b6dbe:	f7ff fa9d 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6dc2:	68e3      	ldr	r3, [r4, #12]
   b6dc4:	3b02      	subs	r3, #2
   b6dc6:	42ab      	cmp	r3, r5
   b6dc8:	d307      	bcc.n	b6dda <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6dca:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6dcc:	5f5a      	ldrsh	r2, [r3, r5]
   b6dce:	42b2      	cmp	r2, r6
   b6dd0:	d003      	beq.n	b6dda <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b6dd2:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	f005 fe81 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6dda:	6860      	ldr	r0, [r4, #4]
        }
   b6ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6de0:	f005 bf8c 	b.w	bccfc <os_mutex_recursive_unlock>

000b6de4 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b6de4:	b508      	push	{r3, lr}
   b6de6:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b6de8:	2122      	movs	r1, #34	; 0x22
   b6dea:	f7ff ffe3 	bl	b6db4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6dee:	bd08      	pop	{r3, pc}

000b6df0 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b6df0:	b508      	push	{r3, lr}
   b6df2:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b6df4:	2124      	movs	r1, #36	; 0x24
   b6df6:	f7ff ffdd 	bl	b6db4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6dfa:	bd08      	pop	{r3, pc}

000b6dfc <_GLOBAL__sub_I_fram>:
}
   b6dfc:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6dfe:	f009 fd01 	bl	c0804 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6e02:	4c05      	ldr	r4, [pc, #20]	; (b6e18 <_GLOBAL__sub_I_fram+0x1c>)
   b6e04:	4601      	mov	r1, r0
   b6e06:	2300      	movs	r3, #0
   b6e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	f003 f8d1 	bl	b9fb4 <_ZN6MB85RCC1ER7TwoWireji>
   b6e12:	4b02      	ldr	r3, [pc, #8]	; (b6e1c <_GLOBAL__sub_I_fram+0x20>)
   b6e14:	6023      	str	r3, [r4, #0]
}
   b6e16:	bd10      	pop	{r4, pc}
   b6e18:	2003e470 	.word	0x2003e470
   b6e1c:	000c560c 	.word	0x000c560c

000b6e20 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6e20:	4770      	bx	lr

000b6e22 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6e22:	6a00      	ldr	r0, [r0, #32]
   b6e24:	6803      	ldr	r3, [r0, #0]
   b6e26:	68db      	ldr	r3, [r3, #12]
   b6e28:	4718      	bx	r3

000b6e2a <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6e2a:	4770      	bx	lr

000b6e2c <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6e2c:	b510      	push	{r4, lr}
}
   b6e2e:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6e30:	4604      	mov	r4, r0
}
   b6e32:	f7fd f934 	bl	b409e <_ZdlPvj>
   b6e36:	4620      	mov	r0, r4
   b6e38:	bd10      	pop	{r4, pc}
	...

000b6e3c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6e3c:	b510      	push	{r4, lr}
   b6e3e:	4b03      	ldr	r3, [pc, #12]	; (b6e4c <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6e40:	6003      	str	r3, [r0, #0]
   b6e42:	4604      	mov	r4, r0
   b6e44:	f001 fe02 	bl	b8a4c <_ZN10JsonParserD1Ev>
   b6e48:	4620      	mov	r0, r4
   b6e4a:	bd10      	pop	{r4, pc}
   b6e4c:	000c5b40 	.word	0x000c5b40

000b6e50 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6e50:	b510      	push	{r4, lr}
   b6e52:	4604      	mov	r4, r0
   b6e54:	f7ff fff2 	bl	b6e3c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6e58:	4620      	mov	r0, r4
   b6e5a:	f640 112c 	movw	r1, #2348	; 0x92c
   b6e5e:	f7fd f91e 	bl	b409e <_ZdlPvj>
   b6e62:	4620      	mov	r0, r4
   b6e64:	bd10      	pop	{r4, pc}

000b6e66 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6e66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6e68:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6e6a:	6853      	ldr	r3, [r2, #4]
   b6e6c:	6890      	ldr	r0, [r2, #8]
   b6e6e:	6814      	ldr	r4, [r2, #0]
   b6e70:	105e      	asrs	r6, r3, #1
   b6e72:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6e76:	07db      	lsls	r3, r3, #31
   b6e78:	bf48      	it	mi
   b6e7a:	5983      	ldrmi	r3, [r0, r6]
   b6e7c:	4668      	mov	r0, sp
   b6e7e:	bf48      	it	mi
   b6e80:	591c      	ldrmi	r4, [r3, r4]
   b6e82:	f008 fee5 	bl	bfc50 <_ZN6StringC1EOS_>
   b6e86:	4669      	mov	r1, sp
   b6e88:	4628      	mov	r0, r5
   b6e8a:	47a0      	blx	r4
   b6e8c:	4604      	mov	r4, r0
   b6e8e:	4668      	mov	r0, sp
   b6e90:	f008 fe62 	bl	bfb58 <_ZN6StringD1Ev>
      }
   b6e94:	4620      	mov	r0, r4
   b6e96:	b004      	add	sp, #16
   b6e98:	bd70      	pop	{r4, r5, r6, pc}

000b6e9a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6e9a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e9c:	b538      	push	{r3, r4, r5, lr}
   b6e9e:	4604      	mov	r4, r0
	switch (__op)
   b6ea0:	d102      	bne.n	b6ea8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6ea2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6ea4:	6023      	str	r3, [r4, #0]
	}
   b6ea6:	e003      	b.n	b6eb0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6ea8:	2a02      	cmp	r2, #2
   b6eaa:	d003      	beq.n	b6eb4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6eac:	2a03      	cmp	r2, #3
   b6eae:	d00d      	beq.n	b6ecc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6eb0:	2000      	movs	r0, #0
   b6eb2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6eb4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6eb6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6eb8:	f7fd f8ed 	bl	b4096 <_Znwj>
   b6ebc:	4603      	mov	r3, r0
   b6ebe:	2800      	cmp	r0, #0
   b6ec0:	d0f0      	beq.n	b6ea4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6ec2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6eca:	e7eb      	b.n	b6ea4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6ecc:	6800      	ldr	r0, [r0, #0]
   b6ece:	2800      	cmp	r0, #0
   b6ed0:	d0ee      	beq.n	b6eb0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6ed2:	210c      	movs	r1, #12
   b6ed4:	f7fd f8e3 	bl	b409e <_ZdlPvj>
   b6ed8:	e7ea      	b.n	b6eb0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6eda <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6edc:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6ede:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6ee0:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6ee2:	f001 ff95 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6ee6:	b120      	cbz	r0, b6ef2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6ee8:	9901      	ldr	r1, [sp, #4]
   b6eea:	462a      	mov	r2, r5
   b6eec:	4620      	mov	r0, r4
   b6eee:	f001 ff71 	bl	b8dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6ef2:	b003      	add	sp, #12
   b6ef4:	bd30      	pop	{r4, r5, pc}
	...

000b6ef8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6ef8:	4b0a      	ldr	r3, [pc, #40]	; (b6f24 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6efa:	b510      	push	{r4, lr}
   b6efc:	4604      	mov	r4, r0
   b6efe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6f00:	f007 fc9e 	bl	be840 <_ZN5spark10LogManager8instanceEv>
   b6f04:	4621      	mov	r1, r4
   b6f06:	f007 fea2 	bl	bec4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6f0a:	f009 fad9 	bl	c04c0 <_Z16_fetch_usbserialv>
   b6f0e:	f009 fac9 	bl	c04a4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6f12:	4620      	mov	r0, r4
   b6f14:	4b04      	ldr	r3, [pc, #16]	; (b6f28 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6f16:	f840 3b04 	str.w	r3, [r0], #4
   b6f1a:	f007 fd33 	bl	be984 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6f1e:	4620      	mov	r0, r4
   b6f20:	bd10      	pop	{r4, pc}
   b6f22:	bf00      	nop
   b6f24:	000c5b28 	.word	0x000c5b28
   b6f28:	000c5b10 	.word	0x000c5b10

000b6f2c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6f2c:	b510      	push	{r4, lr}
   b6f2e:	4604      	mov	r4, r0
    }
   b6f30:	f7ff ffe2 	bl	b6ef8 <_ZN5spark16SerialLogHandlerD1Ev>
   b6f34:	4620      	mov	r0, r4
   b6f36:	2124      	movs	r1, #36	; 0x24
   b6f38:	f7fd f8b1 	bl	b409e <_ZdlPvj>
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	bd10      	pop	{r4, pc}

000b6f40 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6f40:	b510      	push	{r4, lr}
    if (!_instance) {
   b6f42:	4c06      	ldr	r4, [pc, #24]	; (b6f5c <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6f44:	6823      	ldr	r3, [r4, #0]
   b6f46:	b933      	cbnz	r3, b6f56 <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6f48:	2004      	movs	r0, #4
   b6f4a:	f7fd f8a4 	bl	b4096 <_Znwj>
   b6f4e:	b108      	cbz	r0, b6f54 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6f50:	4b03      	ldr	r3, [pc, #12]	; (b6f60 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6f52:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6f54:	6020      	str	r0, [r4, #0]
}
   b6f56:	6820      	ldr	r0, [r4, #0]
   b6f58:	bd10      	pop	{r4, pc}
   b6f5a:	bf00      	nop
   b6f5c:	2003e490 	.word	0x2003e490
   b6f60:	000c5b50 	.word	0x000c5b50

000b6f64 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6f64:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6f66:	4919      	ldr	r1, [pc, #100]	; (b6fcc <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6f68:	b085      	sub	sp, #20
   b6f6a:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6f6c:	4818      	ldr	r0, [pc, #96]	; (b6fd0 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6f6e:	f7fd f8e6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6f72:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f74:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6f76:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f78:	f7fd f88d 	bl	b4096 <_Znwj>
   b6f7c:	b118      	cbz	r0, b6f86 <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6f7e:	4b15      	ldr	r3, [pc, #84]	; (b6fd4 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f80:	6084      	str	r4, [r0, #8]
   b6f82:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f86:	4b14      	ldr	r3, [pc, #80]	; (b6fd8 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f88:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f8a:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6f8c:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6f8e:	4b13      	ldr	r3, [pc, #76]	; (b6fdc <_ZN18Particle_Functions5setupEv+0x78>)
   b6f90:	9302      	str	r3, [sp, #8]
   b6f92:	f7fd f880 	bl	b4096 <_Znwj>
   b6f96:	4604      	mov	r4, r0
   b6f98:	b178      	cbz	r0, b6fba <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6f9a:	2300      	movs	r3, #0
   b6f9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6f9e:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b6fa0:	b133      	cbz	r3, b6fb0 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6fa2:	2202      	movs	r2, #2
   b6fa4:	4669      	mov	r1, sp
   b6fa6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6fa8:	9b03      	ldr	r3, [sp, #12]
   b6faa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6fac:	9b02      	ldr	r3, [sp, #8]
   b6fae:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b6fb0:	4a0b      	ldr	r2, [pc, #44]	; (b6fe0 <_ZN18Particle_Functions5setupEv+0x7c>)
   b6fb2:	480c      	ldr	r0, [pc, #48]	; (b6fe4 <_ZN18Particle_Functions5setupEv+0x80>)
   b6fb4:	4621      	mov	r1, r4
   b6fb6:	f006 fcb0 	bl	bd91a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6fba:	9b02      	ldr	r3, [sp, #8]
   b6fbc:	b11b      	cbz	r3, b6fc6 <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6fbe:	4669      	mov	r1, sp
   b6fc0:	2203      	movs	r2, #3
   b6fc2:	4608      	mov	r0, r1
   b6fc4:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6fc6:	b005      	add	sp, #20
   b6fc8:	bd30      	pop	{r4, r5, pc}
   b6fca:	bf00      	nop
   b6fcc:	000c56a4 	.word	0x000c56a4
   b6fd0:	2003e650 	.word	0x2003e650
   b6fd4:	000b72bd 	.word	0x000b72bd
   b6fd8:	000b6e67 	.word	0x000b6e67
   b6fdc:	000b6e9b 	.word	0x000b6e9b
   b6fe0:	000c56d2 	.word	0x000c56d2
   b6fe4:	000bd8f3 	.word	0x000bd8f3

000b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fe8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6fea:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6fee:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6ff0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6ff2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6ff6:	42ae      	cmp	r6, r5
   b6ff8:	d004      	beq.n	b7004 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6ffa:	4628      	mov	r0, r5
   b6ffc:	f008 fdac 	bl	bfb58 <_ZN6StringD1Ev>
   b7000:	3514      	adds	r5, #20
   b7002:	e7f8      	b.n	b6ff6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7004:	6820      	ldr	r0, [r4, #0]
   b7006:	f006 fa55 	bl	bd4b4 <free>
    AllocatorT::free(data_);
}
   b700a:	4620      	mov	r0, r4
   b700c:	bd70      	pop	{r4, r5, r6, pc}

000b700e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b700e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7012:	4604      	mov	r4, r0
   b7014:	460d      	mov	r5, r1
   b7016:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7018:	d916      	bls.n	b7048 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b701a:	4290      	cmp	r0, r2
   b701c:	d215      	bcs.n	b704a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b701e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7022:	1a75      	subs	r5, r6, r1
   b7024:	f1a1 0714 	sub.w	r7, r1, #20
   b7028:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b702a:	42b7      	cmp	r7, r6
   b702c:	d01c      	beq.n	b7068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b702e:	b12c      	cbz	r4, b703c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b7030:	4631      	mov	r1, r6
   b7032:	4620      	mov	r0, r4
   b7034:	f008 fe0c 	bl	bfc50 <_ZN6StringC1EOS_>
   b7038:	7c33      	ldrb	r3, [r6, #16]
   b703a:	7423      	strb	r3, [r4, #16]
   b703c:	4630      	mov	r0, r6
   b703e:	f008 fd8b 	bl	bfb58 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7042:	3e14      	subs	r6, #20
   b7044:	3c14      	subs	r4, #20
   b7046:	e7f0      	b.n	b702a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7048:	d00e      	beq.n	b7068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b704a:	42b5      	cmp	r5, r6
   b704c:	d00c      	beq.n	b7068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b704e:	b12c      	cbz	r4, b705c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b7050:	4629      	mov	r1, r5
   b7052:	4620      	mov	r0, r4
   b7054:	f008 fdfc 	bl	bfc50 <_ZN6StringC1EOS_>
   b7058:	7c2b      	ldrb	r3, [r5, #16]
   b705a:	7423      	strb	r3, [r4, #16]
   b705c:	4628      	mov	r0, r5
   b705e:	f008 fd7b 	bl	bfb58 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7062:	3514      	adds	r5, #20
   b7064:	3414      	adds	r4, #20
   b7066:	e7f0      	b.n	b704a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b7068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b706e:	2300      	movs	r3, #0
   b7070:	e9c0 3300 	strd	r3, r3, [r0]
   b7074:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7076:	684f      	ldr	r7, [r1, #4]
   b7078:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b707a:	4604      	mov	r4, r0
   b707c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b707e:	dd23      	ble.n	b70c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7080:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b7084:	fb08 f007 	mul.w	r0, r8, r7
   b7088:	f006 fa0c 	bl	bd4a4 <malloc>
            if (!d) {
   b708c:	4605      	mov	r5, r0
   b708e:	b1d8      	cbz	r0, b70c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b7090:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7094:	fb08 1202 	mla	r2, r8, r2, r1
   b7098:	f7ff ffb9 	bl	b700e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b709c:	6820      	ldr	r0, [r4, #0]
   b709e:	f006 fa09 	bl	bd4b4 <free>
        data_ = d;
   b70a2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b70a4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b70a6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b70aa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b70ae:	45b8      	cmp	r8, r7
   b70b0:	d008      	beq.n	b70c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b70b2:	4639      	mov	r1, r7
   b70b4:	4628      	mov	r0, r5
   b70b6:	f008 fde5 	bl	bfc84 <_ZN6StringC1ERKS_>
   b70ba:	7c3b      	ldrb	r3, [r7, #16]
   b70bc:	742b      	strb	r3, [r5, #16]
   b70be:	3714      	adds	r7, #20
   b70c0:	3514      	adds	r5, #20
   b70c2:	e7f4      	b.n	b70ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b70c4:	6873      	ldr	r3, [r6, #4]
   b70c6:	6063      	str	r3, [r4, #4]
}
   b70c8:	4620      	mov	r0, r4
   b70ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b70d0 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b70d0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b70d2:	4b27      	ldr	r3, [pc, #156]	; (b7170 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b70d4:	4a27      	ldr	r2, [pc, #156]	; (b7174 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b70d6:	2501      	movs	r5, #1
   b70d8:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b70da:	4b27      	ldr	r3, [pc, #156]	; (b7178 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b70dc:	2400      	movs	r4, #0
   b70de:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b70e0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b70e2:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b70e6:	2002      	movs	r0, #2
   b70e8:	f006 f8b2 	bl	bd250 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b70ec:	4621      	mov	r1, r4
   b70ee:	4628      	mov	r0, r5
   b70f0:	f006 f8c6 	bl	bd280 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b70f4:	4629      	mov	r1, r5
   b70f6:	2004      	movs	r0, #4
   b70f8:	f005 fe18 	bl	bcd2c <HAL_Feature_Set>
        capacity_(0) {
   b70fc:	e9cd 4400 	strd	r4, r4, [sp]
   b7100:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b7102:	f009 f9dd 	bl	c04c0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b7106:	4c1d      	ldr	r4, [pc, #116]	; (b717c <_GLOBAL__sub_I_openTimeStr+0xac>)
   b7108:	4605      	mov	r5, r0
   b710a:	4669      	mov	r1, sp
   b710c:	a803      	add	r0, sp, #12
   b710e:	f7ff ffac 	bl	b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7112:	4626      	mov	r6, r4
        stream_(&stream) {
   b7114:	a903      	add	r1, sp, #12
   b7116:	a806      	add	r0, sp, #24
   b7118:	f7ff ffa7 	bl	b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b711c:	4b18      	ldr	r3, [pc, #96]	; (b7180 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b711e:	f846 3b04 	str.w	r3, [r6], #4
   b7122:	a906      	add	r1, sp, #24
   b7124:	a809      	add	r0, sp, #36	; 0x24
   b7126:	f7ff ffa0 	bl	b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b712a:	aa09      	add	r2, sp, #36	; 0x24
   b712c:	211e      	movs	r1, #30
   b712e:	4630      	mov	r0, r6
   b7130:	f007 fe70 	bl	bee14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7134:	a809      	add	r0, sp, #36	; 0x24
   b7136:	f7ff ff57 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b713a:	a806      	add	r0, sp, #24
   b713c:	f7ff ff54 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7140:	4b10      	ldr	r3, [pc, #64]	; (b7184 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b7142:	6023      	str	r3, [r4, #0]
   b7144:	6225      	str	r5, [r4, #32]
   b7146:	a803      	add	r0, sp, #12
   b7148:	f7ff ff4e 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b714c:	4b0e      	ldr	r3, [pc, #56]	; (b7188 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b714e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b7150:	f009 f9b6 	bl	c04c0 <_Z16_fetch_usbserialv>
   b7154:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7158:	f009 f9a0 	bl	c049c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b715c:	f007 fb70 	bl	be840 <_ZN5spark10LogManager8instanceEv>
   b7160:	4621      	mov	r1, r4
   b7162:	f007 fd2d 	bl	bebc0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b7166:	4668      	mov	r0, sp
   b7168:	f7ff ff3e 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b716c:	b00c      	add	sp, #48	; 0x30
   b716e:	bd70      	pop	{r4, r5, r6, pc}
   b7170:	2003e48c 	.word	0x2003e48c
   b7174:	ffff0000 	.word	0xffff0000
   b7178:	2003e480 	.word	0x2003e480
   b717c:	2003e494 	.word	0x2003e494
   b7180:	000c5b10 	.word	0x000c5b10
   b7184:	000c6868 	.word	0x000c6868
   b7188:	000c5b28 	.word	0x000c5b28

000b718c <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7190:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b7192:	f009 f8a2 	bl	c02da <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b7196:	4941      	ldr	r1, [pc, #260]	; (b729c <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b7198:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b719a:	4841      	ldr	r0, [pc, #260]	; (b72a0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b719c:	f7fc ffcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b71a0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b71a2:	a801      	add	r0, sp, #4
   b71a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b71a8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b71ac:	f006 fbc6 	bl	bd93c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b71b0:	4620      	mov	r0, r4
   b71b2:	f005 fdeb 	bl	bcd8c <hal_timer_millis>
        while (_while() && !_condition()) {
   b71b6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b71ba:	4604      	mov	r4, r0
   b71bc:	2000      	movs	r0, #0
   b71be:	f005 fde5 	bl	bcd8c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b71c2:	1b03      	subs	r3, r0, r4
   b71c4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b71c8:	42b3      	cmp	r3, r6
   b71ca:	f171 0300 	sbcs.w	r3, r1, #0
   b71ce:	d205      	bcs.n	b71dc <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b71d0:	f006 f8c8 	bl	bd364 <spark_cloud_flag_connected>
   b71d4:	b110      	cbz	r0, b71dc <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b71d6:	f006 f8b5 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   b71da:	e7ef      	b.n	b71bc <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b71dc:	f006 f8c2 	bl	bd364 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   b71e0:	f005 fdc4 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b71e4:	4f2f      	ldr	r7, [pc, #188]	; (b72a4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b71e6:	6038      	str	r0, [r7, #0]
    		spark_process();
   b71e8:	f006 f8ac 	bl	bd344 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b71ec:	f006 f8ba 	bl	bd364 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b71f0:	4604      	mov	r4, r0
   b71f2:	b140      	cbz	r0, b7206 <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b71f4:	492c      	ldr	r1, [pc, #176]	; (b72a8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b71f6:	482a      	ldr	r0, [pc, #168]	; (b72a0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b71f8:	f7fc ffa1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b71fc:	2400      	movs	r4, #0
   b71fe:	4620      	mov	r0, r4
   b7200:	b005      	add	sp, #20
   b7202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b7206:	f009 f868 	bl	c02da <_ZN9TimeClass3nowEv>
   b720a:	4928      	ldr	r1, [pc, #160]	; (b72ac <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b720c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b72b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b7210:	1b42      	subs	r2, r0, r5
   b7212:	4823      	ldr	r0, [pc, #140]	; (b72a0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7214:	f7fc ff93 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b7218:	f009 f85f 	bl	c02da <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b721c:	4622      	mov	r2, r4
   b721e:	2102      	movs	r1, #2
   b7220:	4606      	mov	r6, r0
   b7222:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7226:	f006 f8ed 	bl	bd404 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b722a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b722e:	4623      	mov	r3, r4
   b7230:	4622      	mov	r2, r4
   b7232:	4621      	mov	r1, r4
   b7234:	f006 f8fe 	bl	bd434 <network_off>
        return hal_timer_millis(nullptr);
   b7238:	4620      	mov	r0, r4
   b723a:	f005 fda7 	bl	bcd8c <hal_timer_millis>
        while (_while() && !_condition()) {
   b723e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b7242:	4605      	mov	r5, r0
   b7244:	2000      	movs	r0, #0
   b7246:	f005 fda1 	bl	bcd8c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b724a:	1b43      	subs	r3, r0, r5
   b724c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b7250:	454b      	cmp	r3, r9
   b7252:	f171 0300 	sbcs.w	r3, r1, #0
   b7256:	d206      	bcs.n	b7266 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b7258:	4640      	mov	r0, r8
   b725a:	f008 f8f9 	bl	bf450 <_ZN5spark12NetworkClass5isOffEv>
   b725e:	b910      	cbnz	r0, b7266 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b7260:	f006 f870 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   b7264:	e7ee      	b.n	b7244 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b7266:	4812      	ldr	r0, [pc, #72]	; (b72b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7268:	f008 f8f2 	bl	bf450 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b726c:	f005 fd7e 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7270:	6038      	str	r0, [r7, #0]
    		spark_process();
   b7272:	f006 f867 	bl	bd344 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b7276:	480e      	ldr	r0, [pc, #56]	; (b72b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7278:	f008 f8e6 	bl	bf448 <_ZN5spark12NetworkClass4isOnEv>
   b727c:	b120      	cbz	r0, b7288 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b727e:	490d      	ldr	r1, [pc, #52]	; (b72b4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b7280:	4807      	ldr	r0, [pc, #28]	; (b72a0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7282:	f7fc ff5c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b7286:	e7ba      	b.n	b71fe <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b7288:	f009 f827 	bl	c02da <_ZN9TimeClass3nowEv>
   b728c:	490a      	ldr	r1, [pc, #40]	; (b72b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b728e:	1b82      	subs	r2, r0, r6
   b7290:	4803      	ldr	r0, [pc, #12]	; (b72a0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7292:	f7fc ff54 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b7296:	2401      	movs	r4, #1
   b7298:	e7b1      	b.n	b71fe <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b729a:	bf00      	nop
   b729c:	000c56db 	.word	0x000c56db
   b72a0:	2003e650 	.word	0x2003e650
   b72a4:	2003e710 	.word	0x2003e710
   b72a8:	000c5704 	.word	0x000c5704
   b72ac:	000c5727 	.word	0x000c5727
   b72b0:	2003e60c 	.word	0x2003e60c
   b72b4:	000c5750 	.word	0x000c5750
   b72b8:	000c5776 	.word	0x000c5776

000b72bc <_ZN18Particle_Functions18jsonFunctionParserE6String>:
int Particle_Functions::jsonFunctionParser(String command) {
   b72bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72c0:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b72c4:	460c      	mov	r4, r1
   b72c6:	4607      	mov	r7, r0
	String variable;
   b72c8:	49a7      	ldr	r1, [pc, #668]	; (b7568 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b72ca:	a809      	add	r0, sp, #36	; 0x24
   b72cc:	f008 fc8f 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b72d0:	49a5      	ldr	r1, [pc, #660]	; (b7568 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b72d2:	a80d      	add	r0, sp, #52	; 0x34
   b72d4:	f008 fc8b 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b72d8:	2350      	movs	r3, #80	; 0x50
   b72da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b72de:	9300      	str	r3, [sp, #0]
   b72e0:	a92c      	add	r1, sp, #176	; 0xb0
   b72e2:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b72e6:	a821      	add	r0, sp, #132	; 0x84
   b72e8:	f001 fc12 	bl	b8b10 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b72ec:	4b9f      	ldr	r3, [pc, #636]	; (b756c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
  Log.info(command.c_str());
   b72ee:	6821      	ldr	r1, [r4, #0]
   b72f0:	489f      	ldr	r0, [pc, #636]	; (b7570 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b72f2:	9321      	str	r3, [sp, #132]	; 0x84
   b72f4:	f7fc ff23 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();
   b72f8:	a821      	add	r0, sp, #132	; 0x84
   b72fa:	f001 fbff 	bl	b8afc <_ZN10JsonBuffer5clearEv>
   b72fe:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b7300:	9103      	str	r1, [sp, #12]
   b7302:	4608      	mov	r0, r1
   b7304:	f00b fa01 	bl	c270a <strlen>
   b7308:	9903      	ldr	r1, [sp, #12]
   b730a:	4602      	mov	r2, r0
   b730c:	a821      	add	r0, sp, #132	; 0x84
   b730e:	f001 fbd8 	bl	b8ac2 <_ZN10JsonBuffer7addDataEPKcj>
	if (!jp.parse()) {
   b7312:	a821      	add	r0, sp, #132	; 0x84
   b7314:	f002 f92e 	bl	b9574 <_ZN10JsonParser5parseEv>
   b7318:	4604      	mov	r4, r0
   b731a:	b990      	cbnz	r0, b7342 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x86>
		Log.info("Parsing failed - check syntax");
   b731c:	4995      	ldr	r1, [pc, #596]	; (b7574 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b731e:	4894      	ldr	r0, [pc, #592]	; (b7570 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b7320:	f7fc ff0d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7324:	4b94      	ldr	r3, [pc, #592]	; (b7578 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7326:	4a93      	ldr	r2, [pc, #588]	; (b7574 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b7328:	781b      	ldrb	r3, [r3, #0]
   b732a:	f88d 3000 	strb.w	r3, [sp]
   b732e:	a811      	add	r0, sp, #68	; 0x44
   b7330:	4992      	ldr	r1, [pc, #584]	; (b757c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b7332:	233c      	movs	r3, #60	; 0x3c
   b7334:	f006 fc02 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b7338:	a812      	add	r0, sp, #72	; 0x48
   b733a:	f7fd f9b9 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return success;
   b733e:	4625      	mov	r5, r4
   b7340:	e018      	b.n	b7374 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb8>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b7342:	a821      	add	r0, sp, #132	; 0x84
   b7344:	f001 fbff 	bl	b8b46 <_ZNK10JsonParser14getOuterObjectEv>
   b7348:	4a8c      	ldr	r2, [pc, #560]	; (b757c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
		if (getValueTokenByKey(container, name, value)) {
   b734a:	f8df 827c 	ldr.w	r8, [pc, #636]	; b75c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b734e:	f8df 927c 	ldr.w	r9, [pc, #636]	; b75cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b7352:	f8df a27c 	ldr.w	sl, [pc, #636]	; b75d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b7356:	4601      	mov	r1, r0
   b7358:	ab06      	add	r3, sp, #24
   b735a:	a821      	add	r0, sp, #132	; 0x84
   b735c:	f001 fd58 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b7360:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b7362:	9906      	ldr	r1, [sp, #24]
   b7364:	462a      	mov	r2, r5
   b7366:	a821      	add	r0, sp, #132	; 0x84
   b7368:	f001 fc0f 	bl	b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b736c:	4606      	mov	r6, r0
   b736e:	b978      	cbnz	r0, b7390 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd4>
      if (i == 0) return 0;                                       // No valid entries
   b7370:	2d00      	cmp	r5, #0
   b7372:	d1e4      	bne.n	b733e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x82>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b7374:	a821      	add	r0, sp, #132	; 0x84
   b7376:	f7ff fd61 	bl	b6e3c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b737a:	a80d      	add	r0, sp, #52	; 0x34
   b737c:	f008 fbec 	bl	bfb58 <_ZN6StringD1Ev>
	String variable;
   b7380:	a809      	add	r0, sp, #36	; 0x24
   b7382:	f008 fbe9 	bl	bfb58 <_ZN6StringD1Ev>
}
   b7386:	4628      	mov	r0, r5
   b7388:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7390:	4601      	mov	r1, r0
   b7392:	ab07      	add	r3, sp, #28
   b7394:	4642      	mov	r2, r8
   b7396:	a821      	add	r0, sp, #132	; 0x84
   b7398:	f001 fd3a 	bl	b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b739c:	b120      	cbz	r0, b73a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xec>
			return getTokenValue(value, result);
   b739e:	9907      	ldr	r1, [sp, #28]
   b73a0:	aa04      	add	r2, sp, #16
   b73a2:	a821      	add	r0, sp, #132	; 0x84
   b73a4:	f001 fc4a 	bl	b8c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b73a8:	ab09      	add	r3, sp, #36	; 0x24
   b73aa:	464a      	mov	r2, r9
   b73ac:	4631      	mov	r1, r6
   b73ae:	a821      	add	r0, sp, #132	; 0x84
   b73b0:	f7ff fd93 	bl	b6eda <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b73b4:	4631      	mov	r1, r6
   b73b6:	a821      	add	r0, sp, #132	; 0x84
   b73b8:	ab0d      	add	r3, sp, #52	; 0x34
   b73ba:	4652      	mov	r2, sl
   b73bc:	f7ff fd8d 	bl	b6eda <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b73c0:	496f      	ldr	r1, [pc, #444]	; (b7580 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b73c2:	a80d      	add	r0, sp, #52	; 0x34
   b73c4:	f008 fcd9 	bl	bfd7a <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b73c8:	2800      	cmp	r0, #0
   b73ca:	d07b      	beq.n	b74c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x208>
      if (nodeNumber == 0) {
   b73cc:	9b04      	ldr	r3, [sp, #16]
   b73ce:	2b00      	cmp	r3, #0
   b73d0:	d15d      	bne.n	b748e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1d2>
   b73d2:	496c      	ldr	r1, [pc, #432]	; (b7584 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
   b73d4:	a809      	add	r0, sp, #36	; 0x24
   b73d6:	f008 fcd0 	bl	bfd7a <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b73da:	2800      	cmp	r0, #0
   b73dc:	d03a      	beq.n	b7454 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x198>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b73de:	496a      	ldr	r1, [pc, #424]	; (b7588 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b73e0:	a811      	add	r0, sp, #68	; 0x44
   b73e2:	f00b f96c 	bl	c26be <strcpy>
          nodeDatabase.resetNodeIDs();
   b73e6:	f7ff f8fd 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b73ea:	f7ff f93d 	bl	b6668 <_ZN10nodeIDData12resetNodeIDsEv>
          Log.info("Resetting the Gateway node so new database is in effect");
   b73ee:	4967      	ldr	r1, [pc, #412]	; (b758c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b73f0:	485f      	ldr	r0, [pc, #380]	; (b7570 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b73f2:	f7fc fea4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b73f6:	4b60      	ldr	r3, [pc, #384]	; (b7578 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b73f8:	4a65      	ldr	r2, [pc, #404]	; (b7590 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b73fa:	781b      	ldrb	r3, [r3, #0]
   b73fc:	4965      	ldr	r1, [pc, #404]	; (b7594 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b73fe:	f88d 3000 	strb.w	r3, [sp]
   b7402:	a807      	add	r0, sp, #28
   b7404:	233c      	movs	r3, #60	; 0x3c
   b7406:	f006 fb99 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b740a:	a808      	add	r0, sp, #32
   b740c:	f7fd f950 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
   b7410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b7414:	f006 f8c6 	bl	bd5a4 <delay>
          System.reset();
   b7418:	f008 fd6b 	bl	bfef2 <_ZN11SystemClass5resetEv>
        current.resetEverything();
   b741c:	f7ff f85a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b7420:	f7ff fbb4 	bl	b6b8c <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b7424:	4852      	ldr	r0, [pc, #328]	; (b7570 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b7426:	a911      	add	r1, sp, #68	; 0x44
   b7428:	f7fc fe89 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b742c:	f005 ff9a 	bl	bd364 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b7430:	b160      	cbz	r0, b744c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x190>
   b7432:	4b51      	ldr	r3, [pc, #324]	; (b7578 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7434:	4951      	ldr	r1, [pc, #324]	; (b757c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b7436:	781b      	ldrb	r3, [r3, #0]
   b7438:	f88d 3000 	strb.w	r3, [sp]
   b743c:	a807      	add	r0, sp, #28
   b743e:	233c      	movs	r3, #60	; 0x3c
   b7440:	aa11      	add	r2, sp, #68	; 0x44
   b7442:	f006 fb7b 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b7446:	a808      	add	r0, sp, #32
   b7448:	f7fd f932 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b744c:	3501      	adds	r5, #1
   b744e:	2d0a      	cmp	r5, #10
   b7450:	d187      	bne.n	b7362 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa6>
   b7452:	e774      	b.n	b733e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x82>
   b7454:	4950      	ldr	r1, [pc, #320]	; (b7598 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b7456:	a809      	add	r0, sp, #36	; 0x24
   b7458:	f008 fc8f 	bl	bfd7a <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b745c:	b190      	cbz	r0, b7484 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c8>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b745e:	494f      	ldr	r1, [pc, #316]	; (b759c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b7460:	a811      	add	r0, sp, #68	; 0x44
   b7462:	f00b f92c 	bl	c26be <strcpy>
            sysStatus.initialize();                     // All will reset system values as well
   b7466:	f7fe ffed 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b746a:	6803      	ldr	r3, [r0, #0]
   b746c:	699b      	ldr	r3, [r3, #24]
   b746e:	4798      	blx	r3
            current.resetEverything();
   b7470:	f7ff f830 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b7474:	f7ff fb8a 	bl	b6b8c <_ZN17currentStatusData15resetEverythingEv>
            nodeDatabase.initialize();
   b7478:	f7ff f8b4 	bl	b65e4 <_ZN10nodeIDData8instanceEv>
   b747c:	6803      	ldr	r3, [r0, #0]
   b747e:	699b      	ldr	r3, [r3, #24]
   b7480:	4798      	blx	r3
   b7482:	e7cb      	b.n	b741c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x160>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b7484:	4946      	ldr	r1, [pc, #280]	; (b75a0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b7486:	a811      	add	r0, sp, #68	; 0x44
   b7488:	f00b f919 	bl	c26be <strcpy>
   b748c:	e7c6      	b.n	b741c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x160>
   b748e:	4942      	ldr	r1, [pc, #264]	; (b7598 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b7490:	a809      	add	r0, sp, #36	; 0x24
   b7492:	f008 fc72 	bl	bfd7a <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b7496:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b7498:	b158      	cbz	r0, b74b2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1f6>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b749a:	4a42      	ldr	r2, [pc, #264]	; (b75a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b749c:	2140      	movs	r1, #64	; 0x40
   b749e:	a811      	add	r0, sp, #68	; 0x44
   b74a0:	f006 f828 	bl	bd4f4 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b74a4:	f7fc fe64 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b74a8:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b74aa:	9904      	ldr	r1, [sp, #16]
   b74ac:	f7fd fce8 	bl	b4e80 <_ZN14LoRA_Functions11changeAlertEii>
   b74b0:	e7b8      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b74b2:	4a3d      	ldr	r2, [pc, #244]	; (b75a8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b74b4:	2140      	movs	r1, #64	; 0x40
   b74b6:	a811      	add	r0, sp, #68	; 0x44
   b74b8:	f006 f81c 	bl	bd4f4 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b74bc:	f7fc fe58 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b74c0:	2206      	movs	r2, #6
   b74c2:	e7f2      	b.n	b74aa <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ee>
   b74c4:	4939      	ldr	r1, [pc, #228]	; (b75ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b74c6:	a80d      	add	r0, sp, #52	; 0x34
   b74c8:	f008 fc57 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b74cc:	b300      	cbz	r0, b7510 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x254>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b74ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   b74d0:	220a      	movs	r2, #10
   b74d2:	a905      	add	r1, sp, #20
   b74d4:	f00c f888 	bl	c35e8 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b74d8:	1e43      	subs	r3, r0, #1
   b74da:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b74dc:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b74de:	d811      	bhi.n	b7504 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x248>
   b74e0:	233c      	movs	r3, #60	; 0x3c
   b74e2:	fb93 f3f0 	sdiv	r3, r3, r0
   b74e6:	4343      	muls	r3, r0
   b74e8:	2b3c      	cmp	r3, #60	; 0x3c
   b74ea:	d10b      	bne.n	b7504 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x248>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b74ec:	4603      	mov	r3, r0
   b74ee:	4a30      	ldr	r2, [pc, #192]	; (b75b0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b74f0:	2140      	movs	r1, #64	; 0x40
   b74f2:	a811      	add	r0, sp, #68	; 0x44
   b74f4:	f005 fffe 	bl	bd4f4 <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b74f8:	f7fe ffa4 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b74fc:	b2b1      	uxth	r1, r6
   b74fe:	f7ff fada 	bl	b6ab6 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b7502:	e78f      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b7504:	492b      	ldr	r1, [pc, #172]	; (b75b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b7506:	a811      	add	r0, sp, #68	; 0x44
   b7508:	f00b f8d9 	bl	c26be <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b750c:	2400      	movs	r4, #0
   b750e:	e789      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
   b7510:	4929      	ldr	r1, [pc, #164]	; (b75b8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b7512:	a80d      	add	r0, sp, #52	; 0x34
   b7514:	f008 fc31 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b7518:	2800      	cmp	r0, #0
   b751a:	d05b      	beq.n	b75d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>
   b751c:	4927      	ldr	r1, [pc, #156]	; (b75bc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b751e:	a809      	add	r0, sp, #36	; 0x24
   b7520:	f008 fc2b 	bl	bfd7a <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b7524:	4606      	mov	r6, r0
   b7526:	b148      	cbz	r0, b753c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x280>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b7528:	4925      	ldr	r1, [pc, #148]	; (b75c0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b752a:	a811      	add	r0, sp, #68	; 0x44
   b752c:	f00b f8c7 	bl	c26be <strcpy>
        sysStatus.set_connectivityMode(1);
   b7530:	f7fe ff88 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7534:	2101      	movs	r1, #1
   b7536:	f7ff f981 	bl	b683c <_ZN13sysStatusData20set_connectivityModeEh>
   b753a:	e773      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b753c:	4921      	ldr	r1, [pc, #132]	; (b75c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b753e:	a811      	add	r0, sp, #68	; 0x44
   b7540:	f00b f8bd 	bl	c26be <strcpy>
        sysStatus.set_connectivityMode(0);                            // Make sure we are set to not connect on resetart.
   b7544:	f7fe ff7e 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7548:	4631      	mov	r1, r6
   b754a:	f7ff f977 	bl	b683c <_ZN13sysStatusData20set_connectivityModeEh>
        sysStatus.flush(true);    
   b754e:	f7fe ff79 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7552:	6803      	ldr	r3, [r0, #0]
   b7554:	2101      	movs	r1, #1
   b7556:	68db      	ldr	r3, [r3, #12]
   b7558:	4798      	blx	r3
        Particle_Functions::disconnectFromParticle();                 // Can't reset if modem is powered up
   b755a:	4638      	mov	r0, r7
   b755c:	f7ff fe16 	bl	b718c <_ZN18Particle_Functions22disconnectFromParticleEv>
        System.reset();                                               // Needed to disconnect from LoRA
   b7560:	f008 fcc7 	bl	bfef2 <_ZN11SystemClass5resetEv>
   b7564:	e75e      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
   b7566:	bf00      	nop
   b7568:	000c6838 	.word	0x000c6838
   b756c:	000c5b40 	.word	0x000c5b40
   b7570:	2003e650 	.word	0x2003e650
   b7574:	000c57aa 	.word	0x000c57aa
   b7578:	2003e48c 	.word	0x2003e48c
   b757c:	000c57c8 	.word	0x000c57c8
   b7580:	000c57d3 	.word	0x000c57d3
   b7584:	000c4c8d 	.word	0x000c4c8d
   b7588:	000c57d9 	.word	0x000c57d9
   b758c:	000c57fb 	.word	0x000c57fb
   b7590:	000c5833 	.word	0x000c5833
   b7594:	000c543c 	.word	0x000c543c
   b7598:	000c5845 	.word	0x000c5845
   b759c:	000c5849 	.word	0x000c5849
   b75a0:	000c5879 	.word	0x000c5879
   b75a4:	000c589e 	.word	0x000c589e
   b75a8:	000c58ca 	.word	0x000c58ca
   b75ac:	000c58eb 	.word	0x000c58eb
   b75b0:	000c58f0 	.word	0x000c58f0
   b75b4:	000c591a 	.word	0x000c591a
   b75b8:	000c593a 	.word	0x000c593a
   b75bc:	000c593f 	.word	0x000c593f
   b75c0:	000c5944 	.word	0x000c5944
   b75c4:	000c5978 	.word	0x000c5978
   b75c8:	000c4c1f 	.word	0x000c4c1f
   b75cc:	000c57cc 	.word	0x000c57cc
   b75d0:	000c57d0 	.word	0x000c57d0
   b75d4:	4958      	ldr	r1, [pc, #352]	; (b7738 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x47c>)
   b75d6:	a80d      	add	r0, sp, #52	; 0x34
   b75d8:	f008 fbcf 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b75dc:	b148      	cbz	r0, b75f2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x336>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b75de:	4957      	ldr	r1, [pc, #348]	; (b773c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x480>)
   b75e0:	a811      	add	r0, sp, #68	; 0x44
   b75e2:	f00b f86c 	bl	c26be <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b75e6:	f7fc fdc3 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b75ea:	2101      	movs	r1, #1
   b75ec:	f7fd f946 	bl	b487c <_ZN14LoRA_Functions13printNodeDataEb>
   b75f0:	e718      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
   b75f2:	4953      	ldr	r1, [pc, #332]	; (b7740 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x484>)
   b75f4:	a80d      	add	r0, sp, #52	; 0x34
   b75f6:	f008 fbc0 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b75fa:	b1b0      	cbz	r0, b762a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x36e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b75fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   b75fe:	220a      	movs	r2, #10
   b7600:	a905      	add	r1, sp, #20
   b7602:	f00b fff1 	bl	c35e8 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7606:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7608:	4683      	mov	fp, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b760a:	d80c      	bhi.n	b7626 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x36a>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b760c:	4603      	mov	r3, r0
   b760e:	4a4d      	ldr	r2, [pc, #308]	; (b7744 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x488>)
   b7610:	2140      	movs	r1, #64	; 0x40
   b7612:	a811      	add	r0, sp, #68	; 0x44
   b7614:	f005 ff6e 	bl	bd4f4 <snprintf>
        sysStatus.set_openTime(tempValue);
   b7618:	f7fe ff14 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b761c:	fa5f f18b 	uxtb.w	r1, fp
   b7620:	f7ff f924 	bl	b686c <_ZN13sysStatusData12set_openTimeEh>
   b7624:	e6fe      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b7626:	4948      	ldr	r1, [pc, #288]	; (b7748 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x48c>)
   b7628:	e76d      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
   b762a:	4948      	ldr	r1, [pc, #288]	; (b774c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x490>)
   b762c:	a80d      	add	r0, sp, #52	; 0x34
   b762e:	f008 fba4 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b7632:	b1b8      	cbz	r0, b7664 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a8>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7634:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7636:	220a      	movs	r2, #10
   b7638:	a905      	add	r1, sp, #20
   b763a:	f00b ffd5 	bl	c35e8 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b763e:	f1a0 030d 	sub.w	r3, r0, #13
   b7642:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7644:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b7646:	d80b      	bhi.n	b7660 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a4>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b7648:	4603      	mov	r3, r0
   b764a:	4a41      	ldr	r2, [pc, #260]	; (b7750 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x494>)
   b764c:	2140      	movs	r1, #64	; 0x40
   b764e:	a811      	add	r0, sp, #68	; 0x44
   b7650:	f005 ff50 	bl	bd4f4 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b7654:	f7fe fef6 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7658:	b2f1      	uxtb	r1, r6
   b765a:	f7ff f90d 	bl	b6878 <_ZN13sysStatusData13set_closeTimeEh>
   b765e:	e6e1      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b7660:	493c      	ldr	r1, [pc, #240]	; (b7754 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x498>)
   b7662:	e750      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
   b7664:	493c      	ldr	r1, [pc, #240]	; (b7758 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x49c>)
   b7666:	a80d      	add	r0, sp, #52	; 0x34
   b7668:	f008 fb87 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b766c:	b1e8      	cbz	r0, b76aa <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ee>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b766e:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7670:	220a      	movs	r2, #10
   b7672:	a905      	add	r1, sp, #20
   b7674:	f00b ffb8 	bl	c35e8 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b7678:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b767a:	4683      	mov	fp, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b767c:	d813      	bhi.n	b76a6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ea>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b767e:	9b04      	ldr	r3, [sp, #16]
   b7680:	4a36      	ldr	r2, [pc, #216]	; (b775c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a0>)
   b7682:	9300      	str	r3, [sp, #0]
   b7684:	2140      	movs	r1, #64	; 0x40
   b7686:	4603      	mov	r3, r0
   b7688:	a811      	add	r0, sp, #68	; 0x44
   b768a:	f005 ff33 	bl	bd4f4 <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b768e:	f7fc fd6f 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7692:	9904      	ldr	r1, [sp, #16]
   b7694:	465a      	mov	r2, fp
   b7696:	f7fd fb3b 	bl	b4d10 <_ZN14LoRA_Functions10changeTypeEii>
   b769a:	2800      	cmp	r0, #0
   b769c:	d049      	beq.n	b7732 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x476>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b769e:	f7fc fd67 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b76a2:	2207      	movs	r2, #7
   b76a4:	e701      	b.n	b74aa <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ee>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b76a6:	492e      	ldr	r1, [pc, #184]	; (b7760 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a4>)
   b76a8:	e72d      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
   b76aa:	492e      	ldr	r1, [pc, #184]	; (b7764 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4a8>)
   b76ac:	a80d      	add	r0, sp, #52	; 0x34
   b76ae:	f008 fb64 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b76b2:	b1d0      	cbz	r0, b76ea <_ZN18Particle_Functions18jsonFunctionParserE6String+0x42e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b76b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b76b6:	220a      	movs	r2, #10
   b76b8:	a905      	add	r1, sp, #20
   b76ba:	f00b ff95 	bl	c35e8 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b76be:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b76c0:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b76c2:	d810      	bhi.n	b76e6 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x42a>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b76c4:	4a28      	ldr	r2, [pc, #160]	; (b7768 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4ac>)
   b76c6:	4b29      	ldr	r3, [pc, #164]	; (b776c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4b0>)
   b76c8:	2140      	movs	r1, #64	; 0x40
   b76ca:	2800      	cmp	r0, #0
   b76cc:	bf08      	it	eq
   b76ce:	4613      	moveq	r3, r2
   b76d0:	4a27      	ldr	r2, [pc, #156]	; (b7770 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4b4>)
   b76d2:	a811      	add	r0, sp, #68	; 0x44
   b76d4:	f005 ff0e 	bl	bd4f4 <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b76d8:	f7fe feb4 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b76dc:	f006 0101 	and.w	r1, r6, #1
   b76e0:	f7ff fae5 	bl	b6cae <_ZN13sysStatusData14set_verizonSIMEb>
   b76e4:	e69e      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b76e6:	4923      	ldr	r1, [pc, #140]	; (b7774 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4b8>)
   b76e8:	e70d      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
   b76ea:	4923      	ldr	r1, [pc, #140]	; (b7778 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4bc>)
   b76ec:	a80d      	add	r0, sp, #52	; 0x34
   b76ee:	f008 fb44 	bl	bfd7a <_ZNK6String6equalsEPKc>
    else if (function == "pwr") {
   b76f2:	b1e0      	cbz	r0, b772e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x472>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b76f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b76f6:	220a      	movs	r2, #10
   b76f8:	a905      	add	r1, sp, #20
   b76fa:	f00b ff75 	bl	c35e8 <strtol>
      if (tempValue == 1) {
   b76fe:	2801      	cmp	r0, #1
   b7700:	d113      	bne.n	b772a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x46e>
        snprintf(messaging,sizeof(messaging),"Setting Alert Code to Trigger Reset");
   b7702:	491e      	ldr	r1, [pc, #120]	; (b777c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4c0>)
   b7704:	a811      	add	r0, sp, #68	; 0x44
   b7706:	f00a ffda 	bl	c26be <strcpy>
        sysStatus.set_alertCodeGateway(1);
   b770a:	f7fe fe9b 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b770e:	2101      	movs	r1, #1
   b7710:	f7ff f8a6 	bl	b6860 <_ZN13sysStatusData20set_alertCodeGatewayEh>
        sysStatus.set_alertTimestampGateway(Time.now());
   b7714:	f7fe fe96 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7718:	4606      	mov	r6, r0
   b771a:	f008 fdde 	bl	c02da <_ZN9TimeClass3nowEv>
   b771e:	4602      	mov	r2, r0
   b7720:	17c3      	asrs	r3, r0, #31
   b7722:	4630      	mov	r0, r6
   b7724:	f7ff fa23 	bl	b6b6e <_ZN13sysStatusData25set_alertTimestampGatewayEx>
   b7728:	e67c      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
        snprintf(messaging,sizeof(messaging),"Power Cycle value not = 1)");
   b772a:	4915      	ldr	r1, [pc, #84]	; (b7780 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4c4>)
   b772c:	e6eb      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b772e:	4915      	ldr	r1, [pc, #84]	; (b7784 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x4c8>)
   b7730:	e6e9      	b.n	b7506 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7732:	4604      	mov	r4, r0
   b7734:	e676      	b.n	b7424 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x168>
   b7736:	bf00      	nop
   b7738:	000c599a 	.word	0x000c599a
   b773c:	000c599e 	.word	0x000c599e
   b7740:	000c52f2 	.word	0x000c52f2
   b7744:	000c59b3 	.word	0x000c59b3
   b7748:	000c59d1 	.word	0x000c59d1
   b774c:	000c59ea 	.word	0x000c59ea
   b7750:	000c59f0 	.word	0x000c59f0
   b7754:	000c5a0e 	.word	0x000c5a0e
   b7758:	000c4ae0 	.word	0x000c4ae0
   b775c:	000c5a29 	.word	0x000c5a29
   b7760:	000c5a4f 	.word	0x000c5a4f
   b7764:	000c5a6a 	.word	0x000c5a6a
   b7768:	000c571e 	.word	0x000c571e
   b776c:	000c57a2 	.word	0x000c57a2
   b7770:	000c5a6e 	.word	0x000c5a6e
   b7774:	000c5a80 	.word	0x000c5a80
   b7778:	000c5ab0 	.word	0x000c5ab0
   b777c:	000c5ab4 	.word	0x000c5ab4
   b7780:	000c5ad8 	.word	0x000c5ad8
   b7784:	000c5af3 	.word	0x000c5af3

000b7788 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b7788:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b778a:	4917      	ldr	r1, [pc, #92]	; (b77e8 <_Z18initializePinModesv+0x60>)
   b778c:	4817      	ldr	r0, [pc, #92]	; (b77ec <_Z18initializePinModesv+0x64>)
   b778e:	f7fc fcd6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b7792:	2102      	movs	r1, #2
   b7794:	2004      	movs	r0, #4
   b7796:	f008 ffab 	bl	c06f0 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b779a:	2100      	movs	r1, #0
   b779c:	2008      	movs	r0, #8
   b779e:	f008 ffa7 	bl	c06f0 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b77a2:	2101      	movs	r1, #1
   b77a4:	2007      	movs	r0, #7
   b77a6:	f008 ffa3 	bl	c06f0 <pinMode>
    pinMode(INT_PIN, INPUT);
   b77aa:	2100      	movs	r1, #0
   b77ac:	2012      	movs	r0, #18
   b77ae:	f008 ff9f 	bl	c06f0 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b77b2:	2101      	movs	r1, #1
   b77b4:	2011      	movs	r0, #17
   b77b6:	f008 ff9b 	bl	c06f0 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b77ba:	2101      	movs	r1, #1
   b77bc:	2010      	movs	r0, #16
   b77be:	f008 ff97 	bl	c06f0 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b77c2:	2100      	movs	r1, #0
   b77c4:	2010      	movs	r0, #16
   b77c6:	f008 ffa4 	bl	c0712 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b77ca:	2100      	movs	r1, #0
   b77cc:	2011      	movs	r0, #17
   b77ce:	f008 ffa0 	bl	c0712 <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b77d2:	2101      	movs	r1, #1
   b77d4:	2006      	movs	r0, #6
   b77d6:	f008 ff8b 	bl	c06f0 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b77da:	2101      	movs	r1, #1
   b77dc:	2006      	movs	r0, #6
   b77de:	f008 ff98 	bl	c0712 <digitalWrite>
    return true;
}
   b77e2:	2001      	movs	r0, #1
   b77e4:	bd08      	pop	{r3, pc}
   b77e6:	bf00      	nop
   b77e8:	000c5b58 	.word	0x000c5b58
   b77ec:	2003e650 	.word	0x2003e650

000b77f0 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b77f0:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b77f2:	4918      	ldr	r1, [pc, #96]	; (b7854 <_Z18initializePowerCfgv+0x64>)
   b77f4:	4818      	ldr	r0, [pc, #96]	; (b7858 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b77f6:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b77f8:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b77fa:	f7fc fca0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b77fe:	4622      	mov	r2, r4
   b7800:	2100      	movs	r1, #0
   b7802:	4668      	mov	r0, sp
   b7804:	f00a feb6 	bl	c2574 <memset>
   b7808:	4622      	mov	r2, r4
   b780a:	2100      	movs	r1, #0
   b780c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7810:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b7814:	f00a feae 	bl	c2574 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b7818:	2100      	movs	r1, #0
   b781a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b781e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b7822:	f005 fd69 	bl	bd2f8 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b7826:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b782a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b782e:	4b0b      	ldr	r3, [pc, #44]	; (b785c <_Z18initializePowerCfgv+0x6c>)
   b7830:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b7832:	f241 0370 	movw	r3, #4208	; 0x1070
   b7836:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b783a:	9b00      	ldr	r3, [sp, #0]
   b783c:	2100      	movs	r1, #0
   b783e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b7842:	4668      	mov	r0, sp
   b7844:	9300      	str	r3, [sp, #0]
   b7846:	f005 fd57 	bl	bd2f8 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b784a:	3800      	subs	r0, #0
   b784c:	bf18      	it	ne
   b784e:	2001      	movne	r0, #1
   b7850:	b010      	add	sp, #64	; 0x40
   b7852:	bd10      	pop	{r4, pc}
   b7854:	000c5b71 	.word	0x000c5b71
   b7858:	2003e650 	.word	0x2003e650
   b785c:	03840384 	.word	0x03840384

000b7860 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b7860:	ee07 0a90 	vmov	s15, r0
   b7864:	ed9f 7a09 	vldr	s14, [pc, #36]	; b788c <_Z17tmp36TemperatureCi+0x2c>
   b7868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b786c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7870:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7890 <_Z17tmp36TemperatureCi+0x30>
   b7874:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b7878:	eddf 7a06 	vldr	s15, [pc, #24]	; b7894 <_Z17tmp36TemperatureCi+0x34>
   b787c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b7880:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b7884:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7888:	4770      	bx	lr
   b788a:	bf00      	nop
   b788c:	454e4000 	.word	0x454e4000
   b7890:	457ff000 	.word	0x457ff000
   b7894:	43fa0000 	.word	0x43fa0000

000b7898 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b7898:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b789a:	2101      	movs	r1, #1
   b789c:	a801      	add	r0, sp, #4
   b789e:	f007 fe6c 	bl	bf57a <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b78a2:	f7fe fe17 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b78a6:	f7fe ff7d 	bl	b67a4 <_ZNK17currentStatusData17get_internalTempCEv>
   b78aa:	f7fe fe13 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b78ae:	f7fe ff79 	bl	b67a4 <_ZNK17currentStatusData17get_internalTempCEv>
   b78b2:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b78b4:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b78b6:	d90d      	bls.n	b78d4 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b78b8:	f007 fef2 	bl	bf6a0 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b78bc:	f7fe fe0a 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b78c0:	2101      	movs	r1, #1
   b78c2:	f7fe fff1 	bl	b68a8 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b78c6:	2400      	movs	r4, #0
  PMIC pmic(true);
   b78c8:	a801      	add	r0, sp, #4
   b78ca:	f007 fe65 	bl	bf598 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b78ce:	4620      	mov	r0, r4
   b78d0:	b002      	add	sp, #8
   b78d2:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b78d4:	f007 fec9 	bl	bf66a <_ZN4PMIC14enableChargingEv>
    return true;
   b78d8:	2401      	movs	r4, #1
   b78da:	e7f5      	b.n	b78c8 <_Z16isItSafeToChargev+0x30>

000b78dc <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b78dc:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b78de:	4d1b      	ldr	r5, [pc, #108]	; (b794c <_Z17getSignalStrengthv+0x70>)
   b78e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b78e2:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b78e4:	ac10      	add	r4, sp, #64	; 0x40
   b78e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78ec:	e895 0003 	ldmia.w	r5, {r0, r1}
   b78f0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b78f4:	4916      	ldr	r1, [pc, #88]	; (b7950 <_Z17getSignalStrengthv+0x74>)
   b78f6:	a808      	add	r0, sp, #32
   b78f8:	f005 fece 	bl	bd698 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b78fc:	a808      	add	r0, sp, #32
   b78fe:	f005 ff0e 	bl	bd71e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b7902:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b7904:	a808      	add	r0, sp, #32
   b7906:	f005 ff43 	bl	bd790 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b790a:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b790c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b7910:	f005 ff6e 	bl	bd7f0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b7914:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b7916:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b791a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b791e:	f00a f9f1 	bl	c1d04 <__aeabi_f2d>
   b7922:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b7926:	4628      	mov	r0, r5
   b7928:	f00a f9ec 	bl	c1d04 <__aeabi_f2d>
   b792c:	e9cd 0100 	strd	r0, r1, [sp]
   b7930:	2110      	movs	r1, #16
   b7932:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b7936:	4a07      	ldr	r2, [pc, #28]	; (b7954 <_Z17getSignalStrengthv+0x78>)
   b7938:	eb0d 0001 	add.w	r0, sp, r1
   b793c:	f005 fdda 	bl	bd4f4 <snprintf>
  Log.info(signalStr);
   b7940:	4805      	ldr	r0, [pc, #20]	; (b7958 <_Z17getSignalStrengthv+0x7c>)
   b7942:	a904      	add	r1, sp, #16
   b7944:	f7fc fbfb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b7948:	b01b      	add	sp, #108	; 0x6c
   b794a:	bd30      	pop	{r4, r5, pc}
   b794c:	000c5c18 	.word	0x000c5c18
   b7950:	2003e60c 	.word	0x2003e60c
   b7954:	000c5bd6 	.word	0x000c5bd6
   b7958:	2003e650 	.word	0x2003e650

000b795c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b795c:	b530      	push	{r4, r5, lr}
   b795e:	b085      	sub	sp, #20
   b7960:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b7962:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b7964:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b7966:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b7968:	f005 fc60 	bl	bd22c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b796c:	b990      	cbnz	r0, b7994 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b796e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b7970:	b10c      	cbz	r4, b7976 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b7972:	6923      	ldr	r3, [r4, #16]
   b7974:	b923      	cbnz	r3, b7980 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b7976:	4a08      	ldr	r2, [pc, #32]	; (b7998 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b7978:	4908      	ldr	r1, [pc, #32]	; (b799c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b797a:	200a      	movs	r0, #10
   b797c:	f005 fc1e 	bl	bd1bc <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b7980:	230c      	movs	r3, #12
   b7982:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b7986:	2304      	movs	r3, #4
   b7988:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b798a:	aa01      	add	r2, sp, #4
   b798c:	6923      	ldr	r3, [r4, #16]
   b798e:	2101      	movs	r1, #1
   b7990:	4620      	mov	r0, r4
   b7992:	4798      	blx	r3
}
   b7994:	b005      	add	sp, #20
   b7996:	bd30      	pop	{r4, r5, pc}
   b7998:	000bcd5d 	.word	0x000bcd5d
   b799c:	000c5bef 	.word	0x000c5bef

000b79a0 <_Z12batteryStatev>:
bool batteryState() {
   b79a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  fuelGauge.quickStart();                                               // May help us re-establish a baseline for SoC
   b79a2:	4825      	ldr	r0, [pc, #148]	; (b7a38 <_Z12batteryStatev+0x98>)
   b79a4:	4d25      	ldr	r5, [pc, #148]	; (b7a3c <_Z12batteryStatev+0x9c>)
   b79a6:	f006 fac3 	bl	bdf30 <_ZN9FuelGauge10quickStartEv>
   b79aa:	f005 f9df 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   b79ae:	4604      	mov	r4, r0
   b79b0:	f005 f9dc 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
 * 
 * @details takes a single unsigned long input in millis
 * 
 */
inline void softDelay(uint32_t t) {
  for (uint32_t ms = millis(); millis() - ms < t; Particle.process());  //  safer than a delay()
   b79b4:	1b00      	subs	r0, r0, r4
   b79b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b79ba:	d205      	bcs.n	b79c8 <_Z12batteryStatev+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   b79bc:	f005 f9d6 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b79c0:	6028      	str	r0, [r5, #0]
    		spark_process();
   b79c2:	f005 fcbf 	bl	bd344 <spark_process>
    }
   b79c6:	e7f3      	b.n	b79b0 <_Z12batteryStatev+0x10>
  current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b79c8:	f7fe fd84 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b79cc:	a901      	add	r1, sp, #4
   b79ce:	4604      	mov	r4, r0
   b79d0:	2007      	movs	r0, #7
   b79d2:	f7ff ffc3 	bl	b795c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b79d6:	1e01      	subs	r1, r0, #0
        return val;
   b79d8:	bfa8      	it	ge
   b79da:	9901      	ldrge	r1, [sp, #4]
   b79dc:	4620      	mov	r0, r4
   b79de:	b2c9      	uxtb	r1, r1
   b79e0:	f7fe ff62 	bl	b68a8 <_ZN17currentStatusData16set_batteryStateEh>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b79e4:	f7fe fd76 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b79e8:	a901      	add	r1, sp, #4
   b79ea:	4604      	mov	r4, r0
   b79ec:	2003      	movs	r0, #3
   b79ee:	f7ff ffb5 	bl	b795c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b79f2:	b9e8      	cbnz	r0, b7a30 <_Z12batteryStatev+0x90>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b79f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b79f8:	ee07 3a90 	vmov	s15, r3
   b79fc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b7a00:	ee17 0a90 	vmov	r0, s15
   b7a04:	f00a f97e 	bl	c1d04 <__aeabi_f2d>
   b7a08:	ec41 0b10 	vmov	d0, r0, r1
   b7a0c:	4620      	mov	r0, r4
   b7a0e:	f7fe fdab 	bl	b6568 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b7a12:	f7fe fd5f 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b7a16:	f7fe fd87 	bl	b6528 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b7a1a:	4b09      	ldr	r3, [pc, #36]	; (b7a40 <_Z12batteryStatev+0xa0>)
   b7a1c:	ec51 0b10 	vmov	r0, r1, d0
   b7a20:	2200      	movs	r2, #0
   b7a22:	f00a fc57 	bl	c22d4 <__aeabi_dcmpgt>
}
   b7a26:	3800      	subs	r0, #0
   b7a28:	bf18      	it	ne
   b7a2a:	2001      	movne	r0, #1
   b7a2c:	b003      	add	sp, #12
   b7a2e:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   b7a30:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b7a34:	e7e4      	b.n	b7a00 <_Z12batteryStatev+0x60>
   b7a36:	bf00      	nop
   b7a38:	2003e4b8 	.word	0x2003e4b8
   b7a3c:	2003e710 	.word	0x2003e710
   b7a40:	404e0000 	.word	0x404e0000

000b7a44 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b7a44:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b7a46:	f7fe fd45 	bl	b64d4 <_ZN17currentStatusData8instanceEv>
   b7a4a:	4b0f      	ldr	r3, [pc, #60]	; (b7a88 <_Z16takeMeasurementsv+0x44>)
   b7a4c:	4604      	mov	r4, r0
   b7a4e:	8818      	ldrh	r0, [r3, #0]
   b7a50:	f008 fe8b 	bl	c076a <analogRead>
   b7a54:	f7ff ff04 	bl	b7860 <_Z17tmp36TemperatureCi>
   b7a58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7a5c:	4620      	mov	r0, r4
   b7a5e:	edcd 7a01 	vstr	s15, [sp, #4]
   b7a62:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b7a66:	f7fe ff19 	bl	b689c <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b7a6a:	f7ff ff99 	bl	b79a0 <_Z12batteryStatev>
    isItSafeToCharge();
   b7a6e:	f7ff ff13 	bl	b7898 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b7a72:	f7fe fce7 	bl	b6444 <_ZN13sysStatusData8instanceEv>
   b7a76:	f7fe fe63 	bl	b6740 <_ZNK13sysStatusData14get_nodeNumberEv>
   b7a7a:	b908      	cbnz	r0, b7a80 <_Z16takeMeasurementsv+0x3c>
   b7a7c:	f7ff ff2e 	bl	b78dc <_Z17getSignalStrengthv>
}
   b7a80:	2001      	movs	r0, #1
   b7a82:	b002      	add	sp, #8
   b7a84:	bd10      	pop	{r4, pc}
   b7a86:	bf00      	nop
   b7a88:	000c5b96 	.word	0x000c5b96

000b7a8c <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b7a8c:	4801      	ldr	r0, [pc, #4]	; (b7a94 <_GLOBAL__sub_I_batteryContext+0x8>)
   b7a8e:	2100      	movs	r1, #0
   b7a90:	f006 ba0a 	b.w	bdea8 <_ZN9FuelGaugeC1Eb>
   b7a94:	2003e4b8 	.word	0x2003e4b8

000b7a98 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b7a98:	4770      	bx	lr

000b7a9a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b7a9a:	b510      	push	{r4, lr}
}
   b7a9c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b7a9e:	4604      	mov	r4, r0
}
   b7aa0:	f7fc fafd 	bl	b409e <_ZdlPvj>
   b7aa4:	4620      	mov	r0, r4
   b7aa6:	bd10      	pop	{r4, pc}

000b7aa8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b7aa8:	b510      	push	{r4, lr}
   b7aaa:	4604      	mov	r4, r0
   b7aac:	b08a      	sub	sp, #40	; 0x28
   b7aae:	4608      	mov	r0, r1
    attr.flags = 0;
   b7ab0:	f04f 0c20 	mov.w	ip, #32
   b7ab4:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7ab6:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b7aba:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7abe:	460b      	mov	r3, r1
   b7ac0:	aa02      	add	r2, sp, #8
   b7ac2:	6821      	ldr	r1, [r4, #0]
   b7ac4:	f005 fb8a 	bl	bd1dc <log_message_v>
}
   b7ac8:	b00a      	add	sp, #40	; 0x28
   b7aca:	bd10      	pop	{r4, pc}

000b7acc <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b7acc:	b40e      	push	{r1, r2, r3}
   b7ace:	b503      	push	{r0, r1, lr}
   b7ad0:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b7ad2:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b7ad4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7ad8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b7ada:	f7ff ffe5 	bl	b7aa8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7ade:	b002      	add	sp, #8
   b7ae0:	f85d eb04 	ldr.w	lr, [sp], #4
   b7ae4:	b003      	add	sp, #12
   b7ae6:	4770      	bx	lr

000b7ae8 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7ae8:	b40e      	push	{r1, r2, r3}
   b7aea:	b503      	push	{r0, r1, lr}
   b7aec:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b7aee:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7af0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7af4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b7af6:	f7ff ffd7 	bl	b7aa8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7afa:	b002      	add	sp, #8
   b7afc:	f85d eb04 	ldr.w	lr, [sp], #4
   b7b00:	b003      	add	sp, #12
   b7b02:	4770      	bx	lr

000b7b04 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b04:	b510      	push	{r4, lr}
   b7b06:	7202      	strb	r2, [r0, #8]
   b7b08:	22ff      	movs	r2, #255	; 0xff
   b7b0a:	8142      	strh	r2, [r0, #10]
   b7b0c:	2200      	movs	r2, #0
   b7b0e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7b12:	6142      	str	r2, [r0, #20]
   b7b14:	7602      	strb	r2, [r0, #24]
   b7b16:	61c2      	str	r2, [r0, #28]
    instance = this;
   b7b18:	4a02      	ldr	r2, [pc, #8]	; (b7b24 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b1a:	4c03      	ldr	r4, [pc, #12]	; (b7b28 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b7b1c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7b1e:	e9c0 4100 	strd	r4, r1, [r0]
}
   b7b22:	bd10      	pop	{r4, pc}
   b7b24:	2003e4c4 	.word	0x2003e4c4
   b7b28:	000c5e90 	.word	0x000c5e90

000b7b2c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b7b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b30:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b7b34:	4604      	mov	r4, r0
   b7b36:	4689      	mov	r9, r1
   b7b38:	4616      	mov	r6, r2
   b7b3a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b7b3c:	f1b8 0f00 	cmp.w	r8, #0
   b7b40:	d002      	beq.n	b7b48 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b7b42:	6840      	ldr	r0, [r0, #4]
   b7b44:	f006 fa9a 	bl	be07c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7b48:	7a21      	ldrb	r1, [r4, #8]
   b7b4a:	6860      	ldr	r0, [r4, #4]
   b7b4c:	f006 fa73 	bl	be036 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7b50:	6860      	ldr	r0, [r4, #4]
   b7b52:	6803      	ldr	r3, [r0, #0]
   b7b54:	4649      	mov	r1, r9
   b7b56:	689b      	ldr	r3, [r3, #8]
   b7b58:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7b5a:	6860      	ldr	r0, [r4, #4]
   b7b5c:	2100      	movs	r1, #0
   b7b5e:	f006 fa89 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7b62:	4605      	mov	r5, r0
   b7b64:	bb00      	cbnz	r0, b7ba8 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7b66:	2301      	movs	r3, #1
   b7b68:	7a21      	ldrb	r1, [r4, #8]
   b7b6a:	6860      	ldr	r0, [r4, #4]
   b7b6c:	463a      	mov	r2, r7
   b7b6e:	f006 fa50 	bl	be012 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7b72:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7b74:	4603      	mov	r3, r0
        if (count == num) {
   b7b76:	d109      	bne.n	b7b8c <_ZN6AB180513readRegistersEhPhjb+0x60>
   b7b78:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b7b7a:	42be      	cmp	r6, r7
   b7b7c:	d01c      	beq.n	b7bb8 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7b7e:	6860      	ldr	r0, [r4, #4]
   b7b80:	6803      	ldr	r3, [r0, #0]
   b7b82:	695b      	ldr	r3, [r3, #20]
   b7b84:	4798      	blx	r3
   b7b86:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7b8a:	e7f6      	b.n	b7b7a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7b8c:	490b      	ldr	r1, [pc, #44]	; (b7bbc <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7b8e:	480c      	ldr	r0, [pc, #48]	; (b7bc0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7b90:	464a      	mov	r2, r9
   b7b92:	f7ff ff9b 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7b96:	f1b8 0f00 	cmp.w	r8, #0
   b7b9a:	d002      	beq.n	b7ba2 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7b9c:	6860      	ldr	r0, [r4, #4]
   b7b9e:	f006 fa76 	bl	be08e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7ba2:	4628      	mov	r0, r5
   b7ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7ba8:	4603      	mov	r3, r0
   b7baa:	4906      	ldr	r1, [pc, #24]	; (b7bc4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7bac:	4804      	ldr	r0, [pc, #16]	; (b7bc0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7bae:	464a      	mov	r2, r9
   b7bb0:	f7ff ff8c 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7bb4:	2500      	movs	r5, #0
   b7bb6:	e7ee      	b.n	b7b96 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7bb8:	2501      	movs	r5, #1
   b7bba:	e7ec      	b.n	b7b96 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7bbc:	000c5c40 	.word	0x000c5c40
   b7bc0:	2003e4c0 	.word	0x2003e4c0
   b7bc4:	000c5c65 	.word	0x000c5c65

000b7bc8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7bc8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7bca:	9300      	str	r3, [sp, #0]
   b7bcc:	2301      	movs	r3, #1
   b7bce:	f7ff ffad 	bl	b7b2c <_ZN6AB180513readRegistersEhPhjb>
}
   b7bd2:	b003      	add	sp, #12
   b7bd4:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bd8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7bda:	8943      	ldrh	r3, [r0, #10]
   b7bdc:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7bde:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7be0:	d010      	beq.n	b7c04 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7be2:	4e19      	ldr	r6, [pc, #100]	; (b7c48 <_ZN6AB180510detectChipEv+0x70>)
   b7be4:	4d19      	ldr	r5, [pc, #100]	; (b7c4c <_ZN6AB180510detectChipEv+0x74>)
   b7be6:	f005 f8c1 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7bea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7bee:	d209      	bcs.n	b7c04 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7bf0:	8960      	ldrh	r0, [r4, #10]
   b7bf2:	f008 fda7 	bl	c0744 <digitalRead>
   b7bf6:	2801      	cmp	r0, #1
   b7bf8:	d004      	beq.n	b7c04 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7bfa:	4631      	mov	r1, r6
   b7bfc:	4628      	mov	r0, r5
   b7bfe:	f7fc fa9e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7c02:	e7f0      	b.n	b7be6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7c04:	2301      	movs	r3, #1
   b7c06:	f10d 0207 	add.w	r2, sp, #7
   b7c0a:	2128      	movs	r1, #40	; 0x28
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	f7ff ffdb 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7c12:	b930      	cbnz	r0, b7c22 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7c14:	480d      	ldr	r0, [pc, #52]	; (b7c4c <_ZN6AB180510detectChipEv+0x74>)
   b7c16:	490e      	ldr	r1, [pc, #56]	; (b7c50 <_ZN6AB180510detectChipEv+0x78>)
   b7c18:	f7fc fa91 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7c1c:	2000      	movs	r0, #0
}
   b7c1e:	b002      	add	sp, #8
   b7c20:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7c26:	2b18      	cmp	r3, #24
   b7c28:	d1f4      	bne.n	b7c14 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7c2a:	2301      	movs	r3, #1
   b7c2c:	f10d 0207 	add.w	r2, sp, #7
   b7c30:	2129      	movs	r1, #41	; 0x29
   b7c32:	4620      	mov	r0, r4
   b7c34:	f7ff ffc8 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7c38:	2800      	cmp	r0, #0
   b7c3a:	d0eb      	beq.n	b7c14 <_ZN6AB180510detectChipEv+0x3c>
   b7c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7c40:	2b05      	cmp	r3, #5
   b7c42:	d1e7      	bne.n	b7c14 <_ZN6AB180510detectChipEv+0x3c>
   b7c44:	e7eb      	b.n	b7c1e <_ZN6AB180510detectChipEv+0x46>
   b7c46:	bf00      	nop
   b7c48:	000c5c89 	.word	0x000c5c89
   b7c4c:	2003e4c0 	.word	0x2003e4c0
   b7c50:	000c5c9e 	.word	0x000c5c9e

000b7c54 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7c54:	b507      	push	{r0, r1, r2, lr}
   b7c56:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7c58:	2200      	movs	r2, #0
   b7c5a:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7c5e:	f10d 0207 	add.w	r2, sp, #7
   b7c62:	f7ff ffb1 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b7c66:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7c6a:	b003      	add	sp, #12
   b7c6c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c70 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c74:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b7c78:	4604      	mov	r4, r0
   b7c7a:	460f      	mov	r7, r1
   b7c7c:	4615      	mov	r5, r2
   b7c7e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7c80:	f1b8 0f00 	cmp.w	r8, #0
   b7c84:	d002      	beq.n	b7c8c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7c86:	6840      	ldr	r0, [r0, #4]
   b7c88:	f006 f9f8 	bl	be07c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7c8c:	7a21      	ldrb	r1, [r4, #8]
   b7c8e:	6860      	ldr	r0, [r4, #4]
   b7c90:	f006 f9d1 	bl	be036 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7c94:	6860      	ldr	r0, [r4, #4]
   b7c96:	6803      	ldr	r3, [r0, #0]
   b7c98:	4639      	mov	r1, r7
   b7c9a:	689b      	ldr	r3, [r3, #8]
   b7c9c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7c9e:	442e      	add	r6, r5
   b7ca0:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7ca2:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7ca4:	d005      	beq.n	b7cb2 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7ca6:	6803      	ldr	r3, [r0, #0]
   b7ca8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7cac:	689b      	ldr	r3, [r3, #8]
   b7cae:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7cb0:	e7f6      	b.n	b7ca0 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b7cb2:	2101      	movs	r1, #1
   b7cb4:	f006 f9de 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7cb8:	4603      	mov	r3, r0
   b7cba:	b170      	cbz	r0, b7cda <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7cbc:	4908      	ldr	r1, [pc, #32]	; (b7ce0 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b7cbe:	4809      	ldr	r0, [pc, #36]	; (b7ce4 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b7cc0:	463a      	mov	r2, r7
   b7cc2:	f7ff ff03 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7cc6:	2500      	movs	r5, #0
    }

    if (lock) {
   b7cc8:	f1b8 0f00 	cmp.w	r8, #0
   b7ccc:	d002      	beq.n	b7cd4 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b7cce:	6860      	ldr	r0, [r4, #4]
   b7cd0:	f006 f9dd 	bl	be08e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7cd4:	4628      	mov	r0, r5
   b7cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7cda:	2501      	movs	r5, #1
   b7cdc:	e7f4      	b.n	b7cc8 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b7cde:	bf00      	nop
   b7ce0:	000c5cab 	.word	0x000c5cab
   b7ce4:	2003e4c0 	.word	0x2003e4c0

000b7ce8 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7cea:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b7cee:	9300      	str	r3, [sp, #0]
   b7cf0:	f10d 020f 	add.w	r2, sp, #15
   b7cf4:	2301      	movs	r3, #1
   b7cf6:	f7ff ffbb 	bl	b7c70 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7cfa:	b005      	add	sp, #20
   b7cfc:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d00 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b7d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b7d02:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7d04:	460c      	mov	r4, r1
   b7d06:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7d08:	491a      	ldr	r1, [pc, #104]	; (b7d74 <_ZN6AB18056setWDTEi+0x74>)
   b7d0a:	481b      	ldr	r0, [pc, #108]	; (b7d78 <_ZN6AB18056setWDTEi+0x78>)
   b7d0c:	f7fc fa17 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7d10:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b7d12:	bfb8      	it	lt
   b7d14:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7d16:	b97c      	cbnz	r4, b7d38 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7d18:	2301      	movs	r3, #1
   b7d1a:	4622      	mov	r2, r4
   b7d1c:	211b      	movs	r1, #27
   b7d1e:	4628      	mov	r0, r5
   b7d20:	f7ff ffe2 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7d24:	4915      	ldr	r1, [pc, #84]	; (b7d7c <_ZN6AB18056setWDTEi+0x7c>)
   b7d26:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7d28:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7d2a:	4813      	ldr	r0, [pc, #76]	; (b7d78 <_ZN6AB18056setWDTEi+0x78>)
   b7d2c:	f7ff fedc 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7d30:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b7d32:	616c      	str	r4, [r5, #20]
}
   b7d34:	4630      	mov	r0, r6
   b7d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7d38:	2c03      	cmp	r4, #3
   b7d3a:	dd19      	ble.n	b7d70 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7d3c:	10a7      	asrs	r7, r4, #2
   b7d3e:	2f1f      	cmp	r7, #31
   b7d40:	bfa8      	it	ge
   b7d42:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7d44:	00ba      	lsls	r2, r7, #2
   b7d46:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7d4a:	2301      	movs	r3, #1
   b7d4c:	b2d2      	uxtb	r2, r2
   b7d4e:	211b      	movs	r1, #27
   b7d50:	4628      	mov	r0, r5
   b7d52:	f7ff ffc9 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7d56:	463a      	mov	r2, r7
   b7d58:	4603      	mov	r3, r0
   b7d5a:	4909      	ldr	r1, [pc, #36]	; (b7d80 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7d5c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7d5e:	4806      	ldr	r0, [pc, #24]	; (b7d78 <_ZN6AB18056setWDTEi+0x78>)
   b7d60:	f7ff fec2 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7d64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7d68:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7d6a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7d6c:	616f      	str	r7, [r5, #20]
   b7d6e:	e7e1      	b.n	b7d34 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7d70:	2701      	movs	r7, #1
   b7d72:	e7e7      	b.n	b7d44 <_ZN6AB18056setWDTEi+0x44>
   b7d74:	000c5cd0 	.word	0x000c5cd0
   b7d78:	2003e4c0 	.word	0x2003e4c0
   b7d7c:	000c5cda 	.word	0x000c5cda
   b7d80:	000c5cf6 	.word	0x000c5cf6

000b7d84 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7d84:	4b06      	ldr	r3, [pc, #24]	; (b7da0 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7d86:	681a      	ldr	r2, [r3, #0]
   b7d88:	b14a      	cbz	r2, b7d9e <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7d8a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7d8e:	430b      	orrs	r3, r1
   b7d90:	d105      	bne.n	b7d9e <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7d92:	68d3      	ldr	r3, [r2, #12]
   b7d94:	b11b      	cbz	r3, b7d9e <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7d96:	2100      	movs	r1, #0
   b7d98:	4610      	mov	r0, r2
   b7d9a:	f7ff bfb1 	b.w	b7d00 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7d9e:	4770      	bx	lr
   b7da0:	2003e4c4 	.word	0x2003e4c4

000b7da4 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7da4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7da8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7dac:	4605      	mov	r5, r0
   b7dae:	4616      	mov	r6, r2
   b7db0:	461f      	mov	r7, r3
    if (lock) {
   b7db2:	f1b8 0f00 	cmp.w	r8, #0
   b7db6:	d004      	beq.n	b7dc2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7db8:	6840      	ldr	r0, [r0, #4]
   b7dba:	9101      	str	r1, [sp, #4]
   b7dbc:	f006 f95e 	bl	be07c <_ZN7TwoWire4lockEv>
   b7dc0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7dc2:	9101      	str	r1, [sp, #4]
   b7dc4:	2300      	movs	r3, #0
   b7dc6:	f10d 020f 	add.w	r2, sp, #15
   b7dca:	4628      	mov	r0, r5
   b7dcc:	f7ff fefc 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7dd0:	4604      	mov	r4, r0
   b7dd2:	b160      	cbz	r0, b7dee <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7dd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7dd8:	ea03 0206 	and.w	r2, r3, r6
   b7ddc:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7dde:	4293      	cmp	r3, r2
   b7de0:	d005      	beq.n	b7dee <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7de2:	9901      	ldr	r1, [sp, #4]
   b7de4:	2300      	movs	r3, #0
   b7de6:	4628      	mov	r0, r5
   b7de8:	f7ff ff7e 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
   b7dec:	4604      	mov	r4, r0
    if (lock) {
   b7dee:	f1b8 0f00 	cmp.w	r8, #0
   b7df2:	d002      	beq.n	b7dfa <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7df4:	6868      	ldr	r0, [r5, #4]
   b7df6:	f006 f94a 	bl	be08e <_ZN7TwoWire6unlockEv>
}
   b7dfa:	4620      	mov	r0, r4
   b7dfc:	b004      	add	sp, #16
   b7dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e02 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e02:	b513      	push	{r0, r1, r4, lr}
   b7e04:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7e06:	f10d 0207 	add.w	r2, sp, #7
   b7e0a:	f7ff fedd 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7e0e:	b128      	cbz	r0, b7e1c <_ZN6AB180510isBitClearEhhb+0x1a>
   b7e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7e14:	421c      	tst	r4, r3
   b7e16:	bf0c      	ite	eq
   b7e18:	2001      	moveq	r0, #1
   b7e1a:	2000      	movne	r0, #0
}
   b7e1c:	b002      	add	sp, #8
   b7e1e:	bd10      	pop	{r4, pc}

000b7e20 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e20:	b513      	push	{r0, r1, r4, lr}
   b7e22:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7e24:	f10d 0207 	add.w	r2, sp, #7
   b7e28:	f7ff fece 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7e2c:	b128      	cbz	r0, b7e3a <_ZN6AB18058isBitSetEhhb+0x1a>
   b7e2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7e32:	421c      	tst	r4, r3
   b7e34:	bf14      	ite	ne
   b7e36:	2001      	movne	r0, #1
   b7e38:	2000      	moveq	r0, #0
}
   b7e3a:	b002      	add	sp, #8
   b7e3c:	bd10      	pop	{r4, pc}

000b7e3e <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7e3e:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7e40:	43d2      	mvns	r2, r2
   b7e42:	9300      	str	r3, [sp, #0]
   b7e44:	b2d2      	uxtb	r2, r2
   b7e46:	2300      	movs	r3, #0
   b7e48:	f7ff ffac 	bl	b7da4 <_ZN6AB180512maskRegisterEhhhb>
}
   b7e4c:	b003      	add	sp, #12
   b7e4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7e54 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7e56:	2301      	movs	r3, #1
   b7e58:	f10d 0207 	add.w	r2, sp, #7
   b7e5c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7e5e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7e60:	f7ff feb2 	bl	b7bc8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7e64:	4605      	mov	r5, r0
   b7e66:	b938      	cbnz	r0, b7e78 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7e68:	491e      	ldr	r1, [pc, #120]	; (b7ee4 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7e6a:	481f      	ldr	r0, [pc, #124]	; (b7ee8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7e6c:	22ad      	movs	r2, #173	; 0xad
   b7e6e:	f7ff fe2d 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
}
   b7e72:	4628      	mov	r0, r5
   b7e74:	b003      	add	sp, #12
   b7e76:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7e7c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7e80:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7e84:	d00b      	beq.n	b7e9e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7e86:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7e88:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7e8a:	210f      	movs	r1, #15
   b7e8c:	4620      	mov	r0, r4
   b7e8e:	f7ff ffd6 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7e92:	4a16      	ldr	r2, [pc, #88]	; (b7eec <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7e94:	4916      	ldr	r1, [pc, #88]	; (b7ef0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7e96:	4814      	ldr	r0, [pc, #80]	; (b7ee8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7e98:	f7fc f951 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7e9c:	e7e9      	b.n	b7e72 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7e9e:	2208      	movs	r2, #8
   b7ea0:	2117      	movs	r1, #23
   b7ea2:	4620      	mov	r0, r4
   b7ea4:	f7ff ffbc 	bl	b7e20 <_ZN6AB18058isBitSetEhhb>
   b7ea8:	b118      	cbz	r0, b7eb2 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7eaa:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7eac:	4a11      	ldr	r2, [pc, #68]	; (b7ef4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7eae:	61e3      	str	r3, [r4, #28]
   b7eb0:	e7f0      	b.n	b7e94 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7eb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7eb6:	071a      	lsls	r2, r3, #28
   b7eb8:	d509      	bpl.n	b7ece <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7eba:	2303      	movs	r3, #3
   b7ebc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7ebe:	2208      	movs	r2, #8
   b7ec0:	2301      	movs	r3, #1
   b7ec2:	210f      	movs	r1, #15
   b7ec4:	4620      	mov	r0, r4
   b7ec6:	f7ff ffba 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7eca:	4a0b      	ldr	r2, [pc, #44]	; (b7ef8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7ecc:	e7e2      	b.n	b7e94 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7ece:	075b      	lsls	r3, r3, #29
   b7ed0:	d5cf      	bpl.n	b7e72 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7ed2:	2204      	movs	r2, #4
   b7ed4:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7ed6:	2301      	movs	r3, #1
   b7ed8:	210f      	movs	r1, #15
   b7eda:	4620      	mov	r0, r4
   b7edc:	f7ff ffaf 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7ee0:	4a06      	ldr	r2, [pc, #24]	; (b7efc <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7ee2:	e7d7      	b.n	b7e94 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7ee4:	000c5d49 	.word	0x000c5d49
   b7ee8:	2003e4c0 	.word	0x2003e4c0
   b7eec:	000c5d1a 	.word	0x000c5d1a
   b7ef0:	000c5d68 	.word	0x000c5d68
   b7ef4:	000c5d23 	.word	0x000c5d23
   b7ef8:	000c5d33 	.word	0x000c5d33
   b7efc:	000c5d43 	.word	0x000c5d43

000b7f00 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7f00:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7f02:	9300      	str	r3, [sp, #0]
   b7f04:	4613      	mov	r3, r2
   b7f06:	22ff      	movs	r2, #255	; 0xff
   b7f08:	f7ff ff4c 	bl	b7da4 <_ZN6AB180512maskRegisterEhhhb>
}
   b7f0c:	b003      	add	sp, #12
   b7f0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7f14 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f16:	460f      	mov	r7, r1
   b7f18:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7f1a:	2301      	movs	r3, #1
   b7f1c:	2200      	movs	r2, #0
   b7f1e:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7f20:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7f22:	f7ff fee1 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f26:	4604      	mov	r4, r0
   b7f28:	b938      	cbnz	r0, b7f3a <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7f2a:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7f2e:	491f      	ldr	r1, [pc, #124]	; (b7fac <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7f30:	481f      	ldr	r0, [pc, #124]	; (b7fb0 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7f32:	f7ff fdcb 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
}
   b7f36:	4620      	mov	r0, r4
   b7f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7f3a:	2301      	movs	r3, #1
   b7f3c:	2223      	movs	r2, #35	; 0x23
   b7f3e:	2118      	movs	r1, #24
   b7f40:	4628      	mov	r0, r5
   b7f42:	f7ff fed1 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f46:	4604      	mov	r4, r0
   b7f48:	b910      	cbnz	r0, b7f50 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7f4a:	f240 229b 	movw	r2, #667	; 0x29b
   b7f4e:	e7ee      	b.n	b7f2e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7f50:	2fff      	cmp	r7, #255	; 0xff
   b7f52:	bfa8      	it	ge
   b7f54:	27ff      	movge	r7, #255	; 0xff
   b7f56:	2f01      	cmp	r7, #1
   b7f58:	bfb8      	it	lt
   b7f5a:	2701      	movlt	r7, #1
   b7f5c:	2301      	movs	r3, #1
   b7f5e:	b2fa      	uxtb	r2, r7
   b7f60:	2119      	movs	r1, #25
   b7f62:	4628      	mov	r0, r5
   b7f64:	f7ff fec0 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f68:	4604      	mov	r4, r0
   b7f6a:	b910      	cbnz	r0, b7f72 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7f6c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7f70:	e7dd      	b.n	b7f2e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7f72:	2301      	movs	r3, #1
   b7f74:	2208      	movs	r2, #8
   b7f76:	2112      	movs	r1, #18
   b7f78:	4628      	mov	r0, r5
   b7f7a:	f7ff ffc1 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7f7e:	4604      	mov	r4, r0
   b7f80:	b910      	cbnz	r0, b7f88 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7f82:	f240 22af 	movw	r2, #687	; 0x2af
   b7f86:	e7d2      	b.n	b7f2e <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7f88:	2e00      	cmp	r6, #0
   b7f8a:	bf14      	ite	ne
   b7f8c:	2203      	movne	r2, #3
   b7f8e:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7f90:	2301      	movs	r3, #1
   b7f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7f96:	2118      	movs	r1, #24
   b7f98:	4628      	mov	r0, r5
   b7f9a:	f7ff fea5 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f9e:	4604      	mov	r4, r0
   b7fa0:	2800      	cmp	r0, #0
   b7fa2:	d1c8      	bne.n	b7f36 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7fa4:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7fa8:	e7c1      	b.n	b7f2e <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7faa:	bf00      	nop
   b7fac:	000c5d79 	.word	0x000c5d79
   b7fb0:	2003e4c0 	.word	0x2003e4c0

000b7fb4 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7fb8:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7fba:	4605      	mov	r5, r0
   b7fbc:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7fbe:	484f      	ldr	r0, [pc, #316]	; (b80fc <_ZN6AB180513deepPowerDownEi+0x148>)
   b7fc0:	494f      	ldr	r1, [pc, #316]	; (b8100 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7fc2:	f7fc f8bc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7fc6:	2100      	movs	r1, #0
   b7fc8:	4628      	mov	r0, r5
   b7fca:	f7ff fe99 	bl	b7d00 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7fce:	4604      	mov	r4, r0
   b7fd0:	b948      	cbnz	r0, b7fe6 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7fd2:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7fd6:	494b      	ldr	r1, [pc, #300]	; (b8104 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7fd8:	4848      	ldr	r0, [pc, #288]	; (b80fc <_ZN6AB180513deepPowerDownEi+0x148>)
   b7fda:	f7ff fd77 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
}
   b7fde:	4620      	mov	r0, r4
   b7fe0:	b003      	add	sp, #12
   b7fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7fe6:	2301      	movs	r3, #1
   b7fe8:	461a      	mov	r2, r3
   b7fea:	2130      	movs	r1, #48	; 0x30
   b7fec:	4628      	mov	r0, r5
   b7fee:	f7ff ff87 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7ff2:	4604      	mov	r4, r0
   b7ff4:	b910      	cbnz	r0, b7ffc <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7ff6:	f240 2205 	movw	r2, #517	; 0x205
   b7ffa:	e7ec      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7ffc:	2210      	movs	r2, #16
   b7ffe:	2301      	movs	r3, #1
   b8000:	4611      	mov	r1, r2
   b8002:	4628      	mov	r0, r5
   b8004:	f7ff ff1b 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b8008:	4604      	mov	r4, r0
   b800a:	b910      	cbnz	r0, b8012 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b800c:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b8010:	e7e1      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b8012:	2301      	movs	r3, #1
   b8014:	2226      	movs	r2, #38	; 0x26
   b8016:	2113      	movs	r1, #19
   b8018:	4628      	mov	r0, r5
   b801a:	f7ff fe65 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b801e:	4604      	mov	r4, r0
   b8020:	b910      	cbnz	r0, b8028 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b8022:	f240 2213 	movw	r2, #531	; 0x213
   b8026:	e7d6      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b8028:	2601      	movs	r6, #1
   b802a:	9600      	str	r6, [sp, #0]
   b802c:	4633      	mov	r3, r6
   b802e:	22fc      	movs	r2, #252	; 0xfc
   b8030:	2111      	movs	r1, #17
   b8032:	4628      	mov	r0, r5
   b8034:	f7ff feb6 	bl	b7da4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b8038:	4604      	mov	r4, r0
   b803a:	b910      	cbnz	r0, b8042 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b803c:	f240 221b 	movw	r2, #539	; 0x21b
   b8040:	e7c9      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b8042:	2200      	movs	r2, #0
   b8044:	4639      	mov	r1, r7
   b8046:	4628      	mov	r0, r5
   b8048:	f7ff ff64 	bl	b7f14 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b804c:	4604      	mov	r4, r0
   b804e:	b910      	cbnz	r0, b8056 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b8050:	f240 2222 	movw	r2, #546	; 0x222
   b8054:	e7bf      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b8056:	9600      	str	r6, [sp, #0]
   b8058:	2302      	movs	r3, #2
   b805a:	2277      	movs	r2, #119	; 0x77
   b805c:	2110      	movs	r1, #16
   b805e:	4628      	mov	r0, r5
   b8060:	f7ff fea0 	bl	b7da4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b8064:	4604      	mov	r4, r0
   b8066:	b910      	cbnz	r0, b806e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b8068:	f240 222b 	movw	r2, #555	; 0x22b
   b806c:	e7b3      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b806e:	4633      	mov	r3, r6
   b8070:	2204      	movs	r2, #4
   b8072:	211c      	movs	r1, #28
   b8074:	4628      	mov	r0, r5
   b8076:	f7ff ff43 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b807a:	4604      	mov	r4, r0
   b807c:	b910      	cbnz	r0, b8084 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b807e:	f240 2232 	movw	r2, #562	; 0x232
   b8082:	e7a8      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b8084:	9600      	str	r6, [sp, #0]
   b8086:	2318      	movs	r3, #24
   b8088:	22e3      	movs	r2, #227	; 0xe3
   b808a:	2111      	movs	r1, #17
   b808c:	4628      	mov	r0, r5
   b808e:	f7ff fe89 	bl	b7da4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b8092:	4604      	mov	r4, r0
   b8094:	b910      	cbnz	r0, b809c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b8096:	f240 2239 	movw	r2, #569	; 0x239
   b809a:	e79c      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b809c:	4633      	mov	r3, r6
   b809e:	22c0      	movs	r2, #192	; 0xc0
   b80a0:	2117      	movs	r1, #23
   b80a2:	4628      	mov	r0, r5
   b80a4:	f7ff fe20 	bl	b7ce8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b80a8:	4604      	mov	r4, r0
   b80aa:	b910      	cbnz	r0, b80b2 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b80ac:	f44f 7210 	mov.w	r2, #576	; 0x240
   b80b0:	e791      	b.n	b7fd6 <_ZN6AB180513deepPowerDownEi+0x22>
   b80b2:	f004 fe5b 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b80b6:	f8df 9054 	ldr.w	r9, [pc, #84]	; b810c <_ZN6AB180513deepPowerDownEi+0x158>
   b80ba:	f8df 8040 	ldr.w	r8, [pc, #64]	; b80fc <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b80be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b80c2:	4606      	mov	r6, r0
   b80c4:	434f      	muls	r7, r1
   b80c6:	f004 fe51 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   b80ca:	1b80      	subs	r0, r0, r6
   b80cc:	42b8      	cmp	r0, r7
   b80ce:	d20e      	bcs.n	b80ee <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b80d0:	2201      	movs	r2, #1
   b80d2:	2117      	movs	r1, #23
   b80d4:	4628      	mov	r0, r5
   b80d6:	f7ff fdbd 	bl	b7c54 <_ZN6AB180512readRegisterEhb>
   b80da:	4649      	mov	r1, r9
   b80dc:	4602      	mov	r2, r0
   b80de:	4640      	mov	r0, r8
   b80e0:	f7fc f82d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b80e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b80e8:	f005 fa5c 	bl	bd5a4 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b80ec:	e7eb      	b.n	b80c6 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b80ee:	4906      	ldr	r1, [pc, #24]	; (b8108 <_ZN6AB180513deepPowerDownEi+0x154>)
   b80f0:	4802      	ldr	r0, [pc, #8]	; (b80fc <_ZN6AB180513deepPowerDownEi+0x148>)
   b80f2:	f7ff fceb 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b80f6:	f007 fefc 	bl	bfef2 <_ZN11SystemClass5resetEv>
    return true;
   b80fa:	e770      	b.n	b7fde <_ZN6AB180513deepPowerDownEi+0x2a>
   b80fc:	2003e4c0 	.word	0x2003e4c0
   b8100:	000c5da4 	.word	0x000c5da4
   b8104:	000c5d99 	.word	0x000c5d99
   b8108:	000c5dca 	.word	0x000c5dca
   b810c:	000c5db5 	.word	0x000c5db5

000b8110 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b8110:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8114:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b8118:	4605      	mov	r5, r0
   b811a:	460c      	mov	r4, r1
   b811c:	4691      	mov	r9, r2
   b811e:	461f      	mov	r7, r3
    if (lock) {
   b8120:	f1ba 0f00 	cmp.w	sl, #0
   b8124:	d002      	beq.n	b812c <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b8126:	6840      	ldr	r0, [r0, #4]
   b8128:	f005 ffa8 	bl	be07c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b812c:	b307      	cbz	r7, b8170 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b812e:	2f20      	cmp	r7, #32
   b8130:	463e      	mov	r6, r7
   b8132:	bf28      	it	cs
   b8134:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8136:	2c7f      	cmp	r4, #127	; 0x7f
   b8138:	d826      	bhi.n	b8188 <_ZN6AB18057readRamEjPhjb+0x78>
   b813a:	1933      	adds	r3, r6, r4
   b813c:	2b80      	cmp	r3, #128	; 0x80
   b813e:	d901      	bls.n	b8144 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b8140:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8144:	2301      	movs	r3, #1
   b8146:	2204      	movs	r2, #4
   b8148:	213f      	movs	r1, #63	; 0x3f
   b814a:	4628      	mov	r0, r5
   b814c:	f7ff fe77 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8150:	2300      	movs	r3, #0
   b8152:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8156:	9300      	str	r3, [sp, #0]
   b8158:	464a      	mov	r2, r9
   b815a:	4633      	mov	r3, r6
   b815c:	b2c9      	uxtb	r1, r1
   b815e:	4628      	mov	r0, r5
   b8160:	f7ff fce4 	bl	b7b2c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b8164:	4680      	mov	r8, r0
   b8166:	b128      	cbz	r0, b8174 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b8168:	4434      	add	r4, r6
        dataLen -= count;
   b816a:	1bbf      	subs	r7, r7, r6
        data += count;
   b816c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b816e:	e7dd      	b.n	b812c <_ZN6AB18057readRamEjPhjb+0x1c>
   b8170:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8174:	f1ba 0f00 	cmp.w	sl, #0
   b8178:	d002      	beq.n	b8180 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b817a:	6868      	ldr	r0, [r5, #4]
   b817c:	f005 ff87 	bl	be08e <_ZN7TwoWire6unlockEv>
}
   b8180:	4640      	mov	r0, r8
   b8182:	b002      	add	sp, #8
   b8184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8188:	2301      	movs	r3, #1
   b818a:	2204      	movs	r2, #4
   b818c:	213f      	movs	r1, #63	; 0x3f
   b818e:	4628      	mov	r0, r5
   b8190:	f7ff feb6 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
   b8194:	e7dc      	b.n	b8150 <_ZN6AB18057readRamEjPhjb+0x40>

000b8196 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b8196:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b819a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b819e:	4605      	mov	r5, r0
   b81a0:	460c      	mov	r4, r1
   b81a2:	4691      	mov	r9, r2
   b81a4:	461f      	mov	r7, r3
    if (lock) {
   b81a6:	f1ba 0f00 	cmp.w	sl, #0
   b81aa:	d002      	beq.n	b81b2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b81ac:	6840      	ldr	r0, [r0, #4]
   b81ae:	f005 ff65 	bl	be07c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b81b2:	b307      	cbz	r7, b81f6 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b81b4:	2f1f      	cmp	r7, #31
   b81b6:	463e      	mov	r6, r7
   b81b8:	bf28      	it	cs
   b81ba:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b81bc:	2c7f      	cmp	r4, #127	; 0x7f
   b81be:	d826      	bhi.n	b820e <_ZN6AB18058writeRamEjPKhjb+0x78>
   b81c0:	1933      	adds	r3, r6, r4
   b81c2:	2b80      	cmp	r3, #128	; 0x80
   b81c4:	d901      	bls.n	b81ca <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b81c6:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b81ca:	2301      	movs	r3, #1
   b81cc:	2204      	movs	r2, #4
   b81ce:	213f      	movs	r1, #63	; 0x3f
   b81d0:	4628      	mov	r0, r5
   b81d2:	f7ff fe34 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b81d6:	2300      	movs	r3, #0
   b81d8:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b81dc:	9300      	str	r3, [sp, #0]
   b81de:	464a      	mov	r2, r9
   b81e0:	4633      	mov	r3, r6
   b81e2:	b2c9      	uxtb	r1, r1
   b81e4:	4628      	mov	r0, r5
   b81e6:	f7ff fd43 	bl	b7c70 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b81ea:	4680      	mov	r8, r0
   b81ec:	b128      	cbz	r0, b81fa <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b81ee:	4434      	add	r4, r6
        dataLen -= count;
   b81f0:	1bbf      	subs	r7, r7, r6
        data += count;
   b81f2:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b81f4:	e7dd      	b.n	b81b2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b81f6:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b81fa:	f1ba 0f00 	cmp.w	sl, #0
   b81fe:	d002      	beq.n	b8206 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b8200:	6868      	ldr	r0, [r5, #4]
   b8202:	f005 ff44 	bl	be08e <_ZN7TwoWire6unlockEv>
}
   b8206:	4640      	mov	r0, r8
   b8208:	b002      	add	sp, #8
   b820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b820e:	2301      	movs	r3, #1
   b8210:	2204      	movs	r2, #4
   b8212:	213f      	movs	r1, #63	; 0x3f
   b8214:	4628      	mov	r0, r5
   b8216:	f7ff fe73 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
   b821a:	e7dc      	b.n	b81d6 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b821c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b821c:	b530      	push	{r4, r5, lr}
   b821e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b8220:	680d      	ldr	r5, [r1, #0]
   b8222:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b8226:	9503      	str	r5, [sp, #12]
   b8228:	684d      	ldr	r5, [r1, #4]
   b822a:	9502      	str	r5, [sp, #8]
   b822c:	688d      	ldr	r5, [r1, #8]
   b822e:	9501      	str	r5, [sp, #4]
   b8230:	68c9      	ldr	r1, [r1, #12]
   b8232:	9100      	str	r1, [sp, #0]
   b8234:	3301      	adds	r3, #1
   b8236:	4904      	ldr	r1, [pc, #16]	; (b8248 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b8238:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b823c:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b823e:	f007 fdf1 	bl	bfe24 <_ZN6String6formatEPKcz>
}
   b8242:	4620      	mov	r0, r4
   b8244:	b005      	add	sp, #20
   b8246:	bd30      	pop	{r4, r5, pc}
   b8248:	000c5ddc 	.word	0x000c5ddc

000b824c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b824c:	0903      	lsrs	r3, r0, #4
}
   b824e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8250:	f000 000f 	and.w	r0, r0, #15
}
   b8254:	fb02 0003 	mla	r0, r2, r3, r0
   b8258:	4770      	bx	lr

000b825a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b825a:	b538      	push	{r3, r4, r5, lr}
   b825c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b825e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b8260:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b8262:	f7ff fff3 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b8266:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b8268:	7860      	ldrb	r0, [r4, #1]
   b826a:	f7ff ffef 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b826e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b8270:	78a0      	ldrb	r0, [r4, #2]
   b8272:	f7ff ffeb 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b8276:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b8278:	78e0      	ldrb	r0, [r4, #3]
   b827a:	f7ff ffe7 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b827e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8280:	7920      	ldrb	r0, [r4, #4]
   b8282:	f7ff ffe3 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b8286:	3801      	subs	r0, #1
   b8288:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b828a:	b92d      	cbnz	r5, b8298 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b828c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b828e:	7828      	ldrb	r0, [r5, #0]
   b8290:	f7ff ffdc 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b8294:	6188      	str	r0, [r1, #24]
}
   b8296:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b8298:	7960      	ldrb	r0, [r4, #5]
   b829a:	f7ff ffd7 	bl	b824c <_ZN6AB180510bcdToValueEh>
   b829e:	3064      	adds	r0, #100	; 0x64
   b82a0:	1da5      	adds	r5, r4, #6
   b82a2:	6148      	str	r0, [r1, #20]
   b82a4:	e7f3      	b.n	b828e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b82a8 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82a8:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82aa:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82ac:	b088      	sub	sp, #32
   b82ae:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82b0:	461a      	mov	r2, r3
   b82b2:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b82b4:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b82b6:	f7ff fda4 	bl	b7e02 <_ZN6AB180510isBitClearEhhb>
   b82ba:	b1f0      	cbz	r0, b82fa <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b82bc:	2308      	movs	r3, #8
   b82be:	2601      	movs	r6, #1
   b82c0:	4620      	mov	r0, r4
   b82c2:	9600      	str	r6, [sp, #0]
   b82c4:	eb0d 0203 	add.w	r2, sp, r3
   b82c8:	2100      	movs	r1, #0
   b82ca:	f7ff fc2f 	bl	b7b2c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b82ce:	4604      	mov	r4, r0
   b82d0:	b198      	cbz	r0, b82fa <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b82d2:	4632      	mov	r2, r6
   b82d4:	4629      	mov	r1, r5
   b82d6:	f10d 0009 	add.w	r0, sp, #9
   b82da:	f7ff ffbe 	bl	b825a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b82de:	a804      	add	r0, sp, #16
   b82e0:	f7ff ff9c 	bl	b821c <_ZN6AB180510tmToStringEPK2tm>
   b82e4:	4808      	ldr	r0, [pc, #32]	; (b8308 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b82e6:	9a04      	ldr	r2, [sp, #16]
   b82e8:	4908      	ldr	r1, [pc, #32]	; (b830c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b82ea:	f7fb ff28 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b82ee:	a804      	add	r0, sp, #16
   b82f0:	f007 fc32 	bl	bfb58 <_ZN6StringD1Ev>
}
   b82f4:	4620      	mov	r0, r4
   b82f6:	b008      	add	sp, #32
   b82f8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b82fa:	2224      	movs	r2, #36	; 0x24
   b82fc:	2100      	movs	r1, #0
   b82fe:	4628      	mov	r0, r5
   b8300:	f00a f938 	bl	c2574 <memset>
   b8304:	2400      	movs	r4, #0
   b8306:	e7f5      	b.n	b82f4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b8308:	2003e4c0 	.word	0x2003e4c0
   b830c:	000c5dfa 	.word	0x000c5dfa

000b8310 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b8310:	b530      	push	{r4, r5, lr}
   b8312:	b08b      	sub	sp, #44	; 0x2c
   b8314:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b8316:	a901      	add	r1, sp, #4
   b8318:	f7ff ffc6 	bl	b82a8 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b831c:	4604      	mov	r4, r0
   b831e:	b120      	cbz	r0, b832a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b8320:	a801      	add	r0, sp, #4
   b8322:	f005 f937 	bl	bd594 <mktime>
   b8326:	e9c5 0100 	strd	r0, r1, [r5]
}
   b832a:	4620      	mov	r0, r4
   b832c:	b00b      	add	sp, #44	; 0x2c
   b832e:	bd30      	pop	{r4, r5, pc}

000b8330 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b8330:	230a      	movs	r3, #10
   b8332:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b8336:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b833a:	fb91 f2f3 	sdiv	r2, r1, r3
   b833e:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b8342:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b8346:	b2c0      	uxtb	r0, r0
   b8348:	4770      	bx	lr

000b834a <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b834a:	b570      	push	{r4, r5, r6, lr}
   b834c:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b834e:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8350:	460c      	mov	r4, r1
   b8352:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8354:	f7ff ffec 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b8358:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b835a:	6868      	ldr	r0, [r5, #4]
   b835c:	f7ff ffe8 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b8360:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b8362:	68a8      	ldr	r0, [r5, #8]
   b8364:	f7ff ffe4 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b8368:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b836a:	68e8      	ldr	r0, [r5, #12]
   b836c:	f7ff ffe0 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b8370:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8372:	6928      	ldr	r0, [r5, #16]
   b8374:	3001      	adds	r0, #1
   b8376:	f7ff ffdb 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b837a:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b837c:	b92e      	cbnz	r6, b838a <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b837e:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b8380:	69a8      	ldr	r0, [r5, #24]
   b8382:	f7ff ffd5 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b8386:	7030      	strb	r0, [r6, #0]
}
   b8388:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b838a:	696a      	ldr	r2, [r5, #20]
   b838c:	2364      	movs	r3, #100	; 0x64
   b838e:	fb92 f0f3 	sdiv	r0, r2, r3
   b8392:	fb03 2010 	mls	r0, r3, r0, r2
   b8396:	f7ff ffcb 	bl	b8330 <_ZN6AB180510valueToBcdEi>
   b839a:	1da6      	adds	r6, r4, #6
   b839c:	7160      	strb	r0, [r4, #5]
   b839e:	e7ef      	b.n	b8380 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b83a0 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b83a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83a2:	b087      	sub	sp, #28
   b83a4:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b83a6:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b83a8:	4616      	mov	r6, r2
   b83aa:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b83ac:	f7ff ff36 	bl	b821c <_ZN6AB180510tmToStringEPK2tm>
   b83b0:	481e      	ldr	r0, [pc, #120]	; (b842c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b83b2:	9a02      	ldr	r2, [sp, #8]
   b83b4:	491e      	ldr	r1, [pc, #120]	; (b8430 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b83b6:	f7fb fec2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b83ba:	a802      	add	r0, sp, #8
   b83bc:	f007 fbcc 	bl	bfb58 <_ZN6StringD1Ev>
    if (lock) {
   b83c0:	b116      	cbz	r6, b83c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b83c2:	6868      	ldr	r0, [r5, #4]
   b83c4:	f005 fe5a 	bl	be07c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b83c8:	4620      	mov	r0, r4
   b83ca:	2201      	movs	r2, #1
   b83cc:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b83d0:	2700      	movs	r7, #0
   b83d2:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b83d6:	f7ff ffb8 	bl	b834a <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b83da:	2301      	movs	r3, #1
   b83dc:	461a      	mov	r2, r3
   b83de:	2110      	movs	r1, #16
   b83e0:	4628      	mov	r0, r5
   b83e2:	f7ff fd8d 	bl	b7f00 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b83e6:	4604      	mov	r4, r0
   b83e8:	b1e8      	cbz	r0, b8426 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b83ea:	2308      	movs	r3, #8
   b83ec:	9700      	str	r7, [sp, #0]
   b83ee:	eb0d 0203 	add.w	r2, sp, r3
   b83f2:	4639      	mov	r1, r7
   b83f4:	4628      	mov	r0, r5
   b83f6:	f7ff fc3b 	bl	b7c70 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b83fa:	4604      	mov	r4, r0
   b83fc:	b160      	cbz	r0, b8418 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b83fe:	2301      	movs	r3, #1
   b8400:	461a      	mov	r2, r3
   b8402:	2110      	movs	r1, #16
   b8404:	4628      	mov	r0, r5
   b8406:	f7ff fd1a 	bl	b7e3e <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b840a:	b116      	cbz	r6, b8412 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b840c:	6868      	ldr	r0, [r5, #4]
   b840e:	f005 fe3e 	bl	be08e <_ZN7TwoWire6unlockEv>
}
   b8412:	4620      	mov	r0, r4
   b8414:	b007      	add	sp, #28
   b8416:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b8418:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b841c:	4905      	ldr	r1, [pc, #20]	; (b8434 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b841e:	4803      	ldr	r0, [pc, #12]	; (b842c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8420:	f7ff fb54 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
   b8424:	e7f1      	b.n	b840a <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b8426:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b842a:	e7f7      	b.n	b841c <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b842c:	2003e4c0 	.word	0x2003e4c0
   b8430:	000c5e08 	.word	0x000c5e08
   b8434:	000c5e16 	.word	0x000c5e16

000b8438 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b8438:	b513      	push	{r0, r1, r4, lr}
   b843a:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b843c:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b843e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b8442:	f00a f849 	bl	c24d8 <gmtime>
    return setRtcFromTm(tm, lock);
   b8446:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b844a:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b844c:	4620      	mov	r0, r4
   b844e:	f7ff ffa7 	bl	b83a0 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b8452:	b002      	add	sp, #8
   b8454:	bd10      	pop	{r4, pc}
	...

000b8458 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b8458:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b845a:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b845c:	b089      	sub	sp, #36	; 0x24
   b845e:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8460:	bb75      	cbnz	r5, b84c0 <_ZN6AB18054loopEv+0x68>
   b8462:	f007 ff1d 	bl	c02a0 <_ZN9TimeClass7isValidEv>
   b8466:	b358      	cbz	r0, b84c0 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b8468:	2600      	movs	r6, #0
   b846a:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b846c:	a904      	add	r1, sp, #16
   b846e:	4628      	mov	r0, r5
        tm = 0;
   b8470:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b8474:	f004 ff9e 	bl	bd3b4 <spark_sync_time_last>
   b8478:	b310      	cbz	r0, b84c0 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b847a:	2501      	movs	r5, #1
   b847c:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b847e:	f007 ff2c 	bl	c02da <_ZN9TimeClass3nowEv>
   b8482:	17c3      	asrs	r3, r0, #31
   b8484:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b8488:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b848a:	9500      	str	r5, [sp, #0]
   b848c:	4620      	mov	r0, r4
   b848e:	f7ff ffd3 	bl	b8438 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b8492:	a902      	add	r1, sp, #8
   b8494:	4620      	mov	r0, r4
        time = 0;
   b8496:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b849a:	f7ff ff39 	bl	b8310 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b849e:	4b13      	ldr	r3, [pc, #76]	; (b84ec <_ZN6AB18054loopEv+0x94>)
   b84a0:	4913      	ldr	r1, [pc, #76]	; (b84f0 <_ZN6AB18054loopEv+0x98>)
   b84a2:	681b      	ldr	r3, [r3, #0]
   b84a4:	9300      	str	r3, [sp, #0]
   b84a6:	a804      	add	r0, sp, #16
   b84a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b84ac:	f007 feb6 	bl	c021c <_ZN9TimeClass6formatExPKc>
   b84b0:	4810      	ldr	r0, [pc, #64]	; (b84f4 <_ZN6AB18054loopEv+0x9c>)
   b84b2:	9a04      	ldr	r2, [sp, #16]
   b84b4:	4910      	ldr	r1, [pc, #64]	; (b84f8 <_ZN6AB18054loopEv+0xa0>)
   b84b6:	f7fb fe42 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b84ba:	a804      	add	r0, sp, #16
   b84bc:	f007 fb4c 	bl	bfb58 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b84c0:	6963      	ldr	r3, [r4, #20]
   b84c2:	b18b      	cbz	r3, b84e8 <_ZN6AB18054loopEv+0x90>
   b84c4:	f004 fc52 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b84c8:	6923      	ldr	r3, [r4, #16]
   b84ca:	1ac0      	subs	r0, r0, r3
   b84cc:	6963      	ldr	r3, [r4, #20]
   b84ce:	4298      	cmp	r0, r3
   b84d0:	d30a      	bcc.n	b84e8 <_ZN6AB18054loopEv+0x90>
   b84d2:	f004 fc4b 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b84d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b84da:	6120      	str	r0, [r4, #16]
            setWDT();
   b84dc:	4620      	mov	r0, r4
}
   b84de:	b009      	add	sp, #36	; 0x24
   b84e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b84e4:	f7ff bc0c 	b.w	b7d00 <_ZN6AB18056setWDTEi>
}
   b84e8:	b009      	add	sp, #36	; 0x24
   b84ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b84ec:	2003d684 	.word	0x2003d684
   b84f0:	2003e6a8 	.word	0x2003e6a8
   b84f4:	2003e4c0 	.word	0x2003e4c0
   b84f8:	000c5e31 	.word	0x000c5e31

000b84fc <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b84fc:	b530      	push	{r4, r5, lr}
   b84fe:	4604      	mov	r4, r0
   b8500:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b8502:	b111      	cbz	r1, b850a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b8504:	6840      	ldr	r0, [r0, #4]
   b8506:	f005 fd67 	bl	bdfd8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b850a:	4620      	mov	r0, r4
   b850c:	f7ff fb64 	bl	b7bd8 <_ZN6AB180510detectChipEv>
   b8510:	ad06      	add	r5, sp, #24
   b8512:	2800      	cmp	r0, #0
   b8514:	d037      	beq.n	b8586 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b8516:	4620      	mov	r0, r4
   b8518:	f7ff fc9c 	bl	b7e54 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b851c:	2301      	movs	r3, #1
   b851e:	461a      	mov	r2, r3
   b8520:	2110      	movs	r1, #16
   b8522:	4620      	mov	r0, r4
   b8524:	f7ff fc6d 	bl	b7e02 <_ZN6AB180510isBitClearEhhb>
   b8528:	b1d8      	cbz	r0, b8562 <_ZN6AB18055setupEb+0x66>
   b852a:	f007 feb9 	bl	c02a0 <_ZN9TimeClass7isValidEv>
   b852e:	b9c0      	cbnz	r0, b8562 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b8530:	a902      	add	r1, sp, #8
   b8532:	4620      	mov	r0, r4
   b8534:	f7ff feec 	bl	b8310 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b8538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b853c:	f007 fdb4 	bl	c00a8 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8540:	4b13      	ldr	r3, [pc, #76]	; (b8590 <_ZN6AB18055setupEb+0x94>)
   b8542:	4914      	ldr	r1, [pc, #80]	; (b8594 <_ZN6AB18055setupEb+0x98>)
   b8544:	681b      	ldr	r3, [r3, #0]
   b8546:	9300      	str	r3, [sp, #0]
   b8548:	4628      	mov	r0, r5
   b854a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b854e:	f007 fe65 	bl	c021c <_ZN9TimeClass6formatExPKc>
   b8552:	4811      	ldr	r0, [pc, #68]	; (b8598 <_ZN6AB18055setupEb+0x9c>)
   b8554:	9a06      	ldr	r2, [sp, #24]
   b8556:	4911      	ldr	r1, [pc, #68]	; (b859c <_ZN6AB18055setupEb+0xa0>)
   b8558:	f7fb fdf1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b855c:	4628      	mov	r0, r5
   b855e:	f007 fafb 	bl	bfb58 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8562:	4b0f      	ldr	r3, [pc, #60]	; (b85a0 <_ZN6AB18055setupEb+0xa4>)
   b8564:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b8566:	4b0f      	ldr	r3, [pc, #60]	; (b85a4 <_ZN6AB18055setupEb+0xa8>)
   b8568:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b856a:	4b0f      	ldr	r3, [pc, #60]	; (b85a8 <_ZN6AB18055setupEb+0xac>)
   b856c:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b856e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b8572:	2300      	movs	r3, #0
   b8574:	a802      	add	r0, sp, #8
   b8576:	9500      	str	r5, [sp, #0]
   b8578:	f7fd f968 	bl	b584c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b857c:	4628      	mov	r0, r5
   b857e:	f7fc ffac 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b8582:	b00b      	add	sp, #44	; 0x2c
   b8584:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b8586:	4909      	ldr	r1, [pc, #36]	; (b85ac <_ZN6AB18055setupEb+0xb0>)
   b8588:	4803      	ldr	r0, [pc, #12]	; (b8598 <_ZN6AB18055setupEb+0x9c>)
   b858a:	f7ff fa9f 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
   b858e:	e7e8      	b.n	b8562 <_ZN6AB18055setupEb+0x66>
   b8590:	2003d684 	.word	0x2003d684
   b8594:	2003e6a8 	.word	0x2003e6a8
   b8598:	2003e4c0 	.word	0x2003e4c0
   b859c:	000c5e47 	.word	0x000c5e47
   b85a0:	000b7d85 	.word	0x000b7d85
   b85a4:	000b54b7 	.word	0x000b54b7
   b85a8:	000b54a3 	.word	0x000b54a3
   b85ac:	000c5e64 	.word	0x000c5e64

000b85b0 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b85b0:	4b01      	ldr	r3, [pc, #4]	; (b85b8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b85b2:	4a02      	ldr	r2, [pc, #8]	; (b85bc <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b85b4:	601a      	str	r2, [r3, #0]
}
   b85b6:	4770      	bx	lr
   b85b8:	2003e4c0 	.word	0x2003e4c0
   b85bc:	000c5e7c 	.word	0x000c5e7c

000b85c0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b85c0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b85c2:	2301      	movs	r3, #1
   b85c4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b85c6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b85c8:	4604      	mov	r4, r0
        if (th->func) {
   b85ca:	b143      	cbz	r3, b85de <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b85cc:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b85ce:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b85d0:	2301      	movs	r3, #1
   b85d2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b85d4:	2000      	movs	r0, #0
    }
   b85d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b85da:	f004 bb97 	b.w	bcd0c <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b85de:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b85e0:	2800      	cmp	r0, #0
   b85e2:	d0f5      	beq.n	b85d0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b85e4:	6883      	ldr	r3, [r0, #8]
   b85e6:	b90b      	cbnz	r3, b85ec <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b85e8:	f008 f99e 	bl	c0928 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b85ec:	68c3      	ldr	r3, [r0, #12]
   b85ee:	e7ee      	b.n	b85ce <_ZN6Thread3runEPv+0xe>

000b85f0 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b85f0:	2a01      	cmp	r2, #1
   b85f2:	d102      	bne.n	b85fa <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b85f4:	6001      	str	r1, [r0, #0]
      }
   b85f6:	2000      	movs	r0, #0
   b85f8:	4770      	bx	lr
	  switch (__op)
   b85fa:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b85fc:	bf04      	itt	eq
   b85fe:	680b      	ldreq	r3, [r1, #0]
   b8600:	6003      	streq	r3, [r0, #0]
	      break;
   b8602:	e7f8      	b.n	b85f6 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b8604 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b8604:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b8606:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b8608:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b860a:	b135      	cbz	r5, b861a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b860c:	4628      	mov	r0, r5
   b860e:	f7fc ff64 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8612:	2110      	movs	r1, #16
   b8614:	4628      	mov	r0, r5
   b8616:	f7fb fd42 	bl	b409e <_ZdlPvj>
   b861a:	4620      	mov	r0, r4
   b861c:	2114      	movs	r1, #20
      }
   b861e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b8622:	f7fb bd3c 	b.w	b409e <_ZdlPvj>

000b8626 <_ZN6Thread7disposeEv>:
    void dispose()
   b8626:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8628:	6803      	ldr	r3, [r0, #0]
   b862a:	4604      	mov	r4, r0
        if (!isValid())
   b862c:	b1ab      	cbz	r3, b865a <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b862e:	6858      	ldr	r0, [r3, #4]
   b8630:	f004 fb1c 	bl	bcc6c <os_thread_is_current>
   b8634:	b988      	cbnz	r0, b865a <_ZN6Thread7disposeEv+0x34>
   b8636:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b8638:	7c5a      	ldrb	r2, [r3, #17]
   b863a:	b912      	cbnz	r2, b8642 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b863c:	6858      	ldr	r0, [r3, #4]
   b863e:	f004 fb1d 	bl	bcc7c <os_thread_join>
        os_thread_cleanup(d_->handle);
   b8642:	6823      	ldr	r3, [r4, #0]
   b8644:	6858      	ldr	r0, [r3, #4]
   b8646:	f004 fb21 	bl	bcc8c <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b864a:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b864c:	2300      	movs	r3, #0
   b864e:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b8650:	b118      	cbz	r0, b865a <_ZN6Thread7disposeEv+0x34>
    }
   b8652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8656:	f7ff bfd5 	b.w	b8604 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b865a:	bd10      	pop	{r4, pc}

000b865c <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b865c:	4a05      	ldr	r2, [pc, #20]	; (b8674 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b865e:	6002      	str	r2, [r0, #0]
   b8660:	2200      	movs	r2, #0
   b8662:	6042      	str	r2, [r0, #4]
   b8664:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b8666:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b866a:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b866e:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b8672:	4770      	bx	lr
   b8674:	000c5ebc 	.word	0x000c5ebc

000b8678 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b8678:	b510      	push	{r4, lr}
    if (!_instance) {
   b867a:	4c07      	ldr	r4, [pc, #28]	; (b8698 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b867c:	6823      	ldr	r3, [r4, #0]
   b867e:	b943      	cbnz	r3, b8692 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b8680:	f240 4064 	movw	r0, #1124	; 0x464
   b8684:	f7fb fd07 	bl	b4096 <_Znwj>
   b8688:	4603      	mov	r3, r0
   b868a:	b108      	cbz	r0, b8690 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b868c:	f7ff ffe6 	bl	b865c <_ZN19BackgroundPublishRKC1Ev>
   b8690:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b8692:	6820      	ldr	r0, [r4, #0]
   b8694:	bd10      	pop	{r4, pc}
   b8696:	bf00      	nop
   b8698:	2003e4c8 	.word	0x2003e4c8

000b869c <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b869c:	b538      	push	{r3, r4, r5, lr}
   b869e:	4604      	mov	r4, r0
    if(thread)
   b86a0:	6840      	ldr	r0, [r0, #4]
   b86a2:	b190      	cbz	r0, b86ca <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b86a4:	2302      	movs	r3, #2
   b86a6:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b86a8:	f7ff ffbd 	bl	b8626 <_ZN6Thread7disposeEv>
        delete thread;
   b86ac:	6865      	ldr	r5, [r4, #4]
   b86ae:	b155      	cbz	r5, b86c6 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b86b0:	4628      	mov	r0, r5
   b86b2:	f7ff ffb8 	bl	b8626 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b86b6:	6828      	ldr	r0, [r5, #0]
   b86b8:	b108      	cbz	r0, b86be <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b86ba:	f7ff ffa3 	bl	b8604 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b86be:	2104      	movs	r1, #4
   b86c0:	4628      	mov	r0, r5
   b86c2:	f7fb fcec 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b86c6:	2300      	movs	r3, #0
   b86c8:	6063      	str	r3, [r4, #4]
    }
}
   b86ca:	bd38      	pop	{r3, r4, r5, pc}

000b86cc <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b86cc:	b510      	push	{r4, lr}
   b86ce:	4b05      	ldr	r3, [pc, #20]	; (b86e4 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b86d0:	6003      	str	r3, [r0, #0]
   b86d2:	4604      	mov	r4, r0
    stop();
   b86d4:	f7ff ffe2 	bl	b869c <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b86d8:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b86dc:	f7fc fefd 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b86e0:	4620      	mov	r0, r4
   b86e2:	bd10      	pop	{r4, pc}
   b86e4:	000c5ebc 	.word	0x000c5ebc

000b86e8 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b86e8:	b510      	push	{r4, lr}
   b86ea:	4604      	mov	r4, r0
}
   b86ec:	f7ff ffee 	bl	b86cc <_ZN19BackgroundPublishRKD1Ev>
   b86f0:	4620      	mov	r0, r4
   b86f2:	f240 4164 	movw	r1, #1124	; 0x464
   b86f6:	f7fb fcd2 	bl	b409e <_ZdlPvj>
   b86fa:	4620      	mov	r0, r4
   b86fc:	bd10      	pop	{r4, pc}

000b86fe <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b86fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8700:	4604      	mov	r4, r0
   b8702:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b8704:	f100 060d 	add.w	r6, r0, #13
   b8708:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b870c:	7b23      	ldrb	r3, [r4, #12]
   b870e:	b91b      	cbnz	r3, b8718 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b8710:	2001      	movs	r0, #1
   b8712:	f004 ff47 	bl	bd5a4 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b8716:	e7f9      	b.n	b870c <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b8718:	7b23      	ldrb	r3, [r4, #12]
   b871a:	2b02      	cmp	r3, #2
   b871c:	d064      	beq.n	b87e8 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b871e:	68a0      	ldr	r0, [r4, #8]
   b8720:	f004 fac4 	bl	bccac <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b8724:	68a0      	ldr	r0, [r4, #8]
   b8726:	f004 fac9 	bl	bccbc <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b872a:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b872e:	f88d 3000 	strb.w	r3, [sp]
   b8732:	463a      	mov	r2, r7
   b8734:	233c      	movs	r3, #60	; 0x3c
   b8736:	4631      	mov	r1, r6
   b8738:	a806      	add	r0, sp, #24
   b873a:	f005 f9ff 	bl	bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b873e:	9d06      	ldr	r5, [sp, #24]
   b8740:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8742:	b933      	cbnz	r3, b8752 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b8744:	7b23      	ldrb	r3, [r4, #12]
   b8746:	2b02      	cmp	r3, #2
   b8748:	d003      	beq.n	b8752 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b874a:	2001      	movs	r0, #1
   b874c:	f004 ff2a 	bl	bd5a4 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8750:	e7f5      	b.n	b873e <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b8752:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8756:	b31b      	cbz	r3, b87a0 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b8758:	2000      	movs	r0, #0
   b875a:	f004 fd99 	bl	bd290 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b875e:	b120      	cbz	r0, b876a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b8760:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b8762:	b913      	cbnz	r3, b876a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b8764:	f004 fdee 	bl	bd344 <spark_process>
    }
   b8768:	e7fa      	b.n	b8760 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b876a:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b876c:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b8770:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b8772:	1e59      	subs	r1, r3, #1
   b8774:	424b      	negs	r3, r1
   b8776:	414b      	adcs	r3, r1
   b8778:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b877c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8780:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b8784:	b90b      	cbnz	r3, b878a <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b8786:	f008 f8cf 	bl	c0928 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b878a:	ab05      	add	r3, sp, #20
   b878c:	9300      	str	r3, [sp, #0]
   b878e:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b8792:	ab04      	add	r3, sp, #16
   b8794:	aa03      	add	r2, sp, #12
   b8796:	f10d 010b 	add.w	r1, sp, #11
   b879a:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b879e:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b87a0:	68a0      	ldr	r0, [r4, #8]
   b87a2:	f004 fa83 	bl	bccac <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b87a6:	7b23      	ldrb	r3, [r4, #12]
   b87a8:	2b02      	cmp	r3, #2
   b87aa:	d017      	beq.n	b87dc <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b87ac:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b87b0:	2500      	movs	r5, #0
   b87b2:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b87b6:	b143      	cbz	r3, b87ca <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b87b8:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b87bc:	2203      	movs	r2, #3
   b87be:	4608      	mov	r0, r1
   b87c0:	4798      	blx	r3
	    _M_manager = nullptr;
   b87c2:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b87c6:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b87ca:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b87cc:	68a0      	ldr	r0, [r4, #8]
   b87ce:	7323      	strb	r3, [r4, #12]
   b87d0:	f004 fa74 	bl	bccbc <os_mutex_unlock>
   b87d4:	a807      	add	r0, sp, #28
   b87d6:	f7fb ff6b 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b87da:	e797      	b.n	b870c <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b87dc:	68a0      	ldr	r0, [r4, #8]
   b87de:	f004 fa6d 	bl	bccbc <os_mutex_unlock>
   b87e2:	a807      	add	r0, sp, #28
   b87e4:	f7fb ff64 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b87e8:	b009      	add	sp, #36	; 0x24
   b87ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b87ec <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b87ec:	6800      	ldr	r0, [r0, #0]
   b87ee:	f7ff bf86 	b.w	b86fe <_ZN19BackgroundPublishRK8thread_fEv>

000b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b87f2:	b513      	push	{r0, r1, r4, lr}
   b87f4:	460b      	mov	r3, r1
   b87f6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b87f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b87fc:	466c      	mov	r4, sp
   b87fe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8802:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8806:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b880a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b880e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8812:	b002      	add	sp, #8
   b8814:	bd10      	pop	{r4, pc}
	...

000b8818 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b8818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b881c:	4606      	mov	r6, r0
   b881e:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b8820:	2014      	movs	r0, #20
   b8822:	4926      	ldr	r1, [pc, #152]	; (b88bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b8824:	4617      	mov	r7, r2
   b8826:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b8828:	f008 f874 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   b882c:	4604      	mov	r4, r0
   b882e:	b130      	cbz	r0, b883e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b8830:	2000      	movs	r0, #0
            exited(false) {
   b8832:	e9c4 0000 	strd	r0, r0, [r4]
   b8836:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b883a:	7420      	strb	r0, [r4, #16]
   b883c:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b883e:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b8840:	2c00      	cmp	r4, #0
   b8842:	d031      	beq.n	b88a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b8844:	491d      	ldr	r1, [pc, #116]	; (b88bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b8846:	2010      	movs	r0, #16
   b8848:	f008 f864 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   b884c:	4605      	mov	r5, r0
   b884e:	b168      	cbz	r0, b886c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b8850:	2300      	movs	r3, #0
   b8852:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8854:	4601      	mov	r1, r0
   b8856:	4638      	mov	r0, r7
   b8858:	f7ff ffcb 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b885c:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b885e:	68aa      	ldr	r2, [r5, #8]
   b8860:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8862:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8864:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8866:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8868:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b886a:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b886c:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b886e:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b8870:	b137      	cbz	r7, b8880 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b8872:	4638      	mov	r0, r7
   b8874:	f7fc fe31 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8878:	2110      	movs	r1, #16
   b887a:	4638      	mov	r0, r7
   b887c:	f7fb fc0f 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8880:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b8882:	6803      	ldr	r3, [r0, #0]
   b8884:	b183      	cbz	r3, b88a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b8886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8888:	464a      	mov	r2, r9
   b888a:	e9cd 0300 	strd	r0, r3, [sp]
   b888e:	4641      	mov	r1, r8
   b8890:	4b0b      	ldr	r3, [pc, #44]	; (b88c0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b8892:	3004      	adds	r0, #4
   b8894:	f004 f9e2 	bl	bcc5c <os_thread_create>
   b8898:	b930      	cbnz	r0, b88a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b889a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b889c:	7c1b      	ldrb	r3, [r3, #16]
   b889e:	b94b      	cbnz	r3, b88b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b88a0:	2001      	movs	r0, #1
   b88a2:	f004 fa53 	bl	bcd4c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b88a6:	e7f8      	b.n	b889a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b88a8:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b88aa:	2300      	movs	r3, #0
   b88ac:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b88ae:	b108      	cbz	r0, b88b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b88b0:	f7ff fea8 	bl	b8604 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b88b4:	4630      	mov	r0, r6
   b88b6:	b003      	add	sp, #12
   b88b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b88bc:	000c69bc 	.word	0x000c69bc
   b88c0:	000b85c1 	.word	0x000b85c1

000b88c4 <_ZN19BackgroundPublishRK5startEv>:
{
   b88c4:	b530      	push	{r4, r5, lr}
    if(!thread)
   b88c6:	6843      	ldr	r3, [r0, #4]
{
   b88c8:	b087      	sub	sp, #28
   b88ca:	4604      	mov	r4, r0
    if(!thread)
   b88cc:	b9c3      	cbnz	r3, b8900 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b88ce:	3008      	adds	r0, #8
   b88d0:	f004 f9e4 	bl	bcc9c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b88d4:	4b0b      	ldr	r3, [pc, #44]	; (b8904 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b88d6:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b88d8:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b88da:	4b0b      	ldr	r3, [pc, #44]	; (b8908 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b88dc:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b88de:	9304      	str	r3, [sp, #16]
   b88e0:	f7fb fbd9 	bl	b4096 <_Znwj>
   b88e4:	4605      	mov	r5, r0
   b88e6:	b138      	cbz	r0, b88f8 <_ZN19BackgroundPublishRK5startEv+0x34>
   b88e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b88ec:	9300      	str	r3, [sp, #0]
   b88ee:	4907      	ldr	r1, [pc, #28]	; (b890c <_ZN19BackgroundPublishRK5startEv+0x48>)
   b88f0:	2302      	movs	r3, #2
   b88f2:	aa02      	add	r2, sp, #8
   b88f4:	f7ff ff90 	bl	b8818 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b88f8:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b88fa:	a802      	add	r0, sp, #8
   b88fc:	f7fc fded 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b8900:	b007      	add	sp, #28
   b8902:	bd30      	pop	{r4, r5, pc}
   b8904:	000b87ed 	.word	0x000b87ed
   b8908:	000b85f1 	.word	0x000b85f1
   b890c:	000c5ea0 	.word	0x000c5ea0

000b8910 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b8910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8914:	4604      	mov	r4, r0
   b8916:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b8918:	6880      	ldr	r0, [r0, #8]
   b891a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b891c:	4698      	mov	r8, r3
   b891e:	460d      	mov	r5, r1
   b8920:	4616      	mov	r6, r2
   b8922:	f004 f9c3 	bl	bccac <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b8926:	6863      	ldr	r3, [r4, #4]
   b8928:	b11b      	cbz	r3, b8932 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b892a:	7b23      	ldrb	r3, [r4, #12]
   b892c:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b8930:	b133      	cbz	r3, b8940 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b8932:	68a0      	ldr	r0, [r4, #8]
   b8934:	f004 f9c2 	bl	bccbc <os_mutex_unlock>
    {
        return false;
   b8938:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b893a:	b005      	add	sp, #20
   b893c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8940:	68a0      	ldr	r0, [r4, #8]
   b8942:	f004 f9bb 	bl	bccbc <os_mutex_unlock>
    if(!name)
   b8946:	2d00      	cmp	r5, #0
   b8948:	d03d      	beq.n	b89c6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b894a:	2240      	movs	r2, #64	; 0x40
   b894c:	4629      	mov	r1, r5
   b894e:	f104 000d 	add.w	r0, r4, #13
   b8952:	f009 fef6 	bl	c2742 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b8956:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b895a:	b38e      	cbz	r6, b89c0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b895c:	f240 4201 	movw	r2, #1025	; 0x401
   b8960:	4631      	mov	r1, r6
   b8962:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b8966:	f009 feec 	bl	c2742 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b896a:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b896e:	2300      	movs	r3, #0
   b8970:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8972:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b8974:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b8978:	b13b      	cbz	r3, b898a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b897a:	2202      	movs	r2, #2
   b897c:	4639      	mov	r1, r7
   b897e:	4668      	mov	r0, sp
   b8980:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8982:	68fb      	ldr	r3, [r7, #12]
   b8984:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8986:	68bb      	ldr	r3, [r7, #8]
   b8988:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b898a:	4629      	mov	r1, r5
   b898c:	4668      	mov	r0, sp
   b898e:	f7ff ff30 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8992:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8994:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b8998:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b899c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b899e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b89a0:	4668      	mov	r0, sp
   b89a2:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b89a6:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b89aa:	9203      	str	r2, [sp, #12]
   b89ac:	f7fc fd95 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b89b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b89b2:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b89b6:	2001      	movs	r0, #1
    event_flags = flags;
   b89b8:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b89bc:	7320      	strb	r0, [r4, #12]
    return true;
   b89be:	e7bc      	b.n	b893a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b89c0:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b89c4:	e7d3      	b.n	b896e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b89c6:	4628      	mov	r0, r5
   b89c8:	e7b7      	b.n	b893a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b89cc <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b89cc:	b510      	push	{r4, lr}
   b89ce:	4b05      	ldr	r3, [pc, #20]	; (b89e4 <_ZN10JsonBufferD1Ev+0x18>)
   b89d0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b89d2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b89d4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b89d6:	b91b      	cbnz	r3, b89e0 <_ZN10JsonBufferD1Ev+0x14>
   b89d8:	6840      	ldr	r0, [r0, #4]
   b89da:	b108      	cbz	r0, b89e0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b89dc:	f004 fd6a 	bl	bd4b4 <free>
	}
}
   b89e0:	4620      	mov	r0, r4
   b89e2:	bd10      	pop	{r4, pc}
   b89e4:	000c5edc 	.word	0x000c5edc

000b89e8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b89e8:	b510      	push	{r4, lr}
   b89ea:	4604      	mov	r4, r0
}
   b89ec:	f7ff ffee 	bl	b89cc <_ZN10JsonBufferD1Ev>
   b89f0:	4620      	mov	r0, r4
   b89f2:	2114      	movs	r1, #20
   b89f4:	f7fb fb53 	bl	b409e <_ZdlPvj>
   b89f8:	4620      	mov	r0, r4
   b89fa:	bd10      	pop	{r4, pc}

000b89fc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b89fc:	b510      	push	{r4, lr}
   b89fe:	4b03      	ldr	r3, [pc, #12]	; (b8a0c <_ZN10JsonWriterD1Ev+0x10>)
   b8a00:	6003      	str	r3, [r0, #0]
   b8a02:	4604      	mov	r4, r0
   b8a04:	f7ff ffe2 	bl	b89cc <_ZN10JsonBufferD1Ev>

}
   b8a08:	4620      	mov	r0, r4
   b8a0a:	bd10      	pop	{r4, pc}
   b8a0c:	000c5efc 	.word	0x000c5efc

000b8a10 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b8a10:	b510      	push	{r4, lr}
   b8a12:	4604      	mov	r4, r0
}
   b8a14:	f7ff fff2 	bl	b89fc <_ZN10JsonWriterD1Ev>
   b8a18:	4620      	mov	r0, r4
   b8a1a:	2130      	movs	r1, #48	; 0x30
   b8a1c:	f7fb fb3f 	bl	b409e <_ZdlPvj>
   b8a20:	4620      	mov	r0, r4
   b8a22:	bd10      	pop	{r4, pc}

000b8a24 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b8a24:	b510      	push	{r4, lr}
   b8a26:	4b03      	ldr	r3, [pc, #12]	; (b8a34 <_ZN12JsonModifierD1Ev+0x10>)
   b8a28:	6003      	str	r3, [r0, #0]
   b8a2a:	4604      	mov	r4, r0
   b8a2c:	f7ff ffe6 	bl	b89fc <_ZN10JsonWriterD1Ev>

}
   b8a30:	4620      	mov	r0, r4
   b8a32:	bd10      	pop	{r4, pc}
   b8a34:	000c5f0c 	.word	0x000c5f0c

000b8a38 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b8a38:	b510      	push	{r4, lr}
   b8a3a:	4604      	mov	r4, r0
}
   b8a3c:	f7ff fff2 	bl	b8a24 <_ZN12JsonModifierD1Ev>
   b8a40:	4620      	mov	r0, r4
   b8a42:	2140      	movs	r1, #64	; 0x40
   b8a44:	f7fb fb2b 	bl	b409e <_ZdlPvj>
   b8a48:	4620      	mov	r0, r4
   b8a4a:	bd10      	pop	{r4, pc}

000b8a4c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b8a4c:	b510      	push	{r4, lr}
   b8a4e:	4b07      	ldr	r3, [pc, #28]	; (b8a6c <_ZN10JsonParserD1Ev+0x20>)
   b8a50:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b8a52:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b8a54:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b8a56:	b91b      	cbnz	r3, b8a60 <_ZN10JsonParserD1Ev+0x14>
   b8a58:	6940      	ldr	r0, [r0, #20]
   b8a5a:	b108      	cbz	r0, b8a60 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b8a5c:	f004 fd2a 	bl	bd4b4 <free>
JsonParser::~JsonParser() {
   b8a60:	4620      	mov	r0, r4
   b8a62:	f7ff ffb3 	bl	b89cc <_ZN10JsonBufferD1Ev>
}
   b8a66:	4620      	mov	r0, r4
   b8a68:	bd10      	pop	{r4, pc}
   b8a6a:	bf00      	nop
   b8a6c:	000c5eec 	.word	0x000c5eec

000b8a70 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b8a70:	b510      	push	{r4, lr}
   b8a72:	4604      	mov	r4, r0
}
   b8a74:	f7ff ffea 	bl	b8a4c <_ZN10JsonParserD1Ev>
   b8a78:	4620      	mov	r0, r4
   b8a7a:	212c      	movs	r1, #44	; 0x2c
   b8a7c:	f7fb fb0f 	bl	b409e <_ZdlPvj>
   b8a80:	4620      	mov	r0, r4
   b8a82:	bd10      	pop	{r4, pc}

000b8a84 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b8a84:	4a03      	ldr	r2, [pc, #12]	; (b8a94 <_ZN10JsonBufferC1Ev+0x10>)
   b8a86:	6002      	str	r2, [r0, #0]
   b8a88:	2200      	movs	r2, #0
   b8a8a:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8a8e:	60c2      	str	r2, [r0, #12]
   b8a90:	7402      	strb	r2, [r0, #16]
}
   b8a92:	4770      	bx	lr
   b8a94:	000c5edc 	.word	0x000c5edc

000b8a98 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b8a98:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b8a9a:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b8a9c:	4604      	mov	r4, r0
   b8a9e:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b8aa0:	b10b      	cbz	r3, b8aa6 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b8aa2:	2000      	movs	r0, #0
}
   b8aa4:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b8aa6:	6840      	ldr	r0, [r0, #4]
   b8aa8:	b138      	cbz	r0, b8aba <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b8aaa:	f004 fd0b 	bl	bd4c4 <realloc>
		if (newBuffer) {
   b8aae:	2800      	cmp	r0, #0
   b8ab0:	d0f7      	beq.n	b8aa2 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b8ab2:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b8ab6:	2001      	movs	r0, #1
   b8ab8:	e7f4      	b.n	b8aa4 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b8aba:	4608      	mov	r0, r1
   b8abc:	f004 fcf2 	bl	bd4a4 <malloc>
   b8ac0:	e7f5      	b.n	b8aae <_ZN10JsonBuffer8allocateEj+0x16>

000b8ac2 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8ac2:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8ac4:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8ac6:	460e      	mov	r6, r1
   b8ac8:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8aca:	18d1      	adds	r1, r2, r3
   b8acc:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8ace:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8ad0:	b172      	cbz	r2, b8af0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b8ad2:	6882      	ldr	r2, [r0, #8]
   b8ad4:	428a      	cmp	r2, r1
   b8ad6:	d30b      	bcc.n	b8af0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b8ad8:	6860      	ldr	r0, [r4, #4]
   b8ada:	68e3      	ldr	r3, [r4, #12]
   b8adc:	462a      	mov	r2, r5
   b8ade:	4631      	mov	r1, r6
   b8ae0:	4418      	add	r0, r3
   b8ae2:	f009 fd1f 	bl	c2524 <memcpy>
	offset += dataLen;
   b8ae6:	68e2      	ldr	r2, [r4, #12]
   b8ae8:	442a      	add	r2, r5
   b8aea:	60e2      	str	r2, [r4, #12]
	return true;
   b8aec:	2001      	movs	r0, #1
}
   b8aee:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b8af0:	4620      	mov	r0, r4
   b8af2:	f7ff ffd1 	bl	b8a98 <_ZN10JsonBuffer8allocateEj>
   b8af6:	2800      	cmp	r0, #0
   b8af8:	d1ee      	bne.n	b8ad8 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b8afa:	e7f8      	b.n	b8aee <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b8afc <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b8afc:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b8afe:	2100      	movs	r1, #0
   b8b00:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b8b02:	b123      	cbz	r3, b8b0e <_ZN10JsonBuffer5clearEv+0x12>
   b8b04:	6882      	ldr	r2, [r0, #8]
   b8b06:	b112      	cbz	r2, b8b0e <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b8b08:	4618      	mov	r0, r3
   b8b0a:	f009 bd33 	b.w	c2574 <memset>
}
   b8b0e:	4770      	bx	lr

000b8b10 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b8b10:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b8b12:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b8b16:	2200      	movs	r2, #0
   b8b18:	60c2      	str	r2, [r0, #12]
   b8b1a:	2201      	movs	r2, #1
   b8b1c:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b8b1e:	6143      	str	r3, [r0, #20]
   b8b20:	4a02      	ldr	r2, [pc, #8]	; (b8b2c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b8b22:	9b02      	ldr	r3, [sp, #8]
   b8b24:	6002      	str	r2, [r0, #0]
   b8b26:	61c3      	str	r3, [r0, #28]
}
   b8b28:	bd10      	pop	{r4, pc}
   b8b2a:	bf00      	nop
   b8b2c:	000c5eec 	.word	0x000c5eec

000b8b30 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8b30:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8b34:	4283      	cmp	r3, r0
   b8b36:	d904      	bls.n	b8b42 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b8b38:	7802      	ldrb	r2, [r0, #0]
   b8b3a:	2a02      	cmp	r2, #2
   b8b3c:	d002      	beq.n	b8b44 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8b3e:	3010      	adds	r0, #16
   b8b40:	e7f8      	b.n	b8b34 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b8b42:	2000      	movs	r0, #0
}
   b8b44:	4770      	bx	lr

000b8b46 <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b8b46:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8b4a:	4298      	cmp	r0, r3
   b8b4c:	d204      	bcs.n	b8b58 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8b4e:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8b50:	2b01      	cmp	r3, #1
   b8b52:	bf18      	it	ne
   b8b54:	2000      	movne	r0, #0
   b8b56:	4770      	bx	lr
   b8b58:	2000      	movs	r0, #0
}
   b8b5a:	4770      	bx	lr

000b8b5c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8b5c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8b5e:	6813      	ldr	r3, [r2, #0]
   b8b60:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b8b62:	6813      	ldr	r3, [r2, #0]
   b8b64:	f103 0410 	add.w	r4, r3, #16
   b8b68:	6014      	str	r4, [r2, #0]
   b8b6a:	6986      	ldr	r6, [r0, #24]
   b8b6c:	42b4      	cmp	r4, r6
   b8b6e:	d20a      	bcs.n	b8b86 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8b70:	699b      	ldr	r3, [r3, #24]
   b8b72:	688c      	ldr	r4, [r1, #8]
   b8b74:	42a3      	cmp	r3, r4
   b8b76:	da01      	bge.n	b8b7c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b8b78:	42ab      	cmp	r3, r5
   b8b7a:	ddf2      	ble.n	b8b62 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8b7c:	42a3      	cmp	r3, r4
   b8b7e:	bfcc      	ite	gt
   b8b80:	2000      	movgt	r0, #0
   b8b82:	2001      	movle	r0, #1
   b8b84:	e000      	b.n	b8b88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b8b86:	2000      	movs	r0, #0
}
   b8b88:	bd70      	pop	{r4, r5, r6, pc}

000b8b8a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8b8c:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8b90:	4604      	mov	r4, r0
   b8b92:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8b94:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8b96:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b8b98:	9801      	ldr	r0, [sp, #4]
   b8b9a:	69a3      	ldr	r3, [r4, #24]
   b8b9c:	4283      	cmp	r3, r0
   b8b9e:	d90b      	bls.n	b8bb8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8ba0:	6882      	ldr	r2, [r0, #8]
   b8ba2:	688b      	ldr	r3, [r1, #8]
   b8ba4:	429a      	cmp	r2, r3
   b8ba6:	da07      	bge.n	b8bb8 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b8ba8:	42b5      	cmp	r5, r6
   b8baa:	d006      	beq.n	b8bba <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b8bac:	aa01      	add	r2, sp, #4
   b8bae:	4620      	mov	r0, r4
		index++;
   b8bb0:	3501      	adds	r5, #1
		skipObject(container, token);
   b8bb2:	f7ff ffd3 	bl	b8b5c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8bb6:	e7ef      	b.n	b8b98 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b8bb8:	2000      	movs	r0, #0
}
   b8bba:	b002      	add	sp, #8
   b8bbc:	bd70      	pop	{r4, r5, r6, pc}

000b8bbe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8bbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8bc2:	9d08      	ldr	r5, [sp, #32]
   b8bc4:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8bc6:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8bca:	4604      	mov	r4, r0
   b8bcc:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8bce:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8bd0:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8bd2:	9801      	ldr	r0, [sp, #4]
   b8bd4:	69a3      	ldr	r3, [r4, #24]
   b8bd6:	4283      	cmp	r3, r0
   b8bd8:	d91a      	bls.n	b8c10 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8bda:	6882      	ldr	r2, [r0, #8]
   b8bdc:	688b      	ldr	r3, [r1, #8]
   b8bde:	429a      	cmp	r2, r3
   b8be0:	da16      	bge.n	b8c10 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8be2:	42ae      	cmp	r6, r5
   b8be4:	d10b      	bne.n	b8bfe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b8be6:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8be8:	aa01      	add	r2, sp, #4
   b8bea:	4620      	mov	r0, r4
   b8bec:	f7ff ffb6 	bl	b8b5c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8bf0:	b128      	cbz	r0, b8bfe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8bf2:	9b01      	ldr	r3, [sp, #4]
   b8bf4:	f8c8 3000 	str.w	r3, [r8]
}
   b8bf8:	b002      	add	sp, #8
   b8bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8bfe:	aa01      	add	r2, sp, #4
   b8c00:	4620      	mov	r0, r4
   b8c02:	f7ff ffab 	bl	b8b5c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b8c06:	4620      	mov	r0, r4
		index++;
   b8c08:	3601      	adds	r6, #1
		skipObject(container, token);
   b8c0a:	f7ff ffa7 	bl	b8b5c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8c0e:	e7e0      	b.n	b8bd2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8c10:	2000      	movs	r0, #0
   b8c12:	e7f1      	b.n	b8bf8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8c14 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b8c14:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8c16:	3b01      	subs	r3, #1
   b8c18:	2400      	movs	r4, #0
   b8c1a:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8c1e:	1bf6      	subs	r6, r6, r7
   b8c20:	42a6      	cmp	r6, r4
   b8c22:	dd08      	ble.n	b8c36 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b8c24:	42a3      	cmp	r3, r4
   b8c26:	dd06      	ble.n	b8c36 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b8c28:	6845      	ldr	r5, [r0, #4]
   b8c2a:	443d      	add	r5, r7
   b8c2c:	5d2d      	ldrb	r5, [r5, r4]
   b8c2e:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8c32:	3401      	adds	r4, #1
   b8c34:	e7f1      	b.n	b8c1a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b8c36:	2300      	movs	r3, #0
   b8c38:	7013      	strb	r3, [r2, #0]
}
   b8c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8c3e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8c40:	2310      	movs	r3, #16
   b8c42:	466a      	mov	r2, sp
   b8c44:	f7ff ffe6 	bl	b8c14 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b8c48:	4904      	ldr	r1, [pc, #16]	; (b8c5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b8c4a:	4622      	mov	r2, r4
   b8c4c:	4668      	mov	r0, sp
   b8c4e:	f004 fc49 	bl	bd4e4 <sscanf>
}
   b8c52:	1e43      	subs	r3, r0, #1
   b8c54:	4258      	negs	r0, r3
   b8c56:	4158      	adcs	r0, r3
   b8c58:	b004      	add	sp, #16
   b8c5a:	bd10      	pop	{r4, pc}
   b8c5c:	000c4e89 	.word	0x000c4e89

000b8c60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8c62:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8c64:	2310      	movs	r3, #16
   b8c66:	466a      	mov	r2, sp
   b8c68:	f7ff ffd4 	bl	b8c14 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8c6c:	4668      	mov	r0, sp
   b8c6e:	2100      	movs	r1, #0
   b8c70:	f00a fbb0 	bl	c33d4 <strtof>
}
   b8c74:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b8c76:	ed84 0a00 	vstr	s0, [r4]
}
   b8c7a:	b004      	add	sp, #16
   b8c7c:	bd10      	pop	{r4, pc}

000b8c7e <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b8c7e:	b510      	push	{r4, lr}
   b8c80:	4604      	mov	r4, r0
	if (str) {
   b8c82:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8c84:	460b      	mov	r3, r1
	if (str) {
   b8c86:	b128      	cbz	r0, b8c94 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8c88:	f007 f849 	bl	bfd1e <_ZN6String6concatEc>
		length++;
   b8c8c:	68e3      	ldr	r3, [r4, #12]
   b8c8e:	3301      	adds	r3, #1
   b8c90:	60e3      	str	r3, [r4, #12]
}
   b8c92:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8c94:	6860      	ldr	r0, [r4, #4]
   b8c96:	2800      	cmp	r0, #0
   b8c98:	d0f8      	beq.n	b8c8c <_ZN16JsonParserString6appendEc+0xe>
   b8c9a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8c9e:	3a01      	subs	r2, #1
   b8ca0:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8ca2:	bf88      	it	hi
   b8ca4:	5443      	strbhi	r3, [r0, r1]
   b8ca6:	e7f1      	b.n	b8c8c <_ZN16JsonParserString6appendEc+0xe>

000b8ca8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8ca8:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8caa:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cae:	4608      	mov	r0, r1
		str.append((char)unicode);
   b8cb0:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b8cb2:	d804      	bhi.n	b8cbe <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b8cb4:	b003      	add	sp, #12
   b8cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8cba:	f7ff bfe0 	b.w	b8c7e <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8cbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8cc6:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8cca:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8cce:	d207      	bcs.n	b8ce0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b8cd0:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b8cd4:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8cd6:	f7ff ffd2 	bl	b8c7e <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8cda:	9801      	ldr	r0, [sp, #4]
   b8cdc:	4621      	mov	r1, r4
   b8cde:	e7e9      	b.n	b8cb4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8ce0:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8ce2:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8ce6:	9001      	str	r0, [sp, #4]
   b8ce8:	f7ff ffc9 	bl	b8c7e <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8cec:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8cf0:	9801      	ldr	r0, [sp, #4]
   b8cf2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8cf6:	e7ee      	b.n	b8cd6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b8cf8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8cfc:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8cfe:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8d00:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8dd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8d04:	4680      	mov	r8, r0
   b8d06:	460f      	mov	r7, r1
   b8d08:	4615      	mov	r5, r2
			escape = false;
   b8d0a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8d0c:	68b8      	ldr	r0, [r7, #8]
   b8d0e:	42b0      	cmp	r0, r6
   b8d10:	dd5a      	ble.n	b8dc8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8d12:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8d16:	5d99      	ldrb	r1, [r3, r6]
   b8d18:	199a      	adds	r2, r3, r6
		if (escape) {
   b8d1a:	2c00      	cmp	r4, #0
   b8d1c:	d04b      	beq.n	b8db6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8d1e:	2975      	cmp	r1, #117	; 0x75
   b8d20:	d805      	bhi.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8d22:	296d      	cmp	r1, #109	; 0x6d
   b8d24:	d807      	bhi.n	b8d36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8d26:	2962      	cmp	r1, #98	; 0x62
   b8d28:	d01e      	beq.n	b8d68 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8d2a:	2966      	cmp	r1, #102	; 0x66
   b8d2c:	d01e      	beq.n	b8d6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8d2e:	4628      	mov	r0, r5
   b8d30:	f7ff ffa5 	bl	b8c7e <_ZN16JsonParserString6appendEc>
				break;
   b8d34:	e03d      	b.n	b8db2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8d36:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8d3a:	2c07      	cmp	r4, #7
   b8d3c:	d8f7      	bhi.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8d3e:	f20f 0c08 	addw	ip, pc, #8
   b8d42:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8d46:	bf00      	nop
   b8d48:	000b8d71 	.word	0x000b8d71
   b8d4c:	000b8d2f 	.word	0x000b8d2f
   b8d50:	000b8d2f 	.word	0x000b8d2f
   b8d54:	000b8d2f 	.word	0x000b8d2f
   b8d58:	000b8d75 	.word	0x000b8d75
   b8d5c:	000b8d2f 	.word	0x000b8d2f
   b8d60:	000b8d79 	.word	0x000b8d79
   b8d64:	000b8d7d 	.word	0x000b8d7d
				str.append('\b');
   b8d68:	2108      	movs	r1, #8
   b8d6a:	e7e0      	b.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8d6c:	210c      	movs	r1, #12
   b8d6e:	e7de      	b.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8d70:	210a      	movs	r1, #10
   b8d72:	e7dc      	b.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8d74:	210d      	movs	r1, #13
   b8d76:	e7da      	b.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8d78:	2109      	movs	r1, #9
   b8d7a:	e7d8      	b.n	b8d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8d7c:	1d31      	adds	r1, r6, #4
   b8d7e:	4288      	cmp	r0, r1
   b8d80:	dd17      	ble.n	b8db2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8d82:	a902      	add	r1, sp, #8
   b8d84:	3304      	adds	r3, #4
   b8d86:	4433      	add	r3, r6
   b8d88:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8d8a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8d8e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8d92:	429a      	cmp	r2, r3
   b8d94:	d1f9      	bne.n	b8d8a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8d96:	aa01      	add	r2, sp, #4
   b8d98:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8d9a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8d9e:	f004 fba1 	bl	bd4e4 <sscanf>
   b8da2:	2801      	cmp	r0, #1
   b8da4:	d105      	bne.n	b8db2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8da6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8daa:	4629      	mov	r1, r5
   b8dac:	f7ff ff7c 	bl	b8ca8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8db0:	3605      	adds	r6, #5
			escape = false;
   b8db2:	2400      	movs	r4, #0
   b8db4:	e004      	b.n	b8dc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8db6:	295c      	cmp	r1, #92	; 0x5c
   b8db8:	d004      	beq.n	b8dc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8dba:	4628      	mov	r0, r5
   b8dbc:	f7ff ff5f 	bl	b8c7e <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8dc0:	3601      	adds	r6, #1
   b8dc2:	e7a3      	b.n	b8d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8dc4:	2401      	movs	r4, #1
   b8dc6:	e7fb      	b.n	b8dc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8dc8:	2001      	movs	r0, #1
   b8dca:	b004      	add	sp, #16
   b8dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8dd0:	000c67d9 	.word	0x000c67d9

000b8dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8dd6:	460c      	mov	r4, r1
   b8dd8:	4606      	mov	r6, r0
	result = "";
   b8dda:	490c      	ldr	r1, [pc, #48]	; (b8e0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8ddc:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8dde:	4615      	mov	r5, r2
	result = "";
   b8de0:	f006 ff63 	bl	bfcaa <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8de4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8de8:	1ac9      	subs	r1, r1, r3
   b8dea:	3101      	adds	r1, #1
   b8dec:	4628      	mov	r0, r5
   b8dee:	f006 fed1 	bl	bfb94 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8df2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8df4:	466a      	mov	r2, sp
   b8df6:	4621      	mov	r1, r4
   b8df8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8dfa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8dfe:	9500      	str	r5, [sp, #0]
   b8e00:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8e02:	f7ff ff79 	bl	b8cf8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8e06:	b004      	add	sp, #16
   b8e08:	bd70      	pop	{r4, r5, r6, pc}
   b8e0a:	bf00      	nop
   b8e0c:	000c6838 	.word	0x000c6838

000b8e10 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e14:	b089      	sub	sp, #36	; 0x24
   b8e16:	4605      	mov	r5, r0
   b8e18:	4688      	mov	r8, r1
	String keyName;
   b8e1a:	a804      	add	r0, sp, #16
   b8e1c:	4912      	ldr	r1, [pc, #72]	; (b8e68 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8e1e:	4616      	mov	r6, r2
   b8e20:	4699      	mov	r9, r3
	String keyName;
   b8e22:	f006 fee4 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8e26:	2700      	movs	r7, #0
   b8e28:	9700      	str	r7, [sp, #0]
   b8e2a:	464b      	mov	r3, r9
   b8e2c:	aa03      	add	r2, sp, #12
   b8e2e:	4641      	mov	r1, r8
   b8e30:	4628      	mov	r0, r5
   b8e32:	f7ff fec4 	bl	b8bbe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8e36:	4604      	mov	r4, r0
   b8e38:	b170      	cbz	r0, b8e58 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8e3a:	9903      	ldr	r1, [sp, #12]
   b8e3c:	aa04      	add	r2, sp, #16
   b8e3e:	4628      	mov	r0, r5
   b8e40:	f7ff ffc8 	bl	b8dd4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8e44:	4604      	mov	r4, r0
   b8e46:	b908      	cbnz	r0, b8e4c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8e48:	3701      	adds	r7, #1
   b8e4a:	e7ed      	b.n	b8e28 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8e4c:	4631      	mov	r1, r6
   b8e4e:	a804      	add	r0, sp, #16
   b8e50:	f006 ff93 	bl	bfd7a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8e54:	2800      	cmp	r0, #0
   b8e56:	d0f7      	beq.n	b8e48 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8e58:	a804      	add	r0, sp, #16
   b8e5a:	f006 fe7d 	bl	bfb58 <_ZN6StringD1Ev>
}
   b8e5e:	4620      	mov	r0, r4
   b8e60:	b009      	add	sp, #36	; 0x24
   b8e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8e66:	bf00      	nop
   b8e68:	000c6838 	.word	0x000c6838

000b8e6c <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8e6c:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8e6e:	2201      	movs	r2, #1
	offset = 0;
   b8e70:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8e72:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8e74:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8e76:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8e7a:	4770      	bx	lr

000b8e7c <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8e7c:	b508      	push	{r3, lr}
   b8e7e:	4603      	mov	r3, r0
   b8e80:	f7ff fe00 	bl	b8a84 <_ZN10JsonBufferC1Ev>
   b8e84:	4a04      	ldr	r2, [pc, #16]	; (b8e98 <_ZN10JsonWriterC1Ev+0x1c>)
   b8e86:	601a      	str	r2, [r3, #0]
   b8e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8e8c:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8e90:	f7ff ffec 	bl	b8e6c <_ZN10JsonWriter4initEv>
}
   b8e94:	bd08      	pop	{r3, pc}
   b8e96:	bf00      	nop
   b8e98:	000c5efc 	.word	0x000c5efc

000b8e9c <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8e9c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8ea0:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8ea2:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8ea4:	bf3f      	itttt	cc
   b8ea6:	6842      	ldrcc	r2, [r0, #4]
   b8ea8:	1c5c      	addcc	r4, r3, #1
   b8eaa:	60c4      	strcc	r4, [r0, #12]
   b8eac:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8eae:	bf24      	itt	cs
   b8eb0:	2301      	movcs	r3, #1
   b8eb2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8eb6:	bd10      	pop	{r4, pc}

000b8eb8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8eb8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8eba:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8ebc:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8ebe:	b143      	cbz	r3, b8ed2 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8ec0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8ec4:	7e59      	ldrb	r1, [r3, #25]
   b8ec6:	b109      	cbz	r1, b8ecc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8ec8:	f7ff ffe8 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8ecc:	6963      	ldr	r3, [r4, #20]
   b8ece:	3b01      	subs	r3, #1
   b8ed0:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8ed2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8ed6:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8ed8:	4288      	cmp	r0, r1
   b8eda:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8ede:	bf2a      	itet	cs
   b8ee0:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8ee2:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8ee4:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8ee8:	bd10      	pop	{r4, pc}

000b8eea <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8eea:	b570      	push	{r4, r5, r6, lr}
   b8eec:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8eee:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8ef2:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8ef4:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8ef6:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8ef8:	4430      	add	r0, r6
   b8efa:	460a      	mov	r2, r1
   b8efc:	4629      	mov	r1, r5
   b8efe:	f004 fb01 	bl	bd504 <vsnprintf>
	if (count <= spaceAvailable) {
   b8f02:	4285      	cmp	r5, r0
		offset += count;
   b8f04:	bf2d      	iteet	cs
   b8f06:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8f08:	68a3      	ldrcc	r3, [r4, #8]
   b8f0a:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8f0c:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8f0e:	bf36      	itet	cc
   b8f10:	2301      	movcc	r3, #1
		offset += count;
   b8f12:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8f14:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8f18:	bd70      	pop	{r4, r5, r6, pc}

000b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8f1a:	b40e      	push	{r1, r2, r3}
   b8f1c:	b503      	push	{r0, r1, lr}
   b8f1e:	aa03      	add	r2, sp, #12
   b8f20:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8f24:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8f26:	f7ff ffe0 	bl	b8eea <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8f2a:	b002      	add	sp, #8
   b8f2c:	f85d eb04 	ldr.w	lr, [sp], #4
   b8f30:	b003      	add	sp, #12
   b8f32:	4770      	bx	lr

000b8f34 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f38:	4604      	mov	r4, r0
   b8f3a:	460e      	mov	r6, r1
	if (quoted) {
   b8f3c:	4617      	mov	r7, r2
   b8f3e:	b112      	cbz	r2, b8f46 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8f40:	2122      	movs	r1, #34	; 0x22
   b8f42:	f7ff ffab 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8f46:	f8df 810c 	ldr.w	r8, [pc, #268]	; b9054 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8f4a:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8f4c:	5d71      	ldrb	r1, [r6, r5]
   b8f4e:	eb06 0905 	add.w	r9, r6, r5
   b8f52:	2900      	cmp	r1, #0
   b8f54:	d074      	beq.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8f56:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8f5a:	429a      	cmp	r2, r3
   b8f5c:	d270      	bcs.n	b9040 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8f5e:	060b      	lsls	r3, r1, #24
   b8f60:	d534      	bpl.n	b8fcc <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8f62:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8f66:	2be0      	cmp	r3, #224	; 0xe0
   b8f68:	f105 0901 	add.w	r9, r5, #1
   b8f6c:	d11d      	bne.n	b8faa <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8f6e:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8f72:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8f76:	2b80      	cmp	r3, #128	; 0x80
   b8f78:	d139      	bne.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8f7a:	f105 0902 	add.w	r9, r5, #2
   b8f7e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8f82:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8f86:	2880      	cmp	r0, #128	; 0x80
   b8f88:	d131      	bne.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8f8e:	0192      	lsls	r2, r2, #6
   b8f90:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8f94:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8f98:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8f9a:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8f9c:	4641      	mov	r1, r8
   b8f9e:	4620      	mov	r0, r4
   b8fa0:	f7ff ffbb 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8fa4:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8fa6:	3501      	adds	r5, #1
   b8fa8:	e7d0      	b.n	b8f4c <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8faa:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8fae:	2bc0      	cmp	r3, #192	; 0xc0
   b8fb0:	d11d      	bne.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8fb2:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8fb6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8fba:	2a80      	cmp	r2, #128	; 0x80
   b8fbc:	d117      	bne.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8fbe:	0189      	lsls	r1, r1, #6
   b8fc0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8fc8:	431a      	orrs	r2, r3
   b8fca:	e7e7      	b.n	b8f9c <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8fcc:	290d      	cmp	r1, #13
   b8fce:	d80a      	bhi.n	b8fe6 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8fd0:	2907      	cmp	r1, #7
   b8fd2:	d90c      	bls.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8fd4:	f1a1 0308 	sub.w	r3, r1, #8
   b8fd8:	2b05      	cmp	r3, #5
   b8fda:	d808      	bhi.n	b8fee <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8fdc:	e8df f003 	tbb	[pc, r3]
   b8fe0:	07172309 	.word	0x07172309
   b8fe4:	1d11      	.short	0x1d11
   b8fe6:	2922      	cmp	r1, #34	; 0x22
   b8fe8:	d023      	beq.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8fea:	295c      	cmp	r1, #92	; 0x5c
   b8fec:	d021      	beq.n	b9032 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8fee:	4620      	mov	r0, r4
   b8ff0:	e004      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ff2:	215c      	movs	r1, #92	; 0x5c
   b8ff4:	4620      	mov	r0, r4
   b8ff6:	f7ff ff51 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8ffa:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8ffc:	f7ff ff4e 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				break;
   b9000:	e7d1      	b.n	b8fa6 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b9002:	215c      	movs	r1, #92	; 0x5c
   b9004:	4620      	mov	r0, r4
   b9006:	f7ff ff49 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b900a:	2166      	movs	r1, #102	; 0x66
   b900c:	e7f6      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b900e:	215c      	movs	r1, #92	; 0x5c
   b9010:	4620      	mov	r0, r4
   b9012:	f7ff ff43 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b9016:	216e      	movs	r1, #110	; 0x6e
   b9018:	e7f0      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b901a:	215c      	movs	r1, #92	; 0x5c
   b901c:	4620      	mov	r0, r4
   b901e:	f7ff ff3d 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b9022:	2172      	movs	r1, #114	; 0x72
   b9024:	e7ea      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9026:	215c      	movs	r1, #92	; 0x5c
   b9028:	4620      	mov	r0, r4
   b902a:	f7ff ff37 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b902e:	2174      	movs	r1, #116	; 0x74
   b9030:	e7e4      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b9032:	215c      	movs	r1, #92	; 0x5c
   b9034:	4620      	mov	r0, r4
   b9036:	f7ff ff31 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b903a:	f899 1000 	ldrb.w	r1, [r9]
   b903e:	e7dd      	b.n	b8ffc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b9040:	b12f      	cbz	r7, b904e <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b9042:	4620      	mov	r0, r4
   b9044:	2122      	movs	r1, #34	; 0x22
}
   b9046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b904a:	f7ff bf27 	b.w	b8e9c <_ZN10JsonWriter10insertCharEc>
}
   b904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9052:	bf00      	nop
   b9054:	000c5ec4 	.word	0x000c5ec4

000b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b9058:	6942      	ldr	r2, [r0, #20]
   b905a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b905e:	7e1a      	ldrb	r2, [r3, #24]
   b9060:	b112      	cbz	r2, b9068 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b9062:	2200      	movs	r2, #0
   b9064:	761a      	strb	r2, [r3, #24]
}
   b9066:	4770      	bx	lr
		insertChar(',');
   b9068:	212c      	movs	r1, #44	; 0x2c
   b906a:	f7ff bf17 	b.w	b8e9c <_ZN10JsonWriter10insertCharEc>

000b906e <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b906e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b9070:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b9072:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b9074:	3301      	adds	r3, #1
   b9076:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b9078:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b907a:	d80f      	bhi.n	b909c <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b907c:	f7ff ffec 	bl	b9058 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b9080:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b9082:	9901      	ldr	r1, [sp, #4]
   b9084:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b9088:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b908a:	2501      	movs	r5, #1
	contextIndex++;
   b908c:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b908e:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b9090:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b9092:	f7ff ff03 	bl	b8e9c <_ZN10JsonWriter10insertCharEc>
   b9096:	4628      	mov	r0, r5
}
   b9098:	b002      	add	sp, #8
   b909a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b909c:	2000      	movs	r0, #0
   b909e:	e7fb      	b.n	b9098 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b90a0 <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b90a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90a2:	4604      	mov	r4, r0
   b90a4:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b90a8:	f008 fe2c 	bl	c1d04 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b90ac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b90ae:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b90b0:	4602      	mov	r2, r0
   b90b2:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b90b4:	db08      	blt.n	b90c8 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b90b6:	e9cd 2300 	strd	r2, r3, [sp]
   b90ba:	4907      	ldr	r1, [pc, #28]	; (b90d8 <_ZN10JsonWriter11insertValueEf+0x38>)
   b90bc:	462a      	mov	r2, r5
   b90be:	4620      	mov	r0, r4
   b90c0:	f7ff ff2b 	bl	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b90c4:	b003      	add	sp, #12
   b90c6:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b90c8:	4904      	ldr	r1, [pc, #16]	; (b90dc <_ZN10JsonWriter11insertValueEf+0x3c>)
   b90ca:	4620      	mov	r0, r4
}
   b90cc:	b003      	add	sp, #12
   b90ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b90d2:	f7ff bf22 	b.w	b8f1a <_ZN10JsonWriter13insertsprintfEPKcz>
   b90d6:	bf00      	nop
   b90d8:	000c5ecb 	.word	0x000c5ecb
   b90dc:	000c5ed0 	.word	0x000c5ed0

000b90e0 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b90e0:	b510      	push	{r4, lr}
   b90e2:	4604      	mov	r4, r0
   b90e4:	f7ff feca 	bl	b8e7c <_ZN10JsonWriterC1Ev>
   b90e8:	4b05      	ldr	r3, [pc, #20]	; (b9100 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b90ea:	6023      	str	r3, [r4, #0]
   b90ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b90f0:	2300      	movs	r3, #0
   b90f2:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b90f6:	6321      	str	r1, [r4, #48]	; 0x30
   b90f8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b90fa:	4620      	mov	r0, r4
   b90fc:	bd10      	pop	{r4, pc}
   b90fe:	bf00      	nop
   b9100:	000c5f0c 	.word	0x000c5f0c

000b9104 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b9104:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b9106:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9108:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b910a:	4604      	mov	r4, r0
	if (start != -1) {
   b910c:	d121      	bne.n	b9152 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b910e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b9110:	684b      	ldr	r3, [r1, #4]
   b9112:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b9114:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b9116:	6888      	ldr	r0, [r1, #8]
   b9118:	1a1a      	subs	r2, r3, r0
   b911a:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b911c:	68ae      	ldr	r6, [r5, #8]
   b911e:	4430      	add	r0, r6
   b9120:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b9122:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9124:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b9126:	dd05      	ble.n	b9134 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b9128:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b912a:	6889      	ldr	r1, [r1, #8]
   b912c:	4401      	add	r1, r0
   b912e:	4418      	add	r0, r3
   b9130:	f009 fa06 	bl	c2540 <memmove>
   b9134:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b9136:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b9138:	6852      	ldr	r2, [r2, #4]
   b913a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b913c:	440a      	add	r2, r1
   b913e:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9140:	2101      	movs	r1, #1
	init();
   b9142:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b9144:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b9148:	7421      	strb	r1, [r4, #16]
	init();
   b914a:	f7ff fe8f 	bl	b8e6c <_ZN10JsonWriter4initEv>
   b914e:	4608      	mov	r0, r1

	return true;
}
   b9150:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9152:	2000      	movs	r0, #0
   b9154:	e7fc      	b.n	b9150 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b9156 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9156:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b9158:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b915a:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b915c:	4604      	mov	r4, r0
   b915e:	460e      	mov	r6, r1
	if (start != -1) {
   b9160:	d129      	bne.n	b91b6 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9162:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b9164:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9166:	3d01      	subs	r5, #1
   b9168:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b916a:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b916c:	1b5a      	subs	r2, r3, r5
   b916e:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b9170:	6888      	ldr	r0, [r1, #8]
   b9172:	4428      	add	r0, r5
   b9174:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b9176:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9178:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b917a:	dd04      	ble.n	b9186 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b917c:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b917e:	1941      	adds	r1, r0, r5
   b9180:	4418      	add	r0, r3
   b9182:	f009 f9dd 	bl	c2540 <memmove>
   b9186:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b9188:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b918a:	6852      	ldr	r2, [r2, #4]
   b918c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b918e:	440a      	add	r2, r1
   b9190:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9192:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b9194:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b9198:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b919a:	7425      	strb	r5, [r4, #16]
	init();
   b919c:	f7ff fe66 	bl	b8e6c <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b91a0:	6963      	ldr	r3, [r4, #20]
   b91a2:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b91a6:	68f3      	ldr	r3, [r6, #12]
   b91a8:	fab3 f383 	clz	r3, r3
   b91ac:	095b      	lsrs	r3, r3, #5
   b91ae:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b91b2:	4628      	mov	r0, r5

	return true;
}
   b91b4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b91b6:	2000      	movs	r0, #0
   b91b8:	e7fc      	b.n	b91b4 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b91bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b91bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b91c0:	6844      	ldr	r4, [r0, #4]
   b91c2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b91c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b91ca:	f8d0 e000 	ldr.w	lr, [r0]
   b91ce:	4596      	cmp	lr, r2
   b91d0:	f080 81b9 	bcs.w	b9546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b91d4:	f811 800e 	ldrb.w	r8, [r1, lr]
   b91d8:	f1b8 0f00 	cmp.w	r8, #0
   b91dc:	f000 81b3 	beq.w	b9546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b91e0:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b91e4:	f000 8098 	beq.w	b9318 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b91e8:	d833      	bhi.n	b9252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b91ea:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b91ee:	f000 80a6 	beq.w	b933e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b91f2:	d810      	bhi.n	b9216 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b91f4:	f1a8 0809 	sub.w	r8, r8, #9
   b91f8:	fa5f f888 	uxtb.w	r8, r8
   b91fc:	f1b8 0f17 	cmp.w	r8, #23
   b9200:	d80d      	bhi.n	b921e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b9202:	4d9f      	ldr	r5, [pc, #636]	; (b9480 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b9204:	fa0c f808 	lsl.w	r8, ip, r8
   b9208:	ea18 0f05 	tst.w	r8, r5
   b920c:	d007      	beq.n	b921e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b920e:	6805      	ldr	r5, [r0, #0]
   b9210:	3501      	adds	r5, #1
   b9212:	6005      	str	r5, [r0, #0]
   b9214:	e7d9      	b.n	b91ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b9216:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b921a:	f000 8133 	beq.w	b9484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b921e:	f8d0 8000 	ldr.w	r8, [r0]
   b9222:	4542      	cmp	r2, r8
   b9224:	d90e      	bls.n	b9244 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b9226:	f811 5008 	ldrb.w	r5, [r1, r8]
   b922a:	b15d      	cbz	r5, b9244 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b922c:	2d3a      	cmp	r5, #58	; 0x3a
   b922e:	f200 8169 	bhi.w	b9504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b9232:	2d1f      	cmp	r5, #31
   b9234:	f200 8151 	bhi.w	b94da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b9238:	2d0a      	cmp	r5, #10
   b923a:	f200 8160 	bhi.w	b94fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b923e:	2d08      	cmp	r5, #8
   b9240:	f240 8156 	bls.w	b94f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b9244:	2b00      	cmp	r3, #0
   b9246:	f040 8162 	bne.w	b950e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b924a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b924e:	6005      	str	r5, [r0, #0]
   b9250:	e0a5      	b.n	b939e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b9252:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9256:	d037      	beq.n	b92c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9258:	d82e      	bhi.n	b92b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b925a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b925e:	d033      	beq.n	b92c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9260:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b9264:	d1db      	bne.n	b921e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b9266:	2b00      	cmp	r3, #0
   b9268:	d0d1      	beq.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b926a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b926e:	6845      	ldr	r5, [r0, #4]
   b9270:	3d01      	subs	r5, #1
   b9272:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b9276:	2d00      	cmp	r5, #0
   b9278:	db55      	blt.n	b9326 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b927a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b927e:	3701      	adds	r7, #1
   b9280:	d04d      	beq.n	b931e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b9282:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b9286:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b928a:	d148      	bne.n	b931e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b928c:	f898 b000 	ldrb.w	fp, [r8]
   b9290:	45cb      	cmp	fp, r9
   b9292:	d14b      	bne.n	b932c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b9294:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b9298:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b929c:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b92a0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b92a4:	f8de 7004 	ldr.w	r7, [lr, #4]
   b92a8:	3701      	adds	r7, #1
   b92aa:	d042      	beq.n	b9332 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b92ac:	f8de 7008 	ldr.w	r7, [lr, #8]
   b92b0:	3701      	adds	r7, #1
   b92b2:	d13e      	bne.n	b9332 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b92b4:	6085      	str	r5, [r0, #8]
				break;
   b92b6:	e7aa      	b.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b92b8:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b92bc:	d1af      	bne.n	b921e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b92be:	2b00      	cmp	r3, #0
   b92c0:	d0a5      	beq.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b92c2:	f04f 0901 	mov.w	r9, #1
   b92c6:	e7d2      	b.n	b926e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b92c8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b92ca:	2b00      	cmp	r3, #0
   b92cc:	d09f      	beq.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b92ce:	6845      	ldr	r5, [r0, #4]
   b92d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b92d2:	42af      	cmp	r7, r5
   b92d4:	d94a      	bls.n	b936c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b92d6:	f105 0e01 	add.w	lr, r5, #1
   b92da:	f8c0 e004 	str.w	lr, [r0, #4]
   b92de:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b92e2:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b92e6:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b92ea:	2500      	movs	r5, #0
   b92ec:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b92f0:	6885      	ldr	r5, [r0, #8]
   b92f2:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b92f4:	bf1f      	itttt	ne
   b92f6:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b92fa:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b92fe:	3501      	addne	r5, #1
   b9300:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b9304:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9308:	bf0c      	ite	eq
   b930a:	2501      	moveq	r5, #1
   b930c:	2502      	movne	r5, #2
   b930e:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b9312:	6805      	ldr	r5, [r0, #0]
   b9314:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b9318:	6845      	ldr	r5, [r0, #4]
   b931a:	3d01      	subs	r5, #1
   b931c:	e7ca      	b.n	b92b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b931e:	3d01      	subs	r5, #1
   b9320:	f1a8 0810 	sub.w	r8, r8, #16
   b9324:	e7a7      	b.n	b9276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b9326:	3501      	adds	r5, #1
   b9328:	f47f af71 	bne.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b932c:	f06f 0401 	mvn.w	r4, #1
   b9330:	e01e      	b.n	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b9332:	3d01      	subs	r5, #1
   b9334:	1c6f      	adds	r7, r5, #1
   b9336:	f1ae 0e10 	sub.w	lr, lr, #16
   b933a:	d1b3      	bne.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b933c:	e767      	b.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b933e:	f10e 0901 	add.w	r9, lr, #1
   b9342:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9346:	f8d0 8000 	ldr.w	r8, [r0]
   b934a:	4542      	cmp	r2, r8
   b934c:	f240 8093 	bls.w	b9476 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b9350:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9354:	2d00      	cmp	r5, #0
   b9356:	f000 808e 	beq.w	b9476 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b935a:	2d22      	cmp	r5, #34	; 0x22
   b935c:	d130      	bne.n	b93c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b935e:	b1f3      	cbz	r3, b939e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b9360:	6845      	ldr	r5, [r0, #4]
   b9362:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9364:	42af      	cmp	r7, r5
   b9366:	d806      	bhi.n	b9376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b9368:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b936c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b9370:	4620      	mov	r0, r4
   b9372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b9376:	f105 0e01 	add.w	lr, r5, #1
   b937a:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b937e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9382:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b9386:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b938a:	2700      	movs	r7, #0
   b938c:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b938e:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b9392:	f04f 0a03 	mov.w	sl, #3
   b9396:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b939a:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b939e:	6885      	ldr	r5, [r0, #8]
   b93a0:	1c6f      	adds	r7, r5, #1
				count++;
   b93a2:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b93a6:	f43f af32 	beq.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b93aa:	2b00      	cmp	r3, #0
   b93ac:	f43f af2f 	beq.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b93b0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b93b4:	f8de 500c 	ldr.w	r5, [lr, #12]
   b93b8:	3501      	adds	r5, #1
   b93ba:	f8ce 500c 	str.w	r5, [lr, #12]
   b93be:	e726      	b.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b93c0:	2d5c      	cmp	r5, #92	; 0x5c
   b93c2:	d111      	bne.n	b93e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b93c4:	f108 0501 	add.w	r5, r8, #1
   b93c8:	42aa      	cmp	r2, r5
   b93ca:	d90d      	bls.n	b93e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b93cc:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b93ce:	5d4d      	ldrb	r5, [r1, r5]
   b93d0:	2d75      	cmp	r5, #117	; 0x75
   b93d2:	d82b      	bhi.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b93d4:	2d6d      	cmp	r5, #109	; 0x6d
   b93d6:	d80b      	bhi.n	b93f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b93d8:	2d66      	cmp	r5, #102	; 0x66
   b93da:	d827      	bhi.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b93dc:	2d5b      	cmp	r5, #91	; 0x5b
   b93de:	d81d      	bhi.n	b941c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b93e0:	2d22      	cmp	r5, #34	; 0x22
   b93e2:	d001      	beq.n	b93e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b93e4:	2d2f      	cmp	r5, #47	; 0x2f
   b93e6:	d121      	bne.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b93e8:	6805      	ldr	r5, [r0, #0]
   b93ea:	3501      	adds	r5, #1
   b93ec:	6005      	str	r5, [r0, #0]
   b93ee:	e7aa      	b.n	b9346 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b93f0:	3d6e      	subs	r5, #110	; 0x6e
   b93f2:	2d07      	cmp	r5, #7
   b93f4:	d81a      	bhi.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b93f6:	a701      	add	r7, pc, #4	; (adr r7, b93fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b93f8:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b93fc:	000b93e9 	.word	0x000b93e9
   b9400:	000b942d 	.word	0x000b942d
   b9404:	000b942d 	.word	0x000b942d
   b9408:	000b942d 	.word	0x000b942d
   b940c:	000b93e9 	.word	0x000b93e9
   b9410:	000b942d 	.word	0x000b942d
   b9414:	000b93e9 	.word	0x000b93e9
   b9418:	000b9433 	.word	0x000b9433
   b941c:	3d5c      	subs	r5, #92	; 0x5c
   b941e:	b2ed      	uxtb	r5, r5
   b9420:	fa0c f505 	lsl.w	r5, ip, r5
   b9424:	f240 4741 	movw	r7, #1089	; 0x441
   b9428:	423d      	tst	r5, r7
   b942a:	d1dd      	bne.n	b93e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b942c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b9430:	e77c      	b.n	b932c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b9432:	f108 0502 	add.w	r5, r8, #2
   b9436:	6005      	str	r5, [r0, #0]
   b9438:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b943c:	f8d0 8000 	ldr.w	r8, [r0]
   b9440:	4542      	cmp	r2, r8
   b9442:	d803      	bhi.n	b944c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9444:	6805      	ldr	r5, [r0, #0]
   b9446:	3d01      	subs	r5, #1
   b9448:	6005      	str	r5, [r0, #0]
					break;
   b944a:	e7cd      	b.n	b93e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b944c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9450:	2d00      	cmp	r5, #0
   b9452:	d0f7      	beq.n	b9444 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9454:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b9458:	f1bb 0f09 	cmp.w	fp, #9
   b945c:	d904      	bls.n	b9468 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b945e:	f025 0520 	bic.w	r5, r5, #32
   b9462:	3d41      	subs	r5, #65	; 0x41
   b9464:	2d05      	cmp	r5, #5
   b9466:	d8e1      	bhi.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b9468:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b946c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b9470:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9472:	d1e3      	bne.n	b943c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b9474:	e7e6      	b.n	b9444 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b9476:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b947a:	f06f 0402 	mvn.w	r4, #2
   b947e:	e777      	b.n	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b9480:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b9484:	2b00      	cmp	r3, #0
   b9486:	f43f aec2 	beq.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b948a:	6885      	ldr	r5, [r0, #8]
   b948c:	1c6f      	adds	r7, r5, #1
   b948e:	f43f aebe 	beq.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b9492:	012d      	lsls	r5, r5, #4
   b9494:	5d5d      	ldrb	r5, [r3, r5]
   b9496:	3d01      	subs	r5, #1
   b9498:	2d01      	cmp	r5, #1
   b949a:	f67f aeb8 	bls.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b949e:	6845      	ldr	r5, [r0, #4]
   b94a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b94a4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b94a8:	f1b8 0f00 	cmp.w	r8, #0
   b94ac:	f6ff aeaf 	blt.w	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b94b0:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b94b4:	3d01      	subs	r5, #1
   b94b6:	2d01      	cmp	r5, #1
   b94b8:	d80a      	bhi.n	b94d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b94ba:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b94be:	3501      	adds	r5, #1
   b94c0:	d006      	beq.n	b94d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b94c2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b94c6:	3501      	adds	r5, #1
   b94c8:	d102      	bne.n	b94d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b94ca:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b94ce:	e69e      	b.n	b920e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b94d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b94d4:	f1ae 0e10 	sub.w	lr, lr, #16
   b94d8:	e7e6      	b.n	b94a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b94da:	f1a5 0920 	sub.w	r9, r5, #32
   b94de:	4f24      	ldr	r7, [pc, #144]	; (b9570 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b94e0:	fa5f f989 	uxtb.w	r9, r9
   b94e4:	fa0c f909 	lsl.w	r9, ip, r9
   b94e8:	ea19 0f07 	tst.w	r9, r7
   b94ec:	f47f aeaa 	bne.w	b9244 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b94f0:	3d20      	subs	r5, #32
   b94f2:	2d5e      	cmp	r5, #94	; 0x5e
   b94f4:	d89a      	bhi.n	b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b94f6:	f108 0501 	add.w	r5, r8, #1
   b94fa:	6005      	str	r5, [r0, #0]
   b94fc:	e68f      	b.n	b921e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b94fe:	2d0d      	cmp	r5, #13
   b9500:	d1f6      	bne.n	b94f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b9502:	e69f      	b.n	b9244 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b9504:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b9508:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b950c:	e7f8      	b.n	b9500 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b950e:	6845      	ldr	r5, [r0, #4]
   b9510:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9512:	42af      	cmp	r7, r5
   b9514:	f67f af28 	bls.w	b9368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b9518:	f105 0801 	add.w	r8, r5, #1
   b951c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b9520:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9524:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b9528:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b952c:	2700      	movs	r7, #0
   b952e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b9530:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b9534:	f04f 0a04 	mov.w	sl, #4
   b9538:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b953c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b9540:	6805      	ldr	r5, [r0, #0]
   b9542:	3d01      	subs	r5, #1
   b9544:	e683      	b.n	b924e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b9546:	2b00      	cmp	r3, #0
   b9548:	f43f af12 	beq.w	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b954c:	6842      	ldr	r2, [r0, #4]
   b954e:	1e51      	subs	r1, r2, #1
   b9550:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b9554:	2900      	cmp	r1, #0
   b9556:	f6ff af0b 	blt.w	b9370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b955a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b955e:	3201      	adds	r2, #1
   b9560:	d003      	beq.n	b956a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b9562:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b9566:	3201      	adds	r2, #1
   b9568:	d087      	beq.n	b947a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b956a:	3901      	subs	r1, #1
   b956c:	3b10      	subs	r3, #16
   b956e:	e7f1      	b.n	b9554 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b9570:	04001001 	.word	0x04001001

000b9574 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b9574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b9576:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b9578:	4604      	mov	r4, r0
	if (offset == 0) {
   b957a:	b912      	cbnz	r2, b9582 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b957c:	2000      	movs	r0, #0
}
   b957e:	b003      	add	sp, #12
   b9580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b9582:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b9584:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b9588:	b1ab      	cbz	r3, b95b6 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b958a:	2100      	movs	r1, #0
	parser->toknext = 0;
   b958c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b9590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b9594:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9596:	69c1      	ldr	r1, [r0, #28]
   b9598:	9100      	str	r1, [sp, #0]
   b959a:	6841      	ldr	r1, [r0, #4]
   b959c:	4630      	mov	r0, r6
   b959e:	f7ff fe0d 	bl	b91bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b95a2:	1c43      	adds	r3, r0, #1
   b95a4:	d128      	bne.n	b95f8 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b95a6:	7c25      	ldrb	r5, [r4, #16]
   b95a8:	2d00      	cmp	r5, #0
   b95aa:	d1e7      	bne.n	b957c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b95ac:	6960      	ldr	r0, [r4, #20]
   b95ae:	f003 ff81 	bl	bd4b4 <free>
			tokens = 0;
   b95b2:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b95b4:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b95b6:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b95b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b95bc:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b95c0:	68e2      	ldr	r2, [r4, #12]
   b95c2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b95c4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b95c6:	9500      	str	r5, [sp, #0]
   b95c8:	462b      	mov	r3, r5
   b95ca:	4630      	mov	r0, r6
   b95cc:	f7ff fdf6 	bl	b91bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b95d0:	2800      	cmp	r0, #0
   b95d2:	dbd3      	blt.n	b957c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b95d4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b95d6:	d017      	beq.n	b9608 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b95d8:	0100      	lsls	r0, r0, #4
   b95da:	f003 ff63 	bl	bd4a4 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b95de:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b95e0:	6160      	str	r0, [r4, #20]
   b95e2:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b95e4:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b95e6:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b95ea:	68e2      	ldr	r2, [r4, #12]
   b95ec:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b95ee:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b95f0:	4630      	mov	r0, r6
   b95f2:	f7ff fde3 	bl	b91bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b95f6:	e001      	b.n	b95fc <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b95f8:	2800      	cmp	r0, #0
   b95fa:	dbbf      	blt.n	b957c <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b95fc:	6963      	ldr	r3, [r4, #20]
   b95fe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b9602:	61a0      	str	r0, [r4, #24]
	return true;
   b9604:	2001      	movs	r0, #1
   b9606:	e7ba      	b.n	b957e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b9608:	6963      	ldr	r3, [r4, #20]
   b960a:	61a3      	str	r3, [r4, #24]
   b960c:	e7fa      	b.n	b9604 <_ZN10JsonParser5parseEv+0x90>

000b960e <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b960e:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b9610:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9612:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b9614:	4604      	mov	r4, r0
	if (start == -1) {
   b9616:	d018      	beq.n	b964a <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b9618:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b961a:	2a00      	cmp	r2, #0
   b961c:	dd08      	ble.n	b9630 <_ZN12JsonModifier6finishEv+0x22>
   b961e:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b9620:	68e5      	ldr	r5, [r4, #12]
   b9622:	6848      	ldr	r0, [r1, #4]
   b9624:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9626:	442b      	add	r3, r5
   b9628:	4401      	add	r1, r0
   b962a:	4418      	add	r0, r3
   b962c:	f008 ff88 	bl	c2540 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b9630:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b9634:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b9636:	440b      	add	r3, r1
   b9638:	68e1      	ldr	r1, [r4, #12]
   b963a:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b963c:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b963e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b9640:	f7ff ff98 	bl	b9574 <_ZN10JsonParser5parseEv>
	start = -1;
   b9644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9648:	6363      	str	r3, [r4, #52]	; 0x34
}
   b964a:	bd38      	pop	{r3, r4, r5, pc}

000b964c <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b964c:	4770      	bx	lr

000b964e <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b964e:	4770      	bx	lr

000b9650 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b9650:	b510      	push	{r4, lr}
}
   b9652:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b9654:	4604      	mov	r4, r0
}
   b9656:	f7fa fd22 	bl	b409e <_ZdlPvj>
   b965a:	4620      	mov	r0, r4
   b965c:	bd10      	pop	{r4, pc}

000b965e <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b965e:	b510      	push	{r4, lr}
}
   b9660:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b9662:	4604      	mov	r4, r0
}
   b9664:	f7fa fd1b 	bl	b409e <_ZdlPvj>
   b9668:	4620      	mov	r0, r4
   b966a:	bd10      	pop	{r4, pc}

000b966c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b966c:	b510      	push	{r4, lr}
   b966e:	4b05      	ldr	r3, [pc, #20]	; (b9684 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b9670:	4604      	mov	r4, r0
   b9672:	f840 3b1c 	str.w	r3, [r0], #28
   b9676:	f006 fa6f 	bl	bfb58 <_ZN6StringD1Ev>
   b967a:	1d20      	adds	r0, r4, #4
   b967c:	f006 fa6c 	bl	bfb58 <_ZN6StringD1Ev>
}
   b9680:	4620      	mov	r0, r4
   b9682:	bd10      	pop	{r4, pc}
   b9684:	000c5f80 	.word	0x000c5f80

000b9688 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9688:	b510      	push	{r4, lr}
   b968a:	4604      	mov	r4, r0
}
   b968c:	f7ff ffee 	bl	b966c <_ZN22LocalTimePosixTimezoneD1Ev>
   b9690:	4620      	mov	r0, r4
   b9692:	2158      	movs	r1, #88	; 0x58
   b9694:	f7fa fd03 	bl	b409e <_ZdlPvj>
   b9698:	4620      	mov	r0, r4
   b969a:	bd10      	pop	{r4, pc}

000b969c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b969c:	b510      	push	{r4, lr}
   b969e:	4b04      	ldr	r3, [pc, #16]	; (b96b0 <_ZN9LocalTimeD1Ev+0x14>)
   b96a0:	4604      	mov	r4, r0
   b96a2:	f840 3b04 	str.w	r3, [r0], #4
   b96a6:	f7ff ffe1 	bl	b966c <_ZN22LocalTimePosixTimezoneD1Ev>
   b96aa:	4620      	mov	r0, r4
   b96ac:	bd10      	pop	{r4, pc}
   b96ae:	bf00      	nop
   b96b0:	000c5f50 	.word	0x000c5f50

000b96b4 <_ZN9LocalTimeD0Ev>:
   b96b4:	b510      	push	{r4, lr}
   b96b6:	4604      	mov	r4, r0
   b96b8:	f7ff fff0 	bl	b969c <_ZN9LocalTimeD1Ev>
   b96bc:	4620      	mov	r0, r4
   b96be:	2160      	movs	r1, #96	; 0x60
   b96c0:	f7fa fced 	bl	b409e <_ZdlPvj>
   b96c4:	4620      	mov	r0, r4
   b96c6:	bd10      	pop	{r4, pc}

000b96c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b96c8:	f020 0302 	bic.w	r3, r0, #2
   b96cc:	2b01      	cmp	r3, #1
   b96ce:	d003      	beq.n	b96d8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b96d0:	1f43      	subs	r3, r0, #5
   b96d2:	4258      	negs	r0, r3
   b96d4:	4158      	adcs	r0, r3
   b96d6:	4770      	bx	lr
   b96d8:	4618      	mov	r0, r3
   b96da:	4770      	bx	lr

000b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b96dc:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b96e0:	7103      	strb	r3, [r0, #4]
   b96e2:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b96e6:	7143      	strb	r3, [r0, #5]
   b96e8:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b96ec:	7183      	strb	r3, [r0, #6]
   b96ee:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b96f2:	71c3      	strb	r3, [r0, #7]
   b96f4:	4770      	bx	lr

000b96f6 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b96f6:	b538      	push	{r3, r4, r5, lr}
   b96f8:	4604      	mov	r4, r0
   b96fa:	460d      	mov	r5, r1
   b96fc:	3004      	adds	r0, #4
   b96fe:	3104      	adds	r1, #4
   b9700:	f006 fab1 	bl	bfc66 <_ZN6StringaSERKS_>
   b9704:	f105 0114 	add.w	r1, r5, #20
   b9708:	f104 0014 	add.w	r0, r4, #20
   b970c:	f7ff ffe6 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9710:	f105 011c 	add.w	r1, r5, #28
   b9714:	f104 001c 	add.w	r0, r4, #28
   b9718:	f006 faa5 	bl	bfc66 <_ZN6StringaSERKS_>
   b971c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b9720:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9724:	f7ff ffda 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b9728:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b972c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b9730:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b9734:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b9738:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b973c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b9740:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b9744:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b9748:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b974c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9750:	f7ff ffc4 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9754:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b9758:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b975c:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b9760:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b9764:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b9768:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b976c:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b9770:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b9774:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b9778:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b977c:	f7ff ffae 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b9780:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b9784:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9788:	bd38      	pop	{r3, r4, r5, pc}

000b978a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b978a:	680b      	ldr	r3, [r1, #0]
   b978c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b978e:	684b      	ldr	r3, [r1, #4]
   b9790:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9792:	b113      	cbz	r3, b979a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9794:	685a      	ldr	r2, [r3, #4]
   b9796:	3201      	adds	r2, #1
   b9798:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b979a:	4770      	bx	lr

000b979c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b979c:	4a02      	ldr	r2, [pc, #8]	; (b97a8 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b979e:	6002      	str	r2, [r0, #0]
   b97a0:	684a      	ldr	r2, [r1, #4]
   b97a2:	6042      	str	r2, [r0, #4]
   b97a4:	4770      	bx	lr
   b97a6:	bf00      	nop
   b97a8:	000c5f60 	.word	0x000c5f60

000b97ac <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b97ac:	694a      	ldr	r2, [r1, #20]
   b97ae:	6803      	ldr	r3, [r0, #0]
   b97b0:	f362 0316 	bfi	r3, r2, #0, #23
   b97b4:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b97b6:	690b      	ldr	r3, [r1, #16]
   b97b8:	1c5a      	adds	r2, r3, #1
   b97ba:	8843      	ldrh	r3, [r0, #2]
   b97bc:	f362 13ca 	bfi	r3, r2, #7, #4
   b97c0:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b97c2:	68ca      	ldr	r2, [r1, #12]
   b97c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b97c8:	f362 03c7 	bfi	r3, r2, #3, #5
   b97cc:	70c3      	strb	r3, [r0, #3]
}
   b97ce:	4770      	bx	lr

000b97d0 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b97d0:	4a02      	ldr	r2, [pc, #8]	; (b97dc <_ZN12LocalTimeHMSC1Ev+0xc>)
   b97d2:	6002      	str	r2, [r0, #0]
   b97d4:	2200      	movs	r2, #0
   b97d6:	6042      	str	r2, [r0, #4]
}
   b97d8:	4770      	bx	lr
   b97da:	bf00      	nop
   b97dc:	000c5f60 	.word	0x000c5f60

000b97e0 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b97e0:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b97e2:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b97e4:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b97e6:	8083      	strh	r3, [r0, #4]
   b97e8:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b97ea:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b97ec:	ab05      	add	r3, sp, #20
   b97ee:	9300      	str	r3, [sp, #0]
   b97f0:	4913      	ldr	r1, [pc, #76]	; (b9840 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b97f2:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b97f4:	ab04      	add	r3, sp, #16
   b97f6:	aa03      	add	r2, sp, #12
   b97f8:	4628      	mov	r0, r5
   b97fa:	f003 fe73 	bl	bd4e4 <sscanf>
   b97fe:	2803      	cmp	r0, #3
   b9800:	d107      	bne.n	b9812 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b9802:	9b03      	ldr	r3, [sp, #12]
   b9804:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b9806:	9b04      	ldr	r3, [sp, #16]
   b9808:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b980a:	9b05      	ldr	r3, [sp, #20]
   b980c:	71a3      	strb	r3, [r4, #6]
}
   b980e:	b007      	add	sp, #28
   b9810:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b9812:	490c      	ldr	r1, [pc, #48]	; (b9844 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b9814:	ab04      	add	r3, sp, #16
   b9816:	aa03      	add	r2, sp, #12
   b9818:	4628      	mov	r0, r5
   b981a:	f003 fe63 	bl	bd4e4 <sscanf>
   b981e:	2802      	cmp	r0, #2
   b9820:	d104      	bne.n	b982c <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b9822:	9b03      	ldr	r3, [sp, #12]
   b9824:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b9826:	9b04      	ldr	r3, [sp, #16]
   b9828:	7163      	strb	r3, [r4, #5]
   b982a:	e7f0      	b.n	b980e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b982c:	4906      	ldr	r1, [pc, #24]	; (b9848 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b982e:	aa03      	add	r2, sp, #12
   b9830:	4628      	mov	r0, r5
   b9832:	f003 fe57 	bl	bd4e4 <sscanf>
   b9836:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b9838:	bf04      	itt	eq
   b983a:	9b03      	ldreq	r3, [sp, #12]
   b983c:	7123      	strbeq	r3, [r4, #4]
}
   b983e:	e7e6      	b.n	b980e <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b9840:	000c5f14 	.word	0x000c5f14
   b9844:	000c5f17 	.word	0x000c5f17
   b9848:	000c4e89 	.word	0x000c4e89

000b984c <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b984c:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9850:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9854:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b9858:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b985a:	bfb8      	it	lt
   b985c:	4808      	ldrlt	r0, [pc, #32]	; (b9880 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b985e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b9862:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b9866:	bfbd      	ittte	lt
   b9868:	fb00 3002 	mlalt	r0, r0, r2, r3
   b986c:	1840      	addlt	r0, r0, r1
   b986e:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b9870:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b9874:	bfa4      	itt	ge
   b9876:	fb00 3002 	mlage	r0, r0, r2, r3
   b987a:	1840      	addge	r0, r0, r1
}
   b987c:	4770      	bx	lr
   b987e:	bf00      	nop
   b9880:	fffff1f0 	.word	0xfffff1f0

000b9884 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b9884:	b508      	push	{r3, lr}
   b9886:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b988a:	b14b      	cbz	r3, b98a0 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b988c:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b9890:	b943      	cbnz	r3, b98a4 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b9892:	302c      	adds	r0, #44	; 0x2c
   b9894:	f7ff ffda 	bl	b984c <_ZNK12LocalTimeHMS9toSecondsEv>
   b9898:	fab0 f080 	clz	r0, r0
   b989c:	0940      	lsrs	r0, r0, #5
   b989e:	bd08      	pop	{r3, pc}
   b98a0:	2001      	movs	r0, #1
   b98a2:	e7fc      	b.n	b989e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b98a4:	2000      	movs	r0, #0
   b98a6:	e7fa      	b.n	b989e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b98a8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b98a8:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b98ac:	b943      	cbnz	r3, b98c0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b98ae:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b98b2:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b98b4:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b98b8:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b98ba:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b98be:	600b      	str	r3, [r1, #0]
}
   b98c0:	4770      	bx	lr

000b98c2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b98c2:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b98c6:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b98c8:	b9b3      	cbnz	r3, b98f8 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b98ca:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b98ce:	688c      	ldr	r4, [r1, #8]
   b98d0:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b98d2:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b98d6:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b98d8:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b98dc:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b98de:	bfb5      	itete	lt
   b98e0:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b98e2:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b98e4:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b98e6:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b98e8:	bfb5      	itete	lt
   b98ea:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b98ee:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b98f2:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b98f4:	189b      	addge	r3, r3, r2
   b98f6:	600b      	str	r3, [r1, #0]
}
   b98f8:	bd30      	pop	{r4, r5, pc}
	...

000b98fc <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b98fc:	b508      	push	{r3, lr}
   b98fe:	4a05      	ldr	r2, [pc, #20]	; (b9914 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b9900:	6002      	str	r2, [r0, #0]
   b9902:	2200      	movs	r2, #0
   b9904:	4603      	mov	r3, r0
   b9906:	6042      	str	r2, [r0, #4]
   b9908:	3008      	adds	r0, #8
   b990a:	f7ff ff61 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
}
   b990e:	4618      	mov	r0, r3
   b9910:	bd08      	pop	{r3, pc}
   b9912:	bf00      	nop
   b9914:	000c5f70 	.word	0x000c5f70

000b9918 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b9918:	2300      	movs	r3, #0
   b991a:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b991c:	8183      	strh	r3, [r0, #12]
   b991e:	7383      	strb	r3, [r0, #14]
}
   b9920:	4770      	bx	lr
	...

000b9924 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b9924:	b530      	push	{r4, r5, lr}
   b9926:	4604      	mov	r4, r0
   b9928:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b992a:	460d      	mov	r5, r1
   b992c:	b111      	cbz	r1, b9934 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b992e:	780b      	ldrb	r3, [r1, #0]
   b9930:	2b4d      	cmp	r3, #77	; 0x4d
   b9932:	d005      	beq.n	b9940 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b9934:	4620      	mov	r0, r4
}
   b9936:	b007      	add	sp, #28
   b9938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b993c:	f7ff bfec 	b.w	b9918 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b9940:	ab05      	add	r3, sp, #20
   b9942:	9300      	str	r3, [sp, #0]
   b9944:	4911      	ldr	r1, [pc, #68]	; (b998c <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b9946:	ab04      	add	r3, sp, #16
   b9948:	aa03      	add	r2, sp, #12
   b994a:	4628      	mov	r0, r5
   b994c:	f003 fdca 	bl	bd4e4 <sscanf>
   b9950:	2803      	cmp	r0, #3
   b9952:	d116      	bne.n	b9982 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b9954:	9b03      	ldr	r3, [sp, #12]
   b9956:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b9958:	9b04      	ldr	r3, [sp, #16]
   b995a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b995c:	9b05      	ldr	r3, [sp, #20]
   b995e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b9960:	212f      	movs	r1, #47	; 0x2f
   b9962:	4628      	mov	r0, r5
   b9964:	f008 fe8a 	bl	c267c <strchr>
        if (cp) {
   b9968:	b140      	cbz	r0, b997c <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b996a:	1c41      	adds	r1, r0, #1
   b996c:	f104 0008 	add.w	r0, r4, #8
   b9970:	f7ff ff36 	bl	b97e0 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b9974:	2301      	movs	r3, #1
   b9976:	71e3      	strb	r3, [r4, #7]
}
   b9978:	b007      	add	sp, #28
   b997a:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b997c:	81a0      	strh	r0, [r4, #12]
   b997e:	73a0      	strb	r0, [r4, #14]
}
   b9980:	e7f8      	b.n	b9974 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b9982:	4620      	mov	r0, r4
   b9984:	f7ff ffc8 	bl	b9918 <_ZN15LocalTimeChange5clearEv>
   b9988:	e7f6      	b.n	b9978 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b998a:	bf00      	nop
   b998c:	000c5f2f 	.word	0x000c5f2f

000b9990 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b9990:	4b10      	ldr	r3, [pc, #64]	; (b99d4 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b9992:	4911      	ldr	r1, [pc, #68]	; (b99d8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b9994:	b510      	push	{r4, lr}
   b9996:	4604      	mov	r4, r0
   b9998:	f840 3b04 	str.w	r3, [r0], #4
   b999c:	f006 f927 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   b99a0:	f104 0014 	add.w	r0, r4, #20
   b99a4:	f7ff ff14 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
   b99a8:	490b      	ldr	r1, [pc, #44]	; (b99d8 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b99aa:	f104 001c 	add.w	r0, r4, #28
   b99ae:	f006 f91e 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   b99b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b99b6:	f7ff ff0b 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
   b99ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b99be:	f7ff ff9d 	bl	b98fc <_ZN15LocalTimeChangeC1Ev>
   b99c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b99c6:	f7ff ff99 	bl	b98fc <_ZN15LocalTimeChangeC1Ev>
   b99ca:	2300      	movs	r3, #0
   b99cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b99d0:	4620      	mov	r0, r4
   b99d2:	bd10      	pop	{r4, pc}
   b99d4:	000c5f80 	.word	0x000c5f80
   b99d8:	000c6838 	.word	0x000c6838

000b99dc <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b99dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b99e0:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b99e2:	4608      	mov	r0, r1
   b99e4:	f008 fe74 	bl	c26d0 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b99e8:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b99ea:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b99ec:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b99ee:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b99f2:	493f      	ldr	r1, [pc, #252]	; (b9af0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b99f4:	9801      	ldr	r0, [sp, #4]
   b99f6:	aa01      	add	r2, sp, #4
   b99f8:	f009 fd70 	bl	c34dc <strtok_r>
   b99fc:	4601      	mov	r1, r0
   b99fe:	2800      	cmp	r0, #0
   b9a00:	d062      	beq.n	b9ac8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b9a02:	2d01      	cmp	r5, #1
   b9a04:	f105 0301 	add.w	r3, r5, #1
   b9a08:	d053      	beq.n	b9ab2 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b9a0a:	2d02      	cmp	r5, #2
   b9a0c:	d056      	beq.n	b9abc <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b9a0e:	2d00      	cmp	r5, #0
   b9a10:	d146      	bne.n	b9aa0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b9a12:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b9a14:	f892 9000 	ldrb.w	r9, [r2]
   b9a18:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b9a1c:	4615      	mov	r5, r2
   b9a1e:	4617      	mov	r7, r2
   b9a20:	f102 0201 	add.w	r2, r2, #1
   b9a24:	d8f6      	bhi.n	b9a14 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b9a26:	2200      	movs	r2, #0
   b9a28:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b9a2a:	f104 001c 	add.w	r0, r4, #28
   b9a2e:	f006 f93c 	bl	bfcaa <_ZN6StringaSEPKc>
                valid = true;
   b9a32:	2201      	movs	r2, #1
                *cp = save2;
   b9a34:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b9a38:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b9a3c:	782a      	ldrb	r2, [r5, #0]
   b9a3e:	b36a      	cbz	r2, b9a9c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b9a40:	f897 a000 	ldrb.w	sl, [r7]
   b9a44:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b9a48:	2a3f      	cmp	r2, #63	; 0x3f
   b9a4a:	46b9      	mov	r9, r7
   b9a4c:	46bb      	mov	fp, r7
   b9a4e:	f107 0701 	add.w	r7, r7, #1
   b9a52:	d9f5      	bls.n	b9a40 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b9a54:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b9a56:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b9a5a:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b9a5e:	4629      	mov	r1, r5
   b9a60:	4638      	mov	r0, r7
   b9a62:	f7ff febd 	bl	b97e0 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b9a66:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b9a6a:	f1ba 0f00 	cmp.w	sl, #0
   b9a6e:	d015      	beq.n	b9a9c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b9a70:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b9a72:	f81b ab01 	ldrb.w	sl, [fp], #1
   b9a76:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b9a7a:	d8f9      	bhi.n	b9a70 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b9a7c:	2200      	movs	r2, #0
   b9a7e:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b9a80:	4649      	mov	r1, r9
   b9a82:	1d20      	adds	r0, r4, #4
   b9a84:	f006 f911 	bl	bfcaa <_ZN6StringaSEPKc>
                        *cp = save2;
   b9a88:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b9a8c:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b9a90:	f1ba 0f00 	cmp.w	sl, #0
   b9a94:	d006      	beq.n	b9aa4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b9a96:	4629      	mov	r1, r5
   b9a98:	f7ff fea2 	bl	b97e0 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b9a9c:	2501      	movs	r5, #1
   b9a9e:	e7a8      	b.n	b99f2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b9aa0:	461d      	mov	r5, r3
   b9aa2:	e7a6      	b.n	b99f2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b9aa4:	4639      	mov	r1, r7
   b9aa6:	f7ff fe19 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b9aaa:	7e23      	ldrb	r3, [r4, #24]
   b9aac:	3b01      	subs	r3, #1
   b9aae:	7623      	strb	r3, [r4, #24]
   b9ab0:	e7f4      	b.n	b9a9c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b9ab2:	4640      	mov	r0, r8
   b9ab4:	f7ff ff36 	bl	b9924 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9ab8:	2502      	movs	r5, #2
   b9aba:	e79a      	b.n	b99f2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b9abc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9ac0:	f7ff ff30 	bl	b9924 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9ac4:	2503      	movs	r5, #3
   b9ac6:	e794      	b.n	b99f2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b9ac8:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b9acc:	b143      	cbz	r3, b9ae0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b9ace:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b9ad2:	b92a      	cbnz	r2, b9ae0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b9ad4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9ad8:	f7ff ff1e 	bl	b9918 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b9adc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b9ae0:	4630      	mov	r0, r6
   b9ae2:	f003 fce7 	bl	bd4b4 <free>

    return valid;
}
   b9ae6:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b9aea:	b003      	add	sp, #12
   b9aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9af0:	000c5f39 	.word	0x000c5f39

000b9af4 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b9af4:	b538      	push	{r3, r4, r5, lr}
   b9af6:	4b13      	ldr	r3, [pc, #76]	; (b9b44 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b9af8:	4604      	mov	r4, r0
   b9afa:	460d      	mov	r5, r1
   b9afc:	f840 3b04 	str.w	r3, [r0], #4
   b9b00:	4911      	ldr	r1, [pc, #68]	; (b9b48 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9b02:	f006 f874 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   b9b06:	f104 0014 	add.w	r0, r4, #20
   b9b0a:	f7ff fe61 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
   b9b0e:	490e      	ldr	r1, [pc, #56]	; (b9b48 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9b10:	f104 001c 	add.w	r0, r4, #28
   b9b14:	f006 f86b 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   b9b18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9b1c:	f7ff fe58 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
   b9b20:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9b24:	f7ff feea 	bl	b98fc <_ZN15LocalTimeChangeC1Ev>
   b9b28:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9b2c:	f7ff fee6 	bl	b98fc <_ZN15LocalTimeChangeC1Ev>
   b9b30:	2300      	movs	r3, #0
   b9b32:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b9b36:	4629      	mov	r1, r5
   b9b38:	4620      	mov	r0, r4
   b9b3a:	f7ff ff4f 	bl	b99dc <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b9b3e:	4620      	mov	r0, r4
   b9b40:	bd38      	pop	{r3, r4, r5, pc}
   b9b42:	bf00      	nop
   b9b44:	000c5f80 	.word	0x000c5f80
   b9b48:	000c6838 	.word	0x000c6838

000b9b4c <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9b4c:	b508      	push	{r3, lr}
   b9b4e:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9b50:	f7ff fe3e 	bl	b97d0 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b9b54:	688a      	ldr	r2, [r1, #8]
   b9b56:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b9b58:	684a      	ldr	r2, [r1, #4]
   b9b5a:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9b5c:	680a      	ldr	r2, [r1, #0]
   b9b5e:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9b60:	4618      	mov	r0, r3
   b9b62:	bd08      	pop	{r3, pc}

000b9b64 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b9b64:	b513      	push	{r0, r1, r4, lr}
   b9b66:	4b07      	ldr	r3, [pc, #28]	; (b9b84 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b9b68:	6003      	str	r3, [r0, #0]
   b9b6a:	2300      	movs	r3, #0
   b9b6c:	6043      	str	r3, [r0, #4]
   b9b6e:	4604      	mov	r4, r0
    *this = value.hms();
   b9b70:	4668      	mov	r0, sp
   b9b72:	f7ff ffeb 	bl	b9b4c <_ZNK14LocalTimeValue3hmsEv>
   b9b76:	4620      	mov	r0, r4
   b9b78:	4669      	mov	r1, sp
   b9b7a:	f7ff fdaf 	bl	b96dc <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b9b7e:	b002      	add	sp, #8
   b9b80:	bd10      	pop	{r4, pc}
   b9b82:	bf00      	nop
   b9b84:	000c5f60 	.word	0x000c5f60

000b9b88 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b9b88:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b9b8a:	2300      	movs	r3, #0
   b9b8c:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b9b8e:	a801      	add	r0, sp, #4
   b9b90:	9301      	str	r3, [sp, #4]
   b9b92:	f7ff fe0b 	bl	b97ac <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b9b96:	9801      	ldr	r0, [sp, #4]
   b9b98:	b003      	add	sp, #12
   b9b9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b9b9e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b9b9e:	b510      	push	{r4, lr}
   b9ba0:	4604      	mov	r4, r0
    *this = value.ymd();
   b9ba2:	4608      	mov	r0, r1
   b9ba4:	f7ff fff0 	bl	b9b88 <_ZNK14LocalTimeValue3ymdEv>
   b9ba8:	6020      	str	r0, [r4, #0]
}
   b9baa:	bd10      	pop	{r4, pc}

000b9bac <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b9bac:	b510      	push	{r4, lr}
   b9bae:	4604      	mov	r4, r0
   b9bb0:	b088      	sub	sp, #32
   b9bb2:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b9bb4:	3068      	adds	r0, #104	; 0x68
   b9bb6:	a901      	add	r1, sp, #4
   b9bb8:	f008 fc62 	bl	c2480 <asctime_r>
    int len = strlen(ascstr);
   b9bbc:	a801      	add	r0, sp, #4
   b9bbe:	f008 fda4 	bl	c270a <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9bc2:	ab08      	add	r3, sp, #32
   b9bc4:	4418      	add	r0, r3
   b9bc6:	2300      	movs	r3, #0
   b9bc8:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b9bcc:	a901      	add	r1, sp, #4
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f006 f80d 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9bd4:	4620      	mov	r0, r4
   b9bd6:	b008      	add	sp, #32
   b9bd8:	bd10      	pop	{r4, pc}
	...

000b9bdc <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9bdc:	b538      	push	{r3, r4, r5, lr}
   b9bde:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9be0:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b9be2:	460d      	mov	r5, r1
    if (config.isZ()) {
   b9be4:	f7ff fe4e 	bl	b9884 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9be8:	b128      	cbz	r0, b9bf6 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9bea:	4909      	ldr	r1, [pc, #36]	; (b9c10 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9bec:	4620      	mov	r0, r4
   b9bee:	f005 fffe 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b9bf2:	4620      	mov	r0, r4
   b9bf4:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b9bf6:	6828      	ldr	r0, [r5, #0]
   b9bf8:	f7ff fd66 	bl	b96c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9bfc:	b128      	cbz	r0, b9c0a <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9bfe:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b9c02:	4620      	mov	r0, r4
   b9c04:	f006 f83e 	bl	bfc84 <_ZN6StringC1ERKS_>
   b9c08:	e7f3      	b.n	b9bf2 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9c0a:	f105 0120 	add.w	r1, r5, #32
   b9c0e:	e7f8      	b.n	b9c02 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9c10:	000c5f3b 	.word	0x000c5f3b

000b9c14 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b9c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c18:	4680      	mov	r8, r0
   b9c1a:	b0a8      	sub	sp, #160	; 0xa0
   b9c1c:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9c1e:	4615      	mov	r5, r2
   b9c20:	b12a      	cbz	r2, b9c2e <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b9c22:	4b47      	ldr	r3, [pc, #284]	; (b9d40 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b9c24:	4610      	mov	r0, r2
   b9c26:	6819      	ldr	r1, [r3, #0]
   b9c28:	f008 fd3f 	bl	c26aa <strcmp>
   b9c2c:	b938      	cbnz	r0, b9c3e <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9c2e:	4621      	mov	r1, r4
   b9c30:	4640      	mov	r0, r8
   b9c32:	f7ff ffbb 	bl	b9bac <_ZN16LocalTimeConvert7timeStrEv>
}
   b9c36:	4640      	mov	r0, r8
   b9c38:	b028      	add	sp, #160	; 0xa0
   b9c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9c3e:	4629      	mov	r1, r5
   b9c40:	223f      	movs	r2, #63	; 0x3f
   b9c42:	a818      	add	r0, sp, #96	; 0x60
   b9c44:	f008 fd7d 	bl	c2742 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9c48:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c4a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9c4c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c50:	f008 fd5b 	bl	c270a <strlen>
    String zoneNameStr = zoneName();
   b9c54:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9c56:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9c58:	a803      	add	r0, sp, #12
   b9c5a:	f7ff ffbf 	bl	b9bdc <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9c5e:	1d20      	adds	r0, r4, #4
   b9c60:	f7ff fe10 	bl	b9884 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9c64:	b348      	cbz	r0, b9cba <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b9c66:	4937      	ldr	r1, [pc, #220]	; (b9d44 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b9c68:	a807      	add	r0, sp, #28
   b9c6a:	f008 fd28 	bl	c26be <strcpy>
   b9c6e:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9c70:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b9c72:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b9c76:	45ba      	cmp	sl, r7
   b9c78:	d94c      	bls.n	b9d14 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b9c7a:	7833      	ldrb	r3, [r6, #0]
   b9c7c:	2b25      	cmp	r3, #37	; 0x25
   b9c7e:	f107 0901 	add.w	r9, r7, #1
   b9c82:	d117      	bne.n	b9cb4 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b9c84:	7873      	ldrb	r3, [r6, #1]
   b9c86:	2b7a      	cmp	r3, #122	; 0x7a
   b9c88:	d136      	bne.n	b9cf8 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b9c8a:	a807      	add	r0, sp, #28
   b9c8c:	f008 fd3d 	bl	c270a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9c90:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b9c92:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9c94:	1838      	adds	r0, r7, r0
   b9c96:	ebaa 0207 	sub.w	r2, sl, r7
   b9c9a:	1cb1      	adds	r1, r6, #2
   b9c9c:	4418      	add	r0, r3
   b9c9e:	f008 fc41 	bl	c2524 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9ca2:	462a      	mov	r2, r5
   b9ca4:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9ca6:	4630      	mov	r0, r6
   b9ca8:	f008 fc3c 	bl	c2524 <memcpy>
            len = strlen(format_str);
   b9cac:	a818      	add	r0, sp, #96	; 0x60
   b9cae:	f008 fd2c 	bl	c270a <strlen>
   b9cb2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b9cb4:	3601      	adds	r6, #1
   b9cb6:	464f      	mov	r7, r9
   b9cb8:	e7db      	b.n	b9c72 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9cba:	6820      	ldr	r0, [r4, #0]
   b9cbc:	f7ff fd04 	bl	b96c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9cc0:	b1b8      	cbz	r0, b9cf2 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b9cc2:	f104 0018 	add.w	r0, r4, #24
   b9cc6:	f7ff fdc1 	bl	b984c <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b9cca:	223c      	movs	r2, #60	; 0x3c
   b9ccc:	fb90 f3f2 	sdiv	r3, r0, r2
   b9cd0:	2b00      	cmp	r3, #0
   b9cd2:	bfb8      	it	lt
   b9cd4:	425b      	neglt	r3, r3
   b9cd6:	fbb3 f1f2 	udiv	r1, r3, r2
   b9cda:	fb02 3311 	mls	r3, r2, r1, r3
   b9cde:	9300      	str	r3, [sp, #0]
   b9ce0:	4a19      	ldr	r2, [pc, #100]	; (b9d48 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b9ce2:	4b1a      	ldr	r3, [pc, #104]	; (b9d4c <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b9ce4:	fb90 f3f3 	sdiv	r3, r0, r3
   b9ce8:	2110      	movs	r1, #16
   b9cea:	a807      	add	r0, sp, #28
   b9cec:	f003 fc02 	bl	bd4f4 <snprintf>
   b9cf0:	e7bd      	b.n	b9c6e <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9cf2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b9cf6:	e7e6      	b.n	b9cc6 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9cf8:	2b5a      	cmp	r3, #90	; 0x5a
   b9cfa:	d1db      	bne.n	b9cb4 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9cfc:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9cfe:	ab18      	add	r3, sp, #96	; 0x60
   b9d00:	1978      	adds	r0, r7, r5
   b9d02:	ebaa 0207 	sub.w	r2, sl, r7
   b9d06:	1cb1      	adds	r1, r6, #2
   b9d08:	4418      	add	r0, r3
   b9d0a:	f008 fc0b 	bl	c2524 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9d0e:	9903      	ldr	r1, [sp, #12]
   b9d10:	462a      	mov	r2, r5
   b9d12:	e7c8      	b.n	b9ca6 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b9d14:	2100      	movs	r1, #0
   b9d16:	222e      	movs	r2, #46	; 0x2e
   b9d18:	a80c      	add	r0, sp, #48	; 0x30
   b9d1a:	910b      	str	r1, [sp, #44]	; 0x2c
   b9d1c:	f008 fc2a 	bl	c2574 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9d20:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b9d24:	aa18      	add	r2, sp, #96	; 0x60
   b9d26:	2132      	movs	r1, #50	; 0x32
   b9d28:	a80b      	add	r0, sp, #44	; 0x2c
   b9d2a:	f003 fc1b 	bl	bd564 <strftime>
    return String(buf);    
   b9d2e:	a90b      	add	r1, sp, #44	; 0x2c
   b9d30:	4640      	mov	r0, r8
   b9d32:	f005 ff5c 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b9d36:	a803      	add	r0, sp, #12
   b9d38:	f005 ff0e 	bl	bfb58 <_ZN6StringD1Ev>
   b9d3c:	e77b      	b.n	b9c36 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9d3e:	bf00      	nop
   b9d40:	2003d684 	.word	0x2003d684
   b9d44:	000c5f3b 	.word	0x000c5f3b
   b9d48:	000c5f3d 	.word	0x000c5f3d
   b9d4c:	fffff1f0 	.word	0xfffff1f0

000b9d50 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9d50:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b9d52:	4d09      	ldr	r5, [pc, #36]	; (b9d78 <_ZN9LocalTime8instanceEv+0x28>)
   b9d54:	682b      	ldr	r3, [r5, #0]
   b9d56:	b963      	cbnz	r3, b9d72 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9d58:	2060      	movs	r0, #96	; 0x60
   b9d5a:	f7fa f99c 	bl	b4096 <_Znwj>
   b9d5e:	4604      	mov	r4, r0
   b9d60:	b130      	cbz	r0, b9d70 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b9d62:	4b06      	ldr	r3, [pc, #24]	; (b9d7c <_ZN9LocalTime8instanceEv+0x2c>)
   b9d64:	f840 3b04 	str.w	r3, [r0], #4
   b9d68:	f7ff fe12 	bl	b9990 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9d6c:	2364      	movs	r3, #100	; 0x64
   b9d6e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9d70:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b9d72:	6828      	ldr	r0, [r5, #0]
   b9d74:	bd38      	pop	{r3, r4, r5, pc}
   b9d76:	bf00      	nop
   b9d78:	2003e4cc 	.word	0x2003e4cc
   b9d7c:	000c5f50 	.word	0x000c5f50

000b9d80 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9d80:	f003 bc08 	b.w	bd594 <mktime>

000b9d84 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b9d84:	3901      	subs	r1, #1
   b9d86:	290b      	cmp	r1, #11
   b9d88:	d815      	bhi.n	b9db6 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9d8a:	e8df f001 	tbb	[pc, r1]
   b9d8e:	0816      	.short	0x0816
   b9d90:	06160616 	.word	0x06160616
   b9d94:	16061616 	.word	0x16061616
   b9d98:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9d9a:	201e      	movs	r0, #30
   b9d9c:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9d9e:	0783      	lsls	r3, r0, #30
   b9da0:	d10d      	bne.n	b9dbe <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b9da2:	2364      	movs	r3, #100	; 0x64
   b9da4:	fb90 f2f3 	sdiv	r2, r0, r3
   b9da8:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9dac:	2800      	cmp	r0, #0
   b9dae:	bf0c      	ite	eq
   b9db0:	201c      	moveq	r0, #28
   b9db2:	201d      	movne	r0, #29
   b9db4:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b9db6:	2000      	movs	r0, #0
   b9db8:	4770      	bx	lr
            return 31;
   b9dba:	201f      	movs	r0, #31
   b9dbc:	4770      	bx	lr
                return 28;
   b9dbe:	201c      	movs	r0, #28
}
   b9dc0:	4770      	bx	lr

000b9dc2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b9dc4:	2301      	movs	r3, #1
   b9dc6:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9dc8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9dcc:	3b01      	subs	r3, #1
   b9dce:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9dd0:	2300      	movs	r3, #0
   b9dd2:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9dd6:	4606      	mov	r6, r0
   b9dd8:	460c      	mov	r4, r1
   b9dda:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9ddc:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9dde:	4620      	mov	r0, r4
   b9de0:	f7ff ffce 	bl	b9d80 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9de4:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9de8:	69a2      	ldr	r2, [r4, #24]
   b9dea:	429a      	cmp	r2, r3
   b9dec:	d003      	beq.n	b9df6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9dee:	68e3      	ldr	r3, [r4, #12]
   b9df0:	3301      	adds	r3, #1
   b9df2:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9df4:	e7f3      	b.n	b9dde <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9df6:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9dfa:	2d01      	cmp	r5, #1
   b9dfc:	d013      	beq.n	b9e26 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9dfe:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9e00:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9e02:	3d01      	subs	r5, #1
   b9e04:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9e08:	441d      	add	r5, r3
   b9e0a:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9e0c:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9e10:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9e14:	f7ff ffb6 	bl	b9d84 <_ZN9LocalTime14lastDayOfMonthEii>
   b9e18:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9e1a:	bfc4      	itt	gt
   b9e1c:	3d07      	subgt	r5, #7
   b9e1e:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9e20:	4620      	mov	r0, r4
   b9e22:	f7ff ffad 	bl	b9d80 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9e26:	4621      	mov	r1, r4
   b9e28:	f106 0008 	add.w	r0, r6, #8
   b9e2c:	f7ff fd3c 	bl	b98a8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9e30:	4638      	mov	r0, r7
   b9e32:	f7ff fd46 	bl	b98c2 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9e36:	4620      	mov	r0, r4
}
   b9e38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9e3c:	f003 bbaa 	b.w	bd594 <mktime>

000b9e40 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9e42:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9e46:	b085      	sub	sp, #20
   b9e48:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9e4a:	b92b      	cbnz	r3, b9e58 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9e4c:	f7ff ff80 	bl	b9d50 <_ZN9LocalTime8instanceEv>
   b9e50:	1d01      	adds	r1, r0, #4
   b9e52:	1d20      	adds	r0, r4, #4
   b9e54:	f7ff fc4f 	bl	b96f6 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9e58:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9e5c:	2b00      	cmp	r3, #0
   b9e5e:	d065      	beq.n	b9f2c <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9e60:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9e64:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9e68:	4639      	mov	r1, r7
   b9e6a:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9e6c:	463e      	mov	r6, r7
   b9e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9e72:	f003 fb7f 	bl	bd574 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9e76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9e78:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9e7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9e82:	6833      	ldr	r3, [r6, #0]
   b9e84:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9e86:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9e8a:	a802      	add	r0, sp, #8
   b9e8c:	f7ff fc86 	bl	b979c <_ZN12LocalTimeHMSC1ERKS_>
   b9e90:	aa02      	add	r2, sp, #8
   b9e92:	4639      	mov	r1, r7
   b9e94:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9e98:	f7ff ff93 	bl	b9dc2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9e9c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9ea0:	f104 0118 	add.w	r1, r4, #24
   b9ea4:	a802      	add	r0, sp, #8
   b9ea6:	f7ff fc79 	bl	b979c <_ZN12LocalTimeHMSC1ERKS_>
   b9eaa:	aa02      	add	r2, sp, #8
   b9eac:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9eb0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9eb4:	f7ff ff85 	bl	b9dc2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9eb8:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9ebc:	4286      	cmp	r6, r0
   b9ebe:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9ec2:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9ec6:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9eca:	da23      	bge.n	b9f14 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9ecc:	42b2      	cmp	r2, r6
   b9ece:	eb73 0505 	sbcs.w	r5, r3, r5
   b9ed2:	da19      	bge.n	b9f08 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9ed4:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9ed6:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9ed8:	6820      	ldr	r0, [r4, #0]
   b9eda:	f7ff fbf5 	bl	b96c8 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9ede:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9ee2:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9ee6:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9ee8:	bb10      	cbnz	r0, b9f30 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9eea:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9eee:	f7ff fcad 	bl	b984c <_ZNK12LocalTimeHMS9toSecondsEv>
   b9ef2:	1a2d      	subs	r5, r5, r0
   b9ef4:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9ef8:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9efc:	9901      	ldr	r1, [sp, #4]
   b9efe:	a802      	add	r0, sp, #8
   b9f00:	f003 fb38 	bl	bd574 <localtime_r>
}
   b9f04:	b005      	add	sp, #20
   b9f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9f08:	4282      	cmp	r2, r0
   b9f0a:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9f0c:	bfb4      	ite	lt
   b9f0e:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9f10:	2302      	movge	r3, #2
   b9f12:	e7e0      	b.n	b9ed6 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9f14:	4282      	cmp	r2, r0
   b9f16:	eb73 0101 	sbcs.w	r1, r3, r1
   b9f1a:	da01      	bge.n	b9f20 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9f1c:	2303      	movs	r3, #3
   b9f1e:	e7da      	b.n	b9ed6 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9f20:	42b2      	cmp	r2, r6
   b9f22:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9f24:	bfb4      	ite	lt
   b9f26:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9f28:	2305      	movge	r3, #5
   b9f2a:	e7d4      	b.n	b9ed6 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9f2c:	2306      	movs	r3, #6
   b9f2e:	e7d2      	b.n	b9ed6 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9f30:	f104 0018 	add.w	r0, r4, #24
   b9f34:	e7db      	b.n	b9eee <_ZN16LocalTimeConvert7convertEv+0xae>

000b9f36 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9f38:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9f3a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9f3c:	4668      	mov	r0, sp
   b9f3e:	f7ff fc24 	bl	b978a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9f42:	466a      	mov	r2, sp
   b9f44:	4629      	mov	r1, r5
   b9f46:	4620      	mov	r0, r4
   b9f48:	f004 fa36 	bl	be3b8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9f4c:	a801      	add	r0, sp, #4
   b9f4e:	f7fa fbaf 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f52:	4620      	mov	r0, r4
   b9f54:	b003      	add	sp, #12
   b9f56:	bd30      	pop	{r4, r5, pc}

000b9f58 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9f5a:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f5c:	4604      	mov	r4, r0
   b9f5e:	4668      	mov	r0, sp
   b9f60:	f7ff fc13 	bl	b978a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9f64:	466a      	mov	r2, sp
   b9f66:	4629      	mov	r1, r5
   b9f68:	4620      	mov	r0, r4
   b9f6a:	f004 fa01 	bl	be370 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f6e:	a801      	add	r0, sp, #4
   b9f70:	f7fa fb9e 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f74:	4620      	mov	r0, r4
   b9f76:	b003      	add	sp, #12
   b9f78:	bd30      	pop	{r4, r5, pc}

000b9f7a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9f7c:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f7e:	4604      	mov	r4, r0
   b9f80:	4668      	mov	r0, sp
   b9f82:	f7ff fc02 	bl	b978a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9f86:	466a      	mov	r2, sp
   b9f88:	4629      	mov	r1, r5
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f004 f999 	bl	be2c2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f90:	a801      	add	r0, sp, #4
   b9f92:	f7fa fb8d 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f96:	4620      	mov	r0, r4
   b9f98:	b003      	add	sp, #12
   b9f9a:	bd30      	pop	{r4, r5, pc}

000b9f9c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9f9c:	4770      	bx	lr

000b9f9e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9f9e:	b510      	push	{r4, lr}
}
   b9fa0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9fa2:	4604      	mov	r4, r0
}
   b9fa4:	f7fa f87b 	bl	b409e <_ZdlPvj>
   b9fa8:	4620      	mov	r0, r4
   b9faa:	bd10      	pop	{r4, pc}

000b9fac <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9fac:	6803      	ldr	r3, [r0, #0]
   b9fae:	b2c9      	uxtb	r1, r1
   b9fb0:	689b      	ldr	r3, [r3, #8]
   b9fb2:	4718      	bx	r3

000b9fb4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9fb4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9fb6:	4d03      	ldr	r5, [pc, #12]	; (b9fc4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9fb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9fbc:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9fc0:	bd30      	pop	{r4, r5, pc}
   b9fc2:	bf00      	nop
   b9fc4:	000c5f90 	.word	0x000c5f90

000b9fc8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9fc8:	6840      	ldr	r0, [r0, #4]
   b9fca:	f004 b805 	b.w	bdfd8 <_ZN7TwoWire5beginEv>

000b9fce <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9fce:	b510      	push	{r4, lr}
   b9fd0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b9fd2:	6800      	ldr	r0, [r0, #0]
   b9fd4:	f004 f85b 	bl	be08e <_ZN7TwoWire6unlockEv>
   b9fd8:	4620      	mov	r0, r4
   b9fda:	bd10      	pop	{r4, pc}

000b9fdc <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9fe0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9fe2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fe4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9fe6:	460d      	mov	r5, r1
   b9fe8:	4616      	mov	r6, r2
   b9fea:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9fec:	f004 f846 	bl	be07c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9ff0:	b1a7      	cbz	r7, ba01c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9ff2:	68e1      	ldr	r1, [r4, #12]
   b9ff4:	6860      	ldr	r0, [r4, #4]
   b9ff6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9ffa:	f004 f820 	bl	be03e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9ffe:	0a29      	lsrs	r1, r5, #8
   ba000:	6860      	ldr	r0, [r4, #4]
   ba002:	f7ff ffd3 	bl	b9fac <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   ba006:	4629      	mov	r1, r5
   ba008:	6860      	ldr	r0, [r4, #4]
   ba00a:	f7ff ffcf 	bl	b9fac <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   ba00e:	6860      	ldr	r0, [r4, #4]
   ba010:	2100      	movs	r1, #0
   ba012:	f004 f82f 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   ba016:	b148      	cbz	r0, ba02c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   ba018:	2400      	movs	r4, #0
   ba01a:	e000      	b.n	ba01e <_ZN6MB85RC8readDataEjPhj+0x42>
   ba01c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   ba01e:	a801      	add	r0, sp, #4
   ba020:	f7ff ffd5 	bl	b9fce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   ba024:	4620      	mov	r0, r4
   ba026:	b003      	add	sp, #12
   ba028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   ba02c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   ba02e:	7b21      	ldrb	r1, [r4, #12]
   ba030:	6860      	ldr	r0, [r4, #4]
   ba032:	46b8      	mov	r8, r7
   ba034:	bf28      	it	cs
   ba036:	f04f 0820 	movcs.w	r8, #32
   ba03a:	2301      	movs	r3, #1
   ba03c:	4642      	mov	r2, r8
   ba03e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   ba042:	f003 ffe6 	bl	be012 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   ba046:	f006 fbdd 	bl	c0804 <_Z19__fetch_global_Wirev>
   ba04a:	6803      	ldr	r3, [r0, #0]
   ba04c:	691b      	ldr	r3, [r3, #16]
   ba04e:	4798      	blx	r3
   ba050:	4540      	cmp	r0, r8
   ba052:	dbe1      	blt.n	ba018 <_ZN6MB85RC8readDataEjPhj+0x3c>
   ba054:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   ba058:	f006 fbd4 	bl	c0804 <_Z19__fetch_global_Wirev>
   ba05c:	6803      	ldr	r3, [r0, #0]
   ba05e:	695b      	ldr	r3, [r3, #20]
   ba060:	4798      	blx	r3
   ba062:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   ba066:	454e      	cmp	r6, r9
   ba068:	d1f6      	bne.n	ba058 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   ba06a:	4445      	add	r5, r8
				dataLen--;
   ba06c:	eba7 0708 	sub.w	r7, r7, r8
   ba070:	e7be      	b.n	b9ff0 <_ZN6MB85RC8readDataEjPhj+0x14>

000ba072 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   ba072:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba076:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   ba078:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba07a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   ba07c:	460e      	mov	r6, r1
   ba07e:	4690      	mov	r8, r2
   ba080:	461d      	mov	r5, r3
      { _M_device.lock(); }
   ba082:	f003 fffb 	bl	be07c <_ZN7TwoWire4lockEv>
   ba086:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   ba08a:	f1b9 0f00 	cmp.w	r9, #0
   ba08e:	d02a      	beq.n	ba0e6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   ba090:	b34d      	cbz	r5, ba0e6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   ba092:	68e1      	ldr	r1, [r4, #12]
   ba094:	6860      	ldr	r0, [r4, #4]
   ba096:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   ba09a:	f003 ffd0 	bl	be03e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   ba09e:	0a31      	lsrs	r1, r6, #8
   ba0a0:	6860      	ldr	r0, [r4, #4]
   ba0a2:	f7ff ff83 	bl	b9fac <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   ba0a6:	6860      	ldr	r0, [r4, #4]
   ba0a8:	4631      	mov	r1, r6
   ba0aa:	f7ff ff7f 	bl	b9fac <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba0ae:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   ba0b2:	4647      	mov	r7, r8
   ba0b4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   ba0b8:	6860      	ldr	r0, [r4, #4]
   ba0ba:	f817 1b01 	ldrb.w	r1, [r7], #1
   ba0be:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   ba0c0:	3d01      	subs	r5, #1
				wire.write(*data);
   ba0c2:	689b      	ldr	r3, [r3, #8]
   ba0c4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba0c6:	4555      	cmp	r5, sl
   ba0c8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   ba0cc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   ba0ce:	d001      	beq.n	ba0d4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   ba0d0:	2d00      	cmp	r5, #0
   ba0d2:	d1f1      	bne.n	ba0b8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   ba0d4:	6860      	ldr	r0, [r4, #4]
   ba0d6:	2101      	movs	r1, #1
   ba0d8:	f003 ffcc 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   ba0dc:	2800      	cmp	r0, #0
   ba0de:	d0d7      	beq.n	ba090 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   ba0e0:	f04f 0900 	mov.w	r9, #0
   ba0e4:	e7d1      	b.n	ba08a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   ba0e6:	a801      	add	r0, sp, #4
   ba0e8:	f7ff ff71 	bl	b9fce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   ba0ec:	4648      	mov	r0, r9
   ba0ee:	b003      	add	sp, #12
   ba0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba0f4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba0f8:	b08b      	sub	sp, #44	; 0x2c
   ba0fa:	460e      	mov	r6, r1
   ba0fc:	4615      	mov	r5, r2
   ba0fe:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   ba100:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba102:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba104:	461c      	mov	r4, r3
      { _M_device.lock(); }
   ba106:	f003 ffb9 	bl	be07c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   ba10a:	42ae      	cmp	r6, r5
   ba10c:	d229      	bcs.n	ba162 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   ba10e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   ba110:	4425      	add	r5, r4
			while(numBytes > 0) {
   ba112:	b18c      	cbz	r4, ba138 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   ba114:	2c1e      	cmp	r4, #30
   ba116:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   ba118:	f8d8 3000 	ldr.w	r3, [r8]
   ba11c:	bf28      	it	cs
   ba11e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   ba120:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   ba122:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba126:	aa02      	add	r2, sp, #8
   ba128:	463b      	mov	r3, r7
   ba12a:	4631      	mov	r1, r6
   ba12c:	4640      	mov	r0, r8
				framAddrTo -= count;
   ba12e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   ba130:	47c8      	blx	r9
				if (!result) {
   ba132:	b948      	cbnz	r0, ba148 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   ba134:	2400      	movs	r4, #0
   ba136:	e000      	b.n	ba13a <_ZN6MB85RC8moveDataEjjj+0x46>
   ba138:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   ba13a:	a801      	add	r0, sp, #4
   ba13c:	f7ff ff47 	bl	b9fce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   ba140:	4620      	mov	r0, r4
   ba142:	b00b      	add	sp, #44	; 0x2c
   ba144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   ba148:	f8d8 3000 	ldr.w	r3, [r8]
   ba14c:	aa02      	add	r2, sp, #8
   ba14e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba152:	4629      	mov	r1, r5
   ba154:	463b      	mov	r3, r7
   ba156:	4640      	mov	r0, r8
   ba158:	47c8      	blx	r9
				if (!result) {
   ba15a:	2800      	cmp	r0, #0
   ba15c:	d0ea      	beq.n	ba134 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   ba15e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba160:	e7d7      	b.n	ba112 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   ba162:	d9e9      	bls.n	ba138 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   ba164:	2c00      	cmp	r4, #0
   ba166:	d0e7      	beq.n	ba138 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   ba168:	f8d8 3000 	ldr.w	r3, [r8]
   ba16c:	2c1e      	cmp	r4, #30
   ba16e:	4627      	mov	r7, r4
   ba170:	bf28      	it	cs
   ba172:	271e      	movcs	r7, #30
   ba174:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba178:	aa02      	add	r2, sp, #8
   ba17a:	463b      	mov	r3, r7
   ba17c:	4631      	mov	r1, r6
   ba17e:	4640      	mov	r0, r8
   ba180:	47c8      	blx	r9
				if (!result) {
   ba182:	2800      	cmp	r0, #0
   ba184:	d0d6      	beq.n	ba134 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   ba186:	f8d8 3000 	ldr.w	r3, [r8]
   ba18a:	aa02      	add	r2, sp, #8
   ba18c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba190:	4629      	mov	r1, r5
   ba192:	463b      	mov	r3, r7
   ba194:	4640      	mov	r0, r8
   ba196:	47c8      	blx	r9
				if (!result) {
   ba198:	2800      	cmp	r0, #0
   ba19a:	d0cb      	beq.n	ba134 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   ba19c:	443e      	add	r6, r7
				framAddrTo += count;
   ba19e:	443d      	add	r5, r7
				numBytes -= count;
   ba1a0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba1a2:	e7df      	b.n	ba164 <_ZN6MB85RC8moveDataEjjj+0x70>

000ba1a4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   ba1a4:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba1a6:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   ba1a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   ba1ac:	2101      	movs	r1, #1
   ba1ae:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   ba1b2:	4770      	bx	lr

000ba1b4 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba1b4:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   ba1b6:	6842      	ldr	r2, [r0, #4]
   ba1b8:	4603      	mov	r3, r0
   ba1ba:	1054      	asrs	r4, r2, #1
   ba1bc:	eb01 0062 	add.w	r0, r1, r2, asr #1
   ba1c0:	07d2      	lsls	r2, r2, #31
   ba1c2:	bf48      	it	mi
   ba1c4:	590a      	ldrmi	r2, [r1, r4]
   ba1c6:	681b      	ldr	r3, [r3, #0]
      }
   ba1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba1cc:	bf48      	it	mi
   ba1ce:	58d3      	ldrmi	r3, [r2, r3]
   ba1d0:	4718      	bx	r3

000ba1d2 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   ba1d2:	2a01      	cmp	r2, #1
   ba1d4:	d102      	bne.n	ba1dc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba1d6:	6001      	str	r1, [r0, #0]
      }
   ba1d8:	2000      	movs	r0, #0
   ba1da:	4770      	bx	lr
	  switch (__op)
   ba1dc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba1de:	bf04      	itt	eq
   ba1e0:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   ba1e4:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   ba1e8:	e7f6      	b.n	ba1d8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000ba1ea <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   ba1ea:	2a01      	cmp	r2, #1
   ba1ec:	d102      	bne.n	ba1f4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba1ee:	6001      	str	r1, [r0, #0]
      }
   ba1f0:	2000      	movs	r0, #0
   ba1f2:	4770      	bx	lr
	  switch (__op)
   ba1f4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba1f6:	bf04      	itt	eq
   ba1f8:	680b      	ldreq	r3, [r1, #0]
   ba1fa:	6003      	streq	r3, [r0, #0]
	      break;
   ba1fc:	e7f8      	b.n	ba1f0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000ba1fe <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   ba1fe:	6f40      	ldr	r0, [r0, #116]	; 0x74
   ba200:	f002 bd74 	b.w	bccec <os_mutex_recursive_lock>

000ba204 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   ba204:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   ba208:	4601      	mov	r1, r0
    if (stateHandler) {
   ba20a:	b11b      	cbz	r3, ba214 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba20c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   ba210:	30c0      	adds	r0, #192	; 0xc0
   ba212:	4718      	bx	r3
}
   ba214:	4770      	bx	lr
	...

000ba218 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   ba21a:	4d12      	ldr	r5, [pc, #72]	; (ba264 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba21c:	4608      	mov	r0, r1
        eventData = "";
   ba21e:	2a00      	cmp	r2, #0
   ba220:	bf18      	it	ne
   ba222:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba224:	460e      	mov	r6, r1
   ba226:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba228:	f008 fa6f 	bl	c270a <strlen>
   ba22c:	2840      	cmp	r0, #64	; 0x40
   ba22e:	d816      	bhi.n	ba25e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   ba230:	4628      	mov	r0, r5
   ba232:	f008 fa6a 	bl	c270a <strlen>
   ba236:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   ba23a:	d810      	bhi.n	ba25e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   ba23c:	3043      	adds	r0, #67	; 0x43
   ba23e:	f7f9 ff2c 	bl	b409a <_Znaj>
    if (event) {
   ba242:	4604      	mov	r4, r0
   ba244:	b148      	cbz	r0, ba25a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   ba246:	4631      	mov	r1, r6
        event->flags = flags;
   ba248:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   ba24c:	f008 fa37 	bl	c26be <strcpy>
        strcpy(event->eventData, eventData);
   ba250:	4629      	mov	r1, r5
   ba252:	f104 0042 	add.w	r0, r4, #66	; 0x42
   ba256:	f008 fa32 	bl	c26be <strcpy>
}
   ba25a:	4620      	mov	r0, r4
   ba25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   ba25e:	2400      	movs	r4, #0
   ba260:	e7fb      	b.n	ba25a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   ba262:	bf00      	nop
   ba264:	000c6838 	.word	0x000c6838

000ba268 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba268:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba26a:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba26c:	460a      	mov	r2, r1
   ba26e:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba270:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba272:	1d01      	adds	r1, r0, #4
   ba274:	a808      	add	r0, sp, #32
   ba276:	f002 f8e9 	bl	bc44c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba27a:	9808      	ldr	r0, [sp, #32]
   ba27c:	2100      	movs	r1, #0
   ba27e:	f009 f9d7 	bl	c3630 <open>
   ba282:	4605      	mov	r5, r0
   ba284:	a808      	add	r0, sp, #32
   ba286:	f005 fc67 	bl	bfb58 <_ZN6StringD1Ev>
    if (fd) {
   ba28a:	2d00      	cmp	r5, #0
   ba28c:	d060      	beq.n	ba350 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   ba28e:	a908      	add	r1, sp, #32
   ba290:	4628      	mov	r0, r5
   ba292:	f009 f9bb 	bl	c360c <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   ba296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba298:	492e      	ldr	r1, [pc, #184]	; (ba354 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   ba29a:	482f      	ldr	r0, [pc, #188]	; (ba358 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba29c:	4632      	mov	r2, r6
   ba29e:	f7fd fc23 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   ba2a2:	2200      	movs	r2, #0
   ba2a4:	4611      	mov	r1, r2
   ba2a6:	4628      	mov	r0, r5
   ba2a8:	f009 f9b8 	bl	c361c <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   ba2ac:	2208      	movs	r2, #8
   ba2ae:	a906      	add	r1, sp, #24
   ba2b0:	4628      	mov	r0, r5
   ba2b2:	f009 f9d1 	bl	c3658 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   ba2b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba2b8:	2f4a      	cmp	r7, #74	; 0x4a
   ba2ba:	dd39      	ble.n	ba330 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   ba2bc:	4b27      	ldr	r3, [pc, #156]	; (ba35c <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   ba2be:	9a06      	ldr	r2, [sp, #24]
   ba2c0:	429a      	cmp	r2, r3
   ba2c2:	d135      	bne.n	ba330 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   ba2c4:	4b26      	ldr	r3, [pc, #152]	; (ba360 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   ba2c6:	9a07      	ldr	r2, [sp, #28]
   ba2c8:	429a      	cmp	r2, r3
   ba2ca:	d131      	bne.n	ba330 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   ba2cc:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   ba2d0:	4610      	mov	r0, r2
   ba2d2:	9205      	str	r2, [sp, #20]
   ba2d4:	f7f9 fee1 	bl	b409a <_Znaj>
            if (result) {
   ba2d8:	4604      	mov	r4, r0
   ba2da:	b1c0      	cbz	r0, ba30e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba2dc:	4427      	add	r7, r4
                read(fd, result, eventSize);
   ba2de:	4601      	mov	r1, r0
   ba2e0:	9a05      	ldr	r2, [sp, #20]
   ba2e2:	4628      	mov	r0, r5
   ba2e4:	f009 f9b8 	bl	c3658 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba2e8:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   ba2ec:	b9ab      	cbnz	r3, ba31a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   ba2ee:	1c63      	adds	r3, r4, #1
   ba2f0:	4618      	mov	r0, r3
   ba2f2:	9305      	str	r3, [sp, #20]
   ba2f4:	f008 fa09 	bl	c270a <strlen>
   ba2f8:	283f      	cmp	r0, #63	; 0x3f
   ba2fa:	9b05      	ldr	r3, [sp, #20]
   ba2fc:	d80d      	bhi.n	ba31a <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   ba2fe:	f104 0242 	add.w	r2, r4, #66	; 0x42
   ba302:	9200      	str	r2, [sp, #0]
   ba304:	4917      	ldr	r1, [pc, #92]	; (ba364 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   ba306:	4814      	ldr	r0, [pc, #80]	; (ba358 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba308:	4632      	mov	r2, r6
   ba30a:	f7fd fbed 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba30e:	4628      	mov	r0, r5
   ba310:	f009 f974 	bl	c35fc <close>
}
   ba314:	4620      	mov	r0, r4
   ba316:	b01f      	add	sp, #124	; 0x7c
   ba318:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba31a:	4913      	ldr	r1, [pc, #76]	; (ba368 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba31c:	480e      	ldr	r0, [pc, #56]	; (ba358 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba31e:	4632      	mov	r2, r6
   ba320:	f7fd fbe2 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba324:	2143      	movs	r1, #67	; 0x43
   ba326:	4620      	mov	r0, r4
   ba328:	f7f9 feb9 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba32c:	2400      	movs	r4, #0
   ba32e:	e7ee      	b.n	ba30e <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba330:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba334:	9302      	str	r3, [sp, #8]
   ba336:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba33a:	9301      	str	r3, [sp, #4]
   ba33c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba340:	9300      	str	r3, [sp, #0]
   ba342:	490a      	ldr	r1, [pc, #40]	; (ba36c <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba344:	9b06      	ldr	r3, [sp, #24]
   ba346:	4804      	ldr	r0, [pc, #16]	; (ba358 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba348:	4632      	mov	r2, r6
   ba34a:	f7fd fbcd 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
   ba34e:	e7ed      	b.n	ba32c <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba350:	462c      	mov	r4, r5
    return result;
   ba352:	e7df      	b.n	ba314 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba354:	000c5fa4 	.word	0x000c5fa4
   ba358:	2003e4d0 	.word	0x2003e4d0
   ba35c:	31b67663 	.word	0x31b67663
   ba360:	00410801 	.word	0x00410801
   ba364:	000c5fb8 	.word	0x000c5fb8
   ba368:	000c5fda 	.word	0x000c5fda
   ba36c:	000c6008 	.word	0x000c6008

000ba370 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba374:	4680      	mov	r8, r0
   ba376:	4b28      	ldr	r3, [pc, #160]	; (ba418 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba378:	f848 3b04 	str.w	r3, [r8], #4
   ba37c:	4604      	mov	r4, r0
   ba37e:	4640      	mov	r0, r8
   ba380:	f001 ff7c 	bl	bc27c <_ZN14SequentialFileC1Ev>
   ba384:	2202      	movs	r2, #2
   ba386:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba388:	2500      	movs	r5, #0
   ba38a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba38e:	2308      	movs	r3, #8
   ba390:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba392:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba396:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba39a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba39e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba3a2:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba3a4:	2020      	movs	r0, #32
   ba3a6:	f7f9 fe76 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3aa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba3ac:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba3ae:	3e01      	subs	r6, #1
   ba3b0:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba3b2:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba3b6:	4607      	mov	r7, r0
   ba3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba3bc:	f7f9 fe6b 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba3c0:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba3c4:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba3c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba3cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba3d4:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba3d8:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba3dc:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba3e0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba3e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba3e8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba3ec:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba3f0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba3f4:	4909      	ldr	r1, [pc, #36]	; (ba41c <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba3f6:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba3fa:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba3fe:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba402:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba406:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba40a:	4640      	mov	r0, r8
   ba40c:	f001 ff7c 	bl	bc308 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba410:	4620      	mov	r0, r4
   ba412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba416:	bf00      	nop
   ba418:	000c6224 	.word	0x000c6224
   ba41c:	000c604d 	.word	0x000c604d

000ba420 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba420:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba422:	4d06      	ldr	r5, [pc, #24]	; (ba43c <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba424:	682b      	ldr	r3, [r5, #0]
   ba426:	b93b      	cbnz	r3, ba438 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba428:	20d0      	movs	r0, #208	; 0xd0
   ba42a:	f7f9 fe34 	bl	b4096 <_Znwj>
   ba42e:	4604      	mov	r4, r0
   ba430:	b108      	cbz	r0, ba436 <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba432:	f7ff ff9d 	bl	ba370 <_ZN17PublishQueuePosixC1Ev>
   ba436:	602c      	str	r4, [r5, #0]
}
   ba438:	6828      	ldr	r0, [r5, #0]
   ba43a:	bd38      	pop	{r3, r4, r5, pc}
   ba43c:	2003e4d4 	.word	0x2003e4d4

000ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba440:	6942      	ldr	r2, [r0, #20]
   ba442:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba444:	1a9b      	subs	r3, r3, r2
   ba446:	109b      	asrs	r3, r3, #2
   ba448:	1e5a      	subs	r2, r3, #1
   ba44a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba44e:	1a5b      	subs	r3, r3, r1
   ba450:	109b      	asrs	r3, r3, #2
   ba452:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba456:	6902      	ldr	r2, [r0, #16]
   ba458:	6880      	ldr	r0, [r0, #8]
   ba45a:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba45c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba460:	4770      	bx	lr

000ba462 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba462:	b538      	push	{r3, r4, r5, lr}
   ba464:	4605      	mov	r5, r0
   ba466:	f7ff feca 	bl	ba1fe <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba46a:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba46e:	f7ff ffe7 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba472:	4604      	mov	r4, r0
   ba474:	b950      	cbnz	r0, ba48c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba476:	1d28      	adds	r0, r5, #4
   ba478:	f002 fa3c 	bl	bc8f4 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba47c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba480:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba482:	b11b      	cbz	r3, ba48c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba484:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba488:	b903      	cbnz	r3, ba48c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba48a:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba48c:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba48e:	f002 fc35 	bl	bccfc <os_mutex_recursive_unlock>
}
   ba492:	4620      	mov	r0, r4
   ba494:	bd38      	pop	{r3, r4, r5, pc}

000ba496 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba496:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba498:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba49a:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba49c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba49e:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba4a0:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba4a2:	d002      	beq.n	ba4aa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba4a4:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba4a6:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba4a8:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba4aa:	68c0      	ldr	r0, [r0, #12]
   ba4ac:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba4b0:	f7f9 fdf5 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba4b4:	6963      	ldr	r3, [r4, #20]
   ba4b6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba4b8:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba4ba:	685b      	ldr	r3, [r3, #4]
   ba4bc:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba4be:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba4c2:	6122      	str	r2, [r4, #16]
   ba4c4:	e7ef      	b.n	ba4a6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba4c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4cc:	b085      	sub	sp, #20
   ba4ce:	4604      	mov	r4, r0
   ba4d0:	f7ff fe95 	bl	ba1fe <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba4d4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba57c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba4d8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba580 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba4dc:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba584 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba4e0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba4e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba4e8:	4293      	cmp	r3, r2
   ba4ea:	d105      	bne.n	ba4f8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba4ec:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba4ee:	b005      	add	sp, #20
   ba4f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4f4:	f002 bc02 	b.w	bccfc <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba4f8:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba4fc:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba500:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba502:	f7ff ffc8 	bl	ba496 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba506:	4640      	mov	r0, r8
   ba508:	f002 f998 	bl	bc83c <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba50c:	2300      	movs	r3, #0
   ba50e:	4602      	mov	r2, r0
   ba510:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba512:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba514:	4668      	mov	r0, sp
   ba516:	f001 ff99 	bl	bc44c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba51a:	9800      	ldr	r0, [sp, #0]
   ba51c:	f240 2102 	movw	r1, #514	; 0x202
   ba520:	f009 f886 	bl	c3630 <open>
   ba524:	4605      	mov	r5, r0
   ba526:	4668      	mov	r0, sp
   ba528:	f005 fb16 	bl	bfb58 <_ZN6StringD1Ev>
            if (fd) {
   ba52c:	b1c5      	cbz	r5, ba560 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba52e:	2208      	movs	r2, #8
   ba530:	4669      	mov	r1, sp
   ba532:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba534:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba538:	f009 f8a0 	bl	c367c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba53c:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba540:	f008 f8e3 	bl	c270a <strlen>
   ba544:	4639      	mov	r1, r7
   ba546:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba54a:	4628      	mov	r0, r5
   ba54c:	f009 f896 	bl	c367c <write>
                close(fd);
   ba550:	4628      	mov	r0, r5
   ba552:	f009 f853 	bl	c35fc <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba556:	4808      	ldr	r0, [pc, #32]	; (ba578 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba558:	4632      	mov	r2, r6
   ba55a:	4659      	mov	r1, fp
   ba55c:	f7fd fac4 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba560:	4631      	mov	r1, r6
   ba562:	4640      	mov	r0, r8
   ba564:	f002 f9ac 	bl	bc8c0 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba568:	2f00      	cmp	r7, #0
   ba56a:	d0b9      	beq.n	ba4e0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba56c:	2143      	movs	r1, #67	; 0x43
   ba56e:	4638      	mov	r0, r7
   ba570:	f7f9 fd95 	bl	b409e <_ZdlPvj>
   ba574:	e7b2      	b.n	ba4dc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba576:	bf00      	nop
   ba578:	2003e4d0 	.word	0x2003e4d0
   ba57c:	31b67663 	.word	0x31b67663
   ba580:	00410801 	.word	0x00410801
   ba584:	000c605b 	.word	0x000c605b

000ba588 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba58c:	4604      	mov	r4, r0
   ba58e:	f7ff fe36 	bl	ba1fe <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba592:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba596:	f7ff ff53 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba59a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba59c:	4298      	cmp	r0, r3
   ba59e:	d902      	bls.n	ba5a6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba5a0:	4620      	mov	r0, r4
   ba5a2:	f7ff ff91 	bl	ba4c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba5a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba5ec <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba5aa:	4f0f      	ldr	r7, [pc, #60]	; (ba5e8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba5ac:	1d26      	adds	r6, r4, #4
   ba5ae:	4630      	mov	r0, r6
   ba5b0:	f002 f9a0 	bl	bc8f4 <_ZNK14SequentialFile11getQueueLenEv>
   ba5b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba5b6:	4298      	cmp	r0, r3
   ba5b8:	dc04      	bgt.n	ba5c4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba5ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba5bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba5c0:	f002 bb9c 	b.w	bccfc <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba5c4:	2101      	movs	r1, #1
   ba5c6:	4630      	mov	r0, r6
   ba5c8:	f002 f944 	bl	bc854 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba5cc:	4605      	mov	r5, r0
   ba5ce:	2800      	cmp	r0, #0
   ba5d0:	d0ed      	beq.n	ba5ae <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba5d2:	4601      	mov	r1, r0
   ba5d4:	2200      	movs	r2, #0
   ba5d6:	4630      	mov	r0, r6
   ba5d8:	f001 ff74 	bl	bc4c4 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba5dc:	462a      	mov	r2, r5
   ba5de:	4641      	mov	r1, r8
   ba5e0:	4638      	mov	r0, r7
   ba5e2:	f7f9 fdac 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   ba5e6:	e7e2      	b.n	ba5ae <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba5e8:	2003e4d0 	.word	0x2003e4d0
   ba5ec:	000c6078 	.word	0x000c6078

000ba5f0 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba5f0:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba5f2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba5f6:	430b      	orrs	r3, r1
   ba5f8:	d005      	beq.n	ba606 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba5fa:	3840      	subs	r0, #64	; 0x40
   ba5fc:	ea50 0301 	orrs.w	r3, r0, r1
   ba600:	d10b      	bne.n	ba61a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba602:	2a09      	cmp	r2, #9
   ba604:	d109      	bne.n	ba61a <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba606:	4905      	ldr	r1, [pc, #20]	; (ba61c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba608:	4805      	ldr	r0, [pc, #20]	; (ba620 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba60a:	f7fd fa6d 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba60e:	f7ff ff07 	bl	ba420 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba616:	f7ff bf57 	b.w	ba4c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba61a:	bd08      	pop	{r3, pc}
   ba61c:	000c608b 	.word	0x000c608b
   ba620:	2003e4d0 	.word	0x2003e4d0

000ba624 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba624:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba626:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba628:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba62a:	b183      	cbz	r3, ba64e <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba62c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba62e:	6945      	ldr	r5, [r0, #20]
   ba630:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba632:	42ae      	cmp	r6, r5
   ba634:	d906      	bls.n	ba644 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba636:	f855 0b04 	ldr.w	r0, [r5], #4
   ba63a:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba63e:	f7f9 fd2e 	bl	b409e <_ZdlPvj>
   ba642:	e7f6      	b.n	ba632 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba644:	6861      	ldr	r1, [r4, #4]
   ba646:	6820      	ldr	r0, [r4, #0]
   ba648:	0089      	lsls	r1, r1, #2
   ba64a:	f7f9 fd28 	bl	b409e <_ZdlPvj>
    }
   ba64e:	4620      	mov	r0, r4
   ba650:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba656:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba65a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba65c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba65e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba660:	b90a      	cbnz	r2, ba666 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba662:	07d9      	lsls	r1, r3, #31
   ba664:	d505      	bpl.n	ba672 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba666:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba66a:	4b0a      	ldr	r3, [pc, #40]	; (ba694 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba66c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba66e:	4b0a      	ldr	r3, [pc, #40]	; (ba698 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba670:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba672:	4621      	mov	r1, r4
   ba674:	4668      	mov	r0, sp
   ba676:	f7fe f8bc 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba67a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba67c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba67e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba680:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba682:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba684:	4668      	mov	r0, sp
   ba686:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba688:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba68a:	9203      	str	r2, [sp, #12]
   ba68c:	f7fa ff25 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	}
   ba690:	b004      	add	sp, #16
   ba692:	bd10      	pop	{r4, pc}
   ba694:	000ba1b5 	.word	0x000ba1b5
   ba698:	000ba1d3 	.word	0x000ba1d3

000ba69c <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba69c:	b570      	push	{r4, r5, r6, lr}
   ba69e:	b086      	sub	sp, #24
   ba6a0:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba6a2:	f002 fe5f 	bl	bd364 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba6a6:	b948      	cbnz	r0, ba6bc <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba6a8:	4b43      	ldr	r3, [pc, #268]	; (ba7b8 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba6aa:	a902      	add	r1, sp, #8
   ba6ac:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba6b0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba6b4:	f7ff ffce 	bl	ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba6b8:	b006      	add	sp, #24
   ba6ba:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba6bc:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba6c0:	b11d      	cbz	r5, ba6ca <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba6c2:	2301      	movs	r3, #1
   ba6c4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba6c8:	e7f6      	b.n	ba6b8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba6ca:	f002 fb4f 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba6ce:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba6d2:	1ac0      	subs	r0, r0, r3
   ba6d4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba6d8:	4298      	cmp	r0, r3
   ba6da:	d3ed      	bcc.n	ba6b8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba6dc:	1d26      	adds	r6, r4, #4
   ba6de:	4629      	mov	r1, r5
   ba6e0:	4630      	mov	r0, r6
   ba6e2:	f002 f8b7 	bl	bc854 <_ZN14SequentialFile16getFileFromQueueEb>
   ba6e6:	4601      	mov	r1, r0
   ba6e8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba6ec:	2800      	cmp	r0, #0
   ba6ee:	d052      	beq.n	ba796 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	f7ff fdb9 	bl	ba268 <_ZN17PublishQueuePosix13readQueueFileEi>
   ba6f6:	4605      	mov	r5, r0
   ba6f8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba6fc:	2800      	cmp	r0, #0
   ba6fe:	d035      	beq.n	ba76c <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba700:	f002 fb34 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba704:	ae02      	add	r6, sp, #8
   ba706:	2500      	movs	r5, #0
   ba708:	4b2c      	ldr	r3, [pc, #176]	; (ba7bc <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba70a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba70e:	4631      	mov	r1, r6
   ba710:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba714:	9302      	str	r3, [sp, #8]
   ba716:	9503      	str	r5, [sp, #12]
   ba718:	f7ff ff9c 	bl	ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba71c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba720:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba724:	9200      	str	r2, [sp, #0]
   ba726:	4926      	ldr	r1, [pc, #152]	; (ba7c0 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba728:	4a26      	ldr	r2, [pc, #152]	; (ba7c4 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba72a:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba72e:	42a8      	cmp	r0, r5
   ba730:	bf08      	it	eq
   ba732:	460a      	moveq	r2, r1
   ba734:	3301      	adds	r3, #1
   ba736:	4924      	ldr	r1, [pc, #144]	; (ba7c8 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba738:	4824      	ldr	r0, [pc, #144]	; (ba7cc <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba73a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba73e:	f7fd f9d3 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba742:	f7fd ff99 	bl	b8678 <_ZN19BackgroundPublishRK8instanceEv>
   ba746:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba74a:	4b21      	ldr	r3, [pc, #132]	; (ba7d0 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba74c:	9305      	str	r3, [sp, #20]
   ba74e:	e9cd 6500 	strd	r6, r5, [sp]
   ba752:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba754:	4b1f      	ldr	r3, [pc, #124]	; (ba7d4 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba756:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba758:	9304      	str	r3, [sp, #16]
   ba75a:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba75e:	3242      	adds	r2, #66	; 0x42
   ba760:	f7fe f8d6 	bl	b8910 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba764:	4630      	mov	r0, r6
   ba766:	f7fa feb8 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba76a:	e7a5      	b.n	ba6b8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba76c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba770:	4919      	ldr	r1, [pc, #100]	; (ba7d8 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba772:	4816      	ldr	r0, [pc, #88]	; (ba7cc <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba774:	f7f9 fce3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba778:	2101      	movs	r1, #1
   ba77a:	4630      	mov	r0, r6
   ba77c:	f002 f86a 	bl	bc854 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba780:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba784:	462a      	mov	r2, r5
   ba786:	4630      	mov	r0, r6
   ba788:	f001 fe9c 	bl	bc4c4 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba78c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba790:	2b00      	cmp	r3, #0
   ba792:	d1b5      	bne.n	ba700 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba794:	e795      	b.n	ba6c2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba796:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba79a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba79e:	429a      	cmp	r2, r3
   ba7a0:	d007      	beq.n	ba7b2 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba7a2:	681b      	ldr	r3, [r3, #0]
   ba7a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba7a8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba7ac:	f7ff fe73 	bl	ba496 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba7b0:	e7ec      	b.n	ba78c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba7b2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba7b6:	e784      	b.n	ba6c2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba7b8:	000ba7dd 	.word	0x000ba7dd
   ba7bc:	000bab5d 	.word	0x000bab5d
   ba7c0:	000c60ba 	.word	0x000c60ba
   ba7c4:	000c65fc 	.word	0x000c65fc
   ba7c8:	000c60db 	.word	0x000c60db
   ba7cc:	2003e4d0 	.word	0x2003e4d0
   ba7d0:	000ba1a5 	.word	0x000ba1a5
   ba7d4:	000ba1eb 	.word	0x000ba1eb
   ba7d8:	000c60be 	.word	0x000c60be

000ba7dc <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba7dc:	b513      	push	{r0, r1, r4, lr}
   ba7de:	4604      	mov	r4, r0
   ba7e0:	f002 fdc0 	bl	bd364 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba7e4:	b190      	cbz	r0, ba80c <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba7e6:	f002 fac1 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba7ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba7ee:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba7f2:	4b0d      	ldr	r3, [pc, #52]	; (ba828 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba7f4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba7f8:	9300      	str	r3, [sp, #0]
   ba7fa:	4669      	mov	r1, sp
   ba7fc:	2300      	movs	r3, #0
   ba7fe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba802:	9301      	str	r3, [sp, #4]
   ba804:	f7ff ff26 	bl	ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba808:	b002      	add	sp, #8
   ba80a:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba80c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba810:	b11b      	cbz	r3, ba81a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba812:	2301      	movs	r3, #1
   ba814:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba818:	e7f6      	b.n	ba808 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba81a:	4620      	mov	r0, r4
   ba81c:	f7ff fe21 	bl	ba462 <_ZN17PublishQueuePosix12getNumEventsEv>
   ba820:	2800      	cmp	r0, #0
   ba822:	d0f6      	beq.n	ba812 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba824:	e7f0      	b.n	ba808 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba826:	bf00      	nop
   ba828:	000ba69d 	.word	0x000ba69d

000ba82c <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba82c:	b570      	push	{r4, r5, r6, lr}
   ba82e:	4605      	mov	r5, r0
   ba830:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba832:	2000      	movs	r0, #0
   ba834:	f002 fd3c 	bl	bd2b0 <system_thread_get_state>
   ba838:	2801      	cmp	r0, #1
   ba83a:	d005      	beq.n	ba848 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba83c:	493e      	ldr	r1, [pc, #248]	; (ba938 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba83e:	483f      	ldr	r0, [pc, #252]	; (ba93c <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba840:	f7fd f944 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
}
   ba844:	b018      	add	sp, #96	; 0x60
   ba846:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba848:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba84c:	f002 fa3e 	bl	bcccc <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba850:	4b3b      	ldr	r3, [pc, #236]	; (ba940 <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba852:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba854:	4b3b      	ldr	r3, [pc, #236]	; (ba944 <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba856:	9307      	str	r3, [sp, #28]
        };
   ba858:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba85a:	4b3b      	ldr	r3, [pc, #236]	; (ba948 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba85c:	9306      	str	r3, [sp, #24]
   ba85e:	a808      	add	r0, sp, #32
   ba860:	f7fa ffe4 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba864:	a908      	add	r1, sp, #32
   ba866:	a80c      	add	r0, sp, #48	; 0x30
   ba868:	f7fa ffe0 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba86c:	a90c      	add	r1, sp, #48	; 0x30
   ba86e:	a810      	add	r0, sp, #64	; 0x40
   ba870:	f7fa ffdc 	bl	b582c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba874:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba876:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba878:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba87a:	f7f9 fc0c 	bl	b4096 <_Znwj>
   ba87e:	4604      	mov	r4, r0
   ba880:	b160      	cbz	r0, ba89c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba882:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba884:	4601      	mov	r1, r0
   ba886:	a810      	add	r0, sp, #64	; 0x40
   ba888:	f7fd ffb3 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba88c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba88e:	68a2      	ldr	r2, [r4, #8]
   ba890:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba892:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba894:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba898:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba89a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba89c:	4b2b      	ldr	r3, [pc, #172]	; (ba94c <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba89e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba8a0:	4b2b      	ldr	r3, [pc, #172]	; (ba950 <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba8a2:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba8a4:	4b2b      	ldr	r3, [pc, #172]	; (ba954 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba8a6:	9414      	str	r4, [sp, #80]	; 0x50
   ba8a8:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba8aa:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba8ac:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba8b0:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba8b2:	f7f9 fbf0 	bl	b4096 <_Znwj>
   ba8b6:	4604      	mov	r4, r0
   ba8b8:	b1d8      	cbz	r0, ba8f2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba8ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba8bc:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba8be:	b133      	cbz	r3, ba8ce <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba8c0:	2202      	movs	r2, #2
   ba8c2:	a914      	add	r1, sp, #80	; 0x50
   ba8c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba8c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba8ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba8cc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba8ce:	4b22      	ldr	r3, [pc, #136]	; (ba958 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba8d0:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba8d2:	4a22      	ldr	r2, [pc, #136]	; (ba95c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba8d4:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba8d6:	ab01      	add	r3, sp, #4
   ba8d8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba8dc:	2100      	movs	r1, #0
   ba8de:	f002 fcc7 	bl	bd270 <system_subscribe_event>
        if (r) {
   ba8e2:	b130      	cbz	r0, ba8f2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba8e4:	4620      	mov	r0, r4
   ba8e6:	f7fa fdf8 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba8ea:	2110      	movs	r1, #16
   ba8ec:	4620      	mov	r0, r4
   ba8ee:	f7f9 fbd6 	bl	b409e <_ZdlPvj>
   ba8f2:	a814      	add	r0, sp, #80	; 0x50
   ba8f4:	f7fa fdf1 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba8f8:	a810      	add	r0, sp, #64	; 0x40
   ba8fa:	f7fa fdee 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba8fe:	a80c      	add	r0, sp, #48	; 0x30
   ba900:	f7fa fdeb 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba904:	a808      	add	r0, sp, #32
   ba906:	f7fa fde8 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba90a:	a804      	add	r0, sp, #16
   ba90c:	f7fa fde5 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba910:	f7fd feb2 	bl	b8678 <_ZN19BackgroundPublishRK8instanceEv>
   ba914:	f7fd ffd6 	bl	b88c4 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba918:	1d28      	adds	r0, r5, #4
   ba91a:	f001 ff17 	bl	bc74c <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba91e:	4628      	mov	r0, r5
   ba920:	f7ff fe32 	bl	ba588 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba924:	4b0e      	ldr	r3, [pc, #56]	; (ba960 <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba926:	9314      	str	r3, [sp, #80]	; 0x50
   ba928:	a914      	add	r1, sp, #80	; 0x50
   ba92a:	2300      	movs	r3, #0
   ba92c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba930:	9315      	str	r3, [sp, #84]	; 0x54
   ba932:	f7ff fe8f 	bl	ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba936:	e785      	b.n	ba844 <_ZN17PublishQueuePosix5setupEv+0x18>
   ba938:	000c60fa 	.word	0x000c60fa
   ba93c:	2003e4d0 	.word	0x2003e4d0
   ba940:	000ba5f1 	.word	0x000ba5f1
   ba944:	000b54b7 	.word	0x000b54b7
   ba948:	000b54a3 	.word	0x000b54a3
   ba94c:	000b547d 	.word	0x000b547d
   ba950:	000b5955 	.word	0x000b5955
   ba954:	000c0002 	.word	0x000c0002
   ba958:	000b54ed 	.word	0x000b54ed
   ba95c:	000b5455 	.word	0x000b5455
   ba960:	000ba7dd 	.word	0x000ba7dd

000ba964 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba968:	4606      	mov	r6, r0
   ba96a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba96c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba96e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba970:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba972:	1a47      	subs	r7, r0, r1
   ba974:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba978:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba97a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba97e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba980:	d927      	bls.n	ba9d2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba982:	1b5d      	subs	r5, r3, r5
   ba984:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba986:	6832      	ldr	r2, [r6, #0]
   ba988:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba98a:	b10c      	cbz	r4, ba990 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba98c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba990:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba992:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba994:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba996:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba998:	eba3 0201 	sub.w	r2, r3, r1
   ba99c:	d913      	bls.n	ba9c6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba99e:	4299      	cmp	r1, r3
   ba9a0:	d002      	beq.n	ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba9a2:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba9a4:	f007 fdcc 	bl	c2540 <memmove>
	_M_node = __new_node;
   ba9a8:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba9aa:	6823      	ldr	r3, [r4, #0]
   ba9ac:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba9ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba9b2:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba9b4:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba9b6:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba9b8:	59e3      	ldr	r3, [r4, r7]
   ba9ba:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba9bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba9c0:	6233      	str	r3, [r6, #32]
    }
   ba9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   ba9c6:	4299      	cmp	r1, r3
   ba9c8:	d0ee      	beq.n	ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba9ca:	1d38      	adds	r0, r7, #4
   ba9cc:	1a80      	subs	r0, r0, r2
   ba9ce:	4420      	add	r0, r4
   ba9d0:	e7e8      	b.n	ba9a4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba9d2:	f103 0802 	add.w	r8, r3, #2
   ba9d6:	454b      	cmp	r3, r9
   ba9d8:	bf2c      	ite	cs
   ba9da:	4498      	addcs	r8, r3
   ba9dc:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   ba9de:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   ba9e2:	d301      	bcc.n	ba9e8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   ba9e4:	f005 ff9a 	bl	c091c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba9e8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   ba9ec:	f7f9 fb53 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba9f0:	eba8 0505 	sub.w	r5, r8, r5
   ba9f4:	086d      	lsrs	r5, r5, #1
   ba9f6:	4682      	mov	sl, r0
   ba9f8:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba9fa:	b10c      	cbz	r4, baa00 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   ba9fc:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   baa00:	6a72      	ldr	r2, [r6, #36]	; 0x24
   baa02:	6971      	ldr	r1, [r6, #20]
   baa04:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   baa06:	442c      	add	r4, r5
	  if (_Num)
   baa08:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   baa0a:	4454      	add	r4, sl
   baa0c:	d003      	beq.n	baa16 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   baa0e:	1a52      	subs	r2, r2, r1
   baa10:	4620      	mov	r0, r4
   baa12:	f007 fd95 	bl	c2540 <memmove>
	::operator delete(__p
   baa16:	6871      	ldr	r1, [r6, #4]
   baa18:	6830      	ldr	r0, [r6, #0]
   baa1a:	0089      	lsls	r1, r1, #2
   baa1c:	f7f9 fb3f 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   baa20:	e9c6 a800 	strd	sl, r8, [r6]
   baa24:	e7c0      	b.n	ba9a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000baa28 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baa28:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa2a:	b085      	sub	sp, #20
   baa2c:	4604      	mov	r4, r0
   baa2e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   baa32:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baa36:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   baa38:	460f      	mov	r7, r1
   baa3a:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   baa3c:	f7ff fbec 	bl	ba218 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   baa40:	4605      	mov	r5, r0
   baa42:	2800      	cmp	r0, #0
   baa44:	d03c      	beq.n	baac0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   baa46:	4b3f      	ldr	r3, [pc, #252]	; (bab44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   baa48:	493f      	ldr	r1, [pc, #252]	; (bab48 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   baa4a:	4840      	ldr	r0, [pc, #256]	; (bab4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baa4c:	2e00      	cmp	r6, #0
   baa4e:	bf18      	it	ne
   baa50:	4633      	movne	r3, r6
   baa52:	463a      	mov	r2, r7
   baa54:	f7fd f848 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
   baa58:	4620      	mov	r0, r4
   baa5a:	f7ff fbd0 	bl	ba1fe <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   baa5e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   baa62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   baa66:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   baa68:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   baa6a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   baa6e:	d029      	beq.n	baac4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   baa70:	b103      	cbz	r3, baa74 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   baa72:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   baa74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   baa78:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   baa7a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   baa7c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   baa80:	4628      	mov	r0, r5
   baa82:	f001 ff37 	bl	bc8f4 <_ZNK14SequentialFile11getQueueLenEv>
   baa86:	9003      	str	r0, [sp, #12]
   baa88:	4630      	mov	r0, r6
   baa8a:	f7ff fcd9 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baa8e:	9002      	str	r0, [sp, #8]
   baa90:	f002 fc68 	bl	bd364 <spark_cloud_flag_connected>
   baa94:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   baa98:	9000      	str	r0, [sp, #0]
   baa9a:	492d      	ldr	r1, [pc, #180]	; (bab50 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   baa9c:	482b      	ldr	r0, [pc, #172]	; (bab4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   baa9e:	f7fd f823 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   baaa2:	4628      	mov	r0, r5
   baaa4:	f001 ff26 	bl	bc8f4 <_ZNK14SequentialFile11getQueueLenEv>
   baaa8:	2800      	cmp	r0, #0
   baaaa:	d03b      	beq.n	bab24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   baaac:	4620      	mov	r0, r4
   baaae:	f7ff fd0b 	bl	ba4c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   baab2:	4620      	mov	r0, r4
   baab4:	f7ff fd68 	bl	ba588 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   baab8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   baaba:	f002 f91f 	bl	bccfc <os_mutex_recursive_unlock>
    return true;
   baabe:	2001      	movs	r0, #1
}
   baac0:	b005      	add	sp, #20
   baac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   baac4:	4630      	mov	r0, r6
   baac6:	f7ff fcbb 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   baaca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   baace:	4298      	cmp	r0, r3
   baad0:	d102      	bne.n	baad8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   baad2:	4820      	ldr	r0, [pc, #128]	; (bab54 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   baad4:	f005 ff25 	bl	c0922 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   baad8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   baadc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   baade:	1a9a      	subs	r2, r3, r2
   baae0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   baae2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   baae6:	2b01      	cmp	r3, #1
   baae8:	d804      	bhi.n	baaf4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   baaea:	2200      	movs	r2, #0
   baaec:	2101      	movs	r1, #1
   baaee:	4630      	mov	r0, r6
   baaf0:	f7ff ff38 	bl	ba964 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   baaf4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   baaf8:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   baafc:	f7f9 facb 	bl	b4096 <_Znwj>
   bab00:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bab02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab06:	b103      	cbz	r3, bab0a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   bab08:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bab0a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bab0e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bab10:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   bab14:	685b      	ldr	r3, [r3, #4]
   bab16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   bab1a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bab1e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   bab22:	e7aa      	b.n	baa7a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   bab24:	4630      	mov	r0, r6
   bab26:	f7ff fc8b 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bab2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bab2c:	4298      	cmp	r0, r3
   bab2e:	d8bd      	bhi.n	baaac <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   bab30:	f002 fc18 	bl	bd364 <spark_cloud_flag_connected>
   bab34:	2800      	cmp	r0, #0
   bab36:	d0b9      	beq.n	baaac <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   bab38:	4907      	ldr	r1, [pc, #28]	; (bab58 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   bab3a:	4804      	ldr	r0, [pc, #16]	; (bab4c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   bab3c:	f7fc ffd4 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
   bab40:	e7b7      	b.n	baab2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   bab42:	bf00      	nop
   bab44:	000c6838 	.word	0x000c6838
   bab48:	000c611d 	.word	0x000c611d
   bab4c:	2003e4d0 	.word	0x2003e4d0
   bab50:	000c6175 	.word	0x000c6175
   bab54:	000c6145 	.word	0x000c6145
   bab58:	000c61a1 	.word	0x000c61a1

000bab5c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   bab5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   bab5e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   bab62:	4604      	mov	r4, r0
    if (!publishComplete) {
   bab64:	2b00      	cmp	r3, #0
   bab66:	d041      	beq.n	babec <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   bab68:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   bab6c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   bab70:	2b00      	cmp	r3, #0
   bab72:	d03d      	beq.n	babf0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   bab74:	4950      	ldr	r1, [pc, #320]	; (bacb8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   bab76:	4851      	ldr	r0, [pc, #324]	; (bacbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bab78:	f7fc ffb6 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   bab7c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bab80:	b1d3      	cbz	r3, babb8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   bab82:	1d26      	adds	r6, r4, #4
   bab84:	2100      	movs	r1, #0
   bab86:	4630      	mov	r0, r6
   bab88:	f001 fe64 	bl	bc854 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   bab8c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bab90:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   bab92:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   bab94:	d10d      	bne.n	babb2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   bab96:	2101      	movs	r1, #1
   bab98:	4630      	mov	r0, r6
   bab9a:	f001 fe5b 	bl	bc854 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   bab9e:	2200      	movs	r2, #0
   baba0:	4629      	mov	r1, r5
   baba2:	4630      	mov	r0, r6
   baba4:	f001 fc8e 	bl	bc4c4 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   baba8:	4945      	ldr	r1, [pc, #276]	; (bacc0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   babaa:	4844      	ldr	r0, [pc, #272]	; (bacbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   babac:	462a      	mov	r2, r5
   babae:	f7fc ff9b 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   babb2:	2300      	movs	r3, #0
   babb4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   babb8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   babbc:	b110      	cbz	r0, babc4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   babbe:	2143      	movs	r1, #67	; 0x43
   babc0:	f7f9 fa6d 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   babc4:	2300      	movs	r3, #0
   babc6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   babca:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   babce:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   babd2:	4b3c      	ldr	r3, [pc, #240]	; (bacc4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   babd4:	9300      	str	r3, [sp, #0]
   babd6:	4669      	mov	r1, sp
   babd8:	2300      	movs	r3, #0
   babda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   babde:	9301      	str	r3, [sp, #4]
   babe0:	f7ff fd38 	bl	ba654 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   babe4:	f002 f8c2 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   babe8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   babec:	b002      	add	sp, #8
   babee:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   babf0:	4935      	ldr	r1, [pc, #212]	; (bacc8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   babf2:	4832      	ldr	r0, [pc, #200]	; (bacbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   babf4:	f7fc ff78 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   babf8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   babfc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   bac00:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   bac04:	b14b      	cbz	r3, bac1a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   bac06:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   bac0a:	b110      	cbz	r0, bac12 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   bac0c:	2143      	movs	r1, #67	; 0x43
   bac0e:	f7f9 fa46 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   bac12:	2300      	movs	r3, #0
   bac14:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   bac18:	e7db      	b.n	babd2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   bac1a:	4620      	mov	r0, r4
   bac1c:	f7ff faef 	bl	ba1fe <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   bac20:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   bac24:	4293      	cmp	r3, r2
   bac26:	d013      	beq.n	bac50 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   bac28:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bac2c:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   bac30:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bac34:	3b04      	subs	r3, #4
   bac36:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   bac3a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   bac3c:	f002 f85e 	bl	bccfc <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   bac40:	4922      	ldr	r1, [pc, #136]	; (baccc <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   bac42:	481e      	ldr	r0, [pc, #120]	; (bacbc <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bac44:	f7fc ff50 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   bac48:	4620      	mov	r0, r4
   bac4a:	f7ff fc3d 	bl	ba4c8 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   bac4e:	e7c0      	b.n	babd2 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   bac50:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   bac54:	4628      	mov	r0, r5
   bac56:	f7ff fbf3 	bl	ba440 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bac5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bac5e:	4298      	cmp	r0, r3
   bac60:	d102      	bne.n	bac68 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   bac62:	481b      	ldr	r0, [pc, #108]	; (bacd0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   bac64:	f005 fe5d 	bl	c0922 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   bac68:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bac6c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bac6e:	429a      	cmp	r2, r3
   bac70:	d104      	bne.n	bac7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   bac72:	2201      	movs	r2, #1
   bac74:	4611      	mov	r1, r2
   bac76:	4628      	mov	r0, r5
   bac78:	f7ff fe74 	bl	ba964 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bac7c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   bac80:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   bac84:	f7f9 fa07 	bl	b4096 <_Znwj>
   bac88:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   bac8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bac90:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   bac92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   bac96:	f853 3c04 	ldr.w	r3, [r3, #-4]
   bac9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   bac9e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   baca2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   baca6:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   bacaa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bacae:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bacb2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   bacb6:	e7c0      	b.n	bac3a <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   bacb8:	000c61b4 	.word	0x000c61b4
   bacbc:	2003e4d0 	.word	0x2003e4d0
   bacc0:	000c61c7 	.word	0x000c61c7
   bacc4:	000ba69d 	.word	0x000ba69d
   bacc8:	000c61d7 	.word	0x000c61d7
   baccc:	000c61e9 	.word	0x000c61e9
   bacd0:	000c6145 	.word	0x000c6145

000bacd4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   bacd4:	4b01      	ldr	r3, [pc, #4]	; (bacdc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   bacd6:	4a02      	ldr	r2, [pc, #8]	; (bace0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   bacd8:	601a      	str	r2, [r3, #0]
}
   bacda:	4770      	bx	lr
   bacdc:	2003e4d0 	.word	0x2003e4d0
   bace0:	000c6210 	.word	0x000c6210

000bace4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bace4:	b510      	push	{r4, lr}
   bace6:	4b07      	ldr	r3, [pc, #28]	; (bad04 <_ZN17PublishQueuePosixD1Ev+0x20>)
   bace8:	4604      	mov	r4, r0
   bacea:	f840 3bc0 	str.w	r3, [r0], #192
   bacee:	f7fa fbf4 	bl	b54da <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bacf2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   bacf6:	f7ff fc95 	bl	ba624 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   bacfa:	1d20      	adds	r0, r4, #4
   bacfc:	f001 fc66 	bl	bc5cc <_ZN14SequentialFileD1Ev>
}
   bad00:	4620      	mov	r0, r4
   bad02:	bd10      	pop	{r4, pc}
   bad04:	000c6224 	.word	0x000c6224

000bad08 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   bad08:	b510      	push	{r4, lr}
   bad0a:	4604      	mov	r4, r0
}
   bad0c:	f7ff ffea 	bl	bace4 <_ZN17PublishQueuePosixD1Ev>
   bad10:	4620      	mov	r0, r4
   bad12:	21d0      	movs	r1, #208	; 0xd0
   bad14:	f7f9 f9c3 	bl	b409e <_ZdlPvj>
   bad18:	4620      	mov	r0, r4
   bad1a:	bd10      	pop	{r4, pc}

000bad1c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   bad1c:	6001      	str	r1, [r0, #0]
   bad1e:	7102      	strb	r2, [r0, #4]
{
}
   bad20:	4770      	bx	lr

000bad22 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   bad22:	6800      	ldr	r0, [r0, #0]
   bad24:	6803      	ldr	r3, [r0, #0]
   bad26:	68db      	ldr	r3, [r3, #12]
   bad28:	4718      	bx	r3

000bad2a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   bad2a:	6800      	ldr	r0, [r0, #0]
   bad2c:	6803      	ldr	r3, [r0, #0]
   bad2e:	6a1b      	ldr	r3, [r3, #32]
   bad30:	4718      	bx	r3

000bad32 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   bad32:	6800      	ldr	r0, [r0, #0]
   bad34:	6803      	ldr	r3, [r0, #0]
   bad36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bad38:	4718      	bx	r3

000bad3a <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   bad3a:	7900      	ldrb	r0, [r0, #4]
   bad3c:	4770      	bx	lr

000bad3e <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   bad3e:	6800      	ldr	r0, [r0, #0]
   bad40:	6803      	ldr	r3, [r0, #0]
   bad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bad44:	4718      	bx	r3

000bad46 <_ZN10RHDatagram6sendtoEPhhh>:
{
   bad46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad48:	4605      	mov	r5, r0
   bad4a:	460c      	mov	r4, r1
    setHeaderTo(address);
   bad4c:	4619      	mov	r1, r3
{
   bad4e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   bad50:	f7ff fff5 	bl	bad3e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   bad54:	6828      	ldr	r0, [r5, #0]
   bad56:	9a01      	ldr	r2, [sp, #4]
   bad58:	6803      	ldr	r3, [r0, #0]
   bad5a:	695b      	ldr	r3, [r3, #20]
   bad5c:	4621      	mov	r1, r4
}
   bad5e:	b003      	add	sp, #12
   bad60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   bad64:	4718      	bx	r3

000bad66 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   bad66:	6800      	ldr	r0, [r0, #0]
   bad68:	6803      	ldr	r3, [r0, #0]
   bad6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bad6c:	4718      	bx	r3

000bad6e <_ZN10RHDatagram14setThisAddressEh>:
{
   bad6e:	b538      	push	{r3, r4, r5, lr}
   bad70:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   bad72:	6800      	ldr	r0, [r0, #0]
   bad74:	6803      	ldr	r3, [r0, #0]
{
   bad76:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   bad78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bad7a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   bad7c:	4629      	mov	r1, r5
   bad7e:	4620      	mov	r0, r4
   bad80:	f7ff fff1 	bl	bad66 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   bad84:	7125      	strb	r5, [r4, #4]
}
   bad86:	bd38      	pop	{r3, r4, r5, pc}

000bad88 <_ZN10RHDatagram4initEv>:
{
   bad88:	b538      	push	{r3, r4, r5, lr}
   bad8a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   bad8c:	6800      	ldr	r0, [r0, #0]
   bad8e:	6803      	ldr	r3, [r0, #0]
   bad90:	689b      	ldr	r3, [r3, #8]
   bad92:	4798      	blx	r3
    if (ret)
   bad94:	4605      	mov	r5, r0
   bad96:	b118      	cbz	r0, bada0 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   bad98:	7921      	ldrb	r1, [r4, #4]
   bad9a:	4620      	mov	r0, r4
   bad9c:	f7ff ffe7 	bl	bad6e <_ZN10RHDatagram14setThisAddressEh>
}
   bada0:	4628      	mov	r0, r5
   bada2:	bd38      	pop	{r3, r4, r5, pc}

000bada4 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   bada4:	6800      	ldr	r0, [r0, #0]
   bada6:	6803      	ldr	r3, [r0, #0]
   bada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   badaa:	4718      	bx	r3

000badac <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   badac:	6800      	ldr	r0, [r0, #0]
   badae:	6803      	ldr	r3, [r0, #0]
   badb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   badb2:	4718      	bx	r3

000badb4 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   badb4:	6800      	ldr	r0, [r0, #0]
   badb6:	6803      	ldr	r3, [r0, #0]
   badb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   badba:	4718      	bx	r3

000badbc <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   badbc:	6800      	ldr	r0, [r0, #0]
   badbe:	6803      	ldr	r3, [r0, #0]
   badc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   badc2:	4718      	bx	r3

000badc4 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   badc4:	6800      	ldr	r0, [r0, #0]
   badc6:	6803      	ldr	r3, [r0, #0]
   badc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   badca:	4718      	bx	r3

000badcc <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   badcc:	6800      	ldr	r0, [r0, #0]
   badce:	6803      	ldr	r3, [r0, #0]
   badd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   badd2:	4718      	bx	r3

000badd4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   badd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   badd8:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   badda:	6800      	ldr	r0, [r0, #0]
{
   baddc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   badde:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   bade0:	6803      	ldr	r3, [r0, #0]
   bade2:	691b      	ldr	r3, [r3, #16]
{
   bade4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   bade8:	4798      	blx	r3
   badea:	4605      	mov	r5, r0
   badec:	b1c8      	cbz	r0, bae22 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   badee:	b11e      	cbz	r6, badf8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   badf0:	4620      	mov	r0, r4
   badf2:	f7ff ffe3 	bl	badbc <_ZN10RHDatagram10headerFromEv>
   badf6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   badf8:	f1b9 0f00 	cmp.w	r9, #0
   badfc:	d004      	beq.n	bae08 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   badfe:	4620      	mov	r0, r4
   bae00:	f7ff ffd8 	bl	badb4 <_ZN10RHDatagram8headerToEv>
   bae04:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   bae08:	f1b8 0f00 	cmp.w	r8, #0
   bae0c:	d004      	beq.n	bae18 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bae0e:	4620      	mov	r0, r4
   bae10:	f7ff ffd8 	bl	badc4 <_ZN10RHDatagram8headerIdEv>
   bae14:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bae18:	b11f      	cbz	r7, bae22 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bae1a:	4620      	mov	r0, r4
   bae1c:	f7ff ffd6 	bl	badcc <_ZN10RHDatagram11headerFlagsEv>
   bae20:	7038      	strb	r0, [r7, #0]
}
   bae22:	4628      	mov	r0, r5
   bae24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bae28 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bae28:	2001      	movs	r0, #1
   bae2a:	4770      	bx	lr

000bae2c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bae2c:	7903      	ldrb	r3, [r0, #4]
   bae2e:	2b03      	cmp	r3, #3
   bae30:	d0fc      	beq.n	bae2c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bae32:	2001      	movs	r0, #1
   bae34:	4770      	bx	lr

000bae36 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bae36:	2000      	movs	r0, #0
   bae38:	4770      	bx	lr

000bae3a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bae3a:	7181      	strb	r1, [r0, #6]
}
   bae3c:	4770      	bx	lr

000bae3e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bae3e:	7141      	strb	r1, [r0, #5]
}
   bae40:	4770      	bx	lr

000bae42 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bae42:	72c1      	strb	r1, [r0, #11]
}
   bae44:	4770      	bx	lr

000bae46 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bae46:	7301      	strb	r1, [r0, #12]
}
   bae48:	4770      	bx	lr

000bae4a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bae4a:	7341      	strb	r1, [r0, #13]
}
   bae4c:	4770      	bx	lr

000bae4e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bae4e:	7b83      	ldrb	r3, [r0, #14]
   bae50:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bae54:	4311      	orrs	r1, r2
   bae56:	7381      	strb	r1, [r0, #14]
}
   bae58:	4770      	bx	lr

000bae5a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bae5a:	79c0      	ldrb	r0, [r0, #7]
}
   bae5c:	4770      	bx	lr

000bae5e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   bae5e:	7a00      	ldrb	r0, [r0, #8]
}
   bae60:	4770      	bx	lr

000bae62 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   bae62:	7a40      	ldrb	r0, [r0, #9]
}
   bae64:	4770      	bx	lr

000bae66 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   bae66:	7a80      	ldrb	r0, [r0, #10]
}
   bae68:	4770      	bx	lr

000bae6a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   bae6a:	8a00      	ldrh	r0, [r0, #16]
}
   bae6c:	b200      	sxth	r0, r0
   bae6e:	4770      	bx	lr

000bae70 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   bae70:	7900      	ldrb	r0, [r0, #4]
}
   bae72:	4770      	bx	lr

000bae74 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   bae74:	7101      	strb	r1, [r0, #4]
}
   bae76:	4770      	bx	lr

000bae78 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   bae78:	8a40      	ldrh	r0, [r0, #18]
}
   bae7a:	b280      	uxth	r0, r0
   bae7c:	4770      	bx	lr

000bae7e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   bae7e:	8a80      	ldrh	r0, [r0, #20]
}
   bae80:	b280      	uxth	r0, r0
   bae82:	4770      	bx	lr

000bae84 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   bae84:	8ac0      	ldrh	r0, [r0, #22]
}
   bae86:	b280      	uxth	r0, r0
   bae88:	4770      	bx	lr

000bae8a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   bae8a:	b538      	push	{r3, r4, r5, lr}
   bae8c:	4605      	mov	r5, r0
   bae8e:	460c      	mov	r4, r1
    while (!available())
   bae90:	682b      	ldr	r3, [r5, #0]
   bae92:	4628      	mov	r0, r5
   bae94:	68db      	ldr	r3, [r3, #12]
   bae96:	4798      	blx	r3
   bae98:	b928      	cbnz	r0, baea6 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   bae9a:	2c00      	cmp	r4, #0
   bae9c:	d0f8      	beq.n	bae90 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   bae9e:	4620      	mov	r0, r4
   baea0:	f002 fb80 	bl	bd5a4 <delay>
   baea4:	e7f4      	b.n	bae90 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   baea6:	bd38      	pop	{r3, r4, r5, pc}

000baea8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   baea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baeaa:	4605      	mov	r5, r0
   baeac:	460f      	mov	r7, r1
   baeae:	4614      	mov	r4, r2
   baeb0:	f001 ff5c 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   baeb4:	4606      	mov	r6, r0
   baeb6:	f001 ff59 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   baeba:	1b80      	subs	r0, r0, r6
   baebc:	42b8      	cmp	r0, r7
   baebe:	d20a      	bcs.n	baed6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   baec0:	682b      	ldr	r3, [r5, #0]
   baec2:	4628      	mov	r0, r5
   baec4:	68db      	ldr	r3, [r3, #12]
   baec6:	4798      	blx	r3
   baec8:	b930      	cbnz	r0, baed8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   baeca:	2c00      	cmp	r4, #0
   baecc:	d0f3      	beq.n	baeb6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   baece:	4620      	mov	r0, r4
   baed0:	f002 fb68 	bl	bd5a4 <delay>
   baed4:	e7ef      	b.n	baeb6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   baed6:	2000      	movs	r0, #0
}
   baed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baeda <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   baeda:	b570      	push	{r4, r5, r6, lr}
   baedc:	4604      	mov	r4, r0
   baede:	460e      	mov	r6, r1
   baee0:	f001 ff44 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   baee4:	4605      	mov	r5, r0
   baee6:	f001 ff41 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   baeea:	1b40      	subs	r0, r0, r5
   baeec:	42b0      	cmp	r0, r6
   baeee:	d204      	bcs.n	baefa <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   baef0:	7923      	ldrb	r3, [r4, #4]
   baef2:	2b03      	cmp	r3, #3
   baef4:	d0f7      	beq.n	baee6 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   baef6:	2001      	movs	r0, #1
}
   baef8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   baefa:	2000      	movs	r0, #0
   baefc:	e7fc      	b.n	baef8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000baefe <_ZN15RHGenericDriver7waitCADEv>:
{
   baefe:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   baf00:	69c3      	ldr	r3, [r0, #28]
{
   baf02:	4604      	mov	r4, r0
    if (!_cad_timeout)
   baf04:	b1b3      	cbz	r3, baf34 <_ZN15RHGenericDriver7waitCADEv+0x36>
   baf06:	f001 ff31 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   baf0a:	2664      	movs	r6, #100	; 0x64
   baf0c:	4605      	mov	r5, r0
    while (isChannelActive())
   baf0e:	6823      	ldr	r3, [r4, #0]
   baf10:	4620      	mov	r0, r4
   baf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baf14:	4798      	blx	r3
   baf16:	b168      	cbz	r0, baf34 <_ZN15RHGenericDriver7waitCADEv+0x36>
   baf18:	f001 ff28 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   baf1c:	69e3      	ldr	r3, [r4, #28]
   baf1e:	1b40      	subs	r0, r0, r5
   baf20:	4298      	cmp	r0, r3
   baf22:	d809      	bhi.n	baf38 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   baf24:	210a      	movs	r1, #10
   baf26:	2001      	movs	r0, #1
   baf28:	f004 fd3f 	bl	bf9aa <_Z6randomii>
   baf2c:	4370      	muls	r0, r6
   baf2e:	f002 fb39 	bl	bd5a4 <delay>
    while (isChannelActive())
   baf32:	e7ec      	b.n	baf0e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   baf34:	2001      	movs	r0, #1
}
   baf36:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   baf38:	2000      	movs	r0, #0
   baf3a:	e7fc      	b.n	baf36 <_ZN15RHGenericDriver7waitCADEv+0x38>

000baf3c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   baf3c:	4a06      	ldr	r2, [pc, #24]	; (baf58 <_ZN15RHGenericDriverC1Ev+0x1c>)
   baf3e:	6002      	str	r2, [r0, #0]
   baf40:	21ff      	movs	r1, #255	; 0xff
   baf42:	2200      	movs	r2, #0
   baf44:	7102      	strb	r2, [r0, #4]
   baf46:	7141      	strb	r1, [r0, #5]
   baf48:	8242      	strh	r2, [r0, #18]
   baf4a:	72c1      	strb	r1, [r0, #11]
   baf4c:	8282      	strh	r2, [r0, #20]
   baf4e:	8181      	strh	r1, [r0, #12]
   baf50:	7382      	strb	r2, [r0, #14]
   baf52:	82c2      	strh	r2, [r0, #22]
   baf54:	61c2      	str	r2, [r0, #28]
}
   baf56:	4770      	bx	lr
   baf58:	000c6238 	.word	0x000c6238

000baf5c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   baf5c:	4770      	bx	lr

000baf5e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   baf5e:	4770      	bx	lr

000baf60 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   baf60:	4770      	bx	lr

000baf62 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   baf62:	4770      	bx	lr

000baf64 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   baf64:	4770      	bx	lr

000baf66 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   baf66:	7141      	strb	r1, [r0, #5]
}
   baf68:	4770      	bx	lr

000baf6a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   baf6a:	7181      	strb	r1, [r0, #6]
}
   baf6c:	4770      	bx	lr

000baf6e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   baf6e:	7101      	strb	r1, [r0, #4]
}
   baf70:	4770      	bx	lr
	...

000baf74 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   baf74:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   baf76:	4d03      	ldr	r5, [pc, #12]	; (baf84 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   baf78:	6005      	str	r5, [r0, #0]
   baf7a:	7101      	strb	r1, [r0, #4]
   baf7c:	7142      	strb	r2, [r0, #5]
   baf7e:	7183      	strb	r3, [r0, #6]
}
   baf80:	bd30      	pop	{r4, r5, pc}
   baf82:	bf00      	nop
   baf84:	000c62b8 	.word	0x000c62b8

000baf88 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   baf88:	4770      	bx	lr

000baf8a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   baf8a:	b510      	push	{r4, lr}
  }
   baf8c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   baf8e:	4604      	mov	r4, r0
  }
   baf90:	f7f9 f885 	bl	b409e <_ZdlPvj>
   baf94:	4620      	mov	r0, r4
   baf96:	bd10      	pop	{r4, pc}

000baf98 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   baf98:	b40e      	push	{r1, r2, r3}
   baf9a:	b503      	push	{r0, r1, lr}
   baf9c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   baf9e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bafa0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bafa4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bafa6:	f004 fcc4 	bl	bf932 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bafaa:	b002      	add	sp, #8
   bafac:	f85d eb04 	ldr.w	lr, [sp], #4
   bafb0:	b003      	add	sp, #12
   bafb2:	4770      	bx	lr

000bafb4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   bafb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bafb6:	4604      	mov	r4, r0
   bafb8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   bafba:	7922      	ldrb	r2, [r4, #4]
   bafbc:	68a3      	ldr	r3, [r4, #8]
   bafbe:	b132      	cbz	r2, bafce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bafc0:	b9a3      	cbnz	r3, bafec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bafc2:	490b      	ldr	r1, [pc, #44]	; (baff0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bafc4:	b002      	add	sp, #8
   bafc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bafca:	f004 bba9 	b.w	bf720 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bafce:	4a09      	ldr	r2, [pc, #36]	; (baff4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bafd0:	7b26      	ldrb	r6, [r4, #12]
   bafd2:	4d09      	ldr	r5, [pc, #36]	; (baff8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bafd4:	4909      	ldr	r1, [pc, #36]	; (baffc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bafd6:	7b64      	ldrb	r4, [r4, #13]
   bafd8:	2e01      	cmp	r6, #1
   bafda:	bf18      	it	ne
   bafdc:	4629      	movne	r1, r5
   bafde:	e9cd 1400 	strd	r1, r4, [sp]
   bafe2:	4907      	ldr	r1, [pc, #28]	; (bb000 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   bafe4:	f7ff ffd8 	bl	baf98 <_ZN5Print6printfEPKcz>
  }
   bafe8:	b002      	add	sp, #8
   bafea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bafec:	4a05      	ldr	r2, [pc, #20]	; (bb004 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   bafee:	e7ef      	b.n	bafd0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   baff0:	000c62f5 	.word	0x000c62f5
   baff4:	000c6838 	.word	0x000c6838
   baff8:	000c62f1 	.word	0x000c62f1
   baffc:	000c62ed 	.word	0x000c62ed
   bb000:	000c630b 	.word	0x000c630b
   bb004:	000c62e4 	.word	0x000c62e4

000bb008 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bb008:	b510      	push	{r4, lr}
   bb00a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   bb00c:	f7ff ffb2 	bl	baf74 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   bb010:	4b05      	ldr	r3, [pc, #20]	; (bb028 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   bb012:	6023      	str	r3, [r4, #0]
  {
   bb014:	4b05      	ldr	r3, [pc, #20]	; (bb02c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   bb016:	60a3      	str	r3, [r4, #8]
   bb018:	2301      	movs	r3, #1
   bb01a:	7323      	strb	r3, [r4, #12]
   bb01c:	2300      	movs	r3, #0
   bb01e:	6123      	str	r3, [r4, #16]
   bb020:	82a3      	strh	r3, [r4, #20]
{
}
   bb022:	4620      	mov	r0, r4
   bb024:	bd10      	pop	{r4, pc}
   bb026:	bf00      	nop
   bb028:	000c6344 	.word	0x000c6344
   bb02c:	000c6330 	.word	0x000c6330

000bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bb030:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bb032:	4c0b      	ldr	r4, [pc, #44]	; (bb060 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bb034:	7821      	ldrb	r1, [r4, #0]
   bb036:	f3bf 8f5b 	dmb	ish
   bb03a:	f011 0101 	ands.w	r1, r1, #1
   bb03e:	d10b      	bne.n	bb058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb040:	4620      	mov	r0, r4
   bb042:	9101      	str	r1, [sp, #4]
   bb044:	f7f9 f83a 	bl	b40bc <__cxa_guard_acquire>
   bb048:	9901      	ldr	r1, [sp, #4]
   bb04a:	b128      	cbz	r0, bb058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb04c:	4805      	ldr	r0, [pc, #20]	; (bb064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb04e:	f004 fcc3 	bl	bf9d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb052:	4620      	mov	r0, r4
   bb054:	f7f9 f837 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   bb058:	4802      	ldr	r0, [pc, #8]	; (bb064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb05a:	b002      	add	sp, #8
   bb05c:	bd10      	pop	{r4, pc}
   bb05e:	bf00      	nop
   bb060:	2003e4d8 	.word	0x2003e4d8
   bb064:	2003e4dc 	.word	0x2003e4dc

000bb068 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   bb068:	b507      	push	{r0, r1, r2, lr}
   bb06a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   bb06c:	f7ff ffe0 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bb070:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   bb072:	b003      	add	sp, #12
   bb074:	f85d eb04 	ldr.w	lr, [sp], #4
   bb078:	f004 bd66 	b.w	bfb48 <_ZN8SPIClass8transferEh>

000bb07c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   bb07c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   bb07e:	f7ff ffd7 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   bb082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb086:	f004 bd65 	b.w	bfb54 <_ZN8SPIClass15attachInterruptEv>

000bb08a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   bb08a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   bb08c:	f7ff ffd0 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   bb090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb094:	f004 bd5f 	b.w	bfb56 <_ZN8SPIClass15detachInterruptEv>

000bb098 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   bb098:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   bb09a:	7903      	ldrb	r3, [r0, #4]
   bb09c:	2b04      	cmp	r3, #4
   bb09e:	d020      	beq.n	bb0e2 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   bb0a0:	2b03      	cmp	r3, #3
   bb0a2:	d020      	beq.n	bb0e6 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   bb0a4:	2b02      	cmp	r3, #2
   bb0a6:	d020      	beq.n	bb0ea <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   bb0a8:	4a11      	ldr	r2, [pc, #68]	; (bb0f0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   bb0aa:	4912      	ldr	r1, [pc, #72]	; (bb0f4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   bb0ac:	2b01      	cmp	r3, #1
   bb0ae:	bf18      	it	ne
   bb0b0:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   bb0b2:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   bb0b4:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   bb0b6:	3901      	subs	r1, #1
   bb0b8:	bf18      	it	ne
   bb0ba:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   bb0bc:	b133      	cbz	r3, bb0cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   bb0be:	2b01      	cmp	r3, #1
   bb0c0:	d004      	beq.n	bb0cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   bb0c2:	2b02      	cmp	r3, #2
   bb0c4:	d002      	beq.n	bb0cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   bb0c6:	2b03      	cmp	r3, #3
   bb0c8:	bf18      	it	ne
   bb0ca:	2300      	movne	r3, #0
class SPISettings : public Printable {
   bb0cc:	2400      	movs	r4, #0
   bb0ce:	7304      	strb	r4, [r0, #12]
   bb0d0:	6102      	str	r2, [r0, #16]
   bb0d2:	7501      	strb	r1, [r0, #20]
   bb0d4:	7543      	strb	r3, [r0, #21]
        instance().begin();
   bb0d6:	f7ff ffab 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   bb0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb0de:	f004 bc85 	b.w	bf9ec <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   bb0e2:	4a05      	ldr	r2, [pc, #20]	; (bb0f8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   bb0e4:	e7e5      	b.n	bb0b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bb0e6:	4a05      	ldr	r2, [pc, #20]	; (bb0fc <_ZN13RHHardwareSPI5beginEv+0x64>)
   bb0e8:	e7e3      	b.n	bb0b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bb0ea:	4a05      	ldr	r2, [pc, #20]	; (bb100 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bb0ec:	e7e1      	b.n	bb0b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
   bb0ee:	bf00      	nop
   bb0f0:	001e8480 	.word	0x001e8480
   bb0f4:	000f4240 	.word	0x000f4240
   bb0f8:	00f42400 	.word	0x00f42400
   bb0fc:	007a1200 	.word	0x007a1200
   bb100:	003d0900 	.word	0x003d0900

000bb104 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bb104:	b508      	push	{r3, lr}
        instance().end();
   bb106:	f7ff ff93 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bb10a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb10e:	f004 bc81 	b.w	bfa14 <_ZN8SPIClass3endEv>

000bb112 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bb112:	b510      	push	{r4, lr}
   bb114:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bb116:	f7ff ff8b 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bb11a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bb11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bb122:	f004 bca3 	b.w	bfa6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bb126 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bb126:	b508      	push	{r3, lr}
        instance().endTransaction();
   bb128:	f7ff ff82 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bb12c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb130:	f004 bc82 	b.w	bfa38 <_ZN8SPIClass14endTransactionEv>

000bb134 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   bb134:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   bb136:	f7ff ff7b 	bl	bb030 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   bb13a:	bd08      	pop	{r3, pc}

000bb13c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   bb13c:	2300      	movs	r3, #0
   bb13e:	4802      	ldr	r0, [pc, #8]	; (bb148 <_GLOBAL__sub_I_hardware_spi+0xc>)
   bb140:	461a      	mov	r2, r3
   bb142:	4619      	mov	r1, r3
   bb144:	f7ff bf60 	b.w	bb008 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bb148:	2003e4e4 	.word	0x2003e4e4

000bb14c <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bb14c:	2a01      	cmp	r2, #1
   bb14e:	d105      	bne.n	bb15c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bb150:	7a00      	ldrb	r0, [r0, #8]
   bb152:	780b      	ldrb	r3, [r1, #0]
   bb154:	1a1b      	subs	r3, r3, r0
   bb156:	4258      	negs	r0, r3
   bb158:	4158      	adcs	r0, r3
   bb15a:	4770      	bx	lr
   bb15c:	2000      	movs	r0, #0
}
   bb15e:	4770      	bx	lr

000bb160 <_ZN6RHMesh5doArpEh>:
{
   bb160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb164:	4c25      	ldr	r4, [pc, #148]	; (bb1fc <_ZN6RHMesh5doArpEh+0x9c>)
   bb166:	2301      	movs	r3, #1
{
   bb168:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb16a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bb16c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb16e:	2300      	movs	r3, #0
{
   bb170:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bb172:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb174:	9300      	str	r3, [sp, #0]
   bb176:	2203      	movs	r2, #3
   bb178:	23ff      	movs	r3, #255	; 0xff
   bb17a:	4621      	mov	r1, r4
{
   bb17c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb17e:	f000 fbb9 	bl	bb8f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bb182:	b120      	cbz	r0, bb18e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bb184:	2500      	movs	r5, #0
}
   bb186:	4628      	mov	r0, r5
   bb188:	b006      	add	sp, #24
   bb18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bb18e:	237a      	movs	r3, #122	; 0x7a
   bb190:	f88d 3017 	strb.w	r3, [sp, #23]
   bb194:	f001 fdea 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bb198:	f106 0904 	add.w	r9, r6, #4
   bb19c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bb19e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   bb1a2:	f001 fde3 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   bb1a6:	1a29      	subs	r1, r5, r0
   bb1a8:	2900      	cmp	r1, #0
   bb1aa:	ddeb      	ble.n	bb184 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   bb1ac:	2200      	movs	r2, #0
   bb1ae:	b289      	uxth	r1, r1
   bb1b0:	4648      	mov	r0, r9
   bb1b2:	f7ff fdbe 	bl	bad32 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb1b6:	2800      	cmp	r0, #0
   bb1b8:	d0f3      	beq.n	bb1a2 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bb1ba:	2300      	movs	r3, #0
   bb1bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bb1c0:	e9cd 3300 	strd	r3, r3, [sp]
   bb1c4:	f10d 0217 	add.w	r2, sp, #23
   bb1c8:	4621      	mov	r1, r4
   bb1ca:	4630      	mov	r0, r6
   bb1cc:	f000 fb9c 	bl	bb908 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb1d0:	4605      	mov	r5, r0
   bb1d2:	2800      	cmp	r0, #0
   bb1d4:	d0e3      	beq.n	bb19e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   bb1d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bb1da:	2b01      	cmp	r3, #1
   bb1dc:	d9df      	bls.n	bb19e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb1de:	f894 a000 	ldrb.w	sl, [r4]
   bb1e2:	f1ba 0f02 	cmp.w	sl, #2
   bb1e6:	d1da      	bne.n	bb19e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bb1e8:	4648      	mov	r0, r9
   bb1ea:	f7ff fde7 	bl	badbc <_ZN10RHDatagram10headerFromEv>
   bb1ee:	4653      	mov	r3, sl
   bb1f0:	4602      	mov	r2, r0
   bb1f2:	4639      	mov	r1, r7
   bb1f4:	4630      	mov	r0, r6
   bb1f6:	f000 faf5 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bb1fa:	e7c4      	b.n	bb186 <_ZN6RHMesh5doArpEh+0x26>
   bb1fc:	2003e4fc 	.word	0x2003e4fc

000bb200 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bb200:	2a01      	cmp	r2, #1
{
   bb202:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bb206:	4607      	mov	r7, r0
   bb208:	460e      	mov	r6, r1
   bb20a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bb20c:	d93b      	bls.n	bb286 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb20e:	794d      	ldrb	r5, [r1, #5]
   bb210:	2d02      	cmp	r5, #2
   bb212:	d130      	bne.n	bb276 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bb214:	f100 0804 	add.w	r8, r0, #4
   bb218:	79c9      	ldrb	r1, [r1, #7]
   bb21a:	9101      	str	r1, [sp, #4]
   bb21c:	4640      	mov	r0, r8
   bb21e:	f7ff fdcd 	bl	badbc <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb222:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bb224:	462b      	mov	r3, r5
   bb226:	4602      	mov	r2, r0
   bb228:	9901      	ldr	r1, [sp, #4]
   bb22a:	4638      	mov	r0, r7
   bb22c:	f000 fada 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb230:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bb232:	f106 0308 	add.w	r3, r6, #8
   bb236:	2400      	movs	r4, #0
   bb238:	4622      	mov	r2, r4
   bb23a:	4295      	cmp	r5, r2
   bb23c:	f104 0401 	add.w	r4, r4, #1
   bb240:	b2e4      	uxtb	r4, r4
   bb242:	d904      	bls.n	bb24e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bb244:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb248:	7a39      	ldrb	r1, [r7, #8]
   bb24a:	4291      	cmp	r1, r2
   bb24c:	d1f4      	bne.n	bb238 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bb24e:	f104 0108 	add.w	r1, r4, #8
   bb252:	440e      	add	r6, r1
	while (i < numRoutes)
   bb254:	42a5      	cmp	r5, r4
   bb256:	d916      	bls.n	bb286 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bb258:	f816 1b01 	ldrb.w	r1, [r6], #1
   bb25c:	9101      	str	r1, [sp, #4]
   bb25e:	4640      	mov	r0, r8
   bb260:	f7ff fdac 	bl	badbc <_ZN10RHDatagram10headerFromEv>
   bb264:	3401      	adds	r4, #1
   bb266:	4602      	mov	r2, r0
   bb268:	9901      	ldr	r1, [sp, #4]
   bb26a:	2302      	movs	r3, #2
   bb26c:	4638      	mov	r0, r7
   bb26e:	b2e4      	uxtb	r4, r4
   bb270:	f000 fab8 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bb274:	e7ee      	b.n	bb254 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bb276:	2d03      	cmp	r5, #3
   bb278:	d105      	bne.n	bb286 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   bb27a:	7989      	ldrb	r1, [r1, #6]
}
   bb27c:	b002      	add	sp, #8
   bb27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   bb282:	f000 ba98 	b.w	bb7b6 <_ZN8RHRouter13deleteRouteToEh>
}
   bb286:	b002      	add	sp, #8
   bb288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb28c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   bb28c:	b510      	push	{r4, lr}
   bb28e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   bb290:	f000 fae8 	bl	bb864 <_ZN8RHRouterC1ER15RHGenericDriverh>
   bb294:	4b01      	ldr	r3, [pc, #4]	; (bb29c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   bb296:	6023      	str	r3, [r4, #0]
}
   bb298:	4620      	mov	r0, r4
   bb29a:	bd10      	pop	{r4, pc}
   bb29c:	000c6378 	.word	0x000c6378

000bb2a0 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   bb2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb2a4:	2a79      	cmp	r2, #121	; 0x79
{
   bb2a6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   bb2aa:	4606      	mov	r6, r0
   bb2ac:	460f      	mov	r7, r1
   bb2ae:	4614      	mov	r4, r2
   bb2b0:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb2b2:	d825      	bhi.n	bb300 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   bb2b4:	2bff      	cmp	r3, #255	; 0xff
   bb2b6:	d114      	bne.n	bb2e2 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb2b8:	f8df 8048 	ldr.w	r8, [pc, #72]	; bb304 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   bb2bc:	4640      	mov	r0, r8
   bb2be:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bb2c0:	4622      	mov	r2, r4
   bb2c2:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb2c4:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bb2c8:	f007 f92c 	bl	c2524 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb2cc:	1c62      	adds	r2, r4, #1
   bb2ce:	f8cd 9020 	str.w	r9, [sp, #32]
   bb2d2:	462b      	mov	r3, r5
   bb2d4:	4641      	mov	r1, r8
   bb2d6:	4630      	mov	r0, r6
   bb2d8:	b2d2      	uxtb	r2, r2
}
   bb2da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb2de:	f000 bb09 	b.w	bb8f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bb2e2:	4619      	mov	r1, r3
   bb2e4:	f000 fa23 	bl	bb72e <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bb2e8:	2800      	cmp	r0, #0
   bb2ea:	d1e5      	bne.n	bb2b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   bb2ec:	6833      	ldr	r3, [r6, #0]
   bb2ee:	4629      	mov	r1, r5
   bb2f0:	689b      	ldr	r3, [r3, #8]
   bb2f2:	4630      	mov	r0, r6
   bb2f4:	4798      	blx	r3
   bb2f6:	2800      	cmp	r0, #0
   bb2f8:	d1de      	bne.n	bb2b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb2fa:	2002      	movs	r0, #2
}
   bb2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   bb300:	2001      	movs	r0, #1
   bb302:	e7fb      	b.n	bb2fc <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   bb304:	2003e4fc 	.word	0x2003e4fc

000bb308 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   bb308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb30c:	b089      	sub	sp, #36	; 0x24
   bb30e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb310:	237a      	movs	r3, #122	; 0x7a
   bb312:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb316:	f10d 031f 	add.w	r3, sp, #31
   bb31a:	9303      	str	r3, [sp, #12]
   bb31c:	f10d 031e 	add.w	r3, sp, #30
   bb320:	9302      	str	r3, [sp, #8]
   bb322:	4e5d      	ldr	r6, [pc, #372]	; (bb498 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb324:	f10d 031d 	add.w	r3, sp, #29
   bb328:	9301      	str	r3, [sp, #4]
   bb32a:	ab07      	add	r3, sp, #28
   bb32c:	9300      	str	r3, [sp, #0]
{     
   bb32e:	4689      	mov	r9, r1
   bb330:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb332:	f10d 031b 	add.w	r3, sp, #27
   bb336:	f10d 021a 	add.w	r2, sp, #26
   bb33a:	4631      	mov	r1, r6
{     
   bb33c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bb340:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb342:	f000 fae1 	bl	bb908 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb346:	4604      	mov	r4, r0
   bb348:	b920      	cbnz	r0, bb354 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bb34a:	2400      	movs	r4, #0
}
   bb34c:	4620      	mov	r0, r4
   bb34e:	b009      	add	sp, #36	; 0x24
   bb350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bb354:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bb358:	b373      	cbz	r3, bb3b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bb35a:	7832      	ldrb	r2, [r6, #0]
   bb35c:	bb62      	cbnz	r2, bb3b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bb35e:	f1b8 0f00 	cmp.w	r8, #0
   bb362:	d003      	beq.n	bb36c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bb364:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bb368:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bb36c:	f1bb 0f00 	cmp.w	fp, #0
   bb370:	d003      	beq.n	bb37a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bb372:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb376:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bb37a:	f1ba 0f00 	cmp.w	sl, #0
   bb37e:	d003      	beq.n	bb388 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bb380:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bb384:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bb388:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb38a:	b11a      	cbz	r2, bb394 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bb38c:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb38e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bb392:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bb394:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bb396:	b11a      	cbz	r2, bb3a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bb398:	9915      	ldr	r1, [sp, #84]	; 0x54
   bb39a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb39e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bb3a0:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb3a2:	493e      	ldr	r1, [pc, #248]	; (bb49c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bb3a4:	3b01      	subs	r3, #1
   bb3a6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb3a8:	429a      	cmp	r2, r3
		*len = msgLen;
   bb3aa:	bf88      	it	hi
   bb3ac:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb3ae:	783a      	ldrb	r2, [r7, #0]
   bb3b0:	4648      	mov	r0, r9
   bb3b2:	f007 f8b7 	bl	c2524 <memcpy>
	    return true;
   bb3b6:	e7c9      	b.n	bb34c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bb3b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb3bc:	2aff      	cmp	r2, #255	; 0xff
   bb3be:	d1c4      	bne.n	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bb3c0:	2b01      	cmp	r3, #1
   bb3c2:	d9c2      	bls.n	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bb3c4:	7832      	ldrb	r2, [r6, #0]
   bb3c6:	2a01      	cmp	r2, #1
   bb3c8:	d1bf      	bne.n	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bb3ca:	7a2a      	ldrb	r2, [r5, #8]
   bb3cc:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bb3d0:	42a2      	cmp	r2, r4
   bb3d2:	d0ba      	beq.n	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bb3d4:	1edf      	subs	r7, r3, #3
   bb3d6:	4932      	ldr	r1, [pc, #200]	; (bb4a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb3d8:	b2ff      	uxtb	r7, r7
   bb3da:	2300      	movs	r3, #0
   bb3dc:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb3e0:	4547      	cmp	r7, r8
   bb3e2:	d906      	bls.n	bb3f2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb3e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb3e8:	4282      	cmp	r2, r0
   bb3ea:	f103 0301 	add.w	r3, r3, #1
   bb3ee:	d1f5      	bne.n	bb3dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb3f0:	e7ab      	b.n	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb3f2:	f105 0904 	add.w	r9, r5, #4
   bb3f6:	4648      	mov	r0, r9
   bb3f8:	f7ff fce0 	bl	badbc <_ZN10RHDatagram10headerFromEv>
   bb3fc:	2302      	movs	r3, #2
   bb3fe:	4602      	mov	r2, r0
   bb400:	4621      	mov	r1, r4
   bb402:	4628      	mov	r0, r5
   bb404:	f000 f9ee 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb408:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb40c:	b193      	cbz	r3, bb434 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb40e:	4c22      	ldr	r4, [pc, #136]	; (bb498 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb410:	1ba3      	subs	r3, r4, r6
   bb412:	b2db      	uxtb	r3, r3
   bb414:	429f      	cmp	r7, r3
   bb416:	d90c      	bls.n	bb432 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb418:	78e1      	ldrb	r1, [r4, #3]
   bb41a:	9105      	str	r1, [sp, #20]
   bb41c:	4648      	mov	r0, r9
   bb41e:	f7ff fccd 	bl	badbc <_ZN10RHDatagram10headerFromEv>
   bb422:	9905      	ldr	r1, [sp, #20]
   bb424:	4602      	mov	r2, r0
   bb426:	2302      	movs	r3, #2
   bb428:	4628      	mov	r0, r5
   bb42a:	f000 f9db 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb42e:	3401      	adds	r4, #1
   bb430:	e7ee      	b.n	bb410 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb432:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb434:	682b      	ldr	r3, [r5, #0]
   bb436:	7872      	ldrb	r2, [r6, #1]
   bb438:	68db      	ldr	r3, [r3, #12]
   bb43a:	491a      	ldr	r1, [pc, #104]	; (bb4a4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb43c:	4628      	mov	r0, r5
   bb43e:	4798      	blx	r3
   bb440:	4604      	mov	r4, r0
   bb442:	b160      	cbz	r0, bb45e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb444:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb446:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb448:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb44a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb44e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb452:	4911      	ldr	r1, [pc, #68]	; (bb498 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb454:	9400      	str	r4, [sp, #0]
   bb456:	4628      	mov	r0, r5
   bb458:	f000 fa4c 	bl	bb8f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb45c:	e776      	b.n	bb34c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb45e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb462:	4543      	cmp	r3, r8
   bb464:	f67f af71 	bls.w	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb468:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb46c:	2b00      	cmp	r3, #0
   bb46e:	f43f af6c 	beq.w	bb34a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb472:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb476:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb478:	4907      	ldr	r1, [pc, #28]	; (bb498 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb47a:	443e      	add	r6, r7
		tmpMessageLen++;
   bb47c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb47e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb480:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb484:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb486:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb488:	9300      	str	r3, [sp, #0]
   bb48a:	4628      	mov	r0, r5
   bb48c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb48e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb492:	f000 f9f9 	bl	bb888 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb496:	e759      	b.n	bb34c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb498:	2003e4fc 	.word	0x2003e4fc
   bb49c:	2003e4fd 	.word	0x2003e4fd
   bb4a0:	2003e4ff 	.word	0x2003e4ff
   bb4a4:	2003e4fe 	.word	0x2003e4fe

000bb4a8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb4aa:	b085      	sub	sp, #20
   bb4ac:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4ae:	3004      	adds	r0, #4
{
   bb4b0:	460e      	mov	r6, r1
   bb4b2:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4b4:	f7ff fc82 	bl	badbc <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb4b8:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb4ba:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb4bc:	4631      	mov	r1, r6
   bb4be:	4628      	mov	r0, r5
   bb4c0:	f000 f94c 	bl	bb75c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb4c4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb4c6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb4c8:	d001      	beq.n	bb4ce <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb4ca:	2805      	cmp	r0, #5
   bb4cc:	d11b      	bne.n	bb506 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb4ce:	7831      	ldrb	r1, [r6, #0]
   bb4d0:	4628      	mov	r0, r5
   bb4d2:	f000 f970 	bl	bb7b6 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb4d6:	7872      	ldrb	r2, [r6, #1]
   bb4d8:	7a2b      	ldrb	r3, [r5, #8]
   bb4da:	429a      	cmp	r2, r3
   bb4dc:	d013      	beq.n	bb506 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb4de:	4c0b      	ldr	r4, [pc, #44]	; (bb50c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb4e0:	2303      	movs	r3, #3
   bb4e2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb4e4:	7833      	ldrb	r3, [r6, #0]
   bb4e6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb4e8:	7871      	ldrb	r1, [r6, #1]
   bb4ea:	2302      	movs	r3, #2
   bb4ec:	463a      	mov	r2, r7
   bb4ee:	4628      	mov	r0, r5
   bb4f0:	f000 f978 	bl	bb7e4 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb4f4:	2300      	movs	r3, #0
   bb4f6:	9300      	str	r3, [sp, #0]
   bb4f8:	4621      	mov	r1, r4
   bb4fa:	7873      	ldrb	r3, [r6, #1]
   bb4fc:	2202      	movs	r2, #2
   bb4fe:	4628      	mov	r0, r5
   bb500:	f000 f9f8 	bl	bb8f4 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb504:	4604      	mov	r4, r0
}
   bb506:	4620      	mov	r0, r4
   bb508:	b005      	add	sp, #20
   bb50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb50c:	2003e4fc 	.word	0x2003e4fc

000bb510 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb510:	b510      	push	{r4, lr}
   bb512:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb514:	f7ff fc02 	bl	bad1c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb518:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb51a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb51c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb51e:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb520:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb522:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb524:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb526:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb52a:	f104 0011 	add.w	r0, r4, #17
   bb52e:	f007 f821 	bl	c2574 <memset>
}
   bb532:	4620      	mov	r0, r4
   bb534:	bd10      	pop	{r4, pc}

000bb536 <_ZN18RHReliableDatagram10setTimeoutEt>:

////////////////////////////////////////////////////////////////////
// Public methods
void RHReliableDatagram::setTimeout(uint16_t timeout)
{
    _timeout = timeout;
   bb536:	81c1      	strh	r1, [r0, #14]
}
   bb538:	4770      	bx	lr

000bb53a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb53a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb53c:	4604      	mov	r4, r0
   bb53e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb540:	f7ff fc30 	bl	bada4 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb544:	4620      	mov	r0, r4
   bb546:	2200      	movs	r2, #0
   bb548:	2180      	movs	r1, #128	; 0x80
   bb54a:	f7ff fc2f 	bl	badac <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb54e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb550:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb552:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb556:	f10d 010f 	add.w	r1, sp, #15
   bb55a:	2201      	movs	r2, #1
   bb55c:	4620      	mov	r0, r4
   bb55e:	f7ff fbf2 	bl	bad46 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb562:	4620      	mov	r0, r4
   bb564:	f7ff fbe1 	bl	bad2a <_ZN10RHDatagram14waitPacketSentEv>
}
   bb568:	b004      	add	sp, #16
   bb56a:	bd10      	pop	{r4, pc}

000bb56c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb570:	7b05      	ldrb	r5, [r0, #12]
   bb572:	3501      	adds	r5, #1
   bb574:	b2ed      	uxtb	r5, r5
{
   bb576:	b087      	sub	sp, #28
   bb578:	4604      	mov	r4, r0
   bb57a:	4689      	mov	r9, r1
   bb57c:	4692      	mov	sl, r2
   bb57e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb580:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb582:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb584:	7c22      	ldrb	r2, [r4, #16]
   bb586:	463b      	mov	r3, r7
   bb588:	429a      	cmp	r2, r3
   bb58a:	f107 0701 	add.w	r7, r7, #1
   bb58e:	b2ff      	uxtb	r7, r7
   bb590:	d36b      	bcc.n	bb66a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb592:	4629      	mov	r1, r5
   bb594:	4620      	mov	r0, r4
   bb596:	f7ff fc05 	bl	bada4 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb59a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb59c:	bf0d      	iteet	eq
   bb59e:	22c0      	moveq	r2, #192	; 0xc0
   bb5a0:	2280      	movne	r2, #128	; 0x80
   bb5a2:	2140      	movne	r1, #64	; 0x40
   bb5a4:	2100      	moveq	r1, #0
   bb5a6:	4620      	mov	r0, r4
   bb5a8:	f7ff fc00 	bl	badac <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb5ac:	4643      	mov	r3, r8
   bb5ae:	4652      	mov	r2, sl
   bb5b0:	4649      	mov	r1, r9
   bb5b2:	4620      	mov	r0, r4
   bb5b4:	f7ff fbc7 	bl	bad46 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb5b8:	4620      	mov	r0, r4
   bb5ba:	f7ff fbb6 	bl	bad2a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb5be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb5c2:	d054      	beq.n	bb66e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb5c4:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb5c6:	bf82      	ittt	hi
   bb5c8:	68a3      	ldrhi	r3, [r4, #8]
   bb5ca:	3301      	addhi	r3, #1
   bb5cc:	60a3      	strhi	r3, [r4, #8]
   bb5ce:	f001 fbcd 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb5d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb5d6:	4683      	mov	fp, r0
   bb5d8:	2000      	movs	r0, #0
   bb5da:	89e6      	ldrh	r6, [r4, #14]
   bb5dc:	f004 f9e5 	bl	bf9aa <_Z6randomii>
   bb5e0:	4370      	muls	r0, r6
   bb5e2:	bf48      	it	mi
   bb5e4:	30ff      	addmi	r0, #255	; 0xff
   bb5e6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb5ea:	fa1b f686 	uxtah	r6, fp, r6
   bb5ee:	f001 fbbd 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
   bb5f2:	1a30      	subs	r0, r6, r0
   bb5f4:	2800      	cmp	r0, #0
   bb5f6:	ddc5      	ble.n	bb584 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb5f8:	b281      	uxth	r1, r0
   bb5fa:	2200      	movs	r2, #0
   bb5fc:	4620      	mov	r0, r4
   bb5fe:	f7ff fb98 	bl	bad32 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb602:	2800      	cmp	r0, #0
   bb604:	d0f3      	beq.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb606:	f10d 0317 	add.w	r3, sp, #23
   bb60a:	9302      	str	r3, [sp, #8]
   bb60c:	f10d 0316 	add.w	r3, sp, #22
   bb610:	9301      	str	r3, [sp, #4]
   bb612:	2200      	movs	r2, #0
   bb614:	f10d 0315 	add.w	r3, sp, #21
   bb618:	9300      	str	r3, [sp, #0]
   bb61a:	4611      	mov	r1, r2
   bb61c:	ab05      	add	r3, sp, #20
   bb61e:	4620      	mov	r0, r4
   bb620:	f7ff fbd8 	bl	badd4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb624:	2800      	cmp	r0, #0
   bb626:	d0e2      	beq.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb628:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb62c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb630:	4542      	cmp	r2, r8
   bb632:	d10e      	bne.n	bb652 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb634:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb638:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb63c:	458c      	cmp	ip, r1
   bb63e:	d108      	bne.n	bb652 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb640:	2b00      	cmp	r3, #0
   bb642:	da08      	bge.n	bb656 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb644:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb648:	42ab      	cmp	r3, r5
   bb64a:	d1d0      	bne.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb64c:	b007      	add	sp, #28
   bb64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb652:	2b00      	cmp	r3, #0
   bb654:	dbcb      	blt.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb656:	18a1      	adds	r1, r4, r2
   bb658:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb65c:	7c49      	ldrb	r1, [r1, #17]
   bb65e:	4299      	cmp	r1, r3
   bb660:	d1c5      	bne.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb662:	4620      	mov	r0, r4
   bb664:	f7ff ff69 	bl	bb53a <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb668:	e7c1      	b.n	bb5ee <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb66a:	2000      	movs	r0, #0
   bb66c:	e7ee      	b.n	bb64c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb66e:	2001      	movs	r0, #1
   bb670:	e7ec      	b.n	bb64c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb672 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb676:	b089      	sub	sp, #36	; 0x24
   bb678:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb67c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb680:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb682:	4604      	mov	r4, r0
   bb684:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb686:	f7ff fb4c 	bl	bad22 <_ZN10RHDatagram9availableEv>
   bb68a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb68e:	b920      	cbnz	r0, bb69a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb690:	2500      	movs	r5, #0
}
   bb692:	4628      	mov	r0, r5
   bb694:	b009      	add	sp, #36	; 0x24
   bb696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb69a:	f10d 031f 	add.w	r3, sp, #31
   bb69e:	9302      	str	r3, [sp, #8]
   bb6a0:	f10d 031e 	add.w	r3, sp, #30
   bb6a4:	9301      	str	r3, [sp, #4]
   bb6a6:	f10d 031d 	add.w	r3, sp, #29
   bb6aa:	9300      	str	r3, [sp, #0]
   bb6ac:	4620      	mov	r0, r4
   bb6ae:	ab07      	add	r3, sp, #28
   bb6b0:	f7ff fb90 	bl	badd4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb6b4:	4605      	mov	r5, r0
   bb6b6:	2800      	cmp	r0, #0
   bb6b8:	d0ea      	beq.n	bb690 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb6ba:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb6be:	2b00      	cmp	r3, #0
   bb6c0:	dbe6      	blt.n	bb690 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb6c2:	7922      	ldrb	r2, [r4, #4]
   bb6c4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb6c8:	429a      	cmp	r2, r3
   bb6ca:	d106      	bne.n	bb6da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb6cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb6d0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb6d4:	4620      	mov	r0, r4
   bb6d6:	f7ff ff30 	bl	bb53a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb6da:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb6de:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb6e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb6e6:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb6ea:	440c      	add	r4, r1
   bb6ec:	d002      	beq.n	bb6f4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb6ee:	7c60      	ldrb	r0, [r4, #17]
   bb6f0:	4298      	cmp	r0, r3
   bb6f2:	d0cd      	beq.n	bb690 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb6f4:	b106      	cbz	r6, bb6f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb6f6:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb6f8:	f1b9 0f00 	cmp.w	r9, #0
   bb6fc:	d003      	beq.n	bb706 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb6fe:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb702:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb706:	f1b8 0f00 	cmp.w	r8, #0
   bb70a:	d001      	beq.n	bb710 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb70c:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb710:	b107      	cbz	r7, bb714 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb712:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb714:	7463      	strb	r3, [r4, #17]
		return true;
   bb716:	e7bc      	b.n	bb692 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb718 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb718:	4770      	bx	lr

000bb71a <_ZN8RHRouter4initEv>:
{
   bb71a:	b510      	push	{r4, lr}
   bb71c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb71e:	3004      	adds	r0, #4
   bb720:	f7ff fb32 	bl	bad88 <_ZN10RHDatagram4initEv>
    if (ret)
   bb724:	b110      	cbz	r0, bb72c <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb726:	231e      	movs	r3, #30
   bb728:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb72c:	bd10      	pop	{r4, pc}

000bb72e <_ZN8RHRouter10getRouteToEh>:
{
   bb72e:	b510      	push	{r4, lr}
   bb730:	4602      	mov	r2, r0
   bb732:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb734:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb738:	428c      	cmp	r4, r1
   bb73a:	d108      	bne.n	bb74e <_ZN8RHRouter10getRouteToEh+0x20>
   bb73c:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb740:	b12c      	cbz	r4, bb74e <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb746:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb74a:	4418      	add	r0, r3
}
   bb74c:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb74e:	3301      	adds	r3, #1
   bb750:	2b32      	cmp	r3, #50	; 0x32
   bb752:	f102 0203 	add.w	r2, r2, #3
   bb756:	d1ed      	bne.n	bb734 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb758:	2000      	movs	r0, #0
   bb75a:	e7f7      	b.n	bb74c <_ZN8RHRouter10getRouteToEh+0x1e>

000bb75c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb75e:	780b      	ldrb	r3, [r1, #0]
   bb760:	2bff      	cmp	r3, #255	; 0xff
{
   bb762:	4605      	mov	r5, r0
   bb764:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb766:	d006      	beq.n	bb776 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb768:	4619      	mov	r1, r3
   bb76a:	9201      	str	r2, [sp, #4]
   bb76c:	f7ff ffdf 	bl	bb72e <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb770:	b158      	cbz	r0, bb78a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb772:	7843      	ldrb	r3, [r0, #1]
   bb774:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb776:	4621      	mov	r1, r4
   bb778:	1d28      	adds	r0, r5, #4
   bb77a:	f7ff fef7 	bl	bb56c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb77e:	2800      	cmp	r0, #0
   bb780:	bf14      	ite	ne
   bb782:	2000      	movne	r0, #0
   bb784:	2005      	moveq	r0, #5
}
   bb786:	b003      	add	sp, #12
   bb788:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb78a:	2002      	movs	r0, #2
   bb78c:	e7fb      	b.n	bb786 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb78e <_ZN8RHRouter11deleteRouteEh>:
{
   bb78e:	b510      	push	{r4, lr}
   bb790:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb794:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb796:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb79a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb79e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb7a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb7a6:	4421      	add	r1, r4
   bb7a8:	4420      	add	r0, r4
   bb7aa:	f006 febb 	bl	c2524 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb7ae:	2300      	movs	r3, #0
   bb7b0:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb7b4:	bd10      	pop	{r4, pc}

000bb7b6 <_ZN8RHRouter13deleteRouteToEh>:
{
   bb7b6:	b538      	push	{r3, r4, r5, lr}
   bb7b8:	460a      	mov	r2, r1
   bb7ba:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb7bc:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb7c0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb7c4:	b2d9      	uxtb	r1, r3
   bb7c6:	5d65      	ldrb	r5, [r4, r5]
   bb7c8:	4295      	cmp	r5, r2
   bb7ca:	d103      	bne.n	bb7d4 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb7cc:	f7ff ffdf 	bl	bb78e <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb7d0:	2001      	movs	r0, #1
}
   bb7d2:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb7d4:	3301      	adds	r3, #1
   bb7d6:	2b32      	cmp	r3, #50	; 0x32
   bb7d8:	d1f2      	bne.n	bb7c0 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb7da:	2000      	movs	r0, #0
   bb7dc:	e7f9      	b.n	bb7d2 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb7de <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb7de:	2100      	movs	r1, #0
   bb7e0:	f7ff bfd5 	b.w	bb78e <_ZN8RHRouter11deleteRouteEh>

000bb7e4 <_ZN8RHRouter10addRouteToEhhh>:
{
   bb7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb7e6:	4616      	mov	r6, r2
   bb7e8:	461f      	mov	r7, r3
   bb7ea:	4604      	mov	r4, r0
   bb7ec:	460d      	mov	r5, r1
   bb7ee:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb7f0:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb7f4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb7f8:	5c11      	ldrb	r1, [r2, r0]
   bb7fa:	42a9      	cmp	r1, r5
   bb7fc:	d105      	bne.n	bb80a <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb7fe:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb800:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb804:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb80a:	3301      	adds	r3, #1
   bb80c:	2b32      	cmp	r3, #50	; 0x32
   bb80e:	d1f1      	bne.n	bb7f4 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb810:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb812:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb816:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb81a:	5c11      	ldrb	r1, [r2, r0]
   bb81c:	b919      	cbnz	r1, bb826 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb81e:	4420      	add	r0, r4
   bb820:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb824:	e7ec      	b.n	bb800 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb826:	3301      	adds	r3, #1
   bb828:	2b32      	cmp	r3, #50	; 0x32
   bb82a:	d1f4      	bne.n	bb816 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb82c:	4620      	mov	r0, r4
   bb82e:	f7ff ffd6 	bl	bb7de <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb832:	4620      	mov	r0, r4
   bb834:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb838:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb83c:	b92a      	cbnz	r2, bb84a <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb83e:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb842:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb846:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb84a:	3003      	adds	r0, #3
   bb84c:	4298      	cmp	r0, r3
   bb84e:	d1f3      	bne.n	bb838 <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb850:	e7da      	b.n	bb808 <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb852 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb852:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb856:	2200      	movs	r2, #0
   bb858:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb85c:	3003      	adds	r0, #3
   bb85e:	4298      	cmp	r0, r3
   bb860:	d1fa      	bne.n	bb858 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb862:	4770      	bx	lr

000bb864 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb864:	b510      	push	{r4, lr}
   bb866:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb868:	3004      	adds	r0, #4
   bb86a:	f7ff fe51 	bl	bb510 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb86e:	4b05      	ldr	r3, [pc, #20]	; (bb884 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb870:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb872:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb876:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb878:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb87c:	f7ff ffe9 	bl	bb852 <_ZN8RHRouter17clearRoutingTableEv>
}
   bb880:	4620      	mov	r0, r4
   bb882:	bd10      	pop	{r4, pc}
   bb884:	000c6390 	.word	0x000c6390

000bb888 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb888:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb88c:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb88e:	6840      	ldr	r0, [r0, #4]
{
   bb890:	9101      	str	r1, [sp, #4]
   bb892:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb894:	6803      	ldr	r3, [r0, #0]
{
   bb896:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb89a:	699b      	ldr	r3, [r3, #24]
{
   bb89c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb8a0:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb8a2:	4798      	blx	r3
   bb8a4:	f106 0805 	add.w	r8, r6, #5
   bb8a8:	4580      	cmp	r8, r0
   bb8aa:	d81c      	bhi.n	bb8e6 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb8ac:	4d10      	ldr	r5, [pc, #64]	; (bb8f0 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb8ae:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb8b0:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb8b4:	2300      	movs	r3, #0
   bb8b6:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb8b8:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb8bc:	70eb      	strb	r3, [r5, #3]
   bb8be:	1c5a      	adds	r2, r3, #1
   bb8c0:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb8c4:	1d68      	adds	r0, r5, #5
   bb8c6:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb8c8:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb8ca:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb8ce:	f006 fe29 	bl	c2524 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb8d2:	6823      	ldr	r3, [r4, #0]
   bb8d4:	685b      	ldr	r3, [r3, #4]
   bb8d6:	fa5f f288 	uxtb.w	r2, r8
   bb8da:	4629      	mov	r1, r5
   bb8dc:	4620      	mov	r0, r4
}
   bb8de:	b002      	add	sp, #8
   bb8e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb8e4:	4718      	bx	r3
}
   bb8e6:	2001      	movs	r0, #1
   bb8e8:	b002      	add	sp, #8
   bb8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb8ee:	bf00      	nop
   bb8f0:	2003e576 	.word	0x2003e576

000bb8f4 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb8f4:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb8f6:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb8fa:	9401      	str	r4, [sp, #4]
   bb8fc:	7a04      	ldrb	r4, [r0, #8]
   bb8fe:	9400      	str	r4, [sp, #0]
   bb900:	f7ff ffc2 	bl	bb888 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb904:	b002      	add	sp, #8
   bb906:	bd10      	pop	{r4, pc}

000bb908 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb90c:	b087      	sub	sp, #28
   bb90e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb910:	237f      	movs	r3, #127	; 0x7f
   bb912:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb916:	f10d 0317 	add.w	r3, sp, #23
   bb91a:	9302      	str	r3, [sp, #8]
   bb91c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb920:	f10d 0316 	add.w	r3, sp, #22
   bb924:	9301      	str	r3, [sp, #4]
   bb926:	f10d 0315 	add.w	r3, sp, #21
   bb92a:	9300      	str	r3, [sp, #0]
{  
   bb92c:	4604      	mov	r4, r0
   bb92e:	4688      	mov	r8, r1
   bb930:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb932:	ab05      	add	r3, sp, #20
   bb934:	f10d 0213 	add.w	r2, sp, #19
   bb938:	4649      	mov	r1, r9
   bb93a:	3004      	adds	r0, #4
{  
   bb93c:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb940:	f7ff fe97 	bl	bb672 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb944:	4605      	mov	r5, r0
   bb946:	b908      	cbnz	r0, bb94c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb948:	2500      	movs	r5, #0
   bb94a:	e038      	b.n	bb9be <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb94c:	6823      	ldr	r3, [r4, #0]
   bb94e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb952:	681b      	ldr	r3, [r3, #0]
   bb954:	4649      	mov	r1, r9
   bb956:	4620      	mov	r0, r4
   bb958:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb95a:	f899 3000 	ldrb.w	r3, [r9]
   bb95e:	7a22      	ldrb	r2, [r4, #8]
   bb960:	429a      	cmp	r2, r3
   bb962:	d001      	beq.n	bb968 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb964:	2bff      	cmp	r3, #255	; 0xff
   bb966:	d12e      	bne.n	bb9c6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb968:	b117      	cbz	r7, bb970 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb96a:	4b21      	ldr	r3, [pc, #132]	; (bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb96c:	785b      	ldrb	r3, [r3, #1]
   bb96e:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb970:	f1bb 0f00 	cmp.w	fp, #0
   bb974:	d003      	beq.n	bb97e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb976:	4b1e      	ldr	r3, [pc, #120]	; (bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb978:	781b      	ldrb	r3, [r3, #0]
   bb97a:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb97e:	f1ba 0f00 	cmp.w	sl, #0
   bb982:	d003      	beq.n	bb98c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb984:	4b1a      	ldr	r3, [pc, #104]	; (bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb986:	78db      	ldrb	r3, [r3, #3]
   bb988:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb98c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb98e:	b11b      	cbz	r3, bb998 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb990:	4b17      	ldr	r3, [pc, #92]	; (bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb992:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb994:	791b      	ldrb	r3, [r3, #4]
   bb996:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb99a:	b11b      	cbz	r3, bb9a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb99c:	4b14      	ldr	r3, [pc, #80]	; (bb9f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb99e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb9a0:	789b      	ldrb	r3, [r3, #2]
   bb9a2:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb9a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb9a8:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb9aa:	4912      	ldr	r1, [pc, #72]	; (bb9f4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb9ac:	3b05      	subs	r3, #5
   bb9ae:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb9b0:	429a      	cmp	r2, r3
		*len = msgLen;
   bb9b2:	bf88      	it	hi
   bb9b4:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb9b6:	7832      	ldrb	r2, [r6, #0]
   bb9b8:	4640      	mov	r0, r8
   bb9ba:	f006 fdb3 	bl	c2524 <memcpy>
}
   bb9be:	4628      	mov	r0, r5
   bb9c0:	b007      	add	sp, #28
   bb9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bb9c6:	f899 3002 	ldrb.w	r3, [r9, #2]
   bb9ca:	1c5a      	adds	r2, r3, #1
   bb9cc:	f889 2002 	strb.w	r2, [r9, #2]
   bb9d0:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bb9d4:	429a      	cmp	r2, r3
   bb9d6:	d9b7      	bls.n	bb948 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bb9d8:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bb9dc:	2b00      	cmp	r3, #0
   bb9de:	d0b3      	beq.n	bb948 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bb9e0:	6823      	ldr	r3, [r4, #0]
   bb9e2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb9e6:	685b      	ldr	r3, [r3, #4]
   bb9e8:	4649      	mov	r1, r9
   bb9ea:	4620      	mov	r0, r4
   bb9ec:	4798      	blx	r3
   bb9ee:	e7ab      	b.n	bb948 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bb9f0:	2003e576 	.word	0x2003e576
   bb9f4:	2003e57b 	.word	0x2003e57b

000bb9f8 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bb9f8:	b510      	push	{r4, lr}
   bb9fa:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bb9fc:	6a00      	ldr	r0, [r0, #32]
   bb9fe:	6803      	ldr	r3, [r0, #0]
   bba00:	68db      	ldr	r3, [r3, #12]
   bba02:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bba04:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bba08:	28ff      	cmp	r0, #255	; 0xff
   bba0a:	d002      	beq.n	bba12 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bba0c:	2101      	movs	r1, #1
   bba0e:	f004 fe6f 	bl	c06f0 <pinMode>

    deselectSlave();
   bba12:	6823      	ldr	r3, [r4, #0]
   bba14:	4620      	mov	r0, r4
   bba16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bba18:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bba1a:	2064      	movs	r0, #100	; 0x64
   bba1c:	f001 fdc2 	bl	bd5a4 <delay>
#endif
    
    return true;
}
   bba20:	2001      	movs	r0, #1
   bba22:	bd10      	pop	{r4, pc}

000bba24 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bba24:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bba28:	2100      	movs	r1, #0
   bba2a:	f004 be72 	b.w	c0712 <digitalWrite>

000bba2e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bba2e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bba32:	2101      	movs	r1, #1
   bba34:	f004 be6d 	b.w	c0712 <digitalWrite>

000bba38 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bba38:	b570      	push	{r4, r5, r6, lr}
   bba3a:	4604      	mov	r4, r0
   bba3c:	460d      	mov	r5, r1
   bba3e:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bba40:	f7ff fa7c 	bl	baf3c <_ZN15RHGenericDriverC1Ev>
   bba44:	4b03      	ldr	r3, [pc, #12]	; (bba54 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bba46:	6023      	str	r3, [r4, #0]
   bba48:	6226      	str	r6, [r4, #32]
   bba4a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bba4e:	4620      	mov	r0, r4
   bba50:	bd70      	pop	{r4, r5, r6, pc}
   bba52:	bf00      	nop
   bba54:	000c63a0 	.word	0x000c63a0

000bba58 <_ZN11RHSPIDriver7spiReadEh>:
{
   bba58:	b538      	push	{r3, r4, r5, lr}
   bba5a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bba5c:	6a00      	ldr	r0, [r0, #32]
   bba5e:	6803      	ldr	r3, [r0, #0]
   bba60:	6a1b      	ldr	r3, [r3, #32]
{
   bba62:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bba64:	4798      	blx	r3
    selectSlave();
   bba66:	6823      	ldr	r3, [r4, #0]
   bba68:	4620      	mov	r0, r4
   bba6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bba6c:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bba6e:	6a20      	ldr	r0, [r4, #32]
   bba70:	6803      	ldr	r3, [r0, #0]
   bba72:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bba76:	681b      	ldr	r3, [r3, #0]
   bba78:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bba7a:	6a20      	ldr	r0, [r4, #32]
   bba7c:	6803      	ldr	r3, [r0, #0]
   bba7e:	2100      	movs	r1, #0
   bba80:	681b      	ldr	r3, [r3, #0]
   bba82:	4798      	blx	r3
    deselectSlave();
   bba84:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bba86:	4605      	mov	r5, r0
    deselectSlave();
   bba88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bba8a:	4620      	mov	r0, r4
   bba8c:	4798      	blx	r3
    _spi.endTransaction();
   bba8e:	6a20      	ldr	r0, [r4, #32]
   bba90:	6803      	ldr	r3, [r0, #0]
   bba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bba94:	4798      	blx	r3
}
   bba96:	4628      	mov	r0, r5
   bba98:	bd38      	pop	{r3, r4, r5, pc}

000bba9a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bba9a:	b570      	push	{r4, r5, r6, lr}
   bba9c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bba9e:	6a00      	ldr	r0, [r0, #32]
   bbaa0:	6803      	ldr	r3, [r0, #0]
   bbaa2:	6a1b      	ldr	r3, [r3, #32]
{
   bbaa4:	4616      	mov	r6, r2
   bbaa6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bbaa8:	4798      	blx	r3
    selectSlave();
   bbaaa:	6823      	ldr	r3, [r4, #0]
   bbaac:	4620      	mov	r0, r4
   bbaae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbab0:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bbab2:	6a20      	ldr	r0, [r4, #32]
   bbab4:	6803      	ldr	r3, [r0, #0]
   bbab6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bbaba:	681b      	ldr	r3, [r3, #0]
   bbabc:	4798      	blx	r3
   bbabe:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bbac0:	6a20      	ldr	r0, [r4, #32]
   bbac2:	6803      	ldr	r3, [r0, #0]
   bbac4:	4631      	mov	r1, r6
   bbac6:	681b      	ldr	r3, [r3, #0]
   bbac8:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bbaca:	2001      	movs	r0, #1
   bbacc:	f001 f946 	bl	bcd5c <HAL_Delay_Microseconds>
    deselectSlave();
   bbad0:	6823      	ldr	r3, [r4, #0]
   bbad2:	4620      	mov	r0, r4
   bbad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbad6:	4798      	blx	r3
    _spi.endTransaction();
   bbad8:	6a20      	ldr	r0, [r4, #32]
   bbada:	6803      	ldr	r3, [r0, #0]
   bbadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbade:	4798      	blx	r3
}
   bbae0:	4628      	mov	r0, r5
   bbae2:	bd70      	pop	{r4, r5, r6, pc}

000bbae4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bbae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbae6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbae8:	6a00      	ldr	r0, [r0, #32]
{
   bbaea:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bbaec:	6803      	ldr	r3, [r0, #0]
   bbaee:	6a1b      	ldr	r3, [r3, #32]
{
   bbaf0:	460f      	mov	r7, r1
   bbaf2:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bbaf4:	4798      	blx	r3
    selectSlave();
   bbaf6:	6823      	ldr	r3, [r4, #0]
   bbaf8:	4620      	mov	r0, r4
   bbafa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbafc:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bbafe:	6a20      	ldr	r0, [r4, #32]
   bbb00:	6803      	ldr	r3, [r0, #0]
   bbb02:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bbb06:	681b      	ldr	r3, [r3, #0]
   bbb08:	4798      	blx	r3
   bbb0a:	442e      	add	r6, r5
   bbb0c:	4607      	mov	r7, r0
    while (len--)
   bbb0e:	42b5      	cmp	r5, r6
   bbb10:	d007      	beq.n	bbb22 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bbb12:	6a20      	ldr	r0, [r4, #32]
   bbb14:	6803      	ldr	r3, [r0, #0]
   bbb16:	2100      	movs	r1, #0
   bbb18:	681b      	ldr	r3, [r3, #0]
   bbb1a:	4798      	blx	r3
   bbb1c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bbb20:	e7f5      	b.n	bbb0e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bbb22:	6823      	ldr	r3, [r4, #0]
   bbb24:	4620      	mov	r0, r4
   bbb26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbb28:	4798      	blx	r3
    _spi.endTransaction();
   bbb2a:	6a20      	ldr	r0, [r4, #32]
   bbb2c:	6803      	ldr	r3, [r0, #0]
   bbb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbb30:	4798      	blx	r3
}
   bbb32:	4638      	mov	r0, r7
   bbb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbb36 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bbb36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbb38:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bbb3a:	6a00      	ldr	r0, [r0, #32]
{
   bbb3c:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bbb3e:	6803      	ldr	r3, [r0, #0]
   bbb40:	6a1b      	ldr	r3, [r3, #32]
{
   bbb42:	460f      	mov	r7, r1
   bbb44:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bbb46:	4798      	blx	r3
    selectSlave();
   bbb48:	6823      	ldr	r3, [r4, #0]
   bbb4a:	4620      	mov	r0, r4
   bbb4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bbb4e:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bbb50:	6a20      	ldr	r0, [r4, #32]
   bbb52:	6803      	ldr	r3, [r0, #0]
   bbb54:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bbb58:	681b      	ldr	r3, [r3, #0]
   bbb5a:	4798      	blx	r3
   bbb5c:	442e      	add	r6, r5
   bbb5e:	4607      	mov	r7, r0
    while (len--)
   bbb60:	42b5      	cmp	r5, r6
   bbb62:	d006      	beq.n	bbb72 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bbb64:	6a20      	ldr	r0, [r4, #32]
   bbb66:	f815 1b01 	ldrb.w	r1, [r5], #1
   bbb6a:	6803      	ldr	r3, [r0, #0]
   bbb6c:	681b      	ldr	r3, [r3, #0]
   bbb6e:	4798      	blx	r3
    while (len--)
   bbb70:	e7f6      	b.n	bbb60 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bbb72:	6823      	ldr	r3, [r4, #0]
   bbb74:	4620      	mov	r0, r4
   bbb76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bbb78:	4798      	blx	r3
    _spi.endTransaction();
   bbb7a:	6a20      	ldr	r0, [r4, #32]
   bbb7c:	6803      	ldr	r3, [r0, #0]
   bbb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bbb80:	4798      	blx	r3
}
   bbb82:	4638      	mov	r0, r7
   bbb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbb86 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bbb86:	6a00      	ldr	r0, [r0, #32]
   bbb88:	6803      	ldr	r3, [r0, #0]
   bbb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bbb8c:	4718      	bx	r3

000bbb8e <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bbb8e:	2001      	movs	r0, #1
   bbb90:	4770      	bx	lr

000bbb92 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bbb92:	20fb      	movs	r0, #251	; 0xfb
   bbb94:	4770      	bx	lr

000bbb96 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bbb96:	4770      	bx	lr

000bbb98 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bbb98:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bbb9a:	7903      	ldrb	r3, [r0, #4]
   bbb9c:	2b05      	cmp	r3, #5
{
   bbb9e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bbba0:	d010      	beq.n	bbbc4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bbba2:	6803      	ldr	r3, [r0, #0]
   bbba4:	2105      	movs	r1, #5
   bbba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbbaa:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bbbac:	2207      	movs	r2, #7
   bbbae:	2101      	movs	r1, #1
   bbbb0:	4620      	mov	r0, r4
   bbbb2:	f7ff ff72 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bbbb6:	2280      	movs	r2, #128	; 0x80
   bbbb8:	2140      	movs	r1, #64	; 0x40
   bbbba:	4620      	mov	r0, r4
   bbbbc:	f7ff ff6d 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bbbc0:	2305      	movs	r3, #5
   bbbc2:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bbbc4:	7923      	ldrb	r3, [r4, #4]
   bbbc6:	2b05      	cmp	r3, #5
   bbbc8:	d0fc      	beq.n	bbbc4 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bbbca:	7e20      	ldrb	r0, [r4, #24]
}
   bbbcc:	bd10      	pop	{r4, pc}

000bbbce <_ZN7RH_RF95D0Ev>:
   bbbce:	b510      	push	{r4, lr}
   bbbd0:	f44f 7198 	mov.w	r1, #304	; 0x130
   bbbd4:	4604      	mov	r4, r0
   bbbd6:	f7f8 fa62 	bl	b409e <_ZdlPvj>
   bbbda:	4620      	mov	r0, r4
   bbbdc:	bd10      	pop	{r4, pc}

000bbbde <_ZN7RH_RF955sleepEv>:
{
   bbbde:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bbbe0:	7903      	ldrb	r3, [r0, #4]
   bbbe2:	2b01      	cmp	r3, #1
{
   bbbe4:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bbbe6:	d00b      	beq.n	bbc00 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bbbe8:	6803      	ldr	r3, [r0, #0]
   bbbea:	2101      	movs	r1, #1
   bbbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbbf0:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bbbf2:	2200      	movs	r2, #0
   bbbf4:	2101      	movs	r1, #1
   bbbf6:	4620      	mov	r0, r4
   bbbf8:	f7ff ff4f 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bbbfc:	2301      	movs	r3, #1
   bbbfe:	7123      	strb	r3, [r4, #4]
}
   bbc00:	2001      	movs	r0, #1
   bbc02:	bd10      	pop	{r4, pc}

000bbc04 <_ZN7RH_RF954recvEPhS0_>:
{
   bbc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bbc06:	6803      	ldr	r3, [r0, #0]
   bbc08:	68db      	ldr	r3, [r3, #12]
{
   bbc0a:	4604      	mov	r4, r0
   bbc0c:	460f      	mov	r7, r1
   bbc0e:	4615      	mov	r5, r2
    if (!available())
   bbc10:	4798      	blx	r3
   bbc12:	4606      	mov	r6, r0
   bbc14:	b1b0      	cbz	r0, bbc44 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bbc16:	b187      	cbz	r7, bbc3a <_ZN7RH_RF954recvEPhS0_+0x36>
   bbc18:	b17d      	cbz	r5, bbc3a <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bbc1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bbc1e:	782a      	ldrb	r2, [r5, #0]
   bbc20:	3b03      	subs	r3, #3
   bbc22:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bbc24:	bfde      	ittt	le
   bbc26:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bbc2a:	3b04      	suble	r3, #4
   bbc2c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bbc2e:	782a      	ldrb	r2, [r5, #0]
   bbc30:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bbc34:	4638      	mov	r0, r7
   bbc36:	f006 fc75 	bl	c2524 <memcpy>
    _rxBufValid = false;
   bbc3a:	2300      	movs	r3, #0
   bbc3c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbc40:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bbc44:	4630      	mov	r0, r6
   bbc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc48 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bbc48:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bbc4a:	b538      	push	{r3, r4, r5, lr}
   bbc4c:	4605      	mov	r5, r0
   bbc4e:	460c      	mov	r4, r1
	if (power > 20)
   bbc50:	dc14      	bgt.n	bbc7c <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bbc52:	2901      	cmp	r1, #1
   bbc54:	dd14      	ble.n	bbc80 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bbc56:	2911      	cmp	r1, #17
   bbc58:	dd13      	ble.n	bbc82 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bbc5a:	2207      	movs	r2, #7
   bbc5c:	214d      	movs	r1, #77	; 0x4d
   bbc5e:	4628      	mov	r0, r5
   bbc60:	f7ff ff1b 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bbc64:	3c03      	subs	r4, #3
   bbc66:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbc68:	1ea2      	subs	r2, r4, #2
   bbc6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bbc6e:	4628      	mov	r0, r5
   bbc70:	b2d2      	uxtb	r2, r2
}
   bbc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbc76:	2109      	movs	r1, #9
   bbc78:	f7ff bf0f 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bbc7c:	2414      	movs	r4, #20
   bbc7e:	e7ec      	b.n	bbc5a <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bbc80:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbc82:	2204      	movs	r2, #4
   bbc84:	214d      	movs	r1, #77	; 0x4d
   bbc86:	4628      	mov	r0, r5
   bbc88:	f7ff ff07 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
   bbc8c:	e7ec      	b.n	bbc68 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bbc90 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bbc90:	b538      	push	{r3, r4, r5, lr}
   bbc92:	4604      	mov	r4, r0
   bbc94:	4615      	mov	r5, r2
    _rxBufValid(0)
   bbc96:	461a      	mov	r2, r3
   bbc98:	f7ff fece 	bl	bba38 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bbc9c:	4b09      	ldr	r3, [pc, #36]	; (bbcc4 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bbc9e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bbca0:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bbca2:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bbca4:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bbca8:	2201      	movs	r2, #1
    _rxBufValid(0)
   bbcaa:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbcae:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bbcb2:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bbcb6:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bbcba:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bbcbe:	4620      	mov	r0, r4
   bbcc0:	bd38      	pop	{r3, r4, r5, pc}
   bbcc2:	bf00      	nop
   bbcc4:	000c6488 	.word	0x000c6488

000bbcc8 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bbcc8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bbccc:	2b03      	cmp	r3, #3
   bbcce:	d91b      	bls.n	bbd08 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bbcd0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bbcd4:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bbcd6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bbcda:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bbcdc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bbce0:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bbce2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bbce6:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bbce8:	7983      	ldrb	r3, [r0, #6]
   bbcea:	b933      	cbnz	r3, bbcfa <_ZN7RH_RF9513validateRxBufEv+0x32>
   bbcec:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bbcee:	7942      	ldrb	r2, [r0, #5]
   bbcf0:	429a      	cmp	r2, r3
   bbcf2:	d002      	beq.n	bbcfa <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bbcf4:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bbcf6:	2bff      	cmp	r3, #255	; 0xff
   bbcf8:	d106      	bne.n	bbd08 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bbcfa:	8a83      	ldrh	r3, [r0, #20]
   bbcfc:	3301      	adds	r3, #1
   bbcfe:	b29b      	uxth	r3, r3
   bbd00:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bbd02:	2301      	movs	r3, #1
   bbd04:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bbd08:	4770      	bx	lr
   bbd0a:	0000      	movs	r0, r0
   bbd0c:	0000      	movs	r0, r0
	...

000bbd10 <_ZN7RH_RF9512setFrequencyEf>:
{
   bbd10:	b538      	push	{r3, r4, r5, lr}
   bbd12:	4604      	mov	r4, r0
   bbd14:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd18:	ee10 0a10 	vmov	r0, s0
{
   bbd1c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd20:	f005 fff0 	bl	c1d04 <__aeabi_f2d>
   bbd24:	a317      	add	r3, pc, #92	; (adr r3, bbd84 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bbd26:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd2a:	f006 f843 	bl	c1db4 <__aeabi_dmul>
   bbd2e:	a317      	add	r3, pc, #92	; (adr r3, bbd8c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bbd30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd34:	f006 f968 	bl	c2008 <__aeabi_ddiv>
   bbd38:	f006 fb14 	bl	c2364 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbd3c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbd3e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbd40:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bbd44:	4620      	mov	r0, r4
   bbd46:	f7ff fea8 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bbd4a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bbd4e:	2107      	movs	r1, #7
   bbd50:	4620      	mov	r0, r4
   bbd52:	f7ff fea2 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bbd56:	b2ea      	uxtb	r2, r5
   bbd58:	2108      	movs	r1, #8
   bbd5a:	4620      	mov	r0, r4
   bbd5c:	f7ff fe9d 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bbd60:	eddf 7a07 	vldr	s15, [pc, #28]	; bbd80 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bbd64:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bbd68:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bbd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbd70:	bfac      	ite	ge
   bbd72:	2301      	movge	r3, #1
   bbd74:	2300      	movlt	r3, #0
}
   bbd76:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bbd78:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bbd7c:	bd38      	pop	{r3, r4, r5, pc}
   bbd7e:	bf00      	nop
   bbd80:	4442c000 	.word	0x4442c000
   bbd84:	00000000 	.word	0x00000000
   bbd88:	412e8480 	.word	0x412e8480
   bbd8c:	00000000 	.word	0x00000000
   bbd90:	404e8480 	.word	0x404e8480

000bbd94 <_ZN7RH_RF9511setModeIdleEv>:
{
   bbd94:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bbd96:	7903      	ldrb	r3, [r0, #4]
   bbd98:	2b02      	cmp	r3, #2
{
   bbd9a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bbd9c:	d00b      	beq.n	bbdb6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bbd9e:	6803      	ldr	r3, [r0, #0]
   bbda0:	2102      	movs	r1, #2
   bbda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbda6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bbda8:	2201      	movs	r2, #1
   bbdaa:	4611      	mov	r1, r2
   bbdac:	4620      	mov	r0, r4
   bbdae:	f7ff fe74 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bbdb2:	2302      	movs	r3, #2
   bbdb4:	7123      	strb	r3, [r4, #4]
}
   bbdb6:	bd10      	pop	{r4, pc}

000bbdb8 <_ZN7RH_RF9515handleInterruptEv>:
{
   bbdb8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbdba:	2112      	movs	r1, #18
{
   bbdbc:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbdbe:	f7ff fe4b 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbdc2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbdc4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbdc6:	4620      	mov	r0, r4
   bbdc8:	f7ff fe46 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbdcc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbdce:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbdd0:	2112      	movs	r1, #18
   bbdd2:	4620      	mov	r0, r4
   bbdd4:	f7ff fe61 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bbdd8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bbdda:	2b04      	cmp	r3, #4
   bbddc:	d107      	bne.n	bbdee <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbdde:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bbde2:	d117      	bne.n	bbe14 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bbde4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bbde8:	b10b      	cbz	r3, bbdee <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbdea:	0670      	lsls	r0, r6, #25
   bbdec:	d512      	bpl.n	bbe14 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bbdee:	7923      	ldrb	r3, [r4, #4]
   bbdf0:	2b04      	cmp	r3, #4
   bbdf2:	d101      	bne.n	bbdf8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bbdf4:	0669      	lsls	r1, r5, #25
   bbdf6:	d422      	bmi.n	bbe3e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bbdf8:	7923      	ldrb	r3, [r4, #4]
   bbdfa:	2b03      	cmp	r3, #3
   bbdfc:	d101      	bne.n	bbe02 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bbdfe:	072a      	lsls	r2, r5, #28
   bbe00:	d468      	bmi.n	bbed4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bbe02:	7923      	ldrb	r3, [r4, #4]
   bbe04:	2b05      	cmp	r3, #5
   bbe06:	d10e      	bne.n	bbe26 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bbe08:	076b      	lsls	r3, r5, #29
   bbe0a:	d50c      	bpl.n	bbe26 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bbe0c:	f005 0501 	and.w	r5, r5, #1
   bbe10:	7625      	strb	r5, [r4, #24]
   bbe12:	e063      	b.n	bbedc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bbe14:	8a63      	ldrh	r3, [r4, #18]
   bbe16:	3301      	adds	r3, #1
   bbe18:	b29b      	uxth	r3, r3
   bbe1a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bbe1c:	2300      	movs	r3, #0
   bbe1e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbe22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe26:	22ff      	movs	r2, #255	; 0xff
   bbe28:	2112      	movs	r1, #18
   bbe2a:	4620      	mov	r0, r4
   bbe2c:	f7ff fe35 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe30:	4620      	mov	r0, r4
   bbe32:	22ff      	movs	r2, #255	; 0xff
}
   bbe34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbe38:	2112      	movs	r1, #18
   bbe3a:	f7ff be2e 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbe3e:	2113      	movs	r1, #19
   bbe40:	4620      	mov	r0, r4
   bbe42:	f7ff fe09 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbe46:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbe48:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbe4a:	4620      	mov	r0, r4
   bbe4c:	f7ff fe04 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
   bbe50:	210d      	movs	r1, #13
   bbe52:	4602      	mov	r2, r0
   bbe54:	4620      	mov	r0, r4
   bbe56:	f7ff fe20 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bbe5a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bbe5e:	462b      	mov	r3, r5
   bbe60:	2100      	movs	r1, #0
   bbe62:	4620      	mov	r0, r4
   bbe64:	f7ff fe3e 	bl	bbae4 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbe68:	2119      	movs	r1, #25
	_bufLen = len;
   bbe6a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbe6e:	4620      	mov	r0, r4
   bbe70:	f7ff fdf2 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
   bbe74:	b240      	sxtb	r0, r0
   bbe76:	2800      	cmp	r0, #0
   bbe78:	bfb8      	it	lt
   bbe7a:	3003      	addlt	r0, #3
   bbe7c:	1080      	asrs	r0, r0, #2
   bbe7e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbe82:	211a      	movs	r1, #26
   bbe84:	4620      	mov	r0, r4
   bbe86:	f7ff fde7 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbe8a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbe8e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbe90:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbe92:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbe94:	bfa9      	itett	ge
   bbe96:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbe98:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbe9a:	b21b      	sxthge	r3, r3
   bbe9c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbe9e:	bfb2      	itee	lt
   bbea0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbea2:	220f      	movge	r2, #15
   bbea4:	fb93 f3f2 	sdivge	r3, r3, r2
   bbea8:	b21b      	sxth	r3, r3
   bbeaa:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbeac:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbeb0:	b16b      	cbz	r3, bbece <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbeb2:	8a23      	ldrh	r3, [r4, #16]
   bbeb4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbeb6:	b21b      	sxth	r3, r3
   bbeb8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbeba:	4620      	mov	r0, r4
   bbebc:	f7ff ff04 	bl	bbcc8 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbec0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbec4:	2b00      	cmp	r3, #0
   bbec6:	d0ae      	beq.n	bbe26 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbec8:	f7ff ff64 	bl	bbd94 <_ZN7RH_RF9511setModeIdleEv>
   bbecc:	e7ab      	b.n	bbe26 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbece:	8a23      	ldrh	r3, [r4, #16]
   bbed0:	3ba4      	subs	r3, #164	; 0xa4
   bbed2:	e7f0      	b.n	bbeb6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbed4:	8ae3      	ldrh	r3, [r4, #22]
   bbed6:	3301      	adds	r3, #1
   bbed8:	b29b      	uxth	r3, r3
   bbeda:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbedc:	4620      	mov	r0, r4
   bbede:	e7f3      	b.n	bbec8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbee0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbee0:	4b02      	ldr	r3, [pc, #8]	; (bbeec <_ZN7RH_RF954isr0Ev+0xc>)
   bbee2:	6818      	ldr	r0, [r3, #0]
   bbee4:	b108      	cbz	r0, bbeea <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbee6:	f7ff bf67 	b.w	bbdb8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbeea:	4770      	bx	lr
   bbeec:	2003e5f8 	.word	0x2003e5f8

000bbef0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbef0:	4b02      	ldr	r3, [pc, #8]	; (bbefc <_ZN7RH_RF954isr1Ev+0xc>)
   bbef2:	6858      	ldr	r0, [r3, #4]
   bbef4:	b108      	cbz	r0, bbefa <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbef6:	f7ff bf5f 	b.w	bbdb8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbefa:	4770      	bx	lr
   bbefc:	2003e5f8 	.word	0x2003e5f8

000bbf00 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbf00:	4b02      	ldr	r3, [pc, #8]	; (bbf0c <_ZN7RH_RF954isr2Ev+0xc>)
   bbf02:	6898      	ldr	r0, [r3, #8]
   bbf04:	b108      	cbz	r0, bbf0a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbf06:	f7ff bf57 	b.w	bbdb8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbf0a:	4770      	bx	lr
   bbf0c:	2003e5f8 	.word	0x2003e5f8

000bbf10 <_ZN7RH_RF959setModeRxEv>:
{
   bbf10:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbf12:	7903      	ldrb	r3, [r0, #4]
   bbf14:	2b04      	cmp	r3, #4
{
   bbf16:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbf18:	d010      	beq.n	bbf3c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbf1a:	6803      	ldr	r3, [r0, #0]
   bbf1c:	2104      	movs	r1, #4
   bbf1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbf22:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbf24:	2205      	movs	r2, #5
   bbf26:	2101      	movs	r1, #1
   bbf28:	4620      	mov	r0, r4
   bbf2a:	f7ff fdb6 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbf2e:	2200      	movs	r2, #0
   bbf30:	2140      	movs	r1, #64	; 0x40
   bbf32:	4620      	mov	r0, r4
   bbf34:	f7ff fdb1 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbf38:	2304      	movs	r3, #4
   bbf3a:	7123      	strb	r3, [r4, #4]
}
   bbf3c:	bd10      	pop	{r4, pc}

000bbf3e <_ZN7RH_RF959availableEv>:
{
   bbf3e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbf40:	7903      	ldrb	r3, [r0, #4]
   bbf42:	2b03      	cmp	r3, #3
{
   bbf44:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbf46:	d005      	beq.n	bbf54 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbf48:	f7ff ffe2 	bl	bbf10 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbf4c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbf50:	b2c0      	uxtb	r0, r0
}
   bbf52:	bd10      	pop	{r4, pc}
	return false;
   bbf54:	2000      	movs	r0, #0
   bbf56:	e7fc      	b.n	bbf52 <_ZN7RH_RF959availableEv+0x14>

000bbf58 <_ZN7RH_RF959setModeTxEv>:
{
   bbf58:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbf5a:	7903      	ldrb	r3, [r0, #4]
   bbf5c:	2b03      	cmp	r3, #3
{
   bbf5e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbf60:	d010      	beq.n	bbf84 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbf62:	6803      	ldr	r3, [r0, #0]
   bbf64:	2103      	movs	r1, #3
   bbf66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbf6a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbf6c:	2203      	movs	r2, #3
   bbf6e:	2101      	movs	r1, #1
   bbf70:	4620      	mov	r0, r4
   bbf72:	f7ff fd92 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbf76:	2240      	movs	r2, #64	; 0x40
   bbf78:	4611      	mov	r1, r2
   bbf7a:	4620      	mov	r0, r4
   bbf7c:	f7ff fd8d 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbf80:	2303      	movs	r3, #3
   bbf82:	7123      	strb	r3, [r4, #4]
}
   bbf84:	bd10      	pop	{r4, pc}

000bbf86 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbf86:	2afb      	cmp	r2, #251	; 0xfb
{
   bbf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbf8a:	4604      	mov	r4, r0
   bbf8c:	460f      	mov	r7, r1
   bbf8e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbf90:	d902      	bls.n	bbf98 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbf92:	2600      	movs	r6, #0
}
   bbf94:	4630      	mov	r0, r6
   bbf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbf98:	6803      	ldr	r3, [r0, #0]
   bbf9a:	6a1b      	ldr	r3, [r3, #32]
   bbf9c:	4798      	blx	r3
    setModeIdle();
   bbf9e:	4620      	mov	r0, r4
   bbfa0:	f7ff fef8 	bl	bbd94 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbfa4:	6823      	ldr	r3, [r4, #0]
   bbfa6:	4620      	mov	r0, r4
   bbfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbfaa:	4798      	blx	r3
   bbfac:	4606      	mov	r6, r0
   bbfae:	2800      	cmp	r0, #0
   bbfb0:	d0ef      	beq.n	bbf92 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbfb2:	2200      	movs	r2, #0
   bbfb4:	210d      	movs	r1, #13
   bbfb6:	4620      	mov	r0, r4
   bbfb8:	f7ff fd6f 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbfbc:	7ae2      	ldrb	r2, [r4, #11]
   bbfbe:	2100      	movs	r1, #0
   bbfc0:	4620      	mov	r0, r4
   bbfc2:	f7ff fd6a 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bbfc6:	7b22      	ldrb	r2, [r4, #12]
   bbfc8:	2100      	movs	r1, #0
   bbfca:	4620      	mov	r0, r4
   bbfcc:	f7ff fd65 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bbfd0:	7b62      	ldrb	r2, [r4, #13]
   bbfd2:	2100      	movs	r1, #0
   bbfd4:	4620      	mov	r0, r4
   bbfd6:	f7ff fd60 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bbfda:	7ba2      	ldrb	r2, [r4, #14]
   bbfdc:	2100      	movs	r1, #0
   bbfde:	4620      	mov	r0, r4
   bbfe0:	f7ff fd5b 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bbfe4:	462b      	mov	r3, r5
   bbfe6:	463a      	mov	r2, r7
   bbfe8:	2100      	movs	r1, #0
   bbfea:	4620      	mov	r0, r4
   bbfec:	f7ff fda3 	bl	bbb36 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bbff0:	1d2a      	adds	r2, r5, #4
   bbff2:	b2d2      	uxtb	r2, r2
   bbff4:	2122      	movs	r1, #34	; 0x22
   bbff6:	4620      	mov	r0, r4
   bbff8:	f7ff fd4f 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bbffc:	4620      	mov	r0, r4
   bbffe:	f7ff ffab 	bl	bbf58 <_ZN7RH_RF959setModeTxEv>
    return true;
   bc002:	e7c7      	b.n	bbf94 <_ZN7RH_RF954sendEPKhh+0xe>

000bc004 <_ZN7RH_RF9510setTxPowerEab>:
{
   bc004:	b510      	push	{r4, lr}
   bc006:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bc008:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bc00c:	b172      	cbz	r2, bc02c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bc00e:	f381 0204 	usat	r2, #4, r1
   bc012:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bc016:	b2d2      	uxtb	r2, r2
   bc018:	2109      	movs	r1, #9
   bc01a:	f7ff fd3e 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bc01e:	4620      	mov	r0, r4
   bc020:	2204      	movs	r2, #4
}
   bc022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bc026:	214d      	movs	r1, #77	; 0x4d
   bc028:	f7ff bd37 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
}
   bc02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc030:	f7ff be0a 	b.w	bbc48 <_ZN7RH_RF9510setTxPowerEab.part.0>

000bc034 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bc034:	b538      	push	{r3, r4, r5, lr}
   bc036:	460c      	mov	r4, r1
   bc038:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bc03a:	780a      	ldrb	r2, [r1, #0]
   bc03c:	211d      	movs	r1, #29
   bc03e:	f7ff fd2c 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bc042:	7862      	ldrb	r2, [r4, #1]
   bc044:	211e      	movs	r1, #30
   bc046:	4628      	mov	r0, r5
   bc048:	f7ff fd27 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bc04c:	78a2      	ldrb	r2, [r4, #2]
   bc04e:	4628      	mov	r0, r5
   bc050:	2126      	movs	r1, #38	; 0x26
}
   bc052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bc056:	f7ff bd20 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bc05c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bc05c:	2905      	cmp	r1, #5
{
   bc05e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bc060:	d80f      	bhi.n	bc082 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bc062:	4b09      	ldr	r3, [pc, #36]	; (bc088 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bc064:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bc068:	185c      	adds	r4, r3, r1
   bc06a:	5a5a      	ldrh	r2, [r3, r1]
   bc06c:	78a3      	ldrb	r3, [r4, #2]
   bc06e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bc072:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bc074:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bc078:	f7ff ffdc 	bl	bc034 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bc07c:	2001      	movs	r0, #1
}
   bc07e:	b002      	add	sp, #8
   bc080:	bd10      	pop	{r4, pc}
        return false;
   bc082:	2000      	movs	r0, #0
   bc084:	e7fb      	b.n	bc07e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bc086:	bf00      	nop
   bc088:	000c6470 	.word	0x000c6470

000bc08c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bc08c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bc08e:	0a0a      	lsrs	r2, r1, #8
{
   bc090:	4605      	mov	r5, r0
   bc092:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bc094:	2120      	movs	r1, #32
   bc096:	f7ff fd00 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bc09a:	b2e2      	uxtb	r2, r4
   bc09c:	4628      	mov	r0, r5
   bc09e:	2121      	movs	r1, #33	; 0x21
}
   bc0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bc0a4:	f7ff bcf9 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>

000bc0a8 <_ZN7RH_RF954initEv>:
{
   bc0a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc0aa:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bc0ac:	f7ff fca4 	bl	bb9f8 <_ZN11RHSPIDriver4initEv>
   bc0b0:	4606      	mov	r6, r0
   bc0b2:	b918      	cbnz	r0, bc0bc <_ZN7RH_RF954initEv+0x14>
	return false;
   bc0b4:	2600      	movs	r6, #0
}
   bc0b6:	4630      	mov	r0, r6
   bc0b8:	b002      	add	sp, #8
   bc0ba:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bc0bc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bc0c0:	2dff      	cmp	r5, #255	; 0xff
   bc0c2:	d054      	beq.n	bc16e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bc0c4:	4629      	mov	r1, r5
   bc0c6:	4620      	mov	r0, r4
   bc0c8:	f7ff fd5d 	bl	bbb86 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bc0cc:	2280      	movs	r2, #128	; 0x80
   bc0ce:	2101      	movs	r1, #1
   bc0d0:	4620      	mov	r0, r4
   bc0d2:	f7ff fce2 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bc0d6:	200a      	movs	r0, #10
   bc0d8:	f001 fa64 	bl	bd5a4 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bc0dc:	2101      	movs	r1, #1
   bc0de:	4620      	mov	r0, r4
   bc0e0:	f7ff fcba 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
   bc0e4:	2880      	cmp	r0, #128	; 0x80
   bc0e6:	d1e5      	bne.n	bc0b4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bc0e8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bc0ec:	28ff      	cmp	r0, #255	; 0xff
   bc0ee:	d01c      	beq.n	bc12a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bc0f0:	2100      	movs	r1, #0
   bc0f2:	f004 fafd 	bl	c06f0 <pinMode>
	if (_myInterruptIndex == 0xff)
   bc0f6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bc0fa:	2bff      	cmp	r3, #255	; 0xff
   bc0fc:	d107      	bne.n	bc10e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bc0fe:	4a26      	ldr	r2, [pc, #152]	; (bc198 <_ZN7RH_RF954initEv+0xf0>)
   bc100:	7813      	ldrb	r3, [r2, #0]
   bc102:	2b03      	cmp	r3, #3
   bc104:	d8d6      	bhi.n	bc0b4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bc106:	1c59      	adds	r1, r3, #1
   bc108:	7011      	strb	r1, [r2, #0]
   bc10a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bc10e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bc112:	4b22      	ldr	r3, [pc, #136]	; (bc19c <_ZN7RH_RF954initEv+0xf4>)
   bc114:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bc118:	bb62      	cbnz	r2, bc174 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bc11a:	4921      	ldr	r1, [pc, #132]	; (bc1a0 <_ZN7RH_RF954initEv+0xf8>)
   bc11c:	9200      	str	r2, [sp, #0]
   bc11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc122:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc124:	b2a8      	uxth	r0, r5
   bc126:	f001 ffbd 	bl	be0a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bc12a:	2200      	movs	r2, #0
   bc12c:	210e      	movs	r1, #14
   bc12e:	4620      	mov	r0, r4
   bc130:	f7ff fcb3 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bc134:	2200      	movs	r2, #0
   bc136:	210f      	movs	r1, #15
   bc138:	4620      	mov	r0, r4
   bc13a:	f7ff fcae 	bl	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bc13e:	4620      	mov	r0, r4
   bc140:	f7ff fe28 	bl	bbd94 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bc144:	2100      	movs	r1, #0
   bc146:	4620      	mov	r0, r4
   bc148:	f7ff ff88 	bl	bc05c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bc14c:	2108      	movs	r1, #8
   bc14e:	4620      	mov	r0, r4
   bc150:	f7ff ff9c 	bl	bc08c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bc154:	ed9f 0a13 	vldr	s0, [pc, #76]	; bc1a4 <_ZN7RH_RF954initEv+0xfc>
   bc158:	4620      	mov	r0, r4
   bc15a:	f7ff fdd9 	bl	bbd10 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bc15e:	2300      	movs	r3, #0
   bc160:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bc164:	210d      	movs	r1, #13
   bc166:	4620      	mov	r0, r4
   bc168:	f7ff fd6e 	bl	bbc48 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bc16c:	e7a3      	b.n	bc0b6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bc16e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bc172:	e7ab      	b.n	bc0cc <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bc174:	2a01      	cmp	r2, #1
   bc176:	f04f 0300 	mov.w	r3, #0
   bc17a:	d104      	bne.n	bc186 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bc17c:	9300      	str	r3, [sp, #0]
   bc17e:	490a      	ldr	r1, [pc, #40]	; (bc1a8 <_ZN7RH_RF954initEv+0x100>)
   bc180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc184:	e7ce      	b.n	bc124 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bc186:	2a02      	cmp	r2, #2
   bc188:	d194      	bne.n	bc0b4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc18a:	9300      	str	r3, [sp, #0]
   bc18c:	4907      	ldr	r1, [pc, #28]	; (bc1ac <_ZN7RH_RF954initEv+0x104>)
   bc18e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc192:	2201      	movs	r2, #1
   bc194:	e7c6      	b.n	bc124 <_ZN7RH_RF954initEv+0x7c>
   bc196:	bf00      	nop
   bc198:	2003e5f5 	.word	0x2003e5f5
   bc19c:	2003e5f8 	.word	0x2003e5f8
   bc1a0:	000bbee1 	.word	0x000bbee1
   bc1a4:	43d90000 	.word	0x43d90000
   bc1a8:	000bbef1 	.word	0x000bbef1
   bc1ac:	000bbf01 	.word	0x000bbf01

000bc1b0 <_ZN7RH_RF957lastSNREv>:
}

int RH_RF95::lastSNR()
{
    return _lastSNR;
}
   bc1b0:	f990 012a 	ldrsb.w	r0, [r0, #298]	; 0x12a
   bc1b4:	4770      	bx	lr
	...

000bc1b8 <_ZN7RH_RF9514setLowDatarateEv>:
    // CR is bits 3..1 of RH_RF95_REG_1D_MODEM_CONFIG1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, (spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) & ~RH_RF95_CODING_RATE) | cr);
}
 
void RH_RF95::setLowDatarate()
{
   bc1b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // "To avoid issues surrounding  drift  of  the  crystal  reference  oscillator  due  to  either  temperature  change  
    // or  motion,the  low  data  rate optimization  bit  is  used. Specifically for 125  kHz  bandwidth  and  SF  =  11  and  12,  
    // this  adds  a  small  overhead  to increase robustness to reference frequency variations over the timescale of the LoRa packet."
 
    // read current value for BW and SF
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bc1bc:	211d      	movs	r1, #29
{
   bc1be:	b08b      	sub	sp, #44	; 0x2c
   bc1c0:	4607      	mov	r7, r0
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bc1c2:	f7ff fc49 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bc1c6:	211e      	movs	r1, #30
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
   bc1c8:	4606      	mov	r6, r0
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bc1ca:	4638      	mov	r0, r7
   bc1cc:	f7ff fc44 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
   
    // calculate symbol time (see Semtech AN1200.22 section 4)
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bc1d0:	4d27      	ldr	r5, [pc, #156]	; (bc270 <_ZN7RH_RF9514setLowDatarateEv+0xb8>)
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   bc1d2:	4684      	mov	ip, r0
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bc1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc1d6:	466c      	mov	r4, sp
   bc1d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc1da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc1dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc1de:	e895 0003 	ldmia.w	r5, {r0, r1}
   
    float bandwidth = bw_tab[BW];
   bc1e2:	ab0a      	add	r3, sp, #40	; 0x28
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   bc1e4:	e884 0003 	stmia.w	r4, {r0, r1}
    float bandwidth = bw_tab[BW];
   bc1e8:	f3c6 1607 	ubfx	r6, r6, #4, #8
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   bc1ec:	f3cc 1007 	ubfx	r0, ip, #4, #8
   bc1f0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   bc1f4:	f005 fd64 	bl	c1cc0 <__aeabi_ui2d>
   bc1f8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; bc268 <_ZN7RH_RF9514setLowDatarateEv+0xb0>
   bc1fc:	ec41 0b11 	vmov	d1, r0, r1
   bc200:	f856 5c28 	ldr.w	r5, [r6, #-40]
   bc204:	f004 fb94 	bl	c0930 <pow>
    // https://www.thethingsnetwork.org/forum/t/a-point-to-note-lora-low-data-rate-optimisation-flag/12007
    // the LDR bit should be set if the Symbol Time is > 16ms
    // So the threshold used here is 16.0ms
 
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   bc208:	2126      	movs	r1, #38	; 0x26
   bc20a:	4638      	mov	r0, r7
   bc20c:	ec59 8b10 	vmov	r8, r9, d0
   bc210:	f7ff fc22 	bl	bba58 <_ZN11RHSPIDriver7spiReadEh>
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   bc214:	4b17      	ldr	r3, [pc, #92]	; (bc274 <_ZN7RH_RF9514setLowDatarateEv+0xbc>)
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
   bc216:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
   bc21a:	2200      	movs	r2, #0
   bc21c:	4640      	mov	r0, r8
   bc21e:	4649      	mov	r1, r9
   bc220:	f005 fdc8 	bl	c1db4 <__aeabi_dmul>
   bc224:	4680      	mov	r8, r0
   bc226:	4628      	mov	r0, r5
   bc228:	4689      	mov	r9, r1
   bc22a:	f005 fd6b 	bl	c1d04 <__aeabi_f2d>
   bc22e:	4602      	mov	r2, r0
   bc230:	460b      	mov	r3, r1
   bc232:	4640      	mov	r0, r8
   bc234:	4649      	mov	r1, r9
   bc236:	f005 fee7 	bl	c2008 <__aeabi_ddiv>
   bc23a:	f006 f8b3 	bl	c23a4 <__aeabi_d2f>
    if (symbolTime > 16.0)
   bc23e:	ee07 0a10 	vmov	s14, r0
   bc242:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   bc246:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bc24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
   bc24e:	bfcc      	ite	gt
   bc250:	f044 0208 	orrgt.w	r2, r4, #8
    else
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   bc254:	4622      	movle	r2, r4
   bc256:	2126      	movs	r1, #38	; 0x26
   bc258:	4638      	mov	r0, r7
   
}
   bc25a:	b00b      	add	sp, #44	; 0x2c
   bc25c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
   bc260:	f7ff bc1b 	b.w	bba9a <_ZN11RHSPIDriver8spiWriteEhh>
   bc264:	f3af 8000 	nop.w
   bc268:	00000000 	.word	0x00000000
   bc26c:	40000000 	.word	0x40000000
   bc270:	000c6448 	.word	0x000c6448
   bc274:	408f4000 	.word	0x408f4000

000bc278 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bc278:	2001      	movs	r0, #1
   bc27a:	4770      	bx	lr

000bc27c <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bc27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc27e:	4d1f      	ldr	r5, [pc, #124]	; (bc2fc <_ZN14SequentialFileC1Ev+0x80>)
   bc280:	4b1f      	ldr	r3, [pc, #124]	; (bc300 <_ZN14SequentialFileC1Ev+0x84>)
   bc282:	4604      	mov	r4, r0
   bc284:	4629      	mov	r1, r5
   bc286:	f840 3b04 	str.w	r3, [r0], #4
   bc28a:	f003 fcb0 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc28e:	491d      	ldr	r1, [pc, #116]	; (bc304 <_ZN14SequentialFileC1Ev+0x88>)
   bc290:	f104 0014 	add.w	r0, r4, #20
   bc294:	f003 fcab 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc298:	4629      	mov	r1, r5
   bc29a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc29e:	f003 fca6 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc2a2:	2300      	movs	r3, #0
   bc2a4:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bc2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bc2ac:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bc2b0:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bc2b4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bc2b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bc2bc:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bc2be:	2308      	movs	r3, #8
   bc2c0:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc2c2:	2020      	movs	r0, #32
   bc2c4:	f7f7 fee7 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc2c8:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bc2ca:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc2cc:	3d01      	subs	r5, #1
   bc2ce:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bc2d0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bc2d4:	4606      	mov	r6, r0
   bc2d6:	f44f 7000 	mov.w	r0, #512	; 0x200
   bc2da:	f7f7 fedc 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc2de:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bc2e2:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bc2e6:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bc2ea:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bc2ec:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bc2ee:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bc2f0:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc2f2:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bc2f4:	6667      	str	r7, [r4, #100]	; 0x64

}
   bc2f6:	4620      	mov	r0, r4
   bc2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc2fa:	bf00      	nop
   bc2fc:	000c6838 	.word	0x000c6838
   bc300:	000c660c 	.word	0x000c660c
   bc304:	000c650c 	.word	0x000c650c

000bc308 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bc30a:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc30c:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bc30e:	4628      	mov	r0, r5
   bc310:	f003 fccb 	bl	bfcaa <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bc314:	490e      	ldr	r1, [pc, #56]	; (bc350 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bc316:	4668      	mov	r0, sp
   bc318:	f003 fc69 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc31c:	4669      	mov	r1, sp
   bc31e:	4628      	mov	r0, r5
   bc320:	f003 fd3d 	bl	bfd9e <_ZNK6String8endsWithERKS_>
   bc324:	4606      	mov	r6, r0
   bc326:	4668      	mov	r0, sp
   bc328:	f003 fc16 	bl	bfb58 <_ZN6StringD1Ev>
   bc32c:	b16e      	cbz	r6, bc34a <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bc32e:	68e3      	ldr	r3, [r4, #12]
   bc330:	2200      	movs	r2, #0
   bc332:	3b01      	subs	r3, #1
   bc334:	4629      	mov	r1, r5
   bc336:	4668      	mov	r0, sp
   bc338:	f003 fd54 	bl	bfde4 <_ZNK6String9substringEjj>
   bc33c:	4669      	mov	r1, sp
   bc33e:	4628      	mov	r0, r5
   bc340:	f003 fcab 	bl	bfc9a <_ZN6StringaSEOS_>
   bc344:	4668      	mov	r0, sp
   bc346:	f003 fc07 	bl	bfb58 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bc34a:	4620      	mov	r0, r4
   bc34c:	b004      	add	sp, #16
   bc34e:	bd70      	pop	{r4, r5, r6, pc}
   bc350:	000c6511 	.word	0x000c6511

000bc354 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bc354:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bc356:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bc358:	4604      	mov	r4, r0
    if (!queueMutex) {
   bc35a:	b913      	cbnz	r3, bc362 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bc35c:	303c      	adds	r0, #60	; 0x3c
   bc35e:	f000 fc9d 	bl	bcc9c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bc362:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bc364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bc368:	f000 bca0 	b.w	bccac <os_mutex_lock>

000bc36c <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bc36c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bc36e:	f000 bca5 	b.w	bccbc <os_mutex_unlock>
	...

000bc374 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc374:	b510      	push	{r4, lr}
   bc376:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bc378:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc37a:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bc37c:	f000 fe56 	bl	bd02c <stat>
    if (result == 0) {
   bc380:	b9d0      	cbnz	r0, bc3b8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc382:	9b01      	ldr	r3, [sp, #4]
   bc384:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bc386:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc388:	d506      	bpl.n	bc398 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bc38a:	4915      	ldr	r1, [pc, #84]	; (bc3e0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bc38c:	4815      	ldr	r0, [pc, #84]	; (bc3e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc38e:	f7f7 fed6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bc392:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bc394:	b016      	add	sp, #88	; 0x58
   bc396:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bc398:	4812      	ldr	r0, [pc, #72]	; (bc3e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc39a:	4913      	ldr	r1, [pc, #76]	; (bc3e8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bc39c:	f7fb fb96 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bc3a0:	4620      	mov	r0, r4
   bc3a2:	f007 f963 	bl	c366c <unlink>
    result = mkdir(path, 0777);
   bc3a6:	f240 11ff 	movw	r1, #511	; 0x1ff
   bc3aa:	4620      	mov	r0, r4
   bc3ac:	f000 fe46 	bl	bd03c <mkdir>
    if (result == 0) {
   bc3b0:	b980      	cbnz	r0, bc3d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bc3b2:	490e      	ldr	r1, [pc, #56]	; (bc3ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bc3b4:	4622      	mov	r2, r4
   bc3b6:	e7e9      	b.n	bc38c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bc3b8:	f001 f8bc 	bl	bd534 <__errno>
   bc3bc:	6803      	ldr	r3, [r0, #0]
   bc3be:	2b02      	cmp	r3, #2
   bc3c0:	d0f1      	beq.n	bc3a6 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bc3c2:	f001 f8b7 	bl	bd534 <__errno>
   bc3c6:	490a      	ldr	r1, [pc, #40]	; (bc3f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bc3c8:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bc3ca:	4806      	ldr	r0, [pc, #24]	; (bc3e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc3cc:	f7fb fb7e 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc3d0:	2000      	movs	r0, #0
   bc3d2:	e7df      	b.n	bc394 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bc3d4:	f001 f8ae 	bl	bd534 <__errno>
   bc3d8:	4906      	ldr	r1, [pc, #24]	; (bc3f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bc3da:	6802      	ldr	r2, [r0, #0]
   bc3dc:	e7f5      	b.n	bc3ca <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bc3de:	bf00      	nop
   bc3e0:	000c651e 	.word	0x000c651e
   bc3e4:	2003e604 	.word	0x2003e604
   bc3e8:	000c653b 	.word	0x000c653b
   bc3ec:	000c656c 	.word	0x000c656c
   bc3f0:	000c6558 	.word	0x000c6558
   bc3f4:	000c657b 	.word	0x000c657b

000bc3f8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bc3f8:	b538      	push	{r3, r4, r5, lr}
   bc3fa:	4615      	mov	r5, r2
   bc3fc:	4604      	mov	r4, r0
    String result = name;
   bc3fe:	f003 fbf6 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bc402:	b14d      	cbz	r5, bc418 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bc404:	782b      	ldrb	r3, [r5, #0]
   bc406:	b13b      	cbz	r3, bc418 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bc408:	4904      	ldr	r1, [pc, #16]	; (bc41c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bc40a:	4620      	mov	r0, r4
   bc40c:	f003 fc76 	bl	bfcfc <_ZN6String6concatEPKc>
   bc410:	4629      	mov	r1, r5
   bc412:	4620      	mov	r0, r4
   bc414:	f003 fc72 	bl	bfcfc <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bc418:	4620      	mov	r0, r4
   bc41a:	bd38      	pop	{r3, r4, r5, pc}
   bc41c:	000c693c 	.word	0x000c693c

000bc420 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bc420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc422:	4605      	mov	r5, r0
   bc424:	460e      	mov	r6, r1
   bc426:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bc428:	6949      	ldr	r1, [r1, #20]
   bc42a:	4668      	mov	r0, sp
   bc42c:	f003 fcfa 	bl	bfe24 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bc430:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bc432:	b904      	cbnz	r4, bc436 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bc434:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc436:	4622      	mov	r2, r4
   bc438:	4628      	mov	r0, r5
   bc43a:	f7ff ffdd 	bl	bc3f8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bc43e:	4668      	mov	r0, sp
   bc440:	f003 fb8a 	bl	bfb58 <_ZN6StringD1Ev>
}
   bc444:	4628      	mov	r0, r5
   bc446:	b004      	add	sp, #16
   bc448:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc44c <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc44c:	b570      	push	{r4, r5, r6, lr}
   bc44e:	460c      	mov	r4, r1
   bc450:	b08e      	sub	sp, #56	; 0x38
    String result;
   bc452:	491a      	ldr	r1, [pc, #104]	; (bc4bc <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc454:	e9cd 3200 	strd	r3, r2, [sp]
   bc458:	4605      	mov	r5, r0
    String result;
   bc45a:	f003 fbc8 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bc45e:	68e0      	ldr	r0, [r4, #12]
   bc460:	69e1      	ldr	r1, [r4, #28]
   bc462:	4401      	add	r1, r0
   bc464:	3104      	adds	r1, #4
   bc466:	4628      	mov	r0, r5
   bc468:	f003 fb94 	bl	bfb94 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bc46c:	1d21      	adds	r1, r4, #4
   bc46e:	a806      	add	r0, sp, #24
   bc470:	f003 fc08 	bl	bfc84 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bc474:	4912      	ldr	r1, [pc, #72]	; (bc4c0 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bc476:	a802      	add	r0, sp, #8
   bc478:	f003 fbb9 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc47c:	a902      	add	r1, sp, #8
   bc47e:	a806      	add	r0, sp, #24
   bc480:	f003 fc5a 	bl	bfd38 <_ZplRK15StringSumHelperRK6String>
   bc484:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc488:	4606      	mov	r6, r0
   bc48a:	4621      	mov	r1, r4
   bc48c:	a80a      	add	r0, sp, #40	; 0x28
   bc48e:	f7ff ffc7 	bl	bc420 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bc492:	a90a      	add	r1, sp, #40	; 0x28
   bc494:	4630      	mov	r0, r6
   bc496:	f003 fc4f 	bl	bfd38 <_ZplRK15StringSumHelperRK6String>
   bc49a:	4601      	mov	r1, r0
   bc49c:	4628      	mov	r0, r5
   bc49e:	f003 fbe2 	bl	bfc66 <_ZN6StringaSERKS_>
   bc4a2:	a80a      	add	r0, sp, #40	; 0x28
   bc4a4:	f003 fb58 	bl	bfb58 <_ZN6StringD1Ev>
   bc4a8:	a802      	add	r0, sp, #8
   bc4aa:	f003 fb55 	bl	bfb58 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc4ae:	a806      	add	r0, sp, #24
   bc4b0:	f003 fb52 	bl	bfb58 <_ZN6StringD1Ev>
}
   bc4b4:	4628      	mov	r0, r5
   bc4b6:	b00e      	add	sp, #56	; 0x38
   bc4b8:	bd70      	pop	{r4, r5, r6, pc}
   bc4ba:	bf00      	nop
   bc4bc:	000c6838 	.word	0x000c6838
   bc4c0:	000c6511 	.word	0x000c6511

000bc4c4 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc4c8:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc4ca:	b08e      	sub	sp, #56	; 0x38
   bc4cc:	4605      	mov	r5, r0
   bc4ce:	460f      	mov	r7, r1
    if (allExtensions) {
   bc4d0:	2a00      	cmp	r2, #0
   bc4d2:	d04a      	beq.n	bc56a <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc4d4:	6840      	ldr	r0, [r0, #4]
   bc4d6:	f000 fdc1 	bl	bd05c <opendir>
        if (dir) {
   bc4da:	4606      	mov	r6, r0
   bc4dc:	2800      	cmp	r0, #0
   bc4de:	d054      	beq.n	bc58a <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc4e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc598 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc4e4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc594 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc4e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc590 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc4ec:	4630      	mov	r0, r6
   bc4ee:	f000 fdbd 	bl	bd06c <readdir>
                if (!ent) {
   bc4f2:	2800      	cmp	r0, #0
   bc4f4:	d033      	beq.n	bc55e <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc4f6:	7a82      	ldrb	r2, [r0, #10]
   bc4f8:	2a08      	cmp	r2, #8
   bc4fa:	d1f7      	bne.n	bc4ec <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc4fc:	f100 040b 	add.w	r4, r0, #11
   bc500:	6969      	ldr	r1, [r5, #20]
   bc502:	aa01      	add	r2, sp, #4
   bc504:	4620      	mov	r0, r4
   bc506:	f000 ffed 	bl	bd4e4 <sscanf>
   bc50a:	2801      	cmp	r0, #1
   bc50c:	d1ee      	bne.n	bc4ec <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc50e:	9b01      	ldr	r3, [sp, #4]
   bc510:	42bb      	cmp	r3, r7
   bc512:	d1eb      	bne.n	bc4ec <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc514:	1d29      	adds	r1, r5, #4
   bc516:	a80a      	add	r0, sp, #40	; 0x28
   bc518:	f003 fbb4 	bl	bfc84 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc51c:	4651      	mov	r1, sl
   bc51e:	a806      	add	r0, sp, #24
   bc520:	f003 fb65 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc524:	a906      	add	r1, sp, #24
   bc526:	a80a      	add	r0, sp, #40	; 0x28
   bc528:	f003 fc06 	bl	bfd38 <_ZplRK15StringSumHelperRK6String>
   bc52c:	4621      	mov	r1, r4
   bc52e:	f003 fc0f 	bl	bfd50 <_ZplRK15StringSumHelperPKc>
   bc532:	4601      	mov	r1, r0
   bc534:	a802      	add	r0, sp, #8
   bc536:	f003 fba5 	bl	bfc84 <_ZN6StringC1ERKS_>
   bc53a:	a806      	add	r0, sp, #24
   bc53c:	f003 fb0c 	bl	bfb58 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc540:	a80a      	add	r0, sp, #40	; 0x28
   bc542:	f003 fb09 	bl	bfb58 <_ZN6StringD1Ev>
                        unlink(path);
   bc546:	9802      	ldr	r0, [sp, #8]
   bc548:	f007 f890 	bl	c366c <unlink>
                        _log.trace("removed %s", path.c_str());
   bc54c:	4640      	mov	r0, r8
   bc54e:	9a02      	ldr	r2, [sp, #8]
   bc550:	4649      	mov	r1, r9
   bc552:	f7fb fac9 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc556:	a802      	add	r0, sp, #8
   bc558:	f003 fafe 	bl	bfb58 <_ZN6StringD1Ev>
                    continue;
   bc55c:	e7c6      	b.n	bc4ec <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc55e:	4630      	mov	r0, r6
}
   bc560:	b00e      	add	sp, #56	; 0x38
   bc562:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc566:	f000 bd89 	b.w	bd07c <closedir>
        String path = getPathForFileNum(fileNum); 
   bc56a:	460a      	mov	r2, r1
   bc56c:	4601      	mov	r1, r0
   bc56e:	a80a      	add	r0, sp, #40	; 0x28
   bc570:	f7ff ff6c 	bl	bc44c <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc574:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc576:	f007 f879 	bl	c366c <unlink>
        _log.trace("removed %s", path.c_str());
   bc57a:	4805      	ldr	r0, [pc, #20]	; (bc590 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc57e:	4905      	ldr	r1, [pc, #20]	; (bc594 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc580:	f7fb fab2 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc584:	a80a      	add	r0, sp, #40	; 0x28
   bc586:	f003 fae7 	bl	bfb58 <_ZN6StringD1Ev>
}
   bc58a:	b00e      	add	sp, #56	; 0x38
   bc58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc590:	2003e604 	.word	0x2003e604
   bc594:	000c6513 	.word	0x000c6513
   bc598:	000c6511 	.word	0x000c6511

000bc59c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc59c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc59e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc5a0:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc5a2:	b183      	cbz	r3, bc5c6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc5a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc5a6:	6945      	ldr	r5, [r0, #20]
   bc5a8:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc5aa:	42ae      	cmp	r6, r5
   bc5ac:	d906      	bls.n	bc5bc <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc5ae:	f855 0b04 	ldr.w	r0, [r5], #4
   bc5b2:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc5b6:	f7f7 fd72 	bl	b409e <_ZdlPvj>
   bc5ba:	e7f6      	b.n	bc5aa <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc5bc:	6861      	ldr	r1, [r4, #4]
   bc5be:	6820      	ldr	r0, [r4, #0]
   bc5c0:	0089      	lsls	r1, r1, #2
   bc5c2:	f7f7 fd6c 	bl	b409e <_ZdlPvj>
    }
   bc5c6:	4620      	mov	r0, r4
   bc5c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc5cc <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc5cc:	b510      	push	{r4, lr}
   bc5ce:	4b09      	ldr	r3, [pc, #36]	; (bc5f4 <_ZN14SequentialFileD1Ev+0x28>)
   bc5d0:	4604      	mov	r4, r0
   bc5d2:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc5d6:	f7ff ffe1 	bl	bc59c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc5da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc5de:	f003 fabb 	bl	bfb58 <_ZN6StringD1Ev>
   bc5e2:	f104 0014 	add.w	r0, r4, #20
   bc5e6:	f003 fab7 	bl	bfb58 <_ZN6StringD1Ev>
   bc5ea:	1d20      	adds	r0, r4, #4
   bc5ec:	f003 fab4 	bl	bfb58 <_ZN6StringD1Ev>
}
   bc5f0:	4620      	mov	r0, r4
   bc5f2:	bd10      	pop	{r4, pc}
   bc5f4:	000c660c 	.word	0x000c660c

000bc5f8 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc5f8:	b510      	push	{r4, lr}
   bc5fa:	4604      	mov	r4, r0
}
   bc5fc:	f7ff ffe6 	bl	bc5cc <_ZN14SequentialFileD1Ev>
   bc600:	4620      	mov	r0, r4
   bc602:	2168      	movs	r1, #104	; 0x68
   bc604:	f7f7 fd4b 	bl	b409e <_ZdlPvj>
   bc608:	4620      	mov	r0, r4
   bc60a:	bd10      	pop	{r4, pc}

000bc60c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc60c:	68c3      	ldr	r3, [r0, #12]
   bc60e:	68ca      	ldr	r2, [r1, #12]
   bc610:	1a9b      	subs	r3, r3, r2
   bc612:	109b      	asrs	r3, r3, #2
   bc614:	1e5a      	subs	r2, r3, #1
   bc616:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc61a:	1a1b      	subs	r3, r3, r0
   bc61c:	109b      	asrs	r3, r3, #2
   bc61e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc622:	6888      	ldr	r0, [r1, #8]
   bc624:	680a      	ldr	r2, [r1, #0]
   bc626:	1a80      	subs	r0, r0, r2
      }
   bc628:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc62c:	4770      	bx	lr
	...

000bc630 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc634:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc636:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc638:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc63a:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc63c:	4604      	mov	r4, r0
   bc63e:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc640:	d007      	beq.n	bc652 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc642:	b10b      	cbz	r3, bc648 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc644:	680a      	ldr	r2, [r1, #0]
   bc646:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc648:	69a3      	ldr	r3, [r4, #24]
   bc64a:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc64c:	61a3      	str	r3, [r4, #24]
      }
   bc64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc652:	f100 0108 	add.w	r1, r0, #8
   bc656:	3018      	adds	r0, #24
   bc658:	f7ff ffd8 	bl	bc60c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc65c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc660:	4298      	cmp	r0, r3
   bc662:	d102      	bne.n	bc66a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc664:	4838      	ldr	r0, [pc, #224]	; (bc748 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc666:	f004 f95c 	bl	c0922 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc66a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc66c:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc66e:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc670:	1a11      	subs	r1, r2, r0
   bc672:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc676:	2901      	cmp	r1, #1
   bc678:	d825      	bhi.n	bc6c6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc67a:	6961      	ldr	r1, [r4, #20]
   bc67c:	eba2 0801 	sub.w	r8, r2, r1
   bc680:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc684:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc686:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc68a:	d936      	bls.n	bc6fa <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc68c:	1b5d      	subs	r5, r3, r5
   bc68e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc690:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc694:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc696:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc698:	eba3 0201 	sub.w	r2, r3, r1
   bc69c:	d926      	bls.n	bc6ec <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc69e:	428b      	cmp	r3, r1
   bc6a0:	d002      	beq.n	bc6a8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc6a2:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc6a4:	f005 ff4c 	bl	c2540 <memmove>
	_M_node = __new_node;
   bc6a8:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc6aa:	682b      	ldr	r3, [r5, #0]
   bc6ac:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc6ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc6b2:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc6b4:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc6b8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc6ba:	f855 3008 	ldr.w	r3, [r5, r8]
   bc6be:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc6c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc6c4:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc6c6:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc6ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc6cc:	f7f7 fce3 	bl	b4096 <_Znwj>
   bc6d0:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc6d2:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc6d4:	b10b      	cbz	r3, bc6da <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc6d6:	683a      	ldr	r2, [r7, #0]
   bc6d8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc6dc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc6de:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc6e0:	685b      	ldr	r3, [r3, #4]
   bc6e2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc6e4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc6e8:	6222      	str	r2, [r4, #32]
   bc6ea:	e7af      	b.n	bc64c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc6ec:	428b      	cmp	r3, r1
   bc6ee:	d0db      	beq.n	bc6a8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc6f0:	f108 0004 	add.w	r0, r8, #4
   bc6f4:	1a80      	subs	r0, r0, r2
   bc6f6:	4428      	add	r0, r5
   bc6f8:	e7d4      	b.n	bc6a4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc6fa:	f103 0902 	add.w	r9, r3, #2
   bc6fe:	2b01      	cmp	r3, #1
   bc700:	bf2c      	ite	cs
   bc702:	4499      	addcs	r9, r3
   bc704:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc708:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc70c:	d301      	bcc.n	bc712 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc70e:	f004 f905 	bl	c091c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc712:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc716:	f7f7 fcbe 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc71c:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc71e:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc722:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc724:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc726:	4291      	cmp	r1, r2
   bc728:	4682      	mov	sl, r0
   bc72a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc72e:	d003      	beq.n	bc738 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc730:	1a52      	subs	r2, r2, r1
   bc732:	4628      	mov	r0, r5
   bc734:	f005 ff04 	bl	c2540 <memmove>
	::operator delete(__p
   bc738:	6861      	ldr	r1, [r4, #4]
   bc73a:	6820      	ldr	r0, [r4, #0]
   bc73c:	0089      	lsls	r1, r1, #2
   bc73e:	f7f7 fcae 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc742:	e9c4 a900 	strd	sl, r9, [r4]
   bc746:	e7af      	b.n	bc6a8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc748:	000c6145 	.word	0x000c6145

000bc74c <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc750:	68c3      	ldr	r3, [r0, #12]
   bc752:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc754:	b086      	sub	sp, #24
   bc756:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc758:	d808      	bhi.n	bc76c <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc75a:	4934      	ldr	r1, [pc, #208]	; (bc82c <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc75c:	4834      	ldr	r0, [pc, #208]	; (bc830 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc75e:	f7fb f9b5 	bl	b7acc <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc762:	2600      	movs	r6, #0
}
   bc764:	4630      	mov	r0, r6
   bc766:	b006      	add	sp, #24
   bc768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc76c:	6840      	ldr	r0, [r0, #4]
   bc76e:	f7ff fe01 	bl	bc374 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc772:	4606      	mov	r6, r0
   bc774:	2800      	cmp	r0, #0
   bc776:	d0f4      	beq.n	bc762 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc778:	6963      	ldr	r3, [r4, #20]
   bc77a:	6862      	ldr	r2, [r4, #4]
   bc77c:	492d      	ldr	r1, [pc, #180]	; (bc834 <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc77e:	482c      	ldr	r0, [pc, #176]	; (bc830 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc780:	f7fb f9b2 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc784:	6860      	ldr	r0, [r4, #4]
   bc786:	f000 fc69 	bl	bd05c <opendir>
    if (!dir) {
   bc78a:	4607      	mov	r7, r0
   bc78c:	2800      	cmp	r0, #0
   bc78e:	d0e8      	beq.n	bc762 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc790:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc792:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc838 <_ZN14SequentialFile7scanDirEv+0xec>
   bc796:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc830 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc79a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc79c:	4638      	mov	r0, r7
   bc79e:	f000 fc65 	bl	bd06c <readdir>
        if (!ent) {
   bc7a2:	4605      	mov	r5, r0
   bc7a4:	2800      	cmp	r0, #0
   bc7a6:	d039      	beq.n	bc81c <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc7a8:	7a83      	ldrb	r3, [r0, #10]
   bc7aa:	2b08      	cmp	r3, #8
   bc7ac:	d1f6      	bne.n	bc79c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc7ae:	350b      	adds	r5, #11
   bc7b0:	6961      	ldr	r1, [r4, #20]
   bc7b2:	aa01      	add	r2, sp, #4
   bc7b4:	4628      	mov	r0, r5
   bc7b6:	f000 fe95 	bl	bd4e4 <sscanf>
   bc7ba:	2801      	cmp	r0, #1
   bc7bc:	d1ee      	bne.n	bc79c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc7be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc7c0:	b17b      	cbz	r3, bc7e2 <_ZN14SequentialFile7scanDirEv+0x96>
   bc7c2:	4629      	mov	r1, r5
   bc7c4:	a802      	add	r0, sp, #8
   bc7c6:	f003 fa12 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
   bc7ca:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc7ce:	a802      	add	r0, sp, #8
   bc7d0:	f003 fae5 	bl	bfd9e <_ZNK6String8endsWithERKS_>
   bc7d4:	4682      	mov	sl, r0
   bc7d6:	a802      	add	r0, sp, #8
   bc7d8:	f003 f9be 	bl	bfb58 <_ZN6StringD1Ev>
   bc7dc:	f1ba 0f00 	cmp.w	sl, #0
   bc7e0:	d0dc      	beq.n	bc79c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc7e2:	6823      	ldr	r3, [r4, #0]
   bc7e4:	4629      	mov	r1, r5
   bc7e6:	689b      	ldr	r3, [r3, #8]
   bc7e8:	4620      	mov	r0, r4
   bc7ea:	4798      	blx	r3
   bc7ec:	2800      	cmp	r0, #0
   bc7ee:	d0d5      	beq.n	bc79c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc7f0:	9a01      	ldr	r2, [sp, #4]
   bc7f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc7f4:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc7f6:	bfb8      	it	lt
   bc7f8:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc7fa:	462b      	mov	r3, r5
   bc7fc:	4649      	mov	r1, r9
   bc7fe:	4640      	mov	r0, r8
   bc800:	f7fb f972 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc804:	4620      	mov	r0, r4
   bc806:	f7ff fda5 	bl	bc354 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc80a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc80e:	a901      	add	r1, sp, #4
   bc810:	f7ff ff0e 	bl	bc630 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc814:	4620      	mov	r0, r4
   bc816:	f7ff fda9 	bl	bc36c <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc81a:	e7bf      	b.n	bc79c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc81c:	4638      	mov	r0, r7
   bc81e:	f000 fc2d 	bl	bd07c <closedir>
    scanDirCompleted = true;
   bc822:	2301      	movs	r3, #1
   bc824:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc828:	e79c      	b.n	bc764 <_ZN14SequentialFile7scanDirEv+0x18>
   bc82a:	bf00      	nop
   bc82c:	000c6591 	.word	0x000c6591
   bc830:	2003e604 	.word	0x2003e604
   bc834:	000c65a6 	.word	0x000c65a6
   bc838:	000c65c2 	.word	0x000c65c2

000bc83c <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc83c:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc83e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc842:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc844:	b90b      	cbnz	r3, bc84a <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc846:	f7ff ff81 	bl	bc74c <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc84a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc84c:	3001      	adds	r0, #1
   bc84e:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc850:	bd10      	pop	{r4, pc}
	...

000bc854 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc854:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc856:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc85a:	4604      	mov	r4, r0
   bc85c:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc85e:	b90b      	cbnz	r3, bc864 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc860:	f7ff ff74 	bl	bc74c <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc864:	4620      	mov	r0, r4
   bc866:	f7ff fd75 	bl	bc354 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc86a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc86c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc86e:	429a      	cmp	r2, r3
   bc870:	d020      	beq.n	bc8b4 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc872:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc876:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc878:	b126      	cbz	r6, bc884 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc87a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc87c:	4293      	cmp	r3, r2
   bc87e:	d00c      	beq.n	bc89a <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc880:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc882:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc884:	4620      	mov	r0, r4
   bc886:	f7ff fd71 	bl	bc36c <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc88a:	b125      	cbz	r5, bc896 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc88c:	490a      	ldr	r1, [pc, #40]	; (bc8b8 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc88e:	480b      	ldr	r0, [pc, #44]	; (bc8bc <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc890:	462a      	mov	r2, r5
   bc892:	f7fb f929 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
}
   bc896:	4628      	mov	r0, r5
   bc898:	bd70      	pop	{r4, r5, r6, pc}
   bc89a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc89e:	f7f7 fbfe 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc8a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc8a4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc8a6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc8a8:	685b      	ldr	r3, [r3, #4]
   bc8aa:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc8ac:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc8b0:	6522      	str	r2, [r4, #80]	; 0x50
   bc8b2:	e7e6      	b.n	bc882 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc8b4:	2500      	movs	r5, #0
   bc8b6:	e7e5      	b.n	bc884 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc8b8:	000c65d8 	.word	0x000c65d8
   bc8bc:	2003e604 	.word	0x2003e604

000bc8c0 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc8c0:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc8c2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc8c6:	9101      	str	r1, [sp, #4]
   bc8c8:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc8ca:	b90b      	cbnz	r3, bc8d0 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc8cc:	f7ff ff3e 	bl	bc74c <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc8d0:	9b01      	ldr	r3, [sp, #4]
   bc8d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc8d4:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc8d6:	bfb8      	it	lt
   bc8d8:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc8da:	4620      	mov	r0, r4
   bc8dc:	f7ff fd3a 	bl	bc354 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc8e0:	a901      	add	r1, sp, #4
   bc8e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc8e6:	f7ff fea3 	bl	bc630 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc8ea:	4620      	mov	r0, r4
   bc8ec:	f7ff fd3e 	bl	bc36c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc8f0:	b002      	add	sp, #8
   bc8f2:	bd10      	pop	{r4, pc}

000bc8f4 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc8f4:	b538      	push	{r3, r4, r5, lr}
   bc8f6:	4604      	mov	r4, r0
    queueMutexLock();
   bc8f8:	f7ff fd2c 	bl	bc354 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc8fc:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc900:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc904:	f7ff fe82 	bl	bc60c <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc908:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc90a:	4620      	mov	r0, r4
   bc90c:	f7ff fd2e 	bl	bc36c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc910:	4628      	mov	r0, r5
   bc912:	bd38      	pop	{r3, r4, r5, pc}

000bc914 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc914:	4b01      	ldr	r3, [pc, #4]	; (bc91c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc916:	4a02      	ldr	r2, [pc, #8]	; (bc920 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc918:	601a      	str	r2, [r3, #0]
}
   bc91a:	4770      	bx	lr
   bc91c:	2003e604 	.word	0x2003e604
   bc920:	000c65f5 	.word	0x000c65f5

000bc924 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc924:	6803      	ldr	r3, [r0, #0]
   bc926:	685b      	ldr	r3, [r3, #4]
   bc928:	4718      	bx	r3

000bc92a <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc92a:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc92c:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc92e:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc930:	b133      	cbz	r3, bc940 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc932:	b131      	cbz	r1, bc942 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc934:	6823      	ldr	r3, [r4, #0]
   bc936:	4620      	mov	r0, r4
   bc938:	689b      	ldr	r3, [r3, #8]
   bc93a:	4798      	blx	r3
            lastUpdate = 0;
   bc93c:	2300      	movs	r3, #0
   bc93e:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc940:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc942:	f000 fa13 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc946:	69a3      	ldr	r3, [r4, #24]
   bc948:	1ac0      	subs	r0, r0, r3
   bc94a:	69e3      	ldr	r3, [r4, #28]
   bc94c:	4298      	cmp	r0, r3
   bc94e:	d2f1      	bcs.n	bc934 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc950:	e7f6      	b.n	bc940 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc952 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc952:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc954:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc956:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc958:	b11b      	cbz	r3, bc962 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc95a:	f000 fa07 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc95e:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc960:	bd10      	pop	{r4, pc}
        save();
   bc962:	6803      	ldr	r3, [r0, #0]
}
   bc964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc968:	689b      	ldr	r3, [r3, #8]
   bc96a:	4718      	bx	r3

000bc96c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   bc96c:	f000 b9c6 	b.w	bccfc <os_mutex_recursive_unlock>

000bc970 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   bc970:	b507      	push	{r0, r1, r2, lr}
   bc972:	4613      	mov	r3, r2
    if (data) {
   bc974:	b139      	cbz	r1, bc986 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   bc976:	2200      	movs	r2, #0
   bc978:	e9cd 2200 	strd	r2, r2, [sp]
   bc97c:	460a      	mov	r2, r1
   bc97e:	6801      	ldr	r1, [r0, #0]
   bc980:	201e      	movs	r0, #30
   bc982:	f000 fc3b 	bl	bd1fc <log_dump>
}
   bc986:	b003      	add	sp, #12
   bc988:	f85d fb04 	ldr.w	pc, [sp], #4

000bc98c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   bc98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   bc98e:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   bc992:	4604      	mov	r4, r0
    if (logData) {
   bc994:	b19b      	cbz	r3, bc9be <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   bc996:	6883      	ldr	r3, [r0, #8]
   bc998:	4d0a      	ldr	r5, [pc, #40]	; (bc9c4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   bc99a:	88da      	ldrh	r2, [r3, #6]
   bc99c:	490a      	ldr	r1, [pc, #40]	; (bc9c8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   bc99e:	4628      	mov	r0, r5
   bc9a0:	f7f7 fbcd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   bc9a4:	68a1      	ldr	r1, [r4, #8]
   bc9a6:	4628      	mov	r0, r5
   bc9a8:	88ca      	ldrh	r2, [r1, #6]
   bc9aa:	f7ff ffe1 	bl	bc970 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   bc9ae:	2300      	movs	r3, #0
   bc9b0:	9300      	str	r3, [sp, #0]
   bc9b2:	4a06      	ldr	r2, [pc, #24]	; (bc9cc <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   bc9b4:	6829      	ldr	r1, [r5, #0]
   bc9b6:	2301      	movs	r3, #1
   bc9b8:	201e      	movs	r0, #30
   bc9ba:	f000 fc17 	bl	bd1ec <log_write>
        Log.print("\n");
    }
}
   bc9be:	b003      	add	sp, #12
   bc9c0:	bd30      	pop	{r4, r5, pc}
   bc9c2:	bf00      	nop
   bc9c4:	2003e650 	.word	0x2003e650
   bc9c8:	000c6618 	.word	0x000c6618
   bc9cc:	000c6837 	.word	0x000c6837

000bc9d0 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc9d0:	b510      	push	{r4, lr}
   bc9d2:	4604      	mov	r4, r0
   bc9d4:	3004      	adds	r0, #4
   bc9d6:	f7f9 fc91 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc9da:	6823      	ldr	r3, [r4, #0]
   bc9dc:	68e1      	ldr	r1, [r4, #12]
   bc9de:	695b      	ldr	r3, [r3, #20]
   bc9e0:	4620      	mov	r0, r4
   bc9e2:	4798      	blx	r3
   bc9e4:	b918      	cbnz	r0, bc9ee <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc9e6:	6823      	ldr	r3, [r4, #0]
   bc9e8:	4620      	mov	r0, r4
   bc9ea:	699b      	ldr	r3, [r3, #24]
   bc9ec:	4798      	blx	r3
      { _M_device.unlock(); }
   bc9ee:	6860      	ldr	r0, [r4, #4]
   bc9f0:	f7ff ffbc 	bl	bc96c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc9f4:	2001      	movs	r0, #1
   bc9f6:	bd10      	pop	{r4, pc}

000bc9f8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:
bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc9fa:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc9fc:	3004      	adds	r0, #4
   bc9fe:	4614      	mov	r4, r2
   bca00:	460e      	mov	r6, r1
   bca02:	461f      	mov	r7, r3
   bca04:	f7f9 fc7a 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1))) {
   bca08:	68ea      	ldr	r2, [r5, #12]
   bca0a:	f1c4 0401 	rsb	r4, r4, #1
   bca0e:	4414      	add	r4, r2
   bca10:	42b4      	cmp	r4, r6
   bca12:	d30a      	bcc.n	bca2a <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bca14:	68a9      	ldr	r1, [r5, #8]
            value = p; // copies string
   bca16:	4638      	mov	r0, r7
   bca18:	4431      	add	r1, r6
   bca1a:	f003 f946 	bl	bfcaa <_ZN6StringaSEPKc>
            result = true;
   bca1e:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bca20:	6868      	ldr	r0, [r5, #4]
   bca22:	f7ff ffa3 	bl	bc96c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bca26:	4620      	mov	r0, r4
   bca28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bca2a:	2400      	movs	r4, #0
   bca2c:	e7f8      	b.n	bca20 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000bca30 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bca30:	b5f0      	push	{r4, r5, r6, r7, lr}
   bca32:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bca36:	4f18      	ldr	r7, [pc, #96]	; (bca98 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bca38:	4e18      	ldr	r6, [pc, #96]	; (bca9c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bca3a:	4d19      	ldr	r5, [pc, #100]	; (bcaa0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bca3c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bca3e:	42a0      	cmp	r0, r4
   bca40:	d00c      	beq.n	bca5c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bca42:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bca46:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bca48:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bca4c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bca4e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bca50:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bca54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bca58:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bca5a:	e7f0      	b.n	bca3e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bca5c:	f001 0403 	and.w	r4, r1, #3
   bca60:	4404      	add	r4, r0
    k = 0;
   bca62:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bca64:	42a0      	cmp	r0, r4
   bca66:	d004      	beq.n	bca72 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bca68:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bca6c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bca70:	e7f8      	b.n	bca64 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bca72:	4809      	ldr	r0, [pc, #36]	; (bca98 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bca74:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bca76:	4809      	ldr	r0, [pc, #36]	; (bca9c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bca78:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bca7c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bca7e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bca80:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bca82:	4b08      	ldr	r3, [pc, #32]	; (bcaa4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bca84:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bca88:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bca8a:	4b07      	ldr	r3, [pc, #28]	; (bcaa8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bca8c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bca90:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bca92:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bca98:	cc9e2d51 	.word	0xcc9e2d51
   bca9c:	1b873593 	.word	0x1b873593
   bcaa0:	e6546b64 	.word	0xe6546b64
   bcaa4:	85ebca6b 	.word	0x85ebca6b
   bcaa8:	c2b2ae35 	.word	0xc2b2ae35

000bcaac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bcaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcaae:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bcab0:	3004      	adds	r0, #4
   bcab2:	f7f9 fc23 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bcab6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bcab8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bcaba:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bcabc:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bcabe:	68a6      	ldr	r6, [r4, #8]
   bcac0:	4a05      	ldr	r2, [pc, #20]	; (bcad8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bcac2:	88f1      	ldrh	r1, [r6, #6]
   bcac4:	4630      	mov	r0, r6
   bcac6:	f7ff ffb3 	bl	bca30 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bcaca:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bcacc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bcace:	6860      	ldr	r0, [r4, #4]
   bcad0:	f7ff ff4c 	bl	bc96c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bcad4:	4628      	mov	r0, r5
   bcad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bcad8:	851c2a3f 	.word	0x851c2a3f

000bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   bcadc:	b570      	push	{r4, r5, r6, lr}
   bcade:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   bcae0:	6885      	ldr	r5, [r0, #8]
   bcae2:	f7ff ffe3 	bl	bcaac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bcae6:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   bcae8:	6823      	ldr	r3, [r4, #0]
   bcaea:	4620      	mov	r0, r4
   bcaec:	691b      	ldr	r3, [r3, #16]
}
   bcaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   bcaf2:	4718      	bx	r3

000bcaf4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bcaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcaf8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bcafa:	3004      	adds	r0, #4
   bcafc:	4690      	mov	r8, r2
   bcafe:	460d      	mov	r5, r1
   bcb00:	461f      	mov	r7, r3
   bcb02:	f7f9 fbfb 	bl	b62fc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bcb06:	68e2      	ldr	r2, [r4, #12]
   bcb08:	f1c8 0301 	rsb	r3, r8, #1
   bcb0c:	4413      	add	r3, r2
   bcb0e:	42ab      	cmp	r3, r5
   bcb10:	d319      	bcc.n	bcb46 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   bcb12:	4638      	mov	r0, r7
   bcb14:	f005 fdf9 	bl	c270a <strlen>
   bcb18:	4540      	cmp	r0, r8
   bcb1a:	d214      	bcs.n	bcb46 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   bcb1c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bcb1e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bcb20:	4629      	mov	r1, r5
   bcb22:	4638      	mov	r0, r7
   bcb24:	f005 fdc1 	bl	c26aa <strcmp>
   bcb28:	b158      	cbz	r0, bcb42 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   bcb2a:	4642      	mov	r2, r8
   bcb2c:	2100      	movs	r1, #0
   bcb2e:	4628      	mov	r0, r5
   bcb30:	f005 fd20 	bl	c2574 <memset>
                strcpy(p, value);
   bcb34:	4639      	mov	r1, r7
   bcb36:	4628      	mov	r0, r5
   bcb38:	f005 fdc1 	bl	c26be <strcpy>
                updateHash();
   bcb3c:	4620      	mov	r0, r4
   bcb3e:	f7ff ffcd 	bl	bcadc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   bcb42:	2501      	movs	r5, #1
   bcb44:	e000      	b.n	bcb48 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   bcb46:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bcb48:	6860      	ldr	r0, [r4, #4]
   bcb4a:	f7ff ff0f 	bl	bc96c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bcb4e:	4628      	mov	r0, r5
   bcb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcb54 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bcb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bcb56:	4604      	mov	r4, r0
   bcb58:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   bcb5a:	f7ff ffa7 	bl	bcaac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   bcb5e:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   bcb62:	4606      	mov	r6, r0
    if (logData) {
   bcb64:	b193      	cbz	r3, bcb8c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   bcb66:	4f29      	ldr	r7, [pc, #164]	; (bcc0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcb68:	4929      	ldr	r1, [pc, #164]	; (bcc10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   bcb6a:	462a      	mov	r2, r5
   bcb6c:	4638      	mov	r0, r7
   bcb6e:	f7f7 fae6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   bcb72:	68a1      	ldr	r1, [r4, #8]
   bcb74:	462a      	mov	r2, r5
   bcb76:	4638      	mov	r0, r7
   bcb78:	f7ff fefa 	bl	bc970 <_ZNK5spark6Logger4dumpEPKvj>
   bcb7c:	2300      	movs	r3, #0
   bcb7e:	9300      	str	r3, [sp, #0]
   bcb80:	4a24      	ldr	r2, [pc, #144]	; (bcc14 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   bcb82:	6839      	ldr	r1, [r7, #0]
   bcb84:	2301      	movs	r3, #1
   bcb86:	201e      	movs	r0, #30
   bcb88:	f000 fb30 	bl	bd1ec <log_write>
    if (dataSize >= 12 && 
   bcb8c:	2d0b      	cmp	r5, #11
   bcb8e:	d923      	bls.n	bcbd8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   bcb90:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bcb92:	6922      	ldr	r2, [r4, #16]
   bcb94:	6819      	ldr	r1, [r3, #0]
   bcb96:	4291      	cmp	r1, r2
   bcb98:	d11f      	bne.n	bcbda <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   bcb9a:	8899      	ldrh	r1, [r3, #4]
   bcb9c:	8aa2      	ldrh	r2, [r4, #20]
   bcb9e:	4291      	cmp	r1, r2
   bcba0:	d11b      	bne.n	bcbda <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   bcba2:	88d9      	ldrh	r1, [r3, #6]
   bcba4:	b2aa      	uxth	r2, r5
   bcba6:	4291      	cmp	r1, r2
   bcba8:	d817      	bhi.n	bcbda <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bcbaa:	689a      	ldr	r2, [r3, #8]
   bcbac:	42b2      	cmp	r2, r6
   bcbae:	d114      	bne.n	bcbda <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   bcbb0:	68e2      	ldr	r2, [r4, #12]
   bcbb2:	42aa      	cmp	r2, r5
   bcbb4:	d905      	bls.n	bcbc2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   bcbb6:	2100      	movs	r1, #0
   bcbb8:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bcbba:	68e2      	ldr	r2, [r4, #12]
   bcbbc:	3501      	adds	r5, #1
   bcbbe:	42aa      	cmp	r2, r5
   bcbc0:	d8fa      	bhi.n	bcbb8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bcbc2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bcbc6:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bcbc8:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bcbca:	68a5      	ldr	r5, [r4, #8]
   bcbcc:	f7ff ff6e 	bl	bcaac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bcbd0:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bcbd2:	2001      	movs	r0, #1
}
   bcbd4:	b003      	add	sp, #12
   bcbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bcbd8:	b19d      	cbz	r5, bcc02 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   bcbda:	68a1      	ldr	r1, [r4, #8]
   bcbdc:	680a      	ldr	r2, [r1, #0]
   bcbde:	b192      	cbz	r2, bcc06 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bcbe0:	6888      	ldr	r0, [r1, #8]
   bcbe2:	888b      	ldrh	r3, [r1, #4]
   bcbe4:	9001      	str	r0, [sp, #4]
   bcbe6:	88c9      	ldrh	r1, [r1, #6]
   bcbe8:	4808      	ldr	r0, [pc, #32]	; (bcc0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcbea:	9100      	str	r1, [sp, #0]
   bcbec:	490a      	ldr	r1, [pc, #40]	; (bcc18 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   bcbee:	f7fa ff7b 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bcbf2:	e9cd 5600 	strd	r5, r6, [sp]
   bcbf6:	8aa3      	ldrh	r3, [r4, #20]
   bcbf8:	6922      	ldr	r2, [r4, #16]
   bcbfa:	4908      	ldr	r1, [pc, #32]	; (bcc1c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   bcbfc:	4803      	ldr	r0, [pc, #12]	; (bcc0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bcbfe:	f7fa ff73 	bl	b7ae8 <_ZNK5spark6Logger5traceEPKcz>
   bcc02:	2000      	movs	r0, #0
   bcc04:	e7e6      	b.n	bcbd4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bcc06:	4610      	mov	r0, r2
   bcc08:	e7e4      	b.n	bcbd4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bcc0a:	bf00      	nop
   bcc0c:	2003e650 	.word	0x2003e650
   bcc10:	000c662c 	.word	0x000c662c
   bcc14:	000c6837 	.word	0x000c6837
   bcc18:	000c6644 	.word	0x000c6644
   bcc1c:	000c6675 	.word	0x000c6675

000bcc20 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bcc20:	b538      	push	{r3, r4, r5, lr}
   bcc22:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bcc24:	68c2      	ldr	r2, [r0, #12]
   bcc26:	6880      	ldr	r0, [r0, #8]
   bcc28:	2100      	movs	r1, #0
   bcc2a:	f005 fca3 	bl	c2574 <memset>
    savedDataHeader->magic = savedDataMagic;
   bcc2e:	68a3      	ldr	r3, [r4, #8]
   bcc30:	6922      	ldr	r2, [r4, #16]
   bcc32:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bcc34:	68a3      	ldr	r3, [r4, #8]
   bcc36:	8aa2      	ldrh	r2, [r4, #20]
   bcc38:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bcc3a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bcc3e:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bcc40:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bcc42:	68a5      	ldr	r5, [r4, #8]
   bcc44:	f7ff ff32 	bl	bcaac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bcc48:	60a8      	str	r0, [r5, #8]
}
   bcc4a:	bd38      	pop	{r3, r4, r5, pc}

000bcc4c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bcc4c:	b508      	push	{r3, lr}
   bcc4e:	4b02      	ldr	r3, [pc, #8]	; (bcc58 <cellular_signal+0xc>)
   bcc50:	681b      	ldr	r3, [r3, #0]
   bcc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcc54:	9301      	str	r3, [sp, #4]
   bcc56:	bd08      	pop	{r3, pc}
   bcc58:	00030274 	.word	0x00030274

000bcc5c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bcc5c:	b508      	push	{r3, lr}
   bcc5e:	4b02      	ldr	r3, [pc, #8]	; (bcc68 <os_thread_create+0xc>)
   bcc60:	681b      	ldr	r3, [r3, #0]
   bcc62:	685b      	ldr	r3, [r3, #4]
   bcc64:	9301      	str	r3, [sp, #4]
   bcc66:	bd08      	pop	{r3, pc}
   bcc68:	00030248 	.word	0x00030248

000bcc6c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bcc6c:	b508      	push	{r3, lr}
   bcc6e:	4b02      	ldr	r3, [pc, #8]	; (bcc78 <os_thread_is_current+0xc>)
   bcc70:	681b      	ldr	r3, [r3, #0]
   bcc72:	689b      	ldr	r3, [r3, #8]
   bcc74:	9301      	str	r3, [sp, #4]
   bcc76:	bd08      	pop	{r3, pc}
   bcc78:	00030248 	.word	0x00030248

000bcc7c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bcc7c:	b508      	push	{r3, lr}
   bcc7e:	4b02      	ldr	r3, [pc, #8]	; (bcc88 <os_thread_join+0xc>)
   bcc80:	681b      	ldr	r3, [r3, #0]
   bcc82:	691b      	ldr	r3, [r3, #16]
   bcc84:	9301      	str	r3, [sp, #4]
   bcc86:	bd08      	pop	{r3, pc}
   bcc88:	00030248 	.word	0x00030248

000bcc8c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bcc8c:	b508      	push	{r3, lr}
   bcc8e:	4b02      	ldr	r3, [pc, #8]	; (bcc98 <os_thread_cleanup+0xc>)
   bcc90:	681b      	ldr	r3, [r3, #0]
   bcc92:	695b      	ldr	r3, [r3, #20]
   bcc94:	9301      	str	r3, [sp, #4]
   bcc96:	bd08      	pop	{r3, pc}
   bcc98:	00030248 	.word	0x00030248

000bcc9c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bcc9c:	b508      	push	{r3, lr}
   bcc9e:	4b02      	ldr	r3, [pc, #8]	; (bcca8 <os_mutex_create+0xc>)
   bcca0:	681b      	ldr	r3, [r3, #0]
   bcca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcca4:	9301      	str	r3, [sp, #4]
   bcca6:	bd08      	pop	{r3, pc}
   bcca8:	00030248 	.word	0x00030248

000bccac <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bccac:	b508      	push	{r3, lr}
   bccae:	4b02      	ldr	r3, [pc, #8]	; (bccb8 <os_mutex_lock+0xc>)
   bccb0:	681b      	ldr	r3, [r3, #0]
   bccb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bccb4:	9301      	str	r3, [sp, #4]
   bccb6:	bd08      	pop	{r3, pc}
   bccb8:	00030248 	.word	0x00030248

000bccbc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bccbc:	b508      	push	{r3, lr}
   bccbe:	4b02      	ldr	r3, [pc, #8]	; (bccc8 <os_mutex_unlock+0xc>)
   bccc0:	681b      	ldr	r3, [r3, #0]
   bccc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bccc4:	9301      	str	r3, [sp, #4]
   bccc6:	bd08      	pop	{r3, pc}
   bccc8:	00030248 	.word	0x00030248

000bcccc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bcccc:	b508      	push	{r3, lr}
   bccce:	4b02      	ldr	r3, [pc, #8]	; (bccd8 <os_mutex_recursive_create+0xc>)
   bccd0:	681b      	ldr	r3, [r3, #0]
   bccd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bccd4:	9301      	str	r3, [sp, #4]
   bccd6:	bd08      	pop	{r3, pc}
   bccd8:	00030248 	.word	0x00030248

000bccdc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bccdc:	b508      	push	{r3, lr}
   bccde:	4b02      	ldr	r3, [pc, #8]	; (bcce8 <os_mutex_recursive_destroy+0xc>)
   bcce0:	681b      	ldr	r3, [r3, #0]
   bcce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcce4:	9301      	str	r3, [sp, #4]
   bcce6:	bd08      	pop	{r3, pc}
   bcce8:	00030248 	.word	0x00030248

000bccec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bccec:	b508      	push	{r3, lr}
   bccee:	4b02      	ldr	r3, [pc, #8]	; (bccf8 <os_mutex_recursive_lock+0xc>)
   bccf0:	681b      	ldr	r3, [r3, #0]
   bccf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bccf4:	9301      	str	r3, [sp, #4]
   bccf6:	bd08      	pop	{r3, pc}
   bccf8:	00030248 	.word	0x00030248

000bccfc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bccfc:	b508      	push	{r3, lr}
   bccfe:	4b02      	ldr	r3, [pc, #8]	; (bcd08 <os_mutex_recursive_unlock+0xc>)
   bcd00:	681b      	ldr	r3, [r3, #0]
   bcd02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcd04:	9301      	str	r3, [sp, #4]
   bcd06:	bd08      	pop	{r3, pc}
   bcd08:	00030248 	.word	0x00030248

000bcd0c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bcd0c:	b508      	push	{r3, lr}
   bcd0e:	4b02      	ldr	r3, [pc, #8]	; (bcd18 <os_thread_exit+0xc>)
   bcd10:	681b      	ldr	r3, [r3, #0]
   bcd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bcd14:	9301      	str	r3, [sp, #4]
   bcd16:	bd08      	pop	{r3, pc}
   bcd18:	00030248 	.word	0x00030248

000bcd1c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bcd1c:	b508      	push	{r3, lr}
   bcd1e:	4b02      	ldr	r3, [pc, #8]	; (bcd28 <HAL_Core_Runtime_Info+0xc>)
   bcd20:	681b      	ldr	r3, [r3, #0]
   bcd22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcd24:	9301      	str	r3, [sp, #4]
   bcd26:	bd08      	pop	{r3, pc}
   bcd28:	00030234 	.word	0x00030234

000bcd2c <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bcd2c:	b508      	push	{r3, lr}
   bcd2e:	4b02      	ldr	r3, [pc, #8]	; (bcd38 <HAL_Feature_Set+0xc>)
   bcd30:	681b      	ldr	r3, [r3, #0]
   bcd32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcd34:	9301      	str	r3, [sp, #4]
   bcd36:	bd08      	pop	{r3, pc}
   bcd38:	00030234 	.word	0x00030234

000bcd3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bcd3c:	b508      	push	{r3, lr}
   bcd3e:	4b02      	ldr	r3, [pc, #8]	; (bcd48 <HAL_RNG_GetRandomNumber+0xc>)
   bcd40:	681b      	ldr	r3, [r3, #0]
   bcd42:	685b      	ldr	r3, [r3, #4]
   bcd44:	9301      	str	r3, [sp, #4]
   bcd46:	bd08      	pop	{r3, pc}
   bcd48:	00030218 	.word	0x00030218

000bcd4c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bcd4c:	b508      	push	{r3, lr}
   bcd4e:	4b02      	ldr	r3, [pc, #8]	; (bcd58 <HAL_Delay_Milliseconds+0xc>)
   bcd50:	681b      	ldr	r3, [r3, #0]
   bcd52:	689b      	ldr	r3, [r3, #8]
   bcd54:	9301      	str	r3, [sp, #4]
   bcd56:	bd08      	pop	{r3, pc}
   bcd58:	00030218 	.word	0x00030218

000bcd5c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bcd5c:	b508      	push	{r3, lr}
   bcd5e:	4b02      	ldr	r3, [pc, #8]	; (bcd68 <HAL_Delay_Microseconds+0xc>)
   bcd60:	681b      	ldr	r3, [r3, #0]
   bcd62:	68db      	ldr	r3, [r3, #12]
   bcd64:	9301      	str	r3, [sp, #4]
   bcd66:	bd08      	pop	{r3, pc}
   bcd68:	00030218 	.word	0x00030218

000bcd6c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bcd6c:	b508      	push	{r3, lr}
   bcd6e:	4b02      	ldr	r3, [pc, #8]	; (bcd78 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bcd70:	681b      	ldr	r3, [r3, #0]
   bcd72:	695b      	ldr	r3, [r3, #20]
   bcd74:	9301      	str	r3, [sp, #4]
   bcd76:	bd08      	pop	{r3, pc}
   bcd78:	00030218 	.word	0x00030218

000bcd7c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bcd7c:	b508      	push	{r3, lr}
   bcd7e:	4b02      	ldr	r3, [pc, #8]	; (bcd88 <hal_rtc_time_is_valid+0xc>)
   bcd80:	681b      	ldr	r3, [r3, #0]
   bcd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcd84:	9301      	str	r3, [sp, #4]
   bcd86:	bd08      	pop	{r3, pc}
   bcd88:	00030218 	.word	0x00030218

000bcd8c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bcd8c:	b508      	push	{r3, lr}
   bcd8e:	4b02      	ldr	r3, [pc, #8]	; (bcd98 <hal_timer_millis+0xc>)
   bcd90:	681b      	ldr	r3, [r3, #0]
   bcd92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bcd94:	9301      	str	r3, [sp, #4]
   bcd96:	bd08      	pop	{r3, pc}
   bcd98:	00030218 	.word	0x00030218

000bcd9c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bcd9c:	b508      	push	{r3, lr}
   bcd9e:	4b02      	ldr	r3, [pc, #8]	; (bcda8 <hal_rtc_get_time+0xc>)
   bcda0:	681b      	ldr	r3, [r3, #0]
   bcda2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcda4:	9301      	str	r3, [sp, #4]
   bcda6:	bd08      	pop	{r3, pc}
   bcda8:	00030218 	.word	0x00030218

000bcdac <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bcdac:	b508      	push	{r3, lr}
   bcdae:	4b02      	ldr	r3, [pc, #8]	; (bcdb8 <hal_rtc_set_time+0xc>)
   bcdb0:	681b      	ldr	r3, [r3, #0]
   bcdb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bcdb4:	9301      	str	r3, [sp, #4]
   bcdb6:	bd08      	pop	{r3, pc}
   bcdb8:	00030218 	.word	0x00030218

000bcdbc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bcdbc:	b508      	push	{r3, lr}
   bcdbe:	4b02      	ldr	r3, [pc, #8]	; (bcdc8 <HAL_Validate_Pin_Function+0xc>)
   bcdc0:	681b      	ldr	r3, [r3, #0]
   bcdc2:	685b      	ldr	r3, [r3, #4]
   bcdc4:	9301      	str	r3, [sp, #4]
   bcdc6:	bd08      	pop	{r3, pc}
   bcdc8:	0003022c 	.word	0x0003022c

000bcdcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bcdcc:	b508      	push	{r3, lr}
   bcdce:	4b02      	ldr	r3, [pc, #8]	; (bcdd8 <HAL_Pin_Mode+0xc>)
   bcdd0:	681b      	ldr	r3, [r3, #0]
   bcdd2:	689b      	ldr	r3, [r3, #8]
   bcdd4:	9301      	str	r3, [sp, #4]
   bcdd6:	bd08      	pop	{r3, pc}
   bcdd8:	0003022c 	.word	0x0003022c

000bcddc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bcddc:	b508      	push	{r3, lr}
   bcdde:	4b02      	ldr	r3, [pc, #8]	; (bcde8 <HAL_Get_Pin_Mode+0xc>)
   bcde0:	681b      	ldr	r3, [r3, #0]
   bcde2:	68db      	ldr	r3, [r3, #12]
   bcde4:	9301      	str	r3, [sp, #4]
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	0003022c 	.word	0x0003022c

000bcdec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bcdec:	b508      	push	{r3, lr}
   bcdee:	4b02      	ldr	r3, [pc, #8]	; (bcdf8 <HAL_GPIO_Write+0xc>)
   bcdf0:	681b      	ldr	r3, [r3, #0]
   bcdf2:	691b      	ldr	r3, [r3, #16]
   bcdf4:	9301      	str	r3, [sp, #4]
   bcdf6:	bd08      	pop	{r3, pc}
   bcdf8:	0003022c 	.word	0x0003022c

000bcdfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bcdfc:	b508      	push	{r3, lr}
   bcdfe:	4b02      	ldr	r3, [pc, #8]	; (bce08 <HAL_GPIO_Read+0xc>)
   bce00:	681b      	ldr	r3, [r3, #0]
   bce02:	695b      	ldr	r3, [r3, #20]
   bce04:	9301      	str	r3, [sp, #4]
   bce06:	bd08      	pop	{r3, pc}
   bce08:	0003022c 	.word	0x0003022c

000bce0c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bce0c:	b508      	push	{r3, lr}
   bce0e:	4b02      	ldr	r3, [pc, #8]	; (bce18 <HAL_Interrupts_Attach+0xc>)
   bce10:	681b      	ldr	r3, [r3, #0]
   bce12:	699b      	ldr	r3, [r3, #24]
   bce14:	9301      	str	r3, [sp, #4]
   bce16:	bd08      	pop	{r3, pc}
   bce18:	0003022c 	.word	0x0003022c

000bce1c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bce1c:	b508      	push	{r3, lr}
   bce1e:	4b02      	ldr	r3, [pc, #8]	; (bce28 <HAL_Interrupts_Detach+0xc>)
   bce20:	681b      	ldr	r3, [r3, #0]
   bce22:	69db      	ldr	r3, [r3, #28]
   bce24:	9301      	str	r3, [sp, #4]
   bce26:	bd08      	pop	{r3, pc}
   bce28:	0003022c 	.word	0x0003022c

000bce2c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bce2c:	b508      	push	{r3, lr}
   bce2e:	4b02      	ldr	r3, [pc, #8]	; (bce38 <hal_adc_read+0xc>)
   bce30:	681b      	ldr	r3, [r3, #0]
   bce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bce34:	9301      	str	r3, [sp, #4]
   bce36:	bd08      	pop	{r3, pc}
   bce38:	0003022c 	.word	0x0003022c

000bce3c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bce3c:	b508      	push	{r3, lr}
   bce3e:	4b02      	ldr	r3, [pc, #8]	; (bce48 <hal_i2c_begin+0xc>)
   bce40:	681b      	ldr	r3, [r3, #0]
   bce42:	68db      	ldr	r3, [r3, #12]
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	bd08      	pop	{r3, pc}
   bce48:	00030228 	.word	0x00030228

000bce4c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bce4c:	b508      	push	{r3, lr}
   bce4e:	4b02      	ldr	r3, [pc, #8]	; (bce58 <hal_i2c_begin_transmission+0xc>)
   bce50:	681b      	ldr	r3, [r3, #0]
   bce52:	699b      	ldr	r3, [r3, #24]
   bce54:	9301      	str	r3, [sp, #4]
   bce56:	bd08      	pop	{r3, pc}
   bce58:	00030228 	.word	0x00030228

000bce5c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bce5c:	b508      	push	{r3, lr}
   bce5e:	4b02      	ldr	r3, [pc, #8]	; (bce68 <hal_i2c_end_transmission+0xc>)
   bce60:	681b      	ldr	r3, [r3, #0]
   bce62:	69db      	ldr	r3, [r3, #28]
   bce64:	9301      	str	r3, [sp, #4]
   bce66:	bd08      	pop	{r3, pc}
   bce68:	00030228 	.word	0x00030228

000bce6c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bce6c:	b508      	push	{r3, lr}
   bce6e:	4b02      	ldr	r3, [pc, #8]	; (bce78 <hal_i2c_write+0xc>)
   bce70:	681b      	ldr	r3, [r3, #0]
   bce72:	6a1b      	ldr	r3, [r3, #32]
   bce74:	9301      	str	r3, [sp, #4]
   bce76:	bd08      	pop	{r3, pc}
   bce78:	00030228 	.word	0x00030228

000bce7c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bce7c:	b508      	push	{r3, lr}
   bce7e:	4b02      	ldr	r3, [pc, #8]	; (bce88 <hal_i2c_available+0xc>)
   bce80:	681b      	ldr	r3, [r3, #0]
   bce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bce84:	9301      	str	r3, [sp, #4]
   bce86:	bd08      	pop	{r3, pc}
   bce88:	00030228 	.word	0x00030228

000bce8c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bce8c:	b508      	push	{r3, lr}
   bce8e:	4b02      	ldr	r3, [pc, #8]	; (bce98 <hal_i2c_read+0xc>)
   bce90:	681b      	ldr	r3, [r3, #0]
   bce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bce94:	9301      	str	r3, [sp, #4]
   bce96:	bd08      	pop	{r3, pc}
   bce98:	00030228 	.word	0x00030228

000bce9c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bce9c:	b508      	push	{r3, lr}
   bce9e:	4b02      	ldr	r3, [pc, #8]	; (bcea8 <hal_i2c_peek+0xc>)
   bcea0:	681b      	ldr	r3, [r3, #0]
   bcea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcea4:	9301      	str	r3, [sp, #4]
   bcea6:	bd08      	pop	{r3, pc}
   bcea8:	00030228 	.word	0x00030228

000bceac <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bceac:	b508      	push	{r3, lr}
   bceae:	4b02      	ldr	r3, [pc, #8]	; (bceb8 <hal_i2c_flush+0xc>)
   bceb0:	681b      	ldr	r3, [r3, #0]
   bceb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bceb4:	9301      	str	r3, [sp, #4]
   bceb6:	bd08      	pop	{r3, pc}
   bceb8:	00030228 	.word	0x00030228

000bcebc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bcebc:	b508      	push	{r3, lr}
   bcebe:	4b02      	ldr	r3, [pc, #8]	; (bcec8 <hal_i2c_is_enabled+0xc>)
   bcec0:	681b      	ldr	r3, [r3, #0]
   bcec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcec4:	9301      	str	r3, [sp, #4]
   bcec6:	bd08      	pop	{r3, pc}
   bcec8:	00030228 	.word	0x00030228

000bcecc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bcecc:	b508      	push	{r3, lr}
   bcece:	4b02      	ldr	r3, [pc, #8]	; (bced8 <hal_i2c_init+0xc>)
   bced0:	681b      	ldr	r3, [r3, #0]
   bced2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bced4:	9301      	str	r3, [sp, #4]
   bced6:	bd08      	pop	{r3, pc}
   bced8:	00030228 	.word	0x00030228

000bcedc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bcedc:	b508      	push	{r3, lr}
   bcede:	4b02      	ldr	r3, [pc, #8]	; (bcee8 <hal_i2c_lock+0xc>)
   bcee0:	681b      	ldr	r3, [r3, #0]
   bcee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcee4:	9301      	str	r3, [sp, #4]
   bcee6:	bd08      	pop	{r3, pc}
   bcee8:	00030228 	.word	0x00030228

000bceec <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bceec:	b508      	push	{r3, lr}
   bceee:	4b02      	ldr	r3, [pc, #8]	; (bcef8 <hal_i2c_unlock+0xc>)
   bcef0:	681b      	ldr	r3, [r3, #0]
   bcef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcef4:	9301      	str	r3, [sp, #4]
   bcef6:	bd08      	pop	{r3, pc}
   bcef8:	00030228 	.word	0x00030228

000bcefc <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bcefc:	b508      	push	{r3, lr}
   bcefe:	4b02      	ldr	r3, [pc, #8]	; (bcf08 <hal_i2c_request_ex+0xc>)
   bcf00:	681b      	ldr	r3, [r3, #0]
   bcf02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcf04:	9301      	str	r3, [sp, #4]
   bcf06:	bd08      	pop	{r3, pc}
   bcf08:	00030228 	.word	0x00030228

000bcf0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bcf0c:	b508      	push	{r3, lr}
   bcf0e:	4b02      	ldr	r3, [pc, #8]	; (bcf18 <inet_inet_ntop+0xc>)
   bcf10:	681b      	ldr	r3, [r3, #0]
   bcf12:	695b      	ldr	r3, [r3, #20]
   bcf14:	9301      	str	r3, [sp, #4]
   bcf16:	bd08      	pop	{r3, pc}
   bcf18:	00030264 	.word	0x00030264

000bcf1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bcf1c:	b508      	push	{r3, lr}
   bcf1e:	4b02      	ldr	r3, [pc, #8]	; (bcf28 <netdb_freeaddrinfo+0xc>)
   bcf20:	681b      	ldr	r3, [r3, #0]
   bcf22:	689b      	ldr	r3, [r3, #8]
   bcf24:	9301      	str	r3, [sp, #4]
   bcf26:	bd08      	pop	{r3, pc}
   bcf28:	00030268 	.word	0x00030268

000bcf2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bcf2c:	b508      	push	{r3, lr}
   bcf2e:	4b02      	ldr	r3, [pc, #8]	; (bcf38 <netdb_getaddrinfo+0xc>)
   bcf30:	681b      	ldr	r3, [r3, #0]
   bcf32:	68db      	ldr	r3, [r3, #12]
   bcf34:	9301      	str	r3, [sp, #4]
   bcf36:	bd08      	pop	{r3, pc}
   bcf38:	00030268 	.word	0x00030268

000bcf3c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bcf3c:	b508      	push	{r3, lr}
   bcf3e:	4b02      	ldr	r3, [pc, #8]	; (bcf48 <hal_spi_begin+0xc>)
   bcf40:	681b      	ldr	r3, [r3, #0]
   bcf42:	681b      	ldr	r3, [r3, #0]
   bcf44:	9301      	str	r3, [sp, #4]
   bcf46:	bd08      	pop	{r3, pc}
   bcf48:	00030230 	.word	0x00030230

000bcf4c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bcf4c:	b508      	push	{r3, lr}
   bcf4e:	4b02      	ldr	r3, [pc, #8]	; (bcf58 <hal_spi_end+0xc>)
   bcf50:	681b      	ldr	r3, [r3, #0]
   bcf52:	685b      	ldr	r3, [r3, #4]
   bcf54:	9301      	str	r3, [sp, #4]
   bcf56:	bd08      	pop	{r3, pc}
   bcf58:	00030230 	.word	0x00030230

000bcf5c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bcf5c:	b508      	push	{r3, lr}
   bcf5e:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <hal_spi_transfer+0xc>)
   bcf60:	681b      	ldr	r3, [r3, #0]
   bcf62:	695b      	ldr	r3, [r3, #20]
   bcf64:	9301      	str	r3, [sp, #4]
   bcf66:	bd08      	pop	{r3, pc}
   bcf68:	00030230 	.word	0x00030230

000bcf6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bcf6c:	b508      	push	{r3, lr}
   bcf6e:	4b02      	ldr	r3, [pc, #8]	; (bcf78 <hal_spi_init+0xc>)
   bcf70:	681b      	ldr	r3, [r3, #0]
   bcf72:	69db      	ldr	r3, [r3, #28]
   bcf74:	9301      	str	r3, [sp, #4]
   bcf76:	bd08      	pop	{r3, pc}
   bcf78:	00030230 	.word	0x00030230

000bcf7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bcf7c:	b508      	push	{r3, lr}
   bcf7e:	4b02      	ldr	r3, [pc, #8]	; (bcf88 <hal_spi_is_enabled+0xc>)
   bcf80:	681b      	ldr	r3, [r3, #0]
   bcf82:	6a1b      	ldr	r3, [r3, #32]
   bcf84:	9301      	str	r3, [sp, #4]
   bcf86:	bd08      	pop	{r3, pc}
   bcf88:	00030230 	.word	0x00030230

000bcf8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bcf8c:	b508      	push	{r3, lr}
   bcf8e:	4b02      	ldr	r3, [pc, #8]	; (bcf98 <hal_spi_info+0xc>)
   bcf90:	681b      	ldr	r3, [r3, #0]
   bcf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcf94:	9301      	str	r3, [sp, #4]
   bcf96:	bd08      	pop	{r3, pc}
   bcf98:	00030230 	.word	0x00030230

000bcf9c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bcf9c:	b508      	push	{r3, lr}
   bcf9e:	4b02      	ldr	r3, [pc, #8]	; (bcfa8 <hal_spi_set_settings+0xc>)
   bcfa0:	681b      	ldr	r3, [r3, #0]
   bcfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcfa4:	9301      	str	r3, [sp, #4]
   bcfa6:	bd08      	pop	{r3, pc}
   bcfa8:	00030230 	.word	0x00030230

000bcfac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bcfac:	b508      	push	{r3, lr}
   bcfae:	4b02      	ldr	r3, [pc, #8]	; (bcfb8 <hal_spi_acquire+0xc>)
   bcfb0:	681b      	ldr	r3, [r3, #0]
   bcfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcfb4:	9301      	str	r3, [sp, #4]
   bcfb6:	bd08      	pop	{r3, pc}
   bcfb8:	00030230 	.word	0x00030230

000bcfbc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bcfbc:	b508      	push	{r3, lr}
   bcfbe:	4b02      	ldr	r3, [pc, #8]	; (bcfc8 <hal_spi_release+0xc>)
   bcfc0:	681b      	ldr	r3, [r3, #0]
   bcfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcfc4:	9301      	str	r3, [sp, #4]
   bcfc6:	bd08      	pop	{r3, pc}
   bcfc8:	00030230 	.word	0x00030230

000bcfcc <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bcfcc:	b508      	push	{r3, lr}
   bcfce:	4b02      	ldr	r3, [pc, #8]	; (bcfd8 <_open+0xc>)
   bcfd0:	681b      	ldr	r3, [r3, #0]
   bcfd2:	681b      	ldr	r3, [r3, #0]
   bcfd4:	9301      	str	r3, [sp, #4]
   bcfd6:	bd08      	pop	{r3, pc}
   bcfd8:	00030284 	.word	0x00030284

000bcfdc <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bcfdc:	b508      	push	{r3, lr}
   bcfde:	4b02      	ldr	r3, [pc, #8]	; (bcfe8 <_write+0xc>)
   bcfe0:	681b      	ldr	r3, [r3, #0]
   bcfe2:	685b      	ldr	r3, [r3, #4]
   bcfe4:	9301      	str	r3, [sp, #4]
   bcfe6:	bd08      	pop	{r3, pc}
   bcfe8:	00030284 	.word	0x00030284

000bcfec <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcfec:	b508      	push	{r3, lr}
   bcfee:	4b02      	ldr	r3, [pc, #8]	; (bcff8 <_read+0xc>)
   bcff0:	681b      	ldr	r3, [r3, #0]
   bcff2:	689b      	ldr	r3, [r3, #8]
   bcff4:	9301      	str	r3, [sp, #4]
   bcff6:	bd08      	pop	{r3, pc}
   bcff8:	00030284 	.word	0x00030284

000bcffc <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcffc:	b508      	push	{r3, lr}
   bcffe:	4b02      	ldr	r3, [pc, #8]	; (bd008 <_close+0xc>)
   bd000:	681b      	ldr	r3, [r3, #0]
   bd002:	68db      	ldr	r3, [r3, #12]
   bd004:	9301      	str	r3, [sp, #4]
   bd006:	bd08      	pop	{r3, pc}
   bd008:	00030284 	.word	0x00030284

000bd00c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bd00c:	b508      	push	{r3, lr}
   bd00e:	4b02      	ldr	r3, [pc, #8]	; (bd018 <_fstat+0xc>)
   bd010:	681b      	ldr	r3, [r3, #0]
   bd012:	695b      	ldr	r3, [r3, #20]
   bd014:	9301      	str	r3, [sp, #4]
   bd016:	bd08      	pop	{r3, pc}
   bd018:	00030284 	.word	0x00030284

000bd01c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bd01c:	b508      	push	{r3, lr}
   bd01e:	4b02      	ldr	r3, [pc, #8]	; (bd028 <_lseek+0xc>)
   bd020:	681b      	ldr	r3, [r3, #0]
   bd022:	6a1b      	ldr	r3, [r3, #32]
   bd024:	9301      	str	r3, [sp, #4]
   bd026:	bd08      	pop	{r3, pc}
   bd028:	00030284 	.word	0x00030284

000bd02c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bd02c:	b508      	push	{r3, lr}
   bd02e:	4b02      	ldr	r3, [pc, #8]	; (bd038 <stat+0xc>)
   bd030:	681b      	ldr	r3, [r3, #0]
   bd032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd034:	9301      	str	r3, [sp, #4]
   bd036:	bd08      	pop	{r3, pc}
   bd038:	00030284 	.word	0x00030284

000bd03c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bd03c:	b508      	push	{r3, lr}
   bd03e:	4b02      	ldr	r3, [pc, #8]	; (bd048 <mkdir+0xc>)
   bd040:	681b      	ldr	r3, [r3, #0]
   bd042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd044:	9301      	str	r3, [sp, #4]
   bd046:	bd08      	pop	{r3, pc}
   bd048:	00030284 	.word	0x00030284

000bd04c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bd04c:	b508      	push	{r3, lr}
   bd04e:	4b02      	ldr	r3, [pc, #8]	; (bd058 <_unlink+0xc>)
   bd050:	681b      	ldr	r3, [r3, #0]
   bd052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd054:	9301      	str	r3, [sp, #4]
   bd056:	bd08      	pop	{r3, pc}
   bd058:	00030284 	.word	0x00030284

000bd05c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bd05c:	b508      	push	{r3, lr}
   bd05e:	4b02      	ldr	r3, [pc, #8]	; (bd068 <opendir+0xc>)
   bd060:	681b      	ldr	r3, [r3, #0]
   bd062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd064:	9301      	str	r3, [sp, #4]
   bd066:	bd08      	pop	{r3, pc}
   bd068:	00030284 	.word	0x00030284

000bd06c <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bd06c:	b508      	push	{r3, lr}
   bd06e:	4b02      	ldr	r3, [pc, #8]	; (bd078 <readdir+0xc>)
   bd070:	681b      	ldr	r3, [r3, #0]
   bd072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd074:	9301      	str	r3, [sp, #4]
   bd076:	bd08      	pop	{r3, pc}
   bd078:	00030284 	.word	0x00030284

000bd07c <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bd07c:	b508      	push	{r3, lr}
   bd07e:	4b02      	ldr	r3, [pc, #8]	; (bd088 <closedir+0xc>)
   bd080:	681b      	ldr	r3, [r3, #0]
   bd082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd084:	9301      	str	r3, [sp, #4]
   bd086:	bd08      	pop	{r3, pc}
   bd088:	00030284 	.word	0x00030284

000bd08c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd08c:	b508      	push	{r3, lr}
   bd08e:	4b02      	ldr	r3, [pc, #8]	; (bd098 <hal_usart_end+0xc>)
   bd090:	681b      	ldr	r3, [r3, #0]
   bd092:	689b      	ldr	r3, [r3, #8]
   bd094:	9301      	str	r3, [sp, #4]
   bd096:	bd08      	pop	{r3, pc}
   bd098:	0003023c 	.word	0x0003023c

000bd09c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd09c:	b508      	push	{r3, lr}
   bd09e:	4b02      	ldr	r3, [pc, #8]	; (bd0a8 <hal_usart_write+0xc>)
   bd0a0:	681b      	ldr	r3, [r3, #0]
   bd0a2:	68db      	ldr	r3, [r3, #12]
   bd0a4:	9301      	str	r3, [sp, #4]
   bd0a6:	bd08      	pop	{r3, pc}
   bd0a8:	0003023c 	.word	0x0003023c

000bd0ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd0ac:	b508      	push	{r3, lr}
   bd0ae:	4b02      	ldr	r3, [pc, #8]	; (bd0b8 <hal_usart_available+0xc>)
   bd0b0:	681b      	ldr	r3, [r3, #0]
   bd0b2:	691b      	ldr	r3, [r3, #16]
   bd0b4:	9301      	str	r3, [sp, #4]
   bd0b6:	bd08      	pop	{r3, pc}
   bd0b8:	0003023c 	.word	0x0003023c

000bd0bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd0bc:	b508      	push	{r3, lr}
   bd0be:	4b02      	ldr	r3, [pc, #8]	; (bd0c8 <hal_usart_read+0xc>)
   bd0c0:	681b      	ldr	r3, [r3, #0]
   bd0c2:	695b      	ldr	r3, [r3, #20]
   bd0c4:	9301      	str	r3, [sp, #4]
   bd0c6:	bd08      	pop	{r3, pc}
   bd0c8:	0003023c 	.word	0x0003023c

000bd0cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd0cc:	b508      	push	{r3, lr}
   bd0ce:	4b02      	ldr	r3, [pc, #8]	; (bd0d8 <hal_usart_peek+0xc>)
   bd0d0:	681b      	ldr	r3, [r3, #0]
   bd0d2:	699b      	ldr	r3, [r3, #24]
   bd0d4:	9301      	str	r3, [sp, #4]
   bd0d6:	bd08      	pop	{r3, pc}
   bd0d8:	0003023c 	.word	0x0003023c

000bd0dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd0dc:	b508      	push	{r3, lr}
   bd0de:	4b02      	ldr	r3, [pc, #8]	; (bd0e8 <hal_usart_flush+0xc>)
   bd0e0:	681b      	ldr	r3, [r3, #0]
   bd0e2:	69db      	ldr	r3, [r3, #28]
   bd0e4:	9301      	str	r3, [sp, #4]
   bd0e6:	bd08      	pop	{r3, pc}
   bd0e8:	0003023c 	.word	0x0003023c

000bd0ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd0ec:	b508      	push	{r3, lr}
   bd0ee:	4b02      	ldr	r3, [pc, #8]	; (bd0f8 <hal_usart_is_enabled+0xc>)
   bd0f0:	681b      	ldr	r3, [r3, #0]
   bd0f2:	6a1b      	ldr	r3, [r3, #32]
   bd0f4:	9301      	str	r3, [sp, #4]
   bd0f6:	bd08      	pop	{r3, pc}
   bd0f8:	0003023c 	.word	0x0003023c

000bd0fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd0fc:	b508      	push	{r3, lr}
   bd0fe:	4b02      	ldr	r3, [pc, #8]	; (bd108 <hal_usart_available_data_for_write+0xc>)
   bd100:	681b      	ldr	r3, [r3, #0]
   bd102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd104:	9301      	str	r3, [sp, #4]
   bd106:	bd08      	pop	{r3, pc}
   bd108:	0003023c 	.word	0x0003023c

000bd10c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd10c:	b508      	push	{r3, lr}
   bd10e:	4b02      	ldr	r3, [pc, #8]	; (bd118 <hal_usart_begin_config+0xc>)
   bd110:	681b      	ldr	r3, [r3, #0]
   bd112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd114:	9301      	str	r3, [sp, #4]
   bd116:	bd08      	pop	{r3, pc}
   bd118:	0003023c 	.word	0x0003023c

000bd11c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd11c:	b508      	push	{r3, lr}
   bd11e:	4b02      	ldr	r3, [pc, #8]	; (bd128 <hal_usart_init_ex+0xc>)
   bd120:	681b      	ldr	r3, [r3, #0]
   bd122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd124:	9301      	str	r3, [sp, #4]
   bd126:	bd08      	pop	{r3, pc}
   bd128:	0003023c 	.word	0x0003023c

000bd12c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd12c:	b508      	push	{r3, lr}
   bd12e:	4b02      	ldr	r3, [pc, #8]	; (bd138 <HAL_USB_USART_Init+0xc>)
   bd130:	681b      	ldr	r3, [r3, #0]
   bd132:	681b      	ldr	r3, [r3, #0]
   bd134:	9301      	str	r3, [sp, #4]
   bd136:	bd08      	pop	{r3, pc}
   bd138:	0003024c 	.word	0x0003024c

000bd13c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd13c:	b508      	push	{r3, lr}
   bd13e:	4b02      	ldr	r3, [pc, #8]	; (bd148 <HAL_USB_USART_Begin+0xc>)
   bd140:	681b      	ldr	r3, [r3, #0]
   bd142:	685b      	ldr	r3, [r3, #4]
   bd144:	9301      	str	r3, [sp, #4]
   bd146:	bd08      	pop	{r3, pc}
   bd148:	0003024c 	.word	0x0003024c

000bd14c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd14c:	b508      	push	{r3, lr}
   bd14e:	4b02      	ldr	r3, [pc, #8]	; (bd158 <HAL_USB_USART_End+0xc>)
   bd150:	681b      	ldr	r3, [r3, #0]
   bd152:	689b      	ldr	r3, [r3, #8]
   bd154:	9301      	str	r3, [sp, #4]
   bd156:	bd08      	pop	{r3, pc}
   bd158:	0003024c 	.word	0x0003024c

000bd15c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd15c:	b508      	push	{r3, lr}
   bd15e:	4b02      	ldr	r3, [pc, #8]	; (bd168 <HAL_USB_USART_Available_Data+0xc>)
   bd160:	681b      	ldr	r3, [r3, #0]
   bd162:	691b      	ldr	r3, [r3, #16]
   bd164:	9301      	str	r3, [sp, #4]
   bd166:	bd08      	pop	{r3, pc}
   bd168:	0003024c 	.word	0x0003024c

000bd16c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd16c:	b508      	push	{r3, lr}
   bd16e:	4b02      	ldr	r3, [pc, #8]	; (bd178 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd170:	681b      	ldr	r3, [r3, #0]
   bd172:	695b      	ldr	r3, [r3, #20]
   bd174:	9301      	str	r3, [sp, #4]
   bd176:	bd08      	pop	{r3, pc}
   bd178:	0003024c 	.word	0x0003024c

000bd17c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd17c:	b508      	push	{r3, lr}
   bd17e:	4b02      	ldr	r3, [pc, #8]	; (bd188 <HAL_USB_USART_Receive_Data+0xc>)
   bd180:	681b      	ldr	r3, [r3, #0]
   bd182:	699b      	ldr	r3, [r3, #24]
   bd184:	9301      	str	r3, [sp, #4]
   bd186:	bd08      	pop	{r3, pc}
   bd188:	0003024c 	.word	0x0003024c

000bd18c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd18c:	b508      	push	{r3, lr}
   bd18e:	4b02      	ldr	r3, [pc, #8]	; (bd198 <HAL_USB_USART_Send_Data+0xc>)
   bd190:	681b      	ldr	r3, [r3, #0]
   bd192:	69db      	ldr	r3, [r3, #28]
   bd194:	9301      	str	r3, [sp, #4]
   bd196:	bd08      	pop	{r3, pc}
   bd198:	0003024c 	.word	0x0003024c

000bd19c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd19c:	b508      	push	{r3, lr}
   bd19e:	4b02      	ldr	r3, [pc, #8]	; (bd1a8 <HAL_USB_USART_Flush_Data+0xc>)
   bd1a0:	681b      	ldr	r3, [r3, #0]
   bd1a2:	6a1b      	ldr	r3, [r3, #32]
   bd1a4:	9301      	str	r3, [sp, #4]
   bd1a6:	bd08      	pop	{r3, pc}
   bd1a8:	0003024c 	.word	0x0003024c

000bd1ac <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bd1ac:	b508      	push	{r3, lr}
   bd1ae:	4b02      	ldr	r3, [pc, #8]	; (bd1b8 <HAL_USB_USART_Is_Connected+0xc>)
   bd1b0:	681b      	ldr	r3, [r3, #0]
   bd1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd1b4:	9301      	str	r3, [sp, #4]
   bd1b6:	bd08      	pop	{r3, pc}
   bd1b8:	0003024c 	.word	0x0003024c

000bd1bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd1bc:	b508      	push	{r3, lr}
   bd1be:	4b02      	ldr	r3, [pc, #8]	; (bd1c8 <panic_+0xc>)
   bd1c0:	681b      	ldr	r3, [r3, #0]
   bd1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd1c4:	9301      	str	r3, [sp, #4]
   bd1c6:	bd08      	pop	{r3, pc}
   bd1c8:	00030260 	.word	0x00030260

000bd1cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd1cc:	b508      	push	{r3, lr}
   bd1ce:	4b02      	ldr	r3, [pc, #8]	; (bd1d8 <log_message+0xc>)
   bd1d0:	681b      	ldr	r3, [r3, #0]
   bd1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd1d4:	9301      	str	r3, [sp, #4]
   bd1d6:	bd08      	pop	{r3, pc}
   bd1d8:	00030260 	.word	0x00030260

000bd1dc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bd1dc:	b508      	push	{r3, lr}
   bd1de:	4b02      	ldr	r3, [pc, #8]	; (bd1e8 <log_message_v+0xc>)
   bd1e0:	681b      	ldr	r3, [r3, #0]
   bd1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd1e4:	9301      	str	r3, [sp, #4]
   bd1e6:	bd08      	pop	{r3, pc}
   bd1e8:	00030260 	.word	0x00030260

000bd1ec <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   bd1ec:	b508      	push	{r3, lr}
   bd1ee:	4b02      	ldr	r3, [pc, #8]	; (bd1f8 <log_write+0xc>)
   bd1f0:	681b      	ldr	r3, [r3, #0]
   bd1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd1f4:	9301      	str	r3, [sp, #4]
   bd1f6:	bd08      	pop	{r3, pc}
   bd1f8:	00030260 	.word	0x00030260

000bd1fc <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   bd1fc:	b508      	push	{r3, lr}
   bd1fe:	4b02      	ldr	r3, [pc, #8]	; (bd208 <log_dump+0xc>)
   bd200:	681b      	ldr	r3, [r3, #0]
   bd202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd204:	9301      	str	r3, [sp, #4]
   bd206:	bd08      	pop	{r3, pc}
   bd208:	00030260 	.word	0x00030260

000bd20c <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd20c:	b508      	push	{r3, lr}
   bd20e:	4b02      	ldr	r3, [pc, #8]	; (bd218 <log_level_name+0xc>)
   bd210:	681b      	ldr	r3, [r3, #0]
   bd212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd214:	9301      	str	r3, [sp, #4]
   bd216:	bd08      	pop	{r3, pc}
   bd218:	00030260 	.word	0x00030260

000bd21c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd21c:	b508      	push	{r3, lr}
   bd21e:	4b02      	ldr	r3, [pc, #8]	; (bd228 <log_set_callbacks+0xc>)
   bd220:	681b      	ldr	r3, [r3, #0]
   bd222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd224:	9301      	str	r3, [sp, #4]
   bd226:	bd08      	pop	{r3, pc}
   bd228:	00030260 	.word	0x00030260

000bd22c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bd22c:	b508      	push	{r3, lr}
   bd22e:	4b03      	ldr	r3, [pc, #12]	; (bd23c <diag_get_source+0x10>)
   bd230:	681b      	ldr	r3, [r3, #0]
   bd232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd236:	9301      	str	r3, [sp, #4]
   bd238:	bd08      	pop	{r3, pc}
   bd23a:	0000      	.short	0x0000
   bd23c:	00030260 	.word	0x00030260

000bd240 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd240:	b508      	push	{r3, lr}
   bd242:	4b02      	ldr	r3, [pc, #8]	; (bd24c <system_mode+0xc>)
   bd244:	681b      	ldr	r3, [r3, #0]
   bd246:	681b      	ldr	r3, [r3, #0]
   bd248:	9301      	str	r3, [sp, #4]
   bd24a:	bd08      	pop	{r3, pc}
   bd24c:	00030220 	.word	0x00030220

000bd250 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd250:	b508      	push	{r3, lr}
   bd252:	4b02      	ldr	r3, [pc, #8]	; (bd25c <set_system_mode+0xc>)
   bd254:	681b      	ldr	r3, [r3, #0]
   bd256:	685b      	ldr	r3, [r3, #4]
   bd258:	9301      	str	r3, [sp, #4]
   bd25a:	bd08      	pop	{r3, pc}
   bd25c:	00030220 	.word	0x00030220

000bd260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd260:	b508      	push	{r3, lr}
   bd262:	4b02      	ldr	r3, [pc, #8]	; (bd26c <system_delay_ms+0xc>)
   bd264:	681b      	ldr	r3, [r3, #0]
   bd266:	695b      	ldr	r3, [r3, #20]
   bd268:	9301      	str	r3, [sp, #4]
   bd26a:	bd08      	pop	{r3, pc}
   bd26c:	00030220 	.word	0x00030220

000bd270 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bd270:	b508      	push	{r3, lr}
   bd272:	4b02      	ldr	r3, [pc, #8]	; (bd27c <system_subscribe_event+0xc>)
   bd274:	681b      	ldr	r3, [r3, #0]
   bd276:	6a1b      	ldr	r3, [r3, #32]
   bd278:	9301      	str	r3, [sp, #4]
   bd27a:	bd08      	pop	{r3, pc}
   bd27c:	00030220 	.word	0x00030220

000bd280 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bd280:	b508      	push	{r3, lr}
   bd282:	4b02      	ldr	r3, [pc, #8]	; (bd28c <system_thread_set_state+0xc>)
   bd284:	681b      	ldr	r3, [r3, #0]
   bd286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd288:	9301      	str	r3, [sp, #4]
   bd28a:	bd08      	pop	{r3, pc}
   bd28c:	00030220 	.word	0x00030220

000bd290 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd290:	b508      	push	{r3, lr}
   bd292:	4b02      	ldr	r3, [pc, #8]	; (bd29c <application_thread_current+0xc>)
   bd294:	681b      	ldr	r3, [r3, #0]
   bd296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd298:	9301      	str	r3, [sp, #4]
   bd29a:	bd08      	pop	{r3, pc}
   bd29c:	00030220 	.word	0x00030220

000bd2a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd2a0:	b508      	push	{r3, lr}
   bd2a2:	4b02      	ldr	r3, [pc, #8]	; (bd2ac <application_thread_invoke+0xc>)
   bd2a4:	681b      	ldr	r3, [r3, #0]
   bd2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd2a8:	9301      	str	r3, [sp, #4]
   bd2aa:	bd08      	pop	{r3, pc}
   bd2ac:	00030220 	.word	0x00030220

000bd2b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd2b0:	b508      	push	{r3, lr}
   bd2b2:	4b02      	ldr	r3, [pc, #8]	; (bd2bc <system_thread_get_state+0xc>)
   bd2b4:	681b      	ldr	r3, [r3, #0]
   bd2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd2b8:	9301      	str	r3, [sp, #4]
   bd2ba:	bd08      	pop	{r3, pc}
   bd2bc:	00030220 	.word	0x00030220

000bd2c0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bd2c0:	b508      	push	{r3, lr}
   bd2c2:	4b02      	ldr	r3, [pc, #8]	; (bd2cc <system_notify_time_changed+0xc>)
   bd2c4:	681b      	ldr	r3, [r3, #0]
   bd2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bd2c8:	9301      	str	r3, [sp, #4]
   bd2ca:	bd08      	pop	{r3, pc}
   bd2cc:	00030220 	.word	0x00030220

000bd2d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd2d0:	b508      	push	{r3, lr}
   bd2d2:	4b03      	ldr	r3, [pc, #12]	; (bd2e0 <system_ctrl_set_app_request_handler+0x10>)
   bd2d4:	681b      	ldr	r3, [r3, #0]
   bd2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd2da:	9301      	str	r3, [sp, #4]
   bd2dc:	bd08      	pop	{r3, pc}
   bd2de:	0000      	.short	0x0000
   bd2e0:	00030220 	.word	0x00030220

000bd2e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd2e4:	b508      	push	{r3, lr}
   bd2e6:	4b03      	ldr	r3, [pc, #12]	; (bd2f4 <system_ctrl_set_result+0x10>)
   bd2e8:	681b      	ldr	r3, [r3, #0]
   bd2ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd2ee:	9301      	str	r3, [sp, #4]
   bd2f0:	bd08      	pop	{r3, pc}
   bd2f2:	0000      	.short	0x0000
   bd2f4:	00030220 	.word	0x00030220

000bd2f8 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bd2f8:	b508      	push	{r3, lr}
   bd2fa:	4b03      	ldr	r3, [pc, #12]	; (bd308 <system_power_management_set_config+0x10>)
   bd2fc:	681b      	ldr	r3, [r3, #0]
   bd2fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd302:	9301      	str	r3, [sp, #4]
   bd304:	bd08      	pop	{r3, pc}
   bd306:	0000      	.short	0x0000
   bd308:	00030220 	.word	0x00030220

000bd30c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bd30c:	b508      	push	{r3, lr}
   bd30e:	4b03      	ldr	r3, [pc, #12]	; (bd31c <system_sleep_ext+0x10>)
   bd310:	681b      	ldr	r3, [r3, #0]
   bd312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bd316:	9301      	str	r3, [sp, #4]
   bd318:	bd08      	pop	{r3, pc}
   bd31a:	0000      	.short	0x0000
   bd31c:	00030220 	.word	0x00030220

000bd320 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bd320:	b508      	push	{r3, lr}
   bd322:	4b03      	ldr	r3, [pc, #12]	; (bd330 <system_reset+0x10>)
   bd324:	681b      	ldr	r3, [r3, #0]
   bd326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bd32a:	9301      	str	r3, [sp, #4]
   bd32c:	bd08      	pop	{r3, pc}
   bd32e:	0000      	.short	0x0000
   bd330:	00030220 	.word	0x00030220

000bd334 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bd334:	b508      	push	{r3, lr}
   bd336:	4b02      	ldr	r3, [pc, #8]	; (bd340 <spark_function+0xc>)
   bd338:	681b      	ldr	r3, [r3, #0]
   bd33a:	685b      	ldr	r3, [r3, #4]
   bd33c:	9301      	str	r3, [sp, #4]
   bd33e:	bd08      	pop	{r3, pc}
   bd340:	00030244 	.word	0x00030244

000bd344 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd344:	b508      	push	{r3, lr}
   bd346:	4b02      	ldr	r3, [pc, #8]	; (bd350 <spark_process+0xc>)
   bd348:	681b      	ldr	r3, [r3, #0]
   bd34a:	689b      	ldr	r3, [r3, #8]
   bd34c:	9301      	str	r3, [sp, #4]
   bd34e:	bd08      	pop	{r3, pc}
   bd350:	00030244 	.word	0x00030244

000bd354 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bd354:	b508      	push	{r3, lr}
   bd356:	4b02      	ldr	r3, [pc, #8]	; (bd360 <spark_cloud_flag_connect+0xc>)
   bd358:	681b      	ldr	r3, [r3, #0]
   bd35a:	68db      	ldr	r3, [r3, #12]
   bd35c:	9301      	str	r3, [sp, #4]
   bd35e:	bd08      	pop	{r3, pc}
   bd360:	00030244 	.word	0x00030244

000bd364 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd364:	b508      	push	{r3, lr}
   bd366:	4b02      	ldr	r3, [pc, #8]	; (bd370 <spark_cloud_flag_connected+0xc>)
   bd368:	681b      	ldr	r3, [r3, #0]
   bd36a:	695b      	ldr	r3, [r3, #20]
   bd36c:	9301      	str	r3, [sp, #4]
   bd36e:	bd08      	pop	{r3, pc}
   bd370:	00030244 	.word	0x00030244

000bd374 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bd374:	b508      	push	{r3, lr}
   bd376:	4b02      	ldr	r3, [pc, #8]	; (bd380 <spark_deviceID+0xc>)
   bd378:	681b      	ldr	r3, [r3, #0]
   bd37a:	69db      	ldr	r3, [r3, #28]
   bd37c:	9301      	str	r3, [sp, #4]
   bd37e:	bd08      	pop	{r3, pc}
   bd380:	00030244 	.word	0x00030244

000bd384 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd384:	b508      	push	{r3, lr}
   bd386:	4b02      	ldr	r3, [pc, #8]	; (bd390 <spark_send_event+0xc>)
   bd388:	681b      	ldr	r3, [r3, #0]
   bd38a:	6a1b      	ldr	r3, [r3, #32]
   bd38c:	9301      	str	r3, [sp, #4]
   bd38e:	bd08      	pop	{r3, pc}
   bd390:	00030244 	.word	0x00030244

000bd394 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bd394:	b508      	push	{r3, lr}
   bd396:	4b02      	ldr	r3, [pc, #8]	; (bd3a0 <spark_sync_time+0xc>)
   bd398:	681b      	ldr	r3, [r3, #0]
   bd39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd39c:	9301      	str	r3, [sp, #4]
   bd39e:	bd08      	pop	{r3, pc}
   bd3a0:	00030244 	.word	0x00030244

000bd3a4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd3a4:	b508      	push	{r3, lr}
   bd3a6:	4b02      	ldr	r3, [pc, #8]	; (bd3b0 <spark_sync_time_pending+0xc>)
   bd3a8:	681b      	ldr	r3, [r3, #0]
   bd3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd3ac:	9301      	str	r3, [sp, #4]
   bd3ae:	bd08      	pop	{r3, pc}
   bd3b0:	00030244 	.word	0x00030244

000bd3b4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bd3b4:	b508      	push	{r3, lr}
   bd3b6:	4b02      	ldr	r3, [pc, #8]	; (bd3c0 <spark_sync_time_last+0xc>)
   bd3b8:	681b      	ldr	r3, [r3, #0]
   bd3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd3bc:	9301      	str	r3, [sp, #4]
   bd3be:	bd08      	pop	{r3, pc}
   bd3c0:	00030244 	.word	0x00030244

000bd3c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd3c4:	b508      	push	{r3, lr}
   bd3c6:	4b02      	ldr	r3, [pc, #8]	; (bd3d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd3c8:	681b      	ldr	r3, [r3, #0]
   bd3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd3cc:	9301      	str	r3, [sp, #4]
   bd3ce:	bd08      	pop	{r3, pc}
   bd3d0:	00030244 	.word	0x00030244

000bd3d4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bd3d4:	b508      	push	{r3, lr}
   bd3d6:	4b02      	ldr	r3, [pc, #8]	; (bd3e0 <spark_cloud_disconnect+0xc>)
   bd3d8:	681b      	ldr	r3, [r3, #0]
   bd3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd3dc:	9301      	str	r3, [sp, #4]
   bd3de:	bd08      	pop	{r3, pc}
   bd3e0:	00030244 	.word	0x00030244

000bd3e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd3e4:	b508      	push	{r3, lr}
   bd3e6:	4b02      	ldr	r3, [pc, #8]	; (bd3f0 <network_connect+0xc>)
   bd3e8:	681b      	ldr	r3, [r3, #0]
   bd3ea:	685b      	ldr	r3, [r3, #4]
   bd3ec:	9301      	str	r3, [sp, #4]
   bd3ee:	bd08      	pop	{r3, pc}
   bd3f0:	00030240 	.word	0x00030240

000bd3f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd3f4:	b508      	push	{r3, lr}
   bd3f6:	4b02      	ldr	r3, [pc, #8]	; (bd400 <network_connecting+0xc>)
   bd3f8:	681b      	ldr	r3, [r3, #0]
   bd3fa:	689b      	ldr	r3, [r3, #8]
   bd3fc:	9301      	str	r3, [sp, #4]
   bd3fe:	bd08      	pop	{r3, pc}
   bd400:	00030240 	.word	0x00030240

000bd404 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd404:	b508      	push	{r3, lr}
   bd406:	4b02      	ldr	r3, [pc, #8]	; (bd410 <network_disconnect+0xc>)
   bd408:	681b      	ldr	r3, [r3, #0]
   bd40a:	68db      	ldr	r3, [r3, #12]
   bd40c:	9301      	str	r3, [sp, #4]
   bd40e:	bd08      	pop	{r3, pc}
   bd410:	00030240 	.word	0x00030240

000bd414 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd414:	b508      	push	{r3, lr}
   bd416:	4b02      	ldr	r3, [pc, #8]	; (bd420 <network_ready+0xc>)
   bd418:	681b      	ldr	r3, [r3, #0]
   bd41a:	691b      	ldr	r3, [r3, #16]
   bd41c:	9301      	str	r3, [sp, #4]
   bd41e:	bd08      	pop	{r3, pc}
   bd420:	00030240 	.word	0x00030240

000bd424 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd424:	b508      	push	{r3, lr}
   bd426:	4b02      	ldr	r3, [pc, #8]	; (bd430 <network_on+0xc>)
   bd428:	681b      	ldr	r3, [r3, #0]
   bd42a:	695b      	ldr	r3, [r3, #20]
   bd42c:	9301      	str	r3, [sp, #4]
   bd42e:	bd08      	pop	{r3, pc}
   bd430:	00030240 	.word	0x00030240

000bd434 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd434:	b508      	push	{r3, lr}
   bd436:	4b02      	ldr	r3, [pc, #8]	; (bd440 <network_off+0xc>)
   bd438:	681b      	ldr	r3, [r3, #0]
   bd43a:	699b      	ldr	r3, [r3, #24]
   bd43c:	9301      	str	r3, [sp, #4]
   bd43e:	bd08      	pop	{r3, pc}
   bd440:	00030240 	.word	0x00030240

000bd444 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd444:	b508      	push	{r3, lr}
   bd446:	4b02      	ldr	r3, [pc, #8]	; (bd450 <network_listen+0xc>)
   bd448:	681b      	ldr	r3, [r3, #0]
   bd44a:	69db      	ldr	r3, [r3, #28]
   bd44c:	9301      	str	r3, [sp, #4]
   bd44e:	bd08      	pop	{r3, pc}
   bd450:	00030240 	.word	0x00030240

000bd454 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd454:	b508      	push	{r3, lr}
   bd456:	4b02      	ldr	r3, [pc, #8]	; (bd460 <network_listening+0xc>)
   bd458:	681b      	ldr	r3, [r3, #0]
   bd45a:	6a1b      	ldr	r3, [r3, #32]
   bd45c:	9301      	str	r3, [sp, #4]
   bd45e:	bd08      	pop	{r3, pc}
   bd460:	00030240 	.word	0x00030240

000bd464 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd464:	b508      	push	{r3, lr}
   bd466:	4b02      	ldr	r3, [pc, #8]	; (bd470 <network_set_listen_timeout+0xc>)
   bd468:	681b      	ldr	r3, [r3, #0]
   bd46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd46c:	9301      	str	r3, [sp, #4]
   bd46e:	bd08      	pop	{r3, pc}
   bd470:	00030240 	.word	0x00030240

000bd474 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd474:	b508      	push	{r3, lr}
   bd476:	4b02      	ldr	r3, [pc, #8]	; (bd480 <network_get_listen_timeout+0xc>)
   bd478:	681b      	ldr	r3, [r3, #0]
   bd47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd47c:	9301      	str	r3, [sp, #4]
   bd47e:	bd08      	pop	{r3, pc}
   bd480:	00030240 	.word	0x00030240

000bd484 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd484:	b508      	push	{r3, lr}
   bd486:	4b02      	ldr	r3, [pc, #8]	; (bd490 <network_is_on+0xc>)
   bd488:	681b      	ldr	r3, [r3, #0]
   bd48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd48c:	9301      	str	r3, [sp, #4]
   bd48e:	bd08      	pop	{r3, pc}
   bd490:	00030240 	.word	0x00030240

000bd494 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd494:	b508      	push	{r3, lr}
   bd496:	4b02      	ldr	r3, [pc, #8]	; (bd4a0 <network_is_off+0xc>)
   bd498:	681b      	ldr	r3, [r3, #0]
   bd49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd49c:	9301      	str	r3, [sp, #4]
   bd49e:	bd08      	pop	{r3, pc}
   bd4a0:	00030240 	.word	0x00030240

000bd4a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd4a4:	b508      	push	{r3, lr}
   bd4a6:	4b02      	ldr	r3, [pc, #8]	; (bd4b0 <malloc+0xc>)
   bd4a8:	681b      	ldr	r3, [r3, #0]
   bd4aa:	681b      	ldr	r3, [r3, #0]
   bd4ac:	9301      	str	r3, [sp, #4]
   bd4ae:	bd08      	pop	{r3, pc}
   bd4b0:	0003021c 	.word	0x0003021c

000bd4b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd4b4:	b508      	push	{r3, lr}
   bd4b6:	4b02      	ldr	r3, [pc, #8]	; (bd4c0 <free+0xc>)
   bd4b8:	681b      	ldr	r3, [r3, #0]
   bd4ba:	685b      	ldr	r3, [r3, #4]
   bd4bc:	9301      	str	r3, [sp, #4]
   bd4be:	bd08      	pop	{r3, pc}
   bd4c0:	0003021c 	.word	0x0003021c

000bd4c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd4c4:	b508      	push	{r3, lr}
   bd4c6:	4b02      	ldr	r3, [pc, #8]	; (bd4d0 <realloc+0xc>)
   bd4c8:	681b      	ldr	r3, [r3, #0]
   bd4ca:	689b      	ldr	r3, [r3, #8]
   bd4cc:	9301      	str	r3, [sp, #4]
   bd4ce:	bd08      	pop	{r3, pc}
   bd4d0:	0003021c 	.word	0x0003021c

000bd4d4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bd4d4:	b508      	push	{r3, lr}
   bd4d6:	4b02      	ldr	r3, [pc, #8]	; (bd4e0 <siprintf+0xc>)
   bd4d8:	681b      	ldr	r3, [r3, #0]
   bd4da:	691b      	ldr	r3, [r3, #16]
   bd4dc:	9301      	str	r3, [sp, #4]
   bd4de:	bd08      	pop	{r3, pc}
   bd4e0:	0003021c 	.word	0x0003021c

000bd4e4 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd4e4:	b508      	push	{r3, lr}
   bd4e6:	4b02      	ldr	r3, [pc, #8]	; (bd4f0 <sscanf+0xc>)
   bd4e8:	681b      	ldr	r3, [r3, #0]
   bd4ea:	695b      	ldr	r3, [r3, #20]
   bd4ec:	9301      	str	r3, [sp, #4]
   bd4ee:	bd08      	pop	{r3, pc}
   bd4f0:	0003021c 	.word	0x0003021c

000bd4f4 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd4f4:	b508      	push	{r3, lr}
   bd4f6:	4b02      	ldr	r3, [pc, #8]	; (bd500 <snprintf+0xc>)
   bd4f8:	681b      	ldr	r3, [r3, #0]
   bd4fa:	69db      	ldr	r3, [r3, #28]
   bd4fc:	9301      	str	r3, [sp, #4]
   bd4fe:	bd08      	pop	{r3, pc}
   bd500:	0003021c 	.word	0x0003021c

000bd504 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd504:	b508      	push	{r3, lr}
   bd506:	4b02      	ldr	r3, [pc, #8]	; (bd510 <vsnprintf+0xc>)
   bd508:	681b      	ldr	r3, [r3, #0]
   bd50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd50c:	9301      	str	r3, [sp, #4]
   bd50e:	bd08      	pop	{r3, pc}
   bd510:	0003021c 	.word	0x0003021c

000bd514 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd514:	b508      	push	{r3, lr}
   bd516:	4b02      	ldr	r3, [pc, #8]	; (bd520 <abort+0xc>)
   bd518:	681b      	ldr	r3, [r3, #0]
   bd51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd51c:	9301      	str	r3, [sp, #4]
   bd51e:	bd08      	pop	{r3, pc}
   bd520:	0003021c 	.word	0x0003021c

000bd524 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd524:	b508      	push	{r3, lr}
   bd526:	4b02      	ldr	r3, [pc, #8]	; (bd530 <_malloc_r+0xc>)
   bd528:	681b      	ldr	r3, [r3, #0]
   bd52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd52c:	9301      	str	r3, [sp, #4]
   bd52e:	bd08      	pop	{r3, pc}
   bd530:	0003021c 	.word	0x0003021c

000bd534 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd534:	b508      	push	{r3, lr}
   bd536:	4b02      	ldr	r3, [pc, #8]	; (bd540 <__errno+0xc>)
   bd538:	681b      	ldr	r3, [r3, #0]
   bd53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd53c:	9301      	str	r3, [sp, #4]
   bd53e:	bd08      	pop	{r3, pc}
   bd540:	0003021c 	.word	0x0003021c

000bd544 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd544:	b508      	push	{r3, lr}
   bd546:	4b02      	ldr	r3, [pc, #8]	; (bd550 <__assert_func+0xc>)
   bd548:	681b      	ldr	r3, [r3, #0]
   bd54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd54c:	9301      	str	r3, [sp, #4]
   bd54e:	bd08      	pop	{r3, pc}
   bd550:	0003021c 	.word	0x0003021c

000bd554 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd554:	b508      	push	{r3, lr}
   bd556:	4b02      	ldr	r3, [pc, #8]	; (bd560 <newlib_impure_ptr_callback+0xc>)
   bd558:	681b      	ldr	r3, [r3, #0]
   bd55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd55c:	9301      	str	r3, [sp, #4]
   bd55e:	bd08      	pop	{r3, pc}
   bd560:	0003021c 	.word	0x0003021c

000bd564 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bd564:	b508      	push	{r3, lr}
   bd566:	4b02      	ldr	r3, [pc, #8]	; (bd570 <strftime+0xc>)
   bd568:	681b      	ldr	r3, [r3, #0]
   bd56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd56c:	9301      	str	r3, [sp, #4]
   bd56e:	bd08      	pop	{r3, pc}
   bd570:	0003021c 	.word	0x0003021c

000bd574 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd574:	b508      	push	{r3, lr}
   bd576:	4b02      	ldr	r3, [pc, #8]	; (bd580 <localtime_r+0xc>)
   bd578:	681b      	ldr	r3, [r3, #0]
   bd57a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd57c:	9301      	str	r3, [sp, #4]
   bd57e:	bd08      	pop	{r3, pc}
   bd580:	0003021c 	.word	0x0003021c

000bd584 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd584:	b508      	push	{r3, lr}
   bd586:	4b02      	ldr	r3, [pc, #8]	; (bd590 <gmtime_r+0xc>)
   bd588:	681b      	ldr	r3, [r3, #0]
   bd58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd58c:	9301      	str	r3, [sp, #4]
   bd58e:	bd08      	pop	{r3, pc}
   bd590:	0003021c 	.word	0x0003021c

000bd594 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd594:	b508      	push	{r3, lr}
   bd596:	4b02      	ldr	r3, [pc, #8]	; (bd5a0 <mktime+0xc>)
   bd598:	681b      	ldr	r3, [r3, #0]
   bd59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd59c:	9301      	str	r3, [sp, #4]
   bd59e:	bd08      	pop	{r3, pc}
   bd5a0:	0003021c 	.word	0x0003021c

000bd5a4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd5a4:	2100      	movs	r1, #0
   bd5a6:	f7ff be5b 	b.w	bd260 <system_delay_ms>

000bd5aa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd5aa:	b510      	push	{r4, lr}
      if (_M_empty())
   bd5ac:	6883      	ldr	r3, [r0, #8]
   bd5ae:	4604      	mov	r4, r0
   bd5b0:	b90b      	cbnz	r3, bd5b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd5b2:	f003 f9b9 	bl	c0928 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd5b6:	68c3      	ldr	r3, [r0, #12]
   bd5b8:	4798      	blx	r3
      if (_M_manager)
   bd5ba:	68a3      	ldr	r3, [r4, #8]
   bd5bc:	b11b      	cbz	r3, bd5c6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd5be:	2203      	movs	r2, #3
   bd5c0:	4621      	mov	r1, r4
   bd5c2:	4620      	mov	r0, r4
   bd5c4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd5c6:	4620      	mov	r0, r4
   bd5c8:	2110      	movs	r1, #16
}
   bd5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd5ce:	f7f6 bd66 	b.w	b409e <_ZdlPvj>

000bd5d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd5d2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd5d4:	6843      	ldr	r3, [r0, #4]
   bd5d6:	3b01      	subs	r3, #1
    {
   bd5d8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd5da:	6043      	str	r3, [r0, #4]
   bd5dc:	b963      	cbnz	r3, bd5f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd5de:	6803      	ldr	r3, [r0, #0]
   bd5e0:	689b      	ldr	r3, [r3, #8]
   bd5e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd5e4:	68a3      	ldr	r3, [r4, #8]
   bd5e6:	3b01      	subs	r3, #1
   bd5e8:	60a3      	str	r3, [r4, #8]
   bd5ea:	b92b      	cbnz	r3, bd5f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd5ec:	6823      	ldr	r3, [r4, #0]
   bd5ee:	4620      	mov	r0, r4
   bd5f0:	68db      	ldr	r3, [r3, #12]
    }
   bd5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd5f6:	4718      	bx	r3
    }
   bd5f8:	bd10      	pop	{r4, pc}

000bd5fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd5fa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd5fc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd600:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd602:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd606:	42ae      	cmp	r6, r5
   bd608:	d004      	beq.n	bd614 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd60a:	4628      	mov	r0, r5
   bd60c:	f002 faa4 	bl	bfb58 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd610:	3510      	adds	r5, #16
   bd612:	e7f8      	b.n	bd606 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd614:	6820      	ldr	r0, [r4, #0]
   bd616:	f7ff ff4d 	bl	bd4b4 <free>
    AllocatorT::free(data_);
}
   bd61a:	4620      	mov	r0, r4
   bd61c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd620 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd620:	4802      	ldr	r0, [pc, #8]	; (bd62c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd622:	2300      	movs	r3, #0
   bd624:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd626:	f7ff bb51 	b.w	bcccc <os_mutex_recursive_create>
   bd62a:	bf00      	nop
   bd62c:	2003e608 	.word	0x2003e608

000bd630 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd630:	2200      	movs	r2, #0
   bd632:	6840      	ldr	r0, [r0, #4]
   bd634:	4611      	mov	r1, r2
   bd636:	f7ff beed 	b.w	bd414 <network_ready>

000bd63a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd63a:	2200      	movs	r2, #0
   bd63c:	6840      	ldr	r0, [r0, #4]
   bd63e:	4611      	mov	r1, r2
   bd640:	f7ff bf08 	b.w	bd454 <network_listening>

000bd644 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd644:	2200      	movs	r2, #0
   bd646:	6840      	ldr	r0, [r0, #4]
   bd648:	4611      	mov	r1, r2
   bd64a:	f7ff bf13 	b.w	bd474 <network_get_listen_timeout>

000bd64e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd64e:	6840      	ldr	r0, [r0, #4]
   bd650:	2200      	movs	r2, #0
   bd652:	f7ff bf07 	b.w	bd464 <network_set_listen_timeout>

000bd656 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd656:	6840      	ldr	r0, [r0, #4]
   bd658:	2200      	movs	r2, #0
   bd65a:	f081 0101 	eor.w	r1, r1, #1
   bd65e:	f7ff bef1 	b.w	bd444 <network_listen>

000bd662 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd662:	2300      	movs	r3, #0
   bd664:	6840      	ldr	r0, [r0, #4]
   bd666:	461a      	mov	r2, r3
   bd668:	4619      	mov	r1, r3
   bd66a:	f7ff bee3 	b.w	bd434 <network_off>

000bd66e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd66e:	2300      	movs	r3, #0
   bd670:	6840      	ldr	r0, [r0, #4]
   bd672:	461a      	mov	r2, r3
   bd674:	4619      	mov	r1, r3
   bd676:	f7ff bed5 	b.w	bd424 <network_on>

000bd67a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd67a:	2200      	movs	r2, #0
   bd67c:	6840      	ldr	r0, [r0, #4]
   bd67e:	4611      	mov	r1, r2
   bd680:	f7ff beb8 	b.w	bd3f4 <network_connecting>

000bd684 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd684:	6840      	ldr	r0, [r0, #4]
   bd686:	2200      	movs	r2, #0
   bd688:	2102      	movs	r1, #2
   bd68a:	f7ff bebb 	b.w	bd404 <network_disconnect>

000bd68e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd68e:	2300      	movs	r3, #0
   bd690:	6840      	ldr	r0, [r0, #4]
   bd692:	461a      	mov	r2, r3
   bd694:	f7ff bea6 	b.w	bd3e4 <network_connect>

000bd698 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd698:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd69a:	4b13      	ldr	r3, [pc, #76]	; (bd6e8 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd69c:	6003      	str	r3, [r0, #0]
   bd69e:	2518      	movs	r5, #24
   bd6a0:	3330      	adds	r3, #48	; 0x30
   bd6a2:	b086      	sub	sp, #24
   bd6a4:	460e      	mov	r6, r1
   bd6a6:	6043      	str	r3, [r0, #4]
   bd6a8:	462a      	mov	r2, r5
   bd6aa:	2100      	movs	r1, #0
   bd6ac:	4604      	mov	r4, r0
   bd6ae:	3008      	adds	r0, #8
   bd6b0:	f004 ff60 	bl	c2574 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd6b4:	2200      	movs	r2, #0
   bd6b6:	6870      	ldr	r0, [r6, #4]
   bd6b8:	4611      	mov	r1, r2
   bd6ba:	f7ff feab 	bl	bd414 <network_ready>
   bd6be:	b178      	cbz	r0, bd6e0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd6c0:	2100      	movs	r1, #0
   bd6c2:	462a      	mov	r2, r5
   bd6c4:	4668      	mov	r0, sp
   bd6c6:	f004 ff55 	bl	c2574 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd6ca:	4669      	mov	r1, sp
   bd6cc:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd6ce:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd6d2:	f7ff fabb 	bl	bcc4c <cellular_signal>
   bd6d6:	b918      	cbnz	r0, bd6e0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd6d8:	4669      	mov	r1, sp
   bd6da:	4620      	mov	r0, r4
   bd6dc:	f000 f8b8 	bl	bd850 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd6e0:	4620      	mov	r0, r4
   bd6e2:	b006      	add	sp, #24
   bd6e4:	bd70      	pop	{r4, r5, r6, pc}
   bd6e6:	bf00      	nop
   bd6e8:	000c6710 	.word	0x000c6710

000bd6ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd6ec:	4b08      	ldr	r3, [pc, #32]	; (bd710 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd6ee:	b510      	push	{r4, lr}
   bd6f0:	2428      	movs	r4, #40	; 0x28
   bd6f2:	4622      	mov	r2, r4
   bd6f4:	4618      	mov	r0, r3
   bd6f6:	2100      	movs	r1, #0
   bd6f8:	f004 ff3c 	bl	c2574 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd6fc:	4b05      	ldr	r3, [pc, #20]	; (bd714 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd6fe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd704:	6042      	str	r2, [r0, #4]
   bd706:	2204      	movs	r2, #4
   bd708:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd70a:	4a03      	ldr	r2, [pc, #12]	; (bd718 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd70c:	601a      	str	r2, [r3, #0]
   bd70e:	bd10      	pop	{r4, pc}
   bd710:	2003e614 	.word	0x2003e614
   bd714:	2003e60c 	.word	0x2003e60c
   bd718:	000c66d4 	.word	0x000c66d4

000bd71c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd71c:	4770      	bx	lr

000bd71e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd71e:	7b00      	ldrb	r0, [r0, #12]
   bd720:	4770      	bx	lr

000bd722 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd722:	7b03      	ldrb	r3, [r0, #12]
   bd724:	b14b      	cbz	r3, bd73a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd726:	6903      	ldr	r3, [r0, #16]
   bd728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd72c:	d005      	beq.n	bd73a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd72e:	6980      	ldr	r0, [r0, #24]
   bd730:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd734:	bf18      	it	ne
   bd736:	2001      	movne	r0, #1
   bd738:	4770      	bx	lr
   bd73a:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd73c:	4770      	bx	lr

000bd73e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd73e:	6803      	ldr	r3, [r0, #0]
   bd740:	6a1b      	ldr	r3, [r3, #32]
   bd742:	4718      	bx	r3

000bd744 <_ZNK14CellularSignal7printToER5Print>:
{
   bd744:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd746:	6803      	ldr	r3, [r0, #0]
{
   bd748:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd74a:	691b      	ldr	r3, [r3, #16]
{
   bd74c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd74e:	4798      	blx	r3
   bd750:	2102      	movs	r1, #2
   bd752:	4628      	mov	r0, r5
   bd754:	f002 f8de 	bl	bf914 <_ZN5Print5printEfi>
    n += p.print(',');
   bd758:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd75a:	4604      	mov	r4, r0
    n += p.print(',');
   bd75c:	4628      	mov	r0, r5
   bd75e:	f001 ffe3 	bl	bf728 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd762:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd764:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd766:	699b      	ldr	r3, [r3, #24]
   bd768:	4630      	mov	r0, r6
   bd76a:	4798      	blx	r3
   bd76c:	2102      	movs	r1, #2
   bd76e:	4628      	mov	r0, r5
   bd770:	f002 f8d0 	bl	bf914 <_ZN5Print5printEfi>
}
   bd774:	4420      	add	r0, r4
   bd776:	bd70      	pop	{r4, r5, r6, pc}

000bd778 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd778:	f1a0 0004 	sub.w	r0, r0, #4
   bd77c:	f7ff bfe2 	b.w	bd744 <_ZNK14CellularSignal7printToER5Print>

000bd780 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd780:	b510      	push	{r4, lr}
   bd782:	2120      	movs	r1, #32
   bd784:	4604      	mov	r4, r0
   bd786:	f7f6 fc8a 	bl	b409e <_ZdlPvj>
   bd78a:	4620      	mov	r0, r4
   bd78c:	bd10      	pop	{r4, pc}
	...

000bd790 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd790:	7b03      	ldrb	r3, [r0, #12]
   bd792:	b17b      	cbz	r3, bd7b4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd794:	6943      	ldr	r3, [r0, #20]
   bd796:	2b00      	cmp	r3, #0
   bd798:	db0c      	blt.n	bd7b4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd79a:	ee07 3a90 	vmov	s15, r3
   bd79e:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd7bc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd7a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd7a6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd7aa:	eddf 7a05 	vldr	s15, [pc, #20]	; bd7c0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd7ae:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd7b2:	4770      	bx	lr
    return -1.0f;
   bd7b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd7b8:	4770      	bx	lr
   bd7ba:	bf00      	nop
   bd7bc:	477fff00 	.word	0x477fff00
   bd7c0:	42c80000 	.word	0x42c80000

000bd7c4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd7c4:	7b03      	ldrb	r3, [r0, #12]
   bd7c6:	b163      	cbz	r3, bd7e2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd7c8:	6903      	ldr	r3, [r0, #16]
   bd7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd7ce:	d008      	beq.n	bd7e2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd7d0:	ee07 3a90 	vmov	s15, r3
   bd7d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd7e8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd7d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd7dc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd7e0:	4770      	bx	lr
    return 0.0f;
   bd7e2:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd7ec <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd7e6:	4770      	bx	lr
   bd7e8:	42c80000 	.word	0x42c80000
   bd7ec:	00000000 	.word	0x00000000

000bd7f0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd7f0:	7b03      	ldrb	r3, [r0, #12]
   bd7f2:	b17b      	cbz	r3, bd814 <_ZNK14CellularSignal10getQualityEv+0x24>
   bd7f4:	69c3      	ldr	r3, [r0, #28]
   bd7f6:	2b00      	cmp	r3, #0
   bd7f8:	db0c      	blt.n	bd814 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd7fa:	ee07 3a90 	vmov	s15, r3
   bd7fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd81c <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd806:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd80a:	eddf 7a05 	vldr	s15, [pc, #20]	; bd820 <_ZNK14CellularSignal10getQualityEv+0x30>
   bd80e:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd812:	4770      	bx	lr
    return -1.0f;
   bd814:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd818:	4770      	bx	lr
   bd81a:	bf00      	nop
   bd81c:	477fff00 	.word	0x477fff00
   bd820:	42c80000 	.word	0x42c80000

000bd824 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd824:	7b03      	ldrb	r3, [r0, #12]
   bd826:	b163      	cbz	r3, bd842 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd828:	6983      	ldr	r3, [r0, #24]
   bd82a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd82e:	d008      	beq.n	bd842 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd830:	ee07 3a90 	vmov	s15, r3
   bd834:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd848 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd83c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd840:	4770      	bx	lr
    return 0.0f;
   bd842:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd84c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd846:	4770      	bx	lr
   bd848:	42c80000 	.word	0x42c80000
   bd84c:	00000000 	.word	0x00000000

000bd850 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd850:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd852:	460d      	mov	r5, r1
   bd854:	f100 0408 	add.w	r4, r0, #8
   bd858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd85a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd85c:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd860:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd864:	2001      	movs	r0, #1
   bd866:	bd30      	pop	{r4, r5, pc}

000bd868 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd868:	4770      	bx	lr

000bd86a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd86a:	2000      	movs	r0, #0
   bd86c:	4770      	bx	lr

000bd86e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd86e:	b510      	push	{r4, lr}
   bd870:	2110      	movs	r1, #16
   bd872:	4604      	mov	r4, r0
   bd874:	f7f6 fc13 	bl	b409e <_ZdlPvj>
   bd878:	4620      	mov	r0, r4
   bd87a:	bd10      	pop	{r4, pc}

000bd87c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd87c:	b508      	push	{r3, lr}
      { delete this; }
   bd87e:	f7ff fff6 	bl	bd86e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd882:	bd08      	pop	{r3, pc}

000bd884 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd884:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd886:	2200      	movs	r2, #0
   bd888:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd88c:	6002      	str	r2, [r0, #0]
   bd88e:	8084      	strh	r4, [r0, #4]
   bd890:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd892:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd894:	680c      	ldr	r4, [r1, #0]
   bd896:	8085      	strh	r5, [r0, #4]
   bd898:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd89a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd89c:	bd30      	pop	{r4, r5, pc}

000bd89e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd89e:	b510      	push	{r4, lr}
   bd8a0:	4604      	mov	r4, r0
    free((void*)msg_);
   bd8a2:	6800      	ldr	r0, [r0, #0]
   bd8a4:	f7ff fe06 	bl	bd4b4 <free>
}
   bd8a8:	4620      	mov	r0, r4
   bd8aa:	bd10      	pop	{r4, pc}

000bd8ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd8ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd8ae:	68c4      	ldr	r4, [r0, #12]
   bd8b0:	b1f4      	cbz	r4, bd8f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd8b2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd8b4:	2b02      	cmp	r3, #2
   bd8b6:	d103      	bne.n	bd8c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd8b8:	f104 000c 	add.w	r0, r4, #12
   bd8bc:	f7ff ffef 	bl	bd89e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd8c0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd8c2:	b135      	cbz	r5, bd8d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd8c4:	4628      	mov	r0, r5
   bd8c6:	f7f7 fe08 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   bd8ca:	2110      	movs	r1, #16
   bd8cc:	4628      	mov	r0, r5
   bd8ce:	f7f6 fbe6 	bl	b409e <_ZdlPvj>
   bd8d2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd8d4:	b135      	cbz	r5, bd8e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd8d6:	4628      	mov	r0, r5
   bd8d8:	f7f7 fdff 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   bd8dc:	2110      	movs	r1, #16
   bd8de:	4628      	mov	r0, r5
   bd8e0:	f7f6 fbdd 	bl	b409e <_ZdlPvj>
   bd8e4:	4620      	mov	r0, r4
   bd8e6:	2114      	movs	r1, #20
   bd8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd8ec:	f7f6 bbd7 	b.w	b409e <_ZdlPvj>
   bd8f0:	bd38      	pop	{r3, r4, r5, pc}

000bd8f2 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd8f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd8f4:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd8f6:	4668      	mov	r0, sp
   bd8f8:	f002 f979 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd8fc:	68a3      	ldr	r3, [r4, #8]
   bd8fe:	b90b      	cbnz	r3, bd904 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd900:	f003 f812 	bl	c0928 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd904:	68e3      	ldr	r3, [r4, #12]
   bd906:	4669      	mov	r1, sp
   bd908:	4620      	mov	r0, r4
   bd90a:	4798      	blx	r3
   bd90c:	4604      	mov	r4, r0
   bd90e:	4668      	mov	r0, sp
   bd910:	f002 f922 	bl	bfb58 <_ZN6StringD1Ev>
}
   bd914:	4620      	mov	r0, r4
   bd916:	b004      	add	sp, #16
   bd918:	bd10      	pop	{r4, pc}

000bd91a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd91a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd91c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd922:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd924:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd926:	461a      	mov	r2, r3
   bd928:	4669      	mov	r1, sp
   bd92a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd92c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd930:	f8ad 4000 	strh.w	r4, [sp]
   bd934:	f7ff fcfe 	bl	bd334 <spark_function>
}
   bd938:	b004      	add	sp, #16
   bd93a:	bd10      	pop	{r4, pc}

000bd93c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd93c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd93e:	230c      	movs	r3, #12
   bd940:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd944:	6803      	ldr	r3, [r0, #0]
   bd946:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd94a:	7a03      	ldrb	r3, [r0, #8]
   bd94c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd950:	6843      	ldr	r3, [r0, #4]
   bd952:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd954:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd956:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd958:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd95c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd95e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd962:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd966:	f7ff fd35 	bl	bd3d4 <spark_cloud_disconnect>
}
   bd96a:	b005      	add	sp, #20
   bd96c:	f85d fb04 	ldr.w	pc, [sp], #4

000bd970 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd970:	680b      	ldr	r3, [r1, #0]
   bd972:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd974:	684b      	ldr	r3, [r1, #4]
   bd976:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd978:	b113      	cbz	r3, bd980 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd97a:	685a      	ldr	r2, [r3, #4]
   bd97c:	3201      	adds	r2, #1
   bd97e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd980:	4770      	bx	lr

000bd982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd982:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd984:	4604      	mov	r4, r0
   bd986:	4668      	mov	r0, sp
   bd988:	460d      	mov	r5, r1
   bd98a:	f7ff fff1 	bl	bd970 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd98e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd990:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd992:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd994:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd996:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd998:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd99a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd99c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd99e:	f7f6 fe87 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd9a2:	b135      	cbz	r5, bd9b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd9a4:	1d28      	adds	r0, r5, #4
   bd9a6:	f7f6 fe83 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd9aa:	2108      	movs	r1, #8
   bd9ac:	4628      	mov	r0, r5
   bd9ae:	f7f6 fb76 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd9b2:	4620      	mov	r0, r4
   bd9b4:	b003      	add	sp, #12
   bd9b6:	bd30      	pop	{r4, r5, pc}

000bd9b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd9b8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd9ba:	b510      	push	{r4, lr}
      if (_M_empty())
   bd9bc:	b90a      	cbnz	r2, bd9c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd9be:	f002 ffb3 	bl	c0928 <_ZSt25__throw_bad_function_callv>
    }
   bd9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd9c6:	68c3      	ldr	r3, [r0, #12]
   bd9c8:	4718      	bx	r3

000bd9ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd9ca:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd9cc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd9ce:	f100 0110 	add.w	r1, r0, #16
   bd9d2:	f7ff fff1 	bl	bd9b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd9d6:	bd08      	pop	{r3, pc}

000bd9d8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd9d8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd9da:	b510      	push	{r4, lr}
      if (_M_empty())
   bd9dc:	b90a      	cbnz	r2, bd9e2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd9de:	f002 ffa3 	bl	c0928 <_ZSt25__throw_bad_function_callv>
    }
   bd9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd9e6:	68c3      	ldr	r3, [r0, #12]
   bd9e8:	4718      	bx	r3

000bd9ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd9ea:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd9ec:	6800      	ldr	r0, [r0, #0]
   bd9ee:	f100 0110 	add.w	r1, r0, #16
   bd9f2:	f7ff fff1 	bl	bd9d8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd9f6:	bd08      	pop	{r3, pc}

000bd9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd9f8:	b538      	push	{r3, r4, r5, lr}
   bd9fa:	2300      	movs	r3, #0
   bd9fc:	4604      	mov	r4, r0
   bd9fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bda00:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bda02:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bda04:	f7f6 fb47 	bl	b4096 <_Znwj>
   bda08:	b128      	cbz	r0, bda16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bda0a:	2301      	movs	r3, #1
   bda0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bda10:	4b02      	ldr	r3, [pc, #8]	; (bda1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bda12:	6003      	str	r3, [r0, #0]
   bda14:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bda16:	6020      	str	r0, [r4, #0]
	}
   bda18:	4620      	mov	r0, r4
   bda1a:	bd38      	pop	{r3, r4, r5, pc}
   bda1c:	000c674c 	.word	0x000c674c

000bda20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bda20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bda22:	2300      	movs	r3, #0
   bda24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bda26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bda28:	4604      	mov	r4, r0
   bda2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bda2c:	b12b      	cbz	r3, bda3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bda2e:	2202      	movs	r2, #2
   bda30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bda32:	68eb      	ldr	r3, [r5, #12]
   bda34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bda36:	68ab      	ldr	r3, [r5, #8]
   bda38:	60a3      	str	r3, [r4, #8]
    }
   bda3a:	4620      	mov	r0, r4
   bda3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bda40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bda40:	b5f0      	push	{r4, r5, r6, r7, lr}
   bda42:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bda44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bda46:	4668      	mov	r0, sp
   bda48:	f7ff ff1c 	bl	bd884 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bda4c:	f04f 0302 	mov.w	r3, #2
   bda50:	e8d4 2f4f 	ldrexb	r2, [r4]
   bda54:	2a00      	cmp	r2, #0
   bda56:	d103      	bne.n	bda60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bda58:	e8c4 3f41 	strexb	r1, r3, [r4]
   bda5c:	2900      	cmp	r1, #0
   bda5e:	d1f7      	bne.n	bda50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bda60:	d125      	bne.n	bdaae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bda62:	f104 050c 	add.w	r5, r4, #12
   bda66:	4669      	mov	r1, sp
   bda68:	4628      	mov	r0, r5
   bda6a:	f7ff ff0b 	bl	bd884 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bda6e:	f3bf 8f5b 	dmb	ish
   bda72:	2301      	movs	r3, #1
   bda74:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bda76:	2000      	movs	r0, #0
   bda78:	f104 0308 	add.w	r3, r4, #8
   bda7c:	f3bf 8f5b 	dmb	ish
   bda80:	e853 6f00 	ldrex	r6, [r3]
   bda84:	e843 0200 	strex	r2, r0, [r3]
   bda88:	2a00      	cmp	r2, #0
   bda8a:	d1f9      	bne.n	bda80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bda8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bda90:	b16e      	cbz	r6, bdaae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bda92:	f7ff fbfd 	bl	bd290 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bda96:	b178      	cbz	r0, bdab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bda98:	4629      	mov	r1, r5
   bda9a:	4630      	mov	r0, r6
   bda9c:	f7ff ff8c 	bl	bd9b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bdaa0:	4630      	mov	r0, r6
   bdaa2:	f7f7 fd1a 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bdaa6:	2110      	movs	r1, #16
   bdaa8:	4630      	mov	r0, r6
   bdaaa:	f7f6 faf8 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bdaae:	4668      	mov	r0, sp
   bdab0:	f7ff fef5 	bl	bd89e <_ZN8particle5ErrorD1Ev>
    }
   bdab4:	b009      	add	sp, #36	; 0x24
   bdab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdab8:	4631      	mov	r1, r6
   bdaba:	a802      	add	r0, sp, #8
   bdabc:	f7ff ffb0 	bl	bda20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bdac0:	68e0      	ldr	r0, [r4, #12]
   bdac2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdac6:	b108      	cbz	r0, bdacc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bdac8:	f004 fe02 	bl	c26d0 <strdup>
        type_(type) {
   bdacc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bdace:	2010      	movs	r0, #16
   bdad0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bdad4:	f7f6 fadf 	bl	b4096 <_Znwj>
   bdad8:	4605      	mov	r5, r0
   bdada:	b1e8      	cbz	r0, bdb18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bdadc:	2700      	movs	r7, #0
   bdade:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdae0:	2018      	movs	r0, #24
   bdae2:	f7f6 fad8 	bl	b4096 <_Znwj>
   bdae6:	4604      	mov	r4, r0
   bdae8:	b188      	cbz	r0, bdb0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bdaea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bdaec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bdaee:	a802      	add	r0, sp, #8
   bdaf0:	f7fa fe7f 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdaf4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bdaf6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdaf8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdafa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdafc:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdafe:	a906      	add	r1, sp, #24
   bdb00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb02:	60e3      	str	r3, [r4, #12]
   bdb04:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bdb08:	9205      	str	r2, [sp, #20]
   bdb0a:	f7ff febb 	bl	bd884 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bdb0e:	4b08      	ldr	r3, [pc, #32]	; (bdb30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bdb10:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdb12:	4b08      	ldr	r3, [pc, #32]	; (bdb34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdb14:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdb16:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bdb18:	a806      	add	r0, sp, #24
   bdb1a:	f7ff fec0 	bl	bd89e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bdb1e:	a802      	add	r0, sp, #8
   bdb20:	f7f7 fcdb 	bl	b54da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bdb24:	2200      	movs	r2, #0
   bdb26:	4629      	mov	r1, r5
   bdb28:	4803      	ldr	r0, [pc, #12]	; (bdb38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bdb2a:	f7ff fbb9 	bl	bd2a0 <application_thread_invoke>
   bdb2e:	e7b7      	b.n	bdaa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bdb30:	000bd9cb 	.word	0x000bd9cb
   bdb34:	000bdc4d 	.word	0x000bdc4d
   bdb38:	000bd5ab 	.word	0x000bd5ab

000bdb3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bdb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb40:	b08b      	sub	sp, #44	; 0x2c
   bdb42:	4605      	mov	r5, r0
   bdb44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bdb48:	460f      	mov	r7, r1
   bdb4a:	4690      	mov	r8, r2
   bdb4c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdb4e:	f7ff fc09 	bl	bd364 <spark_cloud_flag_connected>
   bdb52:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bdb54:	4683      	mov	fp, r0
   bdb56:	bb38      	cbnz	r0, bdba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bdb58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bdb5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bdb5e:	a905      	add	r1, sp, #20
   bdb60:	4630      	mov	r0, r6
   bdb62:	f8ad 3018 	strh.w	r3, [sp, #24]
   bdb66:	f7ff fe8d 	bl	bd884 <_ZN8particle5ErrorC1EOS0_>
   bdb6a:	2014      	movs	r0, #20
   bdb6c:	f7f6 fa93 	bl	b4096 <_Znwj>
   bdb70:	4604      	mov	r4, r0
   bdb72:	b148      	cbz	r0, bdb88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bdb74:	2302      	movs	r3, #2
   bdb76:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdb78:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bdb7a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdb7e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bdb80:	4631      	mov	r1, r6
   bdb82:	300c      	adds	r0, #12
   bdb84:	f7ff fe7e 	bl	bd884 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdb88:	4628      	mov	r0, r5
	: __shared_count(__p)
   bdb8a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdb8c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bdb90:	f7ff ff32 	bl	bd9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bdb94:	4630      	mov	r0, r6
   bdb96:	f7ff fe82 	bl	bd89e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bdb9a:	a805      	add	r0, sp, #20
   bdb9c:	f7ff fe7f 	bl	bd89e <_ZN8particle5ErrorD1Ev>
}
   bdba0:	4628      	mov	r0, r5
   bdba2:	b00b      	add	sp, #44	; 0x2c
   bdba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bdba8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bdbaa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bdbac:	2014      	movs	r0, #20
   bdbae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bdbb2:	9307      	str	r3, [sp, #28]
   bdbb4:	f7f6 fa6f 	bl	b4096 <_Znwj>
   bdbb8:	4601      	mov	r1, r0
   bdbba:	b118      	cbz	r0, bdbc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bdbbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdbc0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bdbc2:	7044      	strb	r4, [r0, #1]
   bdbc4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bdbc6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bdbc8:	f7ff ff16 	bl	bd9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bdbcc:	4b1e      	ldr	r3, [pc, #120]	; (bdc48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bdbce:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bdbd0:	2008      	movs	r0, #8
   bdbd2:	f7f6 fa60 	bl	b4096 <_Znwj>
   bdbd6:	4604      	mov	r4, r0
   bdbd8:	b110      	cbz	r0, bdbe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bdbda:	a903      	add	r1, sp, #12
   bdbdc:	f7ff fec8 	bl	bd970 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bdbe0:	9600      	str	r6, [sp, #0]
   bdbe2:	fa5f f38a 	uxtb.w	r3, sl
   bdbe6:	464a      	mov	r2, r9
   bdbe8:	4641      	mov	r1, r8
   bdbea:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bdbec:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bdbee:	f7ff fbc9 	bl	bd384 <spark_send_event>
   bdbf2:	b9b8      	cbnz	r0, bdc24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bdbf4:	9b03      	ldr	r3, [sp, #12]
   bdbf6:	785b      	ldrb	r3, [r3, #1]
   bdbf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bdbfc:	b993      	cbnz	r3, bdc24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bdbfe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bdc02:	a905      	add	r1, sp, #20
   bdc04:	a803      	add	r0, sp, #12
   bdc06:	9205      	str	r2, [sp, #20]
   bdc08:	f8ad 3018 	strh.w	r3, [sp, #24]
   bdc0c:	f7ff ff18 	bl	bda40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdc10:	a805      	add	r0, sp, #20
   bdc12:	f7ff fe44 	bl	bd89e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bdc16:	a805      	add	r0, sp, #20
   bdc18:	9909      	ldr	r1, [sp, #36]	; 0x24
   bdc1a:	f7ff feb2 	bl	bd982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bdc1e:	a806      	add	r0, sp, #24
   bdc20:	f7f6 fd46 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdc24:	a903      	add	r1, sp, #12
   bdc26:	a805      	add	r0, sp, #20
   bdc28:	f7ff fea2 	bl	bd970 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bdc2c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdc2e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bdc30:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bdc32:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bdc34:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bdc36:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bdc38:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bdc3a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bdc3c:	f7f6 fd38 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdc40:	a804      	add	r0, sp, #16
   bdc42:	f7f6 fd35 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bdc46:	e7ab      	b.n	bdba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bdc48:	000bdcc9 	.word	0x000bdcc9

000bdc4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bdc4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bdc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdc50:	4605      	mov	r5, r0
	switch (__op)
   bdc52:	d103      	bne.n	bdc5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bdc54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bdc56:	6003      	str	r3, [r0, #0]
      }
   bdc58:	2000      	movs	r0, #0
   bdc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bdc5c:	2a02      	cmp	r2, #2
   bdc5e:	d010      	beq.n	bdc82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bdc60:	2a03      	cmp	r2, #3
   bdc62:	d1f9      	bne.n	bdc58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdc64:	6804      	ldr	r4, [r0, #0]
   bdc66:	2c00      	cmp	r4, #0
   bdc68:	d0f6      	beq.n	bdc58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bdc6a:	f104 0010 	add.w	r0, r4, #16
   bdc6e:	f7ff fe16 	bl	bd89e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bdc72:	4620      	mov	r0, r4
   bdc74:	f7f7 fc31 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bdc78:	2118      	movs	r1, #24
   bdc7a:	4620      	mov	r0, r4
   bdc7c:	f7f6 fa0f 	bl	b409e <_ZdlPvj>
   bdc80:	e7ea      	b.n	bdc58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bdc82:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bdc84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bdc86:	f7f6 fa06 	bl	b4096 <_Znwj>
   bdc8a:	4604      	mov	r4, r0
   bdc8c:	b150      	cbz	r0, bdca4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bdc8e:	4631      	mov	r1, r6
   bdc90:	f7ff fec6 	bl	bda20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bdc94:	6930      	ldr	r0, [r6, #16]
   bdc96:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdc9a:	b108      	cbz	r0, bdca0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bdc9c:	f004 fd18 	bl	c26d0 <strdup>
        type_(type) {
   bdca0:	6120      	str	r0, [r4, #16]
   bdca2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bdca4:	602c      	str	r4, [r5, #0]
	}
   bdca6:	e7d7      	b.n	bdc58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bdca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bdca8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bdcaa:	2300      	movs	r3, #0
   bdcac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bdcae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bdcb0:	4604      	mov	r4, r0
   bdcb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bdcb4:	b12b      	cbz	r3, bdcc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bdcb6:	2202      	movs	r2, #2
   bdcb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bdcba:	68eb      	ldr	r3, [r5, #12]
   bdcbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bdcbe:	68ab      	ldr	r3, [r5, #8]
   bdcc0:	60a3      	str	r3, [r4, #8]
    }
   bdcc2:	4620      	mov	r0, r4
   bdcc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bdcc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bdcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdcca:	b089      	sub	sp, #36	; 0x24
   bdccc:	4604      	mov	r4, r0
   bdcce:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bdcd0:	a801      	add	r0, sp, #4
   bdcd2:	4611      	mov	r1, r2
   bdcd4:	f7ff fe55 	bl	bd982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bdcd8:	b1a4      	cbz	r4, bdd04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bdcda:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdcdc:	b11d      	cbz	r5, bdce6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bdcde:	4628      	mov	r0, r5
   bdce0:	f004 fcf6 	bl	c26d0 <strdup>
   bdce4:	4605      	mov	r5, r0
   bdce6:	a801      	add	r0, sp, #4
   bdce8:	a903      	add	r1, sp, #12
        type_(type) {
   bdcea:	9503      	str	r5, [sp, #12]
   bdcec:	f8ad 4010 	strh.w	r4, [sp, #16]
   bdcf0:	f7ff fea6 	bl	bda40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdcf4:	a803      	add	r0, sp, #12
   bdcf6:	f7ff fdd2 	bl	bd89e <_ZN8particle5ErrorD1Ev>
   bdcfa:	a802      	add	r0, sp, #8
   bdcfc:	f7f6 fcd8 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdd00:	b009      	add	sp, #36	; 0x24
   bdd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bdd04:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bdd06:	2301      	movs	r3, #1
   bdd08:	e8d5 2f4f 	ldrexb	r2, [r5]
   bdd0c:	2a00      	cmp	r2, #0
   bdd0e:	d103      	bne.n	bdd18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bdd10:	e8c5 3f41 	strexb	r1, r3, [r5]
   bdd14:	2900      	cmp	r1, #0
   bdd16:	d1f7      	bne.n	bdd08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bdd18:	d1ef      	bne.n	bdcfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bdd1a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bdd1c:	f3bf 8f5b 	dmb	ish
   bdd20:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bdd22:	1d2b      	adds	r3, r5, #4
   bdd24:	f3bf 8f5b 	dmb	ish
   bdd28:	e853 6f00 	ldrex	r6, [r3]
   bdd2c:	e843 4200 	strex	r2, r4, [r3]
   bdd30:	2a00      	cmp	r2, #0
   bdd32:	d1f9      	bne.n	bdd28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bdd34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bdd38:	2e00      	cmp	r6, #0
   bdd3a:	d0de      	beq.n	bdcfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bdd3c:	4620      	mov	r0, r4
   bdd3e:	f7ff faa7 	bl	bd290 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bdd42:	4607      	mov	r7, r0
   bdd44:	b160      	cbz	r0, bdd60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bdd46:	f105 010c 	add.w	r1, r5, #12
   bdd4a:	4630      	mov	r0, r6
   bdd4c:	f7ff fe44 	bl	bd9d8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bdd50:	4630      	mov	r0, r6
   bdd52:	f7f7 fbc2 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bdd56:	2110      	movs	r1, #16
   bdd58:	4630      	mov	r0, r6
   bdd5a:	f7f6 f9a0 	bl	b409e <_ZdlPvj>
   bdd5e:	e7cc      	b.n	bdcfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdd60:	4631      	mov	r1, r6
   bdd62:	a803      	add	r0, sp, #12
   bdd64:	f7ff ffa0 	bl	bdca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdd68:	7b2b      	ldrb	r3, [r5, #12]
   bdd6a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bdd6e:	2010      	movs	r0, #16
   bdd70:	f7f6 f991 	bl	b4096 <_Znwj>
   bdd74:	4605      	mov	r5, r0
   bdd76:	b1d0      	cbz	r0, bddae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bdd78:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdd7a:	2014      	movs	r0, #20
   bdd7c:	f7f6 f98b 	bl	b4096 <_Znwj>
   bdd80:	4604      	mov	r4, r0
   bdd82:	b178      	cbz	r0, bdda4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bdd84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bdd86:	4601      	mov	r1, r0
   bdd88:	a803      	add	r0, sp, #12
   bdd8a:	f7fa fd32 	bl	b87f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdd8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdd90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdd92:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdd94:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bdd96:	9205      	str	r2, [sp, #20]
   bdd98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdd9a:	60e3      	str	r3, [r4, #12]
   bdd9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bdda0:	9206      	str	r2, [sp, #24]
   bdda2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bdda4:	4b06      	ldr	r3, [pc, #24]	; (bddc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bdda6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdda8:	4b06      	ldr	r3, [pc, #24]	; (bddc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bddaa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bddac:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bddae:	a803      	add	r0, sp, #12
   bddb0:	f7f7 fb93 	bl	b54da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bddb4:	2200      	movs	r2, #0
   bddb6:	4629      	mov	r1, r5
   bddb8:	4803      	ldr	r0, [pc, #12]	; (bddc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bddba:	f7ff fa71 	bl	bd2a0 <application_thread_invoke>
   bddbe:	e7c7      	b.n	bdd50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bddc0:	000bd9eb 	.word	0x000bd9eb
   bddc4:	000bddcd 	.word	0x000bddcd
   bddc8:	000bd5ab 	.word	0x000bd5ab

000bddcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bddcc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bddce:	b570      	push	{r4, r5, r6, lr}
   bddd0:	4604      	mov	r4, r0
	switch (__op)
   bddd2:	d103      	bne.n	bdddc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bddd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bddd6:	6003      	str	r3, [r0, #0]
      }
   bddd8:	2000      	movs	r0, #0
   bddda:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bdddc:	2a02      	cmp	r2, #2
   bddde:	d00c      	beq.n	bddfa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bdde0:	2a03      	cmp	r2, #3
   bdde2:	d1f9      	bne.n	bddd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdde4:	6804      	ldr	r4, [r0, #0]
   bdde6:	2c00      	cmp	r4, #0
   bdde8:	d0f6      	beq.n	bddd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bddea:	4620      	mov	r0, r4
   bddec:	f7f7 fb75 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bddf0:	2114      	movs	r1, #20
   bddf2:	4620      	mov	r0, r4
   bddf4:	f7f6 f953 	bl	b409e <_ZdlPvj>
   bddf8:	e7ee      	b.n	bddd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bddfa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bddfc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bddfe:	f7f6 f94a 	bl	b4096 <_Znwj>
   bde02:	4605      	mov	r5, r0
   bde04:	b120      	cbz	r0, bde10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bde06:	4631      	mov	r1, r6
   bde08:	f7ff ff4e 	bl	bdca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bde0c:	7c33      	ldrb	r3, [r6, #16]
   bde0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bde10:	6025      	str	r5, [r4, #0]
	}
   bde12:	e7e1      	b.n	bddd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bde14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bde14:	2200      	movs	r2, #0
   bde16:	6840      	ldr	r0, [r0, #4]
   bde18:	4611      	mov	r1, r2
   bde1a:	f7ff bb1b 	b.w	bd454 <network_listening>

000bde1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bde1e:	2200      	movs	r2, #0
   bde20:	6840      	ldr	r0, [r0, #4]
   bde22:	4611      	mov	r1, r2
   bde24:	f7ff bb26 	b.w	bd474 <network_get_listen_timeout>

000bde28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bde28:	6840      	ldr	r0, [r0, #4]
   bde2a:	2200      	movs	r2, #0
   bde2c:	f7ff bb1a 	b.w	bd464 <network_set_listen_timeout>

000bde30 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bde30:	6840      	ldr	r0, [r0, #4]
   bde32:	2200      	movs	r2, #0
   bde34:	f081 0101 	eor.w	r1, r1, #1
   bde38:	f7ff bb04 	b.w	bd444 <network_listen>

000bde3c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bde3c:	2300      	movs	r3, #0
   bde3e:	6840      	ldr	r0, [r0, #4]
   bde40:	461a      	mov	r2, r3
   bde42:	4619      	mov	r1, r3
   bde44:	f7ff baf6 	b.w	bd434 <network_off>

000bde48 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bde48:	2300      	movs	r3, #0
   bde4a:	6840      	ldr	r0, [r0, #4]
   bde4c:	461a      	mov	r2, r3
   bde4e:	4619      	mov	r1, r3
   bde50:	f7ff bae8 	b.w	bd424 <network_on>

000bde54 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bde54:	2200      	movs	r2, #0
   bde56:	6840      	ldr	r0, [r0, #4]
   bde58:	4611      	mov	r1, r2
   bde5a:	f7ff badb 	b.w	bd414 <network_ready>

000bde5e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bde5e:	2200      	movs	r2, #0
   bde60:	6840      	ldr	r0, [r0, #4]
   bde62:	4611      	mov	r1, r2
   bde64:	f7ff bac6 	b.w	bd3f4 <network_connecting>

000bde68 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bde68:	6840      	ldr	r0, [r0, #4]
   bde6a:	2200      	movs	r2, #0
   bde6c:	2102      	movs	r1, #2
   bde6e:	f7ff bac9 	b.w	bd404 <network_disconnect>

000bde72 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bde72:	2300      	movs	r3, #0
   bde74:	6840      	ldr	r0, [r0, #4]
   bde76:	461a      	mov	r2, r3
   bde78:	f7ff bab4 	b.w	bd3e4 <network_connect>

000bde7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bde7c:	4b02      	ldr	r3, [pc, #8]	; (bde88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bde7e:	2203      	movs	r2, #3
   bde80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bde82:	4a02      	ldr	r2, [pc, #8]	; (bde8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bde84:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bde86:	4770      	bx	lr
   bde88:	2003e63c 	.word	0x2003e63c
   bde8c:	000c6768 	.word	0x000c6768

000bde90 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bde90:	6800      	ldr	r0, [r0, #0]
   bde92:	f000 b8f3 	b.w	be07c <_ZN7TwoWire4lockEv>

000bde96 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bde96:	b510      	push	{r4, lr}
   bde98:	4604      	mov	r4, r0
      lock_(_lock) {
   bde9a:	6001      	str	r1, [r0, #0]
   bde9c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bde9e:	b10a      	cbz	r2, bdea4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bdea0:	f7ff fff6 	bl	bde90 <_ZN9FuelGauge4lockEv>
}
   bdea4:	4620      	mov	r0, r4
   bdea6:	bd10      	pop	{r4, pc}

000bdea8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bdea8:	b513      	push	{r0, r1, r4, lr}
   bdeaa:	4604      	mov	r4, r0
   bdeac:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bdeae:	f002 fccd 	bl	c084c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bdeb2:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bdeb4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bdeb6:	4620      	mov	r0, r4
   bdeb8:	f7ff ffed 	bl	bde96 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bdebc:	4620      	mov	r0, r4
   bdebe:	b002      	add	sp, #8
   bdec0:	bd10      	pop	{r4, pc}

000bdec2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bdec2:	6800      	ldr	r0, [r0, #0]
   bdec4:	f000 b8e3 	b.w	be08e <_ZN7TwoWire6unlockEv>

000bdec8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bdec8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bdecc:	4604      	mov	r4, r0
   bdece:	461d      	mov	r5, r3
   bded0:	460f      	mov	r7, r1
   bded2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bded4:	f7ff ffdc 	bl	bde90 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bded8:	2236      	movs	r2, #54	; 0x36
   bdeda:	2300      	movs	r3, #0
   bdedc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bdee0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bdee2:	f04f 0801 	mov.w	r8, #1
   bdee6:	230a      	movs	r3, #10
   bdee8:	4669      	mov	r1, sp
   bdeea:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bdeee:	f000 f8a9 	bl	be044 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bdef2:	6820      	ldr	r0, [r4, #0]
   bdef4:	6803      	ldr	r3, [r0, #0]
   bdef6:	4639      	mov	r1, r7
   bdef8:	689b      	ldr	r3, [r3, #8]
   bdefa:	4798      	blx	r3
    i2c_.write(MSB);
   bdefc:	6820      	ldr	r0, [r4, #0]
   bdefe:	6803      	ldr	r3, [r0, #0]
   bdf00:	4631      	mov	r1, r6
   bdf02:	689b      	ldr	r3, [r3, #8]
   bdf04:	4798      	blx	r3
    i2c_.write(LSB);
   bdf06:	6820      	ldr	r0, [r4, #0]
   bdf08:	6803      	ldr	r3, [r0, #0]
   bdf0a:	4629      	mov	r1, r5
   bdf0c:	689b      	ldr	r3, [r3, #8]
   bdf0e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bdf10:	4641      	mov	r1, r8
   bdf12:	6820      	ldr	r0, [r4, #0]
   bdf14:	f000 f8ae 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
   bdf18:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bdf1a:	4620      	mov	r0, r4
   bdf1c:	bf0c      	ite	eq
   bdf1e:	2500      	moveq	r5, #0
   bdf20:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bdf24:	f7ff ffcd 	bl	bdec2 <_ZN9FuelGauge6unlockEv>
}
   bdf28:	4628      	mov	r0, r5
   bdf2a:	b004      	add	sp, #16
   bdf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdf30 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bdf30:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bdf32:	2240      	movs	r2, #64	; 0x40
   bdf34:	2300      	movs	r3, #0
   bdf36:	2106      	movs	r1, #6
   bdf38:	f7ff ffc6 	bl	bdec8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bdf3c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdf40:	bd08      	pop	{r3, pc}

000bdf42 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bdf42:	4770      	bx	lr

000bdf44 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bdf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdf46:	4606      	mov	r6, r0
   bdf48:	4615      	mov	r5, r2
   bdf4a:	460c      	mov	r4, r1
   bdf4c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bdf4e:	42bc      	cmp	r4, r7
   bdf50:	d006      	beq.n	bdf60 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bdf52:	6833      	ldr	r3, [r6, #0]
   bdf54:	f814 1b01 	ldrb.w	r1, [r4], #1
   bdf58:	689b      	ldr	r3, [r3, #8]
   bdf5a:	4630      	mov	r0, r6
   bdf5c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bdf5e:	e7f6      	b.n	bdf4e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bdf60:	4628      	mov	r0, r5
   bdf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdf64 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bdf64:	7c00      	ldrb	r0, [r0, #16]
   bdf66:	2200      	movs	r2, #0
   bdf68:	f7fe bf80 	b.w	bce6c <hal_i2c_write>

000bdf6c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bdf6c:	7c00      	ldrb	r0, [r0, #16]
   bdf6e:	2100      	movs	r1, #0
   bdf70:	f7fe bf84 	b.w	bce7c <hal_i2c_available>

000bdf74 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bdf74:	7c00      	ldrb	r0, [r0, #16]
   bdf76:	2100      	movs	r1, #0
   bdf78:	f7fe bf88 	b.w	bce8c <hal_i2c_read>

000bdf7c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bdf7c:	7c00      	ldrb	r0, [r0, #16]
   bdf7e:	2100      	movs	r1, #0
   bdf80:	f7fe bf8c 	b.w	bce9c <hal_i2c_peek>

000bdf84 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bdf84:	7c00      	ldrb	r0, [r0, #16]
   bdf86:	2100      	movs	r1, #0
   bdf88:	f7fe bf90 	b.w	bceac <hal_i2c_flush>

000bdf8c <_ZN7TwoWireD0Ev>:
   bdf8c:	b510      	push	{r4, lr}
   bdf8e:	2114      	movs	r1, #20
   bdf90:	4604      	mov	r4, r0
   bdf92:	f7f6 f884 	bl	b409e <_ZdlPvj>
   bdf96:	4620      	mov	r0, r4
   bdf98:	bd10      	pop	{r4, pc}
	...

000bdf9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdf9c:	b538      	push	{r3, r4, r5, lr}
   bdf9e:	4604      	mov	r4, r0
   bdfa0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bdfa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdfa6:	2200      	movs	r2, #0
   bdfa8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdfac:	4b09      	ldr	r3, [pc, #36]	; (bdfd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bdfae:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdfb0:	4608      	mov	r0, r1
   bdfb2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bdfb4:	4629      	mov	r1, r5
   bdfb6:	f7fe ff89 	bl	bcecc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdfba:	30bf      	adds	r0, #191	; 0xbf
   bdfbc:	d108      	bne.n	bdfd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bdfbe:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bdfc0:	07db      	lsls	r3, r3, #31
   bdfc2:	d505      	bpl.n	bdfd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bdfc4:	6868      	ldr	r0, [r5, #4]
   bdfc6:	f7ff fa75 	bl	bd4b4 <free>
    free(conf.tx_buffer);
   bdfca:	68e8      	ldr	r0, [r5, #12]
   bdfcc:	f7ff fa72 	bl	bd4b4 <free>
}
   bdfd0:	4620      	mov	r0, r4
   bdfd2:	bd38      	pop	{r3, r4, r5, pc}
   bdfd4:	000c67a4 	.word	0x000c67a4

000bdfd8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bdfd8:	2300      	movs	r3, #0
   bdfda:	7c00      	ldrb	r0, [r0, #16]
   bdfdc:	461a      	mov	r2, r3
   bdfde:	4619      	mov	r1, r3
   bdfe0:	f7fe bf2c 	b.w	bce3c <hal_i2c_begin>

000bdfe4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bdfe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdfe6:	2200      	movs	r2, #0
   bdfe8:	2314      	movs	r3, #20
   bdfea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bdfee:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bdff2:	780b      	ldrb	r3, [r1, #0]
   bdff4:	f88d 3008 	strb.w	r3, [sp, #8]
   bdff8:	684b      	ldr	r3, [r1, #4]
   bdffa:	9303      	str	r3, [sp, #12]
   bdffc:	68cb      	ldr	r3, [r1, #12]
   bdffe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   be000:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   be002:	7a0b      	ldrb	r3, [r1, #8]
   be004:	9305      	str	r3, [sp, #20]
   be006:	a901      	add	r1, sp, #4
   be008:	f7fe ff78 	bl	bcefc <hal_i2c_request_ex>
}
   be00c:	b007      	add	sp, #28
   be00e:	f85d fb04 	ldr.w	pc, [sp], #4

000be012 <_ZN7TwoWire11requestFromEhjh>:
{
   be012:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   be014:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   be016:	f88d 1000 	strb.w	r1, [sp]
   be01a:	f04f 0164 	mov.w	r1, #100	; 0x64
   be01e:	9103      	str	r1, [sp, #12]
   be020:	bf18      	it	ne
   be022:	2301      	movne	r3, #1
   be024:	4669      	mov	r1, sp
    size_ = size;
   be026:	9201      	str	r2, [sp, #4]
   be028:	f88d 3008 	strb.w	r3, [sp, #8]
   be02c:	f7ff ffda 	bl	bdfe4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   be030:	b005      	add	sp, #20
   be032:	f85d fb04 	ldr.w	pc, [sp], #4

000be036 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   be036:	7c00      	ldrb	r0, [r0, #16]
   be038:	2200      	movs	r2, #0
   be03a:	f7fe bf07 	b.w	bce4c <hal_i2c_begin_transmission>

000be03e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   be03e:	b2c9      	uxtb	r1, r1
   be040:	f7ff bff9 	b.w	be036 <_ZN7TwoWire17beginTransmissionEh>

000be044 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   be044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   be046:	2300      	movs	r3, #0
   be048:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   be04c:	684a      	ldr	r2, [r1, #4]
   be04e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   be050:	2314      	movs	r3, #20
    };
   be052:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   be054:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   be058:	780b      	ldrb	r3, [r1, #0]
    };
   be05a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   be05c:	7a0a      	ldrb	r2, [r1, #8]
   be05e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   be060:	7c00      	ldrb	r0, [r0, #16]
    };
   be062:	f88d 3008 	strb.w	r3, [sp, #8]
   be066:	aa01      	add	r2, sp, #4
   be068:	4619      	mov	r1, r3
   be06a:	f7fe feef 	bl	bce4c <hal_i2c_begin_transmission>
}
   be06e:	b007      	add	sp, #28
   be070:	f85d fb04 	ldr.w	pc, [sp], #4

000be074 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   be074:	7c00      	ldrb	r0, [r0, #16]
   be076:	2200      	movs	r2, #0
   be078:	f7fe bef0 	b.w	bce5c <hal_i2c_end_transmission>

000be07c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   be07c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   be07e:	2100      	movs	r1, #0
   be080:	7c00      	ldrb	r0, [r0, #16]
   be082:	f7fe ff2b 	bl	bcedc <hal_i2c_lock>
}
   be086:	fab0 f080 	clz	r0, r0
   be08a:	0940      	lsrs	r0, r0, #5
   be08c:	bd08      	pop	{r3, pc}

000be08e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   be08e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   be090:	2100      	movs	r1, #0
   be092:	7c00      	ldrb	r0, [r0, #16]
   be094:	f7fe ff2a 	bl	bceec <hal_i2c_unlock>
}
   be098:	fab0 f080 	clz	r0, r0
   be09c:	0940      	lsrs	r0, r0, #5
   be09e:	bd08      	pop	{r3, pc}

000be0a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   be0a0:	4700      	bx	r0
	...

000be0a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   be0a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   be0a8:	2400      	movs	r4, #0
{
   be0aa:	461d      	mov	r5, r3
   be0ac:	460f      	mov	r7, r1
   be0ae:	4690      	mov	r8, r2
   be0b0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   be0b2:	f7fe feb3 	bl	bce1c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   be0b6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   be0b8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   be0bc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   be0c0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   be0c4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   be0c8:	bfa2      	ittt	ge
   be0ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   be0ce:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   be0d2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   be0d4:	4907      	ldr	r1, [pc, #28]	; (be0f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   be0d6:	9400      	str	r4, [sp, #0]
   be0d8:	4643      	mov	r3, r8
   be0da:	463a      	mov	r2, r7
   be0dc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   be0de:	bfa8      	it	ge
   be0e0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   be0e4:	f7fe fe92 	bl	bce0c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   be0e8:	fab0 f080 	clz	r0, r0
   be0ec:	0940      	lsrs	r0, r0, #5
   be0ee:	b004      	add	sp, #16
   be0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be0f4:	000be0a1 	.word	0x000be0a1

000be0f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   be0f8:	4770      	bx	lr

000be0fa <_ZN9IPAddressD0Ev>:
   be0fa:	b510      	push	{r4, lr}
   be0fc:	2118      	movs	r1, #24
   be0fe:	4604      	mov	r4, r0
   be100:	f7f5 ffcd 	bl	b409e <_ZdlPvj>
   be104:	4620      	mov	r0, r4
   be106:	bd10      	pop	{r4, pc}

000be108 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   be108:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   be10a:	7d03      	ldrb	r3, [r0, #20]
   be10c:	2b06      	cmp	r3, #6
{
   be10e:	b08d      	sub	sp, #52	; 0x34
   be110:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be112:	f100 0704 	add.w	r7, r0, #4
   be116:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   be11a:	d012      	beq.n	be142 <_ZNK9IPAddress7printToER5Print+0x3a>
   be11c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   be120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   be124:	220a      	movs	r2, #10
   be126:	4630      	mov	r0, r6
   be128:	f001 fb0d 	bl	bf746 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   be12c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   be12e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   be130:	d019      	beq.n	be166 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   be132:	2c00      	cmp	r4, #0
   be134:	d0f4      	beq.n	be120 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   be136:	212e      	movs	r1, #46	; 0x2e
   be138:	4630      	mov	r0, r6
   be13a:	f001 faf5 	bl	bf728 <_ZN5Print5printEc>
   be13e:	4404      	add	r4, r0
   be140:	e7ee      	b.n	be120 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be142:	232f      	movs	r3, #47	; 0x2f
   be144:	466a      	mov	r2, sp
   be146:	4639      	mov	r1, r7
   be148:	200a      	movs	r0, #10
		buf[0] = 0;
   be14a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   be14e:	f7fe fedd 	bl	bcf0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   be152:	4668      	mov	r0, sp
   be154:	f004 fad9 	bl	c270a <strlen>
   be158:	6833      	ldr	r3, [r6, #0]
   be15a:	4602      	mov	r2, r0
   be15c:	68db      	ldr	r3, [r3, #12]
   be15e:	4669      	mov	r1, sp
   be160:	4630      	mov	r0, r6
   be162:	4798      	blx	r3
   be164:	4604      	mov	r4, r0
    }
    return n;
}
   be166:	4620      	mov	r0, r4
   be168:	b00d      	add	sp, #52	; 0x34
   be16a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000be16c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   be16c:	b510      	push	{r4, lr}
   be16e:	4b05      	ldr	r3, [pc, #20]	; (be184 <_ZN9IPAddressC1Ev+0x18>)
   be170:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   be172:	2211      	movs	r2, #17
   be174:	f840 3b04 	str.w	r3, [r0], #4
   be178:	2100      	movs	r1, #0
   be17a:	f004 f9fb 	bl	c2574 <memset>
}
   be17e:	4620      	mov	r0, r4
   be180:	bd10      	pop	{r4, pc}
   be182:	bf00      	nop
   be184:	000c67cc 	.word	0x000c67cc

000be188 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   be188:	4603      	mov	r3, r0
   be18a:	4a07      	ldr	r2, [pc, #28]	; (be1a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   be18c:	b510      	push	{r4, lr}
   be18e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   be192:	f101 0210 	add.w	r2, r1, #16
   be196:	f851 4b04 	ldr.w	r4, [r1], #4
   be19a:	f843 4b04 	str.w	r4, [r3], #4
   be19e:	4291      	cmp	r1, r2
   be1a0:	d1f9      	bne.n	be196 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   be1a2:	780a      	ldrb	r2, [r1, #0]
   be1a4:	701a      	strb	r2, [r3, #0]
}
   be1a6:	bd10      	pop	{r4, pc}
   be1a8:	000c67cc 	.word	0x000c67cc

000be1ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   be1ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   be1ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   be1b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   be1b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   be1ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   be1be:	2304      	movs	r3, #4
   be1c0:	6041      	str	r1, [r0, #4]
   be1c2:	7503      	strb	r3, [r0, #20]
}
   be1c4:	bd10      	pop	{r4, pc}
	...

000be1c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   be1c8:	b507      	push	{r0, r1, r2, lr}
   be1ca:	4b06      	ldr	r3, [pc, #24]	; (be1e4 <_ZN9IPAddressC1EPKh+0x1c>)
   be1cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   be1ce:	78cb      	ldrb	r3, [r1, #3]
   be1d0:	9300      	str	r3, [sp, #0]
   be1d2:	788b      	ldrb	r3, [r1, #2]
   be1d4:	784a      	ldrb	r2, [r1, #1]
   be1d6:	7809      	ldrb	r1, [r1, #0]
   be1d8:	f7ff ffe8 	bl	be1ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   be1dc:	b003      	add	sp, #12
   be1de:	f85d fb04 	ldr.w	pc, [sp], #4
   be1e2:	bf00      	nop
   be1e4:	000c67cc 	.word	0x000c67cc

000be1e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   be1e8:	f100 0310 	add.w	r3, r0, #16
   be1ec:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   be1ee:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   be1f2:	2901      	cmp	r1, #1
   be1f4:	4618      	mov	r0, r3
   be1f6:	d108      	bne.n	be20a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   be1f8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   be1fc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   be200:	3a01      	subs	r2, #1
   be202:	f103 0310 	add.w	r3, r3, #16
   be206:	d1f2      	bne.n	be1ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   be208:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   be20a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   be20c:	bf04      	itt	eq
   be20e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   be212:	1852      	addeq	r2, r2, r1
   be214:	e7f4      	b.n	be200 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000be216 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   be216:	b40e      	push	{r1, r2, r3}
   be218:	b5f0      	push	{r4, r5, r6, r7, lr}
   be21a:	b088      	sub	sp, #32
   be21c:	af00      	add	r7, sp, #0
   be21e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be222:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   be224:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be228:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   be22a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be22c:	462b      	mov	r3, r5
   be22e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   be230:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be232:	f7ff f967 	bl	bd504 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   be236:	280f      	cmp	r0, #15
   be238:	687a      	ldr	r2, [r7, #4]
   be23a:	d91a      	bls.n	be272 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   be23c:	f100 0308 	add.w	r3, r0, #8
   be240:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   be244:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   be246:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be24a:	1c41      	adds	r1, r0, #1
   be24c:	462b      	mov	r3, r5
   be24e:	4668      	mov	r0, sp
        va_start(args, fmt);
   be250:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be252:	f7ff f957 	bl	bd504 <vsnprintf>
        if (n > 0) {
   be256:	1e02      	subs	r2, r0, #0
   be258:	dd04      	ble.n	be264 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   be25a:	6823      	ldr	r3, [r4, #0]
   be25c:	4669      	mov	r1, sp
   be25e:	689b      	ldr	r3, [r3, #8]
   be260:	4620      	mov	r0, r4
   be262:	4798      	blx	r3
   be264:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   be266:	3720      	adds	r7, #32
   be268:	46bd      	mov	sp, r7
   be26a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   be26e:	b003      	add	sp, #12
   be270:	4770      	bx	lr
    } else if (n > 0) {
   be272:	2800      	cmp	r0, #0
   be274:	d0f7      	beq.n	be266 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   be276:	6823      	ldr	r3, [r4, #0]
   be278:	4602      	mov	r2, r0
   be27a:	689b      	ldr	r3, [r3, #8]
   be27c:	f107 0110 	add.w	r1, r7, #16
   be280:	4620      	mov	r0, r4
   be282:	4798      	blx	r3
}
   be284:	e7ef      	b.n	be266 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000be286 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be286:	b538      	push	{r3, r4, r5, lr}
   be288:	680b      	ldr	r3, [r1, #0]
   be28a:	6003      	str	r3, [r0, #0]
   be28c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   be28e:	6843      	ldr	r3, [r0, #4]
   be290:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be292:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   be294:	d008      	beq.n	be2a8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   be296:	b115      	cbz	r5, be29e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   be298:	686b      	ldr	r3, [r5, #4]
   be29a:	3301      	adds	r3, #1
   be29c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   be29e:	6860      	ldr	r0, [r4, #4]
   be2a0:	b108      	cbz	r0, be2a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   be2a2:	f7ff f996 	bl	bd5d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   be2a6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be2a8:	bd38      	pop	{r3, r4, r5, pc}

000be2aa <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   be2aa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be2ac:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   be2ae:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be2b2:	689b      	ldr	r3, [r3, #8]
   be2b4:	2201      	movs	r2, #1
   be2b6:	f10d 0107 	add.w	r1, sp, #7
   be2ba:	4798      	blx	r3
}
   be2bc:	b003      	add	sp, #12
   be2be:	f85d fb04 	ldr.w	pc, [sp], #4

000be2c2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   be2c2:	460b      	mov	r3, r1
   be2c4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   be2c6:	2200      	movs	r2, #0
   be2c8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   be2ca:	e9c0 2200 	strd	r2, r2, [r0]
   be2ce:	4604      	mov	r4, r0
        t_ = t;
   be2d0:	6083      	str	r3, [r0, #8]
    if (t) {
   be2d2:	b90b      	cbnz	r3, be2d8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   be2d4:	4620      	mov	r0, r4
   be2d6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   be2d8:	f7ff ffd5 	bl	be286 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   be2dc:	e7fa      	b.n	be2d4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000be2de <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   be2de:	6883      	ldr	r3, [r0, #8]
   be2e0:	b1eb      	cbz	r3, be31e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   be2e2:	781a      	ldrb	r2, [r3, #0]
   be2e4:	2a03      	cmp	r2, #3
   be2e6:	d81a      	bhi.n	be31e <_ZNK5spark9JSONValue4typeEv+0x40>
   be2e8:	e8df f002 	tbb	[pc, r2]
   be2ec:	1b021704 	.word	0x1b021704
   be2f0:	2005      	movs	r0, #5
   be2f2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   be2f4:	6802      	ldr	r2, [r0, #0]
   be2f6:	685b      	ldr	r3, [r3, #4]
   be2f8:	6852      	ldr	r2, [r2, #4]
   be2fa:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   be2fc:	282d      	cmp	r0, #45	; 0x2d
   be2fe:	d012      	beq.n	be326 <_ZNK5spark9JSONValue4typeEv+0x48>
   be300:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be304:	2b09      	cmp	r3, #9
   be306:	d90e      	bls.n	be326 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   be308:	2874      	cmp	r0, #116	; 0x74
   be30a:	d00e      	beq.n	be32a <_ZNK5spark9JSONValue4typeEv+0x4c>
   be30c:	2866      	cmp	r0, #102	; 0x66
   be30e:	d00c      	beq.n	be32a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   be310:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   be314:	4258      	negs	r0, r3
   be316:	4158      	adcs	r0, r3
   be318:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   be31a:	2006      	movs	r0, #6
   be31c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   be31e:	2000      	movs	r0, #0
   be320:	4770      	bx	lr
        return JSON_TYPE_STRING;
   be322:	2004      	movs	r0, #4
   be324:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   be326:	2003      	movs	r0, #3
   be328:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   be32a:	2002      	movs	r0, #2
}
   be32c:	4770      	bx	lr

000be32e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   be32e:	b510      	push	{r4, lr}
   be330:	4604      	mov	r4, r0
    switch (type()) {
   be332:	f7ff ffd4 	bl	be2de <_ZNK5spark9JSONValue4typeEv>
   be336:	2802      	cmp	r0, #2
   be338:	d00e      	beq.n	be358 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   be33a:	1ec3      	subs	r3, r0, #3
   be33c:	b2db      	uxtb	r3, r3
   be33e:	2b01      	cmp	r3, #1
   be340:	d814      	bhi.n	be36c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   be342:	6822      	ldr	r2, [r4, #0]
   be344:	68a3      	ldr	r3, [r4, #8]
   be346:	6850      	ldr	r0, [r2, #4]
   be348:	685b      	ldr	r3, [r3, #4]
}
   be34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   be34e:	220a      	movs	r2, #10
   be350:	2100      	movs	r1, #0
   be352:	4418      	add	r0, r3
   be354:	f005 b948 	b.w	c35e8 <strtol>
        const char* const s = d_->json + t_->start;
   be358:	6822      	ldr	r2, [r4, #0]
   be35a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   be35c:	6852      	ldr	r2, [r2, #4]
   be35e:	685b      	ldr	r3, [r3, #4]
   be360:	5cd0      	ldrb	r0, [r2, r3]
   be362:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   be366:	4258      	negs	r0, r3
   be368:	4158      	adcs	r0, r3
}
   be36a:	bd10      	pop	{r4, pc}
    switch (type()) {
   be36c:	2000      	movs	r0, #0
   be36e:	e7fc      	b.n	be36a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000be370 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   be370:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be372:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   be374:	e9c0 3300 	strd	r3, r3, [r0]
   be378:	4604      	mov	r4, r0
        n_(0) {
   be37a:	480e      	ldr	r0, [pc, #56]	; (be3b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   be37c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   be380:	b1a9      	cbz	r1, be3ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   be382:	780b      	ldrb	r3, [r1, #0]
   be384:	2b03      	cmp	r3, #3
   be386:	d006      	beq.n	be396 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   be388:	b98b      	cbnz	r3, be3ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   be38a:	6813      	ldr	r3, [r2, #0]
   be38c:	6858      	ldr	r0, [r3, #4]
   be38e:	684b      	ldr	r3, [r1, #4]
   be390:	5cc3      	ldrb	r3, [r0, r3]
   be392:	2b6e      	cmp	r3, #110	; 0x6e
   be394:	d007      	beq.n	be3a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   be396:	6813      	ldr	r3, [r2, #0]
   be398:	684d      	ldr	r5, [r1, #4]
   be39a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   be39c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   be39e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   be3a0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   be3a2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   be3a4:	60e3      	str	r3, [r4, #12]
   be3a6:	4611      	mov	r1, r2
   be3a8:	4620      	mov	r0, r4
   be3aa:	f7ff ff6c 	bl	be286 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be3ae:	4620      	mov	r0, r4
   be3b0:	bd38      	pop	{r3, r4, r5, pc}
   be3b2:	bf00      	nop
   be3b4:	000c6838 	.word	0x000c6838

000be3b8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   be3b8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be3ba:	2500      	movs	r5, #0
   be3bc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   be3be:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   be3c2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   be3c6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be3ca:	4604      	mov	r4, r0
   be3cc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   be3ce:	b14b      	cbz	r3, be3e4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   be3d0:	781a      	ldrb	r2, [r3, #0]
   be3d2:	2a01      	cmp	r2, #1
   be3d4:	d106      	bne.n	be3e4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   be3d6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   be3da:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   be3dc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   be3de:	6143      	str	r3, [r0, #20]
   be3e0:	f7ff ff51 	bl	be286 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be3e4:	4620      	mov	r0, r4
   be3e6:	bd38      	pop	{r3, r4, r5, pc}

000be3e8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   be3e8:	b510      	push	{r4, lr}
    if (!n_) {
   be3ea:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   be3ec:	4604      	mov	r4, r0
    if (!n_) {
   be3ee:	b163      	cbz	r3, be40a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   be3f0:	6880      	ldr	r0, [r0, #8]
   be3f2:	60e0      	str	r0, [r4, #12]
    --n_;
   be3f4:	3b01      	subs	r3, #1
    ++t_;
   be3f6:	3010      	adds	r0, #16
   be3f8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   be3fa:	6120      	str	r0, [r4, #16]
    --n_;
   be3fc:	6163      	str	r3, [r4, #20]
    if (n_) {
   be3fe:	b113      	cbz	r3, be406 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   be400:	f7ff fef2 	bl	be1e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   be404:	60a0      	str	r0, [r4, #8]
    return true;
   be406:	2001      	movs	r0, #1
   be408:	e000      	b.n	be40c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   be40a:	4618      	mov	r0, r3
}
   be40c:	bd10      	pop	{r4, pc}

000be40e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   be40e:	b510      	push	{r4, lr}
    write('}');
   be410:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   be412:	4604      	mov	r4, r0
    write('}');
   be414:	f7ff ff49 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   be418:	2301      	movs	r3, #1
   be41a:	7123      	strb	r3, [r4, #4]
}
   be41c:	4620      	mov	r0, r4
   be41e:	bd10      	pop	{r4, pc}

000be420 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   be420:	b508      	push	{r3, lr}
    switch (state_) {
   be422:	7903      	ldrb	r3, [r0, #4]
   be424:	2b01      	cmp	r3, #1
   be426:	d002      	beq.n	be42e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   be428:	2b02      	cmp	r3, #2
   be42a:	d004      	beq.n	be436 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   be42c:	bd08      	pop	{r3, pc}
        write(',');
   be42e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   be430:	f7ff ff3b 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
}
   be434:	e7fa      	b.n	be42c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   be436:	213a      	movs	r1, #58	; 0x3a
   be438:	e7fa      	b.n	be430 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000be43a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   be43a:	b510      	push	{r4, lr}
   be43c:	4604      	mov	r4, r0
    writeSeparator();
   be43e:	f7ff ffef 	bl	be420 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   be442:	4620      	mov	r0, r4
   be444:	217b      	movs	r1, #123	; 0x7b
   be446:	f7ff ff30 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   be44a:	2300      	movs	r3, #0
   be44c:	7123      	strb	r3, [r4, #4]
}
   be44e:	4620      	mov	r0, r4
   be450:	bd10      	pop	{r4, pc}
	...

000be454 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   be454:	b513      	push	{r0, r1, r4, lr}
   be456:	4604      	mov	r4, r0
   be458:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be45a:	f7ff ffe1 	bl	be420 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   be45e:	6823      	ldr	r3, [r4, #0]
   be460:	9a01      	ldr	r2, [sp, #4]
   be462:	68db      	ldr	r3, [r3, #12]
   be464:	4903      	ldr	r1, [pc, #12]	; (be474 <_ZN5spark10JSONWriter5valueEi+0x20>)
   be466:	4620      	mov	r0, r4
   be468:	4798      	blx	r3
    state_ = NEXT;
   be46a:	2301      	movs	r3, #1
}
   be46c:	4620      	mov	r0, r4
    state_ = NEXT;
   be46e:	7123      	strb	r3, [r4, #4]
}
   be470:	b002      	add	sp, #8
   be472:	bd10      	pop	{r4, pc}
   be474:	000c4e89 	.word	0x000c4e89

000be478 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   be478:	b513      	push	{r0, r1, r4, lr}
   be47a:	4604      	mov	r4, r0
   be47c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be47e:	f7ff ffcf 	bl	be420 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   be482:	6823      	ldr	r3, [r4, #0]
   be484:	9a01      	ldr	r2, [sp, #4]
   be486:	68db      	ldr	r3, [r3, #12]
   be488:	4903      	ldr	r1, [pc, #12]	; (be498 <_ZN5spark10JSONWriter5valueEj+0x20>)
   be48a:	4620      	mov	r0, r4
   be48c:	4798      	blx	r3
    state_ = NEXT;
   be48e:	2301      	movs	r3, #1
}
   be490:	4620      	mov	r0, r4
    state_ = NEXT;
   be492:	7123      	strb	r3, [r4, #4]
}
   be494:	b002      	add	sp, #8
   be496:	bd10      	pop	{r4, pc}
   be498:	000c604a 	.word	0x000c604a

000be49c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be4a0:	460d      	mov	r5, r1
    write('"');
   be4a2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be4a4:	4690      	mov	r8, r2
   be4a6:	4604      	mov	r4, r0
    write('"');
   be4a8:	f7ff feff 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   be4ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; be554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   be4b0:	44a8      	add	r8, r5
    const char *s = str;
   be4b2:	462f      	mov	r7, r5
    while (s != end) {
   be4b4:	4547      	cmp	r7, r8
   be4b6:	46ba      	mov	sl, r7
   be4b8:	d03d      	beq.n	be536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   be4ba:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   be4be:	2e22      	cmp	r6, #34	; 0x22
   be4c0:	d006      	beq.n	be4d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be4c2:	2e5c      	cmp	r6, #92	; 0x5c
   be4c4:	d004      	beq.n	be4d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be4c6:	4630      	mov	r0, r6
   be4c8:	f004 f824 	bl	c2514 <isprint>
   be4cc:	2800      	cmp	r0, #0
   be4ce:	d1f1      	bne.n	be4b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   be4d0:	6823      	ldr	r3, [r4, #0]
   be4d2:	ebaa 0205 	sub.w	r2, sl, r5
   be4d6:	689b      	ldr	r3, [r3, #8]
   be4d8:	4629      	mov	r1, r5
   be4da:	4620      	mov	r0, r4
   be4dc:	4798      	blx	r3
            write('\\');
   be4de:	215c      	movs	r1, #92	; 0x5c
   be4e0:	4620      	mov	r0, r4
   be4e2:	f7ff fee2 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   be4e6:	2e0d      	cmp	r6, #13
   be4e8:	d80a      	bhi.n	be500 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   be4ea:	2e07      	cmp	r6, #7
   be4ec:	d91c      	bls.n	be528 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be4ee:	f1a6 0308 	sub.w	r3, r6, #8
   be4f2:	2b05      	cmp	r3, #5
   be4f4:	d818      	bhi.n	be528 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be4f6:	e8df f003 	tbb	[pc, r3]
   be4fa:	0f0d      	.short	0x0f0d
   be4fc:	15131711 	.word	0x15131711
   be500:	2e22      	cmp	r6, #34	; 0x22
   be502:	d001      	beq.n	be508 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   be504:	2e5c      	cmp	r6, #92	; 0x5c
   be506:	d10f      	bne.n	be528 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   be508:	4631      	mov	r1, r6
                write('b');
   be50a:	4620      	mov	r0, r4
   be50c:	f7ff fecd 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   be510:	463d      	mov	r5, r7
    while (s != end) {
   be512:	e7cf      	b.n	be4b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   be514:	2162      	movs	r1, #98	; 0x62
   be516:	e7f8      	b.n	be50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   be518:	2174      	movs	r1, #116	; 0x74
   be51a:	e7f6      	b.n	be50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   be51c:	216e      	movs	r1, #110	; 0x6e
   be51e:	e7f4      	b.n	be50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   be520:	2166      	movs	r1, #102	; 0x66
   be522:	e7f2      	b.n	be50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   be524:	2172      	movs	r1, #114	; 0x72
   be526:	e7f0      	b.n	be50a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   be528:	6823      	ldr	r3, [r4, #0]
   be52a:	4632      	mov	r2, r6
   be52c:	68db      	ldr	r3, [r3, #12]
   be52e:	4649      	mov	r1, r9
   be530:	4620      	mov	r0, r4
   be532:	4798      	blx	r3
                break;
   be534:	e7ec      	b.n	be510 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   be536:	42bd      	cmp	r5, r7
   be538:	d005      	beq.n	be546 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   be53a:	6823      	ldr	r3, [r4, #0]
   be53c:	1b7a      	subs	r2, r7, r5
   be53e:	689b      	ldr	r3, [r3, #8]
   be540:	4629      	mov	r1, r5
   be542:	4620      	mov	r0, r4
   be544:	4798      	blx	r3
    }
    write('"');
   be546:	2122      	movs	r1, #34	; 0x22
   be548:	4620      	mov	r0, r4
   be54a:	f7ff feae 	bl	be2aa <_ZN5spark10JSONWriter5writeEc>
}
   be54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be552:	bf00      	nop
   be554:	000c67d8 	.word	0x000c67d8

000be558 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   be558:	b513      	push	{r0, r1, r4, lr}
   be55a:	4604      	mov	r4, r0
   be55c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be560:	f7ff ff5e 	bl	be420 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   be564:	4620      	mov	r0, r4
   be566:	e9dd 2100 	ldrd	r2, r1, [sp]
   be56a:	f7ff ff97 	bl	be49c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be56e:	2302      	movs	r3, #2
}
   be570:	4620      	mov	r0, r4
    state_ = VALUE;
   be572:	7123      	strb	r3, [r4, #4]
}
   be574:	b002      	add	sp, #8
   be576:	bd10      	pop	{r4, pc}

000be578 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be578:	b513      	push	{r0, r1, r4, lr}
   be57a:	4604      	mov	r4, r0
   be57c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be580:	f7ff ff4e 	bl	be420 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be584:	4620      	mov	r0, r4
   be586:	e9dd 2100 	ldrd	r2, r1, [sp]
   be58a:	f7ff ff87 	bl	be49c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be58e:	2301      	movs	r3, #1
}
   be590:	4620      	mov	r0, r4
    state_ = NEXT;
   be592:	7123      	strb	r3, [r4, #4]
}
   be594:	b002      	add	sp, #8
   be596:	bd10      	pop	{r4, pc}

000be598 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be598:	6880      	ldr	r0, [r0, #8]
   be59a:	6803      	ldr	r3, [r0, #0]
   be59c:	68db      	ldr	r3, [r3, #12]
   be59e:	4718      	bx	r3

000be5a0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be5a0:	4770      	bx	lr

000be5a2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be5a2:	4608      	mov	r0, r1
   be5a4:	b111      	cbz	r1, be5ac <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be5a6:	680b      	ldr	r3, [r1, #0]
   be5a8:	685b      	ldr	r3, [r3, #4]
   be5aa:	4718      	bx	r3
}
   be5ac:	4770      	bx	lr

000be5ae <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be5ae:	4770      	bx	lr

000be5b0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be5b0:	4770      	bx	lr

000be5b2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be5b2:	4770      	bx	lr

000be5b4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be5b4:	4770      	bx	lr

000be5b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be5b6:	b538      	push	{r3, r4, r5, lr}
   be5b8:	4604      	mov	r4, r0
   be5ba:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be5bc:	6800      	ldr	r0, [r0, #0]
   be5be:	212e      	movs	r1, #46	; 0x2e
   be5c0:	f004 f869 	bl	c2696 <strchrnul>
    size = s - category;
   be5c4:	6823      	ldr	r3, [r4, #0]
   be5c6:	1ac3      	subs	r3, r0, r3
   be5c8:	602b      	str	r3, [r5, #0]
    if (size) {
   be5ca:	b123      	cbz	r3, be5d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be5cc:	7803      	ldrb	r3, [r0, #0]
   be5ce:	b103      	cbz	r3, be5d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be5d0:	3001      	adds	r0, #1
   be5d2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be5d4:	6020      	str	r0, [r4, #0]
}
   be5d6:	4618      	mov	r0, r3
   be5d8:	bd38      	pop	{r3, r4, r5, pc}

000be5da <_ZN5spark16JSONStreamWriterD0Ev>:
   be5da:	b510      	push	{r4, lr}
   be5dc:	210c      	movs	r1, #12
   be5de:	4604      	mov	r4, r0
   be5e0:	f7f5 fd5d 	bl	b409e <_ZdlPvj>
   be5e4:	4620      	mov	r0, r4
   be5e6:	bd10      	pop	{r4, pc}

000be5e8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be5e8:	b510      	push	{r4, lr}
   be5ea:	2104      	movs	r1, #4
   be5ec:	4604      	mov	r4, r0
   be5ee:	f7f5 fd56 	bl	b409e <_ZdlPvj>
   be5f2:	4620      	mov	r0, r4
   be5f4:	bd10      	pop	{r4, pc}

000be5f6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be5f6:	b510      	push	{r4, lr}
   be5f8:	2104      	movs	r1, #4
   be5fa:	4604      	mov	r4, r0
   be5fc:	f7f5 fd4f 	bl	b409e <_ZdlPvj>
   be600:	4620      	mov	r0, r4
   be602:	bd10      	pop	{r4, pc}

000be604 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be604:	f7fe bb72 	b.w	bccec <os_mutex_recursive_lock>

000be608 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be608:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be60a:	f004 f84e 	bl	c26aa <strcmp>
}
   be60e:	fab0 f080 	clz	r0, r0
   be612:	0940      	lsrs	r0, r0, #5
   be614:	bd08      	pop	{r3, pc}

000be616 <__tcf_1>:
   be616:	4770      	bx	lr

000be618 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be618:	b510      	push	{r4, lr}
   be61a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be61c:	f001 ff50 	bl	c04c0 <_Z16_fetch_usbserialv>
   be620:	4284      	cmp	r4, r0
   be622:	d010      	beq.n	be646 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be624:	f002 f952 	bl	c08cc <_Z22__fetch_global_Serial1v>
   be628:	4284      	cmp	r4, r0
   be62a:	d105      	bne.n	be638 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be62c:	f002 f94e 	bl	c08cc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be634:	f001 bedd 	b.w	c03f2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be638:	b12c      	cbz	r4, be646 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be63a:	6823      	ldr	r3, [r4, #0]
   be63c:	4620      	mov	r0, r4
   be63e:	685b      	ldr	r3, [r3, #4]
}
   be640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be644:	4718      	bx	r3
   be646:	bd10      	pop	{r4, pc}

000be648 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be648:	b513      	push	{r0, r1, r4, lr}
   be64a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be64c:	4608      	mov	r0, r1
   be64e:	9101      	str	r1, [sp, #4]
   be650:	f004 f85b 	bl	c270a <strlen>
   be654:	9901      	ldr	r1, [sp, #4]
   be656:	4602      	mov	r2, r0
   be658:	4620      	mov	r0, r4
}
   be65a:	b002      	add	sp, #8
   be65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be660:	f7ff bf8a 	b.w	be578 <_ZN5spark10JSONWriter5valueEPKcj>

000be664 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be664:	b513      	push	{r0, r1, r4, lr}
   be666:	4604      	mov	r4, r0
    write(str, strlen(str));
   be668:	4608      	mov	r0, r1
   be66a:	9101      	str	r1, [sp, #4]
   be66c:	f004 f84d 	bl	c270a <strlen>
   be670:	6823      	ldr	r3, [r4, #0]
   be672:	9901      	ldr	r1, [sp, #4]
   be674:	68db      	ldr	r3, [r3, #12]
   be676:	4602      	mov	r2, r0
   be678:	4620      	mov	r0, r4
}
   be67a:	b002      	add	sp, #8
   be67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be680:	4718      	bx	r3

000be682 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be682:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be684:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be686:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be68a:	68db      	ldr	r3, [r3, #12]
   be68c:	2201      	movs	r2, #1
   be68e:	f10d 0107 	add.w	r1, sp, #7
   be692:	4798      	blx	r3
}
   be694:	b003      	add	sp, #12
   be696:	f85d fb04 	ldr.w	pc, [sp], #4

000be69a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be69a:	b40e      	push	{r1, r2, r3}
   be69c:	b503      	push	{r0, r1, lr}
   be69e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be6a0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be6a2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be6a6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be6a8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be6aa:	f001 f942 	bl	bf932 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be6ae:	b002      	add	sp, #8
   be6b0:	f85d eb04 	ldr.w	lr, [sp], #4
   be6b4:	b003      	add	sp, #12
   be6b6:	4770      	bx	lr

000be6b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be6b8:	680a      	ldr	r2, [r1, #0]
   be6ba:	6002      	str	r2, [r0, #0]
   be6bc:	684a      	ldr	r2, [r1, #4]
   be6be:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be6c0:	2200      	movs	r2, #0
   be6c2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be6c6:	b510      	push	{r4, lr}
   be6c8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be6ca:	688c      	ldr	r4, [r1, #8]
   be6cc:	6084      	str	r4, [r0, #8]
   be6ce:	68cc      	ldr	r4, [r1, #12]
   be6d0:	60c4      	str	r4, [r0, #12]
   be6d2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be6d4:	608a      	str	r2, [r1, #8]
   be6d6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be6d8:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be6da:	610a      	str	r2, [r1, #16]
   be6dc:	bd10      	pop	{r4, pc}
	...

000be6e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be6e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be6e4:	e9d0 8400 	ldrd	r8, r4, [r0]
   be6e8:	f04f 0a14 	mov.w	sl, #20
   be6ec:	9300      	str	r3, [sp, #0]
   be6ee:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be6f2:	4b18      	ldr	r3, [pc, #96]	; (be754 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be6f4:	10a4      	asrs	r4, r4, #2
   be6f6:	4617      	mov	r7, r2
   be6f8:	435c      	muls	r4, r3
   be6fa:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be6fc:	2c00      	cmp	r4, #0
   be6fe:	dd21      	ble.n	be744 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be700:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be702:	fb0a f006 	mul.w	r0, sl, r6
   be706:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be70a:	463a      	mov	r2, r7
   be70c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be710:	5828      	ldr	r0, [r5, r0]
   be712:	9101      	str	r1, [sp, #4]
   be714:	455f      	cmp	r7, fp
   be716:	bf28      	it	cs
   be718:	465a      	movcs	r2, fp
   be71a:	f003 fffe 	bl	c271a <strncmp>
                if (cmp == 0) {
   be71e:	2800      	cmp	r0, #0
   be720:	9901      	ldr	r1, [sp, #4]
   be722:	f04f 0301 	mov.w	r3, #1
   be726:	d10b      	bne.n	be740 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be728:	455f      	cmp	r7, fp
   be72a:	d103      	bne.n	be734 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be72c:	9a00      	ldr	r2, [sp, #0]
   be72e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be730:	4634      	mov	r4, r6
   be732:	e7e3      	b.n	be6fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be734:	d9fc      	bls.n	be730 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be736:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be738:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be73c:	3e01      	subs	r6, #1
   be73e:	e7f7      	b.n	be730 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be740:	dbf9      	blt.n	be736 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be742:	e7f5      	b.n	be730 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be744:	eba5 0508 	sub.w	r5, r5, r8
}
   be748:	4802      	ldr	r0, [pc, #8]	; (be754 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be74a:	10ad      	asrs	r5, r5, #2
   be74c:	4368      	muls	r0, r5
   be74e:	b003      	add	sp, #12
   be750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be754:	cccccccd 	.word	0xcccccccd

000be758 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be75a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be75c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be75e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be760:	b303      	cbz	r3, be7a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be762:	b1f9      	cbz	r1, be7a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be764:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be766:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be76a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be76c:	a903      	add	r1, sp, #12
   be76e:	a801      	add	r0, sp, #4
   be770:	f7ff ff21 	bl	be5b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be774:	4601      	mov	r1, r0
   be776:	b1a8      	cbz	r0, be7a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be778:	f10d 030b 	add.w	r3, sp, #11
   be77c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be77e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be782:	4620      	mov	r0, r4
   be784:	f7ff ffac 	bl	be6e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be788:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be78c:	b153      	cbz	r3, be7a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be78e:	6823      	ldr	r3, [r4, #0]
   be790:	2414      	movs	r4, #20
   be792:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be796:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be798:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be79c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be79e:	bfa8      	it	ge
   be7a0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be7a2:	e7e3      	b.n	be76c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be7a4:	4628      	mov	r0, r5
   be7a6:	b004      	add	sp, #16
   be7a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000be7ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be7ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be7ae:	4c09      	ldr	r4, [pc, #36]	; (be7d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be7b0:	7823      	ldrb	r3, [r4, #0]
   be7b2:	f3bf 8f5b 	dmb	ish
   be7b6:	07db      	lsls	r3, r3, #31
   be7b8:	d409      	bmi.n	be7ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be7ba:	4620      	mov	r0, r4
   be7bc:	f7f5 fc7e 	bl	b40bc <__cxa_guard_acquire>
   be7c0:	b128      	cbz	r0, be7ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be7c2:	4620      	mov	r0, r4
   be7c4:	f7f5 fc7f 	bl	b40c6 <__cxa_guard_release>
   be7c8:	4803      	ldr	r0, [pc, #12]	; (be7d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be7ca:	f003 fe7f 	bl	c24cc <atexit>
}
   be7ce:	4803      	ldr	r0, [pc, #12]	; (be7dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be7d0:	bd10      	pop	{r4, pc}
   be7d2:	bf00      	nop
   be7d4:	2003e648 	.word	0x2003e648
   be7d8:	000be5af 	.word	0x000be5af
   be7dc:	2003d67c 	.word	0x2003d67c

000be7e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be7e0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be7e2:	4c09      	ldr	r4, [pc, #36]	; (be808 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be7e4:	7823      	ldrb	r3, [r4, #0]
   be7e6:	f3bf 8f5b 	dmb	ish
   be7ea:	07db      	lsls	r3, r3, #31
   be7ec:	d409      	bmi.n	be802 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be7ee:	4620      	mov	r0, r4
   be7f0:	f7f5 fc64 	bl	b40bc <__cxa_guard_acquire>
   be7f4:	b128      	cbz	r0, be802 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be7f6:	4620      	mov	r0, r4
   be7f8:	f7f5 fc65 	bl	b40c6 <__cxa_guard_release>
   be7fc:	4803      	ldr	r0, [pc, #12]	; (be80c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be7fe:	f003 fe65 	bl	c24cc <atexit>
    return &factory;
}
   be802:	4803      	ldr	r0, [pc, #12]	; (be810 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be804:	bd10      	pop	{r4, pc}
   be806:	bf00      	nop
   be808:	2003e64c 	.word	0x2003e64c
   be80c:	000be617 	.word	0x000be617
   be810:	2003d680 	.word	0x2003d680

000be814 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be814:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be816:	2500      	movs	r5, #0
   be818:	4604      	mov	r4, r0
   be81a:	e9c0 5500 	strd	r5, r5, [r0]
   be81e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be822:	6085      	str	r5, [r0, #8]
   be824:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be826:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be82a:	f7fe fa4f 	bl	bcccc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be82e:	f7ff ffbd 	bl	be7ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be832:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be834:	f7ff ffd4 	bl	be7e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be838:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be83a:	6220      	str	r0, [r4, #32]
}
   be83c:	4620      	mov	r0, r4
   be83e:	bd38      	pop	{r3, r4, r5, pc}

000be840 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be840:	b510      	push	{r4, lr}
    static LogManager mgr;
   be842:	4c0a      	ldr	r4, [pc, #40]	; (be86c <_ZN5spark10LogManager8instanceEv+0x2c>)
   be844:	7823      	ldrb	r3, [r4, #0]
   be846:	f3bf 8f5b 	dmb	ish
   be84a:	07db      	lsls	r3, r3, #31
   be84c:	d40c      	bmi.n	be868 <_ZN5spark10LogManager8instanceEv+0x28>
   be84e:	4620      	mov	r0, r4
   be850:	f7f5 fc34 	bl	b40bc <__cxa_guard_acquire>
   be854:	b140      	cbz	r0, be868 <_ZN5spark10LogManager8instanceEv+0x28>
   be856:	4806      	ldr	r0, [pc, #24]	; (be870 <_ZN5spark10LogManager8instanceEv+0x30>)
   be858:	f7ff ffdc 	bl	be814 <_ZN5spark10LogManagerC1Ev>
   be85c:	4620      	mov	r0, r4
   be85e:	f7f5 fc32 	bl	b40c6 <__cxa_guard_release>
   be862:	4804      	ldr	r0, [pc, #16]	; (be874 <_ZN5spark10LogManager8instanceEv+0x34>)
   be864:	f003 fe32 	bl	c24cc <atexit>
    return &mgr;
}
   be868:	4801      	ldr	r0, [pc, #4]	; (be870 <_ZN5spark10LogManager8instanceEv+0x30>)
   be86a:	bd10      	pop	{r4, pc}
   be86c:	2003e644 	.word	0x2003e644
   be870:	2003e654 	.word	0x2003e654
   be874:	000bed2d 	.word	0x000bed2d

000be878 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be878:	4a02      	ldr	r2, [pc, #8]	; (be884 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be87a:	4903      	ldr	r1, [pc, #12]	; (be888 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be87c:	4803      	ldr	r0, [pc, #12]	; (be88c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be87e:	2300      	movs	r3, #0
   be880:	f7fe bccc 	b.w	bd21c <log_set_callbacks>
   be884:	000beb11 	.word	0x000beb11
   be888:	000bea9d 	.word	0x000bea9d
   be88c:	000bea1d 	.word	0x000bea1d

000be890 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be890:	2300      	movs	r3, #0
   be892:	461a      	mov	r2, r3
   be894:	4619      	mov	r1, r3
   be896:	4618      	mov	r0, r3
   be898:	f7fe bcc0 	b.w	bd21c <log_set_callbacks>

000be89c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be89c:	b570      	push	{r4, r5, r6, lr}
   be89e:	b08a      	sub	sp, #40	; 0x28
   be8a0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be8a2:	4601      	mov	r1, r0
   be8a4:	a804      	add	r0, sp, #16
   be8a6:	f7fb fb46 	bl	b9f36 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be8aa:	4e14      	ldr	r6, [pc, #80]	; (be8fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be8ac:	a804      	add	r0, sp, #16
   be8ae:	f7ff fd9b 	bl	be3e8 <_ZN5spark18JSONObjectIterator4nextEv>
   be8b2:	b1e8      	cbz	r0, be8f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be8b4:	a904      	add	r1, sp, #16
   be8b6:	4668      	mov	r0, sp
   be8b8:	f7fb fb4e 	bl	b9f58 <_ZNK5spark18JSONObjectIterator4nameEv>
   be8bc:	9802      	ldr	r0, [sp, #8]
   be8be:	4631      	mov	r1, r6
   be8c0:	f7ff fea2 	bl	be608 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be8c4:	4604      	mov	r4, r0
   be8c6:	b110      	cbz	r0, be8ce <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be8c8:	1e2c      	subs	r4, r5, #0
   be8ca:	bf18      	it	ne
   be8cc:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be8ce:	a801      	add	r0, sp, #4
   be8d0:	f7f5 feee 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be8d4:	2c00      	cmp	r4, #0
   be8d6:	d0e9      	beq.n	be8ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be8d8:	a904      	add	r1, sp, #16
   be8da:	4668      	mov	r0, sp
   be8dc:	f7fb fb4d 	bl	b9f7a <_ZNK5spark18JSONObjectIterator5valueEv>
   be8e0:	4668      	mov	r0, sp
   be8e2:	f7ff fd24 	bl	be32e <_ZNK5spark9JSONValue5toIntEv>
   be8e6:	6028      	str	r0, [r5, #0]
   be8e8:	a801      	add	r0, sp, #4
   be8ea:	f7f5 fee1 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be8ee:	e7dd      	b.n	be8ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be8f0:	a805      	add	r0, sp, #20
   be8f2:	f7f5 fedd 	bl	b46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be8f6:	b00a      	add	sp, #40	; 0x28
   be8f8:	bd70      	pop	{r4, r5, r6, pc}
   be8fa:	bf00      	nop
   be8fc:	000c67de 	.word	0x000c67de

000be900 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be900:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be902:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be904:	4620      	mov	r0, r4
   be906:	4913      	ldr	r1, [pc, #76]	; (be954 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be908:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be90a:	f003 fece 	bl	c26aa <strcmp>
   be90e:	b950      	cbnz	r0, be926 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be910:	f001 fdd6 	bl	c04c0 <_Z16_fetch_usbserialv>
   be914:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be918:	f001 fdc0 	bl	c049c <_ZN9USBSerial5beginEl>
}
   be91c:	b003      	add	sp, #12
   be91e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be922:	f001 bdcd 	b.w	c04c0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be926:	490c      	ldr	r1, [pc, #48]	; (be958 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be928:	4620      	mov	r0, r4
   be92a:	f003 febe 	bl	c26aa <strcmp>
   be92e:	b978      	cbnz	r0, be950 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be930:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be934:	a901      	add	r1, sp, #4
   be936:	4628      	mov	r0, r5
        int baud = 9600;
   be938:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be93a:	f7ff ffaf 	bl	be89c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be93e:	f001 ffc5 	bl	c08cc <_Z22__fetch_global_Serial1v>
   be942:	9901      	ldr	r1, [sp, #4]
   be944:	f001 fd52 	bl	c03ec <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be948:	f001 ffc0 	bl	c08cc <_Z22__fetch_global_Serial1v>
}
   be94c:	b003      	add	sp, #12
   be94e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be950:	2000      	movs	r0, #0
   be952:	e7fb      	b.n	be94c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be954:	000c67e3 	.word	0x000c67e3
   be958:	000c67ea 	.word	0x000c67ea

000be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be95c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be95e:	e9d0 5300 	ldrd	r5, r3, [r0]
   be962:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be964:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be966:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be96a:	42ae      	cmp	r6, r5
   be96c:	d005      	beq.n	be97a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be96e:	f105 0008 	add.w	r0, r5, #8
   be972:	f7ff fff3 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be976:	3514      	adds	r5, #20
   be978:	e7f7      	b.n	be96a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be97a:	6820      	ldr	r0, [r4, #0]
   be97c:	f7fe fd9a 	bl	bd4b4 <free>
}
   be980:	4620      	mov	r0, r4
   be982:	bd70      	pop	{r4, r5, r6, pc}

000be984 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be984:	b510      	push	{r4, lr}
   be986:	4604      	mov	r4, r0
   be988:	300c      	adds	r0, #12
   be98a:	f7ff ffe7 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be98e:	4620      	mov	r0, r4
   be990:	f7fe fe33 	bl	bd5fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be994:	4620      	mov	r0, r4
   be996:	bd10      	pop	{r4, pc}

000be998 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be998:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be99a:	4b04      	ldr	r3, [pc, #16]	; (be9ac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be99c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be99e:	f840 3b04 	str.w	r3, [r0], #4
   be9a2:	f7ff ffef 	bl	be984 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be9a6:	4620      	mov	r0, r4
   be9a8:	bd10      	pop	{r4, pc}
   be9aa:	bf00      	nop
   be9ac:	000c5b10 	.word	0x000c5b10

000be9b0 <_ZN5spark16StreamLogHandlerD0Ev>:
   be9b0:	b510      	push	{r4, lr}
   be9b2:	4604      	mov	r4, r0
   be9b4:	f7ff fff0 	bl	be998 <_ZN5spark16StreamLogHandlerD1Ev>
   be9b8:	4620      	mov	r0, r4
   be9ba:	2124      	movs	r1, #36	; 0x24
   be9bc:	f7f5 fb6f 	bl	b409e <_ZdlPvj>
   be9c0:	4620      	mov	r0, r4
   be9c2:	bd10      	pop	{r4, pc}

000be9c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be9c4:	b510      	push	{r4, lr}
   be9c6:	4b03      	ldr	r3, [pc, #12]	; (be9d4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be9c8:	6003      	str	r3, [r0, #0]
   be9ca:	4604      	mov	r4, r0
   be9cc:	f7ff ffe4 	bl	be998 <_ZN5spark16StreamLogHandlerD1Ev>
   be9d0:	4620      	mov	r0, r4
   be9d2:	bd10      	pop	{r4, pc}
   be9d4:	000c6880 	.word	0x000c6880

000be9d8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be9d8:	b510      	push	{r4, lr}
   be9da:	4604      	mov	r4, r0
   be9dc:	f7ff fff2 	bl	be9c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be9e0:	4620      	mov	r0, r4
   be9e2:	2124      	movs	r1, #36	; 0x24
   be9e4:	f7f5 fb5b 	bl	b409e <_ZdlPvj>
   be9e8:	4620      	mov	r0, r4
   be9ea:	bd10      	pop	{r4, pc}

000be9ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be9ec:	2200      	movs	r2, #0
   be9ee:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be9f2:	b510      	push	{r4, lr}
        capacity_(0) {
   be9f4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be9f6:	680c      	ldr	r4, [r1, #0]
   be9f8:	6004      	str	r4, [r0, #0]
   be9fa:	684c      	ldr	r4, [r1, #4]
   be9fc:	6044      	str	r4, [r0, #4]
   be9fe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bea00:	600a      	str	r2, [r1, #0]
   bea02:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bea04:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bea06:	608a      	str	r2, [r1, #8]
}
   bea08:	bd10      	pop	{r4, pc}

000bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   bea0a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bea0c:	6803      	ldr	r3, [r0, #0]
   bea0e:	4604      	mov	r4, r0
   bea10:	6818      	ldr	r0, [r3, #0]
   bea12:	f7fe f973 	bl	bccfc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bea16:	4620      	mov	r0, r4
   bea18:	bd10      	pop	{r4, pc}
	...

000bea1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea20:	b087      	sub	sp, #28
   bea22:	4680      	mov	r8, r0
   bea24:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bea26:	4b1c      	ldr	r3, [pc, #112]	; (bea98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bea28:	685b      	ldr	r3, [r3, #4]
   bea2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bea2e:	4689      	mov	r9, r1
   bea30:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bea32:	b96b      	cbnz	r3, bea50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bea34:	f7ff ff04 	bl	be840 <_ZN5spark10LogManager8instanceEv>
   bea38:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bea3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bea3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bea40:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bea42:	f7ff fddf 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bea46:	7b23      	ldrb	r3, [r4, #12]
   bea48:	b12b      	cbz	r3, bea56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bea4a:	a805      	add	r0, sp, #20
   bea4c:	f7ff ffdd 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bea50:	b007      	add	sp, #28
   bea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bea56:	2301      	movs	r3, #1
   bea58:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bea5a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bea5e:	fa5f f989 	uxtb.w	r9, r9
   bea62:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bea66:	45aa      	cmp	sl, r5
   bea68:	d012      	beq.n	bea90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bea6a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bea6e:	4631      	mov	r1, r6
   bea70:	1d38      	adds	r0, r7, #4
   bea72:	f7ff fe71 	bl	be758 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bea76:	4581      	cmp	r9, r0
   bea78:	d3f5      	bcc.n	bea66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bea7a:	683b      	ldr	r3, [r7, #0]
   bea7c:	9a03      	ldr	r2, [sp, #12]
   bea7e:	9200      	str	r2, [sp, #0]
   bea80:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bea84:	464a      	mov	r2, r9
   bea86:	4633      	mov	r3, r6
   bea88:	4641      	mov	r1, r8
   bea8a:	4638      	mov	r0, r7
   bea8c:	47d8      	blx	fp
   bea8e:	e7ea      	b.n	bea66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bea90:	2300      	movs	r3, #0
   bea92:	7323      	strb	r3, [r4, #12]
   bea94:	e7d9      	b.n	bea4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bea96:	bf00      	nop
   bea98:	e000ed00 	.word	0xe000ed00

000bea9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bea9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beaa0:	469b      	mov	fp, r3
   beaa2:	4b1a      	ldr	r3, [pc, #104]	; (beb0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   beaa4:	685b      	ldr	r3, [r3, #4]
   beaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   beaaa:	4680      	mov	r8, r0
   beaac:	4689      	mov	r9, r1
   beaae:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   beab0:	b96b      	cbnz	r3, beace <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   beab2:	f7ff fec5 	bl	be840 <_ZN5spark10LogManager8instanceEv>
   beab6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   beab8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   beabc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beabe:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   beac0:	f7ff fda0 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   beac4:	7b23      	ldrb	r3, [r4, #12]
   beac6:	b12b      	cbz	r3, bead4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   beac8:	a801      	add	r0, sp, #4
   beaca:	f7ff ff9e 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   beace:	b003      	add	sp, #12
   bead0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bead4:	2301      	movs	r3, #1
   bead6:	7323      	strb	r3, [r4, #12]
   bead8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   beadc:	b2f6      	uxtb	r6, r6
   beade:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   beae2:	4555      	cmp	r5, sl
   beae4:	d00e      	beq.n	beb04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   beae6:	f855 7b04 	ldr.w	r7, [r5], #4
   beaea:	4659      	mov	r1, fp
   beaec:	1d38      	adds	r0, r7, #4
   beaee:	f7ff fe33 	bl	be758 <_ZNK5spark6detail9LogFilter5levelEPKc>
   beaf2:	4286      	cmp	r6, r0
   beaf4:	d3f5      	bcc.n	beae2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   beaf6:	683b      	ldr	r3, [r7, #0]
   beaf8:	464a      	mov	r2, r9
   beafa:	68db      	ldr	r3, [r3, #12]
   beafc:	4641      	mov	r1, r8
   beafe:	4638      	mov	r0, r7
   beb00:	4798      	blx	r3
   beb02:	e7ee      	b.n	beae2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   beb04:	2300      	movs	r3, #0
   beb06:	7323      	strb	r3, [r4, #12]
   beb08:	e7de      	b.n	beac8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   beb0a:	bf00      	nop
   beb0c:	e000ed00 	.word	0xe000ed00

000beb10 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   beb10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   beb14:	4b16      	ldr	r3, [pc, #88]	; (beb70 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   beb16:	685b      	ldr	r3, [r3, #4]
   beb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
   beb1c:	4605      	mov	r5, r0
   beb1e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   beb20:	bb1b      	cbnz	r3, beb6a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   beb22:	f7ff fe8d 	bl	be840 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   beb26:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   beb2a:	4604      	mov	r4, r0
   beb2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beb2e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   beb30:	f7ff fd68 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
   beb34:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   beb38:	2446      	movs	r4, #70	; 0x46
   beb3a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   beb3e:	45b0      	cmp	r8, r6
   beb40:	d109      	bne.n	beb56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   beb42:	a801      	add	r0, sp, #4
   beb44:	f7ff ff61 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   beb48:	42a5      	cmp	r5, r4
   beb4a:	bfb4      	ite	lt
   beb4c:	2000      	movlt	r0, #0
   beb4e:	2001      	movge	r0, #1
}
   beb50:	b002      	add	sp, #8
   beb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   beb56:	f856 0b04 	ldr.w	r0, [r6], #4
   beb5a:	4639      	mov	r1, r7
   beb5c:	3004      	adds	r0, #4
   beb5e:	f7ff fdfb 	bl	be758 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   beb62:	4284      	cmp	r4, r0
   beb64:	bfa8      	it	ge
   beb66:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   beb68:	e7e9      	b.n	beb3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   beb6a:	2000      	movs	r0, #0
   beb6c:	e7f0      	b.n	beb50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   beb6e:	bf00      	nop
   beb70:	e000ed00 	.word	0xe000ed00

000beb74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beb76:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   beb7a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beb7c:	4604      	mov	r4, r0
   beb7e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beb80:	db0d      	blt.n	beb9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   beb82:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   beb84:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   beb86:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   beb88:	dd04      	ble.n	beb94 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   beb8a:	00b9      	lsls	r1, r7, #2
   beb8c:	f7fe fc9a 	bl	bd4c4 <realloc>
            if (!d) {
   beb90:	b918      	cbnz	r0, beb9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   beb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   beb94:	f7fe fc8e 	bl	bd4b4 <free>
        T* d = nullptr;
   beb98:	2000      	movs	r0, #0
        data_ = d;
   beb9a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   beb9c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   beb9e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   beba0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beba2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   beba6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   beba8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bebac:	1d08      	adds	r0, r1, #4
   bebae:	f003 fcc7 	bl	c2540 <memmove>
    new(p) T(std::move(value));
   bebb2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bebb6:	6863      	ldr	r3, [r4, #4]
   bebb8:	3301      	adds	r3, #1
   bebba:	6063      	str	r3, [r4, #4]
    return true;
   bebbc:	2001      	movs	r0, #1
   bebbe:	e7e8      	b.n	beb92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bebc0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bebc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bebc2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bebc6:	4604      	mov	r4, r0
   bebc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bebca:	9301      	str	r3, [sp, #4]
   bebcc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bebce:	f7ff fd19 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bebd2:	e9d4 3200 	ldrd	r3, r2, [r4]
   bebd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bebda:	4293      	cmp	r3, r2
   bebdc:	4619      	mov	r1, r3
   bebde:	d00b      	beq.n	bebf8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bebe0:	6809      	ldr	r1, [r1, #0]
   bebe2:	42a9      	cmp	r1, r5
   bebe4:	f103 0304 	add.w	r3, r3, #4
   bebe8:	d1f7      	bne.n	bebda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bebea:	a801      	add	r0, sp, #4
   bebec:	f7ff ff0d 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bebf0:	2500      	movs	r5, #0
}
   bebf2:	4628      	mov	r0, r5
   bebf4:	b003      	add	sp, #12
   bebf6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bebf8:	4629      	mov	r1, r5
   bebfa:	4620      	mov	r0, r4
   bebfc:	f7ff ffba 	bl	beb74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bec00:	4605      	mov	r5, r0
   bec02:	2800      	cmp	r0, #0
   bec04:	d0f1      	beq.n	bebea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bec06:	6863      	ldr	r3, [r4, #4]
   bec08:	2b01      	cmp	r3, #1
   bec0a:	d101      	bne.n	bec10 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bec0c:	f7ff fe34 	bl	be878 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bec10:	a801      	add	r0, sp, #4
   bec12:	f7ff fefa 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bec16:	e7ec      	b.n	bebf2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bec18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bec18:	b570      	push	{r4, r5, r6, lr}
   bec1a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bec1c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bec20:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bec22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bec26:	4282      	cmp	r2, r0
   bec28:	d00f      	beq.n	bec4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bec2a:	4601      	mov	r1, r0
            if (*p == value) {
   bec2c:	681d      	ldr	r5, [r3, #0]
   bec2e:	f851 6b04 	ldr.w	r6, [r1], #4
   bec32:	42ae      	cmp	r6, r5
   bec34:	d107      	bne.n	bec46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec36:	1a52      	subs	r2, r2, r1
   bec38:	f003 fc82 	bl	c2540 <memmove>
    --size_;
   bec3c:	6863      	ldr	r3, [r4, #4]
   bec3e:	3b01      	subs	r3, #1
   bec40:	6063      	str	r3, [r4, #4]
    return true;
   bec42:	2001      	movs	r0, #1
}
   bec44:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bec46:	4608      	mov	r0, r1
   bec48:	e7ed      	b.n	bec26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bec4a:	2000      	movs	r0, #0
   bec4c:	e7fa      	b.n	bec44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bec4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bec4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bec50:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bec54:	4604      	mov	r4, r0
   bec56:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bec58:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bec5a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bec5c:	f7ff fcd2 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bec60:	a901      	add	r1, sp, #4
   bec62:	4620      	mov	r0, r4
   bec64:	f7ff ffd8 	bl	bec18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bec68:	b118      	cbz	r0, bec72 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bec6a:	6863      	ldr	r3, [r4, #4]
   bec6c:	b90b      	cbnz	r3, bec72 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bec6e:	f7ff fe0f 	bl	be890 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bec72:	a803      	add	r0, sp, #12
   bec74:	f7ff fec9 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bec78:	b004      	add	sp, #16
   bec7a:	bd10      	pop	{r4, pc}

000bec7c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bec7c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bec7e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bec82:	2318      	movs	r3, #24
   bec84:	4604      	mov	r4, r0
   bec86:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bec8a:	42ae      	cmp	r6, r5
   bec8c:	d015      	beq.n	becba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bec8e:	f105 0110 	add.w	r1, r5, #16
   bec92:	4620      	mov	r0, r4
   bec94:	f7ff ffc0 	bl	bec18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bec98:	6863      	ldr	r3, [r4, #4]
   bec9a:	b90b      	cbnz	r3, beca0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bec9c:	f7ff fdf8 	bl	be890 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   beca0:	69e0      	ldr	r0, [r4, #28]
   beca2:	6929      	ldr	r1, [r5, #16]
   beca4:	6803      	ldr	r3, [r0, #0]
   beca6:	68db      	ldr	r3, [r3, #12]
   beca8:	4798      	blx	r3
        if (h.stream) {
   becaa:	6969      	ldr	r1, [r5, #20]
   becac:	b119      	cbz	r1, becb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   becae:	6a20      	ldr	r0, [r4, #32]
   becb0:	6803      	ldr	r3, [r0, #0]
   becb2:	68db      	ldr	r3, [r3, #12]
   becb4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   becb6:	3518      	adds	r5, #24
   becb8:	e7e7      	b.n	bec8a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   becba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   becbe:	2618      	movs	r6, #24
   becc0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   becc4:	42ae      	cmp	r6, r5
   becc6:	d004      	beq.n	becd2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   becc8:	4628      	mov	r0, r5
   becca:	f000 ff45 	bl	bfb58 <_ZN6StringD1Ev>
   becce:	3518      	adds	r5, #24
   becd0:	e7f8      	b.n	becc4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   becd2:	2300      	movs	r3, #0
   becd4:	6163      	str	r3, [r4, #20]
}
   becd6:	bd70      	pop	{r4, r5, r6, pc}

000becd8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   becd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   becda:	4604      	mov	r4, r0
    resetSystemCallbacks();
   becdc:	f7ff fdd8 	bl	be890 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bece0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bece4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bece6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bece8:	f7ff fc8c 	bl	be604 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   becec:	4620      	mov	r0, r4
   becee:	f7ff ffc5 	bl	bec7c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   becf2:	a801      	add	r0, sp, #4
   becf4:	f7ff fe89 	bl	bea0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   becf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   becfa:	b108      	cbz	r0, bed00 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   becfc:	f7fd ffee 	bl	bccdc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bed00:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bed04:	2618      	movs	r6, #24
   bed06:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bed0a:	42ae      	cmp	r6, r5
   bed0c:	d004      	beq.n	bed18 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bed0e:	4628      	mov	r0, r5
   bed10:	f000 ff22 	bl	bfb58 <_ZN6StringD1Ev>
   bed14:	3518      	adds	r5, #24
   bed16:	e7f8      	b.n	bed0a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bed18:	6920      	ldr	r0, [r4, #16]
   bed1a:	f7fe fbcb 	bl	bd4b4 <free>
   bed1e:	6820      	ldr	r0, [r4, #0]
   bed20:	f7fe fbc8 	bl	bd4b4 <free>
}
   bed24:	4620      	mov	r0, r4
   bed26:	b002      	add	sp, #8
   bed28:	bd70      	pop	{r4, r5, r6, pc}
	...

000bed2c <__tcf_2>:
    static LogManager mgr;
   bed2c:	4801      	ldr	r0, [pc, #4]	; (bed34 <__tcf_2+0x8>)
   bed2e:	f7ff bfd3 	b.w	becd8 <_ZN5spark10LogManagerD1Ev>
   bed32:	bf00      	nop
   bed34:	2003e654 	.word	0x2003e654

000bed38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bed38:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed3c:	4604      	mov	r4, r0
   bed3e:	460d      	mov	r5, r1
   bed40:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed42:	d915      	bls.n	bed70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bed44:	4290      	cmp	r0, r2
   bed46:	d214      	bcs.n	bed72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bed48:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bed4c:	1a75      	subs	r5, r6, r1
   bed4e:	f1a1 0714 	sub.w	r7, r1, #20
   bed52:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bed54:	42b7      	cmp	r7, r6
   bed56:	d01a      	beq.n	bed8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bed58:	b11c      	cbz	r4, bed62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bed5a:	4631      	mov	r1, r6
   bed5c:	4620      	mov	r0, r4
   bed5e:	f7ff fcab 	bl	be6b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bed62:	f106 0008 	add.w	r0, r6, #8
   bed66:	f7ff fdf9 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bed6a:	3e14      	subs	r6, #20
   bed6c:	3c14      	subs	r4, #20
   bed6e:	e7f1      	b.n	bed54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bed70:	d00d      	beq.n	bed8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bed72:	42b5      	cmp	r5, r6
   bed74:	d00b      	beq.n	bed8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bed76:	b11c      	cbz	r4, bed80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bed78:	4629      	mov	r1, r5
   bed7a:	4620      	mov	r0, r4
   bed7c:	f7ff fc9c 	bl	be6b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bed80:	f105 0008 	add.w	r0, r5, #8
   bed84:	f7ff fdea 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bed88:	3514      	adds	r5, #20
   bed8a:	3414      	adds	r4, #20
   bed8c:	e7f1      	b.n	bed72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bed8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bed90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed94:	4604      	mov	r4, r0
   bed96:	460d      	mov	r5, r1
   bed98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed9a:	d914      	bls.n	bedc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bed9c:	4290      	cmp	r0, r2
   bed9e:	d213      	bcs.n	bedc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   beda0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   beda4:	1a75      	subs	r5, r6, r1
   beda6:	f1a1 0710 	sub.w	r7, r1, #16
   bedaa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bedac:	42b7      	cmp	r7, r6
   bedae:	d018      	beq.n	bede2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bedb0:	b11c      	cbz	r4, bedba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bedb2:	4631      	mov	r1, r6
   bedb4:	4620      	mov	r0, r4
   bedb6:	f000 ff4b 	bl	bfc50 <_ZN6StringC1EOS_>
                end->~T();
   bedba:	4630      	mov	r0, r6
   bedbc:	f000 fecc 	bl	bfb58 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bedc0:	3e10      	subs	r6, #16
   bedc2:	3c10      	subs	r4, #16
   bedc4:	e7f2      	b.n	bedac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bedc6:	d00c      	beq.n	bede2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bedc8:	42b5      	cmp	r5, r6
   bedca:	d00a      	beq.n	bede2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bedcc:	b11c      	cbz	r4, bedd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bedce:	4629      	mov	r1, r5
   bedd0:	4620      	mov	r0, r4
   bedd2:	f000 ff3d 	bl	bfc50 <_ZN6StringC1EOS_>
                p->~T();
   bedd6:	4628      	mov	r0, r5
   bedd8:	f000 febe 	bl	bfb58 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   beddc:	3510      	adds	r5, #16
   bedde:	3410      	adds	r4, #16
   bede0:	e7f2      	b.n	bedc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bede4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bede4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bede6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bede8:	4605      	mov	r5, r0
        if (n > 0) {
   bedea:	dd11      	ble.n	bee10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bedec:	0130      	lsls	r0, r6, #4
   bedee:	f7fe fb59 	bl	bd4a4 <malloc>
            if (!d) {
   bedf2:	4604      	mov	r4, r0
   bedf4:	b158      	cbz	r0, bee0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bedf6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bedfa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bedfe:	f7ff ffc7 	bl	bed90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bee02:	6828      	ldr	r0, [r5, #0]
   bee04:	f7fe fb56 	bl	bd4b4 <free>
        data_ = d;
   bee08:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bee0a:	60ae      	str	r6, [r5, #8]
        return true;
   bee0c:	2001      	movs	r0, #1
    }
   bee0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bee10:	2400      	movs	r4, #0
   bee12:	e7f6      	b.n	bee02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bee14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bee18:	4690      	mov	r8, r2
   bee1a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bee1c:	2300      	movs	r3, #0
   bee1e:	9103      	str	r1, [sp, #12]
    return size_;
   bee20:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bee24:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bee26:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bee28:	4299      	cmp	r1, r3
        capacity_(0) {
   bee2a:	e9c0 3300 	strd	r3, r3, [r0]
   bee2e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bee32:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bee36:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bee3a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bee3c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bee3e:	dc23      	bgt.n	bee88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bee40:	e9d8 5700 	ldrd	r5, r7, [r8]
   bee44:	2314      	movs	r3, #20
   bee46:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bee4a:	42af      	cmp	r7, r5
   bee4c:	d03b      	beq.n	beec6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bee4e:	4629      	mov	r1, r5
   bee50:	a80b      	add	r0, sp, #44	; 0x2c
   bee52:	f000 fefd 	bl	bfc50 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bee56:	a90b      	add	r1, sp, #44	; 0x2c
   bee58:	a80f      	add	r0, sp, #60	; 0x3c
   bee5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bee5c:	f000 fef8 	bl	bfc50 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bee60:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bee64:	4299      	cmp	r1, r3
   bee66:	da1b      	bge.n	beea0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bee68:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bee6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bee6c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bee70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bee74:	4631      	mov	r1, r6
   bee76:	f106 0010 	add.w	r0, r6, #16
   bee7a:	f7ff ff89 	bl	bed90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bee7e:	b9ee      	cbnz	r6, beebc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bee80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bee82:	3301      	adds	r3, #1
   bee84:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bee86:	e011      	b.n	beeac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bee88:	a808      	add	r0, sp, #32
   bee8a:	f7ff ffab 	bl	bede4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bee8e:	2800      	cmp	r0, #0
   bee90:	d1d6      	bne.n	bee40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bee92:	a808      	add	r0, sp, #32
   bee94:	f7fe fbb1 	bl	bd5fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bee98:	4620      	mov	r0, r4
   bee9a:	b015      	add	sp, #84	; 0x54
   bee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beea0:	3101      	adds	r1, #1
   beea2:	a808      	add	r0, sp, #32
   beea4:	f7ff ff9e 	bl	bede4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   beea8:	2800      	cmp	r0, #0
   beeaa:	d1dd      	bne.n	bee68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   beeac:	a80f      	add	r0, sp, #60	; 0x3c
   beeae:	f000 fe53 	bl	bfb58 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   beeb2:	a80b      	add	r0, sp, #44	; 0x2c
   beeb4:	f000 fe50 	bl	bfb58 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   beeb8:	3514      	adds	r5, #20
   beeba:	e7c6      	b.n	bee4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   beebc:	a90f      	add	r1, sp, #60	; 0x3c
   beebe:	4630      	mov	r0, r6
   beec0:	f000 fec6 	bl	bfc50 <_ZN6StringC1EOS_>
   beec4:	e7dc      	b.n	bee80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   beec6:	2600      	movs	r6, #0
   beec8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   beecc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   beece:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   beed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   beed6:	429e      	cmp	r6, r3
   beed8:	da7c      	bge.n	befd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   beeda:	0133      	lsls	r3, r6, #4
   beedc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   beede:	9306      	str	r3, [sp, #24]
        if (!category) {
   beee0:	b90b      	cbnz	r3, beee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   beee2:	3601      	adds	r6, #1
   beee4:	e7f5      	b.n	beed2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   beee6:	2300      	movs	r3, #0
   beee8:	9307      	str	r3, [sp, #28]
   beeea:	fb09 f306 	mul.w	r3, r9, r6
   beeee:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   beef0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   beef2:	a907      	add	r1, sp, #28
   beef4:	a806      	add	r0, sp, #24
   beef6:	f7ff fb5e 	bl	be5b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   beefa:	4682      	mov	sl, r0
   beefc:	2800      	cmp	r0, #0
   beefe:	d0f0      	beq.n	beee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bef00:	f04f 0300 	mov.w	r3, #0
   bef04:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bef08:	4601      	mov	r1, r0
   bef0a:	9a07      	ldr	r2, [sp, #28]
   bef0c:	f10d 0317 	add.w	r3, sp, #23
   bef10:	4628      	mov	r0, r5
   bef12:	f7ff fbe5 	bl	be6e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bef16:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bef1a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bef1c:	2f00      	cmp	r7, #0
   bef1e:	d14a      	bne.n	befb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bef20:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bef24:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bef28:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bef2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bef30:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bef34:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bef38:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef3a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bef3e:	4293      	cmp	r3, r2
   bef40:	db17      	blt.n	bef72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bef42:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bef46:	f1ba 0f00 	cmp.w	sl, #0
   bef4a:	dd30      	ble.n	befae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bef4c:	fb09 f00a 	mul.w	r0, r9, sl
   bef50:	f7fe faa8 	bl	bd4a4 <malloc>
            if (!d) {
   bef54:	4683      	mov	fp, r0
   bef56:	b360      	cbz	r0, befb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bef58:	e9d5 1200 	ldrd	r1, r2, [r5]
   bef5c:	fb09 1202 	mla	r2, r9, r2, r1
   bef60:	f7ff feea 	bl	bed38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bef64:	6828      	ldr	r0, [r5, #0]
   bef66:	f7fe faa5 	bl	bd4b4 <free>
        data_ = d;
   bef6a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bef6e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bef72:	682b      	ldr	r3, [r5, #0]
   bef74:	9a01      	ldr	r2, [sp, #4]
   bef76:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bef7a:	686a      	ldr	r2, [r5, #4]
   bef7c:	4651      	mov	r1, sl
   bef7e:	fb09 3202 	mla	r2, r9, r2, r3
   bef82:	f10a 0014 	add.w	r0, sl, #20
   bef86:	f7ff fed7 	bl	bed38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bef8a:	f1ba 0f00 	cmp.w	sl, #0
   bef8e:	d003      	beq.n	bef98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bef90:	a90f      	add	r1, sp, #60	; 0x3c
   bef92:	4650      	mov	r0, sl
   bef94:	f7ff fb90 	bl	be6b8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bef98:	686b      	ldr	r3, [r5, #4]
   bef9a:	3301      	adds	r3, #1
   bef9c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bef9e:	a811      	add	r0, sp, #68	; 0x44
   befa0:	f7ff fcdc 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   befa4:	b13f      	cbz	r7, befb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   befa6:	a80b      	add	r0, sp, #44	; 0x2c
   befa8:	f7ff fcd8 	bl	be95c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   befac:	e771      	b.n	bee92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   befae:	46bb      	mov	fp, r7
   befb0:	e7d8      	b.n	bef64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   befb2:	2701      	movs	r7, #1
   befb4:	e7f3      	b.n	bef9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   befb6:	9b01      	ldr	r3, [sp, #4]
   befb8:	682d      	ldr	r5, [r5, #0]
   befba:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   befbe:	9b06      	ldr	r3, [sp, #24]
   befc0:	781b      	ldrb	r3, [r3, #0]
   befc2:	b92b      	cbnz	r3, befd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   befc4:	f8d8 3000 	ldr.w	r3, [r8]
   befc8:	9a02      	ldr	r2, [sp, #8]
   befca:	4413      	add	r3, r2
   befcc:	7c1b      	ldrb	r3, [r3, #16]
   befce:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   befd0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   befd2:	e78e      	b.n	beef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   befd4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   befd6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   befd8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   befda:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   befdc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   befde:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   befe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   befe2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   befe4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   befe6:	60a2      	str	r2, [r4, #8]
   befe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   befea:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   befec:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   befee:	60e2      	str	r2, [r4, #12]
   beff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   beff2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beff4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   beff6:	6122      	str	r2, [r4, #16]
   beff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   beffa:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   beffc:	9b03      	ldr	r3, [sp, #12]
   beffe:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bf000:	6162      	str	r2, [r4, #20]
   bf002:	7623      	strb	r3, [r4, #24]
   bf004:	e7cf      	b.n	befa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bf008 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bf008:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf00a:	4604      	mov	r4, r0
   bf00c:	b087      	sub	sp, #28
   bf00e:	460d      	mov	r5, r1
        filter_(level, filters) {
   bf010:	4626      	mov	r6, r4
        stream_(&stream) {
   bf012:	4619      	mov	r1, r3
   bf014:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bf016:	4617      	mov	r7, r2
        stream_(&stream) {
   bf018:	f7f8 f827 	bl	b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bf01c:	4b0b      	ldr	r3, [pc, #44]	; (bf04c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bf01e:	f846 3b04 	str.w	r3, [r6], #4
   bf022:	4669      	mov	r1, sp
   bf024:	a803      	add	r0, sp, #12
   bf026:	f7f8 f820 	bl	b706a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bf02a:	aa03      	add	r2, sp, #12
   bf02c:	4639      	mov	r1, r7
   bf02e:	4630      	mov	r0, r6
   bf030:	f7ff fef0 	bl	bee14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf034:	a803      	add	r0, sp, #12
   bf036:	f7f7 ffd7 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bf03a:	4668      	mov	r0, sp
   bf03c:	f7f7 ffd4 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bf040:	4b03      	ldr	r3, [pc, #12]	; (bf050 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bf042:	6023      	str	r3, [r4, #0]
}
   bf044:	4620      	mov	r0, r4
        stream_(&stream) {
   bf046:	6225      	str	r5, [r4, #32]
}
   bf048:	b007      	add	sp, #28
   bf04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf04c:	000c5b10 	.word	0x000c5b10
   bf050:	000c6868 	.word	0x000c6868

000bf054 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bf054:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf056:	460f      	mov	r7, r1
   bf058:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf05a:	491d      	ldr	r1, [pc, #116]	; (bf0d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bf05c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf05e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bf060:	4616      	mov	r6, r2
   bf062:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf064:	f003 fb21 	bl	c26aa <strcmp>
   bf068:	b9c0      	cbnz	r0, bf09c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bf06a:	b1a4      	cbz	r4, bf096 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bf06c:	4629      	mov	r1, r5
   bf06e:	a801      	add	r0, sp, #4
   bf070:	f7ff fcbc 	bl	be9ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bf074:	4917      	ldr	r1, [pc, #92]	; (bf0d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bf076:	2024      	movs	r0, #36	; 0x24
   bf078:	f001 fc4c 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   bf07c:	4605      	mov	r5, r0
   bf07e:	b130      	cbz	r0, bf08e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bf080:	ab01      	add	r3, sp, #4
   bf082:	4632      	mov	r2, r6
   bf084:	4621      	mov	r1, r4
   bf086:	f7ff ffbf 	bl	bf008 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf08a:	4b13      	ldr	r3, [pc, #76]	; (bf0d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bf08c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf08e:	a801      	add	r0, sp, #4
   bf090:	f7f7 ffaa 	bl	b6fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bf094:	462c      	mov	r4, r5
}
   bf096:	4620      	mov	r0, r4
   bf098:	b005      	add	sp, #20
   bf09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bf09c:	490f      	ldr	r1, [pc, #60]	; (bf0dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bf09e:	4638      	mov	r0, r7
   bf0a0:	f003 fb03 	bl	c26aa <strcmp>
   bf0a4:	b990      	cbnz	r0, bf0cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bf0a6:	2c00      	cmp	r4, #0
   bf0a8:	d0f5      	beq.n	bf096 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf0aa:	4629      	mov	r1, r5
   bf0ac:	a801      	add	r0, sp, #4
   bf0ae:	f7ff fc9d 	bl	be9ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bf0b2:	4908      	ldr	r1, [pc, #32]	; (bf0d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bf0b4:	2024      	movs	r0, #36	; 0x24
   bf0b6:	f001 fc2d 	bl	c0914 <_ZnwjRKSt9nothrow_t>
   bf0ba:	4605      	mov	r5, r0
   bf0bc:	2800      	cmp	r0, #0
   bf0be:	d0e6      	beq.n	bf08e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bf0c0:	ab01      	add	r3, sp, #4
   bf0c2:	4632      	mov	r2, r6
   bf0c4:	4621      	mov	r1, r4
   bf0c6:	f7ff ff9f 	bl	bf008 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf0ca:	e7e0      	b.n	bf08e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bf0cc:	2400      	movs	r4, #0
   bf0ce:	e7e2      	b.n	bf096 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bf0d0:	000c67f2 	.word	0x000c67f2
   bf0d4:	000c69bc 	.word	0x000c69bc
   bf0d8:	000c6880 	.word	0x000c6880
   bf0dc:	000c67f6 	.word	0x000c67f6

000bf0e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bf0e0:	4b01      	ldr	r3, [pc, #4]	; (bf0e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bf0e2:	4a02      	ldr	r2, [pc, #8]	; (bf0ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bf0e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bf0e6:	4770      	bx	lr
   bf0e8:	2003e650 	.word	0x2003e650
   bf0ec:	000c6807 	.word	0x000c6807

000bf0f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf0f4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bf0f6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf0fa:	4604      	mov	r4, r0
   bf0fc:	460e      	mov	r6, r1
   bf0fe:	4617      	mov	r7, r2
   bf100:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bf102:	f001 f9dd 	bl	c04c0 <_Z16_fetch_usbserialv>
   bf106:	4581      	cmp	r9, r0
   bf108:	d04c      	beq.n	bf1a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bf10a:	792b      	ldrb	r3, [r5, #4]
   bf10c:	0719      	lsls	r1, r3, #28
   bf10e:	d504      	bpl.n	bf11a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bf110:	696a      	ldr	r2, [r5, #20]
   bf112:	4954      	ldr	r1, [pc, #336]	; (bf264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bf114:	4620      	mov	r0, r4
   bf116:	f7ff fac0 	bl	be69a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bf11a:	f1b8 0f00 	cmp.w	r8, #0
   bf11e:	d00d      	beq.n	bf13c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bf120:	215b      	movs	r1, #91	; 0x5b
   bf122:	4620      	mov	r0, r4
   bf124:	f7ff faad 	bl	be682 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bf128:	4641      	mov	r1, r8
   bf12a:	4620      	mov	r0, r4
   bf12c:	f7ff fa9a 	bl	be664 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bf130:	6823      	ldr	r3, [r4, #0]
   bf132:	494d      	ldr	r1, [pc, #308]	; (bf268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bf134:	68db      	ldr	r3, [r3, #12]
   bf136:	2202      	movs	r2, #2
   bf138:	4620      	mov	r0, r4
   bf13a:	4798      	blx	r3
    if (attr.has_file) {
   bf13c:	792b      	ldrb	r3, [r5, #4]
   bf13e:	07da      	lsls	r2, r3, #31
   bf140:	d523      	bpl.n	bf18a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bf142:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bf146:	212f      	movs	r1, #47	; 0x2f
   bf148:	4640      	mov	r0, r8
   bf14a:	f003 fb0d 	bl	c2768 <strrchr>
    if (s1) {
   bf14e:	b108      	cbz	r0, bf154 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bf150:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bf154:	4641      	mov	r1, r8
   bf156:	4620      	mov	r0, r4
   bf158:	f7ff fa84 	bl	be664 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bf15c:	792b      	ldrb	r3, [r5, #4]
   bf15e:	079b      	lsls	r3, r3, #30
   bf160:	d508      	bpl.n	bf174 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bf162:	213a      	movs	r1, #58	; 0x3a
   bf164:	4620      	mov	r0, r4
   bf166:	f7ff fa8c 	bl	be682 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bf16a:	68ea      	ldr	r2, [r5, #12]
   bf16c:	493f      	ldr	r1, [pc, #252]	; (bf26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bf16e:	4620      	mov	r0, r4
   bf170:	f7ff fa93 	bl	be69a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bf174:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bf176:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bf178:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bf17c:	68db      	ldr	r3, [r3, #12]
   bf17e:	bf14      	ite	ne
   bf180:	493b      	ldrne	r1, [pc, #236]	; (bf270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bf182:	493c      	ldreq	r1, [pc, #240]	; (bf274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bf184:	2202      	movs	r2, #2
            write(": ", 2);
   bf186:	4620      	mov	r0, r4
   bf188:	4798      	blx	r3
    if (attr.has_function) {
   bf18a:	792b      	ldrb	r3, [r5, #4]
   bf18c:	0758      	lsls	r0, r3, #29
   bf18e:	d51d      	bpl.n	bf1cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf190:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf192:	460b      	mov	r3, r1
   bf194:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bf196:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf19a:	b160      	cbz	r0, bf1b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bf19c:	2820      	cmp	r0, #32
   bf19e:	d108      	bne.n	bf1b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bf1a0:	4619      	mov	r1, r3
   bf1a2:	e7f7      	b.n	bf194 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bf1a4:	4834      	ldr	r0, [pc, #208]	; (bf278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bf1a6:	f000 f966 	bl	bf476 <_ZN5spark12NetworkClass9listeningEv>
   bf1aa:	2800      	cmp	r0, #0
   bf1ac:	d0ad      	beq.n	bf10a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bf1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bf1b2:	2828      	cmp	r0, #40	; 0x28
   bf1b4:	d1ee      	bne.n	bf194 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bf1b6:	6823      	ldr	r3, [r4, #0]
   bf1b8:	1a52      	subs	r2, r2, r1
   bf1ba:	68db      	ldr	r3, [r3, #12]
   bf1bc:	4620      	mov	r0, r4
   bf1be:	4798      	blx	r3
        write("(): ", 4);
   bf1c0:	6823      	ldr	r3, [r4, #0]
   bf1c2:	492e      	ldr	r1, [pc, #184]	; (bf27c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bf1c4:	68db      	ldr	r3, [r3, #12]
   bf1c6:	2204      	movs	r2, #4
   bf1c8:	4620      	mov	r0, r4
   bf1ca:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bf1cc:	2100      	movs	r1, #0
   bf1ce:	4638      	mov	r0, r7
   bf1d0:	f7fe f81c 	bl	bd20c <log_level_name>
   bf1d4:	4601      	mov	r1, r0
    write(s);
   bf1d6:	4620      	mov	r0, r4
   bf1d8:	f7ff fa44 	bl	be664 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bf1dc:	6823      	ldr	r3, [r4, #0]
   bf1de:	4925      	ldr	r1, [pc, #148]	; (bf274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bf1e0:	68db      	ldr	r3, [r3, #12]
   bf1e2:	2202      	movs	r2, #2
   bf1e4:	4620      	mov	r0, r4
   bf1e6:	4798      	blx	r3
    if (msg) {
   bf1e8:	b11e      	cbz	r6, bf1f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bf1ea:	4631      	mov	r1, r6
   bf1ec:	4620      	mov	r0, r4
   bf1ee:	f7ff fa39 	bl	be664 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bf1f2:	792b      	ldrb	r3, [r5, #4]
   bf1f4:	f013 0f30 	tst.w	r3, #48	; 0x30
   bf1f8:	d02c      	beq.n	bf254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bf1fa:	6823      	ldr	r3, [r4, #0]
   bf1fc:	4920      	ldr	r1, [pc, #128]	; (bf280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bf1fe:	68db      	ldr	r3, [r3, #12]
   bf200:	2202      	movs	r2, #2
   bf202:	4620      	mov	r0, r4
   bf204:	4798      	blx	r3
        if (attr.has_code) {
   bf206:	792b      	ldrb	r3, [r5, #4]
   bf208:	06d9      	lsls	r1, r3, #27
   bf20a:	d50a      	bpl.n	bf222 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bf20c:	6823      	ldr	r3, [r4, #0]
   bf20e:	491d      	ldr	r1, [pc, #116]	; (bf284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bf210:	68db      	ldr	r3, [r3, #12]
   bf212:	2207      	movs	r2, #7
   bf214:	4620      	mov	r0, r4
   bf216:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bf218:	69aa      	ldr	r2, [r5, #24]
   bf21a:	491b      	ldr	r1, [pc, #108]	; (bf288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bf21c:	4620      	mov	r0, r4
   bf21e:	f7ff fa3c 	bl	be69a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bf222:	792b      	ldrb	r3, [r5, #4]
   bf224:	069a      	lsls	r2, r3, #26
   bf226:	d511      	bpl.n	bf24c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bf228:	06db      	lsls	r3, r3, #27
   bf22a:	d505      	bpl.n	bf238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bf22c:	6823      	ldr	r3, [r4, #0]
   bf22e:	4910      	ldr	r1, [pc, #64]	; (bf270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bf230:	68db      	ldr	r3, [r3, #12]
   bf232:	2202      	movs	r2, #2
   bf234:	4620      	mov	r0, r4
   bf236:	4798      	blx	r3
            write("details = ", 10);
   bf238:	6823      	ldr	r3, [r4, #0]
   bf23a:	4914      	ldr	r1, [pc, #80]	; (bf28c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bf23c:	68db      	ldr	r3, [r3, #12]
   bf23e:	4620      	mov	r0, r4
   bf240:	220a      	movs	r2, #10
   bf242:	4798      	blx	r3
            write(attr.details);
   bf244:	69e9      	ldr	r1, [r5, #28]
   bf246:	4620      	mov	r0, r4
   bf248:	f7ff fa0c 	bl	be664 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bf24c:	215d      	movs	r1, #93	; 0x5d
   bf24e:	4620      	mov	r0, r4
   bf250:	f7ff fa17 	bl	be682 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bf254:	6823      	ldr	r3, [r4, #0]
   bf256:	490e      	ldr	r1, [pc, #56]	; (bf290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bf258:	68db      	ldr	r3, [r3, #12]
   bf25a:	4620      	mov	r0, r4
   bf25c:	2202      	movs	r2, #2
}
   bf25e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bf262:	4718      	bx	r3
   bf264:	000c680b 	.word	0x000c680b
   bf268:	000c6812 	.word	0x000c6812
   bf26c:	000c4e89 	.word	0x000c4e89
   bf270:	000c6815 	.word	0x000c6815
   bf274:	000c681a 	.word	0x000c681a
   bf278:	2003e67c 	.word	0x2003e67c
   bf27c:	000c6818 	.word	0x000c6818
   bf280:	000c681d 	.word	0x000c681d
   bf284:	000c6820 	.word	0x000c6820
   bf288:	000c6828 	.word	0x000c6828
   bf28c:	000c682b 	.word	0x000c682b
   bf290:	000c6836 	.word	0x000c6836

000bf294 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf298:	b085      	sub	sp, #20
    return stream_;
   bf29a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bf29e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bf2a0:	4605      	mov	r5, r0
   bf2a2:	460f      	mov	r7, r1
   bf2a4:	4690      	mov	r8, r2
   bf2a6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bf2a8:	f001 f90a 	bl	c04c0 <_Z16_fetch_usbserialv>
   bf2ac:	4581      	cmp	r9, r0
   bf2ae:	d105      	bne.n	bf2bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bf2b0:	4849      	ldr	r0, [pc, #292]	; (bf3d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bf2b2:	f000 f8e0 	bl	bf476 <_ZN5spark12NetworkClass9listeningEv>
   bf2b6:	2800      	cmp	r0, #0
   bf2b8:	f040 808a 	bne.w	bf3d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bf2bc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bf2be:	4a47      	ldr	r2, [pc, #284]	; (bf3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bf2c0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bf2c2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bf2c6:	a801      	add	r0, sp, #4
        strm_(stream) {
   bf2c8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bf2ca:	f88d 9008 	strb.w	r9, [sp, #8]
   bf2ce:	f7ff f8b4 	bl	be43a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bf2d2:	4649      	mov	r1, r9
   bf2d4:	4640      	mov	r0, r8
   bf2d6:	f7fd ff99 	bl	bd20c <log_level_name>
    json.name("l", 1).value(s);
   bf2da:	4941      	ldr	r1, [pc, #260]	; (bf3e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bf2dc:	4680      	mov	r8, r0
   bf2de:	2201      	movs	r2, #1
   bf2e0:	a801      	add	r0, sp, #4
   bf2e2:	f7ff f939 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf2e6:	4641      	mov	r1, r8
   bf2e8:	f7ff f9ae 	bl	be648 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bf2ec:	b13f      	cbz	r7, bf2fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bf2ee:	493d      	ldr	r1, [pc, #244]	; (bf3e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bf2f0:	2201      	movs	r2, #1
   bf2f2:	a801      	add	r0, sp, #4
   bf2f4:	f7ff f930 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf2f8:	4639      	mov	r1, r7
   bf2fa:	f7ff f9a5 	bl	be648 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bf2fe:	b13e      	cbz	r6, bf310 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bf300:	4939      	ldr	r1, [pc, #228]	; (bf3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bf302:	2201      	movs	r2, #1
   bf304:	a801      	add	r0, sp, #4
   bf306:	f7ff f927 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf30a:	4631      	mov	r1, r6
   bf30c:	f7ff f99c 	bl	be648 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bf310:	7923      	ldrb	r3, [r4, #4]
   bf312:	07df      	lsls	r7, r3, #31
   bf314:	d50e      	bpl.n	bf334 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bf316:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bf318:	212f      	movs	r1, #47	; 0x2f
   bf31a:	4630      	mov	r0, r6
   bf31c:	f003 fa24 	bl	c2768 <strrchr>
    if (s1) {
   bf320:	b100      	cbz	r0, bf324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bf322:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bf324:	4931      	ldr	r1, [pc, #196]	; (bf3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bf326:	2201      	movs	r2, #1
   bf328:	a801      	add	r0, sp, #4
   bf32a:	f7ff f915 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf32e:	4631      	mov	r1, r6
   bf330:	f7ff f98a 	bl	be648 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bf334:	7923      	ldrb	r3, [r4, #4]
   bf336:	079e      	lsls	r6, r3, #30
   bf338:	d507      	bpl.n	bf34a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bf33a:	492d      	ldr	r1, [pc, #180]	; (bf3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bf33c:	2202      	movs	r2, #2
   bf33e:	a801      	add	r0, sp, #4
   bf340:	f7ff f90a 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf344:	68e1      	ldr	r1, [r4, #12]
   bf346:	f7ff f885 	bl	be454 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bf34a:	7923      	ldrb	r3, [r4, #4]
   bf34c:	0758      	lsls	r0, r3, #29
   bf34e:	d514      	bpl.n	bf37a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf350:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf352:	4633      	mov	r3, r6
   bf354:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bf356:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf35a:	b12a      	cbz	r2, bf368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bf35c:	2a20      	cmp	r2, #32
   bf35e:	d101      	bne.n	bf364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bf360:	461e      	mov	r6, r3
   bf362:	e7f7      	b.n	bf354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bf364:	2a28      	cmp	r2, #40	; 0x28
   bf366:	d1f5      	bne.n	bf354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bf368:	4922      	ldr	r1, [pc, #136]	; (bf3f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bf36a:	2202      	movs	r2, #2
   bf36c:	a801      	add	r0, sp, #4
   bf36e:	f7ff f8f3 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf372:	1bba      	subs	r2, r7, r6
   bf374:	4631      	mov	r1, r6
   bf376:	f7ff f8ff 	bl	be578 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bf37a:	7923      	ldrb	r3, [r4, #4]
   bf37c:	0719      	lsls	r1, r3, #28
   bf37e:	d507      	bpl.n	bf390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bf380:	491d      	ldr	r1, [pc, #116]	; (bf3f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bf382:	2201      	movs	r2, #1
   bf384:	a801      	add	r0, sp, #4
   bf386:	f7ff f8e7 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf38a:	6961      	ldr	r1, [r4, #20]
   bf38c:	f7ff f874 	bl	be478 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bf390:	7923      	ldrb	r3, [r4, #4]
   bf392:	06da      	lsls	r2, r3, #27
   bf394:	d508      	bpl.n	bf3a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bf396:	2204      	movs	r2, #4
   bf398:	4918      	ldr	r1, [pc, #96]	; (bf3fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bf39a:	eb0d 0002 	add.w	r0, sp, r2
   bf39e:	f7ff f8db 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf3a2:	69a1      	ldr	r1, [r4, #24]
   bf3a4:	f7ff f856 	bl	be454 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bf3a8:	7923      	ldrb	r3, [r4, #4]
   bf3aa:	069b      	lsls	r3, r3, #26
   bf3ac:	d507      	bpl.n	bf3be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bf3ae:	4914      	ldr	r1, [pc, #80]	; (bf400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bf3b0:	2206      	movs	r2, #6
   bf3b2:	a801      	add	r0, sp, #4
   bf3b4:	f7ff f8d0 	bl	be558 <_ZN5spark10JSONWriter4nameEPKcj>
   bf3b8:	69e1      	ldr	r1, [r4, #28]
   bf3ba:	f7ff f945 	bl	be648 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bf3be:	a801      	add	r0, sp, #4
   bf3c0:	f7ff f825 	bl	be40e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bf3c4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bf3c6:	490f      	ldr	r1, [pc, #60]	; (bf404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bf3c8:	6803      	ldr	r3, [r0, #0]
   bf3ca:	2202      	movs	r2, #2
   bf3cc:	68db      	ldr	r3, [r3, #12]
   bf3ce:	4798      	blx	r3
}
   bf3d0:	b005      	add	sp, #20
   bf3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf3d6:	bf00      	nop
   bf3d8:	2003e67c 	.word	0x2003e67c
   bf3dc:	000c6850 	.word	0x000c6850
   bf3e0:	000c67e8 	.word	0x000c67e8
   bf3e4:	000c60bc 	.word	0x000c60bc
   bf3e8:	000c6d30 	.word	0x000c6d30
   bf3ec:	000c5ed1 	.word	0x000c5ed1
   bf3f0:	000c6839 	.word	0x000c6839
   bf3f4:	000c57d0 	.word	0x000c57d0
   bf3f8:	000c5831 	.word	0x000c5831
   bf3fc:	000c683c 	.word	0x000c683c
   bf400:	000c6841 	.word	0x000c6841
   bf404:	000c6836 	.word	0x000c6836

000bf408 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bf408:	2300      	movs	r3, #0
   bf40a:	6840      	ldr	r0, [r0, #4]
   bf40c:	461a      	mov	r2, r3
   bf40e:	f7fd bfe9 	b.w	bd3e4 <network_connect>

000bf412 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bf412:	6840      	ldr	r0, [r0, #4]
   bf414:	2200      	movs	r2, #0
   bf416:	2102      	movs	r1, #2
   bf418:	f7fd bff4 	b.w	bd404 <network_disconnect>

000bf41c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bf41c:	2200      	movs	r2, #0
   bf41e:	6840      	ldr	r0, [r0, #4]
   bf420:	4611      	mov	r1, r2
   bf422:	f7fd bfe7 	b.w	bd3f4 <network_connecting>

000bf426 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bf426:	2200      	movs	r2, #0
   bf428:	6840      	ldr	r0, [r0, #4]
   bf42a:	4611      	mov	r1, r2
   bf42c:	f7fd bff2 	b.w	bd414 <network_ready>

000bf430 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bf430:	2300      	movs	r3, #0
   bf432:	6840      	ldr	r0, [r0, #4]
   bf434:	461a      	mov	r2, r3
   bf436:	4619      	mov	r1, r3
   bf438:	f7fd bff4 	b.w	bd424 <network_on>

000bf43c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bf43c:	2300      	movs	r3, #0
   bf43e:	6840      	ldr	r0, [r0, #4]
   bf440:	461a      	mov	r2, r3
   bf442:	4619      	mov	r1, r3
   bf444:	f7fd bff6 	b.w	bd434 <network_off>

000bf448 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bf448:	6840      	ldr	r0, [r0, #4]
   bf44a:	2100      	movs	r1, #0
   bf44c:	f7fe b81a 	b.w	bd484 <network_is_on>

000bf450 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bf450:	6840      	ldr	r0, [r0, #4]
   bf452:	2100      	movs	r1, #0
   bf454:	f7fe b81e 	b.w	bd494 <network_is_off>

000bf458 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bf458:	6840      	ldr	r0, [r0, #4]
   bf45a:	2200      	movs	r2, #0
   bf45c:	f081 0101 	eor.w	r1, r1, #1
   bf460:	f7fd bff0 	b.w	bd444 <network_listen>

000bf464 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bf464:	6840      	ldr	r0, [r0, #4]
   bf466:	2200      	movs	r2, #0
   bf468:	f7fd bffc 	b.w	bd464 <network_set_listen_timeout>

000bf46c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bf46c:	2200      	movs	r2, #0
   bf46e:	6840      	ldr	r0, [r0, #4]
   bf470:	4611      	mov	r1, r2
   bf472:	f7fd bfff 	b.w	bd474 <network_get_listen_timeout>

000bf476 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bf476:	2200      	movs	r2, #0
   bf478:	6840      	ldr	r0, [r0, #4]
   bf47a:	4611      	mov	r1, r2
   bf47c:	f7fd bfea 	b.w	bd454 <network_listening>

000bf480 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bf480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf484:	b095      	sub	sp, #84	; 0x54
   bf486:	4614      	mov	r4, r2
   bf488:	460d      	mov	r5, r1
   bf48a:	4607      	mov	r7, r0
    IPAddress addr;
   bf48c:	f7fe fe6e 	bl	be16c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bf490:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bf492:	221c      	movs	r2, #28
   bf494:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bf496:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bf498:	f003 f86c 	bl	c2574 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bf49c:	2340      	movs	r3, #64	; 0x40
   bf49e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bf4a0:	4620      	mov	r0, r4
   bf4a2:	466b      	mov	r3, sp
   bf4a4:	aa0c      	add	r2, sp, #48	; 0x30
   bf4a6:	2100      	movs	r1, #0
   bf4a8:	f7fd fd40 	bl	bcf2c <netdb_getaddrinfo>
    if (!r) {
   bf4ac:	4604      	mov	r4, r0
   bf4ae:	2800      	cmp	r0, #0
   bf4b0:	d14b      	bne.n	bf54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf4b2:	4602      	mov	r2, r0
   bf4b4:	2101      	movs	r1, #1
   bf4b6:	6868      	ldr	r0, [r5, #4]
   bf4b8:	f7fd ffac 	bl	bd414 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf4bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf4be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf4c0:	4622      	mov	r2, r4
   bf4c2:	6868      	ldr	r0, [r5, #4]
   bf4c4:	f7fd ffa6 	bl	bd414 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf4c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf4ca:	4681      	mov	r9, r0
        bool ok = false;
   bf4cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf4ce:	2e00      	cmp	r6, #0
   bf4d0:	d03b      	beq.n	bf54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bf4d2:	2900      	cmp	r1, #0
   bf4d4:	d139      	bne.n	bf54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bf4d6:	6873      	ldr	r3, [r6, #4]
   bf4d8:	2b02      	cmp	r3, #2
   bf4da:	d003      	beq.n	bf4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bf4dc:	2b0a      	cmp	r3, #10
   bf4de:	d011      	beq.n	bf504 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf4e0:	69f6      	ldr	r6, [r6, #28]
   bf4e2:	e7f4      	b.n	bf4ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bf4e4:	f1b8 0f00 	cmp.w	r8, #0
   bf4e8:	d0fa      	beq.n	bf4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bf4ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bf4ec:	a806      	add	r0, sp, #24
   bf4ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bf4f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bf4f2:	f7fe fe69 	bl	be1c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bf4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf4f8:	1d3c      	adds	r4, r7, #4
   bf4fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf4fc:	682b      	ldr	r3, [r5, #0]
   bf4fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf500:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bf502:	e7ed      	b.n	bf4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bf504:	f1b9 0f00 	cmp.w	r9, #0
   bf508:	d0ea      	beq.n	bf4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bf50a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bf50c:	2210      	movs	r2, #16
   bf50e:	a801      	add	r0, sp, #4
   bf510:	f003 f830 	bl	c2574 <memset>
                    a.v = 6;
   bf514:	2306      	movs	r3, #6
   bf516:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bf51a:	ad01      	add	r5, sp, #4
   bf51c:	f104 0308 	add.w	r3, r4, #8
   bf520:	3418      	adds	r4, #24
   bf522:	6818      	ldr	r0, [r3, #0]
   bf524:	6859      	ldr	r1, [r3, #4]
   bf526:	462a      	mov	r2, r5
   bf528:	c203      	stmia	r2!, {r0, r1}
   bf52a:	3308      	adds	r3, #8
   bf52c:	42a3      	cmp	r3, r4
   bf52e:	4615      	mov	r5, r2
   bf530:	d1f7      	bne.n	bf522 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bf532:	a901      	add	r1, sp, #4
   bf534:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bf536:	ad07      	add	r5, sp, #28
   bf538:	f7fe fe26 	bl	be188 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bf53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf53e:	1d3c      	adds	r4, r7, #4
   bf540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf542:	682b      	ldr	r3, [r5, #0]
   bf544:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf546:	4649      	mov	r1, r9
   bf548:	e7ca      	b.n	bf4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bf54a:	9800      	ldr	r0, [sp, #0]
   bf54c:	f7fd fce6 	bl	bcf1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bf550:	4638      	mov	r0, r7
   bf552:	b015      	add	sp, #84	; 0x54
   bf554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bf558 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bf558:	4b02      	ldr	r3, [pc, #8]	; (bf564 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bf55a:	4a03      	ldr	r2, [pc, #12]	; (bf568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bf55c:	601a      	str	r2, [r3, #0]
   bf55e:	2200      	movs	r2, #0
   bf560:	605a      	str	r2, [r3, #4]

} // spark
   bf562:	4770      	bx	lr
   bf564:	2003e67c 	.word	0x2003e67c
   bf568:	000c68c8 	.word	0x000c68c8

000bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf56c:	b508      	push	{r3, lr}
            return &Wire1;
   bf56e:	f001 f96d 	bl	c084c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf576:	f7fe bd81 	b.w	be07c <_ZN7TwoWire4lockEv>

000bf57a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf57a:	b510      	push	{r4, lr}
   bf57c:	4604      	mov	r4, r0
    lock_(_lock)
   bf57e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf580:	b109      	cbz	r1, bf586 <_ZN4PMICC1Eb+0xc>
        lock();
   bf582:	f7ff fff3 	bl	bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf586:	4620      	mov	r0, r4
   bf588:	bd10      	pop	{r4, pc}

000bf58a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf58a:	b508      	push	{r3, lr}
            return &Wire1;
   bf58c:	f001 f95e 	bl	c084c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf594:	f7fe bd7b 	b.w	be08e <_ZN7TwoWire6unlockEv>

000bf598 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf598:	b510      	push	{r4, lr}
    if (lock_) {
   bf59a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf59c:	4604      	mov	r4, r0
    if (lock_) {
   bf59e:	b10b      	cbz	r3, bf5a4 <_ZN4PMICD1Ev+0xc>
        unlock();
   bf5a0:	f7ff fff3 	bl	bf58a <_ZN4PMIC6unlockEv>
}
   bf5a4:	4620      	mov	r0, r4
   bf5a6:	bd10      	pop	{r4, pc}

000bf5a8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf5a8:	b510      	push	{r4, lr}
   bf5aa:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf5ac:	6800      	ldr	r0, [r0, #0]
   bf5ae:	f7ff ffec 	bl	bf58a <_ZN4PMIC6unlockEv>
   bf5b2:	4620      	mov	r0, r4
   bf5b4:	bd10      	pop	{r4, pc}

000bf5b6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf5b6:	b530      	push	{r4, r5, lr}
   bf5b8:	b087      	sub	sp, #28
   bf5ba:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf5bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf5be:	f7ff ffd5 	bl	bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf5c2:	226b      	movs	r2, #107	; 0x6b
   bf5c4:	2300      	movs	r3, #0
   bf5c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf5ca:	2401      	movs	r4, #1
   bf5cc:	230a      	movs	r3, #10
   bf5ce:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf5d2:	f001 f93b 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf5d6:	a902      	add	r1, sp, #8
   bf5d8:	f7fe fd34 	bl	be044 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf5dc:	f001 f936 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf5e0:	6803      	ldr	r3, [r0, #0]
   bf5e2:	4629      	mov	r1, r5
   bf5e4:	689b      	ldr	r3, [r3, #8]
   bf5e6:	4798      	blx	r3
            return &Wire1;
   bf5e8:	f001 f930 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf5ec:	4621      	mov	r1, r4
   bf5ee:	f7fe fd41 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf5f2:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf5f4:	f001 f92a 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf5f8:	a902      	add	r1, sp, #8
   bf5fa:	f7fe fcf3 	bl	bdfe4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf5fe:	f001 f925 	bl	c084c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf602:	6803      	ldr	r3, [r0, #0]
   bf604:	695b      	ldr	r3, [r3, #20]
   bf606:	4798      	blx	r3
   bf608:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf60a:	a801      	add	r0, sp, #4
   bf60c:	f7ff ffcc 	bl	bf5a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf610:	b2e0      	uxtb	r0, r4
   bf612:	b007      	add	sp, #28
   bf614:	bd30      	pop	{r4, r5, pc}

000bf616 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf616:	b570      	push	{r4, r5, r6, lr}
   bf618:	b086      	sub	sp, #24
   bf61a:	460d      	mov	r5, r1
   bf61c:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf61e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf620:	f7ff ffa4 	bl	bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf624:	226b      	movs	r2, #107	; 0x6b
   bf626:	2300      	movs	r3, #0
   bf628:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf62c:	2601      	movs	r6, #1
   bf62e:	230a      	movs	r3, #10
   bf630:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf634:	f001 f90a 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf638:	a902      	add	r1, sp, #8
   bf63a:	f7fe fd03 	bl	be044 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf63e:	f001 f905 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf642:	6803      	ldr	r3, [r0, #0]
   bf644:	4629      	mov	r1, r5
   bf646:	689b      	ldr	r3, [r3, #8]
   bf648:	4798      	blx	r3
            return &Wire1;
   bf64a:	f001 f8ff 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf64e:	6803      	ldr	r3, [r0, #0]
   bf650:	4621      	mov	r1, r4
   bf652:	689b      	ldr	r3, [r3, #8]
   bf654:	4798      	blx	r3
            return &Wire1;
   bf656:	f001 f8f9 	bl	c084c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf65a:	4631      	mov	r1, r6
   bf65c:	f7fe fd0a 	bl	be074 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf660:	a801      	add	r0, sp, #4
   bf662:	f7ff ffa1 	bl	bf5a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf666:	b006      	add	sp, #24
   bf668:	bd70      	pop	{r4, r5, r6, pc}

000bf66a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf66a:	b513      	push	{r0, r1, r4, lr}
   bf66c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf66e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf670:	f7ff ff7c 	bl	bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf674:	2101      	movs	r1, #1
   bf676:	4620      	mov	r0, r4
   bf678:	f7ff ff9d 	bl	bf5b6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf67c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf680:	2b10      	cmp	r3, #16
   bf682:	d007      	beq.n	bf694 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf684:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf688:	f042 0210 	orr.w	r2, r2, #16
   bf68c:	2101      	movs	r1, #1
   bf68e:	4620      	mov	r0, r4
   bf690:	f7ff ffc1 	bl	bf616 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf694:	a801      	add	r0, sp, #4
   bf696:	f7ff ff87 	bl	bf5a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf69a:	2001      	movs	r0, #1
   bf69c:	b002      	add	sp, #8
   bf69e:	bd10      	pop	{r4, pc}

000bf6a0 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf6a0:	b513      	push	{r0, r1, r4, lr}
   bf6a2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf6a4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf6a6:	f7ff ff61 	bl	bf56c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf6aa:	2101      	movs	r1, #1
   bf6ac:	4620      	mov	r0, r4
   bf6ae:	f7ff ff82 	bl	bf5b6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf6b2:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf6b6:	d005      	beq.n	bf6c4 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf6b8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf6bc:	2101      	movs	r1, #1
   bf6be:	4620      	mov	r0, r4
   bf6c0:	f7ff ffa9 	bl	bf616 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf6c4:	a801      	add	r0, sp, #4
   bf6c6:	f7ff ff6f 	bl	bf5a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf6ca:	2001      	movs	r0, #1
   bf6cc:	b002      	add	sp, #8
   bf6ce:	bd10      	pop	{r4, pc}

000bf6d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf6d2:	4606      	mov	r6, r0
   bf6d4:	460d      	mov	r5, r1
  size_t n = 0;
   bf6d6:	188f      	adds	r7, r1, r2
   bf6d8:	2400      	movs	r4, #0
  while (size--) {
   bf6da:	42bd      	cmp	r5, r7
   bf6dc:	d00c      	beq.n	bf6f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf6de:	6833      	ldr	r3, [r6, #0]
   bf6e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf6e4:	689b      	ldr	r3, [r3, #8]
   bf6e6:	4630      	mov	r0, r6
   bf6e8:	4798      	blx	r3
     if (chunk>=0)
   bf6ea:	1e03      	subs	r3, r0, #0
   bf6ec:	db01      	blt.n	bf6f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf6ee:	441c      	add	r4, r3
  while (size--) {
   bf6f0:	e7f3      	b.n	bf6da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf6f2:	2c00      	cmp	r4, #0
   bf6f4:	bf08      	it	eq
   bf6f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf6f8:	4620      	mov	r0, r4
   bf6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf6fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf6fc:	b513      	push	{r0, r1, r4, lr}
   bf6fe:	4604      	mov	r4, r0
    }
   bf700:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf702:	b159      	cbz	r1, bf71c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf704:	9101      	str	r1, [sp, #4]
   bf706:	f003 f800 	bl	c270a <strlen>
   bf70a:	6823      	ldr	r3, [r4, #0]
   bf70c:	9901      	ldr	r1, [sp, #4]
   bf70e:	68db      	ldr	r3, [r3, #12]
   bf710:	4602      	mov	r2, r0
   bf712:	4620      	mov	r0, r4
    }
   bf714:	b002      	add	sp, #8
   bf716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf71a:	4718      	bx	r3
    }
   bf71c:	b002      	add	sp, #8
   bf71e:	bd10      	pop	{r4, pc}

000bf720 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf720:	b508      	push	{r3, lr}
  return write(str);
   bf722:	f7ff ffeb 	bl	bf6fc <_ZN5Print5writeEPKc>
}
   bf726:	bd08      	pop	{r3, pc}

000bf728 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf728:	6803      	ldr	r3, [r0, #0]
   bf72a:	689b      	ldr	r3, [r3, #8]
   bf72c:	4718      	bx	r3

000bf72e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf72e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf730:	210d      	movs	r1, #13
{
   bf732:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf734:	f7ff fff8 	bl	bf728 <_ZN5Print5printEc>
  n += print('\n');
   bf738:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf73a:	4604      	mov	r4, r0
  n += print('\n');
   bf73c:	4628      	mov	r0, r5
   bf73e:	f7ff fff3 	bl	bf728 <_ZN5Print5printEc>
  return n;
}
   bf742:	4420      	add	r0, r4
   bf744:	bd38      	pop	{r3, r4, r5, pc}

000bf746 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf746:	b530      	push	{r4, r5, lr}
   bf748:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf74a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf74c:	2a01      	cmp	r2, #1
  *str = '\0';
   bf74e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf752:	bf98      	it	ls
   bf754:	220a      	movls	r2, #10
   bf756:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf758:	460d      	mov	r5, r1
   bf75a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf75e:	fb01 5312 	mls	r3, r1, r2, r5
   bf762:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf766:	2b09      	cmp	r3, #9
   bf768:	bf94      	ite	ls
   bf76a:	3330      	addls	r3, #48	; 0x30
   bf76c:	3337      	addhi	r3, #55	; 0x37
   bf76e:	b2db      	uxtb	r3, r3
  } while(n);
   bf770:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf772:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf776:	d9ef      	bls.n	bf758 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf778:	4621      	mov	r1, r4
   bf77a:	f7ff ffbf 	bl	bf6fc <_ZN5Print5writeEPKc>
}
   bf77e:	b00b      	add	sp, #44	; 0x2c
   bf780:	bd30      	pop	{r4, r5, pc}
	...

000bf784 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf788:	ec55 4b10 	vmov	r4, r5, d0
   bf78c:	4606      	mov	r6, r0
   bf78e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf790:	ee10 2a10 	vmov	r2, s0
   bf794:	ee10 0a10 	vmov	r0, s0
   bf798:	462b      	mov	r3, r5
   bf79a:	4629      	mov	r1, r5
   bf79c:	f002 fda4 	bl	c22e8 <__aeabi_dcmpun>
   bf7a0:	b140      	cbz	r0, bf7b4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf7a2:	4953      	ldr	r1, [pc, #332]	; (bf8f0 <_ZN5Print10printFloatEdh+0x16c>)
   bf7a4:	4630      	mov	r0, r6
   bf7a6:	f7ff ffa9 	bl	bf6fc <_ZN5Print5writeEPKc>
   bf7aa:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf7ac:	4650      	mov	r0, sl
   bf7ae:	b003      	add	sp, #12
   bf7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf7b4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf7b8:	4b4e      	ldr	r3, [pc, #312]	; (bf8f4 <_ZN5Print10printFloatEdh+0x170>)
   bf7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf7be:	4620      	mov	r0, r4
   bf7c0:	4649      	mov	r1, r9
   bf7c2:	f002 fd91 	bl	c22e8 <__aeabi_dcmpun>
   bf7c6:	b948      	cbnz	r0, bf7dc <_ZN5Print10printFloatEdh+0x58>
   bf7c8:	4b4a      	ldr	r3, [pc, #296]	; (bf8f4 <_ZN5Print10printFloatEdh+0x170>)
   bf7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf7ce:	4620      	mov	r0, r4
   bf7d0:	4649      	mov	r1, r9
   bf7d2:	f002 fd6b 	bl	c22ac <__aeabi_dcmple>
   bf7d6:	b908      	cbnz	r0, bf7dc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf7d8:	4947      	ldr	r1, [pc, #284]	; (bf8f8 <_ZN5Print10printFloatEdh+0x174>)
   bf7da:	e7e3      	b.n	bf7a4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf7dc:	4b47      	ldr	r3, [pc, #284]	; (bf8fc <_ZN5Print10printFloatEdh+0x178>)
   bf7de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf7e2:	4620      	mov	r0, r4
   bf7e4:	4629      	mov	r1, r5
   bf7e6:	f002 fd75 	bl	c22d4 <__aeabi_dcmpgt>
   bf7ea:	b108      	cbz	r0, bf7f0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf7ec:	4944      	ldr	r1, [pc, #272]	; (bf900 <_ZN5Print10printFloatEdh+0x17c>)
   bf7ee:	e7d9      	b.n	bf7a4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf7f0:	4b44      	ldr	r3, [pc, #272]	; (bf904 <_ZN5Print10printFloatEdh+0x180>)
   bf7f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf7f6:	4620      	mov	r0, r4
   bf7f8:	4629      	mov	r1, r5
   bf7fa:	f002 fd4d 	bl	c2298 <__aeabi_dcmplt>
   bf7fe:	2800      	cmp	r0, #0
   bf800:	d1f4      	bne.n	bf7ec <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf802:	2200      	movs	r2, #0
   bf804:	2300      	movs	r3, #0
   bf806:	4620      	mov	r0, r4
   bf808:	4629      	mov	r1, r5
   bf80a:	f002 fd45 	bl	c2298 <__aeabi_dcmplt>
   bf80e:	b1d0      	cbz	r0, bf846 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf810:	212d      	movs	r1, #45	; 0x2d
   bf812:	4630      	mov	r0, r6
   bf814:	f7ff ff88 	bl	bf728 <_ZN5Print5printEc>
     number = -number;
   bf818:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf81c:	4682      	mov	sl, r0
     number = -number;
   bf81e:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf820:	4939      	ldr	r1, [pc, #228]	; (bf908 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf822:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf910 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf826:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf82a:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf82c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf830:	fa5f f38b 	uxtb.w	r3, fp
   bf834:	429f      	cmp	r7, r3
   bf836:	d908      	bls.n	bf84a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf838:	4642      	mov	r2, r8
   bf83a:	464b      	mov	r3, r9
   bf83c:	f002 fbe4 	bl	c2008 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf840:	f10b 0b01 	add.w	fp, fp, #1
   bf844:	e7f4      	b.n	bf830 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf846:	4682      	mov	sl, r0
   bf848:	e7ea      	b.n	bf820 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf84a:	4622      	mov	r2, r4
   bf84c:	462b      	mov	r3, r5
   bf84e:	f002 f8fb 	bl	c1a48 <__adddf3>
   bf852:	460d      	mov	r5, r1
   bf854:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf856:	f002 fd85 	bl	c2364 <__aeabi_d2uiz>
   bf85a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf85c:	f002 fa30 	bl	c1cc0 <__aeabi_ui2d>
   bf860:	4602      	mov	r2, r0
   bf862:	460b      	mov	r3, r1
   bf864:	4620      	mov	r0, r4
   bf866:	4629      	mov	r1, r5
   bf868:	f002 f8ec 	bl	c1a44 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf86c:	220a      	movs	r2, #10
   bf86e:	4604      	mov	r4, r0
   bf870:	460d      	mov	r5, r1
   bf872:	4630      	mov	r0, r6
   bf874:	4641      	mov	r1, r8
   bf876:	f7ff ff66 	bl	bf746 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf87a:	4482      	add	sl, r0
  if (digits > 0) {
   bf87c:	2f00      	cmp	r7, #0
   bf87e:	d095      	beq.n	bf7ac <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf880:	4922      	ldr	r1, [pc, #136]	; (bf90c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf882:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf910 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf886:	4630      	mov	r0, r6
   bf888:	f7ff ff38 	bl	bf6fc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf88c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf890:	4482      	add	sl, r0
  while (digits-- > 0)
   bf892:	2f00      	cmp	r7, #0
   bf894:	d08a      	beq.n	bf7ac <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf896:	4642      	mov	r2, r8
   bf898:	464b      	mov	r3, r9
   bf89a:	4620      	mov	r0, r4
   bf89c:	4629      	mov	r1, r5
   bf89e:	f002 fa89 	bl	c1db4 <__aeabi_dmul>
   bf8a2:	4604      	mov	r4, r0
   bf8a4:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf8a6:	f002 fd35 	bl	c2314 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf8aa:	f1b0 0b00 	subs.w	fp, r0, #0
   bf8ae:	da1c      	bge.n	bf8ea <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf8b0:	212d      	movs	r1, #45	; 0x2d
   bf8b2:	4630      	mov	r0, r6
   bf8b4:	f7ff ff38 	bl	bf728 <_ZN5Print5printEc>
            val = -n;
   bf8b8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf8bc:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf8be:	220a      	movs	r2, #10
   bf8c0:	4630      	mov	r0, r6
   bf8c2:	9301      	str	r3, [sp, #4]
   bf8c4:	f7ff ff3f 	bl	bf746 <_ZN5Print11printNumberEmh>
   bf8c8:	9b01      	ldr	r3, [sp, #4]
   bf8ca:	4418      	add	r0, r3
    n += print(toPrint);
   bf8cc:	4482      	add	sl, r0
    remainder -= toPrint;
   bf8ce:	4658      	mov	r0, fp
   bf8d0:	f002 fa06 	bl	c1ce0 <__aeabi_i2d>
   bf8d4:	4602      	mov	r2, r0
   bf8d6:	460b      	mov	r3, r1
   bf8d8:	4620      	mov	r0, r4
   bf8da:	4629      	mov	r1, r5
   bf8dc:	f002 f8b2 	bl	c1a44 <__aeabi_dsub>
   bf8e0:	3f01      	subs	r7, #1
   bf8e2:	4604      	mov	r4, r0
   bf8e4:	460d      	mov	r5, r1
   bf8e6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf8e8:	e7d3      	b.n	bf892 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf8ea:	4659      	mov	r1, fp
        size_t t = 0;
   bf8ec:	2300      	movs	r3, #0
   bf8ee:	e7e6      	b.n	bf8be <_ZN5Print10printFloatEdh+0x13a>
   bf8f0:	000c68fc 	.word	0x000c68fc
   bf8f4:	7fefffff 	.word	0x7fefffff
   bf8f8:	000c6900 	.word	0x000c6900
   bf8fc:	41efffff 	.word	0x41efffff
   bf900:	000c6904 	.word	0x000c6904
   bf904:	c1efffff 	.word	0xc1efffff
   bf908:	3fe00000 	.word	0x3fe00000
   bf90c:	000c693c 	.word	0x000c693c
   bf910:	40240000 	.word	0x40240000

000bf914 <_ZN5Print5printEfi>:
{
   bf914:	b538      	push	{r3, r4, r5, lr}
   bf916:	4604      	mov	r4, r0
   bf918:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf91c:	b2cd      	uxtb	r5, r1
   bf91e:	f002 f9f1 	bl	c1d04 <__aeabi_f2d>
   bf922:	ec41 0b10 	vmov	d0, r0, r1
   bf926:	4629      	mov	r1, r5
   bf928:	4620      	mov	r0, r4
}
   bf92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf92e:	f7ff bf29 	b.w	bf784 <_ZN5Print10printFloatEdh>

000bf932 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf936:	b086      	sub	sp, #24
   bf938:	af00      	add	r7, sp, #0
   bf93a:	4605      	mov	r5, r0
   bf93c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf93e:	1d38      	adds	r0, r7, #4
   bf940:	2114      	movs	r1, #20
{
   bf942:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf944:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf946:	f7fd fddd 	bl	bd504 <vsnprintf>

    if (n<bufsize)
   bf94a:	2813      	cmp	r0, #19
   bf94c:	d80e      	bhi.n	bf96c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf94e:	1d39      	adds	r1, r7, #4
   bf950:	4628      	mov	r0, r5
   bf952:	f7ff fed3 	bl	bf6fc <_ZN5Print5writeEPKc>
   bf956:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf958:	b11e      	cbz	r6, bf962 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf95a:	4628      	mov	r0, r5
   bf95c:	f7ff fee7 	bl	bf72e <_ZN5Print7printlnEv>
   bf960:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf962:	4620      	mov	r0, r4
   bf964:	3718      	adds	r7, #24
   bf966:	46bd      	mov	sp, r7
   bf968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf96c:	f100 0308 	add.w	r3, r0, #8
   bf970:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf974:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf976:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf97a:	4622      	mov	r2, r4
   bf97c:	1c41      	adds	r1, r0, #1
   bf97e:	683b      	ldr	r3, [r7, #0]
   bf980:	4668      	mov	r0, sp
   bf982:	f7fd fdbf 	bl	bd504 <vsnprintf>
  return write(str);
   bf986:	4669      	mov	r1, sp
   bf988:	4628      	mov	r0, r5
   bf98a:	f7ff feb7 	bl	bf6fc <_ZN5Print5writeEPKc>
   bf98e:	4604      	mov	r4, r0
   bf990:	46c5      	mov	sp, r8
   bf992:	e7e1      	b.n	bf958 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf994 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf994:	b510      	push	{r4, lr}
  if (0 == max) {
   bf996:	4604      	mov	r4, r0
   bf998:	b128      	cbz	r0, bf9a6 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf99a:	f002 fe31 	bl	c2600 <rand>
   bf99e:	fb90 f3f4 	sdiv	r3, r0, r4
   bf9a2:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf9a6:	4620      	mov	r0, r4
   bf9a8:	bd10      	pop	{r4, pc}

000bf9aa <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf9aa:	4288      	cmp	r0, r1
{
   bf9ac:	b510      	push	{r4, lr}
   bf9ae:	4604      	mov	r4, r0
  if (min >= max) {
   bf9b0:	da03      	bge.n	bf9ba <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf9b2:	1a08      	subs	r0, r1, r0
   bf9b4:	f7ff ffee 	bl	bf994 <_Z6randomi>
   bf9b8:	4404      	add	r4, r0
}
   bf9ba:	4620      	mov	r0, r4
   bf9bc:	bd10      	pop	{r4, pc}
	...

000bf9c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf9c0:	4b01      	ldr	r3, [pc, #4]	; (bf9c8 <_GLOBAL__sub_I_RGB+0x8>)
   bf9c2:	2200      	movs	r2, #0
   bf9c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf9c6:	4770      	bx	lr
   bf9c8:	2003e684 	.word	0x2003e684

000bf9cc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf9cc:	2100      	movs	r1, #0
   bf9ce:	f7fd baf5 	b.w	bcfbc <hal_spi_release>

000bf9d2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf9d2:	2100      	movs	r1, #0
   bf9d4:	f7fd baea 	b.w	bcfac <hal_spi_acquire>

000bf9d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf9d8:	b510      	push	{r4, lr}
   bf9da:	4604      	mov	r4, r0
   bf9dc:	4608      	mov	r0, r1
{
    _spi = spi;
   bf9de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf9e0:	f7fd fac4 	bl	bcf6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf9e4:	2300      	movs	r3, #0
   bf9e6:	6063      	str	r3, [r4, #4]
}
   bf9e8:	4620      	mov	r0, r4
   bf9ea:	bd10      	pop	{r4, pc}

000bf9ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf9ec:	b513      	push	{r0, r1, r4, lr}
   bf9ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf9f0:	7800      	ldrb	r0, [r0, #0]
   bf9f2:	f7ff ffee 	bl	bf9d2 <_ZN8SPIClass4lockEv.isra.0>
   bf9f6:	b958      	cbnz	r0, bfa10 <_ZN8SPIClass5beginEv+0x24>
   bf9f8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf9fa:	9001      	str	r0, [sp, #4]
   bf9fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bfa00:	f7fd fa9c 	bl	bcf3c <hal_spi_begin>
        unlock();
   bfa04:	9801      	ldr	r0, [sp, #4]
    }
}
   bfa06:	b002      	add	sp, #8
   bfa08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bfa0c:	f7ff bfde 	b.w	bf9cc <_ZN8SPIClass6unlockEv.isra.0>
   bfa10:	b002      	add	sp, #8
   bfa12:	bd10      	pop	{r4, pc}

000bfa14 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bfa14:	b513      	push	{r0, r1, r4, lr}
   bfa16:	4604      	mov	r4, r0
    if (!lock())
   bfa18:	7800      	ldrb	r0, [r0, #0]
   bfa1a:	f7ff ffda 	bl	bf9d2 <_ZN8SPIClass4lockEv.isra.0>
   bfa1e:	b948      	cbnz	r0, bfa34 <_ZN8SPIClass3endEv+0x20>
   bfa20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bfa22:	9001      	str	r0, [sp, #4]
   bfa24:	f7fd fa92 	bl	bcf4c <hal_spi_end>
        unlock();
   bfa28:	9801      	ldr	r0, [sp, #4]
    }
}
   bfa2a:	b002      	add	sp, #8
   bfa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bfa30:	f7ff bfcc 	b.w	bf9cc <_ZN8SPIClass6unlockEv.isra.0>
   bfa34:	b002      	add	sp, #8
   bfa36:	bd10      	pop	{r4, pc}

000bfa38 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bfa38:	7800      	ldrb	r0, [r0, #0]
   bfa3a:	f7ff bfc7 	b.w	bf9cc <_ZN8SPIClass6unlockEv.isra.0>
	...

000bfa40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bfa40:	0840      	lsrs	r0, r0, #1
{
   bfa42:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bfa44:	6018      	str	r0, [r3, #0]
   bfa46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bfa48:	6818      	ldr	r0, [r3, #0]
   bfa4a:	4288      	cmp	r0, r1
   bfa4c:	b2e5      	uxtb	r5, r4
   bfa4e:	d906      	bls.n	bfa5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bfa50:	3401      	adds	r4, #1
   bfa52:	2c08      	cmp	r4, #8
   bfa54:	d002      	beq.n	bfa5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bfa56:	0840      	lsrs	r0, r0, #1
   bfa58:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bfa5a:	e7f5      	b.n	bfa48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bfa5c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bfa5e:	4b02      	ldr	r3, [pc, #8]	; (bfa68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bfa60:	5d5b      	ldrb	r3, [r3, r5]
   bfa62:	7013      	strb	r3, [r2, #0]
}
   bfa64:	bd30      	pop	{r4, r5, pc}
   bfa66:	bf00      	nop
   bfa68:	000c6908 	.word	0x000c6908

000bfa6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bfa6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bfa70:	4606      	mov	r6, r0
   bfa72:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bfa74:	7800      	ldrb	r0, [r0, #0]
{
   bfa76:	460c      	mov	r4, r1
    CHECK(lock());
   bfa78:	f7ff ffab 	bl	bf9d2 <_ZN8SPIClass4lockEv.isra.0>
   bfa7c:	2800      	cmp	r0, #0
   bfa7e:	db1b      	blt.n	bfab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bfa80:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bfa82:	2214      	movs	r2, #20
   bfa84:	2100      	movs	r1, #0
   bfa86:	a809      	add	r0, sp, #36	; 0x24
   bfa88:	f002 fd74 	bl	c2574 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bfa8c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bfa8e:	2200      	movs	r2, #0
   bfa90:	a909      	add	r1, sp, #36	; 0x24
   bfa92:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bfa94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bfa98:	f7fd fa78 	bl	bcf8c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bfa9c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bfaa0:	b113      	cbz	r3, bfaa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bfaa2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bfaa6:	b155      	cbz	r5, bfabe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bfaa8:	2700      	movs	r7, #0
   bfaaa:	46b9      	mov	r9, r7
   bfaac:	46b8      	mov	r8, r7
   bfaae:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bfab0:	7923      	ldrb	r3, [r4, #4]
   bfab2:	b15d      	cbz	r5, bfacc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bfab4:	b1c3      	cbz	r3, bfae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bfab6:	2000      	movs	r0, #0
}
   bfab8:	b00f      	add	sp, #60	; 0x3c
   bfaba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bfabe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bfac2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bfac6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bfaca:	e7f1      	b.n	bfab0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bfacc:	2b00      	cmp	r3, #0
   bface:	d135      	bne.n	bfb3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bfad0:	68a3      	ldr	r3, [r4, #8]
   bfad2:	4543      	cmp	r3, r8
   bfad4:	d108      	bne.n	bfae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bfad6:	f88d 9020 	strb.w	r9, [sp, #32]
   bfada:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bfade:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bfae2:	89a3      	ldrh	r3, [r4, #12]
   bfae4:	429a      	cmp	r2, r3
   bfae6:	d0e6      	beq.n	bfab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bfae8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bfaea:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bfaec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bfaf0:	980a      	ldr	r0, [sp, #40]	; 0x28
   bfaf2:	ab04      	add	r3, sp, #16
   bfaf4:	f10d 020f 	add.w	r2, sp, #15
   bfaf8:	f7ff ffa2 	bl	bfa40 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bfafc:	7921      	ldrb	r1, [r4, #4]
   bfafe:	b985      	cbnz	r5, bfb22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bfb00:	b989      	cbnz	r1, bfb26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bfb02:	68a3      	ldr	r3, [r4, #8]
   bfb04:	4543      	cmp	r3, r8
   bfb06:	d30e      	bcc.n	bfb26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bfb08:	f88d 9020 	strb.w	r9, [sp, #32]
   bfb0c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bfb10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bfb14:	89a3      	ldrh	r3, [r4, #12]
   bfb16:	429a      	cmp	r2, r3
   bfb18:	d105      	bne.n	bfb26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bfb1a:	9b04      	ldr	r3, [sp, #16]
   bfb1c:	4543      	cmp	r3, r8
   bfb1e:	d102      	bne.n	bfb26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bfb20:	e7c9      	b.n	bfab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bfb22:	2900      	cmp	r1, #0
   bfb24:	d1f9      	bne.n	bfb1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bfb26:	2300      	movs	r3, #0
   bfb28:	9301      	str	r3, [sp, #4]
   bfb2a:	7b63      	ldrb	r3, [r4, #13]
   bfb2c:	9300      	str	r3, [sp, #0]
   bfb2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bfb32:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bfb34:	7830      	ldrb	r0, [r6, #0]
   bfb36:	f7fd fa31 	bl	bcf9c <hal_spi_set_settings>
   bfb3a:	e7bc      	b.n	bfab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bfb3c:	e9cd 5500 	strd	r5, r5, [sp]
   bfb40:	462b      	mov	r3, r5
   bfb42:	462a      	mov	r2, r5
   bfb44:	2101      	movs	r1, #1
   bfb46:	e7f5      	b.n	bfb34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bfb48 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bfb48:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bfb4a:	7800      	ldrb	r0, [r0, #0]
   bfb4c:	f7fd fa06 	bl	bcf5c <hal_spi_transfer>
}
   bfb50:	b2c0      	uxtb	r0, r0
   bfb52:	bd08      	pop	{r3, pc}

000bfb54 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bfb54:	4770      	bx	lr

000bfb56 <_ZN8SPIClass15detachInterruptEv>:
   bfb56:	4770      	bx	lr

000bfb58 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bfb58:	b510      	push	{r4, lr}
   bfb5a:	4604      	mov	r4, r0
{
	free(buffer);
   bfb5c:	6800      	ldr	r0, [r0, #0]
   bfb5e:	f7fd fca9 	bl	bd4b4 <free>
}
   bfb62:	4620      	mov	r0, r4
   bfb64:	bd10      	pop	{r4, pc}

000bfb66 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bfb66:	b510      	push	{r4, lr}
   bfb68:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bfb6a:	6800      	ldr	r0, [r0, #0]
   bfb6c:	b108      	cbz	r0, bfb72 <_ZN6String10invalidateEv+0xc>
   bfb6e:	f7fd fca1 	bl	bd4b4 <free>
	buffer = NULL;
   bfb72:	2300      	movs	r3, #0
	capacity = len = 0;
   bfb74:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bfb78:	6023      	str	r3, [r4, #0]
}
   bfb7a:	bd10      	pop	{r4, pc}

000bfb7c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bfb7c:	b538      	push	{r3, r4, r5, lr}
   bfb7e:	4604      	mov	r4, r0
   bfb80:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bfb82:	6800      	ldr	r0, [r0, #0]
   bfb84:	3101      	adds	r1, #1
   bfb86:	f7fd fc9d 	bl	bd4c4 <realloc>
	if (newbuffer) {
   bfb8a:	b110      	cbz	r0, bfb92 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bfb8c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bfb90:	2001      	movs	r0, #1
	}
	return 0;
}
   bfb92:	bd38      	pop	{r3, r4, r5, pc}

000bfb94 <_ZN6String7reserveEj>:
{
   bfb94:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bfb96:	6803      	ldr	r3, [r0, #0]
{
   bfb98:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bfb9a:	b123      	cbz	r3, bfba6 <_ZN6String7reserveEj+0x12>
   bfb9c:	6843      	ldr	r3, [r0, #4]
   bfb9e:	428b      	cmp	r3, r1
   bfba0:	d301      	bcc.n	bfba6 <_ZN6String7reserveEj+0x12>
   bfba2:	2001      	movs	r0, #1
}
   bfba4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bfba6:	4620      	mov	r0, r4
   bfba8:	f7ff ffe8 	bl	bfb7c <_ZN6String12changeBufferEj>
   bfbac:	2800      	cmp	r0, #0
   bfbae:	d0f9      	beq.n	bfba4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bfbb0:	68a3      	ldr	r3, [r4, #8]
   bfbb2:	2b00      	cmp	r3, #0
   bfbb4:	d1f5      	bne.n	bfba2 <_ZN6String7reserveEj+0xe>
   bfbb6:	6822      	ldr	r2, [r4, #0]
   bfbb8:	7013      	strb	r3, [r2, #0]
   bfbba:	e7f2      	b.n	bfba2 <_ZN6String7reserveEj+0xe>

000bfbbc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bfbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfbbe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bfbc0:	4611      	mov	r1, r2
   bfbc2:	9201      	str	r2, [sp, #4]
{
   bfbc4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bfbc6:	f7ff ffe5 	bl	bfb94 <_ZN6String7reserveEj>
   bfbca:	9a01      	ldr	r2, [sp, #4]
   bfbcc:	b928      	cbnz	r0, bfbda <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bfbce:	4620      	mov	r0, r4
   bfbd0:	f7ff ffc9 	bl	bfb66 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bfbd4:	4620      	mov	r0, r4
   bfbd6:	b003      	add	sp, #12
   bfbd8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bfbda:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bfbdc:	4629      	mov	r1, r5
   bfbde:	6820      	ldr	r0, [r4, #0]
   bfbe0:	f002 fca0 	bl	c2524 <memcpy>
	buffer[len] = 0;
   bfbe4:	6822      	ldr	r2, [r4, #0]
   bfbe6:	68a3      	ldr	r3, [r4, #8]
   bfbe8:	2100      	movs	r1, #0
   bfbea:	54d1      	strb	r1, [r2, r3]
	return *this;
   bfbec:	e7f2      	b.n	bfbd4 <_ZN6String4copyEPKcj+0x18>

000bfbee <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bfbee:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bfbf0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bfbf2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bfbf6:	4604      	mov	r4, r0
	len = 0;
   bfbf8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfbfa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bfbfc:	b141      	cbz	r1, bfc10 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bfbfe:	4608      	mov	r0, r1
   bfc00:	9101      	str	r1, [sp, #4]
   bfc02:	f002 fd82 	bl	c270a <strlen>
   bfc06:	9901      	ldr	r1, [sp, #4]
   bfc08:	4602      	mov	r2, r0
   bfc0a:	4620      	mov	r0, r4
   bfc0c:	f7ff ffd6 	bl	bfbbc <_ZN6String4copyEPKcj>
}
   bfc10:	4620      	mov	r0, r4
   bfc12:	b002      	add	sp, #8
   bfc14:	bd10      	pop	{r4, pc}

000bfc16 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bfc16:	b538      	push	{r3, r4, r5, lr}
   bfc18:	4605      	mov	r5, r0
	if (buffer) {
   bfc1a:	6800      	ldr	r0, [r0, #0]
{
   bfc1c:	460c      	mov	r4, r1
	if (buffer) {
   bfc1e:	b168      	cbz	r0, bfc3c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bfc20:	686a      	ldr	r2, [r5, #4]
   bfc22:	688b      	ldr	r3, [r1, #8]
   bfc24:	429a      	cmp	r2, r3
   bfc26:	d307      	bcc.n	bfc38 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bfc28:	6809      	ldr	r1, [r1, #0]
   bfc2a:	f002 fd48 	bl	c26be <strcpy>
			len = rhs.len;
   bfc2e:	68a3      	ldr	r3, [r4, #8]
   bfc30:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bfc32:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bfc34:	60a3      	str	r3, [r4, #8]
}
   bfc36:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bfc38:	f7fd fc3c 	bl	bd4b4 <free>
	buffer = rhs.buffer;
   bfc3c:	6823      	ldr	r3, [r4, #0]
   bfc3e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bfc40:	6863      	ldr	r3, [r4, #4]
   bfc42:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bfc44:	68a3      	ldr	r3, [r4, #8]
   bfc46:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bfc48:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bfc4a:	e9c4 3300 	strd	r3, r3, [r4]
   bfc4e:	e7f1      	b.n	bfc34 <_ZN6String4moveERS_+0x1e>

000bfc50 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bfc50:	b510      	push	{r4, lr}
	buffer = NULL;
   bfc52:	2300      	movs	r3, #0
	capacity = 0;
   bfc54:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bfc58:	4604      	mov	r4, r0
	len = 0;
   bfc5a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfc5c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bfc5e:	f7ff ffda 	bl	bfc16 <_ZN6String4moveERS_>
}
   bfc62:	4620      	mov	r0, r4
   bfc64:	bd10      	pop	{r4, pc}

000bfc66 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bfc66:	4288      	cmp	r0, r1
{
   bfc68:	b510      	push	{r4, lr}
   bfc6a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bfc6c:	d005      	beq.n	bfc7a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bfc6e:	680b      	ldr	r3, [r1, #0]
   bfc70:	b12b      	cbz	r3, bfc7e <_ZN6StringaSERKS_+0x18>
   bfc72:	688a      	ldr	r2, [r1, #8]
   bfc74:	4619      	mov	r1, r3
   bfc76:	f7ff ffa1 	bl	bfbbc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfc7a:	4620      	mov	r0, r4
   bfc7c:	bd10      	pop	{r4, pc}
	else invalidate();
   bfc7e:	f7ff ff72 	bl	bfb66 <_ZN6String10invalidateEv>
   bfc82:	e7fa      	b.n	bfc7a <_ZN6StringaSERKS_+0x14>

000bfc84 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bfc84:	b510      	push	{r4, lr}
	buffer = NULL;
   bfc86:	2300      	movs	r3, #0
String::String(const String &value)
   bfc88:	4604      	mov	r4, r0
	capacity = 0;
   bfc8a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bfc8e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfc90:	7303      	strb	r3, [r0, #12]
	*this = value;
   bfc92:	f7ff ffe8 	bl	bfc66 <_ZN6StringaSERKS_>
}
   bfc96:	4620      	mov	r0, r4
   bfc98:	bd10      	pop	{r4, pc}

000bfc9a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bfc9a:	4288      	cmp	r0, r1
{
   bfc9c:	b510      	push	{r4, lr}
   bfc9e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bfca0:	d001      	beq.n	bfca6 <_ZN6StringaSEOS_+0xc>
   bfca2:	f7ff ffb8 	bl	bfc16 <_ZN6String4moveERS_>
	return *this;
}
   bfca6:	4620      	mov	r0, r4
   bfca8:	bd10      	pop	{r4, pc}

000bfcaa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bfcaa:	b513      	push	{r0, r1, r4, lr}
   bfcac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bfcae:	b159      	cbz	r1, bfcc8 <_ZN6StringaSEPKc+0x1e>
   bfcb0:	4608      	mov	r0, r1
   bfcb2:	9101      	str	r1, [sp, #4]
   bfcb4:	f002 fd29 	bl	c270a <strlen>
   bfcb8:	9901      	ldr	r1, [sp, #4]
   bfcba:	4602      	mov	r2, r0
   bfcbc:	4620      	mov	r0, r4
   bfcbe:	f7ff ff7d 	bl	bfbbc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfcc2:	4620      	mov	r0, r4
   bfcc4:	b002      	add	sp, #8
   bfcc6:	bd10      	pop	{r4, pc}
	else invalidate();
   bfcc8:	f7ff ff4d 	bl	bfb66 <_ZN6String10invalidateEv>
   bfccc:	e7f9      	b.n	bfcc2 <_ZN6StringaSEPKc+0x18>

000bfcce <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bfcce:	b570      	push	{r4, r5, r6, lr}
   bfcd0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bfcd2:	460e      	mov	r6, r1
   bfcd4:	b909      	cbnz	r1, bfcda <_ZN6String6concatEPKcj+0xc>
   bfcd6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bfcd8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bfcda:	b16a      	cbz	r2, bfcf8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bfcdc:	6884      	ldr	r4, [r0, #8]
   bfcde:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bfce0:	4621      	mov	r1, r4
   bfce2:	f7ff ff57 	bl	bfb94 <_ZN6String7reserveEj>
   bfce6:	2800      	cmp	r0, #0
   bfce8:	d0f5      	beq.n	bfcd6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bfcea:	6828      	ldr	r0, [r5, #0]
   bfcec:	68ab      	ldr	r3, [r5, #8]
   bfcee:	4631      	mov	r1, r6
   bfcf0:	4418      	add	r0, r3
   bfcf2:	f002 fce4 	bl	c26be <strcpy>
	len = newlen;
   bfcf6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bfcf8:	2001      	movs	r0, #1
   bfcfa:	e7ed      	b.n	bfcd8 <_ZN6String6concatEPKcj+0xa>

000bfcfc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bfcfc:	b513      	push	{r0, r1, r4, lr}
   bfcfe:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bfd00:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bfd02:	b151      	cbz	r1, bfd1a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bfd04:	9101      	str	r1, [sp, #4]
   bfd06:	f002 fd00 	bl	c270a <strlen>
   bfd0a:	9901      	ldr	r1, [sp, #4]
   bfd0c:	4602      	mov	r2, r0
   bfd0e:	4620      	mov	r0, r4
}
   bfd10:	b002      	add	sp, #8
   bfd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bfd16:	f7ff bfda 	b.w	bfcce <_ZN6String6concatEPKcj>
}
   bfd1a:	b002      	add	sp, #8
   bfd1c:	bd10      	pop	{r4, pc}

000bfd1e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bfd1e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bfd20:	2300      	movs	r3, #0
	buf[0] = c;
   bfd22:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bfd26:	2201      	movs	r2, #1
   bfd28:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bfd2a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bfd2e:	f7ff ffce 	bl	bfcce <_ZN6String6concatEPKcj>
}
   bfd32:	b003      	add	sp, #12
   bfd34:	f85d fb04 	ldr.w	pc, [sp], #4

000bfd38 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bfd38:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfd3a:	688a      	ldr	r2, [r1, #8]
   bfd3c:	6809      	ldr	r1, [r1, #0]
{
   bfd3e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfd40:	f7ff ffc5 	bl	bfcce <_ZN6String6concatEPKcj>
   bfd44:	b910      	cbnz	r0, bfd4c <_ZplRK15StringSumHelperRK6String+0x14>
   bfd46:	4620      	mov	r0, r4
   bfd48:	f7ff ff0d 	bl	bfb66 <_ZN6String10invalidateEv>
	return a;
}
   bfd4c:	4620      	mov	r0, r4
   bfd4e:	bd10      	pop	{r4, pc}

000bfd50 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bfd50:	b513      	push	{r0, r1, r4, lr}
   bfd52:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfd54:	b929      	cbnz	r1, bfd62 <_ZplRK15StringSumHelperPKc+0x12>
   bfd56:	4620      	mov	r0, r4
   bfd58:	f7ff ff05 	bl	bfb66 <_ZN6String10invalidateEv>
	return a;
}
   bfd5c:	4620      	mov	r0, r4
   bfd5e:	b002      	add	sp, #8
   bfd60:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfd62:	4608      	mov	r0, r1
   bfd64:	9101      	str	r1, [sp, #4]
   bfd66:	f002 fcd0 	bl	c270a <strlen>
   bfd6a:	9901      	ldr	r1, [sp, #4]
   bfd6c:	4602      	mov	r2, r0
   bfd6e:	4620      	mov	r0, r4
   bfd70:	f7ff ffad 	bl	bfcce <_ZN6String6concatEPKcj>
   bfd74:	2800      	cmp	r0, #0
   bfd76:	d0ee      	beq.n	bfd56 <_ZplRK15StringSumHelperPKc+0x6>
   bfd78:	e7f0      	b.n	bfd5c <_ZplRK15StringSumHelperPKc+0xc>

000bfd7a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bfd7a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfd7c:	6882      	ldr	r2, [r0, #8]
   bfd7e:	b93a      	cbnz	r2, bfd90 <_ZNK6String6equalsEPKc+0x16>
   bfd80:	b121      	cbz	r1, bfd8c <_ZNK6String6equalsEPKc+0x12>
   bfd82:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bfd84:	fab0 f080 	clz	r0, r0
   bfd88:	0940      	lsrs	r0, r0, #5
   bfd8a:	e000      	b.n	bfd8e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfd8c:	2001      	movs	r0, #1
}
   bfd8e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bfd90:	6800      	ldr	r0, [r0, #0]
   bfd92:	b909      	cbnz	r1, bfd98 <_ZNK6String6equalsEPKc+0x1e>
   bfd94:	7800      	ldrb	r0, [r0, #0]
   bfd96:	e7f5      	b.n	bfd84 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bfd98:	f002 fc87 	bl	c26aa <strcmp>
   bfd9c:	e7f2      	b.n	bfd84 <_ZNK6String6equalsEPKc+0xa>

000bfd9e <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bfd9e:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfda0:	6883      	ldr	r3, [r0, #8]
   bfda2:	688a      	ldr	r2, [r1, #8]
   bfda4:	4293      	cmp	r3, r2
   bfda6:	d30b      	bcc.n	bfdc0 <_ZNK6String8endsWithERKS_+0x22>
   bfda8:	6800      	ldr	r0, [r0, #0]
   bfdaa:	b140      	cbz	r0, bfdbe <_ZNK6String8endsWithERKS_+0x20>
   bfdac:	6809      	ldr	r1, [r1, #0]
   bfdae:	b149      	cbz	r1, bfdc4 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bfdb0:	1a9b      	subs	r3, r3, r2
   bfdb2:	4418      	add	r0, r3
   bfdb4:	f002 fc79 	bl	c26aa <strcmp>
   bfdb8:	fab0 f080 	clz	r0, r0
   bfdbc:	0940      	lsrs	r0, r0, #5
}
   bfdbe:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfdc0:	2000      	movs	r0, #0
   bfdc2:	e7fc      	b.n	bfdbe <_ZNK6String8endsWithERKS_+0x20>
   bfdc4:	4608      	mov	r0, r1
   bfdc6:	e7fa      	b.n	bfdbe <_ZNK6String8endsWithERKS_+0x20>

000bfdc8 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bfdc8:	6883      	ldr	r3, [r0, #8]
   bfdca:	428b      	cmp	r3, r1
   bfdcc:	d901      	bls.n	bfdd2 <_ZN6StringixEj+0xa>
   bfdce:	6800      	ldr	r0, [r0, #0]
   bfdd0:	b918      	cbnz	r0, bfdda <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bfdd2:	4803      	ldr	r0, [pc, #12]	; (bfde0 <_ZN6StringixEj+0x18>)
   bfdd4:	2300      	movs	r3, #0
   bfdd6:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bfdd8:	4770      	bx	lr
	}
	return buffer[index];
   bfdda:	4408      	add	r0, r1
}
   bfddc:	4770      	bx	lr
   bfdde:	bf00      	nop
   bfde0:	2003e694 	.word	0x2003e694

000bfde4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bfde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bfde6:	429a      	cmp	r2, r3
{
   bfde8:	460f      	mov	r7, r1
   bfdea:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bfdec:	490c      	ldr	r1, [pc, #48]	; (bfe20 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bfdee:	bf88      	it	hi
   bfdf0:	4613      	movhi	r3, r2
{
   bfdf2:	4614      	mov	r4, r2
   bfdf4:	4606      	mov	r6, r0
	if (left > right) {
   bfdf6:	bf84      	itt	hi
   bfdf8:	462c      	movhi	r4, r5
   bfdfa:	461d      	movhi	r5, r3
	String out;
   bfdfc:	f7ff fef7 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bfe00:	68bb      	ldr	r3, [r7, #8]
   bfe02:	42a3      	cmp	r3, r4
   bfe04:	d30a      	bcc.n	bfe1c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bfe06:	6839      	ldr	r1, [r7, #0]
   bfe08:	42ab      	cmp	r3, r5
   bfe0a:	bf94      	ite	ls
   bfe0c:	ebc4 0203 	rsbls	r2, r4, r3
   bfe10:	ebc4 0205 	rsbhi	r2, r4, r5
   bfe14:	4421      	add	r1, r4
   bfe16:	4630      	mov	r0, r6
   bfe18:	f7ff fed0 	bl	bfbbc <_ZN6String4copyEPKcj>
	return out;
}
   bfe1c:	4630      	mov	r0, r6
   bfe1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bfe20:	000c6838 	.word	0x000c6838

000bfe24 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bfe24:	b40e      	push	{r1, r2, r3}
   bfe26:	b570      	push	{r4, r5, r6, lr}
   bfe28:	b087      	sub	sp, #28
   bfe2a:	ad0b      	add	r5, sp, #44	; 0x2c
   bfe2c:	4604      	mov	r4, r0
   bfe2e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfe32:	9201      	str	r2, [sp, #4]
   bfe34:	462b      	mov	r3, r5
   bfe36:	2105      	movs	r1, #5
   bfe38:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bfe3a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfe3c:	f7fd fb62 	bl	bd504 <vsnprintf>
    va_end(marker);

    String result;
   bfe40:	490b      	ldr	r1, [pc, #44]	; (bfe70 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfe42:	4606      	mov	r6, r0
    String result;
   bfe44:	4620      	mov	r0, r4
   bfe46:	f7ff fed2 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bfe4a:	4631      	mov	r1, r6
   bfe4c:	4620      	mov	r0, r4
   bfe4e:	f7ff fea1 	bl	bfb94 <_ZN6String7reserveEj>
    if (result.buffer) {
   bfe52:	6820      	ldr	r0, [r4, #0]
   bfe54:	b130      	cbz	r0, bfe64 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfe56:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bfe58:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfe5a:	462b      	mov	r3, r5
   bfe5c:	1c71      	adds	r1, r6, #1
   bfe5e:	f7fd fb51 	bl	bd504 <vsnprintf>
        va_end(marker);
        result.len = n;
   bfe62:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bfe64:	4620      	mov	r0, r4
   bfe66:	b007      	add	sp, #28
   bfe68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bfe6c:	b003      	add	sp, #12
   bfe6e:	4770      	bx	lr
   bfe70:	000c6838 	.word	0x000c6838

000bfe74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bfe74:	b510      	push	{r4, lr}
   bfe76:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bfe78:	6800      	ldr	r0, [r0, #0]
   bfe7a:	b118      	cbz	r0, bfe84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bfe7c:	f7fd fb1a 	bl	bd4b4 <free>
            wakeupSource_ = nullptr;
   bfe80:	2300      	movs	r3, #0
   bfe82:	6023      	str	r3, [r4, #0]
        }
    }
   bfe84:	bd10      	pop	{r4, pc}

000bfe86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bfe86:	b538      	push	{r3, r4, r5, lr}
   bfe88:	460c      	mov	r4, r1
   bfe8a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfe8c:	f7ff fff2 	bl	bfe74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bfe90:	b154      	cbz	r4, bfea8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bfe92:	8820      	ldrh	r0, [r4, #0]
   bfe94:	f7fd fb06 	bl	bd4a4 <malloc>
   bfe98:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bfe9a:	b128      	cbz	r0, bfea8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bfe9c:	8822      	ldrh	r2, [r4, #0]
   bfe9e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bfea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bfea4:	f002 bb3e 	b.w	c2524 <memcpy>
    }
   bfea8:	bd38      	pop	{r3, r4, r5, pc}

000bfeaa <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfeaa:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bfeac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bfeb0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bfeb2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bfeb6:	f8c0 3006 	str.w	r3, [r0, #6]
   bfeba:	894b      	ldrh	r3, [r1, #10]
   bfebc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfebe:	460c      	mov	r4, r1
   bfec0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfec2:	f7ff ffd7 	bl	bfe74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bfec6:	6823      	ldr	r3, [r4, #0]
   bfec8:	b113      	cbz	r3, bfed0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bfeca:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bfecc:	2300      	movs	r3, #0
   bfece:	6023      	str	r3, [r4, #0]
    }
   bfed0:	bd38      	pop	{r3, r4, r5, pc}

000bfed2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bfed2:	b507      	push	{r0, r1, r2, lr}
   bfed4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfed6:	2100      	movs	r1, #0
{
   bfed8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfeda:	9100      	str	r1, [sp, #0]
   bfedc:	2001      	movs	r0, #1
   bfede:	218c      	movs	r1, #140	; 0x8c
   bfee0:	f7fd fa1e 	bl	bd320 <system_reset>
}
   bfee4:	b003      	add	sp, #12
   bfee6:	f85d fb04 	ldr.w	pc, [sp], #4

000bfeea <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bfeea:	4601      	mov	r1, r0
    reset(0, flags);
   bfeec:	2000      	movs	r0, #0
   bfeee:	f7ff bff0 	b.w	bfed2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bfef2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bfef2:	2000      	movs	r0, #0
   bfef4:	f7ff bff9 	b.w	bfeea <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bfef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfefa:	4d2b      	ldr	r5, [pc, #172]	; (bffa8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bfefc:	7d0b      	ldrb	r3, [r1, #20]
   bfefe:	4604      	mov	r4, r0
   bff00:	b08b      	sub	sp, #44	; 0x2c
   bff02:	4608      	mov	r0, r1
   bff04:	1daf      	adds	r7, r5, #6
   bff06:	2b00      	cmp	r3, #0
   bff08:	d036      	beq.n	bff78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bff0a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bff0c:	791b      	ldrb	r3, [r3, #4]
   bff0e:	2b00      	cmp	r3, #0
   bff10:	d032      	beq.n	bff78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bff12:	4b26      	ldr	r3, [pc, #152]	; (bffac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bff14:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bff16:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bff18:	a902      	add	r1, sp, #8
   bff1a:	3004      	adds	r0, #4
   bff1c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bff20:	f7fd f9f4 	bl	bd30c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bff24:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bff28:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bff2c:	b200      	sxth	r0, r0
   bff2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bff32:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bff36:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bff38:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bff3a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bff3c:	4628      	mov	r0, r5
   bff3e:	f7ff ffa2 	bl	bfe86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bff42:	a802      	add	r0, sp, #8
   bff44:	f7ff ff96 	bl	bfe74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bff48:	2300      	movs	r3, #0
   bff4a:	6023      	str	r3, [r4, #0]
   bff4c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bff4e:	71a3      	strb	r3, [r4, #6]
   bff50:	8123      	strh	r3, [r4, #8]
   bff52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bff56:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bff58:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bff5c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bff5e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bff62:	f8c4 3006 	str.w	r3, [r4, #6]
   bff66:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bff68:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bff6a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bff6c:	4620      	mov	r0, r4
   bff6e:	f7ff ff8a 	bl	bfe86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bff72:	4620      	mov	r0, r4
   bff74:	b00b      	add	sp, #44	; 0x2c
   bff76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bff78:	2600      	movs	r6, #0
   bff7a:	2320      	movs	r3, #32
   bff7c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bff80:	4b0b      	ldr	r3, [pc, #44]	; (bffb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bff82:	9300      	str	r3, [sp, #0]
   bff84:	aa02      	add	r2, sp, #8
   bff86:	4633      	mov	r3, r6
   bff88:	490a      	ldr	r1, [pc, #40]	; (bffb4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bff8a:	2032      	movs	r0, #50	; 0x32
   bff8c:	f7fd f91e 	bl	bd1cc <log_message>
            : wakeupSource_(nullptr),
   bff90:	4b06      	ldr	r3, [pc, #24]	; (bffac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bff92:	4805      	ldr	r0, [pc, #20]	; (bffa8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bff94:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bff96:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bff9a:	a902      	add	r1, sp, #8
   bff9c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bffa0:	f7ff ff83 	bl	bfeaa <_ZN17SystemSleepResultaSEOS_.isra.0>
   bffa4:	e7cd      	b.n	bff42 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bffa6:	bf00      	nop
   bffa8:	2003e698 	.word	0x2003e698
   bffac:	ffff0000 	.word	0xffff0000
   bffb0:	000c6917 	.word	0x000c6917
   bffb4:	000c6910 	.word	0x000c6910

000bffb8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bffb8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bffba:	2420      	movs	r4, #32
{
   bffbc:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bffbe:	4622      	mov	r2, r4
   bffc0:	2100      	movs	r1, #0
   bffc2:	4668      	mov	r0, sp
   bffc4:	f002 fad6 	bl	c2574 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bffc8:	2100      	movs	r1, #0
   bffca:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bffcc:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bffd0:	f7fc fea4 	bl	bcd1c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bffd4:	9801      	ldr	r0, [sp, #4]
   bffd6:	b008      	add	sp, #32
   bffd8:	bd10      	pop	{r4, pc}
	...

000bffdc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bffdc:	4b05      	ldr	r3, [pc, #20]	; (bfff4 <_GLOBAL__sub_I_System+0x18>)
   bffde:	2202      	movs	r2, #2
   bffe0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bffe2:	4b05      	ldr	r3, [pc, #20]	; (bfff8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bffe4:	4a05      	ldr	r2, [pc, #20]	; (bfffc <_GLOBAL__sub_I_System+0x20>)
   bffe6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bffe8:	2000      	movs	r0, #0
   bffea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bffee:	f7fd b92f 	b.w	bd250 <set_system_mode>
   bfff2:	bf00      	nop
   bfff4:	2003e6a4 	.word	0x2003e6a4
   bfff8:	2003e698 	.word	0x2003e698
   bfffc:	ffff0000 	.word	0xffff0000

000c0000 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0004:	4a15      	ldr	r2, [pc, #84]	; (c005c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0006:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0068 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c000a:	e9d2 6300 	ldrd	r6, r3, [r2]
   c000e:	1980      	adds	r0, r0, r6
   c0010:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0014:	4b12      	ldr	r3, [pc, #72]	; (c0060 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0016:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c001a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c001e:	1986      	adds	r6, r0, r6
   c0020:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0024:	42bb      	cmp	r3, r7
   c0026:	bf08      	it	eq
   c0028:	42b2      	cmpeq	r2, r6
{
   c002a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c002c:	d013      	beq.n	c0056 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c002e:	a903      	add	r1, sp, #12
   c0030:	4668      	mov	r0, sp
   c0032:	e9cd 6700 	strd	r6, r7, [sp]
   c0036:	f7fd fa9d 	bl	bd574 <localtime_r>
	calendar_time.tm_year += 1900;
   c003a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c003c:	4d09      	ldr	r5, [pc, #36]	; (c0064 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c003e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0042:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0044:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c004a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c004c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c004e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0052:	6823      	ldr	r3, [r4, #0]
   c0054:	602b      	str	r3, [r5, #0]
    }
}
   c0056:	b00c      	add	sp, #48	; 0x30
   c0058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c005c:	2003e6e0 	.word	0x2003e6e0
   c0060:	2003e6d8 	.word	0x2003e6d8
   c0064:	2003e6b0 	.word	0x2003e6b0
   c0068:	2003e6e8 	.word	0x2003e6e8

000c006c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c006c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c006e:	2000      	movs	r0, #0
   c0070:	f7fd f998 	bl	bd3a4 <spark_sync_time_pending>
   c0074:	b128      	cbz	r0, c0082 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0076:	f7fd f975 	bl	bd364 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c007a:	f080 0001 	eor.w	r0, r0, #1
   c007e:	b2c0      	uxtb	r0, r0
    }
   c0080:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0082:	2001      	movs	r0, #1
   c0084:	e7fc      	b.n	c0080 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0088 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   c0088:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c008a:	f7ff ffb9 	bl	c0000 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   c008e:	4b01      	ldr	r3, [pc, #4]	; (c0094 <_ZN9TimeClass4hourEx+0xc>)
   c0090:	6898      	ldr	r0, [r3, #8]
   c0092:	bd08      	pop	{r3, pc}
   c0094:	2003e6b0 	.word	0x2003e6b0

000c0098 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   c0098:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c009a:	f7ff ffb1 	bl	c0000 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   c009e:	4b01      	ldr	r3, [pc, #4]	; (c00a4 <_ZN9TimeClass3dayEx+0xc>)
   c00a0:	68d8      	ldr	r0, [r3, #12]
   c00a2:	bd08      	pop	{r3, pc}
   c00a4:	2003e6b0 	.word	0x2003e6b0

000c00a8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   c00a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c00aa:	4602      	mov	r2, r0
   c00ac:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c00ae:	4668      	mov	r0, sp
    struct timeval tv = {
   c00b0:	2100      	movs	r1, #0
    };
   c00b2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   c00b6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c00ba:	f7fc fe77 	bl	bcdac <hal_rtc_set_time>
   c00be:	4602      	mov	r2, r0
   c00c0:	b910      	cbnz	r0, c00c8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   c00c2:	4601      	mov	r1, r0
   c00c4:	f7fd f8fc 	bl	bd2c0 <system_notify_time_changed>
    }
}
   c00c8:	b005      	add	sp, #20
   c00ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c00d0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   c00d0:	b530      	push	{r4, r5, lr}
   c00d2:	b093      	sub	sp, #76	; 0x4c
   c00d4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   c00d8:	4b19      	ldr	r3, [pc, #100]	; (c0140 <_ZN9TimeClass7timeStrEx+0x70>)
{
   c00da:	4604      	mov	r4, r0
    t += time_zone_cache;
   c00dc:	e9d3 1000 	ldrd	r1, r0, [r3]
   c00e0:	9b01      	ldr	r3, [sp, #4]
   c00e2:	1852      	adds	r2, r2, r1
   c00e4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   c00e8:	4816      	ldr	r0, [pc, #88]	; (c0144 <_ZN9TimeClass7timeStrEx+0x74>)
   c00ea:	e9d0 1000 	ldrd	r1, r0, [r0]
   c00ee:	1852      	adds	r2, r2, r1
   c00f0:	eb43 0300 	adc.w	r3, r3, r0
   c00f4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   c00f8:	2224      	movs	r2, #36	; 0x24
   c00fa:	eb0d 0002 	add.w	r0, sp, r2
   c00fe:	2100      	movs	r1, #0
   c0100:	f002 fa38 	bl	c2574 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   c0104:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   c0106:	a909      	add	r1, sp, #36	; 0x24
   c0108:	4668      	mov	r0, sp
   c010a:	f7fd fa33 	bl	bd574 <localtime_r>
    char ascstr[26] = {};
   c010e:	2216      	movs	r2, #22
   c0110:	4629      	mov	r1, r5
   c0112:	a803      	add	r0, sp, #12
   c0114:	9502      	str	r5, [sp, #8]
   c0116:	f002 fa2d 	bl	c2574 <memset>
    asctime_r(&calendar_time, ascstr);
   c011a:	a902      	add	r1, sp, #8
   c011c:	a809      	add	r0, sp, #36	; 0x24
   c011e:	f002 f9af 	bl	c2480 <asctime_r>
    int len = strlen(ascstr);
   c0122:	a802      	add	r0, sp, #8
   c0124:	f002 faf1 	bl	c270a <strlen>
    ascstr[len-1] = 0; // remove final newline
   c0128:	ab12      	add	r3, sp, #72	; 0x48
   c012a:	4418      	add	r0, r3
    return String(ascstr);
   c012c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   c012e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   c0132:	4620      	mov	r0, r4
   c0134:	f7ff fd5b 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
}
   c0138:	4620      	mov	r0, r4
   c013a:	b013      	add	sp, #76	; 0x4c
   c013c:	bd30      	pop	{r4, r5, pc}
   c013e:	bf00      	nop
   c0140:	2003e6e0 	.word	0x2003e6e0
   c0144:	2003e6d8 	.word	0x2003e6d8

000c0148 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   c0148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c014c:	b0a4      	sub	sp, #144	; 0x90
   c014e:	4607      	mov	r7, r0
   c0150:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c0152:	a814      	add	r0, sp, #80	; 0x50
{
   c0154:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c0156:	223f      	movs	r2, #63	; 0x3f
{
   c0158:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   c015a:	f002 faf2 	bl	c2742 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c015e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c0160:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   c0162:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   c0166:	f002 fad0 	bl	c270a <strlen>
   c016a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   c016c:	bb4c      	cbnz	r4, c01c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   c016e:	4929      	ldr	r1, [pc, #164]	; (c0214 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   c0170:	a803      	add	r0, sp, #12
   c0172:	f002 faa4 	bl	c26be <strcpy>
   c0176:	ac14      	add	r4, sp, #80	; 0x50
{
   c0178:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   c017a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   c017e:	45b1      	cmp	r9, r6
   c0180:	d934      	bls.n	c01ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   c0182:	7823      	ldrb	r3, [r4, #0]
   c0184:	2b25      	cmp	r3, #37	; 0x25
   c0186:	f106 0a01 	add.w	sl, r6, #1
   c018a:	d117      	bne.n	c01bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   c018c:	7863      	ldrb	r3, [r4, #1]
   c018e:	2b7a      	cmp	r3, #122	; 0x7a
   c0190:	d114      	bne.n	c01bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   c0192:	a803      	add	r0, sp, #12
   c0194:	f002 fab9 	bl	c270a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c0198:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   c019a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   c019c:	1830      	adds	r0, r6, r0
   c019e:	4418      	add	r0, r3
   c01a0:	eba9 0206 	sub.w	r2, r9, r6
   c01a4:	1ca1      	adds	r1, r4, #2
   c01a6:	f002 f9bd 	bl	c2524 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   c01aa:	462a      	mov	r2, r5
   c01ac:	a903      	add	r1, sp, #12
   c01ae:	4620      	mov	r0, r4
   c01b0:	f002 f9b8 	bl	c2524 <memcpy>
            len = strlen(format_str);
   c01b4:	a814      	add	r0, sp, #80	; 0x50
   c01b6:	f002 faa8 	bl	c270a <strlen>
   c01ba:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   c01bc:	3401      	adds	r4, #1
   c01be:	4656      	mov	r6, sl
   c01c0:	e7db      	b.n	c017a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   c01c2:	233c      	movs	r3, #60	; 0x3c
   c01c4:	fb94 f2f3 	sdiv	r2, r4, r3
   c01c8:	2a00      	cmp	r2, #0
   c01ca:	bfb8      	it	lt
   c01cc:	4252      	neglt	r2, r2
   c01ce:	fbb2 f1f3 	udiv	r1, r2, r3
   c01d2:	fb03 2211 	mls	r2, r3, r1, r2
   c01d6:	9200      	str	r2, [sp, #0]
   c01d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   c01dc:	4a0e      	ldr	r2, [pc, #56]	; (c0218 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   c01de:	fb94 f3f3 	sdiv	r3, r4, r3
   c01e2:	2110      	movs	r1, #16
   c01e4:	a803      	add	r0, sp, #12
   c01e6:	f7fd f985 	bl	bd4f4 <snprintf>
   c01ea:	e7c4      	b.n	c0176 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   c01ec:	2100      	movs	r1, #0
   c01ee:	222e      	movs	r2, #46	; 0x2e
   c01f0:	a808      	add	r0, sp, #32
   c01f2:	9107      	str	r1, [sp, #28]
   c01f4:	f002 f9be 	bl	c2574 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   c01f8:	4643      	mov	r3, r8
   c01fa:	aa14      	add	r2, sp, #80	; 0x50
   c01fc:	2132      	movs	r1, #50	; 0x32
   c01fe:	a807      	add	r0, sp, #28
   c0200:	f7fd f9b0 	bl	bd564 <strftime>
    return String(buf);
   c0204:	a907      	add	r1, sp, #28
   c0206:	4638      	mov	r0, r7
   c0208:	f7ff fcf1 	bl	bfbee <_ZN6StringC1EPK19__FlashStringHelper>
}
   c020c:	4638      	mov	r0, r7
   c020e:	b024      	add	sp, #144	; 0x90
   c0210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0214:	000c5f3b 	.word	0x000c5f3b
   c0218:	000c5f3d 	.word	0x000c5f3d

000c021c <_ZN9TimeClass6formatExPKc>:
{
   c021c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c021e:	b08d      	sub	sp, #52	; 0x34
   c0220:	e9cd 2300 	strd	r2, r3, [sp]
   c0224:	9d12      	ldr	r5, [sp, #72]	; 0x48
   c0226:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   c0228:	b915      	cbnz	r5, c0230 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   c022a:	4b19      	ldr	r3, [pc, #100]	; (c0290 <_ZN9TimeClass6formatExPKc+0x74>)
   c022c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   c022e:	b12d      	cbz	r5, c023c <_ZN9TimeClass6formatExPKc+0x20>
   c0230:	4b18      	ldr	r3, [pc, #96]	; (c0294 <_ZN9TimeClass6formatExPKc+0x78>)
   c0232:	4628      	mov	r0, r5
   c0234:	6819      	ldr	r1, [r3, #0]
   c0236:	f002 fa38 	bl	c26aa <strcmp>
   c023a:	b938      	cbnz	r0, c024c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   c023c:	e9dd 2300 	ldrd	r2, r3, [sp]
   c0240:	4620      	mov	r0, r4
   c0242:	f7ff ff45 	bl	c00d0 <_ZN9TimeClass7timeStrEx>
}
   c0246:	4620      	mov	r0, r4
   c0248:	b00d      	add	sp, #52	; 0x34
   c024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   c024c:	4e12      	ldr	r6, [pc, #72]	; (c0298 <_ZN9TimeClass6formatExPKc+0x7c>)
   c024e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   c0250:	4f12      	ldr	r7, [pc, #72]	; (c029c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   c0252:	e9d6 3200 	ldrd	r3, r2, [r6]
   c0256:	185b      	adds	r3, r3, r1
   c0258:	9901      	ldr	r1, [sp, #4]
   c025a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   c025e:	e9d7 0100 	ldrd	r0, r1, [r7]
   c0262:	181b      	adds	r3, r3, r0
   c0264:	eb42 0201 	adc.w	r2, r2, r1
   c0268:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   c026c:	2100      	movs	r1, #0
   c026e:	2224      	movs	r2, #36	; 0x24
   c0270:	a803      	add	r0, sp, #12
   c0272:	f002 f97f 	bl	c2574 <memset>
    localtime_r(&t, &calendar_time);
   c0276:	a903      	add	r1, sp, #12
   c0278:	4668      	mov	r0, sp
   c027a:	f7fd f97b 	bl	bd574 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   c027e:	6832      	ldr	r2, [r6, #0]
   c0280:	683b      	ldr	r3, [r7, #0]
   c0282:	a903      	add	r1, sp, #12
   c0284:	4413      	add	r3, r2
   c0286:	4620      	mov	r0, r4
   c0288:	462a      	mov	r2, r5
   c028a:	f7ff ff5d 	bl	c0148 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   c028e:	e7da      	b.n	c0246 <_ZN9TimeClass6formatExPKc+0x2a>
   c0290:	2003e6ac 	.word	0x2003e6ac
   c0294:	2003d684 	.word	0x2003d684
   c0298:	2003e6e0 	.word	0x2003e6e0
   c029c:	2003e6d8 	.word	0x2003e6d8

000c02a0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   c02a0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c02a2:	2000      	movs	r0, #0
   c02a4:	f7fc fd6a 	bl	bcd7c <hal_rtc_time_is_valid>
    if (rtcstate)
   c02a8:	4604      	mov	r4, r0
   c02aa:	b9a0      	cbnz	r0, c02d6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c02ac:	f7fc ffc8 	bl	bd240 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c02b0:	2801      	cmp	r0, #1
   c02b2:	d110      	bne.n	c02d6 <_ZN9TimeClass7isValidEv+0x36>
   c02b4:	4620      	mov	r0, r4
   c02b6:	f7fc fffb 	bl	bd2b0 <system_thread_get_state>
   c02ba:	b960      	cbnz	r0, c02d6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c02bc:	f7ff fed6 	bl	c006c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c02c0:	b910      	cbnz	r0, c02c8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c02c2:	f7fd f83f 	bl	bd344 <spark_process>
        while (_while() && !_condition()) {
   c02c6:	e7f9      	b.n	c02bc <_ZN9TimeClass7isValidEv+0x1c>
   c02c8:	f7ff fed0 	bl	c006c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c02cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c02d0:	2000      	movs	r0, #0
   c02d2:	f7fc bd53 	b.w	bcd7c <hal_rtc_time_is_valid>
}
   c02d6:	4620      	mov	r0, r4
   c02d8:	bd10      	pop	{r4, pc}

000c02da <_ZN9TimeClass3nowEv>:
{
   c02da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c02dc:	f7ff ffe0 	bl	c02a0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c02e0:	2210      	movs	r2, #16
   c02e2:	2100      	movs	r1, #0
   c02e4:	4668      	mov	r0, sp
   c02e6:	f002 f945 	bl	c2574 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c02ea:	2100      	movs	r1, #0
   c02ec:	4668      	mov	r0, sp
   c02ee:	f7fc fd55 	bl	bcd9c <hal_rtc_get_time>
}
   c02f2:	9800      	ldr	r0, [sp, #0]
   c02f4:	b005      	add	sp, #20
   c02f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c02fc <_ZN9TimeClass4hourEv>:
{
   c02fc:	b508      	push	{r3, lr}
	return hour(now());
   c02fe:	f7ff ffec 	bl	c02da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0302:	17c1      	asrs	r1, r0, #31
   c0304:	f7ff fe7c 	bl	c0000 <_ZL22Refresh_UnixTime_Cachex>
}
   c0308:	4b01      	ldr	r3, [pc, #4]	; (c0310 <_ZN9TimeClass4hourEv+0x14>)
   c030a:	6898      	ldr	r0, [r3, #8]
   c030c:	bd08      	pop	{r3, pc}
   c030e:	bf00      	nop
   c0310:	2003e6b0 	.word	0x2003e6b0

000c0314 <_ZN9TimeClass6secondEv>:
{
   c0314:	b508      	push	{r3, lr}
	return second(now());
   c0316:	f7ff ffe0 	bl	c02da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c031a:	17c1      	asrs	r1, r0, #31
   c031c:	f7ff fe70 	bl	c0000 <_ZL22Refresh_UnixTime_Cachex>
}
   c0320:	4b01      	ldr	r3, [pc, #4]	; (c0328 <_ZN9TimeClass6secondEv+0x14>)
   c0322:	6818      	ldr	r0, [r3, #0]
   c0324:	bd08      	pop	{r3, pc}
   c0326:	bf00      	nop
   c0328:	2003e6b0 	.word	0x2003e6b0

000c032c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c032c:	4b02      	ldr	r3, [pc, #8]	; (c0338 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c032e:	681a      	ldr	r2, [r3, #0]
   c0330:	4b02      	ldr	r3, [pc, #8]	; (c033c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0332:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0334:	4770      	bx	lr
   c0336:	bf00      	nop
   c0338:	2003d684 	.word	0x2003d684
   c033c:	2003e6ac 	.word	0x2003e6ac

000c0340 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c0340:	4770      	bx	lr

000c0342 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0342:	7441      	strb	r1, [r0, #17]
}
   c0344:	4770      	bx	lr

000c0346 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c0346:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c0348:	7c00      	ldrb	r0, [r0, #16]
   c034a:	f7fc fed7 	bl	bd0fc <hal_usart_available_data_for_write>
}
   c034e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0352:	bd08      	pop	{r3, pc}

000c0354 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c0354:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c0356:	7c00      	ldrb	r0, [r0, #16]
   c0358:	f7fc fea8 	bl	bd0ac <hal_usart_available>
}
   c035c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0360:	bd08      	pop	{r3, pc}

000c0362 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c0362:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c0364:	7c00      	ldrb	r0, [r0, #16]
   c0366:	f7fc feb1 	bl	bd0cc <hal_usart_peek>
}
   c036a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c036e:	bd08      	pop	{r3, pc}

000c0370 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0370:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c0372:	7c00      	ldrb	r0, [r0, #16]
   c0374:	f7fc fea2 	bl	bd0bc <hal_usart_read>
}
   c0378:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c037c:	bd08      	pop	{r3, pc}

000c037e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c037e:	7c00      	ldrb	r0, [r0, #16]
   c0380:	f7fc beac 	b.w	bd0dc <hal_usart_flush>

000c0384 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c0384:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0386:	7c45      	ldrb	r5, [r0, #17]
{
   c0388:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c038a:	b12d      	cbz	r5, c0398 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c038c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c038e:	b003      	add	sp, #12
   c0390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c0394:	f7fc be82 	b.w	bd09c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0398:	7c00      	ldrb	r0, [r0, #16]
   c039a:	9101      	str	r1, [sp, #4]
   c039c:	f7fc feae 	bl	bd0fc <hal_usart_available_data_for_write>
   c03a0:	2800      	cmp	r0, #0
   c03a2:	9901      	ldr	r1, [sp, #4]
   c03a4:	dcf2      	bgt.n	c038c <_ZN11USARTSerial5writeEh+0x8>
}
   c03a6:	4628      	mov	r0, r5
   c03a8:	b003      	add	sp, #12
   c03aa:	bd30      	pop	{r4, r5, pc}

000c03ac <_ZN11USARTSerialD0Ev>:
   c03ac:	b510      	push	{r4, lr}
   c03ae:	2114      	movs	r1, #20
   c03b0:	4604      	mov	r4, r0
   c03b2:	f7f3 fe74 	bl	b409e <_ZdlPvj>
   c03b6:	4620      	mov	r0, r4
   c03b8:	bd10      	pop	{r4, pc}
	...

000c03bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c03bc:	b510      	push	{r4, lr}
   c03be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c03c2:	4604      	mov	r4, r0
   c03c4:	4608      	mov	r0, r1
   c03c6:	4611      	mov	r1, r2
   c03c8:	2200      	movs	r2, #0
   c03ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c03ce:	4b04      	ldr	r3, [pc, #16]	; (c03e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c03d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c03d2:	2301      	movs	r3, #1
  _serial = serial;
   c03d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c03d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c03d8:	f7fc fea0 	bl	bd11c <hal_usart_init_ex>
}
   c03dc:	4620      	mov	r0, r4
   c03de:	bd10      	pop	{r4, pc}
   c03e0:	000c6964 	.word	0x000c6964

000c03e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c03e4:	7c00      	ldrb	r0, [r0, #16]
   c03e6:	2300      	movs	r3, #0
   c03e8:	f7fc be90 	b.w	bd10c <hal_usart_begin_config>

000c03ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c03ec:	2200      	movs	r2, #0
   c03ee:	f7ff bff9 	b.w	c03e4 <_ZN11USARTSerial5beginEmm>

000c03f2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c03f2:	7c00      	ldrb	r0, [r0, #16]
   c03f4:	f7fc be4a 	b.w	bd08c <hal_usart_end>

000c03f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c03f8:	7441      	strb	r1, [r0, #17]
}
   c03fa:	4770      	bx	lr

000c03fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c03fc:	4770      	bx	lr

000c03fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c03fe:	4770      	bx	lr

000c0400 <_ZN9USBSerial4readEv>:
{
   c0400:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c0402:	2100      	movs	r1, #0
   c0404:	7c00      	ldrb	r0, [r0, #16]
   c0406:	f7fc feb9 	bl	bd17c <HAL_USB_USART_Receive_Data>
}
   c040a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c040e:	bd08      	pop	{r3, pc}

000c0410 <_ZN9USBSerial4peekEv>:
{
   c0410:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c0412:	2101      	movs	r1, #1
   c0414:	7c00      	ldrb	r0, [r0, #16]
   c0416:	f7fc feb1 	bl	bd17c <HAL_USB_USART_Receive_Data>
}
   c041a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c041e:	bd08      	pop	{r3, pc}

000c0420 <_ZN9USBSerial17availableForWriteEv>:
{
   c0420:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c0422:	7c00      	ldrb	r0, [r0, #16]
   c0424:	f7fc fea2 	bl	bd16c <HAL_USB_USART_Available_Data_For_Write>
}
   c0428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c042c:	bd08      	pop	{r3, pc}

000c042e <_ZN9USBSerial9availableEv>:
{
   c042e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0430:	7c00      	ldrb	r0, [r0, #16]
   c0432:	f7fc fe93 	bl	bd15c <HAL_USB_USART_Available_Data>
}
   c0436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c043a:	bd08      	pop	{r3, pc}

000c043c <_ZN9USBSerial5writeEh>:
{
   c043c:	b513      	push	{r0, r1, r4, lr}
   c043e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0440:	7c00      	ldrb	r0, [r0, #16]
{
   c0442:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0444:	f7fc fe92 	bl	bd16c <HAL_USB_USART_Available_Data_For_Write>
   c0448:	2800      	cmp	r0, #0
   c044a:	9901      	ldr	r1, [sp, #4]
   c044c:	dc01      	bgt.n	c0452 <_ZN9USBSerial5writeEh+0x16>
   c044e:	7c60      	ldrb	r0, [r4, #17]
   c0450:	b120      	cbz	r0, c045c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c0452:	7c20      	ldrb	r0, [r4, #16]
   c0454:	f7fc fe9a 	bl	bd18c <HAL_USB_USART_Send_Data>
   c0458:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c045c:	b002      	add	sp, #8
   c045e:	bd10      	pop	{r4, pc}

000c0460 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0460:	7c00      	ldrb	r0, [r0, #16]
   c0462:	f7fc be9b 	b.w	bd19c <HAL_USB_USART_Flush_Data>

000c0466 <_ZN9USBSerialD0Ev>:
   c0466:	b510      	push	{r4, lr}
   c0468:	2114      	movs	r1, #20
   c046a:	4604      	mov	r4, r0
   c046c:	f7f3 fe17 	bl	b409e <_ZdlPvj>
   c0470:	4620      	mov	r0, r4
   c0472:	bd10      	pop	{r4, pc}

000c0474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c0474:	b510      	push	{r4, lr}
   c0476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c047a:	4604      	mov	r4, r0
   c047c:	4608      	mov	r0, r1
   c047e:	2100      	movs	r1, #0
   c0480:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c0484:	4b04      	ldr	r3, [pc, #16]	; (c0498 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c0486:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0488:	2301      	movs	r3, #1
  _serial = serial;
   c048a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c048c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c048e:	4611      	mov	r1, r2
   c0490:	f7fc fe4c 	bl	bd12c <HAL_USB_USART_Init>
}
   c0494:	4620      	mov	r0, r4
   c0496:	bd10      	pop	{r4, pc}
   c0498:	000c6994 	.word	0x000c6994

000c049c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c049c:	7c00      	ldrb	r0, [r0, #16]
   c049e:	2200      	movs	r2, #0
   c04a0:	f7fc be4c 	b.w	bd13c <HAL_USB_USART_Begin>

000c04a4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c04a4:	7c00      	ldrb	r0, [r0, #16]
   c04a6:	f7fc be51 	b.w	bd14c <HAL_USB_USART_End>

000c04aa <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c04aa:	7c00      	ldrb	r0, [r0, #16]
   c04ac:	f7fc be7e 	b.w	bd1ac <HAL_USB_USART_Is_Connected>

000c04b0 <_Z19acquireSerialBufferv>:
{
   c04b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c04b2:	2214      	movs	r2, #20
{
   c04b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c04b6:	2100      	movs	r1, #0
   c04b8:	f002 f85c 	bl	c2574 <memset>
}
   c04bc:	4620      	mov	r0, r4
   c04be:	bd10      	pop	{r4, pc}

000c04c0 <_Z16_fetch_usbserialv>:
{
   c04c0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c04c2:	4c0f      	ldr	r4, [pc, #60]	; (c0500 <_Z16_fetch_usbserialv+0x40>)
{
   c04c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c04c6:	a803      	add	r0, sp, #12
   c04c8:	f7ff fff2 	bl	c04b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c04cc:	7821      	ldrb	r1, [r4, #0]
   c04ce:	f3bf 8f5b 	dmb	ish
   c04d2:	f011 0101 	ands.w	r1, r1, #1
   c04d6:	d10f      	bne.n	c04f8 <_Z16_fetch_usbserialv+0x38>
   c04d8:	4620      	mov	r0, r4
   c04da:	9101      	str	r1, [sp, #4]
   c04dc:	f7f3 fdee 	bl	b40bc <__cxa_guard_acquire>
   c04e0:	9901      	ldr	r1, [sp, #4]
   c04e2:	b148      	cbz	r0, c04f8 <_Z16_fetch_usbserialv+0x38>
   c04e4:	aa03      	add	r2, sp, #12
   c04e6:	4807      	ldr	r0, [pc, #28]	; (c0504 <_Z16_fetch_usbserialv+0x44>)
   c04e8:	f7ff ffc4 	bl	c0474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c04ec:	4620      	mov	r0, r4
   c04ee:	f7f3 fdea 	bl	b40c6 <__cxa_guard_release>
   c04f2:	4805      	ldr	r0, [pc, #20]	; (c0508 <_Z16_fetch_usbserialv+0x48>)
   c04f4:	f001 ffea 	bl	c24cc <atexit>
	return _usbserial;
}
   c04f8:	4802      	ldr	r0, [pc, #8]	; (c0504 <_Z16_fetch_usbserialv+0x44>)
   c04fa:	b008      	add	sp, #32
   c04fc:	bd10      	pop	{r4, pc}
   c04fe:	bf00      	nop
   c0500:	2003e6f0 	.word	0x2003e6f0
   c0504:	2003e6f4 	.word	0x2003e6f4
   c0508:	000c03fd 	.word	0x000c03fd

000c050c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c050c:	4b01      	ldr	r3, [pc, #4]	; (c0514 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c050e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0510:	4770      	bx	lr
   c0512:	bf00      	nop
   c0514:	2003d68c 	.word	0x2003d68c

000c0518 <serialEventRun>:
{
   c0518:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c051a:	4b0b      	ldr	r3, [pc, #44]	; (c0548 <serialEventRun+0x30>)
   c051c:	b143      	cbz	r3, c0530 <serialEventRun+0x18>
   c051e:	f7ff ffcf 	bl	c04c0 <_Z16_fetch_usbserialv>
   c0522:	6803      	ldr	r3, [r0, #0]
   c0524:	691b      	ldr	r3, [r3, #16]
   c0526:	4798      	blx	r3
   c0528:	2800      	cmp	r0, #0
   c052a:	dd01      	ble.n	c0530 <serialEventRun+0x18>
        serialEvent();
   c052c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0530:	4b06      	ldr	r3, [pc, #24]	; (c054c <serialEventRun+0x34>)
   c0532:	b143      	cbz	r3, c0546 <serialEventRun+0x2e>
   c0534:	f000 f9ca 	bl	c08cc <_Z22__fetch_global_Serial1v>
   c0538:	6803      	ldr	r3, [r0, #0]
   c053a:	691b      	ldr	r3, [r3, #16]
   c053c:	4798      	blx	r3
   c053e:	2800      	cmp	r0, #0
   c0540:	dd01      	ble.n	c0546 <serialEventRun+0x2e>
        serialEvent1();
   c0542:	f3af 8000 	nop.w
}
   c0546:	bd08      	pop	{r3, pc}
	...

000c0550 <_post_loop>:
{
   c0550:	b508      	push	{r3, lr}
	serialEventRun();
   c0552:	f7ff ffe1 	bl	c0518 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0556:	f7fc fc09 	bl	bcd6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c055a:	4b01      	ldr	r3, [pc, #4]	; (c0560 <_post_loop+0x10>)
   c055c:	6018      	str	r0, [r3, #0]
}
   c055e:	bd08      	pop	{r3, pc}
   c0560:	2003e710 	.word	0x2003e710

000c0564 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0564:	4805      	ldr	r0, [pc, #20]	; (c057c <_Z33system_initialize_user_backup_ramv+0x18>)
   c0566:	4a06      	ldr	r2, [pc, #24]	; (c0580 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0568:	4906      	ldr	r1, [pc, #24]	; (c0584 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c056a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c056c:	1a12      	subs	r2, r2, r0
   c056e:	f001 ffd9 	bl	c2524 <memcpy>
    __backup_sram_signature = signature;
   c0572:	4b05      	ldr	r3, [pc, #20]	; (c0588 <_Z33system_initialize_user_backup_ramv+0x24>)
   c0574:	4a05      	ldr	r2, [pc, #20]	; (c058c <_Z33system_initialize_user_backup_ramv+0x28>)
   c0576:	601a      	str	r2, [r3, #0]
}
   c0578:	bd08      	pop	{r3, pc}
   c057a:	bf00      	nop
   c057c:	2003f400 	.word	0x2003f400
   c0580:	2003f404 	.word	0x2003f404
   c0584:	000c6ea4 	.word	0x000c6ea4
   c0588:	2003f400 	.word	0x2003f400
   c058c:	9a271c1e 	.word	0x9a271c1e

000c0590 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0590:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0592:	2300      	movs	r3, #0
   c0594:	9300      	str	r3, [sp, #0]
   c0596:	461a      	mov	r2, r3
   c0598:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c059c:	f7fc fea2 	bl	bd2e4 <system_ctrl_set_result>
}
   c05a0:	b003      	add	sp, #12
   c05a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c05a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c05a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c05aa:	8843      	ldrh	r3, [r0, #2]
   c05ac:	2b0a      	cmp	r3, #10
   c05ae:	d008      	beq.n	c05c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c05b0:	2b50      	cmp	r3, #80	; 0x50
   c05b2:	d10b      	bne.n	c05cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c05b4:	4b09      	ldr	r3, [pc, #36]	; (c05dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c05b6:	681b      	ldr	r3, [r3, #0]
   c05b8:	b14b      	cbz	r3, c05ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c05ba:	b003      	add	sp, #12
   c05bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c05c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c05c2:	f7ff ffe5 	bl	c0590 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c05c6:	b003      	add	sp, #12
   c05c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c05cc:	2300      	movs	r3, #0
   c05ce:	9300      	str	r3, [sp, #0]
   c05d0:	461a      	mov	r2, r3
   c05d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c05d6:	f7fc fe85 	bl	bd2e4 <system_ctrl_set_result>
}
   c05da:	e7f4      	b.n	c05c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c05dc:	2003e70c 	.word	0x2003e70c

000c05e0 <module_user_init_hook>:
{
   c05e0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c05e2:	4812      	ldr	r0, [pc, #72]	; (c062c <module_user_init_hook+0x4c>)
   c05e4:	2100      	movs	r1, #0
   c05e6:	f7fc ffb5 	bl	bd554 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c05ea:	4b11      	ldr	r3, [pc, #68]	; (c0630 <module_user_init_hook+0x50>)
   c05ec:	681a      	ldr	r2, [r3, #0]
   c05ee:	4b11      	ldr	r3, [pc, #68]	; (c0634 <module_user_init_hook+0x54>)
   c05f0:	429a      	cmp	r2, r3
   c05f2:	4b11      	ldr	r3, [pc, #68]	; (c0638 <module_user_init_hook+0x58>)
   c05f4:	bf0c      	ite	eq
   c05f6:	2201      	moveq	r2, #1
   c05f8:	2200      	movne	r2, #0
   c05fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c05fc:	d001      	beq.n	c0602 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c05fe:	f7ff ffb1 	bl	c0564 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c0602:	f7fc fb9b 	bl	bcd3c <HAL_RNG_GetRandomNumber>
   c0606:	4604      	mov	r4, r0
    srand(seed);
   c0608:	f001 ffcc 	bl	c25a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c060c:	4b0b      	ldr	r3, [pc, #44]	; (c063c <module_user_init_hook+0x5c>)
   c060e:	b113      	cbz	r3, c0616 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c0610:	4620      	mov	r0, r4
   c0612:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c0616:	2100      	movs	r1, #0
   c0618:	4808      	ldr	r0, [pc, #32]	; (c063c <module_user_init_hook+0x5c>)
   c061a:	f7fc fed3 	bl	bd3c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c061e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c0622:	4807      	ldr	r0, [pc, #28]	; (c0640 <module_user_init_hook+0x60>)
   c0624:	2100      	movs	r1, #0
   c0626:	f7fc be53 	b.w	bd2d0 <system_ctrl_set_app_request_handler>
   c062a:	bf00      	nop
   c062c:	000c050d 	.word	0x000c050d
   c0630:	2003f400 	.word	0x2003f400
   c0634:	9a271c1e 	.word	0x9a271c1e
   c0638:	2003e708 	.word	0x2003e708
   c063c:	00000000 	.word	0x00000000
   c0640:	000c05a9 	.word	0x000c05a9

000c0644 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c0644:	b508      	push	{r3, lr}
   c0646:	4b02      	ldr	r3, [pc, #8]	; (c0650 <spark_protocol_instance+0xc>)
   c0648:	681b      	ldr	r3, [r3, #0]
   c064a:	681b      	ldr	r3, [r3, #0]
   c064c:	9301      	str	r3, [sp, #4]
   c064e:	bd08      	pop	{r3, pc}
   c0650:	0003025c 	.word	0x0003025c

000c0654 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c0654:	b508      	push	{r3, lr}
   c0656:	4b02      	ldr	r3, [pc, #8]	; (c0660 <spark_protocol_set_product_id+0xc>)
   c0658:	681b      	ldr	r3, [r3, #0]
   c065a:	685b      	ldr	r3, [r3, #4]
   c065c:	9301      	str	r3, [sp, #4]
   c065e:	bd08      	pop	{r3, pc}
   c0660:	0003025c 	.word	0x0003025c

000c0664 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c0664:	b508      	push	{r3, lr}
   c0666:	4b02      	ldr	r3, [pc, #8]	; (c0670 <spark_protocol_set_product_firmware_version+0xc>)
   c0668:	681b      	ldr	r3, [r3, #0]
   c066a:	689b      	ldr	r3, [r3, #8]
   c066c:	9301      	str	r3, [sp, #4]
   c066e:	bd08      	pop	{r3, pc}
   c0670:	0003025c 	.word	0x0003025c

000c0674 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c0674:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c0676:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c0678:	d902      	bls.n	c0680 <pinAvailable+0xc>
    return false;
   c067a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c067c:	b002      	add	sp, #8
   c067e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c0680:	f1a0 030b 	sub.w	r3, r0, #11
   c0684:	2b02      	cmp	r3, #2
   c0686:	d81a      	bhi.n	c06be <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c0688:	4c17      	ldr	r4, [pc, #92]	; (c06e8 <pinAvailable+0x74>)
   c068a:	7821      	ldrb	r1, [r4, #0]
   c068c:	f3bf 8f5b 	dmb	ish
   c0690:	f011 0101 	ands.w	r1, r1, #1
   c0694:	d10b      	bne.n	c06ae <pinAvailable+0x3a>
   c0696:	4620      	mov	r0, r4
   c0698:	9101      	str	r1, [sp, #4]
   c069a:	f7f3 fd0f 	bl	b40bc <__cxa_guard_acquire>
   c069e:	9901      	ldr	r1, [sp, #4]
   c06a0:	b128      	cbz	r0, c06ae <pinAvailable+0x3a>
   c06a2:	4812      	ldr	r0, [pc, #72]	; (c06ec <pinAvailable+0x78>)
   c06a4:	f7ff f998 	bl	bf9d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c06a8:	4620      	mov	r0, r4
   c06aa:	f7f3 fd0c 	bl	b40c6 <__cxa_guard_release>
   c06ae:	4b0f      	ldr	r3, [pc, #60]	; (c06ec <pinAvailable+0x78>)
   c06b0:	7818      	ldrb	r0, [r3, #0]
   c06b2:	f7fc fc63 	bl	bcf7c <hal_spi_is_enabled>
   c06b6:	2800      	cmp	r0, #0
   c06b8:	d1df      	bne.n	c067a <pinAvailable+0x6>
  return true; // 'pin' is available
   c06ba:	2001      	movs	r0, #1
   c06bc:	e7de      	b.n	c067c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c06be:	2801      	cmp	r0, #1
   c06c0:	d809      	bhi.n	c06d6 <pinAvailable+0x62>
   c06c2:	f000 f89f 	bl	c0804 <_Z19__fetch_global_Wirev>
   c06c6:	2100      	movs	r1, #0
   c06c8:	7c00      	ldrb	r0, [r0, #16]
   c06ca:	f7fc fbf7 	bl	bcebc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c06ce:	f080 0001 	eor.w	r0, r0, #1
   c06d2:	b2c0      	uxtb	r0, r0
   c06d4:	e7d2      	b.n	c067c <pinAvailable+0x8>
   c06d6:	3809      	subs	r0, #9
   c06d8:	2801      	cmp	r0, #1
   c06da:	d8ee      	bhi.n	c06ba <pinAvailable+0x46>
   c06dc:	f000 f8f6 	bl	c08cc <_Z22__fetch_global_Serial1v>
   c06e0:	7c00      	ldrb	r0, [r0, #16]
   c06e2:	f7fc fd03 	bl	bd0ec <hal_usart_is_enabled>
   c06e6:	e7f2      	b.n	c06ce <pinAvailable+0x5a>
   c06e8:	2003e4d8 	.word	0x2003e4d8
   c06ec:	2003e4dc 	.word	0x2003e4dc

000c06f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c06f0:	2823      	cmp	r0, #35	; 0x23
{
   c06f2:	b538      	push	{r3, r4, r5, lr}
   c06f4:	4604      	mov	r4, r0
   c06f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c06f8:	d80a      	bhi.n	c0710 <pinMode+0x20>
   c06fa:	29ff      	cmp	r1, #255	; 0xff
   c06fc:	d008      	beq.n	c0710 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c06fe:	f7ff ffb9 	bl	c0674 <pinAvailable>
   c0702:	b128      	cbz	r0, c0710 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c0704:	4629      	mov	r1, r5
   c0706:	4620      	mov	r0, r4
}
   c0708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c070c:	f7fc bb5e 	b.w	bcdcc <HAL_Pin_Mode>
}
   c0710:	bd38      	pop	{r3, r4, r5, pc}

000c0712 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c0712:	b538      	push	{r3, r4, r5, lr}
   c0714:	4604      	mov	r4, r0
   c0716:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0718:	f7fc fb60 	bl	bcddc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c071c:	28ff      	cmp	r0, #255	; 0xff
   c071e:	d010      	beq.n	c0742 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c0720:	2806      	cmp	r0, #6
   c0722:	d804      	bhi.n	c072e <digitalWrite+0x1c>
   c0724:	234d      	movs	r3, #77	; 0x4d
   c0726:	fa23 f000 	lsr.w	r0, r3, r0
   c072a:	07c3      	lsls	r3, r0, #31
   c072c:	d409      	bmi.n	c0742 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c072e:	4620      	mov	r0, r4
   c0730:	f7ff ffa0 	bl	c0674 <pinAvailable>
   c0734:	b128      	cbz	r0, c0742 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c0736:	4629      	mov	r1, r5
   c0738:	4620      	mov	r0, r4
}
   c073a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c073e:	f7fc bb55 	b.w	bcdec <HAL_GPIO_Write>
}
   c0742:	bd38      	pop	{r3, r4, r5, pc}

000c0744 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c0744:	b510      	push	{r4, lr}
   c0746:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0748:	f7fc fb48 	bl	bcddc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c074c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c074e:	b2db      	uxtb	r3, r3
   c0750:	2b01      	cmp	r3, #1
   c0752:	d908      	bls.n	c0766 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c0754:	4620      	mov	r0, r4
   c0756:	f7ff ff8d 	bl	c0674 <pinAvailable>
   c075a:	b120      	cbz	r0, c0766 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c075c:	4620      	mov	r0, r4
}
   c075e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c0762:	f7fc bb4b 	b.w	bcdfc <HAL_GPIO_Read>
}
   c0766:	2000      	movs	r0, #0
   c0768:	bd10      	pop	{r4, pc}

000c076a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c076a:	280d      	cmp	r0, #13
{
   c076c:	b510      	push	{r4, lr}
   c076e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c0770:	bf9c      	itt	ls
   c0772:	340e      	addls	r4, #14
   c0774:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c0776:	4620      	mov	r0, r4
   c0778:	f7ff ff7c 	bl	c0674 <pinAvailable>
   c077c:	b150      	cbz	r0, c0794 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c077e:	2103      	movs	r1, #3
   c0780:	4620      	mov	r0, r4
   c0782:	f7fc fb1b 	bl	bcdbc <HAL_Validate_Pin_Function>
   c0786:	2803      	cmp	r0, #3
   c0788:	d104      	bne.n	c0794 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c078a:	4620      	mov	r0, r4
}
   c078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c0790:	f7fc bb4c 	b.w	bce2c <hal_adc_read>
}
   c0794:	2000      	movs	r0, #0
   c0796:	bd10      	pop	{r4, pc}

000c0798 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0798:	4770      	bx	lr

000c079a <__tcf_1>:
   c079a:	4770      	bx	lr

000c079c <_Z17acquireWireBufferv>:
{
   c079c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c079e:	4b0a      	ldr	r3, [pc, #40]	; (c07c8 <_Z17acquireWireBufferv+0x2c>)
   c07a0:	6003      	str	r3, [r0, #0]
   c07a2:	2301      	movs	r3, #1
{
   c07a4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c07a6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07a8:	4908      	ldr	r1, [pc, #32]	; (c07cc <_Z17acquireWireBufferv+0x30>)
   c07aa:	2020      	movs	r0, #32
   c07ac:	f000 f8b4 	bl	c0918 <_ZnajRKSt9nothrow_t>
	};
   c07b0:	2520      	movs	r5, #32
   c07b2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07b4:	4905      	ldr	r1, [pc, #20]	; (c07cc <_Z17acquireWireBufferv+0x30>)
	};
   c07b6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07b8:	4628      	mov	r0, r5
   c07ba:	f000 f8ad 	bl	c0918 <_ZnajRKSt9nothrow_t>
	};
   c07be:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c07c2:	4620      	mov	r0, r4
   c07c4:	bd38      	pop	{r3, r4, r5, pc}
   c07c6:	bf00      	nop
   c07c8:	00010018 	.word	0x00010018
   c07cc:	000c69bc 	.word	0x000c69bc

000c07d0 <_Z18acquireWire1Bufferv>:
{
   c07d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c07d2:	4b0a      	ldr	r3, [pc, #40]	; (c07fc <_Z18acquireWire1Bufferv+0x2c>)
   c07d4:	6003      	str	r3, [r0, #0]
   c07d6:	2301      	movs	r3, #1
{
   c07d8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c07da:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07dc:	4908      	ldr	r1, [pc, #32]	; (c0800 <_Z18acquireWire1Bufferv+0x30>)
   c07de:	2020      	movs	r0, #32
   c07e0:	f000 f89a 	bl	c0918 <_ZnajRKSt9nothrow_t>
	};
   c07e4:	2520      	movs	r5, #32
   c07e6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07e8:	4905      	ldr	r1, [pc, #20]	; (c0800 <_Z18acquireWire1Bufferv+0x30>)
	};
   c07ea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c07ec:	4628      	mov	r0, r5
   c07ee:	f000 f893 	bl	c0918 <_ZnajRKSt9nothrow_t>
	};
   c07f2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c07f6:	4620      	mov	r0, r4
   c07f8:	bd38      	pop	{r3, r4, r5, pc}
   c07fa:	bf00      	nop
   c07fc:	00010018 	.word	0x00010018
   c0800:	000c69bc 	.word	0x000c69bc

000c0804 <_Z19__fetch_global_Wirev>:
{
   c0804:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0806:	4d0e      	ldr	r5, [pc, #56]	; (c0840 <_Z19__fetch_global_Wirev+0x3c>)
   c0808:	7829      	ldrb	r1, [r5, #0]
   c080a:	f3bf 8f5b 	dmb	ish
   c080e:	f011 0401 	ands.w	r4, r1, #1
{
   c0812:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0814:	d111      	bne.n	c083a <_Z19__fetch_global_Wirev+0x36>
   c0816:	4628      	mov	r0, r5
   c0818:	f7f3 fc50 	bl	b40bc <__cxa_guard_acquire>
   c081c:	b168      	cbz	r0, c083a <_Z19__fetch_global_Wirev+0x36>
   c081e:	4668      	mov	r0, sp
   c0820:	f7ff ffbc 	bl	c079c <_Z17acquireWireBufferv>
   c0824:	466a      	mov	r2, sp
   c0826:	4621      	mov	r1, r4
   c0828:	4806      	ldr	r0, [pc, #24]	; (c0844 <_Z19__fetch_global_Wirev+0x40>)
   c082a:	f7fd fbb7 	bl	bdf9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c082e:	4628      	mov	r0, r5
   c0830:	f7f3 fc49 	bl	b40c6 <__cxa_guard_release>
   c0834:	4804      	ldr	r0, [pc, #16]	; (c0848 <_Z19__fetch_global_Wirev+0x44>)
   c0836:	f001 fe49 	bl	c24cc <atexit>
	return wire;
}
   c083a:	4802      	ldr	r0, [pc, #8]	; (c0844 <_Z19__fetch_global_Wirev+0x40>)
   c083c:	b007      	add	sp, #28
   c083e:	bd30      	pop	{r4, r5, pc}
   c0840:	2003e714 	.word	0x2003e714
   c0844:	2003e71c 	.word	0x2003e71c
   c0848:	000c0799 	.word	0x000c0799

000c084c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c084c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c084e:	4c0e      	ldr	r4, [pc, #56]	; (c0888 <_Z20__fetch_global_Wire1v+0x3c>)
   c0850:	7823      	ldrb	r3, [r4, #0]
   c0852:	f3bf 8f5b 	dmb	ish
   c0856:	07db      	lsls	r3, r3, #31
{
   c0858:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c085a:	d411      	bmi.n	c0880 <_Z20__fetch_global_Wire1v+0x34>
   c085c:	4620      	mov	r0, r4
   c085e:	f7f3 fc2d 	bl	b40bc <__cxa_guard_acquire>
   c0862:	b168      	cbz	r0, c0880 <_Z20__fetch_global_Wire1v+0x34>
   c0864:	4668      	mov	r0, sp
   c0866:	f7ff ffb3 	bl	c07d0 <_Z18acquireWire1Bufferv>
   c086a:	466a      	mov	r2, sp
   c086c:	2101      	movs	r1, #1
   c086e:	4807      	ldr	r0, [pc, #28]	; (c088c <_Z20__fetch_global_Wire1v+0x40>)
   c0870:	f7fd fb94 	bl	bdf9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0874:	4620      	mov	r0, r4
   c0876:	f7f3 fc26 	bl	b40c6 <__cxa_guard_release>
   c087a:	4805      	ldr	r0, [pc, #20]	; (c0890 <_Z20__fetch_global_Wire1v+0x44>)
   c087c:	f001 fe26 	bl	c24cc <atexit>
	return wire;
}
   c0880:	4802      	ldr	r0, [pc, #8]	; (c088c <_Z20__fetch_global_Wire1v+0x40>)
   c0882:	b006      	add	sp, #24
   c0884:	bd10      	pop	{r4, pc}
   c0886:	bf00      	nop
   c0888:	2003e718 	.word	0x2003e718
   c088c:	2003e730 	.word	0x2003e730
   c0890:	000c079b 	.word	0x000c079b

000c0894 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0894:	4770      	bx	lr
	...

000c0898 <_Z20acquireSerial1Bufferv>:
{
   c0898:	b538      	push	{r3, r4, r5, lr}
   c089a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c089c:	2514      	movs	r5, #20
   c089e:	462a      	mov	r2, r5
   c08a0:	2100      	movs	r1, #0
   c08a2:	f001 fe67 	bl	c2574 <memset>
   c08a6:	8025      	strh	r5, [r4, #0]
   c08a8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c08aa:	4907      	ldr	r1, [pc, #28]	; (c08c8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c08ac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c08ae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c08b0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c08b2:	f000 f831 	bl	c0918 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c08b6:	4904      	ldr	r1, [pc, #16]	; (c08c8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c08b8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c08ba:	4628      	mov	r0, r5
   c08bc:	f000 f82c 	bl	c0918 <_ZnajRKSt9nothrow_t>
    };
   c08c0:	60e0      	str	r0, [r4, #12]
}
   c08c2:	4620      	mov	r0, r4
   c08c4:	bd38      	pop	{r3, r4, r5, pc}
   c08c6:	bf00      	nop
   c08c8:	000c69bc 	.word	0x000c69bc

000c08cc <_Z22__fetch_global_Serial1v>:
{
   c08cc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c08ce:	4d0e      	ldr	r5, [pc, #56]	; (c0908 <_Z22__fetch_global_Serial1v+0x3c>)
   c08d0:	7829      	ldrb	r1, [r5, #0]
   c08d2:	f3bf 8f5b 	dmb	ish
   c08d6:	f011 0401 	ands.w	r4, r1, #1
{
   c08da:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c08dc:	d111      	bne.n	c0902 <_Z22__fetch_global_Serial1v+0x36>
   c08de:	4628      	mov	r0, r5
   c08e0:	f7f3 fbec 	bl	b40bc <__cxa_guard_acquire>
   c08e4:	b168      	cbz	r0, c0902 <_Z22__fetch_global_Serial1v+0x36>
   c08e6:	a801      	add	r0, sp, #4
   c08e8:	f7ff ffd6 	bl	c0898 <_Z20acquireSerial1Bufferv>
   c08ec:	aa01      	add	r2, sp, #4
   c08ee:	4621      	mov	r1, r4
   c08f0:	4806      	ldr	r0, [pc, #24]	; (c090c <_Z22__fetch_global_Serial1v+0x40>)
   c08f2:	f7ff fd63 	bl	c03bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c08f6:	4628      	mov	r0, r5
   c08f8:	f7f3 fbe5 	bl	b40c6 <__cxa_guard_release>
   c08fc:	4804      	ldr	r0, [pc, #16]	; (c0910 <_Z22__fetch_global_Serial1v+0x44>)
   c08fe:	f001 fde5 	bl	c24cc <atexit>
    return serial1;
}
   c0902:	4802      	ldr	r0, [pc, #8]	; (c090c <_Z22__fetch_global_Serial1v+0x40>)
   c0904:	b007      	add	sp, #28
   c0906:	bd30      	pop	{r4, r5, pc}
   c0908:	2003e744 	.word	0x2003e744
   c090c:	2003e748 	.word	0x2003e748
   c0910:	000c0895 	.word	0x000c0895

000c0914 <_ZnwjRKSt9nothrow_t>:
   c0914:	f7f3 bbbf 	b.w	b4096 <_Znwj>

000c0918 <_ZnajRKSt9nothrow_t>:
   c0918:	f7f3 bbbf 	b.w	b409a <_Znaj>

000c091c <_ZSt17__throw_bad_allocv>:
   c091c:	b508      	push	{r3, lr}
   c091e:	f7fc fdf9 	bl	bd514 <abort>

000c0922 <_ZSt20__throw_length_errorPKc>:
   c0922:	b508      	push	{r3, lr}
   c0924:	f7fc fdf6 	bl	bd514 <abort>

000c0928 <_ZSt25__throw_bad_function_callv>:
   c0928:	b508      	push	{r3, lr}
   c092a:	f7fc fdf3 	bl	bd514 <abort>
	...

000c0930 <pow>:
   c0930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0932:	ed2d 8b02 	vpush	{d8}
   c0936:	ec57 6b10 	vmov	r6, r7, d0
   c093a:	ec55 4b11 	vmov	r4, r5, d1
   c093e:	f000 f8cb 	bl	c0ad8 <__ieee754_pow>
   c0942:	4b63      	ldr	r3, [pc, #396]	; (c0ad0 <pow+0x1a0>)
   c0944:	eeb0 8a40 	vmov.f32	s16, s0
   c0948:	eef0 8a60 	vmov.f32	s17, s1
   c094c:	f993 3000 	ldrsb.w	r3, [r3]
   c0950:	3301      	adds	r3, #1
   c0952:	d02a      	beq.n	c09aa <pow+0x7a>
   c0954:	4622      	mov	r2, r4
   c0956:	462b      	mov	r3, r5
   c0958:	4620      	mov	r0, r4
   c095a:	4629      	mov	r1, r5
   c095c:	f001 fcc4 	bl	c22e8 <__aeabi_dcmpun>
   c0960:	bb18      	cbnz	r0, c09aa <pow+0x7a>
   c0962:	4632      	mov	r2, r6
   c0964:	463b      	mov	r3, r7
   c0966:	4630      	mov	r0, r6
   c0968:	4639      	mov	r1, r7
   c096a:	f001 fcbd 	bl	c22e8 <__aeabi_dcmpun>
   c096e:	2800      	cmp	r0, #0
   c0970:	d144      	bne.n	c09fc <pow+0xcc>
   c0972:	2200      	movs	r2, #0
   c0974:	2300      	movs	r3, #0
   c0976:	4630      	mov	r0, r6
   c0978:	4639      	mov	r1, r7
   c097a:	f001 fc83 	bl	c2284 <__aeabi_dcmpeq>
   c097e:	b1d8      	cbz	r0, c09b8 <pow+0x88>
   c0980:	2200      	movs	r2, #0
   c0982:	2300      	movs	r3, #0
   c0984:	4620      	mov	r0, r4
   c0986:	4629      	mov	r1, r5
   c0988:	f001 fc7c 	bl	c2284 <__aeabi_dcmpeq>
   c098c:	2800      	cmp	r0, #0
   c098e:	d13d      	bne.n	c0a0c <pow+0xdc>
   c0990:	ec45 4b10 	vmov	d0, r4, r5
   c0994:	f000 ff10 	bl	c17b8 <finite>
   c0998:	b138      	cbz	r0, c09aa <pow+0x7a>
   c099a:	4620      	mov	r0, r4
   c099c:	4629      	mov	r1, r5
   c099e:	2200      	movs	r2, #0
   c09a0:	2300      	movs	r3, #0
   c09a2:	f001 fc79 	bl	c2298 <__aeabi_dcmplt>
   c09a6:	2800      	cmp	r0, #0
   c09a8:	d15c      	bne.n	c0a64 <pow+0x134>
   c09aa:	eeb0 0a48 	vmov.f32	s0, s16
   c09ae:	eef0 0a68 	vmov.f32	s1, s17
   c09b2:	ecbd 8b02 	vpop	{d8}
   c09b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c09b8:	eeb0 0a48 	vmov.f32	s0, s16
   c09bc:	eef0 0a68 	vmov.f32	s1, s17
   c09c0:	f000 fefa 	bl	c17b8 <finite>
   c09c4:	b358      	cbz	r0, c0a1e <pow+0xee>
   c09c6:	ec51 0b18 	vmov	r0, r1, d8
   c09ca:	2200      	movs	r2, #0
   c09cc:	2300      	movs	r3, #0
   c09ce:	f001 fc59 	bl	c2284 <__aeabi_dcmpeq>
   c09d2:	2800      	cmp	r0, #0
   c09d4:	d0e9      	beq.n	c09aa <pow+0x7a>
   c09d6:	ec47 6b10 	vmov	d0, r6, r7
   c09da:	f000 feed 	bl	c17b8 <finite>
   c09de:	2800      	cmp	r0, #0
   c09e0:	d0e3      	beq.n	c09aa <pow+0x7a>
   c09e2:	ec45 4b10 	vmov	d0, r4, r5
   c09e6:	f000 fee7 	bl	c17b8 <finite>
   c09ea:	2800      	cmp	r0, #0
   c09ec:	d0dd      	beq.n	c09aa <pow+0x7a>
   c09ee:	f7fc fda1 	bl	bd534 <__errno>
   c09f2:	2322      	movs	r3, #34	; 0x22
   c09f4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; c0ab0 <pow+0x180>
   c09f8:	6003      	str	r3, [r0, #0]
   c09fa:	e7d6      	b.n	c09aa <pow+0x7a>
   c09fc:	4620      	mov	r0, r4
   c09fe:	4629      	mov	r1, r5
   c0a00:	2200      	movs	r2, #0
   c0a02:	2300      	movs	r3, #0
   c0a04:	f001 fc3e 	bl	c2284 <__aeabi_dcmpeq>
   c0a08:	2800      	cmp	r0, #0
   c0a0a:	d0ce      	beq.n	c09aa <pow+0x7a>
   c0a0c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; c0ab8 <pow+0x188>
   c0a10:	eeb0 0a48 	vmov.f32	s0, s16
   c0a14:	eef0 0a68 	vmov.f32	s1, s17
   c0a18:	ecbd 8b02 	vpop	{d8}
   c0a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0a1e:	ec47 6b10 	vmov	d0, r6, r7
   c0a22:	f000 fec9 	bl	c17b8 <finite>
   c0a26:	2800      	cmp	r0, #0
   c0a28:	d0cd      	beq.n	c09c6 <pow+0x96>
   c0a2a:	ec45 4b10 	vmov	d0, r4, r5
   c0a2e:	f000 fec3 	bl	c17b8 <finite>
   c0a32:	2800      	cmp	r0, #0
   c0a34:	d0c7      	beq.n	c09c6 <pow+0x96>
   c0a36:	ec53 2b18 	vmov	r2, r3, d8
   c0a3a:	ee18 0a10 	vmov	r0, s16
   c0a3e:	4619      	mov	r1, r3
   c0a40:	f001 fc52 	bl	c22e8 <__aeabi_dcmpun>
   c0a44:	bb20      	cbnz	r0, c0a90 <pow+0x160>
   c0a46:	f7fc fd75 	bl	bd534 <__errno>
   c0a4a:	4603      	mov	r3, r0
   c0a4c:	2222      	movs	r2, #34	; 0x22
   c0a4e:	601a      	str	r2, [r3, #0]
   c0a50:	4630      	mov	r0, r6
   c0a52:	4639      	mov	r1, r7
   c0a54:	2200      	movs	r2, #0
   c0a56:	2300      	movs	r3, #0
   c0a58:	f001 fc1e 	bl	c2298 <__aeabi_dcmplt>
   c0a5c:	b948      	cbnz	r0, c0a72 <pow+0x142>
   c0a5e:	ed9f 8b18 	vldr	d8, [pc, #96]	; c0ac0 <pow+0x190>
   c0a62:	e7a2      	b.n	c09aa <pow+0x7a>
   c0a64:	f7fc fd66 	bl	bd534 <__errno>
   c0a68:	2321      	movs	r3, #33	; 0x21
   c0a6a:	ed9f 8b17 	vldr	d8, [pc, #92]	; c0ac8 <pow+0x198>
   c0a6e:	6003      	str	r3, [r0, #0]
   c0a70:	e79b      	b.n	c09aa <pow+0x7a>
   c0a72:	ec45 4b10 	vmov	d0, r4, r5
   c0a76:	f000 feb3 	bl	c17e0 <rint>
   c0a7a:	4622      	mov	r2, r4
   c0a7c:	ec51 0b10 	vmov	r0, r1, d0
   c0a80:	462b      	mov	r3, r5
   c0a82:	f001 fbff 	bl	c2284 <__aeabi_dcmpeq>
   c0a86:	2800      	cmp	r0, #0
   c0a88:	d1e9      	bne.n	c0a5e <pow+0x12e>
   c0a8a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; c0ac8 <pow+0x198>
   c0a8e:	e78c      	b.n	c09aa <pow+0x7a>
   c0a90:	f7fc fd50 	bl	bd534 <__errno>
   c0a94:	2200      	movs	r2, #0
   c0a96:	2300      	movs	r3, #0
   c0a98:	2121      	movs	r1, #33	; 0x21
   c0a9a:	6001      	str	r1, [r0, #0]
   c0a9c:	4610      	mov	r0, r2
   c0a9e:	4619      	mov	r1, r3
   c0aa0:	f001 fab2 	bl	c2008 <__aeabi_ddiv>
   c0aa4:	ec41 0b18 	vmov	d8, r0, r1
   c0aa8:	e77f      	b.n	c09aa <pow+0x7a>
   c0aaa:	bf00      	nop
   c0aac:	f3af 8000 	nop.w
	...
   c0abc:	3ff00000 	.word	0x3ff00000
   c0ac0:	00000000 	.word	0x00000000
   c0ac4:	7ff00000 	.word	0x7ff00000
   c0ac8:	00000000 	.word	0x00000000
   c0acc:	fff00000 	.word	0xfff00000
   c0ad0:	2003d688 	.word	0x2003d688
   c0ad4:	00000000 	.word	0x00000000

000c0ad8 <__ieee754_pow>:
   c0ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0adc:	ec57 6b11 	vmov	r6, r7, d1
   c0ae0:	ed2d 8b0c 	vpush	{d8-d13}
   c0ae4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   c0ae8:	ea5a 0206 	orrs.w	r2, sl, r6
   c0aec:	b087      	sub	sp, #28
   c0aee:	d03d      	beq.n	c0b6c <__ieee754_pow+0x94>
   c0af0:	ec55 4b10 	vmov	r4, r5, d0
   c0af4:	4972      	ldr	r1, [pc, #456]	; (c0cc0 <__ieee754_pow+0x1e8>)
   c0af6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   c0afa:	4588      	cmp	r8, r1
   c0afc:	ee10 2a10 	vmov	r2, s0
   c0b00:	46a9      	mov	r9, r5
   c0b02:	dc2c      	bgt.n	c0b5e <__ieee754_pow+0x86>
   c0b04:	ee11 3a10 	vmov	r3, s2
   c0b08:	46bb      	mov	fp, r7
   c0b0a:	d036      	beq.n	c0b7a <__ieee754_pow+0xa2>
   c0b0c:	458a      	cmp	sl, r1
   c0b0e:	dc26      	bgt.n	c0b5e <__ieee754_pow+0x86>
   c0b10:	496b      	ldr	r1, [pc, #428]	; (c0cc0 <__ieee754_pow+0x1e8>)
   c0b12:	458a      	cmp	sl, r1
   c0b14:	d021      	beq.n	c0b5a <__ieee754_pow+0x82>
   c0b16:	f1b9 0f00 	cmp.w	r9, #0
   c0b1a:	db39      	blt.n	c0b90 <__ieee754_pow+0xb8>
   c0b1c:	2100      	movs	r1, #0
   c0b1e:	9100      	str	r1, [sp, #0]
   c0b20:	2b00      	cmp	r3, #0
   c0b22:	d151      	bne.n	c0bc8 <__ieee754_pow+0xf0>
   c0b24:	4b66      	ldr	r3, [pc, #408]	; (c0cc0 <__ieee754_pow+0x1e8>)
   c0b26:	459a      	cmp	sl, r3
   c0b28:	f000 80a2 	beq.w	c0c70 <__ieee754_pow+0x198>
   c0b2c:	4b65      	ldr	r3, [pc, #404]	; (c0cc4 <__ieee754_pow+0x1ec>)
   c0b2e:	459a      	cmp	sl, r3
   c0b30:	f000 80b0 	beq.w	c0c94 <__ieee754_pow+0x1bc>
   c0b34:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   c0b38:	f000 84c0 	beq.w	c14bc <__ieee754_pow+0x9e4>
   c0b3c:	4b62      	ldr	r3, [pc, #392]	; (c0cc8 <__ieee754_pow+0x1f0>)
   c0b3e:	459b      	cmp	fp, r3
   c0b40:	d142      	bne.n	c0bc8 <__ieee754_pow+0xf0>
   c0b42:	f1b9 0f00 	cmp.w	r9, #0
   c0b46:	db3f      	blt.n	c0bc8 <__ieee754_pow+0xf0>
   c0b48:	ec45 4b10 	vmov	d0, r4, r5
   c0b4c:	b007      	add	sp, #28
   c0b4e:	ecbd 8b0c 	vpop	{d8-d13}
   c0b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0b56:	f000 bd59 	b.w	c160c <__ieee754_sqrt>
   c0b5a:	2b00      	cmp	r3, #0
   c0b5c:	d0db      	beq.n	c0b16 <__ieee754_pow+0x3e>
   c0b5e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c0b62:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c0b66:	ea58 0302 	orrs.w	r3, r8, r2
   c0b6a:	d109      	bne.n	c0b80 <__ieee754_pow+0xa8>
   c0b6c:	ed9f 0b50 	vldr	d0, [pc, #320]	; c0cb0 <__ieee754_pow+0x1d8>
   c0b70:	b007      	add	sp, #28
   c0b72:	ecbd 8b0c 	vpop	{d8-d13}
   c0b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0b7a:	b90c      	cbnz	r4, c0b80 <__ieee754_pow+0xa8>
   c0b7c:	45c2      	cmp	sl, r8
   c0b7e:	ddc7      	ble.n	c0b10 <__ieee754_pow+0x38>
   c0b80:	4852      	ldr	r0, [pc, #328]	; (c0ccc <__ieee754_pow+0x1f4>)
   c0b82:	b007      	add	sp, #28
   c0b84:	ecbd 8b0c 	vpop	{d8-d13}
   c0b88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0b8c:	f000 be20 	b.w	c17d0 <nan>
   c0b90:	494f      	ldr	r1, [pc, #316]	; (c0cd0 <__ieee754_pow+0x1f8>)
   c0b92:	458a      	cmp	sl, r1
   c0b94:	f300 8085 	bgt.w	c0ca2 <__ieee754_pow+0x1ca>
   c0b98:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   c0b9c:	458a      	cmp	sl, r1
   c0b9e:	dd0f      	ble.n	c0bc0 <__ieee754_pow+0xe8>
   c0ba0:	ea4f 512a 	mov.w	r1, sl, asr #20
   c0ba4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   c0ba8:	2914      	cmp	r1, #20
   c0baa:	f340 849b 	ble.w	c14e4 <__ieee754_pow+0xa0c>
   c0bae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   c0bb2:	fa23 f001 	lsr.w	r0, r3, r1
   c0bb6:	fa00 f101 	lsl.w	r1, r0, r1
   c0bba:	4299      	cmp	r1, r3
   c0bbc:	f000 84ed 	beq.w	c159a <__ieee754_pow+0xac2>
   c0bc0:	2100      	movs	r1, #0
   c0bc2:	9100      	str	r1, [sp, #0]
   c0bc4:	2b00      	cmp	r3, #0
   c0bc6:	d0b1      	beq.n	c0b2c <__ieee754_pow+0x54>
   c0bc8:	ec45 4b10 	vmov	d0, r4, r5
   c0bcc:	9202      	str	r2, [sp, #8]
   c0bce:	f000 fde9 	bl	c17a4 <fabs>
   c0bd2:	9a02      	ldr	r2, [sp, #8]
   c0bd4:	bb5a      	cbnz	r2, c0c2e <__ieee754_pow+0x156>
   c0bd6:	f1b8 0f00 	cmp.w	r8, #0
   c0bda:	d004      	beq.n	c0be6 <__ieee754_pow+0x10e>
   c0bdc:	4b39      	ldr	r3, [pc, #228]	; (c0cc4 <__ieee754_pow+0x1ec>)
   c0bde:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   c0be2:	429a      	cmp	r2, r3
   c0be4:	d123      	bne.n	c0c2e <__ieee754_pow+0x156>
   c0be6:	f1bb 0f00 	cmp.w	fp, #0
   c0bea:	da07      	bge.n	c0bfc <__ieee754_pow+0x124>
   c0bec:	ec53 2b10 	vmov	r2, r3, d0
   c0bf0:	4934      	ldr	r1, [pc, #208]	; (c0cc4 <__ieee754_pow+0x1ec>)
   c0bf2:	2000      	movs	r0, #0
   c0bf4:	f001 fa08 	bl	c2008 <__aeabi_ddiv>
   c0bf8:	ec41 0b10 	vmov	d0, r0, r1
   c0bfc:	f1b9 0f00 	cmp.w	r9, #0
   c0c00:	dab6      	bge.n	c0b70 <__ieee754_pow+0x98>
   c0c02:	9b00      	ldr	r3, [sp, #0]
   c0c04:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c0c08:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c0c0c:	ea58 0303 	orrs.w	r3, r8, r3
   c0c10:	f040 848d 	bne.w	c152e <__ieee754_pow+0xa56>
   c0c14:	ec53 2b10 	vmov	r2, r3, d0
   c0c18:	4610      	mov	r0, r2
   c0c1a:	4619      	mov	r1, r3
   c0c1c:	f000 ff12 	bl	c1a44 <__aeabi_dsub>
   c0c20:	4602      	mov	r2, r0
   c0c22:	460b      	mov	r3, r1
   c0c24:	f001 f9f0 	bl	c2008 <__aeabi_ddiv>
   c0c28:	ec41 0b10 	vmov	d0, r0, r1
   c0c2c:	e7a0      	b.n	c0b70 <__ieee754_pow+0x98>
   c0c2e:	9a00      	ldr	r2, [sp, #0]
   c0c30:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   c0c34:	3b01      	subs	r3, #1
   c0c36:	9304      	str	r3, [sp, #16]
   c0c38:	4313      	orrs	r3, r2
   c0c3a:	d035      	beq.n	c0ca8 <__ieee754_pow+0x1d0>
   c0c3c:	4b25      	ldr	r3, [pc, #148]	; (c0cd4 <__ieee754_pow+0x1fc>)
   c0c3e:	459a      	cmp	sl, r3
   c0c40:	dd4c      	ble.n	c0cdc <__ieee754_pow+0x204>
   c0c42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   c0c46:	459a      	cmp	sl, r3
   c0c48:	4b23      	ldr	r3, [pc, #140]	; (c0cd8 <__ieee754_pow+0x200>)
   c0c4a:	f340 83db 	ble.w	c1404 <__ieee754_pow+0x92c>
   c0c4e:	4598      	cmp	r8, r3
   c0c50:	f340 8360 	ble.w	c1314 <__ieee754_pow+0x83c>
   c0c54:	f1bb 0f00 	cmp.w	fp, #0
   c0c58:	f340 8360 	ble.w	c131c <__ieee754_pow+0x844>
   c0c5c:	a316      	add	r3, pc, #88	; (adr r3, c0cb8 <__ieee754_pow+0x1e0>)
   c0c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0c62:	4610      	mov	r0, r2
   c0c64:	4619      	mov	r1, r3
   c0c66:	f001 f8a5 	bl	c1db4 <__aeabi_dmul>
   c0c6a:	ec41 0b10 	vmov	d0, r0, r1
   c0c6e:	e77f      	b.n	c0b70 <__ieee754_pow+0x98>
   c0c70:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   c0c74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c0c78:	4313      	orrs	r3, r2
   c0c7a:	f43f af77 	beq.w	c0b6c <__ieee754_pow+0x94>
   c0c7e:	4b16      	ldr	r3, [pc, #88]	; (c0cd8 <__ieee754_pow+0x200>)
   c0c80:	4598      	cmp	r8, r3
   c0c82:	f340 837a 	ble.w	c137a <__ieee754_pow+0x8a2>
   c0c86:	f1bb 0f00 	cmp.w	fp, #0
   c0c8a:	f2c0 8347 	blt.w	c131c <__ieee754_pow+0x844>
   c0c8e:	ec47 6b10 	vmov	d0, r6, r7
   c0c92:	e76d      	b.n	c0b70 <__ieee754_pow+0x98>
   c0c94:	f1bb 0f00 	cmp.w	fp, #0
   c0c98:	f2c0 841a 	blt.w	c14d0 <__ieee754_pow+0x9f8>
   c0c9c:	ec45 4b10 	vmov	d0, r4, r5
   c0ca0:	e766      	b.n	c0b70 <__ieee754_pow+0x98>
   c0ca2:	2102      	movs	r1, #2
   c0ca4:	9100      	str	r1, [sp, #0]
   c0ca6:	e73b      	b.n	c0b20 <__ieee754_pow+0x48>
   c0ca8:	4622      	mov	r2, r4
   c0caa:	462b      	mov	r3, r5
   c0cac:	e7b4      	b.n	c0c18 <__ieee754_pow+0x140>
   c0cae:	bf00      	nop
   c0cb0:	00000000 	.word	0x00000000
   c0cb4:	3ff00000 	.word	0x3ff00000
   c0cb8:	8800759c 	.word	0x8800759c
   c0cbc:	7e37e43c 	.word	0x7e37e43c
   c0cc0:	7ff00000 	.word	0x7ff00000
   c0cc4:	3ff00000 	.word	0x3ff00000
   c0cc8:	3fe00000 	.word	0x3fe00000
   c0ccc:	000c69c0 	.word	0x000c69c0
   c0cd0:	433fffff 	.word	0x433fffff
   c0cd4:	41e00000 	.word	0x41e00000
   c0cd8:	3fefffff 	.word	0x3fefffff
   c0cdc:	4be4      	ldr	r3, [pc, #912]	; (c1070 <__ieee754_pow+0x598>)
   c0cde:	ea09 0303 	and.w	r3, r9, r3
   c0ce2:	2200      	movs	r2, #0
   c0ce4:	b953      	cbnz	r3, c0cfc <__ieee754_pow+0x224>
   c0ce6:	ec51 0b10 	vmov	r0, r1, d0
   c0cea:	4be2      	ldr	r3, [pc, #904]	; (c1074 <__ieee754_pow+0x59c>)
   c0cec:	f001 f862 	bl	c1db4 <__aeabi_dmul>
   c0cf0:	ec41 0b10 	vmov	d0, r0, r1
   c0cf4:	ee10 8a90 	vmov	r8, s1
   c0cf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   c0cfc:	ea4f 5328 	mov.w	r3, r8, asr #20
   c0d00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   c0d04:	189a      	adds	r2, r3, r2
   c0d06:	4bdc      	ldr	r3, [pc, #880]	; (c1078 <__ieee754_pow+0x5a0>)
   c0d08:	9205      	str	r2, [sp, #20]
   c0d0a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   c0d0e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   c0d12:	4598      	cmp	r8, r3
   c0d14:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   c0d18:	dd07      	ble.n	c0d2a <__ieee754_pow+0x252>
   c0d1a:	4bd8      	ldr	r3, [pc, #864]	; (c107c <__ieee754_pow+0x5a4>)
   c0d1c:	4598      	cmp	r8, r3
   c0d1e:	f340 8414 	ble.w	c154a <__ieee754_pow+0xa72>
   c0d22:	3201      	adds	r2, #1
   c0d24:	9205      	str	r2, [sp, #20]
   c0d26:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   c0d2a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; c1010 <__ieee754_pow+0x538>
   c0d2e:	ed9f 7bba 	vldr	d7, [pc, #744]	; c1018 <__ieee754_pow+0x540>
   c0d32:	ec53 2b16 	vmov	r2, r3, d6
   c0d36:	eeb0 ca47 	vmov.f32	s24, s14
   c0d3a:	eef0 ca67 	vmov.f32	s25, s15
   c0d3e:	2500      	movs	r5, #0
   c0d40:	eeb0 da47 	vmov.f32	s26, s14
   c0d44:	eef0 da67 	vmov.f32	s27, s15
   c0d48:	ec5b ab10 	vmov	sl, fp, d0
   c0d4c:	46a3      	mov	fp, r4
   c0d4e:	4650      	mov	r0, sl
   c0d50:	4659      	mov	r1, fp
   c0d52:	ec43 2b1a 	vmov	d10, r2, r3
   c0d56:	f000 fe75 	bl	c1a44 <__aeabi_dsub>
   c0d5a:	ec53 2b1a 	vmov	r2, r3, d10
   c0d5e:	4680      	mov	r8, r0
   c0d60:	4689      	mov	r9, r1
   c0d62:	4650      	mov	r0, sl
   c0d64:	4659      	mov	r1, fp
   c0d66:	f000 fe6f 	bl	c1a48 <__adddf3>
   c0d6a:	4602      	mov	r2, r0
   c0d6c:	460b      	mov	r3, r1
   c0d6e:	2000      	movs	r0, #0
   c0d70:	49c3      	ldr	r1, [pc, #780]	; (c1080 <__ieee754_pow+0x5a8>)
   c0d72:	f001 f949 	bl	c2008 <__aeabi_ddiv>
   c0d76:	ec41 0b1b 	vmov	d11, r0, r1
   c0d7a:	4640      	mov	r0, r8
   c0d7c:	ec53 2b1b 	vmov	r2, r3, d11
   c0d80:	4649      	mov	r1, r9
   c0d82:	f001 f817 	bl	c1db4 <__aeabi_dmul>
   c0d86:	ec41 0b18 	vmov	d8, r0, r1
   c0d8a:	460a      	mov	r2, r1
   c0d8c:	4601      	mov	r1, r0
   c0d8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   c0d92:	2100      	movs	r1, #0
   c0d94:	9102      	str	r1, [sp, #8]
   c0d96:	1064      	asrs	r4, r4, #1
   c0d98:	ec4b ab19 	vmov	d9, sl, fp
   c0d9c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   c0da0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   c0da4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   c0da8:	2000      	movs	r0, #0
   c0daa:	1959      	adds	r1, r3, r5
   c0dac:	4604      	mov	r4, r0
   c0dae:	460d      	mov	r5, r1
   c0db0:	4602      	mov	r2, r0
   c0db2:	460b      	mov	r3, r1
   c0db4:	4650      	mov	r0, sl
   c0db6:	4659      	mov	r1, fp
   c0db8:	f000 fffc 	bl	c1db4 <__aeabi_dmul>
   c0dbc:	4602      	mov	r2, r0
   c0dbe:	460b      	mov	r3, r1
   c0dc0:	4640      	mov	r0, r8
   c0dc2:	4649      	mov	r1, r9
   c0dc4:	f000 fe3e 	bl	c1a44 <__aeabi_dsub>
   c0dc8:	ec53 2b1a 	vmov	r2, r3, d10
   c0dcc:	4680      	mov	r8, r0
   c0dce:	4689      	mov	r9, r1
   c0dd0:	4620      	mov	r0, r4
   c0dd2:	4629      	mov	r1, r5
   c0dd4:	f000 fe36 	bl	c1a44 <__aeabi_dsub>
   c0dd8:	4602      	mov	r2, r0
   c0dda:	460b      	mov	r3, r1
   c0ddc:	ec51 0b19 	vmov	r0, r1, d9
   c0de0:	f000 fe30 	bl	c1a44 <__aeabi_dsub>
   c0de4:	4652      	mov	r2, sl
   c0de6:	465b      	mov	r3, fp
   c0de8:	f000 ffe4 	bl	c1db4 <__aeabi_dmul>
   c0dec:	4602      	mov	r2, r0
   c0dee:	460b      	mov	r3, r1
   c0df0:	4640      	mov	r0, r8
   c0df2:	4649      	mov	r1, r9
   c0df4:	f000 fe26 	bl	c1a44 <__aeabi_dsub>
   c0df8:	ec53 2b1b 	vmov	r2, r3, d11
   c0dfc:	f000 ffda 	bl	c1db4 <__aeabi_dmul>
   c0e00:	ec53 2b18 	vmov	r2, r3, d8
   c0e04:	ec41 0b19 	vmov	d9, r0, r1
   c0e08:	ec51 0b18 	vmov	r0, r1, d8
   c0e0c:	f000 ffd2 	bl	c1db4 <__aeabi_dmul>
   c0e10:	a383      	add	r3, pc, #524	; (adr r3, c1020 <__ieee754_pow+0x548>)
   c0e12:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e16:	4604      	mov	r4, r0
   c0e18:	460d      	mov	r5, r1
   c0e1a:	f000 ffcb 	bl	c1db4 <__aeabi_dmul>
   c0e1e:	a382      	add	r3, pc, #520	; (adr r3, c1028 <__ieee754_pow+0x550>)
   c0e20:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e24:	f000 fe10 	bl	c1a48 <__adddf3>
   c0e28:	4622      	mov	r2, r4
   c0e2a:	462b      	mov	r3, r5
   c0e2c:	f000 ffc2 	bl	c1db4 <__aeabi_dmul>
   c0e30:	a37f      	add	r3, pc, #508	; (adr r3, c1030 <__ieee754_pow+0x558>)
   c0e32:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e36:	f000 fe07 	bl	c1a48 <__adddf3>
   c0e3a:	4622      	mov	r2, r4
   c0e3c:	462b      	mov	r3, r5
   c0e3e:	f000 ffb9 	bl	c1db4 <__aeabi_dmul>
   c0e42:	a37d      	add	r3, pc, #500	; (adr r3, c1038 <__ieee754_pow+0x560>)
   c0e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e48:	f000 fdfe 	bl	c1a48 <__adddf3>
   c0e4c:	4622      	mov	r2, r4
   c0e4e:	462b      	mov	r3, r5
   c0e50:	f000 ffb0 	bl	c1db4 <__aeabi_dmul>
   c0e54:	a37a      	add	r3, pc, #488	; (adr r3, c1040 <__ieee754_pow+0x568>)
   c0e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e5a:	f000 fdf5 	bl	c1a48 <__adddf3>
   c0e5e:	4622      	mov	r2, r4
   c0e60:	462b      	mov	r3, r5
   c0e62:	f000 ffa7 	bl	c1db4 <__aeabi_dmul>
   c0e66:	a378      	add	r3, pc, #480	; (adr r3, c1048 <__ieee754_pow+0x570>)
   c0e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0e6c:	f000 fdec 	bl	c1a48 <__adddf3>
   c0e70:	4622      	mov	r2, r4
   c0e72:	4680      	mov	r8, r0
   c0e74:	4689      	mov	r9, r1
   c0e76:	462b      	mov	r3, r5
   c0e78:	4620      	mov	r0, r4
   c0e7a:	4629      	mov	r1, r5
   c0e7c:	f000 ff9a 	bl	c1db4 <__aeabi_dmul>
   c0e80:	4602      	mov	r2, r0
   c0e82:	460b      	mov	r3, r1
   c0e84:	4640      	mov	r0, r8
   c0e86:	4649      	mov	r1, r9
   c0e88:	f000 ff94 	bl	c1db4 <__aeabi_dmul>
   c0e8c:	4652      	mov	r2, sl
   c0e8e:	4604      	mov	r4, r0
   c0e90:	460d      	mov	r5, r1
   c0e92:	465b      	mov	r3, fp
   c0e94:	ec51 0b18 	vmov	r0, r1, d8
   c0e98:	f000 fdd6 	bl	c1a48 <__adddf3>
   c0e9c:	ec53 2b19 	vmov	r2, r3, d9
   c0ea0:	f000 ff88 	bl	c1db4 <__aeabi_dmul>
   c0ea4:	4622      	mov	r2, r4
   c0ea6:	462b      	mov	r3, r5
   c0ea8:	f000 fdce 	bl	c1a48 <__adddf3>
   c0eac:	4652      	mov	r2, sl
   c0eae:	4680      	mov	r8, r0
   c0eb0:	4689      	mov	r9, r1
   c0eb2:	465b      	mov	r3, fp
   c0eb4:	4650      	mov	r0, sl
   c0eb6:	4659      	mov	r1, fp
   c0eb8:	f000 ff7c 	bl	c1db4 <__aeabi_dmul>
   c0ebc:	4602      	mov	r2, r0
   c0ebe:	460b      	mov	r3, r1
   c0ec0:	ec43 2b1a 	vmov	d10, r2, r3
   c0ec4:	4b6f      	ldr	r3, [pc, #444]	; (c1084 <__ieee754_pow+0x5ac>)
   c0ec6:	2200      	movs	r2, #0
   c0ec8:	f000 fdbe 	bl	c1a48 <__adddf3>
   c0ecc:	4642      	mov	r2, r8
   c0ece:	464b      	mov	r3, r9
   c0ed0:	f000 fdba 	bl	c1a48 <__adddf3>
   c0ed4:	2400      	movs	r4, #0
   c0ed6:	460d      	mov	r5, r1
   c0ed8:	4622      	mov	r2, r4
   c0eda:	462b      	mov	r3, r5
   c0edc:	4650      	mov	r0, sl
   c0ede:	4659      	mov	r1, fp
   c0ee0:	f000 ff68 	bl	c1db4 <__aeabi_dmul>
   c0ee4:	4b67      	ldr	r3, [pc, #412]	; (c1084 <__ieee754_pow+0x5ac>)
   c0ee6:	4682      	mov	sl, r0
   c0ee8:	468b      	mov	fp, r1
   c0eea:	2200      	movs	r2, #0
   c0eec:	4620      	mov	r0, r4
   c0eee:	4629      	mov	r1, r5
   c0ef0:	f000 fda8 	bl	c1a44 <__aeabi_dsub>
   c0ef4:	ec53 2b1a 	vmov	r2, r3, d10
   c0ef8:	f000 fda4 	bl	c1a44 <__aeabi_dsub>
   c0efc:	4602      	mov	r2, r0
   c0efe:	460b      	mov	r3, r1
   c0f00:	4640      	mov	r0, r8
   c0f02:	4649      	mov	r1, r9
   c0f04:	f000 fd9e 	bl	c1a44 <__aeabi_dsub>
   c0f08:	ec53 2b18 	vmov	r2, r3, d8
   c0f0c:	f000 ff52 	bl	c1db4 <__aeabi_dmul>
   c0f10:	4622      	mov	r2, r4
   c0f12:	462b      	mov	r3, r5
   c0f14:	4604      	mov	r4, r0
   c0f16:	460d      	mov	r5, r1
   c0f18:	ec51 0b19 	vmov	r0, r1, d9
   c0f1c:	f000 ff4a 	bl	c1db4 <__aeabi_dmul>
   c0f20:	4602      	mov	r2, r0
   c0f22:	460b      	mov	r3, r1
   c0f24:	4620      	mov	r0, r4
   c0f26:	4629      	mov	r1, r5
   c0f28:	f000 fd8e 	bl	c1a48 <__adddf3>
   c0f2c:	4680      	mov	r8, r0
   c0f2e:	4689      	mov	r9, r1
   c0f30:	4642      	mov	r2, r8
   c0f32:	464b      	mov	r3, r9
   c0f34:	4650      	mov	r0, sl
   c0f36:	4659      	mov	r1, fp
   c0f38:	f000 fd86 	bl	c1a48 <__adddf3>
   c0f3c:	a344      	add	r3, pc, #272	; (adr r3, c1050 <__ieee754_pow+0x578>)
   c0f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0f42:	2000      	movs	r0, #0
   c0f44:	4604      	mov	r4, r0
   c0f46:	460d      	mov	r5, r1
   c0f48:	f000 ff34 	bl	c1db4 <__aeabi_dmul>
   c0f4c:	4652      	mov	r2, sl
   c0f4e:	ec41 0b19 	vmov	d9, r0, r1
   c0f52:	465b      	mov	r3, fp
   c0f54:	4620      	mov	r0, r4
   c0f56:	4629      	mov	r1, r5
   c0f58:	f000 fd74 	bl	c1a44 <__aeabi_dsub>
   c0f5c:	4602      	mov	r2, r0
   c0f5e:	460b      	mov	r3, r1
   c0f60:	4640      	mov	r0, r8
   c0f62:	4649      	mov	r1, r9
   c0f64:	f000 fd6e 	bl	c1a44 <__aeabi_dsub>
   c0f68:	a33b      	add	r3, pc, #236	; (adr r3, c1058 <__ieee754_pow+0x580>)
   c0f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0f6e:	f000 ff21 	bl	c1db4 <__aeabi_dmul>
   c0f72:	4602      	mov	r2, r0
   c0f74:	460b      	mov	r3, r1
   c0f76:	4620      	mov	r0, r4
   c0f78:	4629      	mov	r1, r5
   c0f7a:	4614      	mov	r4, r2
   c0f7c:	461d      	mov	r5, r3
   c0f7e:	a338      	add	r3, pc, #224	; (adr r3, c1060 <__ieee754_pow+0x588>)
   c0f80:	e9d3 2300 	ldrd	r2, r3, [r3]
   c0f84:	f000 ff16 	bl	c1db4 <__aeabi_dmul>
   c0f88:	4602      	mov	r2, r0
   c0f8a:	460b      	mov	r3, r1
   c0f8c:	4620      	mov	r0, r4
   c0f8e:	4629      	mov	r1, r5
   c0f90:	f000 fd5a 	bl	c1a48 <__adddf3>
   c0f94:	ec53 2b1d 	vmov	r2, r3, d13
   c0f98:	f000 fd56 	bl	c1a48 <__adddf3>
   c0f9c:	4680      	mov	r8, r0
   c0f9e:	9805      	ldr	r0, [sp, #20]
   c0fa0:	4689      	mov	r9, r1
   c0fa2:	f000 fe9d 	bl	c1ce0 <__aeabi_i2d>
   c0fa6:	4642      	mov	r2, r8
   c0fa8:	4682      	mov	sl, r0
   c0faa:	468b      	mov	fp, r1
   c0fac:	464b      	mov	r3, r9
   c0fae:	ec51 0b19 	vmov	r0, r1, d9
   c0fb2:	f000 fd49 	bl	c1a48 <__adddf3>
   c0fb6:	ec53 2b1c 	vmov	r2, r3, d12
   c0fba:	f000 fd45 	bl	c1a48 <__adddf3>
   c0fbe:	4652      	mov	r2, sl
   c0fc0:	465b      	mov	r3, fp
   c0fc2:	f000 fd41 	bl	c1a48 <__adddf3>
   c0fc6:	4652      	mov	r2, sl
   c0fc8:	465b      	mov	r3, fp
   c0fca:	2000      	movs	r0, #0
   c0fcc:	4604      	mov	r4, r0
   c0fce:	460d      	mov	r5, r1
   c0fd0:	f000 fd38 	bl	c1a44 <__aeabi_dsub>
   c0fd4:	ec53 2b1c 	vmov	r2, r3, d12
   c0fd8:	f000 fd34 	bl	c1a44 <__aeabi_dsub>
   c0fdc:	ec53 2b19 	vmov	r2, r3, d9
   c0fe0:	f000 fd30 	bl	c1a44 <__aeabi_dsub>
   c0fe4:	4602      	mov	r2, r0
   c0fe6:	460b      	mov	r3, r1
   c0fe8:	4640      	mov	r0, r8
   c0fea:	4649      	mov	r1, r9
   c0fec:	f000 fd2a 	bl	c1a44 <__aeabi_dsub>
   c0ff0:	9b00      	ldr	r3, [sp, #0]
   c0ff2:	9a04      	ldr	r2, [sp, #16]
   c0ff4:	3b01      	subs	r3, #1
   c0ff6:	4313      	orrs	r3, r2
   c0ff8:	4682      	mov	sl, r0
   c0ffa:	468b      	mov	fp, r1
   c0ffc:	f040 81b6 	bne.w	c136c <__ieee754_pow+0x894>
   c1000:	ed9f 7b19 	vldr	d7, [pc, #100]	; c1068 <__ieee754_pow+0x590>
   c1004:	eeb0 8a47 	vmov.f32	s16, s14
   c1008:	eef0 8a67 	vmov.f32	s17, s15
   c100c:	e03c      	b.n	c1088 <__ieee754_pow+0x5b0>
   c100e:	bf00      	nop
   c1010:	00000000 	.word	0x00000000
   c1014:	3ff00000 	.word	0x3ff00000
	...
   c1020:	4a454eef 	.word	0x4a454eef
   c1024:	3fca7e28 	.word	0x3fca7e28
   c1028:	93c9db65 	.word	0x93c9db65
   c102c:	3fcd864a 	.word	0x3fcd864a
   c1030:	a91d4101 	.word	0xa91d4101
   c1034:	3fd17460 	.word	0x3fd17460
   c1038:	518f264d 	.word	0x518f264d
   c103c:	3fd55555 	.word	0x3fd55555
   c1040:	db6fabff 	.word	0xdb6fabff
   c1044:	3fdb6db6 	.word	0x3fdb6db6
   c1048:	33333303 	.word	0x33333303
   c104c:	3fe33333 	.word	0x3fe33333
   c1050:	e0000000 	.word	0xe0000000
   c1054:	3feec709 	.word	0x3feec709
   c1058:	dc3a03fd 	.word	0xdc3a03fd
   c105c:	3feec709 	.word	0x3feec709
   c1060:	145b01f5 	.word	0x145b01f5
   c1064:	be3e2fe0 	.word	0xbe3e2fe0
   c1068:	00000000 	.word	0x00000000
   c106c:	bff00000 	.word	0xbff00000
   c1070:	7ff00000 	.word	0x7ff00000
   c1074:	43400000 	.word	0x43400000
   c1078:	0003988e 	.word	0x0003988e
   c107c:	000bb679 	.word	0x000bb679
   c1080:	3ff00000 	.word	0x3ff00000
   c1084:	40080000 	.word	0x40080000
   c1088:	2300      	movs	r3, #0
   c108a:	e9cd 6700 	strd	r6, r7, [sp]
   c108e:	9300      	str	r3, [sp, #0]
   c1090:	e9dd 8900 	ldrd	r8, r9, [sp]
   c1094:	4630      	mov	r0, r6
   c1096:	4642      	mov	r2, r8
   c1098:	464b      	mov	r3, r9
   c109a:	4639      	mov	r1, r7
   c109c:	f000 fcd2 	bl	c1a44 <__aeabi_dsub>
   c10a0:	4622      	mov	r2, r4
   c10a2:	462b      	mov	r3, r5
   c10a4:	f000 fe86 	bl	c1db4 <__aeabi_dmul>
   c10a8:	4632      	mov	r2, r6
   c10aa:	463b      	mov	r3, r7
   c10ac:	4606      	mov	r6, r0
   c10ae:	460f      	mov	r7, r1
   c10b0:	4650      	mov	r0, sl
   c10b2:	4659      	mov	r1, fp
   c10b4:	f000 fe7e 	bl	c1db4 <__aeabi_dmul>
   c10b8:	4602      	mov	r2, r0
   c10ba:	460b      	mov	r3, r1
   c10bc:	4630      	mov	r0, r6
   c10be:	4639      	mov	r1, r7
   c10c0:	f000 fcc2 	bl	c1a48 <__adddf3>
   c10c4:	4642      	mov	r2, r8
   c10c6:	464b      	mov	r3, r9
   c10c8:	4606      	mov	r6, r0
   c10ca:	460f      	mov	r7, r1
   c10cc:	4620      	mov	r0, r4
   c10ce:	4629      	mov	r1, r5
   c10d0:	f000 fe70 	bl	c1db4 <__aeabi_dmul>
   c10d4:	4604      	mov	r4, r0
   c10d6:	460d      	mov	r5, r1
   c10d8:	462b      	mov	r3, r5
   c10da:	4630      	mov	r0, r6
   c10dc:	4639      	mov	r1, r7
   c10de:	4622      	mov	r2, r4
   c10e0:	f000 fcb2 	bl	c1a48 <__adddf3>
   c10e4:	4bc2      	ldr	r3, [pc, #776]	; (c13f0 <__ieee754_pow+0x918>)
   c10e6:	4299      	cmp	r1, r3
   c10e8:	4680      	mov	r8, r0
   c10ea:	4689      	mov	r9, r1
   c10ec:	468a      	mov	sl, r1
   c10ee:	f340 8118 	ble.w	c1322 <__ieee754_pow+0x84a>
   c10f2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   c10f6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   c10fa:	4303      	orrs	r3, r0
   c10fc:	f040 8207 	bne.w	c150e <__ieee754_pow+0xa36>
   c1100:	a3a3      	add	r3, pc, #652	; (adr r3, c1390 <__ieee754_pow+0x8b8>)
   c1102:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1106:	4630      	mov	r0, r6
   c1108:	4639      	mov	r1, r7
   c110a:	f000 fc9d 	bl	c1a48 <__adddf3>
   c110e:	4602      	mov	r2, r0
   c1110:	460b      	mov	r3, r1
   c1112:	4640      	mov	r0, r8
   c1114:	4649      	mov	r1, r9
   c1116:	4690      	mov	r8, r2
   c1118:	4699      	mov	r9, r3
   c111a:	4622      	mov	r2, r4
   c111c:	462b      	mov	r3, r5
   c111e:	f000 fc91 	bl	c1a44 <__aeabi_dsub>
   c1122:	4602      	mov	r2, r0
   c1124:	460b      	mov	r3, r1
   c1126:	4640      	mov	r0, r8
   c1128:	4649      	mov	r1, r9
   c112a:	f001 f8d3 	bl	c22d4 <__aeabi_dcmpgt>
   c112e:	2800      	cmp	r0, #0
   c1130:	f040 81ed 	bne.w	c150e <__ieee754_pow+0xa36>
   c1134:	f3ca 530a 	ubfx	r3, sl, #20, #11
   c1138:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   c113c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   c1140:	fa42 f303 	asr.w	r3, r2, r3
   c1144:	4453      	add	r3, sl
   c1146:	49ab      	ldr	r1, [pc, #684]	; (c13f4 <__ieee754_pow+0x91c>)
   c1148:	f3c3 520a 	ubfx	r2, r3, #20, #11
   c114c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   c1150:	fa41 fc02 	asr.w	ip, r1, r2
   c1154:	f3c3 0113 	ubfx	r1, r3, #0, #20
   c1158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c115c:	f1c2 0214 	rsb	r2, r2, #20
   c1160:	fa41 f202 	asr.w	r2, r1, r2
   c1164:	2000      	movs	r0, #0
   c1166:	ea23 010c 	bic.w	r1, r3, ip
   c116a:	f1ba 0f00 	cmp.w	sl, #0
   c116e:	9200      	str	r2, [sp, #0]
   c1170:	460b      	mov	r3, r1
   c1172:	4602      	mov	r2, r0
   c1174:	da02      	bge.n	c117c <__ieee754_pow+0x6a4>
   c1176:	9900      	ldr	r1, [sp, #0]
   c1178:	4249      	negs	r1, r1
   c117a:	9100      	str	r1, [sp, #0]
   c117c:	4620      	mov	r0, r4
   c117e:	4629      	mov	r1, r5
   c1180:	f000 fc60 	bl	c1a44 <__aeabi_dsub>
   c1184:	9b00      	ldr	r3, [sp, #0]
   c1186:	051b      	lsls	r3, r3, #20
   c1188:	9302      	str	r3, [sp, #8]
   c118a:	4602      	mov	r2, r0
   c118c:	460b      	mov	r3, r1
   c118e:	4604      	mov	r4, r0
   c1190:	460d      	mov	r5, r1
   c1192:	4630      	mov	r0, r6
   c1194:	4639      	mov	r1, r7
   c1196:	f000 fc57 	bl	c1a48 <__adddf3>
   c119a:	4689      	mov	r9, r1
   c119c:	f04f 0800 	mov.w	r8, #0
   c11a0:	a37d      	add	r3, pc, #500	; (adr r3, c1398 <__ieee754_pow+0x8c0>)
   c11a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c11a6:	4640      	mov	r0, r8
   c11a8:	4649      	mov	r1, r9
   c11aa:	f000 fe03 	bl	c1db4 <__aeabi_dmul>
   c11ae:	4622      	mov	r2, r4
   c11b0:	462b      	mov	r3, r5
   c11b2:	4682      	mov	sl, r0
   c11b4:	468b      	mov	fp, r1
   c11b6:	4640      	mov	r0, r8
   c11b8:	4649      	mov	r1, r9
   c11ba:	f000 fc43 	bl	c1a44 <__aeabi_dsub>
   c11be:	4602      	mov	r2, r0
   c11c0:	460b      	mov	r3, r1
   c11c2:	4630      	mov	r0, r6
   c11c4:	4639      	mov	r1, r7
   c11c6:	f000 fc3d 	bl	c1a44 <__aeabi_dsub>
   c11ca:	a375      	add	r3, pc, #468	; (adr r3, c13a0 <__ieee754_pow+0x8c8>)
   c11cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c11d0:	f000 fdf0 	bl	c1db4 <__aeabi_dmul>
   c11d4:	a374      	add	r3, pc, #464	; (adr r3, c13a8 <__ieee754_pow+0x8d0>)
   c11d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c11da:	4604      	mov	r4, r0
   c11dc:	460d      	mov	r5, r1
   c11de:	4640      	mov	r0, r8
   c11e0:	4649      	mov	r1, r9
   c11e2:	f000 fde7 	bl	c1db4 <__aeabi_dmul>
   c11e6:	4602      	mov	r2, r0
   c11e8:	460b      	mov	r3, r1
   c11ea:	4620      	mov	r0, r4
   c11ec:	4629      	mov	r1, r5
   c11ee:	f000 fc2b 	bl	c1a48 <__adddf3>
   c11f2:	4606      	mov	r6, r0
   c11f4:	460f      	mov	r7, r1
   c11f6:	4632      	mov	r2, r6
   c11f8:	463b      	mov	r3, r7
   c11fa:	4650      	mov	r0, sl
   c11fc:	4659      	mov	r1, fp
   c11fe:	f000 fc23 	bl	c1a48 <__adddf3>
   c1202:	4652      	mov	r2, sl
   c1204:	465b      	mov	r3, fp
   c1206:	4604      	mov	r4, r0
   c1208:	460d      	mov	r5, r1
   c120a:	f000 fc1b 	bl	c1a44 <__aeabi_dsub>
   c120e:	4602      	mov	r2, r0
   c1210:	460b      	mov	r3, r1
   c1212:	4630      	mov	r0, r6
   c1214:	4639      	mov	r1, r7
   c1216:	f000 fc15 	bl	c1a44 <__aeabi_dsub>
   c121a:	4622      	mov	r2, r4
   c121c:	4680      	mov	r8, r0
   c121e:	4689      	mov	r9, r1
   c1220:	462b      	mov	r3, r5
   c1222:	4620      	mov	r0, r4
   c1224:	4629      	mov	r1, r5
   c1226:	f000 fdc5 	bl	c1db4 <__aeabi_dmul>
   c122a:	a361      	add	r3, pc, #388	; (adr r3, c13b0 <__ieee754_pow+0x8d8>)
   c122c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1230:	4606      	mov	r6, r0
   c1232:	460f      	mov	r7, r1
   c1234:	f000 fdbe 	bl	c1db4 <__aeabi_dmul>
   c1238:	a35f      	add	r3, pc, #380	; (adr r3, c13b8 <__ieee754_pow+0x8e0>)
   c123a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c123e:	f000 fc01 	bl	c1a44 <__aeabi_dsub>
   c1242:	4632      	mov	r2, r6
   c1244:	463b      	mov	r3, r7
   c1246:	f000 fdb5 	bl	c1db4 <__aeabi_dmul>
   c124a:	a35d      	add	r3, pc, #372	; (adr r3, c13c0 <__ieee754_pow+0x8e8>)
   c124c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1250:	f000 fbfa 	bl	c1a48 <__adddf3>
   c1254:	4632      	mov	r2, r6
   c1256:	463b      	mov	r3, r7
   c1258:	f000 fdac 	bl	c1db4 <__aeabi_dmul>
   c125c:	a35a      	add	r3, pc, #360	; (adr r3, c13c8 <__ieee754_pow+0x8f0>)
   c125e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1262:	f000 fbef 	bl	c1a44 <__aeabi_dsub>
   c1266:	4632      	mov	r2, r6
   c1268:	463b      	mov	r3, r7
   c126a:	f000 fda3 	bl	c1db4 <__aeabi_dmul>
   c126e:	a358      	add	r3, pc, #352	; (adr r3, c13d0 <__ieee754_pow+0x8f8>)
   c1270:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1274:	f000 fbe8 	bl	c1a48 <__adddf3>
   c1278:	4632      	mov	r2, r6
   c127a:	463b      	mov	r3, r7
   c127c:	f000 fd9a 	bl	c1db4 <__aeabi_dmul>
   c1280:	4602      	mov	r2, r0
   c1282:	460b      	mov	r3, r1
   c1284:	4620      	mov	r0, r4
   c1286:	4629      	mov	r1, r5
   c1288:	f000 fbdc 	bl	c1a44 <__aeabi_dsub>
   c128c:	4606      	mov	r6, r0
   c128e:	460f      	mov	r7, r1
   c1290:	4632      	mov	r2, r6
   c1292:	463b      	mov	r3, r7
   c1294:	4620      	mov	r0, r4
   c1296:	4629      	mov	r1, r5
   c1298:	f000 fd8c 	bl	c1db4 <__aeabi_dmul>
   c129c:	4602      	mov	r2, r0
   c129e:	460b      	mov	r3, r1
   c12a0:	4630      	mov	r0, r6
   c12a2:	4639      	mov	r1, r7
   c12a4:	4616      	mov	r6, r2
   c12a6:	461f      	mov	r7, r3
   c12a8:	2200      	movs	r2, #0
   c12aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c12ae:	f000 fbc9 	bl	c1a44 <__aeabi_dsub>
   c12b2:	4602      	mov	r2, r0
   c12b4:	460b      	mov	r3, r1
   c12b6:	4630      	mov	r0, r6
   c12b8:	4639      	mov	r1, r7
   c12ba:	f000 fea5 	bl	c2008 <__aeabi_ddiv>
   c12be:	4642      	mov	r2, r8
   c12c0:	4606      	mov	r6, r0
   c12c2:	460f      	mov	r7, r1
   c12c4:	464b      	mov	r3, r9
   c12c6:	4620      	mov	r0, r4
   c12c8:	4629      	mov	r1, r5
   c12ca:	f000 fd73 	bl	c1db4 <__aeabi_dmul>
   c12ce:	4642      	mov	r2, r8
   c12d0:	464b      	mov	r3, r9
   c12d2:	f000 fbb9 	bl	c1a48 <__adddf3>
   c12d6:	4602      	mov	r2, r0
   c12d8:	460b      	mov	r3, r1
   c12da:	4630      	mov	r0, r6
   c12dc:	4639      	mov	r1, r7
   c12de:	f000 fbb1 	bl	c1a44 <__aeabi_dsub>
   c12e2:	4622      	mov	r2, r4
   c12e4:	462b      	mov	r3, r5
   c12e6:	f000 fbad 	bl	c1a44 <__aeabi_dsub>
   c12ea:	4602      	mov	r2, r0
   c12ec:	460b      	mov	r3, r1
   c12ee:	2000      	movs	r0, #0
   c12f0:	4941      	ldr	r1, [pc, #260]	; (c13f8 <__ieee754_pow+0x920>)
   c12f2:	f000 fba7 	bl	c1a44 <__aeabi_dsub>
   c12f6:	9a02      	ldr	r2, [sp, #8]
   c12f8:	460b      	mov	r3, r1
   c12fa:	4413      	add	r3, r2
   c12fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   c1300:	f2c0 8143 	blt.w	c158a <__ieee754_pow+0xab2>
   c1304:	4619      	mov	r1, r3
   c1306:	ec53 2b18 	vmov	r2, r3, d8
   c130a:	f000 fd53 	bl	c1db4 <__aeabi_dmul>
   c130e:	ec41 0b10 	vmov	d0, r0, r1
   c1312:	e42d      	b.n	c0b70 <__ieee754_pow+0x98>
   c1314:	f1bb 0f00 	cmp.w	fp, #0
   c1318:	f6ff aca0 	blt.w	c0c5c <__ieee754_pow+0x184>
   c131c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c13d8 <__ieee754_pow+0x900>
   c1320:	e426      	b.n	c0b70 <__ieee754_pow+0x98>
   c1322:	f8df c0dc 	ldr.w	ip, [pc, #220]	; c1400 <__ieee754_pow+0x928>
   c1326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c132a:	4563      	cmp	r3, ip
   c132c:	f340 80e7 	ble.w	c14fe <__ieee754_pow+0xa26>
   c1330:	4b32      	ldr	r3, [pc, #200]	; (c13fc <__ieee754_pow+0x924>)
   c1332:	440b      	add	r3, r1
   c1334:	4303      	orrs	r3, r0
   c1336:	d10a      	bne.n	c134e <__ieee754_pow+0x876>
   c1338:	4622      	mov	r2, r4
   c133a:	462b      	mov	r3, r5
   c133c:	f000 fb82 	bl	c1a44 <__aeabi_dsub>
   c1340:	4632      	mov	r2, r6
   c1342:	463b      	mov	r3, r7
   c1344:	f000 ffbc 	bl	c22c0 <__aeabi_dcmpge>
   c1348:	2800      	cmp	r0, #0
   c134a:	f43f aef3 	beq.w	c1134 <__ieee754_pow+0x65c>
   c134e:	a324      	add	r3, pc, #144	; (adr r3, c13e0 <__ieee754_pow+0x908>)
   c1350:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1354:	ec51 0b18 	vmov	r0, r1, d8
   c1358:	f000 fd2c 	bl	c1db4 <__aeabi_dmul>
   c135c:	a320      	add	r3, pc, #128	; (adr r3, c13e0 <__ieee754_pow+0x908>)
   c135e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1362:	f000 fd27 	bl	c1db4 <__aeabi_dmul>
   c1366:	ec41 0b10 	vmov	d0, r0, r1
   c136a:	e401      	b.n	c0b70 <__ieee754_pow+0x98>
   c136c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; c13e8 <__ieee754_pow+0x910>
   c1370:	eeb0 8a47 	vmov.f32	s16, s14
   c1374:	eef0 8a67 	vmov.f32	s17, s15
   c1378:	e686      	b.n	c1088 <__ieee754_pow+0x5b0>
   c137a:	f1bb 0f00 	cmp.w	fp, #0
   c137e:	dacd      	bge.n	c131c <__ieee754_pow+0x844>
   c1380:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   c1384:	ee00 6a10 	vmov	s0, r6
   c1388:	ee00 3a90 	vmov	s1, r3
   c138c:	f7ff bbf0 	b.w	c0b70 <__ieee754_pow+0x98>
   c1390:	652b82fe 	.word	0x652b82fe
   c1394:	3c971547 	.word	0x3c971547
   c1398:	00000000 	.word	0x00000000
   c139c:	3fe62e43 	.word	0x3fe62e43
   c13a0:	fefa39ef 	.word	0xfefa39ef
   c13a4:	3fe62e42 	.word	0x3fe62e42
   c13a8:	0ca86c39 	.word	0x0ca86c39
   c13ac:	be205c61 	.word	0xbe205c61
   c13b0:	72bea4d0 	.word	0x72bea4d0
   c13b4:	3e663769 	.word	0x3e663769
   c13b8:	c5d26bf1 	.word	0xc5d26bf1
   c13bc:	3ebbbd41 	.word	0x3ebbbd41
   c13c0:	af25de2c 	.word	0xaf25de2c
   c13c4:	3f11566a 	.word	0x3f11566a
   c13c8:	16bebd93 	.word	0x16bebd93
   c13cc:	3f66c16c 	.word	0x3f66c16c
   c13d0:	5555553e 	.word	0x5555553e
   c13d4:	3fc55555 	.word	0x3fc55555
	...
   c13e0:	c2f8f359 	.word	0xc2f8f359
   c13e4:	01a56e1f 	.word	0x01a56e1f
   c13e8:	00000000 	.word	0x00000000
   c13ec:	3ff00000 	.word	0x3ff00000
   c13f0:	408fffff 	.word	0x408fffff
   c13f4:	000fffff 	.word	0x000fffff
   c13f8:	3ff00000 	.word	0x3ff00000
   c13fc:	3f6f3400 	.word	0x3f6f3400
   c1400:	4090cbff 	.word	0x4090cbff
   c1404:	4598      	cmp	r8, r3
   c1406:	db85      	blt.n	c1314 <__ieee754_pow+0x83c>
   c1408:	4b7d      	ldr	r3, [pc, #500]	; (c1600 <__ieee754_pow+0xb28>)
   c140a:	4598      	cmp	r8, r3
   c140c:	f73f ac22 	bgt.w	c0c54 <__ieee754_pow+0x17c>
   c1410:	ec51 0b10 	vmov	r0, r1, d0
   c1414:	4b7a      	ldr	r3, [pc, #488]	; (c1600 <__ieee754_pow+0xb28>)
   c1416:	2200      	movs	r2, #0
   c1418:	f000 fb14 	bl	c1a44 <__aeabi_dsub>
   c141c:	a368      	add	r3, pc, #416	; (adr r3, c15c0 <__ieee754_pow+0xae8>)
   c141e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1422:	4604      	mov	r4, r0
   c1424:	460d      	mov	r5, r1
   c1426:	f000 fcc5 	bl	c1db4 <__aeabi_dmul>
   c142a:	a367      	add	r3, pc, #412	; (adr r3, c15c8 <__ieee754_pow+0xaf0>)
   c142c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1430:	4682      	mov	sl, r0
   c1432:	468b      	mov	fp, r1
   c1434:	4620      	mov	r0, r4
   c1436:	4629      	mov	r1, r5
   c1438:	f000 fcbc 	bl	c1db4 <__aeabi_dmul>
   c143c:	4b71      	ldr	r3, [pc, #452]	; (c1604 <__ieee754_pow+0xb2c>)
   c143e:	ec41 0b18 	vmov	d8, r0, r1
   c1442:	2200      	movs	r2, #0
   c1444:	4620      	mov	r0, r4
   c1446:	4629      	mov	r1, r5
   c1448:	f000 fcb4 	bl	c1db4 <__aeabi_dmul>
   c144c:	4602      	mov	r2, r0
   c144e:	460b      	mov	r3, r1
   c1450:	a15f      	add	r1, pc, #380	; (adr r1, c15d0 <__ieee754_pow+0xaf8>)
   c1452:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1456:	f000 faf5 	bl	c1a44 <__aeabi_dsub>
   c145a:	4622      	mov	r2, r4
   c145c:	462b      	mov	r3, r5
   c145e:	f000 fca9 	bl	c1db4 <__aeabi_dmul>
   c1462:	4602      	mov	r2, r0
   c1464:	460b      	mov	r3, r1
   c1466:	2000      	movs	r0, #0
   c1468:	4967      	ldr	r1, [pc, #412]	; (c1608 <__ieee754_pow+0xb30>)
   c146a:	f000 faeb 	bl	c1a44 <__aeabi_dsub>
   c146e:	4622      	mov	r2, r4
   c1470:	4680      	mov	r8, r0
   c1472:	4689      	mov	r9, r1
   c1474:	462b      	mov	r3, r5
   c1476:	4620      	mov	r0, r4
   c1478:	4629      	mov	r1, r5
   c147a:	f000 fc9b 	bl	c1db4 <__aeabi_dmul>
   c147e:	4602      	mov	r2, r0
   c1480:	460b      	mov	r3, r1
   c1482:	4640      	mov	r0, r8
   c1484:	4649      	mov	r1, r9
   c1486:	f000 fc95 	bl	c1db4 <__aeabi_dmul>
   c148a:	a353      	add	r3, pc, #332	; (adr r3, c15d8 <__ieee754_pow+0xb00>)
   c148c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1490:	f000 fc90 	bl	c1db4 <__aeabi_dmul>
   c1494:	4602      	mov	r2, r0
   c1496:	460b      	mov	r3, r1
   c1498:	ec51 0b18 	vmov	r0, r1, d8
   c149c:	f000 fad2 	bl	c1a44 <__aeabi_dsub>
   c14a0:	4680      	mov	r8, r0
   c14a2:	4689      	mov	r9, r1
   c14a4:	4642      	mov	r2, r8
   c14a6:	464b      	mov	r3, r9
   c14a8:	4650      	mov	r0, sl
   c14aa:	4659      	mov	r1, fp
   c14ac:	f000 facc 	bl	c1a48 <__adddf3>
   c14b0:	2000      	movs	r0, #0
   c14b2:	4652      	mov	r2, sl
   c14b4:	465b      	mov	r3, fp
   c14b6:	4604      	mov	r4, r0
   c14b8:	460d      	mov	r5, r1
   c14ba:	e591      	b.n	c0fe0 <__ieee754_pow+0x508>
   c14bc:	4622      	mov	r2, r4
   c14be:	462b      	mov	r3, r5
   c14c0:	4620      	mov	r0, r4
   c14c2:	4629      	mov	r1, r5
   c14c4:	f000 fc76 	bl	c1db4 <__aeabi_dmul>
   c14c8:	ec41 0b10 	vmov	d0, r0, r1
   c14cc:	f7ff bb50 	b.w	c0b70 <__ieee754_pow+0x98>
   c14d0:	494b      	ldr	r1, [pc, #300]	; (c1600 <__ieee754_pow+0xb28>)
   c14d2:	2000      	movs	r0, #0
   c14d4:	4622      	mov	r2, r4
   c14d6:	462b      	mov	r3, r5
   c14d8:	f000 fd96 	bl	c2008 <__aeabi_ddiv>
   c14dc:	ec41 0b10 	vmov	d0, r0, r1
   c14e0:	f7ff bb46 	b.w	c0b70 <__ieee754_pow+0x98>
   c14e4:	2b00      	cmp	r3, #0
   c14e6:	d144      	bne.n	c1572 <__ieee754_pow+0xa9a>
   c14e8:	f1c1 0114 	rsb	r1, r1, #20
   c14ec:	fa4a f001 	asr.w	r0, sl, r1
   c14f0:	fa00 f101 	lsl.w	r1, r0, r1
   c14f4:	4551      	cmp	r1, sl
   c14f6:	d05a      	beq.n	c15ae <__ieee754_pow+0xad6>
   c14f8:	9300      	str	r3, [sp, #0]
   c14fa:	f7ff bb17 	b.w	c0b2c <__ieee754_pow+0x54>
   c14fe:	4a42      	ldr	r2, [pc, #264]	; (c1608 <__ieee754_pow+0xb30>)
   c1500:	4293      	cmp	r3, r2
   c1502:	dc5b      	bgt.n	c15bc <__ieee754_pow+0xae4>
   c1504:	e9dd 1200 	ldrd	r1, r2, [sp]
   c1508:	9102      	str	r1, [sp, #8]
   c150a:	9100      	str	r1, [sp, #0]
   c150c:	e646      	b.n	c119c <__ieee754_pow+0x6c4>
   c150e:	a334      	add	r3, pc, #208	; (adr r3, c15e0 <__ieee754_pow+0xb08>)
   c1510:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1514:	ec51 0b18 	vmov	r0, r1, d8
   c1518:	f000 fc4c 	bl	c1db4 <__aeabi_dmul>
   c151c:	a330      	add	r3, pc, #192	; (adr r3, c15e0 <__ieee754_pow+0xb08>)
   c151e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1522:	f000 fc47 	bl	c1db4 <__aeabi_dmul>
   c1526:	ec41 0b10 	vmov	d0, r0, r1
   c152a:	f7ff bb21 	b.w	c0b70 <__ieee754_pow+0x98>
   c152e:	9b00      	ldr	r3, [sp, #0]
   c1530:	2b01      	cmp	r3, #1
   c1532:	f47f ab1d 	bne.w	c0b70 <__ieee754_pow+0x98>
   c1536:	ee10 1a90 	vmov	r1, s1
   c153a:	ee10 2a10 	vmov	r2, s0
   c153e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1542:	ec43 2b10 	vmov	d0, r2, r3
   c1546:	f7ff bb13 	b.w	c0b70 <__ieee754_pow+0x98>
   c154a:	ed9f 7b27 	vldr	d7, [pc, #156]	; c15e8 <__ieee754_pow+0xb10>
   c154e:	eeb0 ca47 	vmov.f32	s24, s14
   c1552:	eef0 ca67 	vmov.f32	s25, s15
   c1556:	ed9f 7b26 	vldr	d7, [pc, #152]	; c15f0 <__ieee754_pow+0xb18>
   c155a:	eeb0 da47 	vmov.f32	s26, s14
   c155e:	eef0 da67 	vmov.f32	s27, s15
   c1562:	ed9f 7b25 	vldr	d7, [pc, #148]	; c15f8 <__ieee754_pow+0xb20>
   c1566:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   c156a:	ec53 2b17 	vmov	r2, r3, d7
   c156e:	f7ff bbeb 	b.w	c0d48 <__ieee754_pow+0x270>
   c1572:	ec45 4b10 	vmov	d0, r4, r5
   c1576:	9200      	str	r2, [sp, #0]
   c1578:	f000 f914 	bl	c17a4 <fabs>
   c157c:	9a00      	ldr	r2, [sp, #0]
   c157e:	2a00      	cmp	r2, #0
   c1580:	f47f ab92 	bne.w	c0ca8 <__ieee754_pow+0x1d0>
   c1584:	9200      	str	r2, [sp, #0]
   c1586:	f7ff bb26 	b.w	c0bd6 <__ieee754_pow+0xfe>
   c158a:	ec41 0b10 	vmov	d0, r0, r1
   c158e:	9800      	ldr	r0, [sp, #0]
   c1590:	f000 f9c2 	bl	c1918 <scalbn>
   c1594:	ec51 0b10 	vmov	r0, r1, d0
   c1598:	e6b5      	b.n	c1306 <__ieee754_pow+0x82e>
   c159a:	f000 0001 	and.w	r0, r0, #1
   c159e:	f1c0 0102 	rsb	r1, r0, #2
   c15a2:	9100      	str	r1, [sp, #0]
   c15a4:	2b00      	cmp	r3, #0
   c15a6:	f43f aac1 	beq.w	c0b2c <__ieee754_pow+0x54>
   c15aa:	f7ff bb0d 	b.w	c0bc8 <__ieee754_pow+0xf0>
   c15ae:	f000 0001 	and.w	r0, r0, #1
   c15b2:	f1c0 0302 	rsb	r3, r0, #2
   c15b6:	9300      	str	r3, [sp, #0]
   c15b8:	f7ff bab8 	b.w	c0b2c <__ieee754_pow+0x54>
   c15bc:	151b      	asrs	r3, r3, #20
   c15be:	e5bb      	b.n	c1138 <__ieee754_pow+0x660>
   c15c0:	60000000 	.word	0x60000000
   c15c4:	3ff71547 	.word	0x3ff71547
   c15c8:	f85ddf44 	.word	0xf85ddf44
   c15cc:	3e54ae0b 	.word	0x3e54ae0b
   c15d0:	55555555 	.word	0x55555555
   c15d4:	3fd55555 	.word	0x3fd55555
   c15d8:	652b82fe 	.word	0x652b82fe
   c15dc:	3ff71547 	.word	0x3ff71547
   c15e0:	8800759c 	.word	0x8800759c
   c15e4:	7e37e43c 	.word	0x7e37e43c
   c15e8:	40000000 	.word	0x40000000
   c15ec:	3fe2b803 	.word	0x3fe2b803
   c15f0:	43cfd006 	.word	0x43cfd006
   c15f4:	3e4cfdeb 	.word	0x3e4cfdeb
   c15f8:	00000000 	.word	0x00000000
   c15fc:	3ff80000 	.word	0x3ff80000
   c1600:	3ff00000 	.word	0x3ff00000
   c1604:	3fd00000 	.word	0x3fd00000
   c1608:	3fe00000 	.word	0x3fe00000

000c160c <__ieee754_sqrt>:
   c160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1610:	4a63      	ldr	r2, [pc, #396]	; (c17a0 <__ieee754_sqrt+0x194>)
   c1612:	ec55 4b10 	vmov	r4, r5, d0
   c1616:	43aa      	bics	r2, r5
   c1618:	f000 809f 	beq.w	c175a <__ieee754_sqrt+0x14e>
   c161c:	2d00      	cmp	r5, #0
   c161e:	ee10 ca10 	vmov	ip, s0
   c1622:	462b      	mov	r3, r5
   c1624:	dd54      	ble.n	c16d0 <__ieee754_sqrt+0xc4>
   c1626:	1529      	asrs	r1, r5, #20
   c1628:	d063      	beq.n	c16f2 <__ieee754_sqrt+0xe6>
   c162a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c162e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1632:	07c9      	lsls	r1, r1, #31
   c1634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1638:	d404      	bmi.n	c1644 <__ieee754_sqrt+0x38>
   c163a:	005b      	lsls	r3, r3, #1
   c163c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1640:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1644:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1648:	2600      	movs	r6, #0
   c164a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c164e:	107f      	asrs	r7, r7, #1
   c1650:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1654:	f04f 0e16 	mov.w	lr, #22
   c1658:	4634      	mov	r4, r6
   c165a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c165e:	18a1      	adds	r1, r4, r2
   c1660:	4299      	cmp	r1, r3
   c1662:	dc02      	bgt.n	c166a <__ieee754_sqrt+0x5e>
   c1664:	1a5b      	subs	r3, r3, r1
   c1666:	188c      	adds	r4, r1, r2
   c1668:	4416      	add	r6, r2
   c166a:	005b      	lsls	r3, r3, #1
   c166c:	f1be 0e01 	subs.w	lr, lr, #1
   c1670:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1674:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1678:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c167c:	d1ef      	bne.n	c165e <__ieee754_sqrt+0x52>
   c167e:	4675      	mov	r5, lr
   c1680:	2020      	movs	r0, #32
   c1682:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1686:	e00a      	b.n	c169e <__ieee754_sqrt+0x92>
   c1688:	d044      	beq.n	c1714 <__ieee754_sqrt+0x108>
   c168a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c168e:	3801      	subs	r0, #1
   c1690:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1694:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1698:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c169c:	d043      	beq.n	c1726 <__ieee754_sqrt+0x11a>
   c169e:	42a3      	cmp	r3, r4
   c16a0:	eb02 010e 	add.w	r1, r2, lr
   c16a4:	ddf0      	ble.n	c1688 <__ieee754_sqrt+0x7c>
   c16a6:	2900      	cmp	r1, #0
   c16a8:	eb01 0e02 	add.w	lr, r1, r2
   c16ac:	db0a      	blt.n	c16c4 <__ieee754_sqrt+0xb8>
   c16ae:	46a0      	mov	r8, r4
   c16b0:	1b1b      	subs	r3, r3, r4
   c16b2:	4561      	cmp	r1, ip
   c16b4:	bf88      	it	hi
   c16b6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c16ba:	ebac 0c01 	sub.w	ip, ip, r1
   c16be:	4415      	add	r5, r2
   c16c0:	4644      	mov	r4, r8
   c16c2:	e7e2      	b.n	c168a <__ieee754_sqrt+0x7e>
   c16c4:	f1be 0f00 	cmp.w	lr, #0
   c16c8:	dbf1      	blt.n	c16ae <__ieee754_sqrt+0xa2>
   c16ca:	f104 0801 	add.w	r8, r4, #1
   c16ce:	e7ef      	b.n	c16b0 <__ieee754_sqrt+0xa4>
   c16d0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c16d4:	4322      	orrs	r2, r4
   c16d6:	d038      	beq.n	c174a <__ieee754_sqrt+0x13e>
   c16d8:	2d00      	cmp	r5, #0
   c16da:	d14e      	bne.n	c177a <__ieee754_sqrt+0x16e>
   c16dc:	4629      	mov	r1, r5
   c16de:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c16e2:	3915      	subs	r1, #21
   c16e4:	4613      	mov	r3, r2
   c16e6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c16ea:	2a00      	cmp	r2, #0
   c16ec:	d0f7      	beq.n	c16de <__ieee754_sqrt+0xd2>
   c16ee:	02d6      	lsls	r6, r2, #11
   c16f0:	d450      	bmi.n	c1794 <__ieee754_sqrt+0x188>
   c16f2:	2000      	movs	r0, #0
   c16f4:	005b      	lsls	r3, r3, #1
   c16f6:	02dd      	lsls	r5, r3, #11
   c16f8:	4604      	mov	r4, r0
   c16fa:	f100 0001 	add.w	r0, r0, #1
   c16fe:	d5f9      	bpl.n	c16f4 <__ieee754_sqrt+0xe8>
   c1700:	461a      	mov	r2, r3
   c1702:	4663      	mov	r3, ip
   c1704:	fa0c fc00 	lsl.w	ip, ip, r0
   c1708:	f1c0 0020 	rsb	r0, r0, #32
   c170c:	40c3      	lsrs	r3, r0
   c170e:	1b09      	subs	r1, r1, r4
   c1710:	4313      	orrs	r3, r2
   c1712:	e78a      	b.n	c162a <__ieee754_sqrt+0x1e>
   c1714:	4561      	cmp	r1, ip
   c1716:	d8b8      	bhi.n	c168a <__ieee754_sqrt+0x7e>
   c1718:	2900      	cmp	r1, #0
   c171a:	eb01 0e02 	add.w	lr, r1, r2
   c171e:	dbd1      	blt.n	c16c4 <__ieee754_sqrt+0xb8>
   c1720:	4698      	mov	r8, r3
   c1722:	2300      	movs	r3, #0
   c1724:	e7c9      	b.n	c16ba <__ieee754_sqrt+0xae>
   c1726:	ea53 030c 	orrs.w	r3, r3, ip
   c172a:	d110      	bne.n	c174e <__ieee754_sqrt+0x142>
   c172c:	0868      	lsrs	r0, r5, #1
   c172e:	1071      	asrs	r1, r6, #1
   c1730:	07f3      	lsls	r3, r6, #31
   c1732:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c1736:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c173a:	bf48      	it	mi
   c173c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c1740:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c1744:	4602      	mov	r2, r0
   c1746:	ec43 2b10 	vmov	d0, r2, r3
   c174a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c174e:	1c6a      	adds	r2, r5, #1
   c1750:	bf16      	itet	ne
   c1752:	1c68      	addne	r0, r5, #1
   c1754:	3601      	addeq	r6, #1
   c1756:	0840      	lsrne	r0, r0, #1
   c1758:	e7e9      	b.n	c172e <__ieee754_sqrt+0x122>
   c175a:	ee10 2a10 	vmov	r2, s0
   c175e:	ee10 0a10 	vmov	r0, s0
   c1762:	462b      	mov	r3, r5
   c1764:	4629      	mov	r1, r5
   c1766:	f000 fb25 	bl	c1db4 <__aeabi_dmul>
   c176a:	4622      	mov	r2, r4
   c176c:	462b      	mov	r3, r5
   c176e:	f000 f96b 	bl	c1a48 <__adddf3>
   c1772:	ec41 0b10 	vmov	d0, r0, r1
   c1776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c177a:	ee10 2a10 	vmov	r2, s0
   c177e:	4620      	mov	r0, r4
   c1780:	4629      	mov	r1, r5
   c1782:	f000 f95f 	bl	c1a44 <__aeabi_dsub>
   c1786:	4602      	mov	r2, r0
   c1788:	460b      	mov	r3, r1
   c178a:	f000 fc3d 	bl	c2008 <__aeabi_ddiv>
   c178e:	ec41 0b10 	vmov	d0, r0, r1
   c1792:	e7da      	b.n	c174a <__ieee754_sqrt+0x13e>
   c1794:	4663      	mov	r3, ip
   c1796:	2020      	movs	r0, #32
   c1798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c179c:	e7b6      	b.n	c170c <__ieee754_sqrt+0x100>
   c179e:	bf00      	nop
   c17a0:	7ff00000 	.word	0x7ff00000

000c17a4 <fabs>:
   c17a4:	ec51 0b10 	vmov	r0, r1, d0
   c17a8:	ee10 2a10 	vmov	r2, s0
   c17ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c17b0:	ec43 2b10 	vmov	d0, r2, r3
   c17b4:	4770      	bx	lr
   c17b6:	bf00      	nop

000c17b8 <finite>:
   c17b8:	b082      	sub	sp, #8
   c17ba:	ed8d 0b00 	vstr	d0, [sp]
   c17be:	9801      	ldr	r0, [sp, #4]
   c17c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   c17c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   c17c8:	0fc0      	lsrs	r0, r0, #31
   c17ca:	b002      	add	sp, #8
   c17cc:	4770      	bx	lr
   c17ce:	bf00      	nop

000c17d0 <nan>:
   c17d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c17d8 <nan+0x8>
   c17d4:	4770      	bx	lr
   c17d6:	bf00      	nop
   c17d8:	00000000 	.word	0x00000000
   c17dc:	7ff80000 	.word	0x7ff80000

000c17e0 <rint>:
   c17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c17e2:	ec53 2b10 	vmov	r2, r3, d0
   c17e6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   c17ea:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   c17ee:	2913      	cmp	r1, #19
   c17f0:	ee10 0a10 	vmov	r0, s0
   c17f4:	b083      	sub	sp, #12
   c17f6:	461c      	mov	r4, r3
   c17f8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   c17fc:	dc3a      	bgt.n	c1874 <rint+0x94>
   c17fe:	2900      	cmp	r1, #0
   c1800:	db30      	blt.n	c1864 <rint+0x84>
   c1802:	4d42      	ldr	r5, [pc, #264]	; (c190c <rint+0x12c>)
   c1804:	fa45 fc01 	asr.w	ip, r5, r1
   c1808:	ea03 050c 	and.w	r5, r3, ip
   c180c:	4315      	orrs	r5, r2
   c180e:	d02d      	beq.n	c186c <rint+0x8c>
   c1810:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   c1814:	4318      	orrs	r0, r3
   c1816:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   c181a:	d00c      	beq.n	c1836 <rint+0x56>
   c181c:	ea24 0c0c 	bic.w	ip, r4, ip
   c1820:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   c1824:	2913      	cmp	r1, #19
   c1826:	fa44 f101 	asr.w	r1, r4, r1
   c182a:	bf0c      	ite	eq
   c182c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   c1830:	2000      	movne	r0, #0
   c1832:	ea4c 0401 	orr.w	r4, ip, r1
   c1836:	4936      	ldr	r1, [pc, #216]	; (c1910 <rint+0x130>)
   c1838:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   c183c:	4623      	mov	r3, r4
   c183e:	e9de 4500 	ldrd	r4, r5, [lr]
   c1842:	4602      	mov	r2, r0
   c1844:	4629      	mov	r1, r5
   c1846:	4620      	mov	r0, r4
   c1848:	f000 f8fe 	bl	c1a48 <__adddf3>
   c184c:	e9cd 0100 	strd	r0, r1, [sp]
   c1850:	e9dd 0100 	ldrd	r0, r1, [sp]
   c1854:	4622      	mov	r2, r4
   c1856:	462b      	mov	r3, r5
   c1858:	f000 f8f4 	bl	c1a44 <__aeabi_dsub>
   c185c:	ec41 0b10 	vmov	d0, r0, r1
   c1860:	b003      	add	sp, #12
   c1862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1864:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   c1868:	4311      	orrs	r1, r2
   c186a:	d124      	bne.n	c18b6 <rint+0xd6>
   c186c:	ec43 2b10 	vmov	d0, r2, r3
   c1870:	b003      	add	sp, #12
   c1872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1874:	2933      	cmp	r1, #51	; 0x33
   c1876:	dd08      	ble.n	c188a <rint+0xaa>
   c1878:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   c187c:	d1f6      	bne.n	c186c <rint+0x8c>
   c187e:	4619      	mov	r1, r3
   c1880:	f000 f8e2 	bl	c1a48 <__adddf3>
   c1884:	ec41 0b10 	vmov	d0, r0, r1
   c1888:	e7f2      	b.n	c1870 <rint+0x90>
   c188a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   c188e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   c1892:	fa21 f10c 	lsr.w	r1, r1, ip
   c1896:	420a      	tst	r2, r1
   c1898:	d0e8      	beq.n	c186c <rint+0x8c>
   c189a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   c189e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   c18a2:	d0c8      	beq.n	c1836 <rint+0x56>
   c18a4:	ea20 0303 	bic.w	r3, r0, r3
   c18a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   c18ac:	fa40 fc0c 	asr.w	ip, r0, ip
   c18b0:	ea43 000c 	orr.w	r0, r3, ip
   c18b4:	e7bf      	b.n	c1836 <rint+0x56>
   c18b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c18ba:	4318      	orrs	r0, r3
   c18bc:	4a14      	ldr	r2, [pc, #80]	; (c1910 <rint+0x130>)
   c18be:	4243      	negs	r3, r0
   c18c0:	4303      	orrs	r3, r0
   c18c2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   c18c6:	0b1b      	lsrs	r3, r3, #12
   c18c8:	0c62      	lsrs	r2, r4, #17
   c18ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   c18ce:	0452      	lsls	r2, r2, #17
   c18d0:	ea43 0702 	orr.w	r7, r3, r2
   c18d4:	463b      	mov	r3, r7
   c18d6:	e9de 6700 	ldrd	r6, r7, [lr]
   c18da:	ee10 2a10 	vmov	r2, s0
   c18de:	4630      	mov	r0, r6
   c18e0:	4639      	mov	r1, r7
   c18e2:	f000 f8b1 	bl	c1a48 <__adddf3>
   c18e6:	e9cd 0100 	strd	r0, r1, [sp]
   c18ea:	4632      	mov	r2, r6
   c18ec:	463b      	mov	r3, r7
   c18ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   c18f2:	f000 f8a7 	bl	c1a44 <__aeabi_dsub>
   c18f6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   c18fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c18fe:	4602      	mov	r2, r0
   c1900:	ea41 0304 	orr.w	r3, r1, r4
   c1904:	ec43 2b10 	vmov	d0, r2, r3
   c1908:	b003      	add	sp, #12
   c190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c190c:	000fffff 	.word	0x000fffff
   c1910:	000c69c8 	.word	0x000c69c8
   c1914:	00000000 	.word	0x00000000

000c1918 <scalbn>:
   c1918:	b538      	push	{r3, r4, r5, lr}
   c191a:	ec53 2b10 	vmov	r2, r3, d0
   c191e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   c1922:	4604      	mov	r4, r0
   c1924:	469c      	mov	ip, r3
   c1926:	bb89      	cbnz	r1, c198c <scalbn+0x74>
   c1928:	ee10 1a10 	vmov	r1, s0
   c192c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   c1930:	ea5c 0101 	orrs.w	r1, ip, r1
   c1934:	d029      	beq.n	c198a <scalbn+0x72>
   c1936:	4619      	mov	r1, r3
   c1938:	2200      	movs	r2, #0
   c193a:	4b3d      	ldr	r3, [pc, #244]	; (c1a30 <scalbn+0x118>)
   c193c:	4d3d      	ldr	r5, [pc, #244]	; (c1a34 <scalbn+0x11c>)
   c193e:	ee10 0a10 	vmov	r0, s0
   c1942:	f000 fa37 	bl	c1db4 <__aeabi_dmul>
   c1946:	42ac      	cmp	r4, r5
   c1948:	4602      	mov	r2, r0
   c194a:	460b      	mov	r3, r1
   c194c:	db16      	blt.n	c197c <scalbn+0x64>
   c194e:	468c      	mov	ip, r1
   c1950:	f3c1 510a 	ubfx	r1, r1, #20, #11
   c1954:	3936      	subs	r1, #54	; 0x36
   c1956:	4421      	add	r1, r4
   c1958:	f240 70fe 	movw	r0, #2046	; 0x7fe
   c195c:	4281      	cmp	r1, r0
   c195e:	dc21      	bgt.n	c19a4 <scalbn+0x8c>
   c1960:	2900      	cmp	r1, #0
   c1962:	dc47      	bgt.n	c19f4 <scalbn+0xdc>
   c1964:	f111 0f35 	cmn.w	r1, #53	; 0x35
   c1968:	da34      	bge.n	c19d4 <scalbn+0xbc>
   c196a:	f24c 3150 	movw	r1, #50000	; 0xc350
   c196e:	428c      	cmp	r4, r1
   c1970:	dc18      	bgt.n	c19a4 <scalbn+0x8c>
   c1972:	2b00      	cmp	r3, #0
   c1974:	a126      	add	r1, pc, #152	; (adr r1, c1a10 <scalbn+0xf8>)
   c1976:	e9d1 0100 	ldrd	r0, r1, [r1]
   c197a:	db44      	blt.n	c1a06 <scalbn+0xee>
   c197c:	a324      	add	r3, pc, #144	; (adr r3, c1a10 <scalbn+0xf8>)
   c197e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1982:	f000 fa17 	bl	c1db4 <__aeabi_dmul>
   c1986:	ec41 0b10 	vmov	d0, r0, r1
   c198a:	bd38      	pop	{r3, r4, r5, pc}
   c198c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   c1990:	4281      	cmp	r1, r0
   c1992:	d1e0      	bne.n	c1956 <scalbn+0x3e>
   c1994:	ee10 0a10 	vmov	r0, s0
   c1998:	4619      	mov	r1, r3
   c199a:	f000 f855 	bl	c1a48 <__adddf3>
   c199e:	ec41 0b10 	vmov	d0, r0, r1
   c19a2:	bd38      	pop	{r3, r4, r5, pc}
   c19a4:	2b00      	cmp	r3, #0
   c19a6:	a11c      	add	r1, pc, #112	; (adr r1, c1a18 <scalbn+0x100>)
   c19a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c19ac:	db07      	blt.n	c19be <scalbn+0xa6>
   c19ae:	a31a      	add	r3, pc, #104	; (adr r3, c1a18 <scalbn+0x100>)
   c19b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c19b4:	f000 f9fe 	bl	c1db4 <__aeabi_dmul>
   c19b8:	ec41 0b10 	vmov	d0, r0, r1
   c19bc:	bd38      	pop	{r3, r4, r5, pc}
   c19be:	a118      	add	r1, pc, #96	; (adr r1, c1a20 <scalbn+0x108>)
   c19c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c19c4:	a314      	add	r3, pc, #80	; (adr r3, c1a18 <scalbn+0x100>)
   c19c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c19ca:	f000 f9f3 	bl	c1db4 <__aeabi_dmul>
   c19ce:	ec41 0b10 	vmov	d0, r0, r1
   c19d2:	e7f3      	b.n	c19bc <scalbn+0xa4>
   c19d4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c19d8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c19dc:	3136      	adds	r1, #54	; 0x36
   c19de:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c19e2:	4610      	mov	r0, r2
   c19e4:	4619      	mov	r1, r3
   c19e6:	2200      	movs	r2, #0
   c19e8:	4b13      	ldr	r3, [pc, #76]	; (c1a38 <scalbn+0x120>)
   c19ea:	f000 f9e3 	bl	c1db4 <__aeabi_dmul>
   c19ee:	ec41 0b10 	vmov	d0, r0, r1
   c19f2:	bd38      	pop	{r3, r4, r5, pc}
   c19f4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c19f8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c19fc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c1a00:	ec43 2b10 	vmov	d0, r2, r3
   c1a04:	bd38      	pop	{r3, r4, r5, pc}
   c1a06:	a108      	add	r1, pc, #32	; (adr r1, c1a28 <scalbn+0x110>)
   c1a08:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1a0c:	e7b6      	b.n	c197c <scalbn+0x64>
   c1a0e:	bf00      	nop
   c1a10:	c2f8f359 	.word	0xc2f8f359
   c1a14:	01a56e1f 	.word	0x01a56e1f
   c1a18:	8800759c 	.word	0x8800759c
   c1a1c:	7e37e43c 	.word	0x7e37e43c
   c1a20:	8800759c 	.word	0x8800759c
   c1a24:	fe37e43c 	.word	0xfe37e43c
   c1a28:	c2f8f359 	.word	0xc2f8f359
   c1a2c:	81a56e1f 	.word	0x81a56e1f
   c1a30:	43500000 	.word	0x43500000
   c1a34:	ffff3cb0 	.word	0xffff3cb0
   c1a38:	3c900000 	.word	0x3c900000

000c1a3c <__aeabi_drsub>:
   c1a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c1a40:	e002      	b.n	c1a48 <__adddf3>
   c1a42:	bf00      	nop

000c1a44 <__aeabi_dsub>:
   c1a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c1a48 <__adddf3>:
   c1a48:	b530      	push	{r4, r5, lr}
   c1a4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c1a4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c1a52:	ea94 0f05 	teq	r4, r5
   c1a56:	bf08      	it	eq
   c1a58:	ea90 0f02 	teqeq	r0, r2
   c1a5c:	bf1f      	itttt	ne
   c1a5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   c1a62:	ea55 0c02 	orrsne.w	ip, r5, r2
   c1a66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c1a6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c1a6e:	f000 80e2 	beq.w	c1c36 <__adddf3+0x1ee>
   c1a72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c1a76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c1a7a:	bfb8      	it	lt
   c1a7c:	426d      	neglt	r5, r5
   c1a7e:	dd0c      	ble.n	c1a9a <__adddf3+0x52>
   c1a80:	442c      	add	r4, r5
   c1a82:	ea80 0202 	eor.w	r2, r0, r2
   c1a86:	ea81 0303 	eor.w	r3, r1, r3
   c1a8a:	ea82 0000 	eor.w	r0, r2, r0
   c1a8e:	ea83 0101 	eor.w	r1, r3, r1
   c1a92:	ea80 0202 	eor.w	r2, r0, r2
   c1a96:	ea81 0303 	eor.w	r3, r1, r3
   c1a9a:	2d36      	cmp	r5, #54	; 0x36
   c1a9c:	bf88      	it	hi
   c1a9e:	bd30      	pophi	{r4, r5, pc}
   c1aa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c1aa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c1aa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c1aac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c1ab0:	d002      	beq.n	c1ab8 <__adddf3+0x70>
   c1ab2:	4240      	negs	r0, r0
   c1ab4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1ab8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c1abc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c1ac0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c1ac4:	d002      	beq.n	c1acc <__adddf3+0x84>
   c1ac6:	4252      	negs	r2, r2
   c1ac8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c1acc:	ea94 0f05 	teq	r4, r5
   c1ad0:	f000 80a7 	beq.w	c1c22 <__adddf3+0x1da>
   c1ad4:	f1a4 0401 	sub.w	r4, r4, #1
   c1ad8:	f1d5 0e20 	rsbs	lr, r5, #32
   c1adc:	db0d      	blt.n	c1afa <__adddf3+0xb2>
   c1ade:	fa02 fc0e 	lsl.w	ip, r2, lr
   c1ae2:	fa22 f205 	lsr.w	r2, r2, r5
   c1ae6:	1880      	adds	r0, r0, r2
   c1ae8:	f141 0100 	adc.w	r1, r1, #0
   c1aec:	fa03 f20e 	lsl.w	r2, r3, lr
   c1af0:	1880      	adds	r0, r0, r2
   c1af2:	fa43 f305 	asr.w	r3, r3, r5
   c1af6:	4159      	adcs	r1, r3
   c1af8:	e00e      	b.n	c1b18 <__adddf3+0xd0>
   c1afa:	f1a5 0520 	sub.w	r5, r5, #32
   c1afe:	f10e 0e20 	add.w	lr, lr, #32
   c1b02:	2a01      	cmp	r2, #1
   c1b04:	fa03 fc0e 	lsl.w	ip, r3, lr
   c1b08:	bf28      	it	cs
   c1b0a:	f04c 0c02 	orrcs.w	ip, ip, #2
   c1b0e:	fa43 f305 	asr.w	r3, r3, r5
   c1b12:	18c0      	adds	r0, r0, r3
   c1b14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c1b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1b1c:	d507      	bpl.n	c1b2e <__adddf3+0xe6>
   c1b1e:	f04f 0e00 	mov.w	lr, #0
   c1b22:	f1dc 0c00 	rsbs	ip, ip, #0
   c1b26:	eb7e 0000 	sbcs.w	r0, lr, r0
   c1b2a:	eb6e 0101 	sbc.w	r1, lr, r1
   c1b2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c1b32:	d31b      	bcc.n	c1b6c <__adddf3+0x124>
   c1b34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c1b38:	d30c      	bcc.n	c1b54 <__adddf3+0x10c>
   c1b3a:	0849      	lsrs	r1, r1, #1
   c1b3c:	ea5f 0030 	movs.w	r0, r0, rrx
   c1b40:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c1b44:	f104 0401 	add.w	r4, r4, #1
   c1b48:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c1b4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c1b50:	f080 809a 	bcs.w	c1c88 <__adddf3+0x240>
   c1b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c1b58:	bf08      	it	eq
   c1b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c1b5e:	f150 0000 	adcs.w	r0, r0, #0
   c1b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1b66:	ea41 0105 	orr.w	r1, r1, r5
   c1b6a:	bd30      	pop	{r4, r5, pc}
   c1b6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c1b70:	4140      	adcs	r0, r0
   c1b72:	eb41 0101 	adc.w	r1, r1, r1
   c1b76:	3c01      	subs	r4, #1
   c1b78:	bf28      	it	cs
   c1b7a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c1b7e:	d2e9      	bcs.n	c1b54 <__adddf3+0x10c>
   c1b80:	f091 0f00 	teq	r1, #0
   c1b84:	bf04      	itt	eq
   c1b86:	4601      	moveq	r1, r0
   c1b88:	2000      	moveq	r0, #0
   c1b8a:	fab1 f381 	clz	r3, r1
   c1b8e:	bf08      	it	eq
   c1b90:	3320      	addeq	r3, #32
   c1b92:	f1a3 030b 	sub.w	r3, r3, #11
   c1b96:	f1b3 0220 	subs.w	r2, r3, #32
   c1b9a:	da0c      	bge.n	c1bb6 <__adddf3+0x16e>
   c1b9c:	320c      	adds	r2, #12
   c1b9e:	dd08      	ble.n	c1bb2 <__adddf3+0x16a>
   c1ba0:	f102 0c14 	add.w	ip, r2, #20
   c1ba4:	f1c2 020c 	rsb	r2, r2, #12
   c1ba8:	fa01 f00c 	lsl.w	r0, r1, ip
   c1bac:	fa21 f102 	lsr.w	r1, r1, r2
   c1bb0:	e00c      	b.n	c1bcc <__adddf3+0x184>
   c1bb2:	f102 0214 	add.w	r2, r2, #20
   c1bb6:	bfd8      	it	le
   c1bb8:	f1c2 0c20 	rsble	ip, r2, #32
   c1bbc:	fa01 f102 	lsl.w	r1, r1, r2
   c1bc0:	fa20 fc0c 	lsr.w	ip, r0, ip
   c1bc4:	bfdc      	itt	le
   c1bc6:	ea41 010c 	orrle.w	r1, r1, ip
   c1bca:	4090      	lslle	r0, r2
   c1bcc:	1ae4      	subs	r4, r4, r3
   c1bce:	bfa2      	ittt	ge
   c1bd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c1bd4:	4329      	orrge	r1, r5
   c1bd6:	bd30      	popge	{r4, r5, pc}
   c1bd8:	ea6f 0404 	mvn.w	r4, r4
   c1bdc:	3c1f      	subs	r4, #31
   c1bde:	da1c      	bge.n	c1c1a <__adddf3+0x1d2>
   c1be0:	340c      	adds	r4, #12
   c1be2:	dc0e      	bgt.n	c1c02 <__adddf3+0x1ba>
   c1be4:	f104 0414 	add.w	r4, r4, #20
   c1be8:	f1c4 0220 	rsb	r2, r4, #32
   c1bec:	fa20 f004 	lsr.w	r0, r0, r4
   c1bf0:	fa01 f302 	lsl.w	r3, r1, r2
   c1bf4:	ea40 0003 	orr.w	r0, r0, r3
   c1bf8:	fa21 f304 	lsr.w	r3, r1, r4
   c1bfc:	ea45 0103 	orr.w	r1, r5, r3
   c1c00:	bd30      	pop	{r4, r5, pc}
   c1c02:	f1c4 040c 	rsb	r4, r4, #12
   c1c06:	f1c4 0220 	rsb	r2, r4, #32
   c1c0a:	fa20 f002 	lsr.w	r0, r0, r2
   c1c0e:	fa01 f304 	lsl.w	r3, r1, r4
   c1c12:	ea40 0003 	orr.w	r0, r0, r3
   c1c16:	4629      	mov	r1, r5
   c1c18:	bd30      	pop	{r4, r5, pc}
   c1c1a:	fa21 f004 	lsr.w	r0, r1, r4
   c1c1e:	4629      	mov	r1, r5
   c1c20:	bd30      	pop	{r4, r5, pc}
   c1c22:	f094 0f00 	teq	r4, #0
   c1c26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c1c2a:	bf06      	itte	eq
   c1c2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c1c30:	3401      	addeq	r4, #1
   c1c32:	3d01      	subne	r5, #1
   c1c34:	e74e      	b.n	c1ad4 <__adddf3+0x8c>
   c1c36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c1c3a:	bf18      	it	ne
   c1c3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c1c40:	d029      	beq.n	c1c96 <__adddf3+0x24e>
   c1c42:	ea94 0f05 	teq	r4, r5
   c1c46:	bf08      	it	eq
   c1c48:	ea90 0f02 	teqeq	r0, r2
   c1c4c:	d005      	beq.n	c1c5a <__adddf3+0x212>
   c1c4e:	ea54 0c00 	orrs.w	ip, r4, r0
   c1c52:	bf04      	itt	eq
   c1c54:	4619      	moveq	r1, r3
   c1c56:	4610      	moveq	r0, r2
   c1c58:	bd30      	pop	{r4, r5, pc}
   c1c5a:	ea91 0f03 	teq	r1, r3
   c1c5e:	bf1e      	ittt	ne
   c1c60:	2100      	movne	r1, #0
   c1c62:	2000      	movne	r0, #0
   c1c64:	bd30      	popne	{r4, r5, pc}
   c1c66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c1c6a:	d105      	bne.n	c1c78 <__adddf3+0x230>
   c1c6c:	0040      	lsls	r0, r0, #1
   c1c6e:	4149      	adcs	r1, r1
   c1c70:	bf28      	it	cs
   c1c72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c1c76:	bd30      	pop	{r4, r5, pc}
   c1c78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c1c7c:	bf3c      	itt	cc
   c1c7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c1c82:	bd30      	popcc	{r4, r5, pc}
   c1c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1c88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c1c8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1c90:	f04f 0000 	mov.w	r0, #0
   c1c94:	bd30      	pop	{r4, r5, pc}
   c1c96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c1c9a:	bf1a      	itte	ne
   c1c9c:	4619      	movne	r1, r3
   c1c9e:	4610      	movne	r0, r2
   c1ca0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c1ca4:	bf1c      	itt	ne
   c1ca6:	460b      	movne	r3, r1
   c1ca8:	4602      	movne	r2, r0
   c1caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c1cae:	bf06      	itte	eq
   c1cb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c1cb4:	ea91 0f03 	teqeq	r1, r3
   c1cb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c1cbc:	bd30      	pop	{r4, r5, pc}
   c1cbe:	bf00      	nop

000c1cc0 <__aeabi_ui2d>:
   c1cc0:	f090 0f00 	teq	r0, #0
   c1cc4:	bf04      	itt	eq
   c1cc6:	2100      	moveq	r1, #0
   c1cc8:	4770      	bxeq	lr
   c1cca:	b530      	push	{r4, r5, lr}
   c1ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1cd4:	f04f 0500 	mov.w	r5, #0
   c1cd8:	f04f 0100 	mov.w	r1, #0
   c1cdc:	e750      	b.n	c1b80 <__adddf3+0x138>
   c1cde:	bf00      	nop

000c1ce0 <__aeabi_i2d>:
   c1ce0:	f090 0f00 	teq	r0, #0
   c1ce4:	bf04      	itt	eq
   c1ce6:	2100      	moveq	r1, #0
   c1ce8:	4770      	bxeq	lr
   c1cea:	b530      	push	{r4, r5, lr}
   c1cec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1cf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1cf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c1cf8:	bf48      	it	mi
   c1cfa:	4240      	negmi	r0, r0
   c1cfc:	f04f 0100 	mov.w	r1, #0
   c1d00:	e73e      	b.n	c1b80 <__adddf3+0x138>
   c1d02:	bf00      	nop

000c1d04 <__aeabi_f2d>:
   c1d04:	0042      	lsls	r2, r0, #1
   c1d06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c1d0a:	ea4f 0131 	mov.w	r1, r1, rrx
   c1d0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c1d12:	bf1f      	itttt	ne
   c1d14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c1d18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c1d1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c1d20:	4770      	bxne	lr
   c1d22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c1d26:	bf08      	it	eq
   c1d28:	4770      	bxeq	lr
   c1d2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c1d2e:	bf04      	itt	eq
   c1d30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c1d34:	4770      	bxeq	lr
   c1d36:	b530      	push	{r4, r5, lr}
   c1d38:	f44f 7460 	mov.w	r4, #896	; 0x380
   c1d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1d44:	e71c      	b.n	c1b80 <__adddf3+0x138>
   c1d46:	bf00      	nop

000c1d48 <__aeabi_ul2d>:
   c1d48:	ea50 0201 	orrs.w	r2, r0, r1
   c1d4c:	bf08      	it	eq
   c1d4e:	4770      	bxeq	lr
   c1d50:	b530      	push	{r4, r5, lr}
   c1d52:	f04f 0500 	mov.w	r5, #0
   c1d56:	e00a      	b.n	c1d6e <__aeabi_l2d+0x16>

000c1d58 <__aeabi_l2d>:
   c1d58:	ea50 0201 	orrs.w	r2, r0, r1
   c1d5c:	bf08      	it	eq
   c1d5e:	4770      	bxeq	lr
   c1d60:	b530      	push	{r4, r5, lr}
   c1d62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c1d66:	d502      	bpl.n	c1d6e <__aeabi_l2d+0x16>
   c1d68:	4240      	negs	r0, r0
   c1d6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1d6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1d72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1d76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c1d7a:	f43f aed8 	beq.w	c1b2e <__adddf3+0xe6>
   c1d7e:	f04f 0203 	mov.w	r2, #3
   c1d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1d86:	bf18      	it	ne
   c1d88:	3203      	addne	r2, #3
   c1d8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1d8e:	bf18      	it	ne
   c1d90:	3203      	addne	r2, #3
   c1d92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c1d96:	f1c2 0320 	rsb	r3, r2, #32
   c1d9a:	fa00 fc03 	lsl.w	ip, r0, r3
   c1d9e:	fa20 f002 	lsr.w	r0, r0, r2
   c1da2:	fa01 fe03 	lsl.w	lr, r1, r3
   c1da6:	ea40 000e 	orr.w	r0, r0, lr
   c1daa:	fa21 f102 	lsr.w	r1, r1, r2
   c1dae:	4414      	add	r4, r2
   c1db0:	e6bd      	b.n	c1b2e <__adddf3+0xe6>
   c1db2:	bf00      	nop

000c1db4 <__aeabi_dmul>:
   c1db4:	b570      	push	{r4, r5, r6, lr}
   c1db6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1dba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1dbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1dc2:	bf1d      	ittte	ne
   c1dc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1dc8:	ea94 0f0c 	teqne	r4, ip
   c1dcc:	ea95 0f0c 	teqne	r5, ip
   c1dd0:	f000 f8de 	bleq	c1f90 <__aeabi_dmul+0x1dc>
   c1dd4:	442c      	add	r4, r5
   c1dd6:	ea81 0603 	eor.w	r6, r1, r3
   c1dda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c1dde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c1de2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c1de6:	bf18      	it	ne
   c1de8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c1dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1df4:	d038      	beq.n	c1e68 <__aeabi_dmul+0xb4>
   c1df6:	fba0 ce02 	umull	ip, lr, r0, r2
   c1dfa:	f04f 0500 	mov.w	r5, #0
   c1dfe:	fbe1 e502 	umlal	lr, r5, r1, r2
   c1e02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c1e06:	fbe0 e503 	umlal	lr, r5, r0, r3
   c1e0a:	f04f 0600 	mov.w	r6, #0
   c1e0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   c1e12:	f09c 0f00 	teq	ip, #0
   c1e16:	bf18      	it	ne
   c1e18:	f04e 0e01 	orrne.w	lr, lr, #1
   c1e1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c1e20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c1e24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c1e28:	d204      	bcs.n	c1e34 <__aeabi_dmul+0x80>
   c1e2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c1e2e:	416d      	adcs	r5, r5
   c1e30:	eb46 0606 	adc.w	r6, r6, r6
   c1e34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c1e38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c1e3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c1e40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c1e44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c1e48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c1e4c:	bf88      	it	hi
   c1e4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c1e52:	d81e      	bhi.n	c1e92 <__aeabi_dmul+0xde>
   c1e54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c1e58:	bf08      	it	eq
   c1e5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c1e5e:	f150 0000 	adcs.w	r0, r0, #0
   c1e62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1e66:	bd70      	pop	{r4, r5, r6, pc}
   c1e68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c1e6c:	ea46 0101 	orr.w	r1, r6, r1
   c1e70:	ea40 0002 	orr.w	r0, r0, r2
   c1e74:	ea81 0103 	eor.w	r1, r1, r3
   c1e78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c1e7c:	bfc2      	ittt	gt
   c1e7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c1e82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c1e86:	bd70      	popgt	{r4, r5, r6, pc}
   c1e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1e8c:	f04f 0e00 	mov.w	lr, #0
   c1e90:	3c01      	subs	r4, #1
   c1e92:	f300 80ab 	bgt.w	c1fec <__aeabi_dmul+0x238>
   c1e96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c1e9a:	bfde      	ittt	le
   c1e9c:	2000      	movle	r0, #0
   c1e9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c1ea2:	bd70      	pople	{r4, r5, r6, pc}
   c1ea4:	f1c4 0400 	rsb	r4, r4, #0
   c1ea8:	3c20      	subs	r4, #32
   c1eaa:	da35      	bge.n	c1f18 <__aeabi_dmul+0x164>
   c1eac:	340c      	adds	r4, #12
   c1eae:	dc1b      	bgt.n	c1ee8 <__aeabi_dmul+0x134>
   c1eb0:	f104 0414 	add.w	r4, r4, #20
   c1eb4:	f1c4 0520 	rsb	r5, r4, #32
   c1eb8:	fa00 f305 	lsl.w	r3, r0, r5
   c1ebc:	fa20 f004 	lsr.w	r0, r0, r4
   c1ec0:	fa01 f205 	lsl.w	r2, r1, r5
   c1ec4:	ea40 0002 	orr.w	r0, r0, r2
   c1ec8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c1ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1ed0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1ed4:	fa21 f604 	lsr.w	r6, r1, r4
   c1ed8:	eb42 0106 	adc.w	r1, r2, r6
   c1edc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1ee0:	bf08      	it	eq
   c1ee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1ee6:	bd70      	pop	{r4, r5, r6, pc}
   c1ee8:	f1c4 040c 	rsb	r4, r4, #12
   c1eec:	f1c4 0520 	rsb	r5, r4, #32
   c1ef0:	fa00 f304 	lsl.w	r3, r0, r4
   c1ef4:	fa20 f005 	lsr.w	r0, r0, r5
   c1ef8:	fa01 f204 	lsl.w	r2, r1, r4
   c1efc:	ea40 0002 	orr.w	r0, r0, r2
   c1f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1f04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1f08:	f141 0100 	adc.w	r1, r1, #0
   c1f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1f10:	bf08      	it	eq
   c1f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1f16:	bd70      	pop	{r4, r5, r6, pc}
   c1f18:	f1c4 0520 	rsb	r5, r4, #32
   c1f1c:	fa00 f205 	lsl.w	r2, r0, r5
   c1f20:	ea4e 0e02 	orr.w	lr, lr, r2
   c1f24:	fa20 f304 	lsr.w	r3, r0, r4
   c1f28:	fa01 f205 	lsl.w	r2, r1, r5
   c1f2c:	ea43 0302 	orr.w	r3, r3, r2
   c1f30:	fa21 f004 	lsr.w	r0, r1, r4
   c1f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1f38:	fa21 f204 	lsr.w	r2, r1, r4
   c1f3c:	ea20 0002 	bic.w	r0, r0, r2
   c1f40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c1f44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1f48:	bf08      	it	eq
   c1f4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1f4e:	bd70      	pop	{r4, r5, r6, pc}
   c1f50:	f094 0f00 	teq	r4, #0
   c1f54:	d10f      	bne.n	c1f76 <__aeabi_dmul+0x1c2>
   c1f56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c1f5a:	0040      	lsls	r0, r0, #1
   c1f5c:	eb41 0101 	adc.w	r1, r1, r1
   c1f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1f64:	bf08      	it	eq
   c1f66:	3c01      	subeq	r4, #1
   c1f68:	d0f7      	beq.n	c1f5a <__aeabi_dmul+0x1a6>
   c1f6a:	ea41 0106 	orr.w	r1, r1, r6
   c1f6e:	f095 0f00 	teq	r5, #0
   c1f72:	bf18      	it	ne
   c1f74:	4770      	bxne	lr
   c1f76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c1f7a:	0052      	lsls	r2, r2, #1
   c1f7c:	eb43 0303 	adc.w	r3, r3, r3
   c1f80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c1f84:	bf08      	it	eq
   c1f86:	3d01      	subeq	r5, #1
   c1f88:	d0f7      	beq.n	c1f7a <__aeabi_dmul+0x1c6>
   c1f8a:	ea43 0306 	orr.w	r3, r3, r6
   c1f8e:	4770      	bx	lr
   c1f90:	ea94 0f0c 	teq	r4, ip
   c1f94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1f98:	bf18      	it	ne
   c1f9a:	ea95 0f0c 	teqne	r5, ip
   c1f9e:	d00c      	beq.n	c1fba <__aeabi_dmul+0x206>
   c1fa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1fa4:	bf18      	it	ne
   c1fa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1faa:	d1d1      	bne.n	c1f50 <__aeabi_dmul+0x19c>
   c1fac:	ea81 0103 	eor.w	r1, r1, r3
   c1fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1fb4:	f04f 0000 	mov.w	r0, #0
   c1fb8:	bd70      	pop	{r4, r5, r6, pc}
   c1fba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1fbe:	bf06      	itte	eq
   c1fc0:	4610      	moveq	r0, r2
   c1fc2:	4619      	moveq	r1, r3
   c1fc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1fc8:	d019      	beq.n	c1ffe <__aeabi_dmul+0x24a>
   c1fca:	ea94 0f0c 	teq	r4, ip
   c1fce:	d102      	bne.n	c1fd6 <__aeabi_dmul+0x222>
   c1fd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c1fd4:	d113      	bne.n	c1ffe <__aeabi_dmul+0x24a>
   c1fd6:	ea95 0f0c 	teq	r5, ip
   c1fda:	d105      	bne.n	c1fe8 <__aeabi_dmul+0x234>
   c1fdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c1fe0:	bf1c      	itt	ne
   c1fe2:	4610      	movne	r0, r2
   c1fe4:	4619      	movne	r1, r3
   c1fe6:	d10a      	bne.n	c1ffe <__aeabi_dmul+0x24a>
   c1fe8:	ea81 0103 	eor.w	r1, r1, r3
   c1fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1ff0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1ff4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1ff8:	f04f 0000 	mov.w	r0, #0
   c1ffc:	bd70      	pop	{r4, r5, r6, pc}
   c1ffe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c2002:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c2006:	bd70      	pop	{r4, r5, r6, pc}

000c2008 <__aeabi_ddiv>:
   c2008:	b570      	push	{r4, r5, r6, lr}
   c200a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c200e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c2012:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c2016:	bf1d      	ittte	ne
   c2018:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c201c:	ea94 0f0c 	teqne	r4, ip
   c2020:	ea95 0f0c 	teqne	r5, ip
   c2024:	f000 f8a7 	bleq	c2176 <__aeabi_ddiv+0x16e>
   c2028:	eba4 0405 	sub.w	r4, r4, r5
   c202c:	ea81 0e03 	eor.w	lr, r1, r3
   c2030:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c2034:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c2038:	f000 8088 	beq.w	c214c <__aeabi_ddiv+0x144>
   c203c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c2040:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c2044:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c2048:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c204c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c2050:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c2054:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c2058:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c205c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c2060:	429d      	cmp	r5, r3
   c2062:	bf08      	it	eq
   c2064:	4296      	cmpeq	r6, r2
   c2066:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c206a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c206e:	d202      	bcs.n	c2076 <__aeabi_ddiv+0x6e>
   c2070:	085b      	lsrs	r3, r3, #1
   c2072:	ea4f 0232 	mov.w	r2, r2, rrx
   c2076:	1ab6      	subs	r6, r6, r2
   c2078:	eb65 0503 	sbc.w	r5, r5, r3
   c207c:	085b      	lsrs	r3, r3, #1
   c207e:	ea4f 0232 	mov.w	r2, r2, rrx
   c2082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c2086:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c208a:	ebb6 0e02 	subs.w	lr, r6, r2
   c208e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c2092:	bf22      	ittt	cs
   c2094:	1ab6      	subcs	r6, r6, r2
   c2096:	4675      	movcs	r5, lr
   c2098:	ea40 000c 	orrcs.w	r0, r0, ip
   c209c:	085b      	lsrs	r3, r3, #1
   c209e:	ea4f 0232 	mov.w	r2, r2, rrx
   c20a2:	ebb6 0e02 	subs.w	lr, r6, r2
   c20a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   c20aa:	bf22      	ittt	cs
   c20ac:	1ab6      	subcs	r6, r6, r2
   c20ae:	4675      	movcs	r5, lr
   c20b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c20b4:	085b      	lsrs	r3, r3, #1
   c20b6:	ea4f 0232 	mov.w	r2, r2, rrx
   c20ba:	ebb6 0e02 	subs.w	lr, r6, r2
   c20be:	eb75 0e03 	sbcs.w	lr, r5, r3
   c20c2:	bf22      	ittt	cs
   c20c4:	1ab6      	subcs	r6, r6, r2
   c20c6:	4675      	movcs	r5, lr
   c20c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c20cc:	085b      	lsrs	r3, r3, #1
   c20ce:	ea4f 0232 	mov.w	r2, r2, rrx
   c20d2:	ebb6 0e02 	subs.w	lr, r6, r2
   c20d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   c20da:	bf22      	ittt	cs
   c20dc:	1ab6      	subcs	r6, r6, r2
   c20de:	4675      	movcs	r5, lr
   c20e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c20e4:	ea55 0e06 	orrs.w	lr, r5, r6
   c20e8:	d018      	beq.n	c211c <__aeabi_ddiv+0x114>
   c20ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c20ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c20f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c20f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c20fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c20fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c2102:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c2106:	d1c0      	bne.n	c208a <__aeabi_ddiv+0x82>
   c2108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c210c:	d10b      	bne.n	c2126 <__aeabi_ddiv+0x11e>
   c210e:	ea41 0100 	orr.w	r1, r1, r0
   c2112:	f04f 0000 	mov.w	r0, #0
   c2116:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c211a:	e7b6      	b.n	c208a <__aeabi_ddiv+0x82>
   c211c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c2120:	bf04      	itt	eq
   c2122:	4301      	orreq	r1, r0
   c2124:	2000      	moveq	r0, #0
   c2126:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c212a:	bf88      	it	hi
   c212c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c2130:	f63f aeaf 	bhi.w	c1e92 <__aeabi_dmul+0xde>
   c2134:	ebb5 0c03 	subs.w	ip, r5, r3
   c2138:	bf04      	itt	eq
   c213a:	ebb6 0c02 	subseq.w	ip, r6, r2
   c213e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c2142:	f150 0000 	adcs.w	r0, r0, #0
   c2146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c214a:	bd70      	pop	{r4, r5, r6, pc}
   c214c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c2150:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c2154:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c2158:	bfc2      	ittt	gt
   c215a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c215e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c2162:	bd70      	popgt	{r4, r5, r6, pc}
   c2164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c2168:	f04f 0e00 	mov.w	lr, #0
   c216c:	3c01      	subs	r4, #1
   c216e:	e690      	b.n	c1e92 <__aeabi_dmul+0xde>
   c2170:	ea45 0e06 	orr.w	lr, r5, r6
   c2174:	e68d      	b.n	c1e92 <__aeabi_dmul+0xde>
   c2176:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c217a:	ea94 0f0c 	teq	r4, ip
   c217e:	bf08      	it	eq
   c2180:	ea95 0f0c 	teqeq	r5, ip
   c2184:	f43f af3b 	beq.w	c1ffe <__aeabi_dmul+0x24a>
   c2188:	ea94 0f0c 	teq	r4, ip
   c218c:	d10a      	bne.n	c21a4 <__aeabi_ddiv+0x19c>
   c218e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c2192:	f47f af34 	bne.w	c1ffe <__aeabi_dmul+0x24a>
   c2196:	ea95 0f0c 	teq	r5, ip
   c219a:	f47f af25 	bne.w	c1fe8 <__aeabi_dmul+0x234>
   c219e:	4610      	mov	r0, r2
   c21a0:	4619      	mov	r1, r3
   c21a2:	e72c      	b.n	c1ffe <__aeabi_dmul+0x24a>
   c21a4:	ea95 0f0c 	teq	r5, ip
   c21a8:	d106      	bne.n	c21b8 <__aeabi_ddiv+0x1b0>
   c21aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c21ae:	f43f aefd 	beq.w	c1fac <__aeabi_dmul+0x1f8>
   c21b2:	4610      	mov	r0, r2
   c21b4:	4619      	mov	r1, r3
   c21b6:	e722      	b.n	c1ffe <__aeabi_dmul+0x24a>
   c21b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c21bc:	bf18      	it	ne
   c21be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c21c2:	f47f aec5 	bne.w	c1f50 <__aeabi_dmul+0x19c>
   c21c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c21ca:	f47f af0d 	bne.w	c1fe8 <__aeabi_dmul+0x234>
   c21ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c21d2:	f47f aeeb 	bne.w	c1fac <__aeabi_dmul+0x1f8>
   c21d6:	e712      	b.n	c1ffe <__aeabi_dmul+0x24a>

000c21d8 <__gedf2>:
   c21d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c21dc:	e006      	b.n	c21ec <__cmpdf2+0x4>
   c21de:	bf00      	nop

000c21e0 <__ledf2>:
   c21e0:	f04f 0c01 	mov.w	ip, #1
   c21e4:	e002      	b.n	c21ec <__cmpdf2+0x4>
   c21e6:	bf00      	nop

000c21e8 <__cmpdf2>:
   c21e8:	f04f 0c01 	mov.w	ip, #1
   c21ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   c21f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c21f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c21f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c21fc:	bf18      	it	ne
   c21fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c2202:	d01b      	beq.n	c223c <__cmpdf2+0x54>
   c2204:	b001      	add	sp, #4
   c2206:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c220a:	bf0c      	ite	eq
   c220c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c2210:	ea91 0f03 	teqne	r1, r3
   c2214:	bf02      	ittt	eq
   c2216:	ea90 0f02 	teqeq	r0, r2
   c221a:	2000      	moveq	r0, #0
   c221c:	4770      	bxeq	lr
   c221e:	f110 0f00 	cmn.w	r0, #0
   c2222:	ea91 0f03 	teq	r1, r3
   c2226:	bf58      	it	pl
   c2228:	4299      	cmppl	r1, r3
   c222a:	bf08      	it	eq
   c222c:	4290      	cmpeq	r0, r2
   c222e:	bf2c      	ite	cs
   c2230:	17d8      	asrcs	r0, r3, #31
   c2232:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c2236:	f040 0001 	orr.w	r0, r0, #1
   c223a:	4770      	bx	lr
   c223c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c2240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2244:	d102      	bne.n	c224c <__cmpdf2+0x64>
   c2246:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c224a:	d107      	bne.n	c225c <__cmpdf2+0x74>
   c224c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c2250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2254:	d1d6      	bne.n	c2204 <__cmpdf2+0x1c>
   c2256:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c225a:	d0d3      	beq.n	c2204 <__cmpdf2+0x1c>
   c225c:	f85d 0b04 	ldr.w	r0, [sp], #4
   c2260:	4770      	bx	lr
   c2262:	bf00      	nop

000c2264 <__aeabi_cdrcmple>:
   c2264:	4684      	mov	ip, r0
   c2266:	4610      	mov	r0, r2
   c2268:	4662      	mov	r2, ip
   c226a:	468c      	mov	ip, r1
   c226c:	4619      	mov	r1, r3
   c226e:	4663      	mov	r3, ip
   c2270:	e000      	b.n	c2274 <__aeabi_cdcmpeq>
   c2272:	bf00      	nop

000c2274 <__aeabi_cdcmpeq>:
   c2274:	b501      	push	{r0, lr}
   c2276:	f7ff ffb7 	bl	c21e8 <__cmpdf2>
   c227a:	2800      	cmp	r0, #0
   c227c:	bf48      	it	mi
   c227e:	f110 0f00 	cmnmi.w	r0, #0
   c2282:	bd01      	pop	{r0, pc}

000c2284 <__aeabi_dcmpeq>:
   c2284:	f84d ed08 	str.w	lr, [sp, #-8]!
   c2288:	f7ff fff4 	bl	c2274 <__aeabi_cdcmpeq>
   c228c:	bf0c      	ite	eq
   c228e:	2001      	moveq	r0, #1
   c2290:	2000      	movne	r0, #0
   c2292:	f85d fb08 	ldr.w	pc, [sp], #8
   c2296:	bf00      	nop

000c2298 <__aeabi_dcmplt>:
   c2298:	f84d ed08 	str.w	lr, [sp, #-8]!
   c229c:	f7ff ffea 	bl	c2274 <__aeabi_cdcmpeq>
   c22a0:	bf34      	ite	cc
   c22a2:	2001      	movcc	r0, #1
   c22a4:	2000      	movcs	r0, #0
   c22a6:	f85d fb08 	ldr.w	pc, [sp], #8
   c22aa:	bf00      	nop

000c22ac <__aeabi_dcmple>:
   c22ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   c22b0:	f7ff ffe0 	bl	c2274 <__aeabi_cdcmpeq>
   c22b4:	bf94      	ite	ls
   c22b6:	2001      	movls	r0, #1
   c22b8:	2000      	movhi	r0, #0
   c22ba:	f85d fb08 	ldr.w	pc, [sp], #8
   c22be:	bf00      	nop

000c22c0 <__aeabi_dcmpge>:
   c22c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c22c4:	f7ff ffce 	bl	c2264 <__aeabi_cdrcmple>
   c22c8:	bf94      	ite	ls
   c22ca:	2001      	movls	r0, #1
   c22cc:	2000      	movhi	r0, #0
   c22ce:	f85d fb08 	ldr.w	pc, [sp], #8
   c22d2:	bf00      	nop

000c22d4 <__aeabi_dcmpgt>:
   c22d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c22d8:	f7ff ffc4 	bl	c2264 <__aeabi_cdrcmple>
   c22dc:	bf34      	ite	cc
   c22de:	2001      	movcc	r0, #1
   c22e0:	2000      	movcs	r0, #0
   c22e2:	f85d fb08 	ldr.w	pc, [sp], #8
   c22e6:	bf00      	nop

000c22e8 <__aeabi_dcmpun>:
   c22e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c22ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c22f0:	d102      	bne.n	c22f8 <__aeabi_dcmpun+0x10>
   c22f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c22f6:	d10a      	bne.n	c230e <__aeabi_dcmpun+0x26>
   c22f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c22fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2300:	d102      	bne.n	c2308 <__aeabi_dcmpun+0x20>
   c2302:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c2306:	d102      	bne.n	c230e <__aeabi_dcmpun+0x26>
   c2308:	f04f 0000 	mov.w	r0, #0
   c230c:	4770      	bx	lr
   c230e:	f04f 0001 	mov.w	r0, #1
   c2312:	4770      	bx	lr

000c2314 <__aeabi_d2iz>:
   c2314:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c2318:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c231c:	d215      	bcs.n	c234a <__aeabi_d2iz+0x36>
   c231e:	d511      	bpl.n	c2344 <__aeabi_d2iz+0x30>
   c2320:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c2324:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2328:	d912      	bls.n	c2350 <__aeabi_d2iz+0x3c>
   c232a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c232e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c2332:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c2336:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c233a:	fa23 f002 	lsr.w	r0, r3, r2
   c233e:	bf18      	it	ne
   c2340:	4240      	negne	r0, r0
   c2342:	4770      	bx	lr
   c2344:	f04f 0000 	mov.w	r0, #0
   c2348:	4770      	bx	lr
   c234a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c234e:	d105      	bne.n	c235c <__aeabi_d2iz+0x48>
   c2350:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c2354:	bf08      	it	eq
   c2356:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c235a:	4770      	bx	lr
   c235c:	f04f 0000 	mov.w	r0, #0
   c2360:	4770      	bx	lr
   c2362:	bf00      	nop

000c2364 <__aeabi_d2uiz>:
   c2364:	004a      	lsls	r2, r1, #1
   c2366:	d211      	bcs.n	c238c <__aeabi_d2uiz+0x28>
   c2368:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c236c:	d211      	bcs.n	c2392 <__aeabi_d2uiz+0x2e>
   c236e:	d50d      	bpl.n	c238c <__aeabi_d2uiz+0x28>
   c2370:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c2374:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2378:	d40e      	bmi.n	c2398 <__aeabi_d2uiz+0x34>
   c237a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c237e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c2382:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c2386:	fa23 f002 	lsr.w	r0, r3, r2
   c238a:	4770      	bx	lr
   c238c:	f04f 0000 	mov.w	r0, #0
   c2390:	4770      	bx	lr
   c2392:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c2396:	d102      	bne.n	c239e <__aeabi_d2uiz+0x3a>
   c2398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c239c:	4770      	bx	lr
   c239e:	f04f 0000 	mov.w	r0, #0
   c23a2:	4770      	bx	lr

000c23a4 <__aeabi_d2f>:
   c23a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c23a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c23ac:	bf24      	itt	cs
   c23ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c23b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c23b6:	d90d      	bls.n	c23d4 <__aeabi_d2f+0x30>
   c23b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c23bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c23c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c23c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c23c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c23cc:	bf08      	it	eq
   c23ce:	f020 0001 	biceq.w	r0, r0, #1
   c23d2:	4770      	bx	lr
   c23d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c23d8:	d121      	bne.n	c241e <__aeabi_d2f+0x7a>
   c23da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c23de:	bfbc      	itt	lt
   c23e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c23e4:	4770      	bxlt	lr
   c23e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c23ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c23ee:	f1c2 0218 	rsb	r2, r2, #24
   c23f2:	f1c2 0c20 	rsb	ip, r2, #32
   c23f6:	fa10 f30c 	lsls.w	r3, r0, ip
   c23fa:	fa20 f002 	lsr.w	r0, r0, r2
   c23fe:	bf18      	it	ne
   c2400:	f040 0001 	orrne.w	r0, r0, #1
   c2404:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c2408:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c240c:	fa03 fc0c 	lsl.w	ip, r3, ip
   c2410:	ea40 000c 	orr.w	r0, r0, ip
   c2414:	fa23 f302 	lsr.w	r3, r3, r2
   c2418:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c241c:	e7cc      	b.n	c23b8 <__aeabi_d2f+0x14>
   c241e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c2422:	d107      	bne.n	c2434 <__aeabi_d2f+0x90>
   c2424:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c2428:	bf1e      	ittt	ne
   c242a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c242e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c2432:	4770      	bxne	lr
   c2434:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c2438:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c243c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c2440:	4770      	bx	lr
   c2442:	bf00      	nop

000c2444 <__aeabi_d2ulz>:
   c2444:	b5d0      	push	{r4, r6, r7, lr}
   c2446:	4b0c      	ldr	r3, [pc, #48]	; (c2478 <__aeabi_d2ulz+0x34>)
   c2448:	2200      	movs	r2, #0
   c244a:	4606      	mov	r6, r0
   c244c:	460f      	mov	r7, r1
   c244e:	f7ff fcb1 	bl	c1db4 <__aeabi_dmul>
   c2452:	f7ff ff87 	bl	c2364 <__aeabi_d2uiz>
   c2456:	4604      	mov	r4, r0
   c2458:	f7ff fc32 	bl	c1cc0 <__aeabi_ui2d>
   c245c:	4b07      	ldr	r3, [pc, #28]	; (c247c <__aeabi_d2ulz+0x38>)
   c245e:	2200      	movs	r2, #0
   c2460:	f7ff fca8 	bl	c1db4 <__aeabi_dmul>
   c2464:	4602      	mov	r2, r0
   c2466:	460b      	mov	r3, r1
   c2468:	4630      	mov	r0, r6
   c246a:	4639      	mov	r1, r7
   c246c:	f7ff faea 	bl	c1a44 <__aeabi_dsub>
   c2470:	f7ff ff78 	bl	c2364 <__aeabi_d2uiz>
   c2474:	4621      	mov	r1, r4
   c2476:	bdd0      	pop	{r4, r6, r7, pc}
   c2478:	3df00000 	.word	0x3df00000
   c247c:	41f00000 	.word	0x41f00000

000c2480 <asctime_r>:
   c2480:	b510      	push	{r4, lr}
   c2482:	460c      	mov	r4, r1
   c2484:	6941      	ldr	r1, [r0, #20]
   c2486:	6903      	ldr	r3, [r0, #16]
   c2488:	6982      	ldr	r2, [r0, #24]
   c248a:	b086      	sub	sp, #24
   c248c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c2490:	9104      	str	r1, [sp, #16]
   c2492:	6801      	ldr	r1, [r0, #0]
   c2494:	9103      	str	r1, [sp, #12]
   c2496:	6841      	ldr	r1, [r0, #4]
   c2498:	9102      	str	r1, [sp, #8]
   c249a:	6881      	ldr	r1, [r0, #8]
   c249c:	9101      	str	r1, [sp, #4]
   c249e:	68c1      	ldr	r1, [r0, #12]
   c24a0:	9100      	str	r1, [sp, #0]
   c24a2:	4907      	ldr	r1, [pc, #28]	; (c24c0 <asctime_r+0x40>)
   c24a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c24a8:	440b      	add	r3, r1
   c24aa:	4906      	ldr	r1, [pc, #24]	; (c24c4 <asctime_r+0x44>)
   c24ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c24b0:	440a      	add	r2, r1
   c24b2:	4620      	mov	r0, r4
   c24b4:	4904      	ldr	r1, [pc, #16]	; (c24c8 <asctime_r+0x48>)
   c24b6:	f7fb f80d 	bl	bd4d4 <siprintf>
   c24ba:	4620      	mov	r0, r4
   c24bc:	b006      	add	sp, #24
   c24be:	bd10      	pop	{r4, pc}
   c24c0:	000c6a0d 	.word	0x000c6a0d
   c24c4:	000c69f8 	.word	0x000c69f8
   c24c8:	000c69d8 	.word	0x000c69d8

000c24cc <atexit>:
   c24cc:	2300      	movs	r3, #0
   c24ce:	4601      	mov	r1, r0
   c24d0:	461a      	mov	r2, r3
   c24d2:	4618      	mov	r0, r3
   c24d4:	f001 b8fe 	b.w	c36d4 <__register_exitproc>

000c24d8 <gmtime>:
   c24d8:	b538      	push	{r3, r4, r5, lr}
   c24da:	4b0b      	ldr	r3, [pc, #44]	; (c2508 <gmtime+0x30>)
   c24dc:	681d      	ldr	r5, [r3, #0]
   c24de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c24e0:	4604      	mov	r4, r0
   c24e2:	b953      	cbnz	r3, c24fa <gmtime+0x22>
   c24e4:	2024      	movs	r0, #36	; 0x24
   c24e6:	f7fa ffdd 	bl	bd4a4 <malloc>
   c24ea:	4602      	mov	r2, r0
   c24ec:	63e8      	str	r0, [r5, #60]	; 0x3c
   c24ee:	b920      	cbnz	r0, c24fa <gmtime+0x22>
   c24f0:	4b06      	ldr	r3, [pc, #24]	; (c250c <gmtime+0x34>)
   c24f2:	4807      	ldr	r0, [pc, #28]	; (c2510 <gmtime+0x38>)
   c24f4:	2139      	movs	r1, #57	; 0x39
   c24f6:	f7fb f825 	bl	bd544 <__assert_func>
   c24fa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c24fc:	4620      	mov	r0, r4
   c24fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c2502:	f7fb b83f 	b.w	bd584 <gmtime_r>
   c2506:	bf00      	nop
   c2508:	2003d68c 	.word	0x2003d68c
   c250c:	000c6a31 	.word	0x000c6a31
   c2510:	000c6a48 	.word	0x000c6a48

000c2514 <isprint>:
   c2514:	4b02      	ldr	r3, [pc, #8]	; (c2520 <isprint+0xc>)
   c2516:	4418      	add	r0, r3
   c2518:	7840      	ldrb	r0, [r0, #1]
   c251a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c251e:	4770      	bx	lr
   c2520:	000c6b50 	.word	0x000c6b50

000c2524 <memcpy>:
   c2524:	440a      	add	r2, r1
   c2526:	4291      	cmp	r1, r2
   c2528:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c252c:	d100      	bne.n	c2530 <memcpy+0xc>
   c252e:	4770      	bx	lr
   c2530:	b510      	push	{r4, lr}
   c2532:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2536:	f803 4f01 	strb.w	r4, [r3, #1]!
   c253a:	4291      	cmp	r1, r2
   c253c:	d1f9      	bne.n	c2532 <memcpy+0xe>
   c253e:	bd10      	pop	{r4, pc}

000c2540 <memmove>:
   c2540:	4288      	cmp	r0, r1
   c2542:	b510      	push	{r4, lr}
   c2544:	eb01 0402 	add.w	r4, r1, r2
   c2548:	d902      	bls.n	c2550 <memmove+0x10>
   c254a:	4284      	cmp	r4, r0
   c254c:	4623      	mov	r3, r4
   c254e:	d807      	bhi.n	c2560 <memmove+0x20>
   c2550:	1e43      	subs	r3, r0, #1
   c2552:	42a1      	cmp	r1, r4
   c2554:	d008      	beq.n	c2568 <memmove+0x28>
   c2556:	f811 2b01 	ldrb.w	r2, [r1], #1
   c255a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c255e:	e7f8      	b.n	c2552 <memmove+0x12>
   c2560:	4402      	add	r2, r0
   c2562:	4601      	mov	r1, r0
   c2564:	428a      	cmp	r2, r1
   c2566:	d100      	bne.n	c256a <memmove+0x2a>
   c2568:	bd10      	pop	{r4, pc}
   c256a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c256e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c2572:	e7f7      	b.n	c2564 <memmove+0x24>

000c2574 <memset>:
   c2574:	4402      	add	r2, r0
   c2576:	4603      	mov	r3, r0
   c2578:	4293      	cmp	r3, r2
   c257a:	d100      	bne.n	c257e <memset+0xa>
   c257c:	4770      	bx	lr
   c257e:	f803 1b01 	strb.w	r1, [r3], #1
   c2582:	e7f9      	b.n	c2578 <memset+0x4>

000c2584 <_calloc_r>:
   c2584:	b513      	push	{r0, r1, r4, lr}
   c2586:	434a      	muls	r2, r1
   c2588:	4611      	mov	r1, r2
   c258a:	9201      	str	r2, [sp, #4]
   c258c:	f7fa ffca 	bl	bd524 <_malloc_r>
   c2590:	4604      	mov	r4, r0
   c2592:	b118      	cbz	r0, c259c <_calloc_r+0x18>
   c2594:	9a01      	ldr	r2, [sp, #4]
   c2596:	2100      	movs	r1, #0
   c2598:	f7ff ffec 	bl	c2574 <memset>
   c259c:	4620      	mov	r0, r4
   c259e:	b002      	add	sp, #8
   c25a0:	bd10      	pop	{r4, pc}
	...

000c25a4 <srand>:
   c25a4:	b538      	push	{r3, r4, r5, lr}
   c25a6:	4b10      	ldr	r3, [pc, #64]	; (c25e8 <srand+0x44>)
   c25a8:	681d      	ldr	r5, [r3, #0]
   c25aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c25ac:	4604      	mov	r4, r0
   c25ae:	b9b3      	cbnz	r3, c25de <srand+0x3a>
   c25b0:	2018      	movs	r0, #24
   c25b2:	f7fa ff77 	bl	bd4a4 <malloc>
   c25b6:	4602      	mov	r2, r0
   c25b8:	63a8      	str	r0, [r5, #56]	; 0x38
   c25ba:	b920      	cbnz	r0, c25c6 <srand+0x22>
   c25bc:	4b0b      	ldr	r3, [pc, #44]	; (c25ec <srand+0x48>)
   c25be:	480c      	ldr	r0, [pc, #48]	; (c25f0 <srand+0x4c>)
   c25c0:	2142      	movs	r1, #66	; 0x42
   c25c2:	f7fa ffbf 	bl	bd544 <__assert_func>
   c25c6:	490b      	ldr	r1, [pc, #44]	; (c25f4 <srand+0x50>)
   c25c8:	4b0b      	ldr	r3, [pc, #44]	; (c25f8 <srand+0x54>)
   c25ca:	e9c0 1300 	strd	r1, r3, [r0]
   c25ce:	4b0b      	ldr	r3, [pc, #44]	; (c25fc <srand+0x58>)
   c25d0:	6083      	str	r3, [r0, #8]
   c25d2:	230b      	movs	r3, #11
   c25d4:	8183      	strh	r3, [r0, #12]
   c25d6:	2100      	movs	r1, #0
   c25d8:	2001      	movs	r0, #1
   c25da:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c25de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c25e0:	2200      	movs	r2, #0
   c25e2:	611c      	str	r4, [r3, #16]
   c25e4:	615a      	str	r2, [r3, #20]
   c25e6:	bd38      	pop	{r3, r4, r5, pc}
   c25e8:	2003d68c 	.word	0x2003d68c
   c25ec:	000c6a31 	.word	0x000c6a31
   c25f0:	000c6aa1 	.word	0x000c6aa1
   c25f4:	abcd330e 	.word	0xabcd330e
   c25f8:	e66d1234 	.word	0xe66d1234
   c25fc:	0005deec 	.word	0x0005deec

000c2600 <rand>:
   c2600:	4b16      	ldr	r3, [pc, #88]	; (c265c <rand+0x5c>)
   c2602:	b510      	push	{r4, lr}
   c2604:	681c      	ldr	r4, [r3, #0]
   c2606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c2608:	b9b3      	cbnz	r3, c2638 <rand+0x38>
   c260a:	2018      	movs	r0, #24
   c260c:	f7fa ff4a 	bl	bd4a4 <malloc>
   c2610:	63a0      	str	r0, [r4, #56]	; 0x38
   c2612:	b928      	cbnz	r0, c2620 <rand+0x20>
   c2614:	4602      	mov	r2, r0
   c2616:	4b12      	ldr	r3, [pc, #72]	; (c2660 <rand+0x60>)
   c2618:	4812      	ldr	r0, [pc, #72]	; (c2664 <rand+0x64>)
   c261a:	214e      	movs	r1, #78	; 0x4e
   c261c:	f7fa ff92 	bl	bd544 <__assert_func>
   c2620:	4a11      	ldr	r2, [pc, #68]	; (c2668 <rand+0x68>)
   c2622:	4b12      	ldr	r3, [pc, #72]	; (c266c <rand+0x6c>)
   c2624:	e9c0 2300 	strd	r2, r3, [r0]
   c2628:	4b11      	ldr	r3, [pc, #68]	; (c2670 <rand+0x70>)
   c262a:	6083      	str	r3, [r0, #8]
   c262c:	230b      	movs	r3, #11
   c262e:	8183      	strh	r3, [r0, #12]
   c2630:	2201      	movs	r2, #1
   c2632:	2300      	movs	r3, #0
   c2634:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c2638:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c263a:	4a0e      	ldr	r2, [pc, #56]	; (c2674 <rand+0x74>)
   c263c:	6920      	ldr	r0, [r4, #16]
   c263e:	6963      	ldr	r3, [r4, #20]
   c2640:	490d      	ldr	r1, [pc, #52]	; (c2678 <rand+0x78>)
   c2642:	4342      	muls	r2, r0
   c2644:	fb01 2203 	mla	r2, r1, r3, r2
   c2648:	fba0 0101 	umull	r0, r1, r0, r1
   c264c:	1c43      	adds	r3, r0, #1
   c264e:	eb42 0001 	adc.w	r0, r2, r1
   c2652:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c2656:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c265a:	bd10      	pop	{r4, pc}
   c265c:	2003d68c 	.word	0x2003d68c
   c2660:	000c6a31 	.word	0x000c6a31
   c2664:	000c6aa1 	.word	0x000c6aa1
   c2668:	abcd330e 	.word	0xabcd330e
   c266c:	e66d1234 	.word	0xe66d1234
   c2670:	0005deec 	.word	0x0005deec
   c2674:	5851f42d 	.word	0x5851f42d
   c2678:	4c957f2d 	.word	0x4c957f2d

000c267c <strchr>:
   c267c:	b2c9      	uxtb	r1, r1
   c267e:	4603      	mov	r3, r0
   c2680:	f810 2b01 	ldrb.w	r2, [r0], #1
   c2684:	b11a      	cbz	r2, c268e <strchr+0x12>
   c2686:	428a      	cmp	r2, r1
   c2688:	d1f9      	bne.n	c267e <strchr+0x2>
   c268a:	4618      	mov	r0, r3
   c268c:	4770      	bx	lr
   c268e:	2900      	cmp	r1, #0
   c2690:	bf18      	it	ne
   c2692:	2300      	movne	r3, #0
   c2694:	e7f9      	b.n	c268a <strchr+0xe>

000c2696 <strchrnul>:
   c2696:	b510      	push	{r4, lr}
   c2698:	4604      	mov	r4, r0
   c269a:	f7ff ffef 	bl	c267c <strchr>
   c269e:	b918      	cbnz	r0, c26a8 <strchrnul+0x12>
   c26a0:	4620      	mov	r0, r4
   c26a2:	f000 f832 	bl	c270a <strlen>
   c26a6:	4420      	add	r0, r4
   c26a8:	bd10      	pop	{r4, pc}

000c26aa <strcmp>:
   c26aa:	f810 2b01 	ldrb.w	r2, [r0], #1
   c26ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   c26b2:	2a01      	cmp	r2, #1
   c26b4:	bf28      	it	cs
   c26b6:	429a      	cmpcs	r2, r3
   c26b8:	d0f7      	beq.n	c26aa <strcmp>
   c26ba:	1ad0      	subs	r0, r2, r3
   c26bc:	4770      	bx	lr

000c26be <strcpy>:
   c26be:	4603      	mov	r3, r0
   c26c0:	f811 2b01 	ldrb.w	r2, [r1], #1
   c26c4:	f803 2b01 	strb.w	r2, [r3], #1
   c26c8:	2a00      	cmp	r2, #0
   c26ca:	d1f9      	bne.n	c26c0 <strcpy+0x2>
   c26cc:	4770      	bx	lr
	...

000c26d0 <strdup>:
   c26d0:	4b02      	ldr	r3, [pc, #8]	; (c26dc <strdup+0xc>)
   c26d2:	4601      	mov	r1, r0
   c26d4:	6818      	ldr	r0, [r3, #0]
   c26d6:	f000 b803 	b.w	c26e0 <_strdup_r>
   c26da:	bf00      	nop
   c26dc:	2003d68c 	.word	0x2003d68c

000c26e0 <_strdup_r>:
   c26e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c26e2:	4604      	mov	r4, r0
   c26e4:	4608      	mov	r0, r1
   c26e6:	460d      	mov	r5, r1
   c26e8:	f000 f80f 	bl	c270a <strlen>
   c26ec:	1c42      	adds	r2, r0, #1
   c26ee:	4611      	mov	r1, r2
   c26f0:	4620      	mov	r0, r4
   c26f2:	9201      	str	r2, [sp, #4]
   c26f4:	f7fa ff16 	bl	bd524 <_malloc_r>
   c26f8:	4604      	mov	r4, r0
   c26fa:	b118      	cbz	r0, c2704 <_strdup_r+0x24>
   c26fc:	9a01      	ldr	r2, [sp, #4]
   c26fe:	4629      	mov	r1, r5
   c2700:	f7ff ff10 	bl	c2524 <memcpy>
   c2704:	4620      	mov	r0, r4
   c2706:	b003      	add	sp, #12
   c2708:	bd30      	pop	{r4, r5, pc}

000c270a <strlen>:
   c270a:	4603      	mov	r3, r0
   c270c:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2710:	2a00      	cmp	r2, #0
   c2712:	d1fb      	bne.n	c270c <strlen+0x2>
   c2714:	1a18      	subs	r0, r3, r0
   c2716:	3801      	subs	r0, #1
   c2718:	4770      	bx	lr

000c271a <strncmp>:
   c271a:	b510      	push	{r4, lr}
   c271c:	b17a      	cbz	r2, c273e <strncmp+0x24>
   c271e:	4603      	mov	r3, r0
   c2720:	3901      	subs	r1, #1
   c2722:	1884      	adds	r4, r0, r2
   c2724:	f813 0b01 	ldrb.w	r0, [r3], #1
   c2728:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c272c:	4290      	cmp	r0, r2
   c272e:	d101      	bne.n	c2734 <strncmp+0x1a>
   c2730:	42a3      	cmp	r3, r4
   c2732:	d101      	bne.n	c2738 <strncmp+0x1e>
   c2734:	1a80      	subs	r0, r0, r2
   c2736:	bd10      	pop	{r4, pc}
   c2738:	2800      	cmp	r0, #0
   c273a:	d1f3      	bne.n	c2724 <strncmp+0xa>
   c273c:	e7fa      	b.n	c2734 <strncmp+0x1a>
   c273e:	4610      	mov	r0, r2
   c2740:	e7f9      	b.n	c2736 <strncmp+0x1c>

000c2742 <strncpy>:
   c2742:	b510      	push	{r4, lr}
   c2744:	3901      	subs	r1, #1
   c2746:	4603      	mov	r3, r0
   c2748:	b132      	cbz	r2, c2758 <strncpy+0x16>
   c274a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c274e:	f803 4b01 	strb.w	r4, [r3], #1
   c2752:	3a01      	subs	r2, #1
   c2754:	2c00      	cmp	r4, #0
   c2756:	d1f7      	bne.n	c2748 <strncpy+0x6>
   c2758:	441a      	add	r2, r3
   c275a:	2100      	movs	r1, #0
   c275c:	4293      	cmp	r3, r2
   c275e:	d100      	bne.n	c2762 <strncpy+0x20>
   c2760:	bd10      	pop	{r4, pc}
   c2762:	f803 1b01 	strb.w	r1, [r3], #1
   c2766:	e7f9      	b.n	c275c <strncpy+0x1a>

000c2768 <strrchr>:
   c2768:	b538      	push	{r3, r4, r5, lr}
   c276a:	4603      	mov	r3, r0
   c276c:	460c      	mov	r4, r1
   c276e:	b969      	cbnz	r1, c278c <strrchr+0x24>
   c2770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c2774:	f7ff bf82 	b.w	c267c <strchr>
   c2778:	1c43      	adds	r3, r0, #1
   c277a:	4605      	mov	r5, r0
   c277c:	4621      	mov	r1, r4
   c277e:	4618      	mov	r0, r3
   c2780:	f7ff ff7c 	bl	c267c <strchr>
   c2784:	2800      	cmp	r0, #0
   c2786:	d1f7      	bne.n	c2778 <strrchr+0x10>
   c2788:	4628      	mov	r0, r5
   c278a:	bd38      	pop	{r3, r4, r5, pc}
   c278c:	2500      	movs	r5, #0
   c278e:	e7f5      	b.n	c277c <strrchr+0x14>

000c2790 <sulp>:
   c2790:	b570      	push	{r4, r5, r6, lr}
   c2792:	4604      	mov	r4, r0
   c2794:	460d      	mov	r5, r1
   c2796:	ec45 4b10 	vmov	d0, r4, r5
   c279a:	4616      	mov	r6, r2
   c279c:	f001 ff28 	bl	c45f0 <__ulp>
   c27a0:	ec51 0b10 	vmov	r0, r1, d0
   c27a4:	b17e      	cbz	r6, c27c6 <sulp+0x36>
   c27a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c27aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c27ae:	2b00      	cmp	r3, #0
   c27b0:	dd09      	ble.n	c27c6 <sulp+0x36>
   c27b2:	051b      	lsls	r3, r3, #20
   c27b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c27b8:	2400      	movs	r4, #0
   c27ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c27be:	4622      	mov	r2, r4
   c27c0:	462b      	mov	r3, r5
   c27c2:	f7ff faf7 	bl	c1db4 <__aeabi_dmul>
   c27c6:	bd70      	pop	{r4, r5, r6, pc}

000c27c8 <_strtod_l>:
   c27c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c27cc:	ed2d 8b02 	vpush	{d8}
   c27d0:	b09d      	sub	sp, #116	; 0x74
   c27d2:	461f      	mov	r7, r3
   c27d4:	2300      	movs	r3, #0
   c27d6:	9318      	str	r3, [sp, #96]	; 0x60
   c27d8:	4ba2      	ldr	r3, [pc, #648]	; (c2a64 <_strtod_l+0x29c>)
   c27da:	9213      	str	r2, [sp, #76]	; 0x4c
   c27dc:	681b      	ldr	r3, [r3, #0]
   c27de:	9305      	str	r3, [sp, #20]
   c27e0:	4604      	mov	r4, r0
   c27e2:	4618      	mov	r0, r3
   c27e4:	4688      	mov	r8, r1
   c27e6:	f7ff ff90 	bl	c270a <strlen>
   c27ea:	f04f 0a00 	mov.w	sl, #0
   c27ee:	4605      	mov	r5, r0
   c27f0:	f04f 0b00 	mov.w	fp, #0
   c27f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c27f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c27fa:	781a      	ldrb	r2, [r3, #0]
   c27fc:	2a2b      	cmp	r2, #43	; 0x2b
   c27fe:	d04e      	beq.n	c289e <_strtod_l+0xd6>
   c2800:	d83b      	bhi.n	c287a <_strtod_l+0xb2>
   c2802:	2a0d      	cmp	r2, #13
   c2804:	d834      	bhi.n	c2870 <_strtod_l+0xa8>
   c2806:	2a08      	cmp	r2, #8
   c2808:	d834      	bhi.n	c2874 <_strtod_l+0xac>
   c280a:	2a00      	cmp	r2, #0
   c280c:	d03e      	beq.n	c288c <_strtod_l+0xc4>
   c280e:	2300      	movs	r3, #0
   c2810:	930a      	str	r3, [sp, #40]	; 0x28
   c2812:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c2814:	7833      	ldrb	r3, [r6, #0]
   c2816:	2b30      	cmp	r3, #48	; 0x30
   c2818:	f040 80b0 	bne.w	c297c <_strtod_l+0x1b4>
   c281c:	7873      	ldrb	r3, [r6, #1]
   c281e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c2822:	2b58      	cmp	r3, #88	; 0x58
   c2824:	d168      	bne.n	c28f8 <_strtod_l+0x130>
   c2826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2828:	9301      	str	r3, [sp, #4]
   c282a:	ab18      	add	r3, sp, #96	; 0x60
   c282c:	9702      	str	r7, [sp, #8]
   c282e:	9300      	str	r3, [sp, #0]
   c2830:	4a8d      	ldr	r2, [pc, #564]	; (c2a68 <_strtod_l+0x2a0>)
   c2832:	ab19      	add	r3, sp, #100	; 0x64
   c2834:	a917      	add	r1, sp, #92	; 0x5c
   c2836:	4620      	mov	r0, r4
   c2838:	f001 f838 	bl	c38ac <__gethex>
   c283c:	f010 0707 	ands.w	r7, r0, #7
   c2840:	4605      	mov	r5, r0
   c2842:	d005      	beq.n	c2850 <_strtod_l+0x88>
   c2844:	2f06      	cmp	r7, #6
   c2846:	d12c      	bne.n	c28a2 <_strtod_l+0xda>
   c2848:	3601      	adds	r6, #1
   c284a:	2300      	movs	r3, #0
   c284c:	9617      	str	r6, [sp, #92]	; 0x5c
   c284e:	930a      	str	r3, [sp, #40]	; 0x28
   c2850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c2852:	2b00      	cmp	r3, #0
   c2854:	f040 8590 	bne.w	c3378 <_strtod_l+0xbb0>
   c2858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c285a:	b1eb      	cbz	r3, c2898 <_strtod_l+0xd0>
   c285c:	4652      	mov	r2, sl
   c285e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c2862:	ec43 2b10 	vmov	d0, r2, r3
   c2866:	b01d      	add	sp, #116	; 0x74
   c2868:	ecbd 8b02 	vpop	{d8}
   c286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2870:	2a20      	cmp	r2, #32
   c2872:	d1cc      	bne.n	c280e <_strtod_l+0x46>
   c2874:	3301      	adds	r3, #1
   c2876:	9317      	str	r3, [sp, #92]	; 0x5c
   c2878:	e7be      	b.n	c27f8 <_strtod_l+0x30>
   c287a:	2a2d      	cmp	r2, #45	; 0x2d
   c287c:	d1c7      	bne.n	c280e <_strtod_l+0x46>
   c287e:	2201      	movs	r2, #1
   c2880:	920a      	str	r2, [sp, #40]	; 0x28
   c2882:	1c5a      	adds	r2, r3, #1
   c2884:	9217      	str	r2, [sp, #92]	; 0x5c
   c2886:	785b      	ldrb	r3, [r3, #1]
   c2888:	2b00      	cmp	r3, #0
   c288a:	d1c2      	bne.n	c2812 <_strtod_l+0x4a>
   c288c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c288e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2892:	2b00      	cmp	r3, #0
   c2894:	f040 856e 	bne.w	c3374 <_strtod_l+0xbac>
   c2898:	4652      	mov	r2, sl
   c289a:	465b      	mov	r3, fp
   c289c:	e7e1      	b.n	c2862 <_strtod_l+0x9a>
   c289e:	2200      	movs	r2, #0
   c28a0:	e7ee      	b.n	c2880 <_strtod_l+0xb8>
   c28a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c28a4:	b13a      	cbz	r2, c28b6 <_strtod_l+0xee>
   c28a6:	2135      	movs	r1, #53	; 0x35
   c28a8:	a81a      	add	r0, sp, #104	; 0x68
   c28aa:	f001 ffac 	bl	c4806 <__copybits>
   c28ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   c28b0:	4620      	mov	r0, r4
   c28b2:	f001 fb6b 	bl	c3f8c <_Bfree>
   c28b6:	3f01      	subs	r7, #1
   c28b8:	2f04      	cmp	r7, #4
   c28ba:	d806      	bhi.n	c28ca <_strtod_l+0x102>
   c28bc:	e8df f007 	tbb	[pc, r7]
   c28c0:	1714030a 	.word	0x1714030a
   c28c4:	0a          	.byte	0x0a
   c28c5:	00          	.byte	0x00
   c28c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c28ca:	0728      	lsls	r0, r5, #28
   c28cc:	d5c0      	bpl.n	c2850 <_strtod_l+0x88>
   c28ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c28d2:	e7bd      	b.n	c2850 <_strtod_l+0x88>
   c28d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c28d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c28da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c28de:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c28e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c28e6:	e7f0      	b.n	c28ca <_strtod_l+0x102>
   c28e8:	f8df b180 	ldr.w	fp, [pc, #384]	; c2a6c <_strtod_l+0x2a4>
   c28ec:	e7ed      	b.n	c28ca <_strtod_l+0x102>
   c28ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c28f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c28f6:	e7e8      	b.n	c28ca <_strtod_l+0x102>
   c28f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c28fa:	1c5a      	adds	r2, r3, #1
   c28fc:	9217      	str	r2, [sp, #92]	; 0x5c
   c28fe:	785b      	ldrb	r3, [r3, #1]
   c2900:	2b30      	cmp	r3, #48	; 0x30
   c2902:	d0f9      	beq.n	c28f8 <_strtod_l+0x130>
   c2904:	2b00      	cmp	r3, #0
   c2906:	d0a3      	beq.n	c2850 <_strtod_l+0x88>
   c2908:	2301      	movs	r3, #1
   c290a:	f04f 0900 	mov.w	r9, #0
   c290e:	9304      	str	r3, [sp, #16]
   c2910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2912:	9308      	str	r3, [sp, #32]
   c2914:	f8cd 901c 	str.w	r9, [sp, #28]
   c2918:	464f      	mov	r7, r9
   c291a:	220a      	movs	r2, #10
   c291c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c291e:	7806      	ldrb	r6, [r0, #0]
   c2920:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c2924:	b2d9      	uxtb	r1, r3
   c2926:	2909      	cmp	r1, #9
   c2928:	d92a      	bls.n	c2980 <_strtod_l+0x1b8>
   c292a:	9905      	ldr	r1, [sp, #20]
   c292c:	462a      	mov	r2, r5
   c292e:	f7ff fef4 	bl	c271a <strncmp>
   c2932:	b398      	cbz	r0, c299c <_strtod_l+0x1d4>
   c2934:	2000      	movs	r0, #0
   c2936:	4632      	mov	r2, r6
   c2938:	463d      	mov	r5, r7
   c293a:	9005      	str	r0, [sp, #20]
   c293c:	4603      	mov	r3, r0
   c293e:	2a65      	cmp	r2, #101	; 0x65
   c2940:	d001      	beq.n	c2946 <_strtod_l+0x17e>
   c2942:	2a45      	cmp	r2, #69	; 0x45
   c2944:	d118      	bne.n	c2978 <_strtod_l+0x1b0>
   c2946:	b91d      	cbnz	r5, c2950 <_strtod_l+0x188>
   c2948:	9a04      	ldr	r2, [sp, #16]
   c294a:	4302      	orrs	r2, r0
   c294c:	d09e      	beq.n	c288c <_strtod_l+0xc4>
   c294e:	2500      	movs	r5, #0
   c2950:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c2954:	f108 0201 	add.w	r2, r8, #1
   c2958:	9217      	str	r2, [sp, #92]	; 0x5c
   c295a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c295e:	2a2b      	cmp	r2, #43	; 0x2b
   c2960:	d075      	beq.n	c2a4e <_strtod_l+0x286>
   c2962:	2a2d      	cmp	r2, #45	; 0x2d
   c2964:	d07b      	beq.n	c2a5e <_strtod_l+0x296>
   c2966:	f04f 0c00 	mov.w	ip, #0
   c296a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c296e:	2909      	cmp	r1, #9
   c2970:	f240 8082 	bls.w	c2a78 <_strtod_l+0x2b0>
   c2974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2978:	2600      	movs	r6, #0
   c297a:	e09d      	b.n	c2ab8 <_strtod_l+0x2f0>
   c297c:	2300      	movs	r3, #0
   c297e:	e7c4      	b.n	c290a <_strtod_l+0x142>
   c2980:	2f08      	cmp	r7, #8
   c2982:	bfd8      	it	le
   c2984:	9907      	ldrle	r1, [sp, #28]
   c2986:	f100 0001 	add.w	r0, r0, #1
   c298a:	bfda      	itte	le
   c298c:	fb02 3301 	mlale	r3, r2, r1, r3
   c2990:	9307      	strle	r3, [sp, #28]
   c2992:	fb02 3909 	mlagt	r9, r2, r9, r3
   c2996:	3701      	adds	r7, #1
   c2998:	9017      	str	r0, [sp, #92]	; 0x5c
   c299a:	e7bf      	b.n	c291c <_strtod_l+0x154>
   c299c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c299e:	195a      	adds	r2, r3, r5
   c29a0:	9217      	str	r2, [sp, #92]	; 0x5c
   c29a2:	5d5a      	ldrb	r2, [r3, r5]
   c29a4:	2f00      	cmp	r7, #0
   c29a6:	d037      	beq.n	c2a18 <_strtod_l+0x250>
   c29a8:	9005      	str	r0, [sp, #20]
   c29aa:	463d      	mov	r5, r7
   c29ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c29b0:	2b09      	cmp	r3, #9
   c29b2:	d912      	bls.n	c29da <_strtod_l+0x212>
   c29b4:	2301      	movs	r3, #1
   c29b6:	e7c2      	b.n	c293e <_strtod_l+0x176>
   c29b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c29ba:	1c5a      	adds	r2, r3, #1
   c29bc:	9217      	str	r2, [sp, #92]	; 0x5c
   c29be:	785a      	ldrb	r2, [r3, #1]
   c29c0:	3001      	adds	r0, #1
   c29c2:	2a30      	cmp	r2, #48	; 0x30
   c29c4:	d0f8      	beq.n	c29b8 <_strtod_l+0x1f0>
   c29c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c29ca:	2b08      	cmp	r3, #8
   c29cc:	f200 84d9 	bhi.w	c3382 <_strtod_l+0xbba>
   c29d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c29d2:	9005      	str	r0, [sp, #20]
   c29d4:	2000      	movs	r0, #0
   c29d6:	9308      	str	r3, [sp, #32]
   c29d8:	4605      	mov	r5, r0
   c29da:	3a30      	subs	r2, #48	; 0x30
   c29dc:	f100 0301 	add.w	r3, r0, #1
   c29e0:	d014      	beq.n	c2a0c <_strtod_l+0x244>
   c29e2:	9905      	ldr	r1, [sp, #20]
   c29e4:	4419      	add	r1, r3
   c29e6:	9105      	str	r1, [sp, #20]
   c29e8:	462b      	mov	r3, r5
   c29ea:	eb00 0e05 	add.w	lr, r0, r5
   c29ee:	210a      	movs	r1, #10
   c29f0:	4573      	cmp	r3, lr
   c29f2:	d113      	bne.n	c2a1c <_strtod_l+0x254>
   c29f4:	182b      	adds	r3, r5, r0
   c29f6:	2b08      	cmp	r3, #8
   c29f8:	f105 0501 	add.w	r5, r5, #1
   c29fc:	4405      	add	r5, r0
   c29fe:	dc1c      	bgt.n	c2a3a <_strtod_l+0x272>
   c2a00:	9907      	ldr	r1, [sp, #28]
   c2a02:	230a      	movs	r3, #10
   c2a04:	fb03 2301 	mla	r3, r3, r1, r2
   c2a08:	9307      	str	r3, [sp, #28]
   c2a0a:	2300      	movs	r3, #0
   c2a0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2a0e:	1c51      	adds	r1, r2, #1
   c2a10:	9117      	str	r1, [sp, #92]	; 0x5c
   c2a12:	7852      	ldrb	r2, [r2, #1]
   c2a14:	4618      	mov	r0, r3
   c2a16:	e7c9      	b.n	c29ac <_strtod_l+0x1e4>
   c2a18:	4638      	mov	r0, r7
   c2a1a:	e7d2      	b.n	c29c2 <_strtod_l+0x1fa>
   c2a1c:	2b08      	cmp	r3, #8
   c2a1e:	dc04      	bgt.n	c2a2a <_strtod_l+0x262>
   c2a20:	9e07      	ldr	r6, [sp, #28]
   c2a22:	434e      	muls	r6, r1
   c2a24:	9607      	str	r6, [sp, #28]
   c2a26:	3301      	adds	r3, #1
   c2a28:	e7e2      	b.n	c29f0 <_strtod_l+0x228>
   c2a2a:	f103 0c01 	add.w	ip, r3, #1
   c2a2e:	f1bc 0f10 	cmp.w	ip, #16
   c2a32:	bfd8      	it	le
   c2a34:	fb01 f909 	mulle.w	r9, r1, r9
   c2a38:	e7f5      	b.n	c2a26 <_strtod_l+0x25e>
   c2a3a:	2d10      	cmp	r5, #16
   c2a3c:	bfdc      	itt	le
   c2a3e:	230a      	movle	r3, #10
   c2a40:	fb03 2909 	mlale	r9, r3, r9, r2
   c2a44:	e7e1      	b.n	c2a0a <_strtod_l+0x242>
   c2a46:	2300      	movs	r3, #0
   c2a48:	9305      	str	r3, [sp, #20]
   c2a4a:	2301      	movs	r3, #1
   c2a4c:	e77c      	b.n	c2948 <_strtod_l+0x180>
   c2a4e:	f04f 0c00 	mov.w	ip, #0
   c2a52:	f108 0202 	add.w	r2, r8, #2
   c2a56:	9217      	str	r2, [sp, #92]	; 0x5c
   c2a58:	f898 2002 	ldrb.w	r2, [r8, #2]
   c2a5c:	e785      	b.n	c296a <_strtod_l+0x1a2>
   c2a5e:	f04f 0c01 	mov.w	ip, #1
   c2a62:	e7f6      	b.n	c2a52 <_strtod_l+0x28a>
   c2a64:	000c6cc4 	.word	0x000c6cc4
   c2a68:	000c6b00 	.word	0x000c6b00
   c2a6c:	7ff00000 	.word	0x7ff00000
   c2a70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2a72:	1c51      	adds	r1, r2, #1
   c2a74:	9117      	str	r1, [sp, #92]	; 0x5c
   c2a76:	7852      	ldrb	r2, [r2, #1]
   c2a78:	2a30      	cmp	r2, #48	; 0x30
   c2a7a:	d0f9      	beq.n	c2a70 <_strtod_l+0x2a8>
   c2a7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c2a80:	2908      	cmp	r1, #8
   c2a82:	f63f af79 	bhi.w	c2978 <_strtod_l+0x1b0>
   c2a86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c2a8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2a8c:	9206      	str	r2, [sp, #24]
   c2a8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2a90:	1c51      	adds	r1, r2, #1
   c2a92:	9117      	str	r1, [sp, #92]	; 0x5c
   c2a94:	7852      	ldrb	r2, [r2, #1]
   c2a96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c2a9a:	2e09      	cmp	r6, #9
   c2a9c:	d937      	bls.n	c2b0e <_strtod_l+0x346>
   c2a9e:	9e06      	ldr	r6, [sp, #24]
   c2aa0:	1b89      	subs	r1, r1, r6
   c2aa2:	2908      	cmp	r1, #8
   c2aa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c2aa8:	dc02      	bgt.n	c2ab0 <_strtod_l+0x2e8>
   c2aaa:	4576      	cmp	r6, lr
   c2aac:	bfa8      	it	ge
   c2aae:	4676      	movge	r6, lr
   c2ab0:	f1bc 0f00 	cmp.w	ip, #0
   c2ab4:	d000      	beq.n	c2ab8 <_strtod_l+0x2f0>
   c2ab6:	4276      	negs	r6, r6
   c2ab8:	2d00      	cmp	r5, #0
   c2aba:	d14d      	bne.n	c2b58 <_strtod_l+0x390>
   c2abc:	9904      	ldr	r1, [sp, #16]
   c2abe:	4301      	orrs	r1, r0
   c2ac0:	f47f aec6 	bne.w	c2850 <_strtod_l+0x88>
   c2ac4:	2b00      	cmp	r3, #0
   c2ac6:	f47f aee1 	bne.w	c288c <_strtod_l+0xc4>
   c2aca:	2a69      	cmp	r2, #105	; 0x69
   c2acc:	d027      	beq.n	c2b1e <_strtod_l+0x356>
   c2ace:	dc24      	bgt.n	c2b1a <_strtod_l+0x352>
   c2ad0:	2a49      	cmp	r2, #73	; 0x49
   c2ad2:	d024      	beq.n	c2b1e <_strtod_l+0x356>
   c2ad4:	2a4e      	cmp	r2, #78	; 0x4e
   c2ad6:	f47f aed9 	bne.w	c288c <_strtod_l+0xc4>
   c2ada:	499f      	ldr	r1, [pc, #636]	; (c2d58 <_strtod_l+0x590>)
   c2adc:	a817      	add	r0, sp, #92	; 0x5c
   c2ade:	f001 f93d 	bl	c3d5c <__match>
   c2ae2:	2800      	cmp	r0, #0
   c2ae4:	f43f aed2 	beq.w	c288c <_strtod_l+0xc4>
   c2ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2aea:	781b      	ldrb	r3, [r3, #0]
   c2aec:	2b28      	cmp	r3, #40	; 0x28
   c2aee:	d12d      	bne.n	c2b4c <_strtod_l+0x384>
   c2af0:	499a      	ldr	r1, [pc, #616]	; (c2d5c <_strtod_l+0x594>)
   c2af2:	aa1a      	add	r2, sp, #104	; 0x68
   c2af4:	a817      	add	r0, sp, #92	; 0x5c
   c2af6:	f001 f945 	bl	c3d84 <__hexnan>
   c2afa:	2805      	cmp	r0, #5
   c2afc:	d126      	bne.n	c2b4c <_strtod_l+0x384>
   c2afe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c2b00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c2b04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c2b08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c2b0c:	e6a0      	b.n	c2850 <_strtod_l+0x88>
   c2b0e:	210a      	movs	r1, #10
   c2b10:	fb01 2e0e 	mla	lr, r1, lr, r2
   c2b14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c2b18:	e7b9      	b.n	c2a8e <_strtod_l+0x2c6>
   c2b1a:	2a6e      	cmp	r2, #110	; 0x6e
   c2b1c:	e7db      	b.n	c2ad6 <_strtod_l+0x30e>
   c2b1e:	4990      	ldr	r1, [pc, #576]	; (c2d60 <_strtod_l+0x598>)
   c2b20:	a817      	add	r0, sp, #92	; 0x5c
   c2b22:	f001 f91b 	bl	c3d5c <__match>
   c2b26:	2800      	cmp	r0, #0
   c2b28:	f43f aeb0 	beq.w	c288c <_strtod_l+0xc4>
   c2b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2b2e:	498d      	ldr	r1, [pc, #564]	; (c2d64 <_strtod_l+0x59c>)
   c2b30:	3b01      	subs	r3, #1
   c2b32:	a817      	add	r0, sp, #92	; 0x5c
   c2b34:	9317      	str	r3, [sp, #92]	; 0x5c
   c2b36:	f001 f911 	bl	c3d5c <__match>
   c2b3a:	b910      	cbnz	r0, c2b42 <_strtod_l+0x37a>
   c2b3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2b3e:	3301      	adds	r3, #1
   c2b40:	9317      	str	r3, [sp, #92]	; 0x5c
   c2b42:	f8df b230 	ldr.w	fp, [pc, #560]	; c2d74 <_strtod_l+0x5ac>
   c2b46:	f04f 0a00 	mov.w	sl, #0
   c2b4a:	e681      	b.n	c2850 <_strtod_l+0x88>
   c2b4c:	4886      	ldr	r0, [pc, #536]	; (c2d68 <_strtod_l+0x5a0>)
   c2b4e:	f7fe fe3f 	bl	c17d0 <nan>
   c2b52:	ec5b ab10 	vmov	sl, fp, d0
   c2b56:	e67b      	b.n	c2850 <_strtod_l+0x88>
   c2b58:	9b05      	ldr	r3, [sp, #20]
   c2b5a:	9807      	ldr	r0, [sp, #28]
   c2b5c:	1af3      	subs	r3, r6, r3
   c2b5e:	2f00      	cmp	r7, #0
   c2b60:	bf08      	it	eq
   c2b62:	462f      	moveq	r7, r5
   c2b64:	2d10      	cmp	r5, #16
   c2b66:	9306      	str	r3, [sp, #24]
   c2b68:	46a8      	mov	r8, r5
   c2b6a:	bfa8      	it	ge
   c2b6c:	f04f 0810 	movge.w	r8, #16
   c2b70:	f7ff f8a6 	bl	c1cc0 <__aeabi_ui2d>
   c2b74:	2d09      	cmp	r5, #9
   c2b76:	4682      	mov	sl, r0
   c2b78:	468b      	mov	fp, r1
   c2b7a:	dd13      	ble.n	c2ba4 <_strtod_l+0x3dc>
   c2b7c:	4b7b      	ldr	r3, [pc, #492]	; (c2d6c <_strtod_l+0x5a4>)
   c2b7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c2b82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c2b86:	f7ff f915 	bl	c1db4 <__aeabi_dmul>
   c2b8a:	4682      	mov	sl, r0
   c2b8c:	4648      	mov	r0, r9
   c2b8e:	468b      	mov	fp, r1
   c2b90:	f7ff f896 	bl	c1cc0 <__aeabi_ui2d>
   c2b94:	4602      	mov	r2, r0
   c2b96:	460b      	mov	r3, r1
   c2b98:	4650      	mov	r0, sl
   c2b9a:	4659      	mov	r1, fp
   c2b9c:	f7fe ff54 	bl	c1a48 <__adddf3>
   c2ba0:	4682      	mov	sl, r0
   c2ba2:	468b      	mov	fp, r1
   c2ba4:	2d0f      	cmp	r5, #15
   c2ba6:	dc38      	bgt.n	c2c1a <_strtod_l+0x452>
   c2ba8:	9b06      	ldr	r3, [sp, #24]
   c2baa:	2b00      	cmp	r3, #0
   c2bac:	f43f ae50 	beq.w	c2850 <_strtod_l+0x88>
   c2bb0:	dd24      	ble.n	c2bfc <_strtod_l+0x434>
   c2bb2:	2b16      	cmp	r3, #22
   c2bb4:	dc0b      	bgt.n	c2bce <_strtod_l+0x406>
   c2bb6:	496d      	ldr	r1, [pc, #436]	; (c2d6c <_strtod_l+0x5a4>)
   c2bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c2bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2bc0:	4652      	mov	r2, sl
   c2bc2:	465b      	mov	r3, fp
   c2bc4:	f7ff f8f6 	bl	c1db4 <__aeabi_dmul>
   c2bc8:	4682      	mov	sl, r0
   c2bca:	468b      	mov	fp, r1
   c2bcc:	e640      	b.n	c2850 <_strtod_l+0x88>
   c2bce:	9a06      	ldr	r2, [sp, #24]
   c2bd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c2bd4:	4293      	cmp	r3, r2
   c2bd6:	db20      	blt.n	c2c1a <_strtod_l+0x452>
   c2bd8:	4c64      	ldr	r4, [pc, #400]	; (c2d6c <_strtod_l+0x5a4>)
   c2bda:	f1c5 050f 	rsb	r5, r5, #15
   c2bde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c2be2:	4652      	mov	r2, sl
   c2be4:	465b      	mov	r3, fp
   c2be6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2bea:	f7ff f8e3 	bl	c1db4 <__aeabi_dmul>
   c2bee:	9b06      	ldr	r3, [sp, #24]
   c2bf0:	1b5d      	subs	r5, r3, r5
   c2bf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c2bf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c2bfa:	e7e3      	b.n	c2bc4 <_strtod_l+0x3fc>
   c2bfc:	9b06      	ldr	r3, [sp, #24]
   c2bfe:	3316      	adds	r3, #22
   c2c00:	db0b      	blt.n	c2c1a <_strtod_l+0x452>
   c2c02:	9b05      	ldr	r3, [sp, #20]
   c2c04:	1b9e      	subs	r6, r3, r6
   c2c06:	4b59      	ldr	r3, [pc, #356]	; (c2d6c <_strtod_l+0x5a4>)
   c2c08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c2c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c2c10:	4650      	mov	r0, sl
   c2c12:	4659      	mov	r1, fp
   c2c14:	f7ff f9f8 	bl	c2008 <__aeabi_ddiv>
   c2c18:	e7d6      	b.n	c2bc8 <_strtod_l+0x400>
   c2c1a:	9b06      	ldr	r3, [sp, #24]
   c2c1c:	eba5 0808 	sub.w	r8, r5, r8
   c2c20:	4498      	add	r8, r3
   c2c22:	f1b8 0f00 	cmp.w	r8, #0
   c2c26:	dd74      	ble.n	c2d12 <_strtod_l+0x54a>
   c2c28:	f018 030f 	ands.w	r3, r8, #15
   c2c2c:	d00a      	beq.n	c2c44 <_strtod_l+0x47c>
   c2c2e:	494f      	ldr	r1, [pc, #316]	; (c2d6c <_strtod_l+0x5a4>)
   c2c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c2c34:	4652      	mov	r2, sl
   c2c36:	465b      	mov	r3, fp
   c2c38:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2c3c:	f7ff f8ba 	bl	c1db4 <__aeabi_dmul>
   c2c40:	4682      	mov	sl, r0
   c2c42:	468b      	mov	fp, r1
   c2c44:	f038 080f 	bics.w	r8, r8, #15
   c2c48:	d04f      	beq.n	c2cea <_strtod_l+0x522>
   c2c4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c2c4e:	dd22      	ble.n	c2c96 <_strtod_l+0x4ce>
   c2c50:	2500      	movs	r5, #0
   c2c52:	462e      	mov	r6, r5
   c2c54:	9507      	str	r5, [sp, #28]
   c2c56:	9505      	str	r5, [sp, #20]
   c2c58:	2322      	movs	r3, #34	; 0x22
   c2c5a:	f8df b118 	ldr.w	fp, [pc, #280]	; c2d74 <_strtod_l+0x5ac>
   c2c5e:	6023      	str	r3, [r4, #0]
   c2c60:	f04f 0a00 	mov.w	sl, #0
   c2c64:	9b07      	ldr	r3, [sp, #28]
   c2c66:	2b00      	cmp	r3, #0
   c2c68:	f43f adf2 	beq.w	c2850 <_strtod_l+0x88>
   c2c6c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2c6e:	4620      	mov	r0, r4
   c2c70:	f001 f98c 	bl	c3f8c <_Bfree>
   c2c74:	9905      	ldr	r1, [sp, #20]
   c2c76:	4620      	mov	r0, r4
   c2c78:	f001 f988 	bl	c3f8c <_Bfree>
   c2c7c:	4631      	mov	r1, r6
   c2c7e:	4620      	mov	r0, r4
   c2c80:	f001 f984 	bl	c3f8c <_Bfree>
   c2c84:	9907      	ldr	r1, [sp, #28]
   c2c86:	4620      	mov	r0, r4
   c2c88:	f001 f980 	bl	c3f8c <_Bfree>
   c2c8c:	4629      	mov	r1, r5
   c2c8e:	4620      	mov	r0, r4
   c2c90:	f001 f97c 	bl	c3f8c <_Bfree>
   c2c94:	e5dc      	b.n	c2850 <_strtod_l+0x88>
   c2c96:	4b36      	ldr	r3, [pc, #216]	; (c2d70 <_strtod_l+0x5a8>)
   c2c98:	9304      	str	r3, [sp, #16]
   c2c9a:	2300      	movs	r3, #0
   c2c9c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c2ca0:	4650      	mov	r0, sl
   c2ca2:	4659      	mov	r1, fp
   c2ca4:	4699      	mov	r9, r3
   c2ca6:	f1b8 0f01 	cmp.w	r8, #1
   c2caa:	dc21      	bgt.n	c2cf0 <_strtod_l+0x528>
   c2cac:	b10b      	cbz	r3, c2cb2 <_strtod_l+0x4ea>
   c2cae:	4682      	mov	sl, r0
   c2cb0:	468b      	mov	fp, r1
   c2cb2:	4b2f      	ldr	r3, [pc, #188]	; (c2d70 <_strtod_l+0x5a8>)
   c2cb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c2cb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c2cbc:	4652      	mov	r2, sl
   c2cbe:	465b      	mov	r3, fp
   c2cc0:	e9d9 0100 	ldrd	r0, r1, [r9]
   c2cc4:	f7ff f876 	bl	c1db4 <__aeabi_dmul>
   c2cc8:	4b2a      	ldr	r3, [pc, #168]	; (c2d74 <_strtod_l+0x5ac>)
   c2cca:	460a      	mov	r2, r1
   c2ccc:	400b      	ands	r3, r1
   c2cce:	492a      	ldr	r1, [pc, #168]	; (c2d78 <_strtod_l+0x5b0>)
   c2cd0:	428b      	cmp	r3, r1
   c2cd2:	4682      	mov	sl, r0
   c2cd4:	d8bc      	bhi.n	c2c50 <_strtod_l+0x488>
   c2cd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c2cda:	428b      	cmp	r3, r1
   c2cdc:	bf86      	itte	hi
   c2cde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c2d7c <_strtod_l+0x5b4>
   c2ce2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c2ce6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c2cea:	2300      	movs	r3, #0
   c2cec:	9304      	str	r3, [sp, #16]
   c2cee:	e084      	b.n	c2dfa <_strtod_l+0x632>
   c2cf0:	f018 0f01 	tst.w	r8, #1
   c2cf4:	d005      	beq.n	c2d02 <_strtod_l+0x53a>
   c2cf6:	9b04      	ldr	r3, [sp, #16]
   c2cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2cfc:	f7ff f85a 	bl	c1db4 <__aeabi_dmul>
   c2d00:	2301      	movs	r3, #1
   c2d02:	9a04      	ldr	r2, [sp, #16]
   c2d04:	3208      	adds	r2, #8
   c2d06:	f109 0901 	add.w	r9, r9, #1
   c2d0a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c2d0e:	9204      	str	r2, [sp, #16]
   c2d10:	e7c9      	b.n	c2ca6 <_strtod_l+0x4de>
   c2d12:	d0ea      	beq.n	c2cea <_strtod_l+0x522>
   c2d14:	f1c8 0800 	rsb	r8, r8, #0
   c2d18:	f018 020f 	ands.w	r2, r8, #15
   c2d1c:	d00a      	beq.n	c2d34 <_strtod_l+0x56c>
   c2d1e:	4b13      	ldr	r3, [pc, #76]	; (c2d6c <_strtod_l+0x5a4>)
   c2d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c2d24:	4650      	mov	r0, sl
   c2d26:	4659      	mov	r1, fp
   c2d28:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d2c:	f7ff f96c 	bl	c2008 <__aeabi_ddiv>
   c2d30:	4682      	mov	sl, r0
   c2d32:	468b      	mov	fp, r1
   c2d34:	ea5f 1828 	movs.w	r8, r8, asr #4
   c2d38:	d0d7      	beq.n	c2cea <_strtod_l+0x522>
   c2d3a:	f1b8 0f1f 	cmp.w	r8, #31
   c2d3e:	dd1f      	ble.n	c2d80 <_strtod_l+0x5b8>
   c2d40:	2500      	movs	r5, #0
   c2d42:	462e      	mov	r6, r5
   c2d44:	9507      	str	r5, [sp, #28]
   c2d46:	9505      	str	r5, [sp, #20]
   c2d48:	2322      	movs	r3, #34	; 0x22
   c2d4a:	f04f 0a00 	mov.w	sl, #0
   c2d4e:	f04f 0b00 	mov.w	fp, #0
   c2d52:	6023      	str	r3, [r4, #0]
   c2d54:	e786      	b.n	c2c64 <_strtod_l+0x49c>
   c2d56:	bf00      	nop
   c2d58:	000c68fd 	.word	0x000c68fd
   c2d5c:	000c6b14 	.word	0x000c6b14
   c2d60:	000c6901 	.word	0x000c6901
   c2d64:	000c6afa 	.word	0x000c6afa
   c2d68:	000c6838 	.word	0x000c6838
   c2d6c:	000c6d60 	.word	0x000c6d60
   c2d70:	000c6d38 	.word	0x000c6d38
   c2d74:	7ff00000 	.word	0x7ff00000
   c2d78:	7ca00000 	.word	0x7ca00000
   c2d7c:	7fefffff 	.word	0x7fefffff
   c2d80:	f018 0310 	ands.w	r3, r8, #16
   c2d84:	bf18      	it	ne
   c2d86:	236a      	movne	r3, #106	; 0x6a
   c2d88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c3138 <_strtod_l+0x970>
   c2d8c:	9304      	str	r3, [sp, #16]
   c2d8e:	4650      	mov	r0, sl
   c2d90:	4659      	mov	r1, fp
   c2d92:	2300      	movs	r3, #0
   c2d94:	f018 0f01 	tst.w	r8, #1
   c2d98:	d004      	beq.n	c2da4 <_strtod_l+0x5dc>
   c2d9a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c2d9e:	f7ff f809 	bl	c1db4 <__aeabi_dmul>
   c2da2:	2301      	movs	r3, #1
   c2da4:	ea5f 0868 	movs.w	r8, r8, asr #1
   c2da8:	f109 0908 	add.w	r9, r9, #8
   c2dac:	d1f2      	bne.n	c2d94 <_strtod_l+0x5cc>
   c2dae:	b10b      	cbz	r3, c2db4 <_strtod_l+0x5ec>
   c2db0:	4682      	mov	sl, r0
   c2db2:	468b      	mov	fp, r1
   c2db4:	9b04      	ldr	r3, [sp, #16]
   c2db6:	b1c3      	cbz	r3, c2dea <_strtod_l+0x622>
   c2db8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c2dbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c2dc0:	2b00      	cmp	r3, #0
   c2dc2:	4659      	mov	r1, fp
   c2dc4:	dd11      	ble.n	c2dea <_strtod_l+0x622>
   c2dc6:	2b1f      	cmp	r3, #31
   c2dc8:	f340 8124 	ble.w	c3014 <_strtod_l+0x84c>
   c2dcc:	2b34      	cmp	r3, #52	; 0x34
   c2dce:	bfde      	ittt	le
   c2dd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c2dd4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c2dd8:	fa03 f202 	lslle.w	r2, r3, r2
   c2ddc:	f04f 0a00 	mov.w	sl, #0
   c2de0:	bfcc      	ite	gt
   c2de2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c2de6:	ea02 0b01 	andle.w	fp, r2, r1
   c2dea:	2200      	movs	r2, #0
   c2dec:	2300      	movs	r3, #0
   c2dee:	4650      	mov	r0, sl
   c2df0:	4659      	mov	r1, fp
   c2df2:	f7ff fa47 	bl	c2284 <__aeabi_dcmpeq>
   c2df6:	2800      	cmp	r0, #0
   c2df8:	d1a2      	bne.n	c2d40 <_strtod_l+0x578>
   c2dfa:	9b07      	ldr	r3, [sp, #28]
   c2dfc:	9300      	str	r3, [sp, #0]
   c2dfe:	9908      	ldr	r1, [sp, #32]
   c2e00:	462b      	mov	r3, r5
   c2e02:	463a      	mov	r2, r7
   c2e04:	4620      	mov	r0, r4
   c2e06:	f001 f929 	bl	c405c <__s2b>
   c2e0a:	9007      	str	r0, [sp, #28]
   c2e0c:	2800      	cmp	r0, #0
   c2e0e:	f43f af1f 	beq.w	c2c50 <_strtod_l+0x488>
   c2e12:	9b05      	ldr	r3, [sp, #20]
   c2e14:	1b9e      	subs	r6, r3, r6
   c2e16:	9b06      	ldr	r3, [sp, #24]
   c2e18:	2b00      	cmp	r3, #0
   c2e1a:	bfb4      	ite	lt
   c2e1c:	4633      	movlt	r3, r6
   c2e1e:	2300      	movge	r3, #0
   c2e20:	930c      	str	r3, [sp, #48]	; 0x30
   c2e22:	9b06      	ldr	r3, [sp, #24]
   c2e24:	2500      	movs	r5, #0
   c2e26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2e2a:	9312      	str	r3, [sp, #72]	; 0x48
   c2e2c:	462e      	mov	r6, r5
   c2e2e:	9b07      	ldr	r3, [sp, #28]
   c2e30:	4620      	mov	r0, r4
   c2e32:	6859      	ldr	r1, [r3, #4]
   c2e34:	f001 f86a 	bl	c3f0c <_Balloc>
   c2e38:	9005      	str	r0, [sp, #20]
   c2e3a:	2800      	cmp	r0, #0
   c2e3c:	f43f af0c 	beq.w	c2c58 <_strtod_l+0x490>
   c2e40:	9b07      	ldr	r3, [sp, #28]
   c2e42:	691a      	ldr	r2, [r3, #16]
   c2e44:	3202      	adds	r2, #2
   c2e46:	f103 010c 	add.w	r1, r3, #12
   c2e4a:	0092      	lsls	r2, r2, #2
   c2e4c:	300c      	adds	r0, #12
   c2e4e:	f7ff fb69 	bl	c2524 <memcpy>
   c2e52:	ec4b ab10 	vmov	d0, sl, fp
   c2e56:	aa1a      	add	r2, sp, #104	; 0x68
   c2e58:	a919      	add	r1, sp, #100	; 0x64
   c2e5a:	4620      	mov	r0, r4
   c2e5c:	f001 fc44 	bl	c46e8 <__d2b>
   c2e60:	ec4b ab18 	vmov	d8, sl, fp
   c2e64:	9018      	str	r0, [sp, #96]	; 0x60
   c2e66:	2800      	cmp	r0, #0
   c2e68:	f43f aef6 	beq.w	c2c58 <_strtod_l+0x490>
   c2e6c:	2101      	movs	r1, #1
   c2e6e:	4620      	mov	r0, r4
   c2e70:	f001 f98e 	bl	c4190 <__i2b>
   c2e74:	4606      	mov	r6, r0
   c2e76:	2800      	cmp	r0, #0
   c2e78:	f43f aeee 	beq.w	c2c58 <_strtod_l+0x490>
   c2e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2e7e:	9904      	ldr	r1, [sp, #16]
   c2e80:	2b00      	cmp	r3, #0
   c2e82:	bfab      	itete	ge
   c2e84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c2e86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c2e88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c2e8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c2e8e:	bfac      	ite	ge
   c2e90:	eb03 0902 	addge.w	r9, r3, r2
   c2e94:	1ad7      	sublt	r7, r2, r3
   c2e96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c2e98:	eba3 0801 	sub.w	r8, r3, r1
   c2e9c:	4490      	add	r8, r2
   c2e9e:	4ba1      	ldr	r3, [pc, #644]	; (c3124 <_strtod_l+0x95c>)
   c2ea0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c2ea4:	4598      	cmp	r8, r3
   c2ea6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c2eaa:	f280 80c7 	bge.w	c303c <_strtod_l+0x874>
   c2eae:	eba3 0308 	sub.w	r3, r3, r8
   c2eb2:	2b1f      	cmp	r3, #31
   c2eb4:	eba2 0203 	sub.w	r2, r2, r3
   c2eb8:	f04f 0101 	mov.w	r1, #1
   c2ebc:	f300 80b1 	bgt.w	c3022 <_strtod_l+0x85a>
   c2ec0:	fa01 f303 	lsl.w	r3, r1, r3
   c2ec4:	930d      	str	r3, [sp, #52]	; 0x34
   c2ec6:	2300      	movs	r3, #0
   c2ec8:	9308      	str	r3, [sp, #32]
   c2eca:	eb09 0802 	add.w	r8, r9, r2
   c2ece:	9b04      	ldr	r3, [sp, #16]
   c2ed0:	45c1      	cmp	r9, r8
   c2ed2:	4417      	add	r7, r2
   c2ed4:	441f      	add	r7, r3
   c2ed6:	464b      	mov	r3, r9
   c2ed8:	bfa8      	it	ge
   c2eda:	4643      	movge	r3, r8
   c2edc:	42bb      	cmp	r3, r7
   c2ede:	bfa8      	it	ge
   c2ee0:	463b      	movge	r3, r7
   c2ee2:	2b00      	cmp	r3, #0
   c2ee4:	bfc2      	ittt	gt
   c2ee6:	eba8 0803 	subgt.w	r8, r8, r3
   c2eea:	1aff      	subgt	r7, r7, r3
   c2eec:	eba9 0903 	subgt.w	r9, r9, r3
   c2ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2ef2:	2b00      	cmp	r3, #0
   c2ef4:	dd17      	ble.n	c2f26 <_strtod_l+0x75e>
   c2ef6:	4631      	mov	r1, r6
   c2ef8:	461a      	mov	r2, r3
   c2efa:	4620      	mov	r0, r4
   c2efc:	f001 fa08 	bl	c4310 <__pow5mult>
   c2f00:	4606      	mov	r6, r0
   c2f02:	2800      	cmp	r0, #0
   c2f04:	f43f aea8 	beq.w	c2c58 <_strtod_l+0x490>
   c2f08:	4601      	mov	r1, r0
   c2f0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c2f0c:	4620      	mov	r0, r4
   c2f0e:	f001 f955 	bl	c41bc <__multiply>
   c2f12:	900b      	str	r0, [sp, #44]	; 0x2c
   c2f14:	2800      	cmp	r0, #0
   c2f16:	f43f ae9f 	beq.w	c2c58 <_strtod_l+0x490>
   c2f1a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2f1c:	4620      	mov	r0, r4
   c2f1e:	f001 f835 	bl	c3f8c <_Bfree>
   c2f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2f24:	9318      	str	r3, [sp, #96]	; 0x60
   c2f26:	f1b8 0f00 	cmp.w	r8, #0
   c2f2a:	f300 808c 	bgt.w	c3046 <_strtod_l+0x87e>
   c2f2e:	9b06      	ldr	r3, [sp, #24]
   c2f30:	2b00      	cmp	r3, #0
   c2f32:	dd08      	ble.n	c2f46 <_strtod_l+0x77e>
   c2f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c2f36:	9905      	ldr	r1, [sp, #20]
   c2f38:	4620      	mov	r0, r4
   c2f3a:	f001 f9e9 	bl	c4310 <__pow5mult>
   c2f3e:	9005      	str	r0, [sp, #20]
   c2f40:	2800      	cmp	r0, #0
   c2f42:	f43f ae89 	beq.w	c2c58 <_strtod_l+0x490>
   c2f46:	2f00      	cmp	r7, #0
   c2f48:	dd08      	ble.n	c2f5c <_strtod_l+0x794>
   c2f4a:	9905      	ldr	r1, [sp, #20]
   c2f4c:	463a      	mov	r2, r7
   c2f4e:	4620      	mov	r0, r4
   c2f50:	f001 fa38 	bl	c43c4 <__lshift>
   c2f54:	9005      	str	r0, [sp, #20]
   c2f56:	2800      	cmp	r0, #0
   c2f58:	f43f ae7e 	beq.w	c2c58 <_strtod_l+0x490>
   c2f5c:	f1b9 0f00 	cmp.w	r9, #0
   c2f60:	dd08      	ble.n	c2f74 <_strtod_l+0x7ac>
   c2f62:	4631      	mov	r1, r6
   c2f64:	464a      	mov	r2, r9
   c2f66:	4620      	mov	r0, r4
   c2f68:	f001 fa2c 	bl	c43c4 <__lshift>
   c2f6c:	4606      	mov	r6, r0
   c2f6e:	2800      	cmp	r0, #0
   c2f70:	f43f ae72 	beq.w	c2c58 <_strtod_l+0x490>
   c2f74:	9a05      	ldr	r2, [sp, #20]
   c2f76:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2f78:	4620      	mov	r0, r4
   c2f7a:	f001 faaf 	bl	c44dc <__mdiff>
   c2f7e:	4605      	mov	r5, r0
   c2f80:	2800      	cmp	r0, #0
   c2f82:	f43f ae69 	beq.w	c2c58 <_strtod_l+0x490>
   c2f86:	68c3      	ldr	r3, [r0, #12]
   c2f88:	930b      	str	r3, [sp, #44]	; 0x2c
   c2f8a:	2300      	movs	r3, #0
   c2f8c:	60c3      	str	r3, [r0, #12]
   c2f8e:	4631      	mov	r1, r6
   c2f90:	f001 fa88 	bl	c44a4 <__mcmp>
   c2f94:	2800      	cmp	r0, #0
   c2f96:	da60      	bge.n	c305a <_strtod_l+0x892>
   c2f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2f9a:	ea53 030a 	orrs.w	r3, r3, sl
   c2f9e:	f040 8082 	bne.w	c30a6 <_strtod_l+0x8de>
   c2fa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2fa6:	2b00      	cmp	r3, #0
   c2fa8:	d17d      	bne.n	c30a6 <_strtod_l+0x8de>
   c2faa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2fae:	0d1b      	lsrs	r3, r3, #20
   c2fb0:	051b      	lsls	r3, r3, #20
   c2fb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c2fb6:	d976      	bls.n	c30a6 <_strtod_l+0x8de>
   c2fb8:	696b      	ldr	r3, [r5, #20]
   c2fba:	b913      	cbnz	r3, c2fc2 <_strtod_l+0x7fa>
   c2fbc:	692b      	ldr	r3, [r5, #16]
   c2fbe:	2b01      	cmp	r3, #1
   c2fc0:	dd71      	ble.n	c30a6 <_strtod_l+0x8de>
   c2fc2:	4629      	mov	r1, r5
   c2fc4:	2201      	movs	r2, #1
   c2fc6:	4620      	mov	r0, r4
   c2fc8:	f001 f9fc 	bl	c43c4 <__lshift>
   c2fcc:	4631      	mov	r1, r6
   c2fce:	4605      	mov	r5, r0
   c2fd0:	f001 fa68 	bl	c44a4 <__mcmp>
   c2fd4:	2800      	cmp	r0, #0
   c2fd6:	dd66      	ble.n	c30a6 <_strtod_l+0x8de>
   c2fd8:	9904      	ldr	r1, [sp, #16]
   c2fda:	4a53      	ldr	r2, [pc, #332]	; (c3128 <_strtod_l+0x960>)
   c2fdc:	465b      	mov	r3, fp
   c2fde:	2900      	cmp	r1, #0
   c2fe0:	f000 8081 	beq.w	c30e6 <_strtod_l+0x91e>
   c2fe4:	ea02 010b 	and.w	r1, r2, fp
   c2fe8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c2fec:	dc7b      	bgt.n	c30e6 <_strtod_l+0x91e>
   c2fee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c2ff2:	f77f aea9 	ble.w	c2d48 <_strtod_l+0x580>
   c2ff6:	4b4d      	ldr	r3, [pc, #308]	; (c312c <_strtod_l+0x964>)
   c2ff8:	4650      	mov	r0, sl
   c2ffa:	4659      	mov	r1, fp
   c2ffc:	2200      	movs	r2, #0
   c2ffe:	f7fe fed9 	bl	c1db4 <__aeabi_dmul>
   c3002:	460b      	mov	r3, r1
   c3004:	4303      	orrs	r3, r0
   c3006:	bf08      	it	eq
   c3008:	2322      	moveq	r3, #34	; 0x22
   c300a:	4682      	mov	sl, r0
   c300c:	468b      	mov	fp, r1
   c300e:	bf08      	it	eq
   c3010:	6023      	streq	r3, [r4, #0]
   c3012:	e62b      	b.n	c2c6c <_strtod_l+0x4a4>
   c3014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3018:	fa02 f303 	lsl.w	r3, r2, r3
   c301c:	ea03 0a0a 	and.w	sl, r3, sl
   c3020:	e6e3      	b.n	c2dea <_strtod_l+0x622>
   c3022:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c3026:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c302a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c302e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c3032:	fa01 f308 	lsl.w	r3, r1, r8
   c3036:	9308      	str	r3, [sp, #32]
   c3038:	910d      	str	r1, [sp, #52]	; 0x34
   c303a:	e746      	b.n	c2eca <_strtod_l+0x702>
   c303c:	2300      	movs	r3, #0
   c303e:	9308      	str	r3, [sp, #32]
   c3040:	2301      	movs	r3, #1
   c3042:	930d      	str	r3, [sp, #52]	; 0x34
   c3044:	e741      	b.n	c2eca <_strtod_l+0x702>
   c3046:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3048:	4642      	mov	r2, r8
   c304a:	4620      	mov	r0, r4
   c304c:	f001 f9ba 	bl	c43c4 <__lshift>
   c3050:	9018      	str	r0, [sp, #96]	; 0x60
   c3052:	2800      	cmp	r0, #0
   c3054:	f47f af6b 	bne.w	c2f2e <_strtod_l+0x766>
   c3058:	e5fe      	b.n	c2c58 <_strtod_l+0x490>
   c305a:	465f      	mov	r7, fp
   c305c:	d16e      	bne.n	c313c <_strtod_l+0x974>
   c305e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c3060:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3064:	b342      	cbz	r2, c30b8 <_strtod_l+0x8f0>
   c3066:	4a32      	ldr	r2, [pc, #200]	; (c3130 <_strtod_l+0x968>)
   c3068:	4293      	cmp	r3, r2
   c306a:	d128      	bne.n	c30be <_strtod_l+0x8f6>
   c306c:	9b04      	ldr	r3, [sp, #16]
   c306e:	4651      	mov	r1, sl
   c3070:	b1eb      	cbz	r3, c30ae <_strtod_l+0x8e6>
   c3072:	4b2d      	ldr	r3, [pc, #180]	; (c3128 <_strtod_l+0x960>)
   c3074:	403b      	ands	r3, r7
   c3076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c307a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c307e:	d819      	bhi.n	c30b4 <_strtod_l+0x8ec>
   c3080:	0d1b      	lsrs	r3, r3, #20
   c3082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3086:	fa02 f303 	lsl.w	r3, r2, r3
   c308a:	4299      	cmp	r1, r3
   c308c:	d117      	bne.n	c30be <_strtod_l+0x8f6>
   c308e:	4b29      	ldr	r3, [pc, #164]	; (c3134 <_strtod_l+0x96c>)
   c3090:	429f      	cmp	r7, r3
   c3092:	d102      	bne.n	c309a <_strtod_l+0x8d2>
   c3094:	3101      	adds	r1, #1
   c3096:	f43f addf 	beq.w	c2c58 <_strtod_l+0x490>
   c309a:	4b23      	ldr	r3, [pc, #140]	; (c3128 <_strtod_l+0x960>)
   c309c:	403b      	ands	r3, r7
   c309e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c30a2:	f04f 0a00 	mov.w	sl, #0
   c30a6:	9b04      	ldr	r3, [sp, #16]
   c30a8:	2b00      	cmp	r3, #0
   c30aa:	d1a4      	bne.n	c2ff6 <_strtod_l+0x82e>
   c30ac:	e5de      	b.n	c2c6c <_strtod_l+0x4a4>
   c30ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c30b2:	e7ea      	b.n	c308a <_strtod_l+0x8c2>
   c30b4:	4613      	mov	r3, r2
   c30b6:	e7e8      	b.n	c308a <_strtod_l+0x8c2>
   c30b8:	ea53 030a 	orrs.w	r3, r3, sl
   c30bc:	d08c      	beq.n	c2fd8 <_strtod_l+0x810>
   c30be:	9b08      	ldr	r3, [sp, #32]
   c30c0:	b1db      	cbz	r3, c30fa <_strtod_l+0x932>
   c30c2:	423b      	tst	r3, r7
   c30c4:	d0ef      	beq.n	c30a6 <_strtod_l+0x8de>
   c30c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c30c8:	9a04      	ldr	r2, [sp, #16]
   c30ca:	4650      	mov	r0, sl
   c30cc:	4659      	mov	r1, fp
   c30ce:	b1c3      	cbz	r3, c3102 <_strtod_l+0x93a>
   c30d0:	f7ff fb5e 	bl	c2790 <sulp>
   c30d4:	4602      	mov	r2, r0
   c30d6:	460b      	mov	r3, r1
   c30d8:	ec51 0b18 	vmov	r0, r1, d8
   c30dc:	f7fe fcb4 	bl	c1a48 <__adddf3>
   c30e0:	4682      	mov	sl, r0
   c30e2:	468b      	mov	fp, r1
   c30e4:	e7df      	b.n	c30a6 <_strtod_l+0x8de>
   c30e6:	4013      	ands	r3, r2
   c30e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c30ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c30f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c30f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c30f8:	e7d5      	b.n	c30a6 <_strtod_l+0x8de>
   c30fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c30fc:	ea13 0f0a 	tst.w	r3, sl
   c3100:	e7e0      	b.n	c30c4 <_strtod_l+0x8fc>
   c3102:	f7ff fb45 	bl	c2790 <sulp>
   c3106:	4602      	mov	r2, r0
   c3108:	460b      	mov	r3, r1
   c310a:	ec51 0b18 	vmov	r0, r1, d8
   c310e:	f7fe fc99 	bl	c1a44 <__aeabi_dsub>
   c3112:	2200      	movs	r2, #0
   c3114:	2300      	movs	r3, #0
   c3116:	4682      	mov	sl, r0
   c3118:	468b      	mov	fp, r1
   c311a:	f7ff f8b3 	bl	c2284 <__aeabi_dcmpeq>
   c311e:	2800      	cmp	r0, #0
   c3120:	d0c1      	beq.n	c30a6 <_strtod_l+0x8de>
   c3122:	e611      	b.n	c2d48 <_strtod_l+0x580>
   c3124:	fffffc02 	.word	0xfffffc02
   c3128:	7ff00000 	.word	0x7ff00000
   c312c:	39500000 	.word	0x39500000
   c3130:	000fffff 	.word	0x000fffff
   c3134:	7fefffff 	.word	0x7fefffff
   c3138:	000c6b28 	.word	0x000c6b28
   c313c:	4631      	mov	r1, r6
   c313e:	4628      	mov	r0, r5
   c3140:	f001 fb2e 	bl	c47a0 <__ratio>
   c3144:	ec59 8b10 	vmov	r8, r9, d0
   c3148:	ee10 0a10 	vmov	r0, s0
   c314c:	2200      	movs	r2, #0
   c314e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3152:	4649      	mov	r1, r9
   c3154:	f7ff f8aa 	bl	c22ac <__aeabi_dcmple>
   c3158:	2800      	cmp	r0, #0
   c315a:	d07a      	beq.n	c3252 <_strtod_l+0xa8a>
   c315c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c315e:	2b00      	cmp	r3, #0
   c3160:	d04a      	beq.n	c31f8 <_strtod_l+0xa30>
   c3162:	4b95      	ldr	r3, [pc, #596]	; (c33b8 <_strtod_l+0xbf0>)
   c3164:	2200      	movs	r2, #0
   c3166:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c316a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c33b8 <_strtod_l+0xbf0>
   c316e:	f04f 0800 	mov.w	r8, #0
   c3172:	4b92      	ldr	r3, [pc, #584]	; (c33bc <_strtod_l+0xbf4>)
   c3174:	403b      	ands	r3, r7
   c3176:	930d      	str	r3, [sp, #52]	; 0x34
   c3178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c317a:	4b91      	ldr	r3, [pc, #580]	; (c33c0 <_strtod_l+0xbf8>)
   c317c:	429a      	cmp	r2, r3
   c317e:	f040 80b0 	bne.w	c32e2 <_strtod_l+0xb1a>
   c3182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3186:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c318a:	ec4b ab10 	vmov	d0, sl, fp
   c318e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c3192:	f001 fa2d 	bl	c45f0 <__ulp>
   c3196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c319a:	ec53 2b10 	vmov	r2, r3, d0
   c319e:	f7fe fe09 	bl	c1db4 <__aeabi_dmul>
   c31a2:	4652      	mov	r2, sl
   c31a4:	465b      	mov	r3, fp
   c31a6:	f7fe fc4f 	bl	c1a48 <__adddf3>
   c31aa:	460b      	mov	r3, r1
   c31ac:	4983      	ldr	r1, [pc, #524]	; (c33bc <_strtod_l+0xbf4>)
   c31ae:	4a85      	ldr	r2, [pc, #532]	; (c33c4 <_strtod_l+0xbfc>)
   c31b0:	4019      	ands	r1, r3
   c31b2:	4291      	cmp	r1, r2
   c31b4:	4682      	mov	sl, r0
   c31b6:	d960      	bls.n	c327a <_strtod_l+0xab2>
   c31b8:	ee18 3a90 	vmov	r3, s17
   c31bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c31c0:	4293      	cmp	r3, r2
   c31c2:	d104      	bne.n	c31ce <_strtod_l+0xa06>
   c31c4:	ee18 3a10 	vmov	r3, s16
   c31c8:	3301      	adds	r3, #1
   c31ca:	f43f ad45 	beq.w	c2c58 <_strtod_l+0x490>
   c31ce:	f8df b200 	ldr.w	fp, [pc, #512]	; c33d0 <_strtod_l+0xc08>
   c31d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c31d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c31d8:	4620      	mov	r0, r4
   c31da:	f000 fed7 	bl	c3f8c <_Bfree>
   c31de:	9905      	ldr	r1, [sp, #20]
   c31e0:	4620      	mov	r0, r4
   c31e2:	f000 fed3 	bl	c3f8c <_Bfree>
   c31e6:	4631      	mov	r1, r6
   c31e8:	4620      	mov	r0, r4
   c31ea:	f000 fecf 	bl	c3f8c <_Bfree>
   c31ee:	4629      	mov	r1, r5
   c31f0:	4620      	mov	r0, r4
   c31f2:	f000 fecb 	bl	c3f8c <_Bfree>
   c31f6:	e61a      	b.n	c2e2e <_strtod_l+0x666>
   c31f8:	f1ba 0f00 	cmp.w	sl, #0
   c31fc:	d11b      	bne.n	c3236 <_strtod_l+0xa6e>
   c31fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3202:	b9f3      	cbnz	r3, c3242 <_strtod_l+0xa7a>
   c3204:	4b6c      	ldr	r3, [pc, #432]	; (c33b8 <_strtod_l+0xbf0>)
   c3206:	2200      	movs	r2, #0
   c3208:	4640      	mov	r0, r8
   c320a:	4649      	mov	r1, r9
   c320c:	f7ff f844 	bl	c2298 <__aeabi_dcmplt>
   c3210:	b9d0      	cbnz	r0, c3248 <_strtod_l+0xa80>
   c3212:	4640      	mov	r0, r8
   c3214:	4649      	mov	r1, r9
   c3216:	4b6c      	ldr	r3, [pc, #432]	; (c33c8 <_strtod_l+0xc00>)
   c3218:	2200      	movs	r2, #0
   c321a:	f7fe fdcb 	bl	c1db4 <__aeabi_dmul>
   c321e:	4680      	mov	r8, r0
   c3220:	4689      	mov	r9, r1
   c3222:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c3226:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c322a:	9315      	str	r3, [sp, #84]	; 0x54
   c322c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c3230:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c3234:	e79d      	b.n	c3172 <_strtod_l+0x9aa>
   c3236:	f1ba 0f01 	cmp.w	sl, #1
   c323a:	d102      	bne.n	c3242 <_strtod_l+0xa7a>
   c323c:	2f00      	cmp	r7, #0
   c323e:	f43f ad83 	beq.w	c2d48 <_strtod_l+0x580>
   c3242:	4b62      	ldr	r3, [pc, #392]	; (c33cc <_strtod_l+0xc04>)
   c3244:	2200      	movs	r2, #0
   c3246:	e78e      	b.n	c3166 <_strtod_l+0x99e>
   c3248:	f8df 917c 	ldr.w	r9, [pc, #380]	; c33c8 <_strtod_l+0xc00>
   c324c:	f04f 0800 	mov.w	r8, #0
   c3250:	e7e7      	b.n	c3222 <_strtod_l+0xa5a>
   c3252:	4b5d      	ldr	r3, [pc, #372]	; (c33c8 <_strtod_l+0xc00>)
   c3254:	4640      	mov	r0, r8
   c3256:	4649      	mov	r1, r9
   c3258:	2200      	movs	r2, #0
   c325a:	f7fe fdab 	bl	c1db4 <__aeabi_dmul>
   c325e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3260:	4680      	mov	r8, r0
   c3262:	4689      	mov	r9, r1
   c3264:	b933      	cbnz	r3, c3274 <_strtod_l+0xaac>
   c3266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c326a:	900e      	str	r0, [sp, #56]	; 0x38
   c326c:	930f      	str	r3, [sp, #60]	; 0x3c
   c326e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c3272:	e7dd      	b.n	c3230 <_strtod_l+0xa68>
   c3274:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c3278:	e7f9      	b.n	c326e <_strtod_l+0xaa6>
   c327a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c327e:	9b04      	ldr	r3, [sp, #16]
   c3280:	2b00      	cmp	r3, #0
   c3282:	d1a8      	bne.n	c31d6 <_strtod_l+0xa0e>
   c3284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c3288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c328a:	0d1b      	lsrs	r3, r3, #20
   c328c:	051b      	lsls	r3, r3, #20
   c328e:	429a      	cmp	r2, r3
   c3290:	d1a1      	bne.n	c31d6 <_strtod_l+0xa0e>
   c3292:	4640      	mov	r0, r8
   c3294:	4649      	mov	r1, r9
   c3296:	f001 fb33 	bl	c4900 <__aeabi_d2lz>
   c329a:	f7fe fd5d 	bl	c1d58 <__aeabi_l2d>
   c329e:	4602      	mov	r2, r0
   c32a0:	460b      	mov	r3, r1
   c32a2:	4640      	mov	r0, r8
   c32a4:	4649      	mov	r1, r9
   c32a6:	f7fe fbcd 	bl	c1a44 <__aeabi_dsub>
   c32aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c32ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c32b0:	ea43 030a 	orr.w	r3, r3, sl
   c32b4:	4313      	orrs	r3, r2
   c32b6:	4680      	mov	r8, r0
   c32b8:	4689      	mov	r9, r1
   c32ba:	d055      	beq.n	c3368 <_strtod_l+0xba0>
   c32bc:	a336      	add	r3, pc, #216	; (adr r3, c3398 <_strtod_l+0xbd0>)
   c32be:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32c2:	f7fe ffe9 	bl	c2298 <__aeabi_dcmplt>
   c32c6:	2800      	cmp	r0, #0
   c32c8:	f47f acd0 	bne.w	c2c6c <_strtod_l+0x4a4>
   c32cc:	a334      	add	r3, pc, #208	; (adr r3, c33a0 <_strtod_l+0xbd8>)
   c32ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32d2:	4640      	mov	r0, r8
   c32d4:	4649      	mov	r1, r9
   c32d6:	f7fe fffd 	bl	c22d4 <__aeabi_dcmpgt>
   c32da:	2800      	cmp	r0, #0
   c32dc:	f43f af7b 	beq.w	c31d6 <_strtod_l+0xa0e>
   c32e0:	e4c4      	b.n	c2c6c <_strtod_l+0x4a4>
   c32e2:	9b04      	ldr	r3, [sp, #16]
   c32e4:	b333      	cbz	r3, c3334 <_strtod_l+0xb6c>
   c32e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c32e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c32ec:	d822      	bhi.n	c3334 <_strtod_l+0xb6c>
   c32ee:	a32e      	add	r3, pc, #184	; (adr r3, c33a8 <_strtod_l+0xbe0>)
   c32f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32f4:	4640      	mov	r0, r8
   c32f6:	4649      	mov	r1, r9
   c32f8:	f7fe ffd8 	bl	c22ac <__aeabi_dcmple>
   c32fc:	b1a0      	cbz	r0, c3328 <_strtod_l+0xb60>
   c32fe:	4649      	mov	r1, r9
   c3300:	4640      	mov	r0, r8
   c3302:	f7ff f82f 	bl	c2364 <__aeabi_d2uiz>
   c3306:	2801      	cmp	r0, #1
   c3308:	bf38      	it	cc
   c330a:	2001      	movcc	r0, #1
   c330c:	f7fe fcd8 	bl	c1cc0 <__aeabi_ui2d>
   c3310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3312:	4680      	mov	r8, r0
   c3314:	4689      	mov	r9, r1
   c3316:	bb23      	cbnz	r3, c3362 <_strtod_l+0xb9a>
   c3318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c331c:	9010      	str	r0, [sp, #64]	; 0x40
   c331e:	9311      	str	r3, [sp, #68]	; 0x44
   c3320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c3324:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c3328:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c332a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c332c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c3330:	1a9b      	subs	r3, r3, r2
   c3332:	9309      	str	r3, [sp, #36]	; 0x24
   c3334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3338:	eeb0 0a48 	vmov.f32	s0, s16
   c333c:	eef0 0a68 	vmov.f32	s1, s17
   c3340:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c3344:	f001 f954 	bl	c45f0 <__ulp>
   c3348:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c334c:	ec53 2b10 	vmov	r2, r3, d0
   c3350:	f7fe fd30 	bl	c1db4 <__aeabi_dmul>
   c3354:	ec53 2b18 	vmov	r2, r3, d8
   c3358:	f7fe fb76 	bl	c1a48 <__adddf3>
   c335c:	4682      	mov	sl, r0
   c335e:	468b      	mov	fp, r1
   c3360:	e78d      	b.n	c327e <_strtod_l+0xab6>
   c3362:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c3366:	e7db      	b.n	c3320 <_strtod_l+0xb58>
   c3368:	a311      	add	r3, pc, #68	; (adr r3, c33b0 <_strtod_l+0xbe8>)
   c336a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c336e:	f7fe ff93 	bl	c2298 <__aeabi_dcmplt>
   c3372:	e7b2      	b.n	c32da <_strtod_l+0xb12>
   c3374:	2300      	movs	r3, #0
   c3376:	930a      	str	r3, [sp, #40]	; 0x28
   c3378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c337a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c337c:	6013      	str	r3, [r2, #0]
   c337e:	f7ff ba6b 	b.w	c2858 <_strtod_l+0x90>
   c3382:	2a65      	cmp	r2, #101	; 0x65
   c3384:	f43f ab5f 	beq.w	c2a46 <_strtod_l+0x27e>
   c3388:	2a45      	cmp	r2, #69	; 0x45
   c338a:	f43f ab5c 	beq.w	c2a46 <_strtod_l+0x27e>
   c338e:	2301      	movs	r3, #1
   c3390:	f7ff bb94 	b.w	c2abc <_strtod_l+0x2f4>
   c3394:	f3af 8000 	nop.w
   c3398:	94a03595 	.word	0x94a03595
   c339c:	3fdfffff 	.word	0x3fdfffff
   c33a0:	35afe535 	.word	0x35afe535
   c33a4:	3fe00000 	.word	0x3fe00000
   c33a8:	ffc00000 	.word	0xffc00000
   c33ac:	41dfffff 	.word	0x41dfffff
   c33b0:	94a03595 	.word	0x94a03595
   c33b4:	3fcfffff 	.word	0x3fcfffff
   c33b8:	3ff00000 	.word	0x3ff00000
   c33bc:	7ff00000 	.word	0x7ff00000
   c33c0:	7fe00000 	.word	0x7fe00000
   c33c4:	7c9fffff 	.word	0x7c9fffff
   c33c8:	3fe00000 	.word	0x3fe00000
   c33cc:	bff00000 	.word	0xbff00000
   c33d0:	7fefffff 	.word	0x7fefffff

000c33d4 <strtof>:
   c33d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c33d8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c3488 <strtof+0xb4>
   c33dc:	4b26      	ldr	r3, [pc, #152]	; (c3478 <strtof+0xa4>)
   c33de:	460a      	mov	r2, r1
   c33e0:	ed2d 8b02 	vpush	{d8}
   c33e4:	4601      	mov	r1, r0
   c33e6:	f8d8 0000 	ldr.w	r0, [r8]
   c33ea:	f7ff f9ed 	bl	c27c8 <_strtod_l>
   c33ee:	ec55 4b10 	vmov	r4, r5, d0
   c33f2:	ee10 2a10 	vmov	r2, s0
   c33f6:	ee10 0a10 	vmov	r0, s0
   c33fa:	462b      	mov	r3, r5
   c33fc:	4629      	mov	r1, r5
   c33fe:	f7fe ff73 	bl	c22e8 <__aeabi_dcmpun>
   c3402:	b190      	cbz	r0, c342a <strtof+0x56>
   c3404:	2d00      	cmp	r5, #0
   c3406:	481d      	ldr	r0, [pc, #116]	; (c347c <strtof+0xa8>)
   c3408:	da09      	bge.n	c341e <strtof+0x4a>
   c340a:	f001 fa65 	bl	c48d8 <nanf>
   c340e:	eeb1 8a40 	vneg.f32	s16, s0
   c3412:	eeb0 0a48 	vmov.f32	s0, s16
   c3416:	ecbd 8b02 	vpop	{d8}
   c341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c341e:	ecbd 8b02 	vpop	{d8}
   c3422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c3426:	f001 ba57 	b.w	c48d8 <nanf>
   c342a:	4620      	mov	r0, r4
   c342c:	4629      	mov	r1, r5
   c342e:	f7fe ffb9 	bl	c23a4 <__aeabi_d2f>
   c3432:	ee08 0a10 	vmov	s16, r0
   c3436:	eddf 7a12 	vldr	s15, [pc, #72]	; c3480 <strtof+0xac>
   c343a:	eeb0 7ac8 	vabs.f32	s14, s16
   c343e:	eeb4 7a67 	vcmp.f32	s14, s15
   c3442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3446:	dde4      	ble.n	c3412 <strtof+0x3e>
   c3448:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c344c:	4b0d      	ldr	r3, [pc, #52]	; (c3484 <strtof+0xb0>)
   c344e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3452:	4620      	mov	r0, r4
   c3454:	4639      	mov	r1, r7
   c3456:	f7fe ff47 	bl	c22e8 <__aeabi_dcmpun>
   c345a:	b940      	cbnz	r0, c346e <strtof+0x9a>
   c345c:	4b09      	ldr	r3, [pc, #36]	; (c3484 <strtof+0xb0>)
   c345e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3462:	4620      	mov	r0, r4
   c3464:	4639      	mov	r1, r7
   c3466:	f7fe ff21 	bl	c22ac <__aeabi_dcmple>
   c346a:	2800      	cmp	r0, #0
   c346c:	d0d1      	beq.n	c3412 <strtof+0x3e>
   c346e:	f8d8 3000 	ldr.w	r3, [r8]
   c3472:	2222      	movs	r2, #34	; 0x22
   c3474:	601a      	str	r2, [r3, #0]
   c3476:	e7cc      	b.n	c3412 <strtof+0x3e>
   c3478:	2003d6f8 	.word	0x2003d6f8
   c347c:	000c6838 	.word	0x000c6838
   c3480:	7f7fffff 	.word	0x7f7fffff
   c3484:	7fefffff 	.word	0x7fefffff
   c3488:	2003d68c 	.word	0x2003d68c

000c348c <__strtok_r>:
   c348c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c348e:	b908      	cbnz	r0, c3494 <__strtok_r+0x8>
   c3490:	6810      	ldr	r0, [r2, #0]
   c3492:	b188      	cbz	r0, c34b8 <__strtok_r+0x2c>
   c3494:	4604      	mov	r4, r0
   c3496:	4620      	mov	r0, r4
   c3498:	f814 5b01 	ldrb.w	r5, [r4], #1
   c349c:	460f      	mov	r7, r1
   c349e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c34a2:	b91e      	cbnz	r6, c34ac <__strtok_r+0x20>
   c34a4:	b965      	cbnz	r5, c34c0 <__strtok_r+0x34>
   c34a6:	6015      	str	r5, [r2, #0]
   c34a8:	4628      	mov	r0, r5
   c34aa:	e005      	b.n	c34b8 <__strtok_r+0x2c>
   c34ac:	42b5      	cmp	r5, r6
   c34ae:	d1f6      	bne.n	c349e <__strtok_r+0x12>
   c34b0:	2b00      	cmp	r3, #0
   c34b2:	d1f0      	bne.n	c3496 <__strtok_r+0xa>
   c34b4:	6014      	str	r4, [r2, #0]
   c34b6:	7003      	strb	r3, [r0, #0]
   c34b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c34ba:	461c      	mov	r4, r3
   c34bc:	e00c      	b.n	c34d8 <__strtok_r+0x4c>
   c34be:	b915      	cbnz	r5, c34c6 <__strtok_r+0x3a>
   c34c0:	f814 3b01 	ldrb.w	r3, [r4], #1
   c34c4:	460e      	mov	r6, r1
   c34c6:	f816 5b01 	ldrb.w	r5, [r6], #1
   c34ca:	42ab      	cmp	r3, r5
   c34cc:	d1f7      	bne.n	c34be <__strtok_r+0x32>
   c34ce:	2b00      	cmp	r3, #0
   c34d0:	d0f3      	beq.n	c34ba <__strtok_r+0x2e>
   c34d2:	2300      	movs	r3, #0
   c34d4:	f804 3c01 	strb.w	r3, [r4, #-1]
   c34d8:	6014      	str	r4, [r2, #0]
   c34da:	e7ed      	b.n	c34b8 <__strtok_r+0x2c>

000c34dc <strtok_r>:
   c34dc:	2301      	movs	r3, #1
   c34de:	f7ff bfd5 	b.w	c348c <__strtok_r>
	...

000c34e4 <_strtol_l.constprop.0>:
   c34e4:	2b01      	cmp	r3, #1
   c34e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c34ea:	d001      	beq.n	c34f0 <_strtol_l.constprop.0+0xc>
   c34ec:	2b24      	cmp	r3, #36	; 0x24
   c34ee:	d906      	bls.n	c34fe <_strtol_l.constprop.0+0x1a>
   c34f0:	f7fa f820 	bl	bd534 <__errno>
   c34f4:	2316      	movs	r3, #22
   c34f6:	6003      	str	r3, [r0, #0]
   c34f8:	2000      	movs	r0, #0
   c34fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c34fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c35e4 <_strtol_l.constprop.0+0x100>
   c3502:	460d      	mov	r5, r1
   c3504:	462e      	mov	r6, r5
   c3506:	f815 4b01 	ldrb.w	r4, [r5], #1
   c350a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c350e:	f017 0708 	ands.w	r7, r7, #8
   c3512:	d1f7      	bne.n	c3504 <_strtol_l.constprop.0+0x20>
   c3514:	2c2d      	cmp	r4, #45	; 0x2d
   c3516:	d132      	bne.n	c357e <_strtol_l.constprop.0+0x9a>
   c3518:	782c      	ldrb	r4, [r5, #0]
   c351a:	2701      	movs	r7, #1
   c351c:	1cb5      	adds	r5, r6, #2
   c351e:	2b00      	cmp	r3, #0
   c3520:	d05b      	beq.n	c35da <_strtol_l.constprop.0+0xf6>
   c3522:	2b10      	cmp	r3, #16
   c3524:	d109      	bne.n	c353a <_strtol_l.constprop.0+0x56>
   c3526:	2c30      	cmp	r4, #48	; 0x30
   c3528:	d107      	bne.n	c353a <_strtol_l.constprop.0+0x56>
   c352a:	782c      	ldrb	r4, [r5, #0]
   c352c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c3530:	2c58      	cmp	r4, #88	; 0x58
   c3532:	d14d      	bne.n	c35d0 <_strtol_l.constprop.0+0xec>
   c3534:	786c      	ldrb	r4, [r5, #1]
   c3536:	2310      	movs	r3, #16
   c3538:	3502      	adds	r5, #2
   c353a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c353e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c3542:	f04f 0c00 	mov.w	ip, #0
   c3546:	fbb8 f9f3 	udiv	r9, r8, r3
   c354a:	4666      	mov	r6, ip
   c354c:	fb03 8a19 	mls	sl, r3, r9, r8
   c3550:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c3554:	f1be 0f09 	cmp.w	lr, #9
   c3558:	d816      	bhi.n	c3588 <_strtol_l.constprop.0+0xa4>
   c355a:	4674      	mov	r4, lr
   c355c:	42a3      	cmp	r3, r4
   c355e:	dd24      	ble.n	c35aa <_strtol_l.constprop.0+0xc6>
   c3560:	f1bc 0f00 	cmp.w	ip, #0
   c3564:	db1e      	blt.n	c35a4 <_strtol_l.constprop.0+0xc0>
   c3566:	45b1      	cmp	r9, r6
   c3568:	d31c      	bcc.n	c35a4 <_strtol_l.constprop.0+0xc0>
   c356a:	d101      	bne.n	c3570 <_strtol_l.constprop.0+0x8c>
   c356c:	45a2      	cmp	sl, r4
   c356e:	db19      	blt.n	c35a4 <_strtol_l.constprop.0+0xc0>
   c3570:	fb06 4603 	mla	r6, r6, r3, r4
   c3574:	f04f 0c01 	mov.w	ip, #1
   c3578:	f815 4b01 	ldrb.w	r4, [r5], #1
   c357c:	e7e8      	b.n	c3550 <_strtol_l.constprop.0+0x6c>
   c357e:	2c2b      	cmp	r4, #43	; 0x2b
   c3580:	bf04      	itt	eq
   c3582:	782c      	ldrbeq	r4, [r5, #0]
   c3584:	1cb5      	addeq	r5, r6, #2
   c3586:	e7ca      	b.n	c351e <_strtol_l.constprop.0+0x3a>
   c3588:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c358c:	f1be 0f19 	cmp.w	lr, #25
   c3590:	d801      	bhi.n	c3596 <_strtol_l.constprop.0+0xb2>
   c3592:	3c37      	subs	r4, #55	; 0x37
   c3594:	e7e2      	b.n	c355c <_strtol_l.constprop.0+0x78>
   c3596:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c359a:	f1be 0f19 	cmp.w	lr, #25
   c359e:	d804      	bhi.n	c35aa <_strtol_l.constprop.0+0xc6>
   c35a0:	3c57      	subs	r4, #87	; 0x57
   c35a2:	e7db      	b.n	c355c <_strtol_l.constprop.0+0x78>
   c35a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c35a8:	e7e6      	b.n	c3578 <_strtol_l.constprop.0+0x94>
   c35aa:	f1bc 0f00 	cmp.w	ip, #0
   c35ae:	da05      	bge.n	c35bc <_strtol_l.constprop.0+0xd8>
   c35b0:	2322      	movs	r3, #34	; 0x22
   c35b2:	6003      	str	r3, [r0, #0]
   c35b4:	4646      	mov	r6, r8
   c35b6:	b942      	cbnz	r2, c35ca <_strtol_l.constprop.0+0xe6>
   c35b8:	4630      	mov	r0, r6
   c35ba:	e79e      	b.n	c34fa <_strtol_l.constprop.0+0x16>
   c35bc:	b107      	cbz	r7, c35c0 <_strtol_l.constprop.0+0xdc>
   c35be:	4276      	negs	r6, r6
   c35c0:	2a00      	cmp	r2, #0
   c35c2:	d0f9      	beq.n	c35b8 <_strtol_l.constprop.0+0xd4>
   c35c4:	f1bc 0f00 	cmp.w	ip, #0
   c35c8:	d000      	beq.n	c35cc <_strtol_l.constprop.0+0xe8>
   c35ca:	1e69      	subs	r1, r5, #1
   c35cc:	6011      	str	r1, [r2, #0]
   c35ce:	e7f3      	b.n	c35b8 <_strtol_l.constprop.0+0xd4>
   c35d0:	2430      	movs	r4, #48	; 0x30
   c35d2:	2b00      	cmp	r3, #0
   c35d4:	d1b1      	bne.n	c353a <_strtol_l.constprop.0+0x56>
   c35d6:	2308      	movs	r3, #8
   c35d8:	e7af      	b.n	c353a <_strtol_l.constprop.0+0x56>
   c35da:	2c30      	cmp	r4, #48	; 0x30
   c35dc:	d0a5      	beq.n	c352a <_strtol_l.constprop.0+0x46>
   c35de:	230a      	movs	r3, #10
   c35e0:	e7ab      	b.n	c353a <_strtol_l.constprop.0+0x56>
   c35e2:	bf00      	nop
   c35e4:	000c6b51 	.word	0x000c6b51

000c35e8 <strtol>:
   c35e8:	4613      	mov	r3, r2
   c35ea:	460a      	mov	r2, r1
   c35ec:	4601      	mov	r1, r0
   c35ee:	4802      	ldr	r0, [pc, #8]	; (c35f8 <strtol+0x10>)
   c35f0:	6800      	ldr	r0, [r0, #0]
   c35f2:	f7ff bf77 	b.w	c34e4 <_strtol_l.constprop.0>
   c35f6:	bf00      	nop
   c35f8:	2003d68c 	.word	0x2003d68c

000c35fc <close>:
   c35fc:	4b02      	ldr	r3, [pc, #8]	; (c3608 <close+0xc>)
   c35fe:	4601      	mov	r1, r0
   c3600:	6818      	ldr	r0, [r3, #0]
   c3602:	f000 b8c9 	b.w	c3798 <_close_r>
   c3606:	bf00      	nop
   c3608:	2003d68c 	.word	0x2003d68c

000c360c <fstat>:
   c360c:	4b02      	ldr	r3, [pc, #8]	; (c3618 <fstat+0xc>)
   c360e:	460a      	mov	r2, r1
   c3610:	4601      	mov	r1, r0
   c3612:	6818      	ldr	r0, [r3, #0]
   c3614:	f000 b8d0 	b.w	c37b8 <_fstat_r>
   c3618:	2003d68c 	.word	0x2003d68c

000c361c <lseek>:
   c361c:	4613      	mov	r3, r2
   c361e:	460a      	mov	r2, r1
   c3620:	4601      	mov	r1, r0
   c3622:	4802      	ldr	r0, [pc, #8]	; (c362c <lseek+0x10>)
   c3624:	6800      	ldr	r0, [r0, #0]
   c3626:	f000 bc4d 	b.w	c3ec4 <_lseek_r>
   c362a:	bf00      	nop
   c362c:	2003d68c 	.word	0x2003d68c

000c3630 <open>:
   c3630:	b40e      	push	{r1, r2, r3}
   c3632:	b503      	push	{r0, r1, lr}
   c3634:	ab03      	add	r3, sp, #12
   c3636:	4601      	mov	r1, r0
   c3638:	4806      	ldr	r0, [pc, #24]	; (c3654 <open+0x24>)
   c363a:	f853 2b04 	ldr.w	r2, [r3], #4
   c363e:	9301      	str	r3, [sp, #4]
   c3640:	6800      	ldr	r0, [r0, #0]
   c3642:	9b04      	ldr	r3, [sp, #16]
   c3644:	f001 f924 	bl	c4890 <_open_r>
   c3648:	b002      	add	sp, #8
   c364a:	f85d eb04 	ldr.w	lr, [sp], #4
   c364e:	b003      	add	sp, #12
   c3650:	4770      	bx	lr
   c3652:	bf00      	nop
   c3654:	2003d68c 	.word	0x2003d68c

000c3658 <read>:
   c3658:	4613      	mov	r3, r2
   c365a:	460a      	mov	r2, r1
   c365c:	4601      	mov	r1, r0
   c365e:	4802      	ldr	r0, [pc, #8]	; (c3668 <read+0x10>)
   c3660:	6800      	ldr	r0, [r0, #0]
   c3662:	f001 b927 	b.w	c48b4 <_read_r>
   c3666:	bf00      	nop
   c3668:	2003d68c 	.word	0x2003d68c

000c366c <unlink>:
   c366c:	4b02      	ldr	r3, [pc, #8]	; (c3678 <unlink+0xc>)
   c366e:	4601      	mov	r1, r0
   c3670:	6818      	ldr	r0, [r3, #0]
   c3672:	f000 b80d 	b.w	c3690 <_unlink_r>
   c3676:	bf00      	nop
   c3678:	2003d68c 	.word	0x2003d68c

000c367c <write>:
   c367c:	4613      	mov	r3, r2
   c367e:	460a      	mov	r2, r1
   c3680:	4601      	mov	r1, r0
   c3682:	4802      	ldr	r0, [pc, #8]	; (c368c <write+0x10>)
   c3684:	6800      	ldr	r0, [r0, #0]
   c3686:	f000 b813 	b.w	c36b0 <_write_r>
   c368a:	bf00      	nop
   c368c:	2003d68c 	.word	0x2003d68c

000c3690 <_unlink_r>:
   c3690:	b538      	push	{r3, r4, r5, lr}
   c3692:	4d06      	ldr	r5, [pc, #24]	; (c36ac <_unlink_r+0x1c>)
   c3694:	2300      	movs	r3, #0
   c3696:	4604      	mov	r4, r0
   c3698:	4608      	mov	r0, r1
   c369a:	602b      	str	r3, [r5, #0]
   c369c:	f7f9 fcd6 	bl	bd04c <_unlink>
   c36a0:	1c43      	adds	r3, r0, #1
   c36a2:	d102      	bne.n	c36aa <_unlink_r+0x1a>
   c36a4:	682b      	ldr	r3, [r5, #0]
   c36a6:	b103      	cbz	r3, c36aa <_unlink_r+0x1a>
   c36a8:	6023      	str	r3, [r4, #0]
   c36aa:	bd38      	pop	{r3, r4, r5, pc}
   c36ac:	2003e7f0 	.word	0x2003e7f0

000c36b0 <_write_r>:
   c36b0:	b538      	push	{r3, r4, r5, lr}
   c36b2:	4d07      	ldr	r5, [pc, #28]	; (c36d0 <_write_r+0x20>)
   c36b4:	4604      	mov	r4, r0
   c36b6:	4608      	mov	r0, r1
   c36b8:	4611      	mov	r1, r2
   c36ba:	2200      	movs	r2, #0
   c36bc:	602a      	str	r2, [r5, #0]
   c36be:	461a      	mov	r2, r3
   c36c0:	f7f9 fc8c 	bl	bcfdc <_write>
   c36c4:	1c43      	adds	r3, r0, #1
   c36c6:	d102      	bne.n	c36ce <_write_r+0x1e>
   c36c8:	682b      	ldr	r3, [r5, #0]
   c36ca:	b103      	cbz	r3, c36ce <_write_r+0x1e>
   c36cc:	6023      	str	r3, [r4, #0]
   c36ce:	bd38      	pop	{r3, r4, r5, pc}
   c36d0:	2003e7f0 	.word	0x2003e7f0

000c36d4 <__register_exitproc>:
   c36d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c36d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c3794 <__register_exitproc+0xc0>
   c36dc:	4606      	mov	r6, r0
   c36de:	f8d8 0000 	ldr.w	r0, [r8]
   c36e2:	461f      	mov	r7, r3
   c36e4:	460d      	mov	r5, r1
   c36e6:	4691      	mov	r9, r2
   c36e8:	f000 fbe8 	bl	c3ebc <__retarget_lock_acquire_recursive>
   c36ec:	4b25      	ldr	r3, [pc, #148]	; (c3784 <__register_exitproc+0xb0>)
   c36ee:	681c      	ldr	r4, [r3, #0]
   c36f0:	b934      	cbnz	r4, c3700 <__register_exitproc+0x2c>
   c36f2:	4c25      	ldr	r4, [pc, #148]	; (c3788 <__register_exitproc+0xb4>)
   c36f4:	601c      	str	r4, [r3, #0]
   c36f6:	4b25      	ldr	r3, [pc, #148]	; (c378c <__register_exitproc+0xb8>)
   c36f8:	b113      	cbz	r3, c3700 <__register_exitproc+0x2c>
   c36fa:	681b      	ldr	r3, [r3, #0]
   c36fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c3700:	6863      	ldr	r3, [r4, #4]
   c3702:	2b1f      	cmp	r3, #31
   c3704:	dd07      	ble.n	c3716 <__register_exitproc+0x42>
   c3706:	f8d8 0000 	ldr.w	r0, [r8]
   c370a:	f000 fbd9 	bl	c3ec0 <__retarget_lock_release_recursive>
   c370e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3716:	b34e      	cbz	r6, c376c <__register_exitproc+0x98>
   c3718:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c371c:	b988      	cbnz	r0, c3742 <__register_exitproc+0x6e>
   c371e:	4b1c      	ldr	r3, [pc, #112]	; (c3790 <__register_exitproc+0xbc>)
   c3720:	b923      	cbnz	r3, c372c <__register_exitproc+0x58>
   c3722:	f8d8 0000 	ldr.w	r0, [r8]
   c3726:	f000 fbca 	bl	c3ebe <__retarget_lock_release>
   c372a:	e7f0      	b.n	c370e <__register_exitproc+0x3a>
   c372c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c3730:	f7f9 feb8 	bl	bd4a4 <malloc>
   c3734:	2800      	cmp	r0, #0
   c3736:	d0f4      	beq.n	c3722 <__register_exitproc+0x4e>
   c3738:	2300      	movs	r3, #0
   c373a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c373e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c3742:	6863      	ldr	r3, [r4, #4]
   c3744:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c3748:	2201      	movs	r2, #1
   c374a:	409a      	lsls	r2, r3
   c374c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c3750:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c3754:	4313      	orrs	r3, r2
   c3756:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c375a:	2e02      	cmp	r6, #2
   c375c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c3760:	bf02      	ittt	eq
   c3762:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c3766:	4313      	orreq	r3, r2
   c3768:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c376c:	6863      	ldr	r3, [r4, #4]
   c376e:	f8d8 0000 	ldr.w	r0, [r8]
   c3772:	1c5a      	adds	r2, r3, #1
   c3774:	3302      	adds	r3, #2
   c3776:	6062      	str	r2, [r4, #4]
   c3778:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c377c:	f000 fba0 	bl	c3ec0 <__retarget_lock_release_recursive>
   c3780:	2000      	movs	r0, #0
   c3782:	e7c6      	b.n	c3712 <__register_exitproc+0x3e>
   c3784:	2003e7e8 	.word	0x2003e7e8
   c3788:	2003e75c 	.word	0x2003e75c
   c378c:	00000000 	.word	0x00000000
   c3790:	000bd4a5 	.word	0x000bd4a5
   c3794:	2003d6f0 	.word	0x2003d6f0

000c3798 <_close_r>:
   c3798:	b538      	push	{r3, r4, r5, lr}
   c379a:	4d06      	ldr	r5, [pc, #24]	; (c37b4 <_close_r+0x1c>)
   c379c:	2300      	movs	r3, #0
   c379e:	4604      	mov	r4, r0
   c37a0:	4608      	mov	r0, r1
   c37a2:	602b      	str	r3, [r5, #0]
   c37a4:	f7f9 fc2a 	bl	bcffc <_close>
   c37a8:	1c43      	adds	r3, r0, #1
   c37aa:	d102      	bne.n	c37b2 <_close_r+0x1a>
   c37ac:	682b      	ldr	r3, [r5, #0]
   c37ae:	b103      	cbz	r3, c37b2 <_close_r+0x1a>
   c37b0:	6023      	str	r3, [r4, #0]
   c37b2:	bd38      	pop	{r3, r4, r5, pc}
   c37b4:	2003e7f0 	.word	0x2003e7f0

000c37b8 <_fstat_r>:
   c37b8:	b538      	push	{r3, r4, r5, lr}
   c37ba:	4d07      	ldr	r5, [pc, #28]	; (c37d8 <_fstat_r+0x20>)
   c37bc:	2300      	movs	r3, #0
   c37be:	4604      	mov	r4, r0
   c37c0:	4608      	mov	r0, r1
   c37c2:	4611      	mov	r1, r2
   c37c4:	602b      	str	r3, [r5, #0]
   c37c6:	f7f9 fc21 	bl	bd00c <_fstat>
   c37ca:	1c43      	adds	r3, r0, #1
   c37cc:	d102      	bne.n	c37d4 <_fstat_r+0x1c>
   c37ce:	682b      	ldr	r3, [r5, #0]
   c37d0:	b103      	cbz	r3, c37d4 <_fstat_r+0x1c>
   c37d2:	6023      	str	r3, [r4, #0]
   c37d4:	bd38      	pop	{r3, r4, r5, pc}
   c37d6:	bf00      	nop
   c37d8:	2003e7f0 	.word	0x2003e7f0

000c37dc <rshift>:
   c37dc:	6903      	ldr	r3, [r0, #16]
   c37de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c37e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c37e6:	ea4f 1261 	mov.w	r2, r1, asr #5
   c37ea:	f100 0414 	add.w	r4, r0, #20
   c37ee:	dd45      	ble.n	c387c <rshift+0xa0>
   c37f0:	f011 011f 	ands.w	r1, r1, #31
   c37f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c37f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c37fc:	d10c      	bne.n	c3818 <rshift+0x3c>
   c37fe:	f100 0710 	add.w	r7, r0, #16
   c3802:	4629      	mov	r1, r5
   c3804:	42b1      	cmp	r1, r6
   c3806:	d334      	bcc.n	c3872 <rshift+0x96>
   c3808:	1a9b      	subs	r3, r3, r2
   c380a:	009b      	lsls	r3, r3, #2
   c380c:	1eea      	subs	r2, r5, #3
   c380e:	4296      	cmp	r6, r2
   c3810:	bf38      	it	cc
   c3812:	2300      	movcc	r3, #0
   c3814:	4423      	add	r3, r4
   c3816:	e015      	b.n	c3844 <rshift+0x68>
   c3818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c381c:	f1c1 0820 	rsb	r8, r1, #32
   c3820:	40cf      	lsrs	r7, r1
   c3822:	f105 0e04 	add.w	lr, r5, #4
   c3826:	46a1      	mov	r9, r4
   c3828:	4576      	cmp	r6, lr
   c382a:	46f4      	mov	ip, lr
   c382c:	d815      	bhi.n	c385a <rshift+0x7e>
   c382e:	1a9a      	subs	r2, r3, r2
   c3830:	0092      	lsls	r2, r2, #2
   c3832:	3a04      	subs	r2, #4
   c3834:	3501      	adds	r5, #1
   c3836:	42ae      	cmp	r6, r5
   c3838:	bf38      	it	cc
   c383a:	2200      	movcc	r2, #0
   c383c:	18a3      	adds	r3, r4, r2
   c383e:	50a7      	str	r7, [r4, r2]
   c3840:	b107      	cbz	r7, c3844 <rshift+0x68>
   c3842:	3304      	adds	r3, #4
   c3844:	1b1a      	subs	r2, r3, r4
   c3846:	42a3      	cmp	r3, r4
   c3848:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c384c:	bf08      	it	eq
   c384e:	2300      	moveq	r3, #0
   c3850:	6102      	str	r2, [r0, #16]
   c3852:	bf08      	it	eq
   c3854:	6143      	streq	r3, [r0, #20]
   c3856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c385a:	f8dc c000 	ldr.w	ip, [ip]
   c385e:	fa0c fc08 	lsl.w	ip, ip, r8
   c3862:	ea4c 0707 	orr.w	r7, ip, r7
   c3866:	f849 7b04 	str.w	r7, [r9], #4
   c386a:	f85e 7b04 	ldr.w	r7, [lr], #4
   c386e:	40cf      	lsrs	r7, r1
   c3870:	e7da      	b.n	c3828 <rshift+0x4c>
   c3872:	f851 cb04 	ldr.w	ip, [r1], #4
   c3876:	f847 cf04 	str.w	ip, [r7, #4]!
   c387a:	e7c3      	b.n	c3804 <rshift+0x28>
   c387c:	4623      	mov	r3, r4
   c387e:	e7e1      	b.n	c3844 <rshift+0x68>

000c3880 <__hexdig_fun>:
   c3880:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c3884:	2b09      	cmp	r3, #9
   c3886:	d802      	bhi.n	c388e <__hexdig_fun+0xe>
   c3888:	3820      	subs	r0, #32
   c388a:	b2c0      	uxtb	r0, r0
   c388c:	4770      	bx	lr
   c388e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c3892:	2b05      	cmp	r3, #5
   c3894:	d801      	bhi.n	c389a <__hexdig_fun+0x1a>
   c3896:	3847      	subs	r0, #71	; 0x47
   c3898:	e7f7      	b.n	c388a <__hexdig_fun+0xa>
   c389a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c389e:	2b05      	cmp	r3, #5
   c38a0:	d801      	bhi.n	c38a6 <__hexdig_fun+0x26>
   c38a2:	3827      	subs	r0, #39	; 0x27
   c38a4:	e7f1      	b.n	c388a <__hexdig_fun+0xa>
   c38a6:	2000      	movs	r0, #0
   c38a8:	4770      	bx	lr
	...

000c38ac <__gethex>:
   c38ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c38b0:	ed2d 8b02 	vpush	{d8}
   c38b4:	b089      	sub	sp, #36	; 0x24
   c38b6:	ee08 0a10 	vmov	s16, r0
   c38ba:	9304      	str	r3, [sp, #16]
   c38bc:	4bb4      	ldr	r3, [pc, #720]	; (c3b90 <__gethex+0x2e4>)
   c38be:	681b      	ldr	r3, [r3, #0]
   c38c0:	9301      	str	r3, [sp, #4]
   c38c2:	4618      	mov	r0, r3
   c38c4:	468b      	mov	fp, r1
   c38c6:	4690      	mov	r8, r2
   c38c8:	f7fe ff1f 	bl	c270a <strlen>
   c38cc:	9b01      	ldr	r3, [sp, #4]
   c38ce:	f8db 2000 	ldr.w	r2, [fp]
   c38d2:	4403      	add	r3, r0
   c38d4:	4682      	mov	sl, r0
   c38d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c38da:	9305      	str	r3, [sp, #20]
   c38dc:	1c93      	adds	r3, r2, #2
   c38de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c38e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c38e6:	32fe      	adds	r2, #254	; 0xfe
   c38e8:	18d1      	adds	r1, r2, r3
   c38ea:	461f      	mov	r7, r3
   c38ec:	f813 0b01 	ldrb.w	r0, [r3], #1
   c38f0:	9100      	str	r1, [sp, #0]
   c38f2:	2830      	cmp	r0, #48	; 0x30
   c38f4:	d0f8      	beq.n	c38e8 <__gethex+0x3c>
   c38f6:	f7ff ffc3 	bl	c3880 <__hexdig_fun>
   c38fa:	4604      	mov	r4, r0
   c38fc:	2800      	cmp	r0, #0
   c38fe:	d13a      	bne.n	c3976 <__gethex+0xca>
   c3900:	9901      	ldr	r1, [sp, #4]
   c3902:	4652      	mov	r2, sl
   c3904:	4638      	mov	r0, r7
   c3906:	f7fe ff08 	bl	c271a <strncmp>
   c390a:	4605      	mov	r5, r0
   c390c:	2800      	cmp	r0, #0
   c390e:	d168      	bne.n	c39e2 <__gethex+0x136>
   c3910:	f817 000a 	ldrb.w	r0, [r7, sl]
   c3914:	eb07 060a 	add.w	r6, r7, sl
   c3918:	f7ff ffb2 	bl	c3880 <__hexdig_fun>
   c391c:	2800      	cmp	r0, #0
   c391e:	d062      	beq.n	c39e6 <__gethex+0x13a>
   c3920:	4633      	mov	r3, r6
   c3922:	7818      	ldrb	r0, [r3, #0]
   c3924:	2830      	cmp	r0, #48	; 0x30
   c3926:	461f      	mov	r7, r3
   c3928:	f103 0301 	add.w	r3, r3, #1
   c392c:	d0f9      	beq.n	c3922 <__gethex+0x76>
   c392e:	f7ff ffa7 	bl	c3880 <__hexdig_fun>
   c3932:	2301      	movs	r3, #1
   c3934:	fab0 f480 	clz	r4, r0
   c3938:	0964      	lsrs	r4, r4, #5
   c393a:	4635      	mov	r5, r6
   c393c:	9300      	str	r3, [sp, #0]
   c393e:	463a      	mov	r2, r7
   c3940:	4616      	mov	r6, r2
   c3942:	3201      	adds	r2, #1
   c3944:	7830      	ldrb	r0, [r6, #0]
   c3946:	f7ff ff9b 	bl	c3880 <__hexdig_fun>
   c394a:	2800      	cmp	r0, #0
   c394c:	d1f8      	bne.n	c3940 <__gethex+0x94>
   c394e:	9901      	ldr	r1, [sp, #4]
   c3950:	4652      	mov	r2, sl
   c3952:	4630      	mov	r0, r6
   c3954:	f7fe fee1 	bl	c271a <strncmp>
   c3958:	b980      	cbnz	r0, c397c <__gethex+0xd0>
   c395a:	b94d      	cbnz	r5, c3970 <__gethex+0xc4>
   c395c:	eb06 050a 	add.w	r5, r6, sl
   c3960:	462a      	mov	r2, r5
   c3962:	4616      	mov	r6, r2
   c3964:	3201      	adds	r2, #1
   c3966:	7830      	ldrb	r0, [r6, #0]
   c3968:	f7ff ff8a 	bl	c3880 <__hexdig_fun>
   c396c:	2800      	cmp	r0, #0
   c396e:	d1f8      	bne.n	c3962 <__gethex+0xb6>
   c3970:	1bad      	subs	r5, r5, r6
   c3972:	00ad      	lsls	r5, r5, #2
   c3974:	e004      	b.n	c3980 <__gethex+0xd4>
   c3976:	2400      	movs	r4, #0
   c3978:	4625      	mov	r5, r4
   c397a:	e7e0      	b.n	c393e <__gethex+0x92>
   c397c:	2d00      	cmp	r5, #0
   c397e:	d1f7      	bne.n	c3970 <__gethex+0xc4>
   c3980:	7833      	ldrb	r3, [r6, #0]
   c3982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c3986:	2b50      	cmp	r3, #80	; 0x50
   c3988:	d13b      	bne.n	c3a02 <__gethex+0x156>
   c398a:	7873      	ldrb	r3, [r6, #1]
   c398c:	2b2b      	cmp	r3, #43	; 0x2b
   c398e:	d02c      	beq.n	c39ea <__gethex+0x13e>
   c3990:	2b2d      	cmp	r3, #45	; 0x2d
   c3992:	d02e      	beq.n	c39f2 <__gethex+0x146>
   c3994:	1c71      	adds	r1, r6, #1
   c3996:	f04f 0900 	mov.w	r9, #0
   c399a:	7808      	ldrb	r0, [r1, #0]
   c399c:	f7ff ff70 	bl	c3880 <__hexdig_fun>
   c39a0:	1e43      	subs	r3, r0, #1
   c39a2:	b2db      	uxtb	r3, r3
   c39a4:	2b18      	cmp	r3, #24
   c39a6:	d82c      	bhi.n	c3a02 <__gethex+0x156>
   c39a8:	f1a0 0210 	sub.w	r2, r0, #16
   c39ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c39b0:	f7ff ff66 	bl	c3880 <__hexdig_fun>
   c39b4:	1e43      	subs	r3, r0, #1
   c39b6:	b2db      	uxtb	r3, r3
   c39b8:	2b18      	cmp	r3, #24
   c39ba:	d91d      	bls.n	c39f8 <__gethex+0x14c>
   c39bc:	f1b9 0f00 	cmp.w	r9, #0
   c39c0:	d000      	beq.n	c39c4 <__gethex+0x118>
   c39c2:	4252      	negs	r2, r2
   c39c4:	4415      	add	r5, r2
   c39c6:	f8cb 1000 	str.w	r1, [fp]
   c39ca:	b1e4      	cbz	r4, c3a06 <__gethex+0x15a>
   c39cc:	9b00      	ldr	r3, [sp, #0]
   c39ce:	2b00      	cmp	r3, #0
   c39d0:	bf14      	ite	ne
   c39d2:	2700      	movne	r7, #0
   c39d4:	2706      	moveq	r7, #6
   c39d6:	4638      	mov	r0, r7
   c39d8:	b009      	add	sp, #36	; 0x24
   c39da:	ecbd 8b02 	vpop	{d8}
   c39de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c39e2:	463e      	mov	r6, r7
   c39e4:	4625      	mov	r5, r4
   c39e6:	2401      	movs	r4, #1
   c39e8:	e7ca      	b.n	c3980 <__gethex+0xd4>
   c39ea:	f04f 0900 	mov.w	r9, #0
   c39ee:	1cb1      	adds	r1, r6, #2
   c39f0:	e7d3      	b.n	c399a <__gethex+0xee>
   c39f2:	f04f 0901 	mov.w	r9, #1
   c39f6:	e7fa      	b.n	c39ee <__gethex+0x142>
   c39f8:	230a      	movs	r3, #10
   c39fa:	fb03 0202 	mla	r2, r3, r2, r0
   c39fe:	3a10      	subs	r2, #16
   c3a00:	e7d4      	b.n	c39ac <__gethex+0x100>
   c3a02:	4631      	mov	r1, r6
   c3a04:	e7df      	b.n	c39c6 <__gethex+0x11a>
   c3a06:	1bf3      	subs	r3, r6, r7
   c3a08:	3b01      	subs	r3, #1
   c3a0a:	4621      	mov	r1, r4
   c3a0c:	2b07      	cmp	r3, #7
   c3a0e:	dc0b      	bgt.n	c3a28 <__gethex+0x17c>
   c3a10:	ee18 0a10 	vmov	r0, s16
   c3a14:	f000 fa7a 	bl	c3f0c <_Balloc>
   c3a18:	4604      	mov	r4, r0
   c3a1a:	b940      	cbnz	r0, c3a2e <__gethex+0x182>
   c3a1c:	4b5d      	ldr	r3, [pc, #372]	; (c3b94 <__gethex+0x2e8>)
   c3a1e:	4602      	mov	r2, r0
   c3a20:	21de      	movs	r1, #222	; 0xde
   c3a22:	485d      	ldr	r0, [pc, #372]	; (c3b98 <__gethex+0x2ec>)
   c3a24:	f7f9 fd8e 	bl	bd544 <__assert_func>
   c3a28:	3101      	adds	r1, #1
   c3a2a:	105b      	asrs	r3, r3, #1
   c3a2c:	e7ee      	b.n	c3a0c <__gethex+0x160>
   c3a2e:	f100 0914 	add.w	r9, r0, #20
   c3a32:	f04f 0b00 	mov.w	fp, #0
   c3a36:	f1ca 0301 	rsb	r3, sl, #1
   c3a3a:	f8cd 9008 	str.w	r9, [sp, #8]
   c3a3e:	f8cd b000 	str.w	fp, [sp]
   c3a42:	9306      	str	r3, [sp, #24]
   c3a44:	42b7      	cmp	r7, r6
   c3a46:	d340      	bcc.n	c3aca <__gethex+0x21e>
   c3a48:	9802      	ldr	r0, [sp, #8]
   c3a4a:	9b00      	ldr	r3, [sp, #0]
   c3a4c:	f840 3b04 	str.w	r3, [r0], #4
   c3a50:	eba0 0009 	sub.w	r0, r0, r9
   c3a54:	1080      	asrs	r0, r0, #2
   c3a56:	0146      	lsls	r6, r0, #5
   c3a58:	6120      	str	r0, [r4, #16]
   c3a5a:	4618      	mov	r0, r3
   c3a5c:	f000 fb48 	bl	c40f0 <__hi0bits>
   c3a60:	1a30      	subs	r0, r6, r0
   c3a62:	f8d8 6000 	ldr.w	r6, [r8]
   c3a66:	42b0      	cmp	r0, r6
   c3a68:	dd63      	ble.n	c3b32 <__gethex+0x286>
   c3a6a:	1b87      	subs	r7, r0, r6
   c3a6c:	4639      	mov	r1, r7
   c3a6e:	4620      	mov	r0, r4
   c3a70:	f000 feec 	bl	c484c <__any_on>
   c3a74:	4682      	mov	sl, r0
   c3a76:	b1a8      	cbz	r0, c3aa4 <__gethex+0x1f8>
   c3a78:	1e7b      	subs	r3, r7, #1
   c3a7a:	1159      	asrs	r1, r3, #5
   c3a7c:	f003 021f 	and.w	r2, r3, #31
   c3a80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c3a84:	f04f 0a01 	mov.w	sl, #1
   c3a88:	fa0a f202 	lsl.w	r2, sl, r2
   c3a8c:	420a      	tst	r2, r1
   c3a8e:	d009      	beq.n	c3aa4 <__gethex+0x1f8>
   c3a90:	4553      	cmp	r3, sl
   c3a92:	dd05      	ble.n	c3aa0 <__gethex+0x1f4>
   c3a94:	1eb9      	subs	r1, r7, #2
   c3a96:	4620      	mov	r0, r4
   c3a98:	f000 fed8 	bl	c484c <__any_on>
   c3a9c:	2800      	cmp	r0, #0
   c3a9e:	d145      	bne.n	c3b2c <__gethex+0x280>
   c3aa0:	f04f 0a02 	mov.w	sl, #2
   c3aa4:	4639      	mov	r1, r7
   c3aa6:	4620      	mov	r0, r4
   c3aa8:	f7ff fe98 	bl	c37dc <rshift>
   c3aac:	443d      	add	r5, r7
   c3aae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3ab2:	42ab      	cmp	r3, r5
   c3ab4:	da4c      	bge.n	c3b50 <__gethex+0x2a4>
   c3ab6:	ee18 0a10 	vmov	r0, s16
   c3aba:	4621      	mov	r1, r4
   c3abc:	f000 fa66 	bl	c3f8c <_Bfree>
   c3ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3ac2:	2300      	movs	r3, #0
   c3ac4:	6013      	str	r3, [r2, #0]
   c3ac6:	27a3      	movs	r7, #163	; 0xa3
   c3ac8:	e785      	b.n	c39d6 <__gethex+0x12a>
   c3aca:	1e73      	subs	r3, r6, #1
   c3acc:	9a05      	ldr	r2, [sp, #20]
   c3ace:	9303      	str	r3, [sp, #12]
   c3ad0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c3ad4:	4293      	cmp	r3, r2
   c3ad6:	d019      	beq.n	c3b0c <__gethex+0x260>
   c3ad8:	f1bb 0f20 	cmp.w	fp, #32
   c3adc:	d107      	bne.n	c3aee <__gethex+0x242>
   c3ade:	9b02      	ldr	r3, [sp, #8]
   c3ae0:	9a00      	ldr	r2, [sp, #0]
   c3ae2:	f843 2b04 	str.w	r2, [r3], #4
   c3ae6:	9302      	str	r3, [sp, #8]
   c3ae8:	2300      	movs	r3, #0
   c3aea:	9300      	str	r3, [sp, #0]
   c3aec:	469b      	mov	fp, r3
   c3aee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c3af2:	f7ff fec5 	bl	c3880 <__hexdig_fun>
   c3af6:	9b00      	ldr	r3, [sp, #0]
   c3af8:	f000 000f 	and.w	r0, r0, #15
   c3afc:	fa00 f00b 	lsl.w	r0, r0, fp
   c3b00:	4303      	orrs	r3, r0
   c3b02:	9300      	str	r3, [sp, #0]
   c3b04:	f10b 0b04 	add.w	fp, fp, #4
   c3b08:	9b03      	ldr	r3, [sp, #12]
   c3b0a:	e00d      	b.n	c3b28 <__gethex+0x27c>
   c3b0c:	9b03      	ldr	r3, [sp, #12]
   c3b0e:	9a06      	ldr	r2, [sp, #24]
   c3b10:	4413      	add	r3, r2
   c3b12:	42bb      	cmp	r3, r7
   c3b14:	d3e0      	bcc.n	c3ad8 <__gethex+0x22c>
   c3b16:	4618      	mov	r0, r3
   c3b18:	9901      	ldr	r1, [sp, #4]
   c3b1a:	9307      	str	r3, [sp, #28]
   c3b1c:	4652      	mov	r2, sl
   c3b1e:	f7fe fdfc 	bl	c271a <strncmp>
   c3b22:	9b07      	ldr	r3, [sp, #28]
   c3b24:	2800      	cmp	r0, #0
   c3b26:	d1d7      	bne.n	c3ad8 <__gethex+0x22c>
   c3b28:	461e      	mov	r6, r3
   c3b2a:	e78b      	b.n	c3a44 <__gethex+0x198>
   c3b2c:	f04f 0a03 	mov.w	sl, #3
   c3b30:	e7b8      	b.n	c3aa4 <__gethex+0x1f8>
   c3b32:	da0a      	bge.n	c3b4a <__gethex+0x29e>
   c3b34:	1a37      	subs	r7, r6, r0
   c3b36:	4621      	mov	r1, r4
   c3b38:	ee18 0a10 	vmov	r0, s16
   c3b3c:	463a      	mov	r2, r7
   c3b3e:	f000 fc41 	bl	c43c4 <__lshift>
   c3b42:	1bed      	subs	r5, r5, r7
   c3b44:	4604      	mov	r4, r0
   c3b46:	f100 0914 	add.w	r9, r0, #20
   c3b4a:	f04f 0a00 	mov.w	sl, #0
   c3b4e:	e7ae      	b.n	c3aae <__gethex+0x202>
   c3b50:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c3b54:	42a8      	cmp	r0, r5
   c3b56:	dd72      	ble.n	c3c3e <__gethex+0x392>
   c3b58:	1b45      	subs	r5, r0, r5
   c3b5a:	42ae      	cmp	r6, r5
   c3b5c:	dc36      	bgt.n	c3bcc <__gethex+0x320>
   c3b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3b62:	2b02      	cmp	r3, #2
   c3b64:	d02a      	beq.n	c3bbc <__gethex+0x310>
   c3b66:	2b03      	cmp	r3, #3
   c3b68:	d02c      	beq.n	c3bc4 <__gethex+0x318>
   c3b6a:	2b01      	cmp	r3, #1
   c3b6c:	d11c      	bne.n	c3ba8 <__gethex+0x2fc>
   c3b6e:	42ae      	cmp	r6, r5
   c3b70:	d11a      	bne.n	c3ba8 <__gethex+0x2fc>
   c3b72:	2e01      	cmp	r6, #1
   c3b74:	d112      	bne.n	c3b9c <__gethex+0x2f0>
   c3b76:	9a04      	ldr	r2, [sp, #16]
   c3b78:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c3b7c:	6013      	str	r3, [r2, #0]
   c3b7e:	2301      	movs	r3, #1
   c3b80:	6123      	str	r3, [r4, #16]
   c3b82:	f8c9 3000 	str.w	r3, [r9]
   c3b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3b88:	2762      	movs	r7, #98	; 0x62
   c3b8a:	601c      	str	r4, [r3, #0]
   c3b8c:	e723      	b.n	c39d6 <__gethex+0x12a>
   c3b8e:	bf00      	nop
   c3b90:	000c6cc4 	.word	0x000c6cc4
   c3b94:	000c6c51 	.word	0x000c6c51
   c3b98:	000c6c62 	.word	0x000c6c62
   c3b9c:	1e71      	subs	r1, r6, #1
   c3b9e:	4620      	mov	r0, r4
   c3ba0:	f000 fe54 	bl	c484c <__any_on>
   c3ba4:	2800      	cmp	r0, #0
   c3ba6:	d1e6      	bne.n	c3b76 <__gethex+0x2ca>
   c3ba8:	ee18 0a10 	vmov	r0, s16
   c3bac:	4621      	mov	r1, r4
   c3bae:	f000 f9ed 	bl	c3f8c <_Bfree>
   c3bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3bb4:	2300      	movs	r3, #0
   c3bb6:	6013      	str	r3, [r2, #0]
   c3bb8:	2750      	movs	r7, #80	; 0x50
   c3bba:	e70c      	b.n	c39d6 <__gethex+0x12a>
   c3bbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3bbe:	2b00      	cmp	r3, #0
   c3bc0:	d1f2      	bne.n	c3ba8 <__gethex+0x2fc>
   c3bc2:	e7d8      	b.n	c3b76 <__gethex+0x2ca>
   c3bc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3bc6:	2b00      	cmp	r3, #0
   c3bc8:	d1d5      	bne.n	c3b76 <__gethex+0x2ca>
   c3bca:	e7ed      	b.n	c3ba8 <__gethex+0x2fc>
   c3bcc:	1e6f      	subs	r7, r5, #1
   c3bce:	f1ba 0f00 	cmp.w	sl, #0
   c3bd2:	d131      	bne.n	c3c38 <__gethex+0x38c>
   c3bd4:	b127      	cbz	r7, c3be0 <__gethex+0x334>
   c3bd6:	4639      	mov	r1, r7
   c3bd8:	4620      	mov	r0, r4
   c3bda:	f000 fe37 	bl	c484c <__any_on>
   c3bde:	4682      	mov	sl, r0
   c3be0:	117b      	asrs	r3, r7, #5
   c3be2:	2101      	movs	r1, #1
   c3be4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c3be8:	f007 071f 	and.w	r7, r7, #31
   c3bec:	fa01 f707 	lsl.w	r7, r1, r7
   c3bf0:	421f      	tst	r7, r3
   c3bf2:	4629      	mov	r1, r5
   c3bf4:	4620      	mov	r0, r4
   c3bf6:	bf18      	it	ne
   c3bf8:	f04a 0a02 	orrne.w	sl, sl, #2
   c3bfc:	1b76      	subs	r6, r6, r5
   c3bfe:	f7ff fded 	bl	c37dc <rshift>
   c3c02:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c3c06:	2702      	movs	r7, #2
   c3c08:	f1ba 0f00 	cmp.w	sl, #0
   c3c0c:	d048      	beq.n	c3ca0 <__gethex+0x3f4>
   c3c0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3c12:	2b02      	cmp	r3, #2
   c3c14:	d015      	beq.n	c3c42 <__gethex+0x396>
   c3c16:	2b03      	cmp	r3, #3
   c3c18:	d017      	beq.n	c3c4a <__gethex+0x39e>
   c3c1a:	2b01      	cmp	r3, #1
   c3c1c:	d109      	bne.n	c3c32 <__gethex+0x386>
   c3c1e:	f01a 0f02 	tst.w	sl, #2
   c3c22:	d006      	beq.n	c3c32 <__gethex+0x386>
   c3c24:	f8d9 0000 	ldr.w	r0, [r9]
   c3c28:	ea4a 0a00 	orr.w	sl, sl, r0
   c3c2c:	f01a 0f01 	tst.w	sl, #1
   c3c30:	d10e      	bne.n	c3c50 <__gethex+0x3a4>
   c3c32:	f047 0710 	orr.w	r7, r7, #16
   c3c36:	e033      	b.n	c3ca0 <__gethex+0x3f4>
   c3c38:	f04f 0a01 	mov.w	sl, #1
   c3c3c:	e7d0      	b.n	c3be0 <__gethex+0x334>
   c3c3e:	2701      	movs	r7, #1
   c3c40:	e7e2      	b.n	c3c08 <__gethex+0x35c>
   c3c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3c44:	f1c3 0301 	rsb	r3, r3, #1
   c3c48:	9315      	str	r3, [sp, #84]	; 0x54
   c3c4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3c4c:	2b00      	cmp	r3, #0
   c3c4e:	d0f0      	beq.n	c3c32 <__gethex+0x386>
   c3c50:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c3c54:	f104 0314 	add.w	r3, r4, #20
   c3c58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c3c5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c3c60:	f04f 0c00 	mov.w	ip, #0
   c3c64:	4618      	mov	r0, r3
   c3c66:	f853 2b04 	ldr.w	r2, [r3], #4
   c3c6a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c3c6e:	d01c      	beq.n	c3caa <__gethex+0x3fe>
   c3c70:	3201      	adds	r2, #1
   c3c72:	6002      	str	r2, [r0, #0]
   c3c74:	2f02      	cmp	r7, #2
   c3c76:	f104 0314 	add.w	r3, r4, #20
   c3c7a:	d13f      	bne.n	c3cfc <__gethex+0x450>
   c3c7c:	f8d8 2000 	ldr.w	r2, [r8]
   c3c80:	3a01      	subs	r2, #1
   c3c82:	42b2      	cmp	r2, r6
   c3c84:	d10a      	bne.n	c3c9c <__gethex+0x3f0>
   c3c86:	1171      	asrs	r1, r6, #5
   c3c88:	2201      	movs	r2, #1
   c3c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c3c8e:	f006 061f 	and.w	r6, r6, #31
   c3c92:	fa02 f606 	lsl.w	r6, r2, r6
   c3c96:	421e      	tst	r6, r3
   c3c98:	bf18      	it	ne
   c3c9a:	4617      	movne	r7, r2
   c3c9c:	f047 0720 	orr.w	r7, r7, #32
   c3ca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3ca2:	601c      	str	r4, [r3, #0]
   c3ca4:	9b04      	ldr	r3, [sp, #16]
   c3ca6:	601d      	str	r5, [r3, #0]
   c3ca8:	e695      	b.n	c39d6 <__gethex+0x12a>
   c3caa:	4299      	cmp	r1, r3
   c3cac:	f843 cc04 	str.w	ip, [r3, #-4]
   c3cb0:	d8d8      	bhi.n	c3c64 <__gethex+0x3b8>
   c3cb2:	68a3      	ldr	r3, [r4, #8]
   c3cb4:	459b      	cmp	fp, r3
   c3cb6:	db19      	blt.n	c3cec <__gethex+0x440>
   c3cb8:	6861      	ldr	r1, [r4, #4]
   c3cba:	ee18 0a10 	vmov	r0, s16
   c3cbe:	3101      	adds	r1, #1
   c3cc0:	f000 f924 	bl	c3f0c <_Balloc>
   c3cc4:	4681      	mov	r9, r0
   c3cc6:	b918      	cbnz	r0, c3cd0 <__gethex+0x424>
   c3cc8:	4b1a      	ldr	r3, [pc, #104]	; (c3d34 <__gethex+0x488>)
   c3cca:	4602      	mov	r2, r0
   c3ccc:	2184      	movs	r1, #132	; 0x84
   c3cce:	e6a8      	b.n	c3a22 <__gethex+0x176>
   c3cd0:	6922      	ldr	r2, [r4, #16]
   c3cd2:	3202      	adds	r2, #2
   c3cd4:	f104 010c 	add.w	r1, r4, #12
   c3cd8:	0092      	lsls	r2, r2, #2
   c3cda:	300c      	adds	r0, #12
   c3cdc:	f7fe fc22 	bl	c2524 <memcpy>
   c3ce0:	4621      	mov	r1, r4
   c3ce2:	ee18 0a10 	vmov	r0, s16
   c3ce6:	f000 f951 	bl	c3f8c <_Bfree>
   c3cea:	464c      	mov	r4, r9
   c3cec:	6923      	ldr	r3, [r4, #16]
   c3cee:	1c5a      	adds	r2, r3, #1
   c3cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c3cf4:	6122      	str	r2, [r4, #16]
   c3cf6:	2201      	movs	r2, #1
   c3cf8:	615a      	str	r2, [r3, #20]
   c3cfa:	e7bb      	b.n	c3c74 <__gethex+0x3c8>
   c3cfc:	6922      	ldr	r2, [r4, #16]
   c3cfe:	455a      	cmp	r2, fp
   c3d00:	dd0b      	ble.n	c3d1a <__gethex+0x46e>
   c3d02:	2101      	movs	r1, #1
   c3d04:	4620      	mov	r0, r4
   c3d06:	f7ff fd69 	bl	c37dc <rshift>
   c3d0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3d0e:	3501      	adds	r5, #1
   c3d10:	42ab      	cmp	r3, r5
   c3d12:	f6ff aed0 	blt.w	c3ab6 <__gethex+0x20a>
   c3d16:	2701      	movs	r7, #1
   c3d18:	e7c0      	b.n	c3c9c <__gethex+0x3f0>
   c3d1a:	f016 061f 	ands.w	r6, r6, #31
   c3d1e:	d0fa      	beq.n	c3d16 <__gethex+0x46a>
   c3d20:	4453      	add	r3, sl
   c3d22:	f1c6 0620 	rsb	r6, r6, #32
   c3d26:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c3d2a:	f000 f9e1 	bl	c40f0 <__hi0bits>
   c3d2e:	42b0      	cmp	r0, r6
   c3d30:	dbe7      	blt.n	c3d02 <__gethex+0x456>
   c3d32:	e7f0      	b.n	c3d16 <__gethex+0x46a>
   c3d34:	000c6c51 	.word	0x000c6c51

000c3d38 <L_shift>:
   c3d38:	f1c2 0208 	rsb	r2, r2, #8
   c3d3c:	0092      	lsls	r2, r2, #2
   c3d3e:	b570      	push	{r4, r5, r6, lr}
   c3d40:	f1c2 0620 	rsb	r6, r2, #32
   c3d44:	6843      	ldr	r3, [r0, #4]
   c3d46:	6804      	ldr	r4, [r0, #0]
   c3d48:	fa03 f506 	lsl.w	r5, r3, r6
   c3d4c:	432c      	orrs	r4, r5
   c3d4e:	40d3      	lsrs	r3, r2
   c3d50:	6004      	str	r4, [r0, #0]
   c3d52:	f840 3f04 	str.w	r3, [r0, #4]!
   c3d56:	4288      	cmp	r0, r1
   c3d58:	d3f4      	bcc.n	c3d44 <L_shift+0xc>
   c3d5a:	bd70      	pop	{r4, r5, r6, pc}

000c3d5c <__match>:
   c3d5c:	b530      	push	{r4, r5, lr}
   c3d5e:	6803      	ldr	r3, [r0, #0]
   c3d60:	3301      	adds	r3, #1
   c3d62:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3d66:	b914      	cbnz	r4, c3d6e <__match+0x12>
   c3d68:	6003      	str	r3, [r0, #0]
   c3d6a:	2001      	movs	r0, #1
   c3d6c:	bd30      	pop	{r4, r5, pc}
   c3d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3d72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c3d76:	2d19      	cmp	r5, #25
   c3d78:	bf98      	it	ls
   c3d7a:	3220      	addls	r2, #32
   c3d7c:	42a2      	cmp	r2, r4
   c3d7e:	d0f0      	beq.n	c3d62 <__match+0x6>
   c3d80:	2000      	movs	r0, #0
   c3d82:	e7f3      	b.n	c3d6c <__match+0x10>

000c3d84 <__hexnan>:
   c3d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3d88:	680b      	ldr	r3, [r1, #0]
   c3d8a:	115e      	asrs	r6, r3, #5
   c3d8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c3d90:	f013 031f 	ands.w	r3, r3, #31
   c3d94:	b087      	sub	sp, #28
   c3d96:	bf18      	it	ne
   c3d98:	3604      	addne	r6, #4
   c3d9a:	2500      	movs	r5, #0
   c3d9c:	1f37      	subs	r7, r6, #4
   c3d9e:	4690      	mov	r8, r2
   c3da0:	6802      	ldr	r2, [r0, #0]
   c3da2:	9301      	str	r3, [sp, #4]
   c3da4:	4682      	mov	sl, r0
   c3da6:	f846 5c04 	str.w	r5, [r6, #-4]
   c3daa:	46b9      	mov	r9, r7
   c3dac:	463c      	mov	r4, r7
   c3dae:	9502      	str	r5, [sp, #8]
   c3db0:	46ab      	mov	fp, r5
   c3db2:	7851      	ldrb	r1, [r2, #1]
   c3db4:	1c53      	adds	r3, r2, #1
   c3db6:	9303      	str	r3, [sp, #12]
   c3db8:	b341      	cbz	r1, c3e0c <__hexnan+0x88>
   c3dba:	4608      	mov	r0, r1
   c3dbc:	9205      	str	r2, [sp, #20]
   c3dbe:	9104      	str	r1, [sp, #16]
   c3dc0:	f7ff fd5e 	bl	c3880 <__hexdig_fun>
   c3dc4:	2800      	cmp	r0, #0
   c3dc6:	d14f      	bne.n	c3e68 <__hexnan+0xe4>
   c3dc8:	9904      	ldr	r1, [sp, #16]
   c3dca:	9a05      	ldr	r2, [sp, #20]
   c3dcc:	2920      	cmp	r1, #32
   c3dce:	d818      	bhi.n	c3e02 <__hexnan+0x7e>
   c3dd0:	9b02      	ldr	r3, [sp, #8]
   c3dd2:	459b      	cmp	fp, r3
   c3dd4:	dd13      	ble.n	c3dfe <__hexnan+0x7a>
   c3dd6:	454c      	cmp	r4, r9
   c3dd8:	d206      	bcs.n	c3de8 <__hexnan+0x64>
   c3dda:	2d07      	cmp	r5, #7
   c3ddc:	dc04      	bgt.n	c3de8 <__hexnan+0x64>
   c3dde:	462a      	mov	r2, r5
   c3de0:	4649      	mov	r1, r9
   c3de2:	4620      	mov	r0, r4
   c3de4:	f7ff ffa8 	bl	c3d38 <L_shift>
   c3de8:	4544      	cmp	r4, r8
   c3dea:	d950      	bls.n	c3e8e <__hexnan+0x10a>
   c3dec:	2300      	movs	r3, #0
   c3dee:	f1a4 0904 	sub.w	r9, r4, #4
   c3df2:	f844 3c04 	str.w	r3, [r4, #-4]
   c3df6:	f8cd b008 	str.w	fp, [sp, #8]
   c3dfa:	464c      	mov	r4, r9
   c3dfc:	461d      	mov	r5, r3
   c3dfe:	9a03      	ldr	r2, [sp, #12]
   c3e00:	e7d7      	b.n	c3db2 <__hexnan+0x2e>
   c3e02:	2929      	cmp	r1, #41	; 0x29
   c3e04:	d156      	bne.n	c3eb4 <__hexnan+0x130>
   c3e06:	3202      	adds	r2, #2
   c3e08:	f8ca 2000 	str.w	r2, [sl]
   c3e0c:	f1bb 0f00 	cmp.w	fp, #0
   c3e10:	d050      	beq.n	c3eb4 <__hexnan+0x130>
   c3e12:	454c      	cmp	r4, r9
   c3e14:	d206      	bcs.n	c3e24 <__hexnan+0xa0>
   c3e16:	2d07      	cmp	r5, #7
   c3e18:	dc04      	bgt.n	c3e24 <__hexnan+0xa0>
   c3e1a:	462a      	mov	r2, r5
   c3e1c:	4649      	mov	r1, r9
   c3e1e:	4620      	mov	r0, r4
   c3e20:	f7ff ff8a 	bl	c3d38 <L_shift>
   c3e24:	4544      	cmp	r4, r8
   c3e26:	d934      	bls.n	c3e92 <__hexnan+0x10e>
   c3e28:	f1a8 0204 	sub.w	r2, r8, #4
   c3e2c:	4623      	mov	r3, r4
   c3e2e:	f853 1b04 	ldr.w	r1, [r3], #4
   c3e32:	f842 1f04 	str.w	r1, [r2, #4]!
   c3e36:	429f      	cmp	r7, r3
   c3e38:	d2f9      	bcs.n	c3e2e <__hexnan+0xaa>
   c3e3a:	1b3b      	subs	r3, r7, r4
   c3e3c:	f023 0303 	bic.w	r3, r3, #3
   c3e40:	3304      	adds	r3, #4
   c3e42:	3401      	adds	r4, #1
   c3e44:	3e03      	subs	r6, #3
   c3e46:	42b4      	cmp	r4, r6
   c3e48:	bf88      	it	hi
   c3e4a:	2304      	movhi	r3, #4
   c3e4c:	4443      	add	r3, r8
   c3e4e:	2200      	movs	r2, #0
   c3e50:	f843 2b04 	str.w	r2, [r3], #4
   c3e54:	429f      	cmp	r7, r3
   c3e56:	d2fb      	bcs.n	c3e50 <__hexnan+0xcc>
   c3e58:	683b      	ldr	r3, [r7, #0]
   c3e5a:	b91b      	cbnz	r3, c3e64 <__hexnan+0xe0>
   c3e5c:	4547      	cmp	r7, r8
   c3e5e:	d127      	bne.n	c3eb0 <__hexnan+0x12c>
   c3e60:	2301      	movs	r3, #1
   c3e62:	603b      	str	r3, [r7, #0]
   c3e64:	2005      	movs	r0, #5
   c3e66:	e026      	b.n	c3eb6 <__hexnan+0x132>
   c3e68:	3501      	adds	r5, #1
   c3e6a:	2d08      	cmp	r5, #8
   c3e6c:	f10b 0b01 	add.w	fp, fp, #1
   c3e70:	dd06      	ble.n	c3e80 <__hexnan+0xfc>
   c3e72:	4544      	cmp	r4, r8
   c3e74:	d9c3      	bls.n	c3dfe <__hexnan+0x7a>
   c3e76:	2300      	movs	r3, #0
   c3e78:	f844 3c04 	str.w	r3, [r4, #-4]
   c3e7c:	2501      	movs	r5, #1
   c3e7e:	3c04      	subs	r4, #4
   c3e80:	6822      	ldr	r2, [r4, #0]
   c3e82:	f000 000f 	and.w	r0, r0, #15
   c3e86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c3e8a:	6022      	str	r2, [r4, #0]
   c3e8c:	e7b7      	b.n	c3dfe <__hexnan+0x7a>
   c3e8e:	2508      	movs	r5, #8
   c3e90:	e7b5      	b.n	c3dfe <__hexnan+0x7a>
   c3e92:	9b01      	ldr	r3, [sp, #4]
   c3e94:	2b00      	cmp	r3, #0
   c3e96:	d0df      	beq.n	c3e58 <__hexnan+0xd4>
   c3e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3e9c:	f1c3 0320 	rsb	r3, r3, #32
   c3ea0:	fa22 f303 	lsr.w	r3, r2, r3
   c3ea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c3ea8:	401a      	ands	r2, r3
   c3eaa:	f846 2c04 	str.w	r2, [r6, #-4]
   c3eae:	e7d3      	b.n	c3e58 <__hexnan+0xd4>
   c3eb0:	3f04      	subs	r7, #4
   c3eb2:	e7d1      	b.n	c3e58 <__hexnan+0xd4>
   c3eb4:	2004      	movs	r0, #4
   c3eb6:	b007      	add	sp, #28
   c3eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3ebc <__retarget_lock_acquire_recursive>:
   c3ebc:	4770      	bx	lr

000c3ebe <__retarget_lock_release>:
   c3ebe:	4770      	bx	lr

000c3ec0 <__retarget_lock_release_recursive>:
   c3ec0:	4770      	bx	lr
	...

000c3ec4 <_lseek_r>:
   c3ec4:	b538      	push	{r3, r4, r5, lr}
   c3ec6:	4d07      	ldr	r5, [pc, #28]	; (c3ee4 <_lseek_r+0x20>)
   c3ec8:	4604      	mov	r4, r0
   c3eca:	4608      	mov	r0, r1
   c3ecc:	4611      	mov	r1, r2
   c3ece:	2200      	movs	r2, #0
   c3ed0:	602a      	str	r2, [r5, #0]
   c3ed2:	461a      	mov	r2, r3
   c3ed4:	f7f9 f8a2 	bl	bd01c <_lseek>
   c3ed8:	1c43      	adds	r3, r0, #1
   c3eda:	d102      	bne.n	c3ee2 <_lseek_r+0x1e>
   c3edc:	682b      	ldr	r3, [r5, #0]
   c3ede:	b103      	cbz	r3, c3ee2 <_lseek_r+0x1e>
   c3ee0:	6023      	str	r3, [r4, #0]
   c3ee2:	bd38      	pop	{r3, r4, r5, pc}
   c3ee4:	2003e7f0 	.word	0x2003e7f0

000c3ee8 <__ascii_mbtowc>:
   c3ee8:	b082      	sub	sp, #8
   c3eea:	b901      	cbnz	r1, c3eee <__ascii_mbtowc+0x6>
   c3eec:	a901      	add	r1, sp, #4
   c3eee:	b142      	cbz	r2, c3f02 <__ascii_mbtowc+0x1a>
   c3ef0:	b14b      	cbz	r3, c3f06 <__ascii_mbtowc+0x1e>
   c3ef2:	7813      	ldrb	r3, [r2, #0]
   c3ef4:	600b      	str	r3, [r1, #0]
   c3ef6:	7812      	ldrb	r2, [r2, #0]
   c3ef8:	1e10      	subs	r0, r2, #0
   c3efa:	bf18      	it	ne
   c3efc:	2001      	movne	r0, #1
   c3efe:	b002      	add	sp, #8
   c3f00:	4770      	bx	lr
   c3f02:	4610      	mov	r0, r2
   c3f04:	e7fb      	b.n	c3efe <__ascii_mbtowc+0x16>
   c3f06:	f06f 0001 	mvn.w	r0, #1
   c3f0a:	e7f8      	b.n	c3efe <__ascii_mbtowc+0x16>

000c3f0c <_Balloc>:
   c3f0c:	b570      	push	{r4, r5, r6, lr}
   c3f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3f10:	4604      	mov	r4, r0
   c3f12:	460d      	mov	r5, r1
   c3f14:	b976      	cbnz	r6, c3f34 <_Balloc+0x28>
   c3f16:	2010      	movs	r0, #16
   c3f18:	f7f9 fac4 	bl	bd4a4 <malloc>
   c3f1c:	4602      	mov	r2, r0
   c3f1e:	6260      	str	r0, [r4, #36]	; 0x24
   c3f20:	b920      	cbnz	r0, c3f2c <_Balloc+0x20>
   c3f22:	4b18      	ldr	r3, [pc, #96]	; (c3f84 <_Balloc+0x78>)
   c3f24:	4818      	ldr	r0, [pc, #96]	; (c3f88 <_Balloc+0x7c>)
   c3f26:	2166      	movs	r1, #102	; 0x66
   c3f28:	f7f9 fb0c 	bl	bd544 <__assert_func>
   c3f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3f30:	6006      	str	r6, [r0, #0]
   c3f32:	60c6      	str	r6, [r0, #12]
   c3f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c3f36:	68f3      	ldr	r3, [r6, #12]
   c3f38:	b183      	cbz	r3, c3f5c <_Balloc+0x50>
   c3f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c3f3c:	68db      	ldr	r3, [r3, #12]
   c3f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c3f42:	b9b8      	cbnz	r0, c3f74 <_Balloc+0x68>
   c3f44:	2101      	movs	r1, #1
   c3f46:	fa01 f605 	lsl.w	r6, r1, r5
   c3f4a:	1d72      	adds	r2, r6, #5
   c3f4c:	0092      	lsls	r2, r2, #2
   c3f4e:	4620      	mov	r0, r4
   c3f50:	f7fe fb18 	bl	c2584 <_calloc_r>
   c3f54:	b160      	cbz	r0, c3f70 <_Balloc+0x64>
   c3f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c3f5a:	e00e      	b.n	c3f7a <_Balloc+0x6e>
   c3f5c:	2221      	movs	r2, #33	; 0x21
   c3f5e:	2104      	movs	r1, #4
   c3f60:	4620      	mov	r0, r4
   c3f62:	f7fe fb0f 	bl	c2584 <_calloc_r>
   c3f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c3f68:	60f0      	str	r0, [r6, #12]
   c3f6a:	68db      	ldr	r3, [r3, #12]
   c3f6c:	2b00      	cmp	r3, #0
   c3f6e:	d1e4      	bne.n	c3f3a <_Balloc+0x2e>
   c3f70:	2000      	movs	r0, #0
   c3f72:	bd70      	pop	{r4, r5, r6, pc}
   c3f74:	6802      	ldr	r2, [r0, #0]
   c3f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c3f7a:	2300      	movs	r3, #0
   c3f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c3f80:	e7f7      	b.n	c3f72 <_Balloc+0x66>
   c3f82:	bf00      	nop
   c3f84:	000c6a31 	.word	0x000c6a31
   c3f88:	000c6cd8 	.word	0x000c6cd8

000c3f8c <_Bfree>:
   c3f8c:	b570      	push	{r4, r5, r6, lr}
   c3f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3f90:	4605      	mov	r5, r0
   c3f92:	460c      	mov	r4, r1
   c3f94:	b976      	cbnz	r6, c3fb4 <_Bfree+0x28>
   c3f96:	2010      	movs	r0, #16
   c3f98:	f7f9 fa84 	bl	bd4a4 <malloc>
   c3f9c:	4602      	mov	r2, r0
   c3f9e:	6268      	str	r0, [r5, #36]	; 0x24
   c3fa0:	b920      	cbnz	r0, c3fac <_Bfree+0x20>
   c3fa2:	4b09      	ldr	r3, [pc, #36]	; (c3fc8 <_Bfree+0x3c>)
   c3fa4:	4809      	ldr	r0, [pc, #36]	; (c3fcc <_Bfree+0x40>)
   c3fa6:	218a      	movs	r1, #138	; 0x8a
   c3fa8:	f7f9 facc 	bl	bd544 <__assert_func>
   c3fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3fb0:	6006      	str	r6, [r0, #0]
   c3fb2:	60c6      	str	r6, [r0, #12]
   c3fb4:	b13c      	cbz	r4, c3fc6 <_Bfree+0x3a>
   c3fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c3fb8:	6862      	ldr	r2, [r4, #4]
   c3fba:	68db      	ldr	r3, [r3, #12]
   c3fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c3fc0:	6021      	str	r1, [r4, #0]
   c3fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c3fc6:	bd70      	pop	{r4, r5, r6, pc}
   c3fc8:	000c6a31 	.word	0x000c6a31
   c3fcc:	000c6cd8 	.word	0x000c6cd8

000c3fd0 <__multadd>:
   c3fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c3fd4:	690d      	ldr	r5, [r1, #16]
   c3fd6:	4607      	mov	r7, r0
   c3fd8:	460c      	mov	r4, r1
   c3fda:	461e      	mov	r6, r3
   c3fdc:	f101 0c14 	add.w	ip, r1, #20
   c3fe0:	2000      	movs	r0, #0
   c3fe2:	f8dc 3000 	ldr.w	r3, [ip]
   c3fe6:	b299      	uxth	r1, r3
   c3fe8:	fb02 6101 	mla	r1, r2, r1, r6
   c3fec:	0c1e      	lsrs	r6, r3, #16
   c3fee:	0c0b      	lsrs	r3, r1, #16
   c3ff0:	fb02 3306 	mla	r3, r2, r6, r3
   c3ff4:	b289      	uxth	r1, r1
   c3ff6:	3001      	adds	r0, #1
   c3ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c3ffc:	4285      	cmp	r5, r0
   c3ffe:	f84c 1b04 	str.w	r1, [ip], #4
   c4002:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c4006:	dcec      	bgt.n	c3fe2 <__multadd+0x12>
   c4008:	b30e      	cbz	r6, c404e <__multadd+0x7e>
   c400a:	68a3      	ldr	r3, [r4, #8]
   c400c:	42ab      	cmp	r3, r5
   c400e:	dc19      	bgt.n	c4044 <__multadd+0x74>
   c4010:	6861      	ldr	r1, [r4, #4]
   c4012:	4638      	mov	r0, r7
   c4014:	3101      	adds	r1, #1
   c4016:	f7ff ff79 	bl	c3f0c <_Balloc>
   c401a:	4680      	mov	r8, r0
   c401c:	b928      	cbnz	r0, c402a <__multadd+0x5a>
   c401e:	4602      	mov	r2, r0
   c4020:	4b0c      	ldr	r3, [pc, #48]	; (c4054 <__multadd+0x84>)
   c4022:	480d      	ldr	r0, [pc, #52]	; (c4058 <__multadd+0x88>)
   c4024:	21b5      	movs	r1, #181	; 0xb5
   c4026:	f7f9 fa8d 	bl	bd544 <__assert_func>
   c402a:	6922      	ldr	r2, [r4, #16]
   c402c:	3202      	adds	r2, #2
   c402e:	f104 010c 	add.w	r1, r4, #12
   c4032:	0092      	lsls	r2, r2, #2
   c4034:	300c      	adds	r0, #12
   c4036:	f7fe fa75 	bl	c2524 <memcpy>
   c403a:	4621      	mov	r1, r4
   c403c:	4638      	mov	r0, r7
   c403e:	f7ff ffa5 	bl	c3f8c <_Bfree>
   c4042:	4644      	mov	r4, r8
   c4044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c4048:	3501      	adds	r5, #1
   c404a:	615e      	str	r6, [r3, #20]
   c404c:	6125      	str	r5, [r4, #16]
   c404e:	4620      	mov	r0, r4
   c4050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c4054:	000c6c51 	.word	0x000c6c51
   c4058:	000c6cd8 	.word	0x000c6cd8

000c405c <__s2b>:
   c405c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4060:	460c      	mov	r4, r1
   c4062:	4615      	mov	r5, r2
   c4064:	461f      	mov	r7, r3
   c4066:	2209      	movs	r2, #9
   c4068:	3308      	adds	r3, #8
   c406a:	4606      	mov	r6, r0
   c406c:	fb93 f3f2 	sdiv	r3, r3, r2
   c4070:	2100      	movs	r1, #0
   c4072:	2201      	movs	r2, #1
   c4074:	429a      	cmp	r2, r3
   c4076:	db09      	blt.n	c408c <__s2b+0x30>
   c4078:	4630      	mov	r0, r6
   c407a:	f7ff ff47 	bl	c3f0c <_Balloc>
   c407e:	b940      	cbnz	r0, c4092 <__s2b+0x36>
   c4080:	4602      	mov	r2, r0
   c4082:	4b19      	ldr	r3, [pc, #100]	; (c40e8 <__s2b+0x8c>)
   c4084:	4819      	ldr	r0, [pc, #100]	; (c40ec <__s2b+0x90>)
   c4086:	21ce      	movs	r1, #206	; 0xce
   c4088:	f7f9 fa5c 	bl	bd544 <__assert_func>
   c408c:	0052      	lsls	r2, r2, #1
   c408e:	3101      	adds	r1, #1
   c4090:	e7f0      	b.n	c4074 <__s2b+0x18>
   c4092:	9b08      	ldr	r3, [sp, #32]
   c4094:	6143      	str	r3, [r0, #20]
   c4096:	2d09      	cmp	r5, #9
   c4098:	f04f 0301 	mov.w	r3, #1
   c409c:	6103      	str	r3, [r0, #16]
   c409e:	dd16      	ble.n	c40ce <__s2b+0x72>
   c40a0:	f104 0909 	add.w	r9, r4, #9
   c40a4:	46c8      	mov	r8, r9
   c40a6:	442c      	add	r4, r5
   c40a8:	f818 3b01 	ldrb.w	r3, [r8], #1
   c40ac:	4601      	mov	r1, r0
   c40ae:	3b30      	subs	r3, #48	; 0x30
   c40b0:	220a      	movs	r2, #10
   c40b2:	4630      	mov	r0, r6
   c40b4:	f7ff ff8c 	bl	c3fd0 <__multadd>
   c40b8:	45a0      	cmp	r8, r4
   c40ba:	d1f5      	bne.n	c40a8 <__s2b+0x4c>
   c40bc:	f1a5 0408 	sub.w	r4, r5, #8
   c40c0:	444c      	add	r4, r9
   c40c2:	1b2d      	subs	r5, r5, r4
   c40c4:	1963      	adds	r3, r4, r5
   c40c6:	42bb      	cmp	r3, r7
   c40c8:	db04      	blt.n	c40d4 <__s2b+0x78>
   c40ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c40ce:	340a      	adds	r4, #10
   c40d0:	2509      	movs	r5, #9
   c40d2:	e7f6      	b.n	c40c2 <__s2b+0x66>
   c40d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c40d8:	4601      	mov	r1, r0
   c40da:	3b30      	subs	r3, #48	; 0x30
   c40dc:	220a      	movs	r2, #10
   c40de:	4630      	mov	r0, r6
   c40e0:	f7ff ff76 	bl	c3fd0 <__multadd>
   c40e4:	e7ee      	b.n	c40c4 <__s2b+0x68>
   c40e6:	bf00      	nop
   c40e8:	000c6c51 	.word	0x000c6c51
   c40ec:	000c6cd8 	.word	0x000c6cd8

000c40f0 <__hi0bits>:
   c40f0:	0c03      	lsrs	r3, r0, #16
   c40f2:	041b      	lsls	r3, r3, #16
   c40f4:	b9d3      	cbnz	r3, c412c <__hi0bits+0x3c>
   c40f6:	0400      	lsls	r0, r0, #16
   c40f8:	2310      	movs	r3, #16
   c40fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c40fe:	bf04      	itt	eq
   c4100:	0200      	lsleq	r0, r0, #8
   c4102:	3308      	addeq	r3, #8
   c4104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c4108:	bf04      	itt	eq
   c410a:	0100      	lsleq	r0, r0, #4
   c410c:	3304      	addeq	r3, #4
   c410e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c4112:	bf04      	itt	eq
   c4114:	0080      	lsleq	r0, r0, #2
   c4116:	3302      	addeq	r3, #2
   c4118:	2800      	cmp	r0, #0
   c411a:	db05      	blt.n	c4128 <__hi0bits+0x38>
   c411c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c4120:	f103 0301 	add.w	r3, r3, #1
   c4124:	bf08      	it	eq
   c4126:	2320      	moveq	r3, #32
   c4128:	4618      	mov	r0, r3
   c412a:	4770      	bx	lr
   c412c:	2300      	movs	r3, #0
   c412e:	e7e4      	b.n	c40fa <__hi0bits+0xa>

000c4130 <__lo0bits>:
   c4130:	6803      	ldr	r3, [r0, #0]
   c4132:	f013 0207 	ands.w	r2, r3, #7
   c4136:	4601      	mov	r1, r0
   c4138:	d00b      	beq.n	c4152 <__lo0bits+0x22>
   c413a:	07da      	lsls	r2, r3, #31
   c413c:	d423      	bmi.n	c4186 <__lo0bits+0x56>
   c413e:	0798      	lsls	r0, r3, #30
   c4140:	bf49      	itett	mi
   c4142:	085b      	lsrmi	r3, r3, #1
   c4144:	089b      	lsrpl	r3, r3, #2
   c4146:	2001      	movmi	r0, #1
   c4148:	600b      	strmi	r3, [r1, #0]
   c414a:	bf5c      	itt	pl
   c414c:	600b      	strpl	r3, [r1, #0]
   c414e:	2002      	movpl	r0, #2
   c4150:	4770      	bx	lr
   c4152:	b298      	uxth	r0, r3
   c4154:	b9a8      	cbnz	r0, c4182 <__lo0bits+0x52>
   c4156:	0c1b      	lsrs	r3, r3, #16
   c4158:	2010      	movs	r0, #16
   c415a:	b2da      	uxtb	r2, r3
   c415c:	b90a      	cbnz	r2, c4162 <__lo0bits+0x32>
   c415e:	3008      	adds	r0, #8
   c4160:	0a1b      	lsrs	r3, r3, #8
   c4162:	071a      	lsls	r2, r3, #28
   c4164:	bf04      	itt	eq
   c4166:	091b      	lsreq	r3, r3, #4
   c4168:	3004      	addeq	r0, #4
   c416a:	079a      	lsls	r2, r3, #30
   c416c:	bf04      	itt	eq
   c416e:	089b      	lsreq	r3, r3, #2
   c4170:	3002      	addeq	r0, #2
   c4172:	07da      	lsls	r2, r3, #31
   c4174:	d403      	bmi.n	c417e <__lo0bits+0x4e>
   c4176:	085b      	lsrs	r3, r3, #1
   c4178:	f100 0001 	add.w	r0, r0, #1
   c417c:	d005      	beq.n	c418a <__lo0bits+0x5a>
   c417e:	600b      	str	r3, [r1, #0]
   c4180:	4770      	bx	lr
   c4182:	4610      	mov	r0, r2
   c4184:	e7e9      	b.n	c415a <__lo0bits+0x2a>
   c4186:	2000      	movs	r0, #0
   c4188:	4770      	bx	lr
   c418a:	2020      	movs	r0, #32
   c418c:	4770      	bx	lr
	...

000c4190 <__i2b>:
   c4190:	b510      	push	{r4, lr}
   c4192:	460c      	mov	r4, r1
   c4194:	2101      	movs	r1, #1
   c4196:	f7ff feb9 	bl	c3f0c <_Balloc>
   c419a:	4602      	mov	r2, r0
   c419c:	b928      	cbnz	r0, c41aa <__i2b+0x1a>
   c419e:	4b05      	ldr	r3, [pc, #20]	; (c41b4 <__i2b+0x24>)
   c41a0:	4805      	ldr	r0, [pc, #20]	; (c41b8 <__i2b+0x28>)
   c41a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c41a6:	f7f9 f9cd 	bl	bd544 <__assert_func>
   c41aa:	2301      	movs	r3, #1
   c41ac:	6144      	str	r4, [r0, #20]
   c41ae:	6103      	str	r3, [r0, #16]
   c41b0:	bd10      	pop	{r4, pc}
   c41b2:	bf00      	nop
   c41b4:	000c6c51 	.word	0x000c6c51
   c41b8:	000c6cd8 	.word	0x000c6cd8

000c41bc <__multiply>:
   c41bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c41c0:	4691      	mov	r9, r2
   c41c2:	690a      	ldr	r2, [r1, #16]
   c41c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c41c8:	429a      	cmp	r2, r3
   c41ca:	bfb8      	it	lt
   c41cc:	460b      	movlt	r3, r1
   c41ce:	460c      	mov	r4, r1
   c41d0:	bfbc      	itt	lt
   c41d2:	464c      	movlt	r4, r9
   c41d4:	4699      	movlt	r9, r3
   c41d6:	6927      	ldr	r7, [r4, #16]
   c41d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c41dc:	68a3      	ldr	r3, [r4, #8]
   c41de:	6861      	ldr	r1, [r4, #4]
   c41e0:	eb07 060a 	add.w	r6, r7, sl
   c41e4:	42b3      	cmp	r3, r6
   c41e6:	b085      	sub	sp, #20
   c41e8:	bfb8      	it	lt
   c41ea:	3101      	addlt	r1, #1
   c41ec:	f7ff fe8e 	bl	c3f0c <_Balloc>
   c41f0:	b930      	cbnz	r0, c4200 <__multiply+0x44>
   c41f2:	4602      	mov	r2, r0
   c41f4:	4b44      	ldr	r3, [pc, #272]	; (c4308 <__multiply+0x14c>)
   c41f6:	4845      	ldr	r0, [pc, #276]	; (c430c <__multiply+0x150>)
   c41f8:	f240 115d 	movw	r1, #349	; 0x15d
   c41fc:	f7f9 f9a2 	bl	bd544 <__assert_func>
   c4200:	f100 0514 	add.w	r5, r0, #20
   c4204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c4208:	462b      	mov	r3, r5
   c420a:	2200      	movs	r2, #0
   c420c:	4543      	cmp	r3, r8
   c420e:	d321      	bcc.n	c4254 <__multiply+0x98>
   c4210:	f104 0314 	add.w	r3, r4, #20
   c4214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c4218:	f109 0314 	add.w	r3, r9, #20
   c421c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c4220:	9202      	str	r2, [sp, #8]
   c4222:	1b3a      	subs	r2, r7, r4
   c4224:	3a15      	subs	r2, #21
   c4226:	f022 0203 	bic.w	r2, r2, #3
   c422a:	3204      	adds	r2, #4
   c422c:	f104 0115 	add.w	r1, r4, #21
   c4230:	428f      	cmp	r7, r1
   c4232:	bf38      	it	cc
   c4234:	2204      	movcc	r2, #4
   c4236:	9201      	str	r2, [sp, #4]
   c4238:	9a02      	ldr	r2, [sp, #8]
   c423a:	9303      	str	r3, [sp, #12]
   c423c:	429a      	cmp	r2, r3
   c423e:	d80c      	bhi.n	c425a <__multiply+0x9e>
   c4240:	2e00      	cmp	r6, #0
   c4242:	dd03      	ble.n	c424c <__multiply+0x90>
   c4244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c4248:	2b00      	cmp	r3, #0
   c424a:	d05a      	beq.n	c4302 <__multiply+0x146>
   c424c:	6106      	str	r6, [r0, #16]
   c424e:	b005      	add	sp, #20
   c4250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4254:	f843 2b04 	str.w	r2, [r3], #4
   c4258:	e7d8      	b.n	c420c <__multiply+0x50>
   c425a:	f8b3 a000 	ldrh.w	sl, [r3]
   c425e:	f1ba 0f00 	cmp.w	sl, #0
   c4262:	d024      	beq.n	c42ae <__multiply+0xf2>
   c4264:	f104 0e14 	add.w	lr, r4, #20
   c4268:	46a9      	mov	r9, r5
   c426a:	f04f 0c00 	mov.w	ip, #0
   c426e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c4272:	f8d9 1000 	ldr.w	r1, [r9]
   c4276:	fa1f fb82 	uxth.w	fp, r2
   c427a:	b289      	uxth	r1, r1
   c427c:	fb0a 110b 	mla	r1, sl, fp, r1
   c4280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c4284:	f8d9 2000 	ldr.w	r2, [r9]
   c4288:	4461      	add	r1, ip
   c428a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c428e:	fb0a c20b 	mla	r2, sl, fp, ip
   c4292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c4296:	b289      	uxth	r1, r1
   c4298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c429c:	4577      	cmp	r7, lr
   c429e:	f849 1b04 	str.w	r1, [r9], #4
   c42a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c42a6:	d8e2      	bhi.n	c426e <__multiply+0xb2>
   c42a8:	9a01      	ldr	r2, [sp, #4]
   c42aa:	f845 c002 	str.w	ip, [r5, r2]
   c42ae:	9a03      	ldr	r2, [sp, #12]
   c42b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c42b4:	3304      	adds	r3, #4
   c42b6:	f1b9 0f00 	cmp.w	r9, #0
   c42ba:	d020      	beq.n	c42fe <__multiply+0x142>
   c42bc:	6829      	ldr	r1, [r5, #0]
   c42be:	f104 0c14 	add.w	ip, r4, #20
   c42c2:	46ae      	mov	lr, r5
   c42c4:	f04f 0a00 	mov.w	sl, #0
   c42c8:	f8bc b000 	ldrh.w	fp, [ip]
   c42cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c42d0:	fb09 220b 	mla	r2, r9, fp, r2
   c42d4:	4492      	add	sl, r2
   c42d6:	b289      	uxth	r1, r1
   c42d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c42dc:	f84e 1b04 	str.w	r1, [lr], #4
   c42e0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c42e4:	f8be 1000 	ldrh.w	r1, [lr]
   c42e8:	0c12      	lsrs	r2, r2, #16
   c42ea:	fb09 1102 	mla	r1, r9, r2, r1
   c42ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c42f2:	4567      	cmp	r7, ip
   c42f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c42f8:	d8e6      	bhi.n	c42c8 <__multiply+0x10c>
   c42fa:	9a01      	ldr	r2, [sp, #4]
   c42fc:	50a9      	str	r1, [r5, r2]
   c42fe:	3504      	adds	r5, #4
   c4300:	e79a      	b.n	c4238 <__multiply+0x7c>
   c4302:	3e01      	subs	r6, #1
   c4304:	e79c      	b.n	c4240 <__multiply+0x84>
   c4306:	bf00      	nop
   c4308:	000c6c51 	.word	0x000c6c51
   c430c:	000c6cd8 	.word	0x000c6cd8

000c4310 <__pow5mult>:
   c4310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4314:	4615      	mov	r5, r2
   c4316:	f012 0203 	ands.w	r2, r2, #3
   c431a:	4606      	mov	r6, r0
   c431c:	460f      	mov	r7, r1
   c431e:	d007      	beq.n	c4330 <__pow5mult+0x20>
   c4320:	4c25      	ldr	r4, [pc, #148]	; (c43b8 <__pow5mult+0xa8>)
   c4322:	3a01      	subs	r2, #1
   c4324:	2300      	movs	r3, #0
   c4326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c432a:	f7ff fe51 	bl	c3fd0 <__multadd>
   c432e:	4607      	mov	r7, r0
   c4330:	10ad      	asrs	r5, r5, #2
   c4332:	d03d      	beq.n	c43b0 <__pow5mult+0xa0>
   c4334:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c4336:	b97c      	cbnz	r4, c4358 <__pow5mult+0x48>
   c4338:	2010      	movs	r0, #16
   c433a:	f7f9 f8b3 	bl	bd4a4 <malloc>
   c433e:	4602      	mov	r2, r0
   c4340:	6270      	str	r0, [r6, #36]	; 0x24
   c4342:	b928      	cbnz	r0, c4350 <__pow5mult+0x40>
   c4344:	4b1d      	ldr	r3, [pc, #116]	; (c43bc <__pow5mult+0xac>)
   c4346:	481e      	ldr	r0, [pc, #120]	; (c43c0 <__pow5mult+0xb0>)
   c4348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c434c:	f7f9 f8fa 	bl	bd544 <__assert_func>
   c4350:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c4354:	6004      	str	r4, [r0, #0]
   c4356:	60c4      	str	r4, [r0, #12]
   c4358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c435c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c4360:	b94c      	cbnz	r4, c4376 <__pow5mult+0x66>
   c4362:	f240 2171 	movw	r1, #625	; 0x271
   c4366:	4630      	mov	r0, r6
   c4368:	f7ff ff12 	bl	c4190 <__i2b>
   c436c:	2300      	movs	r3, #0
   c436e:	f8c8 0008 	str.w	r0, [r8, #8]
   c4372:	4604      	mov	r4, r0
   c4374:	6003      	str	r3, [r0, #0]
   c4376:	f04f 0900 	mov.w	r9, #0
   c437a:	07eb      	lsls	r3, r5, #31
   c437c:	d50a      	bpl.n	c4394 <__pow5mult+0x84>
   c437e:	4639      	mov	r1, r7
   c4380:	4622      	mov	r2, r4
   c4382:	4630      	mov	r0, r6
   c4384:	f7ff ff1a 	bl	c41bc <__multiply>
   c4388:	4639      	mov	r1, r7
   c438a:	4680      	mov	r8, r0
   c438c:	4630      	mov	r0, r6
   c438e:	f7ff fdfd 	bl	c3f8c <_Bfree>
   c4392:	4647      	mov	r7, r8
   c4394:	106d      	asrs	r5, r5, #1
   c4396:	d00b      	beq.n	c43b0 <__pow5mult+0xa0>
   c4398:	6820      	ldr	r0, [r4, #0]
   c439a:	b938      	cbnz	r0, c43ac <__pow5mult+0x9c>
   c439c:	4622      	mov	r2, r4
   c439e:	4621      	mov	r1, r4
   c43a0:	4630      	mov	r0, r6
   c43a2:	f7ff ff0b 	bl	c41bc <__multiply>
   c43a6:	6020      	str	r0, [r4, #0]
   c43a8:	f8c0 9000 	str.w	r9, [r0]
   c43ac:	4604      	mov	r4, r0
   c43ae:	e7e4      	b.n	c437a <__pow5mult+0x6a>
   c43b0:	4638      	mov	r0, r7
   c43b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c43b6:	bf00      	nop
   c43b8:	000c6e28 	.word	0x000c6e28
   c43bc:	000c6a31 	.word	0x000c6a31
   c43c0:	000c6cd8 	.word	0x000c6cd8

000c43c4 <__lshift>:
   c43c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c43c8:	460c      	mov	r4, r1
   c43ca:	6849      	ldr	r1, [r1, #4]
   c43cc:	6923      	ldr	r3, [r4, #16]
   c43ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c43d2:	68a3      	ldr	r3, [r4, #8]
   c43d4:	4607      	mov	r7, r0
   c43d6:	4691      	mov	r9, r2
   c43d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c43dc:	f108 0601 	add.w	r6, r8, #1
   c43e0:	42b3      	cmp	r3, r6
   c43e2:	db0b      	blt.n	c43fc <__lshift+0x38>
   c43e4:	4638      	mov	r0, r7
   c43e6:	f7ff fd91 	bl	c3f0c <_Balloc>
   c43ea:	4605      	mov	r5, r0
   c43ec:	b948      	cbnz	r0, c4402 <__lshift+0x3e>
   c43ee:	4602      	mov	r2, r0
   c43f0:	4b2a      	ldr	r3, [pc, #168]	; (c449c <__lshift+0xd8>)
   c43f2:	482b      	ldr	r0, [pc, #172]	; (c44a0 <__lshift+0xdc>)
   c43f4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c43f8:	f7f9 f8a4 	bl	bd544 <__assert_func>
   c43fc:	3101      	adds	r1, #1
   c43fe:	005b      	lsls	r3, r3, #1
   c4400:	e7ee      	b.n	c43e0 <__lshift+0x1c>
   c4402:	2300      	movs	r3, #0
   c4404:	f100 0114 	add.w	r1, r0, #20
   c4408:	f100 0210 	add.w	r2, r0, #16
   c440c:	4618      	mov	r0, r3
   c440e:	4553      	cmp	r3, sl
   c4410:	db37      	blt.n	c4482 <__lshift+0xbe>
   c4412:	6920      	ldr	r0, [r4, #16]
   c4414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c4418:	f104 0314 	add.w	r3, r4, #20
   c441c:	f019 091f 	ands.w	r9, r9, #31
   c4420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c4424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c4428:	d02f      	beq.n	c448a <__lshift+0xc6>
   c442a:	f1c9 0e20 	rsb	lr, r9, #32
   c442e:	468a      	mov	sl, r1
   c4430:	f04f 0c00 	mov.w	ip, #0
   c4434:	681a      	ldr	r2, [r3, #0]
   c4436:	fa02 f209 	lsl.w	r2, r2, r9
   c443a:	ea42 020c 	orr.w	r2, r2, ip
   c443e:	f84a 2b04 	str.w	r2, [sl], #4
   c4442:	f853 2b04 	ldr.w	r2, [r3], #4
   c4446:	4298      	cmp	r0, r3
   c4448:	fa22 fc0e 	lsr.w	ip, r2, lr
   c444c:	d8f2      	bhi.n	c4434 <__lshift+0x70>
   c444e:	1b03      	subs	r3, r0, r4
   c4450:	3b15      	subs	r3, #21
   c4452:	f023 0303 	bic.w	r3, r3, #3
   c4456:	3304      	adds	r3, #4
   c4458:	f104 0215 	add.w	r2, r4, #21
   c445c:	4290      	cmp	r0, r2
   c445e:	bf38      	it	cc
   c4460:	2304      	movcc	r3, #4
   c4462:	f841 c003 	str.w	ip, [r1, r3]
   c4466:	f1bc 0f00 	cmp.w	ip, #0
   c446a:	d001      	beq.n	c4470 <__lshift+0xac>
   c446c:	f108 0602 	add.w	r6, r8, #2
   c4470:	3e01      	subs	r6, #1
   c4472:	4638      	mov	r0, r7
   c4474:	612e      	str	r6, [r5, #16]
   c4476:	4621      	mov	r1, r4
   c4478:	f7ff fd88 	bl	c3f8c <_Bfree>
   c447c:	4628      	mov	r0, r5
   c447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c4482:	f842 0f04 	str.w	r0, [r2, #4]!
   c4486:	3301      	adds	r3, #1
   c4488:	e7c1      	b.n	c440e <__lshift+0x4a>
   c448a:	3904      	subs	r1, #4
   c448c:	f853 2b04 	ldr.w	r2, [r3], #4
   c4490:	f841 2f04 	str.w	r2, [r1, #4]!
   c4494:	4298      	cmp	r0, r3
   c4496:	d8f9      	bhi.n	c448c <__lshift+0xc8>
   c4498:	e7ea      	b.n	c4470 <__lshift+0xac>
   c449a:	bf00      	nop
   c449c:	000c6c51 	.word	0x000c6c51
   c44a0:	000c6cd8 	.word	0x000c6cd8

000c44a4 <__mcmp>:
   c44a4:	b530      	push	{r4, r5, lr}
   c44a6:	6902      	ldr	r2, [r0, #16]
   c44a8:	690c      	ldr	r4, [r1, #16]
   c44aa:	1b12      	subs	r2, r2, r4
   c44ac:	d10e      	bne.n	c44cc <__mcmp+0x28>
   c44ae:	f100 0314 	add.w	r3, r0, #20
   c44b2:	3114      	adds	r1, #20
   c44b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c44b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c44bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c44c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c44c4:	42a5      	cmp	r5, r4
   c44c6:	d003      	beq.n	c44d0 <__mcmp+0x2c>
   c44c8:	d305      	bcc.n	c44d6 <__mcmp+0x32>
   c44ca:	2201      	movs	r2, #1
   c44cc:	4610      	mov	r0, r2
   c44ce:	bd30      	pop	{r4, r5, pc}
   c44d0:	4283      	cmp	r3, r0
   c44d2:	d3f3      	bcc.n	c44bc <__mcmp+0x18>
   c44d4:	e7fa      	b.n	c44cc <__mcmp+0x28>
   c44d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c44da:	e7f7      	b.n	c44cc <__mcmp+0x28>

000c44dc <__mdiff>:
   c44dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c44e0:	460c      	mov	r4, r1
   c44e2:	4606      	mov	r6, r0
   c44e4:	4611      	mov	r1, r2
   c44e6:	4620      	mov	r0, r4
   c44e8:	4690      	mov	r8, r2
   c44ea:	f7ff ffdb 	bl	c44a4 <__mcmp>
   c44ee:	1e05      	subs	r5, r0, #0
   c44f0:	d110      	bne.n	c4514 <__mdiff+0x38>
   c44f2:	4629      	mov	r1, r5
   c44f4:	4630      	mov	r0, r6
   c44f6:	f7ff fd09 	bl	c3f0c <_Balloc>
   c44fa:	b930      	cbnz	r0, c450a <__mdiff+0x2e>
   c44fc:	4b3a      	ldr	r3, [pc, #232]	; (c45e8 <__mdiff+0x10c>)
   c44fe:	4602      	mov	r2, r0
   c4500:	f240 2132 	movw	r1, #562	; 0x232
   c4504:	4839      	ldr	r0, [pc, #228]	; (c45ec <__mdiff+0x110>)
   c4506:	f7f9 f81d 	bl	bd544 <__assert_func>
   c450a:	2301      	movs	r3, #1
   c450c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c4510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4514:	bfa4      	itt	ge
   c4516:	4643      	movge	r3, r8
   c4518:	46a0      	movge	r8, r4
   c451a:	4630      	mov	r0, r6
   c451c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c4520:	bfa6      	itte	ge
   c4522:	461c      	movge	r4, r3
   c4524:	2500      	movge	r5, #0
   c4526:	2501      	movlt	r5, #1
   c4528:	f7ff fcf0 	bl	c3f0c <_Balloc>
   c452c:	b920      	cbnz	r0, c4538 <__mdiff+0x5c>
   c452e:	4b2e      	ldr	r3, [pc, #184]	; (c45e8 <__mdiff+0x10c>)
   c4530:	4602      	mov	r2, r0
   c4532:	f44f 7110 	mov.w	r1, #576	; 0x240
   c4536:	e7e5      	b.n	c4504 <__mdiff+0x28>
   c4538:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c453c:	6926      	ldr	r6, [r4, #16]
   c453e:	60c5      	str	r5, [r0, #12]
   c4540:	f104 0914 	add.w	r9, r4, #20
   c4544:	f108 0514 	add.w	r5, r8, #20
   c4548:	f100 0e14 	add.w	lr, r0, #20
   c454c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c4550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c4554:	f108 0210 	add.w	r2, r8, #16
   c4558:	46f2      	mov	sl, lr
   c455a:	2100      	movs	r1, #0
   c455c:	f859 3b04 	ldr.w	r3, [r9], #4
   c4560:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c4564:	fa1f f883 	uxth.w	r8, r3
   c4568:	fa11 f18b 	uxtah	r1, r1, fp
   c456c:	0c1b      	lsrs	r3, r3, #16
   c456e:	eba1 0808 	sub.w	r8, r1, r8
   c4572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c4576:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c457a:	fa1f f888 	uxth.w	r8, r8
   c457e:	1419      	asrs	r1, r3, #16
   c4580:	454e      	cmp	r6, r9
   c4582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c4586:	f84a 3b04 	str.w	r3, [sl], #4
   c458a:	d8e7      	bhi.n	c455c <__mdiff+0x80>
   c458c:	1b33      	subs	r3, r6, r4
   c458e:	3b15      	subs	r3, #21
   c4590:	f023 0303 	bic.w	r3, r3, #3
   c4594:	3304      	adds	r3, #4
   c4596:	3415      	adds	r4, #21
   c4598:	42a6      	cmp	r6, r4
   c459a:	bf38      	it	cc
   c459c:	2304      	movcc	r3, #4
   c459e:	441d      	add	r5, r3
   c45a0:	4473      	add	r3, lr
   c45a2:	469e      	mov	lr, r3
   c45a4:	462e      	mov	r6, r5
   c45a6:	4566      	cmp	r6, ip
   c45a8:	d30e      	bcc.n	c45c8 <__mdiff+0xec>
   c45aa:	f10c 0203 	add.w	r2, ip, #3
   c45ae:	1b52      	subs	r2, r2, r5
   c45b0:	f022 0203 	bic.w	r2, r2, #3
   c45b4:	3d03      	subs	r5, #3
   c45b6:	45ac      	cmp	ip, r5
   c45b8:	bf38      	it	cc
   c45ba:	2200      	movcc	r2, #0
   c45bc:	441a      	add	r2, r3
   c45be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c45c2:	b17b      	cbz	r3, c45e4 <__mdiff+0x108>
   c45c4:	6107      	str	r7, [r0, #16]
   c45c6:	e7a3      	b.n	c4510 <__mdiff+0x34>
   c45c8:	f856 8b04 	ldr.w	r8, [r6], #4
   c45cc:	fa11 f288 	uxtah	r2, r1, r8
   c45d0:	1414      	asrs	r4, r2, #16
   c45d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c45d6:	b292      	uxth	r2, r2
   c45d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c45dc:	f84e 2b04 	str.w	r2, [lr], #4
   c45e0:	1421      	asrs	r1, r4, #16
   c45e2:	e7e0      	b.n	c45a6 <__mdiff+0xca>
   c45e4:	3f01      	subs	r7, #1
   c45e6:	e7ea      	b.n	c45be <__mdiff+0xe2>
   c45e8:	000c6c51 	.word	0x000c6c51
   c45ec:	000c6cd8 	.word	0x000c6cd8

000c45f0 <__ulp>:
   c45f0:	b082      	sub	sp, #8
   c45f2:	ed8d 0b00 	vstr	d0, [sp]
   c45f6:	9b01      	ldr	r3, [sp, #4]
   c45f8:	4912      	ldr	r1, [pc, #72]	; (c4644 <__ulp+0x54>)
   c45fa:	4019      	ands	r1, r3
   c45fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c4600:	2900      	cmp	r1, #0
   c4602:	dd05      	ble.n	c4610 <__ulp+0x20>
   c4604:	2200      	movs	r2, #0
   c4606:	460b      	mov	r3, r1
   c4608:	ec43 2b10 	vmov	d0, r2, r3
   c460c:	b002      	add	sp, #8
   c460e:	4770      	bx	lr
   c4610:	4249      	negs	r1, r1
   c4612:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c4616:	ea4f 5021 	mov.w	r0, r1, asr #20
   c461a:	f04f 0200 	mov.w	r2, #0
   c461e:	f04f 0300 	mov.w	r3, #0
   c4622:	da04      	bge.n	c462e <__ulp+0x3e>
   c4624:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c4628:	fa41 f300 	asr.w	r3, r1, r0
   c462c:	e7ec      	b.n	c4608 <__ulp+0x18>
   c462e:	f1a0 0114 	sub.w	r1, r0, #20
   c4632:	291e      	cmp	r1, #30
   c4634:	bfda      	itte	le
   c4636:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c463a:	fa20 f101 	lsrle.w	r1, r0, r1
   c463e:	2101      	movgt	r1, #1
   c4640:	460a      	mov	r2, r1
   c4642:	e7e1      	b.n	c4608 <__ulp+0x18>
   c4644:	7ff00000 	.word	0x7ff00000

000c4648 <__b2d>:
   c4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c464a:	6905      	ldr	r5, [r0, #16]
   c464c:	f100 0714 	add.w	r7, r0, #20
   c4650:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c4654:	1f2e      	subs	r6, r5, #4
   c4656:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c465a:	4620      	mov	r0, r4
   c465c:	f7ff fd48 	bl	c40f0 <__hi0bits>
   c4660:	f1c0 0320 	rsb	r3, r0, #32
   c4664:	280a      	cmp	r0, #10
   c4666:	f8df c07c 	ldr.w	ip, [pc, #124]	; c46e4 <__b2d+0x9c>
   c466a:	600b      	str	r3, [r1, #0]
   c466c:	dc14      	bgt.n	c4698 <__b2d+0x50>
   c466e:	f1c0 0e0b 	rsb	lr, r0, #11
   c4672:	fa24 f10e 	lsr.w	r1, r4, lr
   c4676:	42b7      	cmp	r7, r6
   c4678:	ea41 030c 	orr.w	r3, r1, ip
   c467c:	bf34      	ite	cc
   c467e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4682:	2100      	movcs	r1, #0
   c4684:	3015      	adds	r0, #21
   c4686:	fa04 f000 	lsl.w	r0, r4, r0
   c468a:	fa21 f10e 	lsr.w	r1, r1, lr
   c468e:	ea40 0201 	orr.w	r2, r0, r1
   c4692:	ec43 2b10 	vmov	d0, r2, r3
   c4696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c4698:	42b7      	cmp	r7, r6
   c469a:	bf3a      	itte	cc
   c469c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c46a0:	f1a5 0608 	subcc.w	r6, r5, #8
   c46a4:	2100      	movcs	r1, #0
   c46a6:	380b      	subs	r0, #11
   c46a8:	d017      	beq.n	c46da <__b2d+0x92>
   c46aa:	f1c0 0c20 	rsb	ip, r0, #32
   c46ae:	fa04 f500 	lsl.w	r5, r4, r0
   c46b2:	42be      	cmp	r6, r7
   c46b4:	fa21 f40c 	lsr.w	r4, r1, ip
   c46b8:	ea45 0504 	orr.w	r5, r5, r4
   c46bc:	bf8c      	ite	hi
   c46be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c46c2:	2400      	movls	r4, #0
   c46c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c46c8:	fa01 f000 	lsl.w	r0, r1, r0
   c46cc:	fa24 f40c 	lsr.w	r4, r4, ip
   c46d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c46d4:	ea40 0204 	orr.w	r2, r0, r4
   c46d8:	e7db      	b.n	c4692 <__b2d+0x4a>
   c46da:	ea44 030c 	orr.w	r3, r4, ip
   c46de:	460a      	mov	r2, r1
   c46e0:	e7d7      	b.n	c4692 <__b2d+0x4a>
   c46e2:	bf00      	nop
   c46e4:	3ff00000 	.word	0x3ff00000

000c46e8 <__d2b>:
   c46e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c46ec:	4689      	mov	r9, r1
   c46ee:	2101      	movs	r1, #1
   c46f0:	ec57 6b10 	vmov	r6, r7, d0
   c46f4:	4690      	mov	r8, r2
   c46f6:	f7ff fc09 	bl	c3f0c <_Balloc>
   c46fa:	4604      	mov	r4, r0
   c46fc:	b930      	cbnz	r0, c470c <__d2b+0x24>
   c46fe:	4602      	mov	r2, r0
   c4700:	4b25      	ldr	r3, [pc, #148]	; (c4798 <__d2b+0xb0>)
   c4702:	4826      	ldr	r0, [pc, #152]	; (c479c <__d2b+0xb4>)
   c4704:	f240 310a 	movw	r1, #778	; 0x30a
   c4708:	f7f8 ff1c 	bl	bd544 <__assert_func>
   c470c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c4710:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c4714:	bb35      	cbnz	r5, c4764 <__d2b+0x7c>
   c4716:	2e00      	cmp	r6, #0
   c4718:	9301      	str	r3, [sp, #4]
   c471a:	d028      	beq.n	c476e <__d2b+0x86>
   c471c:	4668      	mov	r0, sp
   c471e:	9600      	str	r6, [sp, #0]
   c4720:	f7ff fd06 	bl	c4130 <__lo0bits>
   c4724:	9900      	ldr	r1, [sp, #0]
   c4726:	b300      	cbz	r0, c476a <__d2b+0x82>
   c4728:	9a01      	ldr	r2, [sp, #4]
   c472a:	f1c0 0320 	rsb	r3, r0, #32
   c472e:	fa02 f303 	lsl.w	r3, r2, r3
   c4732:	430b      	orrs	r3, r1
   c4734:	40c2      	lsrs	r2, r0
   c4736:	6163      	str	r3, [r4, #20]
   c4738:	9201      	str	r2, [sp, #4]
   c473a:	9b01      	ldr	r3, [sp, #4]
   c473c:	61a3      	str	r3, [r4, #24]
   c473e:	2b00      	cmp	r3, #0
   c4740:	bf14      	ite	ne
   c4742:	2202      	movne	r2, #2
   c4744:	2201      	moveq	r2, #1
   c4746:	6122      	str	r2, [r4, #16]
   c4748:	b1d5      	cbz	r5, c4780 <__d2b+0x98>
   c474a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c474e:	4405      	add	r5, r0
   c4750:	f8c9 5000 	str.w	r5, [r9]
   c4754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c4758:	f8c8 0000 	str.w	r0, [r8]
   c475c:	4620      	mov	r0, r4
   c475e:	b003      	add	sp, #12
   c4760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c4768:	e7d5      	b.n	c4716 <__d2b+0x2e>
   c476a:	6161      	str	r1, [r4, #20]
   c476c:	e7e5      	b.n	c473a <__d2b+0x52>
   c476e:	a801      	add	r0, sp, #4
   c4770:	f7ff fcde 	bl	c4130 <__lo0bits>
   c4774:	9b01      	ldr	r3, [sp, #4]
   c4776:	6163      	str	r3, [r4, #20]
   c4778:	2201      	movs	r2, #1
   c477a:	6122      	str	r2, [r4, #16]
   c477c:	3020      	adds	r0, #32
   c477e:	e7e3      	b.n	c4748 <__d2b+0x60>
   c4780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c4784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c4788:	f8c9 0000 	str.w	r0, [r9]
   c478c:	6918      	ldr	r0, [r3, #16]
   c478e:	f7ff fcaf 	bl	c40f0 <__hi0bits>
   c4792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c4796:	e7df      	b.n	c4758 <__d2b+0x70>
   c4798:	000c6c51 	.word	0x000c6c51
   c479c:	000c6cd8 	.word	0x000c6cd8

000c47a0 <__ratio>:
   c47a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c47a4:	4688      	mov	r8, r1
   c47a6:	4669      	mov	r1, sp
   c47a8:	4681      	mov	r9, r0
   c47aa:	f7ff ff4d 	bl	c4648 <__b2d>
   c47ae:	a901      	add	r1, sp, #4
   c47b0:	4640      	mov	r0, r8
   c47b2:	ec55 4b10 	vmov	r4, r5, d0
   c47b6:	f7ff ff47 	bl	c4648 <__b2d>
   c47ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c47be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c47c2:	eba3 0c02 	sub.w	ip, r3, r2
   c47c6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c47ca:	1a9b      	subs	r3, r3, r2
   c47cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c47d0:	ec51 0b10 	vmov	r0, r1, d0
   c47d4:	2b00      	cmp	r3, #0
   c47d6:	bfd6      	itet	le
   c47d8:	460a      	movle	r2, r1
   c47da:	462a      	movgt	r2, r5
   c47dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c47e0:	468b      	mov	fp, r1
   c47e2:	462f      	mov	r7, r5
   c47e4:	bfd4      	ite	le
   c47e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c47ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c47ee:	4620      	mov	r0, r4
   c47f0:	ee10 2a10 	vmov	r2, s0
   c47f4:	465b      	mov	r3, fp
   c47f6:	4639      	mov	r1, r7
   c47f8:	f7fd fc06 	bl	c2008 <__aeabi_ddiv>
   c47fc:	ec41 0b10 	vmov	d0, r0, r1
   c4800:	b003      	add	sp, #12
   c4802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c4806 <__copybits>:
   c4806:	3901      	subs	r1, #1
   c4808:	b570      	push	{r4, r5, r6, lr}
   c480a:	1149      	asrs	r1, r1, #5
   c480c:	6914      	ldr	r4, [r2, #16]
   c480e:	3101      	adds	r1, #1
   c4810:	f102 0314 	add.w	r3, r2, #20
   c4814:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c4818:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c481c:	1f05      	subs	r5, r0, #4
   c481e:	42a3      	cmp	r3, r4
   c4820:	d30c      	bcc.n	c483c <__copybits+0x36>
   c4822:	1aa3      	subs	r3, r4, r2
   c4824:	3b11      	subs	r3, #17
   c4826:	f023 0303 	bic.w	r3, r3, #3
   c482a:	3211      	adds	r2, #17
   c482c:	42a2      	cmp	r2, r4
   c482e:	bf88      	it	hi
   c4830:	2300      	movhi	r3, #0
   c4832:	4418      	add	r0, r3
   c4834:	2300      	movs	r3, #0
   c4836:	4288      	cmp	r0, r1
   c4838:	d305      	bcc.n	c4846 <__copybits+0x40>
   c483a:	bd70      	pop	{r4, r5, r6, pc}
   c483c:	f853 6b04 	ldr.w	r6, [r3], #4
   c4840:	f845 6f04 	str.w	r6, [r5, #4]!
   c4844:	e7eb      	b.n	c481e <__copybits+0x18>
   c4846:	f840 3b04 	str.w	r3, [r0], #4
   c484a:	e7f4      	b.n	c4836 <__copybits+0x30>

000c484c <__any_on>:
   c484c:	f100 0214 	add.w	r2, r0, #20
   c4850:	6900      	ldr	r0, [r0, #16]
   c4852:	114b      	asrs	r3, r1, #5
   c4854:	4298      	cmp	r0, r3
   c4856:	b510      	push	{r4, lr}
   c4858:	db11      	blt.n	c487e <__any_on+0x32>
   c485a:	dd0a      	ble.n	c4872 <__any_on+0x26>
   c485c:	f011 011f 	ands.w	r1, r1, #31
   c4860:	d007      	beq.n	c4872 <__any_on+0x26>
   c4862:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c4866:	fa24 f001 	lsr.w	r0, r4, r1
   c486a:	fa00 f101 	lsl.w	r1, r0, r1
   c486e:	428c      	cmp	r4, r1
   c4870:	d10b      	bne.n	c488a <__any_on+0x3e>
   c4872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c4876:	4293      	cmp	r3, r2
   c4878:	d803      	bhi.n	c4882 <__any_on+0x36>
   c487a:	2000      	movs	r0, #0
   c487c:	bd10      	pop	{r4, pc}
   c487e:	4603      	mov	r3, r0
   c4880:	e7f7      	b.n	c4872 <__any_on+0x26>
   c4882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c4886:	2900      	cmp	r1, #0
   c4888:	d0f5      	beq.n	c4876 <__any_on+0x2a>
   c488a:	2001      	movs	r0, #1
   c488c:	e7f6      	b.n	c487c <__any_on+0x30>
	...

000c4890 <_open_r>:
   c4890:	b538      	push	{r3, r4, r5, lr}
   c4892:	4d07      	ldr	r5, [pc, #28]	; (c48b0 <_open_r+0x20>)
   c4894:	4604      	mov	r4, r0
   c4896:	4608      	mov	r0, r1
   c4898:	4611      	mov	r1, r2
   c489a:	2200      	movs	r2, #0
   c489c:	602a      	str	r2, [r5, #0]
   c489e:	461a      	mov	r2, r3
   c48a0:	f7f8 fb94 	bl	bcfcc <_open>
   c48a4:	1c43      	adds	r3, r0, #1
   c48a6:	d102      	bne.n	c48ae <_open_r+0x1e>
   c48a8:	682b      	ldr	r3, [r5, #0]
   c48aa:	b103      	cbz	r3, c48ae <_open_r+0x1e>
   c48ac:	6023      	str	r3, [r4, #0]
   c48ae:	bd38      	pop	{r3, r4, r5, pc}
   c48b0:	2003e7f0 	.word	0x2003e7f0

000c48b4 <_read_r>:
   c48b4:	b538      	push	{r3, r4, r5, lr}
   c48b6:	4d07      	ldr	r5, [pc, #28]	; (c48d4 <_read_r+0x20>)
   c48b8:	4604      	mov	r4, r0
   c48ba:	4608      	mov	r0, r1
   c48bc:	4611      	mov	r1, r2
   c48be:	2200      	movs	r2, #0
   c48c0:	602a      	str	r2, [r5, #0]
   c48c2:	461a      	mov	r2, r3
   c48c4:	f7f8 fb92 	bl	bcfec <_read>
   c48c8:	1c43      	adds	r3, r0, #1
   c48ca:	d102      	bne.n	c48d2 <_read_r+0x1e>
   c48cc:	682b      	ldr	r3, [r5, #0]
   c48ce:	b103      	cbz	r3, c48d2 <_read_r+0x1e>
   c48d0:	6023      	str	r3, [r4, #0]
   c48d2:	bd38      	pop	{r3, r4, r5, pc}
   c48d4:	2003e7f0 	.word	0x2003e7f0

000c48d8 <nanf>:
   c48d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; c48e0 <nanf+0x8>
   c48dc:	4770      	bx	lr
   c48de:	bf00      	nop
   c48e0:	7fc00000 	.word	0x7fc00000

000c48e4 <__ascii_wctomb>:
   c48e4:	b149      	cbz	r1, c48fa <__ascii_wctomb+0x16>
   c48e6:	2aff      	cmp	r2, #255	; 0xff
   c48e8:	bf85      	ittet	hi
   c48ea:	238a      	movhi	r3, #138	; 0x8a
   c48ec:	6003      	strhi	r3, [r0, #0]
   c48ee:	700a      	strbls	r2, [r1, #0]
   c48f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c48f4:	bf98      	it	ls
   c48f6:	2001      	movls	r0, #1
   c48f8:	4770      	bx	lr
   c48fa:	4608      	mov	r0, r1
   c48fc:	4770      	bx	lr
	...

000c4900 <__aeabi_d2lz>:
   c4900:	b538      	push	{r3, r4, r5, lr}
   c4902:	2200      	movs	r2, #0
   c4904:	2300      	movs	r3, #0
   c4906:	4604      	mov	r4, r0
   c4908:	460d      	mov	r5, r1
   c490a:	f7fd fcc5 	bl	c2298 <__aeabi_dcmplt>
   c490e:	b928      	cbnz	r0, c491c <__aeabi_d2lz+0x1c>
   c4910:	4620      	mov	r0, r4
   c4912:	4629      	mov	r1, r5
   c4914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4918:	f7fd bd94 	b.w	c2444 <__aeabi_d2ulz>
   c491c:	4620      	mov	r0, r4
   c491e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c4922:	f7fd fd8f 	bl	c2444 <__aeabi_d2ulz>
   c4926:	4240      	negs	r0, r0
   c4928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c492c:	bd38      	pop	{r3, r4, r5, pc}
   c492e:	bf00      	nop

000c4930 <dynalib_user>:
   c4930:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c4940:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c4950:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c4960:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c4970:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c4980:	6720 7461 7765 7961 2820 6461 7264 7365      gateway (addres
   c4990:	2073 6425 2029 6977 6874 6120 6420 7665     s %d) with a dev
   c49a0:	6369 4965 2044 666f 2520 0073 6f4c 4152     iceID of %s.LoRA
   c49b0:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   c49c0:	6465 6120 2073 6f6e 6564 2520 2069 6e61     ed as node %i an
   c49d0:	2064 2061 6564 6976 6563 4449 6f20 2066     d a deviceID of 
   c49e0:	7325 4c00 526f 2041 6152 6964 206f 6e69     %s.LoRA Radio in
   c49f0:	7469 6169 696c 657a 2064 7361 6120 206e     itialized as an 
   c4a00:	6e75 6f63 666e 6769 7275 6465 6e20 646f     unconfigured nod
   c4a10:	2065 6925 6120 646e 6120 6420 7665 6369     e %i and a devic
   c4a20:	4965 2044 666f 2520 0073 6854 2065 6f6e     eID of %s.The no
   c4a30:	6564 7320 7274 6e69 2067 7369 203a 7325     de string is: %s
   c4a40:	5000 7261 6573 2064 7553 6363 7365 6673     .Parsed Successf
   c4a50:	6c75 796c 5000 7261 6973 676e 6520 7272     ully.Parsing err
   c4a60:	726f 7220 7365 7465 6974 676e 6e20 646f     or resetting nod
   c4a70:	4965 2044 6164 6174 6162 6573 6e00 646f     eID database.nod
   c4a80:	7365 6e00 6c75 006c 4972 0044 4964 0044     es.null.rID.dID.
   c4a90:	6f4e 6564 6e20 746f 6320 6e6f 6966 7567     Node not configu
   c4aa0:	6572 0064 7246 6d6f 6720 7465 7954 6570     red.From getType
   c4ab0:	6620 6e75 7463 6f69 206e 6f4e 6564 6e20      function Node n
   c4ac0:	6d75 6562 2072 6f6e 2074 6f66 6e75 2064     umber not found 
   c4ad0:	6f73 7220 7465 7275 696e 676e 2520 0064     so returning %d.
   c4ae0:	7974 6570 5200 7465 7275 696e 676e 7320     type.Returning s
   c4af0:	6e65 6f73 2072 7974 6570 2520 0064 7246     ensor type %d.Fr
   c4b00:	6d6f 6720 7465 6c41 7265 2074 7566 636e     om getAlert func
   c4b10:	6974 6e6f 202c 6f4e 6564 6e20 6d75 6562     tion, Node numbe
   c4b20:	2072 6f6e 2074 6f66 6e75 0064 6570 646e     r not found.pend
   c4b30:	7500 686e 6165 746c 7968 6c00 7361 0074     .unhealthy.last.
   c4b40:	6f4e 6564 6320 6e6f 656e 7463 6f69 736e     Node connections
   c4b50:	6120 6572 2520 2073 6300 7261 7000 7265      are %s .car.per
   c4b60:	6f73 006e 6341 6e6b 776f 656c 6764 2065     son.Acknowledge 
   c4b70:	6f4a 6e69 5220 7165 6575 7473 5300 6e65     Join Request.Sen
   c4b80:	6964 676e 7220 7365 6f70 736e 2065 6f74     ding response to
   c4b90:	2520 2064 6977 6874 6620 6572 2065 656d      %d with free me
   c4ba0:	6f6d 7972 3d20 2520 696c 4e00 646f 2065     mory = %li.Node 
   c4bb0:	6425 6a20 696f 656e 2064 6977 6874 7320     %d joined with s
   c4bc0:	6e65 6f73 5472 7079 2065 7325 202c 6c61     ensorType %s, al
   c4bd0:	7265 2074 6425 6120 646e 5220 5353 2049     ert %d and RSSI 
   c4be0:	202f 4e53 2052 666f 2520 2064 202f 6425     / SNR of %d / %d
   c4bf0:	7300 6174 7574 0073 6f4e 6564 2520 2064     .status.Node %d 
   c4c00:	6f6a 6e69 7220 7365 6f70 736e 2065 6f6e     join response no
   c4c10:	2074 6361 6e6b 776f 656c 6764 6465 6e00     t acknowledged.n
   c4c20:	646f 0065 7573 6363 4e00 646f 2065 6425     ode.succ.Node %d
   c4c30:	202c 6564 6976 6563 4449 203a 7325 202c     , deviceID: %s, 
   c4c40:	6863 6365 736b 6d75 2520 2c64 6c20 7361     checksum %d, las
   c4c50:	4374 6e6f 656e 7463 6465 203a 7325 202c     tConnected: %s, 
   c4c60:	7974 6570 2520 2c64 7320 6375 6563 7373     type %d, success
   c4c70:	2520 2e34 6632 7720 7469 2068 6570 646e      %4.2f with pend
   c4c80:	6e69 2067 6c61 7265 2074 6425 6e00 646f     ing alert %d.nod
   c4c90:	4465 7461 0061 6544 6976 6563 4449 6120     eData.DeviceID a
   c4ca0:	646e 6320 6568 6b63 7573 206d 696d 6d73     nd checksum mism
   c4cb0:	7461 6863 2d20 7320 7465 6974 676e 6e20     atch - setting n
   c4cc0:	646f 2065 6f74 3120 0031 6843 6365 736b     ode to 11.Checks
   c4cd0:	6d75 7620 6c61 6469 7461 6465 6600 6e69     um validated.fin
   c4ce0:	4e64 646f 4e65 6d75 6562 2072 6172 206e     dNodeNumber ran 
   c4cf0:	756f 2074 666f 6520 746e 6972 7365 6120     out of entries a
   c4d00:	2074 2069 203d 6425 4e00 7765 6e20 646f     t i = %d.New nod
   c4d10:	2065 6977 6c6c 6220 2065 7361 6973 6e67     e will be assign
   c4d20:	6465 6e20 6d75 6562 2072 6425 202c 6564     ed number %d, de
   c4d30:	6976 6563 4449 6f20 2066 7325 4300 6168     viceID of %s.Cha
   c4d40:	676e 6e69 2067 6573 736e 726f 7420 7079     nging sensor typ
   c4d50:	2065 7266 6d6f 2520 2064 6f74 2520 0064     e from %d to %d.
   c4d60:	6f4e 6564 2520 2064 6f6a 6e69 7220 7165     Node %d join req
   c4d70:	6575 7473 6620 6f72 206d 7325 7720 6c69     uest from %s wil
   c4d80:	206c 6863 6e61 6567 6e20 646f 2065 756e     l change node nu
   c4d90:	626d 7265 7420 206f 6425 4300 6168 676e     mber to %d.Chang
   c4da0:	6e69 2067 6570 646e 6e69 2067 6c61 7265     ing pending aler
   c4db0:	2074 7266 6d6f 2520 2064 6f74 2520 0064     t from %d to %d.
   c4dc0:	6f4e 6564 2520 2064 7369 6920 766e 6c61     Node %d is inval
   c4dd0:	6469 202c 6573 7474 6e69 2067 6c61 7265     id, setting aler
   c4de0:	2074 6f63 6564 7420 206f 0031 6f4e 6564     t code to 1.Node
   c4df0:	2520 2064 6168 2073 2061 6570 646e 6e69      %d has a pendin
   c4e00:	2067 6c61 7265 2074 6425 4900 206e 6164     g alert %d.In da
   c4e10:	6174 6120 6b63 6f6e 6c77 6465 6567 202c     ta acknowledge, 
   c4e20:	6863 6e61 6967 676e 7420 7079 2065 6f74     changing type to
   c4e30:	6620 6f72 206d 6425 7420 206f 6425 4e00      from %d to %d.N
   c4e40:	646f 2065 6425 6420 7461 2061 6572 6f70     ode %d data repo
   c4e50:	7472 2520 2064 6361 6e6b 776f 656c 6764     rt %d acknowledg
   c4e60:	6465 7720 7469 2068 6c61 7265 2074 6425     ed with alert %d
   c4e70:	202c 6e61 2064 5352 4953 2f20 5320 524e     , and RSSI / SNR
   c4e80:	6f20 2066 6425 2f20 2520 0064 6f4e 6564      of %d / %d.Node
   c4e90:	2520 2064 6164 6174 7220 7065 726f 2074      %d data report 
   c4ea0:	6572 7073 6e6f 6573 6e20 746f 6120 6b63     response not ack
   c4eb0:	6f6e 6c77 6465 6567 0064 6f4e 6564 2520     nowledged.Node %
   c4ec0:	2064 656d 7373 6761 2065 616d 6967 2063     d message magic 
   c4ed0:	756e 626d 7265 6f20 2066 6425 6420 6469     number of %d did
   c4ee0:	6e20 746f 6d20 7461 6863 7420 6568 4d20      not match the M
   c4ef0:	6761 6369 4e20 6d75 6562 2072 6e69 6d20     agic Number in m
   c4f00:	6d65 726f 2079 6425 2d20 4920 6e67 726f     emory %d - Ignor
   c4f10:	6e69 0067 6f4e 6564 2520 2064 6977 6874     ing.Node %d with
   c4f20:	4920 2044 6425 6120 2520 2073 656d 7373      ID %d a %s mess
   c4f30:	6761 2065 6977 6874 5220 5353 2f49 4e53     age with RSSI/SN
   c4f40:	2052 666f 2520 2064 202f 6425 6920 206e     R of %d / %d in 
   c4f50:	6425 6820 706f 0073 6f4e 6564 6e20 746f     %d hops.Node not
   c4f60:	7020 6f72 6570 6c72 2079 6f63 666e 6769      properly config
   c4f70:	7275 6465 202c 6572 6573 7474 6e69 2067     ured, resetting 
   c4f80:	6f6e 6564 6e20 6d75 6562 0072 6e49 6176     node number.Inva
   c4f90:	696c 2064 656d 7373 6761 2065 6c66 6761     lid message flag
   c4fa0:	202c 6572 7574 6e72 6e69 0067 6557 6120     , returning.We a
   c4fb0:	6572 7520 6470 7461 6e69 2067 6874 2065     re updating the 
   c4fc0:	7570 6c62 7369 2068 7266 7165 6575 636e     publish frequenc
   c4fd0:	2079 6f74 2520 2069 696d 756e 6574 0073     y to %i minutes.
   c4fe0:	6e49 6176 696c 2064 656d 7373 6761 2065     Invalid message 
   c4ff0:	6c66 6761 0000 0000                         flag....

000c4ff8 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c5000:	40dd 000b 40f1 000b                         .@...@..

000c5008 <_ZTV14LoRA_Functions>:
	...
   c5010:	40cd 000b 40cf 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c5020:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c5030:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c5040:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c5050:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c5060:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c5070:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c5080:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c5090:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c50a0:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c50b0:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c50c0:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c50d0:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c50e0:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c50f0:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c5100:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c5110:	253a 2c64 2020 7322 726e 3a22 6425 202c     :%d,  "snr":%d, 
   c5120:	6822 706f 2273 253a 2c64 2220 736d 2267     "hops":%d, "msg"
   c5130:	253a 2c64 2220 7573 6363 7365 2273 253a     :%d, "success":%
   c5140:	2e34 6632 202c 7422 6d69 7365 6174 706d     4.2f, "timestamp
   c5150:	3a22 6c25 3075 3030 007d 6255 6469 746f     ":%lu000}.Ubidot
   c5160:	2d73 6f4c 4152 4e2d 646f 2d65 3176 7b00     s-LoRA-Node-v1.{
   c5170:	6422 7665 6369 6965 2264 223a 7325 2c22     "deviceid":"%s",
   c5180:	2220 6f68 7275 796c 3a22 7525 202c 6422      "hourly":%u, "d
   c5190:	6961 796c 3a22 7525 202c 7322 6e65 6f73     aily":%u, "senso
   c51a0:	7472 7079 2265 253a 2c64 2220 6162 7474     rtype":%d, "batt
   c51b0:	7265 2279 253a 2e34 6632 222c 656b 3179     ery":%4.2f,"key1
   c51c0:	3a22 2522 2273 222c 6574 706d 3a22 6425     ":"%s","temp":%d
   c51d0:	202c 7222 7365 7465 2273 253a 2c64 2220     , "resets":%d, "
   c51e0:	736d 2267 253a 2c64 2220 6974 656d 7473     msg":%d, "timest
   c51f0:	6d61 2270 253a 756c 3030 7d30 5500 6962     amp":%lu000}.Ubi
   c5200:	6f64 7374 4c2d 526f 2d41 6147 6574 6177     dots-LoRA-Gatewa
   c5210:	2d79 3176 6900 0073 7369 6e20 746f 4500     y-v1.is.is not.E
   c5220:	5453 4535 5444 4d2c 2e33 2e32 2f30 3a32     ST5EDT,M3.2.0/2:
   c5230:	3030 303a 2c30 314d 2e31 2e31 2f30 3a32     00:00,M11.1.0/2:
   c5240:	3030 303a 0030 4925 253a 3a4d 5325 7025     00:00.%I:%M:%S%p
   c5250:	4c00 636f 6c61 6954 656d 6920 696e 6974     .LocalTime initi
   c5260:	6c61 7a69 6465 202c 6974 656d 6920 2073     alized, time is 
   c5270:	7325 6120 646e 5220 4354 2520 2073 6573     %s and RTC %s se
   c5280:	0074 6f4c 6163 546c 6d69 2065 6f6e 2074     t.LocalTime not 
   c5290:	6e69 7469 6169 696c 657a 2064 6f73 7720     initialized so w
   c52a0:	6c69 206c 656e 6465 7420 206f 6f43 6e6e     ill need to Conn
   c52b0:	6365 2074 6f74 5020 7261 6974 6c63 0065     ect to Particle.
   c52c0:	7355 7265 6220 7475 6f74 206e 726f 7020     User button or p
   c52d0:	6572 652d 6978 7473 6e69 2067 6573 2074     re-existing set 
   c52e0:	6f74 6320 6e6f 656e 7463 6465 6d20 646f     to connected mod
   c52f0:	0065 706f 6e65 6300 6f6c 6573 0064 5425     e.open.closed.%T
   c5300:	5300 656c 7065 6620 726f 2520 756c 7320     .Sleep for %lu s
   c5310:	6365 6e6f 7364 7520 746e 6c69 6e20 7865     econds until nex
   c5320:	2074 7665 6e65 2074 7461 2520 0073 6f57     t event at %s.Wo
   c5330:	656b 7720 7469 2068 7375 7265 6220 7475     ke with user but
   c5340:	6f74 006e 7741 6b6f 2065 7461 2520 2073     ton.Awoke at %s 
   c5350:	6977 6874 2520 696c 6620 6572 2065 656d     with %li free me
   c5360:	6f6d 7972 4700 7461 7765 7961 6920 2073     mory.Gateway is 
   c5370:	696c 7473 6e65 6e69 2067 6f66 2072 6425     listening for %d
   c5380:	6d20 6e69 7475 7365 6620 726f 4c20 526f      minutes for LoR
   c5390:	2041 656d 7373 6761 7365 6120 646e 7420     A messages and t
   c53a0:	6568 7020 7261 206b 7369 2520 2073 2528     he park is %s (%
   c53b0:	2064 202f 6425 2f20 2520 2964 4c00 7369     d / %d / %d).Lis
   c53c0:	6574 696e 676e 7720 6e69 6f64 2077 766f     tening window ov
   c53d0:	7265 4e00 7765 4420 7961 2d20 5220 7365     er.New Day - Res
   c53e0:	7465 6974 676e 6520 6576 7972 6874 6e69     etting everythin
   c53f0:	0067 6146 6c69 6465 7420 206f 6f63 6e6e     g.Failed to conn
   c5400:	6365 2074 6e69 3120 2030 696d 756e 6574     ect in 10 minute
   c5410:	2073 202d 6967 6976 676e 7520 0070 6544     s - giving up.De
   c5420:	7065 7020 776f 7265 6420 776f 206e 6e69     ep power down in
   c5430:	3320 2030 6573 6f63 646e 0073 6c41 7265      30 seconds.Aler
   c5440:	0074 6544 7065 7020 776f 7265 6420 776f     t.Deep power dow
   c5450:	206e 6564 6976 6563 5200 7365 7465 6974     n device.Resetti
   c5460:	676e 6420 6575 7420 206f 6f6c 2077 656d     ng due to low me
   c5470:	6f6d 7972 6e00 746f 7620 6c61 6469 6e00     mory.not valid.n
   c5480:	646f 4965 2044 6164 6174 6920 2073 7325     odeID data is %s
   c5490:	7b00 6e22 646f 7365 3a22 5d5b 007d 6552     .{"nodes":[]}.Re
   c54a0:	6573 7474 6769 4e20 646f 4965 2044 6f63     settig NodeID co
   c54b0:	666e 6769 7420 3a6f 2520 0073 6f4e 6564     nfig to: %s.Node
   c54c0:	4449 6420 7461 2061 7369 6e20 776f 2520     ID data is now %
   c54d0:	0073 7245 7361 6e69 2067 5246 4d41 7220     s.Erasing FRAM r
   c54e0:	6765 6f69 006e 6e49 7469 6169 696c 697a     egion.Initializi
   c54f0:	676e 6420 7461 0061 6164 6174 6e20 746f     ng data.data not
   c5500:	7620 6c61 6469 6f20 6570 546e 6d69 3d65      valid openTime=
   c5510:	6425 6120 646e 6320 6f6c 6573 6954 656d     %d and closeTime
   c5520:	253d 0064 6164 6174 6e20 746f 7620 6c61     =%d.data not val
   c5530:	6469 6620 6572 7571 6e65 7963 6d20 6e69     id frequency min
   c5540:	7475 7365 3d20 6425 6400 7461 2061 6f6e     utes =%d.data no
   c5550:	2074 6176 696c 2064 6f6e 6564 6e20 6d75     t valid node num
   c5560:	6562 2072 253d 0064 7973 5373 6174 7574     ber =%d.sysStatu
   c5570:	2073 6164 6174 6920 2073 7325 6300 7275     s data is %s.cur
   c5580:	6572 746e 6420 7461 2061 6f6e 2074 6176     rent data not va
   c5590:	696c 2064 6f68 7275 796c 6f43 6e75 3d74     lid hourlyCount=
   c55a0:	6425 6300 7275 6572 746e 6420 7461 2061     %d.current data 
   c55b0:	7369 2520 0073 2041 656e 2077 6164 2079     is %s.A new day 
   c55c0:	202d 6572 6573 7474 6e69 2067 7665 7265     - resetting ever
   c55d0:	7479 6968 676e 4300 7275 6572 746e 4420     ything.Current D
   c55e0:	7461 2061 6e49 7469 6169 696c 657a 0064     ata Initialized.
   c55f0:	6164 6174 6920 696e 6974 6c61 7a69 6465     data initialized
   c5600:	0000 0000                                   ....

000c5604 <_ZTV8MB85RC64>:
	...
   c560c:	62b1 000b 62c5 000b 9fdd 000b a073 000b     .b...b......s...
   c561c:	a0f5 000b                                   ....

000c5620 <_ZTV10nodeIDData>:
	...
   c5628:	6609 000b 633b 000b 6313 000b c92b 000b     .f..;c...c..+...
   c5638:	c953 000b 62d9 000b 66cd 000b 63dd 000b     S....b...f...c..
   c5648:	63f1 000b                                   .c..

000c564c <_ZTV13sysStatusData>:
	...
   c5654:	6465 000b 633b 000b 6313 000b c92b 000b     ed..;c...c..+...
   c5664:	c953 000b 6935 000b 6cbd 000b 638d 000b     S...5i...l...c..
   c5674:	63a1 000b                                   .c..

000c5678 <_ZTV17currentStatusData>:
	...
   c5680:	64f5 000b 633b 000b 6313 000b c92b 000b     .d..;c...c..+...
   c5690:	c953 000b 6a05 000b 6c29 000b 63b5 000b     S....j..)l...c..
   c56a0:	63c9 000b 6e49 7469 6169 696c 697a 676e     .c..Initializing
   c56b0:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c56c0:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c56d0:	0073 6f43 6d6d 6e61 7364 4900 206e 6874     s.Commands.In th
   c56e0:	2065 6964 6373 6e6f 656e 7463 6620 6f72     e disconnect fro
   c56f0:	206d 6150 7472 6369 656c 6620 6e75 7463     m Particle funct
   c5700:	6f69 006e 6146 6c69 6465 7420 206f 6964     ion.Failed to di
   c5710:	6373 6e6f 656e 7463 6620 6f72 206d 6150     sconnect from Pa
   c5720:	7472 6369 656c 4400 7369 6f63 6e6e 6365     rticle.Disconnec
   c5730:	6574 2064 7266 6d6f 5020 7261 6974 6c63     ted from Particl
   c5740:	2065 6e69 2520 2069 6573 6f63 646e 0073     e in %i seconds.
   c5750:	6146 6c69 6465 7420 206f 7574 6e72 6f20     Failed to turn o
   c5760:	6666 7420 6568 4320 6c65 756c 616c 2072     ff the Cellular 
   c5770:	6f6d 6564 006d 7554 6e72 6465 6f20 6666     modem.Turned off
   c5780:	7420 6568 6320 6c65 756c 616c 2072 6f6d      the cellular mo
   c5790:	6564 206d 6e69 2520 2069 6573 6f63 646e     dem in %i second
   c57a0:	0073 6556 6972 6f7a 006e 6150 7372 6e69     s.Verizon.Parsin
   c57b0:	2067 6166 6c69 6465 2d20 6320 6568 6b63     g failed - check
   c57c0:	7320 6e79 6174 0078 6d63 0064 6176 0072      syntax.cmd.var.
   c57d0:	6e66 7200 7365 7465 5200 7365 7465 6974     fn.reset.Resetti
   c57e0:	676e 7420 6568 6720 7461 7765 7961 7327     ng the gateway's
   c57f0:	6e20 646f 2065 6144 6174 5200 7365 7465      node Data.Reset
   c5800:	6974 676e 7420 6568 4720 7461 7765 7961     ting the Gateway
   c5810:	6e20 646f 2065 6f73 6e20 7765 6420 7461      node so new dat
   c5820:	6261 7361 2065 7369 6920 206e 6665 6566     abase is in effe
   c5830:	7463 5200 7365 7465 6974 676e 4720 7461     ct.Resetting Gat
   c5840:	7765 7961 6100 6c6c 5200 7365 7465 6974     eway.all.Resetti
   c5850:	676e 7420 6568 6720 7461 7765 7961 7327     ng the gateway's
   c5860:	7320 7379 6574 206d 6e61 2064 7563 7272      system and curr
   c5870:	6e65 2074 6164 6174 5200 7365 7465 6974     ent data.Resetti
   c5880:	676e 7420 6568 6720 7461 7765 7961 7327     ng the gateway's
   c5890:	6320 7275 6572 746e 6420 7461 0061 6552      current data.Re
   c58a0:	6573 7474 6e69 2067 6f6e 6564 2520 2764     setting node %d'
   c58b0:	2073 7973 7473 6d65 6120 646e 6320 7275     s system and cur
   c58c0:	6572 746e 6420 7461 0061 6552 6573 7474     rent data.Resett
   c58d0:	6e69 2067 6f6e 6564 2520 2764 2073 7563     ing node %d's cu
   c58e0:	7272 6e65 2074 6164 6174 6600 6572 0071     rrent data.freq.
   c58f0:	6553 7474 6e69 2067 6572 6f70 7472 6e69     Setting reportin
   c5900:	2067 7266 7165 6575 636e 2079 6f74 2520     g frequency to %
   c5910:	2064 696d 756e 6574 0073 6f4e 2074 2061     d minutes.Not a 
   c5920:	6176 696c 2064 6572 6f70 7472 6e69 2067     valid reporting 
   c5930:	7266 7165 6575 636e 0079 7473 7961 7400     frequency.stay.t
   c5940:	7572 0065 6f47 6e69 2067 6f74 6b20 6565     rue.Going to kee
   c5950:	2070 6147 6574 6177 2079 6e6f 5020 7261     p Gateway on Par
   c5960:	6974 6c63 2065 6e61 2064 6f4c 4152 6e20     ticle and LoRA n
   c5970:	7465 6f77 6b72 0073 6f47 6e69 2067 6162     etworks.Going ba
   c5980:	6b63 7420 206f 6f6e 6d72 6c61 6320 6e6f     ck to normal con
   c5990:	656e 7463 7669 7469 0079 7072 0074 7250     nectivity.rpt.Pr
   c59a0:	6e69 6974 676e 6e20 646f 4965 2044 6144     inting nodeID Da
   c59b0:	6174 5300 7465 6974 676e 6f20 6570 696e     ta.Setting openi
   c59c0:	676e 6820 756f 2072 6f74 2520 3a64 3030     ng hour to %d:00
   c59d0:	4f00 6570 206e 6f68 7275 2d20 6d20 7375     .Open hour - mus
   c59e0:	2074 6562 3020 312d 0032 6c63 736f 0065     t be 0-12.close.
   c59f0:	6553 7474 6e69 2067 6c63 736f 6e69 2067     Setting closing 
   c5a00:	6f68 7275 7420 206f 6425 303a 0030 6c43     hour to %d:00.Cl
   c5a10:	736f 2065 6f68 7275 2d20 6d20 7375 2074     ose hour - must 
   c5a20:	6562 3120 2d33 3432 5300 7465 6974 676e     be 13-24.Setting
   c5a30:	7320 6e65 6f73 2072 7974 6570 7420 206f      sensor type to 
   c5a40:	6425 6620 726f 6e20 646f 2065 6425 5300     %d for node %d.S
   c5a50:	6e65 6f73 2072 7954 6570 2020 202d 756d     ensor Type  - mu
   c5a60:	7473 6220 2065 2d30 0032 6973 006d 6553     st be 0-2.sim.Se
   c5a70:	7474 6e69 2067 4953 204d 6f74 2520 0073     tting SIM to %s.
   c5a80:	4953 204d 7954 6570 2020 202d 756d 7473     SIM Type  - must
   c5a90:	6220 2065 2030 5028 7261 6974 6c63 2965      be 0 (Particle)
   c5aa0:	6f20 2072 2031 5628 7265 7a69 6e6f 0029      or 1 (Verizon).
   c5ab0:	7770 0072 6553 7474 6e69 2067 6c41 7265     pwr.Setting Aler
   c5ac0:	2074 6f43 6564 7420 206f 7254 6769 6567     t Code to Trigge
   c5ad0:	2072 6552 6573 0074 6f50 6577 2072 7943     r Reset.Power Cy
   c5ae0:	6c63 2065 6176 756c 2065 6f6e 2074 203d     cle value not = 
   c5af0:	2931 4e00 746f 6120 7620 6c61 6469 6320     1).Not a valid c
   c5b00:	6d6f 616d 646e 0000                         ommand..

000c5b08 <_ZTVN5spark10LogHandlerE>:
	...
   c5b18:	40a5 000b 6e21 000b                         .@..!n..

000c5b20 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c5b28:	6ef9 000b 6f2d 000b f0f1 000b 6e23 000b     .n..-o......#n..

000c5b38 <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c5b40:	6e3d 000b 6e51 000b                         =n..Qn..

000c5b48 <_ZTV18Particle_Functions>:
	...
   c5b50:	6e2b 000b 6e2d 000b 6e49 7469 6c61 7a69     +n..-n..Initaliz
   c5b60:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c5b70:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c5b80:	6577 2072 6f43 666e 6769 0000               wer Config..

000c5b8c <BLUE_LED>:
   c5b8c:	0007                                        ..

000c5b8e <BUTTON_PIN>:
   c5b8e:	0004                                        ..

000c5b90 <RFM95_CS>:
   c5b90:	0005                                        ..

000c5b92 <RFM95_INT>:
   c5b92:	0002                                        ..

000c5b94 <RFM95_RST>:
   c5b94:	0006                                        ..

000c5b96 <TMP36_SENSE_PIN>:
   c5b96:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c5ba6:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c5bb6:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c5bc6:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c5bd6:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c5be6:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c5bf6:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c5c06:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c5c16:	0000 5046 000c 5b98 000c 5b9d 000c 5ba2     ..FP...[...[...[
   c5c26:	000c 5ba6 000c 5bab 000c 5bb0 000c 5bb4     ...[...[...[...[
   c5c36:	000c 5bbf 000c 5bca 000c 6166 6c69 6465     ...[...[..failed
   c5c46:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c5c56:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c5c66:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c5c76:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c5c86:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c5c96:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c5ca6:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c5cb6:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c5cc6:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c5cd6:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c5ce6:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c5cf6:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c5d06:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c5d16:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c5d26:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c5d36:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c5d46:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c5d56:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c5d66:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c5d76:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c5d86:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c5d96:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c5da6:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c5db6:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c5dc6:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c5dd6:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c5de6:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c5df6:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c5e06:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c5e16:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c5e26:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c5e36:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c5e46:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c5e56:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c5e66:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c5e76:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c5e88 <_ZTV6AB1805>:
	...
   c5e90:	7a99 000b 7a9b 000b 8111 000b 8197 000b     .z...z..........
   c5ea0:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c5eb0:	5268 004b                                   hRK.

000c5eb4 <_ZTV19BackgroundPublishRK>:
	...
   c5ebc:	86cd 000b 86e9 000b 755c 3025 5834 2500     ........\u%04X.%
   c5ecc:	2a2e 0066 6625 0000                         .*f.%f..

000c5ed4 <_ZTV10JsonBuffer>:
	...
   c5edc:	89cd 000b 89e9 000b                         ........

000c5ee4 <_ZTV10JsonParser>:
	...
   c5eec:	8a4d 000b 8a71 000b                         M...q...

000c5ef4 <_ZTV10JsonWriter>:
	...
   c5efc:	89fd 000b 8a11 000b                         ........

000c5f04 <_ZTV12JsonModifier>:
	...
   c5f0c:	8a25 000b 8a39 000b 6425 253a 3a64 6425     %...9...%d:%d:%d
   c5f1c:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c5f2c:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c5f3c:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c5f48 <_ZTV9LocalTime>:
	...
   c5f50:	969d 000b 96b5 000b                         ........

000c5f58 <_ZTV12LocalTimeHMS>:
	...
   c5f60:	964d 000b 9651 000b                         M...Q...

000c5f68 <_ZTV15LocalTimeChange>:
	...
   c5f70:	964f 000b 965f 000b                         O..._...

000c5f78 <_ZTV22LocalTimePosixTimezone>:
	...
   c5f80:	966d 000b 9689 000b                         m.......

000c5f88 <_ZTV6MB85RC>:
	...
   c5f90:	9f9d 000b 9f9f 000b 9fdd 000b a073 000b     ............s...
   c5fa0:	a0f5 000b 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   c5fb0:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c5fc0:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c5fd0:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c5fe0:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c5ff0:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c6000:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c6010:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c6020:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c6030:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c6040:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c6050:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c6060:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c6070:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c6080:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c6090:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c60a0:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c60b0:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c60c0:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c60d0:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c60e0:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c60f0:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c6100:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c6110:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c6120:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c6130:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c6140:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c6150:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c6160:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c6170:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c6180:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c6190:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c61a0:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c61b0:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c61c0:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c61d0:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c61e0:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c61f0:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c6200:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c6210:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c621c <_ZTV17PublishQueuePosix>:
	...
   c6224:	aa29 000b ace5 000b ad09 000b               )...........

000c6230 <_ZTV15RHGenericDriver>:
	...
   c6240:	ae29 000b 40a5 000b 40a5 000b 40a5 000b     )....@...@...@..
   c6250:	40a5 000b ae8b 000b ae2d 000b aedb 000b     .@......-.......
   c6260:	aea9 000b aeff 000b ae37 000b ae3f 000b     ........7...?...
   c6270:	ae43 000b ae47 000b ae4b 000b ae4f 000b     C...G...K...O...
   c6280:	ae3b 000b ae5b 000b ae5f 000b ae63 000b     ;...[..._...c...
   c6290:	ae67 000b ae6b 000b ae71 000b ae75 000b     g...k...q...u...
   c62a0:	ae37 000b ae79 000b ae7f 000b ae85 000b     7...y...........

000c62b0 <_ZTV12RHGenericSPI>:
	...
   c62b8:	40a5 000b af5d 000b af5f 000b 40a5 000b     .@..]..._....@..
   c62c8:	40a5 000b af67 000b af6b 000b af6f 000b     .@..g...k...o...
   c62d8:	af61 000b af63 000b af65 000b 6564 6166     a...c...e...defa
   c62e8:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c62f8:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c6308:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c6318:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c6328 <_ZTVN8particle11SPISettingsE>:
	...
   c6330:	afb5 000b af89 000b af8b 000b               ............

000c633c <_ZTV13RHHardwareSPI>:
	...
   c6344:	b069 000b b07d 000b b08b 000b b099 000b     i...}...........
   c6354:	b105 000b af67 000b af6b 000b af6f 000b     ....g...k...o...
   c6364:	b113 000b b127 000b b135 000b               ....'...5...

000c6370 <_ZTV6RHMesh>:
	...
   c6378:	b201 000b b4a9 000b b161 000b b14d 000b     ........a...M...

000c6388 <_ZTV8RHRouter>:
	...
   c6390:	b719 000b b75d 000b                         ....]...

000c6398 <_ZTV11RHSPIDriver>:
	...
   c63a8:	b9f9 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c63b8:	40a5 000b ae8b 000b ae2d 000b aedb 000b     .@......-.......
   c63c8:	aea9 000b aeff 000b ae37 000b ae3f 000b     ........7...?...
   c63d8:	ae43 000b ae47 000b ae4b 000b ae4f 000b     C...G...K...O...
   c63e8:	ae3b 000b ae5b 000b ae5f 000b ae63 000b     ;...[..._...c...
   c63f8:	ae67 000b ae6b 000b ae71 000b ae75 000b     g...k...q...u...
   c6408:	ae37 000b ae79 000b ae7f 000b ae85 000b     7...y...........
   c6418:	ba25 000b ba2f 000b 999a 40f9 6666 4126     %.../......@ff&A
   c6428:	999a 4179 6666 41a6 0000 41fa cccd 4226     ..yAff.A...A..&B
   c6438:	0000 427a 0000 42fa 0000 437a 0000 43fa     ..zB...B..zC...C
   c6448:	c000 45f3 8000 4622 c000 4673 8000 46a2     ...E.."F..sF...F
   c6458:	2400 46f4 e400 4722 2400 4774 2400 47f4     .$.F.."G.$tG.$.G
   c6468:	2400 4874 2400 48f4                         .$tH.$.H

000c6470 <_ZL18MODEM_CONFIG_TABLE>:
   c6470:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c6480 <_ZTV7RH_RF95>:
	...
   c6488:	bb97 000b bbcf 000b c0a9 000b bf3f 000b     ............?...
   c6498:	bc05 000b bf87 000b bb93 000b ae8b 000b     ................
   c64a8:	ae2d 000b aedb 000b aea9 000b aeff 000b     -...............
   c64b8:	bb99 000b ae3f 000b ae43 000b ae47 000b     ....?...C...G...
   c64c8:	ae4b 000b ae4f 000b ae3b 000b ae5b 000b     K...O...;...[...
   c64d8:	ae5f 000b ae63 000b ae67 000b ae6b 000b     _...c...g...k...
   c64e8:	ae71 000b ae75 000b bbdf 000b ae79 000b     q...u.......y...
   c64f8:	ae7f 000b ae85 000b ba25 000b ba2f 000b     ........%.../...
   c6508:	bb8f 000b 3025 6438 2f00 7200 6d65 766f     ....%08d./.remov
   c6518:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c6528:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c6538:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c6548:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c6558:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c6568:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c6578:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c6588:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c6598:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c65a8:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c65b8:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c65c8:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c65d8:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c65e8:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c65f8:	732e 7165 6966 656c 0000 0000               .seqfile....

000c6604 <_ZTV14SequentialFile>:
	...
   c660c:	c5cd 000b c5f9 000b c279 000b 6173 6976     ........y...savi
   c661c:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   c662c:	6176 696c 6164 6974 676e 6420 7461 2061     validating data 
   c663c:	6973 657a 253d 0064 6f67 3a74 6d20 6761     size=%d.got: mag
   c664c:	6369 253d 3830 2078 6576 7372 6f69 3d6e     ic=%08x version=
   c665c:	3025 7834 7320 7a69 3d65 3025 7834 6820     %04x size=%04x h
   c666c:	7361 3d68 3025 7838 6500 7078 203a 616d     ash=%08x.exp: ma
   c667c:	6967 3d63 3025 7838 7620 7265 6973 6e6f     gic=%08x version
   c668c:	253d 3430 2078 6973 657a 253d 3430 2078     =%04x size=%04x 
   c669c:	6168 6873 253d 3830 0078 0000               hash=%08x...

000c66a8 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c66b0:	c925 000b c9d1 000b c98d 000b c92b 000b     %...........+...
   c66c0:	c953 000b cb55 000b cc21 000b               S...U...!...

000c66cc <_ZTVN5spark13CellularClassE>:
	...
   c66d4:	d68f 000b d685 000b d67b 000b d631 000b     ........{...1...
   c66e4:	d66f 000b d663 000b f449 000b f451 000b     o...c...I...Q...
   c66f4:	d657 000b d64f 000b d645 000b d63b 000b     W...O...E...;...
   c6704:	f481 000b                                   ....

000c6708 <_ZTV14CellularSignal>:
	...
   c6710:	d71d 000b d781 000b d71f 000b d791 000b     ................
   c6720:	d7c5 000b d7f1 000b d825 000b d745 000b     ........%...E...
   c6730:	d723 000b d73f 000b fffc ffff 0000 0000     #...?...........
   c6740:	d779 000b                                   y...

000c6744 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c674c:	d869 000b d86f 000b d8ad 000b d87d 000b     i...o.......}...
   c675c:	d86b 000b                                   k...

000c6760 <_ZTVN5spark13EthernetClassE>:
	...
   c6768:	de73 000b de69 000b de5f 000b de55 000b     s...i..._...U...
   c6778:	de49 000b de3d 000b f449 000b f451 000b     I...=...I...Q...
   c6788:	de31 000b de29 000b de1f 000b de15 000b     1...)...........
   c6798:	f481 000b                                   ....

000c679c <_ZTV7TwoWire>:
	...
   c67a4:	df43 000b df8d 000b df65 000b df45 000b     C.......e...E...
   c67b4:	df6d 000b df75 000b df7d 000b df85 000b     m...u...}.......

000c67c4 <_ZTV9IPAddress>:
	...
   c67cc:	e109 000b e0f9 000b e0fb 000b 2575 3430     ............u%04
   c67dc:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c67ec:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c67fc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c680c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c681c:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c682c:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c683c:	6f63 6564 6400 7465 6961 006c               code.detail.

000c6848 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c6850:	e5b5 000b e5db 000b e599 000b e217 000b     ................

000c6860 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c6868:	e999 000b e9b1 000b f0f1 000b 6e23 000b     ............#n..

000c6878 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c6880:	e9c5 000b e9d9 000b f295 000b e5a1 000b     ................

000c6890 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c6898:	e5b3 000b e5e9 000b f055 000b e5a3 000b     ........U.......

000c68a8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c68b0:	e5b1 000b e5f7 000b e901 000b e619 000b     ................

000c68c0 <_ZTVN5spark12NetworkClassE>:
	...
   c68c8:	f409 000b f413 000b f41d 000b f427 000b     ............'...
   c68d8:	f431 000b f43d 000b f449 000b f451 000b     1...=...I...Q...
   c68e8:	f459 000b f465 000b f46d 000b f477 000b     Y...e...m...w...
   c68f8:	f481 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000c6908 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c6908:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c6918:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c6928:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c6938:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c6948:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c6958:	0065 0000                                   e...

000c695c <_ZTV11USARTSerial>:
	...
   c6964:	0341 000c 03ad 000c 0385 000c f6d1 000b     A...............
   c6974:	0355 000c 0371 000c 0363 000c 037f 000c     U...q...c.......
   c6984:	0343 000c 0347 000c                         C...G...

000c698c <_ZTV9USBSerial>:
	...
   c6994:	03ff 000c 0467 000c 043d 000c f6d1 000b     ....g...=.......
   c69a4:	042f 000c 0401 000c 0411 000c 0461 000c     /...........a...
   c69b4:	0421 000c 03f9 000c                         !.......

000c69bc <_ZSt7nothrow>:
	...

000c69c8 <TWO52>:
   c69c8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   c69d8:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   c69e8:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000c69f8 <day_name.1>:
   c69f8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c6a08:	6972 6153                                    riSat

000c6a0d <mon_name.0>:
   c6a0d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c6a1d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c6a2d:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c6a3d:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c6a4d:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c6a5d:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c6a6d:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c6a7d:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c6a8d:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c6a9d:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c6aad:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c6abd:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c6acd:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c6add:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c6aed:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c6afd:	7974                                         ty.

000c6b00 <fpi.1>:
   c6b00:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c6b10:	0000 0000                                   ....

000c6b14 <fpinan.0>:
   c6b14:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c6b24:	0000 0000                                   ....

000c6b28 <tinytens>:
   c6b28:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c6b38:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c6b48:	6f43 64ac 0628 1168                         Co.d(.h.

000c6b50 <_ctype_>:
   c6b50:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c6b60:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c6b70:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c6b80:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c6b90:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c6ba0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c6bb0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c6bc0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c6bd0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c6c50:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c6c60:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c6c70:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c6c80:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c6c90:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c6ca0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c6cb0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c6cc0:	632e 0000                                   .c..

000c6cc4 <_C_numeric_locale>:
   c6cc4:	693c 000c 6838 000c d6f4 2003 0043 4f50     <i..8h..... C.PO
   c6cd4:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c6ce4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c6cf4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c6d04:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c6d14:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c6d24:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c6d34:	0000 0000                                   ....

000c6d38 <__mprec_bigtens>:
   c6d38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c6d48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c6d58:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c6d60 <__mprec_tens>:
   c6d60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c6d70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c6d80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c6d90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c6da0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c6db0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c6dc0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c6dd0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c6de0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c6df0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c6e00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c6e10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c6e20:	9db4 79d9 7843 44ea                         ...yCx.D

000c6e28 <p05.0>:
   c6e28:	0005 0000 0019 0000 007d 0000               ........}...

000c6e34 <link_const_variable_data_end>:
   c6e34:	000b4a0d 	.word	0x000b4a0d
   c6e38:	000b599d 	.word	0x000b599d
   c6e3c:	000b6dfd 	.word	0x000b6dfd
   c6e40:	000b70d1 	.word	0x000b70d1
   c6e44:	000b7a8d 	.word	0x000b7a8d
   c6e48:	000b85b1 	.word	0x000b85b1
   c6e4c:	000bacd5 	.word	0x000bacd5
   c6e50:	000bb13d 	.word	0x000bb13d
   c6e54:	000bc915 	.word	0x000bc915
   c6e58:	000bd621 	.word	0x000bd621
   c6e5c:	000bd6ed 	.word	0x000bd6ed
   c6e60:	000bde7d 	.word	0x000bde7d
   c6e64:	000bf0e1 	.word	0x000bf0e1
   c6e68:	000bf559 	.word	0x000bf559
   c6e6c:	000bf9c1 	.word	0x000bf9c1
   c6e70:	000bffdd 	.word	0x000bffdd
   c6e74:	000c032d 	.word	0x000c032d

000c6e78 <link_constructors_end>:
	...
