
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.2/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011490  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c54b0  000c54b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c54d4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e8  2003d58c  000c54d8  0002d58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f7c  2003d878  2003d878  0003d878  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c57c0  000c57c0  000357c0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c57ec  000c57ec  000357ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029afe2  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c513  00000000  00000000  002d07d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006e73a  00000000  00000000  002fcce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005010  00000000  00000000  0036b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012560  00000000  00000000  0037042f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ecbc  00000000  00000000  0038298f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00095890  00000000  00000000  003e164b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172f2c  00000000  00000000  00476edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f72c  00000000  00000000  005e9e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00c ff2d 	bl	c0e90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00c ff4f 	bl	c0ee0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d58c 	.word	0x2003d58c
   b404c:	000c54d8 	.word	0x000c54d8
   b4050:	2003d874 	.word	0x2003d874
   b4054:	2003d878 	.word	0x2003d878
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00b ffef 	bl	c0044 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c5464 	.word	0x000c5464
   b4080:	000c54a8 	.word	0x000c54a8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc88 	b.w	b5998 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fd8d 	bl	b5ba8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00b bf8f 	b.w	bffb4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 bf51 	b.w	bcf3c <malloc>

000b409a <_Znaj>:
   b409a:	f008 bf4f 	b.w	bcf3c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f008 bf55 	b.w	bcf4c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 fde2 	bl	bcc74 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bc815 	.word	0x000bc815
   b40b8:	000c32b4 	.word	0x000c32b4

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f004 fac6 	bl	b8674 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c38a8 	.word	0x000c38a8

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 fc93 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f004 fba3 	bl	b8864 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 fc85 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 fc61 	bl	b89fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 fd98 	bl	bcc94 <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d87c 	.word	0x2003d87c
   b4190:	000c38b8 	.word	0x000c38b8

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f007 fb3f 	bl	bb828 <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d8fc 	.word	0x2003d8fc

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f007 bb22 	b.w	bb802 <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d8fc 	.word	0x2003d8fc

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c4:	4b13      	ldr	r3, [pc, #76]	; (b4214 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41c6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c8:	881c      	ldrh	r4, [r3, #0]
   b41ca:	2100      	movs	r1, #0
   b41cc:	4620      	mov	r0, r4
   b41ce:	f00b ffd2 	bl	c0176 <digitalWrite>
	delay(10);
   b41d2:	200a      	movs	r0, #10
   b41d4:	f008 ff32 	bl	bd03c <delay>
	digitalWrite(RFM95_RST,HIGH);
   b41d8:	2101      	movs	r1, #1
   b41da:	4620      	mov	r0, r4
   b41dc:	f00b ffcb 	bl	c0176 <digitalWrite>
	delay(10);
   b41e0:	200a      	movs	r0, #10
   b41e2:	f008 ff2b 	bl	bd03c <delay>

	if (!manager.init()) {
   b41e6:	480c      	ldr	r0, [pc, #48]	; (b4218 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b41e8:	f007 f8a9 	bl	bb33e <_ZN8RHRouter4initEv>
   b41ec:	4604      	mov	r4, r0
   b41ee:	b928      	cbnz	r0, b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41f0:	490a      	ldr	r1, [pc, #40]	; (b421c <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b41f2:	480b      	ldr	r0, [pc, #44]	; (b4220 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b41f4:	f7ff ffa3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b41f8:	4620      	mov	r0, r4
   b41fa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41fc:	ed9f 0a09 	vldr	s0, [pc, #36]	; b4224 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b4200:	4809      	ldr	r0, [pc, #36]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4202:	f007 fb95 	bl	bb930 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4206:	4808      	ldr	r0, [pc, #32]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4208:	2200      	movs	r2, #0
   b420a:	2117      	movs	r1, #23
   b420c:	f007 fd0a 	bl	bbc24 <_ZN7RH_RF9510setTxPowerEab>
return true;
   b4210:	e7f2      	b.n	b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b4212:	bf00      	nop
   b4214:	000c4258 	.word	0x000c4258
   b4218:	2003e178 	.word	0x2003e178
   b421c:	000c32c9 	.word	0x000c32c9
   b4220:	2003e658 	.word	0x2003e658
   b4224:	4464c000 	.word	0x4464c000
   b4228:	2003d8fc 	.word	0x2003d8fc

000b422c <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b422c:	b510      	push	{r4, lr}
   b422e:	460c      	mov	r4, r1
   b4230:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b4232:	f7ff ffc7 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b4236:	b374      	cbz	r4, b4296 <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4238:	f002 f86c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b423c:	2100      	movs	r1, #0
   b423e:	f002 fa03 	bl	b6648 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4242:	a802      	add	r0, sp, #8
   b4244:	f008 fde2 	bl	bce0c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4248:	9a02      	ldr	r2, [sp, #8]
   b424a:	4930      	ldr	r1, [pc, #192]	; (b430c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b424c:	4830      	ldr	r0, [pc, #192]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b424e:	f7ff ff76 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4252:	a802      	add	r0, sp, #8
   b4254:	f00b f9cc 	bl	bf5f0 <_ZN6StringD1Ev>
	jp.addString(nodeID.get_nodeIDJson());				// Read in the JSON string from memory
   b4258:	f002 f91c 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b425c:	4601      	mov	r1, r0
   b425e:	a802      	add	r0, sp, #8
   b4260:	f002 f93e 	bl	b64e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4264:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4266:	9101      	str	r1, [sp, #4]
   b4268:	4608      	mov	r0, r1
   b426a:	f00c ff04 	bl	c1076 <strlen>
   b426e:	9901      	ldr	r1, [sp, #4]
   b4270:	4602      	mov	r2, r0
   b4272:	4828      	ldr	r0, [pc, #160]	; (b4314 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4274:	f004 fa39 	bl	b86ea <_ZN10JsonBuffer7addDataEPKcj>
   b4278:	a802      	add	r0, sp, #8
   b427a:	f00b f9b9 	bl	bf5f0 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b427e:	4825      	ldr	r0, [pc, #148]	; (b4314 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4280:	f004 ff8c 	bl	b919c <_ZN10JsonParser5parseEv>
   b4284:	2800      	cmp	r0, #0
   b4286:	d03b      	beq.n	b4300 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4288:	4923      	ldr	r1, [pc, #140]	; (b4318 <_ZN14LoRA_Functions5setupEb+0xec>)
		Log.info("Parsing error resetting nodeID database");
   b428a:	4821      	ldr	r0, [pc, #132]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b428c:	f7ff ff57 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4290:	2001      	movs	r0, #1
   b4292:	b006      	add	sp, #24
   b4294:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4296:	f002 f83d 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b429a:	f002 f967 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b429e:	b1d8      	cbz	r0, b42d8 <_ZN14LoRA_Functions5setupEb+0xac>
   b42a0:	f002 f838 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b42a4:	f002 f962 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b42a8:	280a      	cmp	r0, #10
   b42aa:	d815      	bhi.n	b42d8 <_ZN14LoRA_Functions5setupEb+0xac>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42ac:	f002 f832 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b42b0:	f002 f95c 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b42b4:	4601      	mov	r1, r0
   b42b6:	4819      	ldr	r0, [pc, #100]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42b8:	f006 fb6d 	bl	ba996 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42bc:	4817      	ldr	r0, [pc, #92]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42be:	f006 fb50 	bl	ba962 <_ZN10RHDatagram11thisAddressEv>
   b42c2:	9001      	str	r0, [sp, #4]
   b42c4:	a802      	add	r0, sp, #8
   b42c6:	f008 fda1 	bl	bce0c <spark_deviceID>
   b42ca:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42ce:	4914      	ldr	r1, [pc, #80]	; (b4320 <_ZN14LoRA_Functions5setupEb+0xf4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42d0:	480f      	ldr	r0, [pc, #60]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b42d2:	f7ff ff34 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42d6:	e7bc      	b.n	b4252 <_ZN14LoRA_Functions5setupEb+0x26>
		sysStatus.set_nodeNumber(11);
   b42d8:	f002 f81c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b42dc:	210b      	movs	r1, #11
   b42de:	f002 f9b3 	bl	b6648 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b42e2:	210b      	movs	r1, #11
   b42e4:	480d      	ldr	r0, [pc, #52]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42e6:	f006 fb56 	bl	ba996 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42ea:	480c      	ldr	r0, [pc, #48]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42ec:	f006 fb39 	bl	ba962 <_ZN10RHDatagram11thisAddressEv>
   b42f0:	9001      	str	r0, [sp, #4]
   b42f2:	a802      	add	r0, sp, #8
   b42f4:	f008 fd8a 	bl	bce0c <spark_deviceID>
   b42f8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42fc:	4909      	ldr	r1, [pc, #36]	; (b4324 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b42fe:	e7e7      	b.n	b42d0 <_ZN14LoRA_Functions5setupEb+0xa4>
		nodeID.resetNodeIDs();
   b4300:	f002 f8c8 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b4304:	f002 f904 	bl	b6510 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b4308:	4907      	ldr	r1, [pc, #28]	; (b4328 <_ZN14LoRA_Functions5setupEb+0xfc>)
   b430a:	e7be      	b.n	b428a <_ZN14LoRA_Functions5setupEb+0x5e>
   b430c:	000c32d5 	.word	0x000c32d5
   b4310:	2003e658 	.word	0x2003e658
   b4314:	2003da2c 	.word	0x2003da2c
   b4318:	000c338d 	.word	0x000c338d
   b431c:	2003e17c 	.word	0x2003e17c
   b4320:	000c330f 	.word	0x000c330f
   b4324:	000c3346 	.word	0x000c3346
   b4328:	000c33a1 	.word	0x000c33a1

000b432c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false; 
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b432c:	b538      	push	{r3, r4, r5, lr}

	current.set_hourlyCount(buf[3] << 8 | buf[4]);
   b432e:	4c24      	ldr	r4, [pc, #144]	; (b43c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b4330:	f002 f828 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4334:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b4338:	ba49      	rev16	r1, r1
   b433a:	b289      	uxth	r1, r1
   b433c:	f002 fa56 	bl	b67ec <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[5] << 8 | buf[6]);
   b4340:	f002 f820 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4344:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4348:	ba49      	rev16	r1, r1
   b434a:	b289      	uxth	r1, r1
   b434c:	f002 fa54 	bl	b67f8 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[7]);
   b4350:	f002 f818 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4354:	79e1      	ldrb	r1, [r4, #7]
   b4356:	f002 f9d7 	bl	b6708 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[8]);
   b435a:	f002 f813 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b435e:	7a21      	ldrb	r1, [r4, #8]
   b4360:	f002 f9ae 	bl	b66c0 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[9]);
   b4364:	f002 f80e 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4368:	4605      	mov	r5, r0
   b436a:	7a60      	ldrb	r0, [r4, #9]
   b436c:	f00c f95e 	bl	c062c <__aeabi_ui2d>
   b4370:	ec41 0b10 	vmov	d0, r0, r1
   b4374:	4628      	mov	r0, r5
   b4376:	f002 f84b 	bl	b6410 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[10]);
   b437a:	f002 f803 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b437e:	7aa1      	ldrb	r1, [r4, #10]
   b4380:	f002 f9a4 	bl	b66cc <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[11]);
   b4384:	f001 fffe 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4388:	7ae1      	ldrb	r1, [r4, #11]
   b438a:	f002 f9a5 	bl	b66d8 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[12]);
   b438e:	f001 fff9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4392:	7b21      	ldrb	r1, [r4, #12]
   b4394:	f002 f9a6 	bl	b66e4 <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[13]);
   b4398:	f001 fff4 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b439c:	7b61      	ldrb	r1, [r4, #13]
   b439e:	f002 f9a7 	bl	b66f0 <_ZN17currentStatusData16set_successCountEh>
	current.set_RSSI(driver.lastRssi());
   b43a2:	f001 ffef 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b43a6:	4604      	mov	r4, r0
   b43a8:	4806      	ldr	r0, [pc, #24]	; (b43c4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b43aa:	f006 fb72 	bl	baa92 <_ZN15RHGenericDriver8lastRssiEv>
   b43ae:	b281      	uxth	r1, r0
   b43b0:	4620      	mov	r0, r4
   b43b2:	f002 fa15 	bl	b67e0 <_ZN17currentStatusData8set_RSSIEt>

	lora_state = DATA_ACK;		// Prepare to respond
   b43b6:	4b04      	ldr	r3, [pc, #16]	; (b43c8 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x9c>)
   b43b8:	2204      	movs	r2, #4
   b43ba:	701a      	strb	r2, [r3, #0]

	return true;
}
   b43bc:	2001      	movs	r0, #1
   b43be:	bd38      	pop	{r3, r4, r5, pc}
   b43c0:	2003d880 	.word	0x2003d880
   b43c4:	2003d8fc 	.word	0x2003d8fc
   b43c8:	2003d878 	.word	0x2003d878

000b43cc <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>:
		return false;
	}
}

// These are the receive and respond messages for Alert Reports
bool LoRA_Functions::decipherAlertReportGateway() {
   b43cc:	b510      	push	{r4, lr}
	current.set_alertCodeNode(buf[2]);
   b43ce:	f001 ffd9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b43d2:	4b0e      	ldr	r3, [pc, #56]	; (b440c <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x40>)
   b43d4:	7899      	ldrb	r1, [r3, #2]
   b43d6:	f002 f991 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b43da:	f001 ffd3 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b43de:	4604      	mov	r4, r0
   b43e0:	f00b fcb9 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b43e4:	4602      	mov	r2, r0
   b43e6:	17c3      	asrs	r3, r0, #31
   b43e8:	4620      	mov	r0, r4
   b43ea:	f002 fa5f 	bl	b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>
	current.set_RSSI(driver.lastRssi() );
   b43ee:	f001 ffc9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b43f2:	4604      	mov	r4, r0
   b43f4:	4806      	ldr	r0, [pc, #24]	; (b4410 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x44>)
   b43f6:	f006 fb4c 	bl	baa92 <_ZN15RHGenericDriver8lastRssiEv>
   b43fa:	b281      	uxth	r1, r0
   b43fc:	4620      	mov	r0, r4
   b43fe:	f002 f9ef 	bl	b67e0 <_ZN17currentStatusData8set_RSSIEt>

	lora_state = ALERT_ACK;		// Prepare to respond
   b4402:	4b04      	ldr	r3, [pc, #16]	; (b4414 <_ZN14LoRA_Functions26decipherAlertReportGatewayEv+0x48>)
   b4404:	2206      	movs	r2, #6
   b4406:	701a      	strb	r2, [r3, #0]

	return true;
}
   b4408:	2001      	movs	r0, #1
   b440a:	bd10      	pop	{r4, pc}
   b440c:	2003d880 	.word	0x2003d880
   b4410:	2003d8fc 	.word	0x2003d8fc
   b4414:	2003d878 	.word	0x2003d878

000b4418 <_ZN14LoRA_Functions12findDeviceIDEh>:
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b4418:	b530      	push	{r4, r5, lr}
	if (nodeNumber > 10) return "null";
   b441a:	2a0a      	cmp	r2, #10
String LoRA_Functions::findDeviceID(uint8_t nodeNumber)  {
   b441c:	b087      	sub	sp, #28
   b441e:	4604      	mov	r4, r0
   b4420:	4615      	mov	r5, r2
	if (nodeNumber > 10) return "null";
   b4422:	d905      	bls.n	b4430 <_ZN14LoRA_Functions12findDeviceIDEh+0x18>
   b4424:	4918      	ldr	r1, [pc, #96]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b4426:	f00b f92e 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
		
	return nodeDeviceID;
}
   b442a:	4620      	mov	r0, r4
   b442c:	b007      	add	sp, #28
   b442e:	bd30      	pop	{r4, r5, pc}
	String nodeDeviceID;
   b4430:	4916      	ldr	r1, [pc, #88]	; (b448c <_ZN14LoRA_Functions12findDeviceIDEh+0x74>)
   b4432:	a802      	add	r0, sp, #8
   b4434:	f00b f927 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4438:	4815      	ldr	r0, [pc, #84]	; (b4490 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b443a:	f004 f998 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b443e:	4a15      	ldr	r2, [pc, #84]	; (b4494 <_ZN14LoRA_Functions12findDeviceIDEh+0x7c>)
   b4440:	4601      	mov	r1, r0
   b4442:	ab01      	add	r3, sp, #4
   b4444:	4812      	ldr	r0, [pc, #72]	; (b4490 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b4446:	f004 faf7 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b444a:	9901      	ldr	r1, [sp, #4]
   b444c:	4810      	ldr	r0, [pc, #64]	; (b4490 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b444e:	1e6a      	subs	r2, r5, #1
   b4450:	f004 f9af 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4454:	4601      	mov	r1, r0
   b4456:	b938      	cbnz	r0, b4468 <_ZN14LoRA_Functions12findDeviceIDEh+0x50>
   b4458:	490b      	ldr	r1, [pc, #44]	; (b4488 <_ZN14LoRA_Functions12findDeviceIDEh+0x70>)
   b445a:	4620      	mov	r0, r4
   b445c:	f00b f913 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4460:	a802      	add	r0, sp, #8
   b4462:	f00b f8c5 	bl	bf5f0 <_ZN6StringD1Ev>
   b4466:	e7e0      	b.n	b442a <_ZN14LoRA_Functions12findDeviceIDEh+0x12>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);	// Get the deviceID and compare
   b4468:	4809      	ldr	r0, [pc, #36]	; (b4490 <_ZN14LoRA_Functions12findDeviceIDEh+0x78>)
   b446a:	4a0b      	ldr	r2, [pc, #44]	; (b4498 <_ZN14LoRA_Functions12findDeviceIDEh+0x80>)
   b446c:	ab02      	add	r3, sp, #8
   b446e:	f7ff fe58 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4472:	2100      	movs	r1, #0
   b4474:	a802      	add	r0, sp, #8
   b4476:	f00b f9cc 	bl	bf812 <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b447a:	2800      	cmp	r0, #0
   b447c:	d1ec      	bne.n	b4458 <_ZN14LoRA_Functions12findDeviceIDEh+0x40>
	return nodeDeviceID;
   b447e:	a902      	add	r1, sp, #8
   b4480:	4620      	mov	r0, r4
   b4482:	f00b f931 	bl	bf6e8 <_ZN6StringC1EOS_>
   b4486:	e7eb      	b.n	b4460 <_ZN14LoRA_Functions12findDeviceIDEh+0x48>
   b4488:	000c33c9 	.word	0x000c33c9
   b448c:	000c4e80 	.word	0x000c4e80
   b4490:	2003da2c 	.word	0x2003da2c
   b4494:	000c33ce 	.word	0x000c33ce
   b4498:	000c33d4 	.word	0x000c33d4

000b449c <_ZN14LoRA_Functions7getTypeEi>:
		return false;
	}
}

byte LoRA_Functions::getType(int nodeNumber) {
	if (nodeNumber > 10) current.get_sensorType();
   b449c:	290a      	cmp	r1, #10
byte LoRA_Functions::getType(int nodeNumber) {
   b449e:	b513      	push	{r0, r1, r4, lr}
   b44a0:	460c      	mov	r4, r1
	if (nodeNumber > 10) current.get_sensorType();
   b44a2:	dd03      	ble.n	b44ac <_ZN14LoRA_Functions7getTypeEi+0x10>
   b44a4:	f001 ff6e 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b44a8:	f002 f8ab 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>

	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ac:	4810      	ldr	r0, [pc, #64]	; (b44f0 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44ae:	f004 f95e 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b44b2:	4a10      	ldr	r2, [pc, #64]	; (b44f4 <_ZN14LoRA_Functions7getTypeEi+0x58>)
   b44b4:	4601      	mov	r1, r0
   b44b6:	ab01      	add	r3, sp, #4
   b44b8:	480d      	ldr	r0, [pc, #52]	; (b44f0 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44ba:	f004 fabd 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44be:	9901      	ldr	r1, [sp, #4]
   b44c0:	480b      	ldr	r0, [pc, #44]	; (b44f0 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44c2:	1e62      	subs	r2, r4, #1
   b44c4:	f004 f975 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44c8:	4601      	mov	r1, r0
   b44ca:	b948      	cbnz	r0, b44e0 <_ZN14LoRA_Functions7getTypeEi+0x44>
		Log.info("From getType function Node number not found");
   b44cc:	490a      	ldr	r1, [pc, #40]	; (b44f8 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44ce:	480b      	ldr	r0, [pc, #44]	; (b44fc <_ZN14LoRA_Functions7getTypeEi+0x60>)
   b44d0:	f7ff fe35 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries 
   b44d4:	f001 ff56 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b44d8:	f002 f893 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>

	jp.getValueByKey(nodeObjectContainer, "type", type);

	return type;

}
   b44dc:	b002      	add	sp, #8
   b44de:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b44e0:	4803      	ldr	r0, [pc, #12]	; (b44f0 <_ZN14LoRA_Functions7getTypeEi+0x54>)
   b44e2:	4a07      	ldr	r2, [pc, #28]	; (b4500 <_ZN14LoRA_Functions7getTypeEi+0x64>)
   b44e4:	466b      	mov	r3, sp
   b44e6:	f7ff fe0e 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b44ea:	f89d 0000 	ldrb.w	r0, [sp]
   b44ee:	e7f5      	b.n	b44dc <_ZN14LoRA_Functions7getTypeEi+0x40>
   b44f0:	2003da2c 	.word	0x2003da2c
   b44f4:	000c33ce 	.word	0x000c33ce
   b44f8:	000c33d8 	.word	0x000c33d8
   b44fc:	2003e658 	.word	0x2003e658
   b4500:	000c3404 	.word	0x000c3404

000b4504 <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4504:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b4506:	b513      	push	{r0, r1, r4, lr}
   b4508:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b450a:	dc13      	bgt.n	b4534 <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b450c:	480f      	ldr	r0, [pc, #60]	; (b454c <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b450e:	f004 f92e 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b4512:	4a0f      	ldr	r2, [pc, #60]	; (b4550 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b4514:	4601      	mov	r1, r0
   b4516:	ab01      	add	r3, sp, #4
   b4518:	480c      	ldr	r0, [pc, #48]	; (b454c <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b451a:	f004 fa8d 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b451e:	9901      	ldr	r1, [sp, #4]
   b4520:	480a      	ldr	r0, [pc, #40]	; (b454c <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4522:	1e62      	subs	r2, r4, #1
   b4524:	f004 f945 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b4528:	4601      	mov	r1, r0
   b452a:	b928      	cbnz	r0, b4538 <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b452c:	4909      	ldr	r1, [pc, #36]	; (b4554 <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b452e:	480a      	ldr	r0, [pc, #40]	; (b4558 <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b4530:	f7ff fe05 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4534:	20ff      	movs	r0, #255	; 0xff
   b4536:	e006      	b.n	b4546 <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4538:	4804      	ldr	r0, [pc, #16]	; (b454c <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b453a:	4a08      	ldr	r2, [pc, #32]	; (b455c <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b453c:	466b      	mov	r3, sp
   b453e:	f7ff fde2 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b4542:	f89d 0000 	ldrb.w	r0, [sp]

}
   b4546:	b002      	add	sp, #8
   b4548:	bd10      	pop	{r4, pc}
   b454a:	bf00      	nop
   b454c:	2003da2c 	.word	0x2003da2c
   b4550:	000c33ce 	.word	0x000c33ce
   b4554:	000c3409 	.word	0x000c3409
   b4558:	2003e658 	.word	0x2003e658
   b455c:	000c3437 	.word	0x000c3437

000b4560 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeID.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b4560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4564:	4607      	mov	r7, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b4566:	f001 fed5 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b456a:	f002 f8ea 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b456e:	4604      	mov	r4, r0
	bool health = false;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4570:	481f      	ldr	r0, [pc, #124]	; (b45f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4572:	f8df 807c 	ldr.w	r8, [pc, #124]	; b45f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4576:	f8df 9094 	ldr.w	r9, [pc, #148]	; b460c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b457a:	f004 f8f8 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b457e:	ab01      	add	r3, sp, #4
   b4580:	4601      	mov	r1, r0
   b4582:	4a1c      	ldr	r2, [pc, #112]	; (b45f4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x94>)
   b4584:	481a      	ldr	r0, [pc, #104]	; (b45f0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
   b4586:	f004 fa57 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b458a:	233c      	movs	r3, #60	; 0x3c
   b458c:	4363      	muls	r3, r4

		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b458e:	17de      	asrs	r6, r3, #31
   b4590:	18dc      	adds	r4, r3, r3
   b4592:	4176      	adcs	r6, r6
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4594:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4596:	9901      	ldr	r1, [sp, #4]
   b4598:	462a      	mov	r2, r5
   b459a:	4640      	mov	r0, r8
   b459c:	f004 f909 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b45a0:	4601      	mov	r1, r0
   b45a2:	b180      	cbz	r0, b45c6 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x66>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45a4:	466b      	mov	r3, sp
   b45a6:	464a      	mov	r2, r9
   b45a8:	4640      	mov	r0, r8
   b45aa:	f7ff fdac 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b45ae:	f00b fbd2 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b45b2:	9b00      	ldr	r3, [sp, #0]
   b45b4:	1ac3      	subs	r3, r0, r3
   b45b6:	17da      	asrs	r2, r3, #31
   b45b8:	42a3      	cmp	r3, r4
   b45ba:	eb72 0306 	sbcs.w	r3, r2, r6
   b45be:	db14      	blt.n	b45ea <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8a>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45c0:	3501      	adds	r5, #1
   b45c2:	2d0a      	cmp	r5, #10
   b45c4:	d1e7      	bne.n	b4596 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x36>
			health = true;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45c6:	4a0c      	ldr	r2, [pc, #48]	; (b45f8 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45c8:	2400      	movs	r4, #0
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45ca:	490c      	ldr	r1, [pc, #48]	; (b45fc <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9c>)
   b45cc:	480c      	ldr	r0, [pc, #48]	; (b4600 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b45ce:	f7ff fdb6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b45d2:	b934      	cbnz	r4, b45e2 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x82>
		Log.info("Node connections unhealthy, reseting LoRA radio");
   b45d4:	480a      	ldr	r0, [pc, #40]	; (b4600 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b45d6:	490b      	ldr	r1, [pc, #44]	; (b4604 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa4>)
   b45d8:	f7ff fdb1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		LoRA_Functions::initializeRadio();
   b45dc:	4638      	mov	r0, r7
   b45de:	f7ff fdf1 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	}

	return health;
}
   b45e2:	4620      	mov	r0, r4
   b45e4:	b003      	add	sp, #12
   b45e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45ea:	4a07      	ldr	r2, [pc, #28]	; (b4608 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
			health = true;
   b45ec:	2401      	movs	r4, #1
   b45ee:	e7ec      	b.n	b45ca <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x6a>
   b45f0:	2003da2c 	.word	0x2003da2c
   b45f4:	000c33ce 	.word	0x000c33ce
   b45f8:	000c343c 	.word	0x000c343c
   b45fc:	000c344b 	.word	0x000c344b
   b4600:	2003e658 	.word	0x2003e658
   b4604:	000c3464 	.word	0x000c3464
   b4608:	000c343e 	.word	0x000c343e
   b460c:	000c3446 	.word	0x000c3446

000b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4610:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4612:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4614:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4616:	b17c      	cbz	r4, b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4618:	6863      	ldr	r3, [r4, #4]
   b461a:	3b01      	subs	r3, #1
   b461c:	6063      	str	r3, [r4, #4]
   b461e:	b95b      	cbnz	r3, b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4620:	6823      	ldr	r3, [r4, #0]
   b4622:	4620      	mov	r0, r4
   b4624:	689b      	ldr	r3, [r3, #8]
   b4626:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4628:	68a3      	ldr	r3, [r4, #8]
   b462a:	3b01      	subs	r3, #1
   b462c:	60a3      	str	r3, [r4, #8]
   b462e:	b91b      	cbnz	r3, b4638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4630:	6823      	ldr	r3, [r4, #0]
   b4632:	4620      	mov	r0, r4
   b4634:	68db      	ldr	r3, [r3, #12]
   b4636:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4638:	4628      	mov	r0, r5
   b463a:	bd38      	pop	{r3, r4, r5, pc}

000b463c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b463c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b463e:	b0a9      	sub	sp, #164	; 0xa4
   b4640:	4606      	mov	r6, r0
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b4642:	f001 fe67 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b4646:	f002 f877 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b464a:	4c4d      	ldr	r4, [pc, #308]	; (b4780 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x144>)
   b464c:	0a00      	lsrs	r0, r0, #8
   b464e:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b4650:	f001 fe60 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b4654:	f002 f870 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b4658:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b465a:	f00b fb7c 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b465e:	1600      	asrs	r0, r0, #24
   b4660:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b4662:	f00b fb78 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4666:	1400      	asrs	r0, r0, #16
   b4668:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b466a:	f00b fb74 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b466e:	1200      	asrs	r0, r0, #8
   b4670:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b4672:	f00b fb70 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4676:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4678:	f001 fe4c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b467c:	f002 f861 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4680:	0a00      	lsrs	r0, r0, #8
   b4682:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4684:	f001 fe46 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b4688:	f002 f85b 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
	buf[8] = 0;														// Clear the alert code for the node
   b468c:	2500      	movs	r5, #0
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b468e:	71e0      	strb	r0, [r4, #7]
	buf[8] = 0;														// Clear the alert code for the node
   b4690:	7225      	strb	r5, [r4, #8]
	buf[9] = current.get_nodeNumber();
   b4692:	f001 fe77 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4696:	f001 ff8c 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b469a:	7260      	strb	r0, [r4, #9]
	buf[10] = getType(current.get_nodeNumber());
   b469c:	f001 fe72 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b46a0:	f001 ff87 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b46a4:	4601      	mov	r1, r0
   b46a6:	4630      	mov	r0, r6
   b46a8:	f7ff fef8 	bl	b449c <_ZN14LoRA_Functions7getTypeEi>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46ac:	4b35      	ldr	r3, [pc, #212]	; (b4784 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x148>)
	buf[10] = getType(current.get_nodeNumber());
   b46ae:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b46b0:	881f      	ldrh	r7, [r3, #0]
   b46b2:	2101      	movs	r1, #1
   b46b4:	4638      	mov	r0, r7
   b46b6:	f00b fd5e 	bl	c0176 <digitalWrite>
	if (manager.sendtoWait(buf, 11, current.get_tempNodeNumber(), JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b46ba:	f001 fe63 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b46be:	f001 ff7d 	bl	b65bc <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b46c2:	2202      	movs	r2, #2
   b46c4:	4603      	mov	r3, r0
   b46c6:	9200      	str	r2, [sp, #0]
   b46c8:	482f      	ldr	r0, [pc, #188]	; (b4788 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14c>)
   b46ca:	220b      	movs	r2, #11
   b46cc:	4621      	mov	r1, r4
   b46ce:	f006 fbfb 	bl	baec8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b46d2:	4606      	mov	r6, r0
   b46d4:	2800      	cmp	r0, #0
   b46d6:	d142      	bne.n	b475e <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x122>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b46d8:	f001 fe54 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b46dc:	4605      	mov	r5, r0
   b46de:	f001 fe51 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b46e2:	f001 ff66 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b46e6:	4601      	mov	r1, r0
   b46e8:	4628      	mov	r0, r5
   b46ea:	f001 ffe3 	bl	b66b4 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b46ee:	4631      	mov	r1, r6
   b46f0:	4638      	mov	r0, r7
   b46f2:	f00b fd40 	bl	c0176 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s counter with alert %d and signal strength %d", current.get_tempNodeNumber(), (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), driver.lastRssi());
   b46f6:	f001 fe45 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b46fa:	f001 ff5f 	bl	b65bc <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b46fe:	7aa1      	ldrb	r1, [r4, #10]
   b4700:	4a22      	ldr	r2, [pc, #136]	; (b478c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x150>)
   b4702:	4c23      	ldr	r4, [pc, #140]	; (b4790 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x154>)
   b4704:	9005      	str	r0, [sp, #20]
   b4706:	2900      	cmp	r1, #0
   b4708:	bf18      	it	ne
   b470a:	4614      	movne	r4, r2
   b470c:	f001 fe3a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4710:	f001 ff72 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4714:	4605      	mov	r5, r0
   b4716:	481f      	ldr	r0, [pc, #124]	; (b4794 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x158>)
   b4718:	f006 f9bb 	bl	baa92 <_ZN15RHGenericDriver8lastRssiEv>
   b471c:	9b05      	ldr	r3, [sp, #20]
   b471e:	4a1e      	ldr	r2, [pc, #120]	; (b4798 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x15c>)
   b4720:	9400      	str	r4, [sp, #0]
   b4722:	e9cd 5001 	strd	r5, r0, [sp, #4]
   b4726:	2180      	movs	r1, #128	; 0x80
   b4728:	a808      	add	r0, sp, #32
   b472a:	f008 fc2f 	bl	bcf8c <snprintf>
		Log.info(messageString);
   b472e:	481b      	ldr	r0, [pc, #108]	; (b479c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x160>)
   b4730:	a908      	add	r1, sp, #32
   b4732:	f7ff fd04 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4736:	f008 fb61 	bl	bcdfc <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b473a:	4605      	mov	r5, r0
   b473c:	b1e8      	cbz	r0, b477a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13e>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b473e:	4b18      	ldr	r3, [pc, #96]	; (b47a0 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x164>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4740:	4918      	ldr	r1, [pc, #96]	; (b47a4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x168>)
   b4742:	781b      	ldrb	r3, [r3, #0]
   b4744:	f88d 3000 	strb.w	r3, [sp]
   b4748:	a806      	add	r0, sp, #24
   b474a:	233c      	movs	r3, #60	; 0x3c
   b474c:	aa08      	add	r2, sp, #32
   b474e:	f008 ff41 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4752:	a807      	add	r0, sp, #28
   b4754:	f7ff ff5c 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4758:	4628      	mov	r0, r5
   b475a:	b029      	add	sp, #164	; 0xa4
   b475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b475e:	f001 fe11 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4762:	f001 ff2b 	bl	b65bc <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4766:	4910      	ldr	r1, [pc, #64]	; (b47a8 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x16c>)
   b4768:	4602      	mov	r2, r0
   b476a:	480c      	ldr	r0, [pc, #48]	; (b479c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x160>)
   b476c:	f7ff fce7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4770:	4629      	mov	r1, r5
   b4772:	4638      	mov	r0, r7
   b4774:	f00b fcff 	bl	c0176 <digitalWrite>
		return false;
   b4778:	e7ee      	b.n	b4758 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>
		return true;
   b477a:	2501      	movs	r5, #1
   b477c:	e7ec      	b.n	b4758 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x11c>
   b477e:	bf00      	nop
   b4780:	2003d880 	.word	0x2003d880
   b4784:	000c4250 	.word	0x000c4250
   b4788:	2003e178 	.word	0x2003e178
   b478c:	000c3498 	.word	0x000c3498
   b4790:	000c3494 	.word	0x000c3494
   b4794:	2003d8fc 	.word	0x2003d8fc
   b4798:	000c349f 	.word	0x000c349f
   b479c:	2003e658 	.word	0x2003e658
   b47a0:	2003d879 	.word	0x2003d879
   b47a4:	000c34ee 	.word	0x000c34ee
   b47a8:	000c34f5 	.word	0x000c34f5

000b47ac <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b47ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b47b0:	b0b8      	sub	sp, #224	; 0xe0
   b47b2:	460f      	mov	r7, r1
	String nodeDeviceID;
   b47b4:	a80e      	add	r0, sp, #56	; 0x38
   b47b6:	4941      	ldr	r1, [pc, #260]	; (b48bc <_ZN14LoRA_Functions13printNodeDataEb+0x110>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b47b8:	4d41      	ldr	r5, [pc, #260]	; (b48c0 <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b47ba:	f8df 812c 	ldr.w	r8, [pc, #300]	; b48e8 <_ZN14LoRA_Functions13printNodeDataEb+0x13c>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b47be:	f8df 912c 	ldr.w	r9, [pc, #300]	; b48ec <_ZN14LoRA_Functions13printNodeDataEb+0x140>
	String nodeDeviceID;
   b47c2:	f00a ff60 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b47c6:	483e      	ldr	r0, [pc, #248]	; (b48c0 <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
   b47c8:	f003 ffd1 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b47cc:	4a3d      	ldr	r2, [pc, #244]	; (b48c4 <_ZN14LoRA_Functions13printNodeDataEb+0x118>)
   b47ce:	4601      	mov	r1, r0
   b47d0:	ab0d      	add	r3, sp, #52	; 0x34
   b47d2:	483b      	ldr	r0, [pc, #236]	; (b48c0 <_ZN14LoRA_Functions13printNodeDataEb+0x114>)
   b47d4:	f004 f930 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b47d8:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b47da:	990d      	ldr	r1, [sp, #52]	; 0x34
   b47dc:	4632      	mov	r2, r6
   b47de:	4628      	mov	r0, r5
   b47e0:	f003 ffe7 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b47e4:	4604      	mov	r4, r0
   b47e6:	2800      	cmp	r0, #0
   b47e8:	d062      	beq.n	b48b0 <_ZN14LoRA_Functions13printNodeDataEb+0x104>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b47ea:	4601      	mov	r1, r0
   b47ec:	ab0e      	add	r3, sp, #56	; 0x38
   b47ee:	4642      	mov	r2, r8
   b47f0:	4628      	mov	r0, r5
   b47f2:	f7ff fc96 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b47f6:	ab08      	add	r3, sp, #32
   b47f8:	464a      	mov	r2, r9
   b47fa:	4621      	mov	r1, r4
   b47fc:	4628      	mov	r0, r5
   b47fe:	f7ff fc82 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b4802:	4a31      	ldr	r2, [pc, #196]	; (b48c8 <_ZN14LoRA_Functions13printNodeDataEb+0x11c>)
   b4804:	ab09      	add	r3, sp, #36	; 0x24
   b4806:	4621      	mov	r1, r4
   b4808:	4628      	mov	r0, r5
   b480a:	f7ff fc7c 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b480e:	4a2f      	ldr	r2, [pc, #188]	; (b48cc <_ZN14LoRA_Functions13printNodeDataEb+0x120>)
   b4810:	ab0a      	add	r3, sp, #40	; 0x28
   b4812:	4621      	mov	r1, r4
   b4814:	4628      	mov	r0, r5
   b4816:	f7ff fc76 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b481a:	4a2d      	ldr	r2, [pc, #180]	; (b48d0 <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
   b481c:	ab12      	add	r3, sp, #72	; 0x48
   b481e:	4621      	mov	r1, r4
   b4820:	4628      	mov	r0, r5
   b4822:	f004 f909 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4826:	b120      	cbz	r0, b4832 <_ZN14LoRA_Functions13printNodeDataEb+0x86>
			return getTokenValue(value, result);
   b4828:	9912      	ldr	r1, [sp, #72]	; 0x48
   b482a:	aa0b      	add	r2, sp, #44	; 0x2c
   b482c:	4628      	mov	r0, r5
   b482e:	f004 f82b 	bl	b8888 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4832:	4621      	mov	r1, r4
   b4834:	4a27      	ldr	r2, [pc, #156]	; (b48d4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b4836:	ab0c      	add	r3, sp, #48	; 0x30
   b4838:	4628      	mov	r0, r5
   b483a:	f7ff fc64 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b483e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4840:	9c08      	ldr	r4, [sp, #32]
	const char * c_str() const { return buffer; }
   b4842:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   b4846:	17d3      	asrs	r3, r2, #31
   b4848:	a812      	add	r0, sp, #72	; 0x48
   b484a:	f00b f97f 	bl	bfb4c <_ZN9TimeClass7timeStrEx>
   b484e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4850:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b4852:	9306      	str	r3, [sp, #24]
   b4854:	f00b ff0c 	bl	c0670 <__aeabi_f2d>
   b4858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b485a:	9302      	str	r3, [sp, #8]
   b485c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b485e:	4a1e      	ldr	r2, [pc, #120]	; (b48d8 <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b4860:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4864:	e9cd a300 	strd	sl, r3, [sp]
   b4868:	2188      	movs	r1, #136	; 0x88
   b486a:	4623      	mov	r3, r4
   b486c:	a816      	add	r0, sp, #88	; 0x58
   b486e:	f008 fb8d 	bl	bcf8c <snprintf>
   b4872:	a812      	add	r0, sp, #72	; 0x48
   b4874:	f00a febc 	bl	bf5f0 <_ZN6StringD1Ev>
		Log.info(data);
   b4878:	4818      	ldr	r0, [pc, #96]	; (b48dc <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b487a:	a916      	add	r1, sp, #88	; 0x58
   b487c:	f7ff fc5f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4880:	f008 fabc 	bl	bcdfc <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4884:	b188      	cbz	r0, b48aa <_ZN14LoRA_Functions13printNodeDataEb+0xfe>
   b4886:	b187      	cbz	r7, b48aa <_ZN14LoRA_Functions13printNodeDataEb+0xfe>
   b4888:	4b15      	ldr	r3, [pc, #84]	; (b48e0 <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b488a:	4916      	ldr	r1, [pc, #88]	; (b48e4 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b488c:	781b      	ldrb	r3, [r3, #0]
   b488e:	f88d 3000 	strb.w	r3, [sp]
   b4892:	aa16      	add	r2, sp, #88	; 0x58
   b4894:	233c      	movs	r3, #60	; 0x3c
   b4896:	a812      	add	r0, sp, #72	; 0x48
   b4898:	f008 fe9c 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b489c:	a813      	add	r0, sp, #76	; 0x4c
   b489e:	f7ff feb7 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b48a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b48a6:	f008 fbc9 	bl	bd03c <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48aa:	3601      	adds	r6, #1
   b48ac:	2e0a      	cmp	r6, #10
   b48ae:	d194      	bne.n	b47da <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b48b0:	a80e      	add	r0, sp, #56	; 0x38
   b48b2:	f00a fe9d 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b48b6:	b038      	add	sp, #224	; 0xe0
   b48b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b48bc:	000c4e80 	.word	0x000c4e80
   b48c0:	2003da2c 	.word	0x2003da2c
   b48c4:	000c33ce 	.word	0x000c33ce
   b48c8:	000c3446 	.word	0x000c3446
   b48cc:	000c3404 	.word	0x000c3404
   b48d0:	000c3521 	.word	0x000c3521
   b48d4:	000c3437 	.word	0x000c3437
   b48d8:	000c3526 	.word	0x000c3526
   b48dc:	2003e658 	.word	0x2003e658
   b48e0:	2003d879 	.word	0x2003d879
   b48e4:	000c357d 	.word	0x000c357d
   b48e8:	000c33d4 	.word	0x000c33d4
   b48ec:	000c351c 	.word	0x000c351c

000b48f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b48f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b48f2:	4604      	mov	r4, r0
   b48f4:	4615      	mov	r5, r2
   b48f6:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b48f8:	f004 f9c2 	bl	b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b48fc:	9901      	ldr	r1, [sp, #4]
   b48fe:	2201      	movs	r2, #1
   b4900:	4620      	mov	r0, r4
   b4902:	f004 f92b 	bl	b8b5c <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4906:	4620      	mov	r0, r4
   b4908:	213a      	movs	r1, #58	; 0x3a
   b490a:	f004 f8db 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b490e:	4904      	ldr	r1, [pc, #16]	; (b4920 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4910:	462a      	mov	r2, r5
   b4912:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4914:	b003      	add	sp, #12
   b4916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b491a:	f004 b912 	b.w	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
   b491e:	bf00      	nop
   b4920:	000c35af 	.word	0x000c35af

000b4924 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4924:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4926:	4b11      	ldr	r3, [pc, #68]	; (b496c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4928:	4c11      	ldr	r4, [pc, #68]	; (b4970 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b492a:	2201      	movs	r2, #1
   b492c:	701a      	strb	r2, [r3, #0]
   b492e:	2332      	movs	r3, #50	; 0x32
   b4930:	9300      	str	r3, [sp, #0]
   b4932:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4936:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b493a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b493e:	4620      	mov	r0, r4
   b4940:	f003 fefa 	bl	b8738 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4944:	4b0b      	ldr	r3, [pc, #44]	; (b4974 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4946:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4948:	4a0b      	ldr	r2, [pc, #44]	; (b4978 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b494a:	4c0c      	ldr	r4, [pc, #48]	; (b497c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b494c:	490c      	ldr	r1, [pc, #48]	; (b4980 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b494e:	4b0d      	ldr	r3, [pc, #52]	; (b4984 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4950:	7812      	ldrb	r2, [r2, #0]
   b4952:	7809      	ldrb	r1, [r1, #0]
   b4954:	4620      	mov	r0, r4
   b4956:	f006 ffad 	bl	bb8b4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b495a:	480b      	ldr	r0, [pc, #44]	; (b4988 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b495c:	2200      	movs	r2, #0
   b495e:	4621      	mov	r1, r4
}
   b4960:	b002      	add	sp, #8
   b4962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4966:	f006 baa5 	b.w	baeb4 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b496a:	bf00      	nop
   b496c:	2003d879 	.word	0x2003d879
   b4970:	2003da2c 	.word	0x2003da2c
   b4974:	000c38a8 	.word	0x000c38a8
   b4978:	000c4256 	.word	0x000c4256
   b497c:	2003d8fc 	.word	0x2003d8fc
   b4980:	000c4254 	.word	0x000c4254
   b4984:	2003e4ec 	.word	0x2003e4ec
   b4988:	2003e178 	.word	0x2003e178

000b498c <_ZN14LoRA_Functions14findNodeNumberEPKc>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID) {
   b498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4990:	b096      	sub	sp, #88	; 0x58
   b4992:	460e      	mov	r6, r1
	String nodeDeviceID;
   b4994:	a802      	add	r0, sp, #8
   b4996:	4956      	ldr	r1, [pc, #344]	; (b4af0 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x164>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4998:	f8df 8158 	ldr.w	r8, [pc, #344]	; b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b499c:	f8df a16c 	ldr.w	sl, [pc, #364]	; b4b0c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x180>
	String nodeDeviceID;
   b49a0:	f00a fe71 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b49a4:	4853      	ldr	r0, [pc, #332]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b49a6:	f003 fee2 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b49aa:	4a53      	ldr	r2, [pc, #332]	; (b4af8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x16c>)
   b49ac:	4601      	mov	r1, r0
   b49ae:	ab01      	add	r3, sp, #4
   b49b0:	4850      	ldr	r0, [pc, #320]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b49b2:	f004 f841 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b49b6:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b49b8:	9901      	ldr	r1, [sp, #4]
   b49ba:	462a      	mov	r2, r5
   b49bc:	4640      	mov	r0, r8
   b49be:	f003 fef8 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b49c2:	1c6c      	adds	r4, r5, #1
		if(nodeObjectContainer == NULL) {
   b49c4:	4607      	mov	r7, r0
   b49c6:	46a1      	mov	r9, r4
   b49c8:	2800      	cmp	r0, #0
   b49ca:	d170      	bne.n	b4aae <_ZN14LoRA_Functions14findNodeNumberEPKc+0x122>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b49cc:	494b      	ldr	r1, [pc, #300]	; (b4afc <_ZN14LoRA_Functions14findNodeNumberEPKc+0x170>)
   b49ce:	484c      	ldr	r0, [pc, #304]	; (b4b00 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x174>)
   b49d0:	462a      	mov	r2, r5
   b49d2:	f7ff fbb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b49d6:	4947      	ldr	r1, [pc, #284]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b49d8:	a806      	add	r0, sp, #24
   b49da:	f004 f995 	bl	b8d08 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",index, deviceID);
   b49de:	4633      	mov	r3, r6
   b49e0:	4622      	mov	r2, r4
   b49e2:	4948      	ldr	r1, [pc, #288]	; (b4b04 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x178>)
   b49e4:	4846      	ldr	r0, [pc, #280]	; (b4b00 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x174>)
   b49e6:	f7ff fbaa 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b49ea:	4842      	ldr	r0, [pc, #264]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b49ec:	f003 feb4 	bl	b8758 <_ZNK10JsonParser13getOuterArrayEv>
   b49f0:	4601      	mov	r1, r0
   b49f2:	a806      	add	r0, sp, #24
   b49f4:	f004 f9c3 	bl	b8d7e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b49f8:	227d      	movs	r2, #125	; 0x7d
   b49fa:	217b      	movs	r1, #123	; 0x7b
   b49fc:	a806      	add	r0, sp, #24
   b49fe:	f004 f94a 	bl	b8c96 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b4a02:	4622      	mov	r2, r4
   b4a04:	4940      	ldr	r1, [pc, #256]	; (b4b08 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>)
   b4a06:	a806      	add	r0, sp, #24
   b4a08:	f7ff ff72 	bl	b48f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4a0c:	a806      	add	r0, sp, #24
   b4a0e:	f004 f937 	bl	b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a12:	2201      	movs	r2, #1
   b4a14:	a806      	add	r0, sp, #24
   b4a16:	493d      	ldr	r1, [pc, #244]	; (b4b0c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x180>)
   b4a18:	f004 f8a0 	bl	b8b5c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a1c:	a806      	add	r0, sp, #24
   b4a1e:	213a      	movs	r1, #58	; 0x3a
   b4a20:	f004 f850 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4a24:	4631      	mov	r1, r6
   b4a26:	2201      	movs	r2, #1
   b4a28:	a806      	add	r0, sp, #24
   b4a2a:	f004 f897 	bl	b8b5c <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("last", Time.now());
   b4a2e:	f00b f992 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4a32:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4a34:	a806      	add	r0, sp, #24
   b4a36:	f004 f923 	bl	b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a3a:	2201      	movs	r2, #1
   b4a3c:	a806      	add	r0, sp, #24
   b4a3e:	4934      	ldr	r1, [pc, #208]	; (b4b10 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x184>)
   b4a40:	f004 f88c 	bl	b8b5c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a44:	a806      	add	r0, sp, #24
   b4a46:	213a      	movs	r1, #58	; 0x3a
   b4a48:	f004 f83c 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4a4c:	462a      	mov	r2, r5
   b4a4e:	a806      	add	r0, sp, #24
   b4a50:	4930      	ldr	r1, [pc, #192]	; (b4b14 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x188>)
   b4a52:	f004 f876 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);
   b4a56:	4930      	ldr	r1, [pc, #192]	; (b4b18 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x18c>)
   b4a58:	2203      	movs	r2, #3
   b4a5a:	a806      	add	r0, sp, #24
   b4a5c:	f7ff ff48 	bl	b48f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4a60:	a806      	add	r0, sp, #24
   b4a62:	f004 f90d 	bl	b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4a66:	2201      	movs	r2, #1
   b4a68:	a806      	add	r0, sp, #24
   b4a6a:	492c      	ldr	r1, [pc, #176]	; (b4b1c <_ZN14LoRA_Functions14findNodeNumberEPKc+0x190>)
   b4a6c:	f004 f876 	bl	b8b5c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4a70:	213a      	movs	r1, #58	; 0x3a
   b4a72:	a806      	add	r0, sp, #24
   b4a74:	f004 f826 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4a78:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4b20 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x194>
   b4a7c:	a806      	add	r0, sp, #24
   b4a7e:	f004 f923 	bl	b8cc8 <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4a82:	2200      	movs	r2, #0
   b4a84:	4927      	ldr	r1, [pc, #156]	; (b4b24 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x198>)
   b4a86:	a806      	add	r0, sp, #24
   b4a88:	f7ff ff32 	bl	b48f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4a8c:	a806      	add	r0, sp, #24
   b4a8e:	f004 f827 	bl	b8ae0 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4a92:	a806      	add	r0, sp, #24
   b4a94:	f004 fbcf 	bl	b9236 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4a98:	f001 fcfc 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b4a9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4aa0:	f001 fd30 	bl	b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4aa4:	a806      	add	r0, sp, #24
	return index;
   b4aa6:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4aa8:	f003 fdd0 	bl	b864c <_ZN12JsonModifierD1Ev>
   b4aac:	e012      	b.n	b4ad4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x148>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4aae:	4601      	mov	r1, r0
   b4ab0:	ab02      	add	r3, sp, #8
   b4ab2:	4640      	mov	r0, r8
   b4ab4:	4652      	mov	r2, sl
   b4ab6:	f7ff fb34 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4aba:	4631      	mov	r1, r6
   b4abc:	a802      	add	r0, sp, #8
   b4abe:	f00a fea8 	bl	bf812 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4ac2:	b170      	cbz	r0, b4ae2 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x156>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4ac4:	4a10      	ldr	r2, [pc, #64]	; (b4b08 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x17c>)
   b4ac6:	480b      	ldr	r0, [pc, #44]	; (b4af4 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x168>)
   b4ac8:	466b      	mov	r3, sp
   b4aca:	4639      	mov	r1, r7
   b4acc:	f7ff fb1b 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4ad0:	f89d 4000 	ldrb.w	r4, [sp]
	String nodeDeviceID;
   b4ad4:	a802      	add	r0, sp, #8
   b4ad6:	f00a fd8b 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b4ada:	4620      	mov	r0, r4
   b4adc:	b016      	add	sp, #88	; 0x58
   b4ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4ae2:	1cac      	adds	r4, r5, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4ae4:	464d      	mov	r5, r9
   b4ae6:	2d0a      	cmp	r5, #10
   b4ae8:	f47f af66 	bne.w	b49b8 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x2c>
   b4aec:	e773      	b.n	b49d6 <_ZN14LoRA_Functions14findNodeNumberEPKc+0x4a>
   b4aee:	bf00      	nop
   b4af0:	000c4e80 	.word	0x000c4e80
   b4af4:	2003da2c 	.word	0x2003da2c
   b4af8:	000c33ce 	.word	0x000c33ce
   b4afc:	000c3586 	.word	0x000c3586
   b4b00:	2003e658 	.word	0x2003e658
   b4b04:	000c35b2 	.word	0x000c35b2
   b4b08:	000c351c 	.word	0x000c351c
   b4b0c:	000c33d4 	.word	0x000c33d4
   b4b10:	000c3446 	.word	0x000c3446
   b4b14:	000c4678 	.word	0x000c4678
   b4b18:	000c3404 	.word	0x000c3404
   b4b1c:	000c3521 	.word	0x000c3521
   b4b20:	00000000 	.word	0x00000000
   b4b24:	000c3437 	.word	0x000c3437

000b4b28 <_ZN14LoRA_Functions14nodeConfiguredEif>:
bool LoRA_Functions::nodeConfigured(int nodeNumber, float successPercent)  {
   b4b28:	b570      	push	{r4, r5, r6, lr}
   b4b2a:	ed2d 8b02 	vpush	{d8}
	if (nodeNumber > 10) return false;
   b4b2e:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, float successPercent)  {
   b4b30:	b094      	sub	sp, #80	; 0x50
   b4b32:	460e      	mov	r6, r1
   b4b34:	eeb0 8a40 	vmov.f32	s16, s0
	if (nodeNumber > 10) return false;
   b4b38:	dc55      	bgt.n	b4be6 <_ZN14LoRA_Functions14nodeConfiguredEif+0xbe>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4b3a:	4d2c      	ldr	r5, [pc, #176]	; (b4bec <_ZN14LoRA_Functions14nodeConfiguredEif+0xc4>)
   b4b3c:	4628      	mov	r0, r5
   b4b3e:	f003 fe16 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b4b42:	4a2b      	ldr	r2, [pc, #172]	; (b4bf0 <_ZN14LoRA_Functions14nodeConfiguredEif+0xc8>)
   b4b44:	4601      	mov	r1, r0
   b4b46:	ab02      	add	r3, sp, #8
   b4b48:	4628      	mov	r0, r5
   b4b4a:	f003 ff75 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4b4e:	9902      	ldr	r1, [sp, #8]
   b4b50:	1e72      	subs	r2, r6, #1
   b4b52:	4628      	mov	r0, r5
   b4b54:	f003 fe2d 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4b58:	4604      	mov	r4, r0
   b4b5a:	2800      	cmp	r0, #0
   b4b5c:	d043      	beq.n	b4be6 <_ZN14LoRA_Functions14nodeConfiguredEif+0xbe>
	jp.getValueByKey(nodeObjectContainer, "node", nodeNumberConfigured);	// Get the deviceID and compare
   b4b5e:	ab01      	add	r3, sp, #4
   b4b60:	4601      	mov	r1, r0
   b4b62:	4a24      	ldr	r2, [pc, #144]	; (b4bf4 <_ZN14LoRA_Functions14nodeConfiguredEif+0xcc>)
   b4b64:	4628      	mov	r0, r5
   b4b66:	f7ff face 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeNumberConfigured == nodeNumber) {
   b4b6a:	9b01      	ldr	r3, [sp, #4]
   b4b6c:	429e      	cmp	r6, r3
   b4b6e:	d136      	bne.n	b4bde <_ZN14LoRA_Functions14nodeConfiguredEif+0xb6>
		jp.getValueTokenByKey(nodeObjectContainer, "last", value);
   b4b70:	ab03      	add	r3, sp, #12
   b4b72:	4a21      	ldr	r2, [pc, #132]	; (b4bf8 <_ZN14LoRA_Functions14nodeConfiguredEif+0xd0>)
   b4b74:	4621      	mov	r1, r4
   b4b76:	4628      	mov	r0, r5
   b4b78:	f003 ff5e 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
		JsonModifier mod(jp);
   b4b7c:	4629      	mov	r1, r5
   b4b7e:	a804      	add	r0, sp, #16
   b4b80:	f004 f8c2 	bl	b8d08 <_ZN12JsonModifierC1ER10JsonParser>
		mod.startModify(value);
   b4b84:	9903      	ldr	r1, [sp, #12]
   b4b86:	a804      	add	r0, sp, #16
   b4b88:	f004 f8d0 	bl	b8d2c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.insertValue((int)Time.now());
   b4b8c:	f00b f8e3 	bl	bfd56 <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4b90:	491a      	ldr	r1, [pc, #104]	; (b4bfc <_ZN14LoRA_Functions14nodeConfiguredEif+0xd4>)
   b4b92:	4602      	mov	r2, r0
   b4b94:	a804      	add	r0, sp, #16
   b4b96:	f003 ffd4 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.finish();
   b4b9a:	a804      	add	r0, sp, #16
   b4b9c:	f004 fb4b 	bl	b9236 <_ZN12JsonModifier6finishEv>
		jp.getValueTokenByKey(nodeObjectContainer, "succ", value);
   b4ba0:	4a17      	ldr	r2, [pc, #92]	; (b4c00 <_ZN14LoRA_Functions14nodeConfiguredEif+0xd8>)
   b4ba2:	ab03      	add	r3, sp, #12
   b4ba4:	4621      	mov	r1, r4
   b4ba6:	4628      	mov	r0, r5
   b4ba8:	f003 ff46 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
		mod.startModify(value);
   b4bac:	9903      	ldr	r1, [sp, #12]
   b4bae:	a804      	add	r0, sp, #16
   b4bb0:	f004 f8bc 	bl	b8d2c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.insertValue((float)successPercent);
   b4bb4:	eeb0 0a48 	vmov.f32	s0, s16
   b4bb8:	a804      	add	r0, sp, #16
   b4bba:	f004 f885 	bl	b8cc8 <_ZN10JsonWriter11insertValueEf>
		mod.finish();
   b4bbe:	a804      	add	r0, sp, #16
   b4bc0:	f004 fb39 	bl	b9236 <_ZN12JsonModifier6finishEv>
		nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4bc4:	f001 fc66 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b4bc8:	6869      	ldr	r1, [r5, #4]
   b4bca:	f001 fc9b 	bl	b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
		JsonModifier mod(jp);
   b4bce:	a804      	add	r0, sp, #16
   b4bd0:	f003 fd3c 	bl	b864c <_ZN12JsonModifierD1Ev>
		return true;
   b4bd4:	2001      	movs	r0, #1
}
   b4bd6:	b014      	add	sp, #80	; 0x50
   b4bd8:	ecbd 8b02 	vpop	{d8}
   b4bdc:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node not configured");  // See the raw JSON string
   b4bde:	4909      	ldr	r1, [pc, #36]	; (b4c04 <_ZN14LoRA_Functions14nodeConfiguredEif+0xdc>)
   b4be0:	4809      	ldr	r0, [pc, #36]	; (b4c08 <_ZN14LoRA_Functions14nodeConfiguredEif+0xe0>)
   b4be2:	f7ff faac 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return false;
   b4be6:	2000      	movs	r0, #0
   b4be8:	e7f5      	b.n	b4bd6 <_ZN14LoRA_Functions14nodeConfiguredEif+0xae>
   b4bea:	bf00      	nop
   b4bec:	2003da2c 	.word	0x2003da2c
   b4bf0:	000c33ce 	.word	0x000c33ce
   b4bf4:	000c351c 	.word	0x000c351c
   b4bf8:	000c3446 	.word	0x000c3446
   b4bfc:	000c35af 	.word	0x000c35af
   b4c00:	000c3521 	.word	0x000c3521
   b4c04:	000c35e6 	.word	0x000c35e6
   b4c08:	2003e658 	.word	0x2003e658

000b4c0c <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4c0c:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4c0e:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4c10:	b094      	sub	sp, #80	; 0x50
   b4c12:	460c      	mov	r4, r1
   b4c14:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4c16:	dc3d      	bgt.n	b4c94 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c18:	4d1f      	ldr	r5, [pc, #124]	; (b4c98 <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4c1a:	4628      	mov	r0, r5
   b4c1c:	f003 fda7 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b4c20:	4a1e      	ldr	r2, [pc, #120]	; (b4c9c <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4c22:	4601      	mov	r1, r0
   b4c24:	ab02      	add	r3, sp, #8
   b4c26:	4628      	mov	r0, r5
   b4c28:	f003 ff06 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c2c:	1e62      	subs	r2, r4, #1
   b4c2e:	9902      	ldr	r1, [sp, #8]
   b4c30:	4628      	mov	r0, r5
   b4c32:	f003 fdbe 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4c36:	4604      	mov	r4, r0
   b4c38:	b360      	cbz	r0, b4c94 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4c3a:	4601      	mov	r1, r0
   b4c3c:	4a18      	ldr	r2, [pc, #96]	; (b4ca0 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4c3e:	ab01      	add	r3, sp, #4
   b4c40:	4628      	mov	r0, r5
   b4c42:	f7ff fa60 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4c46:	9a01      	ldr	r2, [sp, #4]
   b4c48:	4916      	ldr	r1, [pc, #88]	; (b4ca4 <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4c4a:	4817      	ldr	r0, [pc, #92]	; (b4ca8 <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4c4c:	4633      	mov	r3, r6
   b4c4e:	f7ff fa76 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4c52:	ab03      	add	r3, sp, #12
   b4c54:	4a12      	ldr	r2, [pc, #72]	; (b4ca0 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4c56:	4621      	mov	r1, r4
   b4c58:	4628      	mov	r0, r5
   b4c5a:	f003 feed 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4c5e:	4629      	mov	r1, r5
   b4c60:	a804      	add	r0, sp, #16
   b4c62:	f004 f851 	bl	b8d08 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4c66:	9903      	ldr	r1, [sp, #12]
   b4c68:	a804      	add	r0, sp, #16
   b4c6a:	f004 f85f 	bl	b8d2c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4c6e:	4632      	mov	r2, r6
   b4c70:	490e      	ldr	r1, [pc, #56]	; (b4cac <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4c72:	a804      	add	r0, sp, #16
   b4c74:	f003 ff65 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4c78:	a804      	add	r0, sp, #16
   b4c7a:	f004 fadc 	bl	b9236 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4c7e:	f001 fc09 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b4c82:	6869      	ldr	r1, [r5, #4]
   b4c84:	f001 fc3e 	bl	b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4c88:	a804      	add	r0, sp, #16
   b4c8a:	f003 fcdf 	bl	b864c <_ZN12JsonModifierD1Ev>
	return true;
   b4c8e:	2001      	movs	r0, #1
}
   b4c90:	b014      	add	sp, #80	; 0x50
   b4c92:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4c94:	2000      	movs	r0, #0
   b4c96:	e7fb      	b.n	b4c90 <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4c98:	2003da2c 	.word	0x2003da2c
   b4c9c:	000c33ce 	.word	0x000c33ce
   b4ca0:	000c3404 	.word	0x000c3404
   b4ca4:	000c35fa 	.word	0x000c35fa
   b4ca8:	2003e658 	.word	0x2003e658
   b4cac:	000c35af 	.word	0x000c35af

000b4cb0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lora_state = JOIN_ACK;			// Prepare to respond
   b4cb2:	4b3c      	ldr	r3, [pc, #240]	; (b4da4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf4>)
   b4cb4:	2202      	movs	r2, #2
   b4cb6:	701a      	strb	r2, [r3, #0]
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cb8:	b091      	sub	sp, #68	; 0x44
		nodeDeviceID[i] = buf[i+2];
   b4cba:	4a3b      	ldr	r2, [pc, #236]	; (b4da8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xf8>)
   b4cbc:	ac09      	add	r4, sp, #36	; 0x24
bool LoRA_Functions::decipherJoinRequestGateway() {
   b4cbe:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+2];
   b4cc0:	f102 0318 	add.w	r3, r2, #24
   b4cc4:	4627      	mov	r7, r4
   b4cc6:	6810      	ldr	r0, [r2, #0]
   b4cc8:	6851      	ldr	r1, [r2, #4]
   b4cca:	4626      	mov	r6, r4
   b4ccc:	c603      	stmia	r6!, {r0, r1}
   b4cce:	3208      	adds	r2, #8
   b4cd0:	429a      	cmp	r2, r3
   b4cd2:	4634      	mov	r4, r6
   b4cd4:	d1f7      	bne.n	b4cc6 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x16>
   b4cd6:	7813      	ldrb	r3, [r2, #0]
   b4cd8:	7033      	strb	r3, [r6, #0]
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4cda:	f001 fb53 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4cde:	4604      	mov	r4, r0
   b4ce0:	f001 fb50 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4ce4:	f001 fc65 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
	current.set_sensorType(buf[27]);								// Store device type in the current data buffer 
   b4ce8:	4e30      	ldr	r6, [pc, #192]	; (b4dac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xfc>)
	current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4cea:	4601      	mov	r1, r0
   b4cec:	4620      	mov	r0, r4
   b4cee:	f001 fce1 	bl	b66b4 <_ZN17currentStatusData18set_tempNodeNumberEh>
	current.set_sensorType(buf[27]);								// Store device type in the current data buffer 
   b4cf2:	f001 fb47 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4cf6:	7ef1      	ldrb	r1, [r6, #27]
   b4cf8:	f001 fd06 	bl	b6708 <_ZN17currentStatusData14set_sensorTypeEh>
	if (current.get_nodeNumber() > 10) {							// An unconfigured node
   b4cfc:	f001 fb42 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d00:	f001 fc57 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d04:	280a      	cmp	r0, #10
   b4d06:	d930      	bls.n	b4d6a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xba>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID));		// Look up the new node number
   b4d08:	f001 fb3c 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d0c:	4639      	mov	r1, r7
   b4d0e:	4604      	mov	r4, r0
   b4d10:	4628      	mov	r0, r5
   b4d12:	f7ff fe3b 	bl	b498c <_ZN14LoRA_Functions14findNodeNumberEPKc>
   b4d16:	4601      	mov	r1, r0
   b4d18:	4620      	mov	r0, r4
   b4d1a:	f001 fcc5 	bl	b66a8 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4d1e:	f001 fb31 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d22:	f001 fc4b 	bl	b65bc <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4d26:	9003      	str	r0, [sp, #12]
   b4d28:	f001 fb2c 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d2c:	f001 fc41 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d30:	9a03      	ldr	r2, [sp, #12]
   b4d32:	9000      	str	r0, [sp, #0]
   b4d34:	491e      	ldr	r1, [pc, #120]	; (b4db0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x100>)
   b4d36:	481f      	ldr	r0, [pc, #124]	; (b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x104>)
   b4d38:	463b      	mov	r3, r7
   b4d3a:	f7ff fa00 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4d3e:	f001 fb21 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d42:	2101      	movs	r1, #1
   b4d44:	f001 fcda 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4d48:	f001 fb1c 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d4c:	f001 fc31 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d50:	9003      	str	r0, [sp, #12]
   b4d52:	f001 fb17 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d56:	f001 fc54 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4d5a:	9903      	ldr	r1, [sp, #12]
   b4d5c:	4602      	mov	r2, r0
   b4d5e:	4628      	mov	r0, r5
   b4d60:	f7ff ff54 	bl	b4c0c <_ZN14LoRA_Functions10changeTypeEii>
}
   b4d64:	2001      	movs	r0, #1
   b4d66:	b011      	add	sp, #68	; 0x44
   b4d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Node %d join request from %s setting clock and sensorType to %d",current.get_nodeNumber(), LoRA_Functions::instance().findDeviceID(current.get_nodeNumber()).c_str(), buf[27]);
   b4d6a:	f001 fb0b 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d6e:	f001 fc20 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d72:	4604      	mov	r4, r0
   b4d74:	f7ff f9fc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4d78:	9003      	str	r0, [sp, #12]
   b4d7a:	f001 fb03 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4d7e:	f001 fc18 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4d82:	9903      	ldr	r1, [sp, #12]
   b4d84:	4602      	mov	r2, r0
   b4d86:	a805      	add	r0, sp, #20
   b4d88:	f7ff fb46 	bl	b4418 <_ZN14LoRA_Functions12findDeviceIDEh>
   b4d8c:	7ef3      	ldrb	r3, [r6, #27]
   b4d8e:	9300      	str	r3, [sp, #0]
   b4d90:	4909      	ldr	r1, [pc, #36]	; (b4db8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x108>)
   b4d92:	9b05      	ldr	r3, [sp, #20]
   b4d94:	4807      	ldr	r0, [pc, #28]	; (b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x104>)
   b4d96:	4622      	mov	r2, r4
   b4d98:	f7ff f9d1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4d9c:	a805      	add	r0, sp, #20
   b4d9e:	f00a fc27 	bl	bf5f0 <_ZN6StringD1Ev>
   b4da2:	e7cc      	b.n	b4d3e <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x8e>
   b4da4:	2003d878 	.word	0x2003d878
   b4da8:	2003d882 	.word	0x2003d882
   b4dac:	2003d880 	.word	0x2003d880
   b4db0:	000c361d 	.word	0x000c361d
   b4db4:	2003e658 	.word	0x2003e658
   b4db8:	000c3658 	.word	0x000c3658

000b4dbc <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4dbc:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4dbe:	290a      	cmp	r1, #10
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4dc0:	b094      	sub	sp, #80	; 0x50
   b4dc2:	460c      	mov	r4, r1
   b4dc4:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4dc6:	dc3d      	bgt.n	b4e44 <_ZN14LoRA_Functions11changeAlertEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4dc8:	4d1f      	ldr	r5, [pc, #124]	; (b4e48 <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4dca:	4628      	mov	r0, r5
   b4dcc:	f003 fccf 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b4dd0:	4a1e      	ldr	r2, [pc, #120]	; (b4e4c <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4dd2:	4601      	mov	r1, r0
   b4dd4:	ab02      	add	r3, sp, #8
   b4dd6:	4628      	mov	r0, r5
   b4dd8:	f003 fe2e 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4ddc:	1e62      	subs	r2, r4, #1
   b4dde:	9902      	ldr	r1, [sp, #8]
   b4de0:	4628      	mov	r0, r5
   b4de2:	f003 fce6 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries 
   b4de6:	4604      	mov	r4, r0
   b4de8:	b360      	cbz	r0, b4e44 <_ZN14LoRA_Functions11changeAlertEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);
   b4dea:	4601      	mov	r1, r0
   b4dec:	4a18      	ldr	r2, [pc, #96]	; (b4e50 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4dee:	ab01      	add	r3, sp, #4
   b4df0:	4628      	mov	r0, r5
   b4df2:	f7ff f988 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4df6:	9a01      	ldr	r2, [sp, #4]
   b4df8:	4916      	ldr	r1, [pc, #88]	; (b4e54 <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4dfa:	4817      	ldr	r0, [pc, #92]	; (b4e58 <_ZN14LoRA_Functions11changeAlertEii+0x9c>)
   b4dfc:	4633      	mov	r3, r6
   b4dfe:	f7ff f99e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4e02:	ab03      	add	r3, sp, #12
   b4e04:	4a12      	ldr	r2, [pc, #72]	; (b4e50 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4e06:	4621      	mov	r1, r4
   b4e08:	4628      	mov	r0, r5
   b4e0a:	f003 fe15 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4e0e:	4629      	mov	r1, r5
   b4e10:	a804      	add	r0, sp, #16
   b4e12:	f003 ff79 	bl	b8d08 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4e16:	9903      	ldr	r1, [sp, #12]
   b4e18:	a804      	add	r0, sp, #16
   b4e1a:	f003 ff87 	bl	b8d2c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4e1e:	4632      	mov	r2, r6
   b4e20:	490e      	ldr	r1, [pc, #56]	; (b4e5c <_ZN14LoRA_Functions11changeAlertEii+0xa0>)
   b4e22:	a804      	add	r0, sp, #16
   b4e24:	f003 fe8d 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4e28:	a804      	add	r0, sp, #16
   b4e2a:	f004 fa04 	bl	b9236 <_ZN12JsonModifier6finishEv>
	nodeID.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4e2e:	f001 fb31 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b4e32:	6869      	ldr	r1, [r5, #4]
   b4e34:	f001 fb66 	bl	b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4e38:	a804      	add	r0, sp, #16
   b4e3a:	f003 fc07 	bl	b864c <_ZN12JsonModifierD1Ev>
	return true;
   b4e3e:	2001      	movs	r0, #1
}
   b4e40:	b014      	add	sp, #80	; 0x50
   b4e42:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4e44:	2000      	movs	r0, #0
   b4e46:	e7fb      	b.n	b4e40 <_ZN14LoRA_Functions11changeAlertEii+0x84>
   b4e48:	2003da2c 	.word	0x2003da2c
   b4e4c:	000c33ce 	.word	0x000c33ce
   b4e50:	000c3437 	.word	0x000c3437
   b4e54:	000c3698 	.word	0x000c3698
   b4e58:	2003e658 	.word	0x2003e658
   b4e5c:	000c35af 	.word	0x000c35af

000b4e60 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message it has a length of 11 and a specific payload and message flag
   b4e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e62:	ed2d 8b02 	vpush	{d8}
   b4e66:	b0a9      	sub	sp, #164	; 0xa4
   b4e68:	4605      	mov	r5, r0
	if (current.get_messageCount()==0) successPercent = 0.0;
   b4e6a:	f001 fa8b 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4e6e:	f001 fbb9 	bl	b65e4 <_ZNK17currentStatusData16get_messageCountEv>
   b4e72:	2800      	cmp	r0, #0
   b4e74:	f000 80e7 	beq.w	b5046 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1e6>
	else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b4e78:	f001 fa84 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4e7c:	f001 fbb7 	bl	b65ee <_ZNK17currentStatusData16get_successCountEv>
   b4e80:	4604      	mov	r4, r0
   b4e82:	f001 fa7f 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4e86:	f001 fbad 	bl	b65e4 <_ZNK17currentStatusData16get_messageCountEv>
   b4e8a:	ee08 0a10 	vmov	s16, r0
   b4e8e:	4620      	mov	r0, r4
   b4e90:	f00b fbdc 	bl	c064c <__aeabi_i2d>
   b4e94:	4b9d      	ldr	r3, [pc, #628]	; (b510c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>)
   b4e96:	2200      	movs	r2, #0
   b4e98:	f00b fa8c 	bl	c03b4 <__adddf3>
   b4e9c:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b4ea0:	4606      	mov	r6, r0
   b4ea2:	ee17 0a90 	vmov	r0, s15
   b4ea6:	460f      	mov	r7, r1
   b4ea8:	f00b fbe2 	bl	c0670 <__aeabi_f2d>
   b4eac:	4602      	mov	r2, r0
   b4eae:	460b      	mov	r3, r1
   b4eb0:	4630      	mov	r0, r6
   b4eb2:	4639      	mov	r1, r7
   b4eb4:	f00b fd5e 	bl	c0974 <__aeabi_ddiv>
   b4eb8:	4b95      	ldr	r3, [pc, #596]	; (b5110 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b4eba:	2200      	movs	r2, #0
   b4ebc:	f00b fc30 	bl	c0720 <__aeabi_dmul>
   b4ec0:	f00b ff26 	bl	c0d10 <__aeabi_d2f>
   b4ec4:	ee08 0a10 	vmov	s16, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4ec8:	f00a ff45 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4ecc:	4c91      	ldr	r4, [pc, #580]	; (b5114 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b4ece:	1600      	asrs	r0, r0, #24
   b4ed0:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4ed2:	f00a ff40 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4ed6:	1400      	asrs	r0, r0, #16
   b4ed8:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4eda:	f00a ff3c 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4ede:	1200      	asrs	r0, r0, #8
   b4ee0:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4ee2:	f00a ff38 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4ee6:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports - for Gateways
   b4ee8:	f001 fa14 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b4eec:	f001 fc29 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4ef0:	0a00      	lsrs	r0, r0, #8
   b4ef2:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4ef4:	f001 fa0e 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b4ef8:	f001 fc23 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4efc:	71e0      	strb	r0, [r4, #7]
	if (LoRA_Functions::getAlert(current.get_nodeNumber()) == 7) {
   b4efe:	f001 fa41 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f02:	f001 fb56 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f06:	4601      	mov	r1, r0
   b4f08:	4628      	mov	r0, r5
   b4f0a:	f7ff fafb 	bl	b4504 <_ZN14LoRA_Functions8getAlertEi>
   b4f0e:	2807      	cmp	r0, #7
   b4f10:	f040 809c 	bne.w	b504c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1ec>
		int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b4f14:	f001 fa36 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f18:	f001 fb4b 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f1c:	4601      	mov	r1, r0
   b4f1e:	4628      	mov	r0, r5
   b4f20:	f7ff fabc 	bl	b449c <_ZN14LoRA_Functions7getTypeEi>
   b4f24:	4606      	mov	r6, r0
		Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b4f26:	f001 fa2d 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f2a:	f001 fb6a 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4f2e:	4633      	mov	r3, r6
   b4f30:	4602      	mov	r2, r0
   b4f32:	4979      	ldr	r1, [pc, #484]	; (b5118 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b4f34:	4879      	ldr	r0, [pc, #484]	; (b511c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b4f36:	f7ff f902 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_sensorType(newSensorType);						// Update current value for data report
   b4f3a:	f001 fa23 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f3e:	4631      	mov	r1, r6
   b4f40:	f001 fbe2 	bl	b6708 <_ZN17currentStatusData14set_sensorTypeEh>
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced - no longer pending
   b4f44:	f001 fa1e 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f48:	f001 fb33 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f4c:	2200      	movs	r2, #0
   b4f4e:	4601      	mov	r1, r0
   b4f50:	4628      	mov	r0, r5
   b4f52:	f7ff ff33 	bl	b4dbc <_ZN14LoRA_Functions11changeAlertEii>
		buf[9] = newSensorType;
   b4f56:	7266      	strb	r6, [r4, #9]
	if (!LoRA_Functions::nodeConfigured(current.get_nodeNumber(), successPercent)) {			// Check to see if we need to set an alert code
   b4f58:	f001 fa14 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f5c:	f001 fb29 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f60:	eeb0 0a48 	vmov.f32	s0, s16
   b4f64:	4601      	mov	r1, r0
   b4f66:	4628      	mov	r0, r5
   b4f68:	f7ff fdde 	bl	b4b28 <_ZN14LoRA_Functions14nodeConfiguredEif>
   b4f6c:	2800      	cmp	r0, #0
   b4f6e:	d173      	bne.n	b5058 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1f8>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b4f70:	f001 fa08 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f74:	f001 fb1d 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4f78:	4969      	ldr	r1, [pc, #420]	; (b5120 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c0>)
   b4f7a:	4602      	mov	r2, r0
   b4f7c:	4867      	ldr	r0, [pc, #412]	; (b511c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b4f7e:	f7ff f8de 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);								// Store as this will impact reporting
   b4f82:	f001 f9ff 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f86:	2101      	movs	r1, #1
   b4f88:	f001 fbb8 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4f8c:	f001 f9fa 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4f90:	4605      	mov	r5, r0
   b4f92:	f00a fee0 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b4f96:	17c3      	asrs	r3, r0, #31
   b4f98:	4602      	mov	r2, r0
   b4f9a:	4628      	mov	r0, r5
   b4f9c:	f001 fc86 	bl	b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = 1;													// Set the alert code 1 - misconfigured node will force a join request
   b4fa0:	2301      	movs	r3, #1
   b4fa2:	7223      	strb	r3, [r4, #8]
	buf[10] = current.get_openHours();
   b4fa4:	f001 f9ee 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4fa8:	f001 fce0 	bl	b696c <_ZNK17currentStatusData13get_openHoursEv>
   b4fac:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();							// Repeat back message number
   b4fae:	f001 f9e9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4fb2:	f001 fb17 	bl	b65e4 <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4fb6:	4b5b      	ldr	r3, [pc, #364]	; (b5124 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c4>)
	buf[11] = current.get_messageCount();							// Repeat back message number
   b4fb8:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4fba:	881d      	ldrh	r5, [r3, #0]
   b4fbc:	2101      	movs	r1, #1
   b4fbe:	4628      	mov	r0, r5
   b4fc0:	f00b f8d9 	bl	c0176 <digitalWrite>
	if (manager.sendtoWait(buf, 12, current.get_nodeNumber(), DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b4fc4:	f001 f9de 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4fc8:	f001 faf3 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fcc:	2204      	movs	r2, #4
   b4fce:	4951      	ldr	r1, [pc, #324]	; (b5114 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b4fd0:	9200      	str	r2, [sp, #0]
   b4fd2:	4603      	mov	r3, r0
   b4fd4:	220c      	movs	r2, #12
   b4fd6:	4854      	ldr	r0, [pc, #336]	; (b5128 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
   b4fd8:	f005 ff76 	bl	baec8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4fdc:	4601      	mov	r1, r0
   b4fde:	2800      	cmp	r0, #0
   b4fe0:	f040 8082 	bne.w	b50e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x288>
		digitalWrite(BLUE_LED,LOW);
   b4fe4:	4628      	mov	r0, r5
   b4fe6:	f00b f8c6 	bl	c0176 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and signal strength %d", current.get_nodeNumber(), buf[10], buf[8], driver.lastRssi());
   b4fea:	f001 f9cb 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b4fee:	f001 fae0 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4ff2:	9005      	str	r0, [sp, #20]
   b4ff4:	484d      	ldr	r0, [pc, #308]	; (b512c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>)
   b4ff6:	7aa5      	ldrb	r5, [r4, #10]
   b4ff8:	7a24      	ldrb	r4, [r4, #8]
   b4ffa:	f005 fd4a 	bl	baa92 <_ZN15RHGenericDriver8lastRssiEv>
   b4ffe:	9b05      	ldr	r3, [sp, #20]
   b5000:	4a4b      	ldr	r2, [pc, #300]	; (b5130 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b5002:	9500      	str	r5, [sp, #0]
   b5004:	e9cd 4001 	strd	r4, r0, [sp, #4]
   b5008:	2180      	movs	r1, #128	; 0x80
   b500a:	a808      	add	r0, sp, #32
   b500c:	f007 ffbe 	bl	bcf8c <snprintf>
		Log.info(messageString);
   b5010:	4842      	ldr	r0, [pc, #264]	; (b511c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b5012:	a908      	add	r1, sp, #32
   b5014:	f7ff f893 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5018:	f007 fef0 	bl	bcdfc <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b501c:	4604      	mov	r4, r0
   b501e:	2800      	cmp	r0, #0
   b5020:	d071      	beq.n	b5106 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a6>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5022:	4b44      	ldr	r3, [pc, #272]	; (b5134 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5024:	4944      	ldr	r1, [pc, #272]	; (b5138 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d8>)
   b5026:	781b      	ldrb	r3, [r3, #0]
   b5028:	f88d 3000 	strb.w	r3, [sp]
   b502c:	a806      	add	r0, sp, #24
   b502e:	233c      	movs	r3, #60	; 0x3c
   b5030:	aa08      	add	r2, sp, #32
   b5032:	f008 facf 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5036:	a807      	add	r0, sp, #28
   b5038:	f7ff faea 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b503c:	4620      	mov	r0, r4
   b503e:	b029      	add	sp, #164	; 0xa4
   b5040:	ecbd 8b02 	vpop	{d8}
   b5044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (current.get_messageCount()==0) successPercent = 0.0;
   b5046:	ed9f 8a3d 	vldr	s16, [pc, #244]	; b513c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2dc>
   b504a:	e73d      	b.n	b4ec8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x68>
	else buf[9] = current.get_sensorType();
   b504c:	f001 f99a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5050:	f001 fad7 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5054:	7260      	strb	r0, [r4, #9]
   b5056:	e77f      	b.n	b4f58 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xf8>
	else if (LoRA_Functions::getAlert(current.get_nodeNumber()) > 0) {
   b5058:	f001 f994 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b505c:	f001 faa9 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5060:	4601      	mov	r1, r0
   b5062:	4628      	mov	r0, r5
   b5064:	f7ff fa4e 	bl	b4504 <_ZN14LoRA_Functions8getAlertEi>
   b5068:	4606      	mov	r6, r0
   b506a:	b3b0      	cbz	r0, b50da <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x27a>
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b506c:	f001 f98a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5070:	4606      	mov	r6, r0
   b5072:	f001 f987 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5076:	f001 fa9c 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b507a:	4601      	mov	r1, r0
   b507c:	4628      	mov	r0, r5
   b507e:	f7ff fa41 	bl	b4504 <_ZN14LoRA_Functions8getAlertEi>
   b5082:	4601      	mov	r1, r0
   b5084:	4630      	mov	r0, r6
   b5086:	f001 fb39 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
		Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b508a:	f001 f97b 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b508e:	f001 fa90 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5092:	9005      	str	r0, [sp, #20]
   b5094:	f001 f976 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5098:	f001 faae 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b509c:	4928      	ldr	r1, [pc, #160]	; (b5140 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e0>)
   b509e:	9a05      	ldr	r2, [sp, #20]
   b50a0:	4603      	mov	r3, r0
   b50a2:	481e      	ldr	r0, [pc, #120]	; (b511c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b50a4:	f7ff f84b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertTimestampNode(Time.now());
   b50a8:	f001 f96c 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b50ac:	4606      	mov	r6, r0
   b50ae:	f00a fe52 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b50b2:	4602      	mov	r2, r0
   b50b4:	17c3      	asrs	r3, r0, #31
   b50b6:	4630      	mov	r0, r6
   b50b8:	f001 fbf8 	bl	b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();						// Set the alert code based on pending alerts
   b50bc:	f001 f962 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b50c0:	f001 fa9a 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50c4:	7220      	strb	r0, [r4, #8]
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert is sent - no longer pending
   b50c6:	f001 f95d 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b50ca:	f001 fa72 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50ce:	2200      	movs	r2, #0
   b50d0:	4601      	mov	r1, r0
   b50d2:	4628      	mov	r0, r5
   b50d4:	f7ff fe72 	bl	b4dbc <_ZN14LoRA_Functions11changeAlertEii>
   b50d8:	e764      	b.n	b4fa4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>
		buf[8] = 0;													// No pending alert
   b50da:	7220      	strb	r0, [r4, #8]
		current.set_alertCodeNode(0);
   b50dc:	f001 f952 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b50e0:	4631      	mov	r1, r6
   b50e2:	f001 fb0b 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
   b50e6:	e75d      	b.n	b4fa4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x144>
		Log.info("Node %d data report response not acknowledged", current.get_nodeNumber());
   b50e8:	f001 f94c 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b50ec:	f001 fa61 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50f0:	4914      	ldr	r1, [pc, #80]	; (b5144 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e4>)
   b50f2:	4602      	mov	r2, r0
   b50f4:	4809      	ldr	r0, [pc, #36]	; (b511c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b50f6:	f7ff f822 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b50fa:	2100      	movs	r1, #0
   b50fc:	4628      	mov	r0, r5
   b50fe:	f00b f83a 	bl	c0176 <digitalWrite>
		return false;
   b5102:	2400      	movs	r4, #0
   b5104:	e79a      	b.n	b503c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>
		return true;
   b5106:	2401      	movs	r4, #1
   b5108:	e798      	b.n	b503c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1dc>
   b510a:	bf00      	nop
   b510c:	3ff00000 	.word	0x3ff00000
   b5110:	40590000 	.word	0x40590000
   b5114:	2003d880 	.word	0x2003d880
   b5118:	000c36bd 	.word	0x000c36bd
   b511c:	2003e658 	.word	0x2003e658
   b5120:	000c36f1 	.word	0x000c36f1
   b5124:	000c4250 	.word	0x000c4250
   b5128:	2003e178 	.word	0x2003e178
   b512c:	2003d8fc 	.word	0x2003d8fc
   b5130:	000c373c 	.word	0x000c373c
   b5134:	2003d879 	.word	0x2003d879
   b5138:	000c34ee 	.word	0x000c34ee
   b513c:	00000000 	.word	0x00000000
   b5140:	000c371d 	.word	0x000c371d
   b5144:	000c3786 	.word	0x000c3786

000b5148 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>:
bool LoRA_Functions::acknowledgeAlertReportGateway() {
   b5148:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b514a:	4605      	mov	r5, r0
	buf[0] = highByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b514c:	f001 f8e2 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5150:	f001 faf2 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b5154:	4c3d      	ldr	r4, [pc, #244]	; (b524c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x104>)
   b5156:	0a00      	lsrs	r0, r0, #8
   b5158:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());				// Magic number - so you can trust me
   b515a:	f001 f8db 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b515e:	f001 faeb 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b5162:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  				// Fourth byte - current time
   b5164:	f00a fdf7 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5168:	1600      	asrs	r0, r0, #24
   b516a:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));					// Third byte
   b516c:	f00a fdf3 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5170:	1400      	asrs	r0, r0, #16
   b5172:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));					// Second byte
   b5174:	f00a fdef 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5178:	1200      	asrs	r0, r0, #8
   b517a:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    				// First byte	
   b517c:	f00a fdeb 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5180:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b5182:	f001 f8c7 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5186:	f001 fadc 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b518a:	0a00      	lsrs	r0, r0, #8
   b518c:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b518e:	f001 f8c1 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5192:	f001 fad6 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5196:	71e0      	strb	r0, [r4, #7]
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));		// Puts alert value into current object
   b5198:	f001 f8f4 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b519c:	4606      	mov	r6, r0
   b519e:	f001 f8f1 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b51a2:	f001 fa06 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b51a6:	4601      	mov	r1, r0
   b51a8:	4628      	mov	r0, r5
   b51aa:	f7ff f9ab 	bl	b4504 <_ZN14LoRA_Functions8getAlertEi>
   b51ae:	4601      	mov	r1, r0
   b51b0:	4630      	mov	r0, r6
   b51b2:	f001 faa3 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b51b6:	f001 f8e5 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b51ba:	4606      	mov	r6, r0
   b51bc:	f00a fdcb 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b51c0:	17c3      	asrs	r3, r0, #31
   b51c2:	4602      	mov	r2, r0
   b51c4:	4630      	mov	r0, r6
   b51c6:	f001 fb71 	bl	b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();						// sends the pending alert to the node
   b51ca:	f001 f8db 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b51ce:	f001 fa13 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b51d2:	7220      	strb	r0, [r4, #8]
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0);	// Resets as alert is no longer pending
   b51d4:	f001 f8d6 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b51d8:	f001 f9eb 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b51dc:	2200      	movs	r2, #0
   b51de:	4601      	mov	r1, r0
   b51e0:	4628      	mov	r0, r5
   b51e2:	f7ff fdeb 	bl	b4dbc <_ZN14LoRA_Functions11changeAlertEii>
	digitalWrite(BLUE_LED,HIGH);			        // Sending data
   b51e6:	4b1a      	ldr	r3, [pc, #104]	; (b5250 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x108>)
   b51e8:	881d      	ldrh	r5, [r3, #0]
   b51ea:	2101      	movs	r1, #1
   b51ec:	4628      	mov	r0, r5
   b51ee:	f00a ffc2 	bl	c0176 <digitalWrite>
	if (manager.sendtoWait(buf, 9, current.get_nodeNumber(), ALERT_ACK) == RH_ROUTER_ERROR_NONE) {
   b51f2:	f001 f8c7 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b51f6:	f001 f9dc 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b51fa:	2206      	movs	r2, #6
   b51fc:	4603      	mov	r3, r0
   b51fe:	9200      	str	r2, [sp, #0]
   b5200:	4621      	mov	r1, r4
   b5202:	4814      	ldr	r0, [pc, #80]	; (b5254 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x10c>)
   b5204:	2209      	movs	r2, #9
   b5206:	f005 fe5f 	bl	baec8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b520a:	4604      	mov	r4, r0
   b520c:	b978      	cbnz	r0, b522e <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe6>
		Log.info("Node %d alert acknowledged", current.get_nodeNumber());
   b520e:	f001 f8b9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5212:	f001 f9ce 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5216:	4910      	ldr	r1, [pc, #64]	; (b5258 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x110>)
   b5218:	4602      	mov	r2, r0
   b521a:	4810      	ldr	r0, [pc, #64]	; (b525c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x114>)
   b521c:	f7fe ff8f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b5220:	4628      	mov	r0, r5
   b5222:	4621      	mov	r1, r4
   b5224:	f00a ffa7 	bl	c0176 <digitalWrite>
		return true;
   b5228:	2001      	movs	r0, #1
}
   b522a:	b002      	add	sp, #8
   b522c:	bd70      	pop	{r4, r5, r6, pc}
	Log.info("Node %d Response not acknowledged", current.get_nodeNumber());
   b522e:	f001 f8a9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5232:	f001 f9be 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5236:	490a      	ldr	r1, [pc, #40]	; (b5260 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x118>)
   b5238:	4602      	mov	r2, r0
   b523a:	4808      	ldr	r0, [pc, #32]	; (b525c <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0x114>)
   b523c:	f7fe ff7f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,LOW);
   b5240:	4628      	mov	r0, r5
   b5242:	2100      	movs	r1, #0
   b5244:	f00a ff97 	bl	c0176 <digitalWrite>
	return false;
   b5248:	2000      	movs	r0, #0
   b524a:	e7ee      	b.n	b522a <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv+0xe2>
   b524c:	2003d880 	.word	0x2003d880
   b5250:	000c4250 	.word	0x000c4250
   b5254:	2003e178 	.word	0x2003e178
   b5258:	000c37b4 	.word	0x000c37b4
   b525c:	2003e658 	.word	0x2003e658
   b5260:	000c37cf 	.word	0x000c37cf

000b5264 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>:
bool LoRA_Functions::respondToLoRAMessageGateway() {
   b5264:	b510      	push	{r4, lr}
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5266:	4c0f      	ldr	r4, [pc, #60]	; (b52a4 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x40>)
   b5268:	7823      	ldrb	r3, [r4, #0]
   b526a:	2b04      	cmp	r3, #4
   b526c:	d00c      	beq.n	b5288 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x24>
	if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b526e:	7823      	ldrb	r3, [r4, #0]
   b5270:	2b02      	cmp	r3, #2
   b5272:	d104      	bne.n	b527e <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x1a>
   b5274:	f7fe ff7c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5278:	f7ff f9e0 	bl	b463c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b527c:	b950      	cbnz	r0, b5294 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x30>
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b527e:	7823      	ldrb	r3, [r4, #0]
   b5280:	2b06      	cmp	r3, #6
   b5282:	d009      	beq.n	b5298 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x34>
	return false; 
   b5284:	2000      	movs	r0, #0
   b5286:	e006      	b.n	b5296 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0x32>
	if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5288:	f7fe ff72 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b528c:	f7ff fde8 	bl	b4e60 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
   b5290:	2800      	cmp	r0, #0
   b5292:	d0ec      	beq.n	b526e <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv+0xa>
   b5294:	2001      	movs	r0, #1
}
   b5296:	bd10      	pop	{r4, pc}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b5298:	f7fe ff6a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
}
   b529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().acknowledgeAlertReportGateway()) return true;}
   b52a0:	f7ff bf52 	b.w	b5148 <_ZN14LoRA_Functions29acknowledgeAlertReportGatewayEv>
   b52a4:	2003d878 	.word	0x2003d878

000b52a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b52a8:	b570      	push	{r4, r5, r6, lr}
   b52aa:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b52ac:	2379      	movs	r3, #121	; 0x79
   b52ae:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b52b2:	f10d 031f 	add.w	r3, sp, #31
   b52b6:	9303      	str	r3, [sp, #12]
   b52b8:	f10d 031e 	add.w	r3, sp, #30
   b52bc:	4e47      	ldr	r6, [pc, #284]	; (b53dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x134>)
   b52be:	9302      	str	r3, [sp, #8]
   b52c0:	f10d 031d 	add.w	r3, sp, #29
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	ab07      	add	r3, sp, #28
   b52c8:	9300      	str	r3, [sp, #0]
   b52ca:	4845      	ldr	r0, [pc, #276]	; (b53e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x138>)
   b52cc:	f10d 031b 	add.w	r3, sp, #27
   b52d0:	f10d 021a 	add.w	r2, sp, #26
   b52d4:	4631      	mov	r1, r6
   b52d6:	f005 fe2b 	bl	baf30 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b52da:	b910      	cbnz	r0, b52e2 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x3a>
	return false;
   b52dc:	2000      	movs	r0, #0
}
   b52de:	b008      	add	sp, #32
   b52e0:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b52e2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b52e6:	2400      	movs	r4, #0
   b52e8:	54f4      	strb	r4, [r6, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b52ea:	8835      	ldrh	r5, [r6, #0]
   b52ec:	f001 f812 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b52f0:	f001 fa22 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b52f4:	ba6d      	rev16	r5, r5
   b52f6:	b2ad      	uxth	r5, r5
   b52f8:	42a8      	cmp	r0, r5
   b52fa:	d014      	beq.n	b5326 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7e>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b52fc:	f001 f842 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5300:	f001 f957 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5304:	8833      	ldrh	r3, [r6, #0]
   b5306:	9005      	str	r0, [sp, #20]
   b5308:	ba5b      	rev16	r3, r3
   b530a:	b29b      	uxth	r3, r3
   b530c:	9304      	str	r3, [sp, #16]
   b530e:	f001 f801 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5312:	f001 fa11 	bl	b6738 <_ZNK13sysStatusData15get_magicNumberEv>
   b5316:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b531a:	9000      	str	r0, [sp, #0]
   b531c:	4931      	ldr	r1, [pc, #196]	; (b53e4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x13c>)
   b531e:	4832      	ldr	r0, [pc, #200]	; (b53e8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b5320:	f7fe ff0d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b5324:	e7da      	b.n	b52dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
			current.set_nodeNumber(from);
   b5326:	f001 f82d 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b532a:	f89d 101b 	ldrb.w	r1, [sp, #27]
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b532e:	4c2f      	ldr	r4, [pc, #188]	; (b53ec <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>)
			current.set_nodeNumber(from);
   b5330:	f001 f9ba 	bl	b66a8 <_ZN17currentStatusData14set_nodeNumberEh>
			lora_state = (LoRA_State)(0x0F & messageFlag);				// Strip out the overhead byte
   b5334:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5338:	f003 030f 	and.w	r3, r3, #15
   b533c:	7023      	strb	r3, [r4, #0]
			Log.info("Node %d %s message with rssi=%d", current.get_nodeNumber(), loraStateNames[lora_state], driver.lastRssi());
   b533e:	f001 f821 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5342:	f001 f936 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5346:	7821      	ldrb	r1, [r4, #0]
   b5348:	4b29      	ldr	r3, [pc, #164]	; (b53f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x148>)
   b534a:	9005      	str	r0, [sp, #20]
   b534c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b5350:	4828      	ldr	r0, [pc, #160]	; (b53f4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x14c>)
   b5352:	9304      	str	r3, [sp, #16]
   b5354:	f005 fb9d 	bl	baa92 <_ZN15RHGenericDriver8lastRssiEv>
   b5358:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b535c:	9000      	str	r0, [sp, #0]
   b535e:	4926      	ldr	r1, [pc, #152]	; (b53f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x150>)
   b5360:	4821      	ldr	r0, [pc, #132]	; (b53e8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b5362:	f7fe feec 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_RPT) { if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b5366:	7823      	ldrb	r3, [r4, #0]
   b5368:	2b03      	cmp	r3, #3
   b536a:	d128      	bne.n	b53be <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x116>
   b536c:	f7fe ff00 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5370:	f7fe ffdc 	bl	b432c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b5374:	2800      	cmp	r0, #0
   b5376:	d0b1      	beq.n	b52dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              							// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b5378:	f000 ffcc 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b537c:	f001 f9e6 	bl	b674c <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b5380:	b1c0      	cbz	r0, b53b4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x10c>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());		// This was the temporary value from the particle function
   b5382:	f000 ffc7 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5386:	4604      	mov	r4, r0
   b5388:	f000 ffc4 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b538c:	f001 f9de 	bl	b674c <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b5390:	4601      	mov	r1, r0
   b5392:	4620      	mov	r0, r4
   b5394:	f001 fa18 	bl	b67c8 <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b5398:	f000 ffbc 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b539c:	2100      	movs	r1, #0
   b539e:	f001 fa19 	bl	b67d4 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b53a2:	f000 ffb7 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b53a6:	f001 f9cc 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b53aa:	4914      	ldr	r1, [pc, #80]	; (b53fc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x154>)
   b53ac:	4602      	mov	r2, r0
   b53ae:	480e      	ldr	r0, [pc, #56]	; (b53e8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x140>)
   b53b0:	f7fe fec5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (LoRA_Functions::instance().respondToLoRAMessageGateway()) return true;
   b53b4:	f7fe fedc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53b8:	f7ff ff54 	bl	b5264 <_ZN14LoRA_Functions27respondToLoRAMessageGatewayEv>
   b53bc:	e78f      	b.n	b52de <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x36>
		else if (lora_state == JOIN_REQ) { if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b53be:	2b01      	cmp	r3, #1
   b53c0:	d104      	bne.n	b53cc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x124>
   b53c2:	f7fe fed5 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53c6:	f7ff fc73 	bl	b4cb0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b53ca:	e7d3      	b.n	b5374 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xcc>
		else if (lora_state == ALERT_RPT) { if(!LoRA_Functions::instance().decipherAlertReportGateway()) return false;}
   b53cc:	2b05      	cmp	r3, #5
   b53ce:	d1d3      	bne.n	b5378 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xd0>
   b53d0:	f7fe fece 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53d4:	f7fe fffa 	bl	b43cc <_ZN14LoRA_Functions26decipherAlertReportGatewayEv>
   b53d8:	e7cc      	b.n	b5374 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0xcc>
   b53da:	bf00      	nop
   b53dc:	2003d880 	.word	0x2003d880
   b53e0:	2003e178 	.word	0x2003e178
   b53e4:	000c37f1 	.word	0x000c37f1
   b53e8:	2003e658 	.word	0x2003e658
   b53ec:	2003d878 	.word	0x2003d878
   b53f0:	2003d58c 	.word	0x2003d58c
   b53f4:	2003d8fc 	.word	0x2003d8fc
   b53f8:	000c384b 	.word	0x000c384b
   b53fc:	000c386b 	.word	0x000c386b

000b5400 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b5400:	4b01      	ldr	r3, [pc, #4]	; (b5408 <_Z18outOfMemoryHandleryi+0x8>)
   b5402:	601a      	str	r2, [r3, #0]
}
   b5404:	4770      	bx	lr
   b5406:	bf00      	nop
   b5408:	2003d5fc 	.word	0x2003d5fc

000b540c <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b540c:	4b01      	ldr	r3, [pc, #4]	; (b5414 <_Z13userSwitchISRv+0x8>)
   b540e:	2201      	movs	r2, #1
   b5410:	701a      	strb	r2, [r3, #0]
}
   b5412:	4770      	bx	lr
   b5414:	2003e46b 	.word	0x2003e46b

000b5418 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5418:	b530      	push	{r4, r5, lr}
   b541a:	b085      	sub	sp, #20
   b541c:	4604      	mov	r4, r0
   b541e:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5420:	b160      	cbz	r0, b543c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5422:	6840      	ldr	r0, [r0, #4]
   b5424:	b150      	cbz	r0, b543c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5426:	6885      	ldr	r5, [r0, #8]
   b5428:	b145      	cbz	r5, b543c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b542a:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b542e:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5432:	68c4      	ldr	r4, [r0, #12]
   b5434:	ab01      	add	r3, sp, #4
   b5436:	466a      	mov	r2, sp
   b5438:	a902      	add	r1, sp, #8
   b543a:	47a0      	blx	r4
    }
   b543c:	b005      	add	sp, #20
   b543e:	bd30      	pop	{r4, r5, pc}

000b5440 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5440:	b530      	push	{r4, r5, lr}
   b5442:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5444:	6800      	ldr	r0, [r0, #0]
   b5446:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b544e:	6883      	ldr	r3, [r0, #8]
   b5450:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5454:	b90b      	cbnz	r3, b545a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5456:	f00a ff99 	bl	c038c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b545a:	68c3      	ldr	r3, [r0, #12]
   b545c:	aa01      	add	r2, sp, #4
   b545e:	a902      	add	r1, sp, #8
   b5460:	4798      	blx	r3
      }
   b5462:	b005      	add	sp, #20
   b5464:	bd30      	pop	{r4, r5, pc}

000b5466 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5466:	2a01      	cmp	r2, #1
   b5468:	d102      	bne.n	b5470 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b546a:	6001      	str	r1, [r0, #0]
      }
   b546c:	2000      	movs	r0, #0
   b546e:	4770      	bx	lr
	  switch (__op)
   b5470:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5472:	bf04      	itt	eq
   b5474:	680b      	ldreq	r3, [r1, #0]
   b5476:	6003      	streq	r3, [r0, #0]
	      break;
   b5478:	e7f8      	b.n	b546c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b547a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b547a:	6803      	ldr	r3, [r0, #0]
   b547c:	6812      	ldr	r2, [r2, #0]
   b547e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5482:	4718      	bx	r3

000b5484 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b5484:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5486:	2000      	movs	r0, #0
   b5488:	f007 fcd8 	bl	bce3c <spark_sync_time_pending>
   b548c:	b128      	cbz	r0, b549a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b548e:	f007 fcb5 	bl	bcdfc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5492:	f080 0001 	eor.w	r0, r0, #1
   b5496:	b2c0      	uxtb	r0, r0
    }
   b5498:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b549a:	2001      	movs	r0, #1
   b549c:	e7fc      	b.n	b5498 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b549e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b549e:	b510      	push	{r4, lr}
      if (_M_manager)
   b54a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b54a2:	4604      	mov	r4, r0
      if (_M_manager)
   b54a4:	b113      	cbz	r3, b54ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54a6:	2203      	movs	r2, #3
   b54a8:	4601      	mov	r1, r0
   b54aa:	4798      	blx	r3
    }
   b54ac:	4620      	mov	r0, r4
   b54ae:	bd10      	pop	{r4, pc}

000b54b0 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b54b0:	b510      	push	{r4, lr}
            delete callableWrapper;
   b54b2:	4604      	mov	r4, r0
   b54b4:	b138      	cbz	r0, b54c6 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b54b6:	f7ff fff2 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   b54ba:	4620      	mov	r0, r4
   b54bc:	2110      	movs	r1, #16
        };
   b54be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b54c2:	f7fe bdec 	b.w	b409e <_ZdlPvj>
        };
   b54c6:	bd10      	pop	{r4, pc}

000b54c8 <_Z22publishStateTransitionv>:
{
   b54c8:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b54ca:	4c14      	ldr	r4, [pc, #80]	; (b551c <_Z22publishStateTransitionv+0x54>)
   b54cc:	4d14      	ldr	r5, [pc, #80]	; (b5520 <_Z22publishStateTransitionv+0x58>)
   b54ce:	7823      	ldrb	r3, [r4, #0]
   b54d0:	4e14      	ldr	r6, [pc, #80]	; (b5524 <_Z22publishStateTransitionv+0x5c>)
   b54d2:	2b02      	cmp	r3, #2
{
   b54d4:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b54d6:	d117      	bne.n	b5508 <_Z22publishStateTransitionv+0x40>
   b54d8:	f00a fc20 	bl	bfd1c <_ZN9TimeClass7isValidEv>
   b54dc:	b9a0      	cbnz	r0, b5508 <_Z22publishStateTransitionv+0x40>
   b54de:	7822      	ldrb	r2, [r4, #0]
   b54e0:	7833      	ldrb	r3, [r6, #0]
   b54e2:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b54e6:	9200      	str	r2, [sp, #0]
   b54e8:	4a0f      	ldr	r2, [pc, #60]	; (b5528 <_Z22publishStateTransitionv+0x60>)
   b54ea:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b54ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   b54f2:	a802      	add	r0, sp, #8
   b54f4:	f007 fd4a 	bl	bcf8c <snprintf>
	oldState = state;
   b54f8:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b54fa:	480c      	ldr	r0, [pc, #48]	; (b552c <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b54fc:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b54fe:	a902      	add	r1, sp, #8
   b5500:	f7fe fe1d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b5504:	b042      	add	sp, #264	; 0x108
   b5506:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b5508:	7822      	ldrb	r2, [r4, #0]
   b550a:	7833      	ldrb	r3, [r6, #0]
   b550c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b5510:	9200      	str	r2, [sp, #0]
   b5512:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b5516:	4a06      	ldr	r2, [pc, #24]	; (b5530 <_Z22publishStateTransitionv+0x68>)
   b5518:	e7e9      	b.n	b54ee <_Z22publishStateTransitionv+0x26>
   b551a:	bf00      	nop
   b551c:	2003e46a 	.word	0x2003e46a
   b5520:	2003d600 	.word	0x2003d600
   b5524:	2003e469 	.word	0x2003e469
   b5528:	000c38c0 	.word	0x000c38c0
   b552c:	2003e658 	.word	0x2003e658
   b5530:	000c38e0 	.word	0x000c38e0

000b5534 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b5534:	b510      	push	{r4, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5536:	f000 feed 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b553a:	f001 f902 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b553e:	4604      	mov	r4, r0
   	if (Time.isValid()) {
   b5540:	f00a fbec 	bl	bfd1c <_ZN9TimeClass7isValidEv>
   b5544:	b908      	cbnz	r0, b554a <_Z21secondsUntilNextEventv+0x16>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b5546:	200a      	movs	r0, #10
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
        // Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
    }
	return secondsToReturn;
}
   b5548:	bd10      	pop	{r4, pc}
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b554a:	203c      	movs	r0, #60	; 0x3c
   b554c:	4344      	muls	r4, r0
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b554e:	f00a fc02 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5552:	fbb0 f3f4 	udiv	r3, r0, r4
   b5556:	fb03 0014 	mls	r0, r3, r4, r0
   b555a:	1a20      	subs	r0, r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b555c:	2809      	cmp	r0, #9
   b555e:	d9f2      	bls.n	b5546 <_Z21secondsUntilNextEventv+0x12>
   b5560:	42a0      	cmp	r0, r4
   b5562:	bf28      	it	cs
   b5564:	4620      	movcs	r0, r4
   b5566:	e7ef      	b.n	b5548 <_Z21secondsUntilNextEventv+0x14>

000b5568 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b556c:	ed2d 8b02 	vpush	{d8}
   b5570:	b0e7      	sub	sp, #412	; 0x19c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5572:	ac1e      	add	r4, sp, #120	; 0x78
   b5574:	4b81      	ldr	r3, [pc, #516]	; (b577c <_Z14publishWebhookh+0x214>)
   b5576:	6023      	str	r3, [r4, #0]
   b5578:	4b81      	ldr	r3, [pc, #516]	; (b5780 <_Z14publishWebhookh+0x218>)
   b557a:	6063      	str	r3, [r4, #4]
   b557c:	4b81      	ldr	r3, [pc, #516]	; (b5784 <_Z14publishWebhookh+0x21c>)
   b557e:	60a3      	str	r3, [r4, #8]
   b5580:	4b81      	ldr	r3, [pc, #516]	; (b5788 <_Z14publishWebhookh+0x220>)
   b5582:	60e3      	str	r3, [r4, #12]
   b5584:	4b81      	ldr	r3, [pc, #516]	; (b578c <_Z14publishWebhookh+0x224>)
   b5586:	6123      	str	r3, [r4, #16]
   b5588:	4b81      	ldr	r3, [pc, #516]	; (b5790 <_Z14publishWebhookh+0x228>)
   b558a:	6163      	str	r3, [r4, #20]
   b558c:	f04f 0a00 	mov.w	sl, #0
   b5590:	4b80      	ldr	r3, [pc, #512]	; (b5794 <_Z14publishWebhookh+0x22c>)
   b5592:	f8c4 a01c 	str.w	sl, [r4, #28]
   b5596:	61a3      	str	r3, [r4, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5598:	4605      	mov	r5, r0
   b559a:	2800      	cmp	r0, #0
   b559c:	f000 809d 	beq.w	b56da <_Z14publishWebhookh+0x172>
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b55a0:	f000 fef0 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55a4:	f001 f823 	bl	b65ee <_ZNK17currentStatusData16get_successCountEv>
   b55a8:	4680      	mov	r8, r0
   b55aa:	f000 feeb 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55ae:	f001 f819 	bl	b65e4 <_ZNK17currentStatusData16get_messageCountEv>
   b55b2:	9019      	str	r0, [sp, #100]	; 0x64

		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b55b4:	f7fe fddc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b55b8:	462a      	mov	r2, r5
   b55ba:	4601      	mov	r1, r0
   b55bc:	a81a      	add	r0, sp, #104	; 0x68
   b55be:	f7fe ff2b 	bl	b4418 <_ZN14LoRA_Functions12findDeviceIDEh>
	const char * c_str() const { return buffer; }
   b55c2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   b55c6:	f000 fedd 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55ca:	f001 f8c9 	bl	b6760 <_ZNK17currentStatusData15get_hourlyCountEv>
   b55ce:	9014      	str	r0, [sp, #80]	; 0x50
   b55d0:	f000 fed8 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55d4:	f001 f8c9 	bl	b676a <_ZNK17currentStatusData14get_dailyCountEv>
   b55d8:	9015      	str	r0, [sp, #84]	; 0x54
   b55da:	f000 fed3 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55de:	f001 f810 	bl	b6602 <_ZNK17currentStatusData14get_sensorTypeEv>
   b55e2:	9016      	str	r0, [sp, #88]	; 0x58
   b55e4:	f000 fece 	bl	b6384 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b55e8:	f000 fef2 	bl	b63d0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b55ec:	eeb0 8a40 	vmov.f32	s16, s0
   b55f0:	eef0 8a60 	vmov.f32	s17, s1
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b55f4:	f000 fec6 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b55f8:	f000 ffea 	bl	b65d0 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b55fc:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   b5600:	9313      	str	r3, [sp, #76]	; 0x4c
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_messageCount(), percentSuccess, Time.now());
   b5602:	f000 febf 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5606:	f000 ffde 	bl	b65c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b560a:	9017      	str	r0, [sp, #92]	; 0x5c
   b560c:	f000 feba 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5610:	f000 ffe3 	bl	b65da <_ZNK17currentStatusData14get_resetCountEv>
   b5614:	9018      	str	r0, [sp, #96]	; 0x60
   b5616:	f000 feb5 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b561a:	f000 ffed 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b561e:	4604      	mov	r4, r0
   b5620:	f000 feb0 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5624:	f000 ffc5 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5628:	4605      	mov	r5, r0
   b562a:	f000 feab 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b562e:	f001 f892 	bl	b6756 <_ZNK17currentStatusData8get_RSSIEv>
   b5632:	4606      	mov	r6, r0
   b5634:	f000 fea6 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5638:	f000 ffd4 	bl	b65e4 <_ZNK17currentStatusData16get_messageCountEv>
   b563c:	4607      	mov	r7, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b563e:	f00a fb8a 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5642:	9010      	str	r0, [sp, #64]	; 0x40
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b5644:	4640      	mov	r0, r8
   b5646:	f00b f801 	bl	c064c <__aeabi_i2d>
   b564a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b564c:	4680      	mov	r8, r0
   b564e:	4618      	mov	r0, r3
   b5650:	4689      	mov	r9, r1
   b5652:	f00a fffb 	bl	c064c <__aeabi_i2d>
   b5656:	4602      	mov	r2, r0
   b5658:	460b      	mov	r3, r1
   b565a:	4640      	mov	r0, r8
   b565c:	4649      	mov	r1, r9
   b565e:	f00b f989 	bl	c0974 <__aeabi_ddiv>
   b5662:	4b4d      	ldr	r3, [pc, #308]	; (b5798 <_Z14publishWebhookh+0x230>)
   b5664:	2200      	movs	r2, #0
   b5666:	f00b f85b 	bl	c0720 <__aeabi_dmul>
   b566a:	f00b fb51 	bl	c0d10 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b566e:	f00a ffff 	bl	c0670 <__aeabi_f2d>
   b5672:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5674:	9308      	str	r3, [sp, #32]
   b5676:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5678:	9307      	str	r3, [sp, #28]
   b567a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b567c:	9306      	str	r3, [sp, #24]
   b567e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5680:	9302      	str	r3, [sp, #8]
   b5682:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5688:	4a44      	ldr	r2, [pc, #272]	; (b579c <_Z14publishWebhookh+0x234>)
   b568a:	9300      	str	r3, [sp, #0]
   b568c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   b5690:	465b      	mov	r3, fp
   b5692:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5696:	ed8d 8b04 	vstr	d8, [sp, #16]
   b569a:	a826      	add	r0, sp, #152	; 0x98
   b569c:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
   b56a0:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
   b56a4:	f007 fc72 	bl	bcf8c <snprintf>
		LoRA_Functions::instance().findDeviceID(nodeNumber).c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b56a8:	a81a      	add	r0, sp, #104	; 0x68
   b56aa:	f009 ffa1 	bl	bf5f0 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b56ae:	f004 fccb 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b56b2:	4b3b      	ldr	r3, [pc, #236]	; (b57a0 <_Z14publishWebhookh+0x238>)
   b56b4:	4a3b      	ldr	r2, [pc, #236]	; (b57a4 <_Z14publishWebhookh+0x23c>)
   b56b6:	781b      	ldrb	r3, [r3, #0]
   b56b8:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b56ba:	493b      	ldr	r1, [pc, #236]	; (b57a8 <_Z14publishWebhookh+0x240>)
   b56bc:	4313      	orrs	r3, r2
   b56be:	6802      	ldr	r2, [r0, #0]
   b56c0:	f88d 3000 	strb.w	r3, [sp]
   b56c4:	f88d a004 	strb.w	sl, [sp, #4]
   b56c8:	6814      	ldr	r4, [r2, #0]
   b56ca:	233c      	movs	r3, #60	; 0x3c
   b56cc:	aa26      	add	r2, sp, #152	; 0x98
   b56ce:	47a0      	blx	r4
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}
	return;
}
   b56d0:	b067      	add	sp, #412	; 0x19c
   b56d2:	ecbd 8b02 	vpop	{d8}
   b56d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		takeMeasurements();												// Loads the current values for the Gateway
   b56da:	f001 ffc7 	bl	b766c <_Z16takeMeasurementsv>
        return spark_deviceID();
   b56de:	a81a      	add	r0, sp, #104	; 0x68
   b56e0:	f007 fb94 	bl	bce0c <spark_deviceID>
   b56e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b56e6:	9313      	str	r3, [sp, #76]	; 0x4c
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b56e8:	f000 fe14 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b56ec:	f000 ff5c 	bl	b65a8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b56f0:	4606      	mov	r6, r0
   b56f2:	f000 fe47 	bl	b6384 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b56f6:	f000 fe6b 	bl	b63d0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b56fa:	eeb0 8a40 	vmov.f32	s16, s0
   b56fe:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5702:	f000 fe3f 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5706:	f000 ff63 	bl	b65d0 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b570a:	f854 9020 	ldr.w	r9, [r4, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
   b570e:	f000 fe39 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5712:	f000 ff58 	bl	b65c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b5716:	4604      	mov	r4, r0
   b5718:	f000 fdfc 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b571c:	f000 ff30 	bl	b6580 <_ZNK13sysStatusData14get_resetCountEv>
   b5720:	4607      	mov	r7, r0
   b5722:	f000 fdf7 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5726:	f000 ff30 	bl	b658a <_ZNK13sysStatusData16get_messageCountEv>
   b572a:	4680      	mov	r8, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b572c:	f00a fb13 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5732:	4a1e      	ldr	r2, [pc, #120]	; (b57ac <_Z14publishWebhookh+0x244>)
   b5734:	f8cd 9018 	str.w	r9, [sp, #24]
   b5738:	f44f 7180 	mov.w	r1, #256	; 0x100
   b573c:	e9cd 8009 	strd	r8, r0, [sp, #36]	; 0x24
   b5740:	e9cd 4707 	strd	r4, r7, [sp, #28]
   b5744:	ed8d 8b04 	vstr	d8, [sp, #16]
   b5748:	e9cd 5601 	strd	r5, r6, [sp, #4]
   b574c:	9500      	str	r5, [sp, #0]
   b574e:	a826      	add	r0, sp, #152	; 0x98
   b5750:	f007 fc1c 	bl	bcf8c <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5754:	a81a      	add	r0, sp, #104	; 0x68
   b5756:	f009 ff4b 	bl	bf5f0 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b575a:	f004 fc75 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
   b575e:	4b10      	ldr	r3, [pc, #64]	; (b57a0 <_Z14publishWebhookh+0x238>)
   b5760:	4a10      	ldr	r2, [pc, #64]	; (b57a4 <_Z14publishWebhookh+0x23c>)
   b5762:	781b      	ldrb	r3, [r3, #0]
   b5764:	7812      	ldrb	r2, [r2, #0]
   b5766:	4912      	ldr	r1, [pc, #72]	; (b57b0 <_Z14publishWebhookh+0x248>)
   b5768:	4313      	orrs	r3, r2
   b576a:	6802      	ldr	r2, [r0, #0]
   b576c:	f88d 3000 	strb.w	r3, [sp]
   b5770:	f88d 5004 	strb.w	r5, [sp, #4]
   b5774:	6814      	ldr	r4, [r2, #0]
   b5776:	233c      	movs	r3, #60	; 0x3c
   b5778:	aa26      	add	r2, sp, #152	; 0x98
   b577a:	e7a8      	b.n	b56ce <_Z14publishWebhookh+0x166>
   b577c:	000c38ee 	.word	0x000c38ee
   b5780:	000c38f6 	.word	0x000c38f6
   b5784:	000c38fa 	.word	0x000c38fa
   b5788:	000c3903 	.word	0x000c3903
   b578c:	000c390b 	.word	0x000c390b
   b5790:	000c3917 	.word	0x000c3917
   b5794:	000c391d 	.word	0x000c391d
   b5798:	40590000 	.word	0x40590000
   b579c:	000c3929 	.word	0x000c3929
   b57a0:	2003e32c 	.word	0x2003e32c
   b57a4:	2003e32d 	.word	0x2003e32d
   b57a8:	000c39ec 	.word	0x000c39ec
   b57ac:	000c3a01 	.word	0x000c3a01
   b57b0:	000c3a8f 	.word	0x000c3a8f

000b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b57b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b57b6:	2300      	movs	r3, #0
   b57b8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b57ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b57bc:	4604      	mov	r4, r0
   b57be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b57c0:	b12b      	cbz	r3, b57ce <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b57c2:	2202      	movs	r2, #2
   b57c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b57c6:	68eb      	ldr	r3, [r5, #12]
   b57c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b57ca:	68ab      	ldr	r3, [r5, #8]
   b57cc:	60a3      	str	r3, [r4, #8]
    }
   b57ce:	4620      	mov	r0, r4
   b57d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b57d4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b57d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57d8:	b095      	sub	sp, #84	; 0x54
   b57da:	4605      	mov	r5, r0
        };
   b57dc:	991c      	ldr	r1, [sp, #112]	; 0x70
   b57de:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b57e0:	4690      	mov	r8, r2
   b57e2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b57e4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b57e6:	f7ff ffe5 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b57ea:	a904      	add	r1, sp, #16
   b57ec:	a808      	add	r0, sp, #32
   b57ee:	f7ff ffe1 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b57f2:	a908      	add	r1, sp, #32
   b57f4:	4630      	mov	r0, r6
   b57f6:	f7ff ffdd 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b57fa:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b57fe:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5800:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5804:	f7fe fc47 	bl	b4096 <_Znwj>
   b5808:	4604      	mov	r4, r0
   b580a:	b1a0      	cbz	r0, b5836 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b580c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5810:	ab01      	add	r3, sp, #4
   b5812:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5816:	e894 0003 	ldmia.w	r4, {r0, r1}
   b581a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b581e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b5824:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5826:	60a3      	str	r3, [r4, #8]
   b5828:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b582c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b582e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b5832:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b5834:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b5836:	4b24      	ldr	r3, [pc, #144]	; (b58c8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5838:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b583a:	4b24      	ldr	r3, [pc, #144]	; (b58cc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b583c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b583e:	2200      	movs	r2, #0
   b5840:	2300      	movs	r3, #0
   b5842:	f04f 0900 	mov.w	r9, #0
   b5846:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b584a:	4b21      	ldr	r3, [pc, #132]	; (b58d0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b584c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5850:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5852:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b5854:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5858:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b585c:	f7fe fc1b 	bl	b4096 <_Znwj>
   b5860:	4604      	mov	r4, r0
   b5862:	b1d8      	cbz	r0, b589c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b5864:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b5866:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b586a:	b133      	cbz	r3, b587a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b586c:	2202      	movs	r2, #2
   b586e:	a910      	add	r1, sp, #64	; 0x40
   b5870:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5874:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5876:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5878:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b587a:	4b16      	ldr	r3, [pc, #88]	; (b58d4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b587c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b587e:	4a16      	ldr	r2, [pc, #88]	; (b58d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5880:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5882:	ab01      	add	r3, sp, #4
   b5884:	4640      	mov	r0, r8
   b5886:	4639      	mov	r1, r7
   b5888:	f007 fa3e 	bl	bcd08 <system_subscribe_event>
        if (r) {
   b588c:	b1b0      	cbz	r0, b58bc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b588e:	4620      	mov	r0, r4
   b5890:	f7ff fe05 	bl	b549e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b5894:	2110      	movs	r1, #16
   b5896:	4620      	mov	r0, r4
   b5898:	f7fe fc01 	bl	b409e <_ZdlPvj>
   b589c:	a810      	add	r0, sp, #64	; 0x40
   b589e:	f7ff fdfe 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   b58a2:	4630      	mov	r0, r6
   b58a4:	f7ff fdfb 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   b58a8:	a808      	add	r0, sp, #32
   b58aa:	f7ff fdf8 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   b58ae:	a804      	add	r0, sp, #16
   b58b0:	f7ff fdf5 	bl	b549e <_ZNSt14_Function_baseD1Ev>
    }
   b58b4:	4628      	mov	r0, r5
   b58b6:	b015      	add	sp, #84	; 0x54
   b58b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b58bc:	9b02      	ldr	r3, [sp, #8]
   b58be:	60ab      	str	r3, [r5, #8]
   b58c0:	e9c5 8700 	strd	r8, r7, [r5]
   b58c4:	e7ea      	b.n	b589c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b58c6:	bf00      	nop
   b58c8:	000b5441 	.word	0x000b5441
   b58cc:	000b58dd 	.word	0x000b58dd
   b58d0:	000c0002 	.word	0x000c0002
   b58d4:	000b54b1 	.word	0x000b54b1
   b58d8:	000b5419 	.word	0x000b5419

000b58dc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b58dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b58de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58e0:	4604      	mov	r4, r0
	switch (__op)
   b58e2:	d104      	bne.n	b58ee <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b58e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b58e6:	6003      	str	r3, [r0, #0]
      }
   b58e8:	2000      	movs	r0, #0
   b58ea:	b003      	add	sp, #12
   b58ec:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b58ee:	2a02      	cmp	r2, #2
   b58f0:	d00c      	beq.n	b590c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b58f2:	2a03      	cmp	r2, #3
   b58f4:	d1f8      	bne.n	b58e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b58f6:	6804      	ldr	r4, [r0, #0]
   b58f8:	2c00      	cmp	r4, #0
   b58fa:	d0f5      	beq.n	b58e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b58fc:	4620      	mov	r0, r4
   b58fe:	f7ff fdce 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5902:	2110      	movs	r1, #16
   b5904:	4620      	mov	r0, r4
   b5906:	f7fe fbca 	bl	b409e <_ZdlPvj>
   b590a:	e7ed      	b.n	b58e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b590c:	6809      	ldr	r1, [r1, #0]
   b590e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5910:	2010      	movs	r0, #16
   b5912:	f7fe fbc0 	bl	b4096 <_Znwj>
   b5916:	4605      	mov	r5, r0
   b5918:	b110      	cbz	r0, b5920 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b591a:	9901      	ldr	r1, [sp, #4]
   b591c:	f7ff ff4a 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5920:	6025      	str	r5, [r4, #0]
	}
   b5922:	e7e1      	b.n	b58e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b5924 <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b5924:	4b16      	ldr	r3, [pc, #88]	; (b5980 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b5926:	b510      	push	{r4, lr}
   b5928:	2401      	movs	r4, #1
   b592a:	701c      	strb	r4, [r3, #0]
   b592c:	4b15      	ldr	r3, [pc, #84]	; (b5984 <_GLOBAL__sub_I___appProductVersion+0x60>)
   b592e:	2208      	movs	r2, #8
   b5930:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5932:	f00a fbb9 	bl	c00a8 <spark_protocol_instance>
   b5936:	2300      	movs	r3, #0
   b5938:	461a      	mov	r2, r3
   b593a:	4619      	mov	r1, r3
   b593c:	f00a fbc4 	bl	c00c8 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5940:	f00a fbb2 	bl	c00a8 <spark_protocol_instance>
   b5944:	2300      	movs	r3, #0
   b5946:	461a      	mov	r2, r3
   b5948:	210d      	movs	r1, #13
   b594a:	f00a fbb5 	bl	c00b8 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b594e:	4b0e      	ldr	r3, [pc, #56]	; (b5988 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5950:	1d1a      	adds	r2, r3, #4
   b5952:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5954:	4a0d      	ldr	r2, [pc, #52]	; (b598c <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5956:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5958:	2200      	movs	r2, #0
   b595a:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b595e:	611a      	str	r2, [r3, #16]
   b5960:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5962:	f00a fc81 	bl	c0268 <_Z19__fetch_global_Wirev>
   b5966:	2269      	movs	r2, #105	; 0x69
   b5968:	4601      	mov	r1, r0
   b596a:	4809      	ldr	r0, [pc, #36]	; (b5990 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b596c:	f001 fede 	bl	b772c <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5970:	4808      	ldr	r0, [pc, #32]	; (b5994 <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5972:	2306      	movs	r3, #6
   b5974:	f840 3b04 	str.w	r3, [r0], #4
}
   b5978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b597c:	f003 be1c 	b.w	b95b8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5980:	2003e32c 	.word	0x2003e32c
   b5984:	2003e32d 	.word	0x2003e32d
   b5988:	2003e360 	.word	0x2003e360
   b598c:	00030010 	.word	0x00030010
   b5990:	2003e340 	.word	0x2003e340
   b5994:	2003e378 	.word	0x2003e378

000b5998 <setup>:
{
   b5998:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b599a:	2000      	movs	r0, #0
   b599c:	b09d      	sub	sp, #116	; 0x74
   b599e:	f006 ff51 	bl	bc844 <hal_timer_millis>
        while (_while() && !_condition()) {
   b59a2:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b59a6:	4604      	mov	r4, r0
   b59a8:	2000      	movs	r0, #0
   b59aa:	f006 ff4b 	bl	bc844 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b59ae:	1b00      	subs	r0, r0, r4
   b59b0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b59b4:	42a8      	cmp	r0, r5
   b59b6:	f171 0300 	sbcs.w	r3, r1, #0
   b59ba:	d207      	bcs.n	b59cc <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b59bc:	f00a fab2 	bl	bff24 <_Z16_fetch_usbserialv>
   b59c0:	f00a faa5 	bl	bff0e <_ZN9USBSerial11isConnectedEv>
   b59c4:	b910      	cbnz	r0, b59cc <setup+0x34>
            spark_process();
   b59c6:	f007 fa09 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   b59ca:	e7ed      	b.n	b59a8 <setup+0x10>
   b59cc:	f00a faaa 	bl	bff24 <_Z16_fetch_usbserialv>
   b59d0:	f00a fa9d 	bl	bff0e <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b59d4:	f001 fcfa 	bl	b73cc <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b59d8:	f001 fd2c 	bl	b7434 <_Z18initializePowerCfgv>
	sysStatus.setup();
   b59dc:	f000 fc9a 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b59e0:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b59e2:	4e5f      	ldr	r6, [pc, #380]	; (b5b60 <setup+0x1c8>)
   b59e4:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b59e6:	4f5f      	ldr	r7, [pc, #380]	; (b5b64 <setup+0x1cc>)
   b59e8:	4798      	blx	r3
	current.setup();
   b59ea:	f000 fccb 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b59ee:	6803      	ldr	r3, [r0, #0]
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	4798      	blx	r3
	nodeID.setup();
   b59f4:	f000 fd4e 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b59f8:	6803      	ldr	r3, [r0, #0]
   b59fa:	681b      	ldr	r3, [r3, #0]
   b59fc:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b59fe:	f001 f923 	bl	b6c48 <_ZN18Particle_Functions8instanceEv>
   b5a02:	f001 f933 	bl	b6c6c <_ZN18Particle_Functions5setupEv>
   b5a06:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5a08:	2101      	movs	r1, #1
   b5a0a:	4630      	mov	r0, r6
   b5a0c:	8173      	strh	r3, [r6, #10]
   b5a0e:	f002 fb89 	bl	b8124 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5a12:	217c      	movs	r1, #124	; 0x7c
   b5a14:	4630      	mov	r0, r6
   b5a16:	f001 ff87 	bl	b7928 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a1a:	4b53      	ldr	r3, [pc, #332]	; (b5b68 <setup+0x1d0>)
   b5a1c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5a1e:	4b53      	ldr	r3, [pc, #332]	; (b5b6c <setup+0x1d4>)
   b5a20:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5a22:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5a24:	4b52      	ldr	r3, [pc, #328]	; (b5b70 <setup+0x1d8>)
   b5a26:	9308      	str	r3, [sp, #32]
   b5a28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5a2c:	2300      	movs	r3, #0
   b5a2e:	a802      	add	r0, sp, #8
   b5a30:	9500      	str	r5, [sp, #0]
   b5a32:	f7ff fecf 	bl	b57d4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5a36:	4628      	mov	r0, r5
   b5a38:	f7ff fd31 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5a3c:	f004 fb04 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
   b5a40:	f004 fd08 	bl	ba454 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5a44:	f7fe fb94 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5a48:	2101      	movs	r1, #1
   b5a4a:	f7fe fbef 	bl	b422c <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5a4e:	f003 ff93 	bl	b9978 <_ZN9LocalTime8instanceEv>
   b5a52:	4948      	ldr	r1, [pc, #288]	; (b5b74 <setup+0x1dc>)
   b5a54:	4604      	mov	r4, r0
   b5a56:	4628      	mov	r0, r5
   b5a58:	f003 fe60 	bl	b971c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5a5c:	a907      	add	r1, sp, #28
   b5a5e:	f104 0008 	add.w	r0, r4, #8
   b5a62:	f009 fe4c 	bl	bf6fe <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5a68:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5a6a:	a90d      	add	r1, sp, #52	; 0x34
   b5a6c:	f104 0020 	add.w	r0, r4, #32
   b5a70:	f009 fe45 	bl	bf6fe <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5a76:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5a7a:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5a7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5a7e:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5a80:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5a82:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5a84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5a86:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5a88:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5a8c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5a90:	4628      	mov	r0, r5
   b5a92:	f003 fbff 	bl	b9294 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5a96:	f00a f95e 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5a9a:	17c3      	asrs	r3, r0, #31
   b5a9c:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5aa0:	4638      	mov	r0, r7
   b5aa2:	f003 ffe1 	bl	b9a68 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5aa6:	f00a f939 	bl	bfd1c <_ZN9TimeClass7isValidEv>
   b5aaa:	4c33      	ldr	r4, [pc, #204]	; (b5b78 <setup+0x1e0>)
   b5aac:	2800      	cmp	r0, #0
   b5aae:	d046      	beq.n	b5b3e <setup+0x1a6>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5ab0:	4639      	mov	r1, r7
   b5ab2:	4a32      	ldr	r2, [pc, #200]	; (b5b7c <setup+0x1e4>)
   b5ab4:	4628      	mov	r0, r5
   b5ab6:	f003 fec1 	bl	b983c <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5aba:	2301      	movs	r3, #1
   b5abc:	461a      	mov	r2, r3
   b5abe:	2110      	movs	r1, #16
   b5ac0:	4630      	mov	r0, r6
   b5ac2:	9f06      	ldr	r7, [sp, #24]
   b5ac4:	f001 ffb1 	bl	b7a2a <_ZN6AB180510isBitClearEhhb>
   b5ac8:	492d      	ldr	r1, [pc, #180]	; (b5b80 <setup+0x1e8>)
   b5aca:	4b2e      	ldr	r3, [pc, #184]	; (b5b84 <setup+0x1ec>)
   b5acc:	463a      	mov	r2, r7
   b5ace:	2800      	cmp	r0, #0
   b5ad0:	bf18      	it	ne
   b5ad2:	460b      	movne	r3, r1
   b5ad4:	482c      	ldr	r0, [pc, #176]	; (b5b88 <setup+0x1f0>)
   b5ad6:	492d      	ldr	r1, [pc, #180]	; (b5b8c <setup+0x1f4>)
   b5ad8:	f7fe fb31 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5adc:	4628      	mov	r0, r5
   b5ade:	f009 fd87 	bl	bf5f0 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5ae2:	4b2b      	ldr	r3, [pc, #172]	; (b5b90 <setup+0x1f8>)
   b5ae4:	881e      	ldrh	r6, [r3, #0]
   b5ae6:	4630      	mov	r0, r6
   b5ae8:	f00a fb5e 	bl	c01a8 <digitalRead>
   b5aec:	4605      	mov	r5, r0
   b5aee:	bb68      	cbnz	r0, b5b4c <setup+0x1b4>
		Log.info("User button pressed, connected mode");
   b5af0:	4928      	ldr	r1, [pc, #160]	; (b5b94 <setup+0x1fc>)
   b5af2:	4825      	ldr	r0, [pc, #148]	; (b5b88 <setup+0x1f0>)
   b5af4:	f7fe fb23 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(1);
   b5af8:	f000 fc0c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5afc:	2101      	movs	r1, #1
   b5afe:	f000 fdaf 	bl	b6660 <_ZN13sysStatusData17set_stayConnectedEh>
		digitalWrite(BLUE_LED,HIGH);
   b5b02:	4b25      	ldr	r3, [pc, #148]	; (b5b98 <setup+0x200>)
   b5b04:	881f      	ldrh	r7, [r3, #0]
   b5b06:	2101      	movs	r1, #1
   b5b08:	4638      	mov	r0, r7
   b5b0a:	f00a fb34 	bl	c0176 <digitalWrite>
		delay(2000);
   b5b0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5b12:	f007 fa93 	bl	bd03c <delay>
		digitalWrite(BLUE_LED,LOW);
   b5b16:	4629      	mov	r1, r5
   b5b18:	4638      	mov	r0, r7
   b5b1a:	f00a fb2c 	bl	c0176 <digitalWrite>
		state = CONNECTING_STATE;
   b5b1e:	2305      	movs	r3, #5
   b5b20:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5b22:	2200      	movs	r2, #0
   b5b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b28:	491c      	ldr	r1, [pc, #112]	; (b5b9c <setup+0x204>)
   b5b2a:	9200      	str	r2, [sp, #0]
   b5b2c:	4630      	mov	r0, r6
   b5b2e:	f008 f805 	bl	bdb3c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5b32:	7823      	ldrb	r3, [r4, #0]
   b5b34:	b90b      	cbnz	r3, b5b3a <setup+0x1a2>
   b5b36:	2302      	movs	r3, #2
   b5b38:	7023      	strb	r3, [r4, #0]
}
   b5b3a:	b01d      	add	sp, #116	; 0x74
   b5b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5b3e:	4918      	ldr	r1, [pc, #96]	; (b5ba0 <setup+0x208>)
   b5b40:	4811      	ldr	r0, [pc, #68]	; (b5b88 <setup+0x1f0>)
   b5b42:	f7fe fafc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5b46:	2305      	movs	r3, #5
   b5b48:	7023      	strb	r3, [r4, #0]
   b5b4a:	e7ca      	b.n	b5ae2 <setup+0x14a>
		Log.info("No user button push detechted");
   b5b4c:	4915      	ldr	r1, [pc, #84]	; (b5ba4 <setup+0x20c>)
   b5b4e:	480e      	ldr	r0, [pc, #56]	; (b5b88 <setup+0x1f0>)
   b5b50:	f7fe faf5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(0);
   b5b54:	f000 fbde 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5b58:	2100      	movs	r1, #0
   b5b5a:	f000 fd81 	bl	b6660 <_ZN13sysStatusData17set_stayConnectedEh>
   b5b5e:	e7e0      	b.n	b5b22 <setup+0x18a>
   b5b60:	2003e340 	.word	0x2003e340
   b5b64:	2003e378 	.word	0x2003e378
   b5b68:	000b5401 	.word	0x000b5401
   b5b6c:	000b547b 	.word	0x000b547b
   b5b70:	000b5467 	.word	0x000b5467
   b5b74:	000c3ab1 	.word	0x000c3ab1
   b5b78:	2003e46a 	.word	0x2003e46a
   b5b7c:	000c3ad8 	.word	0x000c3ad8
   b5b80:	000c3aa7 	.word	0x000c3aa7
   b5b84:	000c3aaa 	.word	0x000c3aaa
   b5b88:	2003e658 	.word	0x2003e658
   b5b8c:	000c3ae3 	.word	0x000c3ae3
   b5b90:	000c4252 	.word	0x000c4252
   b5b94:	000c3b52 	.word	0x000c3b52
   b5b98:	000c4250 	.word	0x000c4250
   b5b9c:	000b540d 	.word	0x000b540d
   b5ba0:	000c3b14 	.word	0x000c3b14
   b5ba4:	000c3b76 	.word	0x000c3b76

000b5ba8 <loop>:
void loop() {
   b5ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5bac:	4d87      	ldr	r5, [pc, #540]	; (b5dcc <loop+0x224>)
   b5bae:	782b      	ldrb	r3, [r5, #0]
   b5bb0:	3b01      	subs	r3, #1
void loop() {
   b5bb2:	b091      	sub	sp, #68	; 0x44
   b5bb4:	2b06      	cmp	r3, #6
   b5bb6:	d81d      	bhi.n	b5bf4 <loop+0x4c>
   b5bb8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5bbc:	000702b6 	.word	0x000702b6
   b5bc0:	01260045 	.word	0x01260045
   b5bc4:	02710202 	.word	0x02710202
   b5bc8:	01e4      	.short	0x01e4
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5bca:	4b81      	ldr	r3, [pc, #516]	; (b5dd0 <loop+0x228>)
   b5bcc:	781b      	ldrb	r3, [r3, #0]
   b5bce:	2b02      	cmp	r3, #2
   b5bd0:	d001      	beq.n	b5bd6 <loop+0x2e>
   b5bd2:	f7ff fc79 	bl	b54c8 <_Z22publishStateTransitionv>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5bd6:	4c7f      	ldr	r4, [pc, #508]	; (b5dd4 <loop+0x22c>)
   b5bd8:	7823      	ldrb	r3, [r4, #0]
   b5bda:	b11b      	cbz	r3, b5be4 <loop+0x3c>
				nextEventTime = false;
   b5bdc:	2300      	movs	r3, #0
   b5bde:	7023      	strb	r3, [r4, #0]
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b5be0:	2304      	movs	r3, #4
   b5be2:	e006      	b.n	b5bf2 <loop+0x4a>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5be4:	f000 fb96 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5be8:	f000 fcc5 	bl	b6576 <_ZNK13sysStatusData17get_stayConnectedEv>
   b5bec:	2801      	cmp	r0, #1
   b5bee:	d0f5      	beq.n	b5bdc <loop+0x34>
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5bf0:	2303      	movs	r3, #3
   b5bf2:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5bf4:	4878      	ldr	r0, [pc, #480]	; (b5dd8 <loop+0x230>)
   b5bf6:	f002 fa43 	bl	b8080 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b5bfa:	f004 fa25 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
   b5bfe:	f004 f915 	bl	b9e2c <_ZN17PublishQueuePosix4loopEv>
	sysStatus.loop();
   b5c02:	f000 fb87 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5c06:	f000 fb95 	bl	b6334 <_ZN13sysStatusData4loopEv>
	current.loop();
   b5c0a:	f000 fbbb 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5c0e:	f000 fbd4 	bl	b63ba <_ZN17currentStatusData4loopEv>
	nodeID.loop();
   b5c12:	f000 fc3f 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b5c16:	f000 fc5a 	bl	b64ce <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5c1a:	f7fe faa9 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5c1e:	f7fe fab9 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5c22:	4b6e      	ldr	r3, [pc, #440]	; (b5ddc <loop+0x234>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	2b00      	cmp	r3, #0
   b5c28:	f2c0 82b2 	blt.w	b6190 <loop+0x5e8>
		Log.info("Resetting due to low memory");
   b5c2c:	496c      	ldr	r1, [pc, #432]	; (b5de0 <loop+0x238>)
   b5c2e:	486d      	ldr	r0, [pc, #436]	; (b5de4 <loop+0x23c>)
   b5c30:	f7fe fa85 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b5c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5c38:	f007 fa00 	bl	bd03c <delay>
}
   b5c3c:	b011      	add	sp, #68	; 0x44
   b5c3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		System.reset();
   b5c42:	f009 be94 	b.w	bf96e <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c46:	4b62      	ldr	r3, [pc, #392]	; (b5dd0 <loop+0x228>)
   b5c48:	781b      	ldrb	r3, [r3, #0]
   b5c4a:	2b03      	cmp	r3, #3
   b5c4c:	d001      	beq.n	b5c52 <loop+0xaa>
   b5c4e:	f7ff fc3b 	bl	b54c8 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5c52:	2100      	movs	r1, #0
   b5c54:	4860      	ldr	r0, [pc, #384]	; (b5dd8 <loop+0x230>)
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5c56:	4f64      	ldr	r7, [pc, #400]	; (b5de8 <loop+0x240>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5c58:	4c64      	ldr	r4, [pc, #400]	; (b5dec <loop+0x244>)
   b5c5a:	f001 fe65 	bl	b7928 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b5c5e:	f7ff fc69 	bl	b5534 <_Z21secondsUntilNextEventv>
   b5c62:	4680      	mov	r8, r0
			time_t time = Time.now() + wakeInSeconds;
   b5c64:	f00a f877 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5c68:	eb00 0208 	add.w	r2, r0, r8
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5c6c:	17d3      	asrs	r3, r2, #31
   b5c6e:	4960      	ldr	r1, [pc, #384]	; (b5df0 <loop+0x248>)
   b5c70:	9700      	str	r7, [sp, #0]
   b5c72:	a808      	add	r0, sp, #32
   b5c74:	f00a f810 	bl	bfc98 <_ZN9TimeClass6formatExPKc>
   b5c78:	9b08      	ldr	r3, [sp, #32]
   b5c7a:	9302      	str	r3, [sp, #8]
   b5c7c:	f009 feda 	bl	bfa34 <_ZN11SystemClass10freeMemoryEv>
   b5c80:	9b02      	ldr	r3, [sp, #8]
   b5c82:	495c      	ldr	r1, [pc, #368]	; (b5df4 <loop+0x24c>)
   b5c84:	9000      	str	r0, [sp, #0]
   b5c86:	4642      	mov	r2, r8
   b5c88:	4856      	ldr	r0, [pc, #344]	; (b5de4 <loop+0x23c>)
   b5c8a:	f7fe fa58 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5c8e:	a808      	add	r0, sp, #32
   b5c90:	f009 fcae 	bl	bf5f0 <_ZN6StringD1Ev>
   b5c94:	7d23      	ldrb	r3, [r4, #20]
   b5c96:	2b00      	cmp	r3, #0
   b5c98:	d050      	beq.n	b5d3c <loop+0x194>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5c9a:	2302      	movs	r3, #2
   b5c9c:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5c9e:	4b56      	ldr	r3, [pc, #344]	; (b5df8 <loop+0x250>)
   b5ca0:	f8b3 9000 	ldrh.w	r9, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5ca4:	6823      	ldr	r3, [r4, #0]
   b5ca6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5ca8:	b1f3      	cbz	r3, b5ce8 <loop+0x140>
            if (start->type == type) {
   b5caa:	889a      	ldrh	r2, [r3, #4]
   b5cac:	2a01      	cmp	r2, #1
   b5cae:	d006      	beq.n	b5cbe <loop+0x116>
            start = start->next;
   b5cb0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5cb2:	e7f9      	b.n	b5ca8 <loop+0x100>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5cb4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5cb6:	b1bb      	cbz	r3, b5ce8 <loop+0x140>
            if (start->type == type) {
   b5cb8:	889a      	ldrh	r2, [r3, #4]
   b5cba:	2a01      	cmp	r2, #1
   b5cbc:	d1fa      	bne.n	b5cb4 <loop+0x10c>
                if (gpioWakeup->pin == pin) {
   b5cbe:	899a      	ldrh	r2, [r3, #12]
   b5cc0:	454a      	cmp	r2, r9
   b5cc2:	d1f7      	bne.n	b5cb4 <loop+0x10c>
                    gpioWakeup->mode = mode;
   b5cc4:	2200      	movs	r2, #0
   b5cc6:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5cc8:	7d23      	ldrb	r3, [r4, #20]
   b5cca:	2b00      	cmp	r3, #0
   b5ccc:	d036      	beq.n	b5d3c <loop+0x194>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5cce:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5cd4:	68db      	ldr	r3, [r3, #12]
   b5cd6:	fb00 f808 	mul.w	r8, r0, r8
        if (!start) {
   b5cda:	b1db      	cbz	r3, b5d14 <loop+0x16c>
            if (start->type == type) {
   b5cdc:	889a      	ldrh	r2, [r3, #4]
   b5cde:	2a04      	cmp	r2, #4
   b5ce0:	f000 8251 	beq.w	b6186 <loop+0x5de>
            start = start->next;
   b5ce4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5ce6:	e7f8      	b.n	b5cda <loop+0x132>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5ce8:	4944      	ldr	r1, [pc, #272]	; (b5dfc <loop+0x254>)
   b5cea:	2010      	movs	r0, #16
   b5cec:	f00a fb44 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   b5cf0:	4606      	mov	r6, r0
   b5cf2:	2800      	cmp	r0, #0
   b5cf4:	f000 824a 	beq.w	b618c <loop+0x5e4>
   b5cf8:	2210      	movs	r2, #16
   b5cfa:	2100      	movs	r1, #0
   b5cfc:	f00b f8f0 	bl	c0ee0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5d00:	4b3f      	ldr	r3, [pc, #252]	; (b5e00 <loop+0x258>)
   b5d02:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5d04:	2301      	movs	r3, #1
   b5d06:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d08:	6923      	ldr	r3, [r4, #16]
   b5d0a:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5d0c:	f8a6 900c 	strh.w	r9, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d10:	6126      	str	r6, [r4, #16]
   b5d12:	e7d9      	b.n	b5cc8 <loop+0x120>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5d14:	4939      	ldr	r1, [pc, #228]	; (b5dfc <loop+0x254>)
   b5d16:	2010      	movs	r0, #16
   b5d18:	f00a fb2e 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   b5d1c:	4606      	mov	r6, r0
   b5d1e:	2800      	cmp	r0, #0
   b5d20:	f000 8234 	beq.w	b618c <loop+0x5e4>
   b5d24:	2210      	movs	r2, #16
   b5d26:	2100      	movs	r1, #0
   b5d28:	f00b f8da 	bl	c0ee0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5d2c:	4b34      	ldr	r3, [pc, #208]	; (b5e00 <loop+0x258>)
   b5d2e:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5d30:	2304      	movs	r3, #4
   b5d32:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d34:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d36:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5d38:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5d3c:	492b      	ldr	r1, [pc, #172]	; (b5dec <loop+0x244>)
   b5d3e:	a805      	add	r0, sp, #20
   b5d40:	f009 fe18 	bl	bf974 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5d48:	4823      	ldr	r0, [pc, #140]	; (b5dd8 <loop+0x230>)
   b5d4a:	f001 fded 	bl	b7928 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b5d4e:	2000      	movs	r0, #0
   b5d50:	f006 fd78 	bl	bc844 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5d54:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5d58:	4604      	mov	r4, r0
   b5d5a:	2000      	movs	r0, #0
   b5d5c:	f006 fd72 	bl	bc844 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5d60:	1b00      	subs	r0, r0, r4
   b5d62:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5d66:	42b0      	cmp	r0, r6
   b5d68:	f171 0300 	sbcs.w	r3, r1, #0
   b5d6c:	d207      	bcs.n	b5d7e <loop+0x1d6>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5d6e:	f00a f8d9 	bl	bff24 <_Z16_fetch_usbserialv>
   b5d72:	f00a f8cc 	bl	bff0e <_ZN9USBSerial11isConnectedEv>
   b5d76:	b910      	cbnz	r0, b5d7e <loop+0x1d6>
            spark_process();
   b5d78:	f007 f830 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   b5d7c:	e7ed      	b.n	b5d5a <loop+0x1b2>
   b5d7e:	f00a f8d1 	bl	bff24 <_Z16_fetch_usbserialv>
   b5d82:	f00a f8c4 	bl	bff0e <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b5d86:	2302      	movs	r3, #2
   b5d88:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b5d8a:	4b12      	ldr	r3, [pc, #72]	; (b5dd4 <loop+0x22c>)
   b5d8c:	2201      	movs	r2, #1
   b5d8e:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5d90:	f009 ffe1 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5d94:	4916      	ldr	r1, [pc, #88]	; (b5df0 <loop+0x248>)
   b5d96:	9700      	str	r7, [sp, #0]
   b5d98:	17c3      	asrs	r3, r0, #31
   b5d9a:	4602      	mov	r2, r0
   b5d9c:	a808      	add	r0, sp, #32
   b5d9e:	f009 ff7b 	bl	bfc98 <_ZN9TimeClass6formatExPKc>
   b5da2:	9a08      	ldr	r2, [sp, #32]
   b5da4:	9202      	str	r2, [sp, #8]
   b5da6:	f009 fe45 	bl	bfa34 <_ZN11SystemClass10freeMemoryEv>
   b5daa:	9a02      	ldr	r2, [sp, #8]
   b5dac:	4915      	ldr	r1, [pc, #84]	; (b5e04 <loop+0x25c>)
   b5dae:	4603      	mov	r3, r0
   b5db0:	480c      	ldr	r0, [pc, #48]	; (b5de4 <loop+0x23c>)
   b5db2:	f7fe f9c4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5db6:	a808      	add	r0, sp, #32
   b5db8:	f009 fc1a 	bl	bf5f0 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5dbc:	9805      	ldr	r0, [sp, #20]
   b5dbe:	2800      	cmp	r0, #0
   b5dc0:	f43f af18 	beq.w	b5bf4 <loop+0x4c>
            free(wakeupSource_);
   b5dc4:	f007 f8c2 	bl	bcf4c <free>
		} break;
   b5dc8:	e714      	b.n	b5bf4 <loop+0x4c>
   b5dca:	bf00      	nop
   b5dcc:	2003e46a 	.word	0x2003e46a
   b5dd0:	2003e469 	.word	0x2003e469
   b5dd4:	2003e468 	.word	0x2003e468
   b5dd8:	2003e340 	.word	0x2003e340
   b5ddc:	2003d5fc 	.word	0x2003d5fc
   b5de0:	000c3cad 	.word	0x000c3cad
   b5de4:	2003e658 	.word	0x2003e658
   b5de8:	000c3ba0 	.word	0x000c3ba0
   b5dec:	2003e360 	.word	0x2003e360
   b5df0:	2003e6ac 	.word	0x2003e6ac
   b5df4:	000c3ba3 	.word	0x000c3ba3
   b5df8:	000c4252 	.word	0x000c4252
   b5dfc:	000c5004 	.word	0x000c5004
   b5e00:	00030010 	.word	0x00030010
   b5e04:	000c3be3 	.word	0x000c3be3
			if (state != oldState) {
   b5e08:	4bb7      	ldr	r3, [pc, #732]	; (b60e8 <loop+0x540>)
   b5e0a:	4fb8      	ldr	r7, [pc, #736]	; (b60ec <loop+0x544>)
   b5e0c:	781b      	ldrb	r3, [r3, #0]
   b5e0e:	2b04      	cmp	r3, #4
   b5e10:	d062      	beq.n	b5ed8 <loop+0x330>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5e12:	2b07      	cmp	r3, #7
   b5e14:	d002      	beq.n	b5e1c <loop+0x274>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e16:	f006 fd05 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   b5e1a:	6038      	str	r0, [r7, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5e1c:	f7ff fb54 	bl	b54c8 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5e20:	f7fe f9a6 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5e24:	f7fe f9b8 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5e28:	f009 ff95 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b5e2c:	4cb0      	ldr	r4, [pc, #704]	; (b60f0 <loop+0x548>)
   b5e2e:	17c3      	asrs	r3, r0, #31
   b5e30:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5e34:	4620      	mov	r0, r4
   b5e36:	f003 fe17 	bl	b9a68 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5e3a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5e3e:	a805      	add	r0, sp, #20
   b5e40:	f003 fca4 	bl	b978c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5e44:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b5e48:	f000 fa64 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5e4c:	f000 fba2 	bl	b6594 <_ZNK13sysStatusData12get_openTimeEv>
   b5e50:	4286      	cmp	r6, r0
   b5e52:	f2c0 808f 	blt.w	b5f74 <loop+0x3cc>
   b5e56:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5e5a:	a808      	add	r0, sp, #32
   b5e5c:	f003 fc96 	bl	b978c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5e60:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b5e64:	f000 fa56 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5e68:	f000 fb99 	bl	b659e <_ZNK13sysStatusData13get_closeTimeEv>
   b5e6c:	4286      	cmp	r6, r0
   b5e6e:	a808      	add	r0, sp, #32
   b5e70:	bfcc      	ite	gt
   b5e72:	2600      	movgt	r6, #0
   b5e74:	2601      	movle	r6, #1
   b5e76:	f003 f9fd 	bl	b9274 <_ZN12LocalTimeHMSD1Ev>
   b5e7a:	a805      	add	r0, sp, #20
   b5e7c:	f003 f9fa 	bl	b9274 <_ZN12LocalTimeHMSD1Ev>
   b5e80:	2e00      	cmp	r6, #0
   b5e82:	d079      	beq.n	b5f78 <loop+0x3d0>
   b5e84:	f000 fa7e 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5e88:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5e8a:	f000 fe34 	bl	b6af6 <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5e8e:	f000 fa79 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5e92:	f000 fd6b 	bl	b696c <_ZNK17currentStatusData13get_openHoursEv>
   b5e96:	4b97      	ldr	r3, [pc, #604]	; (b60f4 <loop+0x54c>)
   b5e98:	4a97      	ldr	r2, [pc, #604]	; (b60f8 <loop+0x550>)
   b5e9a:	4998      	ldr	r1, [pc, #608]	; (b60fc <loop+0x554>)
   b5e9c:	2800      	cmp	r0, #0
   b5e9e:	bf08      	it	eq
   b5ea0:	461a      	moveq	r2, r3
   b5ea2:	a808      	add	r0, sp, #32
   b5ea4:	9203      	str	r2, [sp, #12]
   b5ea6:	f003 fc71 	bl	b978c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5eaa:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5eae:	9302      	str	r3, [sp, #8]
   b5eb0:	f000 fa30 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5eb4:	f000 fb6e 	bl	b6594 <_ZNK13sysStatusData12get_openTimeEv>
   b5eb8:	4604      	mov	r4, r0
   b5eba:	f000 fa2b 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5ebe:	f000 fb6e 	bl	b659e <_ZNK13sysStatusData13get_closeTimeEv>
   b5ec2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5ec6:	e9cd 4000 	strd	r4, r0, [sp]
   b5eca:	498d      	ldr	r1, [pc, #564]	; (b6100 <loop+0x558>)
   b5ecc:	488d      	ldr	r0, [pc, #564]	; (b6104 <loop+0x55c>)
   b5ece:	f7fe f936 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5ed2:	a808      	add	r0, sp, #32
   b5ed4:	f003 f9ce 	bl	b9274 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5ed8:	f7fe f94a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5edc:	f7ff f9e4 	bl	b52a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5ee0:	b1d8      	cbz	r0, b5f1a <loop+0x372>
				Log.info("In main loop - alert %d and open hours %d",current.get_alertCodeNode(), current.get_openHours());
   b5ee2:	f000 fa4f 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5ee6:	f000 fb87 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5eea:	9002      	str	r0, [sp, #8]
   b5eec:	f000 fa4a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5ef0:	f000 fd3c 	bl	b696c <_ZNK17currentStatusData13get_openHoursEv>
   b5ef4:	9a02      	ldr	r2, [sp, #8]
   b5ef6:	4984      	ldr	r1, [pc, #528]	; (b6108 <loop+0x560>)
   b5ef8:	4603      	mov	r3, r0
   b5efa:	4882      	ldr	r0, [pc, #520]	; (b6104 <loop+0x55c>)
   b5efc:	f7fe f91f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {	// We don't report Join alerts or after hours
   b5f00:	f000 fa40 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5f04:	f000 fb78 	bl	b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5f08:	2801      	cmp	r0, #1
   b5f0a:	d006      	beq.n	b5f1a <loop+0x372>
   b5f0c:	f000 fa3a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5f10:	f000 fd2c 	bl	b696c <_ZNK17currentStatusData13get_openHoursEv>
   b5f14:	b108      	cbz	r0, b5f1a <loop+0x372>
					state = REPORTING_STATE; 									// Received and acknowledged data from a node - need to report the alert
   b5f16:	2307      	movs	r3, #7
   b5f18:	702b      	strb	r3, [r5, #0]
   b5f1a:	f006 fc83 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 150000L) { 													// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5f1e:	683b      	ldr	r3, [r7, #0]
   b5f20:	1ac0      	subs	r0, r0, r3
   b5f22:	4b7a      	ldr	r3, [pc, #488]	; (b610c <loop+0x564>)
   b5f24:	4298      	cmp	r0, r3
   b5f26:	f67f ae65 	bls.w	b5bf4 <loop+0x4c>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b5f2a:	f7fe f921 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f2e:	f7fe fb17 	bl	b4560 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5f32:	f7fe f91d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f36:	f7fe f93f 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b5f3a:	f7fe f919 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f3e:	2100      	movs	r1, #0
   b5f40:	f7fe fc34 	bl	b47ac <_ZN14LoRA_Functions13printNodeDataEb>
				nodeID.flush(true);
   b5f44:	f000 faa6 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b5f48:	6803      	ldr	r3, [r0, #0]
   b5f4a:	2101      	movs	r1, #1
   b5f4c:	68db      	ldr	r3, [r3, #12]
   b5f4e:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5f50:	f009 ff12 	bl	bfd78 <_ZN9TimeClass4hourEv>
   b5f54:	4604      	mov	r4, r0
   b5f56:	f000 f9dd 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5f5a:	f000 fc6a 	bl	b6832 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5f5e:	f009 fdd1 	bl	bfb04 <_ZN9TimeClass4hourEx>
   b5f62:	4284      	cmp	r4, r0
   b5f64:	d004      	beq.n	b5f70 <loop+0x3c8>
   b5f66:	f000 fa0d 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5f6a:	f000 fcff 	bl	b696c <_ZNK17currentStatusData13get_openHoursEv>
   b5f6e:	b938      	cbnz	r0, b5f80 <loop+0x3d8>
				else state = IDLE_STATE;
   b5f70:	2302      	movs	r3, #2
   b5f72:	e63e      	b.n	b5bf2 <loop+0x4a>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5f74:	2600      	movs	r6, #0
   b5f76:	e780      	b.n	b5e7a <loop+0x2d2>
				else current.set_openHours(false);
   b5f78:	f000 fa04 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5f7c:	4631      	mov	r1, r6
   b5f7e:	e784      	b.n	b5e8a <loop+0x2e2>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5f80:	2305      	movs	r3, #5
   b5f82:	e636      	b.n	b5bf2 <loop+0x4a>
			if (state != oldState) publishStateTransition();
   b5f84:	4b58      	ldr	r3, [pc, #352]	; (b60e8 <loop+0x540>)
   b5f86:	781b      	ldrb	r3, [r3, #0]
   b5f88:	2b07      	cmp	r3, #7
   b5f8a:	d001      	beq.n	b5f90 <loop+0x3e8>
   b5f8c:	f7ff fa9c 	bl	b54c8 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b5f90:	f000 f9f8 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5f94:	f000 fb0d 	bl	b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b5f98:	f7ff fae6 	bl	b5568 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b5f9c:	f000 f9f2 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5fa0:	2100      	movs	r1, #0
   b5fa2:	f000 fbab 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b5fa6:	f000 f9b5 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5faa:	4604      	mov	r4, r0
   b5fac:	f000 f9b2 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5fb0:	f000 faeb 	bl	b658a <_ZNK13sysStatusData16get_messageCountEv>
   b5fb4:	3001      	adds	r0, #1
   b5fb6:	b2c1      	uxtb	r1, r0
   b5fb8:	4620      	mov	r0, r4
   b5fba:	f000 fb5d 	bl	b6678 <_ZN13sysStatusData16set_messageCountEh>
			state = LoRA_STATE;
   b5fbe:	e60f      	b.n	b5be0 <loop+0x38>
			if (state != oldState) {
   b5fc0:	4b49      	ldr	r3, [pc, #292]	; (b60e8 <loop+0x540>)
   b5fc2:	4c53      	ldr	r4, [pc, #332]	; (b6110 <loop+0x568>)
   b5fc4:	781b      	ldrb	r3, [r3, #0]
   b5fc6:	2b05      	cmp	r3, #5
   b5fc8:	d027      	beq.n	b601a <loop+0x472>
				publishStateTransition();  
   b5fca:	f7ff fa7d 	bl	b54c8 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b5fce:	f000 f9a1 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b5fd2:	f000 fc2e 	bl	b6832 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5fd6:	f009 fd9d 	bl	bfb14 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b5fda:	4948      	ldr	r1, [pc, #288]	; (b60fc <loop+0x554>)
   b5fdc:	4606      	mov	r6, r0
   b5fde:	a808      	add	r0, sp, #32
   b5fe0:	f003 fbf1 	bl	b97c6 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b5fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b5fe8:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b5fec:	d007      	beq.n	b5ffe <loop+0x456>
					current.resetEverything();
   b5fee:	f000 f9c9 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b5ff2:	f000 fc61 	bl	b68b8 <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b5ff6:	4947      	ldr	r1, [pc, #284]	; (b6114 <loop+0x56c>)
   b5ff8:	4842      	ldr	r0, [pc, #264]	; (b6104 <loop+0x55c>)
   b5ffa:	f7fe f8a0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b5ffe:	f000 f989 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6002:	f000 fab3 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b6006:	f7ff faaf 	bl	b5568 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b600a:	f006 fef7 	bl	bcdfc <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b600e:	b908      	cbnz	r0, b6014 <loop+0x46c>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b6010:	f006 feec 	bl	bcdec <spark_cloud_flag_connect>
   b6014:	f006 fc06 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b6018:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b601a:	f006 feef 	bl	bcdfc <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b601e:	b338      	cbz	r0, b6070 <loop+0x4c8>
				sysStatus.set_lastConnection(Time.now());
   b6020:	f000 f978 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6024:	4606      	mov	r6, r0
   b6026:	f009 fe96 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b602a:	4602      	mov	r2, r0
   b602c:	17c3      	asrs	r3, r0, #31
   b602e:	4630      	mov	r0, r6
   b6030:	f000 fc2d 	bl	b688e <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b6034:	f000 f96e 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6038:	4606      	mov	r6, r0
   b603a:	f006 fbf3 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   b603e:	6821      	ldr	r1, [r4, #0]
   b6040:	1a41      	subs	r1, r0, r1
   b6042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6046:	fbb1 f1f0 	udiv	r1, r1, r0
   b604a:	4630      	mov	r0, r6
   b604c:	b289      	uxth	r1, r1
   b604e:	f000 fbb5 	bl	b67bc <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b6052:	f006 fed3 	bl	bcdfc <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b6056:	b1c8      	cbz	r0, b608c <loop+0x4e4>
   b6058:	f006 fed0 	bl	bcdfc <spark_cloud_flag_connected>
        if (!connected()) {
   b605c:	b110      	cbz	r0, b6064 <loop+0x4bc>
        return spark_sync_time(NULL);
   b605e:	2000      	movs	r0, #0
   b6060:	f006 fee4 	bl	bce2c <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b6064:	f7ff fa0e 	bl	b5484 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b6068:	b950      	cbnz	r0, b6080 <loop+0x4d8>
            spark_process();
   b606a:	f006 feb7 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   b606e:	e7f9      	b.n	b6064 <loop+0x4bc>
   b6070:	f006 fbd8 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b6074:	6823      	ldr	r3, [r4, #0]
   b6076:	1ac0      	subs	r0, r0, r3
   b6078:	4b27      	ldr	r3, [pc, #156]	; (b6118 <loop+0x570>)
   b607a:	4298      	cmp	r0, r3
   b607c:	d8d0      	bhi.n	b6020 <loop+0x478>
   b607e:	e5b9      	b.n	b5bf4 <loop+0x4c>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b6080:	f7ff fa00 	bl	b5484 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b6084:	4925      	ldr	r1, [pc, #148]	; (b611c <loop+0x574>)
   b6086:	a808      	add	r0, sp, #32
   b6088:	f007 f852 	bl	bd130 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b608c:	f000 f942 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6090:	f000 fa71 	bl	b6576 <_ZNK13sysStatusData17get_stayConnectedEv>
   b6094:	2801      	cmp	r0, #1
   b6096:	f43f ada3 	beq.w	b5be0 <loop+0x38>
				else state = DISCONNECTING_STATE;	 									// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b609a:	2306      	movs	r3, #6
   b609c:	e5a9      	b.n	b5bf2 <loop+0x4a>
			if (state != oldState) {
   b609e:	4b12      	ldr	r3, [pc, #72]	; (b60e8 <loop+0x540>)
   b60a0:	4c1f      	ldr	r4, [pc, #124]	; (b6120 <loop+0x578>)
   b60a2:	781b      	ldrb	r3, [r3, #0]
   b60a4:	2b06      	cmp	r3, #6
   b60a6:	d004      	beq.n	b60b2 <loop+0x50a>
				publishStateTransition(); 
   b60a8:	f7ff fa0e 	bl	b54c8 <_Z22publishStateTransitionv>
   b60ac:	f006 fbba 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b60b0:	6020      	str	r0, [r4, #0]
   b60b2:	f006 fbb7 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b60b6:	6823      	ldr	r3, [r4, #0]
   b60b8:	1ac0      	subs	r0, r0, r3
   b60ba:	4b1a      	ldr	r3, [pc, #104]	; (b6124 <loop+0x57c>)
   b60bc:	4298      	cmp	r0, r3
   b60be:	f67f ad99 	bls.w	b5bf4 <loop+0x4c>
   b60c2:	f003 ffc1 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
   b60c6:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b60ca:	2b00      	cmp	r3, #0
   b60cc:	f43f ad92 	beq.w	b5bf4 <loop+0x4c>
				if (sysStatus.get_stayConnected() == 0) Particle_Functions::instance().disconnectFromParticle();
   b60d0:	f000 f920 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b60d4:	f000 fa4f 	bl	b6576 <_ZNK13sysStatusData17get_stayConnectedEv>
   b60d8:	2800      	cmp	r0, #0
   b60da:	f47f af49 	bne.w	b5f70 <loop+0x3c8>
   b60de:	f000 fdb3 	bl	b6c48 <_ZN18Particle_Functions8instanceEv>
   b60e2:	f001 f8db 	bl	b729c <_ZN18Particle_Functions22disconnectFromParticleEv>
   b60e6:	e743      	b.n	b5f70 <loop+0x3c8>
   b60e8:	2003e469 	.word	0x2003e469
   b60ec:	2003e334 	.word	0x2003e334
   b60f0:	2003e378 	.word	0x2003e378
   b60f4:	000c3b99 	.word	0x000c3b99
   b60f8:	000c3b94 	.word	0x000c3b94
   b60fc:	2003e3e0 	.word	0x2003e3e0
   b6100:	000c3c04 	.word	0x000c3c04
   b6104:	2003e658 	.word	0x2003e658
   b6108:	000c3c4d 	.word	0x000c3c4d
   b610c:	000249f0 	.word	0x000249f0
   b6110:	2003e338 	.word	0x2003e338
   b6114:	000c3c77 	.word	0x000c3c77
   b6118:	000927c0 	.word	0x000927c0
   b611c:	2003e614 	.word	0x2003e614
   b6120:	2003e33c 	.word	0x2003e33c
   b6124:	00015f90 	.word	0x00015f90
			static system_tick_t resetTimeout = millis();
   b6128:	4c1b      	ldr	r4, [pc, #108]	; (b6198 <loop+0x5f0>)
   b612a:	4e1c      	ldr	r6, [pc, #112]	; (b619c <loop+0x5f4>)
   b612c:	7823      	ldrb	r3, [r4, #0]
   b612e:	f3bf 8f5b 	dmb	ish
   b6132:	f013 0f01 	tst.w	r3, #1
   b6136:	d109      	bne.n	b614c <loop+0x5a4>
   b6138:	4620      	mov	r0, r4
   b613a:	f7fd ffbf 	bl	b40bc <__cxa_guard_acquire>
   b613e:	b128      	cbz	r0, b614c <loop+0x5a4>
   b6140:	f006 fb70 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   b6144:	6030      	str	r0, [r6, #0]
   b6146:	4620      	mov	r0, r4
   b6148:	f7fd ffbd 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b614c:	4b14      	ldr	r3, [pc, #80]	; (b61a0 <loop+0x5f8>)
   b614e:	782a      	ldrb	r2, [r5, #0]
   b6150:	781b      	ldrb	r3, [r3, #0]
   b6152:	429a      	cmp	r2, r3
   b6154:	d001      	beq.n	b615a <loop+0x5b2>
   b6156:	f7ff f9b7 	bl	b54c8 <_Z22publishStateTransitionv>
   b615a:	f006 fb63 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b615e:	6833      	ldr	r3, [r6, #0]
   b6160:	1ac0      	subs	r0, r0, r3
   b6162:	f247 5330 	movw	r3, #30000	; 0x7530
   b6166:	4298      	cmp	r0, r3
   b6168:	f67f ad44 	bls.w	b5bf4 <loop+0x4c>
				Log.info("Deep power down device");
   b616c:	490d      	ldr	r1, [pc, #52]	; (b61a4 <loop+0x5fc>)
   b616e:	480e      	ldr	r0, [pc, #56]	; (b61a8 <loop+0x600>)
   b6170:	f7fd ffe5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b6174:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6178:	f006 ff60 	bl	bd03c <delay>
				ab1805.deepPowerDown(); 
   b617c:	211e      	movs	r1, #30
   b617e:	480b      	ldr	r0, [pc, #44]	; (b61ac <loop+0x604>)
   b6180:	f001 fd2c 	bl	b7bdc <_ZN6AB180513deepPowerDownEi>
   b6184:	e536      	b.n	b5bf4 <loop+0x4c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b6186:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b618a:	e5d7      	b.n	b5d3c <loop+0x194>
                valid_ = false;
   b618c:	7526      	strb	r6, [r4, #20]
                return *this;
   b618e:	e5d5      	b.n	b5d3c <loop+0x194>
}
   b6190:	b011      	add	sp, #68	; 0x44
   b6192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6196:	bf00      	nop
   b6198:	2003e328 	.word	0x2003e328
   b619c:	2003e330 	.word	0x2003e330
   b61a0:	2003e469 	.word	0x2003e469
   b61a4:	000c3c96 	.word	0x000c3c96
   b61a8:	2003e658 	.word	0x2003e658
   b61ac:	2003e340 	.word	0x2003e340

000b61b0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b61b0:	b510      	push	{r4, lr}
   b61b2:	4b03      	ldr	r3, [pc, #12]	; (b61c0 <_ZN8MB85RC64D1Ev+0x10>)
   b61b4:	6003      	str	r3, [r0, #0]
   b61b6:	4604      	mov	r4, r0
   b61b8:	f003 fd04 	bl	b9bc4 <_ZN6MB85RCD1Ev>
   b61bc:	4620      	mov	r0, r4
   b61be:	bd10      	pop	{r4, pc}
   b61c0:	000c3d5c 	.word	0x000c3d5c

000b61c4 <_ZN8MB85RC64D0Ev>:
   b61c4:	b510      	push	{r4, lr}
   b61c6:	4604      	mov	r4, r0
   b61c8:	f7ff fff2 	bl	b61b0 <_ZN8MB85RC64D1Ev>
   b61cc:	4620      	mov	r0, r4
   b61ce:	2110      	movs	r1, #16
   b61d0:	f7fd ff65 	bl	b409e <_ZdlPvj>
   b61d4:	4620      	mov	r0, r4
   b61d6:	bd10      	pop	{r4, pc}

000b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b61d8:	b510      	push	{r4, lr}
            if (!handle_) {
   b61da:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b61dc:	4604      	mov	r4, r0
            if (!handle_) {
   b61de:	b90b      	cbnz	r3, b61e4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b61e0:	f006 fad0 	bl	bc784 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b61e4:	6820      	ldr	r0, [r4, #0]
        }
   b61e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b61ea:	f006 badb 	b.w	bc7a4 <os_mutex_recursive_lock>

000b61ee <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b61ee:	b538      	push	{r3, r4, r5, lr}
   b61f0:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b61f2:	3004      	adds	r0, #4
   b61f4:	f7ff fff0 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b61f8:	6a20      	ldr	r0, [r4, #32]
   b61fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b61fc:	6803      	ldr	r3, [r0, #0]
   b61fe:	68dd      	ldr	r5, [r3, #12]
   b6200:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b6204:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b6206:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b6208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b620c:	f006 bad2 	b.w	bc7b4 <os_mutex_recursive_unlock>

000b6210 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b6210:	b538      	push	{r3, r4, r5, lr}
   b6212:	4604      	mov	r4, r0
   b6214:	3004      	adds	r0, #4
   b6216:	f7ff ffdf 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b621a:	6a20      	ldr	r0, [r4, #32]
   b621c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b621e:	6803      	ldr	r3, [r0, #0]
   b6220:	689d      	ldr	r5, [r3, #8]
   b6222:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b6226:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b6228:	68a2      	ldr	r2, [r4, #8]
   b622a:	6823      	ldr	r3, [r4, #0]
   b622c:	88d1      	ldrh	r1, [r2, #6]
   b622e:	695b      	ldr	r3, [r3, #20]
   b6230:	4620      	mov	r0, r4
   b6232:	4798      	blx	r3
   b6234:	b918      	cbnz	r0, b623e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b6236:	6823      	ldr	r3, [r4, #0]
   b6238:	4620      	mov	r0, r4
   b623a:	699b      	ldr	r3, [r3, #24]
   b623c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b623e:	6860      	ldr	r0, [r4, #4]
   b6240:	f006 fab8 	bl	bc7b4 <os_mutex_recursive_unlock>
        }
   b6244:	2001      	movs	r0, #1
   b6246:	bd38      	pop	{r3, r4, r5, pc}

000b6248 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b6248:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b624a:	4b04      	ldr	r3, [pc, #16]	; (b625c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b624c:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b624e:	4604      	mov	r4, r0
            if (handle_) {
   b6250:	6840      	ldr	r0, [r0, #4]
   b6252:	b108      	cbz	r0, b6258 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b6254:	f006 fa9e 	bl	bc794 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b6258:	4620      	mov	r0, r4
   b625a:	bd10      	pop	{r4, pc}
   b625c:	000c4cf8 	.word	0x000c4cf8

000b6260 <_ZN13sysStatusDataD1Ev>:

sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {

};

sysStatusData::~sysStatusData() {
   b6260:	b510      	push	{r4, lr}
   b6262:	4b03      	ldr	r3, [pc, #12]	; (b6270 <_ZN13sysStatusDataD1Ev+0x10>)
   b6264:	6003      	str	r3, [r0, #0]
   b6266:	4604      	mov	r4, r0
   b6268:	f7ff ffee 	bl	b6248 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b626c:	4620      	mov	r0, r4
   b626e:	bd10      	pop	{r4, pc}
   b6270:	000c3da4 	.word	0x000c3da4

000b6274 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b6274:	b510      	push	{r4, lr}
   b6276:	4604      	mov	r4, r0
}
   b6278:	f7ff fff2 	bl	b6260 <_ZN13sysStatusDataD1Ev>
   b627c:	4620      	mov	r0, r4
   b627e:	2168      	movs	r1, #104	; 0x68
   b6280:	f7fd ff0d 	bl	b409e <_ZdlPvj>
   b6284:	4620      	mov	r0, r4
   b6286:	bd10      	pop	{r4, pc}

000b6288 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b6288:	b510      	push	{r4, lr}
   b628a:	4b03      	ldr	r3, [pc, #12]	; (b6298 <_ZN17currentStatusDataD1Ev+0x10>)
   b628c:	6003      	str	r3, [r0, #0]
   b628e:	4604      	mov	r4, r0
   b6290:	f7ff ffda 	bl	b6248 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6294:	4620      	mov	r0, r4
   b6296:	bd10      	pop	{r4, pc}
   b6298:	000c3dd0 	.word	0x000c3dd0

000b629c <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b629c:	b510      	push	{r4, lr}
   b629e:	4604      	mov	r4, r0
}
   b62a0:	f7ff fff2 	bl	b6288 <_ZN17currentStatusDataD1Ev>
   b62a4:	4620      	mov	r0, r4
   b62a6:	2170      	movs	r1, #112	; 0x70
   b62a8:	f7fd fef9 	bl	b409e <_ZdlPvj>
   b62ac:	4620      	mov	r0, r4
   b62ae:	bd10      	pop	{r4, pc}

000b62b0 <_ZN10nodeIDDataD1Ev>:

nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {

};

nodeIDData::~nodeIDData() {
   b62b0:	b510      	push	{r4, lr}
   b62b2:	4b03      	ldr	r3, [pc, #12]	; (b62c0 <_ZN10nodeIDDataD1Ev+0x10>)
   b62b4:	6003      	str	r3, [r0, #0]
   b62b6:	4604      	mov	r4, r0
   b62b8:	f7ff ffc6 	bl	b6248 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b62bc:	4620      	mov	r0, r4
   b62be:	bd10      	pop	{r4, pc}
   b62c0:	000c3d78 	.word	0x000c3d78

000b62c4 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b62c4:	b510      	push	{r4, lr}
   b62c6:	4604      	mov	r4, r0
}
   b62c8:	f7ff fff2 	bl	b62b0 <_ZN10nodeIDDataD1Ev>
   b62cc:	4620      	mov	r0, r4
   b62ce:	f44f 6187 	mov.w	r1, #1080	; 0x438
   b62d2:	f7fd fee4 	bl	b409e <_ZdlPvj>
   b62d6:	4620      	mov	r0, r4
   b62d8:	bd10      	pop	{r4, pc}
	...

000b62dc <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b62dc:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b62e0:	6081      	str	r1, [r0, #8]
   b62e2:	4909      	ldr	r1, [pc, #36]	; (b6308 <_ZN13sysStatusDataC1Ev+0x2c>)
   b62e4:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b62e8:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b62ec:	2101      	movs	r1, #1
   b62ee:	8281      	strh	r1, [r0, #20]
   b62f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b62f4:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b62f6:	4905      	ldr	r1, [pc, #20]	; (b630c <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b62f8:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b62fa:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b62fe:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6300:	6182      	str	r2, [r0, #24]
   b6302:	4a03      	ldr	r2, [pc, #12]	; (b6310 <_ZN13sysStatusDataC1Ev+0x34>)
   b6304:	6002      	str	r2, [r0, #0]
};
   b6306:	4770      	bx	lr
   b6308:	20a99e76 	.word	0x20a99e76
   b630c:	2003e478 	.word	0x2003e478
   b6310:	000c3da4 	.word	0x000c3da4

000b6314 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b6314:	b510      	push	{r4, lr}
    if (!_instance) {
   b6316:	4c06      	ldr	r4, [pc, #24]	; (b6330 <_ZN13sysStatusData8instanceEv+0x1c>)
   b6318:	6823      	ldr	r3, [r4, #0]
   b631a:	b93b      	cbnz	r3, b632c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b631c:	2068      	movs	r0, #104	; 0x68
   b631e:	f7fd feba 	bl	b4096 <_Znwj>
   b6322:	4603      	mov	r3, r0
   b6324:	b108      	cbz	r0, b632a <_ZN13sysStatusData8instanceEv+0x16>
   b6326:	f7ff ffd9 	bl	b62dc <_ZN13sysStatusDataC1Ev>
   b632a:	6023      	str	r3, [r4, #0]
}
   b632c:	6820      	ldr	r0, [r4, #0]
   b632e:	bd10      	pop	{r4, pc}
   b6330:	2003e470 	.word	0x2003e470

000b6334 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b6334:	b510      	push	{r4, lr}
    sysStatus.flush(true);
   b6336:	f7ff ffed 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b633a:	6803      	ldr	r3, [r0, #0]
}
   b633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(true);
   b6340:	68db      	ldr	r3, [r3, #12]
   b6342:	2101      	movs	r1, #1
   b6344:	4718      	bx	r3
	...

000b6348 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b6348:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b634a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b634e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6350:	6182      	str	r2, [r0, #24]
   b6352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6356:	6081      	str	r1, [r0, #8]
   b6358:	61c2      	str	r2, [r0, #28]
   b635a:	4907      	ldr	r1, [pc, #28]	; (b6378 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b635c:	4a07      	ldr	r2, [pc, #28]	; (b637c <_ZN17currentStatusDataC1Ev+0x34>)
   b635e:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6360:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6364:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6366:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b636a:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b636c:	2101      	movs	r1, #1
   b636e:	4a04      	ldr	r2, [pc, #16]	; (b6380 <_ZN17currentStatusDataC1Ev+0x38>)
   b6370:	8281      	strh	r1, [r0, #20]
   b6372:	6002      	str	r2, [r0, #0]
};
   b6374:	4770      	bx	lr
   b6376:	bf00      	nop
   b6378:	20a99e74 	.word	0x20a99e74
   b637c:	2003e478 	.word	0x2003e478
   b6380:	000c3dd0 	.word	0x000c3dd0

000b6384 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b6384:	b510      	push	{r4, lr}
    if (!_instance) {
   b6386:	4c06      	ldr	r4, [pc, #24]	; (b63a0 <_ZN17currentStatusData8instanceEv+0x1c>)
   b6388:	6823      	ldr	r3, [r4, #0]
   b638a:	b93b      	cbnz	r3, b639c <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b638c:	2070      	movs	r0, #112	; 0x70
   b638e:	f7fd fe82 	bl	b4096 <_Znwj>
   b6392:	4603      	mov	r3, r0
   b6394:	b108      	cbz	r0, b639a <_ZN17currentStatusData8instanceEv+0x16>
   b6396:	f7ff ffd7 	bl	b6348 <_ZN17currentStatusDataC1Ev>
   b639a:	6023      	str	r3, [r4, #0]
}
   b639c:	6820      	ldr	r0, [r4, #0]
   b639e:	bd10      	pop	{r4, pc}
   b63a0:	2003e474 	.word	0x2003e474

000b63a4 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b63a4:	b510      	push	{r4, lr}
    fram.begin();
   b63a6:	6a00      	ldr	r0, [r0, #32]
   b63a8:	f003 fc22 	bl	b9bf0 <_ZN6MB85RC5beginEv>
    current.load();
   b63ac:	f7ff ffea 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b63b0:	6803      	ldr	r3, [r0, #0]
}
   b63b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b63b6:	685b      	ldr	r3, [r3, #4]
   b63b8:	4718      	bx	r3

000b63ba <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b63ba:	b510      	push	{r4, lr}
    current.flush(false);
   b63bc:	f7ff ffe2 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b63c0:	6803      	ldr	r3, [r0, #0]
}
   b63c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b63c6:	68db      	ldr	r3, [r3, #12]
   b63c8:	2100      	movs	r1, #0
   b63ca:	4718      	bx	r3
   b63cc:	0000      	movs	r0, r0
	...

000b63d0 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b63d0:	b510      	push	{r4, lr}
   b63d2:	4604      	mov	r4, r0
   b63d4:	ed2d 8b02 	vpush	{d8}
   b63d8:	3004      	adds	r0, #4
   b63da:	f7ff fefd 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b63de:	68e3      	ldr	r3, [r4, #12]
   b63e0:	3b08      	subs	r3, #8
   b63e2:	2b17      	cmp	r3, #23
   b63e4:	d90c      	bls.n	b6400 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b63e6:	68a3      	ldr	r3, [r4, #8]
   b63e8:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b63ec:	6860      	ldr	r0, [r4, #4]
   b63ee:	f006 f9e1 	bl	bc7b4 <os_mutex_recursive_unlock>
}
   b63f2:	eeb0 0a48 	vmov.f32	s0, s16
   b63f6:	eef0 0a68 	vmov.f32	s1, s17
   b63fa:	ecbd 8b02 	vpop	{d8}
   b63fe:	bd10      	pop	{r4, pc}
            T result = 0;
   b6400:	ed9f 8b01 	vldr	d8, [pc, #4]	; b6408 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b6404:	e7f2      	b.n	b63ec <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b6406:	bf00      	nop
	...

000b6410 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b6410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6412:	4604      	mov	r4, r0
   b6414:	3004      	adds	r0, #4
   b6416:	ec57 6b10 	vmov	r6, r7, d0
   b641a:	f7ff fedd 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b641e:	68e3      	ldr	r3, [r4, #12]
   b6420:	3b08      	subs	r3, #8
   b6422:	2b17      	cmp	r3, #23
   b6424:	d912      	bls.n	b644c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6426:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b6428:	4630      	mov	r0, r6
   b642a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b642e:	4639      	mov	r1, r7
   b6430:	f00a fbde 	bl	c0bf0 <__aeabi_dcmpeq>
   b6434:	b950      	cbnz	r0, b644c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b6436:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b643a:	4620      	mov	r0, r4
   b643c:	68a5      	ldr	r5, [r4, #8]
   b643e:	f006 f8b1 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6442:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6444:	6823      	ldr	r3, [r4, #0]
   b6446:	4620      	mov	r0, r4
   b6448:	691b      	ldr	r3, [r3, #16]
   b644a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b644c:	6860      	ldr	r0, [r4, #4]
}
   b644e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b6452:	f006 b9af 	b.w	bc7b4 <os_mutex_recursive_unlock>
	...

000b6458 <_ZN10nodeIDDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b6458:	2200      	movs	r2, #0
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 150, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b645a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b645e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6460:	6182      	str	r2, [r0, #24]
   b6462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6466:	6081      	str	r1, [r0, #8]
   b6468:	61c2      	str	r2, [r0, #28]
   b646a:	4907      	ldr	r1, [pc, #28]	; (b6488 <_ZN10nodeIDDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b646c:	4a07      	ldr	r2, [pc, #28]	; (b648c <_ZN10nodeIDDataC1Ev+0x34>)
   b646e:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6470:	f44f 6c82 	mov.w	ip, #1040	; 0x410
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6474:	2296      	movs	r2, #150	; 0x96
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6476:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b647a:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b647c:	2102      	movs	r1, #2
   b647e:	4a04      	ldr	r2, [pc, #16]	; (b6490 <_ZN10nodeIDDataC1Ev+0x38>)
   b6480:	8281      	strh	r1, [r0, #20]
   b6482:	6002      	str	r2, [r0, #0]
};
   b6484:	4770      	bx	lr
   b6486:	bf00      	nop
   b6488:	20a99e60 	.word	0x20a99e60
   b648c:	2003e478 	.word	0x2003e478
   b6490:	000c3d78 	.word	0x000c3d78

000b6494 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b6494:	b510      	push	{r4, lr}
    if (!_instance) {
   b6496:	4c07      	ldr	r4, [pc, #28]	; (b64b4 <_ZN10nodeIDData8instanceEv+0x20>)
   b6498:	6823      	ldr	r3, [r4, #0]
   b649a:	b943      	cbnz	r3, b64ae <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b649c:	f44f 6087 	mov.w	r0, #1080	; 0x438
   b64a0:	f7fd fdf9 	bl	b4096 <_Znwj>
   b64a4:	4603      	mov	r3, r0
   b64a6:	b108      	cbz	r0, b64ac <_ZN10nodeIDData8instanceEv+0x18>
   b64a8:	f7ff ffd6 	bl	b6458 <_ZN10nodeIDDataC1Ev>
   b64ac:	6023      	str	r3, [r4, #0]
}
   b64ae:	6820      	ldr	r0, [r4, #0]
   b64b0:	bd10      	pop	{r4, pc}
   b64b2:	bf00      	nop
   b64b4:	2003e46c 	.word	0x2003e46c

000b64b8 <_ZN10nodeIDData5setupEv>:

void nodeIDData::setup() {
   b64b8:	b510      	push	{r4, lr}
    fram.begin();
   b64ba:	6a00      	ldr	r0, [r0, #32]
   b64bc:	f003 fb98 	bl	b9bf0 <_ZN6MB85RC5beginEv>
    nodeID.load();
   b64c0:	f7ff ffe8 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b64c4:	6803      	ldr	r3, [r0, #0]
}
   b64c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.load();
   b64ca:	685b      	ldr	r3, [r3, #4]
   b64cc:	4718      	bx	r3

000b64ce <_ZN10nodeIDData4loopEv>:

void nodeIDData::loop() {
   b64ce:	b510      	push	{r4, lr}
    nodeID.flush(false);
   b64d0:	f7ff ffe0 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b64d4:	6803      	ldr	r3, [r0, #0]
}
   b64d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeID.flush(false);
   b64da:	68db      	ldr	r3, [r3, #12]
   b64dc:	2100      	movs	r1, #0
   b64de:	4718      	bx	r3

000b64e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeID.set_nodeIDJson(blank);

    Log.info("Resettig NodeID config to: %s", blank.c_str());
}

String nodeIDData::get_nodeIDJson() const {
   b64e0:	b538      	push	{r3, r4, r5, lr}
   b64e2:	4604      	mov	r4, r0
   b64e4:	460d      	mov	r5, r1
	String result;
   b64e6:	4906      	ldr	r1, [pc, #24]	; (b6500 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b64e8:	f009 f8cd 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b64ec:	4623      	mov	r3, r4
   b64ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b64f2:	2110      	movs	r1, #16
   b64f4:	4628      	mov	r0, r5
   b64f6:	f005 fffc 	bl	bc4f2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b64fa:	4620      	mov	r0, r4
   b64fc:	bd38      	pop	{r3, r4, r5, pc}
   b64fe:	bf00      	nop
   b6500:	000c4e80 	.word	0x000c4e80

000b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b6504:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b6506:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b650a:	2110      	movs	r1, #16
   b650c:	f006 b862 	b.w	bc5d4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b6510 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b6510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String blank = "{\"nodes\":[]}";
   b6512:	490a      	ldr	r1, [pc, #40]	; (b653c <_ZN10nodeIDData12resetNodeIDsEv+0x2c>)
   b6514:	4668      	mov	r0, sp
   b6516:	f009 f8b6 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
    nodeID.set_nodeIDJson(blank);
   b651a:	f7ff ffbb 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b651e:	9900      	ldr	r1, [sp, #0]
   b6520:	f7ff fff0 	bl	b6504 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b6524:	9a00      	ldr	r2, [sp, #0]
   b6526:	4906      	ldr	r1, [pc, #24]	; (b6540 <_ZN10nodeIDData12resetNodeIDsEv+0x30>)
   b6528:	4806      	ldr	r0, [pc, #24]	; (b6544 <_ZN10nodeIDData12resetNodeIDsEv+0x34>)
   b652a:	f7fd fe08 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    String blank = "{\"nodes\":[]}";
   b652e:	4668      	mov	r0, sp
   b6530:	f009 f85e 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b6534:	b005      	add	sp, #20
   b6536:	f85d fb04 	ldr.w	pc, [sp], #4
   b653a:	bf00      	nop
   b653c:	000c3cc9 	.word	0x000c3cc9
   b6540:	000c3cd6 	.word	0x000c3cd6
   b6544:	2003e658 	.word	0x2003e658

000b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6548:	b538      	push	{r3, r4, r5, lr}
   b654a:	4604      	mov	r4, r0
   b654c:	3004      	adds	r0, #4
   b654e:	460d      	mov	r5, r1
   b6550:	f7ff fe42 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6554:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6556:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6558:	3b01      	subs	r3, #1
   b655a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b655c:	bf26      	itte	cs
   b655e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6560:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6562:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6564:	f006 f926 	bl	bc7b4 <os_mutex_recursive_unlock>
        }
   b6568:	4628      	mov	r0, r5
   b656a:	bd38      	pop	{r3, r4, r5, pc}

000b656c <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b656c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b656e:	2110      	movs	r1, #16
   b6570:	f7ff ffea 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6574:	bd08      	pop	{r3, pc}

000b6576 <_ZNK13sysStatusData17get_stayConnectedEv>:
uint8_t sysStatusData::get_stayConnected() const {
   b6576:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, stayConnected));
   b6578:	2114      	movs	r1, #20
   b657a:	f7ff ffe5 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b657e:	bd08      	pop	{r3, pc}

000b6580 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b6580:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b6582:	2115      	movs	r1, #21
   b6584:	f7ff ffe0 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6588:	bd08      	pop	{r3, pc}

000b658a <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b658a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b658c:	2116      	movs	r1, #22
   b658e:	f7ff ffdb 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6592:	bd08      	pop	{r3, pc}

000b6594 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b6594:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b6596:	2138      	movs	r1, #56	; 0x38
   b6598:	f7ff ffd6 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b659c:	bd08      	pop	{r3, pc}

000b659e <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b659e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b65a0:	2139      	movs	r1, #57	; 0x39
   b65a2:	f7ff ffd1 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65a6:	bd08      	pop	{r3, pc}

000b65a8 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b65a8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b65aa:	213b      	movs	r1, #59	; 0x3b
   b65ac:	f7ff ffcc 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65b0:	bd08      	pop	{r3, pc}

000b65b2 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b65b2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b65b4:	2110      	movs	r1, #16
   b65b6:	f7ff ffc7 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65ba:	bd08      	pop	{r3, pc}

000b65bc <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b65bc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b65be:	2111      	movs	r1, #17
   b65c0:	f7ff ffc2 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65c4:	bd08      	pop	{r3, pc}

000b65c6 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b65c6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b65c8:	2112      	movs	r1, #18
   b65ca:	f7ff ffbd 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65ce:	bd08      	pop	{r3, pc}

000b65d0 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b65d0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b65d2:	2120      	movs	r1, #32
   b65d4:	f7ff ffb8 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65d8:	bd08      	pop	{r3, pc}

000b65da <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b65da:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b65dc:	2121      	movs	r1, #33	; 0x21
   b65de:	f7ff ffb3 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65e2:	bd08      	pop	{r3, pc}

000b65e4 <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b65e4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b65e6:	2124      	movs	r1, #36	; 0x24
   b65e8:	f7ff ffae 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65ec:	bd08      	pop	{r3, pc}

000b65ee <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b65ee:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b65f0:	2125      	movs	r1, #37	; 0x25
   b65f2:	f7ff ffa9 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b65f6:	bd08      	pop	{r3, pc}

000b65f8 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b65f8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b65fa:	2134      	movs	r1, #52	; 0x34
   b65fc:	f7ff ffa4 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6600:	bd08      	pop	{r3, pc}

000b6602 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b6602:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b6604:	2141      	movs	r1, #65	; 0x41
   b6606:	f7ff ff9f 	bl	b6548 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b660a:	bd08      	pop	{r3, pc}

000b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b660c:	b570      	push	{r4, r5, r6, lr}
   b660e:	4604      	mov	r4, r0
   b6610:	3004      	adds	r0, #4
   b6612:	460d      	mov	r5, r1
   b6614:	4616      	mov	r6, r2
   b6616:	f7ff fddf 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b661a:	68e3      	ldr	r3, [r4, #12]
   b661c:	3b01      	subs	r3, #1
   b661e:	42ab      	cmp	r3, r5
   b6620:	d30d      	bcc.n	b663e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6622:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6624:	5d5a      	ldrb	r2, [r3, r5]
   b6626:	42b2      	cmp	r2, r6
   b6628:	d009      	beq.n	b663e <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b662a:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b662c:	4620      	mov	r0, r4
   b662e:	68a5      	ldr	r5, [r4, #8]
   b6630:	f005 ffb8 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6634:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6636:	6823      	ldr	r3, [r4, #0]
   b6638:	4620      	mov	r0, r4
   b663a:	691b      	ldr	r3, [r3, #16]
   b663c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b663e:	6860      	ldr	r0, [r4, #4]
        }
   b6640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6644:	f006 b8b6 	b.w	bc7b4 <os_mutex_recursive_unlock>

000b6648 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6648:	b508      	push	{r3, lr}
   b664a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b664c:	2110      	movs	r1, #16
   b664e:	f7ff ffdd 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6652:	bd08      	pop	{r3, pc}

000b6654 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b6654:	b508      	push	{r3, lr}
   b6656:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6658:	2111      	movs	r1, #17
   b665a:	f7ff ffd7 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b665e:	bd08      	pop	{r3, pc}

000b6660 <_ZN13sysStatusData17set_stayConnectedEh>:
void sysStatusData::set_stayConnected(uint8_t value) {
   b6660:	b508      	push	{r3, lr}
   b6662:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, stayConnected), value);
   b6664:	2114      	movs	r1, #20
   b6666:	f7ff ffd1 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b666a:	bd08      	pop	{r3, pc}

000b666c <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b666c:	b508      	push	{r3, lr}
   b666e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b6670:	2115      	movs	r1, #21
   b6672:	f7ff ffcb 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6676:	bd08      	pop	{r3, pc}

000b6678 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6678:	b508      	push	{r3, lr}
   b667a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b667c:	2116      	movs	r1, #22
   b667e:	f7ff ffc5 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6682:	bd08      	pop	{r3, pc}

000b6684 <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b6684:	b508      	push	{r3, lr}
   b6686:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b6688:	212e      	movs	r1, #46	; 0x2e
   b668a:	f7ff ffbf 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b668e:	bd08      	pop	{r3, pc}

000b6690 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b6690:	b508      	push	{r3, lr}
   b6692:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b6694:	2138      	movs	r1, #56	; 0x38
   b6696:	f7ff ffb9 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b669a:	bd08      	pop	{r3, pc}

000b669c <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b669c:	b508      	push	{r3, lr}
   b669e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b66a0:	2139      	movs	r1, #57	; 0x39
   b66a2:	f7ff ffb3 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66a6:	bd08      	pop	{r3, pc}

000b66a8 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b66a8:	b508      	push	{r3, lr}
   b66aa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b66ac:	2110      	movs	r1, #16
   b66ae:	f7ff ffad 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66b2:	bd08      	pop	{r3, pc}

000b66b4 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b66b4:	b508      	push	{r3, lr}
   b66b6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b66b8:	2111      	movs	r1, #17
   b66ba:	f7ff ffa7 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66be:	bd08      	pop	{r3, pc}

000b66c0 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b66c0:	b508      	push	{r3, lr}
   b66c2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b66c4:	2112      	movs	r1, #18
   b66c6:	f7ff ffa1 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66ca:	bd08      	pop	{r3, pc}

000b66cc <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b66cc:	b508      	push	{r3, lr}
   b66ce:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b66d0:	2120      	movs	r1, #32
   b66d2:	f7ff ff9b 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66d6:	bd08      	pop	{r3, pc}

000b66d8 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b66d8:	b508      	push	{r3, lr}
   b66da:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b66dc:	2121      	movs	r1, #33	; 0x21
   b66de:	f7ff ff95 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66e2:	bd08      	pop	{r3, pc}

000b66e4 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b66e4:	b508      	push	{r3, lr}
   b66e6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b66e8:	2124      	movs	r1, #36	; 0x24
   b66ea:	f7ff ff8f 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66ee:	bd08      	pop	{r3, pc}

000b66f0 <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b66f0:	b508      	push	{r3, lr}
   b66f2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b66f4:	2125      	movs	r1, #37	; 0x25
   b66f6:	f7ff ff89 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b66fa:	bd08      	pop	{r3, pc}

000b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b66fc:	b508      	push	{r3, lr}
   b66fe:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b6700:	2134      	movs	r1, #52	; 0x34
   b6702:	f7ff ff83 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6706:	bd08      	pop	{r3, pc}

000b6708 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b6708:	b508      	push	{r3, lr}
   b670a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b670c:	2141      	movs	r1, #65	; 0x41
   b670e:	f7ff ff7d 	bl	b660c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6712:	bd08      	pop	{r3, pc}

000b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b6714:	b538      	push	{r3, r4, r5, lr}
   b6716:	4604      	mov	r4, r0
   b6718:	3004      	adds	r0, #4
   b671a:	460d      	mov	r5, r1
   b671c:	f7ff fd5c 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6720:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6722:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6724:	3b02      	subs	r3, #2
   b6726:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6728:	bf26      	itte	cs
   b672a:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b672c:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b672e:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6730:	f006 f840 	bl	bc7b4 <os_mutex_recursive_unlock>
        }
   b6734:	4628      	mov	r0, r5
   b6736:	bd38      	pop	{r3, r4, r5, pc}

000b6738 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b6738:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b673a:	2112      	movs	r1, #18
   b673c:	f7ff ffea 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6740:	bd08      	pop	{r3, pc}

000b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b6742:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b6744:	212a      	movs	r1, #42	; 0x2a
   b6746:	f7ff ffe5 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b674a:	bd08      	pop	{r3, pc}

000b674c <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b674c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b674e:	212c      	movs	r1, #44	; 0x2c
   b6750:	f7ff ffe0 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6754:	bd08      	pop	{r3, pc}

000b6756 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b6756:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b6758:	2122      	movs	r1, #34	; 0x22
   b675a:	f7ff ffdb 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b675e:	bd08      	pop	{r3, pc}

000b6760 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b6760:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b6762:	2130      	movs	r1, #48	; 0x30
   b6764:	f7ff ffd6 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6768:	bd08      	pop	{r3, pc}

000b676a <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b676a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b676c:	2132      	movs	r1, #50	; 0x32
   b676e:	f7ff ffd1 	bl	b6714 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6772:	bd08      	pop	{r3, pc}

000b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6774:	b570      	push	{r4, r5, r6, lr}
   b6776:	4604      	mov	r4, r0
   b6778:	3004      	adds	r0, #4
   b677a:	460d      	mov	r5, r1
   b677c:	4616      	mov	r6, r2
   b677e:	f7ff fd2b 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6782:	68e3      	ldr	r3, [r4, #12]
   b6784:	3b02      	subs	r3, #2
   b6786:	42ab      	cmp	r3, r5
   b6788:	d30d      	bcc.n	b67a6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b678a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b678c:	5b5a      	ldrh	r2, [r3, r5]
   b678e:	42b2      	cmp	r2, r6
   b6790:	d009      	beq.n	b67a6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b6792:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6794:	4620      	mov	r0, r4
   b6796:	68a5      	ldr	r5, [r4, #8]
   b6798:	f005 ff04 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b679c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b679e:	6823      	ldr	r3, [r4, #0]
   b67a0:	4620      	mov	r0, r4
   b67a2:	691b      	ldr	r3, [r3, #16]
   b67a4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b67a6:	6860      	ldr	r0, [r4, #4]
        }
   b67a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b67ac:	f006 b802 	b.w	bc7b4 <os_mutex_recursive_unlock>

000b67b0 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b67b0:	b508      	push	{r3, lr}
   b67b2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b67b4:	2112      	movs	r1, #18
   b67b6:	f7ff ffdd 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67ba:	bd08      	pop	{r3, pc}

000b67bc <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b67bc:	b508      	push	{r3, lr}
   b67be:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b67c0:	2128      	movs	r1, #40	; 0x28
   b67c2:	f7ff ffd7 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67c6:	bd08      	pop	{r3, pc}

000b67c8 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b67c8:	b508      	push	{r3, lr}
   b67ca:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b67cc:	212a      	movs	r1, #42	; 0x2a
   b67ce:	f7ff ffd1 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67d2:	bd08      	pop	{r3, pc}

000b67d4 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b67d4:	b508      	push	{r3, lr}
   b67d6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b67d8:	212c      	movs	r1, #44	; 0x2c
   b67da:	f7ff ffcb 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67de:	bd08      	pop	{r3, pc}

000b67e0 <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b67e0:	b508      	push	{r3, lr}
   b67e2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b67e4:	2122      	movs	r1, #34	; 0x22
   b67e6:	f7ff ffc5 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67ea:	bd08      	pop	{r3, pc}

000b67ec <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b67ec:	b508      	push	{r3, lr}
   b67ee:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b67f0:	2130      	movs	r1, #48	; 0x30
   b67f2:	f7ff ffbf 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b67f6:	bd08      	pop	{r3, pc}

000b67f8 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b67f8:	b508      	push	{r3, lr}
   b67fa:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b67fc:	2132      	movs	r1, #50	; 0x32
   b67fe:	f7ff ffb9 	bl	b6774 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6802:	bd08      	pop	{r3, pc}

000b6804 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6806:	4604      	mov	r4, r0
   b6808:	3004      	adds	r0, #4
   b680a:	460d      	mov	r5, r1
   b680c:	f7ff fce4 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6810:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6812:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6814:	3b08      	subs	r3, #8
   b6816:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6818:	bf23      	ittte	cs
   b681a:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b681c:	1949      	addcs	r1, r1, r5
   b681e:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6822:	2600      	movcc	r6, #0
   b6824:	bf38      	it	cc
   b6826:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6828:	f005 ffc4 	bl	bc7b4 <os_mutex_recursive_unlock>
        }
   b682c:	4630      	mov	r0, r6
   b682e:	4639      	mov	r1, r7
   b6830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6832 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6832:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6834:	2120      	movs	r1, #32
   b6836:	f7ff ffe5 	bl	b6804 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b683a:	bd08      	pop	{r3, pc}

000b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b683e:	4604      	mov	r4, r0
   b6840:	3004      	adds	r0, #4
   b6842:	460d      	mov	r5, r1
   b6844:	461e      	mov	r6, r3
   b6846:	4617      	mov	r7, r2
   b6848:	f7ff fcc6 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b684c:	68e3      	ldr	r3, [r4, #12]
   b684e:	3b08      	subs	r3, #8
   b6850:	42ab      	cmp	r3, r5
   b6852:	d312      	bcc.n	b687a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6854:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6856:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6858:	5958      	ldr	r0, [r3, r5]
   b685a:	6851      	ldr	r1, [r2, #4]
   b685c:	42b1      	cmp	r1, r6
   b685e:	bf08      	it	eq
   b6860:	42b8      	cmpeq	r0, r7
   b6862:	d00a      	beq.n	b687a <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b6864:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6866:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6868:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b686a:	68a5      	ldr	r5, [r4, #8]
   b686c:	f005 fe9a 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6870:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b6872:	6823      	ldr	r3, [r4, #0]
   b6874:	4620      	mov	r0, r4
   b6876:	691b      	ldr	r3, [r3, #16]
   b6878:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b687a:	6860      	ldr	r0, [r4, #4]
        }
   b687c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6880:	f005 bf98 	b.w	bc7b4 <os_mutex_recursive_unlock>

000b6884 <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b6884:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b6886:	2118      	movs	r1, #24
   b6888:	f7ff ffd8 	bl	b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b688c:	bd08      	pop	{r3, pc}

000b688e <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b688e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6890:	2120      	movs	r1, #32
   b6892:	f7ff ffd3 	bl	b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6896:	bd08      	pop	{r3, pc}

000b6898 <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6898:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b689a:	2130      	movs	r1, #48	; 0x30
   b689c:	f7ff ffce 	bl	b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b68a0:	bd08      	pop	{r3, pc}

000b68a2 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b68a2:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b68a4:	2128      	movs	r1, #40	; 0x28
   b68a6:	f7ff ffc9 	bl	b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b68aa:	bd08      	pop	{r3, pc}

000b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b68ac:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b68ae:	2138      	movs	r1, #56	; 0x38
   b68b0:	f7ff ffc4 	bl	b683c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b68b4:	bd08      	pop	{r3, pc}
	...

000b68b8 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b68b8:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b68ba:	4921      	ldr	r1, [pc, #132]	; (b6940 <_ZN17currentStatusData15resetEverythingEv+0x88>)
   b68bc:	4821      	ldr	r0, [pc, #132]	; (b6944 <_ZN17currentStatusData15resetEverythingEv+0x8c>)
   b68be:	f7fd fc3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b68c2:	f7ff fd5f 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68c6:	210b      	movs	r1, #11
   b68c8:	f7ff feee 	bl	b66a8 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b68cc:	f7ff fd5a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68d0:	2100      	movs	r1, #0
   b68d2:	f7ff feef 	bl	b66b4 <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_alertCodeNode(0);
   b68d6:	f7ff fd55 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68da:	2100      	movs	r1, #0
   b68dc:	f7ff ff0e 	bl	b66fc <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b68e0:	f7ff fd50 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68e4:	2200      	movs	r2, #0
   b68e6:	2300      	movs	r3, #0
   b68e8:	f7ff ffe0 	bl	b68ac <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b68ec:	f7ff fd4a 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68f0:	2100      	movs	r1, #0
   b68f2:	f7ff ff81 	bl	b67f8 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b68f6:	f7ff fd45 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b68fa:	2100      	movs	r1, #0
   b68fc:	f7ff ff76 	bl	b67ec <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b6900:	f7ff fd40 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b6904:	2100      	movs	r1, #0
   b6906:	f7ff feed 	bl	b66e4 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b690a:	f7ff fd3b 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b690e:	2100      	movs	r1, #0
   b6910:	f7ff feee 	bl	b66f0 <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b6914:	f7ff fd36 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b6918:	4604      	mov	r4, r0
   b691a:	f009 fa1c 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b691e:	4602      	mov	r2, r0
   b6920:	17c3      	asrs	r3, r0, #31
   b6922:	4620      	mov	r0, r4
   b6924:	f7ff ffbd 	bl	b68a2 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6928:	f7ff fcf4 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b692c:	2100      	movs	r1, #0
   b692e:	f7ff fe9d 	bl	b666c <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6932:	f7ff fcef 	bl	b6314 <_ZN13sysStatusData8instanceEv>
}
   b6936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b693a:	2100      	movs	r1, #0
   b693c:	f7ff be9c 	b.w	b6678 <_ZN13sysStatusData16set_messageCountEh>
   b6940:	000c3cf4 	.word	0x000c3cf4
   b6944:	2003e658 	.word	0x2003e658

000b6948 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6948:	b538      	push	{r3, r4, r5, lr}
   b694a:	4604      	mov	r4, r0
   b694c:	3004      	adds	r0, #4
   b694e:	460d      	mov	r5, r1
   b6950:	f7ff fc42 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6954:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6956:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6958:	3b01      	subs	r3, #1
   b695a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b695c:	bf26      	itte	cs
   b695e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6960:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6962:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6964:	f005 ff26 	bl	bc7b4 <os_mutex_recursive_unlock>
        }
   b6968:	4628      	mov	r0, r5
   b696a:	bd38      	pop	{r3, r4, r5, pc}

000b696c <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b696c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b696e:	2140      	movs	r1, #64	; 0x40
   b6970:	f7ff ffea 	bl	b6948 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6974:	bd08      	pop	{r3, pc}

000b6976 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6976:	b570      	push	{r4, r5, r6, lr}
   b6978:	4604      	mov	r4, r0
   b697a:	3004      	adds	r0, #4
   b697c:	460d      	mov	r5, r1
   b697e:	4616      	mov	r6, r2
   b6980:	f7ff fc2a 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6984:	68e3      	ldr	r3, [r4, #12]
   b6986:	3b01      	subs	r3, #1
   b6988:	42ab      	cmp	r3, r5
   b698a:	d30d      	bcc.n	b69a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b698c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b698e:	5d5a      	ldrb	r2, [r3, r5]
   b6990:	42b2      	cmp	r2, r6
   b6992:	d009      	beq.n	b69a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b6994:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b6996:	4620      	mov	r0, r4
   b6998:	68a5      	ldr	r5, [r4, #8]
   b699a:	f005 fe03 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b699e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b69a0:	6823      	ldr	r3, [r4, #0]
   b69a2:	4620      	mov	r0, r4
   b69a4:	691b      	ldr	r3, [r3, #16]
   b69a6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b69a8:	6860      	ldr	r0, [r4, #4]
        }
   b69aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b69ae:	f005 bf01 	b.w	bc7b4 <os_mutex_recursive_unlock>

000b69b2 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b69b2:	b508      	push	{r3, lr}
   b69b4:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b69b6:	213a      	movs	r1, #58	; 0x3a
   b69b8:	f7ff ffdd 	bl	b6976 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b69bc:	bd08      	pop	{r3, pc}
	...

000b69c0 <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b69c0:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b69c2:	4927      	ldr	r1, [pc, #156]	; (b6a60 <_ZN13sysStatusData18loadSystemDefaultsEv+0xa0>)
   b69c4:	4827      	ldr	r0, [pc, #156]	; (b6a64 <_ZN13sysStatusData18loadSystemDefaultsEv+0xa4>)
   b69c6:	f7fd fbba 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b69ca:	f7ff fca3 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b69ce:	2100      	movs	r1, #0
   b69d0:	f7ff fe3a 	bl	b6648 <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b69d4:	f7ff fc9e 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b69d8:	2101      	movs	r1, #1
   b69da:	f7ff fe3b 	bl	b6654 <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b69de:	f7ff fc99 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b69e2:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b69e6:	f7ff fee3 	bl	b67b0 <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_stayConnected(0);
   b69ea:	f7ff fc93 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b69ee:	2100      	movs	r1, #0
   b69f0:	f7ff fe36 	bl	b6660 <_ZN13sysStatusData17set_stayConnectedEh>
  sysStatus.set_resetCount(0);
   b69f4:	f7ff fc8e 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b69f8:	2100      	movs	r1, #0
   b69fa:	f7ff fe37 	bl	b666c <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b69fe:	f7ff fc89 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a02:	2100      	movs	r1, #0
   b6a04:	f7ff fe38 	bl	b6678 <_ZN13sysStatusData16set_messageCountEh>
  sysStatus.set_lastHookResponse(0);
   b6a08:	f7ff fc84 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a0c:	2200      	movs	r2, #0
   b6a0e:	2300      	movs	r3, #0
   b6a10:	f7ff ff38 	bl	b6884 <_ZN13sysStatusData20set_lastHookResponseEx>
  sysStatus.set_frequencyMinutes(10);
   b6a14:	f7ff fc7e 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a18:	210a      	movs	r1, #10
   b6a1a:	f7ff fed5 	bl	b67c8 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_updatedFrequencyMinutes(0);
   b6a1e:	f7ff fc79 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a22:	2100      	movs	r1, #0
   b6a24:	f7ff fed6 	bl	b67d4 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
  sysStatus.set_alertCodeGateway(0);
   b6a28:	f7ff fc74 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a2c:	2100      	movs	r1, #0
   b6a2e:	f7ff fe29 	bl	b6684 <_ZN13sysStatusData20set_alertCodeGatewayEh>
  sysStatus.set_alertTimestampGateway(0);
   b6a32:	f7ff fc6f 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a36:	2300      	movs	r3, #0
   b6a38:	2200      	movs	r2, #0
   b6a3a:	f7ff ff2d 	bl	b6898 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
  sysStatus.set_openTime(6);
   b6a3e:	f7ff fc69 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a42:	2106      	movs	r1, #6
   b6a44:	f7ff fe24 	bl	b6690 <_ZN13sysStatusData12set_openTimeEh>
  sysStatus.set_closeTime(22);
   b6a48:	f7ff fc64 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a4c:	2116      	movs	r1, #22
   b6a4e:	f7ff fe25 	bl	b669c <_ZN13sysStatusData13set_closeTimeEh>
  sysStatus.set_verizonSIM(false);
   b6a52:	f7ff fc5f 	bl	b6314 <_ZN13sysStatusData8instanceEv>
}
   b6a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_verizonSIM(false);
   b6a5a:	2100      	movs	r1, #0
   b6a5c:	f7ff bfa9 	b.w	b69b2 <_ZN13sysStatusData14set_verizonSIMEb>
   b6a60:	000c3d15 	.word	0x000c3d15
   b6a64:	2003e658 	.word	0x2003e658

000b6a68 <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b6a68:	b538      	push	{r3, r4, r5, lr}
   b6a6a:	4604      	mov	r4, r0
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6a6c:	f7ff fc52 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a70:	f7ff fd90 	bl	b6594 <_ZNK13sysStatusData12get_openTimeEv>
   b6a74:	280c      	cmp	r0, #12
   b6a76:	d91a      	bls.n	b6aae <_ZN13sysStatusData17checkSystemValuesEv+0x46>
        Log.info("Open / Close issue with %d - resetting", sysStatus.get_openTime());
   b6a78:	f7ff fc4c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a7c:	f7ff fd8a 	bl	b6594 <_ZNK13sysStatusData12get_openTimeEv>
   b6a80:	4913      	ldr	r1, [pc, #76]	; (b6ad0 <_ZN13sysStatusData17checkSystemValuesEv+0x68>)
   b6a82:	4602      	mov	r2, r0
   b6a84:	4813      	ldr	r0, [pc, #76]	; (b6ad4 <_ZN13sysStatusData17checkSystemValuesEv+0x6c>)
   b6a86:	f7fd fb5a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        reset = true;
   b6a8a:	2501      	movs	r5, #1
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b6a8c:	f7ff fc42 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a90:	f7ff fe57 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6a94:	b998      	cbnz	r0, b6abe <_ZN13sysStatusData17checkSystemValuesEv+0x56>
   b6a96:	2501      	movs	r5, #1
    if (sysStatus.get_nodeNumber() != 0) reset = true;
   b6a98:	f7ff fc3c 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6a9c:	f7ff fd66 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b6aa0:	b900      	cbnz	r0, b6aa4 <_ZN13sysStatusData17checkSystemValuesEv+0x3c>
    if (reset) sysStatusData::loadSystemDefaults();
   b6aa2:	b19d      	cbz	r5, b6acc <_ZN13sysStatusData17checkSystemValuesEv+0x64>
   b6aa4:	4620      	mov	r0, r4
}
   b6aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b6aaa:	f7ff bf89 	b.w	b69c0 <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6aae:	f7ff fc31 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6ab2:	f7ff fd74 	bl	b659e <_ZNK13sysStatusData13get_closeTimeEv>
   b6ab6:	280b      	cmp	r0, #11
   b6ab8:	d9de      	bls.n	b6a78 <_ZN13sysStatusData17checkSystemValuesEv+0x10>
    bool reset = false;
   b6aba:	2500      	movs	r5, #0
   b6abc:	e7e6      	b.n	b6a8c <_ZN13sysStatusData17checkSystemValuesEv+0x24>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b6abe:	f7ff fc29 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6ac2:	f7ff fe3e 	bl	b6742 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6ac6:	283c      	cmp	r0, #60	; 0x3c
   b6ac8:	d8e5      	bhi.n	b6a96 <_ZN13sysStatusData17checkSystemValuesEv+0x2e>
   b6aca:	e7e5      	b.n	b6a98 <_ZN13sysStatusData17checkSystemValuesEv+0x30>
}
   b6acc:	bd38      	pop	{r3, r4, r5, pc}
   b6ace:	bf00      	nop
   b6ad0:	000c3d2d 	.word	0x000c3d2d
   b6ad4:	2003e658 	.word	0x2003e658

000b6ad8 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b6ad8:	b508      	push	{r3, lr}
    fram.begin();
   b6ada:	6a00      	ldr	r0, [r0, #32]
   b6adc:	f003 f888 	bl	b9bf0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b6ae0:	f7ff fc18 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6ae4:	6803      	ldr	r3, [r0, #0]
   b6ae6:	685b      	ldr	r3, [r3, #4]
   b6ae8:	4798      	blx	r3
    sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b6aea:	f7ff fc13 	bl	b6314 <_ZN13sysStatusData8instanceEv>
}
   b6aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b6af2:	f7ff bfb9 	b.w	b6a68 <_ZN13sysStatusData17checkSystemValuesEv>

000b6af6 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6af6:	b508      	push	{r3, lr}
   b6af8:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6afa:	2140      	movs	r1, #64	; 0x40
   b6afc:	f7ff ff3b 	bl	b6976 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6b00:	bd08      	pop	{r3, pc}
	...

000b6b04 <_GLOBAL__sub_I_fram>:
}
   b6b04:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6b06:	f009 fbaf 	bl	c0268 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6b0a:	4c05      	ldr	r4, [pc, #20]	; (b6b20 <_GLOBAL__sub_I_fram+0x1c>)
   b6b0c:	4601      	mov	r1, r0
   b6b0e:	2300      	movs	r3, #0
   b6b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6b14:	4620      	mov	r0, r4
   b6b16:	f003 f861 	bl	b9bdc <_ZN6MB85RCC1ER7TwoWireji>
   b6b1a:	4b02      	ldr	r3, [pc, #8]	; (b6b24 <_GLOBAL__sub_I_fram+0x20>)
   b6b1c:	6023      	str	r3, [r4, #0]
}
   b6b1e:	bd10      	pop	{r4, pc}
   b6b20:	2003e478 	.word	0x2003e478
   b6b24:	000c3d5c 	.word	0x000c3d5c

000b6b28 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6b28:	4770      	bx	lr

000b6b2a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6b2a:	6a00      	ldr	r0, [r0, #32]
   b6b2c:	6803      	ldr	r3, [r0, #0]
   b6b2e:	68db      	ldr	r3, [r3, #12]
   b6b30:	4718      	bx	r3

000b6b32 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6b32:	4770      	bx	lr

000b6b34 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6b34:	b510      	push	{r4, lr}
}
   b6b36:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6b38:	4604      	mov	r4, r0
}
   b6b3a:	f7fd fab0 	bl	b409e <_ZdlPvj>
   b6b3e:	4620      	mov	r0, r4
   b6b40:	bd10      	pop	{r4, pc}
	...

000b6b44 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6b44:	b510      	push	{r4, lr}
   b6b46:	4b03      	ldr	r3, [pc, #12]	; (b6b54 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6b48:	6003      	str	r3, [r0, #0]
   b6b4a:	4604      	mov	r4, r0
   b6b4c:	f001 fd92 	bl	b8674 <_ZN10JsonParserD1Ev>
   b6b50:	4620      	mov	r0, r4
   b6b52:	bd10      	pop	{r4, pc}
   b6b54:	000c4204 	.word	0x000c4204

000b6b58 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6b58:	b510      	push	{r4, lr}
   b6b5a:	4604      	mov	r4, r0
   b6b5c:	f7ff fff2 	bl	b6b44 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6b60:	4620      	mov	r0, r4
   b6b62:	f640 112c 	movw	r1, #2348	; 0x92c
   b6b66:	f7fd fa9a 	bl	b409e <_ZdlPvj>
   b6b6a:	4620      	mov	r0, r4
   b6b6c:	bd10      	pop	{r4, pc}

000b6b6e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6b70:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6b72:	6853      	ldr	r3, [r2, #4]
   b6b74:	6890      	ldr	r0, [r2, #8]
   b6b76:	6814      	ldr	r4, [r2, #0]
   b6b78:	105e      	asrs	r6, r3, #1
   b6b7a:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6b7e:	07db      	lsls	r3, r3, #31
   b6b80:	bf48      	it	mi
   b6b82:	5983      	ldrmi	r3, [r0, r6]
   b6b84:	4668      	mov	r0, sp
   b6b86:	bf48      	it	mi
   b6b88:	591c      	ldrmi	r4, [r3, r4]
   b6b8a:	f008 fdad 	bl	bf6e8 <_ZN6StringC1EOS_>
   b6b8e:	4669      	mov	r1, sp
   b6b90:	4628      	mov	r0, r5
   b6b92:	47a0      	blx	r4
   b6b94:	4604      	mov	r4, r0
   b6b96:	4668      	mov	r0, sp
   b6b98:	f008 fd2a 	bl	bf5f0 <_ZN6StringD1Ev>
      }
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	b004      	add	sp, #16
   b6ba0:	bd70      	pop	{r4, r5, r6, pc}

000b6ba2 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6ba2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ba4:	b538      	push	{r3, r4, r5, lr}
   b6ba6:	4604      	mov	r4, r0
	switch (__op)
   b6ba8:	d102      	bne.n	b6bb0 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6baa:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6bac:	6023      	str	r3, [r4, #0]
	}
   b6bae:	e003      	b.n	b6bb8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6bb0:	2a02      	cmp	r2, #2
   b6bb2:	d003      	beq.n	b6bbc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6bb4:	2a03      	cmp	r2, #3
   b6bb6:	d00d      	beq.n	b6bd4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6bb8:	2000      	movs	r0, #0
   b6bba:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bbc:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6bbe:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6bc0:	f7fd fa69 	bl	b4096 <_Znwj>
   b6bc4:	4603      	mov	r3, r0
   b6bc6:	2800      	cmp	r0, #0
   b6bc8:	d0f0      	beq.n	b6bac <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6bd2:	e7eb      	b.n	b6bac <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6bd4:	6800      	ldr	r0, [r0, #0]
   b6bd6:	2800      	cmp	r0, #0
   b6bd8:	d0ee      	beq.n	b6bb8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6bda:	210c      	movs	r1, #12
   b6bdc:	f7fd fa5f 	bl	b409e <_ZdlPvj>
   b6be0:	e7ea      	b.n	b6bb8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6be2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6be4:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6be6:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6be8:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6bea:	f001 ff25 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6bee:	b120      	cbz	r0, b6bfa <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6bf0:	9901      	ldr	r1, [sp, #4]
   b6bf2:	462a      	mov	r2, r5
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	f001 ff01 	bl	b89fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6bfa:	b003      	add	sp, #12
   b6bfc:	bd30      	pop	{r4, r5, pc}
	...

000b6c00 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6c00:	4b0a      	ldr	r3, [pc, #40]	; (b6c2c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6c02:	b510      	push	{r4, lr}
   b6c04:	4604      	mov	r4, r0
   b6c06:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6c08:	f007 fb66 	bl	be2d8 <_ZN5spark10LogManager8instanceEv>
   b6c0c:	4621      	mov	r1, r4
   b6c0e:	f007 fd6a 	bl	be6e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6c12:	f009 f987 	bl	bff24 <_Z16_fetch_usbserialv>
   b6c16:	f009 f977 	bl	bff08 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6c1a:	4620      	mov	r0, r4
   b6c1c:	4b04      	ldr	r3, [pc, #16]	; (b6c30 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6c1e:	f840 3b04 	str.w	r3, [r0], #4
   b6c22:	f007 fbfb 	bl	be41c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6c26:	4620      	mov	r0, r4
   b6c28:	bd10      	pop	{r4, pc}
   b6c2a:	bf00      	nop
   b6c2c:	000c41ec 	.word	0x000c41ec
   b6c30:	000c41d4 	.word	0x000c41d4

000b6c34 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6c34:	b510      	push	{r4, lr}
   b6c36:	4604      	mov	r4, r0
    }
   b6c38:	f7ff ffe2 	bl	b6c00 <_ZN5spark16SerialLogHandlerD1Ev>
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	2124      	movs	r1, #36	; 0x24
   b6c40:	f7fd fa2d 	bl	b409e <_ZdlPvj>
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}

000b6c48 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6c48:	b510      	push	{r4, lr}
    if (!_instance) {
   b6c4a:	4c06      	ldr	r4, [pc, #24]	; (b6c64 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6c4c:	6823      	ldr	r3, [r4, #0]
   b6c4e:	b933      	cbnz	r3, b6c5e <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6c50:	2004      	movs	r0, #4
   b6c52:	f7fd fa20 	bl	b4096 <_Znwj>
   b6c56:	b108      	cbz	r0, b6c5c <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6c58:	4b03      	ldr	r3, [pc, #12]	; (b6c68 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6c5a:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6c5c:	6020      	str	r0, [r4, #0]
}
   b6c5e:	6820      	ldr	r0, [r4, #0]
   b6c60:	bd10      	pop	{r4, pc}
   b6c62:	bf00      	nop
   b6c64:	2003e498 	.word	0x2003e498
   b6c68:	000c4214 	.word	0x000c4214

000b6c6c <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6c6c:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6c6e:	4919      	ldr	r1, [pc, #100]	; (b6cd4 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6c70:	b085      	sub	sp, #20
   b6c72:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6c74:	4818      	ldr	r0, [pc, #96]	; (b6cd8 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6c76:	f7fd fa62 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6c7a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c7c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6c7e:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c80:	f7fd fa09 	bl	b4096 <_Znwj>
   b6c84:	b118      	cbz	r0, b6c8e <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6c86:	4b15      	ldr	r3, [pc, #84]	; (b6cdc <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6c88:	6084      	str	r4, [r0, #8]
   b6c8a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6c8e:	4b14      	ldr	r3, [pc, #80]	; (b6ce0 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c90:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6c92:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6c94:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6c96:	4b13      	ldr	r3, [pc, #76]	; (b6ce4 <_ZN18Particle_Functions5setupEv+0x78>)
   b6c98:	9302      	str	r3, [sp, #8]
   b6c9a:	f7fd f9fc 	bl	b4096 <_Znwj>
   b6c9e:	4604      	mov	r4, r0
   b6ca0:	b178      	cbz	r0, b6cc2 <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6ca2:	2300      	movs	r3, #0
   b6ca4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6ca6:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b6ca8:	b133      	cbz	r3, b6cb8 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6caa:	2202      	movs	r2, #2
   b6cac:	4669      	mov	r1, sp
   b6cae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6cb0:	9b03      	ldr	r3, [sp, #12]
   b6cb2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6cb4:	9b02      	ldr	r3, [sp, #8]
   b6cb6:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b6cb8:	4a0b      	ldr	r2, [pc, #44]	; (b6ce8 <_ZN18Particle_Functions5setupEv+0x7c>)
   b6cba:	480c      	ldr	r0, [pc, #48]	; (b6cec <_ZN18Particle_Functions5setupEv+0x80>)
   b6cbc:	4621      	mov	r1, r4
   b6cbe:	f006 fb78 	bl	bd3b2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6cc2:	9b02      	ldr	r3, [sp, #8]
   b6cc4:	b11b      	cbz	r3, b6cce <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6cc6:	4669      	mov	r1, sp
   b6cc8:	2203      	movs	r2, #3
   b6cca:	4608      	mov	r0, r1
   b6ccc:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6cce:	b005      	add	sp, #20
   b6cd0:	bd30      	pop	{r4, r5, pc}
   b6cd2:	bf00      	nop
   b6cd4:	000c3df4 	.word	0x000c3df4
   b6cd8:	2003e658 	.word	0x2003e658
   b6cdc:	000b6cf1 	.word	0x000b6cf1
   b6ce0:	000b6b6f 	.word	0x000b6b6f
   b6ce4:	000b6ba3 	.word	0x000b6ba3
   b6ce8:	000c3e22 	.word	0x000c3e22
   b6cec:	000bd38b 	.word	0x000bd38b

000b6cf0 <_ZN18Particle_Functions18jsonFunctionParserE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::jsonFunctionParser(String command) {
   b6cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cf4:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b6cf8:	460c      	mov	r4, r1
    // const char * const commandString = "{\"cmd\":[{\"node\":1,\"var\":\"hourly\",\"fn\":\"reset\"},{\"node\":0,\"var\":1,\"fn\":\"lowpowermode\"},{\"node\":2,\"var\":\"daily\",\"fn\":\"report\"}]}";
    // String to put into Uber command window {"cmd":[{"node":1,"var":"hourly","fn":"reset"},{"node":0,"var":1,"fn":"lowpowermode"},{"node":2,"var":"daily","fn":"report"}]}

	int nodeNumber;
	String variable;
   b6cfa:	a809      	add	r0, sp, #36	; 0x24
   b6cfc:	49a3      	ldr	r1, [pc, #652]	; (b6f8c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x29c>)
   b6cfe:	f008 fcc2 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b6d02:	49a2      	ldr	r1, [pc, #648]	; (b6f8c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x29c>)
   b6d04:	a80d      	add	r0, sp, #52	; 0x34
   b6d06:	f008 fcbe 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6d0a:	2350      	movs	r3, #80	; 0x50
   b6d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6d10:	9300      	str	r3, [sp, #0]
   b6d12:	a92c      	add	r1, sp, #176	; 0xb0
   b6d14:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b6d18:	a821      	add	r0, sp, #132	; 0x84
   b6d1a:	f001 fd0d 	bl	b8738 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6d1e:	4b9c      	ldr	r3, [pc, #624]	; (b6f90 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a0>)
  char messaging[64];
  bool success = true;

	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens

  Log.info(command.c_str());
   b6d20:	6821      	ldr	r1, [r4, #0]
   b6d22:	489c      	ldr	r0, [pc, #624]	; (b6f94 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6d24:	9321      	str	r3, [sp, #132]	; 0x84
   b6d26:	f7fd fa0a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	jp.clear();
   b6d2a:	a821      	add	r0, sp, #132	; 0x84
   b6d2c:	f001 fcfa 	bl	b8724 <_ZN10JsonBuffer5clearEv>
   b6d30:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6d32:	9103      	str	r1, [sp, #12]
   b6d34:	4608      	mov	r0, r1
   b6d36:	f00a f99e 	bl	c1076 <strlen>
   b6d3a:	9903      	ldr	r1, [sp, #12]
   b6d3c:	4602      	mov	r2, r0
   b6d3e:	a821      	add	r0, sp, #132	; 0x84
   b6d40:	f001 fcd3 	bl	b86ea <_ZN10JsonBuffer7addDataEPKcj>
	jp.addString(command);
	if (!jp.parse()) {
   b6d44:	a821      	add	r0, sp, #132	; 0x84
   b6d46:	f002 fa29 	bl	b919c <_ZN10JsonParser5parseEv>
   b6d4a:	4604      	mov	r4, r0
   b6d4c:	b990      	cbnz	r0, b6d74 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x84>
		Log.info("Parsing failed - check syntax");
   b6d4e:	4992      	ldr	r1, [pc, #584]	; (b6f98 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a8>)
   b6d50:	4890      	ldr	r0, [pc, #576]	; (b6f94 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6d52:	f7fd f9f4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6d56:	4b91      	ldr	r3, [pc, #580]	; (b6f9c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6d58:	4a8f      	ldr	r2, [pc, #572]	; (b6f98 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a8>)
   b6d5a:	781b      	ldrb	r3, [r3, #0]
   b6d5c:	f88d 3000 	strb.w	r3, [sp]
   b6d60:	a811      	add	r0, sp, #68	; 0x44
   b6d62:	498f      	ldr	r1, [pc, #572]	; (b6fa0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6d64:	233c      	movs	r3, #60	; 0x3c
   b6d66:	f006 fc35 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6d6a:	a812      	add	r0, sp, #72	; 0x48
   b6d6c:	f7fd fc50 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    Log.info(messaging);
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
	}
	return success;
   b6d70:	4625      	mov	r5, r4
   b6d72:	e017      	b.n	b6da4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6d74:	a821      	add	r0, sp, #132	; 0x84
   b6d76:	f001 fcfa 	bl	b876e <_ZNK10JsonParser14getOuterObjectEv>
   b6d7a:	4a89      	ldr	r2, [pc, #548]	; (b6fa0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
		if (getValueTokenByKey(container, name, value)) {
   b6d7c:	4f89      	ldr	r7, [pc, #548]	; (b6fa4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6d7e:	f8df 8278 	ldr.w	r8, [pc, #632]	; b6ff8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b6d82:	f8df 9278 	ldr.w	r9, [pc, #632]	; b6ffc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6d86:	4601      	mov	r1, r0
   b6d88:	ab06      	add	r3, sp, #24
   b6d8a:	a821      	add	r0, sp, #132	; 0x84
   b6d8c:	f001 fe54 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6d90:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b6d92:	9906      	ldr	r1, [sp, #24]
   b6d94:	462a      	mov	r2, r5
   b6d96:	a821      	add	r0, sp, #132	; 0x84
   b6d98:	f001 fd0b 	bl	b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b6d9c:	4606      	mov	r6, r0
   b6d9e:	b978      	cbnz	r0, b6dc0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd0>
      if (i == 0) return 0;                                       // No valid entries
   b6da0:	2d00      	cmp	r5, #0
   b6da2:	d1e5      	bne.n	b6d70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b6da4:	a821      	add	r0, sp, #132	; 0x84
   b6da6:	f7ff fecd 	bl	b6b44 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b6daa:	a80d      	add	r0, sp, #52	; 0x34
   b6dac:	f008 fc20 	bl	bf5f0 <_ZN6StringD1Ev>
	String variable;
   b6db0:	a809      	add	r0, sp, #36	; 0x24
   b6db2:	f008 fc1d 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b6db6:	4628      	mov	r0, r5
   b6db8:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b6dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6dc0:	4601      	mov	r1, r0
   b6dc2:	ab07      	add	r3, sp, #28
   b6dc4:	463a      	mov	r2, r7
   b6dc6:	a821      	add	r0, sp, #132	; 0x84
   b6dc8:	f001 fe36 	bl	b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6dcc:	b120      	cbz	r0, b6dd8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xe8>
			return getTokenValue(value, result);
   b6dce:	9907      	ldr	r1, [sp, #28]
   b6dd0:	aa04      	add	r2, sp, #16
   b6dd2:	a821      	add	r0, sp, #132	; 0x84
   b6dd4:	f001 fd46 	bl	b8864 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6dd8:	ab09      	add	r3, sp, #36	; 0x24
   b6dda:	4642      	mov	r2, r8
   b6ddc:	4631      	mov	r1, r6
   b6dde:	a821      	add	r0, sp, #132	; 0x84
   b6de0:	f7ff feff 	bl	b6be2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b6de4:	4631      	mov	r1, r6
   b6de6:	a821      	add	r0, sp, #132	; 0x84
   b6de8:	ab0d      	add	r3, sp, #52	; 0x34
   b6dea:	464a      	mov	r2, r9
   b6dec:	f7ff fef9 	bl	b6be2 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6df0:	496d      	ldr	r1, [pc, #436]	; (b6fa8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6df2:	a80d      	add	r0, sp, #52	; 0x34
   b6df4:	f008 fd0d 	bl	bf812 <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b6df8:	2800      	cmp	r0, #0
   b6dfa:	d059      	beq.n	b6eb0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c0>
      if (nodeNumber == 0) {
   b6dfc:	9b04      	ldr	r3, [sp, #16]
   b6dfe:	2b00      	cmp	r3, #0
   b6e00:	d13b      	bne.n	b6e7a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x18a>
   b6e02:	496a      	ldr	r1, [pc, #424]	; (b6fac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b6e04:	a809      	add	r0, sp, #36	; 0x24
   b6e06:	f008 fd04 	bl	bf812 <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b6e0a:	b318      	cbz	r0, b6e54 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b6e0c:	4968      	ldr	r1, [pc, #416]	; (b6fb0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b6e0e:	a811      	add	r0, sp, #68	; 0x44
   b6e10:	f00a f90b 	bl	c102a <strcpy>
          nodeID.resetNodeIDs();
   b6e14:	f7ff fb3e 	bl	b6494 <_ZN10nodeIDData8instanceEv>
   b6e18:	f7ff fb7a 	bl	b6510 <_ZN10nodeIDData12resetNodeIDsEv>
        current.resetEverything();
   b6e1c:	f7ff fab2 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b6e20:	f7ff fd4a 	bl	b68b8 <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b6e24:	485b      	ldr	r0, [pc, #364]	; (b6f94 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2a4>)
   b6e26:	a911      	add	r1, sp, #68	; 0x44
   b6e28:	f7fd f989 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6e2c:	f005 ffe6 	bl	bcdfc <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b6e30:	b160      	cbz	r0, b6e4c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
   b6e32:	4b5a      	ldr	r3, [pc, #360]	; (b6f9c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6e34:	495a      	ldr	r1, [pc, #360]	; (b6fa0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6e36:	781b      	ldrb	r3, [r3, #0]
   b6e38:	f88d 3000 	strb.w	r3, [sp]
   b6e3c:	a807      	add	r0, sp, #28
   b6e3e:	233c      	movs	r3, #60	; 0x3c
   b6e40:	aa11      	add	r2, sp, #68	; 0x44
   b6e42:	f006 fbc7 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6e46:	a808      	add	r0, sp, #32
   b6e48:	f7fd fbe2 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6e4c:	3501      	adds	r5, #1
   b6e4e:	2d0a      	cmp	r5, #10
   b6e50:	d19f      	bne.n	b6d92 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa2>
   b6e52:	e78d      	b.n	b6d70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
   b6e54:	4957      	ldr	r1, [pc, #348]	; (b6fb4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b6e56:	a809      	add	r0, sp, #36	; 0x24
   b6e58:	f008 fcdb 	bl	bf812 <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b6e5c:	b140      	cbz	r0, b6e70 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x180>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b6e5e:	4956      	ldr	r1, [pc, #344]	; (b6fb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
   b6e60:	a811      	add	r0, sp, #68	; 0x44
   b6e62:	f00a f8e2 	bl	c102a <strcpy>
            sysStatus.loadSystemDefaults();                     // All will reset system values as well
   b6e66:	f7ff fa55 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6e6a:	f7ff fda9 	bl	b69c0 <_ZN13sysStatusData18loadSystemDefaultsEv>
   b6e6e:	e7d5      	b.n	b6e1c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b6e70:	4952      	ldr	r1, [pc, #328]	; (b6fbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b6e72:	a811      	add	r0, sp, #68	; 0x44
   b6e74:	f00a f8d9 	bl	c102a <strcpy>
   b6e78:	e7d0      	b.n	b6e1c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
   b6e7a:	494e      	ldr	r1, [pc, #312]	; (b6fb4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b6e7c:	a809      	add	r0, sp, #36	; 0x24
   b6e7e:	f008 fcc8 	bl	bf812 <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6e82:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b6e84:	b158      	cbz	r0, b6e9e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ae>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b6e86:	4a4e      	ldr	r2, [pc, #312]	; (b6fc0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b6e88:	2140      	movs	r1, #64	; 0x40
   b6e8a:	a811      	add	r0, sp, #68	; 0x44
   b6e8c:	f006 f87e 	bl	bcf8c <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b6e90:	f7fd f96e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6e94:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b6e96:	9904      	ldr	r1, [sp, #16]
   b6e98:	f7fd ff90 	bl	b4dbc <_ZN14LoRA_Functions11changeAlertEii>
   b6e9c:	e7c2      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b6e9e:	4a49      	ldr	r2, [pc, #292]	; (b6fc4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b6ea0:	2140      	movs	r1, #64	; 0x40
   b6ea2:	a811      	add	r0, sp, #68	; 0x44
   b6ea4:	f006 f872 	bl	bcf8c <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b6ea8:	f7fd f962 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6eac:	2206      	movs	r2, #6
   b6eae:	e7f2      	b.n	b6e96 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1a6>
   b6eb0:	4945      	ldr	r1, [pc, #276]	; (b6fc8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b6eb2:	a80d      	add	r0, sp, #52	; 0x34
   b6eb4:	f008 fcad 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b6eb8:	b300      	cbz	r0, b6efc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x20c>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6eba:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6ebc:	220a      	movs	r2, #10
   b6ebe:	a905      	add	r1, sp, #20
   b6ec0:	f00b f84a 	bl	c1f58 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6ec4:	1e43      	subs	r3, r0, #1
   b6ec6:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6ec8:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b6eca:	d811      	bhi.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x200>
   b6ecc:	233c      	movs	r3, #60	; 0x3c
   b6ece:	fb93 f3f0 	sdiv	r3, r3, r0
   b6ed2:	4343      	muls	r3, r0
   b6ed4:	2b3c      	cmp	r3, #60	; 0x3c
   b6ed6:	d10b      	bne.n	b6ef0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x200>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b6ed8:	4603      	mov	r3, r0
   b6eda:	4a3c      	ldr	r2, [pc, #240]	; (b6fcc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b6edc:	2140      	movs	r1, #64	; 0x40
   b6ede:	a811      	add	r0, sp, #68	; 0x44
   b6ee0:	f006 f854 	bl	bcf8c <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b6ee4:	f7ff fa16 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6ee8:	b2b1      	uxth	r1, r6
   b6eea:	f7ff fc73 	bl	b67d4 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b6eee:	e799      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b6ef0:	4937      	ldr	r1, [pc, #220]	; (b6fd0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b6ef2:	a811      	add	r0, sp, #68	; 0x44
   b6ef4:	f00a f899 	bl	c102a <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b6ef8:	2400      	movs	r4, #0
   b6efa:	e793      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b6efc:	4935      	ldr	r1, [pc, #212]	; (b6fd4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b6efe:	a80d      	add	r0, sp, #52	; 0x34
   b6f00:	f008 fc87 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b6f04:	b1b8      	cbz	r0, b6f36 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b6f06:	4934      	ldr	r1, [pc, #208]	; (b6fd8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b6f08:	a809      	add	r0, sp, #36	; 0x24
   b6f0a:	f008 fc82 	bl	bf812 <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b6f0e:	4606      	mov	r6, r0
   b6f10:	b148      	cbz	r0, b6f26 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x236>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b6f12:	4932      	ldr	r1, [pc, #200]	; (b6fdc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b6f14:	a811      	add	r0, sp, #68	; 0x44
   b6f16:	f00a f888 	bl	c102a <strcpy>
        sysStatus.set_stayConnected(1);
   b6f1a:	f7ff f9fb 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6f1e:	2101      	movs	r1, #1
        sysStatus.set_stayConnected(0);
   b6f20:	f7ff fb9e 	bl	b6660 <_ZN13sysStatusData17set_stayConnectedEh>
   b6f24:	e77e      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b6f26:	492e      	ldr	r1, [pc, #184]	; (b6fe0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b6f28:	a811      	add	r0, sp, #68	; 0x44
   b6f2a:	f00a f87e 	bl	c102a <strcpy>
        sysStatus.set_stayConnected(0);
   b6f2e:	f7ff f9f1 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6f32:	4631      	mov	r1, r6
   b6f34:	e7f4      	b.n	b6f20 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x230>
   b6f36:	492b      	ldr	r1, [pc, #172]	; (b6fe4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b6f38:	a80d      	add	r0, sp, #52	; 0x34
   b6f3a:	f008 fc6a 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b6f3e:	b148      	cbz	r0, b6f54 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x264>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b6f40:	4929      	ldr	r1, [pc, #164]	; (b6fe8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b6f42:	a811      	add	r0, sp, #68	; 0x44
   b6f44:	f00a f871 	bl	c102a <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b6f48:	f7fd f912 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b6f4c:	2101      	movs	r1, #1
   b6f4e:	f7fd fc2d 	bl	b47ac <_ZN14LoRA_Functions13printNodeDataEb>
   b6f52:	e767      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b6f54:	4925      	ldr	r1, [pc, #148]	; (b6fec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b6f56:	a80d      	add	r0, sp, #52	; 0x34
   b6f58:	f008 fc5b 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b6f5c:	2800      	cmp	r0, #0
   b6f5e:	d04f      	beq.n	b7000 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6f60:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6f62:	220a      	movs	r2, #10
   b6f64:	a905      	add	r1, sp, #20
   b6f66:	f00a fff7 	bl	c1f58 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b6f6a:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b6f6c:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b6f6e:	d80b      	bhi.n	b6f88 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x298>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b6f70:	4603      	mov	r3, r0
   b6f72:	4a1f      	ldr	r2, [pc, #124]	; (b6ff0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b6f74:	2140      	movs	r1, #64	; 0x40
   b6f76:	a811      	add	r0, sp, #68	; 0x44
   b6f78:	f006 f808 	bl	bcf8c <snprintf>
        sysStatus.set_openTime(tempValue);
   b6f7c:	f7ff f9ca 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b6f80:	b2f1      	uxtb	r1, r6
   b6f82:	f7ff fb85 	bl	b6690 <_ZN13sysStatusData12set_openTimeEh>
   b6f86:	e74d      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b6f88:	491a      	ldr	r1, [pc, #104]	; (b6ff4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b6f8a:	e7b2      	b.n	b6ef2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b6f8c:	000c4e80 	.word	0x000c4e80
   b6f90:	000c4204 	.word	0x000c4204
   b6f94:	2003e658 	.word	0x2003e658
   b6f98:	000c3e33 	.word	0x000c3e33
   b6f9c:	2003e494 	.word	0x2003e494
   b6fa0:	000c3e51 	.word	0x000c3e51
   b6fa4:	000c351c 	.word	0x000c351c
   b6fa8:	000c3e5c 	.word	0x000c3e5c
   b6fac:	000c357d 	.word	0x000c357d
   b6fb0:	000c3e62 	.word	0x000c3e62
   b6fb4:	000c3e84 	.word	0x000c3e84
   b6fb8:	000c3e88 	.word	0x000c3e88
   b6fbc:	000c3eb8 	.word	0x000c3eb8
   b6fc0:	000c3edd 	.word	0x000c3edd
   b6fc4:	000c3f09 	.word	0x000c3f09
   b6fc8:	000c3f2a 	.word	0x000c3f2a
   b6fcc:	000c3f2f 	.word	0x000c3f2f
   b6fd0:	000c3f59 	.word	0x000c3f59
   b6fd4:	000c3f79 	.word	0x000c3f79
   b6fd8:	000c3f7e 	.word	0x000c3f7e
   b6fdc:	000c3f83 	.word	0x000c3f83
   b6fe0:	000c3fb7 	.word	0x000c3fb7
   b6fe4:	000c3fd9 	.word	0x000c3fd9
   b6fe8:	000c3fdd 	.word	0x000c3fdd
   b6fec:	000c3b94 	.word	0x000c3b94
   b6ff0:	000c3ff2 	.word	0x000c3ff2
   b6ff4:	000c4010 	.word	0x000c4010
   b6ff8:	000c3e55 	.word	0x000c3e55
   b6ffc:	000c3e59 	.word	0x000c3e59
   b7000:	4931      	ldr	r1, [pc, #196]	; (b70c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d8>)
   b7002:	a80d      	add	r0, sp, #52	; 0x34
   b7004:	f008 fc05 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b7008:	b1b8      	cbz	r0, b703a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x34a>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b700a:	9809      	ldr	r0, [sp, #36]	; 0x24
   b700c:	220a      	movs	r2, #10
   b700e:	a905      	add	r1, sp, #20
   b7010:	f00a ffa2 	bl	c1f58 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b7014:	f1a0 030d 	sub.w	r3, r0, #13
   b7018:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b701a:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b701c:	d80b      	bhi.n	b7036 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x346>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b701e:	4603      	mov	r3, r0
   b7020:	4a2a      	ldr	r2, [pc, #168]	; (b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3dc>)
   b7022:	2140      	movs	r1, #64	; 0x40
   b7024:	a811      	add	r0, sp, #68	; 0x44
   b7026:	f005 ffb1 	bl	bcf8c <snprintf>
        sysStatus.set_closeTime(tempValue);
   b702a:	f7ff f973 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b702e:	b2f1      	uxtb	r1, r6
   b7030:	f7ff fb34 	bl	b669c <_ZN13sysStatusData13set_closeTimeEh>
   b7034:	e6f6      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b7036:	4926      	ldr	r1, [pc, #152]	; (b70d0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e0>)
   b7038:	e75b      	b.n	b6ef2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b703a:	4926      	ldr	r1, [pc, #152]	; (b70d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e4>)
   b703c:	a80d      	add	r0, sp, #52	; 0x34
   b703e:	f008 fbe8 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b7042:	b1e0      	cbz	r0, b707e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7044:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7046:	220a      	movs	r2, #10
   b7048:	a905      	add	r1, sp, #20
   b704a:	f00a ff85 	bl	c1f58 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b704e:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7050:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b7052:	d812      	bhi.n	b707a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38a>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b7054:	9b04      	ldr	r3, [sp, #16]
   b7056:	4a20      	ldr	r2, [pc, #128]	; (b70d8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e8>)
   b7058:	9300      	str	r3, [sp, #0]
   b705a:	2140      	movs	r1, #64	; 0x40
   b705c:	4603      	mov	r3, r0
   b705e:	a811      	add	r0, sp, #68	; 0x44
   b7060:	f005 ff94 	bl	bcf8c <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7064:	f7fd f884 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7068:	9904      	ldr	r1, [sp, #16]
   b706a:	4632      	mov	r2, r6
   b706c:	f7fd fdce 	bl	b4c0c <_ZN14LoRA_Functions10changeTypeEii>
   b7070:	b338      	cbz	r0, b70c2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d2>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7072:	f7fd f87d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7076:	2207      	movs	r2, #7
   b7078:	e70d      	b.n	b6e96 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1a6>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b707a:	4918      	ldr	r1, [pc, #96]	; (b70dc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ec>)
   b707c:	e739      	b.n	b6ef2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
   b707e:	4918      	ldr	r1, [pc, #96]	; (b70e0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f0>)
   b7080:	a80d      	add	r0, sp, #52	; 0x34
   b7082:	f008 fbc6 	bl	bf812 <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b7086:	b1d0      	cbz	r0, b70be <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ce>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7088:	9809      	ldr	r0, [sp, #36]	; 0x24
   b708a:	220a      	movs	r2, #10
   b708c:	a905      	add	r1, sp, #20
   b708e:	f00a ff63 	bl	c1f58 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7092:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7094:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7096:	d810      	bhi.n	b70ba <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ca>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b7098:	4a12      	ldr	r2, [pc, #72]	; (b70e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f4>)
   b709a:	4b13      	ldr	r3, [pc, #76]	; (b70e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f8>)
   b709c:	2140      	movs	r1, #64	; 0x40
   b709e:	2800      	cmp	r0, #0
   b70a0:	bf08      	it	eq
   b70a2:	4613      	moveq	r3, r2
   b70a4:	4a11      	ldr	r2, [pc, #68]	; (b70ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3fc>)
   b70a6:	a811      	add	r0, sp, #68	; 0x44
   b70a8:	f005 ff70 	bl	bcf8c <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b70ac:	f7ff f932 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b70b0:	f006 0101 	and.w	r1, r6, #1
   b70b4:	f7ff fc7d 	bl	b69b2 <_ZN13sysStatusData14set_verizonSIMEb>
   b70b8:	e6b4      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b70ba:	490d      	ldr	r1, [pc, #52]	; (b70f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x400>)
   b70bc:	e719      	b.n	b6ef2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b70be:	490d      	ldr	r1, [pc, #52]	; (b70f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x404>)
   b70c0:	e717      	b.n	b6ef2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x202>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b70c2:	4604      	mov	r4, r0
   b70c4:	e6ae      	b.n	b6e24 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b70c6:	bf00      	nop
   b70c8:	000c4029 	.word	0x000c4029
   b70cc:	000c402f 	.word	0x000c402f
   b70d0:	000c404d 	.word	0x000c404d
   b70d4:	000c3404 	.word	0x000c3404
   b70d8:	000c4068 	.word	0x000c4068
   b70dc:	000c408e 	.word	0x000c408e
   b70e0:	000c40a9 	.word	0x000c40a9
   b70e4:	000c4146 	.word	0x000c4146
   b70e8:	000c3e2b 	.word	0x000c3e2b
   b70ec:	000c40ad 	.word	0x000c40ad
   b70f0:	000c40bf 	.word	0x000c40bf
   b70f4:	000c40ef 	.word	0x000c40ef

000b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b70f8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b70fa:	e9d0 5300 	ldrd	r5, r3, [r0]
   b70fe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7100:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7102:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7106:	42ae      	cmp	r6, r5
   b7108:	d004      	beq.n	b7114 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b710a:	4628      	mov	r0, r5
   b710c:	f008 fa70 	bl	bf5f0 <_ZN6StringD1Ev>
   b7110:	3514      	adds	r5, #20
   b7112:	e7f8      	b.n	b7106 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7114:	6820      	ldr	r0, [r4, #0]
   b7116:	f005 ff19 	bl	bcf4c <free>
    AllocatorT::free(data_);
}
   b711a:	4620      	mov	r0, r4
   b711c:	bd70      	pop	{r4, r5, r6, pc}

000b711e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b711e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7122:	4604      	mov	r4, r0
   b7124:	460d      	mov	r5, r1
   b7126:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7128:	d916      	bls.n	b7158 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b712a:	4290      	cmp	r0, r2
   b712c:	d215      	bcs.n	b715a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b712e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7132:	1a75      	subs	r5, r6, r1
   b7134:	f1a1 0714 	sub.w	r7, r1, #20
   b7138:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b713a:	42b7      	cmp	r7, r6
   b713c:	d01c      	beq.n	b7178 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b713e:	b12c      	cbz	r4, b714c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b7140:	4631      	mov	r1, r6
   b7142:	4620      	mov	r0, r4
   b7144:	f008 fad0 	bl	bf6e8 <_ZN6StringC1EOS_>
   b7148:	7c33      	ldrb	r3, [r6, #16]
   b714a:	7423      	strb	r3, [r4, #16]
   b714c:	4630      	mov	r0, r6
   b714e:	f008 fa4f 	bl	bf5f0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7152:	3e14      	subs	r6, #20
   b7154:	3c14      	subs	r4, #20
   b7156:	e7f0      	b.n	b713a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7158:	d00e      	beq.n	b7178 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b715a:	42b5      	cmp	r5, r6
   b715c:	d00c      	beq.n	b7178 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b715e:	b12c      	cbz	r4, b716c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b7160:	4629      	mov	r1, r5
   b7162:	4620      	mov	r0, r4
   b7164:	f008 fac0 	bl	bf6e8 <_ZN6StringC1EOS_>
   b7168:	7c2b      	ldrb	r3, [r5, #16]
   b716a:	7423      	strb	r3, [r4, #16]
   b716c:	4628      	mov	r0, r5
   b716e:	f008 fa3f 	bl	bf5f0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7172:	3514      	adds	r5, #20
   b7174:	3414      	adds	r4, #20
   b7176:	e7f0      	b.n	b715a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b7178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b717a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b717e:	2300      	movs	r3, #0
   b7180:	e9c0 3300 	strd	r3, r3, [r0]
   b7184:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7186:	684f      	ldr	r7, [r1, #4]
   b7188:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b718a:	4604      	mov	r4, r0
   b718c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b718e:	dd23      	ble.n	b71d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7190:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b7194:	fb08 f007 	mul.w	r0, r8, r7
   b7198:	f005 fed0 	bl	bcf3c <malloc>
            if (!d) {
   b719c:	4605      	mov	r5, r0
   b719e:	b1d8      	cbz	r0, b71d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b71a0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b71a4:	fb08 1202 	mla	r2, r8, r2, r1
   b71a8:	f7ff ffb9 	bl	b711e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b71ac:	6820      	ldr	r0, [r4, #0]
   b71ae:	f005 fecd 	bl	bcf4c <free>
        data_ = d;
   b71b2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b71b4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b71b6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b71ba:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b71be:	45b8      	cmp	r8, r7
   b71c0:	d008      	beq.n	b71d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b71c2:	4639      	mov	r1, r7
   b71c4:	4628      	mov	r0, r5
   b71c6:	f008 faa9 	bl	bf71c <_ZN6StringC1ERKS_>
   b71ca:	7c3b      	ldrb	r3, [r7, #16]
   b71cc:	742b      	strb	r3, [r5, #16]
   b71ce:	3714      	adds	r7, #20
   b71d0:	3514      	adds	r5, #20
   b71d2:	e7f4      	b.n	b71be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b71d4:	6873      	ldr	r3, [r6, #4]
   b71d6:	6063      	str	r3, [r4, #4]
}
   b71d8:	4620      	mov	r0, r4
   b71da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b71e0 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b71e0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b71e2:	4b27      	ldr	r3, [pc, #156]	; (b7280 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b71e4:	4a27      	ldr	r2, [pc, #156]	; (b7284 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b71e6:	2501      	movs	r5, #1
   b71e8:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b71ea:	4b27      	ldr	r3, [pc, #156]	; (b7288 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b71ec:	2400      	movs	r4, #0
   b71ee:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b71f0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b71f2:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b71f6:	2002      	movs	r0, #2
   b71f8:	f005 fd76 	bl	bcce8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b71fc:	4621      	mov	r1, r4
   b71fe:	4628      	mov	r0, r5
   b7200:	f005 fd8a 	bl	bcd18 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b7204:	4629      	mov	r1, r5
   b7206:	2004      	movs	r0, #4
   b7208:	f005 faec 	bl	bc7e4 <HAL_Feature_Set>
        capacity_(0) {
   b720c:	e9cd 4400 	strd	r4, r4, [sp]
   b7210:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b7212:	f008 fe87 	bl	bff24 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b7216:	4c1d      	ldr	r4, [pc, #116]	; (b728c <_GLOBAL__sub_I_openTimeStr+0xac>)
   b7218:	4605      	mov	r5, r0
   b721a:	4669      	mov	r1, sp
   b721c:	a803      	add	r0, sp, #12
   b721e:	f7ff ffac 	bl	b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7222:	4626      	mov	r6, r4
        stream_(&stream) {
   b7224:	a903      	add	r1, sp, #12
   b7226:	a806      	add	r0, sp, #24
   b7228:	f7ff ffa7 	bl	b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b722c:	4b18      	ldr	r3, [pc, #96]	; (b7290 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b722e:	f846 3b04 	str.w	r3, [r6], #4
   b7232:	a906      	add	r1, sp, #24
   b7234:	a809      	add	r0, sp, #36	; 0x24
   b7236:	f7ff ffa0 	bl	b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b723a:	aa09      	add	r2, sp, #36	; 0x24
   b723c:	211e      	movs	r1, #30
   b723e:	4630      	mov	r0, r6
   b7240:	f007 fb34 	bl	be8ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7244:	a809      	add	r0, sp, #36	; 0x24
   b7246:	f7ff ff57 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b724a:	a806      	add	r0, sp, #24
   b724c:	f7ff ff54 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7250:	4b10      	ldr	r3, [pc, #64]	; (b7294 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b7252:	6023      	str	r3, [r4, #0]
   b7254:	6225      	str	r5, [r4, #32]
   b7256:	a803      	add	r0, sp, #12
   b7258:	f7ff ff4e 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b725c:	4b0e      	ldr	r3, [pc, #56]	; (b7298 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b725e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b7260:	f008 fe60 	bl	bff24 <_Z16_fetch_usbserialv>
   b7264:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7268:	f008 fe4a 	bl	bff00 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b726c:	f007 f834 	bl	be2d8 <_ZN5spark10LogManager8instanceEv>
   b7270:	4621      	mov	r1, r4
   b7272:	f007 f9f1 	bl	be658 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b7276:	4668      	mov	r0, sp
   b7278:	f7ff ff3e 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b727c:	b00c      	add	sp, #48	; 0x30
   b727e:	bd70      	pop	{r4, r5, r6, pc}
   b7280:	2003e494 	.word	0x2003e494
   b7284:	ffff0000 	.word	0xffff0000
   b7288:	2003e488 	.word	0x2003e488
   b728c:	2003e49c 	.word	0x2003e49c
   b7290:	000c41d4 	.word	0x000c41d4
   b7294:	000c4eb0 	.word	0x000c4eb0
   b7298:	000c41ec 	.word	0x000c41ec

000b729c <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b729c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72a0:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b72a2:	f008 fd58 	bl	bfd56 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b72a6:	4941      	ldr	r1, [pc, #260]	; (b73ac <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b72a8:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b72aa:	4841      	ldr	r0, [pc, #260]	; (b73b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b72ac:	f7fc ff47 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b72b0:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b72b2:	a801      	add	r0, sp, #4
   b72b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b72b8:	f8ad 400c 	strh.w	r4, [sp, #12]
   b72bc:	f006 f88a 	bl	bd3d4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b72c0:	4620      	mov	r0, r4
   b72c2:	f005 fabf 	bl	bc844 <hal_timer_millis>
        while (_while() && !_condition()) {
   b72c6:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b72ca:	4604      	mov	r4, r0
   b72cc:	2000      	movs	r0, #0
   b72ce:	f005 fab9 	bl	bc844 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b72d2:	1b03      	subs	r3, r0, r4
   b72d4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b72d8:	42b3      	cmp	r3, r6
   b72da:	f171 0300 	sbcs.w	r3, r1, #0
   b72de:	d205      	bcs.n	b72ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b72e0:	f005 fd8c 	bl	bcdfc <spark_cloud_flag_connected>
   b72e4:	b110      	cbz	r0, b72ec <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b72e6:	f005 fd79 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   b72ea:	e7ef      	b.n	b72cc <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b72ec:	f005 fd86 	bl	bcdfc <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b72f0:	f005 fa98 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b72f4:	4f2f      	ldr	r7, [pc, #188]	; (b73b4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b72f6:	6038      	str	r0, [r7, #0]
    		spark_process();
   b72f8:	f005 fd70 	bl	bcddc <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b72fc:	f005 fd7e 	bl	bcdfc <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b7300:	4604      	mov	r4, r0
   b7302:	b140      	cbz	r0, b7316 <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b7304:	492c      	ldr	r1, [pc, #176]	; (b73b8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b7306:	482a      	ldr	r0, [pc, #168]	; (b73b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7308:	f7fc ff19 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b730c:	2400      	movs	r4, #0
   b730e:	4620      	mov	r0, r4
   b7310:	b005      	add	sp, #20
   b7312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b7316:	f008 fd1e 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b731a:	4928      	ldr	r1, [pc, #160]	; (b73bc <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b731c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b73c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b7320:	1b42      	subs	r2, r0, r5
   b7322:	4823      	ldr	r0, [pc, #140]	; (b73b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7324:	f7fc ff0b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b7328:	f008 fd15 	bl	bfd56 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b732c:	4622      	mov	r2, r4
   b732e:	2102      	movs	r1, #2
   b7330:	4606      	mov	r6, r0
   b7332:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7336:	f005 fdb1 	bl	bce9c <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b733a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b733e:	4623      	mov	r3, r4
   b7340:	4622      	mov	r2, r4
   b7342:	4621      	mov	r1, r4
   b7344:	f005 fdc2 	bl	bcecc <network_off>
        return hal_timer_millis(nullptr);
   b7348:	4620      	mov	r0, r4
   b734a:	f005 fa7b 	bl	bc844 <hal_timer_millis>
        while (_while() && !_condition()) {
   b734e:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b7352:	4605      	mov	r5, r0
   b7354:	2000      	movs	r0, #0
   b7356:	f005 fa75 	bl	bc844 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b735a:	1b43      	subs	r3, r0, r5
   b735c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b7360:	454b      	cmp	r3, r9
   b7362:	f171 0300 	sbcs.w	r3, r1, #0
   b7366:	d206      	bcs.n	b7376 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b7368:	4640      	mov	r0, r8
   b736a:	f007 fdbd 	bl	beee8 <_ZN5spark12NetworkClass5isOffEv>
   b736e:	b910      	cbnz	r0, b7376 <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b7370:	f005 fd34 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   b7374:	e7ee      	b.n	b7354 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b7376:	4812      	ldr	r0, [pc, #72]	; (b73c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7378:	f007 fdb6 	bl	beee8 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b737c:	f005 fa52 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7380:	6038      	str	r0, [r7, #0]
    		spark_process();
   b7382:	f005 fd2b 	bl	bcddc <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b7386:	480e      	ldr	r0, [pc, #56]	; (b73c0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7388:	f007 fdaa 	bl	beee0 <_ZN5spark12NetworkClass4isOnEv>
   b738c:	b120      	cbz	r0, b7398 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b738e:	490d      	ldr	r1, [pc, #52]	; (b73c4 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b7390:	4807      	ldr	r0, [pc, #28]	; (b73b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7392:	f7fc fed4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b7396:	e7ba      	b.n	b730e <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b7398:	f008 fcdd 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b739c:	490a      	ldr	r1, [pc, #40]	; (b73c8 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b739e:	1b82      	subs	r2, r0, r6
   b73a0:	4803      	ldr	r0, [pc, #12]	; (b73b0 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b73a2:	f7fc fecc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b73a6:	2401      	movs	r4, #1
   b73a8:	e7b1      	b.n	b730e <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b73aa:	bf00      	nop
   b73ac:	000c4103 	.word	0x000c4103
   b73b0:	2003e658 	.word	0x2003e658
   b73b4:	2003e710 	.word	0x2003e710
   b73b8:	000c412c 	.word	0x000c412c
   b73bc:	000c414f 	.word	0x000c414f
   b73c0:	2003e614 	.word	0x2003e614
   b73c4:	000c4178 	.word	0x000c4178
   b73c8:	000c419e 	.word	0x000c419e

000b73cc <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b73cc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b73ce:	4917      	ldr	r1, [pc, #92]	; (b742c <_Z18initializePinModesv+0x60>)
   b73d0:	4817      	ldr	r0, [pc, #92]	; (b7430 <_Z18initializePinModesv+0x64>)
   b73d2:	f7fc feb4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b73d6:	2102      	movs	r1, #2
   b73d8:	2004      	movs	r0, #4
   b73da:	f008 febb 	bl	c0154 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b73de:	2100      	movs	r1, #0
   b73e0:	2008      	movs	r0, #8
   b73e2:	f008 feb7 	bl	c0154 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b73e6:	2101      	movs	r1, #1
   b73e8:	2007      	movs	r0, #7
   b73ea:	f008 feb3 	bl	c0154 <pinMode>
    pinMode(INT_PIN, INPUT);
   b73ee:	2100      	movs	r1, #0
   b73f0:	2012      	movs	r0, #18
   b73f2:	f008 feaf 	bl	c0154 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b73f6:	2101      	movs	r1, #1
   b73f8:	2011      	movs	r0, #17
   b73fa:	f008 feab 	bl	c0154 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b73fe:	2101      	movs	r1, #1
   b7400:	2010      	movs	r0, #16
   b7402:	f008 fea7 	bl	c0154 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b7406:	2100      	movs	r1, #0
   b7408:	2010      	movs	r0, #16
   b740a:	f008 feb4 	bl	c0176 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b740e:	2100      	movs	r1, #0
   b7410:	2011      	movs	r0, #17
   b7412:	f008 feb0 	bl	c0176 <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b7416:	2101      	movs	r1, #1
   b7418:	2006      	movs	r0, #6
   b741a:	f008 fe9b 	bl	c0154 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b741e:	2101      	movs	r1, #1
   b7420:	2006      	movs	r0, #6
   b7422:	f008 fea8 	bl	c0176 <digitalWrite>
    return true;
}
   b7426:	2001      	movs	r0, #1
   b7428:	bd08      	pop	{r3, pc}
   b742a:	bf00      	nop
   b742c:	000c421c 	.word	0x000c421c
   b7430:	2003e658 	.word	0x2003e658

000b7434 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b7434:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b7436:	4918      	ldr	r1, [pc, #96]	; (b7498 <_Z18initializePowerCfgv+0x64>)
   b7438:	4818      	ldr	r0, [pc, #96]	; (b749c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b743a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b743c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b743e:	f7fc fe7e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7442:	4622      	mov	r2, r4
   b7444:	2100      	movs	r1, #0
   b7446:	4668      	mov	r0, sp
   b7448:	f009 fd4a 	bl	c0ee0 <memset>
   b744c:	4622      	mov	r2, r4
   b744e:	2100      	movs	r1, #0
   b7450:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7454:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b7458:	f009 fd42 	bl	c0ee0 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b745c:	2100      	movs	r1, #0
   b745e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b7462:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b7466:	f005 fc93 	bl	bcd90 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b746a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b746e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b7472:	4b0b      	ldr	r3, [pc, #44]	; (b74a0 <_Z18initializePowerCfgv+0x6c>)
   b7474:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b7476:	f241 0370 	movw	r3, #4208	; 0x1070
   b747a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b747e:	9b00      	ldr	r3, [sp, #0]
   b7480:	2100      	movs	r1, #0
   b7482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b7486:	4668      	mov	r0, sp
   b7488:	9300      	str	r3, [sp, #0]
   b748a:	f005 fc81 	bl	bcd90 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b748e:	3800      	subs	r0, #0
   b7490:	bf18      	it	ne
   b7492:	2001      	movne	r0, #1
   b7494:	b010      	add	sp, #64	; 0x40
   b7496:	bd10      	pop	{r4, pc}
   b7498:	000c4235 	.word	0x000c4235
   b749c:	2003e658 	.word	0x2003e658
   b74a0:	03840384 	.word	0x03840384

000b74a4 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b74a4:	ee07 0a90 	vmov	s15, r0
   b74a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b74d0 <_Z17tmp36TemperatureCi+0x2c>
   b74ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b74b0:	ee67 7a87 	vmul.f32	s15, s15, s14
   b74b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; b74d4 <_Z17tmp36TemperatureCi+0x30>
   b74b8:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b74bc:	eddf 7a06 	vldr	s15, [pc, #24]	; b74d8 <_Z17tmp36TemperatureCi+0x34>
   b74c0:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b74c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b74c8:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b74cc:	4770      	bx	lr
   b74ce:	bf00      	nop
   b74d0:	454e4000 	.word	0x454e4000
   b74d4:	457ff000 	.word	0x457ff000
   b74d8:	43fa0000 	.word	0x43fa0000

000b74dc <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b74dc:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b74de:	2101      	movs	r1, #1
   b74e0:	a801      	add	r0, sp, #4
   b74e2:	f007 fd96 	bl	bf012 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b74e6:	f7fe ff4d 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b74ea:	f7ff f86c 	bl	b65c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b74ee:	f7fe ff49 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b74f2:	f7ff f868 	bl	b65c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b74f6:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b74f8:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b74fa:	d90d      	bls.n	b7518 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b74fc:	f007 fe1c 	bl	bf138 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b7500:	f7fe ff40 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b7504:	2101      	movs	r1, #1
   b7506:	f7ff f8e1 	bl	b66cc <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b750a:	2400      	movs	r4, #0
  PMIC pmic(true);
   b750c:	a801      	add	r0, sp, #4
   b750e:	f007 fd8f 	bl	bf030 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b7512:	4620      	mov	r0, r4
   b7514:	b002      	add	sp, #8
   b7516:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b7518:	f007 fdf3 	bl	bf102 <_ZN4PMIC14enableChargingEv>
    return true;
   b751c:	2401      	movs	r4, #1
   b751e:	e7f5      	b.n	b750c <_Z16isItSafeToChargev+0x30>

000b7520 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b7520:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b7522:	4d1b      	ldr	r5, [pc, #108]	; (b7590 <_Z17getSignalStrengthv+0x70>)
   b7524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b7526:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b7528:	ac10      	add	r4, sp, #64	; 0x40
   b752a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b752c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7530:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7534:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b7538:	4916      	ldr	r1, [pc, #88]	; (b7594 <_Z17getSignalStrengthv+0x74>)
   b753a:	a808      	add	r0, sp, #32
   b753c:	f005 fdf8 	bl	bd130 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b7540:	a808      	add	r0, sp, #32
   b7542:	f005 fe38 	bl	bd1b6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b7546:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b7548:	a808      	add	r0, sp, #32
   b754a:	f005 fe6d 	bl	bd228 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b754e:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b7550:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b7554:	f005 fe98 	bl	bd288 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b7558:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b755a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b755e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b7562:	f009 f885 	bl	c0670 <__aeabi_f2d>
   b7566:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b756a:	4628      	mov	r0, r5
   b756c:	f009 f880 	bl	c0670 <__aeabi_f2d>
   b7570:	e9cd 0100 	strd	r0, r1, [sp]
   b7574:	2110      	movs	r1, #16
   b7576:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b757a:	4a07      	ldr	r2, [pc, #28]	; (b7598 <_Z17getSignalStrengthv+0x78>)
   b757c:	eb0d 0001 	add.w	r0, sp, r1
   b7580:	f005 fd04 	bl	bcf8c <snprintf>
  Log.info(signalStr);
   b7584:	4805      	ldr	r0, [pc, #20]	; (b759c <_Z17getSignalStrengthv+0x7c>)
   b7586:	a904      	add	r1, sp, #16
   b7588:	f7fc fdd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b758c:	b01b      	add	sp, #108	; 0x6c
   b758e:	bd30      	pop	{r4, r5, pc}
   b7590:	000c42dc 	.word	0x000c42dc
   b7594:	2003e614 	.word	0x2003e614
   b7598:	000c429a 	.word	0x000c429a
   b759c:	2003e658 	.word	0x2003e658

000b75a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b75a0:	b530      	push	{r4, r5, lr}
   b75a2:	b085      	sub	sp, #20
   b75a4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b75a6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b75a8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b75aa:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b75ac:	f005 fb8a 	bl	bccc4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b75b0:	b990      	cbnz	r0, b75d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b75b2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b75b4:	b10c      	cbz	r4, b75ba <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b75b6:	6923      	ldr	r3, [r4, #16]
   b75b8:	b923      	cbnz	r3, b75c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b75ba:	4a08      	ldr	r2, [pc, #32]	; (b75dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b75bc:	4908      	ldr	r1, [pc, #32]	; (b75e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b75be:	200a      	movs	r0, #10
   b75c0:	f005 fb58 	bl	bcc74 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b75c4:	230c      	movs	r3, #12
   b75c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b75ca:	2304      	movs	r3, #4
   b75cc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b75ce:	aa01      	add	r2, sp, #4
   b75d0:	6923      	ldr	r3, [r4, #16]
   b75d2:	2101      	movs	r1, #1
   b75d4:	4620      	mov	r0, r4
   b75d6:	4798      	blx	r3
}
   b75d8:	b005      	add	sp, #20
   b75da:	bd30      	pop	{r4, r5, pc}
   b75dc:	000bc815 	.word	0x000bc815
   b75e0:	000c42b3 	.word	0x000c42b3

000b75e4 <_Z12batteryStatev>:
bool batteryState() {
   b75e4:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b75e6:	f7fe fecd 	bl	b6384 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b75ea:	a901      	add	r1, sp, #4
   b75ec:	4604      	mov	r4, r0
   b75ee:	2007      	movs	r0, #7
   b75f0:	f7ff ffd6 	bl	b75a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b75f4:	1e01      	subs	r1, r0, #0
        return val;
   b75f6:	bfa8      	it	ge
   b75f8:	9901      	ldrge	r1, [sp, #4]
   b75fa:	4620      	mov	r0, r4
   b75fc:	b2c9      	uxtb	r1, r1
   b75fe:	f7ff f865 	bl	b66cc <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b7602:	4818      	ldr	r0, [pc, #96]	; (b7664 <_Z12batteryStatev+0x80>)
   b7604:	f006 f9e0 	bl	bd9c8 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b7608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b760c:	f005 fd16 	bl	bd03c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b7610:	f7fe feb8 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b7614:	a901      	add	r1, sp, #4
   b7616:	4604      	mov	r4, r0
   b7618:	2003      	movs	r0, #3
   b761a:	f7ff ffc1 	bl	b75a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b761e:	b9e8      	cbnz	r0, b765c <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b7620:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b7624:	ee07 3a90 	vmov	s15, r3
   b7628:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b762c:	ee17 0a90 	vmov	r0, s15
   b7630:	f009 f81e 	bl	c0670 <__aeabi_f2d>
   b7634:	ec41 0b10 	vmov	d0, r0, r1
   b7638:	4620      	mov	r0, r4
   b763a:	f7fe fee9 	bl	b6410 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b763e:	f7fe fea1 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b7642:	f7fe fec5 	bl	b63d0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b7646:	4b08      	ldr	r3, [pc, #32]	; (b7668 <_Z12batteryStatev+0x84>)
   b7648:	ec51 0b10 	vmov	r0, r1, d0
   b764c:	2200      	movs	r2, #0
   b764e:	f009 faf7 	bl	c0c40 <__aeabi_dcmpgt>
}
   b7652:	3800      	subs	r0, #0
   b7654:	bf18      	it	ne
   b7656:	2001      	movne	r0, #1
   b7658:	b002      	add	sp, #8
   b765a:	bd10      	pop	{r4, pc}
            return -1.0f;
   b765c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b7660:	e7e4      	b.n	b762c <_Z12batteryStatev+0x48>
   b7662:	bf00      	nop
   b7664:	2003e4c0 	.word	0x2003e4c0
   b7668:	404e0000 	.word	0x404e0000

000b766c <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b766c:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b766e:	f7fe fe89 	bl	b6384 <_ZN17currentStatusData8instanceEv>
   b7672:	4b0f      	ldr	r3, [pc, #60]	; (b76b0 <_Z16takeMeasurementsv+0x44>)
   b7674:	4604      	mov	r4, r0
   b7676:	8818      	ldrh	r0, [r3, #0]
   b7678:	f008 fda9 	bl	c01ce <analogRead>
   b767c:	f7ff ff12 	bl	b74a4 <_Z17tmp36TemperatureCi>
   b7680:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7684:	4620      	mov	r0, r4
   b7686:	edcd 7a01 	vstr	s15, [sp, #4]
   b768a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b768e:	f7ff f817 	bl	b66c0 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b7692:	f7ff ffa7 	bl	b75e4 <_Z12batteryStatev>
    isItSafeToCharge();
   b7696:	f7ff ff21 	bl	b74dc <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b769a:	f7fe fe3b 	bl	b6314 <_ZN13sysStatusData8instanceEv>
   b769e:	f7fe ff65 	bl	b656c <_ZNK13sysStatusData14get_nodeNumberEv>
   b76a2:	b908      	cbnz	r0, b76a8 <_Z16takeMeasurementsv+0x3c>
   b76a4:	f7ff ff3c 	bl	b7520 <_Z17getSignalStrengthv>
}
   b76a8:	2001      	movs	r0, #1
   b76aa:	b002      	add	sp, #8
   b76ac:	bd10      	pop	{r4, pc}
   b76ae:	bf00      	nop
   b76b0:	000c425a 	.word	0x000c425a

000b76b4 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b76b4:	4801      	ldr	r0, [pc, #4]	; (b76bc <_GLOBAL__sub_I_batteryContext+0x8>)
   b76b6:	2100      	movs	r1, #0
   b76b8:	f006 b942 	b.w	bd940 <_ZN9FuelGaugeC1Eb>
   b76bc:	2003e4c0 	.word	0x2003e4c0

000b76c0 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b76c0:	4770      	bx	lr

000b76c2 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b76c2:	b510      	push	{r4, lr}
}
   b76c4:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b76c6:	4604      	mov	r4, r0
}
   b76c8:	f7fc fce9 	bl	b409e <_ZdlPvj>
   b76cc:	4620      	mov	r0, r4
   b76ce:	bd10      	pop	{r4, pc}

000b76d0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b76d0:	b510      	push	{r4, lr}
   b76d2:	4604      	mov	r4, r0
   b76d4:	b08a      	sub	sp, #40	; 0x28
   b76d6:	4608      	mov	r0, r1
    attr.flags = 0;
   b76d8:	f04f 0c20 	mov.w	ip, #32
   b76dc:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b76de:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b76e2:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b76e6:	460b      	mov	r3, r1
   b76e8:	aa02      	add	r2, sp, #8
   b76ea:	6821      	ldr	r1, [r4, #0]
   b76ec:	f005 fad2 	bl	bcc94 <log_message_v>
}
   b76f0:	b00a      	add	sp, #40	; 0x28
   b76f2:	bd10      	pop	{r4, pc}

000b76f4 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b76f4:	b40e      	push	{r1, r2, r3}
   b76f6:	b503      	push	{r0, r1, lr}
   b76f8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b76fa:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b76fc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7700:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b7702:	f7ff ffe5 	bl	b76d0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7706:	b002      	add	sp, #8
   b7708:	f85d eb04 	ldr.w	lr, [sp], #4
   b770c:	b003      	add	sp, #12
   b770e:	4770      	bx	lr

000b7710 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7710:	b40e      	push	{r1, r2, r3}
   b7712:	b503      	push	{r0, r1, lr}
   b7714:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b7716:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b7718:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b771c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b771e:	f7ff ffd7 	bl	b76d0 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b7722:	b002      	add	sp, #8
   b7724:	f85d eb04 	ldr.w	lr, [sp], #4
   b7728:	b003      	add	sp, #12
   b772a:	4770      	bx	lr

000b772c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b772c:	b510      	push	{r4, lr}
   b772e:	7202      	strb	r2, [r0, #8]
   b7730:	22ff      	movs	r2, #255	; 0xff
   b7732:	8142      	strh	r2, [r0, #10]
   b7734:	2200      	movs	r2, #0
   b7736:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b773a:	6142      	str	r2, [r0, #20]
   b773c:	7602      	strb	r2, [r0, #24]
   b773e:	61c2      	str	r2, [r0, #28]
    instance = this;
   b7740:	4a02      	ldr	r2, [pc, #8]	; (b774c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7742:	4c03      	ldr	r4, [pc, #12]	; (b7750 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b7744:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b7746:	e9c0 4100 	strd	r4, r1, [r0]
}
   b774a:	bd10      	pop	{r4, pc}
   b774c:	2003e4cc 	.word	0x2003e4cc
   b7750:	000c4554 	.word	0x000c4554

000b7754 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b7754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7758:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b775c:	4604      	mov	r4, r0
   b775e:	4689      	mov	r9, r1
   b7760:	4616      	mov	r6, r2
   b7762:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b7764:	f1b8 0f00 	cmp.w	r8, #0
   b7768:	d002      	beq.n	b7770 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b776a:	6840      	ldr	r0, [r0, #4]
   b776c:	f006 f9d2 	bl	bdb14 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7770:	7a21      	ldrb	r1, [r4, #8]
   b7772:	6860      	ldr	r0, [r4, #4]
   b7774:	f006 f9ab 	bl	bdace <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7778:	6860      	ldr	r0, [r4, #4]
   b777a:	6803      	ldr	r3, [r0, #0]
   b777c:	4649      	mov	r1, r9
   b777e:	689b      	ldr	r3, [r3, #8]
   b7780:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7782:	6860      	ldr	r0, [r4, #4]
   b7784:	2100      	movs	r1, #0
   b7786:	f006 f9c1 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b778a:	4605      	mov	r5, r0
   b778c:	bb00      	cbnz	r0, b77d0 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b778e:	2301      	movs	r3, #1
   b7790:	7a21      	ldrb	r1, [r4, #8]
   b7792:	6860      	ldr	r0, [r4, #4]
   b7794:	463a      	mov	r2, r7
   b7796:	f006 f988 	bl	bdaaa <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b779a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b779c:	4603      	mov	r3, r0
        if (count == num) {
   b779e:	d109      	bne.n	b77b4 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b77a0:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b77a2:	42be      	cmp	r6, r7
   b77a4:	d01c      	beq.n	b77e0 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b77a6:	6860      	ldr	r0, [r4, #4]
   b77a8:	6803      	ldr	r3, [r0, #0]
   b77aa:	695b      	ldr	r3, [r3, #20]
   b77ac:	4798      	blx	r3
   b77ae:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b77b2:	e7f6      	b.n	b77a2 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b77b4:	490b      	ldr	r1, [pc, #44]	; (b77e4 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b77b6:	480c      	ldr	r0, [pc, #48]	; (b77e8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b77b8:	464a      	mov	r2, r9
   b77ba:	f7ff ff9b 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b77be:	f1b8 0f00 	cmp.w	r8, #0
   b77c2:	d002      	beq.n	b77ca <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b77c4:	6860      	ldr	r0, [r4, #4]
   b77c6:	f006 f9ae 	bl	bdb26 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b77ca:	4628      	mov	r0, r5
   b77cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b77d0:	4603      	mov	r3, r0
   b77d2:	4906      	ldr	r1, [pc, #24]	; (b77ec <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b77d4:	4804      	ldr	r0, [pc, #16]	; (b77e8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b77d6:	464a      	mov	r2, r9
   b77d8:	f7ff ff8c 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b77dc:	2500      	movs	r5, #0
   b77de:	e7ee      	b.n	b77be <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b77e0:	2501      	movs	r5, #1
   b77e2:	e7ec      	b.n	b77be <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b77e4:	000c4304 	.word	0x000c4304
   b77e8:	2003e4c8 	.word	0x2003e4c8
   b77ec:	000c4329 	.word	0x000c4329

000b77f0 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b77f0:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b77f2:	9300      	str	r3, [sp, #0]
   b77f4:	2301      	movs	r3, #1
   b77f6:	f7ff ffad 	bl	b7754 <_ZN6AB180513readRegistersEhPhjb>
}
   b77fa:	b003      	add	sp, #12
   b77fc:	f85d fb04 	ldr.w	pc, [sp], #4

000b7800 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7800:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7802:	8943      	ldrh	r3, [r0, #10]
   b7804:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7806:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7808:	d010      	beq.n	b782c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b780a:	4e19      	ldr	r6, [pc, #100]	; (b7870 <_ZN6AB180510detectChipEv+0x70>)
   b780c:	4d19      	ldr	r5, [pc, #100]	; (b7874 <_ZN6AB180510detectChipEv+0x74>)
   b780e:	f005 f809 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7812:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7816:	d209      	bcs.n	b782c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7818:	8960      	ldrh	r0, [r4, #10]
   b781a:	f008 fcc5 	bl	c01a8 <digitalRead>
   b781e:	2801      	cmp	r0, #1
   b7820:	d004      	beq.n	b782c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7822:	4631      	mov	r1, r6
   b7824:	4628      	mov	r0, r5
   b7826:	f7fc fc8a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b782a:	e7f0      	b.n	b780e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b782c:	2301      	movs	r3, #1
   b782e:	f10d 0207 	add.w	r2, sp, #7
   b7832:	2128      	movs	r1, #40	; 0x28
   b7834:	4620      	mov	r0, r4
   b7836:	f7ff ffdb 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b783a:	b930      	cbnz	r0, b784a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b783c:	480d      	ldr	r0, [pc, #52]	; (b7874 <_ZN6AB180510detectChipEv+0x74>)
   b783e:	490e      	ldr	r1, [pc, #56]	; (b7878 <_ZN6AB180510detectChipEv+0x78>)
   b7840:	f7fc fc7d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7844:	2000      	movs	r0, #0
}
   b7846:	b002      	add	sp, #8
   b7848:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b784a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b784e:	2b18      	cmp	r3, #24
   b7850:	d1f4      	bne.n	b783c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7852:	2301      	movs	r3, #1
   b7854:	f10d 0207 	add.w	r2, sp, #7
   b7858:	2129      	movs	r1, #41	; 0x29
   b785a:	4620      	mov	r0, r4
   b785c:	f7ff ffc8 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7860:	2800      	cmp	r0, #0
   b7862:	d0eb      	beq.n	b783c <_ZN6AB180510detectChipEv+0x3c>
   b7864:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7868:	2b05      	cmp	r3, #5
   b786a:	d1e7      	bne.n	b783c <_ZN6AB180510detectChipEv+0x3c>
   b786c:	e7eb      	b.n	b7846 <_ZN6AB180510detectChipEv+0x46>
   b786e:	bf00      	nop
   b7870:	000c434d 	.word	0x000c434d
   b7874:	2003e4c8 	.word	0x2003e4c8
   b7878:	000c4362 	.word	0x000c4362

000b787c <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b787c:	b507      	push	{r0, r1, r2, lr}
   b787e:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7880:	2200      	movs	r2, #0
   b7882:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7886:	f10d 0207 	add.w	r2, sp, #7
   b788a:	f7ff ffb1 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b788e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7892:	b003      	add	sp, #12
   b7894:	f85d fb04 	ldr.w	pc, [sp], #4

000b7898 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b789c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b78a0:	4604      	mov	r4, r0
   b78a2:	460f      	mov	r7, r1
   b78a4:	4615      	mov	r5, r2
   b78a6:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b78a8:	f1b8 0f00 	cmp.w	r8, #0
   b78ac:	d002      	beq.n	b78b4 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b78ae:	6840      	ldr	r0, [r0, #4]
   b78b0:	f006 f930 	bl	bdb14 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b78b4:	7a21      	ldrb	r1, [r4, #8]
   b78b6:	6860      	ldr	r0, [r4, #4]
   b78b8:	f006 f909 	bl	bdace <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b78bc:	6860      	ldr	r0, [r4, #4]
   b78be:	6803      	ldr	r3, [r0, #0]
   b78c0:	4639      	mov	r1, r7
   b78c2:	689b      	ldr	r3, [r3, #8]
   b78c4:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b78c6:	442e      	add	r6, r5
   b78c8:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b78ca:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b78cc:	d005      	beq.n	b78da <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b78ce:	6803      	ldr	r3, [r0, #0]
   b78d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b78d4:	689b      	ldr	r3, [r3, #8]
   b78d6:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b78d8:	e7f6      	b.n	b78c8 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b78da:	2101      	movs	r1, #1
   b78dc:	f006 f916 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b78e0:	4603      	mov	r3, r0
   b78e2:	b170      	cbz	r0, b7902 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b78e4:	4908      	ldr	r1, [pc, #32]	; (b7908 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b78e6:	4809      	ldr	r0, [pc, #36]	; (b790c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b78e8:	463a      	mov	r2, r7
   b78ea:	f7ff ff03 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b78ee:	2500      	movs	r5, #0
    }

    if (lock) {
   b78f0:	f1b8 0f00 	cmp.w	r8, #0
   b78f4:	d002      	beq.n	b78fc <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b78f6:	6860      	ldr	r0, [r4, #4]
   b78f8:	f006 f915 	bl	bdb26 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b78fc:	4628      	mov	r0, r5
   b78fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7902:	2501      	movs	r5, #1
   b7904:	e7f4      	b.n	b78f0 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b7906:	bf00      	nop
   b7908:	000c436f 	.word	0x000c436f
   b790c:	2003e4c8 	.word	0x2003e4c8

000b7910 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7912:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b7916:	9300      	str	r3, [sp, #0]
   b7918:	f10d 020f 	add.w	r2, sp, #15
   b791c:	2301      	movs	r3, #1
   b791e:	f7ff ffbb 	bl	b7898 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7922:	b005      	add	sp, #20
   b7924:	f85d fb04 	ldr.w	pc, [sp], #4

000b7928 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b792a:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b792c:	460c      	mov	r4, r1
   b792e:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7930:	491a      	ldr	r1, [pc, #104]	; (b799c <_ZN6AB18056setWDTEi+0x74>)
   b7932:	481b      	ldr	r0, [pc, #108]	; (b79a0 <_ZN6AB18056setWDTEi+0x78>)
   b7934:	f7fc fc03 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7938:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b793a:	bfb8      	it	lt
   b793c:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b793e:	b97c      	cbnz	r4, b7960 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7940:	2301      	movs	r3, #1
   b7942:	4622      	mov	r2, r4
   b7944:	211b      	movs	r1, #27
   b7946:	4628      	mov	r0, r5
   b7948:	f7ff ffe2 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b794c:	4915      	ldr	r1, [pc, #84]	; (b79a4 <_ZN6AB18056setWDTEi+0x7c>)
   b794e:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7950:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7952:	4813      	ldr	r0, [pc, #76]	; (b79a0 <_ZN6AB18056setWDTEi+0x78>)
   b7954:	f7ff fedc 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7958:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b795a:	616c      	str	r4, [r5, #20]
}
   b795c:	4630      	mov	r0, r6
   b795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7960:	2c03      	cmp	r4, #3
   b7962:	dd19      	ble.n	b7998 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7964:	10a7      	asrs	r7, r4, #2
   b7966:	2f1f      	cmp	r7, #31
   b7968:	bfa8      	it	ge
   b796a:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b796c:	00ba      	lsls	r2, r7, #2
   b796e:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7972:	2301      	movs	r3, #1
   b7974:	b2d2      	uxtb	r2, r2
   b7976:	211b      	movs	r1, #27
   b7978:	4628      	mov	r0, r5
   b797a:	f7ff ffc9 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b797e:	463a      	mov	r2, r7
   b7980:	4603      	mov	r3, r0
   b7982:	4909      	ldr	r1, [pc, #36]	; (b79a8 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7984:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7986:	4806      	ldr	r0, [pc, #24]	; (b79a0 <_ZN6AB18056setWDTEi+0x78>)
   b7988:	f7ff fec2 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b798c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7990:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7992:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7994:	616f      	str	r7, [r5, #20]
   b7996:	e7e1      	b.n	b795c <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7998:	2701      	movs	r7, #1
   b799a:	e7e7      	b.n	b796c <_ZN6AB18056setWDTEi+0x44>
   b799c:	000c4394 	.word	0x000c4394
   b79a0:	2003e4c8 	.word	0x2003e4c8
   b79a4:	000c439e 	.word	0x000c439e
   b79a8:	000c43ba 	.word	0x000c43ba

000b79ac <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b79ac:	4b06      	ldr	r3, [pc, #24]	; (b79c8 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b79ae:	681a      	ldr	r2, [r3, #0]
   b79b0:	b14a      	cbz	r2, b79c6 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b79b2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b79b6:	430b      	orrs	r3, r1
   b79b8:	d105      	bne.n	b79c6 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b79ba:	68d3      	ldr	r3, [r2, #12]
   b79bc:	b11b      	cbz	r3, b79c6 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b79be:	2100      	movs	r1, #0
   b79c0:	4610      	mov	r0, r2
   b79c2:	f7ff bfb1 	b.w	b7928 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b79c6:	4770      	bx	lr
   b79c8:	2003e4cc 	.word	0x2003e4cc

000b79cc <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b79cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b79d0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b79d4:	4605      	mov	r5, r0
   b79d6:	4616      	mov	r6, r2
   b79d8:	461f      	mov	r7, r3
    if (lock) {
   b79da:	f1b8 0f00 	cmp.w	r8, #0
   b79de:	d004      	beq.n	b79ea <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b79e0:	6840      	ldr	r0, [r0, #4]
   b79e2:	9101      	str	r1, [sp, #4]
   b79e4:	f006 f896 	bl	bdb14 <_ZN7TwoWire4lockEv>
   b79e8:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b79ea:	9101      	str	r1, [sp, #4]
   b79ec:	2300      	movs	r3, #0
   b79ee:	f10d 020f 	add.w	r2, sp, #15
   b79f2:	4628      	mov	r0, r5
   b79f4:	f7ff fefc 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b79f8:	4604      	mov	r4, r0
   b79fa:	b160      	cbz	r0, b7a16 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b79fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7a00:	ea03 0206 	and.w	r2, r3, r6
   b7a04:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7a06:	4293      	cmp	r3, r2
   b7a08:	d005      	beq.n	b7a16 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7a0a:	9901      	ldr	r1, [sp, #4]
   b7a0c:	2300      	movs	r3, #0
   b7a0e:	4628      	mov	r0, r5
   b7a10:	f7ff ff7e 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
   b7a14:	4604      	mov	r4, r0
    if (lock) {
   b7a16:	f1b8 0f00 	cmp.w	r8, #0
   b7a1a:	d002      	beq.n	b7a22 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7a1c:	6868      	ldr	r0, [r5, #4]
   b7a1e:	f006 f882 	bl	bdb26 <_ZN7TwoWire6unlockEv>
}
   b7a22:	4620      	mov	r0, r4
   b7a24:	b004      	add	sp, #16
   b7a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a2a <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7a2a:	b513      	push	{r0, r1, r4, lr}
   b7a2c:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7a2e:	f10d 0207 	add.w	r2, sp, #7
   b7a32:	f7ff fedd 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7a36:	b128      	cbz	r0, b7a44 <_ZN6AB180510isBitClearEhhb+0x1a>
   b7a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7a3c:	421c      	tst	r4, r3
   b7a3e:	bf0c      	ite	eq
   b7a40:	2001      	moveq	r0, #1
   b7a42:	2000      	movne	r0, #0
}
   b7a44:	b002      	add	sp, #8
   b7a46:	bd10      	pop	{r4, pc}

000b7a48 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7a48:	b513      	push	{r0, r1, r4, lr}
   b7a4a:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7a4c:	f10d 0207 	add.w	r2, sp, #7
   b7a50:	f7ff fece 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7a54:	b128      	cbz	r0, b7a62 <_ZN6AB18058isBitSetEhhb+0x1a>
   b7a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7a5a:	421c      	tst	r4, r3
   b7a5c:	bf14      	ite	ne
   b7a5e:	2001      	movne	r0, #1
   b7a60:	2000      	moveq	r0, #0
}
   b7a62:	b002      	add	sp, #8
   b7a64:	bd10      	pop	{r4, pc}

000b7a66 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7a66:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7a68:	43d2      	mvns	r2, r2
   b7a6a:	9300      	str	r3, [sp, #0]
   b7a6c:	b2d2      	uxtb	r2, r2
   b7a6e:	2300      	movs	r3, #0
   b7a70:	f7ff ffac 	bl	b79cc <_ZN6AB180512maskRegisterEhhhb>
}
   b7a74:	b003      	add	sp, #12
   b7a76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7a7c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7a7e:	2301      	movs	r3, #1
   b7a80:	f10d 0207 	add.w	r2, sp, #7
   b7a84:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7a86:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7a88:	f7ff feb2 	bl	b77f0 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7a8c:	4605      	mov	r5, r0
   b7a8e:	b938      	cbnz	r0, b7aa0 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7a90:	491e      	ldr	r1, [pc, #120]	; (b7b0c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7a92:	481f      	ldr	r0, [pc, #124]	; (b7b10 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7a94:	22ad      	movs	r2, #173	; 0xad
   b7a96:	f7ff fe2d 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
}
   b7a9a:	4628      	mov	r0, r5
   b7a9c:	b003      	add	sp, #12
   b7a9e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7aa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7aa4:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7aa8:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7aac:	d00b      	beq.n	b7ac6 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7aae:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7ab0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7ab2:	210f      	movs	r1, #15
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	f7ff ffd6 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7aba:	4a16      	ldr	r2, [pc, #88]	; (b7b14 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7abc:	4916      	ldr	r1, [pc, #88]	; (b7b18 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7abe:	4814      	ldr	r0, [pc, #80]	; (b7b10 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7ac0:	f7fc fb3d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7ac4:	e7e9      	b.n	b7a9a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7ac6:	2208      	movs	r2, #8
   b7ac8:	2117      	movs	r1, #23
   b7aca:	4620      	mov	r0, r4
   b7acc:	f7ff ffbc 	bl	b7a48 <_ZN6AB18058isBitSetEhhb>
   b7ad0:	b118      	cbz	r0, b7ada <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7ad2:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7ad4:	4a11      	ldr	r2, [pc, #68]	; (b7b1c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7ad6:	61e3      	str	r3, [r4, #28]
   b7ad8:	e7f0      	b.n	b7abc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7ade:	071a      	lsls	r2, r3, #28
   b7ae0:	d509      	bpl.n	b7af6 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7ae2:	2303      	movs	r3, #3
   b7ae4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7ae6:	2208      	movs	r2, #8
   b7ae8:	2301      	movs	r3, #1
   b7aea:	210f      	movs	r1, #15
   b7aec:	4620      	mov	r0, r4
   b7aee:	f7ff ffba 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7af2:	4a0b      	ldr	r2, [pc, #44]	; (b7b20 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7af4:	e7e2      	b.n	b7abc <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7af6:	075b      	lsls	r3, r3, #29
   b7af8:	d5cf      	bpl.n	b7a9a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7afa:	2204      	movs	r2, #4
   b7afc:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7afe:	2301      	movs	r3, #1
   b7b00:	210f      	movs	r1, #15
   b7b02:	4620      	mov	r0, r4
   b7b04:	f7ff ffaf 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7b08:	4a06      	ldr	r2, [pc, #24]	; (b7b24 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7b0a:	e7d7      	b.n	b7abc <_ZN6AB180516updateWakeReasonEv+0x40>
   b7b0c:	000c440d 	.word	0x000c440d
   b7b10:	2003e4c8 	.word	0x2003e4c8
   b7b14:	000c43de 	.word	0x000c43de
   b7b18:	000c442c 	.word	0x000c442c
   b7b1c:	000c43e7 	.word	0x000c43e7
   b7b20:	000c43f7 	.word	0x000c43f7
   b7b24:	000c4407 	.word	0x000c4407

000b7b28 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7b28:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7b2a:	9300      	str	r3, [sp, #0]
   b7b2c:	4613      	mov	r3, r2
   b7b2e:	22ff      	movs	r2, #255	; 0xff
   b7b30:	f7ff ff4c 	bl	b79cc <_ZN6AB180512maskRegisterEhhhb>
}
   b7b34:	b003      	add	sp, #12
   b7b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b3c <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b3e:	460f      	mov	r7, r1
   b7b40:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7b42:	2301      	movs	r3, #1
   b7b44:	2200      	movs	r2, #0
   b7b46:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7b48:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7b4a:	f7ff fee1 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7b4e:	4604      	mov	r4, r0
   b7b50:	b938      	cbnz	r0, b7b62 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7b52:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7b56:	491f      	ldr	r1, [pc, #124]	; (b7bd4 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7b58:	481f      	ldr	r0, [pc, #124]	; (b7bd8 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7b5a:	f7ff fdcb 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
}
   b7b5e:	4620      	mov	r0, r4
   b7b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7b62:	2301      	movs	r3, #1
   b7b64:	2223      	movs	r2, #35	; 0x23
   b7b66:	2118      	movs	r1, #24
   b7b68:	4628      	mov	r0, r5
   b7b6a:	f7ff fed1 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7b6e:	4604      	mov	r4, r0
   b7b70:	b910      	cbnz	r0, b7b78 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7b72:	f240 229b 	movw	r2, #667	; 0x29b
   b7b76:	e7ee      	b.n	b7b56 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7b78:	2fff      	cmp	r7, #255	; 0xff
   b7b7a:	bfa8      	it	ge
   b7b7c:	27ff      	movge	r7, #255	; 0xff
   b7b7e:	2f01      	cmp	r7, #1
   b7b80:	bfb8      	it	lt
   b7b82:	2701      	movlt	r7, #1
   b7b84:	2301      	movs	r3, #1
   b7b86:	b2fa      	uxtb	r2, r7
   b7b88:	2119      	movs	r1, #25
   b7b8a:	4628      	mov	r0, r5
   b7b8c:	f7ff fec0 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7b90:	4604      	mov	r4, r0
   b7b92:	b910      	cbnz	r0, b7b9a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7b94:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7b98:	e7dd      	b.n	b7b56 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7b9a:	2301      	movs	r3, #1
   b7b9c:	2208      	movs	r2, #8
   b7b9e:	2112      	movs	r1, #18
   b7ba0:	4628      	mov	r0, r5
   b7ba2:	f7ff ffc1 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7ba6:	4604      	mov	r4, r0
   b7ba8:	b910      	cbnz	r0, b7bb0 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7baa:	f240 22af 	movw	r2, #687	; 0x2af
   b7bae:	e7d2      	b.n	b7b56 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7bb0:	2e00      	cmp	r6, #0
   b7bb2:	bf14      	ite	ne
   b7bb4:	2203      	movne	r2, #3
   b7bb6:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7bb8:	2301      	movs	r3, #1
   b7bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7bbe:	2118      	movs	r1, #24
   b7bc0:	4628      	mov	r0, r5
   b7bc2:	f7ff fea5 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7bc6:	4604      	mov	r4, r0
   b7bc8:	2800      	cmp	r0, #0
   b7bca:	d1c8      	bne.n	b7b5e <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7bcc:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7bd0:	e7c1      	b.n	b7b56 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7bd2:	bf00      	nop
   b7bd4:	000c443d 	.word	0x000c443d
   b7bd8:	2003e4c8 	.word	0x2003e4c8

000b7bdc <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7be0:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7be2:	4605      	mov	r5, r0
   b7be4:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7be6:	484f      	ldr	r0, [pc, #316]	; (b7d24 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7be8:	494f      	ldr	r1, [pc, #316]	; (b7d28 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7bea:	f7fc faa8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7bee:	2100      	movs	r1, #0
   b7bf0:	4628      	mov	r0, r5
   b7bf2:	f7ff fe99 	bl	b7928 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7bf6:	4604      	mov	r4, r0
   b7bf8:	b948      	cbnz	r0, b7c0e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7bfa:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7bfe:	494b      	ldr	r1, [pc, #300]	; (b7d2c <_ZN6AB180513deepPowerDownEi+0x150>)
   b7c00:	4848      	ldr	r0, [pc, #288]	; (b7d24 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7c02:	f7ff fd77 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
}
   b7c06:	4620      	mov	r0, r4
   b7c08:	b003      	add	sp, #12
   b7c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7c0e:	2301      	movs	r3, #1
   b7c10:	461a      	mov	r2, r3
   b7c12:	2130      	movs	r1, #48	; 0x30
   b7c14:	4628      	mov	r0, r5
   b7c16:	f7ff ff87 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7c1a:	4604      	mov	r4, r0
   b7c1c:	b910      	cbnz	r0, b7c24 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7c1e:	f240 2205 	movw	r2, #517	; 0x205
   b7c22:	e7ec      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7c24:	2210      	movs	r2, #16
   b7c26:	2301      	movs	r3, #1
   b7c28:	4611      	mov	r1, r2
   b7c2a:	4628      	mov	r0, r5
   b7c2c:	f7ff ff1b 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7c30:	4604      	mov	r4, r0
   b7c32:	b910      	cbnz	r0, b7c3a <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7c34:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7c38:	e7e1      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b7c3a:	2301      	movs	r3, #1
   b7c3c:	2226      	movs	r2, #38	; 0x26
   b7c3e:	2113      	movs	r1, #19
   b7c40:	4628      	mov	r0, r5
   b7c42:	f7ff fe65 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7c46:	4604      	mov	r4, r0
   b7c48:	b910      	cbnz	r0, b7c50 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b7c4a:	f240 2213 	movw	r2, #531	; 0x213
   b7c4e:	e7d6      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7c50:	2601      	movs	r6, #1
   b7c52:	9600      	str	r6, [sp, #0]
   b7c54:	4633      	mov	r3, r6
   b7c56:	22fc      	movs	r2, #252	; 0xfc
   b7c58:	2111      	movs	r1, #17
   b7c5a:	4628      	mov	r0, r5
   b7c5c:	f7ff feb6 	bl	b79cc <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7c60:	4604      	mov	r4, r0
   b7c62:	b910      	cbnz	r0, b7c6a <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b7c64:	f240 221b 	movw	r2, #539	; 0x21b
   b7c68:	e7c9      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b7c6a:	2200      	movs	r2, #0
   b7c6c:	4639      	mov	r1, r7
   b7c6e:	4628      	mov	r0, r5
   b7c70:	f7ff ff64 	bl	b7b3c <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b7c74:	4604      	mov	r4, r0
   b7c76:	b910      	cbnz	r0, b7c7e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b7c78:	f240 2222 	movw	r2, #546	; 0x222
   b7c7c:	e7bf      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b7c7e:	9600      	str	r6, [sp, #0]
   b7c80:	2302      	movs	r3, #2
   b7c82:	2277      	movs	r2, #119	; 0x77
   b7c84:	2110      	movs	r1, #16
   b7c86:	4628      	mov	r0, r5
   b7c88:	f7ff fea0 	bl	b79cc <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7c8c:	4604      	mov	r4, r0
   b7c8e:	b910      	cbnz	r0, b7c96 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b7c90:	f240 222b 	movw	r2, #555	; 0x22b
   b7c94:	e7b3      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b7c96:	4633      	mov	r3, r6
   b7c98:	2204      	movs	r2, #4
   b7c9a:	211c      	movs	r1, #28
   b7c9c:	4628      	mov	r0, r5
   b7c9e:	f7ff ff43 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7ca2:	4604      	mov	r4, r0
   b7ca4:	b910      	cbnz	r0, b7cac <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b7ca6:	f240 2232 	movw	r2, #562	; 0x232
   b7caa:	e7a8      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7cac:	9600      	str	r6, [sp, #0]
   b7cae:	2318      	movs	r3, #24
   b7cb0:	22e3      	movs	r2, #227	; 0xe3
   b7cb2:	2111      	movs	r1, #17
   b7cb4:	4628      	mov	r0, r5
   b7cb6:	f7ff fe89 	bl	b79cc <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7cba:	4604      	mov	r4, r0
   b7cbc:	b910      	cbnz	r0, b7cc4 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7cbe:	f240 2239 	movw	r2, #569	; 0x239
   b7cc2:	e79c      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7cc4:	4633      	mov	r3, r6
   b7cc6:	22c0      	movs	r2, #192	; 0xc0
   b7cc8:	2117      	movs	r1, #23
   b7cca:	4628      	mov	r0, r5
   b7ccc:	f7ff fe20 	bl	b7910 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7cd0:	4604      	mov	r4, r0
   b7cd2:	b910      	cbnz	r0, b7cda <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7cd4:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7cd8:	e791      	b.n	b7bfe <_ZN6AB180513deepPowerDownEi+0x22>
   b7cda:	f004 fda3 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7cde:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7d34 <_ZN6AB180513deepPowerDownEi+0x158>
   b7ce2:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7d24 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7ce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7cea:	4606      	mov	r6, r0
   b7cec:	434f      	muls	r7, r1
   b7cee:	f004 fd99 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   b7cf2:	1b80      	subs	r0, r0, r6
   b7cf4:	42b8      	cmp	r0, r7
   b7cf6:	d20e      	bcs.n	b7d16 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7cf8:	2201      	movs	r2, #1
   b7cfa:	2117      	movs	r1, #23
   b7cfc:	4628      	mov	r0, r5
   b7cfe:	f7ff fdbd 	bl	b787c <_ZN6AB180512readRegisterEhb>
   b7d02:	4649      	mov	r1, r9
   b7d04:	4602      	mov	r2, r0
   b7d06:	4640      	mov	r0, r8
   b7d08:	f7fc fa19 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7d10:	f005 f994 	bl	bd03c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7d14:	e7eb      	b.n	b7cee <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7d16:	4906      	ldr	r1, [pc, #24]	; (b7d30 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7d18:	4802      	ldr	r0, [pc, #8]	; (b7d24 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7d1a:	f7ff fceb 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7d1e:	f007 fe26 	bl	bf96e <_ZN11SystemClass5resetEv>
    return true;
   b7d22:	e770      	b.n	b7c06 <_ZN6AB180513deepPowerDownEi+0x2a>
   b7d24:	2003e4c8 	.word	0x2003e4c8
   b7d28:	000c4468 	.word	0x000c4468
   b7d2c:	000c445d 	.word	0x000c445d
   b7d30:	000c448e 	.word	0x000c448e
   b7d34:	000c4479 	.word	0x000c4479

000b7d38 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7d38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7d3c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7d40:	4605      	mov	r5, r0
   b7d42:	460c      	mov	r4, r1
   b7d44:	4691      	mov	r9, r2
   b7d46:	461f      	mov	r7, r3
    if (lock) {
   b7d48:	f1ba 0f00 	cmp.w	sl, #0
   b7d4c:	d002      	beq.n	b7d54 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b7d4e:	6840      	ldr	r0, [r0, #4]
   b7d50:	f005 fee0 	bl	bdb14 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7d54:	b307      	cbz	r7, b7d98 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b7d56:	2f20      	cmp	r7, #32
   b7d58:	463e      	mov	r6, r7
   b7d5a:	bf28      	it	cs
   b7d5c:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7d5e:	2c7f      	cmp	r4, #127	; 0x7f
   b7d60:	d826      	bhi.n	b7db0 <_ZN6AB18057readRamEjPhjb+0x78>
   b7d62:	1933      	adds	r3, r6, r4
   b7d64:	2b80      	cmp	r3, #128	; 0x80
   b7d66:	d901      	bls.n	b7d6c <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b7d68:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7d6c:	2301      	movs	r3, #1
   b7d6e:	2204      	movs	r2, #4
   b7d70:	213f      	movs	r1, #63	; 0x3f
   b7d72:	4628      	mov	r0, r5
   b7d74:	f7ff fe77 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7d78:	2300      	movs	r3, #0
   b7d7a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7d7e:	9300      	str	r3, [sp, #0]
   b7d80:	464a      	mov	r2, r9
   b7d82:	4633      	mov	r3, r6
   b7d84:	b2c9      	uxtb	r1, r1
   b7d86:	4628      	mov	r0, r5
   b7d88:	f7ff fce4 	bl	b7754 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b7d8c:	4680      	mov	r8, r0
   b7d8e:	b128      	cbz	r0, b7d9c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b7d90:	4434      	add	r4, r6
        dataLen -= count;
   b7d92:	1bbf      	subs	r7, r7, r6
        data += count;
   b7d94:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7d96:	e7dd      	b.n	b7d54 <_ZN6AB18057readRamEjPhjb+0x1c>
   b7d98:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7d9c:	f1ba 0f00 	cmp.w	sl, #0
   b7da0:	d002      	beq.n	b7da8 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b7da2:	6868      	ldr	r0, [r5, #4]
   b7da4:	f005 febf 	bl	bdb26 <_ZN7TwoWire6unlockEv>
}
   b7da8:	4640      	mov	r0, r8
   b7daa:	b002      	add	sp, #8
   b7dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7db0:	2301      	movs	r3, #1
   b7db2:	2204      	movs	r2, #4
   b7db4:	213f      	movs	r1, #63	; 0x3f
   b7db6:	4628      	mov	r0, r5
   b7db8:	f7ff feb6 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
   b7dbc:	e7dc      	b.n	b7d78 <_ZN6AB18057readRamEjPhjb+0x40>

000b7dbe <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b7dbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7dc2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7dc6:	4605      	mov	r5, r0
   b7dc8:	460c      	mov	r4, r1
   b7dca:	4691      	mov	r9, r2
   b7dcc:	461f      	mov	r7, r3
    if (lock) {
   b7dce:	f1ba 0f00 	cmp.w	sl, #0
   b7dd2:	d002      	beq.n	b7dda <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b7dd4:	6840      	ldr	r0, [r0, #4]
   b7dd6:	f005 fe9d 	bl	bdb14 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7dda:	b307      	cbz	r7, b7e1e <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b7ddc:	2f1f      	cmp	r7, #31
   b7dde:	463e      	mov	r6, r7
   b7de0:	bf28      	it	cs
   b7de2:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7de4:	2c7f      	cmp	r4, #127	; 0x7f
   b7de6:	d826      	bhi.n	b7e36 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b7de8:	1933      	adds	r3, r6, r4
   b7dea:	2b80      	cmp	r3, #128	; 0x80
   b7dec:	d901      	bls.n	b7df2 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b7dee:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7df2:	2301      	movs	r3, #1
   b7df4:	2204      	movs	r2, #4
   b7df6:	213f      	movs	r1, #63	; 0x3f
   b7df8:	4628      	mov	r0, r5
   b7dfa:	f7ff fe34 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b7dfe:	2300      	movs	r3, #0
   b7e00:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b7e04:	9300      	str	r3, [sp, #0]
   b7e06:	464a      	mov	r2, r9
   b7e08:	4633      	mov	r3, r6
   b7e0a:	b2c9      	uxtb	r1, r1
   b7e0c:	4628      	mov	r0, r5
   b7e0e:	f7ff fd43 	bl	b7898 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b7e12:	4680      	mov	r8, r0
   b7e14:	b128      	cbz	r0, b7e22 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b7e16:	4434      	add	r4, r6
        dataLen -= count;
   b7e18:	1bbf      	subs	r7, r7, r6
        data += count;
   b7e1a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b7e1c:	e7dd      	b.n	b7dda <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b7e1e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b7e22:	f1ba 0f00 	cmp.w	sl, #0
   b7e26:	d002      	beq.n	b7e2e <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b7e28:	6868      	ldr	r0, [r5, #4]
   b7e2a:	f005 fe7c 	bl	bdb26 <_ZN7TwoWire6unlockEv>
}
   b7e2e:	4640      	mov	r0, r8
   b7e30:	b002      	add	sp, #8
   b7e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b7e36:	2301      	movs	r3, #1
   b7e38:	2204      	movs	r2, #4
   b7e3a:	213f      	movs	r1, #63	; 0x3f
   b7e3c:	4628      	mov	r0, r5
   b7e3e:	f7ff fe73 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
   b7e42:	e7dc      	b.n	b7dfe <_ZN6AB18058writeRamEjPKhjb+0x40>

000b7e44 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b7e44:	b530      	push	{r4, r5, lr}
   b7e46:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7e48:	680d      	ldr	r5, [r1, #0]
   b7e4a:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b7e4e:	9503      	str	r5, [sp, #12]
   b7e50:	684d      	ldr	r5, [r1, #4]
   b7e52:	9502      	str	r5, [sp, #8]
   b7e54:	688d      	ldr	r5, [r1, #8]
   b7e56:	9501      	str	r5, [sp, #4]
   b7e58:	68c9      	ldr	r1, [r1, #12]
   b7e5a:	9100      	str	r1, [sp, #0]
   b7e5c:	3301      	adds	r3, #1
   b7e5e:	4904      	ldr	r1, [pc, #16]	; (b7e70 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b7e60:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b7e64:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b7e66:	f007 fd1b 	bl	bf8a0 <_ZN6String6formatEPKcz>
}
   b7e6a:	4620      	mov	r0, r4
   b7e6c:	b005      	add	sp, #20
   b7e6e:	bd30      	pop	{r4, r5, pc}
   b7e70:	000c44a0 	.word	0x000c44a0

000b7e74 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7e74:	0903      	lsrs	r3, r0, #4
}
   b7e76:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b7e78:	f000 000f 	and.w	r0, r0, #15
}
   b7e7c:	fb02 0003 	mla	r0, r2, r3, r0
   b7e80:	4770      	bx	lr

000b7e82 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7e82:	b538      	push	{r3, r4, r5, lr}
   b7e84:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b7e86:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b7e88:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b7e8a:	f7ff fff3 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7e8e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b7e90:	7860      	ldrb	r0, [r4, #1]
   b7e92:	f7ff ffef 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7e96:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b7e98:	78a0      	ldrb	r0, [r4, #2]
   b7e9a:	f7ff ffeb 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7e9e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b7ea0:	78e0      	ldrb	r0, [r4, #3]
   b7ea2:	f7ff ffe7 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7ea6:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7ea8:	7920      	ldrb	r0, [r4, #4]
   b7eaa:	f7ff ffe3 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7eae:	3801      	subs	r0, #1
   b7eb0:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b7eb2:	b92d      	cbnz	r5, b7ec0 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b7eb4:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b7eb6:	7828      	ldrb	r0, [r5, #0]
   b7eb8:	f7ff ffdc 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7ebc:	6188      	str	r0, [r1, #24]
}
   b7ebe:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b7ec0:	7960      	ldrb	r0, [r4, #5]
   b7ec2:	f7ff ffd7 	bl	b7e74 <_ZN6AB180510bcdToValueEh>
   b7ec6:	3064      	adds	r0, #100	; 0x64
   b7ec8:	1da5      	adds	r5, r4, #6
   b7eca:	6148      	str	r0, [r1, #20]
   b7ecc:	e7f3      	b.n	b7eb6 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b7ed0 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7ed0:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7ed2:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7ed4:	b088      	sub	sp, #32
   b7ed6:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7ed8:	461a      	mov	r2, r3
   b7eda:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b7edc:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b7ede:	f7ff fda4 	bl	b7a2a <_ZN6AB180510isBitClearEhhb>
   b7ee2:	b1f0      	cbz	r0, b7f22 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b7ee4:	2308      	movs	r3, #8
   b7ee6:	2601      	movs	r6, #1
   b7ee8:	4620      	mov	r0, r4
   b7eea:	9600      	str	r6, [sp, #0]
   b7eec:	eb0d 0203 	add.w	r2, sp, r3
   b7ef0:	2100      	movs	r1, #0
   b7ef2:	f7ff fc2f 	bl	b7754 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b7ef6:	4604      	mov	r4, r0
   b7ef8:	b198      	cbz	r0, b7f22 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b7efa:	4632      	mov	r2, r6
   b7efc:	4629      	mov	r1, r5
   b7efe:	f10d 0009 	add.w	r0, sp, #9
   b7f02:	f7ff ffbe 	bl	b7e82 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b7f06:	a804      	add	r0, sp, #16
   b7f08:	f7ff ff9c 	bl	b7e44 <_ZN6AB180510tmToStringEPK2tm>
   b7f0c:	4808      	ldr	r0, [pc, #32]	; (b7f30 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b7f0e:	9a04      	ldr	r2, [sp, #16]
   b7f10:	4908      	ldr	r1, [pc, #32]	; (b7f34 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b7f12:	f7fc f914 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7f16:	a804      	add	r0, sp, #16
   b7f18:	f007 fb6a 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b7f1c:	4620      	mov	r0, r4
   b7f1e:	b008      	add	sp, #32
   b7f20:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b7f22:	2224      	movs	r2, #36	; 0x24
   b7f24:	2100      	movs	r1, #0
   b7f26:	4628      	mov	r0, r5
   b7f28:	f008 ffda 	bl	c0ee0 <memset>
   b7f2c:	2400      	movs	r4, #0
   b7f2e:	e7f5      	b.n	b7f1c <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b7f30:	2003e4c8 	.word	0x2003e4c8
   b7f34:	000c44be 	.word	0x000c44be

000b7f38 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b7f38:	b530      	push	{r4, r5, lr}
   b7f3a:	b08b      	sub	sp, #44	; 0x2c
   b7f3c:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b7f3e:	a901      	add	r1, sp, #4
   b7f40:	f7ff ffc6 	bl	b7ed0 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b7f44:	4604      	mov	r4, r0
   b7f46:	b120      	cbz	r0, b7f52 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b7f48:	a801      	add	r0, sp, #4
   b7f4a:	f005 f86f 	bl	bd02c <mktime>
   b7f4e:	e9c5 0100 	strd	r0, r1, [r5]
}
   b7f52:	4620      	mov	r0, r4
   b7f54:	b00b      	add	sp, #44	; 0x2c
   b7f56:	bd30      	pop	{r4, r5, pc}

000b7f58 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b7f58:	230a      	movs	r3, #10
   b7f5a:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b7f5e:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b7f62:	fb91 f2f3 	sdiv	r2, r1, r3
   b7f66:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b7f6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b7f6e:	b2c0      	uxtb	r0, r0
   b7f70:	4770      	bx	lr

000b7f72 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7f72:	b570      	push	{r4, r5, r6, lr}
   b7f74:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b7f76:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b7f78:	460c      	mov	r4, r1
   b7f7a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b7f7c:	f7ff ffec 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7f80:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b7f82:	6868      	ldr	r0, [r5, #4]
   b7f84:	f7ff ffe8 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7f88:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b7f8a:	68a8      	ldr	r0, [r5, #8]
   b7f8c:	f7ff ffe4 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7f90:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b7f92:	68e8      	ldr	r0, [r5, #12]
   b7f94:	f7ff ffe0 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7f98:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7f9a:	6928      	ldr	r0, [r5, #16]
   b7f9c:	3001      	adds	r0, #1
   b7f9e:	f7ff ffdb 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7fa2:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b7fa4:	b92e      	cbnz	r6, b7fb2 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b7fa6:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b7fa8:	69a8      	ldr	r0, [r5, #24]
   b7faa:	f7ff ffd5 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7fae:	7030      	strb	r0, [r6, #0]
}
   b7fb0:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b7fb2:	696a      	ldr	r2, [r5, #20]
   b7fb4:	2364      	movs	r3, #100	; 0x64
   b7fb6:	fb92 f0f3 	sdiv	r0, r2, r3
   b7fba:	fb03 2010 	mls	r0, r3, r0, r2
   b7fbe:	f7ff ffcb 	bl	b7f58 <_ZN6AB180510valueToBcdEi>
   b7fc2:	1da6      	adds	r6, r4, #6
   b7fc4:	7160      	strb	r0, [r4, #5]
   b7fc6:	e7ef      	b.n	b7fa8 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b7fc8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7fca:	b087      	sub	sp, #28
   b7fcc:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7fce:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b7fd0:	4616      	mov	r6, r2
   b7fd2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b7fd4:	f7ff ff36 	bl	b7e44 <_ZN6AB180510tmToStringEPK2tm>
   b7fd8:	481e      	ldr	r0, [pc, #120]	; (b8054 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b7fda:	9a02      	ldr	r2, [sp, #8]
   b7fdc:	491e      	ldr	r1, [pc, #120]	; (b8058 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b7fde:	f7fc f8ae 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7fe2:	a802      	add	r0, sp, #8
   b7fe4:	f007 fb04 	bl	bf5f0 <_ZN6StringD1Ev>
    if (lock) {
   b7fe8:	b116      	cbz	r6, b7ff0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b7fea:	6868      	ldr	r0, [r5, #4]
   b7fec:	f005 fd92 	bl	bdb14 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	2201      	movs	r2, #1
   b7ff4:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b7ff8:	2700      	movs	r7, #0
   b7ffa:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b7ffe:	f7ff ffb8 	bl	b7f72 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8002:	2301      	movs	r3, #1
   b8004:	461a      	mov	r2, r3
   b8006:	2110      	movs	r1, #16
   b8008:	4628      	mov	r0, r5
   b800a:	f7ff fd8d 	bl	b7b28 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b800e:	4604      	mov	r4, r0
   b8010:	b1e8      	cbz	r0, b804e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b8012:	2308      	movs	r3, #8
   b8014:	9700      	str	r7, [sp, #0]
   b8016:	eb0d 0203 	add.w	r2, sp, r3
   b801a:	4639      	mov	r1, r7
   b801c:	4628      	mov	r0, r5
   b801e:	f7ff fc3b 	bl	b7898 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b8022:	4604      	mov	r4, r0
   b8024:	b160      	cbz	r0, b8040 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8026:	2301      	movs	r3, #1
   b8028:	461a      	mov	r2, r3
   b802a:	2110      	movs	r1, #16
   b802c:	4628      	mov	r0, r5
   b802e:	f7ff fd1a 	bl	b7a66 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b8032:	b116      	cbz	r6, b803a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b8034:	6868      	ldr	r0, [r5, #4]
   b8036:	f005 fd76 	bl	bdb26 <_ZN7TwoWire6unlockEv>
}
   b803a:	4620      	mov	r0, r4
   b803c:	b007      	add	sp, #28
   b803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b8040:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b8044:	4905      	ldr	r1, [pc, #20]	; (b805c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b8046:	4803      	ldr	r0, [pc, #12]	; (b8054 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8048:	f7ff fb54 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
   b804c:	e7f1      	b.n	b8032 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b804e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b8052:	e7f7      	b.n	b8044 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b8054:	2003e4c8 	.word	0x2003e4c8
   b8058:	000c44cc 	.word	0x000c44cc
   b805c:	000c44da 	.word	0x000c44da

000b8060 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b8060:	b513      	push	{r0, r1, r4, lr}
   b8062:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b8064:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b8066:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b806a:	f008 feeb 	bl	c0e44 <gmtime>
    return setRtcFromTm(tm, lock);
   b806e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b8072:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b8074:	4620      	mov	r0, r4
   b8076:	f7ff ffa7 	bl	b7fc8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b807a:	b002      	add	sp, #8
   b807c:	bd10      	pop	{r4, pc}
	...

000b8080 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b8080:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8082:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b8084:	b089      	sub	sp, #36	; 0x24
   b8086:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8088:	bb75      	cbnz	r5, b80e8 <_ZN6AB18054loopEv+0x68>
   b808a:	f007 fe47 	bl	bfd1c <_ZN9TimeClass7isValidEv>
   b808e:	b358      	cbz	r0, b80e8 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b8090:	2600      	movs	r6, #0
   b8092:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b8094:	a904      	add	r1, sp, #16
   b8096:	4628      	mov	r0, r5
        tm = 0;
   b8098:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b809c:	f004 fed6 	bl	bce4c <spark_sync_time_last>
   b80a0:	b310      	cbz	r0, b80e8 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b80a2:	2501      	movs	r5, #1
   b80a4:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b80a6:	f007 fe56 	bl	bfd56 <_ZN9TimeClass3nowEv>
   b80aa:	17c3      	asrs	r3, r0, #31
   b80ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b80b0:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b80b2:	9500      	str	r5, [sp, #0]
   b80b4:	4620      	mov	r0, r4
   b80b6:	f7ff ffd3 	bl	b8060 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b80ba:	a902      	add	r1, sp, #8
   b80bc:	4620      	mov	r0, r4
        time = 0;
   b80be:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b80c2:	f7ff ff39 	bl	b7f38 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b80c6:	4b13      	ldr	r3, [pc, #76]	; (b8114 <_ZN6AB18054loopEv+0x94>)
   b80c8:	4913      	ldr	r1, [pc, #76]	; (b8118 <_ZN6AB18054loopEv+0x98>)
   b80ca:	681b      	ldr	r3, [r3, #0]
   b80cc:	9300      	str	r3, [sp, #0]
   b80ce:	a804      	add	r0, sp, #16
   b80d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b80d4:	f007 fde0 	bl	bfc98 <_ZN9TimeClass6formatExPKc>
   b80d8:	4810      	ldr	r0, [pc, #64]	; (b811c <_ZN6AB18054loopEv+0x9c>)
   b80da:	9a04      	ldr	r2, [sp, #16]
   b80dc:	4910      	ldr	r1, [pc, #64]	; (b8120 <_ZN6AB18054loopEv+0xa0>)
   b80de:	f7fc f82e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b80e2:	a804      	add	r0, sp, #16
   b80e4:	f007 fa84 	bl	bf5f0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b80e8:	6963      	ldr	r3, [r4, #20]
   b80ea:	b18b      	cbz	r3, b8110 <_ZN6AB18054loopEv+0x90>
   b80ec:	f004 fb9a 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b80f0:	6923      	ldr	r3, [r4, #16]
   b80f2:	1ac0      	subs	r0, r0, r3
   b80f4:	6963      	ldr	r3, [r4, #20]
   b80f6:	4298      	cmp	r0, r3
   b80f8:	d30a      	bcc.n	b8110 <_ZN6AB18054loopEv+0x90>
   b80fa:	f004 fb93 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b80fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b8102:	6120      	str	r0, [r4, #16]
            setWDT();
   b8104:	4620      	mov	r0, r4
}
   b8106:	b009      	add	sp, #36	; 0x24
   b8108:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b810c:	f7ff bc0c 	b.w	b7928 <_ZN6AB18056setWDTEi>
}
   b8110:	b009      	add	sp, #36	; 0x24
   b8112:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8114:	2003d698 	.word	0x2003d698
   b8118:	2003e6ac 	.word	0x2003e6ac
   b811c:	2003e4c8 	.word	0x2003e4c8
   b8120:	000c44f5 	.word	0x000c44f5

000b8124 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b8124:	b530      	push	{r4, r5, lr}
   b8126:	4604      	mov	r4, r0
   b8128:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b812a:	b111      	cbz	r1, b8132 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b812c:	6840      	ldr	r0, [r0, #4]
   b812e:	f005 fc9f 	bl	bda70 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b8132:	4620      	mov	r0, r4
   b8134:	f7ff fb64 	bl	b7800 <_ZN6AB180510detectChipEv>
   b8138:	ad06      	add	r5, sp, #24
   b813a:	2800      	cmp	r0, #0
   b813c:	d037      	beq.n	b81ae <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b813e:	4620      	mov	r0, r4
   b8140:	f7ff fc9c 	bl	b7a7c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b8144:	2301      	movs	r3, #1
   b8146:	461a      	mov	r2, r3
   b8148:	2110      	movs	r1, #16
   b814a:	4620      	mov	r0, r4
   b814c:	f7ff fc6d 	bl	b7a2a <_ZN6AB180510isBitClearEhhb>
   b8150:	b1d8      	cbz	r0, b818a <_ZN6AB18055setupEb+0x66>
   b8152:	f007 fde3 	bl	bfd1c <_ZN9TimeClass7isValidEv>
   b8156:	b9c0      	cbnz	r0, b818a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b8158:	a902      	add	r1, sp, #8
   b815a:	4620      	mov	r0, r4
   b815c:	f7ff feec 	bl	b7f38 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b8160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b8164:	f007 fcde 	bl	bfb24 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8168:	4b13      	ldr	r3, [pc, #76]	; (b81b8 <_ZN6AB18055setupEb+0x94>)
   b816a:	4914      	ldr	r1, [pc, #80]	; (b81bc <_ZN6AB18055setupEb+0x98>)
   b816c:	681b      	ldr	r3, [r3, #0]
   b816e:	9300      	str	r3, [sp, #0]
   b8170:	4628      	mov	r0, r5
   b8172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8176:	f007 fd8f 	bl	bfc98 <_ZN9TimeClass6formatExPKc>
   b817a:	4811      	ldr	r0, [pc, #68]	; (b81c0 <_ZN6AB18055setupEb+0x9c>)
   b817c:	9a06      	ldr	r2, [sp, #24]
   b817e:	4911      	ldr	r1, [pc, #68]	; (b81c4 <_ZN6AB18055setupEb+0xa0>)
   b8180:	f7fb ffdd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b8184:	4628      	mov	r0, r5
   b8186:	f007 fa33 	bl	bf5f0 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b818a:	4b0f      	ldr	r3, [pc, #60]	; (b81c8 <_ZN6AB18055setupEb+0xa4>)
   b818c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b818e:	4b0f      	ldr	r3, [pc, #60]	; (b81cc <_ZN6AB18055setupEb+0xa8>)
   b8190:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b8192:	4b0f      	ldr	r3, [pc, #60]	; (b81d0 <_ZN6AB18055setupEb+0xac>)
   b8194:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b8196:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b819a:	2300      	movs	r3, #0
   b819c:	a802      	add	r0, sp, #8
   b819e:	9500      	str	r5, [sp, #0]
   b81a0:	f7fd fb18 	bl	b57d4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b81a4:	4628      	mov	r0, r5
   b81a6:	f7fd f97a 	bl	b549e <_ZNSt14_Function_baseD1Ev>
}
   b81aa:	b00b      	add	sp, #44	; 0x2c
   b81ac:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b81ae:	4909      	ldr	r1, [pc, #36]	; (b81d4 <_ZN6AB18055setupEb+0xb0>)
   b81b0:	4803      	ldr	r0, [pc, #12]	; (b81c0 <_ZN6AB18055setupEb+0x9c>)
   b81b2:	f7ff fa9f 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
   b81b6:	e7e8      	b.n	b818a <_ZN6AB18055setupEb+0x66>
   b81b8:	2003d698 	.word	0x2003d698
   b81bc:	2003e6ac 	.word	0x2003e6ac
   b81c0:	2003e4c8 	.word	0x2003e4c8
   b81c4:	000c450b 	.word	0x000c450b
   b81c8:	000b79ad 	.word	0x000b79ad
   b81cc:	000b547b 	.word	0x000b547b
   b81d0:	000b5467 	.word	0x000b5467
   b81d4:	000c4528 	.word	0x000c4528

000b81d8 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b81d8:	4b01      	ldr	r3, [pc, #4]	; (b81e0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b81da:	4a02      	ldr	r2, [pc, #8]	; (b81e4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b81dc:	601a      	str	r2, [r3, #0]
}
   b81de:	4770      	bx	lr
   b81e0:	2003e4c8 	.word	0x2003e4c8
   b81e4:	000c4540 	.word	0x000c4540

000b81e8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b81e8:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b81ea:	2301      	movs	r3, #1
   b81ec:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b81ee:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b81f0:	4604      	mov	r4, r0
        if (th->func) {
   b81f2:	b143      	cbz	r3, b8206 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b81f4:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b81f6:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b81f8:	2301      	movs	r3, #1
   b81fa:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b81fc:	2000      	movs	r0, #0
    }
   b81fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b8202:	f004 badf 	b.w	bc7c4 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8206:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b8208:	2800      	cmp	r0, #0
   b820a:	d0f5      	beq.n	b81f8 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b820c:	6883      	ldr	r3, [r0, #8]
   b820e:	b90b      	cbnz	r3, b8214 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b8210:	f008 f8bc 	bl	c038c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8214:	68c3      	ldr	r3, [r0, #12]
   b8216:	e7ee      	b.n	b81f6 <_ZN6Thread3runEPv+0xe>

000b8218 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b8218:	2a01      	cmp	r2, #1
   b821a:	d102      	bne.n	b8222 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b821c:	6001      	str	r1, [r0, #0]
      }
   b821e:	2000      	movs	r0, #0
   b8220:	4770      	bx	lr
	  switch (__op)
   b8222:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b8224:	bf04      	itt	eq
   b8226:	680b      	ldreq	r3, [r1, #0]
   b8228:	6003      	streq	r3, [r0, #0]
	      break;
   b822a:	e7f8      	b.n	b821e <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b822c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b822c:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b822e:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b8230:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b8232:	b135      	cbz	r5, b8242 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b8234:	4628      	mov	r0, r5
   b8236:	f7fd f932 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b823a:	2110      	movs	r1, #16
   b823c:	4628      	mov	r0, r5
   b823e:	f7fb ff2e 	bl	b409e <_ZdlPvj>
   b8242:	4620      	mov	r0, r4
   b8244:	2114      	movs	r1, #20
      }
   b8246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b824a:	f7fb bf28 	b.w	b409e <_ZdlPvj>

000b824e <_ZN6Thread7disposeEv>:
    void dispose()
   b824e:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8250:	6803      	ldr	r3, [r0, #0]
   b8252:	4604      	mov	r4, r0
        if (!isValid())
   b8254:	b1ab      	cbz	r3, b8282 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b8256:	6858      	ldr	r0, [r3, #4]
   b8258:	f004 fa64 	bl	bc724 <os_thread_is_current>
   b825c:	b988      	cbnz	r0, b8282 <_ZN6Thread7disposeEv+0x34>
   b825e:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b8260:	7c5a      	ldrb	r2, [r3, #17]
   b8262:	b912      	cbnz	r2, b826a <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b8264:	6858      	ldr	r0, [r3, #4]
   b8266:	f004 fa65 	bl	bc734 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b826a:	6823      	ldr	r3, [r4, #0]
   b826c:	6858      	ldr	r0, [r3, #4]
   b826e:	f004 fa69 	bl	bc744 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b8272:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b8274:	2300      	movs	r3, #0
   b8276:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b8278:	b118      	cbz	r0, b8282 <_ZN6Thread7disposeEv+0x34>
    }
   b827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b827e:	f7ff bfd5 	b.w	b822c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b8282:	bd10      	pop	{r4, pc}

000b8284 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b8284:	4a05      	ldr	r2, [pc, #20]	; (b829c <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b8286:	6002      	str	r2, [r0, #0]
   b8288:	2200      	movs	r2, #0
   b828a:	6042      	str	r2, [r0, #4]
   b828c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b828e:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b8292:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b8296:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b829a:	4770      	bx	lr
   b829c:	000c4580 	.word	0x000c4580

000b82a0 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b82a0:	b510      	push	{r4, lr}
    if (!_instance) {
   b82a2:	4c07      	ldr	r4, [pc, #28]	; (b82c0 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b82a4:	6823      	ldr	r3, [r4, #0]
   b82a6:	b943      	cbnz	r3, b82ba <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b82a8:	f240 4064 	movw	r0, #1124	; 0x464
   b82ac:	f7fb fef3 	bl	b4096 <_Znwj>
   b82b0:	4603      	mov	r3, r0
   b82b2:	b108      	cbz	r0, b82b8 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b82b4:	f7ff ffe6 	bl	b8284 <_ZN19BackgroundPublishRKC1Ev>
   b82b8:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b82ba:	6820      	ldr	r0, [r4, #0]
   b82bc:	bd10      	pop	{r4, pc}
   b82be:	bf00      	nop
   b82c0:	2003e4d0 	.word	0x2003e4d0

000b82c4 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b82c4:	b538      	push	{r3, r4, r5, lr}
   b82c6:	4604      	mov	r4, r0
    if(thread)
   b82c8:	6840      	ldr	r0, [r0, #4]
   b82ca:	b190      	cbz	r0, b82f2 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b82cc:	2302      	movs	r3, #2
   b82ce:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b82d0:	f7ff ffbd 	bl	b824e <_ZN6Thread7disposeEv>
        delete thread;
   b82d4:	6865      	ldr	r5, [r4, #4]
   b82d6:	b155      	cbz	r5, b82ee <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b82d8:	4628      	mov	r0, r5
   b82da:	f7ff ffb8 	bl	b824e <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b82de:	6828      	ldr	r0, [r5, #0]
   b82e0:	b108      	cbz	r0, b82e6 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b82e2:	f7ff ffa3 	bl	b822c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b82e6:	2104      	movs	r1, #4
   b82e8:	4628      	mov	r0, r5
   b82ea:	f7fb fed8 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b82ee:	2300      	movs	r3, #0
   b82f0:	6063      	str	r3, [r4, #4]
    }
}
   b82f2:	bd38      	pop	{r3, r4, r5, pc}

000b82f4 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b82f4:	b510      	push	{r4, lr}
   b82f6:	4b05      	ldr	r3, [pc, #20]	; (b830c <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b82f8:	6003      	str	r3, [r0, #0]
   b82fa:	4604      	mov	r4, r0
    stop();
   b82fc:	f7ff ffe2 	bl	b82c4 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b8300:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b8304:	f7fd f8cb 	bl	b549e <_ZNSt14_Function_baseD1Ev>
}
   b8308:	4620      	mov	r0, r4
   b830a:	bd10      	pop	{r4, pc}
   b830c:	000c4580 	.word	0x000c4580

000b8310 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b8310:	b510      	push	{r4, lr}
   b8312:	4604      	mov	r4, r0
}
   b8314:	f7ff ffee 	bl	b82f4 <_ZN19BackgroundPublishRKD1Ev>
   b8318:	4620      	mov	r0, r4
   b831a:	f240 4164 	movw	r1, #1124	; 0x464
   b831e:	f7fb febe 	bl	b409e <_ZdlPvj>
   b8322:	4620      	mov	r0, r4
   b8324:	bd10      	pop	{r4, pc}

000b8326 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b8326:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8328:	4604      	mov	r4, r0
   b832a:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b832c:	f100 060d 	add.w	r6, r0, #13
   b8330:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b8334:	7b23      	ldrb	r3, [r4, #12]
   b8336:	b91b      	cbnz	r3, b8340 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b8338:	2001      	movs	r0, #1
   b833a:	f004 fe7f 	bl	bd03c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b833e:	e7f9      	b.n	b8334 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b8340:	7b23      	ldrb	r3, [r4, #12]
   b8342:	2b02      	cmp	r3, #2
   b8344:	d064      	beq.n	b8410 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b8346:	68a0      	ldr	r0, [r4, #8]
   b8348:	f004 fa0c 	bl	bc764 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b834c:	68a0      	ldr	r0, [r4, #8]
   b834e:	f004 fa11 	bl	bc774 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b8352:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b8356:	f88d 3000 	strb.w	r3, [sp]
   b835a:	463a      	mov	r2, r7
   b835c:	233c      	movs	r3, #60	; 0x3c
   b835e:	4631      	mov	r1, r6
   b8360:	a806      	add	r0, sp, #24
   b8362:	f005 f937 	bl	bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b8366:	9d06      	ldr	r5, [sp, #24]
   b8368:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b836a:	b933      	cbnz	r3, b837a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b836c:	7b23      	ldrb	r3, [r4, #12]
   b836e:	2b02      	cmp	r3, #2
   b8370:	d003      	beq.n	b837a <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b8372:	2001      	movs	r0, #1
   b8374:	f004 fe62 	bl	bd03c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8378:	e7f5      	b.n	b8366 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b837a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b837e:	b31b      	cbz	r3, b83c8 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b8380:	2000      	movs	r0, #0
   b8382:	f004 fcd1 	bl	bcd28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8386:	b120      	cbz	r0, b8392 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b8388:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b838a:	b913      	cbnz	r3, b8392 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b838c:	f004 fd26 	bl	bcddc <spark_process>
    }
   b8390:	e7fa      	b.n	b8388 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8392:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b8394:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b8398:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b839a:	1e59      	subs	r1, r3, #1
   b839c:	424b      	negs	r3, r1
   b839e:	414b      	adcs	r3, r1
   b83a0:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b83a4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b83a8:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b83ac:	b90b      	cbnz	r3, b83b2 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b83ae:	f007 ffed 	bl	c038c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83b2:	ab05      	add	r3, sp, #20
   b83b4:	9300      	str	r3, [sp, #0]
   b83b6:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b83ba:	ab04      	add	r3, sp, #16
   b83bc:	aa03      	add	r2, sp, #12
   b83be:	f10d 010b 	add.w	r1, sp, #11
   b83c2:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b83c6:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b83c8:	68a0      	ldr	r0, [r4, #8]
   b83ca:	f004 f9cb 	bl	bc764 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b83ce:	7b23      	ldrb	r3, [r4, #12]
   b83d0:	2b02      	cmp	r3, #2
   b83d2:	d017      	beq.n	b8404 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b83d4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b83d8:	2500      	movs	r5, #0
   b83da:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b83de:	b143      	cbz	r3, b83f2 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b83e0:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b83e4:	2203      	movs	r2, #3
   b83e6:	4608      	mov	r0, r1
   b83e8:	4798      	blx	r3
	    _M_manager = nullptr;
   b83ea:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b83ee:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b83f2:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b83f4:	68a0      	ldr	r0, [r4, #8]
   b83f6:	7323      	strb	r3, [r4, #12]
   b83f8:	f004 f9bc 	bl	bc774 <os_mutex_unlock>
   b83fc:	a807      	add	r0, sp, #28
   b83fe:	f7fc f907 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8402:	e797      	b.n	b8334 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b8404:	68a0      	ldr	r0, [r4, #8]
   b8406:	f004 f9b5 	bl	bc774 <os_mutex_unlock>
   b840a:	a807      	add	r0, sp, #28
   b840c:	f7fc f900 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b8410:	b009      	add	sp, #36	; 0x24
   b8412:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8414 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b8414:	6800      	ldr	r0, [r0, #0]
   b8416:	f7ff bf86 	b.w	b8326 <_ZN19BackgroundPublishRK8thread_fEv>

000b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b841a:	b513      	push	{r0, r1, r4, lr}
   b841c:	460b      	mov	r3, r1
   b841e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8420:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8424:	466c      	mov	r4, sp
   b8426:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b842a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b842e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8432:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8436:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b843a:	b002      	add	sp, #8
   b843c:	bd10      	pop	{r4, pc}
	...

000b8440 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b8440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8444:	4606      	mov	r6, r0
   b8446:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b8448:	2014      	movs	r0, #20
   b844a:	4926      	ldr	r1, [pc, #152]	; (b84e4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b844c:	4617      	mov	r7, r2
   b844e:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b8450:	f007 ff92 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   b8454:	4604      	mov	r4, r0
   b8456:	b130      	cbz	r0, b8466 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b8458:	2000      	movs	r0, #0
            exited(false) {
   b845a:	e9c4 0000 	strd	r0, r0, [r4]
   b845e:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b8462:	7420      	strb	r0, [r4, #16]
   b8464:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8466:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b8468:	2c00      	cmp	r4, #0
   b846a:	d031      	beq.n	b84d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b846c:	491d      	ldr	r1, [pc, #116]	; (b84e4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b846e:	2010      	movs	r0, #16
   b8470:	f007 ff82 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   b8474:	4605      	mov	r5, r0
   b8476:	b168      	cbz	r0, b8494 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b8478:	2300      	movs	r3, #0
   b847a:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b847c:	4601      	mov	r1, r0
   b847e:	4638      	mov	r0, r7
   b8480:	f7ff ffcb 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8484:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8486:	68aa      	ldr	r2, [r5, #8]
   b8488:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b848a:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b848c:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b848e:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8490:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8492:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b8494:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b8496:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b8498:	b137      	cbz	r7, b84a8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b849a:	4638      	mov	r0, r7
   b849c:	f7fc ffff 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b84a0:	2110      	movs	r1, #16
   b84a2:	4638      	mov	r0, r7
   b84a4:	f7fb fdfb 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b84a8:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b84aa:	6803      	ldr	r3, [r0, #0]
   b84ac:	b183      	cbz	r3, b84d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b84ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b84b0:	464a      	mov	r2, r9
   b84b2:	e9cd 0300 	strd	r0, r3, [sp]
   b84b6:	4641      	mov	r1, r8
   b84b8:	4b0b      	ldr	r3, [pc, #44]	; (b84e8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b84ba:	3004      	adds	r0, #4
   b84bc:	f004 f92a 	bl	bc714 <os_thread_create>
   b84c0:	b930      	cbnz	r0, b84d0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b84c2:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b84c4:	7c1b      	ldrb	r3, [r3, #16]
   b84c6:	b94b      	cbnz	r3, b84dc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b84c8:	2001      	movs	r0, #1
   b84ca:	f004 f99b 	bl	bc804 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b84ce:	e7f8      	b.n	b84c2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b84d0:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b84d2:	2300      	movs	r3, #0
   b84d4:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b84d6:	b108      	cbz	r0, b84dc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b84d8:	f7ff fea8 	bl	b822c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b84dc:	4630      	mov	r0, r6
   b84de:	b003      	add	sp, #12
   b84e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b84e4:	000c5004 	.word	0x000c5004
   b84e8:	000b81e9 	.word	0x000b81e9

000b84ec <_ZN19BackgroundPublishRK5startEv>:
{
   b84ec:	b530      	push	{r4, r5, lr}
    if(!thread)
   b84ee:	6843      	ldr	r3, [r0, #4]
{
   b84f0:	b087      	sub	sp, #28
   b84f2:	4604      	mov	r4, r0
    if(!thread)
   b84f4:	b9c3      	cbnz	r3, b8528 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b84f6:	3008      	adds	r0, #8
   b84f8:	f004 f92c 	bl	bc754 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b84fc:	4b0b      	ldr	r3, [pc, #44]	; (b852c <_ZN19BackgroundPublishRK5startEv+0x40>)
   b84fe:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b8500:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b8502:	4b0b      	ldr	r3, [pc, #44]	; (b8530 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8504:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b8506:	9304      	str	r3, [sp, #16]
   b8508:	f7fb fdc5 	bl	b4096 <_Znwj>
   b850c:	4605      	mov	r5, r0
   b850e:	b138      	cbz	r0, b8520 <_ZN19BackgroundPublishRK5startEv+0x34>
   b8510:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b8514:	9300      	str	r3, [sp, #0]
   b8516:	4907      	ldr	r1, [pc, #28]	; (b8534 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b8518:	2302      	movs	r3, #2
   b851a:	aa02      	add	r2, sp, #8
   b851c:	f7ff ff90 	bl	b8440 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b8520:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b8522:	a802      	add	r0, sp, #8
   b8524:	f7fc ffbb 	bl	b549e <_ZNSt14_Function_baseD1Ev>
}
   b8528:	b007      	add	sp, #28
   b852a:	bd30      	pop	{r4, r5, pc}
   b852c:	000b8415 	.word	0x000b8415
   b8530:	000b8219 	.word	0x000b8219
   b8534:	000c4564 	.word	0x000c4564

000b8538 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b8538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b853c:	4604      	mov	r4, r0
   b853e:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b8540:	6880      	ldr	r0, [r0, #8]
   b8542:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b8544:	4698      	mov	r8, r3
   b8546:	460d      	mov	r5, r1
   b8548:	4616      	mov	r6, r2
   b854a:	f004 f90b 	bl	bc764 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b854e:	6863      	ldr	r3, [r4, #4]
   b8550:	b11b      	cbz	r3, b855a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b8552:	7b23      	ldrb	r3, [r4, #12]
   b8554:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b8558:	b133      	cbz	r3, b8568 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b855a:	68a0      	ldr	r0, [r4, #8]
   b855c:	f004 f90a 	bl	bc774 <os_mutex_unlock>
    {
        return false;
   b8560:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b8562:	b005      	add	sp, #20
   b8564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8568:	68a0      	ldr	r0, [r4, #8]
   b856a:	f004 f903 	bl	bc774 <os_mutex_unlock>
    if(!name)
   b856e:	2d00      	cmp	r5, #0
   b8570:	d03d      	beq.n	b85ee <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b8572:	2240      	movs	r2, #64	; 0x40
   b8574:	4629      	mov	r1, r5
   b8576:	f104 000d 	add.w	r0, r4, #13
   b857a:	f008 fd98 	bl	c10ae <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b857e:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b8582:	b38e      	cbz	r6, b85e8 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b8584:	f240 4201 	movw	r2, #1025	; 0x401
   b8588:	4631      	mov	r1, r6
   b858a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b858e:	f008 fd8e 	bl	c10ae <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b8592:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b8596:	2300      	movs	r3, #0
   b8598:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b859a:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b859c:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b85a0:	b13b      	cbz	r3, b85b2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b85a2:	2202      	movs	r2, #2
   b85a4:	4639      	mov	r1, r7
   b85a6:	4668      	mov	r0, sp
   b85a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b85aa:	68fb      	ldr	r3, [r7, #12]
   b85ac:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b85ae:	68bb      	ldr	r3, [r7, #8]
   b85b0:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b85b2:	4629      	mov	r1, r5
   b85b4:	4668      	mov	r0, sp
   b85b6:	f7ff ff30 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b85ba:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b85bc:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b85c0:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b85c4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b85c6:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b85c8:	4668      	mov	r0, sp
   b85ca:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b85ce:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b85d2:	9203      	str	r2, [sp, #12]
   b85d4:	f7fc ff63 	bl	b549e <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b85d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b85da:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b85de:	2001      	movs	r0, #1
    event_flags = flags;
   b85e0:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b85e4:	7320      	strb	r0, [r4, #12]
    return true;
   b85e6:	e7bc      	b.n	b8562 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b85e8:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b85ec:	e7d3      	b.n	b8596 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b85ee:	4628      	mov	r0, r5
   b85f0:	e7b7      	b.n	b8562 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b85f4 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b85f4:	b510      	push	{r4, lr}
   b85f6:	4b05      	ldr	r3, [pc, #20]	; (b860c <_ZN10JsonBufferD1Ev+0x18>)
   b85f8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b85fa:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b85fc:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b85fe:	b91b      	cbnz	r3, b8608 <_ZN10JsonBufferD1Ev+0x14>
   b8600:	6840      	ldr	r0, [r0, #4]
   b8602:	b108      	cbz	r0, b8608 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b8604:	f004 fca2 	bl	bcf4c <free>
	}
}
   b8608:	4620      	mov	r0, r4
   b860a:	bd10      	pop	{r4, pc}
   b860c:	000c45a0 	.word	0x000c45a0

000b8610 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b8610:	b510      	push	{r4, lr}
   b8612:	4604      	mov	r4, r0
}
   b8614:	f7ff ffee 	bl	b85f4 <_ZN10JsonBufferD1Ev>
   b8618:	4620      	mov	r0, r4
   b861a:	2114      	movs	r1, #20
   b861c:	f7fb fd3f 	bl	b409e <_ZdlPvj>
   b8620:	4620      	mov	r0, r4
   b8622:	bd10      	pop	{r4, pc}

000b8624 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b8624:	b510      	push	{r4, lr}
   b8626:	4b03      	ldr	r3, [pc, #12]	; (b8634 <_ZN10JsonWriterD1Ev+0x10>)
   b8628:	6003      	str	r3, [r0, #0]
   b862a:	4604      	mov	r4, r0
   b862c:	f7ff ffe2 	bl	b85f4 <_ZN10JsonBufferD1Ev>

}
   b8630:	4620      	mov	r0, r4
   b8632:	bd10      	pop	{r4, pc}
   b8634:	000c45c0 	.word	0x000c45c0

000b8638 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b8638:	b510      	push	{r4, lr}
   b863a:	4604      	mov	r4, r0
}
   b863c:	f7ff fff2 	bl	b8624 <_ZN10JsonWriterD1Ev>
   b8640:	4620      	mov	r0, r4
   b8642:	2130      	movs	r1, #48	; 0x30
   b8644:	f7fb fd2b 	bl	b409e <_ZdlPvj>
   b8648:	4620      	mov	r0, r4
   b864a:	bd10      	pop	{r4, pc}

000b864c <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b864c:	b510      	push	{r4, lr}
   b864e:	4b03      	ldr	r3, [pc, #12]	; (b865c <_ZN12JsonModifierD1Ev+0x10>)
   b8650:	6003      	str	r3, [r0, #0]
   b8652:	4604      	mov	r4, r0
   b8654:	f7ff ffe6 	bl	b8624 <_ZN10JsonWriterD1Ev>

}
   b8658:	4620      	mov	r0, r4
   b865a:	bd10      	pop	{r4, pc}
   b865c:	000c45d0 	.word	0x000c45d0

000b8660 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b8660:	b510      	push	{r4, lr}
   b8662:	4604      	mov	r4, r0
}
   b8664:	f7ff fff2 	bl	b864c <_ZN12JsonModifierD1Ev>
   b8668:	4620      	mov	r0, r4
   b866a:	2140      	movs	r1, #64	; 0x40
   b866c:	f7fb fd17 	bl	b409e <_ZdlPvj>
   b8670:	4620      	mov	r0, r4
   b8672:	bd10      	pop	{r4, pc}

000b8674 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b8674:	b510      	push	{r4, lr}
   b8676:	4b07      	ldr	r3, [pc, #28]	; (b8694 <_ZN10JsonParserD1Ev+0x20>)
   b8678:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b867a:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b867c:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b867e:	b91b      	cbnz	r3, b8688 <_ZN10JsonParserD1Ev+0x14>
   b8680:	6940      	ldr	r0, [r0, #20]
   b8682:	b108      	cbz	r0, b8688 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b8684:	f004 fc62 	bl	bcf4c <free>
JsonParser::~JsonParser() {
   b8688:	4620      	mov	r0, r4
   b868a:	f7ff ffb3 	bl	b85f4 <_ZN10JsonBufferD1Ev>
}
   b868e:	4620      	mov	r0, r4
   b8690:	bd10      	pop	{r4, pc}
   b8692:	bf00      	nop
   b8694:	000c45b0 	.word	0x000c45b0

000b8698 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b8698:	b510      	push	{r4, lr}
   b869a:	4604      	mov	r4, r0
}
   b869c:	f7ff ffea 	bl	b8674 <_ZN10JsonParserD1Ev>
   b86a0:	4620      	mov	r0, r4
   b86a2:	212c      	movs	r1, #44	; 0x2c
   b86a4:	f7fb fcfb 	bl	b409e <_ZdlPvj>
   b86a8:	4620      	mov	r0, r4
   b86aa:	bd10      	pop	{r4, pc}

000b86ac <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b86ac:	4a03      	ldr	r2, [pc, #12]	; (b86bc <_ZN10JsonBufferC1Ev+0x10>)
   b86ae:	6002      	str	r2, [r0, #0]
   b86b0:	2200      	movs	r2, #0
   b86b2:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b86b6:	60c2      	str	r2, [r0, #12]
   b86b8:	7402      	strb	r2, [r0, #16]
}
   b86ba:	4770      	bx	lr
   b86bc:	000c45a0 	.word	0x000c45a0

000b86c0 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b86c0:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b86c2:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b86c4:	4604      	mov	r4, r0
   b86c6:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b86c8:	b10b      	cbz	r3, b86ce <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b86ca:	2000      	movs	r0, #0
}
   b86cc:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b86ce:	6840      	ldr	r0, [r0, #4]
   b86d0:	b138      	cbz	r0, b86e2 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b86d2:	f004 fc43 	bl	bcf5c <realloc>
		if (newBuffer) {
   b86d6:	2800      	cmp	r0, #0
   b86d8:	d0f7      	beq.n	b86ca <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b86da:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b86de:	2001      	movs	r0, #1
   b86e0:	e7f4      	b.n	b86cc <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b86e2:	4608      	mov	r0, r1
   b86e4:	f004 fc2a 	bl	bcf3c <malloc>
   b86e8:	e7f5      	b.n	b86d6 <_ZN10JsonBuffer8allocateEj+0x16>

000b86ea <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b86ea:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b86ec:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b86ee:	460e      	mov	r6, r1
   b86f0:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b86f2:	18d1      	adds	r1, r2, r3
   b86f4:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b86f6:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b86f8:	b172      	cbz	r2, b8718 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b86fa:	6882      	ldr	r2, [r0, #8]
   b86fc:	428a      	cmp	r2, r1
   b86fe:	d30b      	bcc.n	b8718 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b8700:	6860      	ldr	r0, [r4, #4]
   b8702:	68e3      	ldr	r3, [r4, #12]
   b8704:	462a      	mov	r2, r5
   b8706:	4631      	mov	r1, r6
   b8708:	4418      	add	r0, r3
   b870a:	f008 fbc1 	bl	c0e90 <memcpy>
	offset += dataLen;
   b870e:	68e2      	ldr	r2, [r4, #12]
   b8710:	442a      	add	r2, r5
   b8712:	60e2      	str	r2, [r4, #12]
	return true;
   b8714:	2001      	movs	r0, #1
}
   b8716:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff ffd1 	bl	b86c0 <_ZN10JsonBuffer8allocateEj>
   b871e:	2800      	cmp	r0, #0
   b8720:	d1ee      	bne.n	b8700 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b8722:	e7f8      	b.n	b8716 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b8724 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b8724:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b8726:	2100      	movs	r1, #0
   b8728:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b872a:	b123      	cbz	r3, b8736 <_ZN10JsonBuffer5clearEv+0x12>
   b872c:	6882      	ldr	r2, [r0, #8]
   b872e:	b112      	cbz	r2, b8736 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b8730:	4618      	mov	r0, r3
   b8732:	f008 bbd5 	b.w	c0ee0 <memset>
}
   b8736:	4770      	bx	lr

000b8738 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b8738:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b873a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b873e:	2200      	movs	r2, #0
   b8740:	60c2      	str	r2, [r0, #12]
   b8742:	2201      	movs	r2, #1
   b8744:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b8746:	6143      	str	r3, [r0, #20]
   b8748:	4a02      	ldr	r2, [pc, #8]	; (b8754 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b874a:	9b02      	ldr	r3, [sp, #8]
   b874c:	6002      	str	r2, [r0, #0]
   b874e:	61c3      	str	r3, [r0, #28]
}
   b8750:	bd10      	pop	{r4, pc}
   b8752:	bf00      	nop
   b8754:	000c45b0 	.word	0x000c45b0

000b8758 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8758:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b875c:	4283      	cmp	r3, r0
   b875e:	d904      	bls.n	b876a <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b8760:	7802      	ldrb	r2, [r0, #0]
   b8762:	2a02      	cmp	r2, #2
   b8764:	d002      	beq.n	b876c <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b8766:	3010      	adds	r0, #16
   b8768:	e7f8      	b.n	b875c <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b876a:	2000      	movs	r0, #0
}
   b876c:	4770      	bx	lr

000b876e <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b876e:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8772:	4298      	cmp	r0, r3
   b8774:	d204      	bcs.n	b8780 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8776:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8778:	2b01      	cmp	r3, #1
   b877a:	bf18      	it	ne
   b877c:	2000      	movne	r0, #0
   b877e:	4770      	bx	lr
   b8780:	2000      	movs	r0, #0
}
   b8782:	4770      	bx	lr

000b8784 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8784:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8786:	6813      	ldr	r3, [r2, #0]
   b8788:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b878a:	6813      	ldr	r3, [r2, #0]
   b878c:	f103 0410 	add.w	r4, r3, #16
   b8790:	6014      	str	r4, [r2, #0]
   b8792:	6986      	ldr	r6, [r0, #24]
   b8794:	42b4      	cmp	r4, r6
   b8796:	d20a      	bcs.n	b87ae <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8798:	699b      	ldr	r3, [r3, #24]
   b879a:	688c      	ldr	r4, [r1, #8]
   b879c:	42a3      	cmp	r3, r4
   b879e:	da01      	bge.n	b87a4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b87a0:	42ab      	cmp	r3, r5
   b87a2:	ddf2      	ble.n	b878a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b87a4:	42a3      	cmp	r3, r4
   b87a6:	bfcc      	ite	gt
   b87a8:	2000      	movgt	r0, #0
   b87aa:	2001      	movle	r0, #1
   b87ac:	e000      	b.n	b87b0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b87ae:	2000      	movs	r0, #0
}
   b87b0:	bd70      	pop	{r4, r5, r6, pc}

000b87b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b87b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b87b4:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b87b8:	4604      	mov	r4, r0
   b87ba:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b87bc:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b87be:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b87c0:	9801      	ldr	r0, [sp, #4]
   b87c2:	69a3      	ldr	r3, [r4, #24]
   b87c4:	4283      	cmp	r3, r0
   b87c6:	d90b      	bls.n	b87e0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b87c8:	6882      	ldr	r2, [r0, #8]
   b87ca:	688b      	ldr	r3, [r1, #8]
   b87cc:	429a      	cmp	r2, r3
   b87ce:	da07      	bge.n	b87e0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b87d0:	42b5      	cmp	r5, r6
   b87d2:	d006      	beq.n	b87e2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b87d4:	aa01      	add	r2, sp, #4
   b87d6:	4620      	mov	r0, r4
		index++;
   b87d8:	3501      	adds	r5, #1
		skipObject(container, token);
   b87da:	f7ff ffd3 	bl	b8784 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b87de:	e7ef      	b.n	b87c0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b87e0:	2000      	movs	r0, #0
}
   b87e2:	b002      	add	sp, #8
   b87e4:	bd70      	pop	{r4, r5, r6, pc}

000b87e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b87e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b87ea:	9d08      	ldr	r5, [sp, #32]
   b87ec:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b87ee:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b87f2:	4604      	mov	r4, r0
   b87f4:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b87f6:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b87f8:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b87fa:	9801      	ldr	r0, [sp, #4]
   b87fc:	69a3      	ldr	r3, [r4, #24]
   b87fe:	4283      	cmp	r3, r0
   b8800:	d91a      	bls.n	b8838 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8802:	6882      	ldr	r2, [r0, #8]
   b8804:	688b      	ldr	r3, [r1, #8]
   b8806:	429a      	cmp	r2, r3
   b8808:	da16      	bge.n	b8838 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b880a:	42ae      	cmp	r6, r5
   b880c:	d10b      	bne.n	b8826 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b880e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8810:	aa01      	add	r2, sp, #4
   b8812:	4620      	mov	r0, r4
   b8814:	f7ff ffb6 	bl	b8784 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8818:	b128      	cbz	r0, b8826 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b881a:	9b01      	ldr	r3, [sp, #4]
   b881c:	f8c8 3000 	str.w	r3, [r8]
}
   b8820:	b002      	add	sp, #8
   b8822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8826:	aa01      	add	r2, sp, #4
   b8828:	4620      	mov	r0, r4
   b882a:	f7ff ffab 	bl	b8784 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b882e:	4620      	mov	r0, r4
		index++;
   b8830:	3601      	adds	r6, #1
		skipObject(container, token);
   b8832:	f7ff ffa7 	bl	b8784 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8836:	e7e0      	b.n	b87fa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8838:	2000      	movs	r0, #0
   b883a:	e7f1      	b.n	b8820 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b883c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b883c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b883e:	3b01      	subs	r3, #1
   b8840:	2400      	movs	r4, #0
   b8842:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8846:	1bf6      	subs	r6, r6, r7
   b8848:	42a6      	cmp	r6, r4
   b884a:	dd08      	ble.n	b885e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b884c:	42a3      	cmp	r3, r4
   b884e:	dd06      	ble.n	b885e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b8850:	6845      	ldr	r5, [r0, #4]
   b8852:	443d      	add	r5, r7
   b8854:	5d2d      	ldrb	r5, [r5, r4]
   b8856:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b885a:	3401      	adds	r4, #1
   b885c:	e7f1      	b.n	b8842 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b885e:	2300      	movs	r3, #0
   b8860:	7013      	strb	r3, [r2, #0]
}
   b8862:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8864 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8866:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8868:	2310      	movs	r3, #16
   b886a:	466a      	mov	r2, sp
   b886c:	f7ff ffe6 	bl	b883c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b8870:	4904      	ldr	r1, [pc, #16]	; (b8884 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b8872:	4622      	mov	r2, r4
   b8874:	4668      	mov	r0, sp
   b8876:	f004 fb81 	bl	bcf7c <sscanf>
}
   b887a:	1e43      	subs	r3, r0, #1
   b887c:	4258      	negs	r0, r3
   b887e:	4158      	adcs	r0, r3
   b8880:	b004      	add	sp, #16
   b8882:	bd10      	pop	{r4, pc}
   b8884:	000c35af 	.word	0x000c35af

000b8888 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b888a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b888c:	2310      	movs	r3, #16
   b888e:	466a      	mov	r2, sp
   b8890:	f7ff ffd4 	bl	b883c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8894:	4668      	mov	r0, sp
   b8896:	2100      	movs	r1, #0
   b8898:	f009 fa54 	bl	c1d44 <strtof>
}
   b889c:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b889e:	ed84 0a00 	vstr	s0, [r4]
}
   b88a2:	b004      	add	sp, #16
   b88a4:	bd10      	pop	{r4, pc}

000b88a6 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b88a6:	b510      	push	{r4, lr}
   b88a8:	4604      	mov	r4, r0
	if (str) {
   b88aa:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b88ac:	460b      	mov	r3, r1
	if (str) {
   b88ae:	b128      	cbz	r0, b88bc <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b88b0:	f006 ff81 	bl	bf7b6 <_ZN6String6concatEc>
		length++;
   b88b4:	68e3      	ldr	r3, [r4, #12]
   b88b6:	3301      	adds	r3, #1
   b88b8:	60e3      	str	r3, [r4, #12]
}
   b88ba:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b88bc:	6860      	ldr	r0, [r4, #4]
   b88be:	2800      	cmp	r0, #0
   b88c0:	d0f8      	beq.n	b88b4 <_ZN16JsonParserString6appendEc+0xe>
   b88c2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b88c6:	3a01      	subs	r2, #1
   b88c8:	428a      	cmp	r2, r1
			buf[length] = ch;
   b88ca:	bf88      	it	hi
   b88cc:	5443      	strbhi	r3, [r0, r1]
   b88ce:	e7f1      	b.n	b88b4 <_ZN16JsonParserString6appendEc+0xe>

000b88d0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b88d0:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b88d2:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b88d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b88d6:	4608      	mov	r0, r1
		str.append((char)unicode);
   b88d8:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b88da:	d804      	bhi.n	b88e6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b88dc:	b003      	add	sp, #12
   b88de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b88e2:	f7ff bfe0 	b.w	b88a6 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b88e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b88ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b88ee:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b88f2:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b88f6:	d207      	bcs.n	b8908 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b88f8:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b88fc:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b88fe:	f7ff ffd2 	bl	b88a6 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8902:	9801      	ldr	r0, [sp, #4]
   b8904:	4621      	mov	r1, r4
   b8906:	e7e9      	b.n	b88dc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8908:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b890a:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b890e:	9001      	str	r0, [sp, #4]
   b8910:	f7ff ffc9 	bl	b88a6 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8914:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8918:	9801      	ldr	r0, [sp, #4]
   b891a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b891e:	e7ee      	b.n	b88fe <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b8920 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8924:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8926:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8928:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b89f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b892c:	4680      	mov	r8, r0
   b892e:	460f      	mov	r7, r1
   b8930:	4615      	mov	r5, r2
			escape = false;
   b8932:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8934:	68b8      	ldr	r0, [r7, #8]
   b8936:	42b0      	cmp	r0, r6
   b8938:	dd5a      	ble.n	b89f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b893a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b893e:	5d99      	ldrb	r1, [r3, r6]
   b8940:	199a      	adds	r2, r3, r6
		if (escape) {
   b8942:	2c00      	cmp	r4, #0
   b8944:	d04b      	beq.n	b89de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8946:	2975      	cmp	r1, #117	; 0x75
   b8948:	d805      	bhi.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b894a:	296d      	cmp	r1, #109	; 0x6d
   b894c:	d807      	bhi.n	b895e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b894e:	2962      	cmp	r1, #98	; 0x62
   b8950:	d01e      	beq.n	b8990 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8952:	2966      	cmp	r1, #102	; 0x66
   b8954:	d01e      	beq.n	b8994 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8956:	4628      	mov	r0, r5
   b8958:	f7ff ffa5 	bl	b88a6 <_ZN16JsonParserString6appendEc>
				break;
   b895c:	e03d      	b.n	b89da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b895e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8962:	2c07      	cmp	r4, #7
   b8964:	d8f7      	bhi.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8966:	f20f 0c08 	addw	ip, pc, #8
   b896a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b896e:	bf00      	nop
   b8970:	000b8999 	.word	0x000b8999
   b8974:	000b8957 	.word	0x000b8957
   b8978:	000b8957 	.word	0x000b8957
   b897c:	000b8957 	.word	0x000b8957
   b8980:	000b899d 	.word	0x000b899d
   b8984:	000b8957 	.word	0x000b8957
   b8988:	000b89a1 	.word	0x000b89a1
   b898c:	000b89a5 	.word	0x000b89a5
				str.append('\b');
   b8990:	2108      	movs	r1, #8
   b8992:	e7e0      	b.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8994:	210c      	movs	r1, #12
   b8996:	e7de      	b.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8998:	210a      	movs	r1, #10
   b899a:	e7dc      	b.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b899c:	210d      	movs	r1, #13
   b899e:	e7da      	b.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b89a0:	2109      	movs	r1, #9
   b89a2:	e7d8      	b.n	b8956 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b89a4:	1d31      	adds	r1, r6, #4
   b89a6:	4288      	cmp	r0, r1
   b89a8:	dd17      	ble.n	b89da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b89aa:	a902      	add	r1, sp, #8
   b89ac:	3304      	adds	r3, #4
   b89ae:	4433      	add	r3, r6
   b89b0:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b89b2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b89b6:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b89ba:	429a      	cmp	r2, r3
   b89bc:	d1f9      	bne.n	b89b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b89be:	aa01      	add	r2, sp, #4
   b89c0:	4651      	mov	r1, sl
					tmp[4] = 0;
   b89c2:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b89c6:	f004 fad9 	bl	bcf7c <sscanf>
   b89ca:	2801      	cmp	r0, #1
   b89cc:	d105      	bne.n	b89da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b89ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b89d2:	4629      	mov	r1, r5
   b89d4:	f7ff ff7c 	bl	b88d0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b89d8:	3605      	adds	r6, #5
			escape = false;
   b89da:	2400      	movs	r4, #0
   b89dc:	e004      	b.n	b89e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b89de:	295c      	cmp	r1, #92	; 0x5c
   b89e0:	d004      	beq.n	b89ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b89e2:	4628      	mov	r0, r5
   b89e4:	f7ff ff5f 	bl	b88a6 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b89e8:	3601      	adds	r6, #1
   b89ea:	e7a3      	b.n	b8934 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b89ec:	2401      	movs	r4, #1
   b89ee:	e7fb      	b.n	b89e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b89f0:	2001      	movs	r0, #1
   b89f2:	b004      	add	sp, #16
   b89f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b89f8:	000c4e21 	.word	0x000c4e21

000b89fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b89fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b89fe:	460c      	mov	r4, r1
   b8a00:	4606      	mov	r6, r0
	result = "";
   b8a02:	490c      	ldr	r1, [pc, #48]	; (b8a34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8a04:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8a06:	4615      	mov	r5, r2
	result = "";
   b8a08:	f006 fe9b 	bl	bf742 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8a0c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8a10:	1ac9      	subs	r1, r1, r3
   b8a12:	3101      	adds	r1, #1
   b8a14:	4628      	mov	r0, r5
   b8a16:	f006 fe09 	bl	bf62c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8a1a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8a1c:	466a      	mov	r2, sp
   b8a1e:	4621      	mov	r1, r4
   b8a20:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8a22:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8a26:	9500      	str	r5, [sp, #0]
   b8a28:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8a2a:	f7ff ff79 	bl	b8920 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8a2e:	b004      	add	sp, #16
   b8a30:	bd70      	pop	{r4, r5, r6, pc}
   b8a32:	bf00      	nop
   b8a34:	000c4e80 	.word	0x000c4e80

000b8a38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a3c:	b089      	sub	sp, #36	; 0x24
   b8a3e:	4605      	mov	r5, r0
   b8a40:	4688      	mov	r8, r1
	String keyName;
   b8a42:	a804      	add	r0, sp, #16
   b8a44:	4912      	ldr	r1, [pc, #72]	; (b8a90 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8a46:	4616      	mov	r6, r2
   b8a48:	4699      	mov	r9, r3
	String keyName;
   b8a4a:	f006 fe1c 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8a4e:	2700      	movs	r7, #0
   b8a50:	9700      	str	r7, [sp, #0]
   b8a52:	464b      	mov	r3, r9
   b8a54:	aa03      	add	r2, sp, #12
   b8a56:	4641      	mov	r1, r8
   b8a58:	4628      	mov	r0, r5
   b8a5a:	f7ff fec4 	bl	b87e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8a5e:	4604      	mov	r4, r0
   b8a60:	b170      	cbz	r0, b8a80 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8a62:	9903      	ldr	r1, [sp, #12]
   b8a64:	aa04      	add	r2, sp, #16
   b8a66:	4628      	mov	r0, r5
   b8a68:	f7ff ffc8 	bl	b89fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8a6c:	4604      	mov	r4, r0
   b8a6e:	b908      	cbnz	r0, b8a74 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8a70:	3701      	adds	r7, #1
   b8a72:	e7ed      	b.n	b8a50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8a74:	4631      	mov	r1, r6
   b8a76:	a804      	add	r0, sp, #16
   b8a78:	f006 fecb 	bl	bf812 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8a7c:	2800      	cmp	r0, #0
   b8a7e:	d0f7      	beq.n	b8a70 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8a80:	a804      	add	r0, sp, #16
   b8a82:	f006 fdb5 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b8a86:	4620      	mov	r0, r4
   b8a88:	b009      	add	sp, #36	; 0x24
   b8a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8a8e:	bf00      	nop
   b8a90:	000c4e80 	.word	0x000c4e80

000b8a94 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8a94:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8a96:	2201      	movs	r2, #1
	offset = 0;
   b8a98:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8a9a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8a9c:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8a9e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8aa2:	4770      	bx	lr

000b8aa4 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4603      	mov	r3, r0
   b8aa8:	f7ff fe00 	bl	b86ac <_ZN10JsonBufferC1Ev>
   b8aac:	4a04      	ldr	r2, [pc, #16]	; (b8ac0 <_ZN10JsonWriterC1Ev+0x1c>)
   b8aae:	601a      	str	r2, [r3, #0]
   b8ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8ab4:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8ab6:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8ab8:	f7ff ffec 	bl	b8a94 <_ZN10JsonWriter4initEv>
}
   b8abc:	bd08      	pop	{r3, pc}
   b8abe:	bf00      	nop
   b8ac0:	000c45c0 	.word	0x000c45c0

000b8ac4 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8ac4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8ac8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8aca:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8acc:	bf3f      	itttt	cc
   b8ace:	6842      	ldrcc	r2, [r0, #4]
   b8ad0:	1c5c      	addcc	r4, r3, #1
   b8ad2:	60c4      	strcc	r4, [r0, #12]
   b8ad4:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8ad6:	bf24      	itt	cs
   b8ad8:	2301      	movcs	r3, #1
   b8ada:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8ade:	bd10      	pop	{r4, pc}

000b8ae0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8ae0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8ae2:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8ae4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8ae6:	b143      	cbz	r3, b8afa <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8ae8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8aec:	7e59      	ldrb	r1, [r3, #25]
   b8aee:	b109      	cbz	r1, b8af4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8af0:	f7ff ffe8 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8af4:	6963      	ldr	r3, [r4, #20]
   b8af6:	3b01      	subs	r3, #1
   b8af8:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8afa:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8afe:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8b00:	4288      	cmp	r0, r1
   b8b02:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8b06:	bf2a      	itet	cs
   b8b08:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8b0a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8b0c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8b10:	bd10      	pop	{r4, pc}

000b8b12 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8b12:	b570      	push	{r4, r5, r6, lr}
   b8b14:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8b16:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8b1a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8b1c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8b1e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8b20:	4430      	add	r0, r6
   b8b22:	460a      	mov	r2, r1
   b8b24:	4629      	mov	r1, r5
   b8b26:	f004 fa39 	bl	bcf9c <vsnprintf>
	if (count <= spaceAvailable) {
   b8b2a:	4285      	cmp	r5, r0
		offset += count;
   b8b2c:	bf2d      	iteet	cs
   b8b2e:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8b30:	68a3      	ldrcc	r3, [r4, #8]
   b8b32:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8b34:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8b36:	bf36      	itet	cc
   b8b38:	2301      	movcc	r3, #1
		offset += count;
   b8b3a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8b3c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8b40:	bd70      	pop	{r4, r5, r6, pc}

000b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8b42:	b40e      	push	{r1, r2, r3}
   b8b44:	b503      	push	{r0, r1, lr}
   b8b46:	aa03      	add	r2, sp, #12
   b8b48:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8b4c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8b4e:	f7ff ffe0 	bl	b8b12 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8b52:	b002      	add	sp, #8
   b8b54:	f85d eb04 	ldr.w	lr, [sp], #4
   b8b58:	b003      	add	sp, #12
   b8b5a:	4770      	bx	lr

000b8b5c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b60:	4604      	mov	r4, r0
   b8b62:	460e      	mov	r6, r1
	if (quoted) {
   b8b64:	4617      	mov	r7, r2
   b8b66:	b112      	cbz	r2, b8b6e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8b68:	2122      	movs	r1, #34	; 0x22
   b8b6a:	f7ff ffab 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8b6e:	f8df 810c 	ldr.w	r8, [pc, #268]	; b8c7c <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8b72:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8b74:	5d71      	ldrb	r1, [r6, r5]
   b8b76:	eb06 0905 	add.w	r9, r6, r5
   b8b7a:	2900      	cmp	r1, #0
   b8b7c:	d074      	beq.n	b8c68 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8b7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8b82:	429a      	cmp	r2, r3
   b8b84:	d270      	bcs.n	b8c68 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8b86:	060b      	lsls	r3, r1, #24
   b8b88:	d534      	bpl.n	b8bf4 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8b8a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8b8e:	2be0      	cmp	r3, #224	; 0xe0
   b8b90:	f105 0901 	add.w	r9, r5, #1
   b8b94:	d11d      	bne.n	b8bd2 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8b96:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8b9a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8b9e:	2b80      	cmp	r3, #128	; 0x80
   b8ba0:	d139      	bne.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8ba2:	f105 0902 	add.w	r9, r5, #2
   b8ba6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8baa:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8bae:	2880      	cmp	r0, #128	; 0x80
   b8bb0:	d131      	bne.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8bb6:	0192      	lsls	r2, r2, #6
   b8bb8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8bbc:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8bc0:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8bc2:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8bc4:	4641      	mov	r1, r8
   b8bc6:	4620      	mov	r0, r4
   b8bc8:	f7ff ffbb 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8bcc:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8bce:	3501      	adds	r5, #1
   b8bd0:	e7d0      	b.n	b8b74 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8bd2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8bd6:	2bc0      	cmp	r3, #192	; 0xc0
   b8bd8:	d11d      	bne.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8bda:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8bde:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8be2:	2a80      	cmp	r2, #128	; 0x80
   b8be4:	d117      	bne.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8be6:	0189      	lsls	r1, r1, #6
   b8be8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8bf0:	431a      	orrs	r2, r3
   b8bf2:	e7e7      	b.n	b8bc4 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8bf4:	290d      	cmp	r1, #13
   b8bf6:	d80a      	bhi.n	b8c0e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8bf8:	2907      	cmp	r1, #7
   b8bfa:	d90c      	bls.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8bfc:	f1a1 0308 	sub.w	r3, r1, #8
   b8c00:	2b05      	cmp	r3, #5
   b8c02:	d808      	bhi.n	b8c16 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8c04:	e8df f003 	tbb	[pc, r3]
   b8c08:	07172309 	.word	0x07172309
   b8c0c:	1d11      	.short	0x1d11
   b8c0e:	2922      	cmp	r1, #34	; 0x22
   b8c10:	d023      	beq.n	b8c5a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8c12:	295c      	cmp	r1, #92	; 0x5c
   b8c14:	d021      	beq.n	b8c5a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8c16:	4620      	mov	r0, r4
   b8c18:	e004      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8c1a:	215c      	movs	r1, #92	; 0x5c
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	f7ff ff51 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8c22:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8c24:	f7ff ff4e 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				break;
   b8c28:	e7d1      	b.n	b8bce <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b8c2a:	215c      	movs	r1, #92	; 0x5c
   b8c2c:	4620      	mov	r0, r4
   b8c2e:	f7ff ff49 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8c32:	2166      	movs	r1, #102	; 0x66
   b8c34:	e7f6      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8c36:	215c      	movs	r1, #92	; 0x5c
   b8c38:	4620      	mov	r0, r4
   b8c3a:	f7ff ff43 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8c3e:	216e      	movs	r1, #110	; 0x6e
   b8c40:	e7f0      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8c42:	215c      	movs	r1, #92	; 0x5c
   b8c44:	4620      	mov	r0, r4
   b8c46:	f7ff ff3d 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b8c4a:	2172      	movs	r1, #114	; 0x72
   b8c4c:	e7ea      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8c4e:	215c      	movs	r1, #92	; 0x5c
   b8c50:	4620      	mov	r0, r4
   b8c52:	f7ff ff37 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b8c56:	2174      	movs	r1, #116	; 0x74
   b8c58:	e7e4      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8c5a:	215c      	movs	r1, #92	; 0x5c
   b8c5c:	4620      	mov	r0, r4
   b8c5e:	f7ff ff31 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b8c62:	f899 1000 	ldrb.w	r1, [r9]
   b8c66:	e7dd      	b.n	b8c24 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b8c68:	b12f      	cbz	r7, b8c76 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	2122      	movs	r1, #34	; 0x22
}
   b8c6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b8c72:	f7ff bf27 	b.w	b8ac4 <_ZN10JsonWriter10insertCharEc>
}
   b8c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8c7a:	bf00      	nop
   b8c7c:	000c4588 	.word	0x000c4588

000b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b8c80:	6942      	ldr	r2, [r0, #20]
   b8c82:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b8c86:	7e1a      	ldrb	r2, [r3, #24]
   b8c88:	b112      	cbz	r2, b8c90 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b8c8a:	2200      	movs	r2, #0
   b8c8c:	761a      	strb	r2, [r3, #24]
}
   b8c8e:	4770      	bx	lr
		insertChar(',');
   b8c90:	212c      	movs	r1, #44	; 0x2c
   b8c92:	f7ff bf17 	b.w	b8ac4 <_ZN10JsonWriter10insertCharEc>

000b8c96 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8c98:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8c9a:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8c9c:	3301      	adds	r3, #1
   b8c9e:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8ca0:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8ca2:	d80f      	bhi.n	b8cc4 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b8ca4:	f7ff ffec 	bl	b8c80 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b8ca8:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b8caa:	9901      	ldr	r1, [sp, #4]
   b8cac:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b8cb0:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b8cb2:	2501      	movs	r5, #1
	contextIndex++;
   b8cb4:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b8cb6:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b8cb8:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b8cba:	f7ff ff03 	bl	b8ac4 <_ZN10JsonWriter10insertCharEc>
   b8cbe:	4628      	mov	r0, r5
}
   b8cc0:	b002      	add	sp, #8
   b8cc2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8cc4:	2000      	movs	r0, #0
   b8cc6:	e7fb      	b.n	b8cc0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b8cc8 <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b8cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cca:	4604      	mov	r4, r0
   b8ccc:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b8cd0:	f007 fcce 	bl	c0670 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b8cd4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b8cd6:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b8cd8:	4602      	mov	r2, r0
   b8cda:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b8cdc:	db08      	blt.n	b8cf0 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b8cde:	e9cd 2300 	strd	r2, r3, [sp]
   b8ce2:	4907      	ldr	r1, [pc, #28]	; (b8d00 <_ZN10JsonWriter11insertValueEf+0x38>)
   b8ce4:	462a      	mov	r2, r5
   b8ce6:	4620      	mov	r0, r4
   b8ce8:	f7ff ff2b 	bl	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b8cec:	b003      	add	sp, #12
   b8cee:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b8cf0:	4904      	ldr	r1, [pc, #16]	; (b8d04 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b8cf2:	4620      	mov	r0, r4
}
   b8cf4:	b003      	add	sp, #12
   b8cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b8cfa:	f7ff bf22 	b.w	b8b42 <_ZN10JsonWriter13insertsprintfEPKcz>
   b8cfe:	bf00      	nop
   b8d00:	000c458f 	.word	0x000c458f
   b8d04:	000c4594 	.word	0x000c4594

000b8d08 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b8d08:	b510      	push	{r4, lr}
   b8d0a:	4604      	mov	r4, r0
   b8d0c:	f7ff feca 	bl	b8aa4 <_ZN10JsonWriterC1Ev>
   b8d10:	4b05      	ldr	r3, [pc, #20]	; (b8d28 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8d12:	6023      	str	r3, [r4, #0]
   b8d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8d18:	2300      	movs	r3, #0
   b8d1a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8d1e:	6321      	str	r1, [r4, #48]	; 0x30
   b8d20:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8d22:	4620      	mov	r0, r4
   b8d24:	bd10      	pop	{r4, pc}
   b8d26:	bf00      	nop
   b8d28:	000c45d0 	.word	0x000c45d0

000b8d2c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8d2c:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8d2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8d30:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8d32:	4604      	mov	r4, r0
	if (start != -1) {
   b8d34:	d121      	bne.n	b8d7a <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b8d36:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b8d38:	684b      	ldr	r3, [r1, #4]
   b8d3a:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8d3c:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b8d3e:	6888      	ldr	r0, [r1, #8]
   b8d40:	1a1a      	subs	r2, r3, r0
   b8d42:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8d44:	68ae      	ldr	r6, [r5, #8]
   b8d46:	4430      	add	r0, r6
   b8d48:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b8d4a:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8d4c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8d4e:	dd05      	ble.n	b8d5c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8d50:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b8d52:	6889      	ldr	r1, [r1, #8]
   b8d54:	4401      	add	r1, r0
   b8d56:	4418      	add	r0, r3
   b8d58:	f008 f8a8 	bl	c0eac <memmove>
   b8d5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8d60:	6852      	ldr	r2, [r2, #4]
   b8d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8d64:	440a      	add	r2, r1
   b8d66:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8d68:	2101      	movs	r1, #1
	init();
   b8d6a:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b8d6c:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b8d70:	7421      	strb	r1, [r4, #16]
	init();
   b8d72:	f7ff fe8f 	bl	b8a94 <_ZN10JsonWriter4initEv>
   b8d76:	4608      	mov	r0, r1

	return true;
}
   b8d78:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8d7a:	2000      	movs	r0, #0
   b8d7c:	e7fc      	b.n	b8d78 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b8d7e <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8d7e:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8d82:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b8d84:	4604      	mov	r4, r0
   b8d86:	460e      	mov	r6, r1
	if (start != -1) {
   b8d88:	d129      	bne.n	b8dde <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8d8a:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b8d8c:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b8d8e:	3d01      	subs	r5, #1
   b8d90:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8d92:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b8d94:	1b5a      	subs	r2, r3, r5
   b8d96:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8d98:	6888      	ldr	r0, [r1, #8]
   b8d9a:	4428      	add	r0, r5
   b8d9c:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b8d9e:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8da0:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8da2:	dd04      	ble.n	b8dae <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8da4:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b8da6:	1941      	adds	r1, r0, r5
   b8da8:	4418      	add	r0, r3
   b8daa:	f008 f87f 	bl	c0eac <memmove>
   b8dae:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8db2:	6852      	ldr	r2, [r2, #4]
   b8db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8db6:	440a      	add	r2, r1
   b8db8:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8dba:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b8dbc:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b8dc0:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b8dc2:	7425      	strb	r5, [r4, #16]
	init();
   b8dc4:	f7ff fe66 	bl	b8a94 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b8dc8:	6963      	ldr	r3, [r4, #20]
   b8dca:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b8dce:	68f3      	ldr	r3, [r6, #12]
   b8dd0:	fab3 f383 	clz	r3, r3
   b8dd4:	095b      	lsrs	r3, r3, #5
   b8dd6:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b8dda:	4628      	mov	r0, r5

	return true;
}
   b8ddc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8dde:	2000      	movs	r0, #0
   b8de0:	e7fc      	b.n	b8ddc <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b8de4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8de8:	6844      	ldr	r4, [r0, #4]
   b8dea:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b8dee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8df2:	f8d0 e000 	ldr.w	lr, [r0]
   b8df6:	4596      	cmp	lr, r2
   b8df8:	f080 81b9 	bcs.w	b916e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b8dfc:	f811 800e 	ldrb.w	r8, [r1, lr]
   b8e00:	f1b8 0f00 	cmp.w	r8, #0
   b8e04:	f000 81b3 	beq.w	b916e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b8e08:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b8e0c:	f000 8098 	beq.w	b8f40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b8e10:	d833      	bhi.n	b8e7a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b8e12:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b8e16:	f000 80a6 	beq.w	b8f66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b8e1a:	d810      	bhi.n	b8e3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8e1c:	f1a8 0809 	sub.w	r8, r8, #9
   b8e20:	fa5f f888 	uxtb.w	r8, r8
   b8e24:	f1b8 0f17 	cmp.w	r8, #23
   b8e28:	d80d      	bhi.n	b8e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8e2a:	4d9f      	ldr	r5, [pc, #636]	; (b90a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8e2c:	fa0c f808 	lsl.w	r8, ip, r8
   b8e30:	ea18 0f05 	tst.w	r8, r5
   b8e34:	d007      	beq.n	b8e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8e36:	6805      	ldr	r5, [r0, #0]
   b8e38:	3501      	adds	r5, #1
   b8e3a:	6005      	str	r5, [r0, #0]
   b8e3c:	e7d9      	b.n	b8df2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b8e3e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b8e42:	f000 8133 	beq.w	b90ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8e46:	f8d0 8000 	ldr.w	r8, [r0]
   b8e4a:	4542      	cmp	r2, r8
   b8e4c:	d90e      	bls.n	b8e6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8e4e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8e52:	b15d      	cbz	r5, b8e6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8e54:	2d3a      	cmp	r5, #58	; 0x3a
   b8e56:	f200 8169 	bhi.w	b912c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b8e5a:	2d1f      	cmp	r5, #31
   b8e5c:	f200 8151 	bhi.w	b9102 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8e60:	2d0a      	cmp	r5, #10
   b8e62:	f200 8160 	bhi.w	b9126 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8e66:	2d08      	cmp	r5, #8
   b8e68:	f240 8156 	bls.w	b9118 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8e6c:	2b00      	cmp	r3, #0
   b8e6e:	f040 8162 	bne.w	b9136 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8e72:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8e76:	6005      	str	r5, [r0, #0]
   b8e78:	e0a5      	b.n	b8fc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b8e7a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8e7e:	d037      	beq.n	b8ef0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8e80:	d82e      	bhi.n	b8ee0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8e82:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8e86:	d033      	beq.n	b8ef0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8e88:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b8e8c:	d1db      	bne.n	b8e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b8e8e:	2b00      	cmp	r3, #0
   b8e90:	d0d1      	beq.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8e92:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8e96:	6845      	ldr	r5, [r0, #4]
   b8e98:	3d01      	subs	r5, #1
   b8e9a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b8e9e:	2d00      	cmp	r5, #0
   b8ea0:	db55      	blt.n	b8f4e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8ea2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8ea6:	3701      	adds	r7, #1
   b8ea8:	d04d      	beq.n	b8f46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8eaa:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b8eae:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8eb2:	d148      	bne.n	b8f46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8eb4:	f898 b000 	ldrb.w	fp, [r8]
   b8eb8:	45cb      	cmp	fp, r9
   b8eba:	d14b      	bne.n	b8f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8ebc:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8ec0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8ec4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8ec8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8ecc:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8ed0:	3701      	adds	r7, #1
   b8ed2:	d042      	beq.n	b8f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8ed4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8ed8:	3701      	adds	r7, #1
   b8eda:	d13e      	bne.n	b8f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b8edc:	6085      	str	r5, [r0, #8]
				break;
   b8ede:	e7aa      	b.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8ee0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8ee4:	d1af      	bne.n	b8e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8ee6:	2b00      	cmp	r3, #0
   b8ee8:	d0a5      	beq.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8eea:	f04f 0901 	mov.w	r9, #1
   b8eee:	e7d2      	b.n	b8e96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8ef0:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8ef2:	2b00      	cmp	r3, #0
   b8ef4:	d09f      	beq.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8ef6:	6845      	ldr	r5, [r0, #4]
   b8ef8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8efa:	42af      	cmp	r7, r5
   b8efc:	d94a      	bls.n	b8f94 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b8efe:	f105 0e01 	add.w	lr, r5, #1
   b8f02:	f8c0 e004 	str.w	lr, [r0, #4]
   b8f06:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b8f0a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b8f0e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b8f12:	2500      	movs	r5, #0
   b8f14:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8f18:	6885      	ldr	r5, [r0, #8]
   b8f1a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8f1c:	bf1f      	itttt	ne
   b8f1e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b8f22:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8f26:	3501      	addne	r5, #1
   b8f28:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8f2c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8f30:	bf0c      	ite	eq
   b8f32:	2501      	moveq	r5, #1
   b8f34:	2502      	movne	r5, #2
   b8f36:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b8f3a:	6805      	ldr	r5, [r0, #0]
   b8f3c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b8f40:	6845      	ldr	r5, [r0, #4]
   b8f42:	3d01      	subs	r5, #1
   b8f44:	e7ca      	b.n	b8edc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8f46:	3d01      	subs	r5, #1
   b8f48:	f1a8 0810 	sub.w	r8, r8, #16
   b8f4c:	e7a7      	b.n	b8e9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b8f4e:	3501      	adds	r5, #1
   b8f50:	f47f af71 	bne.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8f54:	f06f 0401 	mvn.w	r4, #1
   b8f58:	e01e      	b.n	b8f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b8f5a:	3d01      	subs	r5, #1
   b8f5c:	1c6f      	adds	r7, r5, #1
   b8f5e:	f1ae 0e10 	sub.w	lr, lr, #16
   b8f62:	d1b3      	bne.n	b8ecc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8f64:	e767      	b.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8f66:	f10e 0901 	add.w	r9, lr, #1
   b8f6a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8f6e:	f8d0 8000 	ldr.w	r8, [r0]
   b8f72:	4542      	cmp	r2, r8
   b8f74:	f240 8093 	bls.w	b909e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8f78:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8f7c:	2d00      	cmp	r5, #0
   b8f7e:	f000 808e 	beq.w	b909e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8f82:	2d22      	cmp	r5, #34	; 0x22
   b8f84:	d130      	bne.n	b8fe8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8f86:	b1f3      	cbz	r3, b8fc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8f88:	6845      	ldr	r5, [r0, #4]
   b8f8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8f8c:	42af      	cmp	r7, r5
   b8f8e:	d806      	bhi.n	b8f9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b8f90:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8f98:	4620      	mov	r0, r4
   b8f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b8f9e:	f105 0e01 	add.w	lr, r5, #1
   b8fa2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8fa6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8faa:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b8fae:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8fb2:	2700      	movs	r7, #0
   b8fb4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8fb6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b8fba:	f04f 0a03 	mov.w	sl, #3
   b8fbe:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b8fc2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b8fc6:	6885      	ldr	r5, [r0, #8]
   b8fc8:	1c6f      	adds	r7, r5, #1
				count++;
   b8fca:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b8fce:	f43f af32 	beq.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8fd2:	2b00      	cmp	r3, #0
   b8fd4:	f43f af2f 	beq.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8fd8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8fdc:	f8de 500c 	ldr.w	r5, [lr, #12]
   b8fe0:	3501      	adds	r5, #1
   b8fe2:	f8ce 500c 	str.w	r5, [lr, #12]
   b8fe6:	e726      	b.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8fe8:	2d5c      	cmp	r5, #92	; 0x5c
   b8fea:	d111      	bne.n	b9010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8fec:	f108 0501 	add.w	r5, r8, #1
   b8ff0:	42aa      	cmp	r2, r5
   b8ff2:	d90d      	bls.n	b9010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8ff4:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8ff6:	5d4d      	ldrb	r5, [r1, r5]
   b8ff8:	2d75      	cmp	r5, #117	; 0x75
   b8ffa:	d82b      	bhi.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8ffc:	2d6d      	cmp	r5, #109	; 0x6d
   b8ffe:	d80b      	bhi.n	b9018 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b9000:	2d66      	cmp	r5, #102	; 0x66
   b9002:	d827      	bhi.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9004:	2d5b      	cmp	r5, #91	; 0x5b
   b9006:	d81d      	bhi.n	b9044 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b9008:	2d22      	cmp	r5, #34	; 0x22
   b900a:	d001      	beq.n	b9010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b900c:	2d2f      	cmp	r5, #47	; 0x2f
   b900e:	d121      	bne.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9010:	6805      	ldr	r5, [r0, #0]
   b9012:	3501      	adds	r5, #1
   b9014:	6005      	str	r5, [r0, #0]
   b9016:	e7aa      	b.n	b8f6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b9018:	3d6e      	subs	r5, #110	; 0x6e
   b901a:	2d07      	cmp	r5, #7
   b901c:	d81a      	bhi.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b901e:	a701      	add	r7, pc, #4	; (adr r7, b9024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b9020:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b9024:	000b9011 	.word	0x000b9011
   b9028:	000b9055 	.word	0x000b9055
   b902c:	000b9055 	.word	0x000b9055
   b9030:	000b9055 	.word	0x000b9055
   b9034:	000b9011 	.word	0x000b9011
   b9038:	000b9055 	.word	0x000b9055
   b903c:	000b9011 	.word	0x000b9011
   b9040:	000b905b 	.word	0x000b905b
   b9044:	3d5c      	subs	r5, #92	; 0x5c
   b9046:	b2ed      	uxtb	r5, r5
   b9048:	fa0c f505 	lsl.w	r5, ip, r5
   b904c:	f240 4741 	movw	r7, #1089	; 0x441
   b9050:	423d      	tst	r5, r7
   b9052:	d1dd      	bne.n	b9010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b9054:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b9058:	e77c      	b.n	b8f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b905a:	f108 0502 	add.w	r5, r8, #2
   b905e:	6005      	str	r5, [r0, #0]
   b9060:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9064:	f8d0 8000 	ldr.w	r8, [r0]
   b9068:	4542      	cmp	r2, r8
   b906a:	d803      	bhi.n	b9074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b906c:	6805      	ldr	r5, [r0, #0]
   b906e:	3d01      	subs	r5, #1
   b9070:	6005      	str	r5, [r0, #0]
					break;
   b9072:	e7cd      	b.n	b9010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9074:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9078:	2d00      	cmp	r5, #0
   b907a:	d0f7      	beq.n	b906c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b907c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b9080:	f1bb 0f09 	cmp.w	fp, #9
   b9084:	d904      	bls.n	b9090 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b9086:	f025 0520 	bic.w	r5, r5, #32
   b908a:	3d41      	subs	r5, #65	; 0x41
   b908c:	2d05      	cmp	r5, #5
   b908e:	d8e1      	bhi.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b9090:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9094:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b9098:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b909a:	d1e3      	bne.n	b9064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b909c:	e7e6      	b.n	b906c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b909e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b90a2:	f06f 0402 	mvn.w	r4, #2
   b90a6:	e777      	b.n	b8f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b90a8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b90ac:	2b00      	cmp	r3, #0
   b90ae:	f43f aec2 	beq.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b90b2:	6885      	ldr	r5, [r0, #8]
   b90b4:	1c6f      	adds	r7, r5, #1
   b90b6:	f43f aebe 	beq.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b90ba:	012d      	lsls	r5, r5, #4
   b90bc:	5d5d      	ldrb	r5, [r3, r5]
   b90be:	3d01      	subs	r5, #1
   b90c0:	2d01      	cmp	r5, #1
   b90c2:	f67f aeb8 	bls.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b90c6:	6845      	ldr	r5, [r0, #4]
   b90c8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b90cc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b90d0:	f1b8 0f00 	cmp.w	r8, #0
   b90d4:	f6ff aeaf 	blt.w	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b90d8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b90dc:	3d01      	subs	r5, #1
   b90de:	2d01      	cmp	r5, #1
   b90e0:	d80a      	bhi.n	b90f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b90e2:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b90e6:	3501      	adds	r5, #1
   b90e8:	d006      	beq.n	b90f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b90ea:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b90ee:	3501      	adds	r5, #1
   b90f0:	d102      	bne.n	b90f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b90f2:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b90f6:	e69e      	b.n	b8e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b90f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b90fc:	f1ae 0e10 	sub.w	lr, lr, #16
   b9100:	e7e6      	b.n	b90d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b9102:	f1a5 0920 	sub.w	r9, r5, #32
   b9106:	4f24      	ldr	r7, [pc, #144]	; (b9198 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b9108:	fa5f f989 	uxtb.w	r9, r9
   b910c:	fa0c f909 	lsl.w	r9, ip, r9
   b9110:	ea19 0f07 	tst.w	r9, r7
   b9114:	f47f aeaa 	bne.w	b8e6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b9118:	3d20      	subs	r5, #32
   b911a:	2d5e      	cmp	r5, #94	; 0x5e
   b911c:	d89a      	bhi.n	b9054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b911e:	f108 0501 	add.w	r5, r8, #1
   b9122:	6005      	str	r5, [r0, #0]
   b9124:	e68f      	b.n	b8e46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b9126:	2d0d      	cmp	r5, #13
   b9128:	d1f6      	bne.n	b9118 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b912a:	e69f      	b.n	b8e6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b912c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b9130:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b9134:	e7f8      	b.n	b9128 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b9136:	6845      	ldr	r5, [r0, #4]
   b9138:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b913a:	42af      	cmp	r7, r5
   b913c:	f67f af28 	bls.w	b8f90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b9140:	f105 0801 	add.w	r8, r5, #1
   b9144:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b9148:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b914c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b9150:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b9154:	2700      	movs	r7, #0
   b9156:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b9158:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b915c:	f04f 0a04 	mov.w	sl, #4
   b9160:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b9164:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b9168:	6805      	ldr	r5, [r0, #0]
   b916a:	3d01      	subs	r5, #1
   b916c:	e683      	b.n	b8e76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b916e:	2b00      	cmp	r3, #0
   b9170:	f43f af12 	beq.w	b8f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9174:	6842      	ldr	r2, [r0, #4]
   b9176:	1e51      	subs	r1, r2, #1
   b9178:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b917c:	2900      	cmp	r1, #0
   b917e:	f6ff af0b 	blt.w	b8f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b9182:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b9186:	3201      	adds	r2, #1
   b9188:	d003      	beq.n	b9192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b918a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b918e:	3201      	adds	r2, #1
   b9190:	d087      	beq.n	b90a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9192:	3901      	subs	r1, #1
   b9194:	3b10      	subs	r3, #16
   b9196:	e7f1      	b.n	b917c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b9198:	04001001 	.word	0x04001001

000b919c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b919c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b919e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b91a0:	4604      	mov	r4, r0
	if (offset == 0) {
   b91a2:	b912      	cbnz	r2, b91aa <_ZN10JsonParser5parseEv+0xe>
		return false;
   b91a4:	2000      	movs	r0, #0
}
   b91a6:	b003      	add	sp, #12
   b91a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b91aa:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b91ac:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b91b0:	b1ab      	cbz	r3, b91de <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b91b2:	2100      	movs	r1, #0
	parser->toknext = 0;
   b91b4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b91b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b91bc:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b91be:	69c1      	ldr	r1, [r0, #28]
   b91c0:	9100      	str	r1, [sp, #0]
   b91c2:	6841      	ldr	r1, [r0, #4]
   b91c4:	4630      	mov	r0, r6
   b91c6:	f7ff fe0d 	bl	b8de4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b91ca:	1c43      	adds	r3, r0, #1
   b91cc:	d128      	bne.n	b9220 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b91ce:	7c25      	ldrb	r5, [r4, #16]
   b91d0:	2d00      	cmp	r5, #0
   b91d2:	d1e7      	bne.n	b91a4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b91d4:	6960      	ldr	r0, [r4, #20]
   b91d6:	f003 feb9 	bl	bcf4c <free>
			tokens = 0;
   b91da:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b91dc:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b91de:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b91e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b91e4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b91e8:	68e2      	ldr	r2, [r4, #12]
   b91ea:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b91ec:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b91ee:	9500      	str	r5, [sp, #0]
   b91f0:	462b      	mov	r3, r5
   b91f2:	4630      	mov	r0, r6
   b91f4:	f7ff fdf6 	bl	b8de4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b91f8:	2800      	cmp	r0, #0
   b91fa:	dbd3      	blt.n	b91a4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b91fc:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b91fe:	d017      	beq.n	b9230 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b9200:	0100      	lsls	r0, r0, #4
   b9202:	f003 fe9b 	bl	bcf3c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9206:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b9208:	6160      	str	r0, [r4, #20]
   b920a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b920c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b920e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9212:	68e2      	ldr	r2, [r4, #12]
   b9214:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b9216:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9218:	4630      	mov	r0, r6
   b921a:	f7ff fde3 	bl	b8de4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b921e:	e001      	b.n	b9224 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b9220:	2800      	cmp	r0, #0
   b9222:	dbbf      	blt.n	b91a4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b9224:	6963      	ldr	r3, [r4, #20]
   b9226:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b922a:	61a0      	str	r0, [r4, #24]
	return true;
   b922c:	2001      	movs	r0, #1
   b922e:	e7ba      	b.n	b91a6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b9230:	6963      	ldr	r3, [r4, #20]
   b9232:	61a3      	str	r3, [r4, #24]
   b9234:	e7fa      	b.n	b922c <_ZN10JsonParser5parseEv+0x90>

000b9236 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b9236:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b9238:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b923a:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b923c:	4604      	mov	r4, r0
	if (start == -1) {
   b923e:	d018      	beq.n	b9272 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b9240:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b9242:	2a00      	cmp	r2, #0
   b9244:	dd08      	ble.n	b9258 <_ZN12JsonModifier6finishEv+0x22>
   b9246:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b9248:	68e5      	ldr	r5, [r4, #12]
   b924a:	6848      	ldr	r0, [r1, #4]
   b924c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b924e:	442b      	add	r3, r5
   b9250:	4401      	add	r1, r0
   b9252:	4418      	add	r0, r3
   b9254:	f007 fe2a 	bl	c0eac <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b9258:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b925c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b925e:	440b      	add	r3, r1
   b9260:	68e1      	ldr	r1, [r4, #12]
   b9262:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b9264:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b9266:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b9268:	f7ff ff98 	bl	b919c <_ZN10JsonParser5parseEv>
	start = -1;
   b926c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9270:	6363      	str	r3, [r4, #52]	; 0x34
}
   b9272:	bd38      	pop	{r3, r4, r5, pc}

000b9274 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b9274:	4770      	bx	lr

000b9276 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b9276:	4770      	bx	lr

000b9278 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b9278:	b510      	push	{r4, lr}
}
   b927a:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b927c:	4604      	mov	r4, r0
}
   b927e:	f7fa ff0e 	bl	b409e <_ZdlPvj>
   b9282:	4620      	mov	r0, r4
   b9284:	bd10      	pop	{r4, pc}

000b9286 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b9286:	b510      	push	{r4, lr}
}
   b9288:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b928a:	4604      	mov	r4, r0
}
   b928c:	f7fa ff07 	bl	b409e <_ZdlPvj>
   b9290:	4620      	mov	r0, r4
   b9292:	bd10      	pop	{r4, pc}

000b9294 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9294:	b510      	push	{r4, lr}
   b9296:	4b05      	ldr	r3, [pc, #20]	; (b92ac <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b9298:	4604      	mov	r4, r0
   b929a:	f840 3b1c 	str.w	r3, [r0], #28
   b929e:	f006 f9a7 	bl	bf5f0 <_ZN6StringD1Ev>
   b92a2:	1d20      	adds	r0, r4, #4
   b92a4:	f006 f9a4 	bl	bf5f0 <_ZN6StringD1Ev>
}
   b92a8:	4620      	mov	r0, r4
   b92aa:	bd10      	pop	{r4, pc}
   b92ac:	000c4644 	.word	0x000c4644

000b92b0 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b92b0:	b510      	push	{r4, lr}
   b92b2:	4604      	mov	r4, r0
}
   b92b4:	f7ff ffee 	bl	b9294 <_ZN22LocalTimePosixTimezoneD1Ev>
   b92b8:	4620      	mov	r0, r4
   b92ba:	2158      	movs	r1, #88	; 0x58
   b92bc:	f7fa feef 	bl	b409e <_ZdlPvj>
   b92c0:	4620      	mov	r0, r4
   b92c2:	bd10      	pop	{r4, pc}

000b92c4 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b92c4:	b510      	push	{r4, lr}
   b92c6:	4b04      	ldr	r3, [pc, #16]	; (b92d8 <_ZN9LocalTimeD1Ev+0x14>)
   b92c8:	4604      	mov	r4, r0
   b92ca:	f840 3b04 	str.w	r3, [r0], #4
   b92ce:	f7ff ffe1 	bl	b9294 <_ZN22LocalTimePosixTimezoneD1Ev>
   b92d2:	4620      	mov	r0, r4
   b92d4:	bd10      	pop	{r4, pc}
   b92d6:	bf00      	nop
   b92d8:	000c4614 	.word	0x000c4614

000b92dc <_ZN9LocalTimeD0Ev>:
   b92dc:	b510      	push	{r4, lr}
   b92de:	4604      	mov	r4, r0
   b92e0:	f7ff fff0 	bl	b92c4 <_ZN9LocalTimeD1Ev>
   b92e4:	4620      	mov	r0, r4
   b92e6:	2160      	movs	r1, #96	; 0x60
   b92e8:	f7fa fed9 	bl	b409e <_ZdlPvj>
   b92ec:	4620      	mov	r0, r4
   b92ee:	bd10      	pop	{r4, pc}

000b92f0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b92f0:	f020 0302 	bic.w	r3, r0, #2
   b92f4:	2b01      	cmp	r3, #1
   b92f6:	d003      	beq.n	b9300 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b92f8:	1f43      	subs	r3, r0, #5
   b92fa:	4258      	negs	r0, r3
   b92fc:	4158      	adcs	r0, r3
   b92fe:	4770      	bx	lr
   b9300:	4618      	mov	r0, r3
   b9302:	4770      	bx	lr

000b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b9304:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b9308:	7103      	strb	r3, [r0, #4]
   b930a:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b930e:	7143      	strb	r3, [r0, #5]
   b9310:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b9314:	7183      	strb	r3, [r0, #6]
   b9316:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b931a:	71c3      	strb	r3, [r0, #7]
   b931c:	4770      	bx	lr

000b931e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b931e:	b538      	push	{r3, r4, r5, lr}
   b9320:	4604      	mov	r4, r0
   b9322:	460d      	mov	r5, r1
   b9324:	3004      	adds	r0, #4
   b9326:	3104      	adds	r1, #4
   b9328:	f006 f9e9 	bl	bf6fe <_ZN6StringaSERKS_>
   b932c:	f105 0114 	add.w	r1, r5, #20
   b9330:	f104 0014 	add.w	r0, r4, #20
   b9334:	f7ff ffe6 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9338:	f105 011c 	add.w	r1, r5, #28
   b933c:	f104 001c 	add.w	r0, r4, #28
   b9340:	f006 f9dd 	bl	bf6fe <_ZN6StringaSERKS_>
   b9344:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b9348:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b934c:	f7ff ffda 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b9350:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b9354:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b9358:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b935c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b9360:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b9364:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b9368:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b936c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b9370:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b9374:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9378:	f7ff ffc4 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b937c:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b9380:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b9384:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b9388:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b938c:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b9390:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b9394:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b9398:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b939c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b93a0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b93a4:	f7ff ffae 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b93a8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b93ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b93b0:	bd38      	pop	{r3, r4, r5, pc}

000b93b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93b2:	680b      	ldr	r3, [r1, #0]
   b93b4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b93b6:	684b      	ldr	r3, [r1, #4]
   b93b8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b93ba:	b113      	cbz	r3, b93c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b93bc:	685a      	ldr	r2, [r3, #4]
   b93be:	3201      	adds	r2, #1
   b93c0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93c2:	4770      	bx	lr

000b93c4 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b93c4:	4a02      	ldr	r2, [pc, #8]	; (b93d0 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b93c6:	6002      	str	r2, [r0, #0]
   b93c8:	684a      	ldr	r2, [r1, #4]
   b93ca:	6042      	str	r2, [r0, #4]
   b93cc:	4770      	bx	lr
   b93ce:	bf00      	nop
   b93d0:	000c4624 	.word	0x000c4624

000b93d4 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b93d4:	694a      	ldr	r2, [r1, #20]
   b93d6:	6803      	ldr	r3, [r0, #0]
   b93d8:	f362 0316 	bfi	r3, r2, #0, #23
   b93dc:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b93de:	690b      	ldr	r3, [r1, #16]
   b93e0:	1c5a      	adds	r2, r3, #1
   b93e2:	8843      	ldrh	r3, [r0, #2]
   b93e4:	f362 13ca 	bfi	r3, r2, #7, #4
   b93e8:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b93ea:	68ca      	ldr	r2, [r1, #12]
   b93ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b93f0:	f362 03c7 	bfi	r3, r2, #3, #5
   b93f4:	70c3      	strb	r3, [r0, #3]
}
   b93f6:	4770      	bx	lr

000b93f8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b93f8:	4a02      	ldr	r2, [pc, #8]	; (b9404 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b93fa:	6002      	str	r2, [r0, #0]
   b93fc:	2200      	movs	r2, #0
   b93fe:	6042      	str	r2, [r0, #4]
}
   b9400:	4770      	bx	lr
   b9402:	bf00      	nop
   b9404:	000c4624 	.word	0x000c4624

000b9408 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b9408:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b940a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b940c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b940e:	8083      	strh	r3, [r0, #4]
   b9410:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b9412:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b9414:	ab05      	add	r3, sp, #20
   b9416:	9300      	str	r3, [sp, #0]
   b9418:	4913      	ldr	r1, [pc, #76]	; (b9468 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b941a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b941c:	ab04      	add	r3, sp, #16
   b941e:	aa03      	add	r2, sp, #12
   b9420:	4628      	mov	r0, r5
   b9422:	f003 fdab 	bl	bcf7c <sscanf>
   b9426:	2803      	cmp	r0, #3
   b9428:	d107      	bne.n	b943a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b942a:	9b03      	ldr	r3, [sp, #12]
   b942c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b942e:	9b04      	ldr	r3, [sp, #16]
   b9430:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b9432:	9b05      	ldr	r3, [sp, #20]
   b9434:	71a3      	strb	r3, [r4, #6]
}
   b9436:	b007      	add	sp, #28
   b9438:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b943a:	490c      	ldr	r1, [pc, #48]	; (b946c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b943c:	ab04      	add	r3, sp, #16
   b943e:	aa03      	add	r2, sp, #12
   b9440:	4628      	mov	r0, r5
   b9442:	f003 fd9b 	bl	bcf7c <sscanf>
   b9446:	2802      	cmp	r0, #2
   b9448:	d104      	bne.n	b9454 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b944a:	9b03      	ldr	r3, [sp, #12]
   b944c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b944e:	9b04      	ldr	r3, [sp, #16]
   b9450:	7163      	strb	r3, [r4, #5]
   b9452:	e7f0      	b.n	b9436 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b9454:	4906      	ldr	r1, [pc, #24]	; (b9470 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b9456:	aa03      	add	r2, sp, #12
   b9458:	4628      	mov	r0, r5
   b945a:	f003 fd8f 	bl	bcf7c <sscanf>
   b945e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b9460:	bf04      	itt	eq
   b9462:	9b03      	ldreq	r3, [sp, #12]
   b9464:	7123      	strbeq	r3, [r4, #4]
}
   b9466:	e7e6      	b.n	b9436 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b9468:	000c45d8 	.word	0x000c45d8
   b946c:	000c45db 	.word	0x000c45db
   b9470:	000c35af 	.word	0x000c35af

000b9474 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b9474:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9478:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b947c:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b9480:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9482:	bfb8      	it	lt
   b9484:	4808      	ldrlt	r0, [pc, #32]	; (b94a8 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b9486:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b948a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b948e:	bfbd      	ittte	lt
   b9490:	fb00 3002 	mlalt	r0, r0, r2, r3
   b9494:	1840      	addlt	r0, r0, r1
   b9496:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b9498:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b949c:	bfa4      	itt	ge
   b949e:	fb00 3002 	mlage	r0, r0, r2, r3
   b94a2:	1840      	addge	r0, r0, r1
}
   b94a4:	4770      	bx	lr
   b94a6:	bf00      	nop
   b94a8:	fffff1f0 	.word	0xfffff1f0

000b94ac <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b94ac:	b508      	push	{r3, lr}
   b94ae:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b94b2:	b14b      	cbz	r3, b94c8 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b94b4:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b94b8:	b943      	cbnz	r3, b94cc <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b94ba:	302c      	adds	r0, #44	; 0x2c
   b94bc:	f7ff ffda 	bl	b9474 <_ZNK12LocalTimeHMS9toSecondsEv>
   b94c0:	fab0 f080 	clz	r0, r0
   b94c4:	0940      	lsrs	r0, r0, #5
   b94c6:	bd08      	pop	{r3, pc}
   b94c8:	2001      	movs	r0, #1
   b94ca:	e7fc      	b.n	b94c6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b94cc:	2000      	movs	r0, #0
   b94ce:	e7fa      	b.n	b94c6 <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b94d0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b94d0:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b94d4:	b943      	cbnz	r3, b94e8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b94d6:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b94da:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b94dc:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b94e0:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b94e2:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b94e6:	600b      	str	r3, [r1, #0]
}
   b94e8:	4770      	bx	lr

000b94ea <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b94ea:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b94ee:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b94f0:	b9b3      	cbnz	r3, b9520 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b94f2:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b94f6:	688c      	ldr	r4, [r1, #8]
   b94f8:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b94fa:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b94fe:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b9500:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b9504:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b9506:	bfb5      	itete	lt
   b9508:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b950a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b950c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b950e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b9510:	bfb5      	itete	lt
   b9512:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b9516:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b951a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b951c:	189b      	addge	r3, r3, r2
   b951e:	600b      	str	r3, [r1, #0]
}
   b9520:	bd30      	pop	{r4, r5, pc}
	...

000b9524 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b9524:	b508      	push	{r3, lr}
   b9526:	4a05      	ldr	r2, [pc, #20]	; (b953c <_ZN15LocalTimeChangeC1Ev+0x18>)
   b9528:	6002      	str	r2, [r0, #0]
   b952a:	2200      	movs	r2, #0
   b952c:	4603      	mov	r3, r0
   b952e:	6042      	str	r2, [r0, #4]
   b9530:	3008      	adds	r0, #8
   b9532:	f7ff ff61 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
}
   b9536:	4618      	mov	r0, r3
   b9538:	bd08      	pop	{r3, pc}
   b953a:	bf00      	nop
   b953c:	000c4634 	.word	0x000c4634

000b9540 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b9540:	2300      	movs	r3, #0
   b9542:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b9544:	8183      	strh	r3, [r0, #12]
   b9546:	7383      	strb	r3, [r0, #14]
}
   b9548:	4770      	bx	lr
	...

000b954c <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b954c:	b530      	push	{r4, r5, lr}
   b954e:	4604      	mov	r4, r0
   b9550:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b9552:	460d      	mov	r5, r1
   b9554:	b111      	cbz	r1, b955c <_ZN15LocalTimeChange5parseEPKc+0x10>
   b9556:	780b      	ldrb	r3, [r1, #0]
   b9558:	2b4d      	cmp	r3, #77	; 0x4d
   b955a:	d005      	beq.n	b9568 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b955c:	4620      	mov	r0, r4
}
   b955e:	b007      	add	sp, #28
   b9560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b9564:	f7ff bfec 	b.w	b9540 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b9568:	ab05      	add	r3, sp, #20
   b956a:	9300      	str	r3, [sp, #0]
   b956c:	4911      	ldr	r1, [pc, #68]	; (b95b4 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b956e:	ab04      	add	r3, sp, #16
   b9570:	aa03      	add	r2, sp, #12
   b9572:	4628      	mov	r0, r5
   b9574:	f003 fd02 	bl	bcf7c <sscanf>
   b9578:	2803      	cmp	r0, #3
   b957a:	d116      	bne.n	b95aa <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b957c:	9b03      	ldr	r3, [sp, #12]
   b957e:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b9580:	9b04      	ldr	r3, [sp, #16]
   b9582:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b9584:	9b05      	ldr	r3, [sp, #20]
   b9586:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b9588:	212f      	movs	r1, #47	; 0x2f
   b958a:	4628      	mov	r0, r5
   b958c:	f007 fd2c 	bl	c0fe8 <strchr>
        if (cp) {
   b9590:	b140      	cbz	r0, b95a4 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b9592:	1c41      	adds	r1, r0, #1
   b9594:	f104 0008 	add.w	r0, r4, #8
   b9598:	f7ff ff36 	bl	b9408 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b959c:	2301      	movs	r3, #1
   b959e:	71e3      	strb	r3, [r4, #7]
}
   b95a0:	b007      	add	sp, #28
   b95a2:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b95a4:	81a0      	strh	r0, [r4, #12]
   b95a6:	73a0      	strb	r0, [r4, #14]
}
   b95a8:	e7f8      	b.n	b959c <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b95aa:	4620      	mov	r0, r4
   b95ac:	f7ff ffc8 	bl	b9540 <_ZN15LocalTimeChange5clearEv>
   b95b0:	e7f6      	b.n	b95a0 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b95b2:	bf00      	nop
   b95b4:	000c45f3 	.word	0x000c45f3

000b95b8 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b95b8:	4b10      	ldr	r3, [pc, #64]	; (b95fc <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b95ba:	4911      	ldr	r1, [pc, #68]	; (b9600 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b95bc:	b510      	push	{r4, lr}
   b95be:	4604      	mov	r4, r0
   b95c0:	f840 3b04 	str.w	r3, [r0], #4
   b95c4:	f006 f85f 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   b95c8:	f104 0014 	add.w	r0, r4, #20
   b95cc:	f7ff ff14 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
   b95d0:	490b      	ldr	r1, [pc, #44]	; (b9600 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b95d2:	f104 001c 	add.w	r0, r4, #28
   b95d6:	f006 f856 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   b95da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b95de:	f7ff ff0b 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
   b95e2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b95e6:	f7ff ff9d 	bl	b9524 <_ZN15LocalTimeChangeC1Ev>
   b95ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b95ee:	f7ff ff99 	bl	b9524 <_ZN15LocalTimeChangeC1Ev>
   b95f2:	2300      	movs	r3, #0
   b95f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b95f8:	4620      	mov	r0, r4
   b95fa:	bd10      	pop	{r4, pc}
   b95fc:	000c4644 	.word	0x000c4644
   b9600:	000c4e80 	.word	0x000c4e80

000b9604 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b9604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9608:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b960a:	4608      	mov	r0, r1
   b960c:	f007 fd16 	bl	c103c <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b9610:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b9612:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b9614:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b9616:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b961a:	493f      	ldr	r1, [pc, #252]	; (b9718 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b961c:	9801      	ldr	r0, [sp, #4]
   b961e:	aa01      	add	r2, sp, #4
   b9620:	f008 fc14 	bl	c1e4c <strtok_r>
   b9624:	4601      	mov	r1, r0
   b9626:	2800      	cmp	r0, #0
   b9628:	d062      	beq.n	b96f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b962a:	2d01      	cmp	r5, #1
   b962c:	f105 0301 	add.w	r3, r5, #1
   b9630:	d053      	beq.n	b96da <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b9632:	2d02      	cmp	r5, #2
   b9634:	d056      	beq.n	b96e4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b9636:	2d00      	cmp	r5, #0
   b9638:	d146      	bne.n	b96c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b963a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b963c:	f892 9000 	ldrb.w	r9, [r2]
   b9640:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b9644:	4615      	mov	r5, r2
   b9646:	4617      	mov	r7, r2
   b9648:	f102 0201 	add.w	r2, r2, #1
   b964c:	d8f6      	bhi.n	b963c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b964e:	2200      	movs	r2, #0
   b9650:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b9652:	f104 001c 	add.w	r0, r4, #28
   b9656:	f006 f874 	bl	bf742 <_ZN6StringaSEPKc>
                valid = true;
   b965a:	2201      	movs	r2, #1
                *cp = save2;
   b965c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b9660:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b9664:	782a      	ldrb	r2, [r5, #0]
   b9666:	b36a      	cbz	r2, b96c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b9668:	f897 a000 	ldrb.w	sl, [r7]
   b966c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b9670:	2a3f      	cmp	r2, #63	; 0x3f
   b9672:	46b9      	mov	r9, r7
   b9674:	46bb      	mov	fp, r7
   b9676:	f107 0701 	add.w	r7, r7, #1
   b967a:	d9f5      	bls.n	b9668 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b967c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b967e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b9682:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b9686:	4629      	mov	r1, r5
   b9688:	4638      	mov	r0, r7
   b968a:	f7ff febd 	bl	b9408 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b968e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b9692:	f1ba 0f00 	cmp.w	sl, #0
   b9696:	d015      	beq.n	b96c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b9698:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b969a:	f81b ab01 	ldrb.w	sl, [fp], #1
   b969e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b96a2:	d8f9      	bhi.n	b9698 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b96a4:	2200      	movs	r2, #0
   b96a6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b96a8:	4649      	mov	r1, r9
   b96aa:	1d20      	adds	r0, r4, #4
   b96ac:	f006 f849 	bl	bf742 <_ZN6StringaSEPKc>
                        *cp = save2;
   b96b0:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b96b4:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b96b8:	f1ba 0f00 	cmp.w	sl, #0
   b96bc:	d006      	beq.n	b96cc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b96be:	4629      	mov	r1, r5
   b96c0:	f7ff fea2 	bl	b9408 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b96c4:	2501      	movs	r5, #1
   b96c6:	e7a8      	b.n	b961a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b96c8:	461d      	mov	r5, r3
   b96ca:	e7a6      	b.n	b961a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b96cc:	4639      	mov	r1, r7
   b96ce:	f7ff fe19 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b96d2:	7e23      	ldrb	r3, [r4, #24]
   b96d4:	3b01      	subs	r3, #1
   b96d6:	7623      	strb	r3, [r4, #24]
   b96d8:	e7f4      	b.n	b96c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b96da:	4640      	mov	r0, r8
   b96dc:	f7ff ff36 	bl	b954c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b96e0:	2502      	movs	r5, #2
   b96e2:	e79a      	b.n	b961a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b96e4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b96e8:	f7ff ff30 	bl	b954c <_ZN15LocalTimeChange5parseEPKc>
                break;
   b96ec:	2503      	movs	r5, #3
   b96ee:	e794      	b.n	b961a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b96f0:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b96f4:	b143      	cbz	r3, b9708 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b96f6:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b96fa:	b92a      	cbnz	r2, b9708 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b96fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9700:	f7ff ff1e 	bl	b9540 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b9704:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b9708:	4630      	mov	r0, r6
   b970a:	f003 fc1f 	bl	bcf4c <free>

    return valid;
}
   b970e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b9712:	b003      	add	sp, #12
   b9714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9718:	000c45fd 	.word	0x000c45fd

000b971c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b971c:	b538      	push	{r3, r4, r5, lr}
   b971e:	4b13      	ldr	r3, [pc, #76]	; (b976c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b9720:	4604      	mov	r4, r0
   b9722:	460d      	mov	r5, r1
   b9724:	f840 3b04 	str.w	r3, [r0], #4
   b9728:	4911      	ldr	r1, [pc, #68]	; (b9770 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b972a:	f005 ffac 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   b972e:	f104 0014 	add.w	r0, r4, #20
   b9732:	f7ff fe61 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
   b9736:	490e      	ldr	r1, [pc, #56]	; (b9770 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b9738:	f104 001c 	add.w	r0, r4, #28
   b973c:	f005 ffa3 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   b9740:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9744:	f7ff fe58 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
   b9748:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b974c:	f7ff feea 	bl	b9524 <_ZN15LocalTimeChangeC1Ev>
   b9750:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9754:	f7ff fee6 	bl	b9524 <_ZN15LocalTimeChangeC1Ev>
   b9758:	2300      	movs	r3, #0
   b975a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b975e:	4629      	mov	r1, r5
   b9760:	4620      	mov	r0, r4
   b9762:	f7ff ff4f 	bl	b9604 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b9766:	4620      	mov	r0, r4
   b9768:	bd38      	pop	{r3, r4, r5, pc}
   b976a:	bf00      	nop
   b976c:	000c4644 	.word	0x000c4644
   b9770:	000c4e80 	.word	0x000c4e80

000b9774 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9774:	b508      	push	{r3, lr}
   b9776:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9778:	f7ff fe3e 	bl	b93f8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b977c:	688a      	ldr	r2, [r1, #8]
   b977e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b9780:	684a      	ldr	r2, [r1, #4]
   b9782:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9784:	680a      	ldr	r2, [r1, #0]
   b9786:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9788:	4618      	mov	r0, r3
   b978a:	bd08      	pop	{r3, pc}

000b978c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b978c:	b513      	push	{r0, r1, r4, lr}
   b978e:	4b07      	ldr	r3, [pc, #28]	; (b97ac <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b9790:	6003      	str	r3, [r0, #0]
   b9792:	2300      	movs	r3, #0
   b9794:	6043      	str	r3, [r0, #4]
   b9796:	4604      	mov	r4, r0
    *this = value.hms();
   b9798:	4668      	mov	r0, sp
   b979a:	f7ff ffeb 	bl	b9774 <_ZNK14LocalTimeValue3hmsEv>
   b979e:	4620      	mov	r0, r4
   b97a0:	4669      	mov	r1, sp
   b97a2:	f7ff fdaf 	bl	b9304 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b97a6:	b002      	add	sp, #8
   b97a8:	bd10      	pop	{r4, pc}
   b97aa:	bf00      	nop
   b97ac:	000c4624 	.word	0x000c4624

000b97b0 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b97b0:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b97b2:	2300      	movs	r3, #0
   b97b4:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b97b6:	a801      	add	r0, sp, #4
   b97b8:	9301      	str	r3, [sp, #4]
   b97ba:	f7ff fe0b 	bl	b93d4 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b97be:	9801      	ldr	r0, [sp, #4]
   b97c0:	b003      	add	sp, #12
   b97c2:	f85d fb04 	ldr.w	pc, [sp], #4

000b97c6 <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b97c6:	b510      	push	{r4, lr}
   b97c8:	4604      	mov	r4, r0
    *this = value.ymd();
   b97ca:	4608      	mov	r0, r1
   b97cc:	f7ff fff0 	bl	b97b0 <_ZNK14LocalTimeValue3ymdEv>
   b97d0:	6020      	str	r0, [r4, #0]
}
   b97d2:	bd10      	pop	{r4, pc}

000b97d4 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b97d4:	b510      	push	{r4, lr}
   b97d6:	4604      	mov	r4, r0
   b97d8:	b088      	sub	sp, #32
   b97da:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b97dc:	3068      	adds	r0, #104	; 0x68
   b97de:	a901      	add	r1, sp, #4
   b97e0:	f007 fb04 	bl	c0dec <asctime_r>
    int len = strlen(ascstr);
   b97e4:	a801      	add	r0, sp, #4
   b97e6:	f007 fc46 	bl	c1076 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b97ea:	ab08      	add	r3, sp, #32
   b97ec:	4418      	add	r0, r3
   b97ee:	2300      	movs	r3, #0
   b97f0:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b97f4:	a901      	add	r1, sp, #4
   b97f6:	4620      	mov	r0, r4
   b97f8:	f005 ff45 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b97fc:	4620      	mov	r0, r4
   b97fe:	b008      	add	sp, #32
   b9800:	bd10      	pop	{r4, pc}
	...

000b9804 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9804:	b538      	push	{r3, r4, r5, lr}
   b9806:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9808:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b980a:	460d      	mov	r5, r1
    if (config.isZ()) {
   b980c:	f7ff fe4e 	bl	b94ac <_ZNK22LocalTimePosixTimezone3isZEv>
   b9810:	b128      	cbz	r0, b981e <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9812:	4909      	ldr	r1, [pc, #36]	; (b9838 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9814:	4620      	mov	r0, r4
   b9816:	f005 ff36 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b981a:	4620      	mov	r0, r4
   b981c:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b981e:	6828      	ldr	r0, [r5, #0]
   b9820:	f7ff fd66 	bl	b92f0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9824:	b128      	cbz	r0, b9832 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9826:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b982a:	4620      	mov	r0, r4
   b982c:	f005 ff76 	bl	bf71c <_ZN6StringC1ERKS_>
   b9830:	e7f3      	b.n	b981a <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9832:	f105 0120 	add.w	r1, r5, #32
   b9836:	e7f8      	b.n	b982a <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9838:	000c45ff 	.word	0x000c45ff

000b983c <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9840:	4680      	mov	r8, r0
   b9842:	b0a8      	sub	sp, #160	; 0xa0
   b9844:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9846:	4615      	mov	r5, r2
   b9848:	b12a      	cbz	r2, b9856 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b984a:	4b47      	ldr	r3, [pc, #284]	; (b9968 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b984c:	4610      	mov	r0, r2
   b984e:	6819      	ldr	r1, [r3, #0]
   b9850:	f007 fbe1 	bl	c1016 <strcmp>
   b9854:	b938      	cbnz	r0, b9866 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9856:	4621      	mov	r1, r4
   b9858:	4640      	mov	r0, r8
   b985a:	f7ff ffbb 	bl	b97d4 <_ZN16LocalTimeConvert7timeStrEv>
}
   b985e:	4640      	mov	r0, r8
   b9860:	b028      	add	sp, #160	; 0xa0
   b9862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9866:	4629      	mov	r1, r5
   b9868:	223f      	movs	r2, #63	; 0x3f
   b986a:	a818      	add	r0, sp, #96	; 0x60
   b986c:	f007 fc1f 	bl	c10ae <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9870:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9872:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9874:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9878:	f007 fbfd 	bl	c1076 <strlen>
    String zoneNameStr = zoneName();
   b987c:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b987e:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9880:	a803      	add	r0, sp, #12
   b9882:	f7ff ffbf 	bl	b9804 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9886:	1d20      	adds	r0, r4, #4
   b9888:	f7ff fe10 	bl	b94ac <_ZNK22LocalTimePosixTimezone3isZEv>
   b988c:	b348      	cbz	r0, b98e2 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b988e:	4937      	ldr	r1, [pc, #220]	; (b996c <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b9890:	a807      	add	r0, sp, #28
   b9892:	f007 fbca 	bl	c102a <strcpy>
   b9896:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9898:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b989a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b989e:	45ba      	cmp	sl, r7
   b98a0:	d94c      	bls.n	b993c <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b98a2:	7833      	ldrb	r3, [r6, #0]
   b98a4:	2b25      	cmp	r3, #37	; 0x25
   b98a6:	f107 0901 	add.w	r9, r7, #1
   b98aa:	d117      	bne.n	b98dc <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b98ac:	7873      	ldrb	r3, [r6, #1]
   b98ae:	2b7a      	cmp	r3, #122	; 0x7a
   b98b0:	d136      	bne.n	b9920 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b98b2:	a807      	add	r0, sp, #28
   b98b4:	f007 fbdf 	bl	c1076 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b98b8:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b98ba:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b98bc:	1838      	adds	r0, r7, r0
   b98be:	ebaa 0207 	sub.w	r2, sl, r7
   b98c2:	1cb1      	adds	r1, r6, #2
   b98c4:	4418      	add	r0, r3
   b98c6:	f007 fae3 	bl	c0e90 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b98ca:	462a      	mov	r2, r5
   b98cc:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b98ce:	4630      	mov	r0, r6
   b98d0:	f007 fade 	bl	c0e90 <memcpy>
            len = strlen(format_str);
   b98d4:	a818      	add	r0, sp, #96	; 0x60
   b98d6:	f007 fbce 	bl	c1076 <strlen>
   b98da:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b98dc:	3601      	adds	r6, #1
   b98de:	464f      	mov	r7, r9
   b98e0:	e7db      	b.n	b989a <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b98e2:	6820      	ldr	r0, [r4, #0]
   b98e4:	f7ff fd04 	bl	b92f0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b98e8:	b1b8      	cbz	r0, b991a <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b98ea:	f104 0018 	add.w	r0, r4, #24
   b98ee:	f7ff fdc1 	bl	b9474 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b98f2:	223c      	movs	r2, #60	; 0x3c
   b98f4:	fb90 f3f2 	sdiv	r3, r0, r2
   b98f8:	2b00      	cmp	r3, #0
   b98fa:	bfb8      	it	lt
   b98fc:	425b      	neglt	r3, r3
   b98fe:	fbb3 f1f2 	udiv	r1, r3, r2
   b9902:	fb02 3311 	mls	r3, r2, r1, r3
   b9906:	9300      	str	r3, [sp, #0]
   b9908:	4a19      	ldr	r2, [pc, #100]	; (b9970 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b990a:	4b1a      	ldr	r3, [pc, #104]	; (b9974 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b990c:	fb90 f3f3 	sdiv	r3, r0, r3
   b9910:	2110      	movs	r1, #16
   b9912:	a807      	add	r0, sp, #28
   b9914:	f003 fb3a 	bl	bcf8c <snprintf>
   b9918:	e7bd      	b.n	b9896 <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b991a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b991e:	e7e6      	b.n	b98ee <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9920:	2b5a      	cmp	r3, #90	; 0x5a
   b9922:	d1db      	bne.n	b98dc <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9924:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9926:	ab18      	add	r3, sp, #96	; 0x60
   b9928:	1978      	adds	r0, r7, r5
   b992a:	ebaa 0207 	sub.w	r2, sl, r7
   b992e:	1cb1      	adds	r1, r6, #2
   b9930:	4418      	add	r0, r3
   b9932:	f007 faad 	bl	c0e90 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9936:	9903      	ldr	r1, [sp, #12]
   b9938:	462a      	mov	r2, r5
   b993a:	e7c8      	b.n	b98ce <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b993c:	2100      	movs	r1, #0
   b993e:	222e      	movs	r2, #46	; 0x2e
   b9940:	a80c      	add	r0, sp, #48	; 0x30
   b9942:	910b      	str	r1, [sp, #44]	; 0x2c
   b9944:	f007 facc 	bl	c0ee0 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9948:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b994c:	aa18      	add	r2, sp, #96	; 0x60
   b994e:	2132      	movs	r1, #50	; 0x32
   b9950:	a80b      	add	r0, sp, #44	; 0x2c
   b9952:	f003 fb53 	bl	bcffc <strftime>
    return String(buf);    
   b9956:	a90b      	add	r1, sp, #44	; 0x2c
   b9958:	4640      	mov	r0, r8
   b995a:	f005 fe94 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b995e:	a803      	add	r0, sp, #12
   b9960:	f005 fe46 	bl	bf5f0 <_ZN6StringD1Ev>
   b9964:	e77b      	b.n	b985e <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9966:	bf00      	nop
   b9968:	2003d698 	.word	0x2003d698
   b996c:	000c45ff 	.word	0x000c45ff
   b9970:	000c4601 	.word	0x000c4601
   b9974:	fffff1f0 	.word	0xfffff1f0

000b9978 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9978:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b997a:	4d09      	ldr	r5, [pc, #36]	; (b99a0 <_ZN9LocalTime8instanceEv+0x28>)
   b997c:	682b      	ldr	r3, [r5, #0]
   b997e:	b963      	cbnz	r3, b999a <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9980:	2060      	movs	r0, #96	; 0x60
   b9982:	f7fa fb88 	bl	b4096 <_Znwj>
   b9986:	4604      	mov	r4, r0
   b9988:	b130      	cbz	r0, b9998 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b998a:	4b06      	ldr	r3, [pc, #24]	; (b99a4 <_ZN9LocalTime8instanceEv+0x2c>)
   b998c:	f840 3b04 	str.w	r3, [r0], #4
   b9990:	f7ff fe12 	bl	b95b8 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9994:	2364      	movs	r3, #100	; 0x64
   b9996:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9998:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b999a:	6828      	ldr	r0, [r5, #0]
   b999c:	bd38      	pop	{r3, r4, r5, pc}
   b999e:	bf00      	nop
   b99a0:	2003e4d4 	.word	0x2003e4d4
   b99a4:	000c4614 	.word	0x000c4614

000b99a8 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b99a8:	f003 bb40 	b.w	bd02c <mktime>

000b99ac <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b99ac:	3901      	subs	r1, #1
   b99ae:	290b      	cmp	r1, #11
   b99b0:	d815      	bhi.n	b99de <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b99b2:	e8df f001 	tbb	[pc, r1]
   b99b6:	0816      	.short	0x0816
   b99b8:	06160616 	.word	0x06160616
   b99bc:	16061616 	.word	0x16061616
   b99c0:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b99c2:	201e      	movs	r0, #30
   b99c4:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b99c6:	0783      	lsls	r3, r0, #30
   b99c8:	d10d      	bne.n	b99e6 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b99ca:	2364      	movs	r3, #100	; 0x64
   b99cc:	fb90 f2f3 	sdiv	r2, r0, r3
   b99d0:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b99d4:	2800      	cmp	r0, #0
   b99d6:	bf0c      	ite	eq
   b99d8:	201c      	moveq	r0, #28
   b99da:	201d      	movne	r0, #29
   b99dc:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b99de:	2000      	movs	r0, #0
   b99e0:	4770      	bx	lr
            return 31;
   b99e2:	201f      	movs	r0, #31
   b99e4:	4770      	bx	lr
                return 28;
   b99e6:	201c      	movs	r0, #28
}
   b99e8:	4770      	bx	lr

000b99ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b99ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b99ec:	2301      	movs	r3, #1
   b99ee:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b99f0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b99f4:	3b01      	subs	r3, #1
   b99f6:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b99f8:	2300      	movs	r3, #0
   b99fa:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b99fe:	4606      	mov	r6, r0
   b9a00:	460c      	mov	r4, r1
   b9a02:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9a04:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9a06:	4620      	mov	r0, r4
   b9a08:	f7ff ffce 	bl	b99a8 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9a0c:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9a10:	69a2      	ldr	r2, [r4, #24]
   b9a12:	429a      	cmp	r2, r3
   b9a14:	d003      	beq.n	b9a1e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9a16:	68e3      	ldr	r3, [r4, #12]
   b9a18:	3301      	adds	r3, #1
   b9a1a:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9a1c:	e7f3      	b.n	b9a06 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9a1e:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9a22:	2d01      	cmp	r5, #1
   b9a24:	d013      	beq.n	b9a4e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9a26:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9a28:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9a2a:	3d01      	subs	r5, #1
   b9a2c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9a30:	441d      	add	r5, r3
   b9a32:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9a34:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9a38:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9a3c:	f7ff ffb6 	bl	b99ac <_ZN9LocalTime14lastDayOfMonthEii>
   b9a40:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9a42:	bfc4      	itt	gt
   b9a44:	3d07      	subgt	r5, #7
   b9a46:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9a48:	4620      	mov	r0, r4
   b9a4a:	f7ff ffad 	bl	b99a8 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9a4e:	4621      	mov	r1, r4
   b9a50:	f106 0008 	add.w	r0, r6, #8
   b9a54:	f7ff fd3c 	bl	b94d0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9a58:	4638      	mov	r0, r7
   b9a5a:	f7ff fd46 	bl	b94ea <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9a5e:	4620      	mov	r0, r4
}
   b9a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9a64:	f003 bae2 	b.w	bd02c <mktime>

000b9a68 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9a6a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9a6e:	b085      	sub	sp, #20
   b9a70:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9a72:	b92b      	cbnz	r3, b9a80 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9a74:	f7ff ff80 	bl	b9978 <_ZN9LocalTime8instanceEv>
   b9a78:	1d01      	adds	r1, r0, #4
   b9a7a:	1d20      	adds	r0, r4, #4
   b9a7c:	f7ff fc4f 	bl	b931e <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9a80:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9a84:	2b00      	cmp	r3, #0
   b9a86:	d065      	beq.n	b9b54 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9a88:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9a8c:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9a90:	4639      	mov	r1, r7
   b9a92:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9a94:	463e      	mov	r6, r7
   b9a96:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9a9a:	f003 fab7 	bl	bd00c <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9a9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9aa0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9aa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9aaa:	6833      	ldr	r3, [r6, #0]
   b9aac:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9aae:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9ab2:	a802      	add	r0, sp, #8
   b9ab4:	f7ff fc86 	bl	b93c4 <_ZN12LocalTimeHMSC1ERKS_>
   b9ab8:	aa02      	add	r2, sp, #8
   b9aba:	4639      	mov	r1, r7
   b9abc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9ac0:	f7ff ff93 	bl	b99ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9ac4:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9ac8:	f104 0118 	add.w	r1, r4, #24
   b9acc:	a802      	add	r0, sp, #8
   b9ace:	f7ff fc79 	bl	b93c4 <_ZN12LocalTimeHMSC1ERKS_>
   b9ad2:	aa02      	add	r2, sp, #8
   b9ad4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9ad8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9adc:	f7ff ff85 	bl	b99ea <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9ae0:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9ae4:	4286      	cmp	r6, r0
   b9ae6:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9aea:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9aee:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9af2:	da23      	bge.n	b9b3c <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9af4:	42b2      	cmp	r2, r6
   b9af6:	eb73 0505 	sbcs.w	r5, r3, r5
   b9afa:	da19      	bge.n	b9b30 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9afc:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9afe:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9b00:	6820      	ldr	r0, [r4, #0]
   b9b02:	f7ff fbf5 	bl	b92f0 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9b06:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9b0a:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9b0e:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9b10:	bb10      	cbnz	r0, b9b58 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9b12:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9b16:	f7ff fcad 	bl	b9474 <_ZNK12LocalTimeHMS9toSecondsEv>
   b9b1a:	1a2d      	subs	r5, r5, r0
   b9b1c:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9b20:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9b24:	9901      	ldr	r1, [sp, #4]
   b9b26:	a802      	add	r0, sp, #8
   b9b28:	f003 fa70 	bl	bd00c <localtime_r>
}
   b9b2c:	b005      	add	sp, #20
   b9b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9b30:	4282      	cmp	r2, r0
   b9b32:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9b34:	bfb4      	ite	lt
   b9b36:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9b38:	2302      	movge	r3, #2
   b9b3a:	e7e0      	b.n	b9afe <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9b3c:	4282      	cmp	r2, r0
   b9b3e:	eb73 0101 	sbcs.w	r1, r3, r1
   b9b42:	da01      	bge.n	b9b48 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9b44:	2303      	movs	r3, #3
   b9b46:	e7da      	b.n	b9afe <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9b48:	42b2      	cmp	r2, r6
   b9b4a:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9b4c:	bfb4      	ite	lt
   b9b4e:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9b50:	2305      	movge	r3, #5
   b9b52:	e7d4      	b.n	b9afe <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9b54:	2306      	movs	r3, #6
   b9b56:	e7d2      	b.n	b9afe <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9b58:	f104 0018 	add.w	r0, r4, #24
   b9b5c:	e7db      	b.n	b9b16 <_ZN16LocalTimeConvert7convertEv+0xae>

000b9b5e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9b60:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9b62:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9b64:	4668      	mov	r0, sp
   b9b66:	f7ff fc24 	bl	b93b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9b6a:	466a      	mov	r2, sp
   b9b6c:	4629      	mov	r1, r5
   b9b6e:	4620      	mov	r0, r4
   b9b70:	f004 f96e 	bl	bde50 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9b74:	a801      	add	r0, sp, #4
   b9b76:	f7fa fd4b 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9b7a:	4620      	mov	r0, r4
   b9b7c:	b003      	add	sp, #12
   b9b7e:	bd30      	pop	{r4, r5, pc}

000b9b80 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9b82:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9b84:	4604      	mov	r4, r0
   b9b86:	4668      	mov	r0, sp
   b9b88:	f7ff fc13 	bl	b93b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9b8c:	466a      	mov	r2, sp
   b9b8e:	4629      	mov	r1, r5
   b9b90:	4620      	mov	r0, r4
   b9b92:	f004 f939 	bl	bde08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9b96:	a801      	add	r0, sp, #4
   b9b98:	f7fa fd3a 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	b003      	add	sp, #12
   b9ba0:	bd30      	pop	{r4, r5, pc}

000b9ba2 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9ba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9ba4:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9ba6:	4604      	mov	r4, r0
   b9ba8:	4668      	mov	r0, sp
   b9baa:	f7ff fc02 	bl	b93b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9bae:	466a      	mov	r2, sp
   b9bb0:	4629      	mov	r1, r5
   b9bb2:	4620      	mov	r0, r4
   b9bb4:	f004 f8d1 	bl	bdd5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9bb8:	a801      	add	r0, sp, #4
   b9bba:	f7fa fd29 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9bbe:	4620      	mov	r0, r4
   b9bc0:	b003      	add	sp, #12
   b9bc2:	bd30      	pop	{r4, r5, pc}

000b9bc4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9bc4:	4770      	bx	lr

000b9bc6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9bc6:	b510      	push	{r4, lr}
}
   b9bc8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9bca:	4604      	mov	r4, r0
}
   b9bcc:	f7fa fa67 	bl	b409e <_ZdlPvj>
   b9bd0:	4620      	mov	r0, r4
   b9bd2:	bd10      	pop	{r4, pc}

000b9bd4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9bd4:	6803      	ldr	r3, [r0, #0]
   b9bd6:	b2c9      	uxtb	r1, r1
   b9bd8:	689b      	ldr	r3, [r3, #8]
   b9bda:	4718      	bx	r3

000b9bdc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9bdc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9bde:	4d03      	ldr	r5, [pc, #12]	; (b9bec <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9be0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9be4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9be8:	bd30      	pop	{r4, r5, pc}
   b9bea:	bf00      	nop
   b9bec:	000c4654 	.word	0x000c4654

000b9bf0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9bf0:	6840      	ldr	r0, [r0, #4]
   b9bf2:	f003 bf3d 	b.w	bda70 <_ZN7TwoWire5beginEv>

000b9bf6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9bf6:	b510      	push	{r4, lr}
   b9bf8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b9bfa:	6800      	ldr	r0, [r0, #0]
   b9bfc:	f003 ff93 	bl	bdb26 <_ZN7TwoWire6unlockEv>
   b9c00:	4620      	mov	r0, r4
   b9c02:	bd10      	pop	{r4, pc}

000b9c04 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9c04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9c08:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9c0a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9c0c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9c0e:	460d      	mov	r5, r1
   b9c10:	4616      	mov	r6, r2
   b9c12:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9c14:	f003 ff7e 	bl	bdb14 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9c18:	b1a7      	cbz	r7, b9c44 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9c1a:	68e1      	ldr	r1, [r4, #12]
   b9c1c:	6860      	ldr	r0, [r4, #4]
   b9c1e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9c22:	f003 ff58 	bl	bdad6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9c26:	0a29      	lsrs	r1, r5, #8
   b9c28:	6860      	ldr	r0, [r4, #4]
   b9c2a:	f7ff ffd3 	bl	b9bd4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9c2e:	4629      	mov	r1, r5
   b9c30:	6860      	ldr	r0, [r4, #4]
   b9c32:	f7ff ffcf 	bl	b9bd4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b9c36:	6860      	ldr	r0, [r4, #4]
   b9c38:	2100      	movs	r1, #0
   b9c3a:	f003 ff67 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9c3e:	b148      	cbz	r0, b9c54 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b9c40:	2400      	movs	r4, #0
   b9c42:	e000      	b.n	b9c46 <_ZN6MB85RC8readDataEjPhj+0x42>
   b9c44:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9c46:	a801      	add	r0, sp, #4
   b9c48:	f7ff ffd5 	bl	b9bf6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b9c4c:	4620      	mov	r0, r4
   b9c4e:	b003      	add	sp, #12
   b9c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9c54:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9c56:	7b21      	ldrb	r1, [r4, #12]
   b9c58:	6860      	ldr	r0, [r4, #4]
   b9c5a:	46b8      	mov	r8, r7
   b9c5c:	bf28      	it	cs
   b9c5e:	f04f 0820 	movcs.w	r8, #32
   b9c62:	2301      	movs	r3, #1
   b9c64:	4642      	mov	r2, r8
   b9c66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9c6a:	f003 ff1e 	bl	bdaaa <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b9c6e:	f006 fafb 	bl	c0268 <_Z19__fetch_global_Wirev>
   b9c72:	6803      	ldr	r3, [r0, #0]
   b9c74:	691b      	ldr	r3, [r3, #16]
   b9c76:	4798      	blx	r3
   b9c78:	4540      	cmp	r0, r8
   b9c7a:	dbe1      	blt.n	b9c40 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b9c7c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9c80:	f006 faf2 	bl	c0268 <_Z19__fetch_global_Wirev>
   b9c84:	6803      	ldr	r3, [r0, #0]
   b9c86:	695b      	ldr	r3, [r3, #20]
   b9c88:	4798      	blx	r3
   b9c8a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b9c8e:	454e      	cmp	r6, r9
   b9c90:	d1f6      	bne.n	b9c80 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9c92:	4445      	add	r5, r8
				dataLen--;
   b9c94:	eba7 0708 	sub.w	r7, r7, r8
   b9c98:	e7be      	b.n	b9c18 <_ZN6MB85RC8readDataEjPhj+0x14>

000b9c9a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9c9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c9e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9ca0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ca2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9ca4:	460e      	mov	r6, r1
   b9ca6:	4690      	mov	r8, r2
   b9ca8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9caa:	f003 ff33 	bl	bdb14 <_ZN7TwoWire4lockEv>
   b9cae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9cb2:	f1b9 0f00 	cmp.w	r9, #0
   b9cb6:	d02a      	beq.n	b9d0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9cb8:	b34d      	cbz	r5, b9d0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9cba:	68e1      	ldr	r1, [r4, #12]
   b9cbc:	6860      	ldr	r0, [r4, #4]
   b9cbe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9cc2:	f003 ff08 	bl	bdad6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9cc6:	0a31      	lsrs	r1, r6, #8
   b9cc8:	6860      	ldr	r0, [r4, #4]
   b9cca:	f7ff ff83 	bl	b9bd4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9cce:	6860      	ldr	r0, [r4, #4]
   b9cd0:	4631      	mov	r1, r6
   b9cd2:	f7ff ff7f 	bl	b9bd4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9cd6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9cda:	4647      	mov	r7, r8
   b9cdc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9ce0:	6860      	ldr	r0, [r4, #4]
   b9ce2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9ce6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9ce8:	3d01      	subs	r5, #1
				wire.write(*data);
   b9cea:	689b      	ldr	r3, [r3, #8]
   b9cec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9cee:	4555      	cmp	r5, sl
   b9cf0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9cf4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9cf6:	d001      	beq.n	b9cfc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9cf8:	2d00      	cmp	r5, #0
   b9cfa:	d1f1      	bne.n	b9ce0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b9cfc:	6860      	ldr	r0, [r4, #4]
   b9cfe:	2101      	movs	r1, #1
   b9d00:	f003 ff04 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9d04:	2800      	cmp	r0, #0
   b9d06:	d0d7      	beq.n	b9cb8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9d08:	f04f 0900 	mov.w	r9, #0
   b9d0c:	e7d1      	b.n	b9cb2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b9d0e:	a801      	add	r0, sp, #4
   b9d10:	f7ff ff71 	bl	b9bf6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b9d14:	4648      	mov	r0, r9
   b9d16:	b003      	add	sp, #12
   b9d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9d1c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d20:	b08b      	sub	sp, #44	; 0x2c
   b9d22:	460e      	mov	r6, r1
   b9d24:	4615      	mov	r5, r2
   b9d26:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9d28:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9d2a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9d2c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b9d2e:	f003 fef1 	bl	bdb14 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b9d32:	42ae      	cmp	r6, r5
   b9d34:	d229      	bcs.n	b9d8a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b9d36:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9d38:	4425      	add	r5, r4
			while(numBytes > 0) {
   b9d3a:	b18c      	cbz	r4, b9d60 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b9d3c:	2c1e      	cmp	r4, #30
   b9d3e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9d40:	f8d8 3000 	ldr.w	r3, [r8]
   b9d44:	bf28      	it	cs
   b9d46:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9d48:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b9d4a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9d4e:	aa02      	add	r2, sp, #8
   b9d50:	463b      	mov	r3, r7
   b9d52:	4631      	mov	r1, r6
   b9d54:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9d56:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9d58:	47c8      	blx	r9
				if (!result) {
   b9d5a:	b948      	cbnz	r0, b9d70 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9d5c:	2400      	movs	r4, #0
   b9d5e:	e000      	b.n	b9d62 <_ZN6MB85RC8moveDataEjjj+0x46>
   b9d60:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9d62:	a801      	add	r0, sp, #4
   b9d64:	f7ff ff47 	bl	b9bf6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9d68:	4620      	mov	r0, r4
   b9d6a:	b00b      	add	sp, #44	; 0x2c
   b9d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b9d70:	f8d8 3000 	ldr.w	r3, [r8]
   b9d74:	aa02      	add	r2, sp, #8
   b9d76:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9d7a:	4629      	mov	r1, r5
   b9d7c:	463b      	mov	r3, r7
   b9d7e:	4640      	mov	r0, r8
   b9d80:	47c8      	blx	r9
				if (!result) {
   b9d82:	2800      	cmp	r0, #0
   b9d84:	d0ea      	beq.n	b9d5c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b9d86:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9d88:	e7d7      	b.n	b9d3a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b9d8a:	d9e9      	bls.n	b9d60 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b9d8c:	2c00      	cmp	r4, #0
   b9d8e:	d0e7      	beq.n	b9d60 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b9d90:	f8d8 3000 	ldr.w	r3, [r8]
   b9d94:	2c1e      	cmp	r4, #30
   b9d96:	4627      	mov	r7, r4
   b9d98:	bf28      	it	cs
   b9d9a:	271e      	movcs	r7, #30
   b9d9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9da0:	aa02      	add	r2, sp, #8
   b9da2:	463b      	mov	r3, r7
   b9da4:	4631      	mov	r1, r6
   b9da6:	4640      	mov	r0, r8
   b9da8:	47c8      	blx	r9
				if (!result) {
   b9daa:	2800      	cmp	r0, #0
   b9dac:	d0d6      	beq.n	b9d5c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b9dae:	f8d8 3000 	ldr.w	r3, [r8]
   b9db2:	aa02      	add	r2, sp, #8
   b9db4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b9db8:	4629      	mov	r1, r5
   b9dba:	463b      	mov	r3, r7
   b9dbc:	4640      	mov	r0, r8
   b9dbe:	47c8      	blx	r9
				if (!result) {
   b9dc0:	2800      	cmp	r0, #0
   b9dc2:	d0cb      	beq.n	b9d5c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b9dc4:	443e      	add	r6, r7
				framAddrTo += count;
   b9dc6:	443d      	add	r5, r7
				numBytes -= count;
   b9dc8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b9dca:	e7df      	b.n	b9d8c <_ZN6MB85RC8moveDataEjjj+0x70>

000b9dcc <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   b9dcc:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b9dce:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   b9dd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   b9dd4:	2101      	movs	r1, #1
   b9dd6:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   b9dda:	4770      	bx	lr

000b9ddc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9ddc:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b9dde:	6842      	ldr	r2, [r0, #4]
   b9de0:	4603      	mov	r3, r0
   b9de2:	1054      	asrs	r4, r2, #1
   b9de4:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b9de8:	07d2      	lsls	r2, r2, #31
   b9dea:	bf48      	it	mi
   b9dec:	590a      	ldrmi	r2, [r1, r4]
   b9dee:	681b      	ldr	r3, [r3, #0]
      }
   b9df0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9df4:	bf48      	it	mi
   b9df6:	58d3      	ldrmi	r3, [r2, r3]
   b9df8:	4718      	bx	r3

000b9dfa <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b9dfa:	2a01      	cmp	r2, #1
   b9dfc:	d102      	bne.n	b9e04 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9dfe:	6001      	str	r1, [r0, #0]
      }
   b9e00:	2000      	movs	r0, #0
   b9e02:	4770      	bx	lr
	  switch (__op)
   b9e04:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9e06:	bf04      	itt	eq
   b9e08:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b9e0c:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b9e10:	e7f6      	b.n	b9e00 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b9e12 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b9e12:	2a01      	cmp	r2, #1
   b9e14:	d102      	bne.n	b9e1c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9e16:	6001      	str	r1, [r0, #0]
      }
   b9e18:	2000      	movs	r0, #0
   b9e1a:	4770      	bx	lr
	  switch (__op)
   b9e1c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9e1e:	bf04      	itt	eq
   b9e20:	680b      	ldreq	r3, [r1, #0]
   b9e22:	6003      	streq	r3, [r0, #0]
	      break;
   b9e24:	e7f8      	b.n	b9e18 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000b9e26 <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   b9e26:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b9e28:	f002 bcbc 	b.w	bc7a4 <os_mutex_recursive_lock>

000b9e2c <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   b9e2c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   b9e30:	4601      	mov	r1, r0
    if (stateHandler) {
   b9e32:	b11b      	cbz	r3, b9e3c <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9e34:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   b9e38:	30c0      	adds	r0, #192	; 0xc0
   b9e3a:	4718      	bx	r3
}
   b9e3c:	4770      	bx	lr
	...

000b9e40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   b9e42:	4d12      	ldr	r5, [pc, #72]	; (b9e8c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9e44:	4608      	mov	r0, r1
        eventData = "";
   b9e46:	2a00      	cmp	r2, #0
   b9e48:	bf18      	it	ne
   b9e4a:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   b9e4c:	460e      	mov	r6, r1
   b9e4e:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   b9e50:	f007 f911 	bl	c1076 <strlen>
   b9e54:	2840      	cmp	r0, #64	; 0x40
   b9e56:	d816      	bhi.n	b9e86 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   b9e58:	4628      	mov	r0, r5
   b9e5a:	f007 f90c 	bl	c1076 <strlen>
   b9e5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b9e62:	d810      	bhi.n	b9e86 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   b9e64:	3043      	adds	r0, #67	; 0x43
   b9e66:	f7fa f918 	bl	b409a <_Znaj>
    if (event) {
   b9e6a:	4604      	mov	r4, r0
   b9e6c:	b148      	cbz	r0, b9e82 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   b9e6e:	4631      	mov	r1, r6
        event->flags = flags;
   b9e70:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   b9e74:	f007 f8d9 	bl	c102a <strcpy>
        strcpy(event->eventData, eventData);
   b9e78:	4629      	mov	r1, r5
   b9e7a:	f104 0042 	add.w	r0, r4, #66	; 0x42
   b9e7e:	f007 f8d4 	bl	c102a <strcpy>
}
   b9e82:	4620      	mov	r0, r4
   b9e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   b9e86:	2400      	movs	r4, #0
   b9e88:	e7fb      	b.n	b9e82 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   b9e8a:	bf00      	nop
   b9e8c:	000c4e80 	.word	0x000c4e80

000b9e90 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e92:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9e94:	460a      	mov	r2, r1
   b9e96:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   b9e98:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   b9e9a:	1d01      	adds	r1, r0, #4
   b9e9c:	a808      	add	r0, sp, #32
   b9e9e:	f002 f881 	bl	bbfa4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   b9ea2:	9808      	ldr	r0, [sp, #32]
   b9ea4:	2100      	movs	r1, #0
   b9ea6:	f008 f87b 	bl	c1fa0 <open>
   b9eaa:	4605      	mov	r5, r0
   b9eac:	a808      	add	r0, sp, #32
   b9eae:	f005 fb9f 	bl	bf5f0 <_ZN6StringD1Ev>
    if (fd) {
   b9eb2:	2d00      	cmp	r5, #0
   b9eb4:	d060      	beq.n	b9f78 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   b9eb6:	a908      	add	r1, sp, #32
   b9eb8:	4628      	mov	r0, r5
   b9eba:	f008 f85f 	bl	c1f7c <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   b9ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9ec0:	492e      	ldr	r1, [pc, #184]	; (b9f7c <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   b9ec2:	482f      	ldr	r0, [pc, #188]	; (b9f80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9ec4:	4632      	mov	r2, r6
   b9ec6:	f7fd fc23 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   b9eca:	2200      	movs	r2, #0
   b9ecc:	4611      	mov	r1, r2
   b9ece:	4628      	mov	r0, r5
   b9ed0:	f008 f85c 	bl	c1f8c <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   b9ed4:	2208      	movs	r2, #8
   b9ed6:	a906      	add	r1, sp, #24
   b9ed8:	4628      	mov	r0, r5
   b9eda:	f008 f875 	bl	c1fc8 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   b9ede:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b9ee0:	2f4a      	cmp	r7, #74	; 0x4a
   b9ee2:	dd39      	ble.n	b9f58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   b9ee4:	4b27      	ldr	r3, [pc, #156]	; (b9f84 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   b9ee6:	9a06      	ldr	r2, [sp, #24]
   b9ee8:	429a      	cmp	r2, r3
   b9eea:	d135      	bne.n	b9f58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   b9eec:	4b26      	ldr	r3, [pc, #152]	; (b9f88 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   b9eee:	9a07      	ldr	r2, [sp, #28]
   b9ef0:	429a      	cmp	r2, r3
   b9ef2:	d131      	bne.n	b9f58 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   b9ef4:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   b9ef8:	4610      	mov	r0, r2
   b9efa:	9205      	str	r2, [sp, #20]
   b9efc:	f7fa f8cd 	bl	b409a <_Znaj>
            if (result) {
   b9f00:	4604      	mov	r4, r0
   b9f02:	b1c0      	cbz	r0, b9f36 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9f04:	4427      	add	r7, r4
                read(fd, result, eventSize);
   b9f06:	4601      	mov	r1, r0
   b9f08:	9a05      	ldr	r2, [sp, #20]
   b9f0a:	4628      	mov	r0, r5
   b9f0c:	f008 f85c 	bl	c1fc8 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   b9f10:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   b9f14:	b9ab      	cbnz	r3, b9f42 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   b9f16:	1c63      	adds	r3, r4, #1
   b9f18:	4618      	mov	r0, r3
   b9f1a:	9305      	str	r3, [sp, #20]
   b9f1c:	f007 f8ab 	bl	c1076 <strlen>
   b9f20:	283f      	cmp	r0, #63	; 0x3f
   b9f22:	9b05      	ldr	r3, [sp, #20]
   b9f24:	d80d      	bhi.n	b9f42 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   b9f26:	f104 0242 	add.w	r2, r4, #66	; 0x42
   b9f2a:	9200      	str	r2, [sp, #0]
   b9f2c:	4917      	ldr	r1, [pc, #92]	; (b9f8c <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   b9f2e:	4814      	ldr	r0, [pc, #80]	; (b9f80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9f30:	4632      	mov	r2, r6
   b9f32:	f7fd fbed 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   b9f36:	4628      	mov	r0, r5
   b9f38:	f008 f818 	bl	c1f6c <close>
}
   b9f3c:	4620      	mov	r0, r4
   b9f3e:	b01f      	add	sp, #124	; 0x7c
   b9f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   b9f42:	4913      	ldr	r1, [pc, #76]	; (b9f90 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   b9f44:	480e      	ldr	r0, [pc, #56]	; (b9f80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9f46:	4632      	mov	r2, r6
   b9f48:	f7fd fbe2 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   b9f4c:	2143      	movs	r1, #67	; 0x43
   b9f4e:	4620      	mov	r0, r4
   b9f50:	f7fa f8a5 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   b9f54:	2400      	movs	r4, #0
   b9f56:	e7ee      	b.n	b9f36 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   b9f58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   b9f5c:	9302      	str	r3, [sp, #8]
   b9f5e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9f62:	9301      	str	r3, [sp, #4]
   b9f64:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9f68:	9300      	str	r3, [sp, #0]
   b9f6a:	490a      	ldr	r1, [pc, #40]	; (b9f94 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   b9f6c:	9b06      	ldr	r3, [sp, #24]
   b9f6e:	4804      	ldr	r0, [pc, #16]	; (b9f80 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   b9f70:	4632      	mov	r2, r6
   b9f72:	f7fd fbcd 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
   b9f76:	e7ed      	b.n	b9f54 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   b9f78:	462c      	mov	r4, r5
    return result;
   b9f7a:	e7df      	b.n	b9f3c <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   b9f7c:	000c4668 	.word	0x000c4668
   b9f80:	2003e4d8 	.word	0x2003e4d8
   b9f84:	31b67663 	.word	0x31b67663
   b9f88:	00410801 	.word	0x00410801
   b9f8c:	000c467c 	.word	0x000c467c
   b9f90:	000c469e 	.word	0x000c469e
   b9f94:	000c46cc 	.word	0x000c46cc

000b9f98 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   b9f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9f9c:	4680      	mov	r8, r0
   b9f9e:	4b28      	ldr	r3, [pc, #160]	; (ba040 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   b9fa0:	f848 3b04 	str.w	r3, [r8], #4
   b9fa4:	4604      	mov	r4, r0
   b9fa6:	4640      	mov	r0, r8
   b9fa8:	f001 ff14 	bl	bbdd4 <_ZN14SequentialFileC1Ev>
   b9fac:	2202      	movs	r2, #2
   b9fae:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9fb0:	2500      	movs	r5, #0
   b9fb2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   b9fb6:	2308      	movs	r3, #8
   b9fb8:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   b9fba:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   b9fbe:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   b9fc2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   b9fc6:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   b9fca:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9fcc:	2020      	movs	r0, #32
   b9fce:	f7fa f862 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9fd2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   b9fd4:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   b9fd6:	3e01      	subs	r6, #1
   b9fd8:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   b9fda:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b9fde:	4607      	mov	r7, r0
   b9fe0:	f44f 7000 	mov.w	r0, #512	; 0x200
   b9fe4:	f7fa f857 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   b9fe8:	f500 7300 	add.w	r3, r0, #512	; 0x200
   b9fec:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   b9ff0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9ff4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b9ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9ffc:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba000:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba004:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba008:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba00c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba010:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba014:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba018:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba01c:	4909      	ldr	r1, [pc, #36]	; (ba044 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba01e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba022:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba026:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba02a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba02e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba032:	4640      	mov	r0, r8
   ba034:	f001 ff14 	bl	bbe60 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba038:	4620      	mov	r0, r4
   ba03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba03e:	bf00      	nop
   ba040:	000c48e8 	.word	0x000c48e8
   ba044:	000c4711 	.word	0x000c4711

000ba048 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba048:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba04a:	4d06      	ldr	r5, [pc, #24]	; (ba064 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba04c:	682b      	ldr	r3, [r5, #0]
   ba04e:	b93b      	cbnz	r3, ba060 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba050:	20d0      	movs	r0, #208	; 0xd0
   ba052:	f7fa f820 	bl	b4096 <_Znwj>
   ba056:	4604      	mov	r4, r0
   ba058:	b108      	cbz	r0, ba05e <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba05a:	f7ff ff9d 	bl	b9f98 <_ZN17PublishQueuePosixC1Ev>
   ba05e:	602c      	str	r4, [r5, #0]
}
   ba060:	6828      	ldr	r0, [r5, #0]
   ba062:	bd38      	pop	{r3, r4, r5, pc}
   ba064:	2003e4dc 	.word	0x2003e4dc

000ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba068:	6942      	ldr	r2, [r0, #20]
   ba06a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba06c:	1a9b      	subs	r3, r3, r2
   ba06e:	109b      	asrs	r3, r3, #2
   ba070:	1e5a      	subs	r2, r3, #1
   ba072:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba076:	1a5b      	subs	r3, r3, r1
   ba078:	109b      	asrs	r3, r3, #2
   ba07a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba07e:	6902      	ldr	r2, [r0, #16]
   ba080:	6880      	ldr	r0, [r0, #8]
   ba082:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba084:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba088:	4770      	bx	lr

000ba08a <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba08a:	b538      	push	{r3, r4, r5, lr}
   ba08c:	4605      	mov	r5, r0
   ba08e:	f7ff feca 	bl	b9e26 <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba092:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba096:	f7ff ffe7 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba09a:	4604      	mov	r4, r0
   ba09c:	b950      	cbnz	r0, ba0b4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba09e:	1d28      	adds	r0, r5, #4
   ba0a0:	f002 f9d4 	bl	bc44c <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba0a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba0a8:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba0aa:	b11b      	cbz	r3, ba0b4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba0ac:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba0b0:	b903      	cbnz	r3, ba0b4 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba0b2:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba0b4:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba0b6:	f002 fb7d 	bl	bc7b4 <os_mutex_recursive_unlock>
}
   ba0ba:	4620      	mov	r0, r4
   ba0bc:	bd38      	pop	{r3, r4, r5, pc}

000ba0be <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba0be:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba0c0:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba0c2:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba0c4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba0c6:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba0c8:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba0ca:	d002      	beq.n	ba0d2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba0cc:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba0ce:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba0d0:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba0d2:	68c0      	ldr	r0, [r0, #12]
   ba0d4:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba0d8:	f7f9 ffe1 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba0dc:	6963      	ldr	r3, [r4, #20]
   ba0de:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba0e0:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba0e2:	685b      	ldr	r3, [r3, #4]
   ba0e4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba0e6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba0ea:	6122      	str	r2, [r4, #16]
   ba0ec:	e7ef      	b.n	ba0ce <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba0f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0f4:	b085      	sub	sp, #20
   ba0f6:	4604      	mov	r4, r0
   ba0f8:	f7ff fe95 	bl	b9e26 <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba0fc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba1a4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba100:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba1a8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba104:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba1ac <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba108:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba10c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba110:	4293      	cmp	r3, r2
   ba112:	d105      	bne.n	ba120 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba114:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba116:	b005      	add	sp, #20
   ba118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba11c:	f002 bb4a 	b.w	bc7b4 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba120:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba124:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba128:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba12a:	f7ff ffc8 	bl	ba0be <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba12e:	4640      	mov	r0, r8
   ba130:	f002 f930 	bl	bc394 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba134:	2300      	movs	r3, #0
   ba136:	4602      	mov	r2, r0
   ba138:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba13a:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba13c:	4668      	mov	r0, sp
   ba13e:	f001 ff31 	bl	bbfa4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba142:	9800      	ldr	r0, [sp, #0]
   ba144:	f240 2102 	movw	r1, #514	; 0x202
   ba148:	f007 ff2a 	bl	c1fa0 <open>
   ba14c:	4605      	mov	r5, r0
   ba14e:	4668      	mov	r0, sp
   ba150:	f005 fa4e 	bl	bf5f0 <_ZN6StringD1Ev>
            if (fd) {
   ba154:	b1c5      	cbz	r5, ba188 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba156:	2208      	movs	r2, #8
   ba158:	4669      	mov	r1, sp
   ba15a:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba15c:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba160:	f007 ff44 	bl	c1fec <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba164:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba168:	f006 ff85 	bl	c1076 <strlen>
   ba16c:	4639      	mov	r1, r7
   ba16e:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba172:	4628      	mov	r0, r5
   ba174:	f007 ff3a 	bl	c1fec <write>
                close(fd);
   ba178:	4628      	mov	r0, r5
   ba17a:	f007 fef7 	bl	c1f6c <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba17e:	4808      	ldr	r0, [pc, #32]	; (ba1a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba180:	4632      	mov	r2, r6
   ba182:	4659      	mov	r1, fp
   ba184:	f7fd fac4 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba188:	4631      	mov	r1, r6
   ba18a:	4640      	mov	r0, r8
   ba18c:	f002 f944 	bl	bc418 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba190:	2f00      	cmp	r7, #0
   ba192:	d0b9      	beq.n	ba108 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba194:	2143      	movs	r1, #67	; 0x43
   ba196:	4638      	mov	r0, r7
   ba198:	f7f9 ff81 	bl	b409e <_ZdlPvj>
   ba19c:	e7b2      	b.n	ba104 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba19e:	bf00      	nop
   ba1a0:	2003e4d8 	.word	0x2003e4d8
   ba1a4:	31b67663 	.word	0x31b67663
   ba1a8:	00410801 	.word	0x00410801
   ba1ac:	000c471f 	.word	0x000c471f

000ba1b0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba1b4:	4604      	mov	r4, r0
   ba1b6:	f7ff fe36 	bl	b9e26 <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba1ba:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba1be:	f7ff ff53 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba1c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba1c4:	4298      	cmp	r0, r3
   ba1c6:	d902      	bls.n	ba1ce <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	f7ff ff91 	bl	ba0f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba1ce:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba214 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba1d2:	4f0f      	ldr	r7, [pc, #60]	; (ba210 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba1d4:	1d26      	adds	r6, r4, #4
   ba1d6:	4630      	mov	r0, r6
   ba1d8:	f002 f938 	bl	bc44c <_ZNK14SequentialFile11getQueueLenEv>
   ba1dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba1de:	4298      	cmp	r0, r3
   ba1e0:	dc04      	bgt.n	ba1ec <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba1e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba1e8:	f002 bae4 	b.w	bc7b4 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba1ec:	2101      	movs	r1, #1
   ba1ee:	4630      	mov	r0, r6
   ba1f0:	f002 f8dc 	bl	bc3ac <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba1f4:	4605      	mov	r5, r0
   ba1f6:	2800      	cmp	r0, #0
   ba1f8:	d0ed      	beq.n	ba1d6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba1fa:	4601      	mov	r1, r0
   ba1fc:	2200      	movs	r2, #0
   ba1fe:	4630      	mov	r0, r6
   ba200:	f001 ff0c 	bl	bc01c <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba204:	462a      	mov	r2, r5
   ba206:	4641      	mov	r1, r8
   ba208:	4638      	mov	r0, r7
   ba20a:	f7f9 ff98 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   ba20e:	e7e2      	b.n	ba1d6 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba210:	2003e4d8 	.word	0x2003e4d8
   ba214:	000c473c 	.word	0x000c473c

000ba218 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba218:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba21a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba21e:	430b      	orrs	r3, r1
   ba220:	d005      	beq.n	ba22e <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba222:	3840      	subs	r0, #64	; 0x40
   ba224:	ea50 0301 	orrs.w	r3, r0, r1
   ba228:	d10b      	bne.n	ba242 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba22a:	2a09      	cmp	r2, #9
   ba22c:	d109      	bne.n	ba242 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba22e:	4905      	ldr	r1, [pc, #20]	; (ba244 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba230:	4805      	ldr	r0, [pc, #20]	; (ba248 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba232:	f7fd fa6d 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba236:	f7ff ff07 	bl	ba048 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba23e:	f7ff bf57 	b.w	ba0f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba242:	bd08      	pop	{r3, pc}
   ba244:	000c474f 	.word	0x000c474f
   ba248:	2003e4d8 	.word	0x2003e4d8

000ba24c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba24c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba24e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba250:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba252:	b183      	cbz	r3, ba276 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba254:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba256:	6945      	ldr	r5, [r0, #20]
   ba258:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba25a:	42ae      	cmp	r6, r5
   ba25c:	d906      	bls.n	ba26c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba25e:	f855 0b04 	ldr.w	r0, [r5], #4
   ba262:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba266:	f7f9 ff1a 	bl	b409e <_ZdlPvj>
   ba26a:	e7f6      	b.n	ba25a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba26c:	6861      	ldr	r1, [r4, #4]
   ba26e:	6820      	ldr	r0, [r4, #0]
   ba270:	0089      	lsls	r1, r1, #2
   ba272:	f7f9 ff14 	bl	b409e <_ZdlPvj>
    }
   ba276:	4620      	mov	r0, r4
   ba278:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba27e:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba282:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba284:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba286:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba288:	b90a      	cbnz	r2, ba28e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba28a:	07d9      	lsls	r1, r3, #31
   ba28c:	d505      	bpl.n	ba29a <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba28e:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba292:	4b0a      	ldr	r3, [pc, #40]	; (ba2bc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba294:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba296:	4b0a      	ldr	r3, [pc, #40]	; (ba2c0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba298:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba29a:	4621      	mov	r1, r4
   ba29c:	4668      	mov	r0, sp
   ba29e:	f7fe f8bc 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2a2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba2a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2a6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2a8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba2aa:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba2ac:	4668      	mov	r0, sp
   ba2ae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2b0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba2b2:	9203      	str	r2, [sp, #12]
   ba2b4:	f7fb f8f3 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	}
   ba2b8:	b004      	add	sp, #16
   ba2ba:	bd10      	pop	{r4, pc}
   ba2bc:	000b9ddd 	.word	0x000b9ddd
   ba2c0:	000b9dfb 	.word	0x000b9dfb

000ba2c4 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba2c4:	b570      	push	{r4, r5, r6, lr}
   ba2c6:	b086      	sub	sp, #24
   ba2c8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba2ca:	f002 fd97 	bl	bcdfc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba2ce:	b948      	cbnz	r0, ba2e4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba2d0:	4b43      	ldr	r3, [pc, #268]	; (ba3e0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba2d2:	a902      	add	r1, sp, #8
   ba2d4:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba2d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba2dc:	f7ff ffce 	bl	ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba2e0:	b006      	add	sp, #24
   ba2e2:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba2e4:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba2e8:	b11d      	cbz	r5, ba2f2 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba2ea:	2301      	movs	r3, #1
   ba2ec:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba2f0:	e7f6      	b.n	ba2e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba2f2:	f002 fa97 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba2f6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba2fa:	1ac0      	subs	r0, r0, r3
   ba2fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba300:	4298      	cmp	r0, r3
   ba302:	d3ed      	bcc.n	ba2e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba304:	1d26      	adds	r6, r4, #4
   ba306:	4629      	mov	r1, r5
   ba308:	4630      	mov	r0, r6
   ba30a:	f002 f84f 	bl	bc3ac <_ZN14SequentialFile16getFileFromQueueEb>
   ba30e:	4601      	mov	r1, r0
   ba310:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba314:	2800      	cmp	r0, #0
   ba316:	d052      	beq.n	ba3be <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba318:	4620      	mov	r0, r4
   ba31a:	f7ff fdb9 	bl	b9e90 <_ZN17PublishQueuePosix13readQueueFileEi>
   ba31e:	4605      	mov	r5, r0
   ba320:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba324:	2800      	cmp	r0, #0
   ba326:	d035      	beq.n	ba394 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba328:	f002 fa7c 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba32c:	ae02      	add	r6, sp, #8
   ba32e:	2500      	movs	r5, #0
   ba330:	4b2c      	ldr	r3, [pc, #176]	; (ba3e4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba332:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba336:	4631      	mov	r1, r6
   ba338:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba33c:	9302      	str	r3, [sp, #8]
   ba33e:	9503      	str	r5, [sp, #12]
   ba340:	f7ff ff9c 	bl	ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba344:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba348:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba34c:	9200      	str	r2, [sp, #0]
   ba34e:	4926      	ldr	r1, [pc, #152]	; (ba3e8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba350:	4a26      	ldr	r2, [pc, #152]	; (ba3ec <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba352:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba356:	42a8      	cmp	r0, r5
   ba358:	bf08      	it	eq
   ba35a:	460a      	moveq	r2, r1
   ba35c:	3301      	adds	r3, #1
   ba35e:	4924      	ldr	r1, [pc, #144]	; (ba3f0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba360:	4824      	ldr	r0, [pc, #144]	; (ba3f4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba362:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba366:	f7fd f9d3 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba36a:	f7fd ff99 	bl	b82a0 <_ZN19BackgroundPublishRK8instanceEv>
   ba36e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba372:	4b21      	ldr	r3, [pc, #132]	; (ba3f8 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba374:	9305      	str	r3, [sp, #20]
   ba376:	e9cd 6500 	strd	r6, r5, [sp]
   ba37a:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba37c:	4b1f      	ldr	r3, [pc, #124]	; (ba3fc <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba37e:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba380:	9304      	str	r3, [sp, #16]
   ba382:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba386:	3242      	adds	r2, #66	; 0x42
   ba388:	f7fe f8d6 	bl	b8538 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba38c:	4630      	mov	r0, r6
   ba38e:	f7fb f886 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   ba392:	e7a5      	b.n	ba2e0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba394:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba398:	4919      	ldr	r1, [pc, #100]	; (ba400 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba39a:	4816      	ldr	r0, [pc, #88]	; (ba3f4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba39c:	f7f9 fecf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba3a0:	2101      	movs	r1, #1
   ba3a2:	4630      	mov	r0, r6
   ba3a4:	f002 f802 	bl	bc3ac <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba3a8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba3ac:	462a      	mov	r2, r5
   ba3ae:	4630      	mov	r0, r6
   ba3b0:	f001 fe34 	bl	bc01c <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba3b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba3b8:	2b00      	cmp	r3, #0
   ba3ba:	d1b5      	bne.n	ba328 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba3bc:	e795      	b.n	ba2ea <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba3be:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba3c2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba3c6:	429a      	cmp	r2, r3
   ba3c8:	d007      	beq.n	ba3da <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba3ca:	681b      	ldr	r3, [r3, #0]
   ba3cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba3d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba3d4:	f7ff fe73 	bl	ba0be <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba3d8:	e7ec      	b.n	ba3b4 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba3da:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba3de:	e784      	b.n	ba2ea <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba3e0:	000ba405 	.word	0x000ba405
   ba3e4:	000ba785 	.word	0x000ba785
   ba3e8:	000c477e 	.word	0x000c477e
   ba3ec:	000c4c70 	.word	0x000c4c70
   ba3f0:	000c479f 	.word	0x000c479f
   ba3f4:	2003e4d8 	.word	0x2003e4d8
   ba3f8:	000b9dcd 	.word	0x000b9dcd
   ba3fc:	000b9e13 	.word	0x000b9e13
   ba400:	000c4782 	.word	0x000c4782

000ba404 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba404:	b513      	push	{r0, r1, r4, lr}
   ba406:	4604      	mov	r4, r0
   ba408:	f002 fcf8 	bl	bcdfc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba40c:	b190      	cbz	r0, ba434 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba40e:	f002 fa09 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba412:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba416:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba41a:	4b0d      	ldr	r3, [pc, #52]	; (ba450 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba41c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba420:	9300      	str	r3, [sp, #0]
   ba422:	4669      	mov	r1, sp
   ba424:	2300      	movs	r3, #0
   ba426:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba42a:	9301      	str	r3, [sp, #4]
   ba42c:	f7ff ff26 	bl	ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba430:	b002      	add	sp, #8
   ba432:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba434:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba438:	b11b      	cbz	r3, ba442 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba43a:	2301      	movs	r3, #1
   ba43c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba440:	e7f6      	b.n	ba430 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba442:	4620      	mov	r0, r4
   ba444:	f7ff fe21 	bl	ba08a <_ZN17PublishQueuePosix12getNumEventsEv>
   ba448:	2800      	cmp	r0, #0
   ba44a:	d0f6      	beq.n	ba43a <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba44c:	e7f0      	b.n	ba430 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba44e:	bf00      	nop
   ba450:	000ba2c5 	.word	0x000ba2c5

000ba454 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba454:	b570      	push	{r4, r5, r6, lr}
   ba456:	4605      	mov	r5, r0
   ba458:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba45a:	2000      	movs	r0, #0
   ba45c:	f002 fc74 	bl	bcd48 <system_thread_get_state>
   ba460:	2801      	cmp	r0, #1
   ba462:	d005      	beq.n	ba470 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba464:	493e      	ldr	r1, [pc, #248]	; (ba560 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba466:	483f      	ldr	r0, [pc, #252]	; (ba564 <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba468:	f7fd f944 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
}
   ba46c:	b018      	add	sp, #96	; 0x60
   ba46e:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba470:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba474:	f002 f986 	bl	bc784 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba478:	4b3b      	ldr	r3, [pc, #236]	; (ba568 <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba47a:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba47c:	4b3b      	ldr	r3, [pc, #236]	; (ba56c <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba47e:	9307      	str	r3, [sp, #28]
        };
   ba480:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba482:	4b3b      	ldr	r3, [pc, #236]	; (ba570 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba484:	9306      	str	r3, [sp, #24]
   ba486:	a808      	add	r0, sp, #32
   ba488:	f7fb f994 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba48c:	a908      	add	r1, sp, #32
   ba48e:	a80c      	add	r0, sp, #48	; 0x30
   ba490:	f7fb f990 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba494:	a90c      	add	r1, sp, #48	; 0x30
   ba496:	a810      	add	r0, sp, #64	; 0x40
   ba498:	f7fb f98c 	bl	b57b4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba49c:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba49e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba4a0:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4a2:	f7f9 fdf8 	bl	b4096 <_Znwj>
   ba4a6:	4604      	mov	r4, r0
   ba4a8:	b160      	cbz	r0, ba4c4 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba4aa:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba4ac:	4601      	mov	r1, r0
   ba4ae:	a810      	add	r0, sp, #64	; 0x40
   ba4b0:	f7fd ffb3 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba4b6:	68a2      	ldr	r2, [r4, #8]
   ba4b8:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba4ba:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba4bc:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba4be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba4c0:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba4c2:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba4c4:	4b2b      	ldr	r3, [pc, #172]	; (ba574 <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba4c6:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba4c8:	4b2b      	ldr	r3, [pc, #172]	; (ba578 <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba4ca:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba4cc:	4b2b      	ldr	r3, [pc, #172]	; (ba57c <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4ce:	9414      	str	r4, [sp, #80]	; 0x50
   ba4d0:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba4d2:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba4d4:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba4d8:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba4da:	f7f9 fddc 	bl	b4096 <_Znwj>
   ba4de:	4604      	mov	r4, r0
   ba4e0:	b1d8      	cbz	r0, ba51a <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba4e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba4e4:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba4e6:	b133      	cbz	r3, ba4f6 <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba4e8:	2202      	movs	r2, #2
   ba4ea:	a914      	add	r1, sp, #80	; 0x50
   ba4ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba4ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba4f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba4f4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba4f6:	4b22      	ldr	r3, [pc, #136]	; (ba580 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba4f8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba4fa:	4a22      	ldr	r2, [pc, #136]	; (ba584 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba4fc:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba4fe:	ab01      	add	r3, sp, #4
   ba500:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba504:	2100      	movs	r1, #0
   ba506:	f002 fbff 	bl	bcd08 <system_subscribe_event>
        if (r) {
   ba50a:	b130      	cbz	r0, ba51a <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba50c:	4620      	mov	r0, r4
   ba50e:	f7fa ffc6 	bl	b549e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba512:	2110      	movs	r1, #16
   ba514:	4620      	mov	r0, r4
   ba516:	f7f9 fdc2 	bl	b409e <_ZdlPvj>
   ba51a:	a814      	add	r0, sp, #80	; 0x50
   ba51c:	f7fa ffbf 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   ba520:	a810      	add	r0, sp, #64	; 0x40
   ba522:	f7fa ffbc 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   ba526:	a80c      	add	r0, sp, #48	; 0x30
   ba528:	f7fa ffb9 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   ba52c:	a808      	add	r0, sp, #32
   ba52e:	f7fa ffb6 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   ba532:	a804      	add	r0, sp, #16
   ba534:	f7fa ffb3 	bl	b549e <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba538:	f7fd feb2 	bl	b82a0 <_ZN19BackgroundPublishRK8instanceEv>
   ba53c:	f7fd ffd6 	bl	b84ec <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba540:	1d28      	adds	r0, r5, #4
   ba542:	f001 feaf 	bl	bc2a4 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba546:	4628      	mov	r0, r5
   ba548:	f7ff fe32 	bl	ba1b0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba54c:	4b0e      	ldr	r3, [pc, #56]	; (ba588 <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba54e:	9314      	str	r3, [sp, #80]	; 0x50
   ba550:	a914      	add	r1, sp, #80	; 0x50
   ba552:	2300      	movs	r3, #0
   ba554:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba558:	9315      	str	r3, [sp, #84]	; 0x54
   ba55a:	f7ff fe8f 	bl	ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba55e:	e785      	b.n	ba46c <_ZN17PublishQueuePosix5setupEv+0x18>
   ba560:	000c47be 	.word	0x000c47be
   ba564:	2003e4d8 	.word	0x2003e4d8
   ba568:	000ba219 	.word	0x000ba219
   ba56c:	000b547b 	.word	0x000b547b
   ba570:	000b5467 	.word	0x000b5467
   ba574:	000b5441 	.word	0x000b5441
   ba578:	000b58dd 	.word	0x000b58dd
   ba57c:	000c0002 	.word	0x000c0002
   ba580:	000b54b1 	.word	0x000b54b1
   ba584:	000b5419 	.word	0x000b5419
   ba588:	000ba405 	.word	0x000ba405

000ba58c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba590:	4606      	mov	r6, r0
   ba592:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba594:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba596:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba598:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba59a:	1a47      	subs	r7, r0, r1
   ba59c:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba5a0:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba5a2:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba5a6:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba5a8:	d927      	bls.n	ba5fa <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba5aa:	1b5d      	subs	r5, r3, r5
   ba5ac:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba5ae:	6832      	ldr	r2, [r6, #0]
   ba5b0:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba5b2:	b10c      	cbz	r4, ba5b8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba5b4:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba5b8:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba5ba:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba5bc:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba5be:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba5c0:	eba3 0201 	sub.w	r2, r3, r1
   ba5c4:	d913      	bls.n	ba5ee <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba5c6:	4299      	cmp	r1, r3
   ba5c8:	d002      	beq.n	ba5d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba5ca:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba5cc:	f006 fc6e 	bl	c0eac <memmove>
	_M_node = __new_node;
   ba5d0:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba5d2:	6823      	ldr	r3, [r4, #0]
   ba5d4:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba5d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba5da:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba5dc:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba5de:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba5e0:	59e3      	ldr	r3, [r4, r7]
   ba5e2:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba5e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba5e8:	6233      	str	r3, [r6, #32]
    }
   ba5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   ba5ee:	4299      	cmp	r1, r3
   ba5f0:	d0ee      	beq.n	ba5d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba5f2:	1d38      	adds	r0, r7, #4
   ba5f4:	1a80      	subs	r0, r0, r2
   ba5f6:	4420      	add	r0, r4
   ba5f8:	e7e8      	b.n	ba5cc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba5fa:	f103 0802 	add.w	r8, r3, #2
   ba5fe:	454b      	cmp	r3, r9
   ba600:	bf2c      	ite	cs
   ba602:	4498      	addcs	r8, r3
   ba604:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   ba606:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   ba60a:	d301      	bcc.n	ba610 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   ba60c:	f005 feb8 	bl	c0380 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba610:	ea4f 0088 	mov.w	r0, r8, lsl #2
   ba614:	f7f9 fd3f 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba618:	eba8 0505 	sub.w	r5, r8, r5
   ba61c:	086d      	lsrs	r5, r5, #1
   ba61e:	4682      	mov	sl, r0
   ba620:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba622:	b10c      	cbz	r4, ba628 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   ba624:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   ba628:	6a72      	ldr	r2, [r6, #36]	; 0x24
   ba62a:	6971      	ldr	r1, [r6, #20]
   ba62c:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   ba62e:	442c      	add	r4, r5
	  if (_Num)
   ba630:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba632:	4454      	add	r4, sl
   ba634:	d003      	beq.n	ba63e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba636:	1a52      	subs	r2, r2, r1
   ba638:	4620      	mov	r0, r4
   ba63a:	f006 fc37 	bl	c0eac <memmove>
	::operator delete(__p
   ba63e:	6871      	ldr	r1, [r6, #4]
   ba640:	6830      	ldr	r0, [r6, #0]
   ba642:	0089      	lsls	r1, r1, #2
   ba644:	f7f9 fd2b 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba648:	e9c6 a800 	strd	sl, r8, [r6]
   ba64c:	e7c0      	b.n	ba5d0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000ba650 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba650:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba652:	b085      	sub	sp, #20
   ba654:	4604      	mov	r4, r0
   ba656:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   ba65a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba65e:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba660:	460f      	mov	r7, r1
   ba662:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba664:	f7ff fbec 	bl	b9e40 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   ba668:	4605      	mov	r5, r0
   ba66a:	2800      	cmp	r0, #0
   ba66c:	d03c      	beq.n	ba6e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   ba66e:	4b3f      	ldr	r3, [pc, #252]	; (ba76c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   ba670:	493f      	ldr	r1, [pc, #252]	; (ba770 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   ba672:	4840      	ldr	r0, [pc, #256]	; (ba774 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba674:	2e00      	cmp	r6, #0
   ba676:	bf18      	it	ne
   ba678:	4633      	movne	r3, r6
   ba67a:	463a      	mov	r2, r7
   ba67c:	f7fd f848 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
   ba680:	4620      	mov	r0, r4
   ba682:	f7ff fbd0 	bl	b9e26 <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   ba686:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   ba68a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   ba68e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba690:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   ba692:	f104 0678 	add.w	r6, r4, #120	; 0x78
   ba696:	d029      	beq.n	ba6ec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba698:	b103      	cbz	r3, ba69c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   ba69a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba69c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   ba6a0:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   ba6a2:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba6a4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   ba6a8:	4628      	mov	r0, r5
   ba6aa:	f001 fecf 	bl	bc44c <_ZNK14SequentialFile11getQueueLenEv>
   ba6ae:	9003      	str	r0, [sp, #12]
   ba6b0:	4630      	mov	r0, r6
   ba6b2:	f7ff fcd9 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba6b6:	9002      	str	r0, [sp, #8]
   ba6b8:	f002 fba0 	bl	bcdfc <spark_cloud_flag_connected>
   ba6bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   ba6c0:	9000      	str	r0, [sp, #0]
   ba6c2:	492d      	ldr	r1, [pc, #180]	; (ba778 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   ba6c4:	482b      	ldr	r0, [pc, #172]	; (ba774 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba6c6:	f7fd f823 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba6ca:	4628      	mov	r0, r5
   ba6cc:	f001 febe 	bl	bc44c <_ZNK14SequentialFile11getQueueLenEv>
   ba6d0:	2800      	cmp	r0, #0
   ba6d2:	d03b      	beq.n	ba74c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   ba6d4:	4620      	mov	r0, r4
   ba6d6:	f7ff fd0b 	bl	ba0f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   ba6da:	4620      	mov	r0, r4
   ba6dc:	f7ff fd68 	bl	ba1b0 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   ba6e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba6e2:	f002 f867 	bl	bc7b4 <os_mutex_recursive_unlock>
    return true;
   ba6e6:	2001      	movs	r0, #1
}
   ba6e8:	b005      	add	sp, #20
   ba6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   ba6ec:	4630      	mov	r0, r6
   ba6ee:	f7ff fcbb 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba6f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba6f6:	4298      	cmp	r0, r3
   ba6f8:	d102      	bne.n	ba700 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   ba6fa:	4820      	ldr	r0, [pc, #128]	; (ba77c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   ba6fc:	f005 fe43 	bl	c0386 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba700:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba704:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   ba706:	1a9a      	subs	r2, r3, r2
   ba708:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba70a:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba70e:	2b01      	cmp	r3, #1
   ba710:	d804      	bhi.n	ba71c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   ba712:	2200      	movs	r2, #0
   ba714:	2101      	movs	r1, #1
   ba716:	4630      	mov	r0, r6
   ba718:	f7ff ff38 	bl	ba58c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba71c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba720:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   ba724:	f7f9 fcb7 	bl	b4096 <_Znwj>
   ba728:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba72a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba72e:	b103      	cbz	r3, ba732 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   ba730:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba732:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba736:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba738:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   ba73c:	685b      	ldr	r3, [r3, #4]
   ba73e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba742:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba746:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   ba74a:	e7aa      	b.n	ba6a2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba74c:	4630      	mov	r0, r6
   ba74e:	f7ff fc8b 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba752:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba754:	4298      	cmp	r0, r3
   ba756:	d8bd      	bhi.n	ba6d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   ba758:	f002 fb50 	bl	bcdfc <spark_cloud_flag_connected>
   ba75c:	2800      	cmp	r0, #0
   ba75e:	d0b9      	beq.n	ba6d4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   ba760:	4907      	ldr	r1, [pc, #28]	; (ba780 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   ba762:	4804      	ldr	r0, [pc, #16]	; (ba774 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba764:	f7fc ffd4 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
   ba768:	e7b7      	b.n	ba6da <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   ba76a:	bf00      	nop
   ba76c:	000c4e80 	.word	0x000c4e80
   ba770:	000c47e1 	.word	0x000c47e1
   ba774:	2003e4d8 	.word	0x2003e4d8
   ba778:	000c4839 	.word	0x000c4839
   ba77c:	000c4809 	.word	0x000c4809
   ba780:	000c4865 	.word	0x000c4865

000ba784 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   ba784:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   ba786:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   ba78a:	4604      	mov	r4, r0
    if (!publishComplete) {
   ba78c:	2b00      	cmp	r3, #0
   ba78e:	d041      	beq.n	ba814 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   ba790:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   ba794:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   ba798:	2b00      	cmp	r3, #0
   ba79a:	d03d      	beq.n	ba818 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   ba79c:	4950      	ldr	r1, [pc, #320]	; (ba8e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   ba79e:	4851      	ldr	r0, [pc, #324]	; (ba8e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba7a0:	f7fc ffb6 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   ba7a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba7a8:	b1d3      	cbz	r3, ba7e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   ba7aa:	1d26      	adds	r6, r4, #4
   ba7ac:	2100      	movs	r1, #0
   ba7ae:	4630      	mov	r0, r6
   ba7b0:	f001 fdfc 	bl	bc3ac <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   ba7b4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba7b8:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   ba7ba:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   ba7bc:	d10d      	bne.n	ba7da <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   ba7be:	2101      	movs	r1, #1
   ba7c0:	4630      	mov	r0, r6
   ba7c2:	f001 fdf3 	bl	bc3ac <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   ba7c6:	2200      	movs	r2, #0
   ba7c8:	4629      	mov	r1, r5
   ba7ca:	4630      	mov	r0, r6
   ba7cc:	f001 fc26 	bl	bc01c <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   ba7d0:	4945      	ldr	r1, [pc, #276]	; (ba8e8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   ba7d2:	4844      	ldr	r0, [pc, #272]	; (ba8e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba7d4:	462a      	mov	r2, r5
   ba7d6:	f7fc ff9b 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   ba7da:	2300      	movs	r3, #0
   ba7dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   ba7e0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   ba7e4:	b110      	cbz	r0, ba7ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   ba7e6:	2143      	movs	r1, #67	; 0x43
   ba7e8:	f7f9 fc59 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   ba7ec:	2300      	movs	r3, #0
   ba7ee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   ba7f2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   ba7f6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   ba7fa:	4b3c      	ldr	r3, [pc, #240]	; (ba8ec <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   ba7fc:	9300      	str	r3, [sp, #0]
   ba7fe:	4669      	mov	r1, sp
   ba800:	2300      	movs	r3, #0
   ba802:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba806:	9301      	str	r3, [sp, #4]
   ba808:	f7ff fd38 	bl	ba27c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba80c:	f002 f80a 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   ba810:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   ba814:	b002      	add	sp, #8
   ba816:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   ba818:	4935      	ldr	r1, [pc, #212]	; (ba8f0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   ba81a:	4832      	ldr	r0, [pc, #200]	; (ba8e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba81c:	f7fc ff78 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   ba820:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   ba824:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   ba828:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   ba82c:	b14b      	cbz	r3, ba842 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   ba82e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   ba832:	b110      	cbz	r0, ba83a <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   ba834:	2143      	movs	r1, #67	; 0x43
   ba836:	f7f9 fc32 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   ba83a:	2300      	movs	r3, #0
   ba83c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   ba840:	e7db      	b.n	ba7fa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   ba842:	4620      	mov	r0, r4
   ba844:	f7ff faef 	bl	b9e26 <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   ba848:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   ba84c:	4293      	cmp	r3, r2
   ba84e:	d013      	beq.n	ba878 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   ba850:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba854:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   ba858:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba85c:	3b04      	subs	r3, #4
   ba85e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   ba862:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba864:	f001 ffa6 	bl	bc7b4 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   ba868:	4922      	ldr	r1, [pc, #136]	; (ba8f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   ba86a:	481e      	ldr	r0, [pc, #120]	; (ba8e4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   ba86c:	f7fc ff50 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   ba870:	4620      	mov	r0, r4
   ba872:	f7ff fc3d 	bl	ba0f0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   ba876:	e7c0      	b.n	ba7fa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   ba878:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   ba87c:	4628      	mov	r0, r5
   ba87e:	f7ff fbf3 	bl	ba068 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba882:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba886:	4298      	cmp	r0, r3
   ba888:	d102      	bne.n	ba890 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   ba88a:	481b      	ldr	r0, [pc, #108]	; (ba8f8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   ba88c:	f005 fd7b 	bl	c0386 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   ba890:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   ba894:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba896:	429a      	cmp	r2, r3
   ba898:	d104      	bne.n	ba8a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   ba89a:	2201      	movs	r2, #1
   ba89c:	4611      	mov	r1, r2
   ba89e:	4628      	mov	r0, r5
   ba8a0:	f7ff fe74 	bl	ba58c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba8a4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   ba8a8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   ba8ac:	f7f9 fbf3 	bl	b4096 <_Znwj>
   ba8b0:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   ba8b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba8b8:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   ba8ba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   ba8be:	f853 3c04 	ldr.w	r3, [r3, #-4]
   ba8c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba8c6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba8ca:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   ba8ce:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   ba8d2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba8d6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba8da:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   ba8de:	e7c0      	b.n	ba862 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   ba8e0:	000c4878 	.word	0x000c4878
   ba8e4:	2003e4d8 	.word	0x2003e4d8
   ba8e8:	000c488b 	.word	0x000c488b
   ba8ec:	000ba2c5 	.word	0x000ba2c5
   ba8f0:	000c489b 	.word	0x000c489b
   ba8f4:	000c48ad 	.word	0x000c48ad
   ba8f8:	000c4809 	.word	0x000c4809

000ba8fc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   ba8fc:	4b01      	ldr	r3, [pc, #4]	; (ba904 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   ba8fe:	4a02      	ldr	r2, [pc, #8]	; (ba908 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   ba900:	601a      	str	r2, [r3, #0]
}
   ba902:	4770      	bx	lr
   ba904:	2003e4d8 	.word	0x2003e4d8
   ba908:	000c48d4 	.word	0x000c48d4

000ba90c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba90c:	b510      	push	{r4, lr}
   ba90e:	4b07      	ldr	r3, [pc, #28]	; (ba92c <_ZN17PublishQueuePosixD1Ev+0x20>)
   ba910:	4604      	mov	r4, r0
   ba912:	f840 3bc0 	str.w	r3, [r0], #192
   ba916:	f7fa fdc2 	bl	b549e <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   ba91a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba91e:	f7ff fc95 	bl	ba24c <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   ba922:	1d20      	adds	r0, r4, #4
   ba924:	f001 fbfe 	bl	bc124 <_ZN14SequentialFileD1Ev>
}
   ba928:	4620      	mov	r0, r4
   ba92a:	bd10      	pop	{r4, pc}
   ba92c:	000c48e8 	.word	0x000c48e8

000ba930 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   ba930:	b510      	push	{r4, lr}
   ba932:	4604      	mov	r4, r0
}
   ba934:	f7ff ffea 	bl	ba90c <_ZN17PublishQueuePosixD1Ev>
   ba938:	4620      	mov	r0, r4
   ba93a:	21d0      	movs	r1, #208	; 0xd0
   ba93c:	f7f9 fbaf 	bl	b409e <_ZdlPvj>
   ba940:	4620      	mov	r0, r4
   ba942:	bd10      	pop	{r4, pc}

000ba944 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   ba944:	6001      	str	r1, [r0, #0]
   ba946:	7102      	strb	r2, [r0, #4]
{
}
   ba948:	4770      	bx	lr

000ba94a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   ba94a:	6800      	ldr	r0, [r0, #0]
   ba94c:	6803      	ldr	r3, [r0, #0]
   ba94e:	68db      	ldr	r3, [r3, #12]
   ba950:	4718      	bx	r3

000ba952 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   ba952:	6800      	ldr	r0, [r0, #0]
   ba954:	6803      	ldr	r3, [r0, #0]
   ba956:	6a1b      	ldr	r3, [r3, #32]
   ba958:	4718      	bx	r3

000ba95a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   ba95a:	6800      	ldr	r0, [r0, #0]
   ba95c:	6803      	ldr	r3, [r0, #0]
   ba95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba960:	4718      	bx	r3

000ba962 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   ba962:	7900      	ldrb	r0, [r0, #4]
   ba964:	4770      	bx	lr

000ba966 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   ba966:	6800      	ldr	r0, [r0, #0]
   ba968:	6803      	ldr	r3, [r0, #0]
   ba96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba96c:	4718      	bx	r3

000ba96e <_ZN10RHDatagram6sendtoEPhhh>:
{
   ba96e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba970:	4605      	mov	r5, r0
   ba972:	460c      	mov	r4, r1
    setHeaderTo(address);
   ba974:	4619      	mov	r1, r3
{
   ba976:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   ba978:	f7ff fff5 	bl	ba966 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   ba97c:	6828      	ldr	r0, [r5, #0]
   ba97e:	9a01      	ldr	r2, [sp, #4]
   ba980:	6803      	ldr	r3, [r0, #0]
   ba982:	695b      	ldr	r3, [r3, #20]
   ba984:	4621      	mov	r1, r4
}
   ba986:	b003      	add	sp, #12
   ba988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   ba98c:	4718      	bx	r3

000ba98e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   ba98e:	6800      	ldr	r0, [r0, #0]
   ba990:	6803      	ldr	r3, [r0, #0]
   ba992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba994:	4718      	bx	r3

000ba996 <_ZN10RHDatagram14setThisAddressEh>:
{
   ba996:	b538      	push	{r3, r4, r5, lr}
   ba998:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   ba99a:	6800      	ldr	r0, [r0, #0]
   ba99c:	6803      	ldr	r3, [r0, #0]
{
   ba99e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   ba9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba9a2:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   ba9a4:	4629      	mov	r1, r5
   ba9a6:	4620      	mov	r0, r4
   ba9a8:	f7ff fff1 	bl	ba98e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   ba9ac:	7125      	strb	r5, [r4, #4]
}
   ba9ae:	bd38      	pop	{r3, r4, r5, pc}

000ba9b0 <_ZN10RHDatagram4initEv>:
{
   ba9b0:	b538      	push	{r3, r4, r5, lr}
   ba9b2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   ba9b4:	6800      	ldr	r0, [r0, #0]
   ba9b6:	6803      	ldr	r3, [r0, #0]
   ba9b8:	689b      	ldr	r3, [r3, #8]
   ba9ba:	4798      	blx	r3
    if (ret)
   ba9bc:	4605      	mov	r5, r0
   ba9be:	b118      	cbz	r0, ba9c8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   ba9c0:	7921      	ldrb	r1, [r4, #4]
   ba9c2:	4620      	mov	r0, r4
   ba9c4:	f7ff ffe7 	bl	ba996 <_ZN10RHDatagram14setThisAddressEh>
}
   ba9c8:	4628      	mov	r0, r5
   ba9ca:	bd38      	pop	{r3, r4, r5, pc}

000ba9cc <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   ba9cc:	6800      	ldr	r0, [r0, #0]
   ba9ce:	6803      	ldr	r3, [r0, #0]
   ba9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba9d2:	4718      	bx	r3

000ba9d4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   ba9d4:	6800      	ldr	r0, [r0, #0]
   ba9d6:	6803      	ldr	r3, [r0, #0]
   ba9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba9da:	4718      	bx	r3

000ba9dc <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   ba9dc:	6800      	ldr	r0, [r0, #0]
   ba9de:	6803      	ldr	r3, [r0, #0]
   ba9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba9e2:	4718      	bx	r3

000ba9e4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   ba9e4:	6800      	ldr	r0, [r0, #0]
   ba9e6:	6803      	ldr	r3, [r0, #0]
   ba9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba9ea:	4718      	bx	r3

000ba9ec <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   ba9ec:	6800      	ldr	r0, [r0, #0]
   ba9ee:	6803      	ldr	r3, [r0, #0]
   ba9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba9f2:	4718      	bx	r3

000ba9f4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   ba9f4:	6800      	ldr	r0, [r0, #0]
   ba9f6:	6803      	ldr	r3, [r0, #0]
   ba9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba9fa:	4718      	bx	r3

000ba9fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   ba9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baa00:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   baa02:	6800      	ldr	r0, [r0, #0]
{
   baa04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   baa06:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   baa08:	6803      	ldr	r3, [r0, #0]
   baa0a:	691b      	ldr	r3, [r3, #16]
{
   baa0c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   baa10:	4798      	blx	r3
   baa12:	4605      	mov	r5, r0
   baa14:	b1c8      	cbz	r0, baa4a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   baa16:	b11e      	cbz	r6, baa20 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   baa18:	4620      	mov	r0, r4
   baa1a:	f7ff ffe3 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
   baa1e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   baa20:	f1b9 0f00 	cmp.w	r9, #0
   baa24:	d004      	beq.n	baa30 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   baa26:	4620      	mov	r0, r4
   baa28:	f7ff ffd8 	bl	ba9dc <_ZN10RHDatagram8headerToEv>
   baa2c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   baa30:	f1b8 0f00 	cmp.w	r8, #0
   baa34:	d004      	beq.n	baa40 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   baa36:	4620      	mov	r0, r4
   baa38:	f7ff ffd8 	bl	ba9ec <_ZN10RHDatagram8headerIdEv>
   baa3c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   baa40:	b11f      	cbz	r7, baa4a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   baa42:	4620      	mov	r0, r4
   baa44:	f7ff ffd6 	bl	ba9f4 <_ZN10RHDatagram11headerFlagsEv>
   baa48:	7038      	strb	r0, [r7, #0]
}
   baa4a:	4628      	mov	r0, r5
   baa4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000baa50 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   baa50:	2001      	movs	r0, #1
   baa52:	4770      	bx	lr

000baa54 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   baa54:	7903      	ldrb	r3, [r0, #4]
   baa56:	2b03      	cmp	r3, #3
   baa58:	d0fc      	beq.n	baa54 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   baa5a:	2001      	movs	r0, #1
   baa5c:	4770      	bx	lr

000baa5e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   baa5e:	2000      	movs	r0, #0
   baa60:	4770      	bx	lr

000baa62 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   baa62:	7181      	strb	r1, [r0, #6]
}
   baa64:	4770      	bx	lr

000baa66 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   baa66:	7141      	strb	r1, [r0, #5]
}
   baa68:	4770      	bx	lr

000baa6a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   baa6a:	72c1      	strb	r1, [r0, #11]
}
   baa6c:	4770      	bx	lr

000baa6e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   baa6e:	7301      	strb	r1, [r0, #12]
}
   baa70:	4770      	bx	lr

000baa72 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   baa72:	7341      	strb	r1, [r0, #13]
}
   baa74:	4770      	bx	lr

000baa76 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   baa76:	7b83      	ldrb	r3, [r0, #14]
   baa78:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   baa7c:	4311      	orrs	r1, r2
   baa7e:	7381      	strb	r1, [r0, #14]
}
   baa80:	4770      	bx	lr

000baa82 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   baa82:	79c0      	ldrb	r0, [r0, #7]
}
   baa84:	4770      	bx	lr

000baa86 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   baa86:	7a00      	ldrb	r0, [r0, #8]
}
   baa88:	4770      	bx	lr

000baa8a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   baa8a:	7a40      	ldrb	r0, [r0, #9]
}
   baa8c:	4770      	bx	lr

000baa8e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   baa8e:	7a80      	ldrb	r0, [r0, #10]
}
   baa90:	4770      	bx	lr

000baa92 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   baa92:	8a00      	ldrh	r0, [r0, #16]
}
   baa94:	b200      	sxth	r0, r0
   baa96:	4770      	bx	lr

000baa98 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   baa98:	7900      	ldrb	r0, [r0, #4]
}
   baa9a:	4770      	bx	lr

000baa9c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   baa9c:	7101      	strb	r1, [r0, #4]
}
   baa9e:	4770      	bx	lr

000baaa0 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   baaa0:	8a40      	ldrh	r0, [r0, #18]
}
   baaa2:	b280      	uxth	r0, r0
   baaa4:	4770      	bx	lr

000baaa6 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   baaa6:	8a80      	ldrh	r0, [r0, #20]
}
   baaa8:	b280      	uxth	r0, r0
   baaaa:	4770      	bx	lr

000baaac <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   baaac:	8ac0      	ldrh	r0, [r0, #22]
}
   baaae:	b280      	uxth	r0, r0
   baab0:	4770      	bx	lr

000baab2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   baab2:	b538      	push	{r3, r4, r5, lr}
   baab4:	4605      	mov	r5, r0
   baab6:	460c      	mov	r4, r1
    while (!available())
   baab8:	682b      	ldr	r3, [r5, #0]
   baaba:	4628      	mov	r0, r5
   baabc:	68db      	ldr	r3, [r3, #12]
   baabe:	4798      	blx	r3
   baac0:	b928      	cbnz	r0, baace <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   baac2:	2c00      	cmp	r4, #0
   baac4:	d0f8      	beq.n	baab8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   baac6:	4620      	mov	r0, r4
   baac8:	f002 fab8 	bl	bd03c <delay>
   baacc:	e7f4      	b.n	baab8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   baace:	bd38      	pop	{r3, r4, r5, pc}

000baad0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   baad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baad2:	4605      	mov	r5, r0
   baad4:	460f      	mov	r7, r1
   baad6:	4614      	mov	r4, r2
   baad8:	f001 fea4 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   baadc:	4606      	mov	r6, r0
   baade:	f001 fea1 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   baae2:	1b80      	subs	r0, r0, r6
   baae4:	42b8      	cmp	r0, r7
   baae6:	d20a      	bcs.n	baafe <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   baae8:	682b      	ldr	r3, [r5, #0]
   baaea:	4628      	mov	r0, r5
   baaec:	68db      	ldr	r3, [r3, #12]
   baaee:	4798      	blx	r3
   baaf0:	b930      	cbnz	r0, bab00 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   baaf2:	2c00      	cmp	r4, #0
   baaf4:	d0f3      	beq.n	baade <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   baaf6:	4620      	mov	r0, r4
   baaf8:	f002 faa0 	bl	bd03c <delay>
   baafc:	e7ef      	b.n	baade <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   baafe:	2000      	movs	r0, #0
}
   bab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bab02 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   bab02:	b570      	push	{r4, r5, r6, lr}
   bab04:	4604      	mov	r4, r0
   bab06:	460e      	mov	r6, r1
   bab08:	f001 fe8c 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   bab0c:	4605      	mov	r5, r0
   bab0e:	f001 fe89 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bab12:	1b40      	subs	r0, r0, r5
   bab14:	42b0      	cmp	r0, r6
   bab16:	d204      	bcs.n	bab22 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   bab18:	7923      	ldrb	r3, [r4, #4]
   bab1a:	2b03      	cmp	r3, #3
   bab1c:	d0f7      	beq.n	bab0e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   bab1e:	2001      	movs	r0, #1
}
   bab20:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   bab22:	2000      	movs	r0, #0
   bab24:	e7fc      	b.n	bab20 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000bab26 <_ZN15RHGenericDriver7waitCADEv>:
{
   bab26:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   bab28:	69c3      	ldr	r3, [r0, #28]
{
   bab2a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   bab2c:	b1b3      	cbz	r3, bab5c <_ZN15RHGenericDriver7waitCADEv+0x36>
   bab2e:	f001 fe79 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bab32:	2664      	movs	r6, #100	; 0x64
   bab34:	4605      	mov	r5, r0
    while (isChannelActive())
   bab36:	6823      	ldr	r3, [r4, #0]
   bab38:	4620      	mov	r0, r4
   bab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bab3c:	4798      	blx	r3
   bab3e:	b168      	cbz	r0, bab5c <_ZN15RHGenericDriver7waitCADEv+0x36>
   bab40:	f001 fe70 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   bab44:	69e3      	ldr	r3, [r4, #28]
   bab46:	1b40      	subs	r0, r0, r5
   bab48:	4298      	cmp	r0, r3
   bab4a:	d809      	bhi.n	bab60 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bab4c:	210a      	movs	r1, #10
   bab4e:	2001      	movs	r0, #1
   bab50:	f004 fc77 	bl	bf442 <_Z6randomii>
   bab54:	4370      	muls	r0, r6
   bab56:	f002 fa71 	bl	bd03c <delay>
    while (isChannelActive())
   bab5a:	e7ec      	b.n	bab36 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   bab5c:	2001      	movs	r0, #1
}
   bab5e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   bab60:	2000      	movs	r0, #0
   bab62:	e7fc      	b.n	bab5e <_ZN15RHGenericDriver7waitCADEv+0x38>

000bab64 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   bab64:	4a06      	ldr	r2, [pc, #24]	; (bab80 <_ZN15RHGenericDriverC1Ev+0x1c>)
   bab66:	6002      	str	r2, [r0, #0]
   bab68:	21ff      	movs	r1, #255	; 0xff
   bab6a:	2200      	movs	r2, #0
   bab6c:	7102      	strb	r2, [r0, #4]
   bab6e:	7141      	strb	r1, [r0, #5]
   bab70:	8242      	strh	r2, [r0, #18]
   bab72:	72c1      	strb	r1, [r0, #11]
   bab74:	8282      	strh	r2, [r0, #20]
   bab76:	8181      	strh	r1, [r0, #12]
   bab78:	7382      	strb	r2, [r0, #14]
   bab7a:	82c2      	strh	r2, [r0, #22]
   bab7c:	61c2      	str	r2, [r0, #28]
}
   bab7e:	4770      	bx	lr
   bab80:	000c48fc 	.word	0x000c48fc

000bab84 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bab84:	4770      	bx	lr

000bab86 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bab86:	4770      	bx	lr

000bab88 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bab88:	4770      	bx	lr

000bab8a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bab8a:	4770      	bx	lr

000bab8c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bab8c:	4770      	bx	lr

000bab8e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bab8e:	7141      	strb	r1, [r0, #5]
}
   bab90:	4770      	bx	lr

000bab92 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bab92:	7181      	strb	r1, [r0, #6]
}
   bab94:	4770      	bx	lr

000bab96 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bab96:	7101      	strb	r1, [r0, #4]
}
   bab98:	4770      	bx	lr
	...

000bab9c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bab9c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bab9e:	4d03      	ldr	r5, [pc, #12]	; (babac <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   baba0:	6005      	str	r5, [r0, #0]
   baba2:	7101      	strb	r1, [r0, #4]
   baba4:	7142      	strb	r2, [r0, #5]
   baba6:	7183      	strb	r3, [r0, #6]
}
   baba8:	bd30      	pop	{r4, r5, pc}
   babaa:	bf00      	nop
   babac:	000c497c 	.word	0x000c497c

000babb0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   babb0:	4770      	bx	lr

000babb2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   babb2:	b510      	push	{r4, lr}
  }
   babb4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   babb6:	4604      	mov	r4, r0
  }
   babb8:	f7f9 fa71 	bl	b409e <_ZdlPvj>
   babbc:	4620      	mov	r0, r4
   babbe:	bd10      	pop	{r4, pc}

000babc0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   babc0:	b40e      	push	{r1, r2, r3}
   babc2:	b503      	push	{r0, r1, lr}
   babc4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   babc6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   babc8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   babcc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   babce:	f004 fbfc 	bl	bf3ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   babd2:	b002      	add	sp, #8
   babd4:	f85d eb04 	ldr.w	lr, [sp], #4
   babd8:	b003      	add	sp, #12
   babda:	4770      	bx	lr

000babdc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   babdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   babde:	4604      	mov	r4, r0
   babe0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   babe2:	7922      	ldrb	r2, [r4, #4]
   babe4:	68a3      	ldr	r3, [r4, #8]
   babe6:	b132      	cbz	r2, babf6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   babe8:	b9a3      	cbnz	r3, bac14 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   babea:	490b      	ldr	r1, [pc, #44]	; (bac18 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   babec:	b002      	add	sp, #8
   babee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   babf2:	f004 bae1 	b.w	bf1b8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   babf6:	4a09      	ldr	r2, [pc, #36]	; (bac1c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   babf8:	7b26      	ldrb	r6, [r4, #12]
   babfa:	4d09      	ldr	r5, [pc, #36]	; (bac20 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   babfc:	4909      	ldr	r1, [pc, #36]	; (bac24 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   babfe:	7b64      	ldrb	r4, [r4, #13]
   bac00:	2e01      	cmp	r6, #1
   bac02:	bf18      	it	ne
   bac04:	4629      	movne	r1, r5
   bac06:	e9cd 1400 	strd	r1, r4, [sp]
   bac0a:	4907      	ldr	r1, [pc, #28]	; (bac28 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   bac0c:	f7ff ffd8 	bl	babc0 <_ZN5Print6printfEPKcz>
  }
   bac10:	b002      	add	sp, #8
   bac12:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bac14:	4a05      	ldr	r2, [pc, #20]	; (bac2c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   bac16:	e7ef      	b.n	babf8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   bac18:	000c49b9 	.word	0x000c49b9
   bac1c:	000c4e80 	.word	0x000c4e80
   bac20:	000c49b5 	.word	0x000c49b5
   bac24:	000c49b1 	.word	0x000c49b1
   bac28:	000c49cf 	.word	0x000c49cf
   bac2c:	000c49a8 	.word	0x000c49a8

000bac30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bac30:	b510      	push	{r4, lr}
   bac32:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   bac34:	f7ff ffb2 	bl	bab9c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   bac38:	4b05      	ldr	r3, [pc, #20]	; (bac50 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   bac3a:	6023      	str	r3, [r4, #0]
  {
   bac3c:	4b05      	ldr	r3, [pc, #20]	; (bac54 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   bac3e:	60a3      	str	r3, [r4, #8]
   bac40:	2301      	movs	r3, #1
   bac42:	7323      	strb	r3, [r4, #12]
   bac44:	2300      	movs	r3, #0
   bac46:	6123      	str	r3, [r4, #16]
   bac48:	82a3      	strh	r3, [r4, #20]
{
}
   bac4a:	4620      	mov	r0, r4
   bac4c:	bd10      	pop	{r4, pc}
   bac4e:	bf00      	nop
   bac50:	000c4a08 	.word	0x000c4a08
   bac54:	000c49f4 	.word	0x000c49f4

000bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bac58:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bac5a:	4c0b      	ldr	r4, [pc, #44]	; (bac88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bac5c:	7821      	ldrb	r1, [r4, #0]
   bac5e:	f3bf 8f5b 	dmb	ish
   bac62:	f011 0101 	ands.w	r1, r1, #1
   bac66:	d10b      	bne.n	bac80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bac68:	4620      	mov	r0, r4
   bac6a:	9101      	str	r1, [sp, #4]
   bac6c:	f7f9 fa26 	bl	b40bc <__cxa_guard_acquire>
   bac70:	9901      	ldr	r1, [sp, #4]
   bac72:	b128      	cbz	r0, bac80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bac74:	4805      	ldr	r0, [pc, #20]	; (bac8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bac76:	f004 fbfb 	bl	bf470 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bac7a:	4620      	mov	r0, r4
   bac7c:	f7f9 fa23 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   bac80:	4802      	ldr	r0, [pc, #8]	; (bac8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bac82:	b002      	add	sp, #8
   bac84:	bd10      	pop	{r4, pc}
   bac86:	bf00      	nop
   bac88:	2003e4e0 	.word	0x2003e4e0
   bac8c:	2003e4e4 	.word	0x2003e4e4

000bac90 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   bac90:	b507      	push	{r0, r1, r2, lr}
   bac92:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   bac94:	f7ff ffe0 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bac98:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   bac9a:	b003      	add	sp, #12
   bac9c:	f85d eb04 	ldr.w	lr, [sp], #4
   baca0:	f004 bc9e 	b.w	bf5e0 <_ZN8SPIClass8transferEh>

000baca4 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   baca4:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   baca6:	f7ff ffd7 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   bacaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bacae:	f004 bc9d 	b.w	bf5ec <_ZN8SPIClass15attachInterruptEv>

000bacb2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   bacb2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   bacb4:	f7ff ffd0 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   bacb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bacbc:	f004 bc97 	b.w	bf5ee <_ZN8SPIClass15detachInterruptEv>

000bacc0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   bacc0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   bacc2:	7903      	ldrb	r3, [r0, #4]
   bacc4:	2b04      	cmp	r3, #4
   bacc6:	d020      	beq.n	bad0a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   bacc8:	2b03      	cmp	r3, #3
   bacca:	d020      	beq.n	bad0e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   baccc:	2b02      	cmp	r3, #2
   bacce:	d020      	beq.n	bad12 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   bacd0:	4a11      	ldr	r2, [pc, #68]	; (bad18 <_ZN13RHHardwareSPI5beginEv+0x58>)
   bacd2:	4912      	ldr	r1, [pc, #72]	; (bad1c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   bacd4:	2b01      	cmp	r3, #1
   bacd6:	bf18      	it	ne
   bacd8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   bacda:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   bacdc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   bacde:	3901      	subs	r1, #1
   bace0:	bf18      	it	ne
   bace2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   bace4:	b133      	cbz	r3, bacf4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   bace6:	2b01      	cmp	r3, #1
   bace8:	d004      	beq.n	bacf4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   bacea:	2b02      	cmp	r3, #2
   bacec:	d002      	beq.n	bacf4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   bacee:	2b03      	cmp	r3, #3
   bacf0:	bf18      	it	ne
   bacf2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   bacf4:	2400      	movs	r4, #0
   bacf6:	7304      	strb	r4, [r0, #12]
   bacf8:	6102      	str	r2, [r0, #16]
   bacfa:	7501      	strb	r1, [r0, #20]
   bacfc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   bacfe:	f7ff ffab 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   bad02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bad06:	f004 bbbd 	b.w	bf484 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   bad0a:	4a05      	ldr	r2, [pc, #20]	; (bad20 <_ZN13RHHardwareSPI5beginEv+0x60>)
   bad0c:	e7e5      	b.n	bacda <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bad0e:	4a05      	ldr	r2, [pc, #20]	; (bad24 <_ZN13RHHardwareSPI5beginEv+0x64>)
   bad10:	e7e3      	b.n	bacda <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bad12:	4a05      	ldr	r2, [pc, #20]	; (bad28 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bad14:	e7e1      	b.n	bacda <_ZN13RHHardwareSPI5beginEv+0x1a>
   bad16:	bf00      	nop
   bad18:	001e8480 	.word	0x001e8480
   bad1c:	000f4240 	.word	0x000f4240
   bad20:	00f42400 	.word	0x00f42400
   bad24:	007a1200 	.word	0x007a1200
   bad28:	003d0900 	.word	0x003d0900

000bad2c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bad2c:	b508      	push	{r3, lr}
        instance().end();
   bad2e:	f7ff ff93 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bad32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bad36:	f004 bbb9 	b.w	bf4ac <_ZN8SPIClass3endEv>

000bad3a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bad3a:	b510      	push	{r4, lr}
   bad3c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bad3e:	f7ff ff8b 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bad42:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bad46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bad4a:	f004 bbdb 	b.w	bf504 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bad4e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bad4e:	b508      	push	{r3, lr}
        instance().endTransaction();
   bad50:	f7ff ff82 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bad54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bad58:	f004 bbba 	b.w	bf4d0 <_ZN8SPIClass14endTransactionEv>

000bad5c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   bad5c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   bad5e:	f7ff ff7b 	bl	bac58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   bad62:	bd08      	pop	{r3, pc}

000bad64 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   bad64:	2300      	movs	r3, #0
   bad66:	4802      	ldr	r0, [pc, #8]	; (bad70 <_GLOBAL__sub_I_hardware_spi+0xc>)
   bad68:	461a      	mov	r2, r3
   bad6a:	4619      	mov	r1, r3
   bad6c:	f7ff bf60 	b.w	bac30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bad70:	2003e4ec 	.word	0x2003e4ec

000bad74 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bad74:	2a01      	cmp	r2, #1
   bad76:	d105      	bne.n	bad84 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bad78:	7a00      	ldrb	r0, [r0, #8]
   bad7a:	780b      	ldrb	r3, [r1, #0]
   bad7c:	1a1b      	subs	r3, r3, r0
   bad7e:	4258      	negs	r0, r3
   bad80:	4158      	adcs	r0, r3
   bad82:	4770      	bx	lr
   bad84:	2000      	movs	r0, #0
}
   bad86:	4770      	bx	lr

000bad88 <_ZN6RHMesh5doArpEh>:
{
   bad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bad8c:	4c25      	ldr	r4, [pc, #148]	; (bae24 <_ZN6RHMesh5doArpEh+0x9c>)
   bad8e:	2301      	movs	r3, #1
{
   bad90:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bad92:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bad94:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bad96:	2300      	movs	r3, #0
{
   bad98:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bad9a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bad9c:	9300      	str	r3, [sp, #0]
   bad9e:	2203      	movs	r2, #3
   bada0:	23ff      	movs	r3, #255	; 0xff
   bada2:	4621      	mov	r1, r4
{
   bada4:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bada6:	f000 fbb7 	bl	bb518 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   badaa:	b120      	cbz	r0, badb6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   badac:	2500      	movs	r5, #0
}
   badae:	4628      	mov	r0, r5
   badb0:	b006      	add	sp, #24
   badb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   badb6:	237a      	movs	r3, #122	; 0x7a
   badb8:	f88d 3017 	strb.w	r3, [sp, #23]
   badbc:	f001 fd32 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   badc0:	f106 0904 	add.w	r9, r6, #4
   badc4:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   badc6:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   badca:	f001 fd2b 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   badce:	1a29      	subs	r1, r5, r0
   badd0:	2900      	cmp	r1, #0
   badd2:	ddeb      	ble.n	badac <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   badd4:	2200      	movs	r2, #0
   badd6:	b289      	uxth	r1, r1
   badd8:	4648      	mov	r0, r9
   badda:	f7ff fdbe 	bl	ba95a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   badde:	2800      	cmp	r0, #0
   bade0:	d0f3      	beq.n	badca <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bade2:	2300      	movs	r3, #0
   bade4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bade8:	e9cd 3300 	strd	r3, r3, [sp]
   badec:	f10d 0217 	add.w	r2, sp, #23
   badf0:	4621      	mov	r1, r4
   badf2:	4630      	mov	r0, r6
   badf4:	f000 fb9a 	bl	bb52c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   badf8:	4605      	mov	r5, r0
   badfa:	2800      	cmp	r0, #0
   badfc:	d0e3      	beq.n	badc6 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   badfe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bae02:	2b01      	cmp	r3, #1
   bae04:	d9df      	bls.n	badc6 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bae06:	f894 a000 	ldrb.w	sl, [r4]
   bae0a:	f1ba 0f02 	cmp.w	sl, #2
   bae0e:	d1da      	bne.n	badc6 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bae10:	4648      	mov	r0, r9
   bae12:	f7ff fde7 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
   bae16:	4653      	mov	r3, sl
   bae18:	4602      	mov	r2, r0
   bae1a:	4639      	mov	r1, r7
   bae1c:	4630      	mov	r0, r6
   bae1e:	f000 faf3 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bae22:	e7c4      	b.n	badae <_ZN6RHMesh5doArpEh+0x26>
   bae24:	2003e504 	.word	0x2003e504

000bae28 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bae28:	2a01      	cmp	r2, #1
{
   bae2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bae2e:	4607      	mov	r7, r0
   bae30:	460e      	mov	r6, r1
   bae32:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bae34:	d93b      	bls.n	baeae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bae36:	794d      	ldrb	r5, [r1, #5]
   bae38:	2d02      	cmp	r5, #2
   bae3a:	d130      	bne.n	bae9e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bae3c:	f100 0804 	add.w	r8, r0, #4
   bae40:	79c9      	ldrb	r1, [r1, #7]
   bae42:	9101      	str	r1, [sp, #4]
   bae44:	4640      	mov	r0, r8
   bae46:	f7ff fdcd 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bae4a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bae4c:	462b      	mov	r3, r5
   bae4e:	4602      	mov	r2, r0
   bae50:	9901      	ldr	r1, [sp, #4]
   bae52:	4638      	mov	r0, r7
   bae54:	f000 fad8 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bae58:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bae5a:	f106 0308 	add.w	r3, r6, #8
   bae5e:	2400      	movs	r4, #0
   bae60:	4622      	mov	r2, r4
   bae62:	4295      	cmp	r5, r2
   bae64:	f104 0401 	add.w	r4, r4, #1
   bae68:	b2e4      	uxtb	r4, r4
   bae6a:	d904      	bls.n	bae76 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bae6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bae70:	7a39      	ldrb	r1, [r7, #8]
   bae72:	4291      	cmp	r1, r2
   bae74:	d1f4      	bne.n	bae60 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bae76:	f104 0108 	add.w	r1, r4, #8
   bae7a:	440e      	add	r6, r1
	while (i < numRoutes)
   bae7c:	42a5      	cmp	r5, r4
   bae7e:	d916      	bls.n	baeae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bae80:	f816 1b01 	ldrb.w	r1, [r6], #1
   bae84:	9101      	str	r1, [sp, #4]
   bae86:	4640      	mov	r0, r8
   bae88:	f7ff fdac 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
   bae8c:	3401      	adds	r4, #1
   bae8e:	4602      	mov	r2, r0
   bae90:	9901      	ldr	r1, [sp, #4]
   bae92:	2302      	movs	r3, #2
   bae94:	4638      	mov	r0, r7
   bae96:	b2e4      	uxtb	r4, r4
   bae98:	f000 fab6 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bae9c:	e7ee      	b.n	bae7c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bae9e:	2d03      	cmp	r5, #3
   baea0:	d105      	bne.n	baeae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   baea2:	7989      	ldrb	r1, [r1, #6]
}
   baea4:	b002      	add	sp, #8
   baea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   baeaa:	f000 ba96 	b.w	bb3da <_ZN8RHRouter13deleteRouteToEh>
}
   baeae:	b002      	add	sp, #8
   baeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000baeb4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   baeb4:	b510      	push	{r4, lr}
   baeb6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   baeb8:	f000 fae6 	bl	bb488 <_ZN8RHRouterC1ER15RHGenericDriverh>
   baebc:	4b01      	ldr	r3, [pc, #4]	; (baec4 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   baebe:	6023      	str	r3, [r4, #0]
}
   baec0:	4620      	mov	r0, r4
   baec2:	bd10      	pop	{r4, pc}
   baec4:	000c4a3c 	.word	0x000c4a3c

000baec8 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   baec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   baecc:	2a79      	cmp	r2, #121	; 0x79
{
   baece:	f89d 9020 	ldrb.w	r9, [sp, #32]
   baed2:	4606      	mov	r6, r0
   baed4:	460f      	mov	r7, r1
   baed6:	4614      	mov	r4, r2
   baed8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   baeda:	d825      	bhi.n	baf28 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   baedc:	2bff      	cmp	r3, #255	; 0xff
   baede:	d114      	bne.n	baf0a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   baee0:	f8df 8048 	ldr.w	r8, [pc, #72]	; baf2c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   baee4:	4640      	mov	r0, r8
   baee6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   baee8:	4622      	mov	r2, r4
   baeea:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   baeec:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   baef0:	f005 ffce 	bl	c0e90 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   baef4:	1c62      	adds	r2, r4, #1
   baef6:	f8cd 9020 	str.w	r9, [sp, #32]
   baefa:	462b      	mov	r3, r5
   baefc:	4641      	mov	r1, r8
   baefe:	4630      	mov	r0, r6
   baf00:	b2d2      	uxtb	r2, r2
}
   baf02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   baf06:	f000 bb07 	b.w	bb518 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   baf0a:	4619      	mov	r1, r3
   baf0c:	f000 fa21 	bl	bb352 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   baf10:	2800      	cmp	r0, #0
   baf12:	d1e5      	bne.n	baee0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   baf14:	6833      	ldr	r3, [r6, #0]
   baf16:	4629      	mov	r1, r5
   baf18:	689b      	ldr	r3, [r3, #8]
   baf1a:	4630      	mov	r0, r6
   baf1c:	4798      	blx	r3
   baf1e:	2800      	cmp	r0, #0
   baf20:	d1de      	bne.n	baee0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   baf22:	2002      	movs	r0, #2
}
   baf24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   baf28:	2001      	movs	r0, #1
   baf2a:	e7fb      	b.n	baf24 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   baf2c:	2003e504 	.word	0x2003e504

000baf30 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   baf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baf34:	b089      	sub	sp, #36	; 0x24
   baf36:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   baf38:	237a      	movs	r3, #122	; 0x7a
   baf3a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   baf3e:	f10d 031f 	add.w	r3, sp, #31
   baf42:	9303      	str	r3, [sp, #12]
   baf44:	f10d 031e 	add.w	r3, sp, #30
   baf48:	9302      	str	r3, [sp, #8]
   baf4a:	4e5d      	ldr	r6, [pc, #372]	; (bb0c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   baf4c:	f10d 031d 	add.w	r3, sp, #29
   baf50:	9301      	str	r3, [sp, #4]
   baf52:	ab07      	add	r3, sp, #28
   baf54:	9300      	str	r3, [sp, #0]
{     
   baf56:	4689      	mov	r9, r1
   baf58:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   baf5a:	f10d 031b 	add.w	r3, sp, #27
   baf5e:	f10d 021a 	add.w	r2, sp, #26
   baf62:	4631      	mov	r1, r6
{     
   baf64:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   baf68:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   baf6a:	f000 fadf 	bl	bb52c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   baf6e:	4604      	mov	r4, r0
   baf70:	b920      	cbnz	r0, baf7c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   baf72:	2400      	movs	r4, #0
}
   baf74:	4620      	mov	r0, r4
   baf76:	b009      	add	sp, #36	; 0x24
   baf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   baf7c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   baf80:	b373      	cbz	r3, bafe0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   baf82:	7832      	ldrb	r2, [r6, #0]
   baf84:	bb62      	cbnz	r2, bafe0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   baf86:	f1b8 0f00 	cmp.w	r8, #0
   baf8a:	d003      	beq.n	baf94 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   baf8c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   baf90:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   baf94:	f1bb 0f00 	cmp.w	fp, #0
   baf98:	d003      	beq.n	bafa2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   baf9a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   baf9e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bafa2:	f1ba 0f00 	cmp.w	sl, #0
   bafa6:	d003      	beq.n	bafb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bafa8:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bafac:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bafb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bafb2:	b11a      	cbz	r2, bafbc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bafb4:	9914      	ldr	r1, [sp, #80]	; 0x50
   bafb6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bafba:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bafbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bafbe:	b11a      	cbz	r2, bafc8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bafc0:	9915      	ldr	r1, [sp, #84]	; 0x54
   bafc2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bafc6:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bafc8:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bafca:	493e      	ldr	r1, [pc, #248]	; (bb0c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bafcc:	3b01      	subs	r3, #1
   bafce:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bafd0:	429a      	cmp	r2, r3
		*len = msgLen;
   bafd2:	bf88      	it	hi
   bafd4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bafd6:	783a      	ldrb	r2, [r7, #0]
   bafd8:	4648      	mov	r0, r9
   bafda:	f005 ff59 	bl	c0e90 <memcpy>
	    return true;
   bafde:	e7c9      	b.n	baf74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bafe0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bafe4:	2aff      	cmp	r2, #255	; 0xff
   bafe6:	d1c4      	bne.n	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bafe8:	2b01      	cmp	r3, #1
   bafea:	d9c2      	bls.n	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bafec:	7832      	ldrb	r2, [r6, #0]
   bafee:	2a01      	cmp	r2, #1
   baff0:	d1bf      	bne.n	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   baff2:	7a2a      	ldrb	r2, [r5, #8]
   baff4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   baff8:	42a2      	cmp	r2, r4
   baffa:	d0ba      	beq.n	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   baffc:	1edf      	subs	r7, r3, #3
   baffe:	4932      	ldr	r1, [pc, #200]	; (bb0c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb000:	b2ff      	uxtb	r7, r7
   bb002:	2300      	movs	r3, #0
   bb004:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb008:	4547      	cmp	r7, r8
   bb00a:	d906      	bls.n	bb01a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb00c:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb010:	4282      	cmp	r2, r0
   bb012:	f103 0301 	add.w	r3, r3, #1
   bb016:	d1f5      	bne.n	bb004 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb018:	e7ab      	b.n	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb01a:	f105 0904 	add.w	r9, r5, #4
   bb01e:	4648      	mov	r0, r9
   bb020:	f7ff fce0 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
   bb024:	2302      	movs	r3, #2
   bb026:	4602      	mov	r2, r0
   bb028:	4621      	mov	r1, r4
   bb02a:	4628      	mov	r0, r5
   bb02c:	f000 f9ec 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb030:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb034:	b193      	cbz	r3, bb05c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb036:	4c22      	ldr	r4, [pc, #136]	; (bb0c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb038:	1ba3      	subs	r3, r4, r6
   bb03a:	b2db      	uxtb	r3, r3
   bb03c:	429f      	cmp	r7, r3
   bb03e:	d90c      	bls.n	bb05a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb040:	78e1      	ldrb	r1, [r4, #3]
   bb042:	9105      	str	r1, [sp, #20]
   bb044:	4648      	mov	r0, r9
   bb046:	f7ff fccd 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
   bb04a:	9905      	ldr	r1, [sp, #20]
   bb04c:	4602      	mov	r2, r0
   bb04e:	2302      	movs	r3, #2
   bb050:	4628      	mov	r0, r5
   bb052:	f000 f9d9 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb056:	3401      	adds	r4, #1
   bb058:	e7ee      	b.n	bb038 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb05a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb05c:	682b      	ldr	r3, [r5, #0]
   bb05e:	7872      	ldrb	r2, [r6, #1]
   bb060:	68db      	ldr	r3, [r3, #12]
   bb062:	491a      	ldr	r1, [pc, #104]	; (bb0cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb064:	4628      	mov	r0, r5
   bb066:	4798      	blx	r3
   bb068:	4604      	mov	r4, r0
   bb06a:	b160      	cbz	r0, bb086 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb06c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb06e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb070:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb072:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb076:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb07a:	4911      	ldr	r1, [pc, #68]	; (bb0c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb07c:	9400      	str	r4, [sp, #0]
   bb07e:	4628      	mov	r0, r5
   bb080:	f000 fa4a 	bl	bb518 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb084:	e776      	b.n	baf74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb086:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb08a:	4543      	cmp	r3, r8
   bb08c:	f67f af71 	bls.w	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb090:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb094:	2b00      	cmp	r3, #0
   bb096:	f43f af6c 	beq.w	baf72 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb09a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb09e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb0a0:	4907      	ldr	r1, [pc, #28]	; (bb0c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb0a2:	443e      	add	r6, r7
		tmpMessageLen++;
   bb0a4:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb0a6:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb0a8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb0ac:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb0ae:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb0b0:	9300      	str	r3, [sp, #0]
   bb0b2:	4628      	mov	r0, r5
   bb0b4:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb0b6:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb0ba:	f000 f9f7 	bl	bb4ac <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb0be:	e759      	b.n	baf74 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb0c0:	2003e504 	.word	0x2003e504
   bb0c4:	2003e505 	.word	0x2003e505
   bb0c8:	2003e507 	.word	0x2003e507
   bb0cc:	2003e506 	.word	0x2003e506

000bb0d0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb0d2:	b085      	sub	sp, #20
   bb0d4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb0d6:	3004      	adds	r0, #4
{
   bb0d8:	460e      	mov	r6, r1
   bb0da:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb0dc:	f7ff fc82 	bl	ba9e4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb0e0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb0e2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb0e4:	4631      	mov	r1, r6
   bb0e6:	4628      	mov	r0, r5
   bb0e8:	f000 f94a 	bl	bb380 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb0ec:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb0ee:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb0f0:	d001      	beq.n	bb0f6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb0f2:	2805      	cmp	r0, #5
   bb0f4:	d11b      	bne.n	bb12e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb0f6:	7831      	ldrb	r1, [r6, #0]
   bb0f8:	4628      	mov	r0, r5
   bb0fa:	f000 f96e 	bl	bb3da <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb0fe:	7872      	ldrb	r2, [r6, #1]
   bb100:	7a2b      	ldrb	r3, [r5, #8]
   bb102:	429a      	cmp	r2, r3
   bb104:	d013      	beq.n	bb12e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb106:	4c0b      	ldr	r4, [pc, #44]	; (bb134 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb108:	2303      	movs	r3, #3
   bb10a:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb10c:	7833      	ldrb	r3, [r6, #0]
   bb10e:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb110:	7871      	ldrb	r1, [r6, #1]
   bb112:	2302      	movs	r3, #2
   bb114:	463a      	mov	r2, r7
   bb116:	4628      	mov	r0, r5
   bb118:	f000 f976 	bl	bb408 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb11c:	2300      	movs	r3, #0
   bb11e:	9300      	str	r3, [sp, #0]
   bb120:	4621      	mov	r1, r4
   bb122:	7873      	ldrb	r3, [r6, #1]
   bb124:	2202      	movs	r2, #2
   bb126:	4628      	mov	r0, r5
   bb128:	f000 f9f6 	bl	bb518 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb12c:	4604      	mov	r4, r0
}
   bb12e:	4620      	mov	r0, r4
   bb130:	b005      	add	sp, #20
   bb132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb134:	2003e504 	.word	0x2003e504

000bb138 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb138:	b510      	push	{r4, lr}
   bb13a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb13c:	f7ff fc02 	bl	ba944 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb140:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb142:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb144:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb146:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb148:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb14a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb14c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb14e:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb152:	f104 0011 	add.w	r0, r4, #17
   bb156:	f005 fec3 	bl	c0ee0 <memset>
}
   bb15a:	4620      	mov	r0, r4
   bb15c:	bd10      	pop	{r4, pc}

000bb15e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb15e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb160:	4604      	mov	r4, r0
   bb162:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb164:	f7ff fc32 	bl	ba9cc <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb168:	4620      	mov	r0, r4
   bb16a:	2200      	movs	r2, #0
   bb16c:	2180      	movs	r1, #128	; 0x80
   bb16e:	f7ff fc31 	bl	ba9d4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb172:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb174:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb176:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb17a:	f10d 010f 	add.w	r1, sp, #15
   bb17e:	2201      	movs	r2, #1
   bb180:	4620      	mov	r0, r4
   bb182:	f7ff fbf4 	bl	ba96e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb186:	4620      	mov	r0, r4
   bb188:	f7ff fbe3 	bl	ba952 <_ZN10RHDatagram14waitPacketSentEv>
}
   bb18c:	b004      	add	sp, #16
   bb18e:	bd10      	pop	{r4, pc}

000bb190 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb194:	7b05      	ldrb	r5, [r0, #12]
   bb196:	3501      	adds	r5, #1
   bb198:	b2ed      	uxtb	r5, r5
{
   bb19a:	b087      	sub	sp, #28
   bb19c:	4604      	mov	r4, r0
   bb19e:	4689      	mov	r9, r1
   bb1a0:	4692      	mov	sl, r2
   bb1a2:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb1a4:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb1a6:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb1a8:	7c22      	ldrb	r2, [r4, #16]
   bb1aa:	463b      	mov	r3, r7
   bb1ac:	429a      	cmp	r2, r3
   bb1ae:	f107 0701 	add.w	r7, r7, #1
   bb1b2:	b2ff      	uxtb	r7, r7
   bb1b4:	d36b      	bcc.n	bb28e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb1b6:	4629      	mov	r1, r5
   bb1b8:	4620      	mov	r0, r4
   bb1ba:	f7ff fc07 	bl	ba9cc <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb1be:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb1c0:	bf0d      	iteet	eq
   bb1c2:	22c0      	moveq	r2, #192	; 0xc0
   bb1c4:	2280      	movne	r2, #128	; 0x80
   bb1c6:	2140      	movne	r1, #64	; 0x40
   bb1c8:	2100      	moveq	r1, #0
   bb1ca:	4620      	mov	r0, r4
   bb1cc:	f7ff fc02 	bl	ba9d4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb1d0:	4643      	mov	r3, r8
   bb1d2:	4652      	mov	r2, sl
   bb1d4:	4649      	mov	r1, r9
   bb1d6:	4620      	mov	r0, r4
   bb1d8:	f7ff fbc9 	bl	ba96e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb1dc:	4620      	mov	r0, r4
   bb1de:	f7ff fbb8 	bl	ba952 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb1e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb1e6:	d054      	beq.n	bb292 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb1e8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb1ea:	bf82      	ittt	hi
   bb1ec:	68a3      	ldrhi	r3, [r4, #8]
   bb1ee:	3301      	addhi	r3, #1
   bb1f0:	60a3      	strhi	r3, [r4, #8]
   bb1f2:	f001 fb17 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb1f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb1fa:	4683      	mov	fp, r0
   bb1fc:	2000      	movs	r0, #0
   bb1fe:	89e6      	ldrh	r6, [r4, #14]
   bb200:	f004 f91f 	bl	bf442 <_Z6randomii>
   bb204:	4370      	muls	r0, r6
   bb206:	bf48      	it	mi
   bb208:	30ff      	addmi	r0, #255	; 0xff
   bb20a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb20e:	fa1b f686 	uxtah	r6, fp, r6
   bb212:	f001 fb07 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
   bb216:	1a30      	subs	r0, r6, r0
   bb218:	2800      	cmp	r0, #0
   bb21a:	ddc5      	ble.n	bb1a8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb21c:	b281      	uxth	r1, r0
   bb21e:	2200      	movs	r2, #0
   bb220:	4620      	mov	r0, r4
   bb222:	f7ff fb9a 	bl	ba95a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb226:	2800      	cmp	r0, #0
   bb228:	d0f3      	beq.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb22a:	f10d 0317 	add.w	r3, sp, #23
   bb22e:	9302      	str	r3, [sp, #8]
   bb230:	f10d 0316 	add.w	r3, sp, #22
   bb234:	9301      	str	r3, [sp, #4]
   bb236:	2200      	movs	r2, #0
   bb238:	f10d 0315 	add.w	r3, sp, #21
   bb23c:	9300      	str	r3, [sp, #0]
   bb23e:	4611      	mov	r1, r2
   bb240:	ab05      	add	r3, sp, #20
   bb242:	4620      	mov	r0, r4
   bb244:	f7ff fbda 	bl	ba9fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb248:	2800      	cmp	r0, #0
   bb24a:	d0e2      	beq.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb24c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb250:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb254:	4542      	cmp	r2, r8
   bb256:	d10e      	bne.n	bb276 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb258:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb25c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb260:	458c      	cmp	ip, r1
   bb262:	d108      	bne.n	bb276 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb264:	2b00      	cmp	r3, #0
   bb266:	da08      	bge.n	bb27a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb268:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb26c:	42ab      	cmp	r3, r5
   bb26e:	d1d0      	bne.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb270:	b007      	add	sp, #28
   bb272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb276:	2b00      	cmp	r3, #0
   bb278:	dbcb      	blt.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb27a:	18a1      	adds	r1, r4, r2
   bb27c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb280:	7c49      	ldrb	r1, [r1, #17]
   bb282:	4299      	cmp	r1, r3
   bb284:	d1c5      	bne.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb286:	4620      	mov	r0, r4
   bb288:	f7ff ff69 	bl	bb15e <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb28c:	e7c1      	b.n	bb212 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb28e:	2000      	movs	r0, #0
   bb290:	e7ee      	b.n	bb270 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb292:	2001      	movs	r0, #1
   bb294:	e7ec      	b.n	bb270 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb296 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb29a:	b089      	sub	sp, #36	; 0x24
   bb29c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb2a0:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb2a4:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb2a6:	4604      	mov	r4, r0
   bb2a8:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb2aa:	f7ff fb4e 	bl	ba94a <_ZN10RHDatagram9availableEv>
   bb2ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb2b2:	b920      	cbnz	r0, bb2be <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb2b4:	2500      	movs	r5, #0
}
   bb2b6:	4628      	mov	r0, r5
   bb2b8:	b009      	add	sp, #36	; 0x24
   bb2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb2be:	f10d 031f 	add.w	r3, sp, #31
   bb2c2:	9302      	str	r3, [sp, #8]
   bb2c4:	f10d 031e 	add.w	r3, sp, #30
   bb2c8:	9301      	str	r3, [sp, #4]
   bb2ca:	f10d 031d 	add.w	r3, sp, #29
   bb2ce:	9300      	str	r3, [sp, #0]
   bb2d0:	4620      	mov	r0, r4
   bb2d2:	ab07      	add	r3, sp, #28
   bb2d4:	f7ff fb92 	bl	ba9fc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb2d8:	4605      	mov	r5, r0
   bb2da:	2800      	cmp	r0, #0
   bb2dc:	d0ea      	beq.n	bb2b4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb2de:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb2e2:	2b00      	cmp	r3, #0
   bb2e4:	dbe6      	blt.n	bb2b4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb2e6:	7922      	ldrb	r2, [r4, #4]
   bb2e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb2ec:	429a      	cmp	r2, r3
   bb2ee:	d106      	bne.n	bb2fe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb2f0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb2f4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb2f8:	4620      	mov	r0, r4
   bb2fa:	f7ff ff30 	bl	bb15e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb2fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb302:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb306:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb30a:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb30e:	440c      	add	r4, r1
   bb310:	d002      	beq.n	bb318 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb312:	7c60      	ldrb	r0, [r4, #17]
   bb314:	4298      	cmp	r0, r3
   bb316:	d0cd      	beq.n	bb2b4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb318:	b106      	cbz	r6, bb31c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb31a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb31c:	f1b9 0f00 	cmp.w	r9, #0
   bb320:	d003      	beq.n	bb32a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb322:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb326:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb32a:	f1b8 0f00 	cmp.w	r8, #0
   bb32e:	d001      	beq.n	bb334 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb330:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb334:	b107      	cbz	r7, bb338 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb336:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb338:	7463      	strb	r3, [r4, #17]
		return true;
   bb33a:	e7bc      	b.n	bb2b6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb33c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb33c:	4770      	bx	lr

000bb33e <_ZN8RHRouter4initEv>:
{
   bb33e:	b510      	push	{r4, lr}
   bb340:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb342:	3004      	adds	r0, #4
   bb344:	f7ff fb34 	bl	ba9b0 <_ZN10RHDatagram4initEv>
    if (ret)
   bb348:	b110      	cbz	r0, bb350 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb34a:	231e      	movs	r3, #30
   bb34c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb350:	bd10      	pop	{r4, pc}

000bb352 <_ZN8RHRouter10getRouteToEh>:
{
   bb352:	b510      	push	{r4, lr}
   bb354:	4602      	mov	r2, r0
   bb356:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb358:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb35c:	428c      	cmp	r4, r1
   bb35e:	d108      	bne.n	bb372 <_ZN8RHRouter10getRouteToEh+0x20>
   bb360:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb364:	b12c      	cbz	r4, bb372 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb36a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb36e:	4418      	add	r0, r3
}
   bb370:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb372:	3301      	adds	r3, #1
   bb374:	2b32      	cmp	r3, #50	; 0x32
   bb376:	f102 0203 	add.w	r2, r2, #3
   bb37a:	d1ed      	bne.n	bb358 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb37c:	2000      	movs	r0, #0
   bb37e:	e7f7      	b.n	bb370 <_ZN8RHRouter10getRouteToEh+0x1e>

000bb380 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb380:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb382:	780b      	ldrb	r3, [r1, #0]
   bb384:	2bff      	cmp	r3, #255	; 0xff
{
   bb386:	4605      	mov	r5, r0
   bb388:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb38a:	d006      	beq.n	bb39a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb38c:	4619      	mov	r1, r3
   bb38e:	9201      	str	r2, [sp, #4]
   bb390:	f7ff ffdf 	bl	bb352 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb394:	b158      	cbz	r0, bb3ae <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb396:	7843      	ldrb	r3, [r0, #1]
   bb398:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb39a:	4621      	mov	r1, r4
   bb39c:	1d28      	adds	r0, r5, #4
   bb39e:	f7ff fef7 	bl	bb190 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb3a2:	2800      	cmp	r0, #0
   bb3a4:	bf14      	ite	ne
   bb3a6:	2000      	movne	r0, #0
   bb3a8:	2005      	moveq	r0, #5
}
   bb3aa:	b003      	add	sp, #12
   bb3ac:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb3ae:	2002      	movs	r0, #2
   bb3b0:	e7fb      	b.n	bb3aa <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb3b2 <_ZN8RHRouter11deleteRouteEh>:
{
   bb3b2:	b510      	push	{r4, lr}
   bb3b4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb3b8:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb3ba:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb3be:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb3c2:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb3c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb3ca:	4421      	add	r1, r4
   bb3cc:	4420      	add	r0, r4
   bb3ce:	f005 fd5f 	bl	c0e90 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb3d2:	2300      	movs	r3, #0
   bb3d4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb3d8:	bd10      	pop	{r4, pc}

000bb3da <_ZN8RHRouter13deleteRouteToEh>:
{
   bb3da:	b538      	push	{r3, r4, r5, lr}
   bb3dc:	460a      	mov	r2, r1
   bb3de:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb3e0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb3e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb3e8:	b2d9      	uxtb	r1, r3
   bb3ea:	5d65      	ldrb	r5, [r4, r5]
   bb3ec:	4295      	cmp	r5, r2
   bb3ee:	d103      	bne.n	bb3f8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb3f0:	f7ff ffdf 	bl	bb3b2 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb3f4:	2001      	movs	r0, #1
}
   bb3f6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb3f8:	3301      	adds	r3, #1
   bb3fa:	2b32      	cmp	r3, #50	; 0x32
   bb3fc:	d1f2      	bne.n	bb3e4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb3fe:	2000      	movs	r0, #0
   bb400:	e7f9      	b.n	bb3f6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb402 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb402:	2100      	movs	r1, #0
   bb404:	f7ff bfd5 	b.w	bb3b2 <_ZN8RHRouter11deleteRouteEh>

000bb408 <_ZN8RHRouter10addRouteToEhhh>:
{
   bb408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb40a:	4616      	mov	r6, r2
   bb40c:	461f      	mov	r7, r3
   bb40e:	4604      	mov	r4, r0
   bb410:	460d      	mov	r5, r1
   bb412:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb414:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb418:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb41c:	5c11      	ldrb	r1, [r2, r0]
   bb41e:	42a9      	cmp	r1, r5
   bb420:	d105      	bne.n	bb42e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb422:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb424:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb428:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb42e:	3301      	adds	r3, #1
   bb430:	2b32      	cmp	r3, #50	; 0x32
   bb432:	d1f1      	bne.n	bb418 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb434:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb436:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb43a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb43e:	5c11      	ldrb	r1, [r2, r0]
   bb440:	b919      	cbnz	r1, bb44a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb442:	4420      	add	r0, r4
   bb444:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb448:	e7ec      	b.n	bb424 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb44a:	3301      	adds	r3, #1
   bb44c:	2b32      	cmp	r3, #50	; 0x32
   bb44e:	d1f4      	bne.n	bb43a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb450:	4620      	mov	r0, r4
   bb452:	f7ff ffd6 	bl	bb402 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb456:	4620      	mov	r0, r4
   bb458:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb45c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb460:	b92a      	cbnz	r2, bb46e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb462:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb466:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb46a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb46e:	3003      	adds	r0, #3
   bb470:	4298      	cmp	r0, r3
   bb472:	d1f3      	bne.n	bb45c <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb474:	e7da      	b.n	bb42c <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb476 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb476:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb47a:	2200      	movs	r2, #0
   bb47c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb480:	3003      	adds	r0, #3
   bb482:	4298      	cmp	r0, r3
   bb484:	d1fa      	bne.n	bb47c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb486:	4770      	bx	lr

000bb488 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb488:	b510      	push	{r4, lr}
   bb48a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb48c:	3004      	adds	r0, #4
   bb48e:	f7ff fe53 	bl	bb138 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb492:	4b05      	ldr	r3, [pc, #20]	; (bb4a8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb494:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb496:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb49a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb49c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb4a0:	f7ff ffe9 	bl	bb476 <_ZN8RHRouter17clearRoutingTableEv>
}
   bb4a4:	4620      	mov	r0, r4
   bb4a6:	bd10      	pop	{r4, pc}
   bb4a8:	000c4a54 	.word	0x000c4a54

000bb4ac <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb4ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb4b0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb4b2:	6840      	ldr	r0, [r0, #4]
{
   bb4b4:	9101      	str	r1, [sp, #4]
   bb4b6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb4b8:	6803      	ldr	r3, [r0, #0]
{
   bb4ba:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb4be:	699b      	ldr	r3, [r3, #24]
{
   bb4c0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb4c4:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb4c6:	4798      	blx	r3
   bb4c8:	f106 0805 	add.w	r8, r6, #5
   bb4cc:	4580      	cmp	r8, r0
   bb4ce:	d81c      	bhi.n	bb50a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb4d0:	4d10      	ldr	r5, [pc, #64]	; (bb514 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb4d2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb4d4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb4d8:	2300      	movs	r3, #0
   bb4da:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb4dc:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb4e0:	70eb      	strb	r3, [r5, #3]
   bb4e2:	1c5a      	adds	r2, r3, #1
   bb4e4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb4e8:	1d68      	adds	r0, r5, #5
   bb4ea:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb4ec:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb4ee:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb4f2:	f005 fccd 	bl	c0e90 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb4f6:	6823      	ldr	r3, [r4, #0]
   bb4f8:	685b      	ldr	r3, [r3, #4]
   bb4fa:	fa5f f288 	uxtb.w	r2, r8
   bb4fe:	4629      	mov	r1, r5
   bb500:	4620      	mov	r0, r4
}
   bb502:	b002      	add	sp, #8
   bb504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb508:	4718      	bx	r3
}
   bb50a:	2001      	movs	r0, #1
   bb50c:	b002      	add	sp, #8
   bb50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb512:	bf00      	nop
   bb514:	2003e57e 	.word	0x2003e57e

000bb518 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb518:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb51a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb51e:	9401      	str	r4, [sp, #4]
   bb520:	7a04      	ldrb	r4, [r0, #8]
   bb522:	9400      	str	r4, [sp, #0]
   bb524:	f7ff ffc2 	bl	bb4ac <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb528:	b002      	add	sp, #8
   bb52a:	bd10      	pop	{r4, pc}

000bb52c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb530:	b087      	sub	sp, #28
   bb532:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb534:	237f      	movs	r3, #127	; 0x7f
   bb536:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb53a:	f10d 0317 	add.w	r3, sp, #23
   bb53e:	9302      	str	r3, [sp, #8]
   bb540:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb544:	f10d 0316 	add.w	r3, sp, #22
   bb548:	9301      	str	r3, [sp, #4]
   bb54a:	f10d 0315 	add.w	r3, sp, #21
   bb54e:	9300      	str	r3, [sp, #0]
{  
   bb550:	4604      	mov	r4, r0
   bb552:	4688      	mov	r8, r1
   bb554:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb556:	ab05      	add	r3, sp, #20
   bb558:	f10d 0213 	add.w	r2, sp, #19
   bb55c:	4649      	mov	r1, r9
   bb55e:	3004      	adds	r0, #4
{  
   bb560:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb564:	f7ff fe97 	bl	bb296 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb568:	4605      	mov	r5, r0
   bb56a:	b908      	cbnz	r0, bb570 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb56c:	2500      	movs	r5, #0
   bb56e:	e038      	b.n	bb5e2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb570:	6823      	ldr	r3, [r4, #0]
   bb572:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb576:	681b      	ldr	r3, [r3, #0]
   bb578:	4649      	mov	r1, r9
   bb57a:	4620      	mov	r0, r4
   bb57c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb57e:	f899 3000 	ldrb.w	r3, [r9]
   bb582:	7a22      	ldrb	r2, [r4, #8]
   bb584:	429a      	cmp	r2, r3
   bb586:	d001      	beq.n	bb58c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb588:	2bff      	cmp	r3, #255	; 0xff
   bb58a:	d12e      	bne.n	bb5ea <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb58c:	b117      	cbz	r7, bb594 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb58e:	4b21      	ldr	r3, [pc, #132]	; (bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb590:	785b      	ldrb	r3, [r3, #1]
   bb592:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb594:	f1bb 0f00 	cmp.w	fp, #0
   bb598:	d003      	beq.n	bb5a2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb59a:	4b1e      	ldr	r3, [pc, #120]	; (bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb59c:	781b      	ldrb	r3, [r3, #0]
   bb59e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb5a2:	f1ba 0f00 	cmp.w	sl, #0
   bb5a6:	d003      	beq.n	bb5b0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb5a8:	4b1a      	ldr	r3, [pc, #104]	; (bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb5aa:	78db      	ldrb	r3, [r3, #3]
   bb5ac:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb5b2:	b11b      	cbz	r3, bb5bc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb5b4:	4b17      	ldr	r3, [pc, #92]	; (bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb5b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb5b8:	791b      	ldrb	r3, [r3, #4]
   bb5ba:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb5bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb5be:	b11b      	cbz	r3, bb5c8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb5c0:	4b14      	ldr	r3, [pc, #80]	; (bb614 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb5c4:	789b      	ldrb	r3, [r3, #2]
   bb5c6:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb5c8:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb5cc:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb5ce:	4912      	ldr	r1, [pc, #72]	; (bb618 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb5d0:	3b05      	subs	r3, #5
   bb5d2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb5d4:	429a      	cmp	r2, r3
		*len = msgLen;
   bb5d6:	bf88      	it	hi
   bb5d8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb5da:	7832      	ldrb	r2, [r6, #0]
   bb5dc:	4640      	mov	r0, r8
   bb5de:	f005 fc57 	bl	c0e90 <memcpy>
}
   bb5e2:	4628      	mov	r0, r5
   bb5e4:	b007      	add	sp, #28
   bb5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bb5ea:	f899 3002 	ldrb.w	r3, [r9, #2]
   bb5ee:	1c5a      	adds	r2, r3, #1
   bb5f0:	f889 2002 	strb.w	r2, [r9, #2]
   bb5f4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bb5f8:	429a      	cmp	r2, r3
   bb5fa:	d9b7      	bls.n	bb56c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bb5fc:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bb600:	2b00      	cmp	r3, #0
   bb602:	d0b3      	beq.n	bb56c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bb604:	6823      	ldr	r3, [r4, #0]
   bb606:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb60a:	685b      	ldr	r3, [r3, #4]
   bb60c:	4649      	mov	r1, r9
   bb60e:	4620      	mov	r0, r4
   bb610:	4798      	blx	r3
   bb612:	e7ab      	b.n	bb56c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bb614:	2003e57e 	.word	0x2003e57e
   bb618:	2003e583 	.word	0x2003e583

000bb61c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bb61c:	b510      	push	{r4, lr}
   bb61e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bb620:	6a00      	ldr	r0, [r0, #32]
   bb622:	6803      	ldr	r3, [r0, #0]
   bb624:	68db      	ldr	r3, [r3, #12]
   bb626:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bb628:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bb62c:	28ff      	cmp	r0, #255	; 0xff
   bb62e:	d002      	beq.n	bb636 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bb630:	2101      	movs	r1, #1
   bb632:	f004 fd8f 	bl	c0154 <pinMode>

    deselectSlave();
   bb636:	6823      	ldr	r3, [r4, #0]
   bb638:	4620      	mov	r0, r4
   bb63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb63c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bb63e:	2064      	movs	r0, #100	; 0x64
   bb640:	f001 fcfc 	bl	bd03c <delay>
#endif
    
    return true;
}
   bb644:	2001      	movs	r0, #1
   bb646:	bd10      	pop	{r4, pc}

000bb648 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bb648:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb64c:	2100      	movs	r1, #0
   bb64e:	f004 bd92 	b.w	c0176 <digitalWrite>

000bb652 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bb652:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb656:	2101      	movs	r1, #1
   bb658:	f004 bd8d 	b.w	c0176 <digitalWrite>

000bb65c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bb65c:	b570      	push	{r4, r5, r6, lr}
   bb65e:	4604      	mov	r4, r0
   bb660:	460d      	mov	r5, r1
   bb662:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bb664:	f7ff fa7e 	bl	bab64 <_ZN15RHGenericDriverC1Ev>
   bb668:	4b03      	ldr	r3, [pc, #12]	; (bb678 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bb66a:	6023      	str	r3, [r4, #0]
   bb66c:	6226      	str	r6, [r4, #32]
   bb66e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bb672:	4620      	mov	r0, r4
   bb674:	bd70      	pop	{r4, r5, r6, pc}
   bb676:	bf00      	nop
   bb678:	000c4a64 	.word	0x000c4a64

000bb67c <_ZN11RHSPIDriver7spiReadEh>:
{
   bb67c:	b538      	push	{r3, r4, r5, lr}
   bb67e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb680:	6a00      	ldr	r0, [r0, #32]
   bb682:	6803      	ldr	r3, [r0, #0]
   bb684:	6a1b      	ldr	r3, [r3, #32]
{
   bb686:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb688:	4798      	blx	r3
    selectSlave();
   bb68a:	6823      	ldr	r3, [r4, #0]
   bb68c:	4620      	mov	r0, r4
   bb68e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb690:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bb692:	6a20      	ldr	r0, [r4, #32]
   bb694:	6803      	ldr	r3, [r0, #0]
   bb696:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bb69a:	681b      	ldr	r3, [r3, #0]
   bb69c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb69e:	6a20      	ldr	r0, [r4, #32]
   bb6a0:	6803      	ldr	r3, [r0, #0]
   bb6a2:	2100      	movs	r1, #0
   bb6a4:	681b      	ldr	r3, [r3, #0]
   bb6a6:	4798      	blx	r3
    deselectSlave();
   bb6a8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb6aa:	4605      	mov	r5, r0
    deselectSlave();
   bb6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb6ae:	4620      	mov	r0, r4
   bb6b0:	4798      	blx	r3
    _spi.endTransaction();
   bb6b2:	6a20      	ldr	r0, [r4, #32]
   bb6b4:	6803      	ldr	r3, [r0, #0]
   bb6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb6b8:	4798      	blx	r3
}
   bb6ba:	4628      	mov	r0, r5
   bb6bc:	bd38      	pop	{r3, r4, r5, pc}

000bb6be <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bb6be:	b570      	push	{r4, r5, r6, lr}
   bb6c0:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb6c2:	6a00      	ldr	r0, [r0, #32]
   bb6c4:	6803      	ldr	r3, [r0, #0]
   bb6c6:	6a1b      	ldr	r3, [r3, #32]
{
   bb6c8:	4616      	mov	r6, r2
   bb6ca:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb6cc:	4798      	blx	r3
    selectSlave();
   bb6ce:	6823      	ldr	r3, [r4, #0]
   bb6d0:	4620      	mov	r0, r4
   bb6d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb6d4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bb6d6:	6a20      	ldr	r0, [r4, #32]
   bb6d8:	6803      	ldr	r3, [r0, #0]
   bb6da:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bb6de:	681b      	ldr	r3, [r3, #0]
   bb6e0:	4798      	blx	r3
   bb6e2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bb6e4:	6a20      	ldr	r0, [r4, #32]
   bb6e6:	6803      	ldr	r3, [r0, #0]
   bb6e8:	4631      	mov	r1, r6
   bb6ea:	681b      	ldr	r3, [r3, #0]
   bb6ec:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bb6ee:	2001      	movs	r0, #1
   bb6f0:	f001 f890 	bl	bc814 <HAL_Delay_Microseconds>
    deselectSlave();
   bb6f4:	6823      	ldr	r3, [r4, #0]
   bb6f6:	4620      	mov	r0, r4
   bb6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb6fa:	4798      	blx	r3
    _spi.endTransaction();
   bb6fc:	6a20      	ldr	r0, [r4, #32]
   bb6fe:	6803      	ldr	r3, [r0, #0]
   bb700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb702:	4798      	blx	r3
}
   bb704:	4628      	mov	r0, r5
   bb706:	bd70      	pop	{r4, r5, r6, pc}

000bb708 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bb708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb70a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb70c:	6a00      	ldr	r0, [r0, #32]
{
   bb70e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb710:	6803      	ldr	r3, [r0, #0]
   bb712:	6a1b      	ldr	r3, [r3, #32]
{
   bb714:	460f      	mov	r7, r1
   bb716:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb718:	4798      	blx	r3
    selectSlave();
   bb71a:	6823      	ldr	r3, [r4, #0]
   bb71c:	4620      	mov	r0, r4
   bb71e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb720:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bb722:	6a20      	ldr	r0, [r4, #32]
   bb724:	6803      	ldr	r3, [r0, #0]
   bb726:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bb72a:	681b      	ldr	r3, [r3, #0]
   bb72c:	4798      	blx	r3
   bb72e:	442e      	add	r6, r5
   bb730:	4607      	mov	r7, r0
    while (len--)
   bb732:	42b5      	cmp	r5, r6
   bb734:	d007      	beq.n	bb746 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bb736:	6a20      	ldr	r0, [r4, #32]
   bb738:	6803      	ldr	r3, [r0, #0]
   bb73a:	2100      	movs	r1, #0
   bb73c:	681b      	ldr	r3, [r3, #0]
   bb73e:	4798      	blx	r3
   bb740:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bb744:	e7f5      	b.n	bb732 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bb746:	6823      	ldr	r3, [r4, #0]
   bb748:	4620      	mov	r0, r4
   bb74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb74c:	4798      	blx	r3
    _spi.endTransaction();
   bb74e:	6a20      	ldr	r0, [r4, #32]
   bb750:	6803      	ldr	r3, [r0, #0]
   bb752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb754:	4798      	blx	r3
}
   bb756:	4638      	mov	r0, r7
   bb758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb75a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bb75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb75c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb75e:	6a00      	ldr	r0, [r0, #32]
{
   bb760:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb762:	6803      	ldr	r3, [r0, #0]
   bb764:	6a1b      	ldr	r3, [r3, #32]
{
   bb766:	460f      	mov	r7, r1
   bb768:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb76a:	4798      	blx	r3
    selectSlave();
   bb76c:	6823      	ldr	r3, [r4, #0]
   bb76e:	4620      	mov	r0, r4
   bb770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb772:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bb774:	6a20      	ldr	r0, [r4, #32]
   bb776:	6803      	ldr	r3, [r0, #0]
   bb778:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bb77c:	681b      	ldr	r3, [r3, #0]
   bb77e:	4798      	blx	r3
   bb780:	442e      	add	r6, r5
   bb782:	4607      	mov	r7, r0
    while (len--)
   bb784:	42b5      	cmp	r5, r6
   bb786:	d006      	beq.n	bb796 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bb788:	6a20      	ldr	r0, [r4, #32]
   bb78a:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb78e:	6803      	ldr	r3, [r0, #0]
   bb790:	681b      	ldr	r3, [r3, #0]
   bb792:	4798      	blx	r3
    while (len--)
   bb794:	e7f6      	b.n	bb784 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bb796:	6823      	ldr	r3, [r4, #0]
   bb798:	4620      	mov	r0, r4
   bb79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb79c:	4798      	blx	r3
    _spi.endTransaction();
   bb79e:	6a20      	ldr	r0, [r4, #32]
   bb7a0:	6803      	ldr	r3, [r0, #0]
   bb7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb7a4:	4798      	blx	r3
}
   bb7a6:	4638      	mov	r0, r7
   bb7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb7aa <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bb7aa:	6a00      	ldr	r0, [r0, #32]
   bb7ac:	6803      	ldr	r3, [r0, #0]
   bb7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bb7b0:	4718      	bx	r3

000bb7b2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bb7b2:	2001      	movs	r0, #1
   bb7b4:	4770      	bx	lr

000bb7b6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bb7b6:	20fb      	movs	r0, #251	; 0xfb
   bb7b8:	4770      	bx	lr

000bb7ba <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bb7ba:	4770      	bx	lr

000bb7bc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bb7bc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bb7be:	7903      	ldrb	r3, [r0, #4]
   bb7c0:	2b05      	cmp	r3, #5
{
   bb7c2:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bb7c4:	d010      	beq.n	bb7e8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bb7c6:	6803      	ldr	r3, [r0, #0]
   bb7c8:	2105      	movs	r1, #5
   bb7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb7ce:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bb7d0:	2207      	movs	r2, #7
   bb7d2:	2101      	movs	r1, #1
   bb7d4:	4620      	mov	r0, r4
   bb7d6:	f7ff ff72 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bb7da:	2280      	movs	r2, #128	; 0x80
   bb7dc:	2140      	movs	r1, #64	; 0x40
   bb7de:	4620      	mov	r0, r4
   bb7e0:	f7ff ff6d 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bb7e4:	2305      	movs	r3, #5
   bb7e6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bb7e8:	7923      	ldrb	r3, [r4, #4]
   bb7ea:	2b05      	cmp	r3, #5
   bb7ec:	d0fc      	beq.n	bb7e8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bb7ee:	7e20      	ldrb	r0, [r4, #24]
}
   bb7f0:	bd10      	pop	{r4, pc}

000bb7f2 <_ZN7RH_RF95D0Ev>:
   bb7f2:	b510      	push	{r4, lr}
   bb7f4:	f44f 7198 	mov.w	r1, #304	; 0x130
   bb7f8:	4604      	mov	r4, r0
   bb7fa:	f7f8 fc50 	bl	b409e <_ZdlPvj>
   bb7fe:	4620      	mov	r0, r4
   bb800:	bd10      	pop	{r4, pc}

000bb802 <_ZN7RH_RF955sleepEv>:
{
   bb802:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bb804:	7903      	ldrb	r3, [r0, #4]
   bb806:	2b01      	cmp	r3, #1
{
   bb808:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bb80a:	d00b      	beq.n	bb824 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bb80c:	6803      	ldr	r3, [r0, #0]
   bb80e:	2101      	movs	r1, #1
   bb810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb814:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bb816:	2200      	movs	r2, #0
   bb818:	2101      	movs	r1, #1
   bb81a:	4620      	mov	r0, r4
   bb81c:	f7ff ff4f 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bb820:	2301      	movs	r3, #1
   bb822:	7123      	strb	r3, [r4, #4]
}
   bb824:	2001      	movs	r0, #1
   bb826:	bd10      	pop	{r4, pc}

000bb828 <_ZN7RH_RF954recvEPhS0_>:
{
   bb828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bb82a:	6803      	ldr	r3, [r0, #0]
   bb82c:	68db      	ldr	r3, [r3, #12]
{
   bb82e:	4604      	mov	r4, r0
   bb830:	460f      	mov	r7, r1
   bb832:	4615      	mov	r5, r2
    if (!available())
   bb834:	4798      	blx	r3
   bb836:	4606      	mov	r6, r0
   bb838:	b1b0      	cbz	r0, bb868 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bb83a:	b187      	cbz	r7, bb85e <_ZN7RH_RF954recvEPhS0_+0x36>
   bb83c:	b17d      	cbz	r5, bb85e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bb83e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bb842:	782a      	ldrb	r2, [r5, #0]
   bb844:	3b03      	subs	r3, #3
   bb846:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bb848:	bfde      	ittt	le
   bb84a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bb84e:	3b04      	suble	r3, #4
   bb850:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bb852:	782a      	ldrb	r2, [r5, #0]
   bb854:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bb858:	4638      	mov	r0, r7
   bb85a:	f005 fb19 	bl	c0e90 <memcpy>
    _rxBufValid = false;
   bb85e:	2300      	movs	r3, #0
   bb860:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bb864:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bb868:	4630      	mov	r0, r6
   bb86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb86c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bb86c:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bb86e:	b538      	push	{r3, r4, r5, lr}
   bb870:	4605      	mov	r5, r0
   bb872:	460c      	mov	r4, r1
	if (power > 20)
   bb874:	dc14      	bgt.n	bb8a0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bb876:	2901      	cmp	r1, #1
   bb878:	dd14      	ble.n	bb8a4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bb87a:	2911      	cmp	r1, #17
   bb87c:	dd13      	ble.n	bb8a6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bb87e:	2207      	movs	r2, #7
   bb880:	214d      	movs	r1, #77	; 0x4d
   bb882:	4628      	mov	r0, r5
   bb884:	f7ff ff1b 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bb888:	3c03      	subs	r4, #3
   bb88a:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb88c:	1ea2      	subs	r2, r4, #2
   bb88e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bb892:	4628      	mov	r0, r5
   bb894:	b2d2      	uxtb	r2, r2
}
   bb896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bb89a:	2109      	movs	r1, #9
   bb89c:	f7ff bf0f 	b.w	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bb8a0:	2414      	movs	r4, #20
   bb8a2:	e7ec      	b.n	bb87e <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bb8a4:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bb8a6:	2204      	movs	r2, #4
   bb8a8:	214d      	movs	r1, #77	; 0x4d
   bb8aa:	4628      	mov	r0, r5
   bb8ac:	f7ff ff07 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
   bb8b0:	e7ec      	b.n	bb88c <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bb8b4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bb8b4:	b538      	push	{r3, r4, r5, lr}
   bb8b6:	4604      	mov	r4, r0
   bb8b8:	4615      	mov	r5, r2
    _rxBufValid(0)
   bb8ba:	461a      	mov	r2, r3
   bb8bc:	f7ff fece 	bl	bb65c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bb8c0:	4b09      	ldr	r3, [pc, #36]	; (bb8e8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bb8c2:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bb8c4:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bb8c6:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bb8c8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bb8cc:	2201      	movs	r2, #1
    _rxBufValid(0)
   bb8ce:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb8d2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bb8d6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bb8da:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bb8de:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bb8e2:	4620      	mov	r0, r4
   bb8e4:	bd38      	pop	{r3, r4, r5, pc}
   bb8e6:	bf00      	nop
   bb8e8:	000c4afc 	.word	0x000c4afc

000bb8ec <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bb8ec:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bb8f0:	2b03      	cmp	r3, #3
   bb8f2:	d91b      	bls.n	bb92c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bb8f4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bb8f8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bb8fa:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bb8fe:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bb900:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bb904:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bb906:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bb90a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bb90c:	7983      	ldrb	r3, [r0, #6]
   bb90e:	b933      	cbnz	r3, bb91e <_ZN7RH_RF9513validateRxBufEv+0x32>
   bb910:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bb912:	7942      	ldrb	r2, [r0, #5]
   bb914:	429a      	cmp	r2, r3
   bb916:	d002      	beq.n	bb91e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bb918:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bb91a:	2bff      	cmp	r3, #255	; 0xff
   bb91c:	d106      	bne.n	bb92c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bb91e:	8a83      	ldrh	r3, [r0, #20]
   bb920:	3301      	adds	r3, #1
   bb922:	b29b      	uxth	r3, r3
   bb924:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bb926:	2301      	movs	r3, #1
   bb928:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bb92c:	4770      	bx	lr
	...

000bb930 <_ZN7RH_RF9512setFrequencyEf>:
{
   bb930:	b538      	push	{r3, r4, r5, lr}
   bb932:	4604      	mov	r4, r0
   bb934:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb938:	ee10 0a10 	vmov	r0, s0
{
   bb93c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb940:	f004 fe96 	bl	c0670 <__aeabi_f2d>
   bb944:	a317      	add	r3, pc, #92	; (adr r3, bb9a4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bb946:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb94a:	f004 fee9 	bl	c0720 <__aeabi_dmul>
   bb94e:	a317      	add	r3, pc, #92	; (adr r3, bb9ac <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bb950:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb954:	f005 f80e 	bl	c0974 <__aeabi_ddiv>
   bb958:	f005 f9ba 	bl	c0cd0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bb95c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bb95e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bb960:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bb964:	4620      	mov	r0, r4
   bb966:	f7ff feaa 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bb96a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bb96e:	2107      	movs	r1, #7
   bb970:	4620      	mov	r0, r4
   bb972:	f7ff fea4 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bb976:	b2ea      	uxtb	r2, r5
   bb978:	2108      	movs	r1, #8
   bb97a:	4620      	mov	r0, r4
   bb97c:	f7ff fe9f 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bb980:	eddf 7a07 	vldr	s15, [pc, #28]	; bb9a0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bb984:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bb988:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bb98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb990:	bfac      	ite	ge
   bb992:	2301      	movge	r3, #1
   bb994:	2300      	movlt	r3, #0
}
   bb996:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bb998:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bb99c:	bd38      	pop	{r3, r4, r5, pc}
   bb99e:	bf00      	nop
   bb9a0:	4442c000 	.word	0x4442c000
   bb9a4:	00000000 	.word	0x00000000
   bb9a8:	412e8480 	.word	0x412e8480
   bb9ac:	00000000 	.word	0x00000000
   bb9b0:	404e8480 	.word	0x404e8480

000bb9b4 <_ZN7RH_RF9511setModeIdleEv>:
{
   bb9b4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bb9b6:	7903      	ldrb	r3, [r0, #4]
   bb9b8:	2b02      	cmp	r3, #2
{
   bb9ba:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bb9bc:	d00b      	beq.n	bb9d6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bb9be:	6803      	ldr	r3, [r0, #0]
   bb9c0:	2102      	movs	r1, #2
   bb9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bb9c6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bb9c8:	2201      	movs	r2, #1
   bb9ca:	4611      	mov	r1, r2
   bb9cc:	4620      	mov	r0, r4
   bb9ce:	f7ff fe76 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bb9d2:	2302      	movs	r3, #2
   bb9d4:	7123      	strb	r3, [r4, #4]
}
   bb9d6:	bd10      	pop	{r4, pc}

000bb9d8 <_ZN7RH_RF9515handleInterruptEv>:
{
   bb9d8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb9da:	2112      	movs	r1, #18
{
   bb9dc:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb9de:	f7ff fe4d 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb9e2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bb9e4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb9e6:	4620      	mov	r0, r4
   bb9e8:	f7ff fe48 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb9ec:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bb9ee:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bb9f0:	2112      	movs	r1, #18
   bb9f2:	4620      	mov	r0, r4
   bb9f4:	f7ff fe63 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bb9f8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bb9fa:	2b04      	cmp	r3, #4
   bb9fc:	d107      	bne.n	bba0e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bb9fe:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bba02:	d117      	bne.n	bba34 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bba04:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bba08:	b10b      	cbz	r3, bba0e <_ZN7RH_RF9515handleInterruptEv+0x36>
   bba0a:	0670      	lsls	r0, r6, #25
   bba0c:	d512      	bpl.n	bba34 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bba0e:	7923      	ldrb	r3, [r4, #4]
   bba10:	2b04      	cmp	r3, #4
   bba12:	d101      	bne.n	bba18 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bba14:	0669      	lsls	r1, r5, #25
   bba16:	d422      	bmi.n	bba5e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bba18:	7923      	ldrb	r3, [r4, #4]
   bba1a:	2b03      	cmp	r3, #3
   bba1c:	d101      	bne.n	bba22 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bba1e:	072a      	lsls	r2, r5, #28
   bba20:	d468      	bmi.n	bbaf4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bba22:	7923      	ldrb	r3, [r4, #4]
   bba24:	2b05      	cmp	r3, #5
   bba26:	d10e      	bne.n	bba46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bba28:	076b      	lsls	r3, r5, #29
   bba2a:	d50c      	bpl.n	bba46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bba2c:	f005 0501 	and.w	r5, r5, #1
   bba30:	7625      	strb	r5, [r4, #24]
   bba32:	e063      	b.n	bbafc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bba34:	8a63      	ldrh	r3, [r4, #18]
   bba36:	3301      	adds	r3, #1
   bba38:	b29b      	uxth	r3, r3
   bba3a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bba3c:	2300      	movs	r3, #0
   bba3e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bba42:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bba46:	22ff      	movs	r2, #255	; 0xff
   bba48:	2112      	movs	r1, #18
   bba4a:	4620      	mov	r0, r4
   bba4c:	f7ff fe37 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bba50:	4620      	mov	r0, r4
   bba52:	22ff      	movs	r2, #255	; 0xff
}
   bba54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bba58:	2112      	movs	r1, #18
   bba5a:	f7ff be30 	b.w	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bba5e:	2113      	movs	r1, #19
   bba60:	4620      	mov	r0, r4
   bba62:	f7ff fe0b 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bba66:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bba68:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bba6a:	4620      	mov	r0, r4
   bba6c:	f7ff fe06 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
   bba70:	210d      	movs	r1, #13
   bba72:	4602      	mov	r2, r0
   bba74:	4620      	mov	r0, r4
   bba76:	f7ff fe22 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bba7a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bba7e:	462b      	mov	r3, r5
   bba80:	2100      	movs	r1, #0
   bba82:	4620      	mov	r0, r4
   bba84:	f7ff fe40 	bl	bb708 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bba88:	2119      	movs	r1, #25
	_bufLen = len;
   bba8a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bba8e:	4620      	mov	r0, r4
   bba90:	f7ff fdf4 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
   bba94:	b240      	sxtb	r0, r0
   bba96:	2800      	cmp	r0, #0
   bba98:	bfb8      	it	lt
   bba9a:	3003      	addlt	r0, #3
   bba9c:	1080      	asrs	r0, r0, #2
   bba9e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbaa2:	211a      	movs	r1, #26
   bbaa4:	4620      	mov	r0, r4
   bbaa6:	f7ff fde9 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbaaa:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbaae:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbab0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbab2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbab4:	bfa9      	itett	ge
   bbab6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbab8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbaba:	b21b      	sxthge	r3, r3
   bbabc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbabe:	bfb2      	itee	lt
   bbac0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbac2:	220f      	movge	r2, #15
   bbac4:	fb93 f3f2 	sdivge	r3, r3, r2
   bbac8:	b21b      	sxth	r3, r3
   bbaca:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbacc:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbad0:	b16b      	cbz	r3, bbaee <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbad2:	8a23      	ldrh	r3, [r4, #16]
   bbad4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbad6:	b21b      	sxth	r3, r3
   bbad8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbada:	4620      	mov	r0, r4
   bbadc:	f7ff ff06 	bl	bb8ec <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbae0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbae4:	2b00      	cmp	r3, #0
   bbae6:	d0ae      	beq.n	bba46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbae8:	f7ff ff64 	bl	bb9b4 <_ZN7RH_RF9511setModeIdleEv>
   bbaec:	e7ab      	b.n	bba46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbaee:	8a23      	ldrh	r3, [r4, #16]
   bbaf0:	3ba4      	subs	r3, #164	; 0xa4
   bbaf2:	e7f0      	b.n	bbad6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbaf4:	8ae3      	ldrh	r3, [r4, #22]
   bbaf6:	3301      	adds	r3, #1
   bbaf8:	b29b      	uxth	r3, r3
   bbafa:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbafc:	4620      	mov	r0, r4
   bbafe:	e7f3      	b.n	bbae8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbb00 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbb00:	4b02      	ldr	r3, [pc, #8]	; (bbb0c <_ZN7RH_RF954isr0Ev+0xc>)
   bbb02:	6818      	ldr	r0, [r3, #0]
   bbb04:	b108      	cbz	r0, bbb0a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbb06:	f7ff bf67 	b.w	bb9d8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbb0a:	4770      	bx	lr
   bbb0c:	2003e600 	.word	0x2003e600

000bbb10 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbb10:	4b02      	ldr	r3, [pc, #8]	; (bbb1c <_ZN7RH_RF954isr1Ev+0xc>)
   bbb12:	6858      	ldr	r0, [r3, #4]
   bbb14:	b108      	cbz	r0, bbb1a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbb16:	f7ff bf5f 	b.w	bb9d8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbb1a:	4770      	bx	lr
   bbb1c:	2003e600 	.word	0x2003e600

000bbb20 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbb20:	4b02      	ldr	r3, [pc, #8]	; (bbb2c <_ZN7RH_RF954isr2Ev+0xc>)
   bbb22:	6898      	ldr	r0, [r3, #8]
   bbb24:	b108      	cbz	r0, bbb2a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbb26:	f7ff bf57 	b.w	bb9d8 <_ZN7RH_RF9515handleInterruptEv>
}
   bbb2a:	4770      	bx	lr
   bbb2c:	2003e600 	.word	0x2003e600

000bbb30 <_ZN7RH_RF959setModeRxEv>:
{
   bbb30:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbb32:	7903      	ldrb	r3, [r0, #4]
   bbb34:	2b04      	cmp	r3, #4
{
   bbb36:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbb38:	d010      	beq.n	bbb5c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbb3a:	6803      	ldr	r3, [r0, #0]
   bbb3c:	2104      	movs	r1, #4
   bbb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbb42:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbb44:	2205      	movs	r2, #5
   bbb46:	2101      	movs	r1, #1
   bbb48:	4620      	mov	r0, r4
   bbb4a:	f7ff fdb8 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbb4e:	2200      	movs	r2, #0
   bbb50:	2140      	movs	r1, #64	; 0x40
   bbb52:	4620      	mov	r0, r4
   bbb54:	f7ff fdb3 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbb58:	2304      	movs	r3, #4
   bbb5a:	7123      	strb	r3, [r4, #4]
}
   bbb5c:	bd10      	pop	{r4, pc}

000bbb5e <_ZN7RH_RF959availableEv>:
{
   bbb5e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbb60:	7903      	ldrb	r3, [r0, #4]
   bbb62:	2b03      	cmp	r3, #3
{
   bbb64:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbb66:	d005      	beq.n	bbb74 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbb68:	f7ff ffe2 	bl	bbb30 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbb6c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbb70:	b2c0      	uxtb	r0, r0
}
   bbb72:	bd10      	pop	{r4, pc}
	return false;
   bbb74:	2000      	movs	r0, #0
   bbb76:	e7fc      	b.n	bbb72 <_ZN7RH_RF959availableEv+0x14>

000bbb78 <_ZN7RH_RF959setModeTxEv>:
{
   bbb78:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbb7a:	7903      	ldrb	r3, [r0, #4]
   bbb7c:	2b03      	cmp	r3, #3
{
   bbb7e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbb80:	d010      	beq.n	bbba4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbb82:	6803      	ldr	r3, [r0, #0]
   bbb84:	2103      	movs	r1, #3
   bbb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbb8a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbb8c:	2203      	movs	r2, #3
   bbb8e:	2101      	movs	r1, #1
   bbb90:	4620      	mov	r0, r4
   bbb92:	f7ff fd94 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbb96:	2240      	movs	r2, #64	; 0x40
   bbb98:	4611      	mov	r1, r2
   bbb9a:	4620      	mov	r0, r4
   bbb9c:	f7ff fd8f 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbba0:	2303      	movs	r3, #3
   bbba2:	7123      	strb	r3, [r4, #4]
}
   bbba4:	bd10      	pop	{r4, pc}

000bbba6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbba6:	2afb      	cmp	r2, #251	; 0xfb
{
   bbba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbbaa:	4604      	mov	r4, r0
   bbbac:	460f      	mov	r7, r1
   bbbae:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbbb0:	d902      	bls.n	bbbb8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbbb2:	2600      	movs	r6, #0
}
   bbbb4:	4630      	mov	r0, r6
   bbbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbbb8:	6803      	ldr	r3, [r0, #0]
   bbbba:	6a1b      	ldr	r3, [r3, #32]
   bbbbc:	4798      	blx	r3
    setModeIdle();
   bbbbe:	4620      	mov	r0, r4
   bbbc0:	f7ff fef8 	bl	bb9b4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbbc4:	6823      	ldr	r3, [r4, #0]
   bbbc6:	4620      	mov	r0, r4
   bbbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbbca:	4798      	blx	r3
   bbbcc:	4606      	mov	r6, r0
   bbbce:	2800      	cmp	r0, #0
   bbbd0:	d0ef      	beq.n	bbbb2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbbd2:	2200      	movs	r2, #0
   bbbd4:	210d      	movs	r1, #13
   bbbd6:	4620      	mov	r0, r4
   bbbd8:	f7ff fd71 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbbdc:	7ae2      	ldrb	r2, [r4, #11]
   bbbde:	2100      	movs	r1, #0
   bbbe0:	4620      	mov	r0, r4
   bbbe2:	f7ff fd6c 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bbbe6:	7b22      	ldrb	r2, [r4, #12]
   bbbe8:	2100      	movs	r1, #0
   bbbea:	4620      	mov	r0, r4
   bbbec:	f7ff fd67 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bbbf0:	7b62      	ldrb	r2, [r4, #13]
   bbbf2:	2100      	movs	r1, #0
   bbbf4:	4620      	mov	r0, r4
   bbbf6:	f7ff fd62 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bbbfa:	7ba2      	ldrb	r2, [r4, #14]
   bbbfc:	2100      	movs	r1, #0
   bbbfe:	4620      	mov	r0, r4
   bbc00:	f7ff fd5d 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bbc04:	462b      	mov	r3, r5
   bbc06:	463a      	mov	r2, r7
   bbc08:	2100      	movs	r1, #0
   bbc0a:	4620      	mov	r0, r4
   bbc0c:	f7ff fda5 	bl	bb75a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bbc10:	1d2a      	adds	r2, r5, #4
   bbc12:	b2d2      	uxtb	r2, r2
   bbc14:	2122      	movs	r1, #34	; 0x22
   bbc16:	4620      	mov	r0, r4
   bbc18:	f7ff fd51 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bbc1c:	4620      	mov	r0, r4
   bbc1e:	f7ff ffab 	bl	bbb78 <_ZN7RH_RF959setModeTxEv>
    return true;
   bbc22:	e7c7      	b.n	bbbb4 <_ZN7RH_RF954sendEPKhh+0xe>

000bbc24 <_ZN7RH_RF9510setTxPowerEab>:
{
   bbc24:	b510      	push	{r4, lr}
   bbc26:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bbc28:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bbc2c:	b172      	cbz	r2, bbc4c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bbc2e:	f381 0204 	usat	r2, #4, r1
   bbc32:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bbc36:	b2d2      	uxtb	r2, r2
   bbc38:	2109      	movs	r1, #9
   bbc3a:	f7ff fd40 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbc3e:	4620      	mov	r0, r4
   bbc40:	2204      	movs	r2, #4
}
   bbc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbc46:	214d      	movs	r1, #77	; 0x4d
   bbc48:	f7ff bd39 	b.w	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
}
   bbc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbc50:	f7ff be0c 	b.w	bb86c <_ZN7RH_RF9510setTxPowerEab.part.0>

000bbc54 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bbc54:	b538      	push	{r3, r4, r5, lr}
   bbc56:	460c      	mov	r4, r1
   bbc58:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bbc5a:	780a      	ldrb	r2, [r1, #0]
   bbc5c:	211d      	movs	r1, #29
   bbc5e:	f7ff fd2e 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bbc62:	7862      	ldrb	r2, [r4, #1]
   bbc64:	211e      	movs	r1, #30
   bbc66:	4628      	mov	r0, r5
   bbc68:	f7ff fd29 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbc6c:	78a2      	ldrb	r2, [r4, #2]
   bbc6e:	4628      	mov	r0, r5
   bbc70:	2126      	movs	r1, #38	; 0x26
}
   bbc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbc76:	f7ff bd22 	b.w	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bbc7c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbc7c:	2905      	cmp	r1, #5
{
   bbc7e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbc80:	d80f      	bhi.n	bbca2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbc82:	4b09      	ldr	r3, [pc, #36]	; (bbca8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bbc84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bbc88:	185c      	adds	r4, r3, r1
   bbc8a:	5a5a      	ldrh	r2, [r3, r1]
   bbc8c:	78a3      	ldrb	r3, [r4, #2]
   bbc8e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bbc92:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbc94:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bbc98:	f7ff ffdc 	bl	bbc54 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bbc9c:	2001      	movs	r0, #1
}
   bbc9e:	b002      	add	sp, #8
   bbca0:	bd10      	pop	{r4, pc}
        return false;
   bbca2:	2000      	movs	r0, #0
   bbca4:	e7fb      	b.n	bbc9e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bbca6:	bf00      	nop
   bbca8:	000c4ae4 	.word	0x000c4ae4

000bbcac <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bbcac:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbcae:	0a0a      	lsrs	r2, r1, #8
{
   bbcb0:	4605      	mov	r5, r0
   bbcb2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbcb4:	2120      	movs	r1, #32
   bbcb6:	f7ff fd02 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbcba:	b2e2      	uxtb	r2, r4
   bbcbc:	4628      	mov	r0, r5
   bbcbe:	2121      	movs	r1, #33	; 0x21
}
   bbcc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbcc4:	f7ff bcfb 	b.w	bb6be <_ZN11RHSPIDriver8spiWriteEhh>

000bbcc8 <_ZN7RH_RF954initEv>:
{
   bbcc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbcca:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bbccc:	f7ff fca6 	bl	bb61c <_ZN11RHSPIDriver4initEv>
   bbcd0:	4606      	mov	r6, r0
   bbcd2:	b918      	cbnz	r0, bbcdc <_ZN7RH_RF954initEv+0x14>
	return false;
   bbcd4:	2600      	movs	r6, #0
}
   bbcd6:	4630      	mov	r0, r6
   bbcd8:	b002      	add	sp, #8
   bbcda:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bbcdc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bbce0:	2dff      	cmp	r5, #255	; 0xff
   bbce2:	d054      	beq.n	bbd8e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bbce4:	4629      	mov	r1, r5
   bbce6:	4620      	mov	r0, r4
   bbce8:	f7ff fd5f 	bl	bb7aa <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bbcec:	2280      	movs	r2, #128	; 0x80
   bbcee:	2101      	movs	r1, #1
   bbcf0:	4620      	mov	r0, r4
   bbcf2:	f7ff fce4 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bbcf6:	200a      	movs	r0, #10
   bbcf8:	f001 f9a0 	bl	bd03c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bbcfc:	2101      	movs	r1, #1
   bbcfe:	4620      	mov	r0, r4
   bbd00:	f7ff fcbc 	bl	bb67c <_ZN11RHSPIDriver7spiReadEh>
   bbd04:	2880      	cmp	r0, #128	; 0x80
   bbd06:	d1e5      	bne.n	bbcd4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bbd08:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bbd0c:	28ff      	cmp	r0, #255	; 0xff
   bbd0e:	d01c      	beq.n	bbd4a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bbd10:	2100      	movs	r1, #0
   bbd12:	f004 fa1f 	bl	c0154 <pinMode>
	if (_myInterruptIndex == 0xff)
   bbd16:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bbd1a:	2bff      	cmp	r3, #255	; 0xff
   bbd1c:	d107      	bne.n	bbd2e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bbd1e:	4a26      	ldr	r2, [pc, #152]	; (bbdb8 <_ZN7RH_RF954initEv+0xf0>)
   bbd20:	7813      	ldrb	r3, [r2, #0]
   bbd22:	2b03      	cmp	r3, #3
   bbd24:	d8d6      	bhi.n	bbcd4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bbd26:	1c59      	adds	r1, r3, #1
   bbd28:	7011      	strb	r1, [r2, #0]
   bbd2a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bbd2e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bbd32:	4b22      	ldr	r3, [pc, #136]	; (bbdbc <_ZN7RH_RF954initEv+0xf4>)
   bbd34:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bbd38:	bb62      	cbnz	r2, bbd94 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bbd3a:	4921      	ldr	r1, [pc, #132]	; (bbdc0 <_ZN7RH_RF954initEv+0xf8>)
   bbd3c:	9200      	str	r2, [sp, #0]
   bbd3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbd42:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbd44:	b2a8      	uxth	r0, r5
   bbd46:	f001 fef9 	bl	bdb3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bbd4a:	2200      	movs	r2, #0
   bbd4c:	210e      	movs	r1, #14
   bbd4e:	4620      	mov	r0, r4
   bbd50:	f7ff fcb5 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bbd54:	2200      	movs	r2, #0
   bbd56:	210f      	movs	r1, #15
   bbd58:	4620      	mov	r0, r4
   bbd5a:	f7ff fcb0 	bl	bb6be <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bbd5e:	4620      	mov	r0, r4
   bbd60:	f7ff fe28 	bl	bb9b4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bbd64:	2100      	movs	r1, #0
   bbd66:	4620      	mov	r0, r4
   bbd68:	f7ff ff88 	bl	bbc7c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bbd6c:	2108      	movs	r1, #8
   bbd6e:	4620      	mov	r0, r4
   bbd70:	f7ff ff9c 	bl	bbcac <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bbd74:	ed9f 0a13 	vldr	s0, [pc, #76]	; bbdc4 <_ZN7RH_RF954initEv+0xfc>
   bbd78:	4620      	mov	r0, r4
   bbd7a:	f7ff fdd9 	bl	bb930 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bbd7e:	2300      	movs	r3, #0
   bbd80:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bbd84:	210d      	movs	r1, #13
   bbd86:	4620      	mov	r0, r4
   bbd88:	f7ff fd70 	bl	bb86c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bbd8c:	e7a3      	b.n	bbcd6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bbd8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bbd92:	e7ab      	b.n	bbcec <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bbd94:	2a01      	cmp	r2, #1
   bbd96:	f04f 0300 	mov.w	r3, #0
   bbd9a:	d104      	bne.n	bbda6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bbd9c:	9300      	str	r3, [sp, #0]
   bbd9e:	490a      	ldr	r1, [pc, #40]	; (bbdc8 <_ZN7RH_RF954initEv+0x100>)
   bbda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbda4:	e7ce      	b.n	bbd44 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bbda6:	2a02      	cmp	r2, #2
   bbda8:	d194      	bne.n	bbcd4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbdaa:	9300      	str	r3, [sp, #0]
   bbdac:	4907      	ldr	r1, [pc, #28]	; (bbdcc <_ZN7RH_RF954initEv+0x104>)
   bbdae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbdb2:	2201      	movs	r2, #1
   bbdb4:	e7c6      	b.n	bbd44 <_ZN7RH_RF954initEv+0x7c>
   bbdb6:	bf00      	nop
   bbdb8:	2003e5fd 	.word	0x2003e5fd
   bbdbc:	2003e600 	.word	0x2003e600
   bbdc0:	000bbb01 	.word	0x000bbb01
   bbdc4:	43d90000 	.word	0x43d90000
   bbdc8:	000bbb11 	.word	0x000bbb11
   bbdcc:	000bbb21 	.word	0x000bbb21

000bbdd0 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bbdd0:	2001      	movs	r0, #1
   bbdd2:	4770      	bx	lr

000bbdd4 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bbdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbdd6:	4d1f      	ldr	r5, [pc, #124]	; (bbe54 <_ZN14SequentialFileC1Ev+0x80>)
   bbdd8:	4b1f      	ldr	r3, [pc, #124]	; (bbe58 <_ZN14SequentialFileC1Ev+0x84>)
   bbdda:	4604      	mov	r4, r0
   bbddc:	4629      	mov	r1, r5
   bbdde:	f840 3b04 	str.w	r3, [r0], #4
   bbde2:	f003 fc50 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bbde6:	491d      	ldr	r1, [pc, #116]	; (bbe5c <_ZN14SequentialFileC1Ev+0x88>)
   bbde8:	f104 0014 	add.w	r0, r4, #20
   bbdec:	f003 fc4b 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bbdf0:	4629      	mov	r1, r5
   bbdf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bbdf6:	f003 fc46 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bbdfa:	2300      	movs	r3, #0
   bbdfc:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bbe00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bbe04:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bbe08:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bbe0c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bbe10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bbe14:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bbe16:	2308      	movs	r3, #8
   bbe18:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bbe1a:	2020      	movs	r0, #32
   bbe1c:	f7f8 f93b 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bbe20:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bbe22:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bbe24:	3d01      	subs	r5, #1
   bbe26:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bbe28:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bbe2c:	4606      	mov	r6, r0
   bbe2e:	f44f 7000 	mov.w	r0, #512	; 0x200
   bbe32:	f7f8 f930 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbe36:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bbe3a:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bbe3e:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bbe42:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bbe44:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bbe46:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bbe48:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bbe4a:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bbe4c:	6667      	str	r7, [r4, #100]	; 0x64

}
   bbe4e:	4620      	mov	r0, r4
   bbe50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbe52:	bf00      	nop
   bbe54:	000c4e80 	.word	0x000c4e80
   bbe58:	000c4c80 	.word	0x000c4c80
   bbe5c:	000c4b80 	.word	0x000c4b80

000bbe60 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bbe60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bbe62:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bbe64:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bbe66:	4628      	mov	r0, r5
   bbe68:	f003 fc6b 	bl	bf742 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bbe6c:	490e      	ldr	r1, [pc, #56]	; (bbea8 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bbe6e:	4668      	mov	r0, sp
   bbe70:	f003 fc09 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bbe74:	4669      	mov	r1, sp
   bbe76:	4628      	mov	r0, r5
   bbe78:	f003 fcdd 	bl	bf836 <_ZNK6String8endsWithERKS_>
   bbe7c:	4606      	mov	r6, r0
   bbe7e:	4668      	mov	r0, sp
   bbe80:	f003 fbb6 	bl	bf5f0 <_ZN6StringD1Ev>
   bbe84:	b16e      	cbz	r6, bbea2 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bbe86:	68e3      	ldr	r3, [r4, #12]
   bbe88:	2200      	movs	r2, #0
   bbe8a:	3b01      	subs	r3, #1
   bbe8c:	4629      	mov	r1, r5
   bbe8e:	4668      	mov	r0, sp
   bbe90:	f003 fce6 	bl	bf860 <_ZNK6String9substringEjj>
   bbe94:	4669      	mov	r1, sp
   bbe96:	4628      	mov	r0, r5
   bbe98:	f003 fc4b 	bl	bf732 <_ZN6StringaSEOS_>
   bbe9c:	4668      	mov	r0, sp
   bbe9e:	f003 fba7 	bl	bf5f0 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bbea2:	4620      	mov	r0, r4
   bbea4:	b004      	add	sp, #16
   bbea6:	bd70      	pop	{r4, r5, r6, pc}
   bbea8:	000c4b85 	.word	0x000c4b85

000bbeac <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bbeac:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bbeae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bbeb0:	4604      	mov	r4, r0
    if (!queueMutex) {
   bbeb2:	b913      	cbnz	r3, bbeba <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bbeb4:	303c      	adds	r0, #60	; 0x3c
   bbeb6:	f000 fc4d 	bl	bc754 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bbeba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bbebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bbec0:	f000 bc50 	b.w	bc764 <os_mutex_lock>

000bbec4 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bbec4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bbec6:	f000 bc55 	b.w	bc774 <os_mutex_unlock>
	...

000bbecc <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bbecc:	b510      	push	{r4, lr}
   bbece:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bbed0:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bbed2:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bbed4:	f000 fe06 	bl	bcae4 <stat>
    if (result == 0) {
   bbed8:	b9d0      	cbnz	r0, bbf10 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bbeda:	9b01      	ldr	r3, [sp, #4]
   bbedc:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bbede:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bbee0:	d506      	bpl.n	bbef0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bbee2:	4915      	ldr	r1, [pc, #84]	; (bbf38 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bbee4:	4815      	ldr	r0, [pc, #84]	; (bbf3c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbee6:	f7f8 f92a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bbeea:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bbeec:	b016      	add	sp, #88	; 0x58
   bbeee:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bbef0:	4812      	ldr	r0, [pc, #72]	; (bbf3c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbef2:	4913      	ldr	r1, [pc, #76]	; (bbf40 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bbef4:	f7fb fbfe 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bbef8:	4620      	mov	r0, r4
   bbefa:	f006 f86f 	bl	c1fdc <unlink>
    result = mkdir(path, 0777);
   bbefe:	f240 11ff 	movw	r1, #511	; 0x1ff
   bbf02:	4620      	mov	r0, r4
   bbf04:	f000 fdf6 	bl	bcaf4 <mkdir>
    if (result == 0) {
   bbf08:	b980      	cbnz	r0, bbf2c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bbf0a:	490e      	ldr	r1, [pc, #56]	; (bbf44 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bbf0c:	4622      	mov	r2, r4
   bbf0e:	e7e9      	b.n	bbee4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bbf10:	f001 f85c 	bl	bcfcc <__errno>
   bbf14:	6803      	ldr	r3, [r0, #0]
   bbf16:	2b02      	cmp	r3, #2
   bbf18:	d0f1      	beq.n	bbefe <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bbf1a:	f001 f857 	bl	bcfcc <__errno>
   bbf1e:	490a      	ldr	r1, [pc, #40]	; (bbf48 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bbf20:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bbf22:	4806      	ldr	r0, [pc, #24]	; (bbf3c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bbf24:	f7fb fbe6 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bbf28:	2000      	movs	r0, #0
   bbf2a:	e7df      	b.n	bbeec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bbf2c:	f001 f84e 	bl	bcfcc <__errno>
   bbf30:	4906      	ldr	r1, [pc, #24]	; (bbf4c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bbf32:	6802      	ldr	r2, [r0, #0]
   bbf34:	e7f5      	b.n	bbf22 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bbf36:	bf00      	nop
   bbf38:	000c4b92 	.word	0x000c4b92
   bbf3c:	2003e60c 	.word	0x2003e60c
   bbf40:	000c4baf 	.word	0x000c4baf
   bbf44:	000c4be0 	.word	0x000c4be0
   bbf48:	000c4bcc 	.word	0x000c4bcc
   bbf4c:	000c4bef 	.word	0x000c4bef

000bbf50 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bbf50:	b538      	push	{r3, r4, r5, lr}
   bbf52:	4615      	mov	r5, r2
   bbf54:	4604      	mov	r4, r0
    String result = name;
   bbf56:	f003 fb96 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bbf5a:	b14d      	cbz	r5, bbf70 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bbf5c:	782b      	ldrb	r3, [r5, #0]
   bbf5e:	b13b      	cbz	r3, bbf70 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bbf60:	4904      	ldr	r1, [pc, #16]	; (bbf74 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bbf62:	4620      	mov	r0, r4
   bbf64:	f003 fc16 	bl	bf794 <_ZN6String6concatEPKc>
   bbf68:	4629      	mov	r1, r5
   bbf6a:	4620      	mov	r0, r4
   bbf6c:	f003 fc12 	bl	bf794 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bbf70:	4620      	mov	r0, r4
   bbf72:	bd38      	pop	{r3, r4, r5, pc}
   bbf74:	000c4f84 	.word	0x000c4f84

000bbf78 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bbf78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bbf7a:	4605      	mov	r5, r0
   bbf7c:	460e      	mov	r6, r1
   bbf7e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bbf80:	6949      	ldr	r1, [r1, #20]
   bbf82:	4668      	mov	r0, sp
   bbf84:	f003 fc8c 	bl	bf8a0 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bbf88:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bbf8a:	b904      	cbnz	r4, bbf8e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bbf8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbf8e:	4622      	mov	r2, r4
   bbf90:	4628      	mov	r0, r5
   bbf92:	f7ff ffdd 	bl	bbf50 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bbf96:	4668      	mov	r0, sp
   bbf98:	f003 fb2a 	bl	bf5f0 <_ZN6StringD1Ev>
}
   bbf9c:	4628      	mov	r0, r5
   bbf9e:	b004      	add	sp, #16
   bbfa0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bbfa4 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bbfa4:	b570      	push	{r4, r5, r6, lr}
   bbfa6:	460c      	mov	r4, r1
   bbfa8:	b08e      	sub	sp, #56	; 0x38
    String result;
   bbfaa:	491a      	ldr	r1, [pc, #104]	; (bc014 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bbfac:	e9cd 3200 	strd	r3, r2, [sp]
   bbfb0:	4605      	mov	r5, r0
    String result;
   bbfb2:	f003 fb68 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bbfb6:	68e0      	ldr	r0, [r4, #12]
   bbfb8:	69e1      	ldr	r1, [r4, #28]
   bbfba:	4401      	add	r1, r0
   bbfbc:	3104      	adds	r1, #4
   bbfbe:	4628      	mov	r0, r5
   bbfc0:	f003 fb34 	bl	bf62c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bbfc4:	1d21      	adds	r1, r4, #4
   bbfc6:	a806      	add	r0, sp, #24
   bbfc8:	f003 fba8 	bl	bf71c <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bbfcc:	4912      	ldr	r1, [pc, #72]	; (bc018 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bbfce:	a802      	add	r0, sp, #8
   bbfd0:	f003 fb59 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bbfd4:	a902      	add	r1, sp, #8
   bbfd6:	a806      	add	r0, sp, #24
   bbfd8:	f003 fbfa 	bl	bf7d0 <_ZplRK15StringSumHelperRK6String>
   bbfdc:	e9dd 3200 	ldrd	r3, r2, [sp]
   bbfe0:	4606      	mov	r6, r0
   bbfe2:	4621      	mov	r1, r4
   bbfe4:	a80a      	add	r0, sp, #40	; 0x28
   bbfe6:	f7ff ffc7 	bl	bbf78 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bbfea:	a90a      	add	r1, sp, #40	; 0x28
   bbfec:	4630      	mov	r0, r6
   bbfee:	f003 fbef 	bl	bf7d0 <_ZplRK15StringSumHelperRK6String>
   bbff2:	4601      	mov	r1, r0
   bbff4:	4628      	mov	r0, r5
   bbff6:	f003 fb82 	bl	bf6fe <_ZN6StringaSERKS_>
   bbffa:	a80a      	add	r0, sp, #40	; 0x28
   bbffc:	f003 faf8 	bl	bf5f0 <_ZN6StringD1Ev>
   bc000:	a802      	add	r0, sp, #8
   bc002:	f003 faf5 	bl	bf5f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc006:	a806      	add	r0, sp, #24
   bc008:	f003 faf2 	bl	bf5f0 <_ZN6StringD1Ev>
}
   bc00c:	4628      	mov	r0, r5
   bc00e:	b00e      	add	sp, #56	; 0x38
   bc010:	bd70      	pop	{r4, r5, r6, pc}
   bc012:	bf00      	nop
   bc014:	000c4e80 	.word	0x000c4e80
   bc018:	000c4b85 	.word	0x000c4b85

000bc01c <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc020:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc022:	b08e      	sub	sp, #56	; 0x38
   bc024:	4605      	mov	r5, r0
   bc026:	460f      	mov	r7, r1
    if (allExtensions) {
   bc028:	2a00      	cmp	r2, #0
   bc02a:	d04a      	beq.n	bc0c2 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc02c:	6840      	ldr	r0, [r0, #4]
   bc02e:	f000 fd71 	bl	bcb14 <opendir>
        if (dir) {
   bc032:	4606      	mov	r6, r0
   bc034:	2800      	cmp	r0, #0
   bc036:	d054      	beq.n	bc0e2 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc038:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc0f0 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc03c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc0ec <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc040:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc0e8 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc044:	4630      	mov	r0, r6
   bc046:	f000 fd6d 	bl	bcb24 <readdir>
                if (!ent) {
   bc04a:	2800      	cmp	r0, #0
   bc04c:	d033      	beq.n	bc0b6 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc04e:	7a82      	ldrb	r2, [r0, #10]
   bc050:	2a08      	cmp	r2, #8
   bc052:	d1f7      	bne.n	bc044 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc054:	f100 040b 	add.w	r4, r0, #11
   bc058:	6969      	ldr	r1, [r5, #20]
   bc05a:	aa01      	add	r2, sp, #4
   bc05c:	4620      	mov	r0, r4
   bc05e:	f000 ff8d 	bl	bcf7c <sscanf>
   bc062:	2801      	cmp	r0, #1
   bc064:	d1ee      	bne.n	bc044 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc066:	9b01      	ldr	r3, [sp, #4]
   bc068:	42bb      	cmp	r3, r7
   bc06a:	d1eb      	bne.n	bc044 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc06c:	1d29      	adds	r1, r5, #4
   bc06e:	a80a      	add	r0, sp, #40	; 0x28
   bc070:	f003 fb54 	bl	bf71c <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc074:	4651      	mov	r1, sl
   bc076:	a806      	add	r0, sp, #24
   bc078:	f003 fb05 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bc07c:	a906      	add	r1, sp, #24
   bc07e:	a80a      	add	r0, sp, #40	; 0x28
   bc080:	f003 fba6 	bl	bf7d0 <_ZplRK15StringSumHelperRK6String>
   bc084:	4621      	mov	r1, r4
   bc086:	f003 fbaf 	bl	bf7e8 <_ZplRK15StringSumHelperPKc>
   bc08a:	4601      	mov	r1, r0
   bc08c:	a802      	add	r0, sp, #8
   bc08e:	f003 fb45 	bl	bf71c <_ZN6StringC1ERKS_>
   bc092:	a806      	add	r0, sp, #24
   bc094:	f003 faac 	bl	bf5f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc098:	a80a      	add	r0, sp, #40	; 0x28
   bc09a:	f003 faa9 	bl	bf5f0 <_ZN6StringD1Ev>
                        unlink(path);
   bc09e:	9802      	ldr	r0, [sp, #8]
   bc0a0:	f005 ff9c 	bl	c1fdc <unlink>
                        _log.trace("removed %s", path.c_str());
   bc0a4:	4640      	mov	r0, r8
   bc0a6:	9a02      	ldr	r2, [sp, #8]
   bc0a8:	4649      	mov	r1, r9
   bc0aa:	f7fb fb31 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc0ae:	a802      	add	r0, sp, #8
   bc0b0:	f003 fa9e 	bl	bf5f0 <_ZN6StringD1Ev>
                    continue;
   bc0b4:	e7c6      	b.n	bc044 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc0b6:	4630      	mov	r0, r6
}
   bc0b8:	b00e      	add	sp, #56	; 0x38
   bc0ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc0be:	f000 bd39 	b.w	bcb34 <closedir>
        String path = getPathForFileNum(fileNum); 
   bc0c2:	460a      	mov	r2, r1
   bc0c4:	4601      	mov	r1, r0
   bc0c6:	a80a      	add	r0, sp, #40	; 0x28
   bc0c8:	f7ff ff6c 	bl	bbfa4 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc0cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc0ce:	f005 ff85 	bl	c1fdc <unlink>
        _log.trace("removed %s", path.c_str());
   bc0d2:	4805      	ldr	r0, [pc, #20]	; (bc0e8 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc0d6:	4905      	ldr	r1, [pc, #20]	; (bc0ec <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc0d8:	f7fb fb1a 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc0dc:	a80a      	add	r0, sp, #40	; 0x28
   bc0de:	f003 fa87 	bl	bf5f0 <_ZN6StringD1Ev>
}
   bc0e2:	b00e      	add	sp, #56	; 0x38
   bc0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc0e8:	2003e60c 	.word	0x2003e60c
   bc0ec:	000c4b87 	.word	0x000c4b87
   bc0f0:	000c4b85 	.word	0x000c4b85

000bc0f4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc0f4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc0f6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc0f8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc0fa:	b183      	cbz	r3, bc11e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc0fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc0fe:	6945      	ldr	r5, [r0, #20]
   bc100:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc102:	42ae      	cmp	r6, r5
   bc104:	d906      	bls.n	bc114 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc106:	f855 0b04 	ldr.w	r0, [r5], #4
   bc10a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc10e:	f7f7 ffc6 	bl	b409e <_ZdlPvj>
   bc112:	e7f6      	b.n	bc102 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc114:	6861      	ldr	r1, [r4, #4]
   bc116:	6820      	ldr	r0, [r4, #0]
   bc118:	0089      	lsls	r1, r1, #2
   bc11a:	f7f7 ffc0 	bl	b409e <_ZdlPvj>
    }
   bc11e:	4620      	mov	r0, r4
   bc120:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc124 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc124:	b510      	push	{r4, lr}
   bc126:	4b09      	ldr	r3, [pc, #36]	; (bc14c <_ZN14SequentialFileD1Ev+0x28>)
   bc128:	4604      	mov	r4, r0
   bc12a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc12e:	f7ff ffe1 	bl	bc0f4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc132:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc136:	f003 fa5b 	bl	bf5f0 <_ZN6StringD1Ev>
   bc13a:	f104 0014 	add.w	r0, r4, #20
   bc13e:	f003 fa57 	bl	bf5f0 <_ZN6StringD1Ev>
   bc142:	1d20      	adds	r0, r4, #4
   bc144:	f003 fa54 	bl	bf5f0 <_ZN6StringD1Ev>
}
   bc148:	4620      	mov	r0, r4
   bc14a:	bd10      	pop	{r4, pc}
   bc14c:	000c4c80 	.word	0x000c4c80

000bc150 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc150:	b510      	push	{r4, lr}
   bc152:	4604      	mov	r4, r0
}
   bc154:	f7ff ffe6 	bl	bc124 <_ZN14SequentialFileD1Ev>
   bc158:	4620      	mov	r0, r4
   bc15a:	2168      	movs	r1, #104	; 0x68
   bc15c:	f7f7 ff9f 	bl	b409e <_ZdlPvj>
   bc160:	4620      	mov	r0, r4
   bc162:	bd10      	pop	{r4, pc}

000bc164 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc164:	68c3      	ldr	r3, [r0, #12]
   bc166:	68ca      	ldr	r2, [r1, #12]
   bc168:	1a9b      	subs	r3, r3, r2
   bc16a:	109b      	asrs	r3, r3, #2
   bc16c:	1e5a      	subs	r2, r3, #1
   bc16e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc172:	1a1b      	subs	r3, r3, r0
   bc174:	109b      	asrs	r3, r3, #2
   bc176:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc17a:	6888      	ldr	r0, [r1, #8]
   bc17c:	680a      	ldr	r2, [r1, #0]
   bc17e:	1a80      	subs	r0, r0, r2
      }
   bc180:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc184:	4770      	bx	lr
	...

000bc188 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc18c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc18e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc190:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc192:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc194:	4604      	mov	r4, r0
   bc196:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc198:	d007      	beq.n	bc1aa <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc19a:	b10b      	cbz	r3, bc1a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc19c:	680a      	ldr	r2, [r1, #0]
   bc19e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc1a0:	69a3      	ldr	r3, [r4, #24]
   bc1a2:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc1a4:	61a3      	str	r3, [r4, #24]
      }
   bc1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc1aa:	f100 0108 	add.w	r1, r0, #8
   bc1ae:	3018      	adds	r0, #24
   bc1b0:	f7ff ffd8 	bl	bc164 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc1b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc1b8:	4298      	cmp	r0, r3
   bc1ba:	d102      	bne.n	bc1c2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc1bc:	4838      	ldr	r0, [pc, #224]	; (bc2a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc1be:	f004 f8e2 	bl	c0386 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc1c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc1c4:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc1c6:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc1c8:	1a11      	subs	r1, r2, r0
   bc1ca:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc1ce:	2901      	cmp	r1, #1
   bc1d0:	d825      	bhi.n	bc21e <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc1d2:	6961      	ldr	r1, [r4, #20]
   bc1d4:	eba2 0801 	sub.w	r8, r2, r1
   bc1d8:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc1dc:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc1de:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc1e2:	d936      	bls.n	bc252 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc1e4:	1b5d      	subs	r5, r3, r5
   bc1e6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc1e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc1ec:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc1ee:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc1f0:	eba3 0201 	sub.w	r2, r3, r1
   bc1f4:	d926      	bls.n	bc244 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc1f6:	428b      	cmp	r3, r1
   bc1f8:	d002      	beq.n	bc200 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc1fa:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc1fc:	f004 fe56 	bl	c0eac <memmove>
	_M_node = __new_node;
   bc200:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc202:	682b      	ldr	r3, [r5, #0]
   bc204:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc206:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc20a:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc20c:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc210:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc212:	f855 3008 	ldr.w	r3, [r5, r8]
   bc216:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc218:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc21c:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc21e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc222:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc224:	f7f7 ff37 	bl	b4096 <_Znwj>
   bc228:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc22a:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc22c:	b10b      	cbz	r3, bc232 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc22e:	683a      	ldr	r2, [r7, #0]
   bc230:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc232:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc234:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc236:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc238:	685b      	ldr	r3, [r3, #4]
   bc23a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc23c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc240:	6222      	str	r2, [r4, #32]
   bc242:	e7af      	b.n	bc1a4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc244:	428b      	cmp	r3, r1
   bc246:	d0db      	beq.n	bc200 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc248:	f108 0004 	add.w	r0, r8, #4
   bc24c:	1a80      	subs	r0, r0, r2
   bc24e:	4428      	add	r0, r5
   bc250:	e7d4      	b.n	bc1fc <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc252:	f103 0902 	add.w	r9, r3, #2
   bc256:	2b01      	cmp	r3, #1
   bc258:	bf2c      	ite	cs
   bc25a:	4499      	addcs	r9, r3
   bc25c:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc260:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc264:	d301      	bcc.n	bc26a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc266:	f004 f88b 	bl	c0380 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc26a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc26e:	f7f7 ff12 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc272:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc274:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc276:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc27a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc27c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc27e:	4291      	cmp	r1, r2
   bc280:	4682      	mov	sl, r0
   bc282:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc286:	d003      	beq.n	bc290 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc288:	1a52      	subs	r2, r2, r1
   bc28a:	4628      	mov	r0, r5
   bc28c:	f004 fe0e 	bl	c0eac <memmove>
	::operator delete(__p
   bc290:	6861      	ldr	r1, [r4, #4]
   bc292:	6820      	ldr	r0, [r4, #0]
   bc294:	0089      	lsls	r1, r1, #2
   bc296:	f7f7 ff02 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc29a:	e9c4 a900 	strd	sl, r9, [r4]
   bc29e:	e7af      	b.n	bc200 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc2a0:	000c4809 	.word	0x000c4809

000bc2a4 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc2a8:	68c3      	ldr	r3, [r0, #12]
   bc2aa:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc2ac:	b086      	sub	sp, #24
   bc2ae:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc2b0:	d808      	bhi.n	bc2c4 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc2b2:	4934      	ldr	r1, [pc, #208]	; (bc384 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc2b4:	4834      	ldr	r0, [pc, #208]	; (bc388 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc2b6:	f7fb fa1d 	bl	b76f4 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc2ba:	2600      	movs	r6, #0
}
   bc2bc:	4630      	mov	r0, r6
   bc2be:	b006      	add	sp, #24
   bc2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc2c4:	6840      	ldr	r0, [r0, #4]
   bc2c6:	f7ff fe01 	bl	bbecc <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc2ca:	4606      	mov	r6, r0
   bc2cc:	2800      	cmp	r0, #0
   bc2ce:	d0f4      	beq.n	bc2ba <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc2d0:	6963      	ldr	r3, [r4, #20]
   bc2d2:	6862      	ldr	r2, [r4, #4]
   bc2d4:	492d      	ldr	r1, [pc, #180]	; (bc38c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc2d6:	482c      	ldr	r0, [pc, #176]	; (bc388 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc2d8:	f7fb fa1a 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc2dc:	6860      	ldr	r0, [r4, #4]
   bc2de:	f000 fc19 	bl	bcb14 <opendir>
    if (!dir) {
   bc2e2:	4607      	mov	r7, r0
   bc2e4:	2800      	cmp	r0, #0
   bc2e6:	d0e8      	beq.n	bc2ba <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc2e8:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc2ea:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc390 <_ZN14SequentialFile7scanDirEv+0xec>
   bc2ee:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc388 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc2f2:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc2f4:	4638      	mov	r0, r7
   bc2f6:	f000 fc15 	bl	bcb24 <readdir>
        if (!ent) {
   bc2fa:	4605      	mov	r5, r0
   bc2fc:	2800      	cmp	r0, #0
   bc2fe:	d039      	beq.n	bc374 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc300:	7a83      	ldrb	r3, [r0, #10]
   bc302:	2b08      	cmp	r3, #8
   bc304:	d1f6      	bne.n	bc2f4 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc306:	350b      	adds	r5, #11
   bc308:	6961      	ldr	r1, [r4, #20]
   bc30a:	aa01      	add	r2, sp, #4
   bc30c:	4628      	mov	r0, r5
   bc30e:	f000 fe35 	bl	bcf7c <sscanf>
   bc312:	2801      	cmp	r0, #1
   bc314:	d1ee      	bne.n	bc2f4 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc318:	b17b      	cbz	r3, bc33a <_ZN14SequentialFile7scanDirEv+0x96>
   bc31a:	4629      	mov	r1, r5
   bc31c:	a802      	add	r0, sp, #8
   bc31e:	f003 f9b2 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
   bc322:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc326:	a802      	add	r0, sp, #8
   bc328:	f003 fa85 	bl	bf836 <_ZNK6String8endsWithERKS_>
   bc32c:	4682      	mov	sl, r0
   bc32e:	a802      	add	r0, sp, #8
   bc330:	f003 f95e 	bl	bf5f0 <_ZN6StringD1Ev>
   bc334:	f1ba 0f00 	cmp.w	sl, #0
   bc338:	d0dc      	beq.n	bc2f4 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc33a:	6823      	ldr	r3, [r4, #0]
   bc33c:	4629      	mov	r1, r5
   bc33e:	689b      	ldr	r3, [r3, #8]
   bc340:	4620      	mov	r0, r4
   bc342:	4798      	blx	r3
   bc344:	2800      	cmp	r0, #0
   bc346:	d0d5      	beq.n	bc2f4 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc348:	9a01      	ldr	r2, [sp, #4]
   bc34a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc34c:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc34e:	bfb8      	it	lt
   bc350:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc352:	462b      	mov	r3, r5
   bc354:	4649      	mov	r1, r9
   bc356:	4640      	mov	r0, r8
   bc358:	f7fb f9da 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc35c:	4620      	mov	r0, r4
   bc35e:	f7ff fda5 	bl	bbeac <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc362:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc366:	a901      	add	r1, sp, #4
   bc368:	f7ff ff0e 	bl	bc188 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc36c:	4620      	mov	r0, r4
   bc36e:	f7ff fda9 	bl	bbec4 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc372:	e7bf      	b.n	bc2f4 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc374:	4638      	mov	r0, r7
   bc376:	f000 fbdd 	bl	bcb34 <closedir>
    scanDirCompleted = true;
   bc37a:	2301      	movs	r3, #1
   bc37c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc380:	e79c      	b.n	bc2bc <_ZN14SequentialFile7scanDirEv+0x18>
   bc382:	bf00      	nop
   bc384:	000c4c05 	.word	0x000c4c05
   bc388:	2003e60c 	.word	0x2003e60c
   bc38c:	000c4c1a 	.word	0x000c4c1a
   bc390:	000c4c36 	.word	0x000c4c36

000bc394 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc394:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc396:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc39a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc39c:	b90b      	cbnz	r3, bc3a2 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc39e:	f7ff ff81 	bl	bc2a4 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc3a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc3a4:	3001      	adds	r0, #1
   bc3a6:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc3a8:	bd10      	pop	{r4, pc}
	...

000bc3ac <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc3ac:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc3ae:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc3b2:	4604      	mov	r4, r0
   bc3b4:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc3b6:	b90b      	cbnz	r3, bc3bc <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc3b8:	f7ff ff74 	bl	bc2a4 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc3bc:	4620      	mov	r0, r4
   bc3be:	f7ff fd75 	bl	bbeac <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc3c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc3c4:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc3c6:	429a      	cmp	r2, r3
   bc3c8:	d020      	beq.n	bc40c <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc3ca:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc3ce:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc3d0:	b126      	cbz	r6, bc3dc <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc3d2:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc3d4:	4293      	cmp	r3, r2
   bc3d6:	d00c      	beq.n	bc3f2 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc3d8:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc3da:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc3dc:	4620      	mov	r0, r4
   bc3de:	f7ff fd71 	bl	bbec4 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc3e2:	b125      	cbz	r5, bc3ee <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc3e4:	490a      	ldr	r1, [pc, #40]	; (bc410 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc3e6:	480b      	ldr	r0, [pc, #44]	; (bc414 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc3e8:	462a      	mov	r2, r5
   bc3ea:	f7fb f991 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
}
   bc3ee:	4628      	mov	r0, r5
   bc3f0:	bd70      	pop	{r4, r5, r6, pc}
   bc3f2:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc3f6:	f7f7 fe52 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc3fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc3fc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc3fe:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc400:	685b      	ldr	r3, [r3, #4]
   bc402:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc404:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc408:	6522      	str	r2, [r4, #80]	; 0x50
   bc40a:	e7e6      	b.n	bc3da <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc40c:	2500      	movs	r5, #0
   bc40e:	e7e5      	b.n	bc3dc <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc410:	000c4c4c 	.word	0x000c4c4c
   bc414:	2003e60c 	.word	0x2003e60c

000bc418 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc418:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc41a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc41e:	9101      	str	r1, [sp, #4]
   bc420:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc422:	b90b      	cbnz	r3, bc428 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc424:	f7ff ff3e 	bl	bc2a4 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc428:	9b01      	ldr	r3, [sp, #4]
   bc42a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc42c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc42e:	bfb8      	it	lt
   bc430:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc432:	4620      	mov	r0, r4
   bc434:	f7ff fd3a 	bl	bbeac <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc438:	a901      	add	r1, sp, #4
   bc43a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc43e:	f7ff fea3 	bl	bc188 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc442:	4620      	mov	r0, r4
   bc444:	f7ff fd3e 	bl	bbec4 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc448:	b002      	add	sp, #8
   bc44a:	bd10      	pop	{r4, pc}

000bc44c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc44c:	b538      	push	{r3, r4, r5, lr}
   bc44e:	4604      	mov	r4, r0
    queueMutexLock();
   bc450:	f7ff fd2c 	bl	bbeac <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc454:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc458:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc45c:	f7ff fe82 	bl	bc164 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc460:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc462:	4620      	mov	r0, r4
   bc464:	f7ff fd2e 	bl	bbec4 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc468:	4628      	mov	r0, r5
   bc46a:	bd38      	pop	{r3, r4, r5, pc}

000bc46c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc46c:	4b01      	ldr	r3, [pc, #4]	; (bc474 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc46e:	4a02      	ldr	r2, [pc, #8]	; (bc478 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc470:	601a      	str	r2, [r3, #0]
}
   bc472:	4770      	bx	lr
   bc474:	2003e60c 	.word	0x2003e60c
   bc478:	000c4c69 	.word	0x000c4c69

000bc47c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   bc47c:	4770      	bx	lr

000bc47e <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc47e:	6803      	ldr	r3, [r0, #0]
   bc480:	685b      	ldr	r3, [r3, #4]
   bc482:	4718      	bx	r3

000bc484 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc484:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc486:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc488:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc48a:	b133      	cbz	r3, bc49a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc48c:	b131      	cbz	r1, bc49c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc48e:	6823      	ldr	r3, [r4, #0]
   bc490:	4620      	mov	r0, r4
   bc492:	689b      	ldr	r3, [r3, #8]
   bc494:	4798      	blx	r3
            lastUpdate = 0;
   bc496:	2300      	movs	r3, #0
   bc498:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc49a:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc49c:	f000 f9c2 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc4a0:	69a3      	ldr	r3, [r4, #24]
   bc4a2:	1ac0      	subs	r0, r0, r3
   bc4a4:	69e3      	ldr	r3, [r4, #28]
   bc4a6:	4298      	cmp	r0, r3
   bc4a8:	d2f1      	bcs.n	bc48e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc4aa:	e7f6      	b.n	bc49a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc4ac <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc4ac:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc4ae:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc4b0:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc4b2:	b11b      	cbz	r3, bc4bc <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc4b4:	f000 f9b6 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc4b8:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc4ba:	bd10      	pop	{r4, pc}
        save();
   bc4bc:	6803      	ldr	r3, [r0, #0]
}
   bc4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc4c2:	689b      	ldr	r3, [r3, #8]
   bc4c4:	4718      	bx	r3

000bc4c6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   bc4c6:	f000 b975 	b.w	bc7b4 <os_mutex_recursive_unlock>

000bc4ca <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc4ca:	b510      	push	{r4, lr}
   bc4cc:	4604      	mov	r4, r0
   bc4ce:	3004      	adds	r0, #4
   bc4d0:	f7f9 fe82 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc4d4:	6823      	ldr	r3, [r4, #0]
   bc4d6:	68e1      	ldr	r1, [r4, #12]
   bc4d8:	695b      	ldr	r3, [r3, #20]
   bc4da:	4620      	mov	r0, r4
   bc4dc:	4798      	blx	r3
   bc4de:	b918      	cbnz	r0, bc4e8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc4e0:	6823      	ldr	r3, [r4, #0]
   bc4e2:	4620      	mov	r0, r4
   bc4e4:	699b      	ldr	r3, [r3, #24]
   bc4e6:	4798      	blx	r3
      { _M_device.unlock(); }
   bc4e8:	6860      	ldr	r0, [r4, #4]
   bc4ea:	f7ff ffec 	bl	bc4c6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc4ee:	2001      	movs	r0, #1
   bc4f0:	bd10      	pop	{r4, pc}

000bc4f2 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc4f4:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc4f6:	3004      	adds	r0, #4
   bc4f8:	4614      	mov	r4, r2
   bc4fa:	460e      	mov	r6, r1
   bc4fc:	461f      	mov	r7, r3
   bc4fe:	f7f9 fe6b 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   bc502:	68ea      	ldr	r2, [r5, #12]
   bc504:	f1c4 0401 	rsb	r4, r4, #1
   bc508:	4414      	add	r4, r2
   bc50a:	42b4      	cmp	r4, r6
   bc50c:	d30a      	bcc.n	bc524 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bc50e:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   bc510:	4638      	mov	r0, r7
   bc512:	4431      	add	r1, r6
   bc514:	f003 f915 	bl	bf742 <_ZN6StringaSEPKc>
            result = true;
   bc518:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bc51a:	6868      	ldr	r0, [r5, #4]
   bc51c:	f7ff ffd3 	bl	bc4c6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   bc520:	4620      	mov	r0, r4
   bc522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bc524:	2400      	movs	r4, #0
   bc526:	e7f8      	b.n	bc51a <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>

000bc528 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bc528:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc52a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bc52e:	4f18      	ldr	r7, [pc, #96]	; (bc590 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bc530:	4e18      	ldr	r6, [pc, #96]	; (bc594 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bc532:	4d19      	ldr	r5, [pc, #100]	; (bc598 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bc534:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bc536:	42a0      	cmp	r0, r4
   bc538:	d00c      	beq.n	bc554 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bc53a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bc53e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bc540:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bc544:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bc546:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bc548:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bc54c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bc550:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bc552:	e7f0      	b.n	bc536 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bc554:	f001 0403 	and.w	r4, r1, #3
   bc558:	4404      	add	r4, r0
    k = 0;
   bc55a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bc55c:	42a0      	cmp	r0, r4
   bc55e:	d004      	beq.n	bc56a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bc560:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bc564:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bc568:	e7f8      	b.n	bc55c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bc56a:	4809      	ldr	r0, [pc, #36]	; (bc590 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bc56c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bc56e:	4809      	ldr	r0, [pc, #36]	; (bc594 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bc570:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bc574:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bc576:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bc578:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bc57a:	4b08      	ldr	r3, [pc, #32]	; (bc59c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bc57c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bc580:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bc582:	4b07      	ldr	r3, [pc, #28]	; (bc5a0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bc584:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bc588:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bc58a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bc58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc590:	cc9e2d51 	.word	0xcc9e2d51
   bc594:	1b873593 	.word	0x1b873593
   bc598:	e6546b64 	.word	0xe6546b64
   bc59c:	85ebca6b 	.word	0x85ebca6b
   bc5a0:	c2b2ae35 	.word	0xc2b2ae35

000bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bc5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc5a6:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc5a8:	3004      	adds	r0, #4
   bc5aa:	f7f9 fe15 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bc5ae:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bc5b0:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bc5b2:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bc5b4:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc5b6:	68a6      	ldr	r6, [r4, #8]
   bc5b8:	4a05      	ldr	r2, [pc, #20]	; (bc5d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bc5ba:	88f1      	ldrh	r1, [r6, #6]
   bc5bc:	4630      	mov	r0, r6
   bc5be:	f7ff ffb3 	bl	bc528 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bc5c2:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc5c4:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bc5c6:	6860      	ldr	r0, [r4, #4]
   bc5c8:	f7ff ff7d 	bl	bc4c6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc5cc:	4628      	mov	r0, r5
   bc5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc5d0:	851c2a3f 	.word	0x851c2a3f

000bc5d4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bc5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc5d8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc5da:	3004      	adds	r0, #4
   bc5dc:	4690      	mov	r8, r2
   bc5de:	460d      	mov	r5, r1
   bc5e0:	461f      	mov	r7, r3
   bc5e2:	f7f9 fdf9 	bl	b61d8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bc5e6:	68e2      	ldr	r2, [r4, #12]
   bc5e8:	f1c8 0301 	rsb	r3, r8, #1
   bc5ec:	4413      	add	r3, r2
   bc5ee:	42ab      	cmp	r3, r5
   bc5f0:	d31f      	bcc.n	bc632 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   bc5f2:	4638      	mov	r0, r7
   bc5f4:	f004 fd3f 	bl	c1076 <strlen>
   bc5f8:	4540      	cmp	r0, r8
   bc5fa:	d21a      	bcs.n	bc632 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   bc5fc:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bc5fe:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bc600:	4629      	mov	r1, r5
   bc602:	4638      	mov	r0, r7
   bc604:	f004 fd07 	bl	c1016 <strcmp>
   bc608:	b188      	cbz	r0, bc62e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   bc60a:	4642      	mov	r2, r8
   bc60c:	2100      	movs	r1, #0
   bc60e:	4628      	mov	r0, r5
   bc610:	f004 fc66 	bl	c0ee0 <memset>
                strcpy(p, value);
   bc614:	4639      	mov	r1, r7
   bc616:	4628      	mov	r0, r5
   bc618:	f004 fd07 	bl	c102a <strcpy>
                savedDataHeader->hash = getHash();
   bc61c:	4620      	mov	r0, r4
   bc61e:	68a5      	ldr	r5, [r4, #8]
   bc620:	f7ff ffc0 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc624:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   bc626:	6823      	ldr	r3, [r4, #0]
   bc628:	4620      	mov	r0, r4
   bc62a:	691b      	ldr	r3, [r3, #16]
   bc62c:	4798      	blx	r3
            result = true;
   bc62e:	2501      	movs	r5, #1
   bc630:	e000      	b.n	bc634 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   bc632:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bc634:	6860      	ldr	r0, [r4, #4]
   bc636:	f7ff ff46 	bl	bc4c6 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc63a:	4628      	mov	r0, r5
   bc63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc640 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bc640:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc642:	460d      	mov	r5, r1
   bc644:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   bc646:	f7ff ffad 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   bc64a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   bc64c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   bc64e:	d923      	bls.n	bc698 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   bc650:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bc652:	6922      	ldr	r2, [r4, #16]
   bc654:	6819      	ldr	r1, [r3, #0]
   bc656:	4291      	cmp	r1, r2
   bc658:	d11f      	bne.n	bc69a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   bc65a:	8899      	ldrh	r1, [r3, #4]
   bc65c:	8aa2      	ldrh	r2, [r4, #20]
   bc65e:	4291      	cmp	r1, r2
   bc660:	d11b      	bne.n	bc69a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   bc662:	88d9      	ldrh	r1, [r3, #6]
   bc664:	b2aa      	uxth	r2, r5
   bc666:	4291      	cmp	r1, r2
   bc668:	d817      	bhi.n	bc69a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bc66a:	689a      	ldr	r2, [r3, #8]
   bc66c:	4282      	cmp	r2, r0
   bc66e:	d114      	bne.n	bc69a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   bc670:	68e2      	ldr	r2, [r4, #12]
   bc672:	42aa      	cmp	r2, r5
   bc674:	d905      	bls.n	bc682 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   bc676:	2100      	movs	r1, #0
   bc678:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bc67a:	68e2      	ldr	r2, [r4, #12]
   bc67c:	3501      	adds	r5, #1
   bc67e:	42aa      	cmp	r2, r5
   bc680:	d8fa      	bhi.n	bc678 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc682:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bc686:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc688:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bc68a:	68a5      	ldr	r5, [r4, #8]
   bc68c:	f7ff ff8a 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc690:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bc692:	2001      	movs	r0, #1
}
   bc694:	b002      	add	sp, #8
   bc696:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bc698:	b19d      	cbz	r5, bc6c2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   bc69a:	68a1      	ldr	r1, [r4, #8]
   bc69c:	680a      	ldr	r2, [r1, #0]
   bc69e:	b192      	cbz	r2, bc6c6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bc6a0:	6888      	ldr	r0, [r1, #8]
   bc6a2:	888b      	ldrh	r3, [r1, #4]
   bc6a4:	9001      	str	r0, [sp, #4]
   bc6a6:	88c9      	ldrh	r1, [r1, #6]
   bc6a8:	4808      	ldr	r0, [pc, #32]	; (bc6cc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bc6aa:	9100      	str	r1, [sp, #0]
   bc6ac:	4908      	ldr	r1, [pc, #32]	; (bc6d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   bc6ae:	f7fb f82f 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bc6b2:	e9cd 5600 	strd	r5, r6, [sp]
   bc6b6:	8aa3      	ldrh	r3, [r4, #20]
   bc6b8:	6922      	ldr	r2, [r4, #16]
   bc6ba:	4906      	ldr	r1, [pc, #24]	; (bc6d4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   bc6bc:	4803      	ldr	r0, [pc, #12]	; (bc6cc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   bc6be:	f7fb f827 	bl	b7710 <_ZNK5spark6Logger5traceEPKcz>
   bc6c2:	2000      	movs	r0, #0
   bc6c4:	e7e6      	b.n	bc694 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bc6c6:	4610      	mov	r0, r2
   bc6c8:	e7e4      	b.n	bc694 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   bc6ca:	bf00      	nop
   bc6cc:	2003e658 	.word	0x2003e658
   bc6d0:	000c4c8c 	.word	0x000c4c8c
   bc6d4:	000c4cbd 	.word	0x000c4cbd

000bc6d8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bc6d8:	b538      	push	{r3, r4, r5, lr}
   bc6da:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bc6dc:	68c2      	ldr	r2, [r0, #12]
   bc6de:	6880      	ldr	r0, [r0, #8]
   bc6e0:	2100      	movs	r1, #0
   bc6e2:	f004 fbfd 	bl	c0ee0 <memset>
    savedDataHeader->magic = savedDataMagic;
   bc6e6:	68a3      	ldr	r3, [r4, #8]
   bc6e8:	6922      	ldr	r2, [r4, #16]
   bc6ea:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bc6ec:	68a3      	ldr	r3, [r4, #8]
   bc6ee:	8aa2      	ldrh	r2, [r4, #20]
   bc6f0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bc6f2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bc6f6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bc6f8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bc6fa:	68a5      	ldr	r5, [r4, #8]
   bc6fc:	f7ff ff52 	bl	bc5a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc700:	60a8      	str	r0, [r5, #8]
}
   bc702:	bd38      	pop	{r3, r4, r5, pc}

000bc704 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bc704:	b508      	push	{r3, lr}
   bc706:	4b02      	ldr	r3, [pc, #8]	; (bc710 <cellular_signal+0xc>)
   bc708:	681b      	ldr	r3, [r3, #0]
   bc70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc70c:	9301      	str	r3, [sp, #4]
   bc70e:	bd08      	pop	{r3, pc}
   bc710:	00030274 	.word	0x00030274

000bc714 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bc714:	b508      	push	{r3, lr}
   bc716:	4b02      	ldr	r3, [pc, #8]	; (bc720 <os_thread_create+0xc>)
   bc718:	681b      	ldr	r3, [r3, #0]
   bc71a:	685b      	ldr	r3, [r3, #4]
   bc71c:	9301      	str	r3, [sp, #4]
   bc71e:	bd08      	pop	{r3, pc}
   bc720:	00030248 	.word	0x00030248

000bc724 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bc724:	b508      	push	{r3, lr}
   bc726:	4b02      	ldr	r3, [pc, #8]	; (bc730 <os_thread_is_current+0xc>)
   bc728:	681b      	ldr	r3, [r3, #0]
   bc72a:	689b      	ldr	r3, [r3, #8]
   bc72c:	9301      	str	r3, [sp, #4]
   bc72e:	bd08      	pop	{r3, pc}
   bc730:	00030248 	.word	0x00030248

000bc734 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bc734:	b508      	push	{r3, lr}
   bc736:	4b02      	ldr	r3, [pc, #8]	; (bc740 <os_thread_join+0xc>)
   bc738:	681b      	ldr	r3, [r3, #0]
   bc73a:	691b      	ldr	r3, [r3, #16]
   bc73c:	9301      	str	r3, [sp, #4]
   bc73e:	bd08      	pop	{r3, pc}
   bc740:	00030248 	.word	0x00030248

000bc744 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bc744:	b508      	push	{r3, lr}
   bc746:	4b02      	ldr	r3, [pc, #8]	; (bc750 <os_thread_cleanup+0xc>)
   bc748:	681b      	ldr	r3, [r3, #0]
   bc74a:	695b      	ldr	r3, [r3, #20]
   bc74c:	9301      	str	r3, [sp, #4]
   bc74e:	bd08      	pop	{r3, pc}
   bc750:	00030248 	.word	0x00030248

000bc754 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bc754:	b508      	push	{r3, lr}
   bc756:	4b02      	ldr	r3, [pc, #8]	; (bc760 <os_mutex_create+0xc>)
   bc758:	681b      	ldr	r3, [r3, #0]
   bc75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc75c:	9301      	str	r3, [sp, #4]
   bc75e:	bd08      	pop	{r3, pc}
   bc760:	00030248 	.word	0x00030248

000bc764 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bc764:	b508      	push	{r3, lr}
   bc766:	4b02      	ldr	r3, [pc, #8]	; (bc770 <os_mutex_lock+0xc>)
   bc768:	681b      	ldr	r3, [r3, #0]
   bc76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc76c:	9301      	str	r3, [sp, #4]
   bc76e:	bd08      	pop	{r3, pc}
   bc770:	00030248 	.word	0x00030248

000bc774 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bc774:	b508      	push	{r3, lr}
   bc776:	4b02      	ldr	r3, [pc, #8]	; (bc780 <os_mutex_unlock+0xc>)
   bc778:	681b      	ldr	r3, [r3, #0]
   bc77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc77c:	9301      	str	r3, [sp, #4]
   bc77e:	bd08      	pop	{r3, pc}
   bc780:	00030248 	.word	0x00030248

000bc784 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bc784:	b508      	push	{r3, lr}
   bc786:	4b02      	ldr	r3, [pc, #8]	; (bc790 <os_mutex_recursive_create+0xc>)
   bc788:	681b      	ldr	r3, [r3, #0]
   bc78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc78c:	9301      	str	r3, [sp, #4]
   bc78e:	bd08      	pop	{r3, pc}
   bc790:	00030248 	.word	0x00030248

000bc794 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bc794:	b508      	push	{r3, lr}
   bc796:	4b02      	ldr	r3, [pc, #8]	; (bc7a0 <os_mutex_recursive_destroy+0xc>)
   bc798:	681b      	ldr	r3, [r3, #0]
   bc79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc79c:	9301      	str	r3, [sp, #4]
   bc79e:	bd08      	pop	{r3, pc}
   bc7a0:	00030248 	.word	0x00030248

000bc7a4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bc7a4:	b508      	push	{r3, lr}
   bc7a6:	4b02      	ldr	r3, [pc, #8]	; (bc7b0 <os_mutex_recursive_lock+0xc>)
   bc7a8:	681b      	ldr	r3, [r3, #0]
   bc7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc7ac:	9301      	str	r3, [sp, #4]
   bc7ae:	bd08      	pop	{r3, pc}
   bc7b0:	00030248 	.word	0x00030248

000bc7b4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bc7b4:	b508      	push	{r3, lr}
   bc7b6:	4b02      	ldr	r3, [pc, #8]	; (bc7c0 <os_mutex_recursive_unlock+0xc>)
   bc7b8:	681b      	ldr	r3, [r3, #0]
   bc7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc7bc:	9301      	str	r3, [sp, #4]
   bc7be:	bd08      	pop	{r3, pc}
   bc7c0:	00030248 	.word	0x00030248

000bc7c4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bc7c4:	b508      	push	{r3, lr}
   bc7c6:	4b02      	ldr	r3, [pc, #8]	; (bc7d0 <os_thread_exit+0xc>)
   bc7c8:	681b      	ldr	r3, [r3, #0]
   bc7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc7cc:	9301      	str	r3, [sp, #4]
   bc7ce:	bd08      	pop	{r3, pc}
   bc7d0:	00030248 	.word	0x00030248

000bc7d4 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bc7d4:	b508      	push	{r3, lr}
   bc7d6:	4b02      	ldr	r3, [pc, #8]	; (bc7e0 <HAL_Core_Runtime_Info+0xc>)
   bc7d8:	681b      	ldr	r3, [r3, #0]
   bc7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc7dc:	9301      	str	r3, [sp, #4]
   bc7de:	bd08      	pop	{r3, pc}
   bc7e0:	00030234 	.word	0x00030234

000bc7e4 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bc7e4:	b508      	push	{r3, lr}
   bc7e6:	4b02      	ldr	r3, [pc, #8]	; (bc7f0 <HAL_Feature_Set+0xc>)
   bc7e8:	681b      	ldr	r3, [r3, #0]
   bc7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc7ec:	9301      	str	r3, [sp, #4]
   bc7ee:	bd08      	pop	{r3, pc}
   bc7f0:	00030234 	.word	0x00030234

000bc7f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bc7f4:	b508      	push	{r3, lr}
   bc7f6:	4b02      	ldr	r3, [pc, #8]	; (bc800 <HAL_RNG_GetRandomNumber+0xc>)
   bc7f8:	681b      	ldr	r3, [r3, #0]
   bc7fa:	685b      	ldr	r3, [r3, #4]
   bc7fc:	9301      	str	r3, [sp, #4]
   bc7fe:	bd08      	pop	{r3, pc}
   bc800:	00030218 	.word	0x00030218

000bc804 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bc804:	b508      	push	{r3, lr}
   bc806:	4b02      	ldr	r3, [pc, #8]	; (bc810 <HAL_Delay_Milliseconds+0xc>)
   bc808:	681b      	ldr	r3, [r3, #0]
   bc80a:	689b      	ldr	r3, [r3, #8]
   bc80c:	9301      	str	r3, [sp, #4]
   bc80e:	bd08      	pop	{r3, pc}
   bc810:	00030218 	.word	0x00030218

000bc814 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bc814:	b508      	push	{r3, lr}
   bc816:	4b02      	ldr	r3, [pc, #8]	; (bc820 <HAL_Delay_Microseconds+0xc>)
   bc818:	681b      	ldr	r3, [r3, #0]
   bc81a:	68db      	ldr	r3, [r3, #12]
   bc81c:	9301      	str	r3, [sp, #4]
   bc81e:	bd08      	pop	{r3, pc}
   bc820:	00030218 	.word	0x00030218

000bc824 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bc824:	b508      	push	{r3, lr}
   bc826:	4b02      	ldr	r3, [pc, #8]	; (bc830 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bc828:	681b      	ldr	r3, [r3, #0]
   bc82a:	695b      	ldr	r3, [r3, #20]
   bc82c:	9301      	str	r3, [sp, #4]
   bc82e:	bd08      	pop	{r3, pc}
   bc830:	00030218 	.word	0x00030218

000bc834 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bc834:	b508      	push	{r3, lr}
   bc836:	4b02      	ldr	r3, [pc, #8]	; (bc840 <hal_rtc_time_is_valid+0xc>)
   bc838:	681b      	ldr	r3, [r3, #0]
   bc83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc83c:	9301      	str	r3, [sp, #4]
   bc83e:	bd08      	pop	{r3, pc}
   bc840:	00030218 	.word	0x00030218

000bc844 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bc844:	b508      	push	{r3, lr}
   bc846:	4b02      	ldr	r3, [pc, #8]	; (bc850 <hal_timer_millis+0xc>)
   bc848:	681b      	ldr	r3, [r3, #0]
   bc84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bc84c:	9301      	str	r3, [sp, #4]
   bc84e:	bd08      	pop	{r3, pc}
   bc850:	00030218 	.word	0x00030218

000bc854 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bc854:	b508      	push	{r3, lr}
   bc856:	4b02      	ldr	r3, [pc, #8]	; (bc860 <hal_rtc_get_time+0xc>)
   bc858:	681b      	ldr	r3, [r3, #0]
   bc85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc85c:	9301      	str	r3, [sp, #4]
   bc85e:	bd08      	pop	{r3, pc}
   bc860:	00030218 	.word	0x00030218

000bc864 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bc864:	b508      	push	{r3, lr}
   bc866:	4b02      	ldr	r3, [pc, #8]	; (bc870 <hal_rtc_set_time+0xc>)
   bc868:	681b      	ldr	r3, [r3, #0]
   bc86a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bc86c:	9301      	str	r3, [sp, #4]
   bc86e:	bd08      	pop	{r3, pc}
   bc870:	00030218 	.word	0x00030218

000bc874 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bc874:	b508      	push	{r3, lr}
   bc876:	4b02      	ldr	r3, [pc, #8]	; (bc880 <HAL_Validate_Pin_Function+0xc>)
   bc878:	681b      	ldr	r3, [r3, #0]
   bc87a:	685b      	ldr	r3, [r3, #4]
   bc87c:	9301      	str	r3, [sp, #4]
   bc87e:	bd08      	pop	{r3, pc}
   bc880:	0003022c 	.word	0x0003022c

000bc884 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bc884:	b508      	push	{r3, lr}
   bc886:	4b02      	ldr	r3, [pc, #8]	; (bc890 <HAL_Pin_Mode+0xc>)
   bc888:	681b      	ldr	r3, [r3, #0]
   bc88a:	689b      	ldr	r3, [r3, #8]
   bc88c:	9301      	str	r3, [sp, #4]
   bc88e:	bd08      	pop	{r3, pc}
   bc890:	0003022c 	.word	0x0003022c

000bc894 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bc894:	b508      	push	{r3, lr}
   bc896:	4b02      	ldr	r3, [pc, #8]	; (bc8a0 <HAL_Get_Pin_Mode+0xc>)
   bc898:	681b      	ldr	r3, [r3, #0]
   bc89a:	68db      	ldr	r3, [r3, #12]
   bc89c:	9301      	str	r3, [sp, #4]
   bc89e:	bd08      	pop	{r3, pc}
   bc8a0:	0003022c 	.word	0x0003022c

000bc8a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bc8a4:	b508      	push	{r3, lr}
   bc8a6:	4b02      	ldr	r3, [pc, #8]	; (bc8b0 <HAL_GPIO_Write+0xc>)
   bc8a8:	681b      	ldr	r3, [r3, #0]
   bc8aa:	691b      	ldr	r3, [r3, #16]
   bc8ac:	9301      	str	r3, [sp, #4]
   bc8ae:	bd08      	pop	{r3, pc}
   bc8b0:	0003022c 	.word	0x0003022c

000bc8b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bc8b4:	b508      	push	{r3, lr}
   bc8b6:	4b02      	ldr	r3, [pc, #8]	; (bc8c0 <HAL_GPIO_Read+0xc>)
   bc8b8:	681b      	ldr	r3, [r3, #0]
   bc8ba:	695b      	ldr	r3, [r3, #20]
   bc8bc:	9301      	str	r3, [sp, #4]
   bc8be:	bd08      	pop	{r3, pc}
   bc8c0:	0003022c 	.word	0x0003022c

000bc8c4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bc8c4:	b508      	push	{r3, lr}
   bc8c6:	4b02      	ldr	r3, [pc, #8]	; (bc8d0 <HAL_Interrupts_Attach+0xc>)
   bc8c8:	681b      	ldr	r3, [r3, #0]
   bc8ca:	699b      	ldr	r3, [r3, #24]
   bc8cc:	9301      	str	r3, [sp, #4]
   bc8ce:	bd08      	pop	{r3, pc}
   bc8d0:	0003022c 	.word	0x0003022c

000bc8d4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bc8d4:	b508      	push	{r3, lr}
   bc8d6:	4b02      	ldr	r3, [pc, #8]	; (bc8e0 <HAL_Interrupts_Detach+0xc>)
   bc8d8:	681b      	ldr	r3, [r3, #0]
   bc8da:	69db      	ldr	r3, [r3, #28]
   bc8dc:	9301      	str	r3, [sp, #4]
   bc8de:	bd08      	pop	{r3, pc}
   bc8e0:	0003022c 	.word	0x0003022c

000bc8e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bc8e4:	b508      	push	{r3, lr}
   bc8e6:	4b02      	ldr	r3, [pc, #8]	; (bc8f0 <hal_adc_read+0xc>)
   bc8e8:	681b      	ldr	r3, [r3, #0]
   bc8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc8ec:	9301      	str	r3, [sp, #4]
   bc8ee:	bd08      	pop	{r3, pc}
   bc8f0:	0003022c 	.word	0x0003022c

000bc8f4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bc8f4:	b508      	push	{r3, lr}
   bc8f6:	4b02      	ldr	r3, [pc, #8]	; (bc900 <hal_i2c_begin+0xc>)
   bc8f8:	681b      	ldr	r3, [r3, #0]
   bc8fa:	68db      	ldr	r3, [r3, #12]
   bc8fc:	9301      	str	r3, [sp, #4]
   bc8fe:	bd08      	pop	{r3, pc}
   bc900:	00030228 	.word	0x00030228

000bc904 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bc904:	b508      	push	{r3, lr}
   bc906:	4b02      	ldr	r3, [pc, #8]	; (bc910 <hal_i2c_begin_transmission+0xc>)
   bc908:	681b      	ldr	r3, [r3, #0]
   bc90a:	699b      	ldr	r3, [r3, #24]
   bc90c:	9301      	str	r3, [sp, #4]
   bc90e:	bd08      	pop	{r3, pc}
   bc910:	00030228 	.word	0x00030228

000bc914 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bc914:	b508      	push	{r3, lr}
   bc916:	4b02      	ldr	r3, [pc, #8]	; (bc920 <hal_i2c_end_transmission+0xc>)
   bc918:	681b      	ldr	r3, [r3, #0]
   bc91a:	69db      	ldr	r3, [r3, #28]
   bc91c:	9301      	str	r3, [sp, #4]
   bc91e:	bd08      	pop	{r3, pc}
   bc920:	00030228 	.word	0x00030228

000bc924 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bc924:	b508      	push	{r3, lr}
   bc926:	4b02      	ldr	r3, [pc, #8]	; (bc930 <hal_i2c_write+0xc>)
   bc928:	681b      	ldr	r3, [r3, #0]
   bc92a:	6a1b      	ldr	r3, [r3, #32]
   bc92c:	9301      	str	r3, [sp, #4]
   bc92e:	bd08      	pop	{r3, pc}
   bc930:	00030228 	.word	0x00030228

000bc934 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bc934:	b508      	push	{r3, lr}
   bc936:	4b02      	ldr	r3, [pc, #8]	; (bc940 <hal_i2c_available+0xc>)
   bc938:	681b      	ldr	r3, [r3, #0]
   bc93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc93c:	9301      	str	r3, [sp, #4]
   bc93e:	bd08      	pop	{r3, pc}
   bc940:	00030228 	.word	0x00030228

000bc944 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bc944:	b508      	push	{r3, lr}
   bc946:	4b02      	ldr	r3, [pc, #8]	; (bc950 <hal_i2c_read+0xc>)
   bc948:	681b      	ldr	r3, [r3, #0]
   bc94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc94c:	9301      	str	r3, [sp, #4]
   bc94e:	bd08      	pop	{r3, pc}
   bc950:	00030228 	.word	0x00030228

000bc954 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bc954:	b508      	push	{r3, lr}
   bc956:	4b02      	ldr	r3, [pc, #8]	; (bc960 <hal_i2c_peek+0xc>)
   bc958:	681b      	ldr	r3, [r3, #0]
   bc95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc95c:	9301      	str	r3, [sp, #4]
   bc95e:	bd08      	pop	{r3, pc}
   bc960:	00030228 	.word	0x00030228

000bc964 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bc964:	b508      	push	{r3, lr}
   bc966:	4b02      	ldr	r3, [pc, #8]	; (bc970 <hal_i2c_flush+0xc>)
   bc968:	681b      	ldr	r3, [r3, #0]
   bc96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc96c:	9301      	str	r3, [sp, #4]
   bc96e:	bd08      	pop	{r3, pc}
   bc970:	00030228 	.word	0x00030228

000bc974 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bc974:	b508      	push	{r3, lr}
   bc976:	4b02      	ldr	r3, [pc, #8]	; (bc980 <hal_i2c_is_enabled+0xc>)
   bc978:	681b      	ldr	r3, [r3, #0]
   bc97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc97c:	9301      	str	r3, [sp, #4]
   bc97e:	bd08      	pop	{r3, pc}
   bc980:	00030228 	.word	0x00030228

000bc984 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bc984:	b508      	push	{r3, lr}
   bc986:	4b02      	ldr	r3, [pc, #8]	; (bc990 <hal_i2c_init+0xc>)
   bc988:	681b      	ldr	r3, [r3, #0]
   bc98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc98c:	9301      	str	r3, [sp, #4]
   bc98e:	bd08      	pop	{r3, pc}
   bc990:	00030228 	.word	0x00030228

000bc994 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bc994:	b508      	push	{r3, lr}
   bc996:	4b02      	ldr	r3, [pc, #8]	; (bc9a0 <hal_i2c_lock+0xc>)
   bc998:	681b      	ldr	r3, [r3, #0]
   bc99a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc99c:	9301      	str	r3, [sp, #4]
   bc99e:	bd08      	pop	{r3, pc}
   bc9a0:	00030228 	.word	0x00030228

000bc9a4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bc9a4:	b508      	push	{r3, lr}
   bc9a6:	4b02      	ldr	r3, [pc, #8]	; (bc9b0 <hal_i2c_unlock+0xc>)
   bc9a8:	681b      	ldr	r3, [r3, #0]
   bc9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc9ac:	9301      	str	r3, [sp, #4]
   bc9ae:	bd08      	pop	{r3, pc}
   bc9b0:	00030228 	.word	0x00030228

000bc9b4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bc9b4:	b508      	push	{r3, lr}
   bc9b6:	4b02      	ldr	r3, [pc, #8]	; (bc9c0 <hal_i2c_request_ex+0xc>)
   bc9b8:	681b      	ldr	r3, [r3, #0]
   bc9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc9bc:	9301      	str	r3, [sp, #4]
   bc9be:	bd08      	pop	{r3, pc}
   bc9c0:	00030228 	.word	0x00030228

000bc9c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bc9c4:	b508      	push	{r3, lr}
   bc9c6:	4b02      	ldr	r3, [pc, #8]	; (bc9d0 <inet_inet_ntop+0xc>)
   bc9c8:	681b      	ldr	r3, [r3, #0]
   bc9ca:	695b      	ldr	r3, [r3, #20]
   bc9cc:	9301      	str	r3, [sp, #4]
   bc9ce:	bd08      	pop	{r3, pc}
   bc9d0:	00030264 	.word	0x00030264

000bc9d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bc9d4:	b508      	push	{r3, lr}
   bc9d6:	4b02      	ldr	r3, [pc, #8]	; (bc9e0 <netdb_freeaddrinfo+0xc>)
   bc9d8:	681b      	ldr	r3, [r3, #0]
   bc9da:	689b      	ldr	r3, [r3, #8]
   bc9dc:	9301      	str	r3, [sp, #4]
   bc9de:	bd08      	pop	{r3, pc}
   bc9e0:	00030268 	.word	0x00030268

000bc9e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bc9e4:	b508      	push	{r3, lr}
   bc9e6:	4b02      	ldr	r3, [pc, #8]	; (bc9f0 <netdb_getaddrinfo+0xc>)
   bc9e8:	681b      	ldr	r3, [r3, #0]
   bc9ea:	68db      	ldr	r3, [r3, #12]
   bc9ec:	9301      	str	r3, [sp, #4]
   bc9ee:	bd08      	pop	{r3, pc}
   bc9f0:	00030268 	.word	0x00030268

000bc9f4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bc9f4:	b508      	push	{r3, lr}
   bc9f6:	4b02      	ldr	r3, [pc, #8]	; (bca00 <hal_spi_begin+0xc>)
   bc9f8:	681b      	ldr	r3, [r3, #0]
   bc9fa:	681b      	ldr	r3, [r3, #0]
   bc9fc:	9301      	str	r3, [sp, #4]
   bc9fe:	bd08      	pop	{r3, pc}
   bca00:	00030230 	.word	0x00030230

000bca04 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bca04:	b508      	push	{r3, lr}
   bca06:	4b02      	ldr	r3, [pc, #8]	; (bca10 <hal_spi_end+0xc>)
   bca08:	681b      	ldr	r3, [r3, #0]
   bca0a:	685b      	ldr	r3, [r3, #4]
   bca0c:	9301      	str	r3, [sp, #4]
   bca0e:	bd08      	pop	{r3, pc}
   bca10:	00030230 	.word	0x00030230

000bca14 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bca14:	b508      	push	{r3, lr}
   bca16:	4b02      	ldr	r3, [pc, #8]	; (bca20 <hal_spi_transfer+0xc>)
   bca18:	681b      	ldr	r3, [r3, #0]
   bca1a:	695b      	ldr	r3, [r3, #20]
   bca1c:	9301      	str	r3, [sp, #4]
   bca1e:	bd08      	pop	{r3, pc}
   bca20:	00030230 	.word	0x00030230

000bca24 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bca24:	b508      	push	{r3, lr}
   bca26:	4b02      	ldr	r3, [pc, #8]	; (bca30 <hal_spi_init+0xc>)
   bca28:	681b      	ldr	r3, [r3, #0]
   bca2a:	69db      	ldr	r3, [r3, #28]
   bca2c:	9301      	str	r3, [sp, #4]
   bca2e:	bd08      	pop	{r3, pc}
   bca30:	00030230 	.word	0x00030230

000bca34 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bca34:	b508      	push	{r3, lr}
   bca36:	4b02      	ldr	r3, [pc, #8]	; (bca40 <hal_spi_is_enabled+0xc>)
   bca38:	681b      	ldr	r3, [r3, #0]
   bca3a:	6a1b      	ldr	r3, [r3, #32]
   bca3c:	9301      	str	r3, [sp, #4]
   bca3e:	bd08      	pop	{r3, pc}
   bca40:	00030230 	.word	0x00030230

000bca44 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bca44:	b508      	push	{r3, lr}
   bca46:	4b02      	ldr	r3, [pc, #8]	; (bca50 <hal_spi_info+0xc>)
   bca48:	681b      	ldr	r3, [r3, #0]
   bca4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bca4c:	9301      	str	r3, [sp, #4]
   bca4e:	bd08      	pop	{r3, pc}
   bca50:	00030230 	.word	0x00030230

000bca54 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bca54:	b508      	push	{r3, lr}
   bca56:	4b02      	ldr	r3, [pc, #8]	; (bca60 <hal_spi_set_settings+0xc>)
   bca58:	681b      	ldr	r3, [r3, #0]
   bca5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bca5c:	9301      	str	r3, [sp, #4]
   bca5e:	bd08      	pop	{r3, pc}
   bca60:	00030230 	.word	0x00030230

000bca64 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bca64:	b508      	push	{r3, lr}
   bca66:	4b02      	ldr	r3, [pc, #8]	; (bca70 <hal_spi_acquire+0xc>)
   bca68:	681b      	ldr	r3, [r3, #0]
   bca6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bca6c:	9301      	str	r3, [sp, #4]
   bca6e:	bd08      	pop	{r3, pc}
   bca70:	00030230 	.word	0x00030230

000bca74 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bca74:	b508      	push	{r3, lr}
   bca76:	4b02      	ldr	r3, [pc, #8]	; (bca80 <hal_spi_release+0xc>)
   bca78:	681b      	ldr	r3, [r3, #0]
   bca7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bca7c:	9301      	str	r3, [sp, #4]
   bca7e:	bd08      	pop	{r3, pc}
   bca80:	00030230 	.word	0x00030230

000bca84 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bca84:	b508      	push	{r3, lr}
   bca86:	4b02      	ldr	r3, [pc, #8]	; (bca90 <_open+0xc>)
   bca88:	681b      	ldr	r3, [r3, #0]
   bca8a:	681b      	ldr	r3, [r3, #0]
   bca8c:	9301      	str	r3, [sp, #4]
   bca8e:	bd08      	pop	{r3, pc}
   bca90:	00030284 	.word	0x00030284

000bca94 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bca94:	b508      	push	{r3, lr}
   bca96:	4b02      	ldr	r3, [pc, #8]	; (bcaa0 <_write+0xc>)
   bca98:	681b      	ldr	r3, [r3, #0]
   bca9a:	685b      	ldr	r3, [r3, #4]
   bca9c:	9301      	str	r3, [sp, #4]
   bca9e:	bd08      	pop	{r3, pc}
   bcaa0:	00030284 	.word	0x00030284

000bcaa4 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcaa4:	b508      	push	{r3, lr}
   bcaa6:	4b02      	ldr	r3, [pc, #8]	; (bcab0 <_read+0xc>)
   bcaa8:	681b      	ldr	r3, [r3, #0]
   bcaaa:	689b      	ldr	r3, [r3, #8]
   bcaac:	9301      	str	r3, [sp, #4]
   bcaae:	bd08      	pop	{r3, pc}
   bcab0:	00030284 	.word	0x00030284

000bcab4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcab4:	b508      	push	{r3, lr}
   bcab6:	4b02      	ldr	r3, [pc, #8]	; (bcac0 <_close+0xc>)
   bcab8:	681b      	ldr	r3, [r3, #0]
   bcaba:	68db      	ldr	r3, [r3, #12]
   bcabc:	9301      	str	r3, [sp, #4]
   bcabe:	bd08      	pop	{r3, pc}
   bcac0:	00030284 	.word	0x00030284

000bcac4 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bcac4:	b508      	push	{r3, lr}
   bcac6:	4b02      	ldr	r3, [pc, #8]	; (bcad0 <_fstat+0xc>)
   bcac8:	681b      	ldr	r3, [r3, #0]
   bcaca:	695b      	ldr	r3, [r3, #20]
   bcacc:	9301      	str	r3, [sp, #4]
   bcace:	bd08      	pop	{r3, pc}
   bcad0:	00030284 	.word	0x00030284

000bcad4 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bcad4:	b508      	push	{r3, lr}
   bcad6:	4b02      	ldr	r3, [pc, #8]	; (bcae0 <_lseek+0xc>)
   bcad8:	681b      	ldr	r3, [r3, #0]
   bcada:	6a1b      	ldr	r3, [r3, #32]
   bcadc:	9301      	str	r3, [sp, #4]
   bcade:	bd08      	pop	{r3, pc}
   bcae0:	00030284 	.word	0x00030284

000bcae4 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bcae4:	b508      	push	{r3, lr}
   bcae6:	4b02      	ldr	r3, [pc, #8]	; (bcaf0 <stat+0xc>)
   bcae8:	681b      	ldr	r3, [r3, #0]
   bcaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcaec:	9301      	str	r3, [sp, #4]
   bcaee:	bd08      	pop	{r3, pc}
   bcaf0:	00030284 	.word	0x00030284

000bcaf4 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bcaf4:	b508      	push	{r3, lr}
   bcaf6:	4b02      	ldr	r3, [pc, #8]	; (bcb00 <mkdir+0xc>)
   bcaf8:	681b      	ldr	r3, [r3, #0]
   bcafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcafc:	9301      	str	r3, [sp, #4]
   bcafe:	bd08      	pop	{r3, pc}
   bcb00:	00030284 	.word	0x00030284

000bcb04 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bcb04:	b508      	push	{r3, lr}
   bcb06:	4b02      	ldr	r3, [pc, #8]	; (bcb10 <_unlink+0xc>)
   bcb08:	681b      	ldr	r3, [r3, #0]
   bcb0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcb0c:	9301      	str	r3, [sp, #4]
   bcb0e:	bd08      	pop	{r3, pc}
   bcb10:	00030284 	.word	0x00030284

000bcb14 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bcb14:	b508      	push	{r3, lr}
   bcb16:	4b02      	ldr	r3, [pc, #8]	; (bcb20 <opendir+0xc>)
   bcb18:	681b      	ldr	r3, [r3, #0]
   bcb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcb1c:	9301      	str	r3, [sp, #4]
   bcb1e:	bd08      	pop	{r3, pc}
   bcb20:	00030284 	.word	0x00030284

000bcb24 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bcb24:	b508      	push	{r3, lr}
   bcb26:	4b02      	ldr	r3, [pc, #8]	; (bcb30 <readdir+0xc>)
   bcb28:	681b      	ldr	r3, [r3, #0]
   bcb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcb2c:	9301      	str	r3, [sp, #4]
   bcb2e:	bd08      	pop	{r3, pc}
   bcb30:	00030284 	.word	0x00030284

000bcb34 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bcb34:	b508      	push	{r3, lr}
   bcb36:	4b02      	ldr	r3, [pc, #8]	; (bcb40 <closedir+0xc>)
   bcb38:	681b      	ldr	r3, [r3, #0]
   bcb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcb3c:	9301      	str	r3, [sp, #4]
   bcb3e:	bd08      	pop	{r3, pc}
   bcb40:	00030284 	.word	0x00030284

000bcb44 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bcb44:	b508      	push	{r3, lr}
   bcb46:	4b02      	ldr	r3, [pc, #8]	; (bcb50 <hal_usart_end+0xc>)
   bcb48:	681b      	ldr	r3, [r3, #0]
   bcb4a:	689b      	ldr	r3, [r3, #8]
   bcb4c:	9301      	str	r3, [sp, #4]
   bcb4e:	bd08      	pop	{r3, pc}
   bcb50:	0003023c 	.word	0x0003023c

000bcb54 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bcb54:	b508      	push	{r3, lr}
   bcb56:	4b02      	ldr	r3, [pc, #8]	; (bcb60 <hal_usart_write+0xc>)
   bcb58:	681b      	ldr	r3, [r3, #0]
   bcb5a:	68db      	ldr	r3, [r3, #12]
   bcb5c:	9301      	str	r3, [sp, #4]
   bcb5e:	bd08      	pop	{r3, pc}
   bcb60:	0003023c 	.word	0x0003023c

000bcb64 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bcb64:	b508      	push	{r3, lr}
   bcb66:	4b02      	ldr	r3, [pc, #8]	; (bcb70 <hal_usart_available+0xc>)
   bcb68:	681b      	ldr	r3, [r3, #0]
   bcb6a:	691b      	ldr	r3, [r3, #16]
   bcb6c:	9301      	str	r3, [sp, #4]
   bcb6e:	bd08      	pop	{r3, pc}
   bcb70:	0003023c 	.word	0x0003023c

000bcb74 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bcb74:	b508      	push	{r3, lr}
   bcb76:	4b02      	ldr	r3, [pc, #8]	; (bcb80 <hal_usart_read+0xc>)
   bcb78:	681b      	ldr	r3, [r3, #0]
   bcb7a:	695b      	ldr	r3, [r3, #20]
   bcb7c:	9301      	str	r3, [sp, #4]
   bcb7e:	bd08      	pop	{r3, pc}
   bcb80:	0003023c 	.word	0x0003023c

000bcb84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bcb84:	b508      	push	{r3, lr}
   bcb86:	4b02      	ldr	r3, [pc, #8]	; (bcb90 <hal_usart_peek+0xc>)
   bcb88:	681b      	ldr	r3, [r3, #0]
   bcb8a:	699b      	ldr	r3, [r3, #24]
   bcb8c:	9301      	str	r3, [sp, #4]
   bcb8e:	bd08      	pop	{r3, pc}
   bcb90:	0003023c 	.word	0x0003023c

000bcb94 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bcb94:	b508      	push	{r3, lr}
   bcb96:	4b02      	ldr	r3, [pc, #8]	; (bcba0 <hal_usart_flush+0xc>)
   bcb98:	681b      	ldr	r3, [r3, #0]
   bcb9a:	69db      	ldr	r3, [r3, #28]
   bcb9c:	9301      	str	r3, [sp, #4]
   bcb9e:	bd08      	pop	{r3, pc}
   bcba0:	0003023c 	.word	0x0003023c

000bcba4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bcba4:	b508      	push	{r3, lr}
   bcba6:	4b02      	ldr	r3, [pc, #8]	; (bcbb0 <hal_usart_is_enabled+0xc>)
   bcba8:	681b      	ldr	r3, [r3, #0]
   bcbaa:	6a1b      	ldr	r3, [r3, #32]
   bcbac:	9301      	str	r3, [sp, #4]
   bcbae:	bd08      	pop	{r3, pc}
   bcbb0:	0003023c 	.word	0x0003023c

000bcbb4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bcbb4:	b508      	push	{r3, lr}
   bcbb6:	4b02      	ldr	r3, [pc, #8]	; (bcbc0 <hal_usart_available_data_for_write+0xc>)
   bcbb8:	681b      	ldr	r3, [r3, #0]
   bcbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcbbc:	9301      	str	r3, [sp, #4]
   bcbbe:	bd08      	pop	{r3, pc}
   bcbc0:	0003023c 	.word	0x0003023c

000bcbc4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bcbc4:	b508      	push	{r3, lr}
   bcbc6:	4b02      	ldr	r3, [pc, #8]	; (bcbd0 <hal_usart_begin_config+0xc>)
   bcbc8:	681b      	ldr	r3, [r3, #0]
   bcbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcbcc:	9301      	str	r3, [sp, #4]
   bcbce:	bd08      	pop	{r3, pc}
   bcbd0:	0003023c 	.word	0x0003023c

000bcbd4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bcbd4:	b508      	push	{r3, lr}
   bcbd6:	4b02      	ldr	r3, [pc, #8]	; (bcbe0 <hal_usart_init_ex+0xc>)
   bcbd8:	681b      	ldr	r3, [r3, #0]
   bcbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcbdc:	9301      	str	r3, [sp, #4]
   bcbde:	bd08      	pop	{r3, pc}
   bcbe0:	0003023c 	.word	0x0003023c

000bcbe4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bcbe4:	b508      	push	{r3, lr}
   bcbe6:	4b02      	ldr	r3, [pc, #8]	; (bcbf0 <HAL_USB_USART_Init+0xc>)
   bcbe8:	681b      	ldr	r3, [r3, #0]
   bcbea:	681b      	ldr	r3, [r3, #0]
   bcbec:	9301      	str	r3, [sp, #4]
   bcbee:	bd08      	pop	{r3, pc}
   bcbf0:	0003024c 	.word	0x0003024c

000bcbf4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bcbf4:	b508      	push	{r3, lr}
   bcbf6:	4b02      	ldr	r3, [pc, #8]	; (bcc00 <HAL_USB_USART_Begin+0xc>)
   bcbf8:	681b      	ldr	r3, [r3, #0]
   bcbfa:	685b      	ldr	r3, [r3, #4]
   bcbfc:	9301      	str	r3, [sp, #4]
   bcbfe:	bd08      	pop	{r3, pc}
   bcc00:	0003024c 	.word	0x0003024c

000bcc04 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bcc04:	b508      	push	{r3, lr}
   bcc06:	4b02      	ldr	r3, [pc, #8]	; (bcc10 <HAL_USB_USART_End+0xc>)
   bcc08:	681b      	ldr	r3, [r3, #0]
   bcc0a:	689b      	ldr	r3, [r3, #8]
   bcc0c:	9301      	str	r3, [sp, #4]
   bcc0e:	bd08      	pop	{r3, pc}
   bcc10:	0003024c 	.word	0x0003024c

000bcc14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bcc14:	b508      	push	{r3, lr}
   bcc16:	4b02      	ldr	r3, [pc, #8]	; (bcc20 <HAL_USB_USART_Available_Data+0xc>)
   bcc18:	681b      	ldr	r3, [r3, #0]
   bcc1a:	691b      	ldr	r3, [r3, #16]
   bcc1c:	9301      	str	r3, [sp, #4]
   bcc1e:	bd08      	pop	{r3, pc}
   bcc20:	0003024c 	.word	0x0003024c

000bcc24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bcc24:	b508      	push	{r3, lr}
   bcc26:	4b02      	ldr	r3, [pc, #8]	; (bcc30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bcc28:	681b      	ldr	r3, [r3, #0]
   bcc2a:	695b      	ldr	r3, [r3, #20]
   bcc2c:	9301      	str	r3, [sp, #4]
   bcc2e:	bd08      	pop	{r3, pc}
   bcc30:	0003024c 	.word	0x0003024c

000bcc34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcc34:	b508      	push	{r3, lr}
   bcc36:	4b02      	ldr	r3, [pc, #8]	; (bcc40 <HAL_USB_USART_Receive_Data+0xc>)
   bcc38:	681b      	ldr	r3, [r3, #0]
   bcc3a:	699b      	ldr	r3, [r3, #24]
   bcc3c:	9301      	str	r3, [sp, #4]
   bcc3e:	bd08      	pop	{r3, pc}
   bcc40:	0003024c 	.word	0x0003024c

000bcc44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcc44:	b508      	push	{r3, lr}
   bcc46:	4b02      	ldr	r3, [pc, #8]	; (bcc50 <HAL_USB_USART_Send_Data+0xc>)
   bcc48:	681b      	ldr	r3, [r3, #0]
   bcc4a:	69db      	ldr	r3, [r3, #28]
   bcc4c:	9301      	str	r3, [sp, #4]
   bcc4e:	bd08      	pop	{r3, pc}
   bcc50:	0003024c 	.word	0x0003024c

000bcc54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bcc54:	b508      	push	{r3, lr}
   bcc56:	4b02      	ldr	r3, [pc, #8]	; (bcc60 <HAL_USB_USART_Flush_Data+0xc>)
   bcc58:	681b      	ldr	r3, [r3, #0]
   bcc5a:	6a1b      	ldr	r3, [r3, #32]
   bcc5c:	9301      	str	r3, [sp, #4]
   bcc5e:	bd08      	pop	{r3, pc}
   bcc60:	0003024c 	.word	0x0003024c

000bcc64 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bcc64:	b508      	push	{r3, lr}
   bcc66:	4b02      	ldr	r3, [pc, #8]	; (bcc70 <HAL_USB_USART_Is_Connected+0xc>)
   bcc68:	681b      	ldr	r3, [r3, #0]
   bcc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcc6c:	9301      	str	r3, [sp, #4]
   bcc6e:	bd08      	pop	{r3, pc}
   bcc70:	0003024c 	.word	0x0003024c

000bcc74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bcc74:	b508      	push	{r3, lr}
   bcc76:	4b02      	ldr	r3, [pc, #8]	; (bcc80 <panic_+0xc>)
   bcc78:	681b      	ldr	r3, [r3, #0]
   bcc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcc7c:	9301      	str	r3, [sp, #4]
   bcc7e:	bd08      	pop	{r3, pc}
   bcc80:	00030260 	.word	0x00030260

000bcc84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bcc84:	b508      	push	{r3, lr}
   bcc86:	4b02      	ldr	r3, [pc, #8]	; (bcc90 <log_message+0xc>)
   bcc88:	681b      	ldr	r3, [r3, #0]
   bcc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcc8c:	9301      	str	r3, [sp, #4]
   bcc8e:	bd08      	pop	{r3, pc}
   bcc90:	00030260 	.word	0x00030260

000bcc94 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bcc94:	b508      	push	{r3, lr}
   bcc96:	4b02      	ldr	r3, [pc, #8]	; (bcca0 <log_message_v+0xc>)
   bcc98:	681b      	ldr	r3, [r3, #0]
   bcc9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcc9c:	9301      	str	r3, [sp, #4]
   bcc9e:	bd08      	pop	{r3, pc}
   bcca0:	00030260 	.word	0x00030260

000bcca4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bcca4:	b508      	push	{r3, lr}
   bcca6:	4b02      	ldr	r3, [pc, #8]	; (bccb0 <log_level_name+0xc>)
   bcca8:	681b      	ldr	r3, [r3, #0]
   bccaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bccac:	9301      	str	r3, [sp, #4]
   bccae:	bd08      	pop	{r3, pc}
   bccb0:	00030260 	.word	0x00030260

000bccb4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bccb4:	b508      	push	{r3, lr}
   bccb6:	4b02      	ldr	r3, [pc, #8]	; (bccc0 <log_set_callbacks+0xc>)
   bccb8:	681b      	ldr	r3, [r3, #0]
   bccba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bccbc:	9301      	str	r3, [sp, #4]
   bccbe:	bd08      	pop	{r3, pc}
   bccc0:	00030260 	.word	0x00030260

000bccc4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bccc4:	b508      	push	{r3, lr}
   bccc6:	4b03      	ldr	r3, [pc, #12]	; (bccd4 <diag_get_source+0x10>)
   bccc8:	681b      	ldr	r3, [r3, #0]
   bccca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bccce:	9301      	str	r3, [sp, #4]
   bccd0:	bd08      	pop	{r3, pc}
   bccd2:	0000      	.short	0x0000
   bccd4:	00030260 	.word	0x00030260

000bccd8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bccd8:	b508      	push	{r3, lr}
   bccda:	4b02      	ldr	r3, [pc, #8]	; (bcce4 <system_mode+0xc>)
   bccdc:	681b      	ldr	r3, [r3, #0]
   bccde:	681b      	ldr	r3, [r3, #0]
   bcce0:	9301      	str	r3, [sp, #4]
   bcce2:	bd08      	pop	{r3, pc}
   bcce4:	00030220 	.word	0x00030220

000bcce8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bcce8:	b508      	push	{r3, lr}
   bccea:	4b02      	ldr	r3, [pc, #8]	; (bccf4 <set_system_mode+0xc>)
   bccec:	681b      	ldr	r3, [r3, #0]
   bccee:	685b      	ldr	r3, [r3, #4]
   bccf0:	9301      	str	r3, [sp, #4]
   bccf2:	bd08      	pop	{r3, pc}
   bccf4:	00030220 	.word	0x00030220

000bccf8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bccf8:	b508      	push	{r3, lr}
   bccfa:	4b02      	ldr	r3, [pc, #8]	; (bcd04 <system_delay_ms+0xc>)
   bccfc:	681b      	ldr	r3, [r3, #0]
   bccfe:	695b      	ldr	r3, [r3, #20]
   bcd00:	9301      	str	r3, [sp, #4]
   bcd02:	bd08      	pop	{r3, pc}
   bcd04:	00030220 	.word	0x00030220

000bcd08 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bcd08:	b508      	push	{r3, lr}
   bcd0a:	4b02      	ldr	r3, [pc, #8]	; (bcd14 <system_subscribe_event+0xc>)
   bcd0c:	681b      	ldr	r3, [r3, #0]
   bcd0e:	6a1b      	ldr	r3, [r3, #32]
   bcd10:	9301      	str	r3, [sp, #4]
   bcd12:	bd08      	pop	{r3, pc}
   bcd14:	00030220 	.word	0x00030220

000bcd18 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bcd18:	b508      	push	{r3, lr}
   bcd1a:	4b02      	ldr	r3, [pc, #8]	; (bcd24 <system_thread_set_state+0xc>)
   bcd1c:	681b      	ldr	r3, [r3, #0]
   bcd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcd20:	9301      	str	r3, [sp, #4]
   bcd22:	bd08      	pop	{r3, pc}
   bcd24:	00030220 	.word	0x00030220

000bcd28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bcd28:	b508      	push	{r3, lr}
   bcd2a:	4b02      	ldr	r3, [pc, #8]	; (bcd34 <application_thread_current+0xc>)
   bcd2c:	681b      	ldr	r3, [r3, #0]
   bcd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcd30:	9301      	str	r3, [sp, #4]
   bcd32:	bd08      	pop	{r3, pc}
   bcd34:	00030220 	.word	0x00030220

000bcd38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bcd38:	b508      	push	{r3, lr}
   bcd3a:	4b02      	ldr	r3, [pc, #8]	; (bcd44 <application_thread_invoke+0xc>)
   bcd3c:	681b      	ldr	r3, [r3, #0]
   bcd3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcd40:	9301      	str	r3, [sp, #4]
   bcd42:	bd08      	pop	{r3, pc}
   bcd44:	00030220 	.word	0x00030220

000bcd48 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bcd48:	b508      	push	{r3, lr}
   bcd4a:	4b02      	ldr	r3, [pc, #8]	; (bcd54 <system_thread_get_state+0xc>)
   bcd4c:	681b      	ldr	r3, [r3, #0]
   bcd4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcd50:	9301      	str	r3, [sp, #4]
   bcd52:	bd08      	pop	{r3, pc}
   bcd54:	00030220 	.word	0x00030220

000bcd58 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bcd58:	b508      	push	{r3, lr}
   bcd5a:	4b02      	ldr	r3, [pc, #8]	; (bcd64 <system_notify_time_changed+0xc>)
   bcd5c:	681b      	ldr	r3, [r3, #0]
   bcd5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bcd60:	9301      	str	r3, [sp, #4]
   bcd62:	bd08      	pop	{r3, pc}
   bcd64:	00030220 	.word	0x00030220

000bcd68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bcd68:	b508      	push	{r3, lr}
   bcd6a:	4b03      	ldr	r3, [pc, #12]	; (bcd78 <system_ctrl_set_app_request_handler+0x10>)
   bcd6c:	681b      	ldr	r3, [r3, #0]
   bcd6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bcd72:	9301      	str	r3, [sp, #4]
   bcd74:	bd08      	pop	{r3, pc}
   bcd76:	0000      	.short	0x0000
   bcd78:	00030220 	.word	0x00030220

000bcd7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bcd7c:	b508      	push	{r3, lr}
   bcd7e:	4b03      	ldr	r3, [pc, #12]	; (bcd8c <system_ctrl_set_result+0x10>)
   bcd80:	681b      	ldr	r3, [r3, #0]
   bcd82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bcd86:	9301      	str	r3, [sp, #4]
   bcd88:	bd08      	pop	{r3, pc}
   bcd8a:	0000      	.short	0x0000
   bcd8c:	00030220 	.word	0x00030220

000bcd90 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bcd90:	b508      	push	{r3, lr}
   bcd92:	4b03      	ldr	r3, [pc, #12]	; (bcda0 <system_power_management_set_config+0x10>)
   bcd94:	681b      	ldr	r3, [r3, #0]
   bcd96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bcd9a:	9301      	str	r3, [sp, #4]
   bcd9c:	bd08      	pop	{r3, pc}
   bcd9e:	0000      	.short	0x0000
   bcda0:	00030220 	.word	0x00030220

000bcda4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bcda4:	b508      	push	{r3, lr}
   bcda6:	4b03      	ldr	r3, [pc, #12]	; (bcdb4 <system_sleep_ext+0x10>)
   bcda8:	681b      	ldr	r3, [r3, #0]
   bcdaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bcdae:	9301      	str	r3, [sp, #4]
   bcdb0:	bd08      	pop	{r3, pc}
   bcdb2:	0000      	.short	0x0000
   bcdb4:	00030220 	.word	0x00030220

000bcdb8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bcdb8:	b508      	push	{r3, lr}
   bcdba:	4b03      	ldr	r3, [pc, #12]	; (bcdc8 <system_reset+0x10>)
   bcdbc:	681b      	ldr	r3, [r3, #0]
   bcdbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bcdc2:	9301      	str	r3, [sp, #4]
   bcdc4:	bd08      	pop	{r3, pc}
   bcdc6:	0000      	.short	0x0000
   bcdc8:	00030220 	.word	0x00030220

000bcdcc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bcdcc:	b508      	push	{r3, lr}
   bcdce:	4b02      	ldr	r3, [pc, #8]	; (bcdd8 <spark_function+0xc>)
   bcdd0:	681b      	ldr	r3, [r3, #0]
   bcdd2:	685b      	ldr	r3, [r3, #4]
   bcdd4:	9301      	str	r3, [sp, #4]
   bcdd6:	bd08      	pop	{r3, pc}
   bcdd8:	00030244 	.word	0x00030244

000bcddc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bcddc:	b508      	push	{r3, lr}
   bcdde:	4b02      	ldr	r3, [pc, #8]	; (bcde8 <spark_process+0xc>)
   bcde0:	681b      	ldr	r3, [r3, #0]
   bcde2:	689b      	ldr	r3, [r3, #8]
   bcde4:	9301      	str	r3, [sp, #4]
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	00030244 	.word	0x00030244

000bcdec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bcdec:	b508      	push	{r3, lr}
   bcdee:	4b02      	ldr	r3, [pc, #8]	; (bcdf8 <spark_cloud_flag_connect+0xc>)
   bcdf0:	681b      	ldr	r3, [r3, #0]
   bcdf2:	68db      	ldr	r3, [r3, #12]
   bcdf4:	9301      	str	r3, [sp, #4]
   bcdf6:	bd08      	pop	{r3, pc}
   bcdf8:	00030244 	.word	0x00030244

000bcdfc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bcdfc:	b508      	push	{r3, lr}
   bcdfe:	4b02      	ldr	r3, [pc, #8]	; (bce08 <spark_cloud_flag_connected+0xc>)
   bce00:	681b      	ldr	r3, [r3, #0]
   bce02:	695b      	ldr	r3, [r3, #20]
   bce04:	9301      	str	r3, [sp, #4]
   bce06:	bd08      	pop	{r3, pc}
   bce08:	00030244 	.word	0x00030244

000bce0c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bce0c:	b508      	push	{r3, lr}
   bce0e:	4b02      	ldr	r3, [pc, #8]	; (bce18 <spark_deviceID+0xc>)
   bce10:	681b      	ldr	r3, [r3, #0]
   bce12:	69db      	ldr	r3, [r3, #28]
   bce14:	9301      	str	r3, [sp, #4]
   bce16:	bd08      	pop	{r3, pc}
   bce18:	00030244 	.word	0x00030244

000bce1c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bce1c:	b508      	push	{r3, lr}
   bce1e:	4b02      	ldr	r3, [pc, #8]	; (bce28 <spark_send_event+0xc>)
   bce20:	681b      	ldr	r3, [r3, #0]
   bce22:	6a1b      	ldr	r3, [r3, #32]
   bce24:	9301      	str	r3, [sp, #4]
   bce26:	bd08      	pop	{r3, pc}
   bce28:	00030244 	.word	0x00030244

000bce2c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bce2c:	b508      	push	{r3, lr}
   bce2e:	4b02      	ldr	r3, [pc, #8]	; (bce38 <spark_sync_time+0xc>)
   bce30:	681b      	ldr	r3, [r3, #0]
   bce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bce34:	9301      	str	r3, [sp, #4]
   bce36:	bd08      	pop	{r3, pc}
   bce38:	00030244 	.word	0x00030244

000bce3c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bce3c:	b508      	push	{r3, lr}
   bce3e:	4b02      	ldr	r3, [pc, #8]	; (bce48 <spark_sync_time_pending+0xc>)
   bce40:	681b      	ldr	r3, [r3, #0]
   bce42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	bd08      	pop	{r3, pc}
   bce48:	00030244 	.word	0x00030244

000bce4c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bce4c:	b508      	push	{r3, lr}
   bce4e:	4b02      	ldr	r3, [pc, #8]	; (bce58 <spark_sync_time_last+0xc>)
   bce50:	681b      	ldr	r3, [r3, #0]
   bce52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bce54:	9301      	str	r3, [sp, #4]
   bce56:	bd08      	pop	{r3, pc}
   bce58:	00030244 	.word	0x00030244

000bce5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bce5c:	b508      	push	{r3, lr}
   bce5e:	4b02      	ldr	r3, [pc, #8]	; (bce68 <spark_set_random_seed_from_cloud_handler+0xc>)
   bce60:	681b      	ldr	r3, [r3, #0]
   bce62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bce64:	9301      	str	r3, [sp, #4]
   bce66:	bd08      	pop	{r3, pc}
   bce68:	00030244 	.word	0x00030244

000bce6c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bce6c:	b508      	push	{r3, lr}
   bce6e:	4b02      	ldr	r3, [pc, #8]	; (bce78 <spark_cloud_disconnect+0xc>)
   bce70:	681b      	ldr	r3, [r3, #0]
   bce72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bce74:	9301      	str	r3, [sp, #4]
   bce76:	bd08      	pop	{r3, pc}
   bce78:	00030244 	.word	0x00030244

000bce7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bce7c:	b508      	push	{r3, lr}
   bce7e:	4b02      	ldr	r3, [pc, #8]	; (bce88 <network_connect+0xc>)
   bce80:	681b      	ldr	r3, [r3, #0]
   bce82:	685b      	ldr	r3, [r3, #4]
   bce84:	9301      	str	r3, [sp, #4]
   bce86:	bd08      	pop	{r3, pc}
   bce88:	00030240 	.word	0x00030240

000bce8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bce8c:	b508      	push	{r3, lr}
   bce8e:	4b02      	ldr	r3, [pc, #8]	; (bce98 <network_connecting+0xc>)
   bce90:	681b      	ldr	r3, [r3, #0]
   bce92:	689b      	ldr	r3, [r3, #8]
   bce94:	9301      	str	r3, [sp, #4]
   bce96:	bd08      	pop	{r3, pc}
   bce98:	00030240 	.word	0x00030240

000bce9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bce9c:	b508      	push	{r3, lr}
   bce9e:	4b02      	ldr	r3, [pc, #8]	; (bcea8 <network_disconnect+0xc>)
   bcea0:	681b      	ldr	r3, [r3, #0]
   bcea2:	68db      	ldr	r3, [r3, #12]
   bcea4:	9301      	str	r3, [sp, #4]
   bcea6:	bd08      	pop	{r3, pc}
   bcea8:	00030240 	.word	0x00030240

000bceac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bceac:	b508      	push	{r3, lr}
   bceae:	4b02      	ldr	r3, [pc, #8]	; (bceb8 <network_ready+0xc>)
   bceb0:	681b      	ldr	r3, [r3, #0]
   bceb2:	691b      	ldr	r3, [r3, #16]
   bceb4:	9301      	str	r3, [sp, #4]
   bceb6:	bd08      	pop	{r3, pc}
   bceb8:	00030240 	.word	0x00030240

000bcebc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bcebc:	b508      	push	{r3, lr}
   bcebe:	4b02      	ldr	r3, [pc, #8]	; (bcec8 <network_on+0xc>)
   bcec0:	681b      	ldr	r3, [r3, #0]
   bcec2:	695b      	ldr	r3, [r3, #20]
   bcec4:	9301      	str	r3, [sp, #4]
   bcec6:	bd08      	pop	{r3, pc}
   bcec8:	00030240 	.word	0x00030240

000bcecc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bcecc:	b508      	push	{r3, lr}
   bcece:	4b02      	ldr	r3, [pc, #8]	; (bced8 <network_off+0xc>)
   bced0:	681b      	ldr	r3, [r3, #0]
   bced2:	699b      	ldr	r3, [r3, #24]
   bced4:	9301      	str	r3, [sp, #4]
   bced6:	bd08      	pop	{r3, pc}
   bced8:	00030240 	.word	0x00030240

000bcedc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bcedc:	b508      	push	{r3, lr}
   bcede:	4b02      	ldr	r3, [pc, #8]	; (bcee8 <network_listen+0xc>)
   bcee0:	681b      	ldr	r3, [r3, #0]
   bcee2:	69db      	ldr	r3, [r3, #28]
   bcee4:	9301      	str	r3, [sp, #4]
   bcee6:	bd08      	pop	{r3, pc}
   bcee8:	00030240 	.word	0x00030240

000bceec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bceec:	b508      	push	{r3, lr}
   bceee:	4b02      	ldr	r3, [pc, #8]	; (bcef8 <network_listening+0xc>)
   bcef0:	681b      	ldr	r3, [r3, #0]
   bcef2:	6a1b      	ldr	r3, [r3, #32]
   bcef4:	9301      	str	r3, [sp, #4]
   bcef6:	bd08      	pop	{r3, pc}
   bcef8:	00030240 	.word	0x00030240

000bcefc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bcefc:	b508      	push	{r3, lr}
   bcefe:	4b02      	ldr	r3, [pc, #8]	; (bcf08 <network_set_listen_timeout+0xc>)
   bcf00:	681b      	ldr	r3, [r3, #0]
   bcf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcf04:	9301      	str	r3, [sp, #4]
   bcf06:	bd08      	pop	{r3, pc}
   bcf08:	00030240 	.word	0x00030240

000bcf0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bcf0c:	b508      	push	{r3, lr}
   bcf0e:	4b02      	ldr	r3, [pc, #8]	; (bcf18 <network_get_listen_timeout+0xc>)
   bcf10:	681b      	ldr	r3, [r3, #0]
   bcf12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcf14:	9301      	str	r3, [sp, #4]
   bcf16:	bd08      	pop	{r3, pc}
   bcf18:	00030240 	.word	0x00030240

000bcf1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bcf1c:	b508      	push	{r3, lr}
   bcf1e:	4b02      	ldr	r3, [pc, #8]	; (bcf28 <network_is_on+0xc>)
   bcf20:	681b      	ldr	r3, [r3, #0]
   bcf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcf24:	9301      	str	r3, [sp, #4]
   bcf26:	bd08      	pop	{r3, pc}
   bcf28:	00030240 	.word	0x00030240

000bcf2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bcf2c:	b508      	push	{r3, lr}
   bcf2e:	4b02      	ldr	r3, [pc, #8]	; (bcf38 <network_is_off+0xc>)
   bcf30:	681b      	ldr	r3, [r3, #0]
   bcf32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcf34:	9301      	str	r3, [sp, #4]
   bcf36:	bd08      	pop	{r3, pc}
   bcf38:	00030240 	.word	0x00030240

000bcf3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bcf3c:	b508      	push	{r3, lr}
   bcf3e:	4b02      	ldr	r3, [pc, #8]	; (bcf48 <malloc+0xc>)
   bcf40:	681b      	ldr	r3, [r3, #0]
   bcf42:	681b      	ldr	r3, [r3, #0]
   bcf44:	9301      	str	r3, [sp, #4]
   bcf46:	bd08      	pop	{r3, pc}
   bcf48:	0003021c 	.word	0x0003021c

000bcf4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bcf4c:	b508      	push	{r3, lr}
   bcf4e:	4b02      	ldr	r3, [pc, #8]	; (bcf58 <free+0xc>)
   bcf50:	681b      	ldr	r3, [r3, #0]
   bcf52:	685b      	ldr	r3, [r3, #4]
   bcf54:	9301      	str	r3, [sp, #4]
   bcf56:	bd08      	pop	{r3, pc}
   bcf58:	0003021c 	.word	0x0003021c

000bcf5c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bcf5c:	b508      	push	{r3, lr}
   bcf5e:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <realloc+0xc>)
   bcf60:	681b      	ldr	r3, [r3, #0]
   bcf62:	689b      	ldr	r3, [r3, #8]
   bcf64:	9301      	str	r3, [sp, #4]
   bcf66:	bd08      	pop	{r3, pc}
   bcf68:	0003021c 	.word	0x0003021c

000bcf6c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bcf6c:	b508      	push	{r3, lr}
   bcf6e:	4b02      	ldr	r3, [pc, #8]	; (bcf78 <siprintf+0xc>)
   bcf70:	681b      	ldr	r3, [r3, #0]
   bcf72:	691b      	ldr	r3, [r3, #16]
   bcf74:	9301      	str	r3, [sp, #4]
   bcf76:	bd08      	pop	{r3, pc}
   bcf78:	0003021c 	.word	0x0003021c

000bcf7c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bcf7c:	b508      	push	{r3, lr}
   bcf7e:	4b02      	ldr	r3, [pc, #8]	; (bcf88 <sscanf+0xc>)
   bcf80:	681b      	ldr	r3, [r3, #0]
   bcf82:	695b      	ldr	r3, [r3, #20]
   bcf84:	9301      	str	r3, [sp, #4]
   bcf86:	bd08      	pop	{r3, pc}
   bcf88:	0003021c 	.word	0x0003021c

000bcf8c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bcf8c:	b508      	push	{r3, lr}
   bcf8e:	4b02      	ldr	r3, [pc, #8]	; (bcf98 <snprintf+0xc>)
   bcf90:	681b      	ldr	r3, [r3, #0]
   bcf92:	69db      	ldr	r3, [r3, #28]
   bcf94:	9301      	str	r3, [sp, #4]
   bcf96:	bd08      	pop	{r3, pc}
   bcf98:	0003021c 	.word	0x0003021c

000bcf9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bcf9c:	b508      	push	{r3, lr}
   bcf9e:	4b02      	ldr	r3, [pc, #8]	; (bcfa8 <vsnprintf+0xc>)
   bcfa0:	681b      	ldr	r3, [r3, #0]
   bcfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcfa4:	9301      	str	r3, [sp, #4]
   bcfa6:	bd08      	pop	{r3, pc}
   bcfa8:	0003021c 	.word	0x0003021c

000bcfac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bcfac:	b508      	push	{r3, lr}
   bcfae:	4b02      	ldr	r3, [pc, #8]	; (bcfb8 <abort+0xc>)
   bcfb0:	681b      	ldr	r3, [r3, #0]
   bcfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcfb4:	9301      	str	r3, [sp, #4]
   bcfb6:	bd08      	pop	{r3, pc}
   bcfb8:	0003021c 	.word	0x0003021c

000bcfbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bcfbc:	b508      	push	{r3, lr}
   bcfbe:	4b02      	ldr	r3, [pc, #8]	; (bcfc8 <_malloc_r+0xc>)
   bcfc0:	681b      	ldr	r3, [r3, #0]
   bcfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcfc4:	9301      	str	r3, [sp, #4]
   bcfc6:	bd08      	pop	{r3, pc}
   bcfc8:	0003021c 	.word	0x0003021c

000bcfcc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bcfcc:	b508      	push	{r3, lr}
   bcfce:	4b02      	ldr	r3, [pc, #8]	; (bcfd8 <__errno+0xc>)
   bcfd0:	681b      	ldr	r3, [r3, #0]
   bcfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcfd4:	9301      	str	r3, [sp, #4]
   bcfd6:	bd08      	pop	{r3, pc}
   bcfd8:	0003021c 	.word	0x0003021c

000bcfdc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bcfdc:	b508      	push	{r3, lr}
   bcfde:	4b02      	ldr	r3, [pc, #8]	; (bcfe8 <__assert_func+0xc>)
   bcfe0:	681b      	ldr	r3, [r3, #0]
   bcfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcfe4:	9301      	str	r3, [sp, #4]
   bcfe6:	bd08      	pop	{r3, pc}
   bcfe8:	0003021c 	.word	0x0003021c

000bcfec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bcfec:	b508      	push	{r3, lr}
   bcfee:	4b02      	ldr	r3, [pc, #8]	; (bcff8 <newlib_impure_ptr_callback+0xc>)
   bcff0:	681b      	ldr	r3, [r3, #0]
   bcff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcff4:	9301      	str	r3, [sp, #4]
   bcff6:	bd08      	pop	{r3, pc}
   bcff8:	0003021c 	.word	0x0003021c

000bcffc <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bcffc:	b508      	push	{r3, lr}
   bcffe:	4b02      	ldr	r3, [pc, #8]	; (bd008 <strftime+0xc>)
   bd000:	681b      	ldr	r3, [r3, #0]
   bd002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd004:	9301      	str	r3, [sp, #4]
   bd006:	bd08      	pop	{r3, pc}
   bd008:	0003021c 	.word	0x0003021c

000bd00c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd00c:	b508      	push	{r3, lr}
   bd00e:	4b02      	ldr	r3, [pc, #8]	; (bd018 <localtime_r+0xc>)
   bd010:	681b      	ldr	r3, [r3, #0]
   bd012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd014:	9301      	str	r3, [sp, #4]
   bd016:	bd08      	pop	{r3, pc}
   bd018:	0003021c 	.word	0x0003021c

000bd01c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd01c:	b508      	push	{r3, lr}
   bd01e:	4b02      	ldr	r3, [pc, #8]	; (bd028 <gmtime_r+0xc>)
   bd020:	681b      	ldr	r3, [r3, #0]
   bd022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd024:	9301      	str	r3, [sp, #4]
   bd026:	bd08      	pop	{r3, pc}
   bd028:	0003021c 	.word	0x0003021c

000bd02c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd02c:	b508      	push	{r3, lr}
   bd02e:	4b02      	ldr	r3, [pc, #8]	; (bd038 <mktime+0xc>)
   bd030:	681b      	ldr	r3, [r3, #0]
   bd032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd034:	9301      	str	r3, [sp, #4]
   bd036:	bd08      	pop	{r3, pc}
   bd038:	0003021c 	.word	0x0003021c

000bd03c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd03c:	2100      	movs	r1, #0
   bd03e:	f7ff be5b 	b.w	bccf8 <system_delay_ms>

000bd042 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd042:	b510      	push	{r4, lr}
      if (_M_empty())
   bd044:	6883      	ldr	r3, [r0, #8]
   bd046:	4604      	mov	r4, r0
   bd048:	b90b      	cbnz	r3, bd04e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd04a:	f003 f99f 	bl	c038c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd04e:	68c3      	ldr	r3, [r0, #12]
   bd050:	4798      	blx	r3
      if (_M_manager)
   bd052:	68a3      	ldr	r3, [r4, #8]
   bd054:	b11b      	cbz	r3, bd05e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd056:	2203      	movs	r2, #3
   bd058:	4621      	mov	r1, r4
   bd05a:	4620      	mov	r0, r4
   bd05c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd05e:	4620      	mov	r0, r4
   bd060:	2110      	movs	r1, #16
}
   bd062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd066:	f7f7 b81a 	b.w	b409e <_ZdlPvj>

000bd06a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd06a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd06c:	6843      	ldr	r3, [r0, #4]
   bd06e:	3b01      	subs	r3, #1
    {
   bd070:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd072:	6043      	str	r3, [r0, #4]
   bd074:	b963      	cbnz	r3, bd090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd076:	6803      	ldr	r3, [r0, #0]
   bd078:	689b      	ldr	r3, [r3, #8]
   bd07a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd07c:	68a3      	ldr	r3, [r4, #8]
   bd07e:	3b01      	subs	r3, #1
   bd080:	60a3      	str	r3, [r4, #8]
   bd082:	b92b      	cbnz	r3, bd090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd084:	6823      	ldr	r3, [r4, #0]
   bd086:	4620      	mov	r0, r4
   bd088:	68db      	ldr	r3, [r3, #12]
    }
   bd08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd08e:	4718      	bx	r3
    }
   bd090:	bd10      	pop	{r4, pc}

000bd092 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd092:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd094:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd098:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd09a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd09e:	42ae      	cmp	r6, r5
   bd0a0:	d004      	beq.n	bd0ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd0a2:	4628      	mov	r0, r5
   bd0a4:	f002 faa4 	bl	bf5f0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd0a8:	3510      	adds	r5, #16
   bd0aa:	e7f8      	b.n	bd09e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd0ac:	6820      	ldr	r0, [r4, #0]
   bd0ae:	f7ff ff4d 	bl	bcf4c <free>
    AllocatorT::free(data_);
}
   bd0b2:	4620      	mov	r0, r4
   bd0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd0b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd0b8:	4802      	ldr	r0, [pc, #8]	; (bd0c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd0ba:	2300      	movs	r3, #0
   bd0bc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd0be:	f7ff bb61 	b.w	bc784 <os_mutex_recursive_create>
   bd0c2:	bf00      	nop
   bd0c4:	2003e610 	.word	0x2003e610

000bd0c8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd0c8:	2200      	movs	r2, #0
   bd0ca:	6840      	ldr	r0, [r0, #4]
   bd0cc:	4611      	mov	r1, r2
   bd0ce:	f7ff beed 	b.w	bceac <network_ready>

000bd0d2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd0d2:	2200      	movs	r2, #0
   bd0d4:	6840      	ldr	r0, [r0, #4]
   bd0d6:	4611      	mov	r1, r2
   bd0d8:	f7ff bf08 	b.w	bceec <network_listening>

000bd0dc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd0dc:	2200      	movs	r2, #0
   bd0de:	6840      	ldr	r0, [r0, #4]
   bd0e0:	4611      	mov	r1, r2
   bd0e2:	f7ff bf13 	b.w	bcf0c <network_get_listen_timeout>

000bd0e6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd0e6:	6840      	ldr	r0, [r0, #4]
   bd0e8:	2200      	movs	r2, #0
   bd0ea:	f7ff bf07 	b.w	bcefc <network_set_listen_timeout>

000bd0ee <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd0ee:	6840      	ldr	r0, [r0, #4]
   bd0f0:	2200      	movs	r2, #0
   bd0f2:	f081 0101 	eor.w	r1, r1, #1
   bd0f6:	f7ff bef1 	b.w	bcedc <network_listen>

000bd0fa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd0fa:	2300      	movs	r3, #0
   bd0fc:	6840      	ldr	r0, [r0, #4]
   bd0fe:	461a      	mov	r2, r3
   bd100:	4619      	mov	r1, r3
   bd102:	f7ff bee3 	b.w	bcecc <network_off>

000bd106 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd106:	2300      	movs	r3, #0
   bd108:	6840      	ldr	r0, [r0, #4]
   bd10a:	461a      	mov	r2, r3
   bd10c:	4619      	mov	r1, r3
   bd10e:	f7ff bed5 	b.w	bcebc <network_on>

000bd112 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd112:	2200      	movs	r2, #0
   bd114:	6840      	ldr	r0, [r0, #4]
   bd116:	4611      	mov	r1, r2
   bd118:	f7ff beb8 	b.w	bce8c <network_connecting>

000bd11c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd11c:	6840      	ldr	r0, [r0, #4]
   bd11e:	2200      	movs	r2, #0
   bd120:	2102      	movs	r1, #2
   bd122:	f7ff bebb 	b.w	bce9c <network_disconnect>

000bd126 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd126:	2300      	movs	r3, #0
   bd128:	6840      	ldr	r0, [r0, #4]
   bd12a:	461a      	mov	r2, r3
   bd12c:	f7ff bea6 	b.w	bce7c <network_connect>

000bd130 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd130:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd132:	4b13      	ldr	r3, [pc, #76]	; (bd180 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd134:	6003      	str	r3, [r0, #0]
   bd136:	2518      	movs	r5, #24
   bd138:	3330      	adds	r3, #48	; 0x30
   bd13a:	b086      	sub	sp, #24
   bd13c:	460e      	mov	r6, r1
   bd13e:	6043      	str	r3, [r0, #4]
   bd140:	462a      	mov	r2, r5
   bd142:	2100      	movs	r1, #0
   bd144:	4604      	mov	r4, r0
   bd146:	3008      	adds	r0, #8
   bd148:	f003 feca 	bl	c0ee0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd14c:	2200      	movs	r2, #0
   bd14e:	6870      	ldr	r0, [r6, #4]
   bd150:	4611      	mov	r1, r2
   bd152:	f7ff feab 	bl	bceac <network_ready>
   bd156:	b178      	cbz	r0, bd178 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd158:	2100      	movs	r1, #0
   bd15a:	462a      	mov	r2, r5
   bd15c:	4668      	mov	r0, sp
   bd15e:	f003 febf 	bl	c0ee0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd162:	4669      	mov	r1, sp
   bd164:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd166:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd16a:	f7ff facb 	bl	bc704 <cellular_signal>
   bd16e:	b918      	cbnz	r0, bd178 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd170:	4669      	mov	r1, sp
   bd172:	4620      	mov	r0, r4
   bd174:	f000 f8b8 	bl	bd2e8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd178:	4620      	mov	r0, r4
   bd17a:	b006      	add	sp, #24
   bd17c:	bd70      	pop	{r4, r5, r6, pc}
   bd17e:	bf00      	nop
   bd180:	000c4d58 	.word	0x000c4d58

000bd184 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd184:	4b08      	ldr	r3, [pc, #32]	; (bd1a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd186:	b510      	push	{r4, lr}
   bd188:	2428      	movs	r4, #40	; 0x28
   bd18a:	4622      	mov	r2, r4
   bd18c:	4618      	mov	r0, r3
   bd18e:	2100      	movs	r1, #0
   bd190:	f003 fea6 	bl	c0ee0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd194:	4b05      	ldr	r3, [pc, #20]	; (bd1ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd196:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd19c:	6042      	str	r2, [r0, #4]
   bd19e:	2204      	movs	r2, #4
   bd1a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd1a2:	4a03      	ldr	r2, [pc, #12]	; (bd1b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd1a4:	601a      	str	r2, [r3, #0]
   bd1a6:	bd10      	pop	{r4, pc}
   bd1a8:	2003e61c 	.word	0x2003e61c
   bd1ac:	2003e614 	.word	0x2003e614
   bd1b0:	000c4d1c 	.word	0x000c4d1c

000bd1b4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd1b4:	4770      	bx	lr

000bd1b6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd1b6:	7b00      	ldrb	r0, [r0, #12]
   bd1b8:	4770      	bx	lr

000bd1ba <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd1ba:	7b03      	ldrb	r3, [r0, #12]
   bd1bc:	b14b      	cbz	r3, bd1d2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd1be:	6903      	ldr	r3, [r0, #16]
   bd1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd1c4:	d005      	beq.n	bd1d2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd1c6:	6980      	ldr	r0, [r0, #24]
   bd1c8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd1cc:	bf18      	it	ne
   bd1ce:	2001      	movne	r0, #1
   bd1d0:	4770      	bx	lr
   bd1d2:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd1d4:	4770      	bx	lr

000bd1d6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd1d6:	6803      	ldr	r3, [r0, #0]
   bd1d8:	6a1b      	ldr	r3, [r3, #32]
   bd1da:	4718      	bx	r3

000bd1dc <_ZNK14CellularSignal7printToER5Print>:
{
   bd1dc:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd1de:	6803      	ldr	r3, [r0, #0]
{
   bd1e0:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd1e2:	691b      	ldr	r3, [r3, #16]
{
   bd1e4:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd1e6:	4798      	blx	r3
   bd1e8:	2102      	movs	r1, #2
   bd1ea:	4628      	mov	r0, r5
   bd1ec:	f002 f8de 	bl	bf3ac <_ZN5Print5printEfi>
    n += p.print(',');
   bd1f0:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd1f2:	4604      	mov	r4, r0
    n += p.print(',');
   bd1f4:	4628      	mov	r0, r5
   bd1f6:	f001 ffe3 	bl	bf1c0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd1fa:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd1fc:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd1fe:	699b      	ldr	r3, [r3, #24]
   bd200:	4630      	mov	r0, r6
   bd202:	4798      	blx	r3
   bd204:	2102      	movs	r1, #2
   bd206:	4628      	mov	r0, r5
   bd208:	f002 f8d0 	bl	bf3ac <_ZN5Print5printEfi>
}
   bd20c:	4420      	add	r0, r4
   bd20e:	bd70      	pop	{r4, r5, r6, pc}

000bd210 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd210:	f1a0 0004 	sub.w	r0, r0, #4
   bd214:	f7ff bfe2 	b.w	bd1dc <_ZNK14CellularSignal7printToER5Print>

000bd218 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd218:	b510      	push	{r4, lr}
   bd21a:	2120      	movs	r1, #32
   bd21c:	4604      	mov	r4, r0
   bd21e:	f7f6 ff3e 	bl	b409e <_ZdlPvj>
   bd222:	4620      	mov	r0, r4
   bd224:	bd10      	pop	{r4, pc}
	...

000bd228 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd228:	7b03      	ldrb	r3, [r0, #12]
   bd22a:	b17b      	cbz	r3, bd24c <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd22c:	6943      	ldr	r3, [r0, #20]
   bd22e:	2b00      	cmp	r3, #0
   bd230:	db0c      	blt.n	bd24c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd232:	ee07 3a90 	vmov	s15, r3
   bd236:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd254 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd23a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd23e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd242:	eddf 7a05 	vldr	s15, [pc, #20]	; bd258 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd246:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd24a:	4770      	bx	lr
    return -1.0f;
   bd24c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd250:	4770      	bx	lr
   bd252:	bf00      	nop
   bd254:	477fff00 	.word	0x477fff00
   bd258:	42c80000 	.word	0x42c80000

000bd25c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd25c:	7b03      	ldrb	r3, [r0, #12]
   bd25e:	b163      	cbz	r3, bd27a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd260:	6903      	ldr	r3, [r0, #16]
   bd262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd266:	d008      	beq.n	bd27a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd268:	ee07 3a90 	vmov	s15, r3
   bd26c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd280 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd274:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd278:	4770      	bx	lr
    return 0.0f;
   bd27a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd284 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd27e:	4770      	bx	lr
   bd280:	42c80000 	.word	0x42c80000
   bd284:	00000000 	.word	0x00000000

000bd288 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd288:	7b03      	ldrb	r3, [r0, #12]
   bd28a:	b17b      	cbz	r3, bd2ac <_ZNK14CellularSignal10getQualityEv+0x24>
   bd28c:	69c3      	ldr	r3, [r0, #28]
   bd28e:	2b00      	cmp	r3, #0
   bd290:	db0c      	blt.n	bd2ac <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd292:	ee07 3a90 	vmov	s15, r3
   bd296:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd2b4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd29a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd29e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd2a2:	eddf 7a05 	vldr	s15, [pc, #20]	; bd2b8 <_ZNK14CellularSignal10getQualityEv+0x30>
   bd2a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd2aa:	4770      	bx	lr
    return -1.0f;
   bd2ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd2b0:	4770      	bx	lr
   bd2b2:	bf00      	nop
   bd2b4:	477fff00 	.word	0x477fff00
   bd2b8:	42c80000 	.word	0x42c80000

000bd2bc <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd2bc:	7b03      	ldrb	r3, [r0, #12]
   bd2be:	b163      	cbz	r3, bd2da <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd2c0:	6983      	ldr	r3, [r0, #24]
   bd2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd2c6:	d008      	beq.n	bd2da <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd2c8:	ee07 3a90 	vmov	s15, r3
   bd2cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd2e0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd2d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd2d8:	4770      	bx	lr
    return 0.0f;
   bd2da:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd2e4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd2de:	4770      	bx	lr
   bd2e0:	42c80000 	.word	0x42c80000
   bd2e4:	00000000 	.word	0x00000000

000bd2e8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd2e8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd2ea:	460d      	mov	r5, r1
   bd2ec:	f100 0408 	add.w	r4, r0, #8
   bd2f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd2f4:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd2f8:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd2fc:	2001      	movs	r0, #1
   bd2fe:	bd30      	pop	{r4, r5, pc}

000bd300 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd300:	4770      	bx	lr

000bd302 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd302:	2000      	movs	r0, #0
   bd304:	4770      	bx	lr

000bd306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd306:	b510      	push	{r4, lr}
   bd308:	2110      	movs	r1, #16
   bd30a:	4604      	mov	r4, r0
   bd30c:	f7f6 fec7 	bl	b409e <_ZdlPvj>
   bd310:	4620      	mov	r0, r4
   bd312:	bd10      	pop	{r4, pc}

000bd314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd314:	b508      	push	{r3, lr}
      { delete this; }
   bd316:	f7ff fff6 	bl	bd306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd31a:	bd08      	pop	{r3, pc}

000bd31c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd31c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd31e:	2200      	movs	r2, #0
   bd320:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd324:	6002      	str	r2, [r0, #0]
   bd326:	8084      	strh	r4, [r0, #4]
   bd328:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd32a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd32c:	680c      	ldr	r4, [r1, #0]
   bd32e:	8085      	strh	r5, [r0, #4]
   bd330:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd332:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd334:	bd30      	pop	{r4, r5, pc}

000bd336 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd336:	b510      	push	{r4, lr}
   bd338:	4604      	mov	r4, r0
    free((void*)msg_);
   bd33a:	6800      	ldr	r0, [r0, #0]
   bd33c:	f7ff fe06 	bl	bcf4c <free>
}
   bd340:	4620      	mov	r0, r4
   bd342:	bd10      	pop	{r4, pc}

000bd344 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd344:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd346:	68c4      	ldr	r4, [r0, #12]
   bd348:	b1f4      	cbz	r4, bd388 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd34a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd34c:	2b02      	cmp	r3, #2
   bd34e:	d103      	bne.n	bd358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd350:	f104 000c 	add.w	r0, r4, #12
   bd354:	f7ff ffef 	bl	bd336 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd358:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd35a:	b135      	cbz	r5, bd36a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd35c:	4628      	mov	r0, r5
   bd35e:	f7f8 f89e 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   bd362:	2110      	movs	r1, #16
   bd364:	4628      	mov	r0, r5
   bd366:	f7f6 fe9a 	bl	b409e <_ZdlPvj>
   bd36a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd36c:	b135      	cbz	r5, bd37c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd36e:	4628      	mov	r0, r5
   bd370:	f7f8 f895 	bl	b549e <_ZNSt14_Function_baseD1Ev>
   bd374:	2110      	movs	r1, #16
   bd376:	4628      	mov	r0, r5
   bd378:	f7f6 fe91 	bl	b409e <_ZdlPvj>
   bd37c:	4620      	mov	r0, r4
   bd37e:	2114      	movs	r1, #20
   bd380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd384:	f7f6 be8b 	b.w	b409e <_ZdlPvj>
   bd388:	bd38      	pop	{r3, r4, r5, pc}

000bd38a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd38a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd38c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd38e:	4668      	mov	r0, sp
   bd390:	f002 f979 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd394:	68a3      	ldr	r3, [r4, #8]
   bd396:	b90b      	cbnz	r3, bd39c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd398:	f002 fff8 	bl	c038c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd39c:	68e3      	ldr	r3, [r4, #12]
   bd39e:	4669      	mov	r1, sp
   bd3a0:	4620      	mov	r0, r4
   bd3a2:	4798      	blx	r3
   bd3a4:	4604      	mov	r4, r0
   bd3a6:	4668      	mov	r0, sp
   bd3a8:	f002 f922 	bl	bf5f0 <_ZN6StringD1Ev>
}
   bd3ac:	4620      	mov	r0, r4
   bd3ae:	b004      	add	sp, #16
   bd3b0:	bd10      	pop	{r4, pc}

000bd3b2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd3b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd3b4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd3ba:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd3bc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd3be:	461a      	mov	r2, r3
   bd3c0:	4669      	mov	r1, sp
   bd3c2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd3c4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd3c8:	f8ad 4000 	strh.w	r4, [sp]
   bd3cc:	f7ff fcfe 	bl	bcdcc <spark_function>
}
   bd3d0:	b004      	add	sp, #16
   bd3d2:	bd10      	pop	{r4, pc}

000bd3d4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd3d6:	230c      	movs	r3, #12
   bd3d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd3dc:	6803      	ldr	r3, [r0, #0]
   bd3de:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd3e2:	7a03      	ldrb	r3, [r0, #8]
   bd3e4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd3e8:	6843      	ldr	r3, [r0, #4]
   bd3ea:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd3ec:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd3ee:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd3f0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd3f4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd3f6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd3fa:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd3fe:	f7ff fd35 	bl	bce6c <spark_cloud_disconnect>
}
   bd402:	b005      	add	sp, #20
   bd404:	f85d fb04 	ldr.w	pc, [sp], #4

000bd408 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd408:	680b      	ldr	r3, [r1, #0]
   bd40a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd40c:	684b      	ldr	r3, [r1, #4]
   bd40e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd410:	b113      	cbz	r3, bd418 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd412:	685a      	ldr	r2, [r3, #4]
   bd414:	3201      	adds	r2, #1
   bd416:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd418:	4770      	bx	lr

000bd41a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd41a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd41c:	4604      	mov	r4, r0
   bd41e:	4668      	mov	r0, sp
   bd420:	460d      	mov	r5, r1
   bd422:	f7ff fff1 	bl	bd408 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd426:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd428:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd42a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd42c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd42e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd430:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd432:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd434:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd436:	f7f7 f8eb 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd43a:	b135      	cbz	r5, bd44a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd43c:	1d28      	adds	r0, r5, #4
   bd43e:	f7f7 f8e7 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd442:	2108      	movs	r1, #8
   bd444:	4628      	mov	r0, r5
   bd446:	f7f6 fe2a 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd44a:	4620      	mov	r0, r4
   bd44c:	b003      	add	sp, #12
   bd44e:	bd30      	pop	{r4, r5, pc}

000bd450 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd450:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd452:	b510      	push	{r4, lr}
      if (_M_empty())
   bd454:	b90a      	cbnz	r2, bd45a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd456:	f002 ff99 	bl	c038c <_ZSt25__throw_bad_function_callv>
    }
   bd45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd45e:	68c3      	ldr	r3, [r0, #12]
   bd460:	4718      	bx	r3

000bd462 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd462:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd464:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd466:	f100 0110 	add.w	r1, r0, #16
   bd46a:	f7ff fff1 	bl	bd450 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd46e:	bd08      	pop	{r3, pc}

000bd470 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd470:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd472:	b510      	push	{r4, lr}
      if (_M_empty())
   bd474:	b90a      	cbnz	r2, bd47a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd476:	f002 ff89 	bl	c038c <_ZSt25__throw_bad_function_callv>
    }
   bd47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd47e:	68c3      	ldr	r3, [r0, #12]
   bd480:	4718      	bx	r3

000bd482 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd482:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd484:	6800      	ldr	r0, [r0, #0]
   bd486:	f100 0110 	add.w	r1, r0, #16
   bd48a:	f7ff fff1 	bl	bd470 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd48e:	bd08      	pop	{r3, pc}

000bd490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd490:	b538      	push	{r3, r4, r5, lr}
   bd492:	2300      	movs	r3, #0
   bd494:	4604      	mov	r4, r0
   bd496:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd498:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd49a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd49c:	f7f6 fdfb 	bl	b4096 <_Znwj>
   bd4a0:	b128      	cbz	r0, bd4ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd4a2:	2301      	movs	r3, #1
   bd4a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd4a8:	4b02      	ldr	r3, [pc, #8]	; (bd4b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd4aa:	6003      	str	r3, [r0, #0]
   bd4ac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd4ae:	6020      	str	r0, [r4, #0]
	}
   bd4b0:	4620      	mov	r0, r4
   bd4b2:	bd38      	pop	{r3, r4, r5, pc}
   bd4b4:	000c4d94 	.word	0x000c4d94

000bd4b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd4b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd4ba:	2300      	movs	r3, #0
   bd4bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd4be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd4c0:	4604      	mov	r4, r0
   bd4c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd4c4:	b12b      	cbz	r3, bd4d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd4c6:	2202      	movs	r2, #2
   bd4c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd4ca:	68eb      	ldr	r3, [r5, #12]
   bd4cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd4ce:	68ab      	ldr	r3, [r5, #8]
   bd4d0:	60a3      	str	r3, [r4, #8]
    }
   bd4d2:	4620      	mov	r0, r4
   bd4d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd4d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd4da:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd4dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd4de:	4668      	mov	r0, sp
   bd4e0:	f7ff ff1c 	bl	bd31c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd4e4:	f04f 0302 	mov.w	r3, #2
   bd4e8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd4ec:	2a00      	cmp	r2, #0
   bd4ee:	d103      	bne.n	bd4f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd4f0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd4f4:	2900      	cmp	r1, #0
   bd4f6:	d1f7      	bne.n	bd4e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd4f8:	d125      	bne.n	bd546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd4fa:	f104 050c 	add.w	r5, r4, #12
   bd4fe:	4669      	mov	r1, sp
   bd500:	4628      	mov	r0, r5
   bd502:	f7ff ff0b 	bl	bd31c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd506:	f3bf 8f5b 	dmb	ish
   bd50a:	2301      	movs	r3, #1
   bd50c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd50e:	2000      	movs	r0, #0
   bd510:	f104 0308 	add.w	r3, r4, #8
   bd514:	f3bf 8f5b 	dmb	ish
   bd518:	e853 6f00 	ldrex	r6, [r3]
   bd51c:	e843 0200 	strex	r2, r0, [r3]
   bd520:	2a00      	cmp	r2, #0
   bd522:	d1f9      	bne.n	bd518 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bd524:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd528:	b16e      	cbz	r6, bd546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bd52a:	f7ff fbfd 	bl	bcd28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd52e:	b178      	cbz	r0, bd550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd530:	4629      	mov	r1, r5
   bd532:	4630      	mov	r0, r6
   bd534:	f7ff ff8c 	bl	bd450 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bd538:	4630      	mov	r0, r6
   bd53a:	f7f7 ffb0 	bl	b549e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd53e:	2110      	movs	r1, #16
   bd540:	4630      	mov	r0, r6
   bd542:	f7f6 fdac 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bd546:	4668      	mov	r0, sp
   bd548:	f7ff fef5 	bl	bd336 <_ZN8particle5ErrorD1Ev>
    }
   bd54c:	b009      	add	sp, #36	; 0x24
   bd54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd550:	4631      	mov	r1, r6
   bd552:	a802      	add	r0, sp, #8
   bd554:	f7ff ffb0 	bl	bd4b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd558:	68e0      	ldr	r0, [r4, #12]
   bd55a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd55e:	b108      	cbz	r0, bd564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bd560:	f003 fd6c 	bl	c103c <strdup>
        type_(type) {
   bd564:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd566:	2010      	movs	r0, #16
   bd568:	f8ad 501c 	strh.w	r5, [sp, #28]
   bd56c:	f7f6 fd93 	bl	b4096 <_Znwj>
   bd570:	4605      	mov	r5, r0
   bd572:	b1e8      	cbz	r0, bd5b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bd574:	2700      	movs	r7, #0
   bd576:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd578:	2018      	movs	r0, #24
   bd57a:	f7f6 fd8c 	bl	b4096 <_Znwj>
   bd57e:	4604      	mov	r4, r0
   bd580:	b188      	cbz	r0, bd5a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bd582:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bd584:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd586:	a802      	add	r0, sp, #8
   bd588:	f7fa ff47 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd58c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd58e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd590:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd592:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd594:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd596:	a906      	add	r1, sp, #24
   bd598:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd59a:	60e3      	str	r3, [r4, #12]
   bd59c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bd5a0:	9205      	str	r2, [sp, #20]
   bd5a2:	f7ff febb 	bl	bd31c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bd5a6:	4b08      	ldr	r3, [pc, #32]	; (bd5c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bd5a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd5aa:	4b08      	ldr	r3, [pc, #32]	; (bd5cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd5ac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd5ae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bd5b0:	a806      	add	r0, sp, #24
   bd5b2:	f7ff fec0 	bl	bd336 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd5b6:	a802      	add	r0, sp, #8
   bd5b8:	f7f7 ff71 	bl	b549e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd5bc:	2200      	movs	r2, #0
   bd5be:	4629      	mov	r1, r5
   bd5c0:	4803      	ldr	r0, [pc, #12]	; (bd5d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bd5c2:	f7ff fbb9 	bl	bcd38 <application_thread_invoke>
   bd5c6:	e7b7      	b.n	bd538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bd5c8:	000bd463 	.word	0x000bd463
   bd5cc:	000bd6e5 	.word	0x000bd6e5
   bd5d0:	000bd043 	.word	0x000bd043

000bd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bd5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd5d8:	b08b      	sub	sp, #44	; 0x2c
   bd5da:	4605      	mov	r5, r0
   bd5dc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bd5e0:	460f      	mov	r7, r1
   bd5e2:	4690      	mov	r8, r2
   bd5e4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd5e6:	f7ff fc09 	bl	bcdfc <spark_cloud_flag_connected>
   bd5ea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bd5ec:	4683      	mov	fp, r0
   bd5ee:	bb38      	cbnz	r0, bd640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bd5f0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bd5f4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd5f6:	a905      	add	r1, sp, #20
   bd5f8:	4630      	mov	r0, r6
   bd5fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd5fe:	f7ff fe8d 	bl	bd31c <_ZN8particle5ErrorC1EOS0_>
   bd602:	2014      	movs	r0, #20
   bd604:	f7f6 fd47 	bl	b4096 <_Znwj>
   bd608:	4604      	mov	r4, r0
   bd60a:	b148      	cbz	r0, bd620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bd60c:	2302      	movs	r3, #2
   bd60e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd610:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd612:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd616:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bd618:	4631      	mov	r1, r6
   bd61a:	300c      	adds	r0, #12
   bd61c:	f7ff fe7e 	bl	bd31c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd620:	4628      	mov	r0, r5
	: __shared_count(__p)
   bd622:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd624:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bd628:	f7ff ff32 	bl	bd490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd62c:	4630      	mov	r0, r6
   bd62e:	f7ff fe82 	bl	bd336 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bd632:	a805      	add	r0, sp, #20
   bd634:	f7ff fe7f 	bl	bd336 <_ZN8particle5ErrorD1Ev>
}
   bd638:	4628      	mov	r0, r5
   bd63a:	b00b      	add	sp, #44	; 0x2c
   bd63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bd640:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bd642:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bd644:	2014      	movs	r0, #20
   bd646:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bd64a:	9307      	str	r3, [sp, #28]
   bd64c:	f7f6 fd23 	bl	b4096 <_Znwj>
   bd650:	4601      	mov	r1, r0
   bd652:	b118      	cbz	r0, bd65c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd654:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd658:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd65a:	7044      	strb	r4, [r0, #1]
   bd65c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd65e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bd660:	f7ff ff16 	bl	bd490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bd664:	4b1e      	ldr	r3, [pc, #120]	; (bd6e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bd666:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bd668:	2008      	movs	r0, #8
   bd66a:	f7f6 fd14 	bl	b4096 <_Znwj>
   bd66e:	4604      	mov	r4, r0
   bd670:	b110      	cbz	r0, bd678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bd672:	a903      	add	r1, sp, #12
   bd674:	f7ff fec8 	bl	bd408 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd678:	9600      	str	r6, [sp, #0]
   bd67a:	fa5f f38a 	uxtb.w	r3, sl
   bd67e:	464a      	mov	r2, r9
   bd680:	4641      	mov	r1, r8
   bd682:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bd684:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd686:	f7ff fbc9 	bl	bce1c <spark_send_event>
   bd68a:	b9b8      	cbnz	r0, bd6bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bd68c:	9b03      	ldr	r3, [sp, #12]
   bd68e:	785b      	ldrb	r3, [r3, #1]
   bd690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bd694:	b993      	cbnz	r3, bd6bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bd696:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bd69a:	a905      	add	r1, sp, #20
   bd69c:	a803      	add	r0, sp, #12
   bd69e:	9205      	str	r2, [sp, #20]
   bd6a0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd6a4:	f7ff ff18 	bl	bd4d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd6a8:	a805      	add	r0, sp, #20
   bd6aa:	f7ff fe44 	bl	bd336 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bd6ae:	a805      	add	r0, sp, #20
   bd6b0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bd6b2:	f7ff feb2 	bl	bd41a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bd6b6:	a806      	add	r0, sp, #24
   bd6b8:	f7f6 ffaa 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd6bc:	a903      	add	r1, sp, #12
   bd6be:	a805      	add	r0, sp, #20
   bd6c0:	f7ff fea2 	bl	bd408 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd6c4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd6c6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd6c8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bd6ca:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bd6cc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd6ce:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bd6d0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bd6d2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bd6d4:	f7f6 ff9c 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd6d8:	a804      	add	r0, sp, #16
   bd6da:	f7f6 ff99 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bd6de:	e7ab      	b.n	bd638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bd6e0:	000bd761 	.word	0x000bd761

000bd6e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bd6e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd6e8:	4605      	mov	r5, r0
	switch (__op)
   bd6ea:	d103      	bne.n	bd6f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd6ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd6ee:	6003      	str	r3, [r0, #0]
      }
   bd6f0:	2000      	movs	r0, #0
   bd6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bd6f4:	2a02      	cmp	r2, #2
   bd6f6:	d010      	beq.n	bd71a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bd6f8:	2a03      	cmp	r2, #3
   bd6fa:	d1f9      	bne.n	bd6f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd6fc:	6804      	ldr	r4, [r0, #0]
   bd6fe:	2c00      	cmp	r4, #0
   bd700:	d0f6      	beq.n	bd6f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bd702:	f104 0010 	add.w	r0, r4, #16
   bd706:	f7ff fe16 	bl	bd336 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd70a:	4620      	mov	r0, r4
   bd70c:	f7f7 fec7 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd710:	2118      	movs	r1, #24
   bd712:	4620      	mov	r0, r4
   bd714:	f7f6 fcc3 	bl	b409e <_ZdlPvj>
   bd718:	e7ea      	b.n	bd6f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd71a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bd71c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd71e:	f7f6 fcba 	bl	b4096 <_Znwj>
   bd722:	4604      	mov	r4, r0
   bd724:	b150      	cbz	r0, bd73c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bd726:	4631      	mov	r1, r6
   bd728:	f7ff fec6 	bl	bd4b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd72c:	6930      	ldr	r0, [r6, #16]
   bd72e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd732:	b108      	cbz	r0, bd738 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bd734:	f003 fc82 	bl	c103c <strdup>
        type_(type) {
   bd738:	6120      	str	r0, [r4, #16]
   bd73a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bd73c:	602c      	str	r4, [r5, #0]
	}
   bd73e:	e7d7      	b.n	bd6f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bd740 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bd740:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd742:	2300      	movs	r3, #0
   bd744:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd746:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd748:	4604      	mov	r4, r0
   bd74a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd74c:	b12b      	cbz	r3, bd75a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd74e:	2202      	movs	r2, #2
   bd750:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd752:	68eb      	ldr	r3, [r5, #12]
   bd754:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd756:	68ab      	ldr	r3, [r5, #8]
   bd758:	60a3      	str	r3, [r4, #8]
    }
   bd75a:	4620      	mov	r0, r4
   bd75c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd760 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bd760:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd762:	b089      	sub	sp, #36	; 0x24
   bd764:	4604      	mov	r4, r0
   bd766:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bd768:	a801      	add	r0, sp, #4
   bd76a:	4611      	mov	r1, r2
   bd76c:	f7ff fe55 	bl	bd41a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bd770:	b1a4      	cbz	r4, bd79c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bd772:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd774:	b11d      	cbz	r5, bd77e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bd776:	4628      	mov	r0, r5
   bd778:	f003 fc60 	bl	c103c <strdup>
   bd77c:	4605      	mov	r5, r0
   bd77e:	a801      	add	r0, sp, #4
   bd780:	a903      	add	r1, sp, #12
        type_(type) {
   bd782:	9503      	str	r5, [sp, #12]
   bd784:	f8ad 4010 	strh.w	r4, [sp, #16]
   bd788:	f7ff fea6 	bl	bd4d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd78c:	a803      	add	r0, sp, #12
   bd78e:	f7ff fdd2 	bl	bd336 <_ZN8particle5ErrorD1Ev>
   bd792:	a802      	add	r0, sp, #8
   bd794:	f7f6 ff3c 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd798:	b009      	add	sp, #36	; 0x24
   bd79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bd79c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd79e:	2301      	movs	r3, #1
   bd7a0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bd7a4:	2a00      	cmp	r2, #0
   bd7a6:	d103      	bne.n	bd7b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bd7a8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bd7ac:	2900      	cmp	r1, #0
   bd7ae:	d1f7      	bne.n	bd7a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bd7b0:	d1ef      	bne.n	bd792 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bd7b2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bd7b4:	f3bf 8f5b 	dmb	ish
   bd7b8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd7ba:	1d2b      	adds	r3, r5, #4
   bd7bc:	f3bf 8f5b 	dmb	ish
   bd7c0:	e853 6f00 	ldrex	r6, [r3]
   bd7c4:	e843 4200 	strex	r2, r4, [r3]
   bd7c8:	2a00      	cmp	r2, #0
   bd7ca:	d1f9      	bne.n	bd7c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bd7cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd7d0:	2e00      	cmp	r6, #0
   bd7d2:	d0de      	beq.n	bd792 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bd7d4:	4620      	mov	r0, r4
   bd7d6:	f7ff faa7 	bl	bcd28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd7da:	4607      	mov	r7, r0
   bd7dc:	b160      	cbz	r0, bd7f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd7de:	f105 010c 	add.w	r1, r5, #12
   bd7e2:	4630      	mov	r0, r6
   bd7e4:	f7ff fe44 	bl	bd470 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bd7e8:	4630      	mov	r0, r6
   bd7ea:	f7f7 fe58 	bl	b549e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd7ee:	2110      	movs	r1, #16
   bd7f0:	4630      	mov	r0, r6
   bd7f2:	f7f6 fc54 	bl	b409e <_ZdlPvj>
   bd7f6:	e7cc      	b.n	bd792 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd7f8:	4631      	mov	r1, r6
   bd7fa:	a803      	add	r0, sp, #12
   bd7fc:	f7ff ffa0 	bl	bd740 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd800:	7b2b      	ldrb	r3, [r5, #12]
   bd802:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd806:	2010      	movs	r0, #16
   bd808:	f7f6 fc45 	bl	b4096 <_Znwj>
   bd80c:	4605      	mov	r5, r0
   bd80e:	b1d0      	cbz	r0, bd846 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd810:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd812:	2014      	movs	r0, #20
   bd814:	f7f6 fc3f 	bl	b4096 <_Znwj>
   bd818:	4604      	mov	r4, r0
   bd81a:	b178      	cbz	r0, bd83c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd81c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd81e:	4601      	mov	r1, r0
   bd820:	a803      	add	r0, sp, #12
   bd822:	f7fa fdfa 	bl	b841a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd826:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd828:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd82a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd82c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd82e:	9205      	str	r2, [sp, #20]
   bd830:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd832:	60e3      	str	r3, [r4, #12]
   bd834:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd838:	9206      	str	r2, [sp, #24]
   bd83a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd83c:	4b06      	ldr	r3, [pc, #24]	; (bd858 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd83e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd840:	4b06      	ldr	r3, [pc, #24]	; (bd85c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd842:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd844:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd846:	a803      	add	r0, sp, #12
   bd848:	f7f7 fe29 	bl	b549e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd84c:	2200      	movs	r2, #0
   bd84e:	4629      	mov	r1, r5
   bd850:	4803      	ldr	r0, [pc, #12]	; (bd860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd852:	f7ff fa71 	bl	bcd38 <application_thread_invoke>
   bd856:	e7c7      	b.n	bd7e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd858:	000bd483 	.word	0x000bd483
   bd85c:	000bd865 	.word	0x000bd865
   bd860:	000bd043 	.word	0x000bd043

000bd864 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd864:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd866:	b570      	push	{r4, r5, r6, lr}
   bd868:	4604      	mov	r4, r0
	switch (__op)
   bd86a:	d103      	bne.n	bd874 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd86c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd86e:	6003      	str	r3, [r0, #0]
      }
   bd870:	2000      	movs	r0, #0
   bd872:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd874:	2a02      	cmp	r2, #2
   bd876:	d00c      	beq.n	bd892 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd878:	2a03      	cmp	r2, #3
   bd87a:	d1f9      	bne.n	bd870 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd87c:	6804      	ldr	r4, [r0, #0]
   bd87e:	2c00      	cmp	r4, #0
   bd880:	d0f6      	beq.n	bd870 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd882:	4620      	mov	r0, r4
   bd884:	f7f7 fe0b 	bl	b549e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd888:	2114      	movs	r1, #20
   bd88a:	4620      	mov	r0, r4
   bd88c:	f7f6 fc07 	bl	b409e <_ZdlPvj>
   bd890:	e7ee      	b.n	bd870 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd892:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd894:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd896:	f7f6 fbfe 	bl	b4096 <_Znwj>
   bd89a:	4605      	mov	r5, r0
   bd89c:	b120      	cbz	r0, bd8a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd89e:	4631      	mov	r1, r6
   bd8a0:	f7ff ff4e 	bl	bd740 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd8a4:	7c33      	ldrb	r3, [r6, #16]
   bd8a6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd8a8:	6025      	str	r5, [r4, #0]
	}
   bd8aa:	e7e1      	b.n	bd870 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd8ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bd8ac:	2200      	movs	r2, #0
   bd8ae:	6840      	ldr	r0, [r0, #4]
   bd8b0:	4611      	mov	r1, r2
   bd8b2:	f7ff bb1b 	b.w	bceec <network_listening>

000bd8b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd8b6:	2200      	movs	r2, #0
   bd8b8:	6840      	ldr	r0, [r0, #4]
   bd8ba:	4611      	mov	r1, r2
   bd8bc:	f7ff bb26 	b.w	bcf0c <network_get_listen_timeout>

000bd8c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd8c0:	6840      	ldr	r0, [r0, #4]
   bd8c2:	2200      	movs	r2, #0
   bd8c4:	f7ff bb1a 	b.w	bcefc <network_set_listen_timeout>

000bd8c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd8c8:	6840      	ldr	r0, [r0, #4]
   bd8ca:	2200      	movs	r2, #0
   bd8cc:	f081 0101 	eor.w	r1, r1, #1
   bd8d0:	f7ff bb04 	b.w	bcedc <network_listen>

000bd8d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd8d4:	2300      	movs	r3, #0
   bd8d6:	6840      	ldr	r0, [r0, #4]
   bd8d8:	461a      	mov	r2, r3
   bd8da:	4619      	mov	r1, r3
   bd8dc:	f7ff baf6 	b.w	bcecc <network_off>

000bd8e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd8e0:	2300      	movs	r3, #0
   bd8e2:	6840      	ldr	r0, [r0, #4]
   bd8e4:	461a      	mov	r2, r3
   bd8e6:	4619      	mov	r1, r3
   bd8e8:	f7ff bae8 	b.w	bcebc <network_on>

000bd8ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bd8ec:	2200      	movs	r2, #0
   bd8ee:	6840      	ldr	r0, [r0, #4]
   bd8f0:	4611      	mov	r1, r2
   bd8f2:	f7ff badb 	b.w	bceac <network_ready>

000bd8f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd8f6:	2200      	movs	r2, #0
   bd8f8:	6840      	ldr	r0, [r0, #4]
   bd8fa:	4611      	mov	r1, r2
   bd8fc:	f7ff bac6 	b.w	bce8c <network_connecting>

000bd900 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd900:	6840      	ldr	r0, [r0, #4]
   bd902:	2200      	movs	r2, #0
   bd904:	2102      	movs	r1, #2
   bd906:	f7ff bac9 	b.w	bce9c <network_disconnect>

000bd90a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd90a:	2300      	movs	r3, #0
   bd90c:	6840      	ldr	r0, [r0, #4]
   bd90e:	461a      	mov	r2, r3
   bd910:	f7ff bab4 	b.w	bce7c <network_connect>

000bd914 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bd914:	4b02      	ldr	r3, [pc, #8]	; (bd920 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bd916:	2203      	movs	r2, #3
   bd918:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bd91a:	4a02      	ldr	r2, [pc, #8]	; (bd924 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bd91c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bd91e:	4770      	bx	lr
   bd920:	2003e644 	.word	0x2003e644
   bd924:	000c4db0 	.word	0x000c4db0

000bd928 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bd928:	6800      	ldr	r0, [r0, #0]
   bd92a:	f000 b8f3 	b.w	bdb14 <_ZN7TwoWire4lockEv>

000bd92e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bd92e:	b510      	push	{r4, lr}
   bd930:	4604      	mov	r4, r0
      lock_(_lock) {
   bd932:	6001      	str	r1, [r0, #0]
   bd934:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bd936:	b10a      	cbz	r2, bd93c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bd938:	f7ff fff6 	bl	bd928 <_ZN9FuelGauge4lockEv>
}
   bd93c:	4620      	mov	r0, r4
   bd93e:	bd10      	pop	{r4, pc}

000bd940 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bd940:	b513      	push	{r0, r1, r4, lr}
   bd942:	4604      	mov	r4, r0
   bd944:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bd946:	f002 fcb3 	bl	c02b0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bd94a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bd94c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bd94e:	4620      	mov	r0, r4
   bd950:	f7ff ffed 	bl	bd92e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bd954:	4620      	mov	r0, r4
   bd956:	b002      	add	sp, #8
   bd958:	bd10      	pop	{r4, pc}

000bd95a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bd95a:	6800      	ldr	r0, [r0, #0]
   bd95c:	f000 b8e3 	b.w	bdb26 <_ZN7TwoWire6unlockEv>

000bd960 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bd960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bd964:	4604      	mov	r4, r0
   bd966:	461d      	mov	r5, r3
   bd968:	460f      	mov	r7, r1
   bd96a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bd96c:	f7ff ffdc 	bl	bd928 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bd970:	2236      	movs	r2, #54	; 0x36
   bd972:	2300      	movs	r3, #0
   bd974:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bd978:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bd97a:	f04f 0801 	mov.w	r8, #1
   bd97e:	230a      	movs	r3, #10
   bd980:	4669      	mov	r1, sp
   bd982:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bd986:	f000 f8a9 	bl	bdadc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bd98a:	6820      	ldr	r0, [r4, #0]
   bd98c:	6803      	ldr	r3, [r0, #0]
   bd98e:	4639      	mov	r1, r7
   bd990:	689b      	ldr	r3, [r3, #8]
   bd992:	4798      	blx	r3
    i2c_.write(MSB);
   bd994:	6820      	ldr	r0, [r4, #0]
   bd996:	6803      	ldr	r3, [r0, #0]
   bd998:	4631      	mov	r1, r6
   bd99a:	689b      	ldr	r3, [r3, #8]
   bd99c:	4798      	blx	r3
    i2c_.write(LSB);
   bd99e:	6820      	ldr	r0, [r4, #0]
   bd9a0:	6803      	ldr	r3, [r0, #0]
   bd9a2:	4629      	mov	r1, r5
   bd9a4:	689b      	ldr	r3, [r3, #8]
   bd9a6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bd9a8:	4641      	mov	r1, r8
   bd9aa:	6820      	ldr	r0, [r4, #0]
   bd9ac:	f000 f8ae 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
   bd9b0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bd9b2:	4620      	mov	r0, r4
   bd9b4:	bf0c      	ite	eq
   bd9b6:	2500      	moveq	r5, #0
   bd9b8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bd9bc:	f7ff ffcd 	bl	bd95a <_ZN9FuelGauge6unlockEv>
}
   bd9c0:	4628      	mov	r0, r5
   bd9c2:	b004      	add	sp, #16
   bd9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd9c8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bd9c8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bd9ca:	2240      	movs	r2, #64	; 0x40
   bd9cc:	2300      	movs	r3, #0
   bd9ce:	2106      	movs	r1, #6
   bd9d0:	f7ff ffc6 	bl	bd960 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bd9d4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bd9d8:	bd08      	pop	{r3, pc}

000bd9da <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bd9da:	4770      	bx	lr

000bd9dc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bd9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd9de:	4606      	mov	r6, r0
   bd9e0:	4615      	mov	r5, r2
   bd9e2:	460c      	mov	r4, r1
   bd9e4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bd9e6:	42bc      	cmp	r4, r7
   bd9e8:	d006      	beq.n	bd9f8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bd9ea:	6833      	ldr	r3, [r6, #0]
   bd9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
   bd9f0:	689b      	ldr	r3, [r3, #8]
   bd9f2:	4630      	mov	r0, r6
   bd9f4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bd9f6:	e7f6      	b.n	bd9e6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bd9f8:	4628      	mov	r0, r5
   bd9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd9fc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bd9fc:	7c00      	ldrb	r0, [r0, #16]
   bd9fe:	2200      	movs	r2, #0
   bda00:	f7fe bf90 	b.w	bc924 <hal_i2c_write>

000bda04 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bda04:	7c00      	ldrb	r0, [r0, #16]
   bda06:	2100      	movs	r1, #0
   bda08:	f7fe bf94 	b.w	bc934 <hal_i2c_available>

000bda0c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bda0c:	7c00      	ldrb	r0, [r0, #16]
   bda0e:	2100      	movs	r1, #0
   bda10:	f7fe bf98 	b.w	bc944 <hal_i2c_read>

000bda14 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bda14:	7c00      	ldrb	r0, [r0, #16]
   bda16:	2100      	movs	r1, #0
   bda18:	f7fe bf9c 	b.w	bc954 <hal_i2c_peek>

000bda1c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bda1c:	7c00      	ldrb	r0, [r0, #16]
   bda1e:	2100      	movs	r1, #0
   bda20:	f7fe bfa0 	b.w	bc964 <hal_i2c_flush>

000bda24 <_ZN7TwoWireD0Ev>:
   bda24:	b510      	push	{r4, lr}
   bda26:	2114      	movs	r1, #20
   bda28:	4604      	mov	r4, r0
   bda2a:	f7f6 fb38 	bl	b409e <_ZdlPvj>
   bda2e:	4620      	mov	r0, r4
   bda30:	bd10      	pop	{r4, pc}
	...

000bda34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bda34:	b538      	push	{r3, r4, r5, lr}
   bda36:	4604      	mov	r4, r0
   bda38:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bda3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bda3e:	2200      	movs	r2, #0
   bda40:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bda44:	4b09      	ldr	r3, [pc, #36]	; (bda6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bda46:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bda48:	4608      	mov	r0, r1
   bda4a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bda4c:	4629      	mov	r1, r5
   bda4e:	f7fe ff99 	bl	bc984 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bda52:	30bf      	adds	r0, #191	; 0xbf
   bda54:	d108      	bne.n	bda68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bda56:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bda58:	07db      	lsls	r3, r3, #31
   bda5a:	d505      	bpl.n	bda68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bda5c:	6868      	ldr	r0, [r5, #4]
   bda5e:	f7ff fa75 	bl	bcf4c <free>
    free(conf.tx_buffer);
   bda62:	68e8      	ldr	r0, [r5, #12]
   bda64:	f7ff fa72 	bl	bcf4c <free>
}
   bda68:	4620      	mov	r0, r4
   bda6a:	bd38      	pop	{r3, r4, r5, pc}
   bda6c:	000c4dec 	.word	0x000c4dec

000bda70 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bda70:	2300      	movs	r3, #0
   bda72:	7c00      	ldrb	r0, [r0, #16]
   bda74:	461a      	mov	r2, r3
   bda76:	4619      	mov	r1, r3
   bda78:	f7fe bf3c 	b.w	bc8f4 <hal_i2c_begin>

000bda7c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bda7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bda7e:	2200      	movs	r2, #0
   bda80:	2314      	movs	r3, #20
   bda82:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bda86:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bda8a:	780b      	ldrb	r3, [r1, #0]
   bda8c:	f88d 3008 	strb.w	r3, [sp, #8]
   bda90:	684b      	ldr	r3, [r1, #4]
   bda92:	9303      	str	r3, [sp, #12]
   bda94:	68cb      	ldr	r3, [r1, #12]
   bda96:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bda98:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bda9a:	7a0b      	ldrb	r3, [r1, #8]
   bda9c:	9305      	str	r3, [sp, #20]
   bda9e:	a901      	add	r1, sp, #4
   bdaa0:	f7fe ff88 	bl	bc9b4 <hal_i2c_request_ex>
}
   bdaa4:	b007      	add	sp, #28
   bdaa6:	f85d fb04 	ldr.w	pc, [sp], #4

000bdaaa <_ZN7TwoWire11requestFromEhjh>:
{
   bdaaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bdaac:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdaae:	f88d 1000 	strb.w	r1, [sp]
   bdab2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bdab6:	9103      	str	r1, [sp, #12]
   bdab8:	bf18      	it	ne
   bdaba:	2301      	movne	r3, #1
   bdabc:	4669      	mov	r1, sp
    size_ = size;
   bdabe:	9201      	str	r2, [sp, #4]
   bdac0:	f88d 3008 	strb.w	r3, [sp, #8]
   bdac4:	f7ff ffda 	bl	bda7c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bdac8:	b005      	add	sp, #20
   bdaca:	f85d fb04 	ldr.w	pc, [sp], #4

000bdace <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bdace:	7c00      	ldrb	r0, [r0, #16]
   bdad0:	2200      	movs	r2, #0
   bdad2:	f7fe bf17 	b.w	bc904 <hal_i2c_begin_transmission>

000bdad6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bdad6:	b2c9      	uxtb	r1, r1
   bdad8:	f7ff bff9 	b.w	bdace <_ZN7TwoWire17beginTransmissionEh>

000bdadc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bdadc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bdade:	2300      	movs	r3, #0
   bdae0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bdae4:	684a      	ldr	r2, [r1, #4]
   bdae6:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bdae8:	2314      	movs	r3, #20
    };
   bdaea:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bdaec:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bdaf0:	780b      	ldrb	r3, [r1, #0]
    };
   bdaf2:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bdaf4:	7a0a      	ldrb	r2, [r1, #8]
   bdaf6:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bdaf8:	7c00      	ldrb	r0, [r0, #16]
    };
   bdafa:	f88d 3008 	strb.w	r3, [sp, #8]
   bdafe:	aa01      	add	r2, sp, #4
   bdb00:	4619      	mov	r1, r3
   bdb02:	f7fe feff 	bl	bc904 <hal_i2c_begin_transmission>
}
   bdb06:	b007      	add	sp, #28
   bdb08:	f85d fb04 	ldr.w	pc, [sp], #4

000bdb0c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bdb0c:	7c00      	ldrb	r0, [r0, #16]
   bdb0e:	2200      	movs	r2, #0
   bdb10:	f7fe bf00 	b.w	bc914 <hal_i2c_end_transmission>

000bdb14 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bdb14:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bdb16:	2100      	movs	r1, #0
   bdb18:	7c00      	ldrb	r0, [r0, #16]
   bdb1a:	f7fe ff3b 	bl	bc994 <hal_i2c_lock>
}
   bdb1e:	fab0 f080 	clz	r0, r0
   bdb22:	0940      	lsrs	r0, r0, #5
   bdb24:	bd08      	pop	{r3, pc}

000bdb26 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bdb26:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bdb28:	2100      	movs	r1, #0
   bdb2a:	7c00      	ldrb	r0, [r0, #16]
   bdb2c:	f7fe ff3a 	bl	bc9a4 <hal_i2c_unlock>
}
   bdb30:	fab0 f080 	clz	r0, r0
   bdb34:	0940      	lsrs	r0, r0, #5
   bdb36:	bd08      	pop	{r3, pc}

000bdb38 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bdb38:	4700      	bx	r0
	...

000bdb3c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bdb3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bdb40:	2400      	movs	r4, #0
{
   bdb42:	461d      	mov	r5, r3
   bdb44:	460f      	mov	r7, r1
   bdb46:	4690      	mov	r8, r2
   bdb48:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bdb4a:	f7fe fec3 	bl	bc8d4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bdb4e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdb50:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bdb54:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdb58:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bdb5c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bdb60:	bfa2      	ittt	ge
   bdb62:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bdb66:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bdb6a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdb6c:	4907      	ldr	r1, [pc, #28]	; (bdb8c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bdb6e:	9400      	str	r4, [sp, #0]
   bdb70:	4643      	mov	r3, r8
   bdb72:	463a      	mov	r2, r7
   bdb74:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bdb76:	bfa8      	it	ge
   bdb78:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdb7c:	f7fe fea2 	bl	bc8c4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bdb80:	fab0 f080 	clz	r0, r0
   bdb84:	0940      	lsrs	r0, r0, #5
   bdb86:	b004      	add	sp, #16
   bdb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdb8c:	000bdb39 	.word	0x000bdb39

000bdb90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bdb90:	4770      	bx	lr

000bdb92 <_ZN9IPAddressD0Ev>:
   bdb92:	b510      	push	{r4, lr}
   bdb94:	2118      	movs	r1, #24
   bdb96:	4604      	mov	r4, r0
   bdb98:	f7f6 fa81 	bl	b409e <_ZdlPvj>
   bdb9c:	4620      	mov	r0, r4
   bdb9e:	bd10      	pop	{r4, pc}

000bdba0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bdba0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bdba2:	7d03      	ldrb	r3, [r0, #20]
   bdba4:	2b06      	cmp	r3, #6
{
   bdba6:	b08d      	sub	sp, #52	; 0x34
   bdba8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdbaa:	f100 0704 	add.w	r7, r0, #4
   bdbae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bdbb2:	d012      	beq.n	bdbda <_ZNK9IPAddress7printToER5Print+0x3a>
   bdbb4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bdbb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bdbbc:	220a      	movs	r2, #10
   bdbbe:	4630      	mov	r0, r6
   bdbc0:	f001 fb0d 	bl	bf1de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bdbc4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bdbc6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bdbc8:	d019      	beq.n	bdbfe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bdbca:	2c00      	cmp	r4, #0
   bdbcc:	d0f4      	beq.n	bdbb8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bdbce:	212e      	movs	r1, #46	; 0x2e
   bdbd0:	4630      	mov	r0, r6
   bdbd2:	f001 faf5 	bl	bf1c0 <_ZN5Print5printEc>
   bdbd6:	4404      	add	r4, r0
   bdbd8:	e7ee      	b.n	bdbb8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdbda:	232f      	movs	r3, #47	; 0x2f
   bdbdc:	466a      	mov	r2, sp
   bdbde:	4639      	mov	r1, r7
   bdbe0:	200a      	movs	r0, #10
		buf[0] = 0;
   bdbe2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdbe6:	f7fe feed 	bl	bc9c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bdbea:	4668      	mov	r0, sp
   bdbec:	f003 fa43 	bl	c1076 <strlen>
   bdbf0:	6833      	ldr	r3, [r6, #0]
   bdbf2:	4602      	mov	r2, r0
   bdbf4:	68db      	ldr	r3, [r3, #12]
   bdbf6:	4669      	mov	r1, sp
   bdbf8:	4630      	mov	r0, r6
   bdbfa:	4798      	blx	r3
   bdbfc:	4604      	mov	r4, r0
    }
    return n;
}
   bdbfe:	4620      	mov	r0, r4
   bdc00:	b00d      	add	sp, #52	; 0x34
   bdc02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdc04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bdc04:	b510      	push	{r4, lr}
   bdc06:	4b05      	ldr	r3, [pc, #20]	; (bdc1c <_ZN9IPAddressC1Ev+0x18>)
   bdc08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bdc0a:	2211      	movs	r2, #17
   bdc0c:	f840 3b04 	str.w	r3, [r0], #4
   bdc10:	2100      	movs	r1, #0
   bdc12:	f003 f965 	bl	c0ee0 <memset>
}
   bdc16:	4620      	mov	r0, r4
   bdc18:	bd10      	pop	{r4, pc}
   bdc1a:	bf00      	nop
   bdc1c:	000c4e14 	.word	0x000c4e14

000bdc20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bdc20:	4603      	mov	r3, r0
   bdc22:	4a07      	ldr	r2, [pc, #28]	; (bdc40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bdc24:	b510      	push	{r4, lr}
   bdc26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bdc2a:	f101 0210 	add.w	r2, r1, #16
   bdc2e:	f851 4b04 	ldr.w	r4, [r1], #4
   bdc32:	f843 4b04 	str.w	r4, [r3], #4
   bdc36:	4291      	cmp	r1, r2
   bdc38:	d1f9      	bne.n	bdc2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bdc3a:	780a      	ldrb	r2, [r1, #0]
   bdc3c:	701a      	strb	r2, [r3, #0]
}
   bdc3e:	bd10      	pop	{r4, pc}
   bdc40:	000c4e14 	.word	0x000c4e14

000bdc44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bdc44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bdc46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bdc4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bdc4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bdc52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bdc56:	2304      	movs	r3, #4
   bdc58:	6041      	str	r1, [r0, #4]
   bdc5a:	7503      	strb	r3, [r0, #20]
}
   bdc5c:	bd10      	pop	{r4, pc}
	...

000bdc60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bdc60:	b507      	push	{r0, r1, r2, lr}
   bdc62:	4b06      	ldr	r3, [pc, #24]	; (bdc7c <_ZN9IPAddressC1EPKh+0x1c>)
   bdc64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bdc66:	78cb      	ldrb	r3, [r1, #3]
   bdc68:	9300      	str	r3, [sp, #0]
   bdc6a:	788b      	ldrb	r3, [r1, #2]
   bdc6c:	784a      	ldrb	r2, [r1, #1]
   bdc6e:	7809      	ldrb	r1, [r1, #0]
   bdc70:	f7ff ffe8 	bl	bdc44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bdc74:	b003      	add	sp, #12
   bdc76:	f85d fb04 	ldr.w	pc, [sp], #4
   bdc7a:	bf00      	nop
   bdc7c:	000c4e14 	.word	0x000c4e14

000bdc80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bdc80:	f100 0310 	add.w	r3, r0, #16
   bdc84:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bdc86:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bdc8a:	2901      	cmp	r1, #1
   bdc8c:	4618      	mov	r0, r3
   bdc8e:	d108      	bne.n	bdca2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bdc90:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bdc94:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bdc98:	3a01      	subs	r2, #1
   bdc9a:	f103 0310 	add.w	r3, r3, #16
   bdc9e:	d1f2      	bne.n	bdc86 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bdca0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bdca2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bdca4:	bf04      	itt	eq
   bdca6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bdcaa:	1852      	addeq	r2, r2, r1
   bdcac:	e7f4      	b.n	bdc98 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bdcae <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bdcae:	b40e      	push	{r1, r2, r3}
   bdcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdcb2:	b088      	sub	sp, #32
   bdcb4:	af00      	add	r7, sp, #0
   bdcb6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdcba:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bdcbc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdcc0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bdcc2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdcc4:	462b      	mov	r3, r5
   bdcc6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bdcc8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdcca:	f7ff f967 	bl	bcf9c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bdcce:	280f      	cmp	r0, #15
   bdcd0:	687a      	ldr	r2, [r7, #4]
   bdcd2:	d91a      	bls.n	bdd0a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bdcd4:	f100 0308 	add.w	r3, r0, #8
   bdcd8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bdcdc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bdcde:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdce2:	1c41      	adds	r1, r0, #1
   bdce4:	462b      	mov	r3, r5
   bdce6:	4668      	mov	r0, sp
        va_start(args, fmt);
   bdce8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bdcea:	f7ff f957 	bl	bcf9c <vsnprintf>
        if (n > 0) {
   bdcee:	1e02      	subs	r2, r0, #0
   bdcf0:	dd04      	ble.n	bdcfc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bdcf2:	6823      	ldr	r3, [r4, #0]
   bdcf4:	4669      	mov	r1, sp
   bdcf6:	689b      	ldr	r3, [r3, #8]
   bdcf8:	4620      	mov	r0, r4
   bdcfa:	4798      	blx	r3
   bdcfc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bdcfe:	3720      	adds	r7, #32
   bdd00:	46bd      	mov	sp, r7
   bdd02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bdd06:	b003      	add	sp, #12
   bdd08:	4770      	bx	lr
    } else if (n > 0) {
   bdd0a:	2800      	cmp	r0, #0
   bdd0c:	d0f7      	beq.n	bdcfe <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bdd0e:	6823      	ldr	r3, [r4, #0]
   bdd10:	4602      	mov	r2, r0
   bdd12:	689b      	ldr	r3, [r3, #8]
   bdd14:	f107 0110 	add.w	r1, r7, #16
   bdd18:	4620      	mov	r0, r4
   bdd1a:	4798      	blx	r3
}
   bdd1c:	e7ef      	b.n	bdcfe <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bdd1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bdd1e:	b538      	push	{r3, r4, r5, lr}
   bdd20:	680b      	ldr	r3, [r1, #0]
   bdd22:	6003      	str	r3, [r0, #0]
   bdd24:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bdd26:	6843      	ldr	r3, [r0, #4]
   bdd28:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bdd2a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bdd2c:	d008      	beq.n	bdd40 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bdd2e:	b115      	cbz	r5, bdd36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bdd30:	686b      	ldr	r3, [r5, #4]
   bdd32:	3301      	adds	r3, #1
   bdd34:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bdd36:	6860      	ldr	r0, [r4, #4]
   bdd38:	b108      	cbz	r0, bdd3e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bdd3a:	f7ff f996 	bl	bd06a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bdd3e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bdd40:	bd38      	pop	{r3, r4, r5, pc}

000bdd42 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bdd42:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bdd44:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bdd46:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bdd4a:	689b      	ldr	r3, [r3, #8]
   bdd4c:	2201      	movs	r2, #1
   bdd4e:	f10d 0107 	add.w	r1, sp, #7
   bdd52:	4798      	blx	r3
}
   bdd54:	b003      	add	sp, #12
   bdd56:	f85d fb04 	ldr.w	pc, [sp], #4

000bdd5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bdd5a:	460b      	mov	r3, r1
   bdd5c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bdd5e:	2200      	movs	r2, #0
   bdd60:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bdd62:	e9c0 2200 	strd	r2, r2, [r0]
   bdd66:	4604      	mov	r4, r0
        t_ = t;
   bdd68:	6083      	str	r3, [r0, #8]
    if (t) {
   bdd6a:	b90b      	cbnz	r3, bdd70 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bdd6c:	4620      	mov	r0, r4
   bdd6e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bdd70:	f7ff ffd5 	bl	bdd1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bdd74:	e7fa      	b.n	bdd6c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bdd76 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bdd76:	6883      	ldr	r3, [r0, #8]
   bdd78:	b1eb      	cbz	r3, bddb6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bdd7a:	781a      	ldrb	r2, [r3, #0]
   bdd7c:	2a03      	cmp	r2, #3
   bdd7e:	d81a      	bhi.n	bddb6 <_ZNK5spark9JSONValue4typeEv+0x40>
   bdd80:	e8df f002 	tbb	[pc, r2]
   bdd84:	1b021704 	.word	0x1b021704
   bdd88:	2005      	movs	r0, #5
   bdd8a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bdd8c:	6802      	ldr	r2, [r0, #0]
   bdd8e:	685b      	ldr	r3, [r3, #4]
   bdd90:	6852      	ldr	r2, [r2, #4]
   bdd92:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bdd94:	282d      	cmp	r0, #45	; 0x2d
   bdd96:	d012      	beq.n	bddbe <_ZNK5spark9JSONValue4typeEv+0x48>
   bdd98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bdd9c:	2b09      	cmp	r3, #9
   bdd9e:	d90e      	bls.n	bddbe <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bdda0:	2874      	cmp	r0, #116	; 0x74
   bdda2:	d00e      	beq.n	bddc2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bdda4:	2866      	cmp	r0, #102	; 0x66
   bdda6:	d00c      	beq.n	bddc2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bdda8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bddac:	4258      	negs	r0, r3
   bddae:	4158      	adcs	r0, r3
   bddb0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bddb2:	2006      	movs	r0, #6
   bddb4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bddb6:	2000      	movs	r0, #0
   bddb8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bddba:	2004      	movs	r0, #4
   bddbc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bddbe:	2003      	movs	r0, #3
   bddc0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bddc2:	2002      	movs	r0, #2
}
   bddc4:	4770      	bx	lr

000bddc6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bddc6:	b510      	push	{r4, lr}
   bddc8:	4604      	mov	r4, r0
    switch (type()) {
   bddca:	f7ff ffd4 	bl	bdd76 <_ZNK5spark9JSONValue4typeEv>
   bddce:	2802      	cmp	r0, #2
   bddd0:	d00e      	beq.n	bddf0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bddd2:	1ec3      	subs	r3, r0, #3
   bddd4:	b2db      	uxtb	r3, r3
   bddd6:	2b01      	cmp	r3, #1
   bddd8:	d814      	bhi.n	bde04 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bddda:	6822      	ldr	r2, [r4, #0]
   bdddc:	68a3      	ldr	r3, [r4, #8]
   bddde:	6850      	ldr	r0, [r2, #4]
   bdde0:	685b      	ldr	r3, [r3, #4]
}
   bdde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bdde6:	220a      	movs	r2, #10
   bdde8:	2100      	movs	r1, #0
   bddea:	4418      	add	r0, r3
   bddec:	f004 b8b4 	b.w	c1f58 <strtol>
        const char* const s = d_->json + t_->start;
   bddf0:	6822      	ldr	r2, [r4, #0]
   bddf2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bddf4:	6852      	ldr	r2, [r2, #4]
   bddf6:	685b      	ldr	r3, [r3, #4]
   bddf8:	5cd0      	ldrb	r0, [r2, r3]
   bddfa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bddfe:	4258      	negs	r0, r3
   bde00:	4158      	adcs	r0, r3
}
   bde02:	bd10      	pop	{r4, pc}
    switch (type()) {
   bde04:	2000      	movs	r0, #0
   bde06:	e7fc      	b.n	bde02 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bde08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bde08:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bde0a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bde0c:	e9c0 3300 	strd	r3, r3, [r0]
   bde10:	4604      	mov	r4, r0
        n_(0) {
   bde12:	480e      	ldr	r0, [pc, #56]	; (bde4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bde14:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bde18:	b1a9      	cbz	r1, bde46 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bde1a:	780b      	ldrb	r3, [r1, #0]
   bde1c:	2b03      	cmp	r3, #3
   bde1e:	d006      	beq.n	bde2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bde20:	b98b      	cbnz	r3, bde46 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bde22:	6813      	ldr	r3, [r2, #0]
   bde24:	6858      	ldr	r0, [r3, #4]
   bde26:	684b      	ldr	r3, [r1, #4]
   bde28:	5cc3      	ldrb	r3, [r0, r3]
   bde2a:	2b6e      	cmp	r3, #110	; 0x6e
   bde2c:	d007      	beq.n	bde3e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bde2e:	6813      	ldr	r3, [r2, #0]
   bde30:	684d      	ldr	r5, [r1, #4]
   bde32:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bde34:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bde36:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bde38:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bde3a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bde3c:	60e3      	str	r3, [r4, #12]
   bde3e:	4611      	mov	r1, r2
   bde40:	4620      	mov	r0, r4
   bde42:	f7ff ff6c 	bl	bdd1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bde46:	4620      	mov	r0, r4
   bde48:	bd38      	pop	{r3, r4, r5, pc}
   bde4a:	bf00      	nop
   bde4c:	000c4e80 	.word	0x000c4e80

000bde50 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bde50:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bde52:	2500      	movs	r5, #0
   bde54:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bde56:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bde5a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bde5e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bde62:	4604      	mov	r4, r0
   bde64:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bde66:	b14b      	cbz	r3, bde7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bde68:	781a      	ldrb	r2, [r3, #0]
   bde6a:	2a01      	cmp	r2, #1
   bde6c:	d106      	bne.n	bde7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bde6e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bde72:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bde74:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bde76:	6143      	str	r3, [r0, #20]
   bde78:	f7ff ff51 	bl	bdd1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bde7c:	4620      	mov	r0, r4
   bde7e:	bd38      	pop	{r3, r4, r5, pc}

000bde80 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bde80:	b510      	push	{r4, lr}
    if (!n_) {
   bde82:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bde84:	4604      	mov	r4, r0
    if (!n_) {
   bde86:	b163      	cbz	r3, bdea2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bde88:	6880      	ldr	r0, [r0, #8]
   bde8a:	60e0      	str	r0, [r4, #12]
    --n_;
   bde8c:	3b01      	subs	r3, #1
    ++t_;
   bde8e:	3010      	adds	r0, #16
   bde90:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bde92:	6120      	str	r0, [r4, #16]
    --n_;
   bde94:	6163      	str	r3, [r4, #20]
    if (n_) {
   bde96:	b113      	cbz	r3, bde9e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bde98:	f7ff fef2 	bl	bdc80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bde9c:	60a0      	str	r0, [r4, #8]
    return true;
   bde9e:	2001      	movs	r0, #1
   bdea0:	e000      	b.n	bdea4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bdea2:	4618      	mov	r0, r3
}
   bdea4:	bd10      	pop	{r4, pc}

000bdea6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bdea6:	b510      	push	{r4, lr}
    write('}');
   bdea8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bdeaa:	4604      	mov	r4, r0
    write('}');
   bdeac:	f7ff ff49 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bdeb0:	2301      	movs	r3, #1
   bdeb2:	7123      	strb	r3, [r4, #4]
}
   bdeb4:	4620      	mov	r0, r4
   bdeb6:	bd10      	pop	{r4, pc}

000bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bdeb8:	b508      	push	{r3, lr}
    switch (state_) {
   bdeba:	7903      	ldrb	r3, [r0, #4]
   bdebc:	2b01      	cmp	r3, #1
   bdebe:	d002      	beq.n	bdec6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bdec0:	2b02      	cmp	r3, #2
   bdec2:	d004      	beq.n	bdece <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bdec4:	bd08      	pop	{r3, pc}
        write(',');
   bdec6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bdec8:	f7ff ff3b 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
}
   bdecc:	e7fa      	b.n	bdec4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bdece:	213a      	movs	r1, #58	; 0x3a
   bded0:	e7fa      	b.n	bdec8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bded2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bded2:	b510      	push	{r4, lr}
   bded4:	4604      	mov	r4, r0
    writeSeparator();
   bded6:	f7ff ffef 	bl	bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bdeda:	4620      	mov	r0, r4
   bdedc:	217b      	movs	r1, #123	; 0x7b
   bdede:	f7ff ff30 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bdee2:	2300      	movs	r3, #0
   bdee4:	7123      	strb	r3, [r4, #4]
}
   bdee6:	4620      	mov	r0, r4
   bdee8:	bd10      	pop	{r4, pc}
	...

000bdeec <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bdeec:	b513      	push	{r0, r1, r4, lr}
   bdeee:	4604      	mov	r4, r0
   bdef0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bdef2:	f7ff ffe1 	bl	bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bdef6:	6823      	ldr	r3, [r4, #0]
   bdef8:	9a01      	ldr	r2, [sp, #4]
   bdefa:	68db      	ldr	r3, [r3, #12]
   bdefc:	4903      	ldr	r1, [pc, #12]	; (bdf0c <_ZN5spark10JSONWriter5valueEi+0x20>)
   bdefe:	4620      	mov	r0, r4
   bdf00:	4798      	blx	r3
    state_ = NEXT;
   bdf02:	2301      	movs	r3, #1
}
   bdf04:	4620      	mov	r0, r4
    state_ = NEXT;
   bdf06:	7123      	strb	r3, [r4, #4]
}
   bdf08:	b002      	add	sp, #8
   bdf0a:	bd10      	pop	{r4, pc}
   bdf0c:	000c35af 	.word	0x000c35af

000bdf10 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bdf10:	b513      	push	{r0, r1, r4, lr}
   bdf12:	4604      	mov	r4, r0
   bdf14:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bdf16:	f7ff ffcf 	bl	bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bdf1a:	6823      	ldr	r3, [r4, #0]
   bdf1c:	9a01      	ldr	r2, [sp, #4]
   bdf1e:	68db      	ldr	r3, [r3, #12]
   bdf20:	4903      	ldr	r1, [pc, #12]	; (bdf30 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bdf22:	4620      	mov	r0, r4
   bdf24:	4798      	blx	r3
    state_ = NEXT;
   bdf26:	2301      	movs	r3, #1
}
   bdf28:	4620      	mov	r0, r4
    state_ = NEXT;
   bdf2a:	7123      	strb	r3, [r4, #4]
}
   bdf2c:	b002      	add	sp, #8
   bdf2e:	bd10      	pop	{r4, pc}
   bdf30:	000c470e 	.word	0x000c470e

000bdf34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bdf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdf38:	460d      	mov	r5, r1
    write('"');
   bdf3a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bdf3c:	4690      	mov	r8, r2
   bdf3e:	4604      	mov	r4, r0
    write('"');
   bdf40:	f7ff feff 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bdf44:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bdfec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bdf48:	44a8      	add	r8, r5
    const char *s = str;
   bdf4a:	462f      	mov	r7, r5
    while (s != end) {
   bdf4c:	4547      	cmp	r7, r8
   bdf4e:	46ba      	mov	sl, r7
   bdf50:	d03d      	beq.n	bdfce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bdf52:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bdf56:	2e22      	cmp	r6, #34	; 0x22
   bdf58:	d006      	beq.n	bdf68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bdf5a:	2e5c      	cmp	r6, #92	; 0x5c
   bdf5c:	d004      	beq.n	bdf68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bdf5e:	4630      	mov	r0, r6
   bdf60:	f002 ff8e 	bl	c0e80 <isprint>
   bdf64:	2800      	cmp	r0, #0
   bdf66:	d1f1      	bne.n	bdf4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bdf68:	6823      	ldr	r3, [r4, #0]
   bdf6a:	ebaa 0205 	sub.w	r2, sl, r5
   bdf6e:	689b      	ldr	r3, [r3, #8]
   bdf70:	4629      	mov	r1, r5
   bdf72:	4620      	mov	r0, r4
   bdf74:	4798      	blx	r3
            write('\\');
   bdf76:	215c      	movs	r1, #92	; 0x5c
   bdf78:	4620      	mov	r0, r4
   bdf7a:	f7ff fee2 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bdf7e:	2e0d      	cmp	r6, #13
   bdf80:	d80a      	bhi.n	bdf98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bdf82:	2e07      	cmp	r6, #7
   bdf84:	d91c      	bls.n	bdfc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bdf86:	f1a6 0308 	sub.w	r3, r6, #8
   bdf8a:	2b05      	cmp	r3, #5
   bdf8c:	d818      	bhi.n	bdfc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bdf8e:	e8df f003 	tbb	[pc, r3]
   bdf92:	0f0d      	.short	0x0f0d
   bdf94:	15131711 	.word	0x15131711
   bdf98:	2e22      	cmp	r6, #34	; 0x22
   bdf9a:	d001      	beq.n	bdfa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bdf9c:	2e5c      	cmp	r6, #92	; 0x5c
   bdf9e:	d10f      	bne.n	bdfc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bdfa0:	4631      	mov	r1, r6
                write('b');
   bdfa2:	4620      	mov	r0, r4
   bdfa4:	f7ff fecd 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bdfa8:	463d      	mov	r5, r7
    while (s != end) {
   bdfaa:	e7cf      	b.n	bdf4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bdfac:	2162      	movs	r1, #98	; 0x62
   bdfae:	e7f8      	b.n	bdfa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bdfb0:	2174      	movs	r1, #116	; 0x74
   bdfb2:	e7f6      	b.n	bdfa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bdfb4:	216e      	movs	r1, #110	; 0x6e
   bdfb6:	e7f4      	b.n	bdfa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bdfb8:	2166      	movs	r1, #102	; 0x66
   bdfba:	e7f2      	b.n	bdfa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bdfbc:	2172      	movs	r1, #114	; 0x72
   bdfbe:	e7f0      	b.n	bdfa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bdfc0:	6823      	ldr	r3, [r4, #0]
   bdfc2:	4632      	mov	r2, r6
   bdfc4:	68db      	ldr	r3, [r3, #12]
   bdfc6:	4649      	mov	r1, r9
   bdfc8:	4620      	mov	r0, r4
   bdfca:	4798      	blx	r3
                break;
   bdfcc:	e7ec      	b.n	bdfa8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bdfce:	42bd      	cmp	r5, r7
   bdfd0:	d005      	beq.n	bdfde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bdfd2:	6823      	ldr	r3, [r4, #0]
   bdfd4:	1b7a      	subs	r2, r7, r5
   bdfd6:	689b      	ldr	r3, [r3, #8]
   bdfd8:	4629      	mov	r1, r5
   bdfda:	4620      	mov	r0, r4
   bdfdc:	4798      	blx	r3
    }
    write('"');
   bdfde:	2122      	movs	r1, #34	; 0x22
   bdfe0:	4620      	mov	r0, r4
   bdfe2:	f7ff feae 	bl	bdd42 <_ZN5spark10JSONWriter5writeEc>
}
   bdfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdfea:	bf00      	nop
   bdfec:	000c4e20 	.word	0x000c4e20

000bdff0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bdff0:	b513      	push	{r0, r1, r4, lr}
   bdff2:	4604      	mov	r4, r0
   bdff4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bdff8:	f7ff ff5e 	bl	bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bdffc:	4620      	mov	r0, r4
   bdffe:	e9dd 2100 	ldrd	r2, r1, [sp]
   be002:	f7ff ff97 	bl	bdf34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be006:	2302      	movs	r3, #2
}
   be008:	4620      	mov	r0, r4
    state_ = VALUE;
   be00a:	7123      	strb	r3, [r4, #4]
}
   be00c:	b002      	add	sp, #8
   be00e:	bd10      	pop	{r4, pc}

000be010 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be010:	b513      	push	{r0, r1, r4, lr}
   be012:	4604      	mov	r4, r0
   be014:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be018:	f7ff ff4e 	bl	bdeb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be01c:	4620      	mov	r0, r4
   be01e:	e9dd 2100 	ldrd	r2, r1, [sp]
   be022:	f7ff ff87 	bl	bdf34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be026:	2301      	movs	r3, #1
}
   be028:	4620      	mov	r0, r4
    state_ = NEXT;
   be02a:	7123      	strb	r3, [r4, #4]
}
   be02c:	b002      	add	sp, #8
   be02e:	bd10      	pop	{r4, pc}

000be030 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be030:	6880      	ldr	r0, [r0, #8]
   be032:	6803      	ldr	r3, [r0, #0]
   be034:	68db      	ldr	r3, [r3, #12]
   be036:	4718      	bx	r3

000be038 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be038:	4770      	bx	lr

000be03a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be03a:	4608      	mov	r0, r1
   be03c:	b111      	cbz	r1, be044 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be03e:	680b      	ldr	r3, [r1, #0]
   be040:	685b      	ldr	r3, [r3, #4]
   be042:	4718      	bx	r3
}
   be044:	4770      	bx	lr

000be046 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be046:	4770      	bx	lr

000be048 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be048:	4770      	bx	lr

000be04a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be04a:	4770      	bx	lr

000be04c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be04c:	4770      	bx	lr

000be04e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be04e:	b538      	push	{r3, r4, r5, lr}
   be050:	4604      	mov	r4, r0
   be052:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be054:	6800      	ldr	r0, [r0, #0]
   be056:	212e      	movs	r1, #46	; 0x2e
   be058:	f002 ffd3 	bl	c1002 <strchrnul>
    size = s - category;
   be05c:	6823      	ldr	r3, [r4, #0]
   be05e:	1ac3      	subs	r3, r0, r3
   be060:	602b      	str	r3, [r5, #0]
    if (size) {
   be062:	b123      	cbz	r3, be06e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be064:	7803      	ldrb	r3, [r0, #0]
   be066:	b103      	cbz	r3, be06a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be068:	3001      	adds	r0, #1
   be06a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be06c:	6020      	str	r0, [r4, #0]
}
   be06e:	4618      	mov	r0, r3
   be070:	bd38      	pop	{r3, r4, r5, pc}

000be072 <_ZN5spark16JSONStreamWriterD0Ev>:
   be072:	b510      	push	{r4, lr}
   be074:	210c      	movs	r1, #12
   be076:	4604      	mov	r4, r0
   be078:	f7f6 f811 	bl	b409e <_ZdlPvj>
   be07c:	4620      	mov	r0, r4
   be07e:	bd10      	pop	{r4, pc}

000be080 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be080:	b510      	push	{r4, lr}
   be082:	2104      	movs	r1, #4
   be084:	4604      	mov	r4, r0
   be086:	f7f6 f80a 	bl	b409e <_ZdlPvj>
   be08a:	4620      	mov	r0, r4
   be08c:	bd10      	pop	{r4, pc}

000be08e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be08e:	b510      	push	{r4, lr}
   be090:	2104      	movs	r1, #4
   be092:	4604      	mov	r4, r0
   be094:	f7f6 f803 	bl	b409e <_ZdlPvj>
   be098:	4620      	mov	r0, r4
   be09a:	bd10      	pop	{r4, pc}

000be09c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be09c:	f7fe bb82 	b.w	bc7a4 <os_mutex_recursive_lock>

000be0a0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be0a0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be0a2:	f002 ffb8 	bl	c1016 <strcmp>
}
   be0a6:	fab0 f080 	clz	r0, r0
   be0aa:	0940      	lsrs	r0, r0, #5
   be0ac:	bd08      	pop	{r3, pc}

000be0ae <__tcf_1>:
   be0ae:	4770      	bx	lr

000be0b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be0b0:	b510      	push	{r4, lr}
   be0b2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be0b4:	f001 ff36 	bl	bff24 <_Z16_fetch_usbserialv>
   be0b8:	4284      	cmp	r4, r0
   be0ba:	d010      	beq.n	be0de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be0bc:	f002 f938 	bl	c0330 <_Z22__fetch_global_Serial1v>
   be0c0:	4284      	cmp	r4, r0
   be0c2:	d105      	bne.n	be0d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be0c4:	f002 f934 	bl	c0330 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be0cc:	f001 bec3 	b.w	bfe56 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be0d0:	b12c      	cbz	r4, be0de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be0d2:	6823      	ldr	r3, [r4, #0]
   be0d4:	4620      	mov	r0, r4
   be0d6:	685b      	ldr	r3, [r3, #4]
}
   be0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be0dc:	4718      	bx	r3
   be0de:	bd10      	pop	{r4, pc}

000be0e0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be0e0:	b513      	push	{r0, r1, r4, lr}
   be0e2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be0e4:	4608      	mov	r0, r1
   be0e6:	9101      	str	r1, [sp, #4]
   be0e8:	f002 ffc5 	bl	c1076 <strlen>
   be0ec:	9901      	ldr	r1, [sp, #4]
   be0ee:	4602      	mov	r2, r0
   be0f0:	4620      	mov	r0, r4
}
   be0f2:	b002      	add	sp, #8
   be0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be0f8:	f7ff bf8a 	b.w	be010 <_ZN5spark10JSONWriter5valueEPKcj>

000be0fc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be0fc:	b513      	push	{r0, r1, r4, lr}
   be0fe:	4604      	mov	r4, r0
    write(str, strlen(str));
   be100:	4608      	mov	r0, r1
   be102:	9101      	str	r1, [sp, #4]
   be104:	f002 ffb7 	bl	c1076 <strlen>
   be108:	6823      	ldr	r3, [r4, #0]
   be10a:	9901      	ldr	r1, [sp, #4]
   be10c:	68db      	ldr	r3, [r3, #12]
   be10e:	4602      	mov	r2, r0
   be110:	4620      	mov	r0, r4
}
   be112:	b002      	add	sp, #8
   be114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be118:	4718      	bx	r3

000be11a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be11a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be11c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be11e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be122:	68db      	ldr	r3, [r3, #12]
   be124:	2201      	movs	r2, #1
   be126:	f10d 0107 	add.w	r1, sp, #7
   be12a:	4798      	blx	r3
}
   be12c:	b003      	add	sp, #12
   be12e:	f85d fb04 	ldr.w	pc, [sp], #4

000be132 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be132:	b40e      	push	{r1, r2, r3}
   be134:	b503      	push	{r0, r1, lr}
   be136:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be138:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be13a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be13e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be140:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be142:	f001 f942 	bl	bf3ca <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be146:	b002      	add	sp, #8
   be148:	f85d eb04 	ldr.w	lr, [sp], #4
   be14c:	b003      	add	sp, #12
   be14e:	4770      	bx	lr

000be150 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be150:	680a      	ldr	r2, [r1, #0]
   be152:	6002      	str	r2, [r0, #0]
   be154:	684a      	ldr	r2, [r1, #4]
   be156:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be158:	2200      	movs	r2, #0
   be15a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be15e:	b510      	push	{r4, lr}
   be160:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be162:	688c      	ldr	r4, [r1, #8]
   be164:	6084      	str	r4, [r0, #8]
   be166:	68cc      	ldr	r4, [r1, #12]
   be168:	60c4      	str	r4, [r0, #12]
   be16a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be16c:	608a      	str	r2, [r1, #8]
   be16e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be170:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be172:	610a      	str	r2, [r1, #16]
   be174:	bd10      	pop	{r4, pc}
	...

000be178 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be17c:	e9d0 8400 	ldrd	r8, r4, [r0]
   be180:	f04f 0a14 	mov.w	sl, #20
   be184:	9300      	str	r3, [sp, #0]
   be186:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be18a:	4b18      	ldr	r3, [pc, #96]	; (be1ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be18c:	10a4      	asrs	r4, r4, #2
   be18e:	4617      	mov	r7, r2
   be190:	435c      	muls	r4, r3
   be192:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be194:	2c00      	cmp	r4, #0
   be196:	dd21      	ble.n	be1dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be198:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be19a:	fb0a f006 	mul.w	r0, sl, r6
   be19e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be1a2:	463a      	mov	r2, r7
   be1a4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be1a8:	5828      	ldr	r0, [r5, r0]
   be1aa:	9101      	str	r1, [sp, #4]
   be1ac:	455f      	cmp	r7, fp
   be1ae:	bf28      	it	cs
   be1b0:	465a      	movcs	r2, fp
   be1b2:	f002 ff68 	bl	c1086 <strncmp>
                if (cmp == 0) {
   be1b6:	2800      	cmp	r0, #0
   be1b8:	9901      	ldr	r1, [sp, #4]
   be1ba:	f04f 0301 	mov.w	r3, #1
   be1be:	d10b      	bne.n	be1d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be1c0:	455f      	cmp	r7, fp
   be1c2:	d103      	bne.n	be1cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be1c4:	9a00      	ldr	r2, [sp, #0]
   be1c6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be1c8:	4634      	mov	r4, r6
   be1ca:	e7e3      	b.n	be194 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be1cc:	d9fc      	bls.n	be1c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be1ce:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be1d0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be1d4:	3e01      	subs	r6, #1
   be1d6:	e7f7      	b.n	be1c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be1d8:	dbf9      	blt.n	be1ce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be1da:	e7f5      	b.n	be1c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be1dc:	eba5 0508 	sub.w	r5, r5, r8
}
   be1e0:	4802      	ldr	r0, [pc, #8]	; (be1ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be1e2:	10ad      	asrs	r5, r5, #2
   be1e4:	4368      	muls	r0, r5
   be1e6:	b003      	add	sp, #12
   be1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be1ec:	cccccccd 	.word	0xcccccccd

000be1f0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be1f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be1f2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be1f4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be1f6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be1f8:	b303      	cbz	r3, be23c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be1fa:	b1f9      	cbz	r1, be23c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be1fc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be1fe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be202:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be204:	a903      	add	r1, sp, #12
   be206:	a801      	add	r0, sp, #4
   be208:	f7ff ff21 	bl	be04e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be20c:	4601      	mov	r1, r0
   be20e:	b1a8      	cbz	r0, be23c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be210:	f10d 030b 	add.w	r3, sp, #11
   be214:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be216:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be21a:	4620      	mov	r0, r4
   be21c:	f7ff ffac 	bl	be178 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be220:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be224:	b153      	cbz	r3, be23c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be226:	6823      	ldr	r3, [r4, #0]
   be228:	2414      	movs	r4, #20
   be22a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be22e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be230:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be234:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be236:	bfa8      	it	ge
   be238:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be23a:	e7e3      	b.n	be204 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be23c:	4628      	mov	r0, r5
   be23e:	b004      	add	sp, #16
   be240:	bd70      	pop	{r4, r5, r6, pc}
	...

000be244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be244:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be246:	4c09      	ldr	r4, [pc, #36]	; (be26c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be248:	7823      	ldrb	r3, [r4, #0]
   be24a:	f3bf 8f5b 	dmb	ish
   be24e:	07db      	lsls	r3, r3, #31
   be250:	d409      	bmi.n	be266 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be252:	4620      	mov	r0, r4
   be254:	f7f5 ff32 	bl	b40bc <__cxa_guard_acquire>
   be258:	b128      	cbz	r0, be266 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be25a:	4620      	mov	r0, r4
   be25c:	f7f5 ff33 	bl	b40c6 <__cxa_guard_release>
   be260:	4803      	ldr	r0, [pc, #12]	; (be270 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be262:	f002 fde9 	bl	c0e38 <atexit>
}
   be266:	4803      	ldr	r0, [pc, #12]	; (be274 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be268:	bd10      	pop	{r4, pc}
   be26a:	bf00      	nop
   be26c:	2003e650 	.word	0x2003e650
   be270:	000be047 	.word	0x000be047
   be274:	2003d690 	.word	0x2003d690

000be278 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be278:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be27a:	4c09      	ldr	r4, [pc, #36]	; (be2a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be27c:	7823      	ldrb	r3, [r4, #0]
   be27e:	f3bf 8f5b 	dmb	ish
   be282:	07db      	lsls	r3, r3, #31
   be284:	d409      	bmi.n	be29a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be286:	4620      	mov	r0, r4
   be288:	f7f5 ff18 	bl	b40bc <__cxa_guard_acquire>
   be28c:	b128      	cbz	r0, be29a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be28e:	4620      	mov	r0, r4
   be290:	f7f5 ff19 	bl	b40c6 <__cxa_guard_release>
   be294:	4803      	ldr	r0, [pc, #12]	; (be2a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be296:	f002 fdcf 	bl	c0e38 <atexit>
    return &factory;
}
   be29a:	4803      	ldr	r0, [pc, #12]	; (be2a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be29c:	bd10      	pop	{r4, pc}
   be29e:	bf00      	nop
   be2a0:	2003e654 	.word	0x2003e654
   be2a4:	000be0af 	.word	0x000be0af
   be2a8:	2003d694 	.word	0x2003d694

000be2ac <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be2ac:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be2ae:	2500      	movs	r5, #0
   be2b0:	4604      	mov	r4, r0
   be2b2:	e9c0 5500 	strd	r5, r5, [r0]
   be2b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be2ba:	6085      	str	r5, [r0, #8]
   be2bc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be2be:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be2c2:	f7fe fa5f 	bl	bc784 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be2c6:	f7ff ffbd 	bl	be244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be2ca:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be2cc:	f7ff ffd4 	bl	be278 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be2d0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be2d2:	6220      	str	r0, [r4, #32]
}
   be2d4:	4620      	mov	r0, r4
   be2d6:	bd38      	pop	{r3, r4, r5, pc}

000be2d8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be2d8:	b510      	push	{r4, lr}
    static LogManager mgr;
   be2da:	4c0a      	ldr	r4, [pc, #40]	; (be304 <_ZN5spark10LogManager8instanceEv+0x2c>)
   be2dc:	7823      	ldrb	r3, [r4, #0]
   be2de:	f3bf 8f5b 	dmb	ish
   be2e2:	07db      	lsls	r3, r3, #31
   be2e4:	d40c      	bmi.n	be300 <_ZN5spark10LogManager8instanceEv+0x28>
   be2e6:	4620      	mov	r0, r4
   be2e8:	f7f5 fee8 	bl	b40bc <__cxa_guard_acquire>
   be2ec:	b140      	cbz	r0, be300 <_ZN5spark10LogManager8instanceEv+0x28>
   be2ee:	4806      	ldr	r0, [pc, #24]	; (be308 <_ZN5spark10LogManager8instanceEv+0x30>)
   be2f0:	f7ff ffdc 	bl	be2ac <_ZN5spark10LogManagerC1Ev>
   be2f4:	4620      	mov	r0, r4
   be2f6:	f7f5 fee6 	bl	b40c6 <__cxa_guard_release>
   be2fa:	4804      	ldr	r0, [pc, #16]	; (be30c <_ZN5spark10LogManager8instanceEv+0x34>)
   be2fc:	f002 fd9c 	bl	c0e38 <atexit>
    return &mgr;
}
   be300:	4801      	ldr	r0, [pc, #4]	; (be308 <_ZN5spark10LogManager8instanceEv+0x30>)
   be302:	bd10      	pop	{r4, pc}
   be304:	2003e64c 	.word	0x2003e64c
   be308:	2003e65c 	.word	0x2003e65c
   be30c:	000be7c5 	.word	0x000be7c5

000be310 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be310:	4a02      	ldr	r2, [pc, #8]	; (be31c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be312:	4903      	ldr	r1, [pc, #12]	; (be320 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be314:	4803      	ldr	r0, [pc, #12]	; (be324 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be316:	2300      	movs	r3, #0
   be318:	f7fe bccc 	b.w	bccb4 <log_set_callbacks>
   be31c:	000be5a9 	.word	0x000be5a9
   be320:	000be535 	.word	0x000be535
   be324:	000be4b5 	.word	0x000be4b5

000be328 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be328:	2300      	movs	r3, #0
   be32a:	461a      	mov	r2, r3
   be32c:	4619      	mov	r1, r3
   be32e:	4618      	mov	r0, r3
   be330:	f7fe bcc0 	b.w	bccb4 <log_set_callbacks>

000be334 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be334:	b570      	push	{r4, r5, r6, lr}
   be336:	b08a      	sub	sp, #40	; 0x28
   be338:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be33a:	4601      	mov	r1, r0
   be33c:	a804      	add	r0, sp, #16
   be33e:	f7fb fc0e 	bl	b9b5e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be342:	4e14      	ldr	r6, [pc, #80]	; (be394 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be344:	a804      	add	r0, sp, #16
   be346:	f7ff fd9b 	bl	bde80 <_ZN5spark18JSONObjectIterator4nextEv>
   be34a:	b1e8      	cbz	r0, be388 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be34c:	a904      	add	r1, sp, #16
   be34e:	4668      	mov	r0, sp
   be350:	f7fb fc16 	bl	b9b80 <_ZNK5spark18JSONObjectIterator4nameEv>
   be354:	9802      	ldr	r0, [sp, #8]
   be356:	4631      	mov	r1, r6
   be358:	f7ff fea2 	bl	be0a0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be35c:	4604      	mov	r4, r0
   be35e:	b110      	cbz	r0, be366 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be360:	1e2c      	subs	r4, r5, #0
   be362:	bf18      	it	ne
   be364:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be366:	a801      	add	r0, sp, #4
   be368:	f7f6 f952 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be36c:	2c00      	cmp	r4, #0
   be36e:	d0e9      	beq.n	be344 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be370:	a904      	add	r1, sp, #16
   be372:	4668      	mov	r0, sp
   be374:	f7fb fc15 	bl	b9ba2 <_ZNK5spark18JSONObjectIterator5valueEv>
   be378:	4668      	mov	r0, sp
   be37a:	f7ff fd24 	bl	bddc6 <_ZNK5spark9JSONValue5toIntEv>
   be37e:	6028      	str	r0, [r5, #0]
   be380:	a801      	add	r0, sp, #4
   be382:	f7f6 f945 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be386:	e7dd      	b.n	be344 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be388:	a805      	add	r0, sp, #20
   be38a:	f7f6 f941 	bl	b4610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be38e:	b00a      	add	sp, #40	; 0x28
   be390:	bd70      	pop	{r4, r5, r6, pc}
   be392:	bf00      	nop
   be394:	000c4e26 	.word	0x000c4e26

000be398 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be39a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be39c:	4620      	mov	r0, r4
   be39e:	4913      	ldr	r1, [pc, #76]	; (be3ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be3a0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be3a2:	f002 fe38 	bl	c1016 <strcmp>
   be3a6:	b950      	cbnz	r0, be3be <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be3a8:	f001 fdbc 	bl	bff24 <_Z16_fetch_usbserialv>
   be3ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be3b0:	f001 fda6 	bl	bff00 <_ZN9USBSerial5beginEl>
}
   be3b4:	b003      	add	sp, #12
   be3b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be3ba:	f001 bdb3 	b.w	bff24 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be3be:	490c      	ldr	r1, [pc, #48]	; (be3f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be3c0:	4620      	mov	r0, r4
   be3c2:	f002 fe28 	bl	c1016 <strcmp>
   be3c6:	b978      	cbnz	r0, be3e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be3c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be3cc:	a901      	add	r1, sp, #4
   be3ce:	4628      	mov	r0, r5
        int baud = 9600;
   be3d0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be3d2:	f7ff ffaf 	bl	be334 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be3d6:	f001 ffab 	bl	c0330 <_Z22__fetch_global_Serial1v>
   be3da:	9901      	ldr	r1, [sp, #4]
   be3dc:	f001 fd38 	bl	bfe50 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be3e0:	f001 ffa6 	bl	c0330 <_Z22__fetch_global_Serial1v>
}
   be3e4:	b003      	add	sp, #12
   be3e6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be3e8:	2000      	movs	r0, #0
   be3ea:	e7fb      	b.n	be3e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be3ec:	000c4e2b 	.word	0x000c4e2b
   be3f0:	000c4e32 	.word	0x000c4e32

000be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be3f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be3f6:	e9d0 5300 	ldrd	r5, r3, [r0]
   be3fa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be3fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be3fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be402:	42ae      	cmp	r6, r5
   be404:	d005      	beq.n	be412 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be406:	f105 0008 	add.w	r0, r5, #8
   be40a:	f7ff fff3 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be40e:	3514      	adds	r5, #20
   be410:	e7f7      	b.n	be402 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be412:	6820      	ldr	r0, [r4, #0]
   be414:	f7fe fd9a 	bl	bcf4c <free>
}
   be418:	4620      	mov	r0, r4
   be41a:	bd70      	pop	{r4, r5, r6, pc}

000be41c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be41c:	b510      	push	{r4, lr}
   be41e:	4604      	mov	r4, r0
   be420:	300c      	adds	r0, #12
   be422:	f7ff ffe7 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be426:	4620      	mov	r0, r4
   be428:	f7fe fe33 	bl	bd092 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be42c:	4620      	mov	r0, r4
   be42e:	bd10      	pop	{r4, pc}

000be430 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be430:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be432:	4b04      	ldr	r3, [pc, #16]	; (be444 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be434:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be436:	f840 3b04 	str.w	r3, [r0], #4
   be43a:	f7ff ffef 	bl	be41c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be43e:	4620      	mov	r0, r4
   be440:	bd10      	pop	{r4, pc}
   be442:	bf00      	nop
   be444:	000c41d4 	.word	0x000c41d4

000be448 <_ZN5spark16StreamLogHandlerD0Ev>:
   be448:	b510      	push	{r4, lr}
   be44a:	4604      	mov	r4, r0
   be44c:	f7ff fff0 	bl	be430 <_ZN5spark16StreamLogHandlerD1Ev>
   be450:	4620      	mov	r0, r4
   be452:	2124      	movs	r1, #36	; 0x24
   be454:	f7f5 fe23 	bl	b409e <_ZdlPvj>
   be458:	4620      	mov	r0, r4
   be45a:	bd10      	pop	{r4, pc}

000be45c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be45c:	b510      	push	{r4, lr}
   be45e:	4b03      	ldr	r3, [pc, #12]	; (be46c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be460:	6003      	str	r3, [r0, #0]
   be462:	4604      	mov	r4, r0
   be464:	f7ff ffe4 	bl	be430 <_ZN5spark16StreamLogHandlerD1Ev>
   be468:	4620      	mov	r0, r4
   be46a:	bd10      	pop	{r4, pc}
   be46c:	000c4ec8 	.word	0x000c4ec8

000be470 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be470:	b510      	push	{r4, lr}
   be472:	4604      	mov	r4, r0
   be474:	f7ff fff2 	bl	be45c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be478:	4620      	mov	r0, r4
   be47a:	2124      	movs	r1, #36	; 0x24
   be47c:	f7f5 fe0f 	bl	b409e <_ZdlPvj>
   be480:	4620      	mov	r0, r4
   be482:	bd10      	pop	{r4, pc}

000be484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be484:	2200      	movs	r2, #0
   be486:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be48a:	b510      	push	{r4, lr}
        capacity_(0) {
   be48c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be48e:	680c      	ldr	r4, [r1, #0]
   be490:	6004      	str	r4, [r0, #0]
   be492:	684c      	ldr	r4, [r1, #4]
   be494:	6044      	str	r4, [r0, #4]
   be496:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be498:	600a      	str	r2, [r1, #0]
   be49a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   be49c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be49e:	608a      	str	r2, [r1, #8]
}
   be4a0:	bd10      	pop	{r4, pc}

000be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   be4a2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be4a4:	6803      	ldr	r3, [r0, #0]
   be4a6:	4604      	mov	r4, r0
   be4a8:	6818      	ldr	r0, [r3, #0]
   be4aa:	f7fe f983 	bl	bc7b4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   be4ae:	4620      	mov	r0, r4
   be4b0:	bd10      	pop	{r4, pc}
	...

000be4b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   be4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be4b8:	b087      	sub	sp, #28
   be4ba:	4680      	mov	r8, r0
   be4bc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   be4be:	4b1c      	ldr	r3, [pc, #112]	; (be530 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   be4c0:	685b      	ldr	r3, [r3, #4]
   be4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be4c6:	4689      	mov	r9, r1
   be4c8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   be4ca:	b96b      	cbnz	r3, be4e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   be4cc:	f7ff ff04 	bl	be2d8 <_ZN5spark10LogManager8instanceEv>
   be4d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be4d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   be4d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be4d8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   be4da:	f7ff fddf 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   be4de:	7b23      	ldrb	r3, [r4, #12]
   be4e0:	b12b      	cbz	r3, be4ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   be4e2:	a805      	add	r0, sp, #20
   be4e4:	f7ff ffdd 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   be4e8:	b007      	add	sp, #28
   be4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   be4ee:	2301      	movs	r3, #1
   be4f0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   be4f2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   be4f6:	fa5f f989 	uxtb.w	r9, r9
   be4fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be4fe:	45aa      	cmp	sl, r5
   be500:	d012      	beq.n	be528 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   be502:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   be506:	4631      	mov	r1, r6
   be508:	1d38      	adds	r0, r7, #4
   be50a:	f7ff fe71 	bl	be1f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be50e:	4581      	cmp	r9, r0
   be510:	d3f5      	bcc.n	be4fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   be512:	683b      	ldr	r3, [r7, #0]
   be514:	9a03      	ldr	r2, [sp, #12]
   be516:	9200      	str	r2, [sp, #0]
   be518:	f8d3 b008 	ldr.w	fp, [r3, #8]
   be51c:	464a      	mov	r2, r9
   be51e:	4633      	mov	r3, r6
   be520:	4641      	mov	r1, r8
   be522:	4638      	mov	r0, r7
   be524:	47d8      	blx	fp
   be526:	e7ea      	b.n	be4fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   be528:	2300      	movs	r3, #0
   be52a:	7323      	strb	r3, [r4, #12]
   be52c:	e7d9      	b.n	be4e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   be52e:	bf00      	nop
   be530:	e000ed00 	.word	0xe000ed00

000be534 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   be534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be538:	469b      	mov	fp, r3
   be53a:	4b1a      	ldr	r3, [pc, #104]	; (be5a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   be53c:	685b      	ldr	r3, [r3, #4]
   be53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be542:	4680      	mov	r8, r0
   be544:	4689      	mov	r9, r1
   be546:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   be548:	b96b      	cbnz	r3, be566 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   be54a:	f7ff fec5 	bl	be2d8 <_ZN5spark10LogManager8instanceEv>
   be54e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be550:	f100 0324 	add.w	r3, r0, #36	; 0x24
   be554:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be556:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be558:	f7ff fda0 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   be55c:	7b23      	ldrb	r3, [r4, #12]
   be55e:	b12b      	cbz	r3, be56c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   be560:	a801      	add	r0, sp, #4
   be562:	f7ff ff9e 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be566:	b003      	add	sp, #12
   be568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   be56c:	2301      	movs	r3, #1
   be56e:	7323      	strb	r3, [r4, #12]
   be570:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   be574:	b2f6      	uxtb	r6, r6
   be576:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be57a:	4555      	cmp	r5, sl
   be57c:	d00e      	beq.n	be59c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   be57e:	f855 7b04 	ldr.w	r7, [r5], #4
   be582:	4659      	mov	r1, fp
   be584:	1d38      	adds	r0, r7, #4
   be586:	f7ff fe33 	bl	be1f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be58a:	4286      	cmp	r6, r0
   be58c:	d3f5      	bcc.n	be57a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   be58e:	683b      	ldr	r3, [r7, #0]
   be590:	464a      	mov	r2, r9
   be592:	68db      	ldr	r3, [r3, #12]
   be594:	4641      	mov	r1, r8
   be596:	4638      	mov	r0, r7
   be598:	4798      	blx	r3
   be59a:	e7ee      	b.n	be57a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   be59c:	2300      	movs	r3, #0
   be59e:	7323      	strb	r3, [r4, #12]
   be5a0:	e7de      	b.n	be560 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   be5a2:	bf00      	nop
   be5a4:	e000ed00 	.word	0xe000ed00

000be5a8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   be5a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   be5ac:	4b16      	ldr	r3, [pc, #88]	; (be608 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   be5ae:	685b      	ldr	r3, [r3, #4]
   be5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be5b4:	4605      	mov	r5, r0
   be5b6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   be5b8:	bb1b      	cbnz	r3, be602 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   be5ba:	f7ff fe8d 	bl	be2d8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   be5be:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   be5c2:	4604      	mov	r4, r0
   be5c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be5c6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be5c8:	f7ff fd68 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
   be5cc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   be5d0:	2446      	movs	r4, #70	; 0x46
   be5d2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be5d6:	45b0      	cmp	r8, r6
   be5d8:	d109      	bne.n	be5ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   be5da:	a801      	add	r0, sp, #4
   be5dc:	f7ff ff61 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   be5e0:	42a5      	cmp	r5, r4
   be5e2:	bfb4      	ite	lt
   be5e4:	2000      	movlt	r0, #0
   be5e6:	2001      	movge	r0, #1
}
   be5e8:	b002      	add	sp, #8
   be5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   be5ee:	f856 0b04 	ldr.w	r0, [r6], #4
   be5f2:	4639      	mov	r1, r7
   be5f4:	3004      	adds	r0, #4
   be5f6:	f7ff fdfb 	bl	be1f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   be5fa:	4284      	cmp	r4, r0
   be5fc:	bfa8      	it	ge
   be5fe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   be600:	e7e9      	b.n	be5d6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   be602:	2000      	movs	r0, #0
   be604:	e7f0      	b.n	be5e8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   be606:	bf00      	nop
   be608:	e000ed00 	.word	0xe000ed00

000be60c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be60e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   be612:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be614:	4604      	mov	r4, r0
   be616:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be618:	db0d      	blt.n	be636 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   be61a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   be61c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be61e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be620:	dd04      	ble.n	be62c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   be622:	00b9      	lsls	r1, r7, #2
   be624:	f7fe fc9a 	bl	bcf5c <realloc>
            if (!d) {
   be628:	b918      	cbnz	r0, be632 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   be62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   be62c:	f7fe fc8e 	bl	bcf4c <free>
        T* d = nullptr;
   be630:	2000      	movs	r0, #0
        data_ = d;
   be632:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be634:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be636:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   be638:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be63a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   be63e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   be640:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   be644:	1d08      	adds	r0, r1, #4
   be646:	f002 fc31 	bl	c0eac <memmove>
    new(p) T(std::move(value));
   be64a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   be64e:	6863      	ldr	r3, [r4, #4]
   be650:	3301      	adds	r3, #1
   be652:	6063      	str	r3, [r4, #4]
    return true;
   be654:	2001      	movs	r0, #1
   be656:	e7e8      	b.n	be62a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000be658 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   be658:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   be65a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   be65e:	4604      	mov	r4, r0
   be660:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be662:	9301      	str	r3, [sp, #4]
   be664:	460d      	mov	r5, r1
      { _M_device.lock(); }
   be666:	f7ff fd19 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   be66a:	e9d4 3200 	ldrd	r3, r2, [r4]
   be66e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   be672:	4293      	cmp	r3, r2
   be674:	4619      	mov	r1, r3
   be676:	d00b      	beq.n	be690 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   be678:	6809      	ldr	r1, [r1, #0]
   be67a:	42a9      	cmp	r1, r5
   be67c:	f103 0304 	add.w	r3, r3, #4
   be680:	d1f7      	bne.n	be672 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   be682:	a801      	add	r0, sp, #4
   be684:	f7ff ff0d 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be688:	2500      	movs	r5, #0
}
   be68a:	4628      	mov	r0, r5
   be68c:	b003      	add	sp, #12
   be68e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   be690:	4629      	mov	r1, r5
   be692:	4620      	mov	r0, r4
   be694:	f7ff ffba 	bl	be60c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   be698:	4605      	mov	r5, r0
   be69a:	2800      	cmp	r0, #0
   be69c:	d0f1      	beq.n	be682 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   be69e:	6863      	ldr	r3, [r4, #4]
   be6a0:	2b01      	cmp	r3, #1
   be6a2:	d101      	bne.n	be6a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   be6a4:	f7ff fe34 	bl	be310 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be6a8:	a801      	add	r0, sp, #4
   be6aa:	f7ff fefa 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be6ae:	e7ec      	b.n	be68a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000be6b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be6b0:	b570      	push	{r4, r5, r6, lr}
   be6b2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   be6b4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be6b8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   be6ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   be6be:	4282      	cmp	r2, r0
   be6c0:	d00f      	beq.n	be6e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   be6c2:	4601      	mov	r1, r0
            if (*p == value) {
   be6c4:	681d      	ldr	r5, [r3, #0]
   be6c6:	f851 6b04 	ldr.w	r6, [r1], #4
   be6ca:	42ae      	cmp	r6, r5
   be6cc:	d107      	bne.n	be6de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6ce:	1a52      	subs	r2, r2, r1
   be6d0:	f002 fbec 	bl	c0eac <memmove>
    --size_;
   be6d4:	6863      	ldr	r3, [r4, #4]
   be6d6:	3b01      	subs	r3, #1
   be6d8:	6063      	str	r3, [r4, #4]
    return true;
   be6da:	2001      	movs	r0, #1
}
   be6dc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   be6de:	4608      	mov	r0, r1
   be6e0:	e7ed      	b.n	be6be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   be6e2:	2000      	movs	r0, #0
   be6e4:	e7fa      	b.n	be6dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000be6e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   be6e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   be6e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   be6ec:	4604      	mov	r4, r0
   be6ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
   be6f0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be6f2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   be6f4:	f7ff fcd2 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   be6f8:	a901      	add	r1, sp, #4
   be6fa:	4620      	mov	r0, r4
   be6fc:	f7ff ffd8 	bl	be6b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   be700:	b118      	cbz	r0, be70a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   be702:	6863      	ldr	r3, [r4, #4]
   be704:	b90b      	cbnz	r3, be70a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   be706:	f7ff fe0f 	bl	be328 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be70a:	a803      	add	r0, sp, #12
   be70c:	f7ff fec9 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be710:	b004      	add	sp, #16
   be712:	bd10      	pop	{r4, pc}

000be714 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   be714:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   be716:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   be71a:	2318      	movs	r3, #24
   be71c:	4604      	mov	r4, r0
   be71e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   be722:	42ae      	cmp	r6, r5
   be724:	d015      	beq.n	be752 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   be726:	f105 0110 	add.w	r1, r5, #16
   be72a:	4620      	mov	r0, r4
   be72c:	f7ff ffc0 	bl	be6b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   be730:	6863      	ldr	r3, [r4, #4]
   be732:	b90b      	cbnz	r3, be738 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   be734:	f7ff fdf8 	bl	be328 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   be738:	69e0      	ldr	r0, [r4, #28]
   be73a:	6929      	ldr	r1, [r5, #16]
   be73c:	6803      	ldr	r3, [r0, #0]
   be73e:	68db      	ldr	r3, [r3, #12]
   be740:	4798      	blx	r3
        if (h.stream) {
   be742:	6969      	ldr	r1, [r5, #20]
   be744:	b119      	cbz	r1, be74e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   be746:	6a20      	ldr	r0, [r4, #32]
   be748:	6803      	ldr	r3, [r0, #0]
   be74a:	68db      	ldr	r3, [r3, #12]
   be74c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   be74e:	3518      	adds	r5, #24
   be750:	e7e7      	b.n	be722 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   be752:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   be756:	2618      	movs	r6, #24
   be758:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be75c:	42ae      	cmp	r6, r5
   be75e:	d004      	beq.n	be76a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   be760:	4628      	mov	r0, r5
   be762:	f000 ff45 	bl	bf5f0 <_ZN6StringD1Ev>
   be766:	3518      	adds	r5, #24
   be768:	e7f8      	b.n	be75c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   be76a:	2300      	movs	r3, #0
   be76c:	6163      	str	r3, [r4, #20]
}
   be76e:	bd70      	pop	{r4, r5, r6, pc}

000be770 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   be770:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be772:	4604      	mov	r4, r0
    resetSystemCallbacks();
   be774:	f7ff fdd8 	bl	be328 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   be778:	f104 0324 	add.w	r3, r4, #36	; 0x24
   be77c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be77e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be780:	f7ff fc8c 	bl	be09c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   be784:	4620      	mov	r0, r4
   be786:	f7ff ffc5 	bl	be714 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   be78a:	a801      	add	r0, sp, #4
   be78c:	f7ff fe89 	bl	be4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   be790:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be792:	b108      	cbz	r0, be798 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   be794:	f7fd fffe 	bl	bc794 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   be798:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   be79c:	2618      	movs	r6, #24
   be79e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be7a2:	42ae      	cmp	r6, r5
   be7a4:	d004      	beq.n	be7b0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   be7a6:	4628      	mov	r0, r5
   be7a8:	f000 ff22 	bl	bf5f0 <_ZN6StringD1Ev>
   be7ac:	3518      	adds	r5, #24
   be7ae:	e7f8      	b.n	be7a2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   be7b0:	6920      	ldr	r0, [r4, #16]
   be7b2:	f7fe fbcb 	bl	bcf4c <free>
   be7b6:	6820      	ldr	r0, [r4, #0]
   be7b8:	f7fe fbc8 	bl	bcf4c <free>
}
   be7bc:	4620      	mov	r0, r4
   be7be:	b002      	add	sp, #8
   be7c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000be7c4 <__tcf_2>:
    static LogManager mgr;
   be7c4:	4801      	ldr	r0, [pc, #4]	; (be7cc <__tcf_2+0x8>)
   be7c6:	f7ff bfd3 	b.w	be770 <_ZN5spark10LogManagerD1Ev>
   be7ca:	bf00      	nop
   be7cc:	2003e65c 	.word	0x2003e65c

000be7d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   be7d0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be7d4:	4604      	mov	r4, r0
   be7d6:	460d      	mov	r5, r1
   be7d8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be7da:	d915      	bls.n	be808 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   be7dc:	4290      	cmp	r0, r2
   be7de:	d214      	bcs.n	be80a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   be7e0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   be7e4:	1a75      	subs	r5, r6, r1
   be7e6:	f1a1 0714 	sub.w	r7, r1, #20
   be7ea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be7ec:	42b7      	cmp	r7, r6
   be7ee:	d01a      	beq.n	be826 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   be7f0:	b11c      	cbz	r4, be7fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   be7f2:	4631      	mov	r1, r6
   be7f4:	4620      	mov	r0, r4
   be7f6:	f7ff fcab 	bl	be150 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   be7fa:	f106 0008 	add.w	r0, r6, #8
   be7fe:	f7ff fdf9 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   be802:	3e14      	subs	r6, #20
   be804:	3c14      	subs	r4, #20
   be806:	e7f1      	b.n	be7ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   be808:	d00d      	beq.n	be826 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   be80a:	42b5      	cmp	r5, r6
   be80c:	d00b      	beq.n	be826 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   be80e:	b11c      	cbz	r4, be818 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   be810:	4629      	mov	r1, r5
   be812:	4620      	mov	r0, r4
   be814:	f7ff fc9c 	bl	be150 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   be818:	f105 0008 	add.w	r0, r5, #8
   be81c:	f7ff fdea 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   be820:	3514      	adds	r5, #20
   be822:	3414      	adds	r4, #20
   be824:	e7f1      	b.n	be80a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   be826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be828 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   be828:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be82c:	4604      	mov	r4, r0
   be82e:	460d      	mov	r5, r1
   be830:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be832:	d914      	bls.n	be85e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   be834:	4290      	cmp	r0, r2
   be836:	d213      	bcs.n	be860 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   be838:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   be83c:	1a75      	subs	r5, r6, r1
   be83e:	f1a1 0710 	sub.w	r7, r1, #16
   be842:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be844:	42b7      	cmp	r7, r6
   be846:	d018      	beq.n	be87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   be848:	b11c      	cbz	r4, be852 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   be84a:	4631      	mov	r1, r6
   be84c:	4620      	mov	r0, r4
   be84e:	f000 ff4b 	bl	bf6e8 <_ZN6StringC1EOS_>
                end->~T();
   be852:	4630      	mov	r0, r6
   be854:	f000 fecc 	bl	bf5f0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   be858:	3e10      	subs	r6, #16
   be85a:	3c10      	subs	r4, #16
   be85c:	e7f2      	b.n	be844 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   be85e:	d00c      	beq.n	be87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   be860:	42b5      	cmp	r5, r6
   be862:	d00a      	beq.n	be87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   be864:	b11c      	cbz	r4, be86e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   be866:	4629      	mov	r1, r5
   be868:	4620      	mov	r0, r4
   be86a:	f000 ff3d 	bl	bf6e8 <_ZN6StringC1EOS_>
                p->~T();
   be86e:	4628      	mov	r0, r5
   be870:	f000 febe 	bl	bf5f0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   be874:	3510      	adds	r5, #16
   be876:	3410      	adds	r4, #16
   be878:	e7f2      	b.n	be860 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   be87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be87c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   be87c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be87e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be880:	4605      	mov	r5, r0
        if (n > 0) {
   be882:	dd11      	ble.n	be8a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   be884:	0130      	lsls	r0, r6, #4
   be886:	f7fe fb59 	bl	bcf3c <malloc>
            if (!d) {
   be88a:	4604      	mov	r4, r0
   be88c:	b158      	cbz	r0, be8a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be88e:	e9d5 1200 	ldrd	r1, r2, [r5]
   be892:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   be896:	f7ff ffc7 	bl	be828 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   be89a:	6828      	ldr	r0, [r5, #0]
   be89c:	f7fe fb56 	bl	bcf4c <free>
        data_ = d;
   be8a0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be8a2:	60ae      	str	r6, [r5, #8]
        return true;
   be8a4:	2001      	movs	r0, #1
    }
   be8a6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be8a8:	2400      	movs	r4, #0
   be8aa:	e7f6      	b.n	be89a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000be8ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   be8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be8b0:	4690      	mov	r8, r2
   be8b2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   be8b4:	2300      	movs	r3, #0
   be8b6:	9103      	str	r1, [sp, #12]
    return size_;
   be8b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   be8bc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   be8be:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   be8c0:	4299      	cmp	r1, r3
        capacity_(0) {
   be8c2:	e9c0 3300 	strd	r3, r3, [r0]
   be8c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be8ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   be8d2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   be8d4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   be8d6:	dc23      	bgt.n	be920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   be8d8:	e9d8 5700 	ldrd	r5, r7, [r8]
   be8dc:	2314      	movs	r3, #20
   be8de:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   be8e2:	42af      	cmp	r7, r5
   be8e4:	d03b      	beq.n	be95e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   be8e6:	4629      	mov	r1, r5
   be8e8:	a80b      	add	r0, sp, #44	; 0x2c
   be8ea:	f000 fefd 	bl	bf6e8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   be8ee:	a90b      	add	r1, sp, #44	; 0x2c
   be8f0:	a80f      	add	r0, sp, #60	; 0x3c
   be8f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   be8f4:	f000 fef8 	bl	bf6e8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be8f8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   be8fc:	4299      	cmp	r1, r3
   be8fe:	da1b      	bge.n	be938 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   be900:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   be902:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   be904:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   be908:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   be90c:	4631      	mov	r1, r6
   be90e:	f106 0010 	add.w	r0, r6, #16
   be912:	f7ff ff89 	bl	be828 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   be916:	b9ee      	cbnz	r6, be954 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   be918:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be91a:	3301      	adds	r3, #1
   be91c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   be91e:	e011      	b.n	be944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   be920:	a808      	add	r0, sp, #32
   be922:	f7ff ffab 	bl	be87c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be926:	2800      	cmp	r0, #0
   be928:	d1d6      	bne.n	be8d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   be92a:	a808      	add	r0, sp, #32
   be92c:	f7fe fbb1 	bl	bd092 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be930:	4620      	mov	r0, r4
   be932:	b015      	add	sp, #84	; 0x54
   be934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be938:	3101      	adds	r1, #1
   be93a:	a808      	add	r0, sp, #32
   be93c:	f7ff ff9e 	bl	be87c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   be940:	2800      	cmp	r0, #0
   be942:	d1dd      	bne.n	be900 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   be944:	a80f      	add	r0, sp, #60	; 0x3c
   be946:	f000 fe53 	bl	bf5f0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   be94a:	a80b      	add	r0, sp, #44	; 0x2c
   be94c:	f000 fe50 	bl	bf5f0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   be950:	3514      	adds	r5, #20
   be952:	e7c6      	b.n	be8e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   be954:	a90f      	add	r1, sp, #60	; 0x3c
   be956:	4630      	mov	r0, r6
   be958:	f000 fec6 	bl	bf6e8 <_ZN6StringC1EOS_>
   be95c:	e7dc      	b.n	be918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   be95e:	2600      	movs	r6, #0
   be960:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   be964:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   be966:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   be96a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   be96e:	429e      	cmp	r6, r3
   be970:	da7c      	bge.n	bea6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   be972:	0133      	lsls	r3, r6, #4
   be974:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   be976:	9306      	str	r3, [sp, #24]
        if (!category) {
   be978:	b90b      	cbnz	r3, be97e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   be97a:	3601      	adds	r6, #1
   be97c:	e7f5      	b.n	be96a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   be97e:	2300      	movs	r3, #0
   be980:	9307      	str	r3, [sp, #28]
   be982:	fb09 f306 	mul.w	r3, r9, r6
   be986:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   be988:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   be98a:	a907      	add	r1, sp, #28
   be98c:	a806      	add	r0, sp, #24
   be98e:	f7ff fb5e 	bl	be04e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be992:	4682      	mov	sl, r0
   be994:	2800      	cmp	r0, #0
   be996:	d0f0      	beq.n	be97a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   be998:	f04f 0300 	mov.w	r3, #0
   be99c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be9a0:	4601      	mov	r1, r0
   be9a2:	9a07      	ldr	r2, [sp, #28]
   be9a4:	f10d 0317 	add.w	r3, sp, #23
   be9a8:	4628      	mov	r0, r5
   be9aa:	f7ff fbe5 	bl	be178 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be9ae:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   be9b2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   be9b4:	2f00      	cmp	r7, #0
   be9b6:	d14a      	bne.n	bea4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   be9b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   be9bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   be9c0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   be9c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be9c8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   be9cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   be9d0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be9d2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   be9d6:	4293      	cmp	r3, r2
   be9d8:	db17      	blt.n	bea0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   be9da:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   be9de:	f1ba 0f00 	cmp.w	sl, #0
   be9e2:	dd30      	ble.n	bea46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   be9e4:	fb09 f00a 	mul.w	r0, r9, sl
   be9e8:	f7fe faa8 	bl	bcf3c <malloc>
            if (!d) {
   be9ec:	4683      	mov	fp, r0
   be9ee:	b360      	cbz	r0, bea4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   be9f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   be9f4:	fb09 1202 	mla	r2, r9, r2, r1
   be9f8:	f7ff feea 	bl	be7d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   be9fc:	6828      	ldr	r0, [r5, #0]
   be9fe:	f7fe faa5 	bl	bcf4c <free>
        data_ = d;
   bea02:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bea06:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bea0a:	682b      	ldr	r3, [r5, #0]
   bea0c:	9a01      	ldr	r2, [sp, #4]
   bea0e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bea12:	686a      	ldr	r2, [r5, #4]
   bea14:	4651      	mov	r1, sl
   bea16:	fb09 3202 	mla	r2, r9, r2, r3
   bea1a:	f10a 0014 	add.w	r0, sl, #20
   bea1e:	f7ff fed7 	bl	be7d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bea22:	f1ba 0f00 	cmp.w	sl, #0
   bea26:	d003      	beq.n	bea30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bea28:	a90f      	add	r1, sp, #60	; 0x3c
   bea2a:	4650      	mov	r0, sl
   bea2c:	f7ff fb90 	bl	be150 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bea30:	686b      	ldr	r3, [r5, #4]
   bea32:	3301      	adds	r3, #1
   bea34:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bea36:	a811      	add	r0, sp, #68	; 0x44
   bea38:	f7ff fcdc 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bea3c:	b13f      	cbz	r7, bea4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bea3e:	a80b      	add	r0, sp, #44	; 0x2c
   bea40:	f7ff fcd8 	bl	be3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bea44:	e771      	b.n	be92a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bea46:	46bb      	mov	fp, r7
   bea48:	e7d8      	b.n	be9fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bea4a:	2701      	movs	r7, #1
   bea4c:	e7f3      	b.n	bea36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bea4e:	9b01      	ldr	r3, [sp, #4]
   bea50:	682d      	ldr	r5, [r5, #0]
   bea52:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bea56:	9b06      	ldr	r3, [sp, #24]
   bea58:	781b      	ldrb	r3, [r3, #0]
   bea5a:	b92b      	cbnz	r3, bea68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bea5c:	f8d8 3000 	ldr.w	r3, [r8]
   bea60:	9a02      	ldr	r2, [sp, #8]
   bea62:	4413      	add	r3, r2
   bea64:	7c1b      	ldrb	r3, [r3, #16]
   bea66:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bea68:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bea6a:	e78e      	b.n	be98a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea6c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bea6e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea70:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bea72:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea74:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bea76:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bea78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bea7a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea7c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bea7e:	60a2      	str	r2, [r4, #8]
   bea80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bea82:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea84:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bea86:	60e2      	str	r2, [r4, #12]
   bea88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bea8a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bea8c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bea8e:	6122      	str	r2, [r4, #16]
   bea90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bea92:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bea94:	9b03      	ldr	r3, [sp, #12]
   bea96:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bea98:	6162      	str	r2, [r4, #20]
   bea9a:	7623      	strb	r3, [r4, #24]
   bea9c:	e7cf      	b.n	bea3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000beaa0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   beaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   beaa2:	4604      	mov	r4, r0
   beaa4:	b087      	sub	sp, #28
   beaa6:	460d      	mov	r5, r1
        filter_(level, filters) {
   beaa8:	4626      	mov	r6, r4
        stream_(&stream) {
   beaaa:	4619      	mov	r1, r3
   beaac:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   beaae:	4617      	mov	r7, r2
        stream_(&stream) {
   beab0:	f7f8 fb63 	bl	b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   beab4:	4b0b      	ldr	r3, [pc, #44]	; (beae4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   beab6:	f846 3b04 	str.w	r3, [r6], #4
   beaba:	4669      	mov	r1, sp
   beabc:	a803      	add	r0, sp, #12
   beabe:	f7f8 fb5c 	bl	b717a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   beac2:	aa03      	add	r2, sp, #12
   beac4:	4639      	mov	r1, r7
   beac6:	4630      	mov	r0, r6
   beac8:	f7ff fef0 	bl	be8ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beacc:	a803      	add	r0, sp, #12
   beace:	f7f8 fb13 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bead2:	4668      	mov	r0, sp
   bead4:	f7f8 fb10 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bead8:	4b03      	ldr	r3, [pc, #12]	; (beae8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   beada:	6023      	str	r3, [r4, #0]
}
   beadc:	4620      	mov	r0, r4
        stream_(&stream) {
   beade:	6225      	str	r5, [r4, #32]
}
   beae0:	b007      	add	sp, #28
   beae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   beae4:	000c41d4 	.word	0x000c41d4
   beae8:	000c4eb0 	.word	0x000c4eb0

000beaec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   beaec:	b5f0      	push	{r4, r5, r6, r7, lr}
   beaee:	460f      	mov	r7, r1
   beaf0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   beaf2:	491d      	ldr	r1, [pc, #116]	; (beb68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   beaf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   beaf6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   beaf8:	4616      	mov	r6, r2
   beafa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   beafc:	f002 fa8b 	bl	c1016 <strcmp>
   beb00:	b9c0      	cbnz	r0, beb34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   beb02:	b1a4      	cbz	r4, beb2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   beb04:	4629      	mov	r1, r5
   beb06:	a801      	add	r0, sp, #4
   beb08:	f7ff fcbc 	bl	be484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   beb0c:	4917      	ldr	r1, [pc, #92]	; (beb6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   beb0e:	2024      	movs	r0, #36	; 0x24
   beb10:	f001 fc32 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   beb14:	4605      	mov	r5, r0
   beb16:	b130      	cbz	r0, beb26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   beb18:	ab01      	add	r3, sp, #4
   beb1a:	4632      	mov	r2, r6
   beb1c:	4621      	mov	r1, r4
   beb1e:	f7ff ffbf 	bl	beaa0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beb22:	4b13      	ldr	r3, [pc, #76]	; (beb70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   beb24:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   beb26:	a801      	add	r0, sp, #4
   beb28:	f7f8 fae6 	bl	b70f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   beb2c:	462c      	mov	r4, r5
}
   beb2e:	4620      	mov	r0, r4
   beb30:	b005      	add	sp, #20
   beb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   beb34:	490f      	ldr	r1, [pc, #60]	; (beb74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   beb36:	4638      	mov	r0, r7
   beb38:	f002 fa6d 	bl	c1016 <strcmp>
   beb3c:	b990      	cbnz	r0, beb64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   beb3e:	2c00      	cmp	r4, #0
   beb40:	d0f5      	beq.n	beb2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   beb42:	4629      	mov	r1, r5
   beb44:	a801      	add	r0, sp, #4
   beb46:	f7ff fc9d 	bl	be484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   beb4a:	4908      	ldr	r1, [pc, #32]	; (beb6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   beb4c:	2024      	movs	r0, #36	; 0x24
   beb4e:	f001 fc13 	bl	c0378 <_ZnwjRKSt9nothrow_t>
   beb52:	4605      	mov	r5, r0
   beb54:	2800      	cmp	r0, #0
   beb56:	d0e6      	beq.n	beb26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   beb58:	ab01      	add	r3, sp, #4
   beb5a:	4632      	mov	r2, r6
   beb5c:	4621      	mov	r1, r4
   beb5e:	f7ff ff9f 	bl	beaa0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beb62:	e7e0      	b.n	beb26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   beb64:	2400      	movs	r4, #0
   beb66:	e7e2      	b.n	beb2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   beb68:	000c4e3a 	.word	0x000c4e3a
   beb6c:	000c5004 	.word	0x000c5004
   beb70:	000c4ec8 	.word	0x000c4ec8
   beb74:	000c4e3e 	.word	0x000c4e3e

000beb78 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   beb78:	4b01      	ldr	r3, [pc, #4]	; (beb80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   beb7a:	4a02      	ldr	r2, [pc, #8]	; (beb84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   beb7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   beb7e:	4770      	bx	lr
   beb80:	2003e658 	.word	0x2003e658
   beb84:	000c4e4f 	.word	0x000c4e4f

000beb88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   beb8c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   beb8e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beb92:	4604      	mov	r4, r0
   beb94:	460e      	mov	r6, r1
   beb96:	4617      	mov	r7, r2
   beb98:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   beb9a:	f001 f9c3 	bl	bff24 <_Z16_fetch_usbserialv>
   beb9e:	4581      	cmp	r9, r0
   beba0:	d04c      	beq.n	bec3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   beba2:	792b      	ldrb	r3, [r5, #4]
   beba4:	0719      	lsls	r1, r3, #28
   beba6:	d504      	bpl.n	bebb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   beba8:	696a      	ldr	r2, [r5, #20]
   bebaa:	4954      	ldr	r1, [pc, #336]	; (becfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bebac:	4620      	mov	r0, r4
   bebae:	f7ff fac0 	bl	be132 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bebb2:	f1b8 0f00 	cmp.w	r8, #0
   bebb6:	d00d      	beq.n	bebd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bebb8:	215b      	movs	r1, #91	; 0x5b
   bebba:	4620      	mov	r0, r4
   bebbc:	f7ff faad 	bl	be11a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bebc0:	4641      	mov	r1, r8
   bebc2:	4620      	mov	r0, r4
   bebc4:	f7ff fa9a 	bl	be0fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bebc8:	6823      	ldr	r3, [r4, #0]
   bebca:	494d      	ldr	r1, [pc, #308]	; (bed00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bebcc:	68db      	ldr	r3, [r3, #12]
   bebce:	2202      	movs	r2, #2
   bebd0:	4620      	mov	r0, r4
   bebd2:	4798      	blx	r3
    if (attr.has_file) {
   bebd4:	792b      	ldrb	r3, [r5, #4]
   bebd6:	07da      	lsls	r2, r3, #31
   bebd8:	d523      	bpl.n	bec22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bebda:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bebde:	212f      	movs	r1, #47	; 0x2f
   bebe0:	4640      	mov	r0, r8
   bebe2:	f002 fa77 	bl	c10d4 <strrchr>
    if (s1) {
   bebe6:	b108      	cbz	r0, bebec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bebe8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bebec:	4641      	mov	r1, r8
   bebee:	4620      	mov	r0, r4
   bebf0:	f7ff fa84 	bl	be0fc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bebf4:	792b      	ldrb	r3, [r5, #4]
   bebf6:	079b      	lsls	r3, r3, #30
   bebf8:	d508      	bpl.n	bec0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bebfa:	213a      	movs	r1, #58	; 0x3a
   bebfc:	4620      	mov	r0, r4
   bebfe:	f7ff fa8c 	bl	be11a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bec02:	68ea      	ldr	r2, [r5, #12]
   bec04:	493f      	ldr	r1, [pc, #252]	; (bed04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bec06:	4620      	mov	r0, r4
   bec08:	f7ff fa93 	bl	be132 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bec0c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bec0e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bec10:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bec14:	68db      	ldr	r3, [r3, #12]
   bec16:	bf14      	ite	ne
   bec18:	493b      	ldrne	r1, [pc, #236]	; (bed08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bec1a:	493c      	ldreq	r1, [pc, #240]	; (bed0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bec1c:	2202      	movs	r2, #2
            write(": ", 2);
   bec1e:	4620      	mov	r0, r4
   bec20:	4798      	blx	r3
    if (attr.has_function) {
   bec22:	792b      	ldrb	r3, [r5, #4]
   bec24:	0758      	lsls	r0, r3, #29
   bec26:	d51d      	bpl.n	bec64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bec28:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bec2a:	460b      	mov	r3, r1
   bec2c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bec2e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bec32:	b160      	cbz	r0, bec4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bec34:	2820      	cmp	r0, #32
   bec36:	d108      	bne.n	bec4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bec38:	4619      	mov	r1, r3
   bec3a:	e7f7      	b.n	bec2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bec3c:	4834      	ldr	r0, [pc, #208]	; (bed10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bec3e:	f000 f966 	bl	bef0e <_ZN5spark12NetworkClass9listeningEv>
   bec42:	2800      	cmp	r0, #0
   bec44:	d0ad      	beq.n	beba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bec46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bec4a:	2828      	cmp	r0, #40	; 0x28
   bec4c:	d1ee      	bne.n	bec2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bec4e:	6823      	ldr	r3, [r4, #0]
   bec50:	1a52      	subs	r2, r2, r1
   bec52:	68db      	ldr	r3, [r3, #12]
   bec54:	4620      	mov	r0, r4
   bec56:	4798      	blx	r3
        write("(): ", 4);
   bec58:	6823      	ldr	r3, [r4, #0]
   bec5a:	492e      	ldr	r1, [pc, #184]	; (bed14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bec5c:	68db      	ldr	r3, [r3, #12]
   bec5e:	2204      	movs	r2, #4
   bec60:	4620      	mov	r0, r4
   bec62:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bec64:	2100      	movs	r1, #0
   bec66:	4638      	mov	r0, r7
   bec68:	f7fe f81c 	bl	bcca4 <log_level_name>
   bec6c:	4601      	mov	r1, r0
    write(s);
   bec6e:	4620      	mov	r0, r4
   bec70:	f7ff fa44 	bl	be0fc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bec74:	6823      	ldr	r3, [r4, #0]
   bec76:	4925      	ldr	r1, [pc, #148]	; (bed0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bec78:	68db      	ldr	r3, [r3, #12]
   bec7a:	2202      	movs	r2, #2
   bec7c:	4620      	mov	r0, r4
   bec7e:	4798      	blx	r3
    if (msg) {
   bec80:	b11e      	cbz	r6, bec8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bec82:	4631      	mov	r1, r6
   bec84:	4620      	mov	r0, r4
   bec86:	f7ff fa39 	bl	be0fc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bec8a:	792b      	ldrb	r3, [r5, #4]
   bec8c:	f013 0f30 	tst.w	r3, #48	; 0x30
   bec90:	d02c      	beq.n	becec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bec92:	6823      	ldr	r3, [r4, #0]
   bec94:	4920      	ldr	r1, [pc, #128]	; (bed18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bec96:	68db      	ldr	r3, [r3, #12]
   bec98:	2202      	movs	r2, #2
   bec9a:	4620      	mov	r0, r4
   bec9c:	4798      	blx	r3
        if (attr.has_code) {
   bec9e:	792b      	ldrb	r3, [r5, #4]
   beca0:	06d9      	lsls	r1, r3, #27
   beca2:	d50a      	bpl.n	becba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   beca4:	6823      	ldr	r3, [r4, #0]
   beca6:	491d      	ldr	r1, [pc, #116]	; (bed1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   beca8:	68db      	ldr	r3, [r3, #12]
   becaa:	2207      	movs	r2, #7
   becac:	4620      	mov	r0, r4
   becae:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   becb0:	69aa      	ldr	r2, [r5, #24]
   becb2:	491b      	ldr	r1, [pc, #108]	; (bed20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   becb4:	4620      	mov	r0, r4
   becb6:	f7ff fa3c 	bl	be132 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   becba:	792b      	ldrb	r3, [r5, #4]
   becbc:	069a      	lsls	r2, r3, #26
   becbe:	d511      	bpl.n	bece4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   becc0:	06db      	lsls	r3, r3, #27
   becc2:	d505      	bpl.n	becd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   becc4:	6823      	ldr	r3, [r4, #0]
   becc6:	4910      	ldr	r1, [pc, #64]	; (bed08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   becc8:	68db      	ldr	r3, [r3, #12]
   becca:	2202      	movs	r2, #2
   beccc:	4620      	mov	r0, r4
   becce:	4798      	blx	r3
            write("details = ", 10);
   becd0:	6823      	ldr	r3, [r4, #0]
   becd2:	4914      	ldr	r1, [pc, #80]	; (bed24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   becd4:	68db      	ldr	r3, [r3, #12]
   becd6:	4620      	mov	r0, r4
   becd8:	220a      	movs	r2, #10
   becda:	4798      	blx	r3
            write(attr.details);
   becdc:	69e9      	ldr	r1, [r5, #28]
   becde:	4620      	mov	r0, r4
   bece0:	f7ff fa0c 	bl	be0fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bece4:	215d      	movs	r1, #93	; 0x5d
   bece6:	4620      	mov	r0, r4
   bece8:	f7ff fa17 	bl	be11a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   becec:	6823      	ldr	r3, [r4, #0]
   becee:	490e      	ldr	r1, [pc, #56]	; (bed28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   becf0:	68db      	ldr	r3, [r3, #12]
   becf2:	4620      	mov	r0, r4
   becf4:	2202      	movs	r2, #2
}
   becf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   becfa:	4718      	bx	r3
   becfc:	000c4e53 	.word	0x000c4e53
   bed00:	000c4e5a 	.word	0x000c4e5a
   bed04:	000c35af 	.word	0x000c35af
   bed08:	000c4e5d 	.word	0x000c4e5d
   bed0c:	000c4e62 	.word	0x000c4e62
   bed10:	2003e684 	.word	0x2003e684
   bed14:	000c4e60 	.word	0x000c4e60
   bed18:	000c4e65 	.word	0x000c4e65
   bed1c:	000c4e68 	.word	0x000c4e68
   bed20:	000c4e70 	.word	0x000c4e70
   bed24:	000c4e73 	.word	0x000c4e73
   bed28:	000c4e7e 	.word	0x000c4e7e

000bed2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bed2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bed30:	b085      	sub	sp, #20
    return stream_;
   bed32:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bed36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bed38:	4605      	mov	r5, r0
   bed3a:	460f      	mov	r7, r1
   bed3c:	4690      	mov	r8, r2
   bed3e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bed40:	f001 f8f0 	bl	bff24 <_Z16_fetch_usbserialv>
   bed44:	4581      	cmp	r9, r0
   bed46:	d105      	bne.n	bed54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bed48:	4849      	ldr	r0, [pc, #292]	; (bee70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bed4a:	f000 f8e0 	bl	bef0e <_ZN5spark12NetworkClass9listeningEv>
   bed4e:	2800      	cmp	r0, #0
   bed50:	f040 808a 	bne.w	bee68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bed54:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bed56:	4a47      	ldr	r2, [pc, #284]	; (bee74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bed58:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bed5a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bed5e:	a801      	add	r0, sp, #4
        strm_(stream) {
   bed60:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bed62:	f88d 9008 	strb.w	r9, [sp, #8]
   bed66:	f7ff f8b4 	bl	bded2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bed6a:	4649      	mov	r1, r9
   bed6c:	4640      	mov	r0, r8
   bed6e:	f7fd ff99 	bl	bcca4 <log_level_name>
    json.name("l", 1).value(s);
   bed72:	4941      	ldr	r1, [pc, #260]	; (bee78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bed74:	4680      	mov	r8, r0
   bed76:	2201      	movs	r2, #1
   bed78:	a801      	add	r0, sp, #4
   bed7a:	f7ff f939 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bed7e:	4641      	mov	r1, r8
   bed80:	f7ff f9ae 	bl	be0e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bed84:	b13f      	cbz	r7, bed96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bed86:	493d      	ldr	r1, [pc, #244]	; (bee7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bed88:	2201      	movs	r2, #1
   bed8a:	a801      	add	r0, sp, #4
   bed8c:	f7ff f930 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bed90:	4639      	mov	r1, r7
   bed92:	f7ff f9a5 	bl	be0e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bed96:	b13e      	cbz	r6, beda8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bed98:	4939      	ldr	r1, [pc, #228]	; (bee80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bed9a:	2201      	movs	r2, #1
   bed9c:	a801      	add	r0, sp, #4
   bed9e:	f7ff f927 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   beda2:	4631      	mov	r1, r6
   beda4:	f7ff f99c 	bl	be0e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   beda8:	7923      	ldrb	r3, [r4, #4]
   bedaa:	07df      	lsls	r7, r3, #31
   bedac:	d50e      	bpl.n	bedcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bedae:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bedb0:	212f      	movs	r1, #47	; 0x2f
   bedb2:	4630      	mov	r0, r6
   bedb4:	f002 f98e 	bl	c10d4 <strrchr>
    if (s1) {
   bedb8:	b100      	cbz	r0, bedbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bedba:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bedbc:	4931      	ldr	r1, [pc, #196]	; (bee84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bedbe:	2201      	movs	r2, #1
   bedc0:	a801      	add	r0, sp, #4
   bedc2:	f7ff f915 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bedc6:	4631      	mov	r1, r6
   bedc8:	f7ff f98a 	bl	be0e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bedcc:	7923      	ldrb	r3, [r4, #4]
   bedce:	079e      	lsls	r6, r3, #30
   bedd0:	d507      	bpl.n	bede2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bedd2:	492d      	ldr	r1, [pc, #180]	; (bee88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bedd4:	2202      	movs	r2, #2
   bedd6:	a801      	add	r0, sp, #4
   bedd8:	f7ff f90a 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   beddc:	68e1      	ldr	r1, [r4, #12]
   bedde:	f7ff f885 	bl	bdeec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bede2:	7923      	ldrb	r3, [r4, #4]
   bede4:	0758      	lsls	r0, r3, #29
   bede6:	d514      	bpl.n	bee12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bede8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bedea:	4633      	mov	r3, r6
   bedec:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bedee:	f813 2b01 	ldrb.w	r2, [r3], #1
   bedf2:	b12a      	cbz	r2, bee00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bedf4:	2a20      	cmp	r2, #32
   bedf6:	d101      	bne.n	bedfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bedf8:	461e      	mov	r6, r3
   bedfa:	e7f7      	b.n	bedec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bedfc:	2a28      	cmp	r2, #40	; 0x28
   bedfe:	d1f5      	bne.n	bedec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bee00:	4922      	ldr	r1, [pc, #136]	; (bee8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bee02:	2202      	movs	r2, #2
   bee04:	a801      	add	r0, sp, #4
   bee06:	f7ff f8f3 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bee0a:	1bba      	subs	r2, r7, r6
   bee0c:	4631      	mov	r1, r6
   bee0e:	f7ff f8ff 	bl	be010 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bee12:	7923      	ldrb	r3, [r4, #4]
   bee14:	0719      	lsls	r1, r3, #28
   bee16:	d507      	bpl.n	bee28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bee18:	491d      	ldr	r1, [pc, #116]	; (bee90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bee1a:	2201      	movs	r2, #1
   bee1c:	a801      	add	r0, sp, #4
   bee1e:	f7ff f8e7 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bee22:	6961      	ldr	r1, [r4, #20]
   bee24:	f7ff f874 	bl	bdf10 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bee28:	7923      	ldrb	r3, [r4, #4]
   bee2a:	06da      	lsls	r2, r3, #27
   bee2c:	d508      	bpl.n	bee40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bee2e:	2204      	movs	r2, #4
   bee30:	4918      	ldr	r1, [pc, #96]	; (bee94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bee32:	eb0d 0002 	add.w	r0, sp, r2
   bee36:	f7ff f8db 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bee3a:	69a1      	ldr	r1, [r4, #24]
   bee3c:	f7ff f856 	bl	bdeec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bee40:	7923      	ldrb	r3, [r4, #4]
   bee42:	069b      	lsls	r3, r3, #26
   bee44:	d507      	bpl.n	bee56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bee46:	4914      	ldr	r1, [pc, #80]	; (bee98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bee48:	2206      	movs	r2, #6
   bee4a:	a801      	add	r0, sp, #4
   bee4c:	f7ff f8d0 	bl	bdff0 <_ZN5spark10JSONWriter4nameEPKcj>
   bee50:	69e1      	ldr	r1, [r4, #28]
   bee52:	f7ff f945 	bl	be0e0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bee56:	a801      	add	r0, sp, #4
   bee58:	f7ff f825 	bl	bdea6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bee5c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bee5e:	490f      	ldr	r1, [pc, #60]	; (bee9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bee60:	6803      	ldr	r3, [r0, #0]
   bee62:	2202      	movs	r2, #2
   bee64:	68db      	ldr	r3, [r3, #12]
   bee66:	4798      	blx	r3
}
   bee68:	b005      	add	sp, #20
   bee6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bee6e:	bf00      	nop
   bee70:	2003e684 	.word	0x2003e684
   bee74:	000c4e98 	.word	0x000c4e98
   bee78:	000c4e30 	.word	0x000c4e30
   bee7c:	000c4780 	.word	0x000c4780
   bee80:	000c5360 	.word	0x000c5360
   bee84:	000c4595 	.word	0x000c4595
   bee88:	000c4e81 	.word	0x000c4e81
   bee8c:	000c3e59 	.word	0x000c3e59
   bee90:	000c3b12 	.word	0x000c3b12
   bee94:	000c4e84 	.word	0x000c4e84
   bee98:	000c4e89 	.word	0x000c4e89
   bee9c:	000c4e7e 	.word	0x000c4e7e

000beea0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   beea0:	2300      	movs	r3, #0
   beea2:	6840      	ldr	r0, [r0, #4]
   beea4:	461a      	mov	r2, r3
   beea6:	f7fd bfe9 	b.w	bce7c <network_connect>

000beeaa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   beeaa:	6840      	ldr	r0, [r0, #4]
   beeac:	2200      	movs	r2, #0
   beeae:	2102      	movs	r1, #2
   beeb0:	f7fd bff4 	b.w	bce9c <network_disconnect>

000beeb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   beeb4:	2200      	movs	r2, #0
   beeb6:	6840      	ldr	r0, [r0, #4]
   beeb8:	4611      	mov	r1, r2
   beeba:	f7fd bfe7 	b.w	bce8c <network_connecting>

000beebe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   beebe:	2200      	movs	r2, #0
   beec0:	6840      	ldr	r0, [r0, #4]
   beec2:	4611      	mov	r1, r2
   beec4:	f7fd bff2 	b.w	bceac <network_ready>

000beec8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   beec8:	2300      	movs	r3, #0
   beeca:	6840      	ldr	r0, [r0, #4]
   beecc:	461a      	mov	r2, r3
   beece:	4619      	mov	r1, r3
   beed0:	f7fd bff4 	b.w	bcebc <network_on>

000beed4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   beed4:	2300      	movs	r3, #0
   beed6:	6840      	ldr	r0, [r0, #4]
   beed8:	461a      	mov	r2, r3
   beeda:	4619      	mov	r1, r3
   beedc:	f7fd bff6 	b.w	bcecc <network_off>

000beee0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   beee0:	6840      	ldr	r0, [r0, #4]
   beee2:	2100      	movs	r1, #0
   beee4:	f7fe b81a 	b.w	bcf1c <network_is_on>

000beee8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   beee8:	6840      	ldr	r0, [r0, #4]
   beeea:	2100      	movs	r1, #0
   beeec:	f7fe b81e 	b.w	bcf2c <network_is_off>

000beef0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   beef0:	6840      	ldr	r0, [r0, #4]
   beef2:	2200      	movs	r2, #0
   beef4:	f081 0101 	eor.w	r1, r1, #1
   beef8:	f7fd bff0 	b.w	bcedc <network_listen>

000beefc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   beefc:	6840      	ldr	r0, [r0, #4]
   beefe:	2200      	movs	r2, #0
   bef00:	f7fd bffc 	b.w	bcefc <network_set_listen_timeout>

000bef04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bef04:	2200      	movs	r2, #0
   bef06:	6840      	ldr	r0, [r0, #4]
   bef08:	4611      	mov	r1, r2
   bef0a:	f7fd bfff 	b.w	bcf0c <network_get_listen_timeout>

000bef0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bef0e:	2200      	movs	r2, #0
   bef10:	6840      	ldr	r0, [r0, #4]
   bef12:	4611      	mov	r1, r2
   bef14:	f7fd bfea 	b.w	bceec <network_listening>

000bef18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bef18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bef1c:	b095      	sub	sp, #84	; 0x54
   bef1e:	4614      	mov	r4, r2
   bef20:	460d      	mov	r5, r1
   bef22:	4607      	mov	r7, r0
    IPAddress addr;
   bef24:	f7fe fe6e 	bl	bdc04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bef28:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bef2a:	221c      	movs	r2, #28
   bef2c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bef2e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bef30:	f001 ffd6 	bl	c0ee0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bef34:	2340      	movs	r3, #64	; 0x40
   bef36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bef38:	4620      	mov	r0, r4
   bef3a:	466b      	mov	r3, sp
   bef3c:	aa0c      	add	r2, sp, #48	; 0x30
   bef3e:	2100      	movs	r1, #0
   bef40:	f7fd fd50 	bl	bc9e4 <netdb_getaddrinfo>
    if (!r) {
   bef44:	4604      	mov	r4, r0
   bef46:	2800      	cmp	r0, #0
   bef48:	d14b      	bne.n	befe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bef4a:	4602      	mov	r2, r0
   bef4c:	2101      	movs	r1, #1
   bef4e:	6868      	ldr	r0, [r5, #4]
   bef50:	f7fd ffac 	bl	bceac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bef54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bef56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bef58:	4622      	mov	r2, r4
   bef5a:	6868      	ldr	r0, [r5, #4]
   bef5c:	f7fd ffa6 	bl	bceac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bef60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bef62:	4681      	mov	r9, r0
        bool ok = false;
   bef64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bef66:	2e00      	cmp	r6, #0
   bef68:	d03b      	beq.n	befe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bef6a:	2900      	cmp	r1, #0
   bef6c:	d139      	bne.n	befe2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bef6e:	6873      	ldr	r3, [r6, #4]
   bef70:	2b02      	cmp	r3, #2
   bef72:	d003      	beq.n	bef7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bef74:	2b0a      	cmp	r3, #10
   bef76:	d011      	beq.n	bef9c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bef78:	69f6      	ldr	r6, [r6, #28]
   bef7a:	e7f4      	b.n	bef66 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bef7c:	f1b8 0f00 	cmp.w	r8, #0
   bef80:	d0fa      	beq.n	bef78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bef82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bef84:	a806      	add	r0, sp, #24
   bef86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bef88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bef8a:	f7fe fe69 	bl	bdc60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bef8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bef90:	1d3c      	adds	r4, r7, #4
   bef92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bef94:	682b      	ldr	r3, [r5, #0]
   bef96:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bef98:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bef9a:	e7ed      	b.n	bef78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bef9c:	f1b9 0f00 	cmp.w	r9, #0
   befa0:	d0ea      	beq.n	bef78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   befa2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   befa4:	2210      	movs	r2, #16
   befa6:	a801      	add	r0, sp, #4
   befa8:	f001 ff9a 	bl	c0ee0 <memset>
                    a.v = 6;
   befac:	2306      	movs	r3, #6
   befae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   befb2:	ad01      	add	r5, sp, #4
   befb4:	f104 0308 	add.w	r3, r4, #8
   befb8:	3418      	adds	r4, #24
   befba:	6818      	ldr	r0, [r3, #0]
   befbc:	6859      	ldr	r1, [r3, #4]
   befbe:	462a      	mov	r2, r5
   befc0:	c203      	stmia	r2!, {r0, r1}
   befc2:	3308      	adds	r3, #8
   befc4:	42a3      	cmp	r3, r4
   befc6:	4615      	mov	r5, r2
   befc8:	d1f7      	bne.n	befba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   befca:	a901      	add	r1, sp, #4
   befcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   befce:	ad07      	add	r5, sp, #28
   befd0:	f7fe fe26 	bl	bdc20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   befd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   befd6:	1d3c      	adds	r4, r7, #4
   befd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   befda:	682b      	ldr	r3, [r5, #0]
   befdc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   befde:	4649      	mov	r1, r9
   befe0:	e7ca      	b.n	bef78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   befe2:	9800      	ldr	r0, [sp, #0]
   befe4:	f7fd fcf6 	bl	bc9d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   befe8:	4638      	mov	r0, r7
   befea:	b015      	add	sp, #84	; 0x54
   befec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000beff0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   beff0:	4b02      	ldr	r3, [pc, #8]	; (beffc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   beff2:	4a03      	ldr	r2, [pc, #12]	; (bf000 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   beff4:	601a      	str	r2, [r3, #0]
   beff6:	2200      	movs	r2, #0
   beff8:	605a      	str	r2, [r3, #4]

} // spark
   beffa:	4770      	bx	lr
   beffc:	2003e684 	.word	0x2003e684
   bf000:	000c4f10 	.word	0x000c4f10

000bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf004:	b508      	push	{r3, lr}
            return &Wire1;
   bf006:	f001 f953 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf00e:	f7fe bd81 	b.w	bdb14 <_ZN7TwoWire4lockEv>

000bf012 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf012:	b510      	push	{r4, lr}
   bf014:	4604      	mov	r4, r0
    lock_(_lock)
   bf016:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf018:	b109      	cbz	r1, bf01e <_ZN4PMICC1Eb+0xc>
        lock();
   bf01a:	f7ff fff3 	bl	bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf01e:	4620      	mov	r0, r4
   bf020:	bd10      	pop	{r4, pc}

000bf022 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf022:	b508      	push	{r3, lr}
            return &Wire1;
   bf024:	f001 f944 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf02c:	f7fe bd7b 	b.w	bdb26 <_ZN7TwoWire6unlockEv>

000bf030 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf030:	b510      	push	{r4, lr}
    if (lock_) {
   bf032:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf034:	4604      	mov	r4, r0
    if (lock_) {
   bf036:	b10b      	cbz	r3, bf03c <_ZN4PMICD1Ev+0xc>
        unlock();
   bf038:	f7ff fff3 	bl	bf022 <_ZN4PMIC6unlockEv>
}
   bf03c:	4620      	mov	r0, r4
   bf03e:	bd10      	pop	{r4, pc}

000bf040 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf040:	b510      	push	{r4, lr}
   bf042:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf044:	6800      	ldr	r0, [r0, #0]
   bf046:	f7ff ffec 	bl	bf022 <_ZN4PMIC6unlockEv>
   bf04a:	4620      	mov	r0, r4
   bf04c:	bd10      	pop	{r4, pc}

000bf04e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf04e:	b530      	push	{r4, r5, lr}
   bf050:	b087      	sub	sp, #28
   bf052:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf054:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf056:	f7ff ffd5 	bl	bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf05a:	226b      	movs	r2, #107	; 0x6b
   bf05c:	2300      	movs	r3, #0
   bf05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf062:	2401      	movs	r4, #1
   bf064:	230a      	movs	r3, #10
   bf066:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf06a:	f001 f921 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf06e:	a902      	add	r1, sp, #8
   bf070:	f7fe fd34 	bl	bdadc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf074:	f001 f91c 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf078:	6803      	ldr	r3, [r0, #0]
   bf07a:	4629      	mov	r1, r5
   bf07c:	689b      	ldr	r3, [r3, #8]
   bf07e:	4798      	blx	r3
            return &Wire1;
   bf080:	f001 f916 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf084:	4621      	mov	r1, r4
   bf086:	f7fe fd41 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf08a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf08c:	f001 f910 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf090:	a902      	add	r1, sp, #8
   bf092:	f7fe fcf3 	bl	bda7c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf096:	f001 f90b 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf09a:	6803      	ldr	r3, [r0, #0]
   bf09c:	695b      	ldr	r3, [r3, #20]
   bf09e:	4798      	blx	r3
   bf0a0:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf0a2:	a801      	add	r0, sp, #4
   bf0a4:	f7ff ffcc 	bl	bf040 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf0a8:	b2e0      	uxtb	r0, r4
   bf0aa:	b007      	add	sp, #28
   bf0ac:	bd30      	pop	{r4, r5, pc}

000bf0ae <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf0ae:	b570      	push	{r4, r5, r6, lr}
   bf0b0:	b086      	sub	sp, #24
   bf0b2:	460d      	mov	r5, r1
   bf0b4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf0b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf0b8:	f7ff ffa4 	bl	bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf0bc:	226b      	movs	r2, #107	; 0x6b
   bf0be:	2300      	movs	r3, #0
   bf0c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf0c4:	2601      	movs	r6, #1
   bf0c6:	230a      	movs	r3, #10
   bf0c8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf0cc:	f001 f8f0 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf0d0:	a902      	add	r1, sp, #8
   bf0d2:	f7fe fd03 	bl	bdadc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf0d6:	f001 f8eb 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf0da:	6803      	ldr	r3, [r0, #0]
   bf0dc:	4629      	mov	r1, r5
   bf0de:	689b      	ldr	r3, [r3, #8]
   bf0e0:	4798      	blx	r3
            return &Wire1;
   bf0e2:	f001 f8e5 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf0e6:	6803      	ldr	r3, [r0, #0]
   bf0e8:	4621      	mov	r1, r4
   bf0ea:	689b      	ldr	r3, [r3, #8]
   bf0ec:	4798      	blx	r3
            return &Wire1;
   bf0ee:	f001 f8df 	bl	c02b0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf0f2:	4631      	mov	r1, r6
   bf0f4:	f7fe fd0a 	bl	bdb0c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf0f8:	a801      	add	r0, sp, #4
   bf0fa:	f7ff ffa1 	bl	bf040 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf0fe:	b006      	add	sp, #24
   bf100:	bd70      	pop	{r4, r5, r6, pc}

000bf102 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf102:	b513      	push	{r0, r1, r4, lr}
   bf104:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf106:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf108:	f7ff ff7c 	bl	bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf10c:	2101      	movs	r1, #1
   bf10e:	4620      	mov	r0, r4
   bf110:	f7ff ff9d 	bl	bf04e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf114:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf118:	2b10      	cmp	r3, #16
   bf11a:	d007      	beq.n	bf12c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf11c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf120:	f042 0210 	orr.w	r2, r2, #16
   bf124:	2101      	movs	r1, #1
   bf126:	4620      	mov	r0, r4
   bf128:	f7ff ffc1 	bl	bf0ae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf12c:	a801      	add	r0, sp, #4
   bf12e:	f7ff ff87 	bl	bf040 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf132:	2001      	movs	r0, #1
   bf134:	b002      	add	sp, #8
   bf136:	bd10      	pop	{r4, pc}

000bf138 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf138:	b513      	push	{r0, r1, r4, lr}
   bf13a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf13c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf13e:	f7ff ff61 	bl	bf004 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf142:	2101      	movs	r1, #1
   bf144:	4620      	mov	r0, r4
   bf146:	f7ff ff82 	bl	bf04e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf14a:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf14e:	d005      	beq.n	bf15c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf150:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf154:	2101      	movs	r1, #1
   bf156:	4620      	mov	r0, r4
   bf158:	f7ff ffa9 	bl	bf0ae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf15c:	a801      	add	r0, sp, #4
   bf15e:	f7ff ff6f 	bl	bf040 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf162:	2001      	movs	r0, #1
   bf164:	b002      	add	sp, #8
   bf166:	bd10      	pop	{r4, pc}

000bf168 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf16a:	4606      	mov	r6, r0
   bf16c:	460d      	mov	r5, r1
  size_t n = 0;
   bf16e:	188f      	adds	r7, r1, r2
   bf170:	2400      	movs	r4, #0
  while (size--) {
   bf172:	42bd      	cmp	r5, r7
   bf174:	d00c      	beq.n	bf190 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf176:	6833      	ldr	r3, [r6, #0]
   bf178:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf17c:	689b      	ldr	r3, [r3, #8]
   bf17e:	4630      	mov	r0, r6
   bf180:	4798      	blx	r3
     if (chunk>=0)
   bf182:	1e03      	subs	r3, r0, #0
   bf184:	db01      	blt.n	bf18a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf186:	441c      	add	r4, r3
  while (size--) {
   bf188:	e7f3      	b.n	bf172 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf18a:	2c00      	cmp	r4, #0
   bf18c:	bf08      	it	eq
   bf18e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf190:	4620      	mov	r0, r4
   bf192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf194 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf194:	b513      	push	{r0, r1, r4, lr}
   bf196:	4604      	mov	r4, r0
    }
   bf198:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf19a:	b159      	cbz	r1, bf1b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf19c:	9101      	str	r1, [sp, #4]
   bf19e:	f001 ff6a 	bl	c1076 <strlen>
   bf1a2:	6823      	ldr	r3, [r4, #0]
   bf1a4:	9901      	ldr	r1, [sp, #4]
   bf1a6:	68db      	ldr	r3, [r3, #12]
   bf1a8:	4602      	mov	r2, r0
   bf1aa:	4620      	mov	r0, r4
    }
   bf1ac:	b002      	add	sp, #8
   bf1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf1b2:	4718      	bx	r3
    }
   bf1b4:	b002      	add	sp, #8
   bf1b6:	bd10      	pop	{r4, pc}

000bf1b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf1b8:	b508      	push	{r3, lr}
  return write(str);
   bf1ba:	f7ff ffeb 	bl	bf194 <_ZN5Print5writeEPKc>
}
   bf1be:	bd08      	pop	{r3, pc}

000bf1c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf1c0:	6803      	ldr	r3, [r0, #0]
   bf1c2:	689b      	ldr	r3, [r3, #8]
   bf1c4:	4718      	bx	r3

000bf1c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf1c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf1c8:	210d      	movs	r1, #13
{
   bf1ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf1cc:	f7ff fff8 	bl	bf1c0 <_ZN5Print5printEc>
  n += print('\n');
   bf1d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf1d2:	4604      	mov	r4, r0
  n += print('\n');
   bf1d4:	4628      	mov	r0, r5
   bf1d6:	f7ff fff3 	bl	bf1c0 <_ZN5Print5printEc>
  return n;
}
   bf1da:	4420      	add	r0, r4
   bf1dc:	bd38      	pop	{r3, r4, r5, pc}

000bf1de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf1de:	b530      	push	{r4, r5, lr}
   bf1e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf1e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf1e4:	2a01      	cmp	r2, #1
  *str = '\0';
   bf1e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf1ea:	bf98      	it	ls
   bf1ec:	220a      	movls	r2, #10
   bf1ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf1f0:	460d      	mov	r5, r1
   bf1f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf1f6:	fb01 5312 	mls	r3, r1, r2, r5
   bf1fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf1fe:	2b09      	cmp	r3, #9
   bf200:	bf94      	ite	ls
   bf202:	3330      	addls	r3, #48	; 0x30
   bf204:	3337      	addhi	r3, #55	; 0x37
   bf206:	b2db      	uxtb	r3, r3
  } while(n);
   bf208:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf20a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf20e:	d9ef      	bls.n	bf1f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf210:	4621      	mov	r1, r4
   bf212:	f7ff ffbf 	bl	bf194 <_ZN5Print5writeEPKc>
}
   bf216:	b00b      	add	sp, #44	; 0x2c
   bf218:	bd30      	pop	{r4, r5, pc}
	...

000bf21c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf220:	ec55 4b10 	vmov	r4, r5, d0
   bf224:	4606      	mov	r6, r0
   bf226:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf228:	ee10 2a10 	vmov	r2, s0
   bf22c:	ee10 0a10 	vmov	r0, s0
   bf230:	462b      	mov	r3, r5
   bf232:	4629      	mov	r1, r5
   bf234:	f001 fd0e 	bl	c0c54 <__aeabi_dcmpun>
   bf238:	b140      	cbz	r0, bf24c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf23a:	4953      	ldr	r1, [pc, #332]	; (bf388 <_ZN5Print10printFloatEdh+0x16c>)
   bf23c:	4630      	mov	r0, r6
   bf23e:	f7ff ffa9 	bl	bf194 <_ZN5Print5writeEPKc>
   bf242:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf244:	4650      	mov	r0, sl
   bf246:	b003      	add	sp, #12
   bf248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf24c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf250:	4b4e      	ldr	r3, [pc, #312]	; (bf38c <_ZN5Print10printFloatEdh+0x170>)
   bf252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf256:	4620      	mov	r0, r4
   bf258:	4649      	mov	r1, r9
   bf25a:	f001 fcfb 	bl	c0c54 <__aeabi_dcmpun>
   bf25e:	b948      	cbnz	r0, bf274 <_ZN5Print10printFloatEdh+0x58>
   bf260:	4b4a      	ldr	r3, [pc, #296]	; (bf38c <_ZN5Print10printFloatEdh+0x170>)
   bf262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf266:	4620      	mov	r0, r4
   bf268:	4649      	mov	r1, r9
   bf26a:	f001 fcd5 	bl	c0c18 <__aeabi_dcmple>
   bf26e:	b908      	cbnz	r0, bf274 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf270:	4947      	ldr	r1, [pc, #284]	; (bf390 <_ZN5Print10printFloatEdh+0x174>)
   bf272:	e7e3      	b.n	bf23c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf274:	4b47      	ldr	r3, [pc, #284]	; (bf394 <_ZN5Print10printFloatEdh+0x178>)
   bf276:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf27a:	4620      	mov	r0, r4
   bf27c:	4629      	mov	r1, r5
   bf27e:	f001 fcdf 	bl	c0c40 <__aeabi_dcmpgt>
   bf282:	b108      	cbz	r0, bf288 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf284:	4944      	ldr	r1, [pc, #272]	; (bf398 <_ZN5Print10printFloatEdh+0x17c>)
   bf286:	e7d9      	b.n	bf23c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf288:	4b44      	ldr	r3, [pc, #272]	; (bf39c <_ZN5Print10printFloatEdh+0x180>)
   bf28a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf28e:	4620      	mov	r0, r4
   bf290:	4629      	mov	r1, r5
   bf292:	f001 fcb7 	bl	c0c04 <__aeabi_dcmplt>
   bf296:	2800      	cmp	r0, #0
   bf298:	d1f4      	bne.n	bf284 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf29a:	2200      	movs	r2, #0
   bf29c:	2300      	movs	r3, #0
   bf29e:	4620      	mov	r0, r4
   bf2a0:	4629      	mov	r1, r5
   bf2a2:	f001 fcaf 	bl	c0c04 <__aeabi_dcmplt>
   bf2a6:	b1d0      	cbz	r0, bf2de <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf2a8:	212d      	movs	r1, #45	; 0x2d
   bf2aa:	4630      	mov	r0, r6
   bf2ac:	f7ff ff88 	bl	bf1c0 <_ZN5Print5printEc>
     number = -number;
   bf2b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf2b4:	4682      	mov	sl, r0
     number = -number;
   bf2b6:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf2b8:	4939      	ldr	r1, [pc, #228]	; (bf3a0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf2ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf3a8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf2be:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf2c2:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf2c4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf2c8:	fa5f f38b 	uxtb.w	r3, fp
   bf2cc:	429f      	cmp	r7, r3
   bf2ce:	d908      	bls.n	bf2e2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf2d0:	4642      	mov	r2, r8
   bf2d2:	464b      	mov	r3, r9
   bf2d4:	f001 fb4e 	bl	c0974 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf2d8:	f10b 0b01 	add.w	fp, fp, #1
   bf2dc:	e7f4      	b.n	bf2c8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf2de:	4682      	mov	sl, r0
   bf2e0:	e7ea      	b.n	bf2b8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf2e2:	4622      	mov	r2, r4
   bf2e4:	462b      	mov	r3, r5
   bf2e6:	f001 f865 	bl	c03b4 <__adddf3>
   bf2ea:	460d      	mov	r5, r1
   bf2ec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf2ee:	f001 fcef 	bl	c0cd0 <__aeabi_d2uiz>
   bf2f2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf2f4:	f001 f99a 	bl	c062c <__aeabi_ui2d>
   bf2f8:	4602      	mov	r2, r0
   bf2fa:	460b      	mov	r3, r1
   bf2fc:	4620      	mov	r0, r4
   bf2fe:	4629      	mov	r1, r5
   bf300:	f001 f856 	bl	c03b0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf304:	220a      	movs	r2, #10
   bf306:	4604      	mov	r4, r0
   bf308:	460d      	mov	r5, r1
   bf30a:	4630      	mov	r0, r6
   bf30c:	4641      	mov	r1, r8
   bf30e:	f7ff ff66 	bl	bf1de <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf312:	4482      	add	sl, r0
  if (digits > 0) {
   bf314:	2f00      	cmp	r7, #0
   bf316:	d095      	beq.n	bf244 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf318:	4922      	ldr	r1, [pc, #136]	; (bf3a4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf31a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf3a8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf31e:	4630      	mov	r0, r6
   bf320:	f7ff ff38 	bl	bf194 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf324:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf328:	4482      	add	sl, r0
  while (digits-- > 0)
   bf32a:	2f00      	cmp	r7, #0
   bf32c:	d08a      	beq.n	bf244 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf32e:	4642      	mov	r2, r8
   bf330:	464b      	mov	r3, r9
   bf332:	4620      	mov	r0, r4
   bf334:	4629      	mov	r1, r5
   bf336:	f001 f9f3 	bl	c0720 <__aeabi_dmul>
   bf33a:	4604      	mov	r4, r0
   bf33c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf33e:	f001 fc9f 	bl	c0c80 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf342:	f1b0 0b00 	subs.w	fp, r0, #0
   bf346:	da1c      	bge.n	bf382 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf348:	212d      	movs	r1, #45	; 0x2d
   bf34a:	4630      	mov	r0, r6
   bf34c:	f7ff ff38 	bl	bf1c0 <_ZN5Print5printEc>
            val = -n;
   bf350:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf354:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf356:	220a      	movs	r2, #10
   bf358:	4630      	mov	r0, r6
   bf35a:	9301      	str	r3, [sp, #4]
   bf35c:	f7ff ff3f 	bl	bf1de <_ZN5Print11printNumberEmh>
   bf360:	9b01      	ldr	r3, [sp, #4]
   bf362:	4418      	add	r0, r3
    n += print(toPrint);
   bf364:	4482      	add	sl, r0
    remainder -= toPrint;
   bf366:	4658      	mov	r0, fp
   bf368:	f001 f970 	bl	c064c <__aeabi_i2d>
   bf36c:	4602      	mov	r2, r0
   bf36e:	460b      	mov	r3, r1
   bf370:	4620      	mov	r0, r4
   bf372:	4629      	mov	r1, r5
   bf374:	f001 f81c 	bl	c03b0 <__aeabi_dsub>
   bf378:	3f01      	subs	r7, #1
   bf37a:	4604      	mov	r4, r0
   bf37c:	460d      	mov	r5, r1
   bf37e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf380:	e7d3      	b.n	bf32a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf382:	4659      	mov	r1, fp
        size_t t = 0;
   bf384:	2300      	movs	r3, #0
   bf386:	e7e6      	b.n	bf356 <_ZN5Print10printFloatEdh+0x13a>
   bf388:	000c4f44 	.word	0x000c4f44
   bf38c:	7fefffff 	.word	0x7fefffff
   bf390:	000c4f48 	.word	0x000c4f48
   bf394:	41efffff 	.word	0x41efffff
   bf398:	000c4f4c 	.word	0x000c4f4c
   bf39c:	c1efffff 	.word	0xc1efffff
   bf3a0:	3fe00000 	.word	0x3fe00000
   bf3a4:	000c4f84 	.word	0x000c4f84
   bf3a8:	40240000 	.word	0x40240000

000bf3ac <_ZN5Print5printEfi>:
{
   bf3ac:	b538      	push	{r3, r4, r5, lr}
   bf3ae:	4604      	mov	r4, r0
   bf3b0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf3b4:	b2cd      	uxtb	r5, r1
   bf3b6:	f001 f95b 	bl	c0670 <__aeabi_f2d>
   bf3ba:	ec41 0b10 	vmov	d0, r0, r1
   bf3be:	4629      	mov	r1, r5
   bf3c0:	4620      	mov	r0, r4
}
   bf3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf3c6:	f7ff bf29 	b.w	bf21c <_ZN5Print10printFloatEdh>

000bf3ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf3ce:	b086      	sub	sp, #24
   bf3d0:	af00      	add	r7, sp, #0
   bf3d2:	4605      	mov	r5, r0
   bf3d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf3d6:	1d38      	adds	r0, r7, #4
   bf3d8:	2114      	movs	r1, #20
{
   bf3da:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf3dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf3de:	f7fd fddd 	bl	bcf9c <vsnprintf>

    if (n<bufsize)
   bf3e2:	2813      	cmp	r0, #19
   bf3e4:	d80e      	bhi.n	bf404 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf3e6:	1d39      	adds	r1, r7, #4
   bf3e8:	4628      	mov	r0, r5
   bf3ea:	f7ff fed3 	bl	bf194 <_ZN5Print5writeEPKc>
   bf3ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf3f0:	b11e      	cbz	r6, bf3fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf3f2:	4628      	mov	r0, r5
   bf3f4:	f7ff fee7 	bl	bf1c6 <_ZN5Print7printlnEv>
   bf3f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf3fa:	4620      	mov	r0, r4
   bf3fc:	3718      	adds	r7, #24
   bf3fe:	46bd      	mov	sp, r7
   bf400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf404:	f100 0308 	add.w	r3, r0, #8
   bf408:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf40c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf40e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf412:	4622      	mov	r2, r4
   bf414:	1c41      	adds	r1, r0, #1
   bf416:	683b      	ldr	r3, [r7, #0]
   bf418:	4668      	mov	r0, sp
   bf41a:	f7fd fdbf 	bl	bcf9c <vsnprintf>
  return write(str);
   bf41e:	4669      	mov	r1, sp
   bf420:	4628      	mov	r0, r5
   bf422:	f7ff feb7 	bl	bf194 <_ZN5Print5writeEPKc>
   bf426:	4604      	mov	r4, r0
   bf428:	46c5      	mov	sp, r8
   bf42a:	e7e1      	b.n	bf3f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf42c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf42c:	b510      	push	{r4, lr}
  if (0 == max) {
   bf42e:	4604      	mov	r4, r0
   bf430:	b128      	cbz	r0, bf43e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf432:	f001 fd9b 	bl	c0f6c <rand>
   bf436:	fb90 f3f4 	sdiv	r3, r0, r4
   bf43a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf43e:	4620      	mov	r0, r4
   bf440:	bd10      	pop	{r4, pc}

000bf442 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf442:	4288      	cmp	r0, r1
{
   bf444:	b510      	push	{r4, lr}
   bf446:	4604      	mov	r4, r0
  if (min >= max) {
   bf448:	da03      	bge.n	bf452 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf44a:	1a08      	subs	r0, r1, r0
   bf44c:	f7ff ffee 	bl	bf42c <_Z6randomi>
   bf450:	4404      	add	r4, r0
}
   bf452:	4620      	mov	r0, r4
   bf454:	bd10      	pop	{r4, pc}
	...

000bf458 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf458:	4b01      	ldr	r3, [pc, #4]	; (bf460 <_GLOBAL__sub_I_RGB+0x8>)
   bf45a:	2200      	movs	r2, #0
   bf45c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf45e:	4770      	bx	lr
   bf460:	2003e68c 	.word	0x2003e68c

000bf464 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf464:	2100      	movs	r1, #0
   bf466:	f7fd bb05 	b.w	bca74 <hal_spi_release>

000bf46a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf46a:	2100      	movs	r1, #0
   bf46c:	f7fd bafa 	b.w	bca64 <hal_spi_acquire>

000bf470 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf470:	b510      	push	{r4, lr}
   bf472:	4604      	mov	r4, r0
   bf474:	4608      	mov	r0, r1
{
    _spi = spi;
   bf476:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf478:	f7fd fad4 	bl	bca24 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf47c:	2300      	movs	r3, #0
   bf47e:	6063      	str	r3, [r4, #4]
}
   bf480:	4620      	mov	r0, r4
   bf482:	bd10      	pop	{r4, pc}

000bf484 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf484:	b513      	push	{r0, r1, r4, lr}
   bf486:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf488:	7800      	ldrb	r0, [r0, #0]
   bf48a:	f7ff ffee 	bl	bf46a <_ZN8SPIClass4lockEv.isra.0>
   bf48e:	b958      	cbnz	r0, bf4a8 <_ZN8SPIClass5beginEv+0x24>
   bf490:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf492:	9001      	str	r0, [sp, #4]
   bf494:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf498:	f7fd faac 	bl	bc9f4 <hal_spi_begin>
        unlock();
   bf49c:	9801      	ldr	r0, [sp, #4]
    }
}
   bf49e:	b002      	add	sp, #8
   bf4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf4a4:	f7ff bfde 	b.w	bf464 <_ZN8SPIClass6unlockEv.isra.0>
   bf4a8:	b002      	add	sp, #8
   bf4aa:	bd10      	pop	{r4, pc}

000bf4ac <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bf4ac:	b513      	push	{r0, r1, r4, lr}
   bf4ae:	4604      	mov	r4, r0
    if (!lock())
   bf4b0:	7800      	ldrb	r0, [r0, #0]
   bf4b2:	f7ff ffda 	bl	bf46a <_ZN8SPIClass4lockEv.isra.0>
   bf4b6:	b948      	cbnz	r0, bf4cc <_ZN8SPIClass3endEv+0x20>
   bf4b8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bf4ba:	9001      	str	r0, [sp, #4]
   bf4bc:	f7fd faa2 	bl	bca04 <hal_spi_end>
        unlock();
   bf4c0:	9801      	ldr	r0, [sp, #4]
    }
}
   bf4c2:	b002      	add	sp, #8
   bf4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf4c8:	f7ff bfcc 	b.w	bf464 <_ZN8SPIClass6unlockEv.isra.0>
   bf4cc:	b002      	add	sp, #8
   bf4ce:	bd10      	pop	{r4, pc}

000bf4d0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bf4d0:	7800      	ldrb	r0, [r0, #0]
   bf4d2:	f7ff bfc7 	b.w	bf464 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bf4d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bf4d8:	0840      	lsrs	r0, r0, #1
{
   bf4da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bf4dc:	6018      	str	r0, [r3, #0]
   bf4de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bf4e0:	6818      	ldr	r0, [r3, #0]
   bf4e2:	4288      	cmp	r0, r1
   bf4e4:	b2e5      	uxtb	r5, r4
   bf4e6:	d906      	bls.n	bf4f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bf4e8:	3401      	adds	r4, #1
   bf4ea:	2c08      	cmp	r4, #8
   bf4ec:	d002      	beq.n	bf4f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bf4ee:	0840      	lsrs	r0, r0, #1
   bf4f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bf4f2:	e7f5      	b.n	bf4e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bf4f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bf4f6:	4b02      	ldr	r3, [pc, #8]	; (bf500 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bf4f8:	5d5b      	ldrb	r3, [r3, r5]
   bf4fa:	7013      	strb	r3, [r2, #0]
}
   bf4fc:	bd30      	pop	{r4, r5, pc}
   bf4fe:	bf00      	nop
   bf500:	000c4f50 	.word	0x000c4f50

000bf504 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bf504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf508:	4606      	mov	r6, r0
   bf50a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bf50c:	7800      	ldrb	r0, [r0, #0]
{
   bf50e:	460c      	mov	r4, r1
    CHECK(lock());
   bf510:	f7ff ffab 	bl	bf46a <_ZN8SPIClass4lockEv.isra.0>
   bf514:	2800      	cmp	r0, #0
   bf516:	db1b      	blt.n	bf550 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bf518:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bf51a:	2214      	movs	r2, #20
   bf51c:	2100      	movs	r1, #0
   bf51e:	a809      	add	r0, sp, #36	; 0x24
   bf520:	f001 fcde 	bl	c0ee0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bf524:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bf526:	2200      	movs	r2, #0
   bf528:	a909      	add	r1, sp, #36	; 0x24
   bf52a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bf52c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bf530:	f7fd fa88 	bl	bca44 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bf534:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bf538:	b113      	cbz	r3, bf540 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bf53a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bf53e:	b155      	cbz	r5, bf556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bf540:	2700      	movs	r7, #0
   bf542:	46b9      	mov	r9, r7
   bf544:	46b8      	mov	r8, r7
   bf546:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bf548:	7923      	ldrb	r3, [r4, #4]
   bf54a:	b15d      	cbz	r5, bf564 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bf54c:	b1c3      	cbz	r3, bf580 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bf54e:	2000      	movs	r0, #0
}
   bf550:	b00f      	add	sp, #60	; 0x3c
   bf552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bf556:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bf55a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bf55e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bf562:	e7f1      	b.n	bf548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bf564:	2b00      	cmp	r3, #0
   bf566:	d135      	bne.n	bf5d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bf568:	68a3      	ldr	r3, [r4, #8]
   bf56a:	4543      	cmp	r3, r8
   bf56c:	d108      	bne.n	bf580 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bf56e:	f88d 9020 	strb.w	r9, [sp, #32]
   bf572:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf576:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf57a:	89a3      	ldrh	r3, [r4, #12]
   bf57c:	429a      	cmp	r2, r3
   bf57e:	d0e6      	beq.n	bf54e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bf580:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf582:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bf584:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf588:	980a      	ldr	r0, [sp, #40]	; 0x28
   bf58a:	ab04      	add	r3, sp, #16
   bf58c:	f10d 020f 	add.w	r2, sp, #15
   bf590:	f7ff ffa2 	bl	bf4d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bf594:	7921      	ldrb	r1, [r4, #4]
   bf596:	b985      	cbnz	r5, bf5ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bf598:	b989      	cbnz	r1, bf5be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf59a:	68a3      	ldr	r3, [r4, #8]
   bf59c:	4543      	cmp	r3, r8
   bf59e:	d30e      	bcc.n	bf5be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bf5a0:	f88d 9020 	strb.w	r9, [sp, #32]
   bf5a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf5a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf5ac:	89a3      	ldrh	r3, [r4, #12]
   bf5ae:	429a      	cmp	r2, r3
   bf5b0:	d105      	bne.n	bf5be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bf5b2:	9b04      	ldr	r3, [sp, #16]
   bf5b4:	4543      	cmp	r3, r8
   bf5b6:	d102      	bne.n	bf5be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf5b8:	e7c9      	b.n	bf54e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bf5ba:	2900      	cmp	r1, #0
   bf5bc:	d1f9      	bne.n	bf5b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bf5be:	2300      	movs	r3, #0
   bf5c0:	9301      	str	r3, [sp, #4]
   bf5c2:	7b63      	ldrb	r3, [r4, #13]
   bf5c4:	9300      	str	r3, [sp, #0]
   bf5c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bf5ca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bf5cc:	7830      	ldrb	r0, [r6, #0]
   bf5ce:	f7fd fa41 	bl	bca54 <hal_spi_set_settings>
   bf5d2:	e7bc      	b.n	bf54e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bf5d4:	e9cd 5500 	strd	r5, r5, [sp]
   bf5d8:	462b      	mov	r3, r5
   bf5da:	462a      	mov	r2, r5
   bf5dc:	2101      	movs	r1, #1
   bf5de:	e7f5      	b.n	bf5cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bf5e0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bf5e0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bf5e2:	7800      	ldrb	r0, [r0, #0]
   bf5e4:	f7fd fa16 	bl	bca14 <hal_spi_transfer>
}
   bf5e8:	b2c0      	uxtb	r0, r0
   bf5ea:	bd08      	pop	{r3, pc}

000bf5ec <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bf5ec:	4770      	bx	lr

000bf5ee <_ZN8SPIClass15detachInterruptEv>:
   bf5ee:	4770      	bx	lr

000bf5f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bf5f0:	b510      	push	{r4, lr}
   bf5f2:	4604      	mov	r4, r0
{
	free(buffer);
   bf5f4:	6800      	ldr	r0, [r0, #0]
   bf5f6:	f7fd fca9 	bl	bcf4c <free>
}
   bf5fa:	4620      	mov	r0, r4
   bf5fc:	bd10      	pop	{r4, pc}

000bf5fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bf5fe:	b510      	push	{r4, lr}
   bf600:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bf602:	6800      	ldr	r0, [r0, #0]
   bf604:	b108      	cbz	r0, bf60a <_ZN6String10invalidateEv+0xc>
   bf606:	f7fd fca1 	bl	bcf4c <free>
	buffer = NULL;
   bf60a:	2300      	movs	r3, #0
	capacity = len = 0;
   bf60c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bf610:	6023      	str	r3, [r4, #0]
}
   bf612:	bd10      	pop	{r4, pc}

000bf614 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bf614:	b538      	push	{r3, r4, r5, lr}
   bf616:	4604      	mov	r4, r0
   bf618:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bf61a:	6800      	ldr	r0, [r0, #0]
   bf61c:	3101      	adds	r1, #1
   bf61e:	f7fd fc9d 	bl	bcf5c <realloc>
	if (newbuffer) {
   bf622:	b110      	cbz	r0, bf62a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bf624:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bf628:	2001      	movs	r0, #1
	}
	return 0;
}
   bf62a:	bd38      	pop	{r3, r4, r5, pc}

000bf62c <_ZN6String7reserveEj>:
{
   bf62c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bf62e:	6803      	ldr	r3, [r0, #0]
{
   bf630:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bf632:	b123      	cbz	r3, bf63e <_ZN6String7reserveEj+0x12>
   bf634:	6843      	ldr	r3, [r0, #4]
   bf636:	428b      	cmp	r3, r1
   bf638:	d301      	bcc.n	bf63e <_ZN6String7reserveEj+0x12>
   bf63a:	2001      	movs	r0, #1
}
   bf63c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bf63e:	4620      	mov	r0, r4
   bf640:	f7ff ffe8 	bl	bf614 <_ZN6String12changeBufferEj>
   bf644:	2800      	cmp	r0, #0
   bf646:	d0f9      	beq.n	bf63c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bf648:	68a3      	ldr	r3, [r4, #8]
   bf64a:	2b00      	cmp	r3, #0
   bf64c:	d1f5      	bne.n	bf63a <_ZN6String7reserveEj+0xe>
   bf64e:	6822      	ldr	r2, [r4, #0]
   bf650:	7013      	strb	r3, [r2, #0]
   bf652:	e7f2      	b.n	bf63a <_ZN6String7reserveEj+0xe>

000bf654 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bf654:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf656:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bf658:	4611      	mov	r1, r2
   bf65a:	9201      	str	r2, [sp, #4]
{
   bf65c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bf65e:	f7ff ffe5 	bl	bf62c <_ZN6String7reserveEj>
   bf662:	9a01      	ldr	r2, [sp, #4]
   bf664:	b928      	cbnz	r0, bf672 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bf666:	4620      	mov	r0, r4
   bf668:	f7ff ffc9 	bl	bf5fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bf66c:	4620      	mov	r0, r4
   bf66e:	b003      	add	sp, #12
   bf670:	bd30      	pop	{r4, r5, pc}
	len = length;
   bf672:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bf674:	4629      	mov	r1, r5
   bf676:	6820      	ldr	r0, [r4, #0]
   bf678:	f001 fc0a 	bl	c0e90 <memcpy>
	buffer[len] = 0;
   bf67c:	6822      	ldr	r2, [r4, #0]
   bf67e:	68a3      	ldr	r3, [r4, #8]
   bf680:	2100      	movs	r1, #0
   bf682:	54d1      	strb	r1, [r2, r3]
	return *this;
   bf684:	e7f2      	b.n	bf66c <_ZN6String4copyEPKcj+0x18>

000bf686 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bf686:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bf688:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bf68a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bf68e:	4604      	mov	r4, r0
	len = 0;
   bf690:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf692:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bf694:	b141      	cbz	r1, bf6a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bf696:	4608      	mov	r0, r1
   bf698:	9101      	str	r1, [sp, #4]
   bf69a:	f001 fcec 	bl	c1076 <strlen>
   bf69e:	9901      	ldr	r1, [sp, #4]
   bf6a0:	4602      	mov	r2, r0
   bf6a2:	4620      	mov	r0, r4
   bf6a4:	f7ff ffd6 	bl	bf654 <_ZN6String4copyEPKcj>
}
   bf6a8:	4620      	mov	r0, r4
   bf6aa:	b002      	add	sp, #8
   bf6ac:	bd10      	pop	{r4, pc}

000bf6ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bf6ae:	b538      	push	{r3, r4, r5, lr}
   bf6b0:	4605      	mov	r5, r0
	if (buffer) {
   bf6b2:	6800      	ldr	r0, [r0, #0]
{
   bf6b4:	460c      	mov	r4, r1
	if (buffer) {
   bf6b6:	b168      	cbz	r0, bf6d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bf6b8:	686a      	ldr	r2, [r5, #4]
   bf6ba:	688b      	ldr	r3, [r1, #8]
   bf6bc:	429a      	cmp	r2, r3
   bf6be:	d307      	bcc.n	bf6d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bf6c0:	6809      	ldr	r1, [r1, #0]
   bf6c2:	f001 fcb2 	bl	c102a <strcpy>
			len = rhs.len;
   bf6c6:	68a3      	ldr	r3, [r4, #8]
   bf6c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bf6ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bf6cc:	60a3      	str	r3, [r4, #8]
}
   bf6ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bf6d0:	f7fd fc3c 	bl	bcf4c <free>
	buffer = rhs.buffer;
   bf6d4:	6823      	ldr	r3, [r4, #0]
   bf6d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bf6d8:	6863      	ldr	r3, [r4, #4]
   bf6da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bf6dc:	68a3      	ldr	r3, [r4, #8]
   bf6de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bf6e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bf6e2:	e9c4 3300 	strd	r3, r3, [r4]
   bf6e6:	e7f1      	b.n	bf6cc <_ZN6String4moveERS_+0x1e>

000bf6e8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bf6e8:	b510      	push	{r4, lr}
	buffer = NULL;
   bf6ea:	2300      	movs	r3, #0
	capacity = 0;
   bf6ec:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bf6f0:	4604      	mov	r4, r0
	len = 0;
   bf6f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf6f4:	7303      	strb	r3, [r0, #12]
	move(rval);
   bf6f6:	f7ff ffda 	bl	bf6ae <_ZN6String4moveERS_>
}
   bf6fa:	4620      	mov	r0, r4
   bf6fc:	bd10      	pop	{r4, pc}

000bf6fe <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bf6fe:	4288      	cmp	r0, r1
{
   bf700:	b510      	push	{r4, lr}
   bf702:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bf704:	d005      	beq.n	bf712 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bf706:	680b      	ldr	r3, [r1, #0]
   bf708:	b12b      	cbz	r3, bf716 <_ZN6StringaSERKS_+0x18>
   bf70a:	688a      	ldr	r2, [r1, #8]
   bf70c:	4619      	mov	r1, r3
   bf70e:	f7ff ffa1 	bl	bf654 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bf712:	4620      	mov	r0, r4
   bf714:	bd10      	pop	{r4, pc}
	else invalidate();
   bf716:	f7ff ff72 	bl	bf5fe <_ZN6String10invalidateEv>
   bf71a:	e7fa      	b.n	bf712 <_ZN6StringaSERKS_+0x14>

000bf71c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bf71c:	b510      	push	{r4, lr}
	buffer = NULL;
   bf71e:	2300      	movs	r3, #0
String::String(const String &value)
   bf720:	4604      	mov	r4, r0
	capacity = 0;
   bf722:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bf726:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf728:	7303      	strb	r3, [r0, #12]
	*this = value;
   bf72a:	f7ff ffe8 	bl	bf6fe <_ZN6StringaSERKS_>
}
   bf72e:	4620      	mov	r0, r4
   bf730:	bd10      	pop	{r4, pc}

000bf732 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bf732:	4288      	cmp	r0, r1
{
   bf734:	b510      	push	{r4, lr}
   bf736:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bf738:	d001      	beq.n	bf73e <_ZN6StringaSEOS_+0xc>
   bf73a:	f7ff ffb8 	bl	bf6ae <_ZN6String4moveERS_>
	return *this;
}
   bf73e:	4620      	mov	r0, r4
   bf740:	bd10      	pop	{r4, pc}

000bf742 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bf742:	b513      	push	{r0, r1, r4, lr}
   bf744:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bf746:	b159      	cbz	r1, bf760 <_ZN6StringaSEPKc+0x1e>
   bf748:	4608      	mov	r0, r1
   bf74a:	9101      	str	r1, [sp, #4]
   bf74c:	f001 fc93 	bl	c1076 <strlen>
   bf750:	9901      	ldr	r1, [sp, #4]
   bf752:	4602      	mov	r2, r0
   bf754:	4620      	mov	r0, r4
   bf756:	f7ff ff7d 	bl	bf654 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bf75a:	4620      	mov	r0, r4
   bf75c:	b002      	add	sp, #8
   bf75e:	bd10      	pop	{r4, pc}
	else invalidate();
   bf760:	f7ff ff4d 	bl	bf5fe <_ZN6String10invalidateEv>
   bf764:	e7f9      	b.n	bf75a <_ZN6StringaSEPKc+0x18>

000bf766 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bf766:	b570      	push	{r4, r5, r6, lr}
   bf768:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bf76a:	460e      	mov	r6, r1
   bf76c:	b909      	cbnz	r1, bf772 <_ZN6String6concatEPKcj+0xc>
   bf76e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bf770:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bf772:	b16a      	cbz	r2, bf790 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bf774:	6884      	ldr	r4, [r0, #8]
   bf776:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bf778:	4621      	mov	r1, r4
   bf77a:	f7ff ff57 	bl	bf62c <_ZN6String7reserveEj>
   bf77e:	2800      	cmp	r0, #0
   bf780:	d0f5      	beq.n	bf76e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bf782:	6828      	ldr	r0, [r5, #0]
   bf784:	68ab      	ldr	r3, [r5, #8]
   bf786:	4631      	mov	r1, r6
   bf788:	4418      	add	r0, r3
   bf78a:	f001 fc4e 	bl	c102a <strcpy>
	len = newlen;
   bf78e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bf790:	2001      	movs	r0, #1
   bf792:	e7ed      	b.n	bf770 <_ZN6String6concatEPKcj+0xa>

000bf794 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bf794:	b513      	push	{r0, r1, r4, lr}
   bf796:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bf798:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bf79a:	b151      	cbz	r1, bf7b2 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bf79c:	9101      	str	r1, [sp, #4]
   bf79e:	f001 fc6a 	bl	c1076 <strlen>
   bf7a2:	9901      	ldr	r1, [sp, #4]
   bf7a4:	4602      	mov	r2, r0
   bf7a6:	4620      	mov	r0, r4
}
   bf7a8:	b002      	add	sp, #8
   bf7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bf7ae:	f7ff bfda 	b.w	bf766 <_ZN6String6concatEPKcj>
}
   bf7b2:	b002      	add	sp, #8
   bf7b4:	bd10      	pop	{r4, pc}

000bf7b6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bf7b6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bf7b8:	2300      	movs	r3, #0
	buf[0] = c;
   bf7ba:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bf7be:	2201      	movs	r2, #1
   bf7c0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bf7c2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bf7c6:	f7ff ffce 	bl	bf766 <_ZN6String6concatEPKcj>
}
   bf7ca:	b003      	add	sp, #12
   bf7cc:	f85d fb04 	ldr.w	pc, [sp], #4

000bf7d0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bf7d0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf7d2:	688a      	ldr	r2, [r1, #8]
   bf7d4:	6809      	ldr	r1, [r1, #0]
{
   bf7d6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bf7d8:	f7ff ffc5 	bl	bf766 <_ZN6String6concatEPKcj>
   bf7dc:	b910      	cbnz	r0, bf7e4 <_ZplRK15StringSumHelperRK6String+0x14>
   bf7de:	4620      	mov	r0, r4
   bf7e0:	f7ff ff0d 	bl	bf5fe <_ZN6String10invalidateEv>
	return a;
}
   bf7e4:	4620      	mov	r0, r4
   bf7e6:	bd10      	pop	{r4, pc}

000bf7e8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bf7e8:	b513      	push	{r0, r1, r4, lr}
   bf7ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf7ec:	b929      	cbnz	r1, bf7fa <_ZplRK15StringSumHelperPKc+0x12>
   bf7ee:	4620      	mov	r0, r4
   bf7f0:	f7ff ff05 	bl	bf5fe <_ZN6String10invalidateEv>
	return a;
}
   bf7f4:	4620      	mov	r0, r4
   bf7f6:	b002      	add	sp, #8
   bf7f8:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bf7fa:	4608      	mov	r0, r1
   bf7fc:	9101      	str	r1, [sp, #4]
   bf7fe:	f001 fc3a 	bl	c1076 <strlen>
   bf802:	9901      	ldr	r1, [sp, #4]
   bf804:	4602      	mov	r2, r0
   bf806:	4620      	mov	r0, r4
   bf808:	f7ff ffad 	bl	bf766 <_ZN6String6concatEPKcj>
   bf80c:	2800      	cmp	r0, #0
   bf80e:	d0ee      	beq.n	bf7ee <_ZplRK15StringSumHelperPKc+0x6>
   bf810:	e7f0      	b.n	bf7f4 <_ZplRK15StringSumHelperPKc+0xc>

000bf812 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bf812:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf814:	6882      	ldr	r2, [r0, #8]
   bf816:	b93a      	cbnz	r2, bf828 <_ZNK6String6equalsEPKc+0x16>
   bf818:	b121      	cbz	r1, bf824 <_ZNK6String6equalsEPKc+0x12>
   bf81a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bf81c:	fab0 f080 	clz	r0, r0
   bf820:	0940      	lsrs	r0, r0, #5
   bf822:	e000      	b.n	bf826 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bf824:	2001      	movs	r0, #1
}
   bf826:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bf828:	6800      	ldr	r0, [r0, #0]
   bf82a:	b909      	cbnz	r1, bf830 <_ZNK6String6equalsEPKc+0x1e>
   bf82c:	7800      	ldrb	r0, [r0, #0]
   bf82e:	e7f5      	b.n	bf81c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bf830:	f001 fbf1 	bl	c1016 <strcmp>
   bf834:	e7f2      	b.n	bf81c <_ZNK6String6equalsEPKc+0xa>

000bf836 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bf836:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf838:	6883      	ldr	r3, [r0, #8]
   bf83a:	688a      	ldr	r2, [r1, #8]
   bf83c:	4293      	cmp	r3, r2
   bf83e:	d30b      	bcc.n	bf858 <_ZNK6String8endsWithERKS_+0x22>
   bf840:	6800      	ldr	r0, [r0, #0]
   bf842:	b140      	cbz	r0, bf856 <_ZNK6String8endsWithERKS_+0x20>
   bf844:	6809      	ldr	r1, [r1, #0]
   bf846:	b149      	cbz	r1, bf85c <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bf848:	1a9b      	subs	r3, r3, r2
   bf84a:	4418      	add	r0, r3
   bf84c:	f001 fbe3 	bl	c1016 <strcmp>
   bf850:	fab0 f080 	clz	r0, r0
   bf854:	0940      	lsrs	r0, r0, #5
}
   bf856:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bf858:	2000      	movs	r0, #0
   bf85a:	e7fc      	b.n	bf856 <_ZNK6String8endsWithERKS_+0x20>
   bf85c:	4608      	mov	r0, r1
   bf85e:	e7fa      	b.n	bf856 <_ZNK6String8endsWithERKS_+0x20>

000bf860 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bf860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bf862:	429a      	cmp	r2, r3
{
   bf864:	460f      	mov	r7, r1
   bf866:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bf868:	490c      	ldr	r1, [pc, #48]	; (bf89c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bf86a:	bf88      	it	hi
   bf86c:	4613      	movhi	r3, r2
{
   bf86e:	4614      	mov	r4, r2
   bf870:	4606      	mov	r6, r0
	if (left > right) {
   bf872:	bf84      	itt	hi
   bf874:	462c      	movhi	r4, r5
   bf876:	461d      	movhi	r5, r3
	String out;
   bf878:	f7ff ff05 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bf87c:	68bb      	ldr	r3, [r7, #8]
   bf87e:	42a3      	cmp	r3, r4
   bf880:	d30a      	bcc.n	bf898 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bf882:	6839      	ldr	r1, [r7, #0]
   bf884:	42ab      	cmp	r3, r5
   bf886:	bf94      	ite	ls
   bf888:	ebc4 0203 	rsbls	r2, r4, r3
   bf88c:	ebc4 0205 	rsbhi	r2, r4, r5
   bf890:	4421      	add	r1, r4
   bf892:	4630      	mov	r0, r6
   bf894:	f7ff fede 	bl	bf654 <_ZN6String4copyEPKcj>
	return out;
}
   bf898:	4630      	mov	r0, r6
   bf89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf89c:	000c4e80 	.word	0x000c4e80

000bf8a0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bf8a0:	b40e      	push	{r1, r2, r3}
   bf8a2:	b570      	push	{r4, r5, r6, lr}
   bf8a4:	b087      	sub	sp, #28
   bf8a6:	ad0b      	add	r5, sp, #44	; 0x2c
   bf8a8:	4604      	mov	r4, r0
   bf8aa:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf8ae:	9201      	str	r2, [sp, #4]
   bf8b0:	462b      	mov	r3, r5
   bf8b2:	2105      	movs	r1, #5
   bf8b4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bf8b6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf8b8:	f7fd fb70 	bl	bcf9c <vsnprintf>
    va_end(marker);

    String result;
   bf8bc:	490b      	ldr	r1, [pc, #44]	; (bf8ec <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bf8be:	4606      	mov	r6, r0
    String result;
   bf8c0:	4620      	mov	r0, r4
   bf8c2:	f7ff fee0 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bf8c6:	4631      	mov	r1, r6
   bf8c8:	4620      	mov	r0, r4
   bf8ca:	f7ff feaf 	bl	bf62c <_ZN6String7reserveEj>
    if (result.buffer) {
   bf8ce:	6820      	ldr	r0, [r4, #0]
   bf8d0:	b130      	cbz	r0, bf8e0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bf8d2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bf8d4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bf8d6:	462b      	mov	r3, r5
   bf8d8:	1c71      	adds	r1, r6, #1
   bf8da:	f7fd fb5f 	bl	bcf9c <vsnprintf>
        va_end(marker);
        result.len = n;
   bf8de:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bf8e0:	4620      	mov	r0, r4
   bf8e2:	b007      	add	sp, #28
   bf8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bf8e8:	b003      	add	sp, #12
   bf8ea:	4770      	bx	lr
   bf8ec:	000c4e80 	.word	0x000c4e80

000bf8f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bf8f0:	b510      	push	{r4, lr}
   bf8f2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bf8f4:	6800      	ldr	r0, [r0, #0]
   bf8f6:	b118      	cbz	r0, bf900 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bf8f8:	f7fd fb28 	bl	bcf4c <free>
            wakeupSource_ = nullptr;
   bf8fc:	2300      	movs	r3, #0
   bf8fe:	6023      	str	r3, [r4, #0]
        }
    }
   bf900:	bd10      	pop	{r4, pc}

000bf902 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bf902:	b538      	push	{r3, r4, r5, lr}
   bf904:	460c      	mov	r4, r1
   bf906:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf908:	f7ff fff2 	bl	bf8f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bf90c:	b154      	cbz	r4, bf924 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bf90e:	8820      	ldrh	r0, [r4, #0]
   bf910:	f7fd fb14 	bl	bcf3c <malloc>
   bf914:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bf916:	b128      	cbz	r0, bf924 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bf918:	8822      	ldrh	r2, [r4, #0]
   bf91a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bf91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bf920:	f001 bab6 	b.w	c0e90 <memcpy>
    }
   bf924:	bd38      	pop	{r3, r4, r5, pc}

000bf926 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf926:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bf928:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bf92c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bf92e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bf932:	f8c0 3006 	str.w	r3, [r0, #6]
   bf936:	894b      	ldrh	r3, [r1, #10]
   bf938:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bf93a:	460c      	mov	r4, r1
   bf93c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bf93e:	f7ff ffd7 	bl	bf8f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bf942:	6823      	ldr	r3, [r4, #0]
   bf944:	b113      	cbz	r3, bf94c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bf946:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bf948:	2300      	movs	r3, #0
   bf94a:	6023      	str	r3, [r4, #0]
    }
   bf94c:	bd38      	pop	{r3, r4, r5, pc}

000bf94e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bf94e:	b507      	push	{r0, r1, r2, lr}
   bf950:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf952:	2100      	movs	r1, #0
{
   bf954:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bf956:	9100      	str	r1, [sp, #0]
   bf958:	2001      	movs	r0, #1
   bf95a:	218c      	movs	r1, #140	; 0x8c
   bf95c:	f7fd fa2c 	bl	bcdb8 <system_reset>
}
   bf960:	b003      	add	sp, #12
   bf962:	f85d fb04 	ldr.w	pc, [sp], #4

000bf966 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bf966:	4601      	mov	r1, r0
    reset(0, flags);
   bf968:	2000      	movs	r0, #0
   bf96a:	f7ff bff0 	b.w	bf94e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bf96e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bf96e:	2000      	movs	r0, #0
   bf970:	f7ff bff9 	b.w	bf966 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bf974 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bf974:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf976:	4d2b      	ldr	r5, [pc, #172]	; (bfa24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bf978:	7d0b      	ldrb	r3, [r1, #20]
   bf97a:	4604      	mov	r4, r0
   bf97c:	b08b      	sub	sp, #44	; 0x2c
   bf97e:	4608      	mov	r0, r1
   bf980:	1daf      	adds	r7, r5, #6
   bf982:	2b00      	cmp	r3, #0
   bf984:	d036      	beq.n	bf9f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bf986:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bf988:	791b      	ldrb	r3, [r3, #4]
   bf98a:	2b00      	cmp	r3, #0
   bf98c:	d032      	beq.n	bf9f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bf98e:	4b26      	ldr	r3, [pc, #152]	; (bfa28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bf990:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bf992:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bf994:	a902      	add	r1, sp, #8
   bf996:	3004      	adds	r0, #4
   bf998:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bf99c:	f7fd fa02 	bl	bcda4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bf9a0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bf9a4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bf9a8:	b200      	sxth	r0, r0
   bf9aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bf9ae:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bf9b2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bf9b4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bf9b6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf9b8:	4628      	mov	r0, r5
   bf9ba:	f7ff ffa2 	bl	bf902 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bf9be:	a802      	add	r0, sp, #8
   bf9c0:	f7ff ff96 	bl	bf8f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bf9c4:	2300      	movs	r3, #0
   bf9c6:	6023      	str	r3, [r4, #0]
   bf9c8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bf9ca:	71a3      	strb	r3, [r4, #6]
   bf9cc:	8123      	strh	r3, [r4, #8]
   bf9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bf9d2:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bf9d4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bf9d8:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bf9da:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bf9de:	f8c4 3006 	str.w	r3, [r4, #6]
   bf9e2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bf9e4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bf9e6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bf9e8:	4620      	mov	r0, r4
   bf9ea:	f7ff ff8a 	bl	bf902 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bf9ee:	4620      	mov	r0, r4
   bf9f0:	b00b      	add	sp, #44	; 0x2c
   bf9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bf9f4:	2600      	movs	r6, #0
   bf9f6:	2320      	movs	r3, #32
   bf9f8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bf9fc:	4b0b      	ldr	r3, [pc, #44]	; (bfa2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bf9fe:	9300      	str	r3, [sp, #0]
   bfa00:	aa02      	add	r2, sp, #8
   bfa02:	4633      	mov	r3, r6
   bfa04:	490a      	ldr	r1, [pc, #40]	; (bfa30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bfa06:	2032      	movs	r0, #50	; 0x32
   bfa08:	f7fd f93c 	bl	bcc84 <log_message>
            : wakeupSource_(nullptr),
   bfa0c:	4b06      	ldr	r3, [pc, #24]	; (bfa28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bfa0e:	4805      	ldr	r0, [pc, #20]	; (bfa24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bfa10:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bfa12:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bfa16:	a902      	add	r1, sp, #8
   bfa18:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bfa1c:	f7ff ff83 	bl	bf926 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bfa20:	e7cd      	b.n	bf9be <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bfa22:	bf00      	nop
   bfa24:	2003e69c 	.word	0x2003e69c
   bfa28:	ffff0000 	.word	0xffff0000
   bfa2c:	000c4f5f 	.word	0x000c4f5f
   bfa30:	000c4f58 	.word	0x000c4f58

000bfa34 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bfa34:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bfa36:	2420      	movs	r4, #32
{
   bfa38:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bfa3a:	4622      	mov	r2, r4
   bfa3c:	2100      	movs	r1, #0
   bfa3e:	4668      	mov	r0, sp
   bfa40:	f001 fa4e 	bl	c0ee0 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bfa44:	2100      	movs	r1, #0
   bfa46:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bfa48:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bfa4c:	f7fc fec2 	bl	bc7d4 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bfa50:	9801      	ldr	r0, [sp, #4]
   bfa52:	b008      	add	sp, #32
   bfa54:	bd10      	pop	{r4, pc}
	...

000bfa58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bfa58:	4b05      	ldr	r3, [pc, #20]	; (bfa70 <_GLOBAL__sub_I_System+0x18>)
   bfa5a:	2202      	movs	r2, #2
   bfa5c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bfa5e:	4b05      	ldr	r3, [pc, #20]	; (bfa74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bfa60:	4a05      	ldr	r2, [pc, #20]	; (bfa78 <_GLOBAL__sub_I_System+0x20>)
   bfa62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bfa64:	2000      	movs	r0, #0
   bfa66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bfa6a:	f7fd b93d 	b.w	bcce8 <set_system_mode>
   bfa6e:	bf00      	nop
   bfa70:	2003e6a8 	.word	0x2003e6a8
   bfa74:	2003e69c 	.word	0x2003e69c
   bfa78:	ffff0000 	.word	0xffff0000

000bfa7c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bfa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bfa80:	4a15      	ldr	r2, [pc, #84]	; (bfad8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bfa82:	f8df 8060 	ldr.w	r8, [pc, #96]	; bfae4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bfa86:	e9d2 6300 	ldrd	r6, r3, [r2]
   bfa8a:	1980      	adds	r0, r0, r6
   bfa8c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bfa90:	4b12      	ldr	r3, [pc, #72]	; (bfadc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bfa92:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bfa96:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bfa9a:	1986      	adds	r6, r0, r6
   bfa9c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bfaa0:	42bb      	cmp	r3, r7
   bfaa2:	bf08      	it	eq
   bfaa4:	42b2      	cmpeq	r2, r6
{
   bfaa6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bfaa8:	d013      	beq.n	bfad2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bfaaa:	a903      	add	r1, sp, #12
   bfaac:	4668      	mov	r0, sp
   bfaae:	e9cd 6700 	strd	r6, r7, [sp]
   bfab2:	f7fd faab 	bl	bd00c <localtime_r>
	calendar_time.tm_year += 1900;
   bfab6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfab8:	4d09      	ldr	r5, [pc, #36]	; (bfae0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bfaba:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfabe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bfac0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bfac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bfaca:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bface:	6823      	ldr	r3, [r4, #0]
   bfad0:	602b      	str	r3, [r5, #0]
    }
}
   bfad2:	b00c      	add	sp, #48	; 0x30
   bfad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfad8:	2003e6e0 	.word	0x2003e6e0
   bfadc:	2003e6d8 	.word	0x2003e6d8
   bfae0:	2003e6b4 	.word	0x2003e6b4
   bfae4:	2003e6e8 	.word	0x2003e6e8

000bfae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bfae8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfaea:	2000      	movs	r0, #0
   bfaec:	f7fd f9a6 	bl	bce3c <spark_sync_time_pending>
   bfaf0:	b128      	cbz	r0, bfafe <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfaf2:	f7fd f983 	bl	bcdfc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfaf6:	f080 0001 	eor.w	r0, r0, #1
   bfafa:	b2c0      	uxtb	r0, r0
    }
   bfafc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfafe:	2001      	movs	r0, #1
   bfb00:	e7fc      	b.n	bfafc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bfb04 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bfb04:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfb06:	f7ff ffb9 	bl	bfa7c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bfb0a:	4b01      	ldr	r3, [pc, #4]	; (bfb10 <_ZN9TimeClass4hourEx+0xc>)
   bfb0c:	6898      	ldr	r0, [r3, #8]
   bfb0e:	bd08      	pop	{r3, pc}
   bfb10:	2003e6b4 	.word	0x2003e6b4

000bfb14 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bfb14:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfb16:	f7ff ffb1 	bl	bfa7c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bfb1a:	4b01      	ldr	r3, [pc, #4]	; (bfb20 <_ZN9TimeClass3dayEx+0xc>)
   bfb1c:	68d8      	ldr	r0, [r3, #12]
   bfb1e:	bd08      	pop	{r3, pc}
   bfb20:	2003e6b4 	.word	0x2003e6b4

000bfb24 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bfb24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bfb26:	4602      	mov	r2, r0
   bfb28:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfb2a:	4668      	mov	r0, sp
    struct timeval tv = {
   bfb2c:	2100      	movs	r1, #0
    };
   bfb2e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bfb32:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfb36:	f7fc fe95 	bl	bc864 <hal_rtc_set_time>
   bfb3a:	4602      	mov	r2, r0
   bfb3c:	b910      	cbnz	r0, bfb44 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bfb3e:	4601      	mov	r1, r0
   bfb40:	f7fd f90a 	bl	bcd58 <system_notify_time_changed>
    }
}
   bfb44:	b005      	add	sp, #20
   bfb46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfb4c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bfb4c:	b530      	push	{r4, r5, lr}
   bfb4e:	b093      	sub	sp, #76	; 0x4c
   bfb50:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bfb54:	4b19      	ldr	r3, [pc, #100]	; (bfbbc <_ZN9TimeClass7timeStrEx+0x70>)
{
   bfb56:	4604      	mov	r4, r0
    t += time_zone_cache;
   bfb58:	e9d3 1000 	ldrd	r1, r0, [r3]
   bfb5c:	9b01      	ldr	r3, [sp, #4]
   bfb5e:	1852      	adds	r2, r2, r1
   bfb60:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bfb64:	4816      	ldr	r0, [pc, #88]	; (bfbc0 <_ZN9TimeClass7timeStrEx+0x74>)
   bfb66:	e9d0 1000 	ldrd	r1, r0, [r0]
   bfb6a:	1852      	adds	r2, r2, r1
   bfb6c:	eb43 0300 	adc.w	r3, r3, r0
   bfb70:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bfb74:	2224      	movs	r2, #36	; 0x24
   bfb76:	eb0d 0002 	add.w	r0, sp, r2
   bfb7a:	2100      	movs	r1, #0
   bfb7c:	f001 f9b0 	bl	c0ee0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bfb80:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bfb82:	a909      	add	r1, sp, #36	; 0x24
   bfb84:	4668      	mov	r0, sp
   bfb86:	f7fd fa41 	bl	bd00c <localtime_r>
    char ascstr[26] = {};
   bfb8a:	2216      	movs	r2, #22
   bfb8c:	4629      	mov	r1, r5
   bfb8e:	a803      	add	r0, sp, #12
   bfb90:	9502      	str	r5, [sp, #8]
   bfb92:	f001 f9a5 	bl	c0ee0 <memset>
    asctime_r(&calendar_time, ascstr);
   bfb96:	a902      	add	r1, sp, #8
   bfb98:	a809      	add	r0, sp, #36	; 0x24
   bfb9a:	f001 f927 	bl	c0dec <asctime_r>
    int len = strlen(ascstr);
   bfb9e:	a802      	add	r0, sp, #8
   bfba0:	f001 fa69 	bl	c1076 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bfba4:	ab12      	add	r3, sp, #72	; 0x48
   bfba6:	4418      	add	r0, r3
    return String(ascstr);
   bfba8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bfbaa:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bfbae:	4620      	mov	r0, r4
   bfbb0:	f7ff fd69 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bfbb4:	4620      	mov	r0, r4
   bfbb6:	b013      	add	sp, #76	; 0x4c
   bfbb8:	bd30      	pop	{r4, r5, pc}
   bfbba:	bf00      	nop
   bfbbc:	2003e6e0 	.word	0x2003e6e0
   bfbc0:	2003e6d8 	.word	0x2003e6d8

000bfbc4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bfbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfbc8:	b0a4      	sub	sp, #144	; 0x90
   bfbca:	4607      	mov	r7, r0
   bfbcc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfbce:	a814      	add	r0, sp, #80	; 0x50
{
   bfbd0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfbd2:	223f      	movs	r2, #63	; 0x3f
{
   bfbd4:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bfbd6:	f001 fa6a 	bl	c10ae <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bfbda:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bfbdc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bfbde:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bfbe2:	f001 fa48 	bl	c1076 <strlen>
   bfbe6:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bfbe8:	bb4c      	cbnz	r4, bfc3e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bfbea:	4929      	ldr	r1, [pc, #164]	; (bfc90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bfbec:	a803      	add	r0, sp, #12
   bfbee:	f001 fa1c 	bl	c102a <strcpy>
   bfbf2:	ac14      	add	r4, sp, #80	; 0x50
{
   bfbf4:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bfbf6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bfbfa:	45b1      	cmp	r9, r6
   bfbfc:	d934      	bls.n	bfc68 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bfbfe:	7823      	ldrb	r3, [r4, #0]
   bfc00:	2b25      	cmp	r3, #37	; 0x25
   bfc02:	f106 0a01 	add.w	sl, r6, #1
   bfc06:	d117      	bne.n	bfc38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bfc08:	7863      	ldrb	r3, [r4, #1]
   bfc0a:	2b7a      	cmp	r3, #122	; 0x7a
   bfc0c:	d114      	bne.n	bfc38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bfc0e:	a803      	add	r0, sp, #12
   bfc10:	f001 fa31 	bl	c1076 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bfc14:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bfc16:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bfc18:	1830      	adds	r0, r6, r0
   bfc1a:	4418      	add	r0, r3
   bfc1c:	eba9 0206 	sub.w	r2, r9, r6
   bfc20:	1ca1      	adds	r1, r4, #2
   bfc22:	f001 f935 	bl	c0e90 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bfc26:	462a      	mov	r2, r5
   bfc28:	a903      	add	r1, sp, #12
   bfc2a:	4620      	mov	r0, r4
   bfc2c:	f001 f930 	bl	c0e90 <memcpy>
            len = strlen(format_str);
   bfc30:	a814      	add	r0, sp, #80	; 0x50
   bfc32:	f001 fa20 	bl	c1076 <strlen>
   bfc36:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bfc38:	3401      	adds	r4, #1
   bfc3a:	4656      	mov	r6, sl
   bfc3c:	e7db      	b.n	bfbf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bfc3e:	233c      	movs	r3, #60	; 0x3c
   bfc40:	fb94 f2f3 	sdiv	r2, r4, r3
   bfc44:	2a00      	cmp	r2, #0
   bfc46:	bfb8      	it	lt
   bfc48:	4252      	neglt	r2, r2
   bfc4a:	fbb2 f1f3 	udiv	r1, r2, r3
   bfc4e:	fb03 2211 	mls	r2, r3, r1, r2
   bfc52:	9200      	str	r2, [sp, #0]
   bfc54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bfc58:	4a0e      	ldr	r2, [pc, #56]	; (bfc94 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bfc5a:	fb94 f3f3 	sdiv	r3, r4, r3
   bfc5e:	2110      	movs	r1, #16
   bfc60:	a803      	add	r0, sp, #12
   bfc62:	f7fd f993 	bl	bcf8c <snprintf>
   bfc66:	e7c4      	b.n	bfbf2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bfc68:	2100      	movs	r1, #0
   bfc6a:	222e      	movs	r2, #46	; 0x2e
   bfc6c:	a808      	add	r0, sp, #32
   bfc6e:	9107      	str	r1, [sp, #28]
   bfc70:	f001 f936 	bl	c0ee0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bfc74:	4643      	mov	r3, r8
   bfc76:	aa14      	add	r2, sp, #80	; 0x50
   bfc78:	2132      	movs	r1, #50	; 0x32
   bfc7a:	a807      	add	r0, sp, #28
   bfc7c:	f7fd f9be 	bl	bcffc <strftime>
    return String(buf);
   bfc80:	a907      	add	r1, sp, #28
   bfc82:	4638      	mov	r0, r7
   bfc84:	f7ff fcff 	bl	bf686 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bfc88:	4638      	mov	r0, r7
   bfc8a:	b024      	add	sp, #144	; 0x90
   bfc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfc90:	000c45ff 	.word	0x000c45ff
   bfc94:	000c4601 	.word	0x000c4601

000bfc98 <_ZN9TimeClass6formatExPKc>:
{
   bfc98:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfc9a:	b08d      	sub	sp, #52	; 0x34
   bfc9c:	e9cd 2300 	strd	r2, r3, [sp]
   bfca0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bfca2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bfca4:	b915      	cbnz	r5, bfcac <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bfca6:	4b19      	ldr	r3, [pc, #100]	; (bfd0c <_ZN9TimeClass6formatExPKc+0x74>)
   bfca8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bfcaa:	b12d      	cbz	r5, bfcb8 <_ZN9TimeClass6formatExPKc+0x20>
   bfcac:	4b18      	ldr	r3, [pc, #96]	; (bfd10 <_ZN9TimeClass6formatExPKc+0x78>)
   bfcae:	4628      	mov	r0, r5
   bfcb0:	6819      	ldr	r1, [r3, #0]
   bfcb2:	f001 f9b0 	bl	c1016 <strcmp>
   bfcb6:	b938      	cbnz	r0, bfcc8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bfcb8:	e9dd 2300 	ldrd	r2, r3, [sp]
   bfcbc:	4620      	mov	r0, r4
   bfcbe:	f7ff ff45 	bl	bfb4c <_ZN9TimeClass7timeStrEx>
}
   bfcc2:	4620      	mov	r0, r4
   bfcc4:	b00d      	add	sp, #52	; 0x34
   bfcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bfcc8:	4e12      	ldr	r6, [pc, #72]	; (bfd14 <_ZN9TimeClass6formatExPKc+0x7c>)
   bfcca:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bfccc:	4f12      	ldr	r7, [pc, #72]	; (bfd18 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bfcce:	e9d6 3200 	ldrd	r3, r2, [r6]
   bfcd2:	185b      	adds	r3, r3, r1
   bfcd4:	9901      	ldr	r1, [sp, #4]
   bfcd6:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bfcda:	e9d7 0100 	ldrd	r0, r1, [r7]
   bfcde:	181b      	adds	r3, r3, r0
   bfce0:	eb42 0201 	adc.w	r2, r2, r1
   bfce4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bfce8:	2100      	movs	r1, #0
   bfcea:	2224      	movs	r2, #36	; 0x24
   bfcec:	a803      	add	r0, sp, #12
   bfcee:	f001 f8f7 	bl	c0ee0 <memset>
    localtime_r(&t, &calendar_time);
   bfcf2:	a903      	add	r1, sp, #12
   bfcf4:	4668      	mov	r0, sp
   bfcf6:	f7fd f989 	bl	bd00c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bfcfa:	6832      	ldr	r2, [r6, #0]
   bfcfc:	683b      	ldr	r3, [r7, #0]
   bfcfe:	a903      	add	r1, sp, #12
   bfd00:	4413      	add	r3, r2
   bfd02:	4620      	mov	r0, r4
   bfd04:	462a      	mov	r2, r5
   bfd06:	f7ff ff5d 	bl	bfbc4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bfd0a:	e7da      	b.n	bfcc2 <_ZN9TimeClass6formatExPKc+0x2a>
   bfd0c:	2003e6b0 	.word	0x2003e6b0
   bfd10:	2003d698 	.word	0x2003d698
   bfd14:	2003e6e0 	.word	0x2003e6e0
   bfd18:	2003e6d8 	.word	0x2003e6d8

000bfd1c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bfd1c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bfd1e:	2000      	movs	r0, #0
   bfd20:	f7fc fd88 	bl	bc834 <hal_rtc_time_is_valid>
    if (rtcstate)
   bfd24:	4604      	mov	r4, r0
   bfd26:	b9a0      	cbnz	r0, bfd52 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bfd28:	f7fc ffd6 	bl	bccd8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bfd2c:	2801      	cmp	r0, #1
   bfd2e:	d110      	bne.n	bfd52 <_ZN9TimeClass7isValidEv+0x36>
   bfd30:	4620      	mov	r0, r4
   bfd32:	f7fd f809 	bl	bcd48 <system_thread_get_state>
   bfd36:	b960      	cbnz	r0, bfd52 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bfd38:	f7ff fed6 	bl	bfae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bfd3c:	b910      	cbnz	r0, bfd44 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bfd3e:	f7fd f84d 	bl	bcddc <spark_process>
        while (_while() && !_condition()) {
   bfd42:	e7f9      	b.n	bfd38 <_ZN9TimeClass7isValidEv+0x1c>
   bfd44:	f7ff fed0 	bl	bfae8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bfd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bfd4c:	2000      	movs	r0, #0
   bfd4e:	f7fc bd71 	b.w	bc834 <hal_rtc_time_is_valid>
}
   bfd52:	4620      	mov	r0, r4
   bfd54:	bd10      	pop	{r4, pc}

000bfd56 <_ZN9TimeClass3nowEv>:
{
   bfd56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bfd58:	f7ff ffe0 	bl	bfd1c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bfd5c:	2210      	movs	r2, #16
   bfd5e:	2100      	movs	r1, #0
   bfd60:	4668      	mov	r0, sp
   bfd62:	f001 f8bd 	bl	c0ee0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bfd66:	2100      	movs	r1, #0
   bfd68:	4668      	mov	r0, sp
   bfd6a:	f7fc fd73 	bl	bc854 <hal_rtc_get_time>
}
   bfd6e:	9800      	ldr	r0, [sp, #0]
   bfd70:	b005      	add	sp, #20
   bfd72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfd78 <_ZN9TimeClass4hourEv>:
{
   bfd78:	b508      	push	{r3, lr}
	return hour(now());
   bfd7a:	f7ff ffec 	bl	bfd56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bfd7e:	17c1      	asrs	r1, r0, #31
   bfd80:	f7ff fe7c 	bl	bfa7c <_ZL22Refresh_UnixTime_Cachex>
}
   bfd84:	4b01      	ldr	r3, [pc, #4]	; (bfd8c <_ZN9TimeClass4hourEv+0x14>)
   bfd86:	6898      	ldr	r0, [r3, #8]
   bfd88:	bd08      	pop	{r3, pc}
   bfd8a:	bf00      	nop
   bfd8c:	2003e6b4 	.word	0x2003e6b4

000bfd90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bfd90:	4b02      	ldr	r3, [pc, #8]	; (bfd9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bfd92:	681a      	ldr	r2, [r3, #0]
   bfd94:	4b02      	ldr	r3, [pc, #8]	; (bfda0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bfd96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bfd98:	4770      	bx	lr
   bfd9a:	bf00      	nop
   bfd9c:	2003d698 	.word	0x2003d698
   bfda0:	2003e6b0 	.word	0x2003e6b0

000bfda4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bfda4:	4770      	bx	lr

000bfda6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bfda6:	7441      	strb	r1, [r0, #17]
}
   bfda8:	4770      	bx	lr

000bfdaa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bfdaa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bfdac:	7c00      	ldrb	r0, [r0, #16]
   bfdae:	f7fc ff01 	bl	bcbb4 <hal_usart_available_data_for_write>
}
   bfdb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfdb6:	bd08      	pop	{r3, pc}

000bfdb8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bfdb8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bfdba:	7c00      	ldrb	r0, [r0, #16]
   bfdbc:	f7fc fed2 	bl	bcb64 <hal_usart_available>
}
   bfdc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfdc4:	bd08      	pop	{r3, pc}

000bfdc6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bfdc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bfdc8:	7c00      	ldrb	r0, [r0, #16]
   bfdca:	f7fc fedb 	bl	bcb84 <hal_usart_peek>
}
   bfdce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfdd2:	bd08      	pop	{r3, pc}

000bfdd4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bfdd4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bfdd6:	7c00      	ldrb	r0, [r0, #16]
   bfdd8:	f7fc fecc 	bl	bcb74 <hal_usart_read>
}
   bfddc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfde0:	bd08      	pop	{r3, pc}

000bfde2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bfde2:	7c00      	ldrb	r0, [r0, #16]
   bfde4:	f7fc bed6 	b.w	bcb94 <hal_usart_flush>

000bfde8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bfde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bfdea:	7c45      	ldrb	r5, [r0, #17]
{
   bfdec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bfdee:	b12d      	cbz	r5, bfdfc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bfdf0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bfdf2:	b003      	add	sp, #12
   bfdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bfdf8:	f7fc beac 	b.w	bcb54 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bfdfc:	7c00      	ldrb	r0, [r0, #16]
   bfdfe:	9101      	str	r1, [sp, #4]
   bfe00:	f7fc fed8 	bl	bcbb4 <hal_usart_available_data_for_write>
   bfe04:	2800      	cmp	r0, #0
   bfe06:	9901      	ldr	r1, [sp, #4]
   bfe08:	dcf2      	bgt.n	bfdf0 <_ZN11USARTSerial5writeEh+0x8>
}
   bfe0a:	4628      	mov	r0, r5
   bfe0c:	b003      	add	sp, #12
   bfe0e:	bd30      	pop	{r4, r5, pc}

000bfe10 <_ZN11USARTSerialD0Ev>:
   bfe10:	b510      	push	{r4, lr}
   bfe12:	2114      	movs	r1, #20
   bfe14:	4604      	mov	r4, r0
   bfe16:	f7f4 f942 	bl	b409e <_ZdlPvj>
   bfe1a:	4620      	mov	r0, r4
   bfe1c:	bd10      	pop	{r4, pc}
	...

000bfe20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bfe20:	b510      	push	{r4, lr}
   bfe22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfe26:	4604      	mov	r4, r0
   bfe28:	4608      	mov	r0, r1
   bfe2a:	4611      	mov	r1, r2
   bfe2c:	2200      	movs	r2, #0
   bfe2e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bfe32:	4b04      	ldr	r3, [pc, #16]	; (bfe44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bfe34:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bfe36:	2301      	movs	r3, #1
  _serial = serial;
   bfe38:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bfe3a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bfe3c:	f7fc feca 	bl	bcbd4 <hal_usart_init_ex>
}
   bfe40:	4620      	mov	r0, r4
   bfe42:	bd10      	pop	{r4, pc}
   bfe44:	000c4fac 	.word	0x000c4fac

000bfe48 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bfe48:	7c00      	ldrb	r0, [r0, #16]
   bfe4a:	2300      	movs	r3, #0
   bfe4c:	f7fc beba 	b.w	bcbc4 <hal_usart_begin_config>

000bfe50 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bfe50:	2200      	movs	r2, #0
   bfe52:	f7ff bff9 	b.w	bfe48 <_ZN11USARTSerial5beginEmm>

000bfe56 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bfe56:	7c00      	ldrb	r0, [r0, #16]
   bfe58:	f7fc be74 	b.w	bcb44 <hal_usart_end>

000bfe5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bfe5c:	7441      	strb	r1, [r0, #17]
}
   bfe5e:	4770      	bx	lr

000bfe60 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bfe60:	4770      	bx	lr

000bfe62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bfe62:	4770      	bx	lr

000bfe64 <_ZN9USBSerial4readEv>:
{
   bfe64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bfe66:	2100      	movs	r1, #0
   bfe68:	7c00      	ldrb	r0, [r0, #16]
   bfe6a:	f7fc fee3 	bl	bcc34 <HAL_USB_USART_Receive_Data>
}
   bfe6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfe72:	bd08      	pop	{r3, pc}

000bfe74 <_ZN9USBSerial4peekEv>:
{
   bfe74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bfe76:	2101      	movs	r1, #1
   bfe78:	7c00      	ldrb	r0, [r0, #16]
   bfe7a:	f7fc fedb 	bl	bcc34 <HAL_USB_USART_Receive_Data>
}
   bfe7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfe82:	bd08      	pop	{r3, pc}

000bfe84 <_ZN9USBSerial17availableForWriteEv>:
{
   bfe84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bfe86:	7c00      	ldrb	r0, [r0, #16]
   bfe88:	f7fc fecc 	bl	bcc24 <HAL_USB_USART_Available_Data_For_Write>
}
   bfe8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfe90:	bd08      	pop	{r3, pc}

000bfe92 <_ZN9USBSerial9availableEv>:
{
   bfe92:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bfe94:	7c00      	ldrb	r0, [r0, #16]
   bfe96:	f7fc febd 	bl	bcc14 <HAL_USB_USART_Available_Data>
}
   bfe9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfe9e:	bd08      	pop	{r3, pc}

000bfea0 <_ZN9USBSerial5writeEh>:
{
   bfea0:	b513      	push	{r0, r1, r4, lr}
   bfea2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bfea4:	7c00      	ldrb	r0, [r0, #16]
{
   bfea6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bfea8:	f7fc febc 	bl	bcc24 <HAL_USB_USART_Available_Data_For_Write>
   bfeac:	2800      	cmp	r0, #0
   bfeae:	9901      	ldr	r1, [sp, #4]
   bfeb0:	dc01      	bgt.n	bfeb6 <_ZN9USBSerial5writeEh+0x16>
   bfeb2:	7c60      	ldrb	r0, [r4, #17]
   bfeb4:	b120      	cbz	r0, bfec0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bfeb6:	7c20      	ldrb	r0, [r4, #16]
   bfeb8:	f7fc fec4 	bl	bcc44 <HAL_USB_USART_Send_Data>
   bfebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bfec0:	b002      	add	sp, #8
   bfec2:	bd10      	pop	{r4, pc}

000bfec4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bfec4:	7c00      	ldrb	r0, [r0, #16]
   bfec6:	f7fc bec5 	b.w	bcc54 <HAL_USB_USART_Flush_Data>

000bfeca <_ZN9USBSerialD0Ev>:
   bfeca:	b510      	push	{r4, lr}
   bfecc:	2114      	movs	r1, #20
   bfece:	4604      	mov	r4, r0
   bfed0:	f7f4 f8e5 	bl	b409e <_ZdlPvj>
   bfed4:	4620      	mov	r0, r4
   bfed6:	bd10      	pop	{r4, pc}

000bfed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bfed8:	b510      	push	{r4, lr}
   bfeda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfede:	4604      	mov	r4, r0
   bfee0:	4608      	mov	r0, r1
   bfee2:	2100      	movs	r1, #0
   bfee4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bfee8:	4b04      	ldr	r3, [pc, #16]	; (bfefc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bfeea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bfeec:	2301      	movs	r3, #1
  _serial = serial;
   bfeee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bfef0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bfef2:	4611      	mov	r1, r2
   bfef4:	f7fc fe76 	bl	bcbe4 <HAL_USB_USART_Init>
}
   bfef8:	4620      	mov	r0, r4
   bfefa:	bd10      	pop	{r4, pc}
   bfefc:	000c4fdc 	.word	0x000c4fdc

000bff00 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bff00:	7c00      	ldrb	r0, [r0, #16]
   bff02:	2200      	movs	r2, #0
   bff04:	f7fc be76 	b.w	bcbf4 <HAL_USB_USART_Begin>

000bff08 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bff08:	7c00      	ldrb	r0, [r0, #16]
   bff0a:	f7fc be7b 	b.w	bcc04 <HAL_USB_USART_End>

000bff0e <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bff0e:	7c00      	ldrb	r0, [r0, #16]
   bff10:	f7fc bea8 	b.w	bcc64 <HAL_USB_USART_Is_Connected>

000bff14 <_Z19acquireSerialBufferv>:
{
   bff14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bff16:	2214      	movs	r2, #20
{
   bff18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bff1a:	2100      	movs	r1, #0
   bff1c:	f000 ffe0 	bl	c0ee0 <memset>
}
   bff20:	4620      	mov	r0, r4
   bff22:	bd10      	pop	{r4, pc}

000bff24 <_Z16_fetch_usbserialv>:
{
   bff24:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bff26:	4c0f      	ldr	r4, [pc, #60]	; (bff64 <_Z16_fetch_usbserialv+0x40>)
{
   bff28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bff2a:	a803      	add	r0, sp, #12
   bff2c:	f7ff fff2 	bl	bff14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bff30:	7821      	ldrb	r1, [r4, #0]
   bff32:	f3bf 8f5b 	dmb	ish
   bff36:	f011 0101 	ands.w	r1, r1, #1
   bff3a:	d10f      	bne.n	bff5c <_Z16_fetch_usbserialv+0x38>
   bff3c:	4620      	mov	r0, r4
   bff3e:	9101      	str	r1, [sp, #4]
   bff40:	f7f4 f8bc 	bl	b40bc <__cxa_guard_acquire>
   bff44:	9901      	ldr	r1, [sp, #4]
   bff46:	b148      	cbz	r0, bff5c <_Z16_fetch_usbserialv+0x38>
   bff48:	aa03      	add	r2, sp, #12
   bff4a:	4807      	ldr	r0, [pc, #28]	; (bff68 <_Z16_fetch_usbserialv+0x44>)
   bff4c:	f7ff ffc4 	bl	bfed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bff50:	4620      	mov	r0, r4
   bff52:	f7f4 f8b8 	bl	b40c6 <__cxa_guard_release>
   bff56:	4805      	ldr	r0, [pc, #20]	; (bff6c <_Z16_fetch_usbserialv+0x48>)
   bff58:	f000 ff6e 	bl	c0e38 <atexit>
	return _usbserial;
}
   bff5c:	4802      	ldr	r0, [pc, #8]	; (bff68 <_Z16_fetch_usbserialv+0x44>)
   bff5e:	b008      	add	sp, #32
   bff60:	bd10      	pop	{r4, pc}
   bff62:	bf00      	nop
   bff64:	2003e6f0 	.word	0x2003e6f0
   bff68:	2003e6f4 	.word	0x2003e6f4
   bff6c:	000bfe61 	.word	0x000bfe61

000bff70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bff70:	4b01      	ldr	r3, [pc, #4]	; (bff78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bff72:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bff74:	4770      	bx	lr
   bff76:	bf00      	nop
   bff78:	2003d69c 	.word	0x2003d69c

000bff7c <serialEventRun>:
{
   bff7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bff7e:	4b0b      	ldr	r3, [pc, #44]	; (bffac <serialEventRun+0x30>)
   bff80:	b143      	cbz	r3, bff94 <serialEventRun+0x18>
   bff82:	f7ff ffcf 	bl	bff24 <_Z16_fetch_usbserialv>
   bff86:	6803      	ldr	r3, [r0, #0]
   bff88:	691b      	ldr	r3, [r3, #16]
   bff8a:	4798      	blx	r3
   bff8c:	2800      	cmp	r0, #0
   bff8e:	dd01      	ble.n	bff94 <serialEventRun+0x18>
        serialEvent();
   bff90:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bff94:	4b06      	ldr	r3, [pc, #24]	; (bffb0 <serialEventRun+0x34>)
   bff96:	b143      	cbz	r3, bffaa <serialEventRun+0x2e>
   bff98:	f000 f9ca 	bl	c0330 <_Z22__fetch_global_Serial1v>
   bff9c:	6803      	ldr	r3, [r0, #0]
   bff9e:	691b      	ldr	r3, [r3, #16]
   bffa0:	4798      	blx	r3
   bffa2:	2800      	cmp	r0, #0
   bffa4:	dd01      	ble.n	bffaa <serialEventRun+0x2e>
        serialEvent1();
   bffa6:	f3af 8000 	nop.w
}
   bffaa:	bd08      	pop	{r3, pc}
	...

000bffb4 <_post_loop>:
{
   bffb4:	b508      	push	{r3, lr}
	serialEventRun();
   bffb6:	f7ff ffe1 	bl	bff7c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bffba:	f7fc fc33 	bl	bc824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bffbe:	4b01      	ldr	r3, [pc, #4]	; (bffc4 <_post_loop+0x10>)
   bffc0:	6018      	str	r0, [r3, #0]
}
   bffc2:	bd08      	pop	{r3, pc}
   bffc4:	2003e710 	.word	0x2003e710

000bffc8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bffc8:	4805      	ldr	r0, [pc, #20]	; (bffe0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bffca:	4a06      	ldr	r2, [pc, #24]	; (bffe4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bffcc:	4906      	ldr	r1, [pc, #24]	; (bffe8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bffce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bffd0:	1a12      	subs	r2, r2, r0
   bffd2:	f000 ff5d 	bl	c0e90 <memcpy>
    __backup_sram_signature = signature;
   bffd6:	4b05      	ldr	r3, [pc, #20]	; (bffec <_Z33system_initialize_user_backup_ramv+0x24>)
   bffd8:	4a05      	ldr	r2, [pc, #20]	; (bfff0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bffda:	601a      	str	r2, [r3, #0]
}
   bffdc:	bd08      	pop	{r3, pc}
   bffde:	bf00      	nop
   bffe0:	2003f400 	.word	0x2003f400
   bffe4:	2003f404 	.word	0x2003f404
   bffe8:	000c54d4 	.word	0x000c54d4
   bffec:	2003f400 	.word	0x2003f400
   bfff0:	9a271c1e 	.word	0x9a271c1e

000bfff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bfff4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bfff6:	2300      	movs	r3, #0
   bfff8:	9300      	str	r3, [sp, #0]
   bfffa:	461a      	mov	r2, r3
   bfffc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0000:	f7fc febc 	bl	bcd7c <system_ctrl_set_result>
}
   c0004:	b003      	add	sp, #12
   c0006:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c000c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c000c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c000e:	8843      	ldrh	r3, [r0, #2]
   c0010:	2b0a      	cmp	r3, #10
   c0012:	d008      	beq.n	c0026 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0014:	2b50      	cmp	r3, #80	; 0x50
   c0016:	d10b      	bne.n	c0030 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0018:	4b09      	ldr	r3, [pc, #36]	; (c0040 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c001a:	681b      	ldr	r3, [r3, #0]
   c001c:	b14b      	cbz	r3, c0032 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c001e:	b003      	add	sp, #12
   c0020:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0024:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c0026:	f7ff ffe5 	bl	bfff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c002a:	b003      	add	sp, #12
   c002c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0030:	2300      	movs	r3, #0
   c0032:	9300      	str	r3, [sp, #0]
   c0034:	461a      	mov	r2, r3
   c0036:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c003a:	f7fc fe9f 	bl	bcd7c <system_ctrl_set_result>
}
   c003e:	e7f4      	b.n	c002a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0040:	2003e70c 	.word	0x2003e70c

000c0044 <module_user_init_hook>:
{
   c0044:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c0046:	4812      	ldr	r0, [pc, #72]	; (c0090 <module_user_init_hook+0x4c>)
   c0048:	2100      	movs	r1, #0
   c004a:	f7fc ffcf 	bl	bcfec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c004e:	4b11      	ldr	r3, [pc, #68]	; (c0094 <module_user_init_hook+0x50>)
   c0050:	681a      	ldr	r2, [r3, #0]
   c0052:	4b11      	ldr	r3, [pc, #68]	; (c0098 <module_user_init_hook+0x54>)
   c0054:	429a      	cmp	r2, r3
   c0056:	4b11      	ldr	r3, [pc, #68]	; (c009c <module_user_init_hook+0x58>)
   c0058:	bf0c      	ite	eq
   c005a:	2201      	moveq	r2, #1
   c005c:	2200      	movne	r2, #0
   c005e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0060:	d001      	beq.n	c0066 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c0062:	f7ff ffb1 	bl	bffc8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c0066:	f7fc fbc5 	bl	bc7f4 <HAL_RNG_GetRandomNumber>
   c006a:	4604      	mov	r4, r0
    srand(seed);
   c006c:	f000 ff50 	bl	c0f10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c0070:	4b0b      	ldr	r3, [pc, #44]	; (c00a0 <module_user_init_hook+0x5c>)
   c0072:	b113      	cbz	r3, c007a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c0074:	4620      	mov	r0, r4
   c0076:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c007a:	2100      	movs	r1, #0
   c007c:	4808      	ldr	r0, [pc, #32]	; (c00a0 <module_user_init_hook+0x5c>)
   c007e:	f7fc feed 	bl	bce5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c0082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c0086:	4807      	ldr	r0, [pc, #28]	; (c00a4 <module_user_init_hook+0x60>)
   c0088:	2100      	movs	r1, #0
   c008a:	f7fc be6d 	b.w	bcd68 <system_ctrl_set_app_request_handler>
   c008e:	bf00      	nop
   c0090:	000bff71 	.word	0x000bff71
   c0094:	2003f400 	.word	0x2003f400
   c0098:	9a271c1e 	.word	0x9a271c1e
   c009c:	2003e708 	.word	0x2003e708
   c00a0:	00000000 	.word	0x00000000
   c00a4:	000c000d 	.word	0x000c000d

000c00a8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c00a8:	b508      	push	{r3, lr}
   c00aa:	4b02      	ldr	r3, [pc, #8]	; (c00b4 <spark_protocol_instance+0xc>)
   c00ac:	681b      	ldr	r3, [r3, #0]
   c00ae:	681b      	ldr	r3, [r3, #0]
   c00b0:	9301      	str	r3, [sp, #4]
   c00b2:	bd08      	pop	{r3, pc}
   c00b4:	0003025c 	.word	0x0003025c

000c00b8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c00b8:	b508      	push	{r3, lr}
   c00ba:	4b02      	ldr	r3, [pc, #8]	; (c00c4 <spark_protocol_set_product_id+0xc>)
   c00bc:	681b      	ldr	r3, [r3, #0]
   c00be:	685b      	ldr	r3, [r3, #4]
   c00c0:	9301      	str	r3, [sp, #4]
   c00c2:	bd08      	pop	{r3, pc}
   c00c4:	0003025c 	.word	0x0003025c

000c00c8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c00c8:	b508      	push	{r3, lr}
   c00ca:	4b02      	ldr	r3, [pc, #8]	; (c00d4 <spark_protocol_set_product_firmware_version+0xc>)
   c00cc:	681b      	ldr	r3, [r3, #0]
   c00ce:	689b      	ldr	r3, [r3, #8]
   c00d0:	9301      	str	r3, [sp, #4]
   c00d2:	bd08      	pop	{r3, pc}
   c00d4:	0003025c 	.word	0x0003025c

000c00d8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c00d8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c00da:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c00dc:	d902      	bls.n	c00e4 <pinAvailable+0xc>
    return false;
   c00de:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c00e0:	b002      	add	sp, #8
   c00e2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c00e4:	f1a0 030b 	sub.w	r3, r0, #11
   c00e8:	2b02      	cmp	r3, #2
   c00ea:	d81a      	bhi.n	c0122 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c00ec:	4c17      	ldr	r4, [pc, #92]	; (c014c <pinAvailable+0x74>)
   c00ee:	7821      	ldrb	r1, [r4, #0]
   c00f0:	f3bf 8f5b 	dmb	ish
   c00f4:	f011 0101 	ands.w	r1, r1, #1
   c00f8:	d10b      	bne.n	c0112 <pinAvailable+0x3a>
   c00fa:	4620      	mov	r0, r4
   c00fc:	9101      	str	r1, [sp, #4]
   c00fe:	f7f3 ffdd 	bl	b40bc <__cxa_guard_acquire>
   c0102:	9901      	ldr	r1, [sp, #4]
   c0104:	b128      	cbz	r0, c0112 <pinAvailable+0x3a>
   c0106:	4812      	ldr	r0, [pc, #72]	; (c0150 <pinAvailable+0x78>)
   c0108:	f7ff f9b2 	bl	bf470 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c010c:	4620      	mov	r0, r4
   c010e:	f7f3 ffda 	bl	b40c6 <__cxa_guard_release>
   c0112:	4b0f      	ldr	r3, [pc, #60]	; (c0150 <pinAvailable+0x78>)
   c0114:	7818      	ldrb	r0, [r3, #0]
   c0116:	f7fc fc8d 	bl	bca34 <hal_spi_is_enabled>
   c011a:	2800      	cmp	r0, #0
   c011c:	d1df      	bne.n	c00de <pinAvailable+0x6>
  return true; // 'pin' is available
   c011e:	2001      	movs	r0, #1
   c0120:	e7de      	b.n	c00e0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c0122:	2801      	cmp	r0, #1
   c0124:	d809      	bhi.n	c013a <pinAvailable+0x62>
   c0126:	f000 f89f 	bl	c0268 <_Z19__fetch_global_Wirev>
   c012a:	2100      	movs	r1, #0
   c012c:	7c00      	ldrb	r0, [r0, #16]
   c012e:	f7fc fc21 	bl	bc974 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c0132:	f080 0001 	eor.w	r0, r0, #1
   c0136:	b2c0      	uxtb	r0, r0
   c0138:	e7d2      	b.n	c00e0 <pinAvailable+0x8>
   c013a:	3809      	subs	r0, #9
   c013c:	2801      	cmp	r0, #1
   c013e:	d8ee      	bhi.n	c011e <pinAvailable+0x46>
   c0140:	f000 f8f6 	bl	c0330 <_Z22__fetch_global_Serial1v>
   c0144:	7c00      	ldrb	r0, [r0, #16]
   c0146:	f7fc fd2d 	bl	bcba4 <hal_usart_is_enabled>
   c014a:	e7f2      	b.n	c0132 <pinAvailable+0x5a>
   c014c:	2003e4e0 	.word	0x2003e4e0
   c0150:	2003e4e4 	.word	0x2003e4e4

000c0154 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0154:	2823      	cmp	r0, #35	; 0x23
{
   c0156:	b538      	push	{r3, r4, r5, lr}
   c0158:	4604      	mov	r4, r0
   c015a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c015c:	d80a      	bhi.n	c0174 <pinMode+0x20>
   c015e:	29ff      	cmp	r1, #255	; 0xff
   c0160:	d008      	beq.n	c0174 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c0162:	f7ff ffb9 	bl	c00d8 <pinAvailable>
   c0166:	b128      	cbz	r0, c0174 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c0168:	4629      	mov	r1, r5
   c016a:	4620      	mov	r0, r4
}
   c016c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c0170:	f7fc bb88 	b.w	bc884 <HAL_Pin_Mode>
}
   c0174:	bd38      	pop	{r3, r4, r5, pc}

000c0176 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c0176:	b538      	push	{r3, r4, r5, lr}
   c0178:	4604      	mov	r4, r0
   c017a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c017c:	f7fc fb8a 	bl	bc894 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c0180:	28ff      	cmp	r0, #255	; 0xff
   c0182:	d010      	beq.n	c01a6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c0184:	2806      	cmp	r0, #6
   c0186:	d804      	bhi.n	c0192 <digitalWrite+0x1c>
   c0188:	234d      	movs	r3, #77	; 0x4d
   c018a:	fa23 f000 	lsr.w	r0, r3, r0
   c018e:	07c3      	lsls	r3, r0, #31
   c0190:	d409      	bmi.n	c01a6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c0192:	4620      	mov	r0, r4
   c0194:	f7ff ffa0 	bl	c00d8 <pinAvailable>
   c0198:	b128      	cbz	r0, c01a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c019a:	4629      	mov	r1, r5
   c019c:	4620      	mov	r0, r4
}
   c019e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c01a2:	f7fc bb7f 	b.w	bc8a4 <HAL_GPIO_Write>
}
   c01a6:	bd38      	pop	{r3, r4, r5, pc}

000c01a8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c01a8:	b510      	push	{r4, lr}
   c01aa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c01ac:	f7fc fb72 	bl	bc894 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c01b0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c01b2:	b2db      	uxtb	r3, r3
   c01b4:	2b01      	cmp	r3, #1
   c01b6:	d908      	bls.n	c01ca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c01b8:	4620      	mov	r0, r4
   c01ba:	f7ff ff8d 	bl	c00d8 <pinAvailable>
   c01be:	b120      	cbz	r0, c01ca <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c01c0:	4620      	mov	r0, r4
}
   c01c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c01c6:	f7fc bb75 	b.w	bc8b4 <HAL_GPIO_Read>
}
   c01ca:	2000      	movs	r0, #0
   c01cc:	bd10      	pop	{r4, pc}

000c01ce <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c01ce:	280d      	cmp	r0, #13
{
   c01d0:	b510      	push	{r4, lr}
   c01d2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c01d4:	bf9c      	itt	ls
   c01d6:	340e      	addls	r4, #14
   c01d8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c01da:	4620      	mov	r0, r4
   c01dc:	f7ff ff7c 	bl	c00d8 <pinAvailable>
   c01e0:	b150      	cbz	r0, c01f8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c01e2:	2103      	movs	r1, #3
   c01e4:	4620      	mov	r0, r4
   c01e6:	f7fc fb45 	bl	bc874 <HAL_Validate_Pin_Function>
   c01ea:	2803      	cmp	r0, #3
   c01ec:	d104      	bne.n	c01f8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c01ee:	4620      	mov	r0, r4
}
   c01f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c01f4:	f7fc bb76 	b.w	bc8e4 <hal_adc_read>
}
   c01f8:	2000      	movs	r0, #0
   c01fa:	bd10      	pop	{r4, pc}

000c01fc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c01fc:	4770      	bx	lr

000c01fe <__tcf_1>:
   c01fe:	4770      	bx	lr

000c0200 <_Z17acquireWireBufferv>:
{
   c0200:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0202:	4b0a      	ldr	r3, [pc, #40]	; (c022c <_Z17acquireWireBufferv+0x2c>)
   c0204:	6003      	str	r3, [r0, #0]
   c0206:	2301      	movs	r3, #1
{
   c0208:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c020a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c020c:	4908      	ldr	r1, [pc, #32]	; (c0230 <_Z17acquireWireBufferv+0x30>)
   c020e:	2020      	movs	r0, #32
   c0210:	f000 f8b4 	bl	c037c <_ZnajRKSt9nothrow_t>
	};
   c0214:	2520      	movs	r5, #32
   c0216:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0218:	4905      	ldr	r1, [pc, #20]	; (c0230 <_Z17acquireWireBufferv+0x30>)
	};
   c021a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c021c:	4628      	mov	r0, r5
   c021e:	f000 f8ad 	bl	c037c <_ZnajRKSt9nothrow_t>
	};
   c0222:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c0226:	4620      	mov	r0, r4
   c0228:	bd38      	pop	{r3, r4, r5, pc}
   c022a:	bf00      	nop
   c022c:	00010018 	.word	0x00010018
   c0230:	000c5004 	.word	0x000c5004

000c0234 <_Z18acquireWire1Bufferv>:
{
   c0234:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0236:	4b0a      	ldr	r3, [pc, #40]	; (c0260 <_Z18acquireWire1Bufferv+0x2c>)
   c0238:	6003      	str	r3, [r0, #0]
   c023a:	2301      	movs	r3, #1
{
   c023c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c023e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0240:	4908      	ldr	r1, [pc, #32]	; (c0264 <_Z18acquireWire1Bufferv+0x30>)
   c0242:	2020      	movs	r0, #32
   c0244:	f000 f89a 	bl	c037c <_ZnajRKSt9nothrow_t>
	};
   c0248:	2520      	movs	r5, #32
   c024a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c024c:	4905      	ldr	r1, [pc, #20]	; (c0264 <_Z18acquireWire1Bufferv+0x30>)
	};
   c024e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0250:	4628      	mov	r0, r5
   c0252:	f000 f893 	bl	c037c <_ZnajRKSt9nothrow_t>
	};
   c0256:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c025a:	4620      	mov	r0, r4
   c025c:	bd38      	pop	{r3, r4, r5, pc}
   c025e:	bf00      	nop
   c0260:	00010018 	.word	0x00010018
   c0264:	000c5004 	.word	0x000c5004

000c0268 <_Z19__fetch_global_Wirev>:
{
   c0268:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c026a:	4d0e      	ldr	r5, [pc, #56]	; (c02a4 <_Z19__fetch_global_Wirev+0x3c>)
   c026c:	7829      	ldrb	r1, [r5, #0]
   c026e:	f3bf 8f5b 	dmb	ish
   c0272:	f011 0401 	ands.w	r4, r1, #1
{
   c0276:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0278:	d111      	bne.n	c029e <_Z19__fetch_global_Wirev+0x36>
   c027a:	4628      	mov	r0, r5
   c027c:	f7f3 ff1e 	bl	b40bc <__cxa_guard_acquire>
   c0280:	b168      	cbz	r0, c029e <_Z19__fetch_global_Wirev+0x36>
   c0282:	4668      	mov	r0, sp
   c0284:	f7ff ffbc 	bl	c0200 <_Z17acquireWireBufferv>
   c0288:	466a      	mov	r2, sp
   c028a:	4621      	mov	r1, r4
   c028c:	4806      	ldr	r0, [pc, #24]	; (c02a8 <_Z19__fetch_global_Wirev+0x40>)
   c028e:	f7fd fbd1 	bl	bda34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0292:	4628      	mov	r0, r5
   c0294:	f7f3 ff17 	bl	b40c6 <__cxa_guard_release>
   c0298:	4804      	ldr	r0, [pc, #16]	; (c02ac <_Z19__fetch_global_Wirev+0x44>)
   c029a:	f000 fdcd 	bl	c0e38 <atexit>
	return wire;
}
   c029e:	4802      	ldr	r0, [pc, #8]	; (c02a8 <_Z19__fetch_global_Wirev+0x40>)
   c02a0:	b007      	add	sp, #28
   c02a2:	bd30      	pop	{r4, r5, pc}
   c02a4:	2003e714 	.word	0x2003e714
   c02a8:	2003e71c 	.word	0x2003e71c
   c02ac:	000c01fd 	.word	0x000c01fd

000c02b0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c02b0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c02b2:	4c0e      	ldr	r4, [pc, #56]	; (c02ec <_Z20__fetch_global_Wire1v+0x3c>)
   c02b4:	7823      	ldrb	r3, [r4, #0]
   c02b6:	f3bf 8f5b 	dmb	ish
   c02ba:	07db      	lsls	r3, r3, #31
{
   c02bc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c02be:	d411      	bmi.n	c02e4 <_Z20__fetch_global_Wire1v+0x34>
   c02c0:	4620      	mov	r0, r4
   c02c2:	f7f3 fefb 	bl	b40bc <__cxa_guard_acquire>
   c02c6:	b168      	cbz	r0, c02e4 <_Z20__fetch_global_Wire1v+0x34>
   c02c8:	4668      	mov	r0, sp
   c02ca:	f7ff ffb3 	bl	c0234 <_Z18acquireWire1Bufferv>
   c02ce:	466a      	mov	r2, sp
   c02d0:	2101      	movs	r1, #1
   c02d2:	4807      	ldr	r0, [pc, #28]	; (c02f0 <_Z20__fetch_global_Wire1v+0x40>)
   c02d4:	f7fd fbae 	bl	bda34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c02d8:	4620      	mov	r0, r4
   c02da:	f7f3 fef4 	bl	b40c6 <__cxa_guard_release>
   c02de:	4805      	ldr	r0, [pc, #20]	; (c02f4 <_Z20__fetch_global_Wire1v+0x44>)
   c02e0:	f000 fdaa 	bl	c0e38 <atexit>
	return wire;
}
   c02e4:	4802      	ldr	r0, [pc, #8]	; (c02f0 <_Z20__fetch_global_Wire1v+0x40>)
   c02e6:	b006      	add	sp, #24
   c02e8:	bd10      	pop	{r4, pc}
   c02ea:	bf00      	nop
   c02ec:	2003e718 	.word	0x2003e718
   c02f0:	2003e730 	.word	0x2003e730
   c02f4:	000c01ff 	.word	0x000c01ff

000c02f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c02f8:	4770      	bx	lr
	...

000c02fc <_Z20acquireSerial1Bufferv>:
{
   c02fc:	b538      	push	{r3, r4, r5, lr}
   c02fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c0300:	2514      	movs	r5, #20
   c0302:	462a      	mov	r2, r5
   c0304:	2100      	movs	r1, #0
   c0306:	f000 fdeb 	bl	c0ee0 <memset>
   c030a:	8025      	strh	r5, [r4, #0]
   c030c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c030e:	4907      	ldr	r1, [pc, #28]	; (c032c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c0310:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0312:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c0314:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0316:	f000 f831 	bl	c037c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c031a:	4904      	ldr	r1, [pc, #16]	; (c032c <_Z20acquireSerial1Bufferv+0x30>)
    };
   c031c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c031e:	4628      	mov	r0, r5
   c0320:	f000 f82c 	bl	c037c <_ZnajRKSt9nothrow_t>
    };
   c0324:	60e0      	str	r0, [r4, #12]
}
   c0326:	4620      	mov	r0, r4
   c0328:	bd38      	pop	{r3, r4, r5, pc}
   c032a:	bf00      	nop
   c032c:	000c5004 	.word	0x000c5004

000c0330 <_Z22__fetch_global_Serial1v>:
{
   c0330:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0332:	4d0e      	ldr	r5, [pc, #56]	; (c036c <_Z22__fetch_global_Serial1v+0x3c>)
   c0334:	7829      	ldrb	r1, [r5, #0]
   c0336:	f3bf 8f5b 	dmb	ish
   c033a:	f011 0401 	ands.w	r4, r1, #1
{
   c033e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0340:	d111      	bne.n	c0366 <_Z22__fetch_global_Serial1v+0x36>
   c0342:	4628      	mov	r0, r5
   c0344:	f7f3 feba 	bl	b40bc <__cxa_guard_acquire>
   c0348:	b168      	cbz	r0, c0366 <_Z22__fetch_global_Serial1v+0x36>
   c034a:	a801      	add	r0, sp, #4
   c034c:	f7ff ffd6 	bl	c02fc <_Z20acquireSerial1Bufferv>
   c0350:	aa01      	add	r2, sp, #4
   c0352:	4621      	mov	r1, r4
   c0354:	4806      	ldr	r0, [pc, #24]	; (c0370 <_Z22__fetch_global_Serial1v+0x40>)
   c0356:	f7ff fd63 	bl	bfe20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c035a:	4628      	mov	r0, r5
   c035c:	f7f3 feb3 	bl	b40c6 <__cxa_guard_release>
   c0360:	4804      	ldr	r0, [pc, #16]	; (c0374 <_Z22__fetch_global_Serial1v+0x44>)
   c0362:	f000 fd69 	bl	c0e38 <atexit>
    return serial1;
}
   c0366:	4802      	ldr	r0, [pc, #8]	; (c0370 <_Z22__fetch_global_Serial1v+0x40>)
   c0368:	b007      	add	sp, #28
   c036a:	bd30      	pop	{r4, r5, pc}
   c036c:	2003e744 	.word	0x2003e744
   c0370:	2003e748 	.word	0x2003e748
   c0374:	000c02f9 	.word	0x000c02f9

000c0378 <_ZnwjRKSt9nothrow_t>:
   c0378:	f7f3 be8d 	b.w	b4096 <_Znwj>

000c037c <_ZnajRKSt9nothrow_t>:
   c037c:	f7f3 be8d 	b.w	b409a <_Znaj>

000c0380 <_ZSt17__throw_bad_allocv>:
   c0380:	b508      	push	{r3, lr}
   c0382:	f7fc fe13 	bl	bcfac <abort>

000c0386 <_ZSt20__throw_length_errorPKc>:
   c0386:	b508      	push	{r3, lr}
   c0388:	f7fc fe10 	bl	bcfac <abort>

000c038c <_ZSt25__throw_bad_function_callv>:
   c038c:	b508      	push	{r3, lr}
   c038e:	f7fc fe0d 	bl	bcfac <abort>
   c0392:	0000      	movs	r0, r0
   c0394:	0000      	movs	r0, r0
	...

000c0398 <nan>:
   c0398:	ed9f 0b01 	vldr	d0, [pc, #4]	; c03a0 <nan+0x8>
   c039c:	4770      	bx	lr
   c039e:	bf00      	nop
   c03a0:	00000000 	.word	0x00000000
   c03a4:	7ff80000 	.word	0x7ff80000

000c03a8 <__aeabi_drsub>:
   c03a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c03ac:	e002      	b.n	c03b4 <__adddf3>
   c03ae:	bf00      	nop

000c03b0 <__aeabi_dsub>:
   c03b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c03b4 <__adddf3>:
   c03b4:	b530      	push	{r4, r5, lr}
   c03b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c03ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c03be:	ea94 0f05 	teq	r4, r5
   c03c2:	bf08      	it	eq
   c03c4:	ea90 0f02 	teqeq	r0, r2
   c03c8:	bf1f      	itttt	ne
   c03ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   c03ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   c03d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c03d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c03da:	f000 80e2 	beq.w	c05a2 <__adddf3+0x1ee>
   c03de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c03e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c03e6:	bfb8      	it	lt
   c03e8:	426d      	neglt	r5, r5
   c03ea:	dd0c      	ble.n	c0406 <__adddf3+0x52>
   c03ec:	442c      	add	r4, r5
   c03ee:	ea80 0202 	eor.w	r2, r0, r2
   c03f2:	ea81 0303 	eor.w	r3, r1, r3
   c03f6:	ea82 0000 	eor.w	r0, r2, r0
   c03fa:	ea83 0101 	eor.w	r1, r3, r1
   c03fe:	ea80 0202 	eor.w	r2, r0, r2
   c0402:	ea81 0303 	eor.w	r3, r1, r3
   c0406:	2d36      	cmp	r5, #54	; 0x36
   c0408:	bf88      	it	hi
   c040a:	bd30      	pophi	{r4, r5, pc}
   c040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0410:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c041c:	d002      	beq.n	c0424 <__adddf3+0x70>
   c041e:	4240      	negs	r0, r0
   c0420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c0428:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c0430:	d002      	beq.n	c0438 <__adddf3+0x84>
   c0432:	4252      	negs	r2, r2
   c0434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c0438:	ea94 0f05 	teq	r4, r5
   c043c:	f000 80a7 	beq.w	c058e <__adddf3+0x1da>
   c0440:	f1a4 0401 	sub.w	r4, r4, #1
   c0444:	f1d5 0e20 	rsbs	lr, r5, #32
   c0448:	db0d      	blt.n	c0466 <__adddf3+0xb2>
   c044a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c044e:	fa22 f205 	lsr.w	r2, r2, r5
   c0452:	1880      	adds	r0, r0, r2
   c0454:	f141 0100 	adc.w	r1, r1, #0
   c0458:	fa03 f20e 	lsl.w	r2, r3, lr
   c045c:	1880      	adds	r0, r0, r2
   c045e:	fa43 f305 	asr.w	r3, r3, r5
   c0462:	4159      	adcs	r1, r3
   c0464:	e00e      	b.n	c0484 <__adddf3+0xd0>
   c0466:	f1a5 0520 	sub.w	r5, r5, #32
   c046a:	f10e 0e20 	add.w	lr, lr, #32
   c046e:	2a01      	cmp	r2, #1
   c0470:	fa03 fc0e 	lsl.w	ip, r3, lr
   c0474:	bf28      	it	cs
   c0476:	f04c 0c02 	orrcs.w	ip, ip, #2
   c047a:	fa43 f305 	asr.w	r3, r3, r5
   c047e:	18c0      	adds	r0, r0, r3
   c0480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c0484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0488:	d507      	bpl.n	c049a <__adddf3+0xe6>
   c048a:	f04f 0e00 	mov.w	lr, #0
   c048e:	f1dc 0c00 	rsbs	ip, ip, #0
   c0492:	eb7e 0000 	sbcs.w	r0, lr, r0
   c0496:	eb6e 0101 	sbc.w	r1, lr, r1
   c049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c049e:	d31b      	bcc.n	c04d8 <__adddf3+0x124>
   c04a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c04a4:	d30c      	bcc.n	c04c0 <__adddf3+0x10c>
   c04a6:	0849      	lsrs	r1, r1, #1
   c04a8:	ea5f 0030 	movs.w	r0, r0, rrx
   c04ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c04b0:	f104 0401 	add.w	r4, r4, #1
   c04b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c04b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c04bc:	f080 809a 	bcs.w	c05f4 <__adddf3+0x240>
   c04c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c04c4:	bf08      	it	eq
   c04c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c04ca:	f150 0000 	adcs.w	r0, r0, #0
   c04ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c04d2:	ea41 0105 	orr.w	r1, r1, r5
   c04d6:	bd30      	pop	{r4, r5, pc}
   c04d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c04dc:	4140      	adcs	r0, r0
   c04de:	eb41 0101 	adc.w	r1, r1, r1
   c04e2:	3c01      	subs	r4, #1
   c04e4:	bf28      	it	cs
   c04e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c04ea:	d2e9      	bcs.n	c04c0 <__adddf3+0x10c>
   c04ec:	f091 0f00 	teq	r1, #0
   c04f0:	bf04      	itt	eq
   c04f2:	4601      	moveq	r1, r0
   c04f4:	2000      	moveq	r0, #0
   c04f6:	fab1 f381 	clz	r3, r1
   c04fa:	bf08      	it	eq
   c04fc:	3320      	addeq	r3, #32
   c04fe:	f1a3 030b 	sub.w	r3, r3, #11
   c0502:	f1b3 0220 	subs.w	r2, r3, #32
   c0506:	da0c      	bge.n	c0522 <__adddf3+0x16e>
   c0508:	320c      	adds	r2, #12
   c050a:	dd08      	ble.n	c051e <__adddf3+0x16a>
   c050c:	f102 0c14 	add.w	ip, r2, #20
   c0510:	f1c2 020c 	rsb	r2, r2, #12
   c0514:	fa01 f00c 	lsl.w	r0, r1, ip
   c0518:	fa21 f102 	lsr.w	r1, r1, r2
   c051c:	e00c      	b.n	c0538 <__adddf3+0x184>
   c051e:	f102 0214 	add.w	r2, r2, #20
   c0522:	bfd8      	it	le
   c0524:	f1c2 0c20 	rsble	ip, r2, #32
   c0528:	fa01 f102 	lsl.w	r1, r1, r2
   c052c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c0530:	bfdc      	itt	le
   c0532:	ea41 010c 	orrle.w	r1, r1, ip
   c0536:	4090      	lslle	r0, r2
   c0538:	1ae4      	subs	r4, r4, r3
   c053a:	bfa2      	ittt	ge
   c053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c0540:	4329      	orrge	r1, r5
   c0542:	bd30      	popge	{r4, r5, pc}
   c0544:	ea6f 0404 	mvn.w	r4, r4
   c0548:	3c1f      	subs	r4, #31
   c054a:	da1c      	bge.n	c0586 <__adddf3+0x1d2>
   c054c:	340c      	adds	r4, #12
   c054e:	dc0e      	bgt.n	c056e <__adddf3+0x1ba>
   c0550:	f104 0414 	add.w	r4, r4, #20
   c0554:	f1c4 0220 	rsb	r2, r4, #32
   c0558:	fa20 f004 	lsr.w	r0, r0, r4
   c055c:	fa01 f302 	lsl.w	r3, r1, r2
   c0560:	ea40 0003 	orr.w	r0, r0, r3
   c0564:	fa21 f304 	lsr.w	r3, r1, r4
   c0568:	ea45 0103 	orr.w	r1, r5, r3
   c056c:	bd30      	pop	{r4, r5, pc}
   c056e:	f1c4 040c 	rsb	r4, r4, #12
   c0572:	f1c4 0220 	rsb	r2, r4, #32
   c0576:	fa20 f002 	lsr.w	r0, r0, r2
   c057a:	fa01 f304 	lsl.w	r3, r1, r4
   c057e:	ea40 0003 	orr.w	r0, r0, r3
   c0582:	4629      	mov	r1, r5
   c0584:	bd30      	pop	{r4, r5, pc}
   c0586:	fa21 f004 	lsr.w	r0, r1, r4
   c058a:	4629      	mov	r1, r5
   c058c:	bd30      	pop	{r4, r5, pc}
   c058e:	f094 0f00 	teq	r4, #0
   c0592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c0596:	bf06      	itte	eq
   c0598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c059c:	3401      	addeq	r4, #1
   c059e:	3d01      	subne	r5, #1
   c05a0:	e74e      	b.n	c0440 <__adddf3+0x8c>
   c05a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c05a6:	bf18      	it	ne
   c05a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c05ac:	d029      	beq.n	c0602 <__adddf3+0x24e>
   c05ae:	ea94 0f05 	teq	r4, r5
   c05b2:	bf08      	it	eq
   c05b4:	ea90 0f02 	teqeq	r0, r2
   c05b8:	d005      	beq.n	c05c6 <__adddf3+0x212>
   c05ba:	ea54 0c00 	orrs.w	ip, r4, r0
   c05be:	bf04      	itt	eq
   c05c0:	4619      	moveq	r1, r3
   c05c2:	4610      	moveq	r0, r2
   c05c4:	bd30      	pop	{r4, r5, pc}
   c05c6:	ea91 0f03 	teq	r1, r3
   c05ca:	bf1e      	ittt	ne
   c05cc:	2100      	movne	r1, #0
   c05ce:	2000      	movne	r0, #0
   c05d0:	bd30      	popne	{r4, r5, pc}
   c05d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c05d6:	d105      	bne.n	c05e4 <__adddf3+0x230>
   c05d8:	0040      	lsls	r0, r0, #1
   c05da:	4149      	adcs	r1, r1
   c05dc:	bf28      	it	cs
   c05de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c05e2:	bd30      	pop	{r4, r5, pc}
   c05e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c05e8:	bf3c      	itt	cc
   c05ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c05ee:	bd30      	popcc	{r4, r5, pc}
   c05f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c05f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c05f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c05fc:	f04f 0000 	mov.w	r0, #0
   c0600:	bd30      	pop	{r4, r5, pc}
   c0602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0606:	bf1a      	itte	ne
   c0608:	4619      	movne	r1, r3
   c060a:	4610      	movne	r0, r2
   c060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0610:	bf1c      	itt	ne
   c0612:	460b      	movne	r3, r1
   c0614:	4602      	movne	r2, r0
   c0616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c061a:	bf06      	itte	eq
   c061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0620:	ea91 0f03 	teqeq	r1, r3
   c0624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c0628:	bd30      	pop	{r4, r5, pc}
   c062a:	bf00      	nop

000c062c <__aeabi_ui2d>:
   c062c:	f090 0f00 	teq	r0, #0
   c0630:	bf04      	itt	eq
   c0632:	2100      	moveq	r1, #0
   c0634:	4770      	bxeq	lr
   c0636:	b530      	push	{r4, r5, lr}
   c0638:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0640:	f04f 0500 	mov.w	r5, #0
   c0644:	f04f 0100 	mov.w	r1, #0
   c0648:	e750      	b.n	c04ec <__adddf3+0x138>
   c064a:	bf00      	nop

000c064c <__aeabi_i2d>:
   c064c:	f090 0f00 	teq	r0, #0
   c0650:	bf04      	itt	eq
   c0652:	2100      	moveq	r1, #0
   c0654:	4770      	bxeq	lr
   c0656:	b530      	push	{r4, r5, lr}
   c0658:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c0664:	bf48      	it	mi
   c0666:	4240      	negmi	r0, r0
   c0668:	f04f 0100 	mov.w	r1, #0
   c066c:	e73e      	b.n	c04ec <__adddf3+0x138>
   c066e:	bf00      	nop

000c0670 <__aeabi_f2d>:
   c0670:	0042      	lsls	r2, r0, #1
   c0672:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c0676:	ea4f 0131 	mov.w	r1, r1, rrx
   c067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c067e:	bf1f      	itttt	ne
   c0680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c0684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c0688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c068c:	4770      	bxne	lr
   c068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c0692:	bf08      	it	eq
   c0694:	4770      	bxeq	lr
   c0696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c069a:	bf04      	itt	eq
   c069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c06a0:	4770      	bxeq	lr
   c06a2:	b530      	push	{r4, r5, lr}
   c06a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c06a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c06ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c06b0:	e71c      	b.n	c04ec <__adddf3+0x138>
   c06b2:	bf00      	nop

000c06b4 <__aeabi_ul2d>:
   c06b4:	ea50 0201 	orrs.w	r2, r0, r1
   c06b8:	bf08      	it	eq
   c06ba:	4770      	bxeq	lr
   c06bc:	b530      	push	{r4, r5, lr}
   c06be:	f04f 0500 	mov.w	r5, #0
   c06c2:	e00a      	b.n	c06da <__aeabi_l2d+0x16>

000c06c4 <__aeabi_l2d>:
   c06c4:	ea50 0201 	orrs.w	r2, r0, r1
   c06c8:	bf08      	it	eq
   c06ca:	4770      	bxeq	lr
   c06cc:	b530      	push	{r4, r5, lr}
   c06ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c06d2:	d502      	bpl.n	c06da <__aeabi_l2d+0x16>
   c06d4:	4240      	negs	r0, r0
   c06d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c06da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c06de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c06e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c06e6:	f43f aed8 	beq.w	c049a <__adddf3+0xe6>
   c06ea:	f04f 0203 	mov.w	r2, #3
   c06ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c06f2:	bf18      	it	ne
   c06f4:	3203      	addne	r2, #3
   c06f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c06fa:	bf18      	it	ne
   c06fc:	3203      	addne	r2, #3
   c06fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0702:	f1c2 0320 	rsb	r3, r2, #32
   c0706:	fa00 fc03 	lsl.w	ip, r0, r3
   c070a:	fa20 f002 	lsr.w	r0, r0, r2
   c070e:	fa01 fe03 	lsl.w	lr, r1, r3
   c0712:	ea40 000e 	orr.w	r0, r0, lr
   c0716:	fa21 f102 	lsr.w	r1, r1, r2
   c071a:	4414      	add	r4, r2
   c071c:	e6bd      	b.n	c049a <__adddf3+0xe6>
   c071e:	bf00      	nop

000c0720 <__aeabi_dmul>:
   c0720:	b570      	push	{r4, r5, r6, lr}
   c0722:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c072e:	bf1d      	ittte	ne
   c0730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0734:	ea94 0f0c 	teqne	r4, ip
   c0738:	ea95 0f0c 	teqne	r5, ip
   c073c:	f000 f8de 	bleq	c08fc <__aeabi_dmul+0x1dc>
   c0740:	442c      	add	r4, r5
   c0742:	ea81 0603 	eor.w	r6, r1, r3
   c0746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0752:	bf18      	it	ne
   c0754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0760:	d038      	beq.n	c07d4 <__aeabi_dmul+0xb4>
   c0762:	fba0 ce02 	umull	ip, lr, r0, r2
   c0766:	f04f 0500 	mov.w	r5, #0
   c076a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c0772:	fbe0 e503 	umlal	lr, r5, r0, r3
   c0776:	f04f 0600 	mov.w	r6, #0
   c077a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c077e:	f09c 0f00 	teq	ip, #0
   c0782:	bf18      	it	ne
   c0784:	f04e 0e01 	orrne.w	lr, lr, #1
   c0788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c0790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c0794:	d204      	bcs.n	c07a0 <__aeabi_dmul+0x80>
   c0796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c079a:	416d      	adcs	r5, r5
   c079c:	eb46 0606 	adc.w	r6, r6, r6
   c07a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c07a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c07a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c07ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c07b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c07b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c07b8:	bf88      	it	hi
   c07ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c07be:	d81e      	bhi.n	c07fe <__aeabi_dmul+0xde>
   c07c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c07c4:	bf08      	it	eq
   c07c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c07ca:	f150 0000 	adcs.w	r0, r0, #0
   c07ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c07d2:	bd70      	pop	{r4, r5, r6, pc}
   c07d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c07d8:	ea46 0101 	orr.w	r1, r6, r1
   c07dc:	ea40 0002 	orr.w	r0, r0, r2
   c07e0:	ea81 0103 	eor.w	r1, r1, r3
   c07e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c07e8:	bfc2      	ittt	gt
   c07ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   c07ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c07f2:	bd70      	popgt	{r4, r5, r6, pc}
   c07f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c07f8:	f04f 0e00 	mov.w	lr, #0
   c07fc:	3c01      	subs	r4, #1
   c07fe:	f300 80ab 	bgt.w	c0958 <__aeabi_dmul+0x238>
   c0802:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0806:	bfde      	ittt	le
   c0808:	2000      	movle	r0, #0
   c080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c080e:	bd70      	pople	{r4, r5, r6, pc}
   c0810:	f1c4 0400 	rsb	r4, r4, #0
   c0814:	3c20      	subs	r4, #32
   c0816:	da35      	bge.n	c0884 <__aeabi_dmul+0x164>
   c0818:	340c      	adds	r4, #12
   c081a:	dc1b      	bgt.n	c0854 <__aeabi_dmul+0x134>
   c081c:	f104 0414 	add.w	r4, r4, #20
   c0820:	f1c4 0520 	rsb	r5, r4, #32
   c0824:	fa00 f305 	lsl.w	r3, r0, r5
   c0828:	fa20 f004 	lsr.w	r0, r0, r4
   c082c:	fa01 f205 	lsl.w	r2, r1, r5
   c0830:	ea40 0002 	orr.w	r0, r0, r2
   c0834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0840:	fa21 f604 	lsr.w	r6, r1, r4
   c0844:	eb42 0106 	adc.w	r1, r2, r6
   c0848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c084c:	bf08      	it	eq
   c084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0852:	bd70      	pop	{r4, r5, r6, pc}
   c0854:	f1c4 040c 	rsb	r4, r4, #12
   c0858:	f1c4 0520 	rsb	r5, r4, #32
   c085c:	fa00 f304 	lsl.w	r3, r0, r4
   c0860:	fa20 f005 	lsr.w	r0, r0, r5
   c0864:	fa01 f204 	lsl.w	r2, r1, r4
   c0868:	ea40 0002 	orr.w	r0, r0, r2
   c086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0874:	f141 0100 	adc.w	r1, r1, #0
   c0878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c087c:	bf08      	it	eq
   c087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0882:	bd70      	pop	{r4, r5, r6, pc}
   c0884:	f1c4 0520 	rsb	r5, r4, #32
   c0888:	fa00 f205 	lsl.w	r2, r0, r5
   c088c:	ea4e 0e02 	orr.w	lr, lr, r2
   c0890:	fa20 f304 	lsr.w	r3, r0, r4
   c0894:	fa01 f205 	lsl.w	r2, r1, r5
   c0898:	ea43 0302 	orr.w	r3, r3, r2
   c089c:	fa21 f004 	lsr.w	r0, r1, r4
   c08a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c08a4:	fa21 f204 	lsr.w	r2, r1, r4
   c08a8:	ea20 0002 	bic.w	r0, r0, r2
   c08ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c08b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c08b4:	bf08      	it	eq
   c08b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c08ba:	bd70      	pop	{r4, r5, r6, pc}
   c08bc:	f094 0f00 	teq	r4, #0
   c08c0:	d10f      	bne.n	c08e2 <__aeabi_dmul+0x1c2>
   c08c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c08c6:	0040      	lsls	r0, r0, #1
   c08c8:	eb41 0101 	adc.w	r1, r1, r1
   c08cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c08d0:	bf08      	it	eq
   c08d2:	3c01      	subeq	r4, #1
   c08d4:	d0f7      	beq.n	c08c6 <__aeabi_dmul+0x1a6>
   c08d6:	ea41 0106 	orr.w	r1, r1, r6
   c08da:	f095 0f00 	teq	r5, #0
   c08de:	bf18      	it	ne
   c08e0:	4770      	bxne	lr
   c08e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c08e6:	0052      	lsls	r2, r2, #1
   c08e8:	eb43 0303 	adc.w	r3, r3, r3
   c08ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c08f0:	bf08      	it	eq
   c08f2:	3d01      	subeq	r5, #1
   c08f4:	d0f7      	beq.n	c08e6 <__aeabi_dmul+0x1c6>
   c08f6:	ea43 0306 	orr.w	r3, r3, r6
   c08fa:	4770      	bx	lr
   c08fc:	ea94 0f0c 	teq	r4, ip
   c0900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0904:	bf18      	it	ne
   c0906:	ea95 0f0c 	teqne	r5, ip
   c090a:	d00c      	beq.n	c0926 <__aeabi_dmul+0x206>
   c090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0910:	bf18      	it	ne
   c0912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0916:	d1d1      	bne.n	c08bc <__aeabi_dmul+0x19c>
   c0918:	ea81 0103 	eor.w	r1, r1, r3
   c091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0920:	f04f 0000 	mov.w	r0, #0
   c0924:	bd70      	pop	{r4, r5, r6, pc}
   c0926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c092a:	bf06      	itte	eq
   c092c:	4610      	moveq	r0, r2
   c092e:	4619      	moveq	r1, r3
   c0930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0934:	d019      	beq.n	c096a <__aeabi_dmul+0x24a>
   c0936:	ea94 0f0c 	teq	r4, ip
   c093a:	d102      	bne.n	c0942 <__aeabi_dmul+0x222>
   c093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0940:	d113      	bne.n	c096a <__aeabi_dmul+0x24a>
   c0942:	ea95 0f0c 	teq	r5, ip
   c0946:	d105      	bne.n	c0954 <__aeabi_dmul+0x234>
   c0948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c094c:	bf1c      	itt	ne
   c094e:	4610      	movne	r0, r2
   c0950:	4619      	movne	r1, r3
   c0952:	d10a      	bne.n	c096a <__aeabi_dmul+0x24a>
   c0954:	ea81 0103 	eor.w	r1, r1, r3
   c0958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0964:	f04f 0000 	mov.w	r0, #0
   c0968:	bd70      	pop	{r4, r5, r6, pc}
   c096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0972:	bd70      	pop	{r4, r5, r6, pc}

000c0974 <__aeabi_ddiv>:
   c0974:	b570      	push	{r4, r5, r6, lr}
   c0976:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0982:	bf1d      	ittte	ne
   c0984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0988:	ea94 0f0c 	teqne	r4, ip
   c098c:	ea95 0f0c 	teqne	r5, ip
   c0990:	f000 f8a7 	bleq	c0ae2 <__aeabi_ddiv+0x16e>
   c0994:	eba4 0405 	sub.w	r4, r4, r5
   c0998:	ea81 0e03 	eor.w	lr, r1, r3
   c099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c09a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c09a4:	f000 8088 	beq.w	c0ab8 <__aeabi_ddiv+0x144>
   c09a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c09ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c09b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c09b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c09b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c09bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c09c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c09c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c09c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c09cc:	429d      	cmp	r5, r3
   c09ce:	bf08      	it	eq
   c09d0:	4296      	cmpeq	r6, r2
   c09d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c09d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c09da:	d202      	bcs.n	c09e2 <__aeabi_ddiv+0x6e>
   c09dc:	085b      	lsrs	r3, r3, #1
   c09de:	ea4f 0232 	mov.w	r2, r2, rrx
   c09e2:	1ab6      	subs	r6, r6, r2
   c09e4:	eb65 0503 	sbc.w	r5, r5, r3
   c09e8:	085b      	lsrs	r3, r3, #1
   c09ea:	ea4f 0232 	mov.w	r2, r2, rrx
   c09ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c09f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c09f6:	ebb6 0e02 	subs.w	lr, r6, r2
   c09fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   c09fe:	bf22      	ittt	cs
   c0a00:	1ab6      	subcs	r6, r6, r2
   c0a02:	4675      	movcs	r5, lr
   c0a04:	ea40 000c 	orrcs.w	r0, r0, ip
   c0a08:	085b      	lsrs	r3, r3, #1
   c0a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0a16:	bf22      	ittt	cs
   c0a18:	1ab6      	subcs	r6, r6, r2
   c0a1a:	4675      	movcs	r5, lr
   c0a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0a20:	085b      	lsrs	r3, r3, #1
   c0a22:	ea4f 0232 	mov.w	r2, r2, rrx
   c0a26:	ebb6 0e02 	subs.w	lr, r6, r2
   c0a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0a2e:	bf22      	ittt	cs
   c0a30:	1ab6      	subcs	r6, r6, r2
   c0a32:	4675      	movcs	r5, lr
   c0a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0a38:	085b      	lsrs	r3, r3, #1
   c0a3a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0a3e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0a42:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0a46:	bf22      	ittt	cs
   c0a48:	1ab6      	subcs	r6, r6, r2
   c0a4a:	4675      	movcs	r5, lr
   c0a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0a50:	ea55 0e06 	orrs.w	lr, r5, r6
   c0a54:	d018      	beq.n	c0a88 <__aeabi_ddiv+0x114>
   c0a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c0a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c0a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c0a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0a72:	d1c0      	bne.n	c09f6 <__aeabi_ddiv+0x82>
   c0a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0a78:	d10b      	bne.n	c0a92 <__aeabi_ddiv+0x11e>
   c0a7a:	ea41 0100 	orr.w	r1, r1, r0
   c0a7e:	f04f 0000 	mov.w	r0, #0
   c0a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c0a86:	e7b6      	b.n	c09f6 <__aeabi_ddiv+0x82>
   c0a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0a8c:	bf04      	itt	eq
   c0a8e:	4301      	orreq	r1, r0
   c0a90:	2000      	moveq	r0, #0
   c0a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0a96:	bf88      	it	hi
   c0a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0a9c:	f63f aeaf 	bhi.w	c07fe <__aeabi_dmul+0xde>
   c0aa0:	ebb5 0c03 	subs.w	ip, r5, r3
   c0aa4:	bf04      	itt	eq
   c0aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c0aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0aae:	f150 0000 	adcs.w	r0, r0, #0
   c0ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0ab6:	bd70      	pop	{r4, r5, r6, pc}
   c0ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c0abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0ac4:	bfc2      	ittt	gt
   c0ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0ace:	bd70      	popgt	{r4, r5, r6, pc}
   c0ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0ad4:	f04f 0e00 	mov.w	lr, #0
   c0ad8:	3c01      	subs	r4, #1
   c0ada:	e690      	b.n	c07fe <__aeabi_dmul+0xde>
   c0adc:	ea45 0e06 	orr.w	lr, r5, r6
   c0ae0:	e68d      	b.n	c07fe <__aeabi_dmul+0xde>
   c0ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0ae6:	ea94 0f0c 	teq	r4, ip
   c0aea:	bf08      	it	eq
   c0aec:	ea95 0f0c 	teqeq	r5, ip
   c0af0:	f43f af3b 	beq.w	c096a <__aeabi_dmul+0x24a>
   c0af4:	ea94 0f0c 	teq	r4, ip
   c0af8:	d10a      	bne.n	c0b10 <__aeabi_ddiv+0x19c>
   c0afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0afe:	f47f af34 	bne.w	c096a <__aeabi_dmul+0x24a>
   c0b02:	ea95 0f0c 	teq	r5, ip
   c0b06:	f47f af25 	bne.w	c0954 <__aeabi_dmul+0x234>
   c0b0a:	4610      	mov	r0, r2
   c0b0c:	4619      	mov	r1, r3
   c0b0e:	e72c      	b.n	c096a <__aeabi_dmul+0x24a>
   c0b10:	ea95 0f0c 	teq	r5, ip
   c0b14:	d106      	bne.n	c0b24 <__aeabi_ddiv+0x1b0>
   c0b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0b1a:	f43f aefd 	beq.w	c0918 <__aeabi_dmul+0x1f8>
   c0b1e:	4610      	mov	r0, r2
   c0b20:	4619      	mov	r1, r3
   c0b22:	e722      	b.n	c096a <__aeabi_dmul+0x24a>
   c0b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0b28:	bf18      	it	ne
   c0b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0b2e:	f47f aec5 	bne.w	c08bc <__aeabi_dmul+0x19c>
   c0b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0b36:	f47f af0d 	bne.w	c0954 <__aeabi_dmul+0x234>
   c0b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c0b3e:	f47f aeeb 	bne.w	c0918 <__aeabi_dmul+0x1f8>
   c0b42:	e712      	b.n	c096a <__aeabi_dmul+0x24a>

000c0b44 <__gedf2>:
   c0b44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0b48:	e006      	b.n	c0b58 <__cmpdf2+0x4>
   c0b4a:	bf00      	nop

000c0b4c <__ledf2>:
   c0b4c:	f04f 0c01 	mov.w	ip, #1
   c0b50:	e002      	b.n	c0b58 <__cmpdf2+0x4>
   c0b52:	bf00      	nop

000c0b54 <__cmpdf2>:
   c0b54:	f04f 0c01 	mov.w	ip, #1
   c0b58:	f84d cd04 	str.w	ip, [sp, #-4]!
   c0b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0b68:	bf18      	it	ne
   c0b6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c0b6e:	d01b      	beq.n	c0ba8 <__cmpdf2+0x54>
   c0b70:	b001      	add	sp, #4
   c0b72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c0b76:	bf0c      	ite	eq
   c0b78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c0b7c:	ea91 0f03 	teqne	r1, r3
   c0b80:	bf02      	ittt	eq
   c0b82:	ea90 0f02 	teqeq	r0, r2
   c0b86:	2000      	moveq	r0, #0
   c0b88:	4770      	bxeq	lr
   c0b8a:	f110 0f00 	cmn.w	r0, #0
   c0b8e:	ea91 0f03 	teq	r1, r3
   c0b92:	bf58      	it	pl
   c0b94:	4299      	cmppl	r1, r3
   c0b96:	bf08      	it	eq
   c0b98:	4290      	cmpeq	r0, r2
   c0b9a:	bf2c      	ite	cs
   c0b9c:	17d8      	asrcs	r0, r3, #31
   c0b9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0ba2:	f040 0001 	orr.w	r0, r0, #1
   c0ba6:	4770      	bx	lr
   c0ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0bb0:	d102      	bne.n	c0bb8 <__cmpdf2+0x64>
   c0bb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0bb6:	d107      	bne.n	c0bc8 <__cmpdf2+0x74>
   c0bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0bc0:	d1d6      	bne.n	c0b70 <__cmpdf2+0x1c>
   c0bc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0bc6:	d0d3      	beq.n	c0b70 <__cmpdf2+0x1c>
   c0bc8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c0bcc:	4770      	bx	lr
   c0bce:	bf00      	nop

000c0bd0 <__aeabi_cdrcmple>:
   c0bd0:	4684      	mov	ip, r0
   c0bd2:	4610      	mov	r0, r2
   c0bd4:	4662      	mov	r2, ip
   c0bd6:	468c      	mov	ip, r1
   c0bd8:	4619      	mov	r1, r3
   c0bda:	4663      	mov	r3, ip
   c0bdc:	e000      	b.n	c0be0 <__aeabi_cdcmpeq>
   c0bde:	bf00      	nop

000c0be0 <__aeabi_cdcmpeq>:
   c0be0:	b501      	push	{r0, lr}
   c0be2:	f7ff ffb7 	bl	c0b54 <__cmpdf2>
   c0be6:	2800      	cmp	r0, #0
   c0be8:	bf48      	it	mi
   c0bea:	f110 0f00 	cmnmi.w	r0, #0
   c0bee:	bd01      	pop	{r0, pc}

000c0bf0 <__aeabi_dcmpeq>:
   c0bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0bf4:	f7ff fff4 	bl	c0be0 <__aeabi_cdcmpeq>
   c0bf8:	bf0c      	ite	eq
   c0bfa:	2001      	moveq	r0, #1
   c0bfc:	2000      	movne	r0, #0
   c0bfe:	f85d fb08 	ldr.w	pc, [sp], #8
   c0c02:	bf00      	nop

000c0c04 <__aeabi_dcmplt>:
   c0c04:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0c08:	f7ff ffea 	bl	c0be0 <__aeabi_cdcmpeq>
   c0c0c:	bf34      	ite	cc
   c0c0e:	2001      	movcc	r0, #1
   c0c10:	2000      	movcs	r0, #0
   c0c12:	f85d fb08 	ldr.w	pc, [sp], #8
   c0c16:	bf00      	nop

000c0c18 <__aeabi_dcmple>:
   c0c18:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0c1c:	f7ff ffe0 	bl	c0be0 <__aeabi_cdcmpeq>
   c0c20:	bf94      	ite	ls
   c0c22:	2001      	movls	r0, #1
   c0c24:	2000      	movhi	r0, #0
   c0c26:	f85d fb08 	ldr.w	pc, [sp], #8
   c0c2a:	bf00      	nop

000c0c2c <__aeabi_dcmpge>:
   c0c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0c30:	f7ff ffce 	bl	c0bd0 <__aeabi_cdrcmple>
   c0c34:	bf94      	ite	ls
   c0c36:	2001      	movls	r0, #1
   c0c38:	2000      	movhi	r0, #0
   c0c3a:	f85d fb08 	ldr.w	pc, [sp], #8
   c0c3e:	bf00      	nop

000c0c40 <__aeabi_dcmpgt>:
   c0c40:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0c44:	f7ff ffc4 	bl	c0bd0 <__aeabi_cdrcmple>
   c0c48:	bf34      	ite	cc
   c0c4a:	2001      	movcc	r0, #1
   c0c4c:	2000      	movcs	r0, #0
   c0c4e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0c52:	bf00      	nop

000c0c54 <__aeabi_dcmpun>:
   c0c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0c5c:	d102      	bne.n	c0c64 <__aeabi_dcmpun+0x10>
   c0c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0c62:	d10a      	bne.n	c0c7a <__aeabi_dcmpun+0x26>
   c0c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0c6c:	d102      	bne.n	c0c74 <__aeabi_dcmpun+0x20>
   c0c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0c72:	d102      	bne.n	c0c7a <__aeabi_dcmpun+0x26>
   c0c74:	f04f 0000 	mov.w	r0, #0
   c0c78:	4770      	bx	lr
   c0c7a:	f04f 0001 	mov.w	r0, #1
   c0c7e:	4770      	bx	lr

000c0c80 <__aeabi_d2iz>:
   c0c80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0c84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0c88:	d215      	bcs.n	c0cb6 <__aeabi_d2iz+0x36>
   c0c8a:	d511      	bpl.n	c0cb0 <__aeabi_d2iz+0x30>
   c0c8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0c90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0c94:	d912      	bls.n	c0cbc <__aeabi_d2iz+0x3c>
   c0c96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c0c9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0ca6:	fa23 f002 	lsr.w	r0, r3, r2
   c0caa:	bf18      	it	ne
   c0cac:	4240      	negne	r0, r0
   c0cae:	4770      	bx	lr
   c0cb0:	f04f 0000 	mov.w	r0, #0
   c0cb4:	4770      	bx	lr
   c0cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0cba:	d105      	bne.n	c0cc8 <__aeabi_d2iz+0x48>
   c0cbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c0cc0:	bf08      	it	eq
   c0cc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c0cc6:	4770      	bx	lr
   c0cc8:	f04f 0000 	mov.w	r0, #0
   c0ccc:	4770      	bx	lr
   c0cce:	bf00      	nop

000c0cd0 <__aeabi_d2uiz>:
   c0cd0:	004a      	lsls	r2, r1, #1
   c0cd2:	d211      	bcs.n	c0cf8 <__aeabi_d2uiz+0x28>
   c0cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0cd8:	d211      	bcs.n	c0cfe <__aeabi_d2uiz+0x2e>
   c0cda:	d50d      	bpl.n	c0cf8 <__aeabi_d2uiz+0x28>
   c0cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c0ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c0ce4:	d40e      	bmi.n	c0d04 <__aeabi_d2uiz+0x34>
   c0ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c0cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c0cf2:	fa23 f002 	lsr.w	r0, r3, r2
   c0cf6:	4770      	bx	lr
   c0cf8:	f04f 0000 	mov.w	r0, #0
   c0cfc:	4770      	bx	lr
   c0cfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c0d02:	d102      	bne.n	c0d0a <__aeabi_d2uiz+0x3a>
   c0d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c0d08:	4770      	bx	lr
   c0d0a:	f04f 0000 	mov.w	r0, #0
   c0d0e:	4770      	bx	lr

000c0d10 <__aeabi_d2f>:
   c0d10:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0d14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c0d18:	bf24      	itt	cs
   c0d1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c0d1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c0d22:	d90d      	bls.n	c0d40 <__aeabi_d2f+0x30>
   c0d24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c0d28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c0d2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c0d30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c0d34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c0d38:	bf08      	it	eq
   c0d3a:	f020 0001 	biceq.w	r0, r0, #1
   c0d3e:	4770      	bx	lr
   c0d40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c0d44:	d121      	bne.n	c0d8a <__aeabi_d2f+0x7a>
   c0d46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c0d4a:	bfbc      	itt	lt
   c0d4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c0d50:	4770      	bxlt	lr
   c0d52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0d56:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c0d5a:	f1c2 0218 	rsb	r2, r2, #24
   c0d5e:	f1c2 0c20 	rsb	ip, r2, #32
   c0d62:	fa10 f30c 	lsls.w	r3, r0, ip
   c0d66:	fa20 f002 	lsr.w	r0, r0, r2
   c0d6a:	bf18      	it	ne
   c0d6c:	f040 0001 	orrne.w	r0, r0, #1
   c0d70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c0d74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c0d78:	fa03 fc0c 	lsl.w	ip, r3, ip
   c0d7c:	ea40 000c 	orr.w	r0, r0, ip
   c0d80:	fa23 f302 	lsr.w	r3, r3, r2
   c0d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c0d88:	e7cc      	b.n	c0d24 <__aeabi_d2f+0x14>
   c0d8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c0d8e:	d107      	bne.n	c0da0 <__aeabi_d2f+0x90>
   c0d90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c0d94:	bf1e      	ittt	ne
   c0d96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c0d9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c0d9e:	4770      	bxne	lr
   c0da0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c0da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c0da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c0dac:	4770      	bx	lr
   c0dae:	bf00      	nop

000c0db0 <__aeabi_d2ulz>:
   c0db0:	b5d0      	push	{r4, r6, r7, lr}
   c0db2:	4b0c      	ldr	r3, [pc, #48]	; (c0de4 <__aeabi_d2ulz+0x34>)
   c0db4:	2200      	movs	r2, #0
   c0db6:	4606      	mov	r6, r0
   c0db8:	460f      	mov	r7, r1
   c0dba:	f7ff fcb1 	bl	c0720 <__aeabi_dmul>
   c0dbe:	f7ff ff87 	bl	c0cd0 <__aeabi_d2uiz>
   c0dc2:	4604      	mov	r4, r0
   c0dc4:	f7ff fc32 	bl	c062c <__aeabi_ui2d>
   c0dc8:	4b07      	ldr	r3, [pc, #28]	; (c0de8 <__aeabi_d2ulz+0x38>)
   c0dca:	2200      	movs	r2, #0
   c0dcc:	f7ff fca8 	bl	c0720 <__aeabi_dmul>
   c0dd0:	4602      	mov	r2, r0
   c0dd2:	460b      	mov	r3, r1
   c0dd4:	4630      	mov	r0, r6
   c0dd6:	4639      	mov	r1, r7
   c0dd8:	f7ff faea 	bl	c03b0 <__aeabi_dsub>
   c0ddc:	f7ff ff78 	bl	c0cd0 <__aeabi_d2uiz>
   c0de0:	4621      	mov	r1, r4
   c0de2:	bdd0      	pop	{r4, r6, r7, pc}
   c0de4:	3df00000 	.word	0x3df00000
   c0de8:	41f00000 	.word	0x41f00000

000c0dec <asctime_r>:
   c0dec:	b510      	push	{r4, lr}
   c0dee:	460c      	mov	r4, r1
   c0df0:	6941      	ldr	r1, [r0, #20]
   c0df2:	6903      	ldr	r3, [r0, #16]
   c0df4:	6982      	ldr	r2, [r0, #24]
   c0df6:	b086      	sub	sp, #24
   c0df8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c0dfc:	9104      	str	r1, [sp, #16]
   c0dfe:	6801      	ldr	r1, [r0, #0]
   c0e00:	9103      	str	r1, [sp, #12]
   c0e02:	6841      	ldr	r1, [r0, #4]
   c0e04:	9102      	str	r1, [sp, #8]
   c0e06:	6881      	ldr	r1, [r0, #8]
   c0e08:	9101      	str	r1, [sp, #4]
   c0e0a:	68c1      	ldr	r1, [r0, #12]
   c0e0c:	9100      	str	r1, [sp, #0]
   c0e0e:	4907      	ldr	r1, [pc, #28]	; (c0e2c <asctime_r+0x40>)
   c0e10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c0e14:	440b      	add	r3, r1
   c0e16:	4906      	ldr	r1, [pc, #24]	; (c0e30 <asctime_r+0x44>)
   c0e18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c0e1c:	440a      	add	r2, r1
   c0e1e:	4620      	mov	r0, r4
   c0e20:	4904      	ldr	r1, [pc, #16]	; (c0e34 <asctime_r+0x48>)
   c0e22:	f7fc f8a3 	bl	bcf6c <siprintf>
   c0e26:	4620      	mov	r0, r4
   c0e28:	b006      	add	sp, #24
   c0e2a:	bd10      	pop	{r4, pc}
   c0e2c:	000c503a 	.word	0x000c503a
   c0e30:	000c5025 	.word	0x000c5025
   c0e34:	000c5005 	.word	0x000c5005

000c0e38 <atexit>:
   c0e38:	2300      	movs	r3, #0
   c0e3a:	4601      	mov	r1, r0
   c0e3c:	461a      	mov	r2, r3
   c0e3e:	4618      	mov	r0, r3
   c0e40:	f001 b900 	b.w	c2044 <__register_exitproc>

000c0e44 <gmtime>:
   c0e44:	b538      	push	{r3, r4, r5, lr}
   c0e46:	4b0b      	ldr	r3, [pc, #44]	; (c0e74 <gmtime+0x30>)
   c0e48:	681d      	ldr	r5, [r3, #0]
   c0e4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c0e4c:	4604      	mov	r4, r0
   c0e4e:	b953      	cbnz	r3, c0e66 <gmtime+0x22>
   c0e50:	2024      	movs	r0, #36	; 0x24
   c0e52:	f7fc f873 	bl	bcf3c <malloc>
   c0e56:	4602      	mov	r2, r0
   c0e58:	63e8      	str	r0, [r5, #60]	; 0x3c
   c0e5a:	b920      	cbnz	r0, c0e66 <gmtime+0x22>
   c0e5c:	4b06      	ldr	r3, [pc, #24]	; (c0e78 <gmtime+0x34>)
   c0e5e:	4807      	ldr	r0, [pc, #28]	; (c0e7c <gmtime+0x38>)
   c0e60:	2139      	movs	r1, #57	; 0x39
   c0e62:	f7fc f8bb 	bl	bcfdc <__assert_func>
   c0e66:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c0e68:	4620      	mov	r0, r4
   c0e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0e6e:	f7fc b8d5 	b.w	bd01c <gmtime_r>
   c0e72:	bf00      	nop
   c0e74:	2003d69c 	.word	0x2003d69c
   c0e78:	000c505e 	.word	0x000c505e
   c0e7c:	000c5075 	.word	0x000c5075

000c0e80 <isprint>:
   c0e80:	4b02      	ldr	r3, [pc, #8]	; (c0e8c <isprint+0xc>)
   c0e82:	4418      	add	r0, r3
   c0e84:	7840      	ldrb	r0, [r0, #1]
   c0e86:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c0e8a:	4770      	bx	lr
   c0e8c:	000c5180 	.word	0x000c5180

000c0e90 <memcpy>:
   c0e90:	440a      	add	r2, r1
   c0e92:	4291      	cmp	r1, r2
   c0e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c0e98:	d100      	bne.n	c0e9c <memcpy+0xc>
   c0e9a:	4770      	bx	lr
   c0e9c:	b510      	push	{r4, lr}
   c0e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c0ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
   c0ea6:	4291      	cmp	r1, r2
   c0ea8:	d1f9      	bne.n	c0e9e <memcpy+0xe>
   c0eaa:	bd10      	pop	{r4, pc}

000c0eac <memmove>:
   c0eac:	4288      	cmp	r0, r1
   c0eae:	b510      	push	{r4, lr}
   c0eb0:	eb01 0402 	add.w	r4, r1, r2
   c0eb4:	d902      	bls.n	c0ebc <memmove+0x10>
   c0eb6:	4284      	cmp	r4, r0
   c0eb8:	4623      	mov	r3, r4
   c0eba:	d807      	bhi.n	c0ecc <memmove+0x20>
   c0ebc:	1e43      	subs	r3, r0, #1
   c0ebe:	42a1      	cmp	r1, r4
   c0ec0:	d008      	beq.n	c0ed4 <memmove+0x28>
   c0ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c0ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c0eca:	e7f8      	b.n	c0ebe <memmove+0x12>
   c0ecc:	4402      	add	r2, r0
   c0ece:	4601      	mov	r1, r0
   c0ed0:	428a      	cmp	r2, r1
   c0ed2:	d100      	bne.n	c0ed6 <memmove+0x2a>
   c0ed4:	bd10      	pop	{r4, pc}
   c0ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c0eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c0ede:	e7f7      	b.n	c0ed0 <memmove+0x24>

000c0ee0 <memset>:
   c0ee0:	4402      	add	r2, r0
   c0ee2:	4603      	mov	r3, r0
   c0ee4:	4293      	cmp	r3, r2
   c0ee6:	d100      	bne.n	c0eea <memset+0xa>
   c0ee8:	4770      	bx	lr
   c0eea:	f803 1b01 	strb.w	r1, [r3], #1
   c0eee:	e7f9      	b.n	c0ee4 <memset+0x4>

000c0ef0 <_calloc_r>:
   c0ef0:	b513      	push	{r0, r1, r4, lr}
   c0ef2:	434a      	muls	r2, r1
   c0ef4:	4611      	mov	r1, r2
   c0ef6:	9201      	str	r2, [sp, #4]
   c0ef8:	f7fc f860 	bl	bcfbc <_malloc_r>
   c0efc:	4604      	mov	r4, r0
   c0efe:	b118      	cbz	r0, c0f08 <_calloc_r+0x18>
   c0f00:	9a01      	ldr	r2, [sp, #4]
   c0f02:	2100      	movs	r1, #0
   c0f04:	f7ff ffec 	bl	c0ee0 <memset>
   c0f08:	4620      	mov	r0, r4
   c0f0a:	b002      	add	sp, #8
   c0f0c:	bd10      	pop	{r4, pc}
	...

000c0f10 <srand>:
   c0f10:	b538      	push	{r3, r4, r5, lr}
   c0f12:	4b10      	ldr	r3, [pc, #64]	; (c0f54 <srand+0x44>)
   c0f14:	681d      	ldr	r5, [r3, #0]
   c0f16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0f18:	4604      	mov	r4, r0
   c0f1a:	b9b3      	cbnz	r3, c0f4a <srand+0x3a>
   c0f1c:	2018      	movs	r0, #24
   c0f1e:	f7fc f80d 	bl	bcf3c <malloc>
   c0f22:	4602      	mov	r2, r0
   c0f24:	63a8      	str	r0, [r5, #56]	; 0x38
   c0f26:	b920      	cbnz	r0, c0f32 <srand+0x22>
   c0f28:	4b0b      	ldr	r3, [pc, #44]	; (c0f58 <srand+0x48>)
   c0f2a:	480c      	ldr	r0, [pc, #48]	; (c0f5c <srand+0x4c>)
   c0f2c:	2142      	movs	r1, #66	; 0x42
   c0f2e:	f7fc f855 	bl	bcfdc <__assert_func>
   c0f32:	490b      	ldr	r1, [pc, #44]	; (c0f60 <srand+0x50>)
   c0f34:	4b0b      	ldr	r3, [pc, #44]	; (c0f64 <srand+0x54>)
   c0f36:	e9c0 1300 	strd	r1, r3, [r0]
   c0f3a:	4b0b      	ldr	r3, [pc, #44]	; (c0f68 <srand+0x58>)
   c0f3c:	6083      	str	r3, [r0, #8]
   c0f3e:	230b      	movs	r3, #11
   c0f40:	8183      	strh	r3, [r0, #12]
   c0f42:	2100      	movs	r1, #0
   c0f44:	2001      	movs	r0, #1
   c0f46:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c0f4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c0f4c:	2200      	movs	r2, #0
   c0f4e:	611c      	str	r4, [r3, #16]
   c0f50:	615a      	str	r2, [r3, #20]
   c0f52:	bd38      	pop	{r3, r4, r5, pc}
   c0f54:	2003d69c 	.word	0x2003d69c
   c0f58:	000c505e 	.word	0x000c505e
   c0f5c:	000c50ce 	.word	0x000c50ce
   c0f60:	abcd330e 	.word	0xabcd330e
   c0f64:	e66d1234 	.word	0xe66d1234
   c0f68:	0005deec 	.word	0x0005deec

000c0f6c <rand>:
   c0f6c:	4b16      	ldr	r3, [pc, #88]	; (c0fc8 <rand+0x5c>)
   c0f6e:	b510      	push	{r4, lr}
   c0f70:	681c      	ldr	r4, [r3, #0]
   c0f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c0f74:	b9b3      	cbnz	r3, c0fa4 <rand+0x38>
   c0f76:	2018      	movs	r0, #24
   c0f78:	f7fb ffe0 	bl	bcf3c <malloc>
   c0f7c:	63a0      	str	r0, [r4, #56]	; 0x38
   c0f7e:	b928      	cbnz	r0, c0f8c <rand+0x20>
   c0f80:	4602      	mov	r2, r0
   c0f82:	4b12      	ldr	r3, [pc, #72]	; (c0fcc <rand+0x60>)
   c0f84:	4812      	ldr	r0, [pc, #72]	; (c0fd0 <rand+0x64>)
   c0f86:	214e      	movs	r1, #78	; 0x4e
   c0f88:	f7fc f828 	bl	bcfdc <__assert_func>
   c0f8c:	4a11      	ldr	r2, [pc, #68]	; (c0fd4 <rand+0x68>)
   c0f8e:	4b12      	ldr	r3, [pc, #72]	; (c0fd8 <rand+0x6c>)
   c0f90:	e9c0 2300 	strd	r2, r3, [r0]
   c0f94:	4b11      	ldr	r3, [pc, #68]	; (c0fdc <rand+0x70>)
   c0f96:	6083      	str	r3, [r0, #8]
   c0f98:	230b      	movs	r3, #11
   c0f9a:	8183      	strh	r3, [r0, #12]
   c0f9c:	2201      	movs	r2, #1
   c0f9e:	2300      	movs	r3, #0
   c0fa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c0fa4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c0fa6:	4a0e      	ldr	r2, [pc, #56]	; (c0fe0 <rand+0x74>)
   c0fa8:	6920      	ldr	r0, [r4, #16]
   c0faa:	6963      	ldr	r3, [r4, #20]
   c0fac:	490d      	ldr	r1, [pc, #52]	; (c0fe4 <rand+0x78>)
   c0fae:	4342      	muls	r2, r0
   c0fb0:	fb01 2203 	mla	r2, r1, r3, r2
   c0fb4:	fba0 0101 	umull	r0, r1, r0, r1
   c0fb8:	1c43      	adds	r3, r0, #1
   c0fba:	eb42 0001 	adc.w	r0, r2, r1
   c0fbe:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c0fc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c0fc6:	bd10      	pop	{r4, pc}
   c0fc8:	2003d69c 	.word	0x2003d69c
   c0fcc:	000c505e 	.word	0x000c505e
   c0fd0:	000c50ce 	.word	0x000c50ce
   c0fd4:	abcd330e 	.word	0xabcd330e
   c0fd8:	e66d1234 	.word	0xe66d1234
   c0fdc:	0005deec 	.word	0x0005deec
   c0fe0:	5851f42d 	.word	0x5851f42d
   c0fe4:	4c957f2d 	.word	0x4c957f2d

000c0fe8 <strchr>:
   c0fe8:	b2c9      	uxtb	r1, r1
   c0fea:	4603      	mov	r3, r0
   c0fec:	f810 2b01 	ldrb.w	r2, [r0], #1
   c0ff0:	b11a      	cbz	r2, c0ffa <strchr+0x12>
   c0ff2:	428a      	cmp	r2, r1
   c0ff4:	d1f9      	bne.n	c0fea <strchr+0x2>
   c0ff6:	4618      	mov	r0, r3
   c0ff8:	4770      	bx	lr
   c0ffa:	2900      	cmp	r1, #0
   c0ffc:	bf18      	it	ne
   c0ffe:	2300      	movne	r3, #0
   c1000:	e7f9      	b.n	c0ff6 <strchr+0xe>

000c1002 <strchrnul>:
   c1002:	b510      	push	{r4, lr}
   c1004:	4604      	mov	r4, r0
   c1006:	f7ff ffef 	bl	c0fe8 <strchr>
   c100a:	b918      	cbnz	r0, c1014 <strchrnul+0x12>
   c100c:	4620      	mov	r0, r4
   c100e:	f000 f832 	bl	c1076 <strlen>
   c1012:	4420      	add	r0, r4
   c1014:	bd10      	pop	{r4, pc}

000c1016 <strcmp>:
   c1016:	f810 2b01 	ldrb.w	r2, [r0], #1
   c101a:	f811 3b01 	ldrb.w	r3, [r1], #1
   c101e:	2a01      	cmp	r2, #1
   c1020:	bf28      	it	cs
   c1022:	429a      	cmpcs	r2, r3
   c1024:	d0f7      	beq.n	c1016 <strcmp>
   c1026:	1ad0      	subs	r0, r2, r3
   c1028:	4770      	bx	lr

000c102a <strcpy>:
   c102a:	4603      	mov	r3, r0
   c102c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1030:	f803 2b01 	strb.w	r2, [r3], #1
   c1034:	2a00      	cmp	r2, #0
   c1036:	d1f9      	bne.n	c102c <strcpy+0x2>
   c1038:	4770      	bx	lr
	...

000c103c <strdup>:
   c103c:	4b02      	ldr	r3, [pc, #8]	; (c1048 <strdup+0xc>)
   c103e:	4601      	mov	r1, r0
   c1040:	6818      	ldr	r0, [r3, #0]
   c1042:	f000 b803 	b.w	c104c <_strdup_r>
   c1046:	bf00      	nop
   c1048:	2003d69c 	.word	0x2003d69c

000c104c <_strdup_r>:
   c104c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c104e:	4604      	mov	r4, r0
   c1050:	4608      	mov	r0, r1
   c1052:	460d      	mov	r5, r1
   c1054:	f000 f80f 	bl	c1076 <strlen>
   c1058:	1c42      	adds	r2, r0, #1
   c105a:	4611      	mov	r1, r2
   c105c:	4620      	mov	r0, r4
   c105e:	9201      	str	r2, [sp, #4]
   c1060:	f7fb ffac 	bl	bcfbc <_malloc_r>
   c1064:	4604      	mov	r4, r0
   c1066:	b118      	cbz	r0, c1070 <_strdup_r+0x24>
   c1068:	9a01      	ldr	r2, [sp, #4]
   c106a:	4629      	mov	r1, r5
   c106c:	f7ff ff10 	bl	c0e90 <memcpy>
   c1070:	4620      	mov	r0, r4
   c1072:	b003      	add	sp, #12
   c1074:	bd30      	pop	{r4, r5, pc}

000c1076 <strlen>:
   c1076:	4603      	mov	r3, r0
   c1078:	f813 2b01 	ldrb.w	r2, [r3], #1
   c107c:	2a00      	cmp	r2, #0
   c107e:	d1fb      	bne.n	c1078 <strlen+0x2>
   c1080:	1a18      	subs	r0, r3, r0
   c1082:	3801      	subs	r0, #1
   c1084:	4770      	bx	lr

000c1086 <strncmp>:
   c1086:	b510      	push	{r4, lr}
   c1088:	b17a      	cbz	r2, c10aa <strncmp+0x24>
   c108a:	4603      	mov	r3, r0
   c108c:	3901      	subs	r1, #1
   c108e:	1884      	adds	r4, r0, r2
   c1090:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1094:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c1098:	4290      	cmp	r0, r2
   c109a:	d101      	bne.n	c10a0 <strncmp+0x1a>
   c109c:	42a3      	cmp	r3, r4
   c109e:	d101      	bne.n	c10a4 <strncmp+0x1e>
   c10a0:	1a80      	subs	r0, r0, r2
   c10a2:	bd10      	pop	{r4, pc}
   c10a4:	2800      	cmp	r0, #0
   c10a6:	d1f3      	bne.n	c1090 <strncmp+0xa>
   c10a8:	e7fa      	b.n	c10a0 <strncmp+0x1a>
   c10aa:	4610      	mov	r0, r2
   c10ac:	e7f9      	b.n	c10a2 <strncmp+0x1c>

000c10ae <strncpy>:
   c10ae:	b510      	push	{r4, lr}
   c10b0:	3901      	subs	r1, #1
   c10b2:	4603      	mov	r3, r0
   c10b4:	b132      	cbz	r2, c10c4 <strncpy+0x16>
   c10b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c10ba:	f803 4b01 	strb.w	r4, [r3], #1
   c10be:	3a01      	subs	r2, #1
   c10c0:	2c00      	cmp	r4, #0
   c10c2:	d1f7      	bne.n	c10b4 <strncpy+0x6>
   c10c4:	441a      	add	r2, r3
   c10c6:	2100      	movs	r1, #0
   c10c8:	4293      	cmp	r3, r2
   c10ca:	d100      	bne.n	c10ce <strncpy+0x20>
   c10cc:	bd10      	pop	{r4, pc}
   c10ce:	f803 1b01 	strb.w	r1, [r3], #1
   c10d2:	e7f9      	b.n	c10c8 <strncpy+0x1a>

000c10d4 <strrchr>:
   c10d4:	b538      	push	{r3, r4, r5, lr}
   c10d6:	4603      	mov	r3, r0
   c10d8:	460c      	mov	r4, r1
   c10da:	b969      	cbnz	r1, c10f8 <strrchr+0x24>
   c10dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c10e0:	f7ff bf82 	b.w	c0fe8 <strchr>
   c10e4:	1c43      	adds	r3, r0, #1
   c10e6:	4605      	mov	r5, r0
   c10e8:	4621      	mov	r1, r4
   c10ea:	4618      	mov	r0, r3
   c10ec:	f7ff ff7c 	bl	c0fe8 <strchr>
   c10f0:	2800      	cmp	r0, #0
   c10f2:	d1f7      	bne.n	c10e4 <strrchr+0x10>
   c10f4:	4628      	mov	r0, r5
   c10f6:	bd38      	pop	{r3, r4, r5, pc}
   c10f8:	2500      	movs	r5, #0
   c10fa:	e7f5      	b.n	c10e8 <strrchr+0x14>

000c10fc <sulp>:
   c10fc:	b570      	push	{r4, r5, r6, lr}
   c10fe:	4604      	mov	r4, r0
   c1100:	460d      	mov	r5, r1
   c1102:	ec45 4b10 	vmov	d0, r4, r5
   c1106:	4616      	mov	r6, r2
   c1108:	f001 ff2a 	bl	c2f60 <__ulp>
   c110c:	ec51 0b10 	vmov	r0, r1, d0
   c1110:	b17e      	cbz	r6, c1132 <sulp+0x36>
   c1112:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c1116:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c111a:	2b00      	cmp	r3, #0
   c111c:	dd09      	ble.n	c1132 <sulp+0x36>
   c111e:	051b      	lsls	r3, r3, #20
   c1120:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c1124:	2400      	movs	r4, #0
   c1126:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c112a:	4622      	mov	r2, r4
   c112c:	462b      	mov	r3, r5
   c112e:	f7ff faf7 	bl	c0720 <__aeabi_dmul>
   c1132:	bd70      	pop	{r4, r5, r6, pc}
   c1134:	0000      	movs	r0, r0
	...

000c1138 <_strtod_l>:
   c1138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c113c:	ed2d 8b02 	vpush	{d8}
   c1140:	b09d      	sub	sp, #116	; 0x74
   c1142:	461f      	mov	r7, r3
   c1144:	2300      	movs	r3, #0
   c1146:	9318      	str	r3, [sp, #96]	; 0x60
   c1148:	4ba2      	ldr	r3, [pc, #648]	; (c13d4 <_strtod_l+0x29c>)
   c114a:	9213      	str	r2, [sp, #76]	; 0x4c
   c114c:	681b      	ldr	r3, [r3, #0]
   c114e:	9305      	str	r3, [sp, #20]
   c1150:	4604      	mov	r4, r0
   c1152:	4618      	mov	r0, r3
   c1154:	4688      	mov	r8, r1
   c1156:	f7ff ff8e 	bl	c1076 <strlen>
   c115a:	f04f 0a00 	mov.w	sl, #0
   c115e:	4605      	mov	r5, r0
   c1160:	f04f 0b00 	mov.w	fp, #0
   c1164:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c116a:	781a      	ldrb	r2, [r3, #0]
   c116c:	2a2b      	cmp	r2, #43	; 0x2b
   c116e:	d04e      	beq.n	c120e <_strtod_l+0xd6>
   c1170:	d83b      	bhi.n	c11ea <_strtod_l+0xb2>
   c1172:	2a0d      	cmp	r2, #13
   c1174:	d834      	bhi.n	c11e0 <_strtod_l+0xa8>
   c1176:	2a08      	cmp	r2, #8
   c1178:	d834      	bhi.n	c11e4 <_strtod_l+0xac>
   c117a:	2a00      	cmp	r2, #0
   c117c:	d03e      	beq.n	c11fc <_strtod_l+0xc4>
   c117e:	2300      	movs	r3, #0
   c1180:	930a      	str	r3, [sp, #40]	; 0x28
   c1182:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c1184:	7833      	ldrb	r3, [r6, #0]
   c1186:	2b30      	cmp	r3, #48	; 0x30
   c1188:	f040 80b0 	bne.w	c12ec <_strtod_l+0x1b4>
   c118c:	7873      	ldrb	r3, [r6, #1]
   c118e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c1192:	2b58      	cmp	r3, #88	; 0x58
   c1194:	d168      	bne.n	c1268 <_strtod_l+0x130>
   c1196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1198:	9301      	str	r3, [sp, #4]
   c119a:	ab18      	add	r3, sp, #96	; 0x60
   c119c:	9702      	str	r7, [sp, #8]
   c119e:	9300      	str	r3, [sp, #0]
   c11a0:	4a8d      	ldr	r2, [pc, #564]	; (c13d8 <_strtod_l+0x2a0>)
   c11a2:	ab19      	add	r3, sp, #100	; 0x64
   c11a4:	a917      	add	r1, sp, #92	; 0x5c
   c11a6:	4620      	mov	r0, r4
   c11a8:	f001 f838 	bl	c221c <__gethex>
   c11ac:	f010 0707 	ands.w	r7, r0, #7
   c11b0:	4605      	mov	r5, r0
   c11b2:	d005      	beq.n	c11c0 <_strtod_l+0x88>
   c11b4:	2f06      	cmp	r7, #6
   c11b6:	d12c      	bne.n	c1212 <_strtod_l+0xda>
   c11b8:	3601      	adds	r6, #1
   c11ba:	2300      	movs	r3, #0
   c11bc:	9617      	str	r6, [sp, #92]	; 0x5c
   c11be:	930a      	str	r3, [sp, #40]	; 0x28
   c11c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c11c2:	2b00      	cmp	r3, #0
   c11c4:	f040 8590 	bne.w	c1ce8 <_strtod_l+0xbb0>
   c11c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c11ca:	b1eb      	cbz	r3, c1208 <_strtod_l+0xd0>
   c11cc:	4652      	mov	r2, sl
   c11ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c11d2:	ec43 2b10 	vmov	d0, r2, r3
   c11d6:	b01d      	add	sp, #116	; 0x74
   c11d8:	ecbd 8b02 	vpop	{d8}
   c11dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c11e0:	2a20      	cmp	r2, #32
   c11e2:	d1cc      	bne.n	c117e <_strtod_l+0x46>
   c11e4:	3301      	adds	r3, #1
   c11e6:	9317      	str	r3, [sp, #92]	; 0x5c
   c11e8:	e7be      	b.n	c1168 <_strtod_l+0x30>
   c11ea:	2a2d      	cmp	r2, #45	; 0x2d
   c11ec:	d1c7      	bne.n	c117e <_strtod_l+0x46>
   c11ee:	2201      	movs	r2, #1
   c11f0:	920a      	str	r2, [sp, #40]	; 0x28
   c11f2:	1c5a      	adds	r2, r3, #1
   c11f4:	9217      	str	r2, [sp, #92]	; 0x5c
   c11f6:	785b      	ldrb	r3, [r3, #1]
   c11f8:	2b00      	cmp	r3, #0
   c11fa:	d1c2      	bne.n	c1182 <_strtod_l+0x4a>
   c11fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c11fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1202:	2b00      	cmp	r3, #0
   c1204:	f040 856e 	bne.w	c1ce4 <_strtod_l+0xbac>
   c1208:	4652      	mov	r2, sl
   c120a:	465b      	mov	r3, fp
   c120c:	e7e1      	b.n	c11d2 <_strtod_l+0x9a>
   c120e:	2200      	movs	r2, #0
   c1210:	e7ee      	b.n	c11f0 <_strtod_l+0xb8>
   c1212:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1214:	b13a      	cbz	r2, c1226 <_strtod_l+0xee>
   c1216:	2135      	movs	r1, #53	; 0x35
   c1218:	a81a      	add	r0, sp, #104	; 0x68
   c121a:	f001 ffac 	bl	c3176 <__copybits>
   c121e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1220:	4620      	mov	r0, r4
   c1222:	f001 fb6b 	bl	c28fc <_Bfree>
   c1226:	3f01      	subs	r7, #1
   c1228:	2f04      	cmp	r7, #4
   c122a:	d806      	bhi.n	c123a <_strtod_l+0x102>
   c122c:	e8df f007 	tbb	[pc, r7]
   c1230:	1714030a 	.word	0x1714030a
   c1234:	0a          	.byte	0x0a
   c1235:	00          	.byte	0x00
   c1236:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c123a:	0728      	lsls	r0, r5, #28
   c123c:	d5c0      	bpl.n	c11c0 <_strtod_l+0x88>
   c123e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c1242:	e7bd      	b.n	c11c0 <_strtod_l+0x88>
   c1244:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c1248:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c124a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c124e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c1252:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c1256:	e7f0      	b.n	c123a <_strtod_l+0x102>
   c1258:	f8df b180 	ldr.w	fp, [pc, #384]	; c13dc <_strtod_l+0x2a4>
   c125c:	e7ed      	b.n	c123a <_strtod_l+0x102>
   c125e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c1262:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1266:	e7e8      	b.n	c123a <_strtod_l+0x102>
   c1268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c126a:	1c5a      	adds	r2, r3, #1
   c126c:	9217      	str	r2, [sp, #92]	; 0x5c
   c126e:	785b      	ldrb	r3, [r3, #1]
   c1270:	2b30      	cmp	r3, #48	; 0x30
   c1272:	d0f9      	beq.n	c1268 <_strtod_l+0x130>
   c1274:	2b00      	cmp	r3, #0
   c1276:	d0a3      	beq.n	c11c0 <_strtod_l+0x88>
   c1278:	2301      	movs	r3, #1
   c127a:	f04f 0900 	mov.w	r9, #0
   c127e:	9304      	str	r3, [sp, #16]
   c1280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1282:	9308      	str	r3, [sp, #32]
   c1284:	f8cd 901c 	str.w	r9, [sp, #28]
   c1288:	464f      	mov	r7, r9
   c128a:	220a      	movs	r2, #10
   c128c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c128e:	7806      	ldrb	r6, [r0, #0]
   c1290:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c1294:	b2d9      	uxtb	r1, r3
   c1296:	2909      	cmp	r1, #9
   c1298:	d92a      	bls.n	c12f0 <_strtod_l+0x1b8>
   c129a:	9905      	ldr	r1, [sp, #20]
   c129c:	462a      	mov	r2, r5
   c129e:	f7ff fef2 	bl	c1086 <strncmp>
   c12a2:	b398      	cbz	r0, c130c <_strtod_l+0x1d4>
   c12a4:	2000      	movs	r0, #0
   c12a6:	4632      	mov	r2, r6
   c12a8:	463d      	mov	r5, r7
   c12aa:	9005      	str	r0, [sp, #20]
   c12ac:	4603      	mov	r3, r0
   c12ae:	2a65      	cmp	r2, #101	; 0x65
   c12b0:	d001      	beq.n	c12b6 <_strtod_l+0x17e>
   c12b2:	2a45      	cmp	r2, #69	; 0x45
   c12b4:	d118      	bne.n	c12e8 <_strtod_l+0x1b0>
   c12b6:	b91d      	cbnz	r5, c12c0 <_strtod_l+0x188>
   c12b8:	9a04      	ldr	r2, [sp, #16]
   c12ba:	4302      	orrs	r2, r0
   c12bc:	d09e      	beq.n	c11fc <_strtod_l+0xc4>
   c12be:	2500      	movs	r5, #0
   c12c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c12c4:	f108 0201 	add.w	r2, r8, #1
   c12c8:	9217      	str	r2, [sp, #92]	; 0x5c
   c12ca:	f898 2001 	ldrb.w	r2, [r8, #1]
   c12ce:	2a2b      	cmp	r2, #43	; 0x2b
   c12d0:	d075      	beq.n	c13be <_strtod_l+0x286>
   c12d2:	2a2d      	cmp	r2, #45	; 0x2d
   c12d4:	d07b      	beq.n	c13ce <_strtod_l+0x296>
   c12d6:	f04f 0c00 	mov.w	ip, #0
   c12da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c12de:	2909      	cmp	r1, #9
   c12e0:	f240 8082 	bls.w	c13e8 <_strtod_l+0x2b0>
   c12e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c12e8:	2600      	movs	r6, #0
   c12ea:	e09d      	b.n	c1428 <_strtod_l+0x2f0>
   c12ec:	2300      	movs	r3, #0
   c12ee:	e7c4      	b.n	c127a <_strtod_l+0x142>
   c12f0:	2f08      	cmp	r7, #8
   c12f2:	bfd8      	it	le
   c12f4:	9907      	ldrle	r1, [sp, #28]
   c12f6:	f100 0001 	add.w	r0, r0, #1
   c12fa:	bfda      	itte	le
   c12fc:	fb02 3301 	mlale	r3, r2, r1, r3
   c1300:	9307      	strle	r3, [sp, #28]
   c1302:	fb02 3909 	mlagt	r9, r2, r9, r3
   c1306:	3701      	adds	r7, #1
   c1308:	9017      	str	r0, [sp, #92]	; 0x5c
   c130a:	e7bf      	b.n	c128c <_strtod_l+0x154>
   c130c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c130e:	195a      	adds	r2, r3, r5
   c1310:	9217      	str	r2, [sp, #92]	; 0x5c
   c1312:	5d5a      	ldrb	r2, [r3, r5]
   c1314:	2f00      	cmp	r7, #0
   c1316:	d037      	beq.n	c1388 <_strtod_l+0x250>
   c1318:	9005      	str	r0, [sp, #20]
   c131a:	463d      	mov	r5, r7
   c131c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1320:	2b09      	cmp	r3, #9
   c1322:	d912      	bls.n	c134a <_strtod_l+0x212>
   c1324:	2301      	movs	r3, #1
   c1326:	e7c2      	b.n	c12ae <_strtod_l+0x176>
   c1328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c132a:	1c5a      	adds	r2, r3, #1
   c132c:	9217      	str	r2, [sp, #92]	; 0x5c
   c132e:	785a      	ldrb	r2, [r3, #1]
   c1330:	3001      	adds	r0, #1
   c1332:	2a30      	cmp	r2, #48	; 0x30
   c1334:	d0f8      	beq.n	c1328 <_strtod_l+0x1f0>
   c1336:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c133a:	2b08      	cmp	r3, #8
   c133c:	f200 84d9 	bhi.w	c1cf2 <_strtod_l+0xbba>
   c1340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1342:	9005      	str	r0, [sp, #20]
   c1344:	2000      	movs	r0, #0
   c1346:	9308      	str	r3, [sp, #32]
   c1348:	4605      	mov	r5, r0
   c134a:	3a30      	subs	r2, #48	; 0x30
   c134c:	f100 0301 	add.w	r3, r0, #1
   c1350:	d014      	beq.n	c137c <_strtod_l+0x244>
   c1352:	9905      	ldr	r1, [sp, #20]
   c1354:	4419      	add	r1, r3
   c1356:	9105      	str	r1, [sp, #20]
   c1358:	462b      	mov	r3, r5
   c135a:	eb00 0e05 	add.w	lr, r0, r5
   c135e:	210a      	movs	r1, #10
   c1360:	4573      	cmp	r3, lr
   c1362:	d113      	bne.n	c138c <_strtod_l+0x254>
   c1364:	182b      	adds	r3, r5, r0
   c1366:	2b08      	cmp	r3, #8
   c1368:	f105 0501 	add.w	r5, r5, #1
   c136c:	4405      	add	r5, r0
   c136e:	dc1c      	bgt.n	c13aa <_strtod_l+0x272>
   c1370:	9907      	ldr	r1, [sp, #28]
   c1372:	230a      	movs	r3, #10
   c1374:	fb03 2301 	mla	r3, r3, r1, r2
   c1378:	9307      	str	r3, [sp, #28]
   c137a:	2300      	movs	r3, #0
   c137c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c137e:	1c51      	adds	r1, r2, #1
   c1380:	9117      	str	r1, [sp, #92]	; 0x5c
   c1382:	7852      	ldrb	r2, [r2, #1]
   c1384:	4618      	mov	r0, r3
   c1386:	e7c9      	b.n	c131c <_strtod_l+0x1e4>
   c1388:	4638      	mov	r0, r7
   c138a:	e7d2      	b.n	c1332 <_strtod_l+0x1fa>
   c138c:	2b08      	cmp	r3, #8
   c138e:	dc04      	bgt.n	c139a <_strtod_l+0x262>
   c1390:	9e07      	ldr	r6, [sp, #28]
   c1392:	434e      	muls	r6, r1
   c1394:	9607      	str	r6, [sp, #28]
   c1396:	3301      	adds	r3, #1
   c1398:	e7e2      	b.n	c1360 <_strtod_l+0x228>
   c139a:	f103 0c01 	add.w	ip, r3, #1
   c139e:	f1bc 0f10 	cmp.w	ip, #16
   c13a2:	bfd8      	it	le
   c13a4:	fb01 f909 	mulle.w	r9, r1, r9
   c13a8:	e7f5      	b.n	c1396 <_strtod_l+0x25e>
   c13aa:	2d10      	cmp	r5, #16
   c13ac:	bfdc      	itt	le
   c13ae:	230a      	movle	r3, #10
   c13b0:	fb03 2909 	mlale	r9, r3, r9, r2
   c13b4:	e7e1      	b.n	c137a <_strtod_l+0x242>
   c13b6:	2300      	movs	r3, #0
   c13b8:	9305      	str	r3, [sp, #20]
   c13ba:	2301      	movs	r3, #1
   c13bc:	e77c      	b.n	c12b8 <_strtod_l+0x180>
   c13be:	f04f 0c00 	mov.w	ip, #0
   c13c2:	f108 0202 	add.w	r2, r8, #2
   c13c6:	9217      	str	r2, [sp, #92]	; 0x5c
   c13c8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c13cc:	e785      	b.n	c12da <_strtod_l+0x1a2>
   c13ce:	f04f 0c01 	mov.w	ip, #1
   c13d2:	e7f6      	b.n	c13c2 <_strtod_l+0x28a>
   c13d4:	000c52f4 	.word	0x000c52f4
   c13d8:	000c5130 	.word	0x000c5130
   c13dc:	7ff00000 	.word	0x7ff00000
   c13e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c13e2:	1c51      	adds	r1, r2, #1
   c13e4:	9117      	str	r1, [sp, #92]	; 0x5c
   c13e6:	7852      	ldrb	r2, [r2, #1]
   c13e8:	2a30      	cmp	r2, #48	; 0x30
   c13ea:	d0f9      	beq.n	c13e0 <_strtod_l+0x2a8>
   c13ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c13f0:	2908      	cmp	r1, #8
   c13f2:	f63f af79 	bhi.w	c12e8 <_strtod_l+0x1b0>
   c13f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c13fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c13fc:	9206      	str	r2, [sp, #24]
   c13fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1400:	1c51      	adds	r1, r2, #1
   c1402:	9117      	str	r1, [sp, #92]	; 0x5c
   c1404:	7852      	ldrb	r2, [r2, #1]
   c1406:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c140a:	2e09      	cmp	r6, #9
   c140c:	d937      	bls.n	c147e <_strtod_l+0x346>
   c140e:	9e06      	ldr	r6, [sp, #24]
   c1410:	1b89      	subs	r1, r1, r6
   c1412:	2908      	cmp	r1, #8
   c1414:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1418:	dc02      	bgt.n	c1420 <_strtod_l+0x2e8>
   c141a:	4576      	cmp	r6, lr
   c141c:	bfa8      	it	ge
   c141e:	4676      	movge	r6, lr
   c1420:	f1bc 0f00 	cmp.w	ip, #0
   c1424:	d000      	beq.n	c1428 <_strtod_l+0x2f0>
   c1426:	4276      	negs	r6, r6
   c1428:	2d00      	cmp	r5, #0
   c142a:	d14d      	bne.n	c14c8 <_strtod_l+0x390>
   c142c:	9904      	ldr	r1, [sp, #16]
   c142e:	4301      	orrs	r1, r0
   c1430:	f47f aec6 	bne.w	c11c0 <_strtod_l+0x88>
   c1434:	2b00      	cmp	r3, #0
   c1436:	f47f aee1 	bne.w	c11fc <_strtod_l+0xc4>
   c143a:	2a69      	cmp	r2, #105	; 0x69
   c143c:	d027      	beq.n	c148e <_strtod_l+0x356>
   c143e:	dc24      	bgt.n	c148a <_strtod_l+0x352>
   c1440:	2a49      	cmp	r2, #73	; 0x49
   c1442:	d024      	beq.n	c148e <_strtod_l+0x356>
   c1444:	2a4e      	cmp	r2, #78	; 0x4e
   c1446:	f47f aed9 	bne.w	c11fc <_strtod_l+0xc4>
   c144a:	499f      	ldr	r1, [pc, #636]	; (c16c8 <_strtod_l+0x590>)
   c144c:	a817      	add	r0, sp, #92	; 0x5c
   c144e:	f001 f93d 	bl	c26cc <__match>
   c1452:	2800      	cmp	r0, #0
   c1454:	f43f aed2 	beq.w	c11fc <_strtod_l+0xc4>
   c1458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c145a:	781b      	ldrb	r3, [r3, #0]
   c145c:	2b28      	cmp	r3, #40	; 0x28
   c145e:	d12d      	bne.n	c14bc <_strtod_l+0x384>
   c1460:	499a      	ldr	r1, [pc, #616]	; (c16cc <_strtod_l+0x594>)
   c1462:	aa1a      	add	r2, sp, #104	; 0x68
   c1464:	a817      	add	r0, sp, #92	; 0x5c
   c1466:	f001 f945 	bl	c26f4 <__hexnan>
   c146a:	2805      	cmp	r0, #5
   c146c:	d126      	bne.n	c14bc <_strtod_l+0x384>
   c146e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c1470:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c1474:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c1478:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c147c:	e6a0      	b.n	c11c0 <_strtod_l+0x88>
   c147e:	210a      	movs	r1, #10
   c1480:	fb01 2e0e 	mla	lr, r1, lr, r2
   c1484:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c1488:	e7b9      	b.n	c13fe <_strtod_l+0x2c6>
   c148a:	2a6e      	cmp	r2, #110	; 0x6e
   c148c:	e7db      	b.n	c1446 <_strtod_l+0x30e>
   c148e:	4990      	ldr	r1, [pc, #576]	; (c16d0 <_strtod_l+0x598>)
   c1490:	a817      	add	r0, sp, #92	; 0x5c
   c1492:	f001 f91b 	bl	c26cc <__match>
   c1496:	2800      	cmp	r0, #0
   c1498:	f43f aeb0 	beq.w	c11fc <_strtod_l+0xc4>
   c149c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c149e:	498d      	ldr	r1, [pc, #564]	; (c16d4 <_strtod_l+0x59c>)
   c14a0:	3b01      	subs	r3, #1
   c14a2:	a817      	add	r0, sp, #92	; 0x5c
   c14a4:	9317      	str	r3, [sp, #92]	; 0x5c
   c14a6:	f001 f911 	bl	c26cc <__match>
   c14aa:	b910      	cbnz	r0, c14b2 <_strtod_l+0x37a>
   c14ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c14ae:	3301      	adds	r3, #1
   c14b0:	9317      	str	r3, [sp, #92]	; 0x5c
   c14b2:	f8df b230 	ldr.w	fp, [pc, #560]	; c16e4 <_strtod_l+0x5ac>
   c14b6:	f04f 0a00 	mov.w	sl, #0
   c14ba:	e681      	b.n	c11c0 <_strtod_l+0x88>
   c14bc:	4886      	ldr	r0, [pc, #536]	; (c16d8 <_strtod_l+0x5a0>)
   c14be:	f7fe ff6b 	bl	c0398 <nan>
   c14c2:	ec5b ab10 	vmov	sl, fp, d0
   c14c6:	e67b      	b.n	c11c0 <_strtod_l+0x88>
   c14c8:	9b05      	ldr	r3, [sp, #20]
   c14ca:	9807      	ldr	r0, [sp, #28]
   c14cc:	1af3      	subs	r3, r6, r3
   c14ce:	2f00      	cmp	r7, #0
   c14d0:	bf08      	it	eq
   c14d2:	462f      	moveq	r7, r5
   c14d4:	2d10      	cmp	r5, #16
   c14d6:	9306      	str	r3, [sp, #24]
   c14d8:	46a8      	mov	r8, r5
   c14da:	bfa8      	it	ge
   c14dc:	f04f 0810 	movge.w	r8, #16
   c14e0:	f7ff f8a4 	bl	c062c <__aeabi_ui2d>
   c14e4:	2d09      	cmp	r5, #9
   c14e6:	4682      	mov	sl, r0
   c14e8:	468b      	mov	fp, r1
   c14ea:	dd13      	ble.n	c1514 <_strtod_l+0x3dc>
   c14ec:	4b7b      	ldr	r3, [pc, #492]	; (c16dc <_strtod_l+0x5a4>)
   c14ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c14f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c14f6:	f7ff f913 	bl	c0720 <__aeabi_dmul>
   c14fa:	4682      	mov	sl, r0
   c14fc:	4648      	mov	r0, r9
   c14fe:	468b      	mov	fp, r1
   c1500:	f7ff f894 	bl	c062c <__aeabi_ui2d>
   c1504:	4602      	mov	r2, r0
   c1506:	460b      	mov	r3, r1
   c1508:	4650      	mov	r0, sl
   c150a:	4659      	mov	r1, fp
   c150c:	f7fe ff52 	bl	c03b4 <__adddf3>
   c1510:	4682      	mov	sl, r0
   c1512:	468b      	mov	fp, r1
   c1514:	2d0f      	cmp	r5, #15
   c1516:	dc38      	bgt.n	c158a <_strtod_l+0x452>
   c1518:	9b06      	ldr	r3, [sp, #24]
   c151a:	2b00      	cmp	r3, #0
   c151c:	f43f ae50 	beq.w	c11c0 <_strtod_l+0x88>
   c1520:	dd24      	ble.n	c156c <_strtod_l+0x434>
   c1522:	2b16      	cmp	r3, #22
   c1524:	dc0b      	bgt.n	c153e <_strtod_l+0x406>
   c1526:	496d      	ldr	r1, [pc, #436]	; (c16dc <_strtod_l+0x5a4>)
   c1528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c152c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1530:	4652      	mov	r2, sl
   c1532:	465b      	mov	r3, fp
   c1534:	f7ff f8f4 	bl	c0720 <__aeabi_dmul>
   c1538:	4682      	mov	sl, r0
   c153a:	468b      	mov	fp, r1
   c153c:	e640      	b.n	c11c0 <_strtod_l+0x88>
   c153e:	9a06      	ldr	r2, [sp, #24]
   c1540:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c1544:	4293      	cmp	r3, r2
   c1546:	db20      	blt.n	c158a <_strtod_l+0x452>
   c1548:	4c64      	ldr	r4, [pc, #400]	; (c16dc <_strtod_l+0x5a4>)
   c154a:	f1c5 050f 	rsb	r5, r5, #15
   c154e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c1552:	4652      	mov	r2, sl
   c1554:	465b      	mov	r3, fp
   c1556:	e9d1 0100 	ldrd	r0, r1, [r1]
   c155a:	f7ff f8e1 	bl	c0720 <__aeabi_dmul>
   c155e:	9b06      	ldr	r3, [sp, #24]
   c1560:	1b5d      	subs	r5, r3, r5
   c1562:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c1566:	e9d4 2300 	ldrd	r2, r3, [r4]
   c156a:	e7e3      	b.n	c1534 <_strtod_l+0x3fc>
   c156c:	9b06      	ldr	r3, [sp, #24]
   c156e:	3316      	adds	r3, #22
   c1570:	db0b      	blt.n	c158a <_strtod_l+0x452>
   c1572:	9b05      	ldr	r3, [sp, #20]
   c1574:	1b9e      	subs	r6, r3, r6
   c1576:	4b59      	ldr	r3, [pc, #356]	; (c16dc <_strtod_l+0x5a4>)
   c1578:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c157c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c1580:	4650      	mov	r0, sl
   c1582:	4659      	mov	r1, fp
   c1584:	f7ff f9f6 	bl	c0974 <__aeabi_ddiv>
   c1588:	e7d6      	b.n	c1538 <_strtod_l+0x400>
   c158a:	9b06      	ldr	r3, [sp, #24]
   c158c:	eba5 0808 	sub.w	r8, r5, r8
   c1590:	4498      	add	r8, r3
   c1592:	f1b8 0f00 	cmp.w	r8, #0
   c1596:	dd74      	ble.n	c1682 <_strtod_l+0x54a>
   c1598:	f018 030f 	ands.w	r3, r8, #15
   c159c:	d00a      	beq.n	c15b4 <_strtod_l+0x47c>
   c159e:	494f      	ldr	r1, [pc, #316]	; (c16dc <_strtod_l+0x5a4>)
   c15a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c15a4:	4652      	mov	r2, sl
   c15a6:	465b      	mov	r3, fp
   c15a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c15ac:	f7ff f8b8 	bl	c0720 <__aeabi_dmul>
   c15b0:	4682      	mov	sl, r0
   c15b2:	468b      	mov	fp, r1
   c15b4:	f038 080f 	bics.w	r8, r8, #15
   c15b8:	d04f      	beq.n	c165a <_strtod_l+0x522>
   c15ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c15be:	dd22      	ble.n	c1606 <_strtod_l+0x4ce>
   c15c0:	2500      	movs	r5, #0
   c15c2:	462e      	mov	r6, r5
   c15c4:	9507      	str	r5, [sp, #28]
   c15c6:	9505      	str	r5, [sp, #20]
   c15c8:	2322      	movs	r3, #34	; 0x22
   c15ca:	f8df b118 	ldr.w	fp, [pc, #280]	; c16e4 <_strtod_l+0x5ac>
   c15ce:	6023      	str	r3, [r4, #0]
   c15d0:	f04f 0a00 	mov.w	sl, #0
   c15d4:	9b07      	ldr	r3, [sp, #28]
   c15d6:	2b00      	cmp	r3, #0
   c15d8:	f43f adf2 	beq.w	c11c0 <_strtod_l+0x88>
   c15dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   c15de:	4620      	mov	r0, r4
   c15e0:	f001 f98c 	bl	c28fc <_Bfree>
   c15e4:	9905      	ldr	r1, [sp, #20]
   c15e6:	4620      	mov	r0, r4
   c15e8:	f001 f988 	bl	c28fc <_Bfree>
   c15ec:	4631      	mov	r1, r6
   c15ee:	4620      	mov	r0, r4
   c15f0:	f001 f984 	bl	c28fc <_Bfree>
   c15f4:	9907      	ldr	r1, [sp, #28]
   c15f6:	4620      	mov	r0, r4
   c15f8:	f001 f980 	bl	c28fc <_Bfree>
   c15fc:	4629      	mov	r1, r5
   c15fe:	4620      	mov	r0, r4
   c1600:	f001 f97c 	bl	c28fc <_Bfree>
   c1604:	e5dc      	b.n	c11c0 <_strtod_l+0x88>
   c1606:	4b36      	ldr	r3, [pc, #216]	; (c16e0 <_strtod_l+0x5a8>)
   c1608:	9304      	str	r3, [sp, #16]
   c160a:	2300      	movs	r3, #0
   c160c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1610:	4650      	mov	r0, sl
   c1612:	4659      	mov	r1, fp
   c1614:	4699      	mov	r9, r3
   c1616:	f1b8 0f01 	cmp.w	r8, #1
   c161a:	dc21      	bgt.n	c1660 <_strtod_l+0x528>
   c161c:	b10b      	cbz	r3, c1622 <_strtod_l+0x4ea>
   c161e:	4682      	mov	sl, r0
   c1620:	468b      	mov	fp, r1
   c1622:	4b2f      	ldr	r3, [pc, #188]	; (c16e0 <_strtod_l+0x5a8>)
   c1624:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c1628:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c162c:	4652      	mov	r2, sl
   c162e:	465b      	mov	r3, fp
   c1630:	e9d9 0100 	ldrd	r0, r1, [r9]
   c1634:	f7ff f874 	bl	c0720 <__aeabi_dmul>
   c1638:	4b2a      	ldr	r3, [pc, #168]	; (c16e4 <_strtod_l+0x5ac>)
   c163a:	460a      	mov	r2, r1
   c163c:	400b      	ands	r3, r1
   c163e:	492a      	ldr	r1, [pc, #168]	; (c16e8 <_strtod_l+0x5b0>)
   c1640:	428b      	cmp	r3, r1
   c1642:	4682      	mov	sl, r0
   c1644:	d8bc      	bhi.n	c15c0 <_strtod_l+0x488>
   c1646:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c164a:	428b      	cmp	r3, r1
   c164c:	bf86      	itte	hi
   c164e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c16ec <_strtod_l+0x5b4>
   c1652:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c1656:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c165a:	2300      	movs	r3, #0
   c165c:	9304      	str	r3, [sp, #16]
   c165e:	e084      	b.n	c176a <_strtod_l+0x632>
   c1660:	f018 0f01 	tst.w	r8, #1
   c1664:	d005      	beq.n	c1672 <_strtod_l+0x53a>
   c1666:	9b04      	ldr	r3, [sp, #16]
   c1668:	e9d3 2300 	ldrd	r2, r3, [r3]
   c166c:	f7ff f858 	bl	c0720 <__aeabi_dmul>
   c1670:	2301      	movs	r3, #1
   c1672:	9a04      	ldr	r2, [sp, #16]
   c1674:	3208      	adds	r2, #8
   c1676:	f109 0901 	add.w	r9, r9, #1
   c167a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c167e:	9204      	str	r2, [sp, #16]
   c1680:	e7c9      	b.n	c1616 <_strtod_l+0x4de>
   c1682:	d0ea      	beq.n	c165a <_strtod_l+0x522>
   c1684:	f1c8 0800 	rsb	r8, r8, #0
   c1688:	f018 020f 	ands.w	r2, r8, #15
   c168c:	d00a      	beq.n	c16a4 <_strtod_l+0x56c>
   c168e:	4b13      	ldr	r3, [pc, #76]	; (c16dc <_strtod_l+0x5a4>)
   c1690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c1694:	4650      	mov	r0, sl
   c1696:	4659      	mov	r1, fp
   c1698:	e9d3 2300 	ldrd	r2, r3, [r3]
   c169c:	f7ff f96a 	bl	c0974 <__aeabi_ddiv>
   c16a0:	4682      	mov	sl, r0
   c16a2:	468b      	mov	fp, r1
   c16a4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c16a8:	d0d7      	beq.n	c165a <_strtod_l+0x522>
   c16aa:	f1b8 0f1f 	cmp.w	r8, #31
   c16ae:	dd1f      	ble.n	c16f0 <_strtod_l+0x5b8>
   c16b0:	2500      	movs	r5, #0
   c16b2:	462e      	mov	r6, r5
   c16b4:	9507      	str	r5, [sp, #28]
   c16b6:	9505      	str	r5, [sp, #20]
   c16b8:	2322      	movs	r3, #34	; 0x22
   c16ba:	f04f 0a00 	mov.w	sl, #0
   c16be:	f04f 0b00 	mov.w	fp, #0
   c16c2:	6023      	str	r3, [r4, #0]
   c16c4:	e786      	b.n	c15d4 <_strtod_l+0x49c>
   c16c6:	bf00      	nop
   c16c8:	000c4f45 	.word	0x000c4f45
   c16cc:	000c5144 	.word	0x000c5144
   c16d0:	000c4f49 	.word	0x000c4f49
   c16d4:	000c5127 	.word	0x000c5127
   c16d8:	000c4e80 	.word	0x000c4e80
   c16dc:	000c5390 	.word	0x000c5390
   c16e0:	000c5368 	.word	0x000c5368
   c16e4:	7ff00000 	.word	0x7ff00000
   c16e8:	7ca00000 	.word	0x7ca00000
   c16ec:	7fefffff 	.word	0x7fefffff
   c16f0:	f018 0310 	ands.w	r3, r8, #16
   c16f4:	bf18      	it	ne
   c16f6:	236a      	movne	r3, #106	; 0x6a
   c16f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c1aa8 <_strtod_l+0x970>
   c16fc:	9304      	str	r3, [sp, #16]
   c16fe:	4650      	mov	r0, sl
   c1700:	4659      	mov	r1, fp
   c1702:	2300      	movs	r3, #0
   c1704:	f018 0f01 	tst.w	r8, #1
   c1708:	d004      	beq.n	c1714 <_strtod_l+0x5dc>
   c170a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c170e:	f7ff f807 	bl	c0720 <__aeabi_dmul>
   c1712:	2301      	movs	r3, #1
   c1714:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1718:	f109 0908 	add.w	r9, r9, #8
   c171c:	d1f2      	bne.n	c1704 <_strtod_l+0x5cc>
   c171e:	b10b      	cbz	r3, c1724 <_strtod_l+0x5ec>
   c1720:	4682      	mov	sl, r0
   c1722:	468b      	mov	fp, r1
   c1724:	9b04      	ldr	r3, [sp, #16]
   c1726:	b1c3      	cbz	r3, c175a <_strtod_l+0x622>
   c1728:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c172c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1730:	2b00      	cmp	r3, #0
   c1732:	4659      	mov	r1, fp
   c1734:	dd11      	ble.n	c175a <_strtod_l+0x622>
   c1736:	2b1f      	cmp	r3, #31
   c1738:	f340 8124 	ble.w	c1984 <_strtod_l+0x84c>
   c173c:	2b34      	cmp	r3, #52	; 0x34
   c173e:	bfde      	ittt	le
   c1740:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1744:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c1748:	fa03 f202 	lslle.w	r2, r3, r2
   c174c:	f04f 0a00 	mov.w	sl, #0
   c1750:	bfcc      	ite	gt
   c1752:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1756:	ea02 0b01 	andle.w	fp, r2, r1
   c175a:	2200      	movs	r2, #0
   c175c:	2300      	movs	r3, #0
   c175e:	4650      	mov	r0, sl
   c1760:	4659      	mov	r1, fp
   c1762:	f7ff fa45 	bl	c0bf0 <__aeabi_dcmpeq>
   c1766:	2800      	cmp	r0, #0
   c1768:	d1a2      	bne.n	c16b0 <_strtod_l+0x578>
   c176a:	9b07      	ldr	r3, [sp, #28]
   c176c:	9300      	str	r3, [sp, #0]
   c176e:	9908      	ldr	r1, [sp, #32]
   c1770:	462b      	mov	r3, r5
   c1772:	463a      	mov	r2, r7
   c1774:	4620      	mov	r0, r4
   c1776:	f001 f929 	bl	c29cc <__s2b>
   c177a:	9007      	str	r0, [sp, #28]
   c177c:	2800      	cmp	r0, #0
   c177e:	f43f af1f 	beq.w	c15c0 <_strtod_l+0x488>
   c1782:	9b05      	ldr	r3, [sp, #20]
   c1784:	1b9e      	subs	r6, r3, r6
   c1786:	9b06      	ldr	r3, [sp, #24]
   c1788:	2b00      	cmp	r3, #0
   c178a:	bfb4      	ite	lt
   c178c:	4633      	movlt	r3, r6
   c178e:	2300      	movge	r3, #0
   c1790:	930c      	str	r3, [sp, #48]	; 0x30
   c1792:	9b06      	ldr	r3, [sp, #24]
   c1794:	2500      	movs	r5, #0
   c1796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c179a:	9312      	str	r3, [sp, #72]	; 0x48
   c179c:	462e      	mov	r6, r5
   c179e:	9b07      	ldr	r3, [sp, #28]
   c17a0:	4620      	mov	r0, r4
   c17a2:	6859      	ldr	r1, [r3, #4]
   c17a4:	f001 f86a 	bl	c287c <_Balloc>
   c17a8:	9005      	str	r0, [sp, #20]
   c17aa:	2800      	cmp	r0, #0
   c17ac:	f43f af0c 	beq.w	c15c8 <_strtod_l+0x490>
   c17b0:	9b07      	ldr	r3, [sp, #28]
   c17b2:	691a      	ldr	r2, [r3, #16]
   c17b4:	3202      	adds	r2, #2
   c17b6:	f103 010c 	add.w	r1, r3, #12
   c17ba:	0092      	lsls	r2, r2, #2
   c17bc:	300c      	adds	r0, #12
   c17be:	f7ff fb67 	bl	c0e90 <memcpy>
   c17c2:	ec4b ab10 	vmov	d0, sl, fp
   c17c6:	aa1a      	add	r2, sp, #104	; 0x68
   c17c8:	a919      	add	r1, sp, #100	; 0x64
   c17ca:	4620      	mov	r0, r4
   c17cc:	f001 fc44 	bl	c3058 <__d2b>
   c17d0:	ec4b ab18 	vmov	d8, sl, fp
   c17d4:	9018      	str	r0, [sp, #96]	; 0x60
   c17d6:	2800      	cmp	r0, #0
   c17d8:	f43f aef6 	beq.w	c15c8 <_strtod_l+0x490>
   c17dc:	2101      	movs	r1, #1
   c17de:	4620      	mov	r0, r4
   c17e0:	f001 f98e 	bl	c2b00 <__i2b>
   c17e4:	4606      	mov	r6, r0
   c17e6:	2800      	cmp	r0, #0
   c17e8:	f43f aeee 	beq.w	c15c8 <_strtod_l+0x490>
   c17ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c17ee:	9904      	ldr	r1, [sp, #16]
   c17f0:	2b00      	cmp	r3, #0
   c17f2:	bfab      	itete	ge
   c17f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c17f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c17f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c17fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c17fe:	bfac      	ite	ge
   c1800:	eb03 0902 	addge.w	r9, r3, r2
   c1804:	1ad7      	sublt	r7, r2, r3
   c1806:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1808:	eba3 0801 	sub.w	r8, r3, r1
   c180c:	4490      	add	r8, r2
   c180e:	4ba1      	ldr	r3, [pc, #644]	; (c1a94 <_strtod_l+0x95c>)
   c1810:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1814:	4598      	cmp	r8, r3
   c1816:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c181a:	f280 80c7 	bge.w	c19ac <_strtod_l+0x874>
   c181e:	eba3 0308 	sub.w	r3, r3, r8
   c1822:	2b1f      	cmp	r3, #31
   c1824:	eba2 0203 	sub.w	r2, r2, r3
   c1828:	f04f 0101 	mov.w	r1, #1
   c182c:	f300 80b1 	bgt.w	c1992 <_strtod_l+0x85a>
   c1830:	fa01 f303 	lsl.w	r3, r1, r3
   c1834:	930d      	str	r3, [sp, #52]	; 0x34
   c1836:	2300      	movs	r3, #0
   c1838:	9308      	str	r3, [sp, #32]
   c183a:	eb09 0802 	add.w	r8, r9, r2
   c183e:	9b04      	ldr	r3, [sp, #16]
   c1840:	45c1      	cmp	r9, r8
   c1842:	4417      	add	r7, r2
   c1844:	441f      	add	r7, r3
   c1846:	464b      	mov	r3, r9
   c1848:	bfa8      	it	ge
   c184a:	4643      	movge	r3, r8
   c184c:	42bb      	cmp	r3, r7
   c184e:	bfa8      	it	ge
   c1850:	463b      	movge	r3, r7
   c1852:	2b00      	cmp	r3, #0
   c1854:	bfc2      	ittt	gt
   c1856:	eba8 0803 	subgt.w	r8, r8, r3
   c185a:	1aff      	subgt	r7, r7, r3
   c185c:	eba9 0903 	subgt.w	r9, r9, r3
   c1860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c1862:	2b00      	cmp	r3, #0
   c1864:	dd17      	ble.n	c1896 <_strtod_l+0x75e>
   c1866:	4631      	mov	r1, r6
   c1868:	461a      	mov	r2, r3
   c186a:	4620      	mov	r0, r4
   c186c:	f001 fa08 	bl	c2c80 <__pow5mult>
   c1870:	4606      	mov	r6, r0
   c1872:	2800      	cmp	r0, #0
   c1874:	f43f aea8 	beq.w	c15c8 <_strtod_l+0x490>
   c1878:	4601      	mov	r1, r0
   c187a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c187c:	4620      	mov	r0, r4
   c187e:	f001 f955 	bl	c2b2c <__multiply>
   c1882:	900b      	str	r0, [sp, #44]	; 0x2c
   c1884:	2800      	cmp	r0, #0
   c1886:	f43f ae9f 	beq.w	c15c8 <_strtod_l+0x490>
   c188a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c188c:	4620      	mov	r0, r4
   c188e:	f001 f835 	bl	c28fc <_Bfree>
   c1892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1894:	9318      	str	r3, [sp, #96]	; 0x60
   c1896:	f1b8 0f00 	cmp.w	r8, #0
   c189a:	f300 808c 	bgt.w	c19b6 <_strtod_l+0x87e>
   c189e:	9b06      	ldr	r3, [sp, #24]
   c18a0:	2b00      	cmp	r3, #0
   c18a2:	dd08      	ble.n	c18b6 <_strtod_l+0x77e>
   c18a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c18a6:	9905      	ldr	r1, [sp, #20]
   c18a8:	4620      	mov	r0, r4
   c18aa:	f001 f9e9 	bl	c2c80 <__pow5mult>
   c18ae:	9005      	str	r0, [sp, #20]
   c18b0:	2800      	cmp	r0, #0
   c18b2:	f43f ae89 	beq.w	c15c8 <_strtod_l+0x490>
   c18b6:	2f00      	cmp	r7, #0
   c18b8:	dd08      	ble.n	c18cc <_strtod_l+0x794>
   c18ba:	9905      	ldr	r1, [sp, #20]
   c18bc:	463a      	mov	r2, r7
   c18be:	4620      	mov	r0, r4
   c18c0:	f001 fa38 	bl	c2d34 <__lshift>
   c18c4:	9005      	str	r0, [sp, #20]
   c18c6:	2800      	cmp	r0, #0
   c18c8:	f43f ae7e 	beq.w	c15c8 <_strtod_l+0x490>
   c18cc:	f1b9 0f00 	cmp.w	r9, #0
   c18d0:	dd08      	ble.n	c18e4 <_strtod_l+0x7ac>
   c18d2:	4631      	mov	r1, r6
   c18d4:	464a      	mov	r2, r9
   c18d6:	4620      	mov	r0, r4
   c18d8:	f001 fa2c 	bl	c2d34 <__lshift>
   c18dc:	4606      	mov	r6, r0
   c18de:	2800      	cmp	r0, #0
   c18e0:	f43f ae72 	beq.w	c15c8 <_strtod_l+0x490>
   c18e4:	9a05      	ldr	r2, [sp, #20]
   c18e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c18e8:	4620      	mov	r0, r4
   c18ea:	f001 faaf 	bl	c2e4c <__mdiff>
   c18ee:	4605      	mov	r5, r0
   c18f0:	2800      	cmp	r0, #0
   c18f2:	f43f ae69 	beq.w	c15c8 <_strtod_l+0x490>
   c18f6:	68c3      	ldr	r3, [r0, #12]
   c18f8:	930b      	str	r3, [sp, #44]	; 0x2c
   c18fa:	2300      	movs	r3, #0
   c18fc:	60c3      	str	r3, [r0, #12]
   c18fe:	4631      	mov	r1, r6
   c1900:	f001 fa88 	bl	c2e14 <__mcmp>
   c1904:	2800      	cmp	r0, #0
   c1906:	da60      	bge.n	c19ca <_strtod_l+0x892>
   c1908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c190a:	ea53 030a 	orrs.w	r3, r3, sl
   c190e:	f040 8082 	bne.w	c1a16 <_strtod_l+0x8de>
   c1912:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1916:	2b00      	cmp	r3, #0
   c1918:	d17d      	bne.n	c1a16 <_strtod_l+0x8de>
   c191a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c191e:	0d1b      	lsrs	r3, r3, #20
   c1920:	051b      	lsls	r3, r3, #20
   c1922:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1926:	d976      	bls.n	c1a16 <_strtod_l+0x8de>
   c1928:	696b      	ldr	r3, [r5, #20]
   c192a:	b913      	cbnz	r3, c1932 <_strtod_l+0x7fa>
   c192c:	692b      	ldr	r3, [r5, #16]
   c192e:	2b01      	cmp	r3, #1
   c1930:	dd71      	ble.n	c1a16 <_strtod_l+0x8de>
   c1932:	4629      	mov	r1, r5
   c1934:	2201      	movs	r2, #1
   c1936:	4620      	mov	r0, r4
   c1938:	f001 f9fc 	bl	c2d34 <__lshift>
   c193c:	4631      	mov	r1, r6
   c193e:	4605      	mov	r5, r0
   c1940:	f001 fa68 	bl	c2e14 <__mcmp>
   c1944:	2800      	cmp	r0, #0
   c1946:	dd66      	ble.n	c1a16 <_strtod_l+0x8de>
   c1948:	9904      	ldr	r1, [sp, #16]
   c194a:	4a53      	ldr	r2, [pc, #332]	; (c1a98 <_strtod_l+0x960>)
   c194c:	465b      	mov	r3, fp
   c194e:	2900      	cmp	r1, #0
   c1950:	f000 8081 	beq.w	c1a56 <_strtod_l+0x91e>
   c1954:	ea02 010b 	and.w	r1, r2, fp
   c1958:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c195c:	dc7b      	bgt.n	c1a56 <_strtod_l+0x91e>
   c195e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1962:	f77f aea9 	ble.w	c16b8 <_strtod_l+0x580>
   c1966:	4b4d      	ldr	r3, [pc, #308]	; (c1a9c <_strtod_l+0x964>)
   c1968:	4650      	mov	r0, sl
   c196a:	4659      	mov	r1, fp
   c196c:	2200      	movs	r2, #0
   c196e:	f7fe fed7 	bl	c0720 <__aeabi_dmul>
   c1972:	460b      	mov	r3, r1
   c1974:	4303      	orrs	r3, r0
   c1976:	bf08      	it	eq
   c1978:	2322      	moveq	r3, #34	; 0x22
   c197a:	4682      	mov	sl, r0
   c197c:	468b      	mov	fp, r1
   c197e:	bf08      	it	eq
   c1980:	6023      	streq	r3, [r4, #0]
   c1982:	e62b      	b.n	c15dc <_strtod_l+0x4a4>
   c1984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1988:	fa02 f303 	lsl.w	r3, r2, r3
   c198c:	ea03 0a0a 	and.w	sl, r3, sl
   c1990:	e6e3      	b.n	c175a <_strtod_l+0x622>
   c1992:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1996:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c199a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c199e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c19a2:	fa01 f308 	lsl.w	r3, r1, r8
   c19a6:	9308      	str	r3, [sp, #32]
   c19a8:	910d      	str	r1, [sp, #52]	; 0x34
   c19aa:	e746      	b.n	c183a <_strtod_l+0x702>
   c19ac:	2300      	movs	r3, #0
   c19ae:	9308      	str	r3, [sp, #32]
   c19b0:	2301      	movs	r3, #1
   c19b2:	930d      	str	r3, [sp, #52]	; 0x34
   c19b4:	e741      	b.n	c183a <_strtod_l+0x702>
   c19b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c19b8:	4642      	mov	r2, r8
   c19ba:	4620      	mov	r0, r4
   c19bc:	f001 f9ba 	bl	c2d34 <__lshift>
   c19c0:	9018      	str	r0, [sp, #96]	; 0x60
   c19c2:	2800      	cmp	r0, #0
   c19c4:	f47f af6b 	bne.w	c189e <_strtod_l+0x766>
   c19c8:	e5fe      	b.n	c15c8 <_strtod_l+0x490>
   c19ca:	465f      	mov	r7, fp
   c19cc:	d16e      	bne.n	c1aac <_strtod_l+0x974>
   c19ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c19d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c19d4:	b342      	cbz	r2, c1a28 <_strtod_l+0x8f0>
   c19d6:	4a32      	ldr	r2, [pc, #200]	; (c1aa0 <_strtod_l+0x968>)
   c19d8:	4293      	cmp	r3, r2
   c19da:	d128      	bne.n	c1a2e <_strtod_l+0x8f6>
   c19dc:	9b04      	ldr	r3, [sp, #16]
   c19de:	4651      	mov	r1, sl
   c19e0:	b1eb      	cbz	r3, c1a1e <_strtod_l+0x8e6>
   c19e2:	4b2d      	ldr	r3, [pc, #180]	; (c1a98 <_strtod_l+0x960>)
   c19e4:	403b      	ands	r3, r7
   c19e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c19ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c19ee:	d819      	bhi.n	c1a24 <_strtod_l+0x8ec>
   c19f0:	0d1b      	lsrs	r3, r3, #20
   c19f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c19f6:	fa02 f303 	lsl.w	r3, r2, r3
   c19fa:	4299      	cmp	r1, r3
   c19fc:	d117      	bne.n	c1a2e <_strtod_l+0x8f6>
   c19fe:	4b29      	ldr	r3, [pc, #164]	; (c1aa4 <_strtod_l+0x96c>)
   c1a00:	429f      	cmp	r7, r3
   c1a02:	d102      	bne.n	c1a0a <_strtod_l+0x8d2>
   c1a04:	3101      	adds	r1, #1
   c1a06:	f43f addf 	beq.w	c15c8 <_strtod_l+0x490>
   c1a0a:	4b23      	ldr	r3, [pc, #140]	; (c1a98 <_strtod_l+0x960>)
   c1a0c:	403b      	ands	r3, r7
   c1a0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c1a12:	f04f 0a00 	mov.w	sl, #0
   c1a16:	9b04      	ldr	r3, [sp, #16]
   c1a18:	2b00      	cmp	r3, #0
   c1a1a:	d1a4      	bne.n	c1966 <_strtod_l+0x82e>
   c1a1c:	e5de      	b.n	c15dc <_strtod_l+0x4a4>
   c1a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c1a22:	e7ea      	b.n	c19fa <_strtod_l+0x8c2>
   c1a24:	4613      	mov	r3, r2
   c1a26:	e7e8      	b.n	c19fa <_strtod_l+0x8c2>
   c1a28:	ea53 030a 	orrs.w	r3, r3, sl
   c1a2c:	d08c      	beq.n	c1948 <_strtod_l+0x810>
   c1a2e:	9b08      	ldr	r3, [sp, #32]
   c1a30:	b1db      	cbz	r3, c1a6a <_strtod_l+0x932>
   c1a32:	423b      	tst	r3, r7
   c1a34:	d0ef      	beq.n	c1a16 <_strtod_l+0x8de>
   c1a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1a38:	9a04      	ldr	r2, [sp, #16]
   c1a3a:	4650      	mov	r0, sl
   c1a3c:	4659      	mov	r1, fp
   c1a3e:	b1c3      	cbz	r3, c1a72 <_strtod_l+0x93a>
   c1a40:	f7ff fb5c 	bl	c10fc <sulp>
   c1a44:	4602      	mov	r2, r0
   c1a46:	460b      	mov	r3, r1
   c1a48:	ec51 0b18 	vmov	r0, r1, d8
   c1a4c:	f7fe fcb2 	bl	c03b4 <__adddf3>
   c1a50:	4682      	mov	sl, r0
   c1a52:	468b      	mov	fp, r1
   c1a54:	e7df      	b.n	c1a16 <_strtod_l+0x8de>
   c1a56:	4013      	ands	r3, r2
   c1a58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c1a5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c1a60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c1a64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1a68:	e7d5      	b.n	c1a16 <_strtod_l+0x8de>
   c1a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1a6c:	ea13 0f0a 	tst.w	r3, sl
   c1a70:	e7e0      	b.n	c1a34 <_strtod_l+0x8fc>
   c1a72:	f7ff fb43 	bl	c10fc <sulp>
   c1a76:	4602      	mov	r2, r0
   c1a78:	460b      	mov	r3, r1
   c1a7a:	ec51 0b18 	vmov	r0, r1, d8
   c1a7e:	f7fe fc97 	bl	c03b0 <__aeabi_dsub>
   c1a82:	2200      	movs	r2, #0
   c1a84:	2300      	movs	r3, #0
   c1a86:	4682      	mov	sl, r0
   c1a88:	468b      	mov	fp, r1
   c1a8a:	f7ff f8b1 	bl	c0bf0 <__aeabi_dcmpeq>
   c1a8e:	2800      	cmp	r0, #0
   c1a90:	d0c1      	beq.n	c1a16 <_strtod_l+0x8de>
   c1a92:	e611      	b.n	c16b8 <_strtod_l+0x580>
   c1a94:	fffffc02 	.word	0xfffffc02
   c1a98:	7ff00000 	.word	0x7ff00000
   c1a9c:	39500000 	.word	0x39500000
   c1aa0:	000fffff 	.word	0x000fffff
   c1aa4:	7fefffff 	.word	0x7fefffff
   c1aa8:	000c5158 	.word	0x000c5158
   c1aac:	4631      	mov	r1, r6
   c1aae:	4628      	mov	r0, r5
   c1ab0:	f001 fb2e 	bl	c3110 <__ratio>
   c1ab4:	ec59 8b10 	vmov	r8, r9, d0
   c1ab8:	ee10 0a10 	vmov	r0, s0
   c1abc:	2200      	movs	r2, #0
   c1abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c1ac2:	4649      	mov	r1, r9
   c1ac4:	f7ff f8a8 	bl	c0c18 <__aeabi_dcmple>
   c1ac8:	2800      	cmp	r0, #0
   c1aca:	d07a      	beq.n	c1bc2 <_strtod_l+0xa8a>
   c1acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1ace:	2b00      	cmp	r3, #0
   c1ad0:	d04a      	beq.n	c1b68 <_strtod_l+0xa30>
   c1ad2:	4b95      	ldr	r3, [pc, #596]	; (c1d28 <_strtod_l+0xbf0>)
   c1ad4:	2200      	movs	r2, #0
   c1ad6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1ada:	f8df 924c 	ldr.w	r9, [pc, #588]	; c1d28 <_strtod_l+0xbf0>
   c1ade:	f04f 0800 	mov.w	r8, #0
   c1ae2:	4b92      	ldr	r3, [pc, #584]	; (c1d2c <_strtod_l+0xbf4>)
   c1ae4:	403b      	ands	r3, r7
   c1ae6:	930d      	str	r3, [sp, #52]	; 0x34
   c1ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1aea:	4b91      	ldr	r3, [pc, #580]	; (c1d30 <_strtod_l+0xbf8>)
   c1aec:	429a      	cmp	r2, r3
   c1aee:	f040 80b0 	bne.w	c1c52 <_strtod_l+0xb1a>
   c1af2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1af6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c1afa:	ec4b ab10 	vmov	d0, sl, fp
   c1afe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1b02:	f001 fa2d 	bl	c2f60 <__ulp>
   c1b06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1b0a:	ec53 2b10 	vmov	r2, r3, d0
   c1b0e:	f7fe fe07 	bl	c0720 <__aeabi_dmul>
   c1b12:	4652      	mov	r2, sl
   c1b14:	465b      	mov	r3, fp
   c1b16:	f7fe fc4d 	bl	c03b4 <__adddf3>
   c1b1a:	460b      	mov	r3, r1
   c1b1c:	4983      	ldr	r1, [pc, #524]	; (c1d2c <_strtod_l+0xbf4>)
   c1b1e:	4a85      	ldr	r2, [pc, #532]	; (c1d34 <_strtod_l+0xbfc>)
   c1b20:	4019      	ands	r1, r3
   c1b22:	4291      	cmp	r1, r2
   c1b24:	4682      	mov	sl, r0
   c1b26:	d960      	bls.n	c1bea <_strtod_l+0xab2>
   c1b28:	ee18 3a90 	vmov	r3, s17
   c1b2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c1b30:	4293      	cmp	r3, r2
   c1b32:	d104      	bne.n	c1b3e <_strtod_l+0xa06>
   c1b34:	ee18 3a10 	vmov	r3, s16
   c1b38:	3301      	adds	r3, #1
   c1b3a:	f43f ad45 	beq.w	c15c8 <_strtod_l+0x490>
   c1b3e:	f8df b200 	ldr.w	fp, [pc, #512]	; c1d40 <_strtod_l+0xc08>
   c1b42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1b46:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1b48:	4620      	mov	r0, r4
   c1b4a:	f000 fed7 	bl	c28fc <_Bfree>
   c1b4e:	9905      	ldr	r1, [sp, #20]
   c1b50:	4620      	mov	r0, r4
   c1b52:	f000 fed3 	bl	c28fc <_Bfree>
   c1b56:	4631      	mov	r1, r6
   c1b58:	4620      	mov	r0, r4
   c1b5a:	f000 fecf 	bl	c28fc <_Bfree>
   c1b5e:	4629      	mov	r1, r5
   c1b60:	4620      	mov	r0, r4
   c1b62:	f000 fecb 	bl	c28fc <_Bfree>
   c1b66:	e61a      	b.n	c179e <_strtod_l+0x666>
   c1b68:	f1ba 0f00 	cmp.w	sl, #0
   c1b6c:	d11b      	bne.n	c1ba6 <_strtod_l+0xa6e>
   c1b6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1b72:	b9f3      	cbnz	r3, c1bb2 <_strtod_l+0xa7a>
   c1b74:	4b6c      	ldr	r3, [pc, #432]	; (c1d28 <_strtod_l+0xbf0>)
   c1b76:	2200      	movs	r2, #0
   c1b78:	4640      	mov	r0, r8
   c1b7a:	4649      	mov	r1, r9
   c1b7c:	f7ff f842 	bl	c0c04 <__aeabi_dcmplt>
   c1b80:	b9d0      	cbnz	r0, c1bb8 <_strtod_l+0xa80>
   c1b82:	4640      	mov	r0, r8
   c1b84:	4649      	mov	r1, r9
   c1b86:	4b6c      	ldr	r3, [pc, #432]	; (c1d38 <_strtod_l+0xc00>)
   c1b88:	2200      	movs	r2, #0
   c1b8a:	f7fe fdc9 	bl	c0720 <__aeabi_dmul>
   c1b8e:	4680      	mov	r8, r0
   c1b90:	4689      	mov	r9, r1
   c1b92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c1b96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c1b9a:	9315      	str	r3, [sp, #84]	; 0x54
   c1b9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c1ba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1ba4:	e79d      	b.n	c1ae2 <_strtod_l+0x9aa>
   c1ba6:	f1ba 0f01 	cmp.w	sl, #1
   c1baa:	d102      	bne.n	c1bb2 <_strtod_l+0xa7a>
   c1bac:	2f00      	cmp	r7, #0
   c1bae:	f43f ad83 	beq.w	c16b8 <_strtod_l+0x580>
   c1bb2:	4b62      	ldr	r3, [pc, #392]	; (c1d3c <_strtod_l+0xc04>)
   c1bb4:	2200      	movs	r2, #0
   c1bb6:	e78e      	b.n	c1ad6 <_strtod_l+0x99e>
   c1bb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c1d38 <_strtod_l+0xc00>
   c1bbc:	f04f 0800 	mov.w	r8, #0
   c1bc0:	e7e7      	b.n	c1b92 <_strtod_l+0xa5a>
   c1bc2:	4b5d      	ldr	r3, [pc, #372]	; (c1d38 <_strtod_l+0xc00>)
   c1bc4:	4640      	mov	r0, r8
   c1bc6:	4649      	mov	r1, r9
   c1bc8:	2200      	movs	r2, #0
   c1bca:	f7fe fda9 	bl	c0720 <__aeabi_dmul>
   c1bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1bd0:	4680      	mov	r8, r0
   c1bd2:	4689      	mov	r9, r1
   c1bd4:	b933      	cbnz	r3, c1be4 <_strtod_l+0xaac>
   c1bd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1bda:	900e      	str	r0, [sp, #56]	; 0x38
   c1bdc:	930f      	str	r3, [sp, #60]	; 0x3c
   c1bde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c1be2:	e7dd      	b.n	c1ba0 <_strtod_l+0xa68>
   c1be4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c1be8:	e7f9      	b.n	c1bde <_strtod_l+0xaa6>
   c1bea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c1bee:	9b04      	ldr	r3, [sp, #16]
   c1bf0:	2b00      	cmp	r3, #0
   c1bf2:	d1a8      	bne.n	c1b46 <_strtod_l+0xa0e>
   c1bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1bfa:	0d1b      	lsrs	r3, r3, #20
   c1bfc:	051b      	lsls	r3, r3, #20
   c1bfe:	429a      	cmp	r2, r3
   c1c00:	d1a1      	bne.n	c1b46 <_strtod_l+0xa0e>
   c1c02:	4640      	mov	r0, r8
   c1c04:	4649      	mov	r1, r9
   c1c06:	f001 fb33 	bl	c3270 <__aeabi_d2lz>
   c1c0a:	f7fe fd5b 	bl	c06c4 <__aeabi_l2d>
   c1c0e:	4602      	mov	r2, r0
   c1c10:	460b      	mov	r3, r1
   c1c12:	4640      	mov	r0, r8
   c1c14:	4649      	mov	r1, r9
   c1c16:	f7fe fbcb 	bl	c03b0 <__aeabi_dsub>
   c1c1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1c20:	ea43 030a 	orr.w	r3, r3, sl
   c1c24:	4313      	orrs	r3, r2
   c1c26:	4680      	mov	r8, r0
   c1c28:	4689      	mov	r9, r1
   c1c2a:	d055      	beq.n	c1cd8 <_strtod_l+0xba0>
   c1c2c:	a336      	add	r3, pc, #216	; (adr r3, c1d08 <_strtod_l+0xbd0>)
   c1c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c32:	f7fe ffe7 	bl	c0c04 <__aeabi_dcmplt>
   c1c36:	2800      	cmp	r0, #0
   c1c38:	f47f acd0 	bne.w	c15dc <_strtod_l+0x4a4>
   c1c3c:	a334      	add	r3, pc, #208	; (adr r3, c1d10 <_strtod_l+0xbd8>)
   c1c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c42:	4640      	mov	r0, r8
   c1c44:	4649      	mov	r1, r9
   c1c46:	f7fe fffb 	bl	c0c40 <__aeabi_dcmpgt>
   c1c4a:	2800      	cmp	r0, #0
   c1c4c:	f43f af7b 	beq.w	c1b46 <_strtod_l+0xa0e>
   c1c50:	e4c4      	b.n	c15dc <_strtod_l+0x4a4>
   c1c52:	9b04      	ldr	r3, [sp, #16]
   c1c54:	b333      	cbz	r3, c1ca4 <_strtod_l+0xb6c>
   c1c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1c58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1c5c:	d822      	bhi.n	c1ca4 <_strtod_l+0xb6c>
   c1c5e:	a32e      	add	r3, pc, #184	; (adr r3, c1d18 <_strtod_l+0xbe0>)
   c1c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c64:	4640      	mov	r0, r8
   c1c66:	4649      	mov	r1, r9
   c1c68:	f7fe ffd6 	bl	c0c18 <__aeabi_dcmple>
   c1c6c:	b1a0      	cbz	r0, c1c98 <_strtod_l+0xb60>
   c1c6e:	4649      	mov	r1, r9
   c1c70:	4640      	mov	r0, r8
   c1c72:	f7ff f82d 	bl	c0cd0 <__aeabi_d2uiz>
   c1c76:	2801      	cmp	r0, #1
   c1c78:	bf38      	it	cc
   c1c7a:	2001      	movcc	r0, #1
   c1c7c:	f7fe fcd6 	bl	c062c <__aeabi_ui2d>
   c1c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c82:	4680      	mov	r8, r0
   c1c84:	4689      	mov	r9, r1
   c1c86:	bb23      	cbnz	r3, c1cd2 <_strtod_l+0xb9a>
   c1c88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1c8c:	9010      	str	r0, [sp, #64]	; 0x40
   c1c8e:	9311      	str	r3, [sp, #68]	; 0x44
   c1c90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c1c94:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c1c9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1c9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c1ca0:	1a9b      	subs	r3, r3, r2
   c1ca2:	9309      	str	r3, [sp, #36]	; 0x24
   c1ca4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1ca8:	eeb0 0a48 	vmov.f32	s0, s16
   c1cac:	eef0 0a68 	vmov.f32	s1, s17
   c1cb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1cb4:	f001 f954 	bl	c2f60 <__ulp>
   c1cb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1cbc:	ec53 2b10 	vmov	r2, r3, d0
   c1cc0:	f7fe fd2e 	bl	c0720 <__aeabi_dmul>
   c1cc4:	ec53 2b18 	vmov	r2, r3, d8
   c1cc8:	f7fe fb74 	bl	c03b4 <__adddf3>
   c1ccc:	4682      	mov	sl, r0
   c1cce:	468b      	mov	fp, r1
   c1cd0:	e78d      	b.n	c1bee <_strtod_l+0xab6>
   c1cd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c1cd6:	e7db      	b.n	c1c90 <_strtod_l+0xb58>
   c1cd8:	a311      	add	r3, pc, #68	; (adr r3, c1d20 <_strtod_l+0xbe8>)
   c1cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1cde:	f7fe ff91 	bl	c0c04 <__aeabi_dcmplt>
   c1ce2:	e7b2      	b.n	c1c4a <_strtod_l+0xb12>
   c1ce4:	2300      	movs	r3, #0
   c1ce6:	930a      	str	r3, [sp, #40]	; 0x28
   c1ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c1cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1cec:	6013      	str	r3, [r2, #0]
   c1cee:	f7ff ba6b 	b.w	c11c8 <_strtod_l+0x90>
   c1cf2:	2a65      	cmp	r2, #101	; 0x65
   c1cf4:	f43f ab5f 	beq.w	c13b6 <_strtod_l+0x27e>
   c1cf8:	2a45      	cmp	r2, #69	; 0x45
   c1cfa:	f43f ab5c 	beq.w	c13b6 <_strtod_l+0x27e>
   c1cfe:	2301      	movs	r3, #1
   c1d00:	f7ff bb94 	b.w	c142c <_strtod_l+0x2f4>
   c1d04:	f3af 8000 	nop.w
   c1d08:	94a03595 	.word	0x94a03595
   c1d0c:	3fdfffff 	.word	0x3fdfffff
   c1d10:	35afe535 	.word	0x35afe535
   c1d14:	3fe00000 	.word	0x3fe00000
   c1d18:	ffc00000 	.word	0xffc00000
   c1d1c:	41dfffff 	.word	0x41dfffff
   c1d20:	94a03595 	.word	0x94a03595
   c1d24:	3fcfffff 	.word	0x3fcfffff
   c1d28:	3ff00000 	.word	0x3ff00000
   c1d2c:	7ff00000 	.word	0x7ff00000
   c1d30:	7fe00000 	.word	0x7fe00000
   c1d34:	7c9fffff 	.word	0x7c9fffff
   c1d38:	3fe00000 	.word	0x3fe00000
   c1d3c:	bff00000 	.word	0xbff00000
   c1d40:	7fefffff 	.word	0x7fefffff

000c1d44 <strtof>:
   c1d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1d48:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c1df8 <strtof+0xb4>
   c1d4c:	4b26      	ldr	r3, [pc, #152]	; (c1de8 <strtof+0xa4>)
   c1d4e:	460a      	mov	r2, r1
   c1d50:	ed2d 8b02 	vpush	{d8}
   c1d54:	4601      	mov	r1, r0
   c1d56:	f8d8 0000 	ldr.w	r0, [r8]
   c1d5a:	f7ff f9ed 	bl	c1138 <_strtod_l>
   c1d5e:	ec55 4b10 	vmov	r4, r5, d0
   c1d62:	ee10 2a10 	vmov	r2, s0
   c1d66:	ee10 0a10 	vmov	r0, s0
   c1d6a:	462b      	mov	r3, r5
   c1d6c:	4629      	mov	r1, r5
   c1d6e:	f7fe ff71 	bl	c0c54 <__aeabi_dcmpun>
   c1d72:	b190      	cbz	r0, c1d9a <strtof+0x56>
   c1d74:	2d00      	cmp	r5, #0
   c1d76:	481d      	ldr	r0, [pc, #116]	; (c1dec <strtof+0xa8>)
   c1d78:	da09      	bge.n	c1d8e <strtof+0x4a>
   c1d7a:	f001 fa65 	bl	c3248 <nanf>
   c1d7e:	eeb1 8a40 	vneg.f32	s16, s0
   c1d82:	eeb0 0a48 	vmov.f32	s0, s16
   c1d86:	ecbd 8b02 	vpop	{d8}
   c1d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1d8e:	ecbd 8b02 	vpop	{d8}
   c1d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1d96:	f001 ba57 	b.w	c3248 <nanf>
   c1d9a:	4620      	mov	r0, r4
   c1d9c:	4629      	mov	r1, r5
   c1d9e:	f7fe ffb7 	bl	c0d10 <__aeabi_d2f>
   c1da2:	ee08 0a10 	vmov	s16, r0
   c1da6:	eddf 7a12 	vldr	s15, [pc, #72]	; c1df0 <strtof+0xac>
   c1daa:	eeb0 7ac8 	vabs.f32	s14, s16
   c1dae:	eeb4 7a67 	vcmp.f32	s14, s15
   c1db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1db6:	dde4      	ble.n	c1d82 <strtof+0x3e>
   c1db8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c1dbc:	4b0d      	ldr	r3, [pc, #52]	; (c1df4 <strtof+0xb0>)
   c1dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1dc2:	4620      	mov	r0, r4
   c1dc4:	4639      	mov	r1, r7
   c1dc6:	f7fe ff45 	bl	c0c54 <__aeabi_dcmpun>
   c1dca:	b940      	cbnz	r0, c1dde <strtof+0x9a>
   c1dcc:	4b09      	ldr	r3, [pc, #36]	; (c1df4 <strtof+0xb0>)
   c1dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1dd2:	4620      	mov	r0, r4
   c1dd4:	4639      	mov	r1, r7
   c1dd6:	f7fe ff1f 	bl	c0c18 <__aeabi_dcmple>
   c1dda:	2800      	cmp	r0, #0
   c1ddc:	d0d1      	beq.n	c1d82 <strtof+0x3e>
   c1dde:	f8d8 3000 	ldr.w	r3, [r8]
   c1de2:	2222      	movs	r2, #34	; 0x22
   c1de4:	601a      	str	r2, [r3, #0]
   c1de6:	e7cc      	b.n	c1d82 <strtof+0x3e>
   c1de8:	2003d708 	.word	0x2003d708
   c1dec:	000c4e80 	.word	0x000c4e80
   c1df0:	7f7fffff 	.word	0x7f7fffff
   c1df4:	7fefffff 	.word	0x7fefffff
   c1df8:	2003d69c 	.word	0x2003d69c

000c1dfc <__strtok_r>:
   c1dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1dfe:	b908      	cbnz	r0, c1e04 <__strtok_r+0x8>
   c1e00:	6810      	ldr	r0, [r2, #0]
   c1e02:	b188      	cbz	r0, c1e28 <__strtok_r+0x2c>
   c1e04:	4604      	mov	r4, r0
   c1e06:	4620      	mov	r0, r4
   c1e08:	f814 5b01 	ldrb.w	r5, [r4], #1
   c1e0c:	460f      	mov	r7, r1
   c1e0e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c1e12:	b91e      	cbnz	r6, c1e1c <__strtok_r+0x20>
   c1e14:	b965      	cbnz	r5, c1e30 <__strtok_r+0x34>
   c1e16:	6015      	str	r5, [r2, #0]
   c1e18:	4628      	mov	r0, r5
   c1e1a:	e005      	b.n	c1e28 <__strtok_r+0x2c>
   c1e1c:	42b5      	cmp	r5, r6
   c1e1e:	d1f6      	bne.n	c1e0e <__strtok_r+0x12>
   c1e20:	2b00      	cmp	r3, #0
   c1e22:	d1f0      	bne.n	c1e06 <__strtok_r+0xa>
   c1e24:	6014      	str	r4, [r2, #0]
   c1e26:	7003      	strb	r3, [r0, #0]
   c1e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1e2a:	461c      	mov	r4, r3
   c1e2c:	e00c      	b.n	c1e48 <__strtok_r+0x4c>
   c1e2e:	b915      	cbnz	r5, c1e36 <__strtok_r+0x3a>
   c1e30:	f814 3b01 	ldrb.w	r3, [r4], #1
   c1e34:	460e      	mov	r6, r1
   c1e36:	f816 5b01 	ldrb.w	r5, [r6], #1
   c1e3a:	42ab      	cmp	r3, r5
   c1e3c:	d1f7      	bne.n	c1e2e <__strtok_r+0x32>
   c1e3e:	2b00      	cmp	r3, #0
   c1e40:	d0f3      	beq.n	c1e2a <__strtok_r+0x2e>
   c1e42:	2300      	movs	r3, #0
   c1e44:	f804 3c01 	strb.w	r3, [r4, #-1]
   c1e48:	6014      	str	r4, [r2, #0]
   c1e4a:	e7ed      	b.n	c1e28 <__strtok_r+0x2c>

000c1e4c <strtok_r>:
   c1e4c:	2301      	movs	r3, #1
   c1e4e:	f7ff bfd5 	b.w	c1dfc <__strtok_r>
	...

000c1e54 <_strtol_l.constprop.0>:
   c1e54:	2b01      	cmp	r3, #1
   c1e56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1e5a:	d001      	beq.n	c1e60 <_strtol_l.constprop.0+0xc>
   c1e5c:	2b24      	cmp	r3, #36	; 0x24
   c1e5e:	d906      	bls.n	c1e6e <_strtol_l.constprop.0+0x1a>
   c1e60:	f7fb f8b4 	bl	bcfcc <__errno>
   c1e64:	2316      	movs	r3, #22
   c1e66:	6003      	str	r3, [r0, #0]
   c1e68:	2000      	movs	r0, #0
   c1e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1e6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c1f54 <_strtol_l.constprop.0+0x100>
   c1e72:	460d      	mov	r5, r1
   c1e74:	462e      	mov	r6, r5
   c1e76:	f815 4b01 	ldrb.w	r4, [r5], #1
   c1e7a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c1e7e:	f017 0708 	ands.w	r7, r7, #8
   c1e82:	d1f7      	bne.n	c1e74 <_strtol_l.constprop.0+0x20>
   c1e84:	2c2d      	cmp	r4, #45	; 0x2d
   c1e86:	d132      	bne.n	c1eee <_strtol_l.constprop.0+0x9a>
   c1e88:	782c      	ldrb	r4, [r5, #0]
   c1e8a:	2701      	movs	r7, #1
   c1e8c:	1cb5      	adds	r5, r6, #2
   c1e8e:	2b00      	cmp	r3, #0
   c1e90:	d05b      	beq.n	c1f4a <_strtol_l.constprop.0+0xf6>
   c1e92:	2b10      	cmp	r3, #16
   c1e94:	d109      	bne.n	c1eaa <_strtol_l.constprop.0+0x56>
   c1e96:	2c30      	cmp	r4, #48	; 0x30
   c1e98:	d107      	bne.n	c1eaa <_strtol_l.constprop.0+0x56>
   c1e9a:	782c      	ldrb	r4, [r5, #0]
   c1e9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c1ea0:	2c58      	cmp	r4, #88	; 0x58
   c1ea2:	d14d      	bne.n	c1f40 <_strtol_l.constprop.0+0xec>
   c1ea4:	786c      	ldrb	r4, [r5, #1]
   c1ea6:	2310      	movs	r3, #16
   c1ea8:	3502      	adds	r5, #2
   c1eaa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c1eae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1eb2:	f04f 0c00 	mov.w	ip, #0
   c1eb6:	fbb8 f9f3 	udiv	r9, r8, r3
   c1eba:	4666      	mov	r6, ip
   c1ebc:	fb03 8a19 	mls	sl, r3, r9, r8
   c1ec0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c1ec4:	f1be 0f09 	cmp.w	lr, #9
   c1ec8:	d816      	bhi.n	c1ef8 <_strtol_l.constprop.0+0xa4>
   c1eca:	4674      	mov	r4, lr
   c1ecc:	42a3      	cmp	r3, r4
   c1ece:	dd24      	ble.n	c1f1a <_strtol_l.constprop.0+0xc6>
   c1ed0:	f1bc 0f00 	cmp.w	ip, #0
   c1ed4:	db1e      	blt.n	c1f14 <_strtol_l.constprop.0+0xc0>
   c1ed6:	45b1      	cmp	r9, r6
   c1ed8:	d31c      	bcc.n	c1f14 <_strtol_l.constprop.0+0xc0>
   c1eda:	d101      	bne.n	c1ee0 <_strtol_l.constprop.0+0x8c>
   c1edc:	45a2      	cmp	sl, r4
   c1ede:	db19      	blt.n	c1f14 <_strtol_l.constprop.0+0xc0>
   c1ee0:	fb06 4603 	mla	r6, r6, r3, r4
   c1ee4:	f04f 0c01 	mov.w	ip, #1
   c1ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
   c1eec:	e7e8      	b.n	c1ec0 <_strtol_l.constprop.0+0x6c>
   c1eee:	2c2b      	cmp	r4, #43	; 0x2b
   c1ef0:	bf04      	itt	eq
   c1ef2:	782c      	ldrbeq	r4, [r5, #0]
   c1ef4:	1cb5      	addeq	r5, r6, #2
   c1ef6:	e7ca      	b.n	c1e8e <_strtol_l.constprop.0+0x3a>
   c1ef8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c1efc:	f1be 0f19 	cmp.w	lr, #25
   c1f00:	d801      	bhi.n	c1f06 <_strtol_l.constprop.0+0xb2>
   c1f02:	3c37      	subs	r4, #55	; 0x37
   c1f04:	e7e2      	b.n	c1ecc <_strtol_l.constprop.0+0x78>
   c1f06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c1f0a:	f1be 0f19 	cmp.w	lr, #25
   c1f0e:	d804      	bhi.n	c1f1a <_strtol_l.constprop.0+0xc6>
   c1f10:	3c57      	subs	r4, #87	; 0x57
   c1f12:	e7db      	b.n	c1ecc <_strtol_l.constprop.0+0x78>
   c1f14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c1f18:	e7e6      	b.n	c1ee8 <_strtol_l.constprop.0+0x94>
   c1f1a:	f1bc 0f00 	cmp.w	ip, #0
   c1f1e:	da05      	bge.n	c1f2c <_strtol_l.constprop.0+0xd8>
   c1f20:	2322      	movs	r3, #34	; 0x22
   c1f22:	6003      	str	r3, [r0, #0]
   c1f24:	4646      	mov	r6, r8
   c1f26:	b942      	cbnz	r2, c1f3a <_strtol_l.constprop.0+0xe6>
   c1f28:	4630      	mov	r0, r6
   c1f2a:	e79e      	b.n	c1e6a <_strtol_l.constprop.0+0x16>
   c1f2c:	b107      	cbz	r7, c1f30 <_strtol_l.constprop.0+0xdc>
   c1f2e:	4276      	negs	r6, r6
   c1f30:	2a00      	cmp	r2, #0
   c1f32:	d0f9      	beq.n	c1f28 <_strtol_l.constprop.0+0xd4>
   c1f34:	f1bc 0f00 	cmp.w	ip, #0
   c1f38:	d000      	beq.n	c1f3c <_strtol_l.constprop.0+0xe8>
   c1f3a:	1e69      	subs	r1, r5, #1
   c1f3c:	6011      	str	r1, [r2, #0]
   c1f3e:	e7f3      	b.n	c1f28 <_strtol_l.constprop.0+0xd4>
   c1f40:	2430      	movs	r4, #48	; 0x30
   c1f42:	2b00      	cmp	r3, #0
   c1f44:	d1b1      	bne.n	c1eaa <_strtol_l.constprop.0+0x56>
   c1f46:	2308      	movs	r3, #8
   c1f48:	e7af      	b.n	c1eaa <_strtol_l.constprop.0+0x56>
   c1f4a:	2c30      	cmp	r4, #48	; 0x30
   c1f4c:	d0a5      	beq.n	c1e9a <_strtol_l.constprop.0+0x46>
   c1f4e:	230a      	movs	r3, #10
   c1f50:	e7ab      	b.n	c1eaa <_strtol_l.constprop.0+0x56>
   c1f52:	bf00      	nop
   c1f54:	000c5181 	.word	0x000c5181

000c1f58 <strtol>:
   c1f58:	4613      	mov	r3, r2
   c1f5a:	460a      	mov	r2, r1
   c1f5c:	4601      	mov	r1, r0
   c1f5e:	4802      	ldr	r0, [pc, #8]	; (c1f68 <strtol+0x10>)
   c1f60:	6800      	ldr	r0, [r0, #0]
   c1f62:	f7ff bf77 	b.w	c1e54 <_strtol_l.constprop.0>
   c1f66:	bf00      	nop
   c1f68:	2003d69c 	.word	0x2003d69c

000c1f6c <close>:
   c1f6c:	4b02      	ldr	r3, [pc, #8]	; (c1f78 <close+0xc>)
   c1f6e:	4601      	mov	r1, r0
   c1f70:	6818      	ldr	r0, [r3, #0]
   c1f72:	f000 b8c9 	b.w	c2108 <_close_r>
   c1f76:	bf00      	nop
   c1f78:	2003d69c 	.word	0x2003d69c

000c1f7c <fstat>:
   c1f7c:	4b02      	ldr	r3, [pc, #8]	; (c1f88 <fstat+0xc>)
   c1f7e:	460a      	mov	r2, r1
   c1f80:	4601      	mov	r1, r0
   c1f82:	6818      	ldr	r0, [r3, #0]
   c1f84:	f000 b8d0 	b.w	c2128 <_fstat_r>
   c1f88:	2003d69c 	.word	0x2003d69c

000c1f8c <lseek>:
   c1f8c:	4613      	mov	r3, r2
   c1f8e:	460a      	mov	r2, r1
   c1f90:	4601      	mov	r1, r0
   c1f92:	4802      	ldr	r0, [pc, #8]	; (c1f9c <lseek+0x10>)
   c1f94:	6800      	ldr	r0, [r0, #0]
   c1f96:	f000 bc4d 	b.w	c2834 <_lseek_r>
   c1f9a:	bf00      	nop
   c1f9c:	2003d69c 	.word	0x2003d69c

000c1fa0 <open>:
   c1fa0:	b40e      	push	{r1, r2, r3}
   c1fa2:	b503      	push	{r0, r1, lr}
   c1fa4:	ab03      	add	r3, sp, #12
   c1fa6:	4601      	mov	r1, r0
   c1fa8:	4806      	ldr	r0, [pc, #24]	; (c1fc4 <open+0x24>)
   c1faa:	f853 2b04 	ldr.w	r2, [r3], #4
   c1fae:	9301      	str	r3, [sp, #4]
   c1fb0:	6800      	ldr	r0, [r0, #0]
   c1fb2:	9b04      	ldr	r3, [sp, #16]
   c1fb4:	f001 f924 	bl	c3200 <_open_r>
   c1fb8:	b002      	add	sp, #8
   c1fba:	f85d eb04 	ldr.w	lr, [sp], #4
   c1fbe:	b003      	add	sp, #12
   c1fc0:	4770      	bx	lr
   c1fc2:	bf00      	nop
   c1fc4:	2003d69c 	.word	0x2003d69c

000c1fc8 <read>:
   c1fc8:	4613      	mov	r3, r2
   c1fca:	460a      	mov	r2, r1
   c1fcc:	4601      	mov	r1, r0
   c1fce:	4802      	ldr	r0, [pc, #8]	; (c1fd8 <read+0x10>)
   c1fd0:	6800      	ldr	r0, [r0, #0]
   c1fd2:	f001 b927 	b.w	c3224 <_read_r>
   c1fd6:	bf00      	nop
   c1fd8:	2003d69c 	.word	0x2003d69c

000c1fdc <unlink>:
   c1fdc:	4b02      	ldr	r3, [pc, #8]	; (c1fe8 <unlink+0xc>)
   c1fde:	4601      	mov	r1, r0
   c1fe0:	6818      	ldr	r0, [r3, #0]
   c1fe2:	f000 b80d 	b.w	c2000 <_unlink_r>
   c1fe6:	bf00      	nop
   c1fe8:	2003d69c 	.word	0x2003d69c

000c1fec <write>:
   c1fec:	4613      	mov	r3, r2
   c1fee:	460a      	mov	r2, r1
   c1ff0:	4601      	mov	r1, r0
   c1ff2:	4802      	ldr	r0, [pc, #8]	; (c1ffc <write+0x10>)
   c1ff4:	6800      	ldr	r0, [r0, #0]
   c1ff6:	f000 b813 	b.w	c2020 <_write_r>
   c1ffa:	bf00      	nop
   c1ffc:	2003d69c 	.word	0x2003d69c

000c2000 <_unlink_r>:
   c2000:	b538      	push	{r3, r4, r5, lr}
   c2002:	4d06      	ldr	r5, [pc, #24]	; (c201c <_unlink_r+0x1c>)
   c2004:	2300      	movs	r3, #0
   c2006:	4604      	mov	r4, r0
   c2008:	4608      	mov	r0, r1
   c200a:	602b      	str	r3, [r5, #0]
   c200c:	f7fa fd7a 	bl	bcb04 <_unlink>
   c2010:	1c43      	adds	r3, r0, #1
   c2012:	d102      	bne.n	c201a <_unlink_r+0x1a>
   c2014:	682b      	ldr	r3, [r5, #0]
   c2016:	b103      	cbz	r3, c201a <_unlink_r+0x1a>
   c2018:	6023      	str	r3, [r4, #0]
   c201a:	bd38      	pop	{r3, r4, r5, pc}
   c201c:	2003e7f0 	.word	0x2003e7f0

000c2020 <_write_r>:
   c2020:	b538      	push	{r3, r4, r5, lr}
   c2022:	4d07      	ldr	r5, [pc, #28]	; (c2040 <_write_r+0x20>)
   c2024:	4604      	mov	r4, r0
   c2026:	4608      	mov	r0, r1
   c2028:	4611      	mov	r1, r2
   c202a:	2200      	movs	r2, #0
   c202c:	602a      	str	r2, [r5, #0]
   c202e:	461a      	mov	r2, r3
   c2030:	f7fa fd30 	bl	bca94 <_write>
   c2034:	1c43      	adds	r3, r0, #1
   c2036:	d102      	bne.n	c203e <_write_r+0x1e>
   c2038:	682b      	ldr	r3, [r5, #0]
   c203a:	b103      	cbz	r3, c203e <_write_r+0x1e>
   c203c:	6023      	str	r3, [r4, #0]
   c203e:	bd38      	pop	{r3, r4, r5, pc}
   c2040:	2003e7f0 	.word	0x2003e7f0

000c2044 <__register_exitproc>:
   c2044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2048:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c2104 <__register_exitproc+0xc0>
   c204c:	4606      	mov	r6, r0
   c204e:	f8d8 0000 	ldr.w	r0, [r8]
   c2052:	461f      	mov	r7, r3
   c2054:	460d      	mov	r5, r1
   c2056:	4691      	mov	r9, r2
   c2058:	f000 fbe8 	bl	c282c <__retarget_lock_acquire_recursive>
   c205c:	4b25      	ldr	r3, [pc, #148]	; (c20f4 <__register_exitproc+0xb0>)
   c205e:	681c      	ldr	r4, [r3, #0]
   c2060:	b934      	cbnz	r4, c2070 <__register_exitproc+0x2c>
   c2062:	4c25      	ldr	r4, [pc, #148]	; (c20f8 <__register_exitproc+0xb4>)
   c2064:	601c      	str	r4, [r3, #0]
   c2066:	4b25      	ldr	r3, [pc, #148]	; (c20fc <__register_exitproc+0xb8>)
   c2068:	b113      	cbz	r3, c2070 <__register_exitproc+0x2c>
   c206a:	681b      	ldr	r3, [r3, #0]
   c206c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c2070:	6863      	ldr	r3, [r4, #4]
   c2072:	2b1f      	cmp	r3, #31
   c2074:	dd07      	ble.n	c2086 <__register_exitproc+0x42>
   c2076:	f8d8 0000 	ldr.w	r0, [r8]
   c207a:	f000 fbd9 	bl	c2830 <__retarget_lock_release_recursive>
   c207e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2086:	b34e      	cbz	r6, c20dc <__register_exitproc+0x98>
   c2088:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c208c:	b988      	cbnz	r0, c20b2 <__register_exitproc+0x6e>
   c208e:	4b1c      	ldr	r3, [pc, #112]	; (c2100 <__register_exitproc+0xbc>)
   c2090:	b923      	cbnz	r3, c209c <__register_exitproc+0x58>
   c2092:	f8d8 0000 	ldr.w	r0, [r8]
   c2096:	f000 fbca 	bl	c282e <__retarget_lock_release>
   c209a:	e7f0      	b.n	c207e <__register_exitproc+0x3a>
   c209c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c20a0:	f7fa ff4c 	bl	bcf3c <malloc>
   c20a4:	2800      	cmp	r0, #0
   c20a6:	d0f4      	beq.n	c2092 <__register_exitproc+0x4e>
   c20a8:	2300      	movs	r3, #0
   c20aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c20ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c20b2:	6863      	ldr	r3, [r4, #4]
   c20b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c20b8:	2201      	movs	r2, #1
   c20ba:	409a      	lsls	r2, r3
   c20bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c20c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c20c4:	4313      	orrs	r3, r2
   c20c6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c20ca:	2e02      	cmp	r6, #2
   c20cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c20d0:	bf02      	ittt	eq
   c20d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c20d6:	4313      	orreq	r3, r2
   c20d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c20dc:	6863      	ldr	r3, [r4, #4]
   c20de:	f8d8 0000 	ldr.w	r0, [r8]
   c20e2:	1c5a      	adds	r2, r3, #1
   c20e4:	3302      	adds	r3, #2
   c20e6:	6062      	str	r2, [r4, #4]
   c20e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c20ec:	f000 fba0 	bl	c2830 <__retarget_lock_release_recursive>
   c20f0:	2000      	movs	r0, #0
   c20f2:	e7c6      	b.n	c2082 <__register_exitproc+0x3e>
   c20f4:	2003e7e8 	.word	0x2003e7e8
   c20f8:	2003e75c 	.word	0x2003e75c
   c20fc:	00000000 	.word	0x00000000
   c2100:	000bcf3d 	.word	0x000bcf3d
   c2104:	2003d700 	.word	0x2003d700

000c2108 <_close_r>:
   c2108:	b538      	push	{r3, r4, r5, lr}
   c210a:	4d06      	ldr	r5, [pc, #24]	; (c2124 <_close_r+0x1c>)
   c210c:	2300      	movs	r3, #0
   c210e:	4604      	mov	r4, r0
   c2110:	4608      	mov	r0, r1
   c2112:	602b      	str	r3, [r5, #0]
   c2114:	f7fa fcce 	bl	bcab4 <_close>
   c2118:	1c43      	adds	r3, r0, #1
   c211a:	d102      	bne.n	c2122 <_close_r+0x1a>
   c211c:	682b      	ldr	r3, [r5, #0]
   c211e:	b103      	cbz	r3, c2122 <_close_r+0x1a>
   c2120:	6023      	str	r3, [r4, #0]
   c2122:	bd38      	pop	{r3, r4, r5, pc}
   c2124:	2003e7f0 	.word	0x2003e7f0

000c2128 <_fstat_r>:
   c2128:	b538      	push	{r3, r4, r5, lr}
   c212a:	4d07      	ldr	r5, [pc, #28]	; (c2148 <_fstat_r+0x20>)
   c212c:	2300      	movs	r3, #0
   c212e:	4604      	mov	r4, r0
   c2130:	4608      	mov	r0, r1
   c2132:	4611      	mov	r1, r2
   c2134:	602b      	str	r3, [r5, #0]
   c2136:	f7fa fcc5 	bl	bcac4 <_fstat>
   c213a:	1c43      	adds	r3, r0, #1
   c213c:	d102      	bne.n	c2144 <_fstat_r+0x1c>
   c213e:	682b      	ldr	r3, [r5, #0]
   c2140:	b103      	cbz	r3, c2144 <_fstat_r+0x1c>
   c2142:	6023      	str	r3, [r4, #0]
   c2144:	bd38      	pop	{r3, r4, r5, pc}
   c2146:	bf00      	nop
   c2148:	2003e7f0 	.word	0x2003e7f0

000c214c <rshift>:
   c214c:	6903      	ldr	r3, [r0, #16]
   c214e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c2152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c2156:	ea4f 1261 	mov.w	r2, r1, asr #5
   c215a:	f100 0414 	add.w	r4, r0, #20
   c215e:	dd45      	ble.n	c21ec <rshift+0xa0>
   c2160:	f011 011f 	ands.w	r1, r1, #31
   c2164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c2168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c216c:	d10c      	bne.n	c2188 <rshift+0x3c>
   c216e:	f100 0710 	add.w	r7, r0, #16
   c2172:	4629      	mov	r1, r5
   c2174:	42b1      	cmp	r1, r6
   c2176:	d334      	bcc.n	c21e2 <rshift+0x96>
   c2178:	1a9b      	subs	r3, r3, r2
   c217a:	009b      	lsls	r3, r3, #2
   c217c:	1eea      	subs	r2, r5, #3
   c217e:	4296      	cmp	r6, r2
   c2180:	bf38      	it	cc
   c2182:	2300      	movcc	r3, #0
   c2184:	4423      	add	r3, r4
   c2186:	e015      	b.n	c21b4 <rshift+0x68>
   c2188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c218c:	f1c1 0820 	rsb	r8, r1, #32
   c2190:	40cf      	lsrs	r7, r1
   c2192:	f105 0e04 	add.w	lr, r5, #4
   c2196:	46a1      	mov	r9, r4
   c2198:	4576      	cmp	r6, lr
   c219a:	46f4      	mov	ip, lr
   c219c:	d815      	bhi.n	c21ca <rshift+0x7e>
   c219e:	1a9a      	subs	r2, r3, r2
   c21a0:	0092      	lsls	r2, r2, #2
   c21a2:	3a04      	subs	r2, #4
   c21a4:	3501      	adds	r5, #1
   c21a6:	42ae      	cmp	r6, r5
   c21a8:	bf38      	it	cc
   c21aa:	2200      	movcc	r2, #0
   c21ac:	18a3      	adds	r3, r4, r2
   c21ae:	50a7      	str	r7, [r4, r2]
   c21b0:	b107      	cbz	r7, c21b4 <rshift+0x68>
   c21b2:	3304      	adds	r3, #4
   c21b4:	1b1a      	subs	r2, r3, r4
   c21b6:	42a3      	cmp	r3, r4
   c21b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c21bc:	bf08      	it	eq
   c21be:	2300      	moveq	r3, #0
   c21c0:	6102      	str	r2, [r0, #16]
   c21c2:	bf08      	it	eq
   c21c4:	6143      	streq	r3, [r0, #20]
   c21c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c21ca:	f8dc c000 	ldr.w	ip, [ip]
   c21ce:	fa0c fc08 	lsl.w	ip, ip, r8
   c21d2:	ea4c 0707 	orr.w	r7, ip, r7
   c21d6:	f849 7b04 	str.w	r7, [r9], #4
   c21da:	f85e 7b04 	ldr.w	r7, [lr], #4
   c21de:	40cf      	lsrs	r7, r1
   c21e0:	e7da      	b.n	c2198 <rshift+0x4c>
   c21e2:	f851 cb04 	ldr.w	ip, [r1], #4
   c21e6:	f847 cf04 	str.w	ip, [r7, #4]!
   c21ea:	e7c3      	b.n	c2174 <rshift+0x28>
   c21ec:	4623      	mov	r3, r4
   c21ee:	e7e1      	b.n	c21b4 <rshift+0x68>

000c21f0 <__hexdig_fun>:
   c21f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c21f4:	2b09      	cmp	r3, #9
   c21f6:	d802      	bhi.n	c21fe <__hexdig_fun+0xe>
   c21f8:	3820      	subs	r0, #32
   c21fa:	b2c0      	uxtb	r0, r0
   c21fc:	4770      	bx	lr
   c21fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c2202:	2b05      	cmp	r3, #5
   c2204:	d801      	bhi.n	c220a <__hexdig_fun+0x1a>
   c2206:	3847      	subs	r0, #71	; 0x47
   c2208:	e7f7      	b.n	c21fa <__hexdig_fun+0xa>
   c220a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c220e:	2b05      	cmp	r3, #5
   c2210:	d801      	bhi.n	c2216 <__hexdig_fun+0x26>
   c2212:	3827      	subs	r0, #39	; 0x27
   c2214:	e7f1      	b.n	c21fa <__hexdig_fun+0xa>
   c2216:	2000      	movs	r0, #0
   c2218:	4770      	bx	lr
	...

000c221c <__gethex>:
   c221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2220:	ed2d 8b02 	vpush	{d8}
   c2224:	b089      	sub	sp, #36	; 0x24
   c2226:	ee08 0a10 	vmov	s16, r0
   c222a:	9304      	str	r3, [sp, #16]
   c222c:	4bb4      	ldr	r3, [pc, #720]	; (c2500 <__gethex+0x2e4>)
   c222e:	681b      	ldr	r3, [r3, #0]
   c2230:	9301      	str	r3, [sp, #4]
   c2232:	4618      	mov	r0, r3
   c2234:	468b      	mov	fp, r1
   c2236:	4690      	mov	r8, r2
   c2238:	f7fe ff1d 	bl	c1076 <strlen>
   c223c:	9b01      	ldr	r3, [sp, #4]
   c223e:	f8db 2000 	ldr.w	r2, [fp]
   c2242:	4403      	add	r3, r0
   c2244:	4682      	mov	sl, r0
   c2246:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c224a:	9305      	str	r3, [sp, #20]
   c224c:	1c93      	adds	r3, r2, #2
   c224e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c2252:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c2256:	32fe      	adds	r2, #254	; 0xfe
   c2258:	18d1      	adds	r1, r2, r3
   c225a:	461f      	mov	r7, r3
   c225c:	f813 0b01 	ldrb.w	r0, [r3], #1
   c2260:	9100      	str	r1, [sp, #0]
   c2262:	2830      	cmp	r0, #48	; 0x30
   c2264:	d0f8      	beq.n	c2258 <__gethex+0x3c>
   c2266:	f7ff ffc3 	bl	c21f0 <__hexdig_fun>
   c226a:	4604      	mov	r4, r0
   c226c:	2800      	cmp	r0, #0
   c226e:	d13a      	bne.n	c22e6 <__gethex+0xca>
   c2270:	9901      	ldr	r1, [sp, #4]
   c2272:	4652      	mov	r2, sl
   c2274:	4638      	mov	r0, r7
   c2276:	f7fe ff06 	bl	c1086 <strncmp>
   c227a:	4605      	mov	r5, r0
   c227c:	2800      	cmp	r0, #0
   c227e:	d168      	bne.n	c2352 <__gethex+0x136>
   c2280:	f817 000a 	ldrb.w	r0, [r7, sl]
   c2284:	eb07 060a 	add.w	r6, r7, sl
   c2288:	f7ff ffb2 	bl	c21f0 <__hexdig_fun>
   c228c:	2800      	cmp	r0, #0
   c228e:	d062      	beq.n	c2356 <__gethex+0x13a>
   c2290:	4633      	mov	r3, r6
   c2292:	7818      	ldrb	r0, [r3, #0]
   c2294:	2830      	cmp	r0, #48	; 0x30
   c2296:	461f      	mov	r7, r3
   c2298:	f103 0301 	add.w	r3, r3, #1
   c229c:	d0f9      	beq.n	c2292 <__gethex+0x76>
   c229e:	f7ff ffa7 	bl	c21f0 <__hexdig_fun>
   c22a2:	2301      	movs	r3, #1
   c22a4:	fab0 f480 	clz	r4, r0
   c22a8:	0964      	lsrs	r4, r4, #5
   c22aa:	4635      	mov	r5, r6
   c22ac:	9300      	str	r3, [sp, #0]
   c22ae:	463a      	mov	r2, r7
   c22b0:	4616      	mov	r6, r2
   c22b2:	3201      	adds	r2, #1
   c22b4:	7830      	ldrb	r0, [r6, #0]
   c22b6:	f7ff ff9b 	bl	c21f0 <__hexdig_fun>
   c22ba:	2800      	cmp	r0, #0
   c22bc:	d1f8      	bne.n	c22b0 <__gethex+0x94>
   c22be:	9901      	ldr	r1, [sp, #4]
   c22c0:	4652      	mov	r2, sl
   c22c2:	4630      	mov	r0, r6
   c22c4:	f7fe fedf 	bl	c1086 <strncmp>
   c22c8:	b980      	cbnz	r0, c22ec <__gethex+0xd0>
   c22ca:	b94d      	cbnz	r5, c22e0 <__gethex+0xc4>
   c22cc:	eb06 050a 	add.w	r5, r6, sl
   c22d0:	462a      	mov	r2, r5
   c22d2:	4616      	mov	r6, r2
   c22d4:	3201      	adds	r2, #1
   c22d6:	7830      	ldrb	r0, [r6, #0]
   c22d8:	f7ff ff8a 	bl	c21f0 <__hexdig_fun>
   c22dc:	2800      	cmp	r0, #0
   c22de:	d1f8      	bne.n	c22d2 <__gethex+0xb6>
   c22e0:	1bad      	subs	r5, r5, r6
   c22e2:	00ad      	lsls	r5, r5, #2
   c22e4:	e004      	b.n	c22f0 <__gethex+0xd4>
   c22e6:	2400      	movs	r4, #0
   c22e8:	4625      	mov	r5, r4
   c22ea:	e7e0      	b.n	c22ae <__gethex+0x92>
   c22ec:	2d00      	cmp	r5, #0
   c22ee:	d1f7      	bne.n	c22e0 <__gethex+0xc4>
   c22f0:	7833      	ldrb	r3, [r6, #0]
   c22f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c22f6:	2b50      	cmp	r3, #80	; 0x50
   c22f8:	d13b      	bne.n	c2372 <__gethex+0x156>
   c22fa:	7873      	ldrb	r3, [r6, #1]
   c22fc:	2b2b      	cmp	r3, #43	; 0x2b
   c22fe:	d02c      	beq.n	c235a <__gethex+0x13e>
   c2300:	2b2d      	cmp	r3, #45	; 0x2d
   c2302:	d02e      	beq.n	c2362 <__gethex+0x146>
   c2304:	1c71      	adds	r1, r6, #1
   c2306:	f04f 0900 	mov.w	r9, #0
   c230a:	7808      	ldrb	r0, [r1, #0]
   c230c:	f7ff ff70 	bl	c21f0 <__hexdig_fun>
   c2310:	1e43      	subs	r3, r0, #1
   c2312:	b2db      	uxtb	r3, r3
   c2314:	2b18      	cmp	r3, #24
   c2316:	d82c      	bhi.n	c2372 <__gethex+0x156>
   c2318:	f1a0 0210 	sub.w	r2, r0, #16
   c231c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c2320:	f7ff ff66 	bl	c21f0 <__hexdig_fun>
   c2324:	1e43      	subs	r3, r0, #1
   c2326:	b2db      	uxtb	r3, r3
   c2328:	2b18      	cmp	r3, #24
   c232a:	d91d      	bls.n	c2368 <__gethex+0x14c>
   c232c:	f1b9 0f00 	cmp.w	r9, #0
   c2330:	d000      	beq.n	c2334 <__gethex+0x118>
   c2332:	4252      	negs	r2, r2
   c2334:	4415      	add	r5, r2
   c2336:	f8cb 1000 	str.w	r1, [fp]
   c233a:	b1e4      	cbz	r4, c2376 <__gethex+0x15a>
   c233c:	9b00      	ldr	r3, [sp, #0]
   c233e:	2b00      	cmp	r3, #0
   c2340:	bf14      	ite	ne
   c2342:	2700      	movne	r7, #0
   c2344:	2706      	moveq	r7, #6
   c2346:	4638      	mov	r0, r7
   c2348:	b009      	add	sp, #36	; 0x24
   c234a:	ecbd 8b02 	vpop	{d8}
   c234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2352:	463e      	mov	r6, r7
   c2354:	4625      	mov	r5, r4
   c2356:	2401      	movs	r4, #1
   c2358:	e7ca      	b.n	c22f0 <__gethex+0xd4>
   c235a:	f04f 0900 	mov.w	r9, #0
   c235e:	1cb1      	adds	r1, r6, #2
   c2360:	e7d3      	b.n	c230a <__gethex+0xee>
   c2362:	f04f 0901 	mov.w	r9, #1
   c2366:	e7fa      	b.n	c235e <__gethex+0x142>
   c2368:	230a      	movs	r3, #10
   c236a:	fb03 0202 	mla	r2, r3, r2, r0
   c236e:	3a10      	subs	r2, #16
   c2370:	e7d4      	b.n	c231c <__gethex+0x100>
   c2372:	4631      	mov	r1, r6
   c2374:	e7df      	b.n	c2336 <__gethex+0x11a>
   c2376:	1bf3      	subs	r3, r6, r7
   c2378:	3b01      	subs	r3, #1
   c237a:	4621      	mov	r1, r4
   c237c:	2b07      	cmp	r3, #7
   c237e:	dc0b      	bgt.n	c2398 <__gethex+0x17c>
   c2380:	ee18 0a10 	vmov	r0, s16
   c2384:	f000 fa7a 	bl	c287c <_Balloc>
   c2388:	4604      	mov	r4, r0
   c238a:	b940      	cbnz	r0, c239e <__gethex+0x182>
   c238c:	4b5d      	ldr	r3, [pc, #372]	; (c2504 <__gethex+0x2e8>)
   c238e:	4602      	mov	r2, r0
   c2390:	21de      	movs	r1, #222	; 0xde
   c2392:	485d      	ldr	r0, [pc, #372]	; (c2508 <__gethex+0x2ec>)
   c2394:	f7fa fe22 	bl	bcfdc <__assert_func>
   c2398:	3101      	adds	r1, #1
   c239a:	105b      	asrs	r3, r3, #1
   c239c:	e7ee      	b.n	c237c <__gethex+0x160>
   c239e:	f100 0914 	add.w	r9, r0, #20
   c23a2:	f04f 0b00 	mov.w	fp, #0
   c23a6:	f1ca 0301 	rsb	r3, sl, #1
   c23aa:	f8cd 9008 	str.w	r9, [sp, #8]
   c23ae:	f8cd b000 	str.w	fp, [sp]
   c23b2:	9306      	str	r3, [sp, #24]
   c23b4:	42b7      	cmp	r7, r6
   c23b6:	d340      	bcc.n	c243a <__gethex+0x21e>
   c23b8:	9802      	ldr	r0, [sp, #8]
   c23ba:	9b00      	ldr	r3, [sp, #0]
   c23bc:	f840 3b04 	str.w	r3, [r0], #4
   c23c0:	eba0 0009 	sub.w	r0, r0, r9
   c23c4:	1080      	asrs	r0, r0, #2
   c23c6:	0146      	lsls	r6, r0, #5
   c23c8:	6120      	str	r0, [r4, #16]
   c23ca:	4618      	mov	r0, r3
   c23cc:	f000 fb48 	bl	c2a60 <__hi0bits>
   c23d0:	1a30      	subs	r0, r6, r0
   c23d2:	f8d8 6000 	ldr.w	r6, [r8]
   c23d6:	42b0      	cmp	r0, r6
   c23d8:	dd63      	ble.n	c24a2 <__gethex+0x286>
   c23da:	1b87      	subs	r7, r0, r6
   c23dc:	4639      	mov	r1, r7
   c23de:	4620      	mov	r0, r4
   c23e0:	f000 feec 	bl	c31bc <__any_on>
   c23e4:	4682      	mov	sl, r0
   c23e6:	b1a8      	cbz	r0, c2414 <__gethex+0x1f8>
   c23e8:	1e7b      	subs	r3, r7, #1
   c23ea:	1159      	asrs	r1, r3, #5
   c23ec:	f003 021f 	and.w	r2, r3, #31
   c23f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c23f4:	f04f 0a01 	mov.w	sl, #1
   c23f8:	fa0a f202 	lsl.w	r2, sl, r2
   c23fc:	420a      	tst	r2, r1
   c23fe:	d009      	beq.n	c2414 <__gethex+0x1f8>
   c2400:	4553      	cmp	r3, sl
   c2402:	dd05      	ble.n	c2410 <__gethex+0x1f4>
   c2404:	1eb9      	subs	r1, r7, #2
   c2406:	4620      	mov	r0, r4
   c2408:	f000 fed8 	bl	c31bc <__any_on>
   c240c:	2800      	cmp	r0, #0
   c240e:	d145      	bne.n	c249c <__gethex+0x280>
   c2410:	f04f 0a02 	mov.w	sl, #2
   c2414:	4639      	mov	r1, r7
   c2416:	4620      	mov	r0, r4
   c2418:	f7ff fe98 	bl	c214c <rshift>
   c241c:	443d      	add	r5, r7
   c241e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2422:	42ab      	cmp	r3, r5
   c2424:	da4c      	bge.n	c24c0 <__gethex+0x2a4>
   c2426:	ee18 0a10 	vmov	r0, s16
   c242a:	4621      	mov	r1, r4
   c242c:	f000 fa66 	bl	c28fc <_Bfree>
   c2430:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2432:	2300      	movs	r3, #0
   c2434:	6013      	str	r3, [r2, #0]
   c2436:	27a3      	movs	r7, #163	; 0xa3
   c2438:	e785      	b.n	c2346 <__gethex+0x12a>
   c243a:	1e73      	subs	r3, r6, #1
   c243c:	9a05      	ldr	r2, [sp, #20]
   c243e:	9303      	str	r3, [sp, #12]
   c2440:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c2444:	4293      	cmp	r3, r2
   c2446:	d019      	beq.n	c247c <__gethex+0x260>
   c2448:	f1bb 0f20 	cmp.w	fp, #32
   c244c:	d107      	bne.n	c245e <__gethex+0x242>
   c244e:	9b02      	ldr	r3, [sp, #8]
   c2450:	9a00      	ldr	r2, [sp, #0]
   c2452:	f843 2b04 	str.w	r2, [r3], #4
   c2456:	9302      	str	r3, [sp, #8]
   c2458:	2300      	movs	r3, #0
   c245a:	9300      	str	r3, [sp, #0]
   c245c:	469b      	mov	fp, r3
   c245e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c2462:	f7ff fec5 	bl	c21f0 <__hexdig_fun>
   c2466:	9b00      	ldr	r3, [sp, #0]
   c2468:	f000 000f 	and.w	r0, r0, #15
   c246c:	fa00 f00b 	lsl.w	r0, r0, fp
   c2470:	4303      	orrs	r3, r0
   c2472:	9300      	str	r3, [sp, #0]
   c2474:	f10b 0b04 	add.w	fp, fp, #4
   c2478:	9b03      	ldr	r3, [sp, #12]
   c247a:	e00d      	b.n	c2498 <__gethex+0x27c>
   c247c:	9b03      	ldr	r3, [sp, #12]
   c247e:	9a06      	ldr	r2, [sp, #24]
   c2480:	4413      	add	r3, r2
   c2482:	42bb      	cmp	r3, r7
   c2484:	d3e0      	bcc.n	c2448 <__gethex+0x22c>
   c2486:	4618      	mov	r0, r3
   c2488:	9901      	ldr	r1, [sp, #4]
   c248a:	9307      	str	r3, [sp, #28]
   c248c:	4652      	mov	r2, sl
   c248e:	f7fe fdfa 	bl	c1086 <strncmp>
   c2492:	9b07      	ldr	r3, [sp, #28]
   c2494:	2800      	cmp	r0, #0
   c2496:	d1d7      	bne.n	c2448 <__gethex+0x22c>
   c2498:	461e      	mov	r6, r3
   c249a:	e78b      	b.n	c23b4 <__gethex+0x198>
   c249c:	f04f 0a03 	mov.w	sl, #3
   c24a0:	e7b8      	b.n	c2414 <__gethex+0x1f8>
   c24a2:	da0a      	bge.n	c24ba <__gethex+0x29e>
   c24a4:	1a37      	subs	r7, r6, r0
   c24a6:	4621      	mov	r1, r4
   c24a8:	ee18 0a10 	vmov	r0, s16
   c24ac:	463a      	mov	r2, r7
   c24ae:	f000 fc41 	bl	c2d34 <__lshift>
   c24b2:	1bed      	subs	r5, r5, r7
   c24b4:	4604      	mov	r4, r0
   c24b6:	f100 0914 	add.w	r9, r0, #20
   c24ba:	f04f 0a00 	mov.w	sl, #0
   c24be:	e7ae      	b.n	c241e <__gethex+0x202>
   c24c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c24c4:	42a8      	cmp	r0, r5
   c24c6:	dd72      	ble.n	c25ae <__gethex+0x392>
   c24c8:	1b45      	subs	r5, r0, r5
   c24ca:	42ae      	cmp	r6, r5
   c24cc:	dc36      	bgt.n	c253c <__gethex+0x320>
   c24ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c24d2:	2b02      	cmp	r3, #2
   c24d4:	d02a      	beq.n	c252c <__gethex+0x310>
   c24d6:	2b03      	cmp	r3, #3
   c24d8:	d02c      	beq.n	c2534 <__gethex+0x318>
   c24da:	2b01      	cmp	r3, #1
   c24dc:	d11c      	bne.n	c2518 <__gethex+0x2fc>
   c24de:	42ae      	cmp	r6, r5
   c24e0:	d11a      	bne.n	c2518 <__gethex+0x2fc>
   c24e2:	2e01      	cmp	r6, #1
   c24e4:	d112      	bne.n	c250c <__gethex+0x2f0>
   c24e6:	9a04      	ldr	r2, [sp, #16]
   c24e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c24ec:	6013      	str	r3, [r2, #0]
   c24ee:	2301      	movs	r3, #1
   c24f0:	6123      	str	r3, [r4, #16]
   c24f2:	f8c9 3000 	str.w	r3, [r9]
   c24f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c24f8:	2762      	movs	r7, #98	; 0x62
   c24fa:	601c      	str	r4, [r3, #0]
   c24fc:	e723      	b.n	c2346 <__gethex+0x12a>
   c24fe:	bf00      	nop
   c2500:	000c52f4 	.word	0x000c52f4
   c2504:	000c5281 	.word	0x000c5281
   c2508:	000c5292 	.word	0x000c5292
   c250c:	1e71      	subs	r1, r6, #1
   c250e:	4620      	mov	r0, r4
   c2510:	f000 fe54 	bl	c31bc <__any_on>
   c2514:	2800      	cmp	r0, #0
   c2516:	d1e6      	bne.n	c24e6 <__gethex+0x2ca>
   c2518:	ee18 0a10 	vmov	r0, s16
   c251c:	4621      	mov	r1, r4
   c251e:	f000 f9ed 	bl	c28fc <_Bfree>
   c2522:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2524:	2300      	movs	r3, #0
   c2526:	6013      	str	r3, [r2, #0]
   c2528:	2750      	movs	r7, #80	; 0x50
   c252a:	e70c      	b.n	c2346 <__gethex+0x12a>
   c252c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c252e:	2b00      	cmp	r3, #0
   c2530:	d1f2      	bne.n	c2518 <__gethex+0x2fc>
   c2532:	e7d8      	b.n	c24e6 <__gethex+0x2ca>
   c2534:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2536:	2b00      	cmp	r3, #0
   c2538:	d1d5      	bne.n	c24e6 <__gethex+0x2ca>
   c253a:	e7ed      	b.n	c2518 <__gethex+0x2fc>
   c253c:	1e6f      	subs	r7, r5, #1
   c253e:	f1ba 0f00 	cmp.w	sl, #0
   c2542:	d131      	bne.n	c25a8 <__gethex+0x38c>
   c2544:	b127      	cbz	r7, c2550 <__gethex+0x334>
   c2546:	4639      	mov	r1, r7
   c2548:	4620      	mov	r0, r4
   c254a:	f000 fe37 	bl	c31bc <__any_on>
   c254e:	4682      	mov	sl, r0
   c2550:	117b      	asrs	r3, r7, #5
   c2552:	2101      	movs	r1, #1
   c2554:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c2558:	f007 071f 	and.w	r7, r7, #31
   c255c:	fa01 f707 	lsl.w	r7, r1, r7
   c2560:	421f      	tst	r7, r3
   c2562:	4629      	mov	r1, r5
   c2564:	4620      	mov	r0, r4
   c2566:	bf18      	it	ne
   c2568:	f04a 0a02 	orrne.w	sl, sl, #2
   c256c:	1b76      	subs	r6, r6, r5
   c256e:	f7ff fded 	bl	c214c <rshift>
   c2572:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c2576:	2702      	movs	r7, #2
   c2578:	f1ba 0f00 	cmp.w	sl, #0
   c257c:	d048      	beq.n	c2610 <__gethex+0x3f4>
   c257e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c2582:	2b02      	cmp	r3, #2
   c2584:	d015      	beq.n	c25b2 <__gethex+0x396>
   c2586:	2b03      	cmp	r3, #3
   c2588:	d017      	beq.n	c25ba <__gethex+0x39e>
   c258a:	2b01      	cmp	r3, #1
   c258c:	d109      	bne.n	c25a2 <__gethex+0x386>
   c258e:	f01a 0f02 	tst.w	sl, #2
   c2592:	d006      	beq.n	c25a2 <__gethex+0x386>
   c2594:	f8d9 0000 	ldr.w	r0, [r9]
   c2598:	ea4a 0a00 	orr.w	sl, sl, r0
   c259c:	f01a 0f01 	tst.w	sl, #1
   c25a0:	d10e      	bne.n	c25c0 <__gethex+0x3a4>
   c25a2:	f047 0710 	orr.w	r7, r7, #16
   c25a6:	e033      	b.n	c2610 <__gethex+0x3f4>
   c25a8:	f04f 0a01 	mov.w	sl, #1
   c25ac:	e7d0      	b.n	c2550 <__gethex+0x334>
   c25ae:	2701      	movs	r7, #1
   c25b0:	e7e2      	b.n	c2578 <__gethex+0x35c>
   c25b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c25b4:	f1c3 0301 	rsb	r3, r3, #1
   c25b8:	9315      	str	r3, [sp, #84]	; 0x54
   c25ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c25bc:	2b00      	cmp	r3, #0
   c25be:	d0f0      	beq.n	c25a2 <__gethex+0x386>
   c25c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c25c4:	f104 0314 	add.w	r3, r4, #20
   c25c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c25cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c25d0:	f04f 0c00 	mov.w	ip, #0
   c25d4:	4618      	mov	r0, r3
   c25d6:	f853 2b04 	ldr.w	r2, [r3], #4
   c25da:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c25de:	d01c      	beq.n	c261a <__gethex+0x3fe>
   c25e0:	3201      	adds	r2, #1
   c25e2:	6002      	str	r2, [r0, #0]
   c25e4:	2f02      	cmp	r7, #2
   c25e6:	f104 0314 	add.w	r3, r4, #20
   c25ea:	d13f      	bne.n	c266c <__gethex+0x450>
   c25ec:	f8d8 2000 	ldr.w	r2, [r8]
   c25f0:	3a01      	subs	r2, #1
   c25f2:	42b2      	cmp	r2, r6
   c25f4:	d10a      	bne.n	c260c <__gethex+0x3f0>
   c25f6:	1171      	asrs	r1, r6, #5
   c25f8:	2201      	movs	r2, #1
   c25fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c25fe:	f006 061f 	and.w	r6, r6, #31
   c2602:	fa02 f606 	lsl.w	r6, r2, r6
   c2606:	421e      	tst	r6, r3
   c2608:	bf18      	it	ne
   c260a:	4617      	movne	r7, r2
   c260c:	f047 0720 	orr.w	r7, r7, #32
   c2610:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2612:	601c      	str	r4, [r3, #0]
   c2614:	9b04      	ldr	r3, [sp, #16]
   c2616:	601d      	str	r5, [r3, #0]
   c2618:	e695      	b.n	c2346 <__gethex+0x12a>
   c261a:	4299      	cmp	r1, r3
   c261c:	f843 cc04 	str.w	ip, [r3, #-4]
   c2620:	d8d8      	bhi.n	c25d4 <__gethex+0x3b8>
   c2622:	68a3      	ldr	r3, [r4, #8]
   c2624:	459b      	cmp	fp, r3
   c2626:	db19      	blt.n	c265c <__gethex+0x440>
   c2628:	6861      	ldr	r1, [r4, #4]
   c262a:	ee18 0a10 	vmov	r0, s16
   c262e:	3101      	adds	r1, #1
   c2630:	f000 f924 	bl	c287c <_Balloc>
   c2634:	4681      	mov	r9, r0
   c2636:	b918      	cbnz	r0, c2640 <__gethex+0x424>
   c2638:	4b1a      	ldr	r3, [pc, #104]	; (c26a4 <__gethex+0x488>)
   c263a:	4602      	mov	r2, r0
   c263c:	2184      	movs	r1, #132	; 0x84
   c263e:	e6a8      	b.n	c2392 <__gethex+0x176>
   c2640:	6922      	ldr	r2, [r4, #16]
   c2642:	3202      	adds	r2, #2
   c2644:	f104 010c 	add.w	r1, r4, #12
   c2648:	0092      	lsls	r2, r2, #2
   c264a:	300c      	adds	r0, #12
   c264c:	f7fe fc20 	bl	c0e90 <memcpy>
   c2650:	4621      	mov	r1, r4
   c2652:	ee18 0a10 	vmov	r0, s16
   c2656:	f000 f951 	bl	c28fc <_Bfree>
   c265a:	464c      	mov	r4, r9
   c265c:	6923      	ldr	r3, [r4, #16]
   c265e:	1c5a      	adds	r2, r3, #1
   c2660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c2664:	6122      	str	r2, [r4, #16]
   c2666:	2201      	movs	r2, #1
   c2668:	615a      	str	r2, [r3, #20]
   c266a:	e7bb      	b.n	c25e4 <__gethex+0x3c8>
   c266c:	6922      	ldr	r2, [r4, #16]
   c266e:	455a      	cmp	r2, fp
   c2670:	dd0b      	ble.n	c268a <__gethex+0x46e>
   c2672:	2101      	movs	r1, #1
   c2674:	4620      	mov	r0, r4
   c2676:	f7ff fd69 	bl	c214c <rshift>
   c267a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c267e:	3501      	adds	r5, #1
   c2680:	42ab      	cmp	r3, r5
   c2682:	f6ff aed0 	blt.w	c2426 <__gethex+0x20a>
   c2686:	2701      	movs	r7, #1
   c2688:	e7c0      	b.n	c260c <__gethex+0x3f0>
   c268a:	f016 061f 	ands.w	r6, r6, #31
   c268e:	d0fa      	beq.n	c2686 <__gethex+0x46a>
   c2690:	4453      	add	r3, sl
   c2692:	f1c6 0620 	rsb	r6, r6, #32
   c2696:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c269a:	f000 f9e1 	bl	c2a60 <__hi0bits>
   c269e:	42b0      	cmp	r0, r6
   c26a0:	dbe7      	blt.n	c2672 <__gethex+0x456>
   c26a2:	e7f0      	b.n	c2686 <__gethex+0x46a>
   c26a4:	000c5281 	.word	0x000c5281

000c26a8 <L_shift>:
   c26a8:	f1c2 0208 	rsb	r2, r2, #8
   c26ac:	0092      	lsls	r2, r2, #2
   c26ae:	b570      	push	{r4, r5, r6, lr}
   c26b0:	f1c2 0620 	rsb	r6, r2, #32
   c26b4:	6843      	ldr	r3, [r0, #4]
   c26b6:	6804      	ldr	r4, [r0, #0]
   c26b8:	fa03 f506 	lsl.w	r5, r3, r6
   c26bc:	432c      	orrs	r4, r5
   c26be:	40d3      	lsrs	r3, r2
   c26c0:	6004      	str	r4, [r0, #0]
   c26c2:	f840 3f04 	str.w	r3, [r0, #4]!
   c26c6:	4288      	cmp	r0, r1
   c26c8:	d3f4      	bcc.n	c26b4 <L_shift+0xc>
   c26ca:	bd70      	pop	{r4, r5, r6, pc}

000c26cc <__match>:
   c26cc:	b530      	push	{r4, r5, lr}
   c26ce:	6803      	ldr	r3, [r0, #0]
   c26d0:	3301      	adds	r3, #1
   c26d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   c26d6:	b914      	cbnz	r4, c26de <__match+0x12>
   c26d8:	6003      	str	r3, [r0, #0]
   c26da:	2001      	movs	r0, #1
   c26dc:	bd30      	pop	{r4, r5, pc}
   c26de:	f813 2b01 	ldrb.w	r2, [r3], #1
   c26e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c26e6:	2d19      	cmp	r5, #25
   c26e8:	bf98      	it	ls
   c26ea:	3220      	addls	r2, #32
   c26ec:	42a2      	cmp	r2, r4
   c26ee:	d0f0      	beq.n	c26d2 <__match+0x6>
   c26f0:	2000      	movs	r0, #0
   c26f2:	e7f3      	b.n	c26dc <__match+0x10>

000c26f4 <__hexnan>:
   c26f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c26f8:	680b      	ldr	r3, [r1, #0]
   c26fa:	115e      	asrs	r6, r3, #5
   c26fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2700:	f013 031f 	ands.w	r3, r3, #31
   c2704:	b087      	sub	sp, #28
   c2706:	bf18      	it	ne
   c2708:	3604      	addne	r6, #4
   c270a:	2500      	movs	r5, #0
   c270c:	1f37      	subs	r7, r6, #4
   c270e:	4690      	mov	r8, r2
   c2710:	6802      	ldr	r2, [r0, #0]
   c2712:	9301      	str	r3, [sp, #4]
   c2714:	4682      	mov	sl, r0
   c2716:	f846 5c04 	str.w	r5, [r6, #-4]
   c271a:	46b9      	mov	r9, r7
   c271c:	463c      	mov	r4, r7
   c271e:	9502      	str	r5, [sp, #8]
   c2720:	46ab      	mov	fp, r5
   c2722:	7851      	ldrb	r1, [r2, #1]
   c2724:	1c53      	adds	r3, r2, #1
   c2726:	9303      	str	r3, [sp, #12]
   c2728:	b341      	cbz	r1, c277c <__hexnan+0x88>
   c272a:	4608      	mov	r0, r1
   c272c:	9205      	str	r2, [sp, #20]
   c272e:	9104      	str	r1, [sp, #16]
   c2730:	f7ff fd5e 	bl	c21f0 <__hexdig_fun>
   c2734:	2800      	cmp	r0, #0
   c2736:	d14f      	bne.n	c27d8 <__hexnan+0xe4>
   c2738:	9904      	ldr	r1, [sp, #16]
   c273a:	9a05      	ldr	r2, [sp, #20]
   c273c:	2920      	cmp	r1, #32
   c273e:	d818      	bhi.n	c2772 <__hexnan+0x7e>
   c2740:	9b02      	ldr	r3, [sp, #8]
   c2742:	459b      	cmp	fp, r3
   c2744:	dd13      	ble.n	c276e <__hexnan+0x7a>
   c2746:	454c      	cmp	r4, r9
   c2748:	d206      	bcs.n	c2758 <__hexnan+0x64>
   c274a:	2d07      	cmp	r5, #7
   c274c:	dc04      	bgt.n	c2758 <__hexnan+0x64>
   c274e:	462a      	mov	r2, r5
   c2750:	4649      	mov	r1, r9
   c2752:	4620      	mov	r0, r4
   c2754:	f7ff ffa8 	bl	c26a8 <L_shift>
   c2758:	4544      	cmp	r4, r8
   c275a:	d950      	bls.n	c27fe <__hexnan+0x10a>
   c275c:	2300      	movs	r3, #0
   c275e:	f1a4 0904 	sub.w	r9, r4, #4
   c2762:	f844 3c04 	str.w	r3, [r4, #-4]
   c2766:	f8cd b008 	str.w	fp, [sp, #8]
   c276a:	464c      	mov	r4, r9
   c276c:	461d      	mov	r5, r3
   c276e:	9a03      	ldr	r2, [sp, #12]
   c2770:	e7d7      	b.n	c2722 <__hexnan+0x2e>
   c2772:	2929      	cmp	r1, #41	; 0x29
   c2774:	d156      	bne.n	c2824 <__hexnan+0x130>
   c2776:	3202      	adds	r2, #2
   c2778:	f8ca 2000 	str.w	r2, [sl]
   c277c:	f1bb 0f00 	cmp.w	fp, #0
   c2780:	d050      	beq.n	c2824 <__hexnan+0x130>
   c2782:	454c      	cmp	r4, r9
   c2784:	d206      	bcs.n	c2794 <__hexnan+0xa0>
   c2786:	2d07      	cmp	r5, #7
   c2788:	dc04      	bgt.n	c2794 <__hexnan+0xa0>
   c278a:	462a      	mov	r2, r5
   c278c:	4649      	mov	r1, r9
   c278e:	4620      	mov	r0, r4
   c2790:	f7ff ff8a 	bl	c26a8 <L_shift>
   c2794:	4544      	cmp	r4, r8
   c2796:	d934      	bls.n	c2802 <__hexnan+0x10e>
   c2798:	f1a8 0204 	sub.w	r2, r8, #4
   c279c:	4623      	mov	r3, r4
   c279e:	f853 1b04 	ldr.w	r1, [r3], #4
   c27a2:	f842 1f04 	str.w	r1, [r2, #4]!
   c27a6:	429f      	cmp	r7, r3
   c27a8:	d2f9      	bcs.n	c279e <__hexnan+0xaa>
   c27aa:	1b3b      	subs	r3, r7, r4
   c27ac:	f023 0303 	bic.w	r3, r3, #3
   c27b0:	3304      	adds	r3, #4
   c27b2:	3401      	adds	r4, #1
   c27b4:	3e03      	subs	r6, #3
   c27b6:	42b4      	cmp	r4, r6
   c27b8:	bf88      	it	hi
   c27ba:	2304      	movhi	r3, #4
   c27bc:	4443      	add	r3, r8
   c27be:	2200      	movs	r2, #0
   c27c0:	f843 2b04 	str.w	r2, [r3], #4
   c27c4:	429f      	cmp	r7, r3
   c27c6:	d2fb      	bcs.n	c27c0 <__hexnan+0xcc>
   c27c8:	683b      	ldr	r3, [r7, #0]
   c27ca:	b91b      	cbnz	r3, c27d4 <__hexnan+0xe0>
   c27cc:	4547      	cmp	r7, r8
   c27ce:	d127      	bne.n	c2820 <__hexnan+0x12c>
   c27d0:	2301      	movs	r3, #1
   c27d2:	603b      	str	r3, [r7, #0]
   c27d4:	2005      	movs	r0, #5
   c27d6:	e026      	b.n	c2826 <__hexnan+0x132>
   c27d8:	3501      	adds	r5, #1
   c27da:	2d08      	cmp	r5, #8
   c27dc:	f10b 0b01 	add.w	fp, fp, #1
   c27e0:	dd06      	ble.n	c27f0 <__hexnan+0xfc>
   c27e2:	4544      	cmp	r4, r8
   c27e4:	d9c3      	bls.n	c276e <__hexnan+0x7a>
   c27e6:	2300      	movs	r3, #0
   c27e8:	f844 3c04 	str.w	r3, [r4, #-4]
   c27ec:	2501      	movs	r5, #1
   c27ee:	3c04      	subs	r4, #4
   c27f0:	6822      	ldr	r2, [r4, #0]
   c27f2:	f000 000f 	and.w	r0, r0, #15
   c27f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c27fa:	6022      	str	r2, [r4, #0]
   c27fc:	e7b7      	b.n	c276e <__hexnan+0x7a>
   c27fe:	2508      	movs	r5, #8
   c2800:	e7b5      	b.n	c276e <__hexnan+0x7a>
   c2802:	9b01      	ldr	r3, [sp, #4]
   c2804:	2b00      	cmp	r3, #0
   c2806:	d0df      	beq.n	c27c8 <__hexnan+0xd4>
   c2808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c280c:	f1c3 0320 	rsb	r3, r3, #32
   c2810:	fa22 f303 	lsr.w	r3, r2, r3
   c2814:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2818:	401a      	ands	r2, r3
   c281a:	f846 2c04 	str.w	r2, [r6, #-4]
   c281e:	e7d3      	b.n	c27c8 <__hexnan+0xd4>
   c2820:	3f04      	subs	r7, #4
   c2822:	e7d1      	b.n	c27c8 <__hexnan+0xd4>
   c2824:	2004      	movs	r0, #4
   c2826:	b007      	add	sp, #28
   c2828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c282c <__retarget_lock_acquire_recursive>:
   c282c:	4770      	bx	lr

000c282e <__retarget_lock_release>:
   c282e:	4770      	bx	lr

000c2830 <__retarget_lock_release_recursive>:
   c2830:	4770      	bx	lr
	...

000c2834 <_lseek_r>:
   c2834:	b538      	push	{r3, r4, r5, lr}
   c2836:	4d07      	ldr	r5, [pc, #28]	; (c2854 <_lseek_r+0x20>)
   c2838:	4604      	mov	r4, r0
   c283a:	4608      	mov	r0, r1
   c283c:	4611      	mov	r1, r2
   c283e:	2200      	movs	r2, #0
   c2840:	602a      	str	r2, [r5, #0]
   c2842:	461a      	mov	r2, r3
   c2844:	f7fa f946 	bl	bcad4 <_lseek>
   c2848:	1c43      	adds	r3, r0, #1
   c284a:	d102      	bne.n	c2852 <_lseek_r+0x1e>
   c284c:	682b      	ldr	r3, [r5, #0]
   c284e:	b103      	cbz	r3, c2852 <_lseek_r+0x1e>
   c2850:	6023      	str	r3, [r4, #0]
   c2852:	bd38      	pop	{r3, r4, r5, pc}
   c2854:	2003e7f0 	.word	0x2003e7f0

000c2858 <__ascii_mbtowc>:
   c2858:	b082      	sub	sp, #8
   c285a:	b901      	cbnz	r1, c285e <__ascii_mbtowc+0x6>
   c285c:	a901      	add	r1, sp, #4
   c285e:	b142      	cbz	r2, c2872 <__ascii_mbtowc+0x1a>
   c2860:	b14b      	cbz	r3, c2876 <__ascii_mbtowc+0x1e>
   c2862:	7813      	ldrb	r3, [r2, #0]
   c2864:	600b      	str	r3, [r1, #0]
   c2866:	7812      	ldrb	r2, [r2, #0]
   c2868:	1e10      	subs	r0, r2, #0
   c286a:	bf18      	it	ne
   c286c:	2001      	movne	r0, #1
   c286e:	b002      	add	sp, #8
   c2870:	4770      	bx	lr
   c2872:	4610      	mov	r0, r2
   c2874:	e7fb      	b.n	c286e <__ascii_mbtowc+0x16>
   c2876:	f06f 0001 	mvn.w	r0, #1
   c287a:	e7f8      	b.n	c286e <__ascii_mbtowc+0x16>

000c287c <_Balloc>:
   c287c:	b570      	push	{r4, r5, r6, lr}
   c287e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2880:	4604      	mov	r4, r0
   c2882:	460d      	mov	r5, r1
   c2884:	b976      	cbnz	r6, c28a4 <_Balloc+0x28>
   c2886:	2010      	movs	r0, #16
   c2888:	f7fa fb58 	bl	bcf3c <malloc>
   c288c:	4602      	mov	r2, r0
   c288e:	6260      	str	r0, [r4, #36]	; 0x24
   c2890:	b920      	cbnz	r0, c289c <_Balloc+0x20>
   c2892:	4b18      	ldr	r3, [pc, #96]	; (c28f4 <_Balloc+0x78>)
   c2894:	4818      	ldr	r0, [pc, #96]	; (c28f8 <_Balloc+0x7c>)
   c2896:	2166      	movs	r1, #102	; 0x66
   c2898:	f7fa fba0 	bl	bcfdc <__assert_func>
   c289c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c28a0:	6006      	str	r6, [r0, #0]
   c28a2:	60c6      	str	r6, [r0, #12]
   c28a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c28a6:	68f3      	ldr	r3, [r6, #12]
   c28a8:	b183      	cbz	r3, c28cc <_Balloc+0x50>
   c28aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c28ac:	68db      	ldr	r3, [r3, #12]
   c28ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c28b2:	b9b8      	cbnz	r0, c28e4 <_Balloc+0x68>
   c28b4:	2101      	movs	r1, #1
   c28b6:	fa01 f605 	lsl.w	r6, r1, r5
   c28ba:	1d72      	adds	r2, r6, #5
   c28bc:	0092      	lsls	r2, r2, #2
   c28be:	4620      	mov	r0, r4
   c28c0:	f7fe fb16 	bl	c0ef0 <_calloc_r>
   c28c4:	b160      	cbz	r0, c28e0 <_Balloc+0x64>
   c28c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c28ca:	e00e      	b.n	c28ea <_Balloc+0x6e>
   c28cc:	2221      	movs	r2, #33	; 0x21
   c28ce:	2104      	movs	r1, #4
   c28d0:	4620      	mov	r0, r4
   c28d2:	f7fe fb0d 	bl	c0ef0 <_calloc_r>
   c28d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c28d8:	60f0      	str	r0, [r6, #12]
   c28da:	68db      	ldr	r3, [r3, #12]
   c28dc:	2b00      	cmp	r3, #0
   c28de:	d1e4      	bne.n	c28aa <_Balloc+0x2e>
   c28e0:	2000      	movs	r0, #0
   c28e2:	bd70      	pop	{r4, r5, r6, pc}
   c28e4:	6802      	ldr	r2, [r0, #0]
   c28e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c28ea:	2300      	movs	r3, #0
   c28ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c28f0:	e7f7      	b.n	c28e2 <_Balloc+0x66>
   c28f2:	bf00      	nop
   c28f4:	000c505e 	.word	0x000c505e
   c28f8:	000c5308 	.word	0x000c5308

000c28fc <_Bfree>:
   c28fc:	b570      	push	{r4, r5, r6, lr}
   c28fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2900:	4605      	mov	r5, r0
   c2902:	460c      	mov	r4, r1
   c2904:	b976      	cbnz	r6, c2924 <_Bfree+0x28>
   c2906:	2010      	movs	r0, #16
   c2908:	f7fa fb18 	bl	bcf3c <malloc>
   c290c:	4602      	mov	r2, r0
   c290e:	6268      	str	r0, [r5, #36]	; 0x24
   c2910:	b920      	cbnz	r0, c291c <_Bfree+0x20>
   c2912:	4b09      	ldr	r3, [pc, #36]	; (c2938 <_Bfree+0x3c>)
   c2914:	4809      	ldr	r0, [pc, #36]	; (c293c <_Bfree+0x40>)
   c2916:	218a      	movs	r1, #138	; 0x8a
   c2918:	f7fa fb60 	bl	bcfdc <__assert_func>
   c291c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2920:	6006      	str	r6, [r0, #0]
   c2922:	60c6      	str	r6, [r0, #12]
   c2924:	b13c      	cbz	r4, c2936 <_Bfree+0x3a>
   c2926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2928:	6862      	ldr	r2, [r4, #4]
   c292a:	68db      	ldr	r3, [r3, #12]
   c292c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2930:	6021      	str	r1, [r4, #0]
   c2932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2936:	bd70      	pop	{r4, r5, r6, pc}
   c2938:	000c505e 	.word	0x000c505e
   c293c:	000c5308 	.word	0x000c5308

000c2940 <__multadd>:
   c2940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2944:	690d      	ldr	r5, [r1, #16]
   c2946:	4607      	mov	r7, r0
   c2948:	460c      	mov	r4, r1
   c294a:	461e      	mov	r6, r3
   c294c:	f101 0c14 	add.w	ip, r1, #20
   c2950:	2000      	movs	r0, #0
   c2952:	f8dc 3000 	ldr.w	r3, [ip]
   c2956:	b299      	uxth	r1, r3
   c2958:	fb02 6101 	mla	r1, r2, r1, r6
   c295c:	0c1e      	lsrs	r6, r3, #16
   c295e:	0c0b      	lsrs	r3, r1, #16
   c2960:	fb02 3306 	mla	r3, r2, r6, r3
   c2964:	b289      	uxth	r1, r1
   c2966:	3001      	adds	r0, #1
   c2968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c296c:	4285      	cmp	r5, r0
   c296e:	f84c 1b04 	str.w	r1, [ip], #4
   c2972:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2976:	dcec      	bgt.n	c2952 <__multadd+0x12>
   c2978:	b30e      	cbz	r6, c29be <__multadd+0x7e>
   c297a:	68a3      	ldr	r3, [r4, #8]
   c297c:	42ab      	cmp	r3, r5
   c297e:	dc19      	bgt.n	c29b4 <__multadd+0x74>
   c2980:	6861      	ldr	r1, [r4, #4]
   c2982:	4638      	mov	r0, r7
   c2984:	3101      	adds	r1, #1
   c2986:	f7ff ff79 	bl	c287c <_Balloc>
   c298a:	4680      	mov	r8, r0
   c298c:	b928      	cbnz	r0, c299a <__multadd+0x5a>
   c298e:	4602      	mov	r2, r0
   c2990:	4b0c      	ldr	r3, [pc, #48]	; (c29c4 <__multadd+0x84>)
   c2992:	480d      	ldr	r0, [pc, #52]	; (c29c8 <__multadd+0x88>)
   c2994:	21b5      	movs	r1, #181	; 0xb5
   c2996:	f7fa fb21 	bl	bcfdc <__assert_func>
   c299a:	6922      	ldr	r2, [r4, #16]
   c299c:	3202      	adds	r2, #2
   c299e:	f104 010c 	add.w	r1, r4, #12
   c29a2:	0092      	lsls	r2, r2, #2
   c29a4:	300c      	adds	r0, #12
   c29a6:	f7fe fa73 	bl	c0e90 <memcpy>
   c29aa:	4621      	mov	r1, r4
   c29ac:	4638      	mov	r0, r7
   c29ae:	f7ff ffa5 	bl	c28fc <_Bfree>
   c29b2:	4644      	mov	r4, r8
   c29b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c29b8:	3501      	adds	r5, #1
   c29ba:	615e      	str	r6, [r3, #20]
   c29bc:	6125      	str	r5, [r4, #16]
   c29be:	4620      	mov	r0, r4
   c29c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c29c4:	000c5281 	.word	0x000c5281
   c29c8:	000c5308 	.word	0x000c5308

000c29cc <__s2b>:
   c29cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c29d0:	460c      	mov	r4, r1
   c29d2:	4615      	mov	r5, r2
   c29d4:	461f      	mov	r7, r3
   c29d6:	2209      	movs	r2, #9
   c29d8:	3308      	adds	r3, #8
   c29da:	4606      	mov	r6, r0
   c29dc:	fb93 f3f2 	sdiv	r3, r3, r2
   c29e0:	2100      	movs	r1, #0
   c29e2:	2201      	movs	r2, #1
   c29e4:	429a      	cmp	r2, r3
   c29e6:	db09      	blt.n	c29fc <__s2b+0x30>
   c29e8:	4630      	mov	r0, r6
   c29ea:	f7ff ff47 	bl	c287c <_Balloc>
   c29ee:	b940      	cbnz	r0, c2a02 <__s2b+0x36>
   c29f0:	4602      	mov	r2, r0
   c29f2:	4b19      	ldr	r3, [pc, #100]	; (c2a58 <__s2b+0x8c>)
   c29f4:	4819      	ldr	r0, [pc, #100]	; (c2a5c <__s2b+0x90>)
   c29f6:	21ce      	movs	r1, #206	; 0xce
   c29f8:	f7fa faf0 	bl	bcfdc <__assert_func>
   c29fc:	0052      	lsls	r2, r2, #1
   c29fe:	3101      	adds	r1, #1
   c2a00:	e7f0      	b.n	c29e4 <__s2b+0x18>
   c2a02:	9b08      	ldr	r3, [sp, #32]
   c2a04:	6143      	str	r3, [r0, #20]
   c2a06:	2d09      	cmp	r5, #9
   c2a08:	f04f 0301 	mov.w	r3, #1
   c2a0c:	6103      	str	r3, [r0, #16]
   c2a0e:	dd16      	ble.n	c2a3e <__s2b+0x72>
   c2a10:	f104 0909 	add.w	r9, r4, #9
   c2a14:	46c8      	mov	r8, r9
   c2a16:	442c      	add	r4, r5
   c2a18:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2a1c:	4601      	mov	r1, r0
   c2a1e:	3b30      	subs	r3, #48	; 0x30
   c2a20:	220a      	movs	r2, #10
   c2a22:	4630      	mov	r0, r6
   c2a24:	f7ff ff8c 	bl	c2940 <__multadd>
   c2a28:	45a0      	cmp	r8, r4
   c2a2a:	d1f5      	bne.n	c2a18 <__s2b+0x4c>
   c2a2c:	f1a5 0408 	sub.w	r4, r5, #8
   c2a30:	444c      	add	r4, r9
   c2a32:	1b2d      	subs	r5, r5, r4
   c2a34:	1963      	adds	r3, r4, r5
   c2a36:	42bb      	cmp	r3, r7
   c2a38:	db04      	blt.n	c2a44 <__s2b+0x78>
   c2a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2a3e:	340a      	adds	r4, #10
   c2a40:	2509      	movs	r5, #9
   c2a42:	e7f6      	b.n	c2a32 <__s2b+0x66>
   c2a44:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2a48:	4601      	mov	r1, r0
   c2a4a:	3b30      	subs	r3, #48	; 0x30
   c2a4c:	220a      	movs	r2, #10
   c2a4e:	4630      	mov	r0, r6
   c2a50:	f7ff ff76 	bl	c2940 <__multadd>
   c2a54:	e7ee      	b.n	c2a34 <__s2b+0x68>
   c2a56:	bf00      	nop
   c2a58:	000c5281 	.word	0x000c5281
   c2a5c:	000c5308 	.word	0x000c5308

000c2a60 <__hi0bits>:
   c2a60:	0c03      	lsrs	r3, r0, #16
   c2a62:	041b      	lsls	r3, r3, #16
   c2a64:	b9d3      	cbnz	r3, c2a9c <__hi0bits+0x3c>
   c2a66:	0400      	lsls	r0, r0, #16
   c2a68:	2310      	movs	r3, #16
   c2a6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2a6e:	bf04      	itt	eq
   c2a70:	0200      	lsleq	r0, r0, #8
   c2a72:	3308      	addeq	r3, #8
   c2a74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2a78:	bf04      	itt	eq
   c2a7a:	0100      	lsleq	r0, r0, #4
   c2a7c:	3304      	addeq	r3, #4
   c2a7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2a82:	bf04      	itt	eq
   c2a84:	0080      	lsleq	r0, r0, #2
   c2a86:	3302      	addeq	r3, #2
   c2a88:	2800      	cmp	r0, #0
   c2a8a:	db05      	blt.n	c2a98 <__hi0bits+0x38>
   c2a8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2a90:	f103 0301 	add.w	r3, r3, #1
   c2a94:	bf08      	it	eq
   c2a96:	2320      	moveq	r3, #32
   c2a98:	4618      	mov	r0, r3
   c2a9a:	4770      	bx	lr
   c2a9c:	2300      	movs	r3, #0
   c2a9e:	e7e4      	b.n	c2a6a <__hi0bits+0xa>

000c2aa0 <__lo0bits>:
   c2aa0:	6803      	ldr	r3, [r0, #0]
   c2aa2:	f013 0207 	ands.w	r2, r3, #7
   c2aa6:	4601      	mov	r1, r0
   c2aa8:	d00b      	beq.n	c2ac2 <__lo0bits+0x22>
   c2aaa:	07da      	lsls	r2, r3, #31
   c2aac:	d423      	bmi.n	c2af6 <__lo0bits+0x56>
   c2aae:	0798      	lsls	r0, r3, #30
   c2ab0:	bf49      	itett	mi
   c2ab2:	085b      	lsrmi	r3, r3, #1
   c2ab4:	089b      	lsrpl	r3, r3, #2
   c2ab6:	2001      	movmi	r0, #1
   c2ab8:	600b      	strmi	r3, [r1, #0]
   c2aba:	bf5c      	itt	pl
   c2abc:	600b      	strpl	r3, [r1, #0]
   c2abe:	2002      	movpl	r0, #2
   c2ac0:	4770      	bx	lr
   c2ac2:	b298      	uxth	r0, r3
   c2ac4:	b9a8      	cbnz	r0, c2af2 <__lo0bits+0x52>
   c2ac6:	0c1b      	lsrs	r3, r3, #16
   c2ac8:	2010      	movs	r0, #16
   c2aca:	b2da      	uxtb	r2, r3
   c2acc:	b90a      	cbnz	r2, c2ad2 <__lo0bits+0x32>
   c2ace:	3008      	adds	r0, #8
   c2ad0:	0a1b      	lsrs	r3, r3, #8
   c2ad2:	071a      	lsls	r2, r3, #28
   c2ad4:	bf04      	itt	eq
   c2ad6:	091b      	lsreq	r3, r3, #4
   c2ad8:	3004      	addeq	r0, #4
   c2ada:	079a      	lsls	r2, r3, #30
   c2adc:	bf04      	itt	eq
   c2ade:	089b      	lsreq	r3, r3, #2
   c2ae0:	3002      	addeq	r0, #2
   c2ae2:	07da      	lsls	r2, r3, #31
   c2ae4:	d403      	bmi.n	c2aee <__lo0bits+0x4e>
   c2ae6:	085b      	lsrs	r3, r3, #1
   c2ae8:	f100 0001 	add.w	r0, r0, #1
   c2aec:	d005      	beq.n	c2afa <__lo0bits+0x5a>
   c2aee:	600b      	str	r3, [r1, #0]
   c2af0:	4770      	bx	lr
   c2af2:	4610      	mov	r0, r2
   c2af4:	e7e9      	b.n	c2aca <__lo0bits+0x2a>
   c2af6:	2000      	movs	r0, #0
   c2af8:	4770      	bx	lr
   c2afa:	2020      	movs	r0, #32
   c2afc:	4770      	bx	lr
	...

000c2b00 <__i2b>:
   c2b00:	b510      	push	{r4, lr}
   c2b02:	460c      	mov	r4, r1
   c2b04:	2101      	movs	r1, #1
   c2b06:	f7ff feb9 	bl	c287c <_Balloc>
   c2b0a:	4602      	mov	r2, r0
   c2b0c:	b928      	cbnz	r0, c2b1a <__i2b+0x1a>
   c2b0e:	4b05      	ldr	r3, [pc, #20]	; (c2b24 <__i2b+0x24>)
   c2b10:	4805      	ldr	r0, [pc, #20]	; (c2b28 <__i2b+0x28>)
   c2b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c2b16:	f7fa fa61 	bl	bcfdc <__assert_func>
   c2b1a:	2301      	movs	r3, #1
   c2b1c:	6144      	str	r4, [r0, #20]
   c2b1e:	6103      	str	r3, [r0, #16]
   c2b20:	bd10      	pop	{r4, pc}
   c2b22:	bf00      	nop
   c2b24:	000c5281 	.word	0x000c5281
   c2b28:	000c5308 	.word	0x000c5308

000c2b2c <__multiply>:
   c2b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2b30:	4691      	mov	r9, r2
   c2b32:	690a      	ldr	r2, [r1, #16]
   c2b34:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c2b38:	429a      	cmp	r2, r3
   c2b3a:	bfb8      	it	lt
   c2b3c:	460b      	movlt	r3, r1
   c2b3e:	460c      	mov	r4, r1
   c2b40:	bfbc      	itt	lt
   c2b42:	464c      	movlt	r4, r9
   c2b44:	4699      	movlt	r9, r3
   c2b46:	6927      	ldr	r7, [r4, #16]
   c2b48:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c2b4c:	68a3      	ldr	r3, [r4, #8]
   c2b4e:	6861      	ldr	r1, [r4, #4]
   c2b50:	eb07 060a 	add.w	r6, r7, sl
   c2b54:	42b3      	cmp	r3, r6
   c2b56:	b085      	sub	sp, #20
   c2b58:	bfb8      	it	lt
   c2b5a:	3101      	addlt	r1, #1
   c2b5c:	f7ff fe8e 	bl	c287c <_Balloc>
   c2b60:	b930      	cbnz	r0, c2b70 <__multiply+0x44>
   c2b62:	4602      	mov	r2, r0
   c2b64:	4b44      	ldr	r3, [pc, #272]	; (c2c78 <__multiply+0x14c>)
   c2b66:	4845      	ldr	r0, [pc, #276]	; (c2c7c <__multiply+0x150>)
   c2b68:	f240 115d 	movw	r1, #349	; 0x15d
   c2b6c:	f7fa fa36 	bl	bcfdc <__assert_func>
   c2b70:	f100 0514 	add.w	r5, r0, #20
   c2b74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c2b78:	462b      	mov	r3, r5
   c2b7a:	2200      	movs	r2, #0
   c2b7c:	4543      	cmp	r3, r8
   c2b7e:	d321      	bcc.n	c2bc4 <__multiply+0x98>
   c2b80:	f104 0314 	add.w	r3, r4, #20
   c2b84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c2b88:	f109 0314 	add.w	r3, r9, #20
   c2b8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c2b90:	9202      	str	r2, [sp, #8]
   c2b92:	1b3a      	subs	r2, r7, r4
   c2b94:	3a15      	subs	r2, #21
   c2b96:	f022 0203 	bic.w	r2, r2, #3
   c2b9a:	3204      	adds	r2, #4
   c2b9c:	f104 0115 	add.w	r1, r4, #21
   c2ba0:	428f      	cmp	r7, r1
   c2ba2:	bf38      	it	cc
   c2ba4:	2204      	movcc	r2, #4
   c2ba6:	9201      	str	r2, [sp, #4]
   c2ba8:	9a02      	ldr	r2, [sp, #8]
   c2baa:	9303      	str	r3, [sp, #12]
   c2bac:	429a      	cmp	r2, r3
   c2bae:	d80c      	bhi.n	c2bca <__multiply+0x9e>
   c2bb0:	2e00      	cmp	r6, #0
   c2bb2:	dd03      	ble.n	c2bbc <__multiply+0x90>
   c2bb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c2bb8:	2b00      	cmp	r3, #0
   c2bba:	d05a      	beq.n	c2c72 <__multiply+0x146>
   c2bbc:	6106      	str	r6, [r0, #16]
   c2bbe:	b005      	add	sp, #20
   c2bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2bc4:	f843 2b04 	str.w	r2, [r3], #4
   c2bc8:	e7d8      	b.n	c2b7c <__multiply+0x50>
   c2bca:	f8b3 a000 	ldrh.w	sl, [r3]
   c2bce:	f1ba 0f00 	cmp.w	sl, #0
   c2bd2:	d024      	beq.n	c2c1e <__multiply+0xf2>
   c2bd4:	f104 0e14 	add.w	lr, r4, #20
   c2bd8:	46a9      	mov	r9, r5
   c2bda:	f04f 0c00 	mov.w	ip, #0
   c2bde:	f85e 2b04 	ldr.w	r2, [lr], #4
   c2be2:	f8d9 1000 	ldr.w	r1, [r9]
   c2be6:	fa1f fb82 	uxth.w	fp, r2
   c2bea:	b289      	uxth	r1, r1
   c2bec:	fb0a 110b 	mla	r1, sl, fp, r1
   c2bf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c2bf4:	f8d9 2000 	ldr.w	r2, [r9]
   c2bf8:	4461      	add	r1, ip
   c2bfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2bfe:	fb0a c20b 	mla	r2, sl, fp, ip
   c2c02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c2c06:	b289      	uxth	r1, r1
   c2c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c2c0c:	4577      	cmp	r7, lr
   c2c0e:	f849 1b04 	str.w	r1, [r9], #4
   c2c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2c16:	d8e2      	bhi.n	c2bde <__multiply+0xb2>
   c2c18:	9a01      	ldr	r2, [sp, #4]
   c2c1a:	f845 c002 	str.w	ip, [r5, r2]
   c2c1e:	9a03      	ldr	r2, [sp, #12]
   c2c20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c2c24:	3304      	adds	r3, #4
   c2c26:	f1b9 0f00 	cmp.w	r9, #0
   c2c2a:	d020      	beq.n	c2c6e <__multiply+0x142>
   c2c2c:	6829      	ldr	r1, [r5, #0]
   c2c2e:	f104 0c14 	add.w	ip, r4, #20
   c2c32:	46ae      	mov	lr, r5
   c2c34:	f04f 0a00 	mov.w	sl, #0
   c2c38:	f8bc b000 	ldrh.w	fp, [ip]
   c2c3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c2c40:	fb09 220b 	mla	r2, r9, fp, r2
   c2c44:	4492      	add	sl, r2
   c2c46:	b289      	uxth	r1, r1
   c2c48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c2c4c:	f84e 1b04 	str.w	r1, [lr], #4
   c2c50:	f85c 2b04 	ldr.w	r2, [ip], #4
   c2c54:	f8be 1000 	ldrh.w	r1, [lr]
   c2c58:	0c12      	lsrs	r2, r2, #16
   c2c5a:	fb09 1102 	mla	r1, r9, r2, r1
   c2c5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c2c62:	4567      	cmp	r7, ip
   c2c64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c2c68:	d8e6      	bhi.n	c2c38 <__multiply+0x10c>
   c2c6a:	9a01      	ldr	r2, [sp, #4]
   c2c6c:	50a9      	str	r1, [r5, r2]
   c2c6e:	3504      	adds	r5, #4
   c2c70:	e79a      	b.n	c2ba8 <__multiply+0x7c>
   c2c72:	3e01      	subs	r6, #1
   c2c74:	e79c      	b.n	c2bb0 <__multiply+0x84>
   c2c76:	bf00      	nop
   c2c78:	000c5281 	.word	0x000c5281
   c2c7c:	000c5308 	.word	0x000c5308

000c2c80 <__pow5mult>:
   c2c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2c84:	4615      	mov	r5, r2
   c2c86:	f012 0203 	ands.w	r2, r2, #3
   c2c8a:	4606      	mov	r6, r0
   c2c8c:	460f      	mov	r7, r1
   c2c8e:	d007      	beq.n	c2ca0 <__pow5mult+0x20>
   c2c90:	4c25      	ldr	r4, [pc, #148]	; (c2d28 <__pow5mult+0xa8>)
   c2c92:	3a01      	subs	r2, #1
   c2c94:	2300      	movs	r3, #0
   c2c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c2c9a:	f7ff fe51 	bl	c2940 <__multadd>
   c2c9e:	4607      	mov	r7, r0
   c2ca0:	10ad      	asrs	r5, r5, #2
   c2ca2:	d03d      	beq.n	c2d20 <__pow5mult+0xa0>
   c2ca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c2ca6:	b97c      	cbnz	r4, c2cc8 <__pow5mult+0x48>
   c2ca8:	2010      	movs	r0, #16
   c2caa:	f7fa f947 	bl	bcf3c <malloc>
   c2cae:	4602      	mov	r2, r0
   c2cb0:	6270      	str	r0, [r6, #36]	; 0x24
   c2cb2:	b928      	cbnz	r0, c2cc0 <__pow5mult+0x40>
   c2cb4:	4b1d      	ldr	r3, [pc, #116]	; (c2d2c <__pow5mult+0xac>)
   c2cb6:	481e      	ldr	r0, [pc, #120]	; (c2d30 <__pow5mult+0xb0>)
   c2cb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c2cbc:	f7fa f98e 	bl	bcfdc <__assert_func>
   c2cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c2cc4:	6004      	str	r4, [r0, #0]
   c2cc6:	60c4      	str	r4, [r0, #12]
   c2cc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c2ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c2cd0:	b94c      	cbnz	r4, c2ce6 <__pow5mult+0x66>
   c2cd2:	f240 2171 	movw	r1, #625	; 0x271
   c2cd6:	4630      	mov	r0, r6
   c2cd8:	f7ff ff12 	bl	c2b00 <__i2b>
   c2cdc:	2300      	movs	r3, #0
   c2cde:	f8c8 0008 	str.w	r0, [r8, #8]
   c2ce2:	4604      	mov	r4, r0
   c2ce4:	6003      	str	r3, [r0, #0]
   c2ce6:	f04f 0900 	mov.w	r9, #0
   c2cea:	07eb      	lsls	r3, r5, #31
   c2cec:	d50a      	bpl.n	c2d04 <__pow5mult+0x84>
   c2cee:	4639      	mov	r1, r7
   c2cf0:	4622      	mov	r2, r4
   c2cf2:	4630      	mov	r0, r6
   c2cf4:	f7ff ff1a 	bl	c2b2c <__multiply>
   c2cf8:	4639      	mov	r1, r7
   c2cfa:	4680      	mov	r8, r0
   c2cfc:	4630      	mov	r0, r6
   c2cfe:	f7ff fdfd 	bl	c28fc <_Bfree>
   c2d02:	4647      	mov	r7, r8
   c2d04:	106d      	asrs	r5, r5, #1
   c2d06:	d00b      	beq.n	c2d20 <__pow5mult+0xa0>
   c2d08:	6820      	ldr	r0, [r4, #0]
   c2d0a:	b938      	cbnz	r0, c2d1c <__pow5mult+0x9c>
   c2d0c:	4622      	mov	r2, r4
   c2d0e:	4621      	mov	r1, r4
   c2d10:	4630      	mov	r0, r6
   c2d12:	f7ff ff0b 	bl	c2b2c <__multiply>
   c2d16:	6020      	str	r0, [r4, #0]
   c2d18:	f8c0 9000 	str.w	r9, [r0]
   c2d1c:	4604      	mov	r4, r0
   c2d1e:	e7e4      	b.n	c2cea <__pow5mult+0x6a>
   c2d20:	4638      	mov	r0, r7
   c2d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2d26:	bf00      	nop
   c2d28:	000c5458 	.word	0x000c5458
   c2d2c:	000c505e 	.word	0x000c505e
   c2d30:	000c5308 	.word	0x000c5308

000c2d34 <__lshift>:
   c2d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2d38:	460c      	mov	r4, r1
   c2d3a:	6849      	ldr	r1, [r1, #4]
   c2d3c:	6923      	ldr	r3, [r4, #16]
   c2d3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c2d42:	68a3      	ldr	r3, [r4, #8]
   c2d44:	4607      	mov	r7, r0
   c2d46:	4691      	mov	r9, r2
   c2d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c2d4c:	f108 0601 	add.w	r6, r8, #1
   c2d50:	42b3      	cmp	r3, r6
   c2d52:	db0b      	blt.n	c2d6c <__lshift+0x38>
   c2d54:	4638      	mov	r0, r7
   c2d56:	f7ff fd91 	bl	c287c <_Balloc>
   c2d5a:	4605      	mov	r5, r0
   c2d5c:	b948      	cbnz	r0, c2d72 <__lshift+0x3e>
   c2d5e:	4602      	mov	r2, r0
   c2d60:	4b2a      	ldr	r3, [pc, #168]	; (c2e0c <__lshift+0xd8>)
   c2d62:	482b      	ldr	r0, [pc, #172]	; (c2e10 <__lshift+0xdc>)
   c2d64:	f240 11d9 	movw	r1, #473	; 0x1d9
   c2d68:	f7fa f938 	bl	bcfdc <__assert_func>
   c2d6c:	3101      	adds	r1, #1
   c2d6e:	005b      	lsls	r3, r3, #1
   c2d70:	e7ee      	b.n	c2d50 <__lshift+0x1c>
   c2d72:	2300      	movs	r3, #0
   c2d74:	f100 0114 	add.w	r1, r0, #20
   c2d78:	f100 0210 	add.w	r2, r0, #16
   c2d7c:	4618      	mov	r0, r3
   c2d7e:	4553      	cmp	r3, sl
   c2d80:	db37      	blt.n	c2df2 <__lshift+0xbe>
   c2d82:	6920      	ldr	r0, [r4, #16]
   c2d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c2d88:	f104 0314 	add.w	r3, r4, #20
   c2d8c:	f019 091f 	ands.w	r9, r9, #31
   c2d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c2d94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c2d98:	d02f      	beq.n	c2dfa <__lshift+0xc6>
   c2d9a:	f1c9 0e20 	rsb	lr, r9, #32
   c2d9e:	468a      	mov	sl, r1
   c2da0:	f04f 0c00 	mov.w	ip, #0
   c2da4:	681a      	ldr	r2, [r3, #0]
   c2da6:	fa02 f209 	lsl.w	r2, r2, r9
   c2daa:	ea42 020c 	orr.w	r2, r2, ip
   c2dae:	f84a 2b04 	str.w	r2, [sl], #4
   c2db2:	f853 2b04 	ldr.w	r2, [r3], #4
   c2db6:	4298      	cmp	r0, r3
   c2db8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c2dbc:	d8f2      	bhi.n	c2da4 <__lshift+0x70>
   c2dbe:	1b03      	subs	r3, r0, r4
   c2dc0:	3b15      	subs	r3, #21
   c2dc2:	f023 0303 	bic.w	r3, r3, #3
   c2dc6:	3304      	adds	r3, #4
   c2dc8:	f104 0215 	add.w	r2, r4, #21
   c2dcc:	4290      	cmp	r0, r2
   c2dce:	bf38      	it	cc
   c2dd0:	2304      	movcc	r3, #4
   c2dd2:	f841 c003 	str.w	ip, [r1, r3]
   c2dd6:	f1bc 0f00 	cmp.w	ip, #0
   c2dda:	d001      	beq.n	c2de0 <__lshift+0xac>
   c2ddc:	f108 0602 	add.w	r6, r8, #2
   c2de0:	3e01      	subs	r6, #1
   c2de2:	4638      	mov	r0, r7
   c2de4:	612e      	str	r6, [r5, #16]
   c2de6:	4621      	mov	r1, r4
   c2de8:	f7ff fd88 	bl	c28fc <_Bfree>
   c2dec:	4628      	mov	r0, r5
   c2dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2df2:	f842 0f04 	str.w	r0, [r2, #4]!
   c2df6:	3301      	adds	r3, #1
   c2df8:	e7c1      	b.n	c2d7e <__lshift+0x4a>
   c2dfa:	3904      	subs	r1, #4
   c2dfc:	f853 2b04 	ldr.w	r2, [r3], #4
   c2e00:	f841 2f04 	str.w	r2, [r1, #4]!
   c2e04:	4298      	cmp	r0, r3
   c2e06:	d8f9      	bhi.n	c2dfc <__lshift+0xc8>
   c2e08:	e7ea      	b.n	c2de0 <__lshift+0xac>
   c2e0a:	bf00      	nop
   c2e0c:	000c5281 	.word	0x000c5281
   c2e10:	000c5308 	.word	0x000c5308

000c2e14 <__mcmp>:
   c2e14:	b530      	push	{r4, r5, lr}
   c2e16:	6902      	ldr	r2, [r0, #16]
   c2e18:	690c      	ldr	r4, [r1, #16]
   c2e1a:	1b12      	subs	r2, r2, r4
   c2e1c:	d10e      	bne.n	c2e3c <__mcmp+0x28>
   c2e1e:	f100 0314 	add.w	r3, r0, #20
   c2e22:	3114      	adds	r1, #20
   c2e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c2e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c2e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c2e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c2e34:	42a5      	cmp	r5, r4
   c2e36:	d003      	beq.n	c2e40 <__mcmp+0x2c>
   c2e38:	d305      	bcc.n	c2e46 <__mcmp+0x32>
   c2e3a:	2201      	movs	r2, #1
   c2e3c:	4610      	mov	r0, r2
   c2e3e:	bd30      	pop	{r4, r5, pc}
   c2e40:	4283      	cmp	r3, r0
   c2e42:	d3f3      	bcc.n	c2e2c <__mcmp+0x18>
   c2e44:	e7fa      	b.n	c2e3c <__mcmp+0x28>
   c2e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2e4a:	e7f7      	b.n	c2e3c <__mcmp+0x28>

000c2e4c <__mdiff>:
   c2e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2e50:	460c      	mov	r4, r1
   c2e52:	4606      	mov	r6, r0
   c2e54:	4611      	mov	r1, r2
   c2e56:	4620      	mov	r0, r4
   c2e58:	4690      	mov	r8, r2
   c2e5a:	f7ff ffdb 	bl	c2e14 <__mcmp>
   c2e5e:	1e05      	subs	r5, r0, #0
   c2e60:	d110      	bne.n	c2e84 <__mdiff+0x38>
   c2e62:	4629      	mov	r1, r5
   c2e64:	4630      	mov	r0, r6
   c2e66:	f7ff fd09 	bl	c287c <_Balloc>
   c2e6a:	b930      	cbnz	r0, c2e7a <__mdiff+0x2e>
   c2e6c:	4b3a      	ldr	r3, [pc, #232]	; (c2f58 <__mdiff+0x10c>)
   c2e6e:	4602      	mov	r2, r0
   c2e70:	f240 2132 	movw	r1, #562	; 0x232
   c2e74:	4839      	ldr	r0, [pc, #228]	; (c2f5c <__mdiff+0x110>)
   c2e76:	f7fa f8b1 	bl	bcfdc <__assert_func>
   c2e7a:	2301      	movs	r3, #1
   c2e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c2e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2e84:	bfa4      	itt	ge
   c2e86:	4643      	movge	r3, r8
   c2e88:	46a0      	movge	r8, r4
   c2e8a:	4630      	mov	r0, r6
   c2e8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c2e90:	bfa6      	itte	ge
   c2e92:	461c      	movge	r4, r3
   c2e94:	2500      	movge	r5, #0
   c2e96:	2501      	movlt	r5, #1
   c2e98:	f7ff fcf0 	bl	c287c <_Balloc>
   c2e9c:	b920      	cbnz	r0, c2ea8 <__mdiff+0x5c>
   c2e9e:	4b2e      	ldr	r3, [pc, #184]	; (c2f58 <__mdiff+0x10c>)
   c2ea0:	4602      	mov	r2, r0
   c2ea2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c2ea6:	e7e5      	b.n	c2e74 <__mdiff+0x28>
   c2ea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c2eac:	6926      	ldr	r6, [r4, #16]
   c2eae:	60c5      	str	r5, [r0, #12]
   c2eb0:	f104 0914 	add.w	r9, r4, #20
   c2eb4:	f108 0514 	add.w	r5, r8, #20
   c2eb8:	f100 0e14 	add.w	lr, r0, #20
   c2ebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c2ec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c2ec4:	f108 0210 	add.w	r2, r8, #16
   c2ec8:	46f2      	mov	sl, lr
   c2eca:	2100      	movs	r1, #0
   c2ecc:	f859 3b04 	ldr.w	r3, [r9], #4
   c2ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c2ed4:	fa1f f883 	uxth.w	r8, r3
   c2ed8:	fa11 f18b 	uxtah	r1, r1, fp
   c2edc:	0c1b      	lsrs	r3, r3, #16
   c2ede:	eba1 0808 	sub.w	r8, r1, r8
   c2ee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c2ee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c2eea:	fa1f f888 	uxth.w	r8, r8
   c2eee:	1419      	asrs	r1, r3, #16
   c2ef0:	454e      	cmp	r6, r9
   c2ef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c2ef6:	f84a 3b04 	str.w	r3, [sl], #4
   c2efa:	d8e7      	bhi.n	c2ecc <__mdiff+0x80>
   c2efc:	1b33      	subs	r3, r6, r4
   c2efe:	3b15      	subs	r3, #21
   c2f00:	f023 0303 	bic.w	r3, r3, #3
   c2f04:	3304      	adds	r3, #4
   c2f06:	3415      	adds	r4, #21
   c2f08:	42a6      	cmp	r6, r4
   c2f0a:	bf38      	it	cc
   c2f0c:	2304      	movcc	r3, #4
   c2f0e:	441d      	add	r5, r3
   c2f10:	4473      	add	r3, lr
   c2f12:	469e      	mov	lr, r3
   c2f14:	462e      	mov	r6, r5
   c2f16:	4566      	cmp	r6, ip
   c2f18:	d30e      	bcc.n	c2f38 <__mdiff+0xec>
   c2f1a:	f10c 0203 	add.w	r2, ip, #3
   c2f1e:	1b52      	subs	r2, r2, r5
   c2f20:	f022 0203 	bic.w	r2, r2, #3
   c2f24:	3d03      	subs	r5, #3
   c2f26:	45ac      	cmp	ip, r5
   c2f28:	bf38      	it	cc
   c2f2a:	2200      	movcc	r2, #0
   c2f2c:	441a      	add	r2, r3
   c2f2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c2f32:	b17b      	cbz	r3, c2f54 <__mdiff+0x108>
   c2f34:	6107      	str	r7, [r0, #16]
   c2f36:	e7a3      	b.n	c2e80 <__mdiff+0x34>
   c2f38:	f856 8b04 	ldr.w	r8, [r6], #4
   c2f3c:	fa11 f288 	uxtah	r2, r1, r8
   c2f40:	1414      	asrs	r4, r2, #16
   c2f42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c2f46:	b292      	uxth	r2, r2
   c2f48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c2f4c:	f84e 2b04 	str.w	r2, [lr], #4
   c2f50:	1421      	asrs	r1, r4, #16
   c2f52:	e7e0      	b.n	c2f16 <__mdiff+0xca>
   c2f54:	3f01      	subs	r7, #1
   c2f56:	e7ea      	b.n	c2f2e <__mdiff+0xe2>
   c2f58:	000c5281 	.word	0x000c5281
   c2f5c:	000c5308 	.word	0x000c5308

000c2f60 <__ulp>:
   c2f60:	b082      	sub	sp, #8
   c2f62:	ed8d 0b00 	vstr	d0, [sp]
   c2f66:	9b01      	ldr	r3, [sp, #4]
   c2f68:	4912      	ldr	r1, [pc, #72]	; (c2fb4 <__ulp+0x54>)
   c2f6a:	4019      	ands	r1, r3
   c2f6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c2f70:	2900      	cmp	r1, #0
   c2f72:	dd05      	ble.n	c2f80 <__ulp+0x20>
   c2f74:	2200      	movs	r2, #0
   c2f76:	460b      	mov	r3, r1
   c2f78:	ec43 2b10 	vmov	d0, r2, r3
   c2f7c:	b002      	add	sp, #8
   c2f7e:	4770      	bx	lr
   c2f80:	4249      	negs	r1, r1
   c2f82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c2f86:	ea4f 5021 	mov.w	r0, r1, asr #20
   c2f8a:	f04f 0200 	mov.w	r2, #0
   c2f8e:	f04f 0300 	mov.w	r3, #0
   c2f92:	da04      	bge.n	c2f9e <__ulp+0x3e>
   c2f94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c2f98:	fa41 f300 	asr.w	r3, r1, r0
   c2f9c:	e7ec      	b.n	c2f78 <__ulp+0x18>
   c2f9e:	f1a0 0114 	sub.w	r1, r0, #20
   c2fa2:	291e      	cmp	r1, #30
   c2fa4:	bfda      	itte	le
   c2fa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c2faa:	fa20 f101 	lsrle.w	r1, r0, r1
   c2fae:	2101      	movgt	r1, #1
   c2fb0:	460a      	mov	r2, r1
   c2fb2:	e7e1      	b.n	c2f78 <__ulp+0x18>
   c2fb4:	7ff00000 	.word	0x7ff00000

000c2fb8 <__b2d>:
   c2fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2fba:	6905      	ldr	r5, [r0, #16]
   c2fbc:	f100 0714 	add.w	r7, r0, #20
   c2fc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c2fc4:	1f2e      	subs	r6, r5, #4
   c2fc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c2fca:	4620      	mov	r0, r4
   c2fcc:	f7ff fd48 	bl	c2a60 <__hi0bits>
   c2fd0:	f1c0 0320 	rsb	r3, r0, #32
   c2fd4:	280a      	cmp	r0, #10
   c2fd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c3054 <__b2d+0x9c>
   c2fda:	600b      	str	r3, [r1, #0]
   c2fdc:	dc14      	bgt.n	c3008 <__b2d+0x50>
   c2fde:	f1c0 0e0b 	rsb	lr, r0, #11
   c2fe2:	fa24 f10e 	lsr.w	r1, r4, lr
   c2fe6:	42b7      	cmp	r7, r6
   c2fe8:	ea41 030c 	orr.w	r3, r1, ip
   c2fec:	bf34      	ite	cc
   c2fee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c2ff2:	2100      	movcs	r1, #0
   c2ff4:	3015      	adds	r0, #21
   c2ff6:	fa04 f000 	lsl.w	r0, r4, r0
   c2ffa:	fa21 f10e 	lsr.w	r1, r1, lr
   c2ffe:	ea40 0201 	orr.w	r2, r0, r1
   c3002:	ec43 2b10 	vmov	d0, r2, r3
   c3006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3008:	42b7      	cmp	r7, r6
   c300a:	bf3a      	itte	cc
   c300c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3010:	f1a5 0608 	subcc.w	r6, r5, #8
   c3014:	2100      	movcs	r1, #0
   c3016:	380b      	subs	r0, #11
   c3018:	d017      	beq.n	c304a <__b2d+0x92>
   c301a:	f1c0 0c20 	rsb	ip, r0, #32
   c301e:	fa04 f500 	lsl.w	r5, r4, r0
   c3022:	42be      	cmp	r6, r7
   c3024:	fa21 f40c 	lsr.w	r4, r1, ip
   c3028:	ea45 0504 	orr.w	r5, r5, r4
   c302c:	bf8c      	ite	hi
   c302e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c3032:	2400      	movls	r4, #0
   c3034:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c3038:	fa01 f000 	lsl.w	r0, r1, r0
   c303c:	fa24 f40c 	lsr.w	r4, r4, ip
   c3040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c3044:	ea40 0204 	orr.w	r2, r0, r4
   c3048:	e7db      	b.n	c3002 <__b2d+0x4a>
   c304a:	ea44 030c 	orr.w	r3, r4, ip
   c304e:	460a      	mov	r2, r1
   c3050:	e7d7      	b.n	c3002 <__b2d+0x4a>
   c3052:	bf00      	nop
   c3054:	3ff00000 	.word	0x3ff00000

000c3058 <__d2b>:
   c3058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c305c:	4689      	mov	r9, r1
   c305e:	2101      	movs	r1, #1
   c3060:	ec57 6b10 	vmov	r6, r7, d0
   c3064:	4690      	mov	r8, r2
   c3066:	f7ff fc09 	bl	c287c <_Balloc>
   c306a:	4604      	mov	r4, r0
   c306c:	b930      	cbnz	r0, c307c <__d2b+0x24>
   c306e:	4602      	mov	r2, r0
   c3070:	4b25      	ldr	r3, [pc, #148]	; (c3108 <__d2b+0xb0>)
   c3072:	4826      	ldr	r0, [pc, #152]	; (c310c <__d2b+0xb4>)
   c3074:	f240 310a 	movw	r1, #778	; 0x30a
   c3078:	f7f9 ffb0 	bl	bcfdc <__assert_func>
   c307c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c3080:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c3084:	bb35      	cbnz	r5, c30d4 <__d2b+0x7c>
   c3086:	2e00      	cmp	r6, #0
   c3088:	9301      	str	r3, [sp, #4]
   c308a:	d028      	beq.n	c30de <__d2b+0x86>
   c308c:	4668      	mov	r0, sp
   c308e:	9600      	str	r6, [sp, #0]
   c3090:	f7ff fd06 	bl	c2aa0 <__lo0bits>
   c3094:	9900      	ldr	r1, [sp, #0]
   c3096:	b300      	cbz	r0, c30da <__d2b+0x82>
   c3098:	9a01      	ldr	r2, [sp, #4]
   c309a:	f1c0 0320 	rsb	r3, r0, #32
   c309e:	fa02 f303 	lsl.w	r3, r2, r3
   c30a2:	430b      	orrs	r3, r1
   c30a4:	40c2      	lsrs	r2, r0
   c30a6:	6163      	str	r3, [r4, #20]
   c30a8:	9201      	str	r2, [sp, #4]
   c30aa:	9b01      	ldr	r3, [sp, #4]
   c30ac:	61a3      	str	r3, [r4, #24]
   c30ae:	2b00      	cmp	r3, #0
   c30b0:	bf14      	ite	ne
   c30b2:	2202      	movne	r2, #2
   c30b4:	2201      	moveq	r2, #1
   c30b6:	6122      	str	r2, [r4, #16]
   c30b8:	b1d5      	cbz	r5, c30f0 <__d2b+0x98>
   c30ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c30be:	4405      	add	r5, r0
   c30c0:	f8c9 5000 	str.w	r5, [r9]
   c30c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c30c8:	f8c8 0000 	str.w	r0, [r8]
   c30cc:	4620      	mov	r0, r4
   c30ce:	b003      	add	sp, #12
   c30d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c30d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c30d8:	e7d5      	b.n	c3086 <__d2b+0x2e>
   c30da:	6161      	str	r1, [r4, #20]
   c30dc:	e7e5      	b.n	c30aa <__d2b+0x52>
   c30de:	a801      	add	r0, sp, #4
   c30e0:	f7ff fcde 	bl	c2aa0 <__lo0bits>
   c30e4:	9b01      	ldr	r3, [sp, #4]
   c30e6:	6163      	str	r3, [r4, #20]
   c30e8:	2201      	movs	r2, #1
   c30ea:	6122      	str	r2, [r4, #16]
   c30ec:	3020      	adds	r0, #32
   c30ee:	e7e3      	b.n	c30b8 <__d2b+0x60>
   c30f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c30f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c30f8:	f8c9 0000 	str.w	r0, [r9]
   c30fc:	6918      	ldr	r0, [r3, #16]
   c30fe:	f7ff fcaf 	bl	c2a60 <__hi0bits>
   c3102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c3106:	e7df      	b.n	c30c8 <__d2b+0x70>
   c3108:	000c5281 	.word	0x000c5281
   c310c:	000c5308 	.word	0x000c5308

000c3110 <__ratio>:
   c3110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3114:	4688      	mov	r8, r1
   c3116:	4669      	mov	r1, sp
   c3118:	4681      	mov	r9, r0
   c311a:	f7ff ff4d 	bl	c2fb8 <__b2d>
   c311e:	a901      	add	r1, sp, #4
   c3120:	4640      	mov	r0, r8
   c3122:	ec55 4b10 	vmov	r4, r5, d0
   c3126:	f7ff ff47 	bl	c2fb8 <__b2d>
   c312a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c312e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c3132:	eba3 0c02 	sub.w	ip, r3, r2
   c3136:	e9dd 3200 	ldrd	r3, r2, [sp]
   c313a:	1a9b      	subs	r3, r3, r2
   c313c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c3140:	ec51 0b10 	vmov	r0, r1, d0
   c3144:	2b00      	cmp	r3, #0
   c3146:	bfd6      	itet	le
   c3148:	460a      	movle	r2, r1
   c314a:	462a      	movgt	r2, r5
   c314c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c3150:	468b      	mov	fp, r1
   c3152:	462f      	mov	r7, r5
   c3154:	bfd4      	ite	le
   c3156:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c315a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c315e:	4620      	mov	r0, r4
   c3160:	ee10 2a10 	vmov	r2, s0
   c3164:	465b      	mov	r3, fp
   c3166:	4639      	mov	r1, r7
   c3168:	f7fd fc04 	bl	c0974 <__aeabi_ddiv>
   c316c:	ec41 0b10 	vmov	d0, r0, r1
   c3170:	b003      	add	sp, #12
   c3172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3176 <__copybits>:
   c3176:	3901      	subs	r1, #1
   c3178:	b570      	push	{r4, r5, r6, lr}
   c317a:	1149      	asrs	r1, r1, #5
   c317c:	6914      	ldr	r4, [r2, #16]
   c317e:	3101      	adds	r1, #1
   c3180:	f102 0314 	add.w	r3, r2, #20
   c3184:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c3188:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c318c:	1f05      	subs	r5, r0, #4
   c318e:	42a3      	cmp	r3, r4
   c3190:	d30c      	bcc.n	c31ac <__copybits+0x36>
   c3192:	1aa3      	subs	r3, r4, r2
   c3194:	3b11      	subs	r3, #17
   c3196:	f023 0303 	bic.w	r3, r3, #3
   c319a:	3211      	adds	r2, #17
   c319c:	42a2      	cmp	r2, r4
   c319e:	bf88      	it	hi
   c31a0:	2300      	movhi	r3, #0
   c31a2:	4418      	add	r0, r3
   c31a4:	2300      	movs	r3, #0
   c31a6:	4288      	cmp	r0, r1
   c31a8:	d305      	bcc.n	c31b6 <__copybits+0x40>
   c31aa:	bd70      	pop	{r4, r5, r6, pc}
   c31ac:	f853 6b04 	ldr.w	r6, [r3], #4
   c31b0:	f845 6f04 	str.w	r6, [r5, #4]!
   c31b4:	e7eb      	b.n	c318e <__copybits+0x18>
   c31b6:	f840 3b04 	str.w	r3, [r0], #4
   c31ba:	e7f4      	b.n	c31a6 <__copybits+0x30>

000c31bc <__any_on>:
   c31bc:	f100 0214 	add.w	r2, r0, #20
   c31c0:	6900      	ldr	r0, [r0, #16]
   c31c2:	114b      	asrs	r3, r1, #5
   c31c4:	4298      	cmp	r0, r3
   c31c6:	b510      	push	{r4, lr}
   c31c8:	db11      	blt.n	c31ee <__any_on+0x32>
   c31ca:	dd0a      	ble.n	c31e2 <__any_on+0x26>
   c31cc:	f011 011f 	ands.w	r1, r1, #31
   c31d0:	d007      	beq.n	c31e2 <__any_on+0x26>
   c31d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c31d6:	fa24 f001 	lsr.w	r0, r4, r1
   c31da:	fa00 f101 	lsl.w	r1, r0, r1
   c31de:	428c      	cmp	r4, r1
   c31e0:	d10b      	bne.n	c31fa <__any_on+0x3e>
   c31e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c31e6:	4293      	cmp	r3, r2
   c31e8:	d803      	bhi.n	c31f2 <__any_on+0x36>
   c31ea:	2000      	movs	r0, #0
   c31ec:	bd10      	pop	{r4, pc}
   c31ee:	4603      	mov	r3, r0
   c31f0:	e7f7      	b.n	c31e2 <__any_on+0x26>
   c31f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c31f6:	2900      	cmp	r1, #0
   c31f8:	d0f5      	beq.n	c31e6 <__any_on+0x2a>
   c31fa:	2001      	movs	r0, #1
   c31fc:	e7f6      	b.n	c31ec <__any_on+0x30>
	...

000c3200 <_open_r>:
   c3200:	b538      	push	{r3, r4, r5, lr}
   c3202:	4d07      	ldr	r5, [pc, #28]	; (c3220 <_open_r+0x20>)
   c3204:	4604      	mov	r4, r0
   c3206:	4608      	mov	r0, r1
   c3208:	4611      	mov	r1, r2
   c320a:	2200      	movs	r2, #0
   c320c:	602a      	str	r2, [r5, #0]
   c320e:	461a      	mov	r2, r3
   c3210:	f7f9 fc38 	bl	bca84 <_open>
   c3214:	1c43      	adds	r3, r0, #1
   c3216:	d102      	bne.n	c321e <_open_r+0x1e>
   c3218:	682b      	ldr	r3, [r5, #0]
   c321a:	b103      	cbz	r3, c321e <_open_r+0x1e>
   c321c:	6023      	str	r3, [r4, #0]
   c321e:	bd38      	pop	{r3, r4, r5, pc}
   c3220:	2003e7f0 	.word	0x2003e7f0

000c3224 <_read_r>:
   c3224:	b538      	push	{r3, r4, r5, lr}
   c3226:	4d07      	ldr	r5, [pc, #28]	; (c3244 <_read_r+0x20>)
   c3228:	4604      	mov	r4, r0
   c322a:	4608      	mov	r0, r1
   c322c:	4611      	mov	r1, r2
   c322e:	2200      	movs	r2, #0
   c3230:	602a      	str	r2, [r5, #0]
   c3232:	461a      	mov	r2, r3
   c3234:	f7f9 fc36 	bl	bcaa4 <_read>
   c3238:	1c43      	adds	r3, r0, #1
   c323a:	d102      	bne.n	c3242 <_read_r+0x1e>
   c323c:	682b      	ldr	r3, [r5, #0]
   c323e:	b103      	cbz	r3, c3242 <_read_r+0x1e>
   c3240:	6023      	str	r3, [r4, #0]
   c3242:	bd38      	pop	{r3, r4, r5, pc}
   c3244:	2003e7f0 	.word	0x2003e7f0

000c3248 <nanf>:
   c3248:	ed9f 0a01 	vldr	s0, [pc, #4]	; c3250 <nanf+0x8>
   c324c:	4770      	bx	lr
   c324e:	bf00      	nop
   c3250:	7fc00000 	.word	0x7fc00000

000c3254 <__ascii_wctomb>:
   c3254:	b149      	cbz	r1, c326a <__ascii_wctomb+0x16>
   c3256:	2aff      	cmp	r2, #255	; 0xff
   c3258:	bf85      	ittet	hi
   c325a:	238a      	movhi	r3, #138	; 0x8a
   c325c:	6003      	strhi	r3, [r0, #0]
   c325e:	700a      	strbls	r2, [r1, #0]
   c3260:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c3264:	bf98      	it	ls
   c3266:	2001      	movls	r0, #1
   c3268:	4770      	bx	lr
   c326a:	4608      	mov	r0, r1
   c326c:	4770      	bx	lr
	...

000c3270 <__aeabi_d2lz>:
   c3270:	b538      	push	{r3, r4, r5, lr}
   c3272:	2200      	movs	r2, #0
   c3274:	2300      	movs	r3, #0
   c3276:	4604      	mov	r4, r0
   c3278:	460d      	mov	r5, r1
   c327a:	f7fd fcc3 	bl	c0c04 <__aeabi_dcmplt>
   c327e:	b928      	cbnz	r0, c328c <__aeabi_d2lz+0x1c>
   c3280:	4620      	mov	r0, r4
   c3282:	4629      	mov	r1, r5
   c3284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3288:	f7fd bd92 	b.w	c0db0 <__aeabi_d2ulz>
   c328c:	4620      	mov	r0, r4
   c328e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c3292:	f7fd fd8d 	bl	c0db0 <__aeabi_d2ulz>
   c3296:	4240      	negs	r0, r0
   c3298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c329c:	bd38      	pop	{r3, r4, r5, pc}
   c329e:	bf00      	nop

000c32a0 <dynalib_user>:
   c32a0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c32b0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c32c0:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c32d0:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c32e0:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c32f0:	6720 7461 7765 7961 7720 7469 2068 2061      gateway with a 
   c3300:	6564 6976 6563 4449 6f20 2066 7325 4c00     deviceID of %s.L
   c3310:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   c3320:	696c 657a 2064 7361 6e20 646f 2065 6925     lized as node %i
   c3330:	6120 646e 6120 6420 7665 6369 4965 2044      and a deviceID 
   c3340:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   c3350:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   c3360:	6e61 7520 636e 6e6f 6966 7567 6572 2064     an unconfigured 
   c3370:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   c3380:	6976 6563 4449 6f20 2066 7325 5000 7261     viceID of %s.Par
   c3390:	6573 2064 7553 6363 7365 6673 6c75 796c     sed Successfully
   c33a0:	5000 7261 6973 676e 6520 7272 726f 7220     .Parsing error r
   c33b0:	7365 7465 6974 676e 6e20 646f 4965 2044     esetting nodeID 
   c33c0:	6164 6174 6162 6573 6e00 6c75 006c 6f6e     database.null.no
   c33d0:	6564 0073 4964 0044 7246 6d6f 6720 7465     des.dID.From get
   c33e0:	7954 6570 6620 6e75 7463 6f69 206e 6f4e     Type function No
   c33f0:	6564 6e20 6d75 6562 2072 6f6e 2074 6f66     de number not fo
   c3400:	6e75 0064 7974 6570 4600 6f72 206d 6567     und.type.From ge
   c3410:	4174 656c 7472 6620 6e75 7463 6f69 2c6e     tAlert function,
   c3420:	4e20 646f 2065 756e 626d 7265 6e20 746f      Node number not
   c3430:	6620 756f 646e 7000 6e65 0064 6e75 6568      found.pend.unhe
   c3440:	6c61 6874 0079 616c 7473 4e00 646f 2065     althy.last.Node 
   c3450:	6f63 6e6e 6365 6974 6e6f 2073 7261 2065     connections are 
   c3460:	7325 0020 6f4e 6564 6320 6e6f 656e 7463     %s .Node connect
   c3470:	6f69 736e 7520 686e 6165 746c 7968 202c     ions unhealthy, 
   c3480:	6572 6573 6974 676e 4c20 526f 2041 6172     reseting LoRA ra
   c3490:	6964 006f 6163 0072 6570 7372 6e6f 4e00     dio.car.person.N
   c34a0:	646f 2065 6425 6a20 696f 656e 2064 6977     ode %d joined wi
   c34b0:	6874 7320 6e65 6f73 5472 7079 2065 7325     th sensorType %s
   c34c0:	6320 756f 746e 7265 7720 7469 2068 6c61      counter with al
   c34d0:	7265 2074 6425 6120 646e 7320 6769 616e     ert %d and signa
   c34e0:	206c 7473 6572 676e 6874 2520 0064 7473     l strength %d.st
   c34f0:	7461 7375 4e00 646f 2065 6425 6a20 696f     atus.Node %d joi
   c3500:	206e 6572 7073 6e6f 6573 6e20 746f 6120     n response not a
   c3510:	6b63 6f6e 6c77 6465 6567 0064 6f6e 6564     cknowledged.node
   c3520:	7300 6375 0063 6f4e 6564 2520 2c64 6420     .succ.Node %d, d
   c3530:	7665 6369 4965 3a44 2520 2c73 6c20 7361     eviceID: %s, las
   c3540:	4374 6e6f 656e 7463 6465 203a 7325 202c     tConnected: %s, 
   c3550:	7974 6570 2520 2c64 7320 6375 6563 7373     type %d, success
   c3560:	2520 2e34 6632 7720 7469 2068 6570 646e      %4.2f with pend
   c3570:	6e69 2067 6c61 7265 2074 6425 6e00 646f     ing alert %d.nod
   c3580:	4465 7461 0061 6966 646e 6f4e 6564 754e     eData.findNodeNu
   c3590:	626d 7265 7220 6e61 6f20 7475 6f20 2066     mber ran out of 
   c35a0:	6e65 7274 6569 2073 7461 6920 3d20 2520     entries at i = %
   c35b0:	0064 654e 2077 6f6e 6564 7720 6c69 206c     d.New node will 
   c35c0:	6562 6120 7373 6769 656e 2064 756e 626d     be assigned numb
   c35d0:	7265 2520 2c64 6420 7665 6369 4965 2044     er %d, deviceID 
   c35e0:	666f 2520 0073 6f4e 6564 6e20 746f 6320     of %s.Node not c
   c35f0:	6e6f 6966 7567 6572 0064 6843 6e61 6967     onfigured.Changi
   c3600:	676e 7320 6e65 6f73 2072 7974 6570 6620     ng sensor type f
   c3610:	6f72 206d 6425 7420 206f 6425 4e00 646f     rom %d to %d.Nod
   c3620:	2065 6425 6a20 696f 206e 6572 7571 7365     e %d join reques
   c3630:	2074 7266 6d6f 2520 2073 6977 6c6c 6320     t from %s will c
   c3640:	6168 676e 2065 6f6e 6564 6e20 6d75 6562     hange node numbe
   c3650:	2072 6f74 2520 0064 6f4e 6564 2520 2064     r to %d.Node %d 
   c3660:	6f6a 6e69 7220 7165 6575 7473 6620 6f72     join request fro
   c3670:	206d 7325 7320 7465 6974 676e 6320 6f6c     m %s setting clo
   c3680:	6b63 6120 646e 7320 6e65 6f73 5472 7079     ck and sensorTyp
   c3690:	2065 6f74 2520 0064 6843 6e61 6967 676e     e to %d.Changing
   c36a0:	7020 6e65 6964 676e 6120 656c 7472 6620      pending alert f
   c36b0:	6f72 206d 6425 7420 206f 6425 4900 206e     rom %d to %d.In 
   c36c0:	6164 6174 6120 6b63 6f6e 6c77 6465 6567     data acknowledge
   c36d0:	202c 6863 6e61 6967 676e 7420 7079 2065     , changing type 
   c36e0:	6f74 6620 6f72 206d 6425 7420 206f 6425     to from %d to %d
   c36f0:	4e00 646f 2065 6425 6920 2073 6e69 6176     .Node %d is inva
   c3700:	696c 2c64 7320 7465 6974 676e 6120 656c     lid, setting ale
   c3710:	7472 6320 646f 2065 6f74 3120 4e00 646f     rt code to 1.Nod
   c3720:	2065 6425 6820 7361 6120 7020 6e65 6964     e %d has a pendi
   c3730:	676e 6120 656c 7472 2520 0064 6f4e 6564     ng alert %d.Node
   c3740:	2520 2064 6164 6174 7220 7065 726f 2074      %d data report 
   c3750:	6425 6120 6b63 6f6e 6c77 6465 6567 2064     %d acknowledged 
   c3760:	6977 6874 6120 656c 7472 2520 2c64 6120     with alert %d, a
   c3770:	646e 7320 6769 616e 206c 7473 6572 676e     nd signal streng
   c3780:	6874 2520 0064 6f4e 6564 2520 2064 6164     th %d.Node %d da
   c3790:	6174 7220 7065 726f 2074 6572 7073 6e6f     ta report respon
   c37a0:	6573 6e20 746f 6120 6b63 6f6e 6c77 6465     se not acknowled
   c37b0:	6567 0064 6f4e 6564 2520 2064 6c61 7265     ged.Node %d aler
   c37c0:	2074 6361 6e6b 776f 656c 6764 6465 4e00     t acknowledged.N
   c37d0:	646f 2065 6425 5220 7365 6f70 736e 2065     ode %d Response 
   c37e0:	6f6e 2074 6361 6e6b 776f 656c 6764 6465     not acknowledged
   c37f0:	4e00 646f 2065 6425 6d20 7365 6173 6567     .Node %d message
   c3800:	6d20 6761 6369 6e20 6d75 6562 2072 666f      magic number of
   c3810:	2520 2064 6964 2064 6f6e 2074 616d 6374      %d did not matc
   c3820:	2068 6874 2065 614d 6967 2063 754e 626d     h the Magic Numb
   c3830:	7265 6920 206e 656d 6f6d 7972 2520 2064     er in memory %d 
   c3840:	202d 6749 6f6e 6972 676e 4e00 646f 2065     - Ignoring.Node 
   c3850:	6425 2520 2073 656d 7373 6761 2065 6977     %d %s message wi
   c3860:	6874 7220 7373 3d69 6425 5700 2065 7261     th rssi=%d.We ar
   c3870:	2065 7075 6164 6974 676e 7420 6568 7020     e updating the p
   c3880:	6275 696c 6873 6620 6572 7571 6e65 7963     ublish frequency
   c3890:	7420 206f 6925 6d20 6e69 7475 7365 0000      to %i minutes..

000c38a0 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c38a8:	40dd 000b 40f1 000b                         .@...@..

000c38b0 <_ZTV14LoRA_Functions>:
	...
   c38b8:	40cd 000b 40cf 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c38c8:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c38d8:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c38e8:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c38f8:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c3908:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c3918:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c3928:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c3938:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c3948:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c3958:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c3968:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c3978:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c3988:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c3998:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c39a8:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c39b8:	253a 2c64 2220 736d 2267 253a 2c64 2220     :%d, "msg":%d, "
   c39c8:	7573 6363 7365 2273 253a 2e34 6632 202c     success":%4.2f, 
   c39d8:	7422 6d69 7365 6174 706d 3a22 6c25 3075     "timestamp":%lu0
   c39e8:	3030 007d 6255 6469 746f 2d73 6f4c 4152     00}.Ubidots-LoRA
   c39f8:	4e2d 646f 2d65 3176 7b00 6422 7665 6369     -Node-v1.{"devic
   c3a08:	6965 2264 223a 7325 2c22 2220 6f68 7275     eid":"%s", "hour
   c3a18:	796c 3a22 7525 202c 6422 6961 796c 3a22     ly":%u, "daily":
   c3a28:	7525 202c 7322 6e65 6f73 7472 7079 2265     %u, "sensortype"
   c3a38:	253a 2c64 2220 6162 7474 7265 2279 253a     :%d, "battery":%
   c3a48:	2e34 6632 222c 656b 3179 3a22 2522 2273     4.2f,"key1":"%s"
   c3a58:	222c 6574 706d 3a22 6425 202c 7222 7365     ,"temp":%d, "res
   c3a68:	7465 2273 253a 2c64 2220 736d 2267 253a     ets":%d, "msg":%
   c3a78:	2c64 2220 6974 656d 7473 6d61 2270 253a     d, "timestamp":%
   c3a88:	756c 3030 7d30 5500 6962 6f64 7374 4c2d     lu000}.Ubidots-L
   c3a98:	526f 2d41 6147 6574 6177 2d79 3176 6900     oRA-Gateway-v1.i
   c3aa8:	0073 7369 6e20 746f 4500 5453 4535 5444     s.is not.EST5EDT
   c3ab8:	4d2c 2e33 2e32 2f30 3a32 3030 303a 2c30     ,M3.2.0/2:00:00,
   c3ac8:	314d 2e31 2e31 2f30 3a32 3030 303a 0030     M11.1.0/2:00:00.
   c3ad8:	4925 253a 3a4d 5325 7025 4c00 636f 6c61     %I:%M:%S%p.Local
   c3ae8:	6954 656d 6920 696e 6974 6c61 7a69 6465     Time initialized
   c3af8:	202c 6974 656d 6920 2073 7325 6120 646e     , time is %s and
   c3b08:	5220 4354 2520 2073 6573 0074 6f4c 6163      RTC %s set.Loca
   c3b18:	546c 6d69 2065 6f6e 2074 6e69 7469 6169     lTime not initia
   c3b28:	696c 657a 2064 6f73 7720 6c69 206c 656e     lized so will ne
   c3b38:	6465 7420 206f 6f43 6e6e 6365 2074 6f74     ed to Connect to
   c3b48:	5020 7261 6974 6c63 0065 7355 7265 6220      Particle.User b
   c3b58:	7475 6f74 206e 7270 7365 6573 2c64 6320     utton pressed, c
   c3b68:	6e6f 656e 7463 6465 6d20 646f 0065 6f4e     onnected mode.No
   c3b78:	7520 6573 2072 7562 7474 6e6f 7020 7375      user button pus
   c3b88:	2068 6564 6574 6863 6574 0064 706f 6e65     h detechted.open
   c3b98:	6300 6f6c 6573 0064 5425 5300 656c 7065     .closed.%T.Sleep
   c3ba8:	6620 726f 2520 2069 6573 6f63 646e 2073      for %i seconds 
   c3bb8:	6974 6c6c 6e20 7865 2074 7665 6e65 2074     till next event 
   c3bc8:	7461 2520 2073 6977 6874 2520 696c 6620     at %s with %li f
   c3bd8:	6572 2065 656d 6f6d 7972 4100 6f77 656b     ree memory.Awoke
   c3be8:	6120 2074 7325 7720 7469 2068 6c25 2069      at %s with %li 
   c3bf8:	7266 6565 6d20 6d65 726f 0079 6147 6574     free memory.Gate
   c3c08:	6177 2079 7369 6c20 7369 6574 696e 676e     way is listening
   c3c18:	6620 726f 4c20 526f 2041 656d 7373 6761      for LoRA messag
   c3c28:	7365 6120 646e 7420 6568 7020 7261 206b     es and the park 
   c3c38:	7369 2520 2073 2528 2064 202f 6425 2f20     is %s (%d / %d /
   c3c48:	2520 2964 4900 206e 616d 6e69 6c20 6f6f      %d).In main loo
   c3c58:	2070 202d 6c61 7265 2074 6425 6120 646e     p - alert %d and
   c3c68:	6f20 6570 206e 6f68 7275 2073 6425 4e00      open hours %d.N
   c3c78:	7765 4420 7961 2d20 5220 7365 7465 6974     ew Day - Resetti
   c3c88:	676e 6520 6576 7972 6874 6e69 0067 6544     ng everything.De
   c3c98:	7065 7020 776f 7265 6420 776f 206e 6564     ep power down de
   c3ca8:	6976 6563 5200 7365 7465 6974 676e 6420     vice.Resetting d
   c3cb8:	6575 7420 206f 6f6c 2077 656d 6f6d 7972     ue to low memory
   c3cc8:	7b00 6e22 646f 7365 3a22 5d5b 007d 6552     .{"nodes":[]}.Re
   c3cd8:	6573 7474 6769 4e20 646f 4965 2044 6f63     settig NodeID co
   c3ce8:	666e 6769 7420 3a6f 2520 0073 2041 656e     nfig to: %s.A ne
   c3cf8:	2077 6164 2079 202d 6572 6573 7474 6e69     w day - resettin
   c3d08:	2067 7665 7265 7479 6968 676e 4c00 616f     g everything.Loa
   c3d18:	6964 676e 7320 7379 6574 206d 6564 6166     ding system defa
   c3d28:	6c75 7374 4f00 6570 206e 202f 6c43 736f     ults.Open / Clos
   c3d38:	2065 7369 7573 2065 6977 6874 2520 2064     e issue with %d 
   c3d48:	202d 6572 6573 7474 6e69 0067               - resetting.

000c3d54 <_ZTV8MB85RC64>:
	...
   c3d5c:	61b1 000b 61c5 000b 9c05 000b 9c9b 000b     .a...a..........
   c3d6c:	9d1d 000b                                   ....

000c3d70 <_ZTV10nodeIDData>:
	...
   c3d78:	64b9 000b 6211 000b 61ef 000b c485 000b     .d...b...a......
   c3d88:	c4ad 000b c641 000b c6d9 000b 62b1 000b     ....A........b..
   c3d98:	62c5 000b                                   .b..

000c3d9c <_ZTV13sysStatusData>:
	...
   c3da4:	6ad9 000b 6211 000b 61ef 000b c485 000b     .j...b...a......
   c3db4:	c4ad 000b c641 000b c6d9 000b 6261 000b     ....A.......ab..
   c3dc4:	6275 000b                                   ub..

000c3dc8 <_ZTV17currentStatusData>:
	...
   c3dd0:	63a5 000b 6211 000b 61ef 000b c485 000b     .c...b...a......
   c3de0:	c4ad 000b c641 000b c6d9 000b 6289 000b     ....A........b..
   c3df0:	629d 000b 6e49 7469 6169 696c 697a 676e     .b..Initializing
   c3e00:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c3e10:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c3e20:	0073 6f43 6d6d 6e61 7364 5600 7265 7a69     s.Commands.Veriz
   c3e30:	6e6f 5000 7261 6973 676e 6620 6961 656c     on.Parsing faile
   c3e40:	2064 202d 6863 6365 206b 7973 746e 7861     d - check syntax
   c3e50:	6300 646d 7600 7261 6600 006e 6572 6573     .cmd.var.fn.rese
   c3e60:	0074 6552 6573 7474 6e69 2067 6874 2065     t.Resetting the 
   c3e70:	6167 6574 6177 2779 2073 6f6e 6564 4420     gateway's node D
   c3e80:	7461 0061 6c61 006c 6552 6573 7474 6e69     ata.all.Resettin
   c3e90:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c3ea0:	7973 7473 6d65 6120 646e 6320 7275 6572     system and curre
   c3eb0:	746e 6420 7461 0061 6552 6573 7474 6e69     nt data.Resettin
   c3ec0:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c3ed0:	7563 7272 6e65 2074 6164 6174 5200 7365     current data.Res
   c3ee0:	7465 6974 676e 6e20 646f 2065 6425 7327     etting node %d's
   c3ef0:	7320 7379 6574 206d 6e61 2064 7563 7272      system and curr
   c3f00:	6e65 2074 6164 6174 5200 7365 7465 6974     ent data.Resetti
   c3f10:	676e 6e20 646f 2065 6425 7327 6320 7275     ng node %d's cur
   c3f20:	6572 746e 6420 7461 0061 7266 7165 5300     rent data.freq.S
   c3f30:	7465 6974 676e 7220 7065 726f 6974 676e     etting reporting
   c3f40:	6620 6572 7571 6e65 7963 7420 206f 6425      frequency to %d
   c3f50:	6d20 6e69 7475 7365 4e00 746f 6120 7620      minutes.Not a v
   c3f60:	6c61 6469 7220 7065 726f 6974 676e 6620     alid reporting f
   c3f70:	6572 7571 6e65 7963 7300 6174 0079 7274     requency.stay.tr
   c3f80:	6575 4700 696f 676e 7420 206f 656b 7065     ue.Going to keep
   c3f90:	4720 7461 7765 7961 6f20 206e 6150 7472      Gateway on Part
   c3fa0:	6369 656c 6120 646e 4c20 526f 2041 656e     icle and LoRA ne
   c3fb0:	7774 726f 736b 4700 696f 676e 6220 6361     tworks.Going bac
   c3fc0:	206b 6f74 6e20 726f 616d 206c 6f63 6e6e     k to normal conn
   c3fd0:	6365 6974 6976 7974 7200 7470 5000 6972     ectivity.rpt.Pri
   c3fe0:	746e 6e69 2067 6f6e 6564 4449 4420 7461     nting nodeID Dat
   c3ff0:	0061 6553 7474 6e69 2067 706f 6e65 6e69     a.Setting openin
   c4000:	2067 6f68 7275 7420 206f 6425 303a 0030     g hour to %d:00.
   c4010:	704f 6e65 6820 756f 2072 202d 756d 7473     Open hour - must
   c4020:	6220 2065 2d30 3231 6300 6f6c 6573 5300      be 0-12.close.S
   c4030:	7465 6974 676e 6320 6f6c 6973 676e 6820     etting closing h
   c4040:	756f 2072 6f74 2520 3a64 3030 4300 6f6c     our to %d:00.Clo
   c4050:	6573 6820 756f 2072 202d 756d 7473 6220     se hour - must b
   c4060:	2065 3331 322d 0034 6553 7474 6e69 2067     e 13-24.Setting 
   c4070:	6573 736e 726f 7420 7079 2065 6f74 2520     sensor type to %
   c4080:	2064 6f66 2072 6f6e 6564 2520 0064 6553     d for node %d.Se
   c4090:	736e 726f 5420 7079 2065 2d20 6d20 7375     nsor Type  - mus
   c40a0:	2074 6562 3020 322d 7300 6d69 5300 7465     t be 0-2.sim.Set
   c40b0:	6974 676e 5320 4d49 7420 206f 7325 5300     ting SIM to %s.S
   c40c0:	4d49 5420 7079 2065 2d20 6d20 7375 2074     IM Type  - must 
   c40d0:	6562 3020 2820 6150 7472 6369 656c 2029     be 0 (Particle) 
   c40e0:	726f 3120 2820 6556 6972 6f7a 296e 4e00     or 1 (Verizon).N
   c40f0:	746f 6120 7620 6c61 6469 6320 6d6f 616d     ot a valid comma
   c4100:	646e 4900 206e 6874 2065 6964 6373 6e6f     nd.In the discon
   c4110:	656e 7463 6620 6f72 206d 6150 7472 6369     nect from Partic
   c4120:	656c 6620 6e75 7463 6f69 006e 6146 6c69     le function.Fail
   c4130:	6465 7420 206f 6964 6373 6e6f 656e 7463     ed to disconnect
   c4140:	6620 6f72 206d 6150 7472 6369 656c 4400      from Particle.D
   c4150:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
   c4160:	5020 7261 6974 6c63 2065 6e69 2520 2069      Particle in %i 
   c4170:	6573 6f63 646e 0073 6146 6c69 6465 7420     seconds.Failed t
   c4180:	206f 7574 6e72 6f20 6666 7420 6568 4320     o turn off the C
   c4190:	6c65 756c 616c 2072 6f6d 6564 006d 7554     ellular modem.Tu
   c41a0:	6e72 6465 6f20 6666 7420 6568 6320 6c65     rned off the cel
   c41b0:	756c 616c 2072 6f6d 6564 206d 6e69 2520     lular modem in %
   c41c0:	2069 6573 6f63 646e 0073 0000               i seconds...

000c41cc <_ZTVN5spark10LogHandlerE>:
	...
   c41dc:	40a5 000b 6b29 000b                         .@..)k..

000c41e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c41ec:	6c01 000b 6c35 000b eb89 000b 6b2b 000b     .l..5l......+k..

000c41fc <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c4204:	6b45 000b 6b59 000b                         Ek..Yk..

000c420c <_ZTV18Particle_Functions>:
	...
   c4214:	6b33 000b 6b35 000b 6e49 7469 6c61 7a69     3k..5k..Initaliz
   c4224:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c4234:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c4244:	6577 2072 6f43 666e 6769 0000               wer Config..

000c4250 <BLUE_LED>:
   c4250:	0007                                        ..

000c4252 <BUTTON_PIN>:
   c4252:	0004                                        ..

000c4254 <RFM95_CS>:
   c4254:	0005                                        ..

000c4256 <RFM95_INT>:
   c4256:	0002                                        ..

000c4258 <RFM95_RST>:
   c4258:	0006                                        ..

000c425a <TMP36_SENSE_PIN>:
   c425a:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c426a:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c427a:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c428a:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c429a:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c42aa:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c42ba:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c42ca:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c42da:	0000 38ee 000c 425c 000c 4261 000c 4266     ...8..\B..aB..fB
   c42ea:	000c 426a 000c 426f 000c 4274 000c 4278     ..jB..oB..tB..xB
   c42fa:	000c 4283 000c 428e 000c 6166 6c69 6465     ...B...B..failed
   c430a:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c431a:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c432a:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c433a:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c434a:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c435a:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c436a:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c437a:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c438a:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c439a:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c43aa:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c43ba:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c43ca:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c43da:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c43ea:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c43fa:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c440a:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c441a:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c442a:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c443a:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c444a:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c445a:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c446a:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c447a:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c448a:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c449a:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c44aa:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c44ba:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c44ca:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c44da:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c44ea:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c44fa:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c450a:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c451a:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c452a:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c453a:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c454c <_ZTV6AB1805>:
	...
   c4554:	76c1 000b 76c3 000b 7d39 000b 7dbf 000b     .v...v..9}...}..
   c4564:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c4574:	5268 004b                                   hRK.

000c4578 <_ZTV19BackgroundPublishRK>:
	...
   c4580:	82f5 000b 8311 000b 755c 3025 5834 2500     ........\u%04X.%
   c4590:	2a2e 0066 6625 0000                         .*f.%f..

000c4598 <_ZTV10JsonBuffer>:
	...
   c45a0:	85f5 000b 8611 000b                         ........

000c45a8 <_ZTV10JsonParser>:
	...
   c45b0:	8675 000b 8699 000b                         u.......

000c45b8 <_ZTV10JsonWriter>:
	...
   c45c0:	8625 000b 8639 000b                         %...9...

000c45c8 <_ZTV12JsonModifier>:
	...
   c45d0:	864d 000b 8661 000b 6425 253a 3a64 6425     M...a...%d:%d:%d
   c45e0:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c45f0:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c4600:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c460c <_ZTV9LocalTime>:
	...
   c4614:	92c5 000b 92dd 000b                         ........

000c461c <_ZTV12LocalTimeHMS>:
	...
   c4624:	9275 000b 9279 000b                         u...y...

000c462c <_ZTV15LocalTimeChange>:
	...
   c4634:	9277 000b 9287 000b                         w.......

000c463c <_ZTV22LocalTimePosixTimezone>:
	...
   c4644:	9295 000b 92b1 000b                         ........

000c464c <_ZTV6MB85RC>:
	...
   c4654:	9bc5 000b 9bc7 000b 9c05 000b 9c9b 000b     ................
   c4664:	9d1d 000b 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   c4674:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c4684:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c4694:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c46a4:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c46b4:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c46c4:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c46d4:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c46e4:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c46f4:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c4704:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c4714:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c4724:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c4734:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c4744:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c4754:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c4764:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c4774:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c4784:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c4794:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c47a4:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c47b4:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c47c4:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c47d4:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c47e4:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c47f4:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c4804:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c4814:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c4824:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c4834:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c4844:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c4854:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c4864:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c4874:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c4884:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c4894:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c48a4:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c48b4:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c48c4:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c48d4:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c48e0 <_ZTV17PublishQueuePosix>:
	...
   c48e8:	a651 000b a90d 000b a931 000b               Q.......1...

000c48f4 <_ZTV15RHGenericDriver>:
	...
   c4904:	aa51 000b 40a5 000b 40a5 000b 40a5 000b     Q....@...@...@..
   c4914:	40a5 000b aab3 000b aa55 000b ab03 000b     .@......U.......
   c4924:	aad1 000b ab27 000b aa5f 000b aa67 000b     ....'..._...g...
   c4934:	aa6b 000b aa6f 000b aa73 000b aa77 000b     k...o...s...w...
   c4944:	aa63 000b aa83 000b aa87 000b aa8b 000b     c...............
   c4954:	aa8f 000b aa93 000b aa99 000b aa9d 000b     ................
   c4964:	aa5f 000b aaa1 000b aaa7 000b aaad 000b     _...............

000c4974 <_ZTV12RHGenericSPI>:
	...
   c497c:	40a5 000b ab85 000b ab87 000b 40a5 000b     .@...........@..
   c498c:	40a5 000b ab8f 000b ab93 000b ab97 000b     .@..............
   c499c:	ab89 000b ab8b 000b ab8d 000b 6564 6166     ............defa
   c49ac:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c49bc:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c49cc:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c49dc:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c49ec <_ZTVN8particle11SPISettingsE>:
	...
   c49f4:	abdd 000b abb1 000b abb3 000b               ............

000c4a00 <_ZTV13RHHardwareSPI>:
	...
   c4a08:	ac91 000b aca5 000b acb3 000b acc1 000b     ................
   c4a18:	ad2d 000b ab8f 000b ab93 000b ab97 000b     -...............
   c4a28:	ad3b 000b ad4f 000b ad5d 000b               ;...O...]...

000c4a34 <_ZTV6RHMesh>:
	...
   c4a3c:	ae29 000b b0d1 000b ad89 000b ad75 000b     )...........u...

000c4a4c <_ZTV8RHRouter>:
	...
   c4a54:	b33d 000b b381 000b                         =.......

000c4a5c <_ZTV11RHSPIDriver>:
	...
   c4a6c:	b61d 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c4a7c:	40a5 000b aab3 000b aa55 000b ab03 000b     .@......U.......
   c4a8c:	aad1 000b ab27 000b aa5f 000b aa67 000b     ....'..._...g...
   c4a9c:	aa6b 000b aa6f 000b aa73 000b aa77 000b     k...o...s...w...
   c4aac:	aa63 000b aa83 000b aa87 000b aa8b 000b     c...............
   c4abc:	aa8f 000b aa93 000b aa99 000b aa9d 000b     ................
   c4acc:	aa5f 000b aaa1 000b aaa7 000b aaad 000b     _...............
   c4adc:	b649 000b b653 000b                         I...S...

000c4ae4 <_ZL18MODEM_CONFIG_TABLE>:
   c4ae4:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c4af4 <_ZTV7RH_RF95>:
	...
   c4afc:	b7bb 000b b7f3 000b bcc9 000b bb5f 000b     ............_...
   c4b0c:	b829 000b bba7 000b b7b7 000b aab3 000b     )...............
   c4b1c:	aa55 000b ab03 000b aad1 000b ab27 000b     U...........'...
   c4b2c:	b7bd 000b aa67 000b aa6b 000b aa6f 000b     ....g...k...o...
   c4b3c:	aa73 000b aa77 000b aa63 000b aa83 000b     s...w...c.......
   c4b4c:	aa87 000b aa8b 000b aa8f 000b aa93 000b     ................
   c4b5c:	aa99 000b aa9d 000b b803 000b aaa1 000b     ................
   c4b6c:	aaa7 000b aaad 000b b649 000b b653 000b     ........I...S...
   c4b7c:	b7b3 000b 3025 6438 2f00 7200 6d65 766f     ....%08d./.remov
   c4b8c:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c4b9c:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c4bac:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c4bbc:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c4bcc:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c4bdc:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c4bec:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c4bfc:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c4c0c:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c4c1c:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c4c2c:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c4c3c:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c4c4c:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c4c5c:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c4c6c:	732e 7165 6966 656c 0000 0000               .seqfile....

000c4c78 <_ZTV14SequentialFile>:
	...
   c4c80:	c125 000b c151 000b bdd1 000b 6f67 3a74     %...Q.......got:
   c4c90:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   c4ca0:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   c4cb0:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   c4cc0:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   c4cd0:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   c4ce0:	3430 2078 6168 6873 253d 3830 0078 0000     04x hash=%08x...

000c4cf0 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c4cf8:	c47f 000b c4cb 000b c47d 000b c485 000b     ........}.......
   c4d08:	c4ad 000b c641 000b c6d9 000b               ....A.......

000c4d14 <_ZTVN5spark13CellularClassE>:
	...
   c4d1c:	d127 000b d11d 000b d113 000b d0c9 000b     '...............
   c4d2c:	d107 000b d0fb 000b eee1 000b eee9 000b     ................
   c4d3c:	d0ef 000b d0e7 000b d0dd 000b d0d3 000b     ................
   c4d4c:	ef19 000b                                   ....

000c4d50 <_ZTV14CellularSignal>:
	...
   c4d58:	d1b5 000b d219 000b d1b7 000b d229 000b     ............)...
   c4d68:	d25d 000b d289 000b d2bd 000b d1dd 000b     ]...............
   c4d78:	d1bb 000b d1d7 000b fffc ffff 0000 0000     ................
   c4d88:	d211 000b                                   ....

000c4d8c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4d94:	d301 000b d307 000b d345 000b d315 000b     ........E.......
   c4da4:	d303 000b                                   ....

000c4da8 <_ZTVN5spark13EthernetClassE>:
	...
   c4db0:	d90b 000b d901 000b d8f7 000b d8ed 000b     ................
   c4dc0:	d8e1 000b d8d5 000b eee1 000b eee9 000b     ................
   c4dd0:	d8c9 000b d8c1 000b d8b7 000b d8ad 000b     ................
   c4de0:	ef19 000b                                   ....

000c4de4 <_ZTV7TwoWire>:
	...
   c4dec:	d9db 000b da25 000b d9fd 000b d9dd 000b     ....%...........
   c4dfc:	da05 000b da0d 000b da15 000b da1d 000b     ................

000c4e0c <_ZTV9IPAddress>:
	...
   c4e14:	dba1 000b db91 000b db93 000b 2575 3430     ............u%04
   c4e24:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c4e34:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c4e44:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c4e54:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c4e64:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c4e74:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c4e84:	6f63 6564 6400 7465 6961 006c               code.detail.

000c4e90 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c4e98:	e04d 000b e073 000b e031 000b dcaf 000b     M...s...1.......

000c4ea8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c4eb0:	e431 000b e449 000b eb89 000b 6b2b 000b     1...I.......+k..

000c4ec0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c4ec8:	e45d 000b e471 000b ed2d 000b e039 000b     ]...q...-...9...

000c4ed8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c4ee0:	e04b 000b e081 000b eaed 000b e03b 000b     K...........;...

000c4ef0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c4ef8:	e049 000b e08f 000b e399 000b e0b1 000b     I...............

000c4f08 <_ZTVN5spark12NetworkClassE>:
	...
   c4f10:	eea1 000b eeab 000b eeb5 000b eebf 000b     ................
   c4f20:	eec9 000b eed5 000b eee1 000b eee9 000b     ................
   c4f30:	eef1 000b eefd 000b ef05 000b ef0f 000b     ................
   c4f40:	ef19 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000c4f50 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c4f50:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c4f60:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c4f70:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c4f80:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c4f90:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c4fa0:	0065 0000                                   e...

000c4fa4 <_ZTV11USARTSerial>:
	...
   c4fac:	fda5 000b fe11 000b fde9 000b f169 000b     ............i...
   c4fbc:	fdb9 000b fdd5 000b fdc7 000b fde3 000b     ................
   c4fcc:	fda7 000b fdab 000b                         ........

000c4fd4 <_ZTV9USBSerial>:
	...
   c4fdc:	fe63 000b fecb 000b fea1 000b f169 000b     c...........i...
   c4fec:	fe93 000b fe65 000b fe75 000b fec5 000b     ....e...u.......
   c4ffc:	fe85 000b fe5d 000b                         ....]...

000c5004 <_ZSt7nothrow>:
   c5004:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   c5014:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000c5025 <day_name.1>:
   c5025:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c5035:	6972 6153                                    riSat

000c503a <mon_name.0>:
   c503a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c504a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c505a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c506a:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c507a:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c508a:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c509a:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c50aa:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c50ba:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c50ca:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c50da:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c50ea:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c50fa:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c510a:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c511a:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c512a:	7974 0000 0000                              ty....

000c5130 <fpi.1>:
   c5130:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5140:	0000 0000                                   ....

000c5144 <fpinan.0>:
   c5144:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c5154:	0000 0000                                   ....

000c5158 <tinytens>:
   c5158:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5168:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5178:	6f43 64ac 0628 1168                         Co.d(.h.

000c5180 <_ctype_>:
   c5180:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5190:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c51a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c51b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c51c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c51d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c51e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c51f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c5200:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5280:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5290:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c52a0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c52b0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c52c0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c52d0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c52e0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c52f0:	632e 0000                                   .c..

000c52f4 <_C_numeric_locale>:
   c52f4:	4f84 000c 4e80 000c d704 2003 0043 4f50     .O...N..... C.PO
   c5304:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c5314:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5324:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5334:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c5344:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c5354:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c5364:	0000 0000                                   ....

000c5368 <__mprec_bigtens>:
   c5368:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5378:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5388:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5390 <__mprec_tens>:
   c5390:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c53a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c53b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c53c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c53d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c53e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c53f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c5400:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c5410:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c5420:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5430:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c5440:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c5450:	9db4 79d9 7843 44ea                         ...yCx.D

000c5458 <p05.0>:
   c5458:	0005 0000 0019 0000 007d 0000               ........}...

000c5464 <link_const_variable_data_end>:
   c5464:	000b4925 	.word	0x000b4925
   c5468:	000b5925 	.word	0x000b5925
   c546c:	000b6b05 	.word	0x000b6b05
   c5470:	000b71e1 	.word	0x000b71e1
   c5474:	000b76b5 	.word	0x000b76b5
   c5478:	000b81d9 	.word	0x000b81d9
   c547c:	000ba8fd 	.word	0x000ba8fd
   c5480:	000bad65 	.word	0x000bad65
   c5484:	000bc46d 	.word	0x000bc46d
   c5488:	000bd0b9 	.word	0x000bd0b9
   c548c:	000bd185 	.word	0x000bd185
   c5490:	000bd915 	.word	0x000bd915
   c5494:	000beb79 	.word	0x000beb79
   c5498:	000beff1 	.word	0x000beff1
   c549c:	000bf459 	.word	0x000bf459
   c54a0:	000bfa59 	.word	0x000bfa59
   c54a4:	000bfd91 	.word	0x000bfd91

000c54a8 <link_constructors_end>:
	...
