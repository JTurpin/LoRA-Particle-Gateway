
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.2/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011b00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c5b20  000c5b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c5b44  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e8  2003d584  000c5b48  0002d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f84  2003d870  2003d870  0003d870  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c5e30  000c5e30  00035e30  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c5e5c  000c5e5c  00035e5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029bf86  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c4e2  00000000  00000000  002d1de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006f0a8  00000000  00000000  002fe2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005048  00000000  00000000  0036d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012650  00000000  00000000  003723b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ecbc  00000000  00000000  00384a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00095df0  00000000  00000000  003e36c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173184  00000000  00000000  004794b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f810  00000000  00000000  005ec638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00d f8e5 	bl	c1200 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00d f907 	bl	c1250 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d584 	.word	0x2003d584
   b404c:	000c5b48 	.word	0x000c5b48
   b4050:	2003d86c 	.word	0x2003d86c
   b4054:	2003d870 	.word	0x2003d870
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c f9a9 	bl	c03b8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c5adc 	.word	0x000c5adc
   b4080:	000c5b20 	.word	0x000c5b20

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bcb4 	b.w	b59f0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fdb9 	bl	b5c00 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c b949 	b.w	c0328 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 b8fd 	b.w	bd294 <malloc>

000b409a <_Znaj>:
   b409a:	f009 b8fb 	b.w	bd294 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f009 b901 	b.w	bd2a4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 ff7e 	bl	bcfac <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bcb4d 	.word	0x000bcb4d
   b40b8:	000c3624 	.word	0x000c3624

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f004 fc10 	bl	b8908 <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c3d0c 	.word	0x000c3d0c

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 fddd 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f004 fced 	bl	b8af8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 fdcf 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 fdab 	bl	b8c90 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 ff34 	bl	bcfcc <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d874 	.word	0x2003d874
   b4190:	000c3d1c 	.word	0x000c3d1c

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f007 fc89 	bl	bbabc <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d8f4 	.word	0x2003d8f4

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f007 bc6c 	b.w	bba96 <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d8f4 	.word	0x2003d8f4

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c4:	4b13      	ldr	r3, [pc, #76]	; (b4214 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41c6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c8:	881c      	ldrh	r4, [r3, #0]
   b41ca:	2100      	movs	r1, #0
   b41cc:	4620      	mov	r0, r4
   b41ce:	f00c f98c 	bl	c04ea <digitalWrite>
	delay(10);
   b41d2:	200a      	movs	r0, #10
   b41d4:	f009 f8de 	bl	bd394 <delay>
	digitalWrite(RFM95_RST,HIGH);
   b41d8:	2101      	movs	r1, #1
   b41da:	4620      	mov	r0, r4
   b41dc:	f00c f985 	bl	c04ea <digitalWrite>
	delay(10);
   b41e0:	200a      	movs	r0, #10
   b41e2:	f009 f8d7 	bl	bd394 <delay>

	if (!manager.init()) {
   b41e6:	480c      	ldr	r0, [pc, #48]	; (b4218 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b41e8:	f007 f9f3 	bl	bb5d2 <_ZN8RHRouter4initEv>
   b41ec:	4604      	mov	r4, r0
   b41ee:	b928      	cbnz	r0, b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41f0:	490a      	ldr	r1, [pc, #40]	; (b421c <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b41f2:	480b      	ldr	r0, [pc, #44]	; (b4220 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b41f4:	f7ff ffa3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b41f8:	4620      	mov	r0, r4
   b41fa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41fc:	ed9f 0a09 	vldr	s0, [pc, #36]	; b4224 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b4200:	4809      	ldr	r0, [pc, #36]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4202:	f007 fce1 	bl	bbbc8 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4206:	4808      	ldr	r0, [pc, #32]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4208:	2200      	movs	r2, #0
   b420a:	2117      	movs	r1, #23
   b420c:	f007 fe56 	bl	bbebc <_ZN7RH_RF9510setTxPowerEab>
return true;
   b4210:	e7f2      	b.n	b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b4212:	bf00      	nop
   b4214:	000c48a4 	.word	0x000c48a4
   b4218:	2003e170 	.word	0x2003e170
   b421c:	000c3639 	.word	0x000c3639
   b4220:	2003e650 	.word	0x2003e650
   b4224:	4464c000 	.word	0x4464c000
   b4228:	2003d8f4 	.word	0x2003d8f4

000b422c <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b422c:	b510      	push	{r4, lr}
   b422e:	460c      	mov	r4, r1
   b4230:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b4232:	f7ff ffc7 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b4236:	b374      	cbz	r4, b4296 <_ZN14LoRA_Functions5setupEb+0x6a>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4238:	f002 f8b4 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b423c:	2100      	movs	r1, #0
   b423e:	f002 fadb 	bl	b67f8 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4242:	a802      	add	r0, sp, #8
   b4244:	f008 ff8e 	bl	bd164 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4248:	9a02      	ldr	r2, [sp, #8]
   b424a:	4930      	ldr	r1, [pc, #192]	; (b430c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b424c:	4830      	ldr	r0, [pc, #192]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b424e:	f7ff ff76 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4252:	a802      	add	r0, sp, #8
   b4254:	f00b fb78 	bl	bf948 <_ZN6StringD1Ev>
	jp.addString(nodeDatabase.get_nodeIDJson());				// Read in the JSON string from memory
   b4258:	f002 f9ac 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b425c:	4601      	mov	r1, r0
   b425e:	a802      	add	r0, sp, #8
   b4260:	f002 f9c4 	bl	b65ec <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4264:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4266:	9101      	str	r1, [sp, #4]
   b4268:	4608      	mov	r0, r1
   b426a:	f00d f8bc 	bl	c13e6 <strlen>
   b426e:	9901      	ldr	r1, [sp, #4]
   b4270:	4602      	mov	r2, r0
   b4272:	4828      	ldr	r0, [pc, #160]	; (b4314 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4274:	f004 fb83 	bl	b897e <_ZN10JsonBuffer7addDataEPKcj>
   b4278:	a802      	add	r0, sp, #8
   b427a:	f00b fb65 	bl	bf948 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b427e:	4825      	ldr	r0, [pc, #148]	; (b4314 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4280:	f005 f8d6 	bl	b9430 <_ZN10JsonParser5parseEv>
   b4284:	2800      	cmp	r0, #0
   b4286:	d03b      	beq.n	b4300 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4288:	4923      	ldr	r1, [pc, #140]	; (b4318 <_ZN14LoRA_Functions5setupEb+0xec>)
		Log.info("Parsing error resetting nodeID database");
   b428a:	4821      	ldr	r0, [pc, #132]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b428c:	f7ff ff57 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b4290:	2001      	movs	r0, #1
   b4292:	b006      	add	sp, #24
   b4294:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4296:	f002 f885 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b429a:	f002 fa45 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b429e:	b1d8      	cbz	r0, b42d8 <_ZN14LoRA_Functions5setupEb+0xac>
   b42a0:	f002 f880 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b42a4:	f002 fa40 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42a8:	280a      	cmp	r0, #10
   b42aa:	d815      	bhi.n	b42d8 <_ZN14LoRA_Functions5setupEb+0xac>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42ac:	f002 f87a 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b42b0:	f002 fa3a 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42b4:	4601      	mov	r1, r0
   b42b6:	4819      	ldr	r0, [pc, #100]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42b8:	f006 fcb7 	bl	bac2a <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42bc:	4817      	ldr	r0, [pc, #92]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42be:	f006 fc9a 	bl	babf6 <_ZN10RHDatagram11thisAddressEv>
   b42c2:	9001      	str	r0, [sp, #4]
   b42c4:	a802      	add	r0, sp, #8
   b42c6:	f008 ff4d 	bl	bd164 <spark_deviceID>
   b42ca:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42ce:	4914      	ldr	r1, [pc, #80]	; (b4320 <_ZN14LoRA_Functions5setupEb+0xf4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42d0:	480f      	ldr	r0, [pc, #60]	; (b4310 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b42d2:	f7ff ff34 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42d6:	e7bc      	b.n	b4252 <_ZN14LoRA_Functions5setupEb+0x26>
		sysStatus.set_nodeNumber(11);
   b42d8:	f002 f864 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b42dc:	210b      	movs	r1, #11
   b42de:	f002 fa8b 	bl	b67f8 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b42e2:	210b      	movs	r1, #11
   b42e4:	480d      	ldr	r0, [pc, #52]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42e6:	f006 fca0 	bl	bac2a <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42ea:	480c      	ldr	r0, [pc, #48]	; (b431c <_ZN14LoRA_Functions5setupEb+0xf0>)
   b42ec:	f006 fc83 	bl	babf6 <_ZN10RHDatagram11thisAddressEv>
   b42f0:	9001      	str	r0, [sp, #4]
   b42f2:	a802      	add	r0, sp, #8
   b42f4:	f008 ff36 	bl	bd164 <spark_deviceID>
   b42f8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42fc:	4909      	ldr	r1, [pc, #36]	; (b4324 <_ZN14LoRA_Functions5setupEb+0xf8>)
   b42fe:	e7e7      	b.n	b42d0 <_ZN14LoRA_Functions5setupEb+0xa4>
		nodeDatabase.resetNodeIDs();
   b4300:	f002 f958 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b4304:	f002 f98a 	bl	b661c <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b4308:	4907      	ldr	r1, [pc, #28]	; (b4328 <_ZN14LoRA_Functions5setupEb+0xfc>)
   b430a:	e7be      	b.n	b428a <_ZN14LoRA_Functions5setupEb+0x5e>
   b430c:	000c3645 	.word	0x000c3645
   b4310:	2003e650 	.word	0x2003e650
   b4314:	2003da24 	.word	0x2003da24
   b4318:	000c36fd 	.word	0x000c36fd
   b431c:	2003e174 	.word	0x2003e174
   b4320:	000c367f 	.word	0x000c367f
   b4324:	000c36b6 	.word	0x000c36b6
   b4328:	000c3711 	.word	0x000c3711

000b432c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false;
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b432c:	b538      	push	{r3, r4, r5, lr}
	current.set_hourlyCount(buf[4] << 8 | buf[5]);
   b432e:	4c23      	ldr	r4, [pc, #140]	; (b43bc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x90>)
   b4330:	f002 f89c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4334:	88a1      	ldrh	r1, [r4, #4]
   b4336:	ba49      	rev16	r1, r1
   b4338:	b289      	uxth	r1, r1
   b433a:	f002 fbcc 	bl	b6ad6 <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[6] << 8 | buf[7]);
   b433e:	f002 f895 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4342:	88e1      	ldrh	r1, [r4, #6]
   b4344:	ba49      	rev16	r1, r1
   b4346:	b289      	uxth	r1, r1
   b4348:	f002 fbcb 	bl	b6ae2 <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[8]);
   b434c:	f002 f88e 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4350:	7a21      	ldrb	r1, [r4, #8]
   b4352:	f002 fab1 	bl	b68b8 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[9]);
   b4356:	f002 f889 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b435a:	7a61      	ldrb	r1, [r4, #9]
   b435c:	f002 fa88 	bl	b6870 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[10]);
   b4360:	f002 f884 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4364:	4605      	mov	r5, r0
   b4366:	7aa0      	ldrb	r0, [r4, #10]
   b4368:	f00c fb18 	bl	c099c <__aeabi_ui2d>
   b436c:	ec41 0b10 	vmov	d0, r0, r1
   b4370:	4628      	mov	r0, r5
   b4372:	f002 f8e1 	bl	b6538 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b4376:	f002 f879 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b437a:	7ae1      	ldrb	r1, [r4, #11]
   b437c:	f002 fa7e 	bl	b687c <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[12]);
   b4380:	f002 f874 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4384:	7b21      	ldrb	r1, [r4, #12]
   b4386:	f002 fa7f 	bl	b6888 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[13]);
   b438a:	f002 f86f 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b438e:	7b61      	ldrb	r1, [r4, #13]
   b4390:	f002 fa80 	bl	b6894 <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[14]);
   b4394:	f002 f86a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4398:	7ba1      	ldrb	r1, [r4, #14]
   b439a:	f002 fa81 	bl	b68a0 <_ZN17currentStatusData16set_successCountEh>
	current.set_RSSI(driver.lastRssi());
   b439e:	f002 f865 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b43a2:	4604      	mov	r4, r0
   b43a4:	4806      	ldr	r0, [pc, #24]	; (b43c0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x94>)
   b43a6:	f006 fcbe 	bl	bad26 <_ZN15RHGenericDriver8lastRssiEv>
   b43aa:	b281      	uxth	r1, r0
   b43ac:	4620      	mov	r0, r4
   b43ae:	f002 fb8c 	bl	b6aca <_ZN17currentStatusData8set_RSSIEt>

	lora_state = DATA_ACK;		// Prepare to respond
   b43b2:	4b04      	ldr	r3, [pc, #16]	; (b43c4 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x98>)
   b43b4:	2204      	movs	r2, #4
   b43b6:	701a      	strb	r2, [r3, #0]
	return true;
}
   b43b8:	2001      	movs	r0, #1
   b43ba:	bd38      	pop	{r3, r4, r5, pc}
   b43bc:	2003d878 	.word	0x2003d878
   b43c0:	2003d8f4 	.word	0x2003d8f4
   b43c4:	2003d870 	.word	0x2003d870

000b43c8 <_ZN14LoRA_Functions12findDeviceIDEii>:
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43c8:	b570      	push	{r4, r5, r6, lr}
   b43ca:	b088      	sub	sp, #32
	String nodeDeviceID;
   b43cc:	491d      	ldr	r1, [pc, #116]	; (b4444 <_ZN14LoRA_Functions12findDeviceIDEii+0x7c>)
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43ce:	4604      	mov	r4, r0
	String nodeDeviceID;
   b43d0:	a804      	add	r0, sp, #16
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43d2:	4616      	mov	r6, r2
   b43d4:	461d      	mov	r5, r3
	String nodeDeviceID;
   b43d6:	f00b fb02 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	int nodeRadioID;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b43da:	481b      	ldr	r0, [pc, #108]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43dc:	f004 fb11 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b43e0:	4a1a      	ldr	r2, [pc, #104]	; (b444c <_ZN14LoRA_Functions12findDeviceIDEii+0x84>)
   b43e2:	4601      	mov	r1, r0
   b43e4:	ab03      	add	r3, sp, #12
   b43e6:	4818      	ldr	r0, [pc, #96]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43e8:	f004 fc70 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b43ec:	9903      	ldr	r1, [sp, #12]
   b43ee:	4816      	ldr	r0, [pc, #88]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43f0:	1e72      	subs	r2, r6, #1
   b43f2:	f004 fb28 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b43f6:	4601      	mov	r1, r0
   b43f8:	b948      	cbnz	r0, b440e <_ZN14LoRA_Functions12findDeviceIDEii+0x46>
   b43fa:	4915      	ldr	r1, [pc, #84]	; (b4450 <_ZN14LoRA_Functions12findDeviceIDEii+0x88>)
   b43fc:	4620      	mov	r0, r4
   b43fe:	f00b faee 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b4402:	a804      	add	r0, sp, #16
   b4404:	f00b faa0 	bl	bf948 <_ZN6StringD1Ev>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo

	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
	else return nodeDeviceID;
}
   b4408:	4620      	mov	r0, r4
   b440a:	b008      	add	sp, #32
   b440c:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer,"rID", nodeRadioID);				// Get the radioID to see if it is a match
   b440e:	ab02      	add	r3, sp, #8
   b4410:	9001      	str	r0, [sp, #4]
   b4412:	4a10      	ldr	r2, [pc, #64]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x8c>)
   b4414:	480c      	ldr	r0, [pc, #48]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4416:	f7ff fe76 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo
   b441a:	9b02      	ldr	r3, [sp, #8]
   b441c:	9901      	ldr	r1, [sp, #4]
   b441e:	42ab      	cmp	r3, r5
   b4420:	d1eb      	bne.n	b43fa <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
   b4422:	4809      	ldr	r0, [pc, #36]	; (b4448 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4424:	4a0c      	ldr	r2, [pc, #48]	; (b4458 <_ZN14LoRA_Functions12findDeviceIDEii+0x90>)
   b4426:	ab04      	add	r3, sp, #16
   b4428:	f7ff fe7b 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b442c:	2100      	movs	r1, #0
   b442e:	a804      	add	r0, sp, #16
   b4430:	f00b fb9b 	bl	bfb6a <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b4434:	2800      	cmp	r0, #0
   b4436:	d1e0      	bne.n	b43fa <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	else return nodeDeviceID;
   b4438:	a904      	add	r1, sp, #16
   b443a:	4620      	mov	r0, r4
   b443c:	f00b fb00 	bl	bfa40 <_ZN6StringC1EOS_>
   b4440:	e7df      	b.n	b4402 <_ZN14LoRA_Functions12findDeviceIDEii+0x3a>
   b4442:	bf00      	nop
   b4444:	000c54f8 	.word	0x000c54f8
   b4448:	2003da24 	.word	0x2003da24
   b444c:	000c3739 	.word	0x000c3739
   b4450:	000c373f 	.word	0x000c373f
   b4454:	000c3744 	.word	0x000c3744
   b4458:	000c3748 	.word	0x000c3748

000b445c <_ZN14LoRA_Functions14nodeConfiguredEii>:

bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b445c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nodeNumber > 10) return false;
   b445e:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b4460:	460c      	mov	r4, r1
   b4462:	9201      	str	r2, [sp, #4]
	if (nodeNumber > 10) return false;
   b4464:	dd01      	ble.n	b446a <_ZN14LoRA_Functions14nodeConfiguredEii+0xe>
		Log.info("Node number verified");
		return true;
	} 
	else {
		Log.info("Node not configured");  // See the raw JSON string
		return false;
   b4466:	2000      	movs	r0, #0
   b4468:	e021      	b.n	b44ae <_ZN14LoRA_Functions14nodeConfiguredEii+0x52>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b446a:	4814      	ldr	r0, [pc, #80]	; (b44bc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b446c:	f004 fac9 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4470:	4a13      	ldr	r2, [pc, #76]	; (b44c0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x64>)
   b4472:	4601      	mov	r1, r0
   b4474:	ab03      	add	r3, sp, #12
   b4476:	4811      	ldr	r0, [pc, #68]	; (b44bc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b4478:	f004 fc28 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b447c:	9903      	ldr	r1, [sp, #12]
   b447e:	480f      	ldr	r0, [pc, #60]	; (b44bc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b4480:	1e62      	subs	r2, r4, #1
   b4482:	f004 fae0 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4486:	4601      	mov	r1, r0
   b4488:	2800      	cmp	r0, #0
   b448a:	d0ec      	beq.n	b4466 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question
   b448c:	ab01      	add	r3, sp, #4
   b448e:	4a0d      	ldr	r2, [pc, #52]	; (b44c4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x68>)
   b4490:	480a      	ldr	r0, [pc, #40]	; (b44bc <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b4492:	f7ff fe38 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (radioID == current.get_nodeID()) {
   b4496:	f001 ffe9 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b449a:	f002 fa94 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b449e:	9b01      	ldr	r3, [sp, #4]
   b44a0:	4298      	cmp	r0, r3
   b44a2:	d106      	bne.n	b44b2 <_ZN14LoRA_Functions14nodeConfiguredEii+0x56>
		Log.info("Node number verified");
   b44a4:	4808      	ldr	r0, [pc, #32]	; (b44c8 <_ZN14LoRA_Functions14nodeConfiguredEii+0x6c>)
   b44a6:	4909      	ldr	r1, [pc, #36]	; (b44cc <_ZN14LoRA_Functions14nodeConfiguredEii+0x70>)
   b44a8:	f7ff fe49 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return true;
   b44ac:	2001      	movs	r0, #1
	}
}
   b44ae:	b004      	add	sp, #16
   b44b0:	bd10      	pop	{r4, pc}
		Log.info("Node not configured");  // See the raw JSON string
   b44b2:	4907      	ldr	r1, [pc, #28]	; (b44d0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x74>)
   b44b4:	4804      	ldr	r0, [pc, #16]	; (b44c8 <_ZN14LoRA_Functions14nodeConfiguredEii+0x6c>)
   b44b6:	f7ff fe42 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b44ba:	e7d4      	b.n	b4466 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
   b44bc:	2003da24 	.word	0x2003da24
   b44c0:	000c3739 	.word	0x000c3739
   b44c4:	000c3744 	.word	0x000c3744
   b44c8:	2003e650 	.word	0x2003e650
   b44cc:	000c374c 	.word	0x000c374c
   b44d0:	000c3761 	.word	0x000c3761

000b44d4 <_ZN14LoRA_Functions7getTypeEi>:

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
	return true;
}

byte LoRA_Functions::getType(int nodeNumber) {
   b44d4:	b513      	push	{r0, r1, r4, lr}
	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44d6:	4816      	ldr	r0, [pc, #88]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
byte LoRA_Functions::getType(int nodeNumber) {
   b44d8:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44da:	f004 fa92 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b44de:	4a15      	ldr	r2, [pc, #84]	; (b4534 <_ZN14LoRA_Functions7getTypeEi+0x60>)
   b44e0:	4601      	mov	r1, r0
   b44e2:	ab01      	add	r3, sp, #4
   b44e4:	4812      	ldr	r0, [pc, #72]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44e6:	f004 fbf1 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44ea:	9901      	ldr	r1, [sp, #4]
   b44ec:	4810      	ldr	r0, [pc, #64]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44ee:	1e62      	subs	r2, r4, #1
   b44f0:	f004 faa9 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44f4:	4601      	mov	r1, r0
   b44f6:	b970      	cbnz	r0, b4516 <_ZN14LoRA_Functions7getTypeEi+0x42>
		Log.info("From getType function Node number not found so returning %d",current.get_sensorType());
   b44f8:	f001 ffb8 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b44fc:	f002 f95f 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b4500:	490d      	ldr	r1, [pc, #52]	; (b4538 <_ZN14LoRA_Functions7getTypeEi+0x64>)
   b4502:	4602      	mov	r2, r0
   b4504:	480d      	ldr	r0, [pc, #52]	; (b453c <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4506:	f7ff fe1a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries, go with what was reported by the node
   b450a:	f001 ffaf 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b450e:	f002 f956 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
	Log.info("Returning sensor type %d",type);
	return type;
}
   b4512:	b002      	add	sp, #8
   b4514:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4516:	4a0a      	ldr	r2, [pc, #40]	; (b4540 <_ZN14LoRA_Functions7getTypeEi+0x6c>)
   b4518:	4805      	ldr	r0, [pc, #20]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b451a:	466b      	mov	r3, sp
   b451c:	f7ff fdf3 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Returning sensor type %d",type);
   b4520:	4806      	ldr	r0, [pc, #24]	; (b453c <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4522:	9a00      	ldr	r2, [sp, #0]
   b4524:	4907      	ldr	r1, [pc, #28]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x70>)
   b4526:	f7ff fe0a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	return type;
   b452a:	f89d 0000 	ldrb.w	r0, [sp]
   b452e:	e7f0      	b.n	b4512 <_ZN14LoRA_Functions7getTypeEi+0x3e>
   b4530:	2003da24 	.word	0x2003da24
   b4534:	000c3739 	.word	0x000c3739
   b4538:	000c3775 	.word	0x000c3775
   b453c:	2003e650 	.word	0x2003e650
   b4540:	000c37b1 	.word	0x000c37b1
   b4544:	000c37b6 	.word	0x000c37b6

000b4548 <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4548:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b454a:	b513      	push	{r0, r1, r4, lr}
   b454c:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b454e:	dc13      	bgt.n	b4578 <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4550:	480f      	ldr	r0, [pc, #60]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4552:	f004 fa56 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4556:	4a0f      	ldr	r2, [pc, #60]	; (b4594 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b4558:	4601      	mov	r1, r0
   b455a:	ab01      	add	r3, sp, #4
   b455c:	480c      	ldr	r0, [pc, #48]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b455e:	f004 fbb5 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4562:	9901      	ldr	r1, [sp, #4]
   b4564:	480a      	ldr	r0, [pc, #40]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4566:	1e62      	subs	r2, r4, #1
   b4568:	f004 fa6d 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b456c:	4601      	mov	r1, r0
   b456e:	b928      	cbnz	r0, b457c <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b4570:	4909      	ldr	r1, [pc, #36]	; (b4598 <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b4572:	480a      	ldr	r0, [pc, #40]	; (b459c <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b4574:	f7ff fde3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4578:	20ff      	movs	r0, #255	; 0xff
   b457a:	e006      	b.n	b458a <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b457c:	4804      	ldr	r0, [pc, #16]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b457e:	4a08      	ldr	r2, [pc, #32]	; (b45a0 <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b4580:	466b      	mov	r3, sp
   b4582:	f7ff fdc0 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b4586:	f89d 0000 	ldrb.w	r0, [sp]

}
   b458a:	b002      	add	sp, #8
   b458c:	bd10      	pop	{r4, pc}
   b458e:	bf00      	nop
   b4590:	2003da24 	.word	0x2003da24
   b4594:	000c3739 	.word	0x000c3739
   b4598:	000c37cf 	.word	0x000c37cf
   b459c:	2003e650 	.word	0x2003e650
   b45a0:	000c37fd 	.word	0x000c37fd

000b45a4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b45a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b45a8:	4607      	mov	r7, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45aa:	f001 fefb 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b45ae:	f002 f9a0 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45b2:	4604      	mov	r4, r0
	bool health = false;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45b4:	481f      	ldr	r0, [pc, #124]	; (b4634 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45b6:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4634 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45ba:	f8df 9094 	ldr.w	r9, [pc, #148]	; b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45be:	f004 fa20 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b45c2:	ab01      	add	r3, sp, #4
   b45c4:	4601      	mov	r1, r0
   b45c6:	4a1c      	ldr	r2, [pc, #112]	; (b4638 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x94>)
   b45c8:	481a      	ldr	r0, [pc, #104]	; (b4634 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x90>)
   b45ca:	f004 fb7f 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45ce:	233c      	movs	r3, #60	; 0x3c
   b45d0:	4363      	muls	r3, r4

		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b45d2:	17de      	asrs	r6, r3, #31
   b45d4:	18dc      	adds	r4, r3, r3
   b45d6:	4176      	adcs	r6, r6
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45d8:	2500      	movs	r5, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45da:	9901      	ldr	r1, [sp, #4]
   b45dc:	462a      	mov	r2, r5
   b45de:	4640      	mov	r0, r8
   b45e0:	f004 fa31 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b45e4:	4601      	mov	r1, r0
   b45e6:	b180      	cbz	r0, b460a <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x66>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45e8:	466b      	mov	r3, sp
   b45ea:	464a      	mov	r2, r9
   b45ec:	4640      	mov	r0, r8
   b45ee:	f7ff fd8a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if ((Time.now() - lastConnect) < 2 * secondsPerPeriod) {			// If at least one node connects, the gateway is good.
   b45f2:	f00b fd6a 	bl	c00ca <_ZN9TimeClass3nowEv>
   b45f6:	9b00      	ldr	r3, [sp, #0]
   b45f8:	1ac3      	subs	r3, r0, r3
   b45fa:	17da      	asrs	r2, r3, #31
   b45fc:	42a3      	cmp	r3, r4
   b45fe:	eb72 0306 	sbcs.w	r3, r2, r6
   b4602:	db14      	blt.n	b462e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8a>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4604:	3501      	adds	r5, #1
   b4606:	2d0a      	cmp	r5, #10
   b4608:	d1e7      	bne.n	b45da <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x36>
			health = true;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b460a:	4a0c      	ldr	r2, [pc, #48]	; (b463c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b460c:	2400      	movs	r4, #0
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b460e:	490c      	ldr	r1, [pc, #48]	; (b4640 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9c>)
   b4610:	480c      	ldr	r0, [pc, #48]	; (b4644 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b4612:	f7ff fd94 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b4616:	b934      	cbnz	r4, b4626 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x82>
		Log.info("Node connections unhealthy, reseting LoRA radio");
   b4618:	480a      	ldr	r0, [pc, #40]	; (b4644 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
   b461a:	490b      	ldr	r1, [pc, #44]	; (b4648 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa4>)
   b461c:	f7ff fd8f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		LoRA_Functions::initializeRadio();
   b4620:	4638      	mov	r0, r7
   b4622:	f7ff fdcf 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	}

	return health;
}
   b4626:	4620      	mov	r0, r4
   b4628:	b003      	add	sp, #12
   b462a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b462e:	4a07      	ldr	r2, [pc, #28]	; (b464c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
			health = true;
   b4630:	2401      	movs	r4, #1
   b4632:	e7ec      	b.n	b460e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x6a>
   b4634:	2003da24 	.word	0x2003da24
   b4638:	000c3739 	.word	0x000c3739
   b463c:	000c3802 	.word	0x000c3802
   b4640:	000c3811 	.word	0x000c3811
   b4644:	2003e650 	.word	0x2003e650
   b4648:	000c382a 	.word	0x000c382a
   b464c:	000c3804 	.word	0x000c3804
   b4650:	000c380c 	.word	0x000c380c

000b4654 <_ZN14LoRA_Functions14stringCheckSumE6String>:

int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4654:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b4656:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4658:	460e      	mov	r6, r1
    int result = 0;
   b465a:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b465c:	68b3      	ldr	r3, [r6, #8]
   b465e:	429d      	cmp	r5, r3
   b4660:	d218      	bcs.n	b4694 <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b4662:	4629      	mov	r1, r5
   b4664:	4630      	mov	r0, r6
   b4666:	f00b faa7 	bl	bfbb8 <_ZN6StringixEj>
   b466a:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b466c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4670:	2a09      	cmp	r2, #9
   b4672:	d802      	bhi.n	b467a <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b4674:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b4676:	3501      	adds	r5, #1
   b4678:	e7f0      	b.n	b465c <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b467a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b467e:	2a05      	cmp	r2, #5
   b4680:	d802      	bhi.n	b4688 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b4682:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b4684:	441c      	add	r4, r3
   b4686:	e7f6      	b.n	b4676 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b4688:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b468c:	2a05      	cmp	r2, #5
   b468e:	d8f2      	bhi.n	b4676 <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b4690:	3b57      	subs	r3, #87	; 0x57
   b4692:	e7f7      	b.n	b4684 <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b4694:	4620      	mov	r0, r4
   b4696:	bd70      	pop	{r4, r5, r6, pc}

000b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4698:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b469a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b469c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b469e:	b17c      	cbz	r4, b46c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b46a0:	6863      	ldr	r3, [r4, #4]
   b46a2:	3b01      	subs	r3, #1
   b46a4:	6063      	str	r3, [r4, #4]
   b46a6:	b95b      	cbnz	r3, b46c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b46a8:	6823      	ldr	r3, [r4, #0]
   b46aa:	4620      	mov	r0, r4
   b46ac:	689b      	ldr	r3, [r3, #8]
   b46ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46b0:	68a3      	ldr	r3, [r4, #8]
   b46b2:	3b01      	subs	r3, #1
   b46b4:	60a3      	str	r3, [r4, #8]
   b46b6:	b91b      	cbnz	r3, b46c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b46b8:	6823      	ldr	r3, [r4, #0]
   b46ba:	4620      	mov	r0, r4
   b46bc:	68db      	ldr	r3, [r3, #12]
   b46be:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b46c0:	4628      	mov	r0, r5
   b46c2:	bd38      	pop	{r3, r4, r5, pc}

000b46c4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Log.info("Acknowledge Join Request");
   b46c8:	495b      	ldr	r1, [pc, #364]	; (b4838 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x174>)
   b46ca:	485c      	ldr	r0, [pc, #368]	; (b483c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46cc:	4c5c      	ldr	r4, [pc, #368]	; (b4840 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x17c>)
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46ce:	b0a6      	sub	sp, #152	; 0x98
	Log.info("Acknowledge Join Request");
   b46d0:	f7ff fd35 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46d4:	f001 fe66 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b46d8:	f002 f906 	bl	b68e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b46dc:	0a00      	lsrs	r0, r0, #8
   b46de:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46e0:	f001 fe60 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b46e4:	f002 f900 	bl	b68e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b46e8:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b46ea:	f00b fcee 	bl	c00ca <_ZN9TimeClass3nowEv>
   b46ee:	1600      	asrs	r0, r0, #24
   b46f0:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b46f2:	f00b fcea 	bl	c00ca <_ZN9TimeClass3nowEv>
   b46f6:	1400      	asrs	r0, r0, #16
   b46f8:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b46fa:	f00b fce6 	bl	c00ca <_ZN9TimeClass3nowEv>
   b46fe:	1200      	asrs	r0, r0, #8
   b4700:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b4702:	f00b fce2 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4706:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4708:	f001 fe4c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b470c:	f002 f8f1 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4710:	0a00      	lsrs	r0, r0, #8
   b4712:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4714:	f001 fe46 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b4718:	f002 f8eb 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b471c:	71e0      	strb	r0, [r4, #7]
	buf[8] = (current.get_nodeNumber() != 11) ?  0 : 1;				// Clear the alert code for the node unless the nodeNumber process failed
   b471e:	f001 fea5 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4722:	f002 f824 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4726:	f1a0 030b 	sub.w	r3, r0, #11
   b472a:	4258      	negs	r0, r3
   b472c:	4158      	adcs	r0, r3
   b472e:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_nodeNumber();								
   b4730:	f001 fe9c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4734:	f002 f81b 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4738:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b473a:	f001 fe97 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b473e:	f002 f83e 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4742:	4b40      	ldr	r3, [pc, #256]	; (b4844 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x180>)
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b4744:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b4746:	881f      	ldrh	r7, [r3, #0]
   b4748:	2101      	movs	r1, #1
   b474a:	4638      	mov	r0, r7
   b474c:	f00b fecd 	bl	c04ea <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4750:	f001 fe8c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4754:	f002 f810 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4758:	2800      	cmp	r0, #0
   b475a:	d156      	bne.n	b480a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x146>
   b475c:	f001 fe86 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4760:	f002 f805 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4764:	4605      	mov	r5, r0
	Log.info("Sending response to %d with free memory = %li", nodeAddress, System.freeMemory());
   b4766:	f00b fb1f 	bl	bfda8 <_ZN11SystemClass10freeMemoryEv>
   b476a:	4937      	ldr	r1, [pc, #220]	; (b4848 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b476c:	4603      	mov	r3, r0
   b476e:	462a      	mov	r2, r5
   b4770:	4832      	ldr	r0, [pc, #200]	; (b483c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
   b4772:	f7ff fce4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, nodeAddress, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b4776:	2302      	movs	r3, #2
   b4778:	9300      	str	r3, [sp, #0]
   b477a:	4931      	ldr	r1, [pc, #196]	; (b4840 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x17c>)
   b477c:	4833      	ldr	r0, [pc, #204]	; (b484c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
   b477e:	462b      	mov	r3, r5
   b4780:	220b      	movs	r2, #11
   b4782:	f006 fceb 	bl	bb15c <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4786:	4606      	mov	r6, r0
   b4788:	2800      	cmp	r0, #0
   b478a:	d143      	bne.n	b4814 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x150>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b478c:	f001 fe6e 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4790:	4680      	mov	r8, r0
   b4792:	f001 fe6b 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4796:	f001 ffea 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b479a:	4601      	mov	r1, r0
   b479c:	4640      	mov	r0, r8
   b479e:	f002 f861 	bl	b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b47a2:	4631      	mov	r1, r6
   b47a4:	4638      	mov	r0, r7
   b47a6:	f00b fea0 	bl	c04ea <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s counter with alert %d and signal strength %d", nodeAddress, (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), driver.lastRssi());
   b47aa:	7aa2      	ldrb	r2, [r4, #10]
   b47ac:	4b28      	ldr	r3, [pc, #160]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x18c>)
   b47ae:	4c29      	ldr	r4, [pc, #164]	; (b4854 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x190>)
   b47b0:	2a00      	cmp	r2, #0
   b47b2:	bf18      	it	ne
   b47b4:	461c      	movne	r4, r3
   b47b6:	f001 fe59 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b47ba:	f001 fffb 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b47be:	4606      	mov	r6, r0
   b47c0:	4825      	ldr	r0, [pc, #148]	; (b4858 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x194>)
   b47c2:	f006 fab0 	bl	bad26 <_ZN15RHGenericDriver8lastRssiEv>
   b47c6:	4a25      	ldr	r2, [pc, #148]	; (b485c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x198>)
   b47c8:	9400      	str	r4, [sp, #0]
   b47ca:	462b      	mov	r3, r5
   b47cc:	e9cd 6001 	strd	r6, r0, [sp, #4]
   b47d0:	2180      	movs	r1, #128	; 0x80
   b47d2:	a806      	add	r0, sp, #24
   b47d4:	f008 fd86 	bl	bd2e4 <snprintf>
		Log.info(messageString);
   b47d8:	4818      	ldr	r0, [pc, #96]	; (b483c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
   b47da:	a906      	add	r1, sp, #24
   b47dc:	f7ff fcaf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b47e0:	f008 fcb8 	bl	bd154 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b47e4:	4604      	mov	r4, r0
   b47e6:	b320      	cbz	r0, b4832 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x16e>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47e8:	4b1d      	ldr	r3, [pc, #116]	; (b4860 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b47ea:	491e      	ldr	r1, [pc, #120]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a0>)
   b47ec:	781b      	ldrb	r3, [r3, #0]
   b47ee:	f88d 3000 	strb.w	r3, [sp]
   b47f2:	a804      	add	r0, sp, #16
   b47f4:	233c      	movs	r3, #60	; 0x3c
   b47f6:	aa06      	add	r2, sp, #24
   b47f8:	f009 f898 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b47fc:	a805      	add	r0, sp, #20
   b47fe:	f7ff ff4b 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4802:	4620      	mov	r0, r4
   b4804:	b026      	add	sp, #152	; 0x98
   b4806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b480a:	f001 fe2f 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b480e:	f001 ffb3 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4812:	e7a7      	b.n	b4764 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xa0>
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b4814:	f001 fe2a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4818:	f001 ffae 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b481c:	4912      	ldr	r1, [pc, #72]	; (b4868 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a4>)
   b481e:	4602      	mov	r2, r0
   b4820:	4806      	ldr	r0, [pc, #24]	; (b483c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x178>)
   b4822:	f7ff fc8c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b4826:	2100      	movs	r1, #0
   b4828:	4638      	mov	r0, r7
   b482a:	f00b fe5e 	bl	c04ea <digitalWrite>
		return false;
   b482e:	2400      	movs	r4, #0
   b4830:	e7e7      	b.n	b4802 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13e>
		return true;
   b4832:	2401      	movs	r4, #1
   b4834:	e7e5      	b.n	b4802 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x13e>
   b4836:	bf00      	nop
   b4838:	000c3865 	.word	0x000c3865
   b483c:	2003e650 	.word	0x2003e650
   b4840:	2003d878 	.word	0x2003d878
   b4844:	000c489c 	.word	0x000c489c
   b4848:	000c387e 	.word	0x000c387e
   b484c:	2003e170 	.word	0x2003e170
   b4850:	000c385e 	.word	0x000c385e
   b4854:	000c385a 	.word	0x000c385a
   b4858:	2003d8f4 	.word	0x2003d8f4
   b485c:	000c38ac 	.word	0x000c38ac
   b4860:	2003d871 	.word	0x2003d871
   b4864:	000c38fb 	.word	0x000c38fb
   b4868:	000c3902 	.word	0x000c3902

000b486c <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b486c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4870:	b0ba      	sub	sp, #232	; 0xe8
   b4872:	460f      	mov	r7, r1
	String nodeDeviceID;
   b4874:	a810      	add	r0, sp, #64	; 0x40
   b4876:	4944      	ldr	r1, [pc, #272]	; (b4988 <_ZN14LoRA_Functions13printNodeDataEb+0x11c>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4878:	4d44      	ldr	r5, [pc, #272]	; (b498c <_ZN14LoRA_Functions13printNodeDataEb+0x120>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b487a:	f8df 813c 	ldr.w	r8, [pc, #316]	; b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x14c>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b487e:	f8df 913c 	ldr.w	r9, [pc, #316]	; b49bc <_ZN14LoRA_Functions13printNodeDataEb+0x150>
	String nodeDeviceID;
   b4882:	f00b f8ac 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4886:	4841      	ldr	r0, [pc, #260]	; (b498c <_ZN14LoRA_Functions13printNodeDataEb+0x120>)
   b4888:	f004 f8bb 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b488c:	4a40      	ldr	r2, [pc, #256]	; (b4990 <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
   b488e:	4601      	mov	r1, r0
   b4890:	ab0f      	add	r3, sp, #60	; 0x3c
   b4892:	483e      	ldr	r0, [pc, #248]	; (b498c <_ZN14LoRA_Functions13printNodeDataEb+0x120>)
   b4894:	f004 fa1a 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4898:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b489a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b489c:	4632      	mov	r2, r6
   b489e:	4628      	mov	r0, r5
   b48a0:	f004 f8d1 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b48a4:	4604      	mov	r4, r0
   b48a6:	2800      	cmp	r0, #0
   b48a8:	d068      	beq.n	b497c <_ZN14LoRA_Functions13printNodeDataEb+0x110>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b48aa:	4601      	mov	r1, r0
   b48ac:	ab10      	add	r3, sp, #64	; 0x40
   b48ae:	4642      	mov	r2, r8
   b48b0:	4628      	mov	r0, r5
   b48b2:	f7ff fc36 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b48b6:	ab0a      	add	r3, sp, #40	; 0x28
   b48b8:	464a      	mov	r2, r9
   b48ba:	4621      	mov	r1, r4
   b48bc:	4628      	mov	r0, r5
   b48be:	f7ff fc22 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b48c2:	4a34      	ldr	r2, [pc, #208]	; (b4994 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48c4:	ab09      	add	r3, sp, #36	; 0x24
   b48c6:	4621      	mov	r1, r4
   b48c8:	4628      	mov	r0, r5
   b48ca:	f7ff fc1c 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b48ce:	4a32      	ldr	r2, [pc, #200]	; (b4998 <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b48d0:	ab0b      	add	r3, sp, #44	; 0x2c
   b48d2:	4621      	mov	r1, r4
   b48d4:	4628      	mov	r0, r5
   b48d6:	f7ff fc16 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b48da:	4a30      	ldr	r2, [pc, #192]	; (b499c <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b48dc:	ab0c      	add	r3, sp, #48	; 0x30
   b48de:	4621      	mov	r1, r4
   b48e0:	4628      	mov	r0, r5
   b48e2:	f7ff fc10 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b48e6:	4a2e      	ldr	r2, [pc, #184]	; (b49a0 <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
   b48e8:	ab14      	add	r3, sp, #80	; 0x50
   b48ea:	4621      	mov	r1, r4
   b48ec:	4628      	mov	r0, r5
   b48ee:	f004 f9ed 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b48f2:	b120      	cbz	r0, b48fe <_ZN14LoRA_Functions13printNodeDataEb+0x92>
			return getTokenValue(value, result);
   b48f4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b48f6:	aa0d      	add	r2, sp, #52	; 0x34
   b48f8:	4628      	mov	r0, r5
   b48fa:	f004 f90f 	bl	b8b1c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b48fe:	4621      	mov	r1, r4
   b4900:	4a28      	ldr	r2, [pc, #160]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b4902:	ab0e      	add	r3, sp, #56	; 0x38
   b4904:	4628      	mov	r0, r5
   b4906:	f7ff fbfe 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(),Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b490a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b490c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	const char * c_str() const { return buffer; }
   b490e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   b4912:	17d3      	asrs	r3, r2, #31
   b4914:	a814      	add	r0, sp, #80	; 0x50
   b4916:	f00b fad3 	bl	bfec0 <_ZN9TimeClass7timeStrEx>
   b491a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b491c:	980d      	ldr	r0, [sp, #52]	; 0x34
   b491e:	9306      	str	r3, [sp, #24]
   b4920:	f00c f85e 	bl	c09e0 <__aeabi_f2d>
   b4924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4926:	9302      	str	r3, [sp, #8]
   b4928:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b492a:	4a1f      	ldr	r2, [pc, #124]	; (b49a8 <_ZN14LoRA_Functions13printNodeDataEb+0x13c>)
   b492c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4930:	e9cd a300 	strd	sl, r3, [sp]
   b4934:	2188      	movs	r1, #136	; 0x88
   b4936:	4623      	mov	r3, r4
   b4938:	a818      	add	r0, sp, #96	; 0x60
   b493a:	f008 fcd3 	bl	bd2e4 <snprintf>
   b493e:	a814      	add	r0, sp, #80	; 0x50
   b4940:	f00b f802 	bl	bf948 <_ZN6StringD1Ev>
		Log.info(data);
   b4944:	4819      	ldr	r0, [pc, #100]	; (b49ac <_ZN14LoRA_Functions13printNodeDataEb+0x140>)
   b4946:	a918      	add	r1, sp, #96	; 0x60
   b4948:	f7ff fbf9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b494c:	f008 fc02 	bl	bd154 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4950:	b188      	cbz	r0, b4976 <_ZN14LoRA_Functions13printNodeDataEb+0x10a>
   b4952:	b187      	cbz	r7, b4976 <_ZN14LoRA_Functions13printNodeDataEb+0x10a>
   b4954:	4b16      	ldr	r3, [pc, #88]	; (b49b0 <_ZN14LoRA_Functions13printNodeDataEb+0x144>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4956:	4917      	ldr	r1, [pc, #92]	; (b49b4 <_ZN14LoRA_Functions13printNodeDataEb+0x148>)
   b4958:	781b      	ldrb	r3, [r3, #0]
   b495a:	f88d 3000 	strb.w	r3, [sp]
   b495e:	aa18      	add	r2, sp, #96	; 0x60
   b4960:	233c      	movs	r3, #60	; 0x3c
   b4962:	a814      	add	r0, sp, #80	; 0x50
   b4964:	f008 ffe2 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4968:	a815      	add	r0, sp, #84	; 0x54
   b496a:	f7ff fe95 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b496e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4972:	f008 fd0f 	bl	bd394 <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4976:	3601      	adds	r6, #1
   b4978:	2e0a      	cmp	r6, #10
   b497a:	d18e      	bne.n	b489a <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b497c:	a810      	add	r0, sp, #64	; 0x40
   b497e:	f00a ffe3 	bl	bf948 <_ZN6StringD1Ev>
}
   b4982:	b03a      	add	sp, #232	; 0xe8
   b4984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4988:	000c54f8 	.word	0x000c54f8
   b498c:	2003da24 	.word	0x2003da24
   b4990:	000c3739 	.word	0x000c3739
   b4994:	000c3929 	.word	0x000c3929
   b4998:	000c380c 	.word	0x000c380c
   b499c:	000c37b1 	.word	0x000c37b1
   b49a0:	000c392e 	.word	0x000c392e
   b49a4:	000c37fd 	.word	0x000c37fd
   b49a8:	000c3933 	.word	0x000c3933
   b49ac:	2003e650 	.word	0x2003e650
   b49b0:	2003d871 	.word	0x2003d871
   b49b4:	000c398a 	.word	0x000c398a
   b49b8:	000c3748 	.word	0x000c3748
   b49bc:	000c3744 	.word	0x000c3744

000b49c0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b49c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49c2:	4604      	mov	r4, r0
   b49c4:	4615      	mov	r5, r2
   b49c6:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b49c8:	f004 faa4 	bl	b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b49cc:	9901      	ldr	r1, [sp, #4]
   b49ce:	2201      	movs	r2, #1
   b49d0:	4620      	mov	r0, r4
   b49d2:	f004 fa0d 	bl	b8df0 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b49d6:	4620      	mov	r0, r4
   b49d8:	213a      	movs	r1, #58	; 0x3a
   b49da:	f004 f9bd 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b49de:	4904      	ldr	r1, [pc, #16]	; (b49f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b49e0:	462a      	mov	r2, r5
   b49e2:	4620      	mov	r0, r4
		insertValue(value);
	}
   b49e4:	b003      	add	sp, #12
   b49e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b49ea:	f004 b9f4 	b.w	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b49ee:	bf00      	nop
   b49f0:	000c3a03 	.word	0x000c3a03

000b49f4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b49f4:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b49f6:	4b11      	ldr	r3, [pc, #68]	; (b4a3c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b49f8:	4c11      	ldr	r4, [pc, #68]	; (b4a40 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b49fa:	2201      	movs	r2, #1
   b49fc:	701a      	strb	r2, [r3, #0]
   b49fe:	2332      	movs	r3, #50	; 0x32
   b4a00:	9300      	str	r3, [sp, #0]
   b4a02:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4a06:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4a0e:	4620      	mov	r0, r4
   b4a10:	f003 ffdc 	bl	b89cc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4a14:	4b0b      	ldr	r3, [pc, #44]	; (b4a44 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4a16:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4a18:	4a0b      	ldr	r2, [pc, #44]	; (b4a48 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4a1a:	4c0c      	ldr	r4, [pc, #48]	; (b4a4c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4a1c:	490c      	ldr	r1, [pc, #48]	; (b4a50 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4a1e:	4b0d      	ldr	r3, [pc, #52]	; (b4a54 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4a20:	7812      	ldrb	r2, [r2, #0]
   b4a22:	7809      	ldrb	r1, [r1, #0]
   b4a24:	4620      	mov	r0, r4
   b4a26:	f007 f88f 	bl	bbb48 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a2a:	480b      	ldr	r0, [pc, #44]	; (b4a58 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4a2c:	2200      	movs	r2, #0
   b4a2e:	4621      	mov	r1, r4
}
   b4a30:	b002      	add	sp, #8
   b4a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a36:	f006 bb87 	b.w	bb148 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4a3a:	bf00      	nop
   b4a3c:	2003d871 	.word	0x2003d871
   b4a40:	2003da24 	.word	0x2003da24
   b4a44:	000c3d0c 	.word	0x000c3d0c
   b4a48:	000c48a2 	.word	0x000c48a2
   b4a4c:	2003d8f4 	.word	0x2003d8f4
   b4a50:	000c48a0 	.word	0x000c48a0
   b4a54:	2003e4e4 	.word	0x2003e4e4
   b4a58:	2003e170 	.word	0x2003e170

000b4a5c <_ZN14LoRA_Functions14findNodeNumberEPKci>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a60:	b097      	sub	sp, #92	; 0x5c
   b4a62:	4604      	mov	r4, r0
   b4a64:	460d      	mov	r5, r1
	String nodeDeviceID;
   b4a66:	a802      	add	r0, sp, #8
   b4a68:	4965      	ldr	r1, [pc, #404]	; (b4c00 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a4>)
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a6a:	4690      	mov	r8, r2
	String nodeDeviceID;
   b4a6c:	f00a ffb7 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	if (radioID != LoRA_Functions::stringCheckSum(deviceID)) {
   b4a70:	4629      	mov	r1, r5
   b4a72:	a806      	add	r0, sp, #24
   b4a74:	f00a ffb3 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   b4a78:	a906      	add	r1, sp, #24
   b4a7a:	4620      	mov	r0, r4
   b4a7c:	f7ff fdea 	bl	b4654 <_ZN14LoRA_Functions14stringCheckSumE6String>
   b4a80:	4604      	mov	r4, r0
   b4a82:	a806      	add	r0, sp, #24
   b4a84:	f00a ff60 	bl	bf948 <_ZN6StringD1Ev>
   b4a88:	4544      	cmp	r4, r8
   b4a8a:	d00b      	beq.n	b4aa4 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x48>
		Log.info("DeviceID and checksum mismatch - setting node to 11");
   b4a8c:	495d      	ldr	r1, [pc, #372]	; (b4c04 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a8>)
   b4a8e:	485e      	ldr	r0, [pc, #376]	; (b4c08 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4a90:	f7ff fb55 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 11;															// Return value for unconfigured node
   b4a94:	240b      	movs	r4, #11
	String nodeDeviceID;
   b4a96:	a802      	add	r0, sp, #8
   b4a98:	f00a ff56 	bl	bf948 <_ZN6StringD1Ev>
}
   b4a9c:	4620      	mov	r0, r4
   b4a9e:	b017      	add	sp, #92	; 0x5c
   b4aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else Log.info("Checksum validated");
   b4aa4:	4959      	ldr	r1, [pc, #356]	; (b4c0c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b0>)
   b4aa6:	4858      	ldr	r0, [pc, #352]	; (b4c08 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4aa8:	f8df 9164 	ldr.w	r9, [pc, #356]	; b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4aac:	f8df b174 	ldr.w	fp, [pc, #372]	; b4c24 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>
	else Log.info("Checksum validated");
   b4ab0:	f7ff fb45 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ab4:	4856      	ldr	r0, [pc, #344]	; (b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ab6:	f003 ffa4 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4aba:	4a56      	ldr	r2, [pc, #344]	; (b4c14 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b8>)
   b4abc:	4601      	mov	r1, r0
   b4abe:	ab01      	add	r3, sp, #4
   b4ac0:	4853      	ldr	r0, [pc, #332]	; (b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ac2:	f004 f903 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4ac6:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ac8:	9901      	ldr	r1, [sp, #4]
   b4aca:	4632      	mov	r2, r6
   b4acc:	4648      	mov	r0, r9
   b4ace:	f003 ffba 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4ad2:	1c74      	adds	r4, r6, #1
		if(nodeObjectContainer == NULL) {
   b4ad4:	4607      	mov	r7, r0
   b4ad6:	46a2      	mov	sl, r4
   b4ad8:	2800      	cmp	r0, #0
   b4ada:	d176      	bne.n	b4bca <_ZN14LoRA_Functions14findNodeNumberEPKci+0x16e>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4adc:	494e      	ldr	r1, [pc, #312]	; (b4c18 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1bc>)
   b4ade:	484a      	ldr	r0, [pc, #296]	; (b4c08 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4ae0:	4632      	mov	r2, r6
   b4ae2:	f7ff fb2c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4ae6:	494a      	ldr	r1, [pc, #296]	; (b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
	nodeNumber = index;
   b4ae8:	9400      	str	r4, [sp, #0]
	JsonModifier mod(jp);
   b4aea:	a806      	add	r0, sp, #24
   b4aec:	f004 fa56 	bl	b8f9c <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",nodeNumber, deviceID);
   b4af0:	462b      	mov	r3, r5
   b4af2:	9a00      	ldr	r2, [sp, #0]
   b4af4:	4949      	ldr	r1, [pc, #292]	; (b4c1c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c0>)
   b4af6:	4844      	ldr	r0, [pc, #272]	; (b4c08 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4af8:	f7ff fb21 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4afc:	4844      	ldr	r0, [pc, #272]	; (b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4afe:	f003 ff75 	bl	b89ec <_ZNK10JsonParser13getOuterArrayEv>
   b4b02:	4601      	mov	r1, r0
   b4b04:	a806      	add	r0, sp, #24
   b4b06:	f004 fa84 	bl	b9012 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4b0a:	227d      	movs	r2, #125	; 0x7d
   b4b0c:	217b      	movs	r1, #123	; 0x7b
   b4b0e:	a806      	add	r0, sp, #24
   b4b10:	f004 fa0b 	bl	b8f2a <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", nodeNumber);
   b4b14:	9a00      	ldr	r2, [sp, #0]
   b4b16:	4942      	ldr	r1, [pc, #264]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4b18:	a806      	add	r0, sp, #24
   b4b1a:	f7ff ff51 	bl	b49c0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b1e:	a806      	add	r0, sp, #24
   b4b20:	f004 f9f8 	bl	b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b24:	2201      	movs	r2, #1
   b4b26:	a806      	add	r0, sp, #24
   b4b28:	493e      	ldr	r1, [pc, #248]	; (b4c24 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>)
   b4b2a:	f004 f961 	bl	b8df0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b2e:	a806      	add	r0, sp, #24
   b4b30:	213a      	movs	r1, #58	; 0x3a
   b4b32:	f004 f911 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4b36:	4629      	mov	r1, r5
   b4b38:	a806      	add	r0, sp, #24
   b4b3a:	2201      	movs	r2, #1
   b4b3c:	f004 f958 	bl	b8df0 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("rID",radioID);
   b4b40:	4642      	mov	r2, r8
   b4b42:	4939      	ldr	r1, [pc, #228]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1cc>)
   b4b44:	a806      	add	r0, sp, #24
   b4b46:	f7ff ff3b 	bl	b49c0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("last", Time.now());
   b4b4a:	f00b fabe 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4b4e:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4b50:	a806      	add	r0, sp, #24
   b4b52:	f004 f9df 	bl	b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b56:	2201      	movs	r2, #1
   b4b58:	a806      	add	r0, sp, #24
   b4b5a:	4934      	ldr	r1, [pc, #208]	; (b4c2c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d0>)
   b4b5c:	f004 f948 	bl	b8df0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b60:	a806      	add	r0, sp, #24
   b4b62:	213a      	movs	r1, #58	; 0x3a
   b4b64:	f004 f8f8 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4b68:	462a      	mov	r2, r5
   b4b6a:	a806      	add	r0, sp, #24
   b4b6c:	4930      	ldr	r1, [pc, #192]	; (b4c30 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d4>)
   b4b6e:	f004 f932 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);									// This is a temp value that will be updated
   b4b72:	4930      	ldr	r1, [pc, #192]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d8>)
   b4b74:	2203      	movs	r2, #3
   b4b76:	a806      	add	r0, sp, #24
   b4b78:	f7ff ff22 	bl	b49c0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b7c:	a806      	add	r0, sp, #24
   b4b7e:	f004 f9c9 	bl	b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b82:	2201      	movs	r2, #1
   b4b84:	a806      	add	r0, sp, #24
   b4b86:	492c      	ldr	r1, [pc, #176]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1dc>)
   b4b88:	f004 f932 	bl	b8df0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b8c:	213a      	movs	r1, #58	; 0x3a
   b4b8e:	a806      	add	r0, sp, #24
   b4b90:	f004 f8e2 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4b94:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e0>
   b4b98:	a806      	add	r0, sp, #24
   b4b9a:	f004 f9df 	bl	b8f5c <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4b9e:	2200      	movs	r2, #0
   b4ba0:	4927      	ldr	r1, [pc, #156]	; (b4c40 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e4>)
   b4ba2:	a806      	add	r0, sp, #24
   b4ba4:	f7ff ff0c 	bl	b49c0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4ba8:	a806      	add	r0, sp, #24
   b4baa:	f004 f8e3 	bl	b8d74 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4bae:	a806      	add	r0, sp, #24
   b4bb0:	f004 fc8b 	bl	b94ca <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4bb4:	f001 fcfe 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b4bb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   b4bbc:	f001 fd28 	bl	b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4bc0:	a806      	add	r0, sp, #24
	return index;
   b4bc2:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4bc4:	f003 fe8c 	bl	b88e0 <_ZN12JsonModifierD1Ev>
   b4bc8:	e765      	b.n	b4a96 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4bca:	4601      	mov	r1, r0
   b4bcc:	ab02      	add	r3, sp, #8
   b4bce:	4648      	mov	r0, r9
   b4bd0:	465a      	mov	r2, fp
   b4bd2:	f7ff faa6 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4bd6:	4629      	mov	r1, r5
   b4bd8:	a802      	add	r0, sp, #8
   b4bda:	f00a ffc6 	bl	bfb6a <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4bde:	b140      	cbz	r0, b4bf2 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x196>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4be0:	4a0f      	ldr	r2, [pc, #60]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4be2:	480b      	ldr	r0, [pc, #44]	; (b4c10 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4be4:	466b      	mov	r3, sp
   b4be6:	4639      	mov	r1, r7
   b4be8:	f7ff fa8d 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4bec:	f89d 4000 	ldrb.w	r4, [sp]
   b4bf0:	e751      	b.n	b4a96 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		index++;															// This will be the node number for the next node if no match is found
   b4bf2:	1cb4      	adds	r4, r6, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4bf4:	4656      	mov	r6, sl
   b4bf6:	2e0a      	cmp	r6, #10
   b4bf8:	f47f af66 	bne.w	b4ac8 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x6c>
   b4bfc:	e773      	b.n	b4ae6 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x8a>
   b4bfe:	bf00      	nop
   b4c00:	000c54f8 	.word	0x000c54f8
   b4c04:	000c3993 	.word	0x000c3993
   b4c08:	2003e650 	.word	0x2003e650
   b4c0c:	000c39c7 	.word	0x000c39c7
   b4c10:	2003da24 	.word	0x2003da24
   b4c14:	000c3739 	.word	0x000c3739
   b4c18:	000c39da 	.word	0x000c39da
   b4c1c:	000c3a06 	.word	0x000c3a06
   b4c20:	000c3929 	.word	0x000c3929
   b4c24:	000c3748 	.word	0x000c3748
   b4c28:	000c3744 	.word	0x000c3744
   b4c2c:	000c380c 	.word	0x000c380c
   b4c30:	000c4cc4 	.word	0x000c4cc4
   b4c34:	000c37b1 	.word	0x000c37b1
   b4c38:	000c392e 	.word	0x000c392e
   b4c3c:	00000000 	.word	0x00000000
   b4c40:	000c37fd 	.word	0x000c37fd

000b4c44 <_ZN14LoRA_Functions10nodeUpdateEif>:
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c44:	b530      	push	{r4, r5, lr}
   b4c46:	ed2d 8b02 	vpush	{d8}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c4a:	4d26      	ldr	r5, [pc, #152]	; (b4ce4 <_ZN14LoRA_Functions10nodeUpdateEif+0xa0>)
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c4c:	b093      	sub	sp, #76	; 0x4c
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c4e:	4628      	mov	r0, r5
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c50:	460c      	mov	r4, r1
   b4c52:	eeb0 8a40 	vmov.f32	s16, s0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c56:	f003 fed4 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4c5a:	4a23      	ldr	r2, [pc, #140]	; (b4ce8 <_ZN14LoRA_Functions10nodeUpdateEif+0xa4>)
   b4c5c:	4601      	mov	r1, r0
   b4c5e:	466b      	mov	r3, sp
   b4c60:	4628      	mov	r0, r5
   b4c62:	f004 f833 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c66:	1e62      	subs	r2, r4, #1
   b4c68:	9900      	ldr	r1, [sp, #0]
   b4c6a:	4628      	mov	r0, r5
   b4c6c:	f003 feeb 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4c70:	4604      	mov	r4, r0
   b4c72:	2800      	cmp	r0, #0
   b4c74:	d032      	beq.n	b4cdc <_ZN14LoRA_Functions10nodeUpdateEif+0x98>
	jp.getValueTokenByKey(nodeObjectContainer, "last", value);			// Update last connection time
   b4c76:	ab01      	add	r3, sp, #4
   b4c78:	4a1c      	ldr	r2, [pc, #112]	; (b4cec <_ZN14LoRA_Functions10nodeUpdateEif+0xa8>)
   b4c7a:	4601      	mov	r1, r0
   b4c7c:	4628      	mov	r0, r5
   b4c7e:	f004 f825 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4c82:	4629      	mov	r1, r5
   b4c84:	a802      	add	r0, sp, #8
   b4c86:	f004 f989 	bl	b8f9c <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4c8a:	9901      	ldr	r1, [sp, #4]
   b4c8c:	a802      	add	r0, sp, #8
   b4c8e:	f004 f997 	bl	b8fc0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)Time.now());
   b4c92:	f00b fa1a 	bl	c00ca <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4c96:	4916      	ldr	r1, [pc, #88]	; (b4cf0 <_ZN14LoRA_Functions10nodeUpdateEif+0xac>)
   b4c98:	4602      	mov	r2, r0
   b4c9a:	a802      	add	r0, sp, #8
   b4c9c:	f004 f89b 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4ca0:	a802      	add	r0, sp, #8
   b4ca2:	f004 fc12 	bl	b94ca <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "succ", value);			// Update the success percentage value
   b4ca6:	4a13      	ldr	r2, [pc, #76]	; (b4cf4 <_ZN14LoRA_Functions10nodeUpdateEif+0xb0>)
   b4ca8:	ab01      	add	r3, sp, #4
   b4caa:	4621      	mov	r1, r4
   b4cac:	4628      	mov	r0, r5
   b4cae:	f004 f80d 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4cb2:	9901      	ldr	r1, [sp, #4]
   b4cb4:	a802      	add	r0, sp, #8
   b4cb6:	f004 f983 	bl	b8fc0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((float)successPercent);
   b4cba:	eeb0 0a48 	vmov.f32	s0, s16
   b4cbe:	a802      	add	r0, sp, #8
   b4cc0:	f004 f94c 	bl	b8f5c <_ZN10JsonWriter11insertValueEf>
	mod.finish();
   b4cc4:	a802      	add	r0, sp, #8
   b4cc6:	f004 fc00 	bl	b94ca <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4cca:	f001 fc73 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b4cce:	6869      	ldr	r1, [r5, #4]
   b4cd0:	f001 fc9e 	bl	b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4cd4:	a802      	add	r0, sp, #8
   b4cd6:	f003 fe03 	bl	b88e0 <_ZN12JsonModifierD1Ev>
	return true;
   b4cda:	2001      	movs	r0, #1
}
   b4cdc:	b013      	add	sp, #76	; 0x4c
   b4cde:	ecbd 8b02 	vpop	{d8}
   b4ce2:	bd30      	pop	{r4, r5, pc}
   b4ce4:	2003da24 	.word	0x2003da24
   b4ce8:	000c3739 	.word	0x000c3739
   b4cec:	000c380c 	.word	0x000c380c
   b4cf0:	000c3a03 	.word	0x000c3a03
   b4cf4:	000c392e 	.word	0x000c392e

000b4cf8 <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4cf8:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4cfa:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4cfc:	b094      	sub	sp, #80	; 0x50
   b4cfe:	460c      	mov	r4, r1
   b4d00:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4d02:	dc3d      	bgt.n	b4d80 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4d04:	4d1f      	ldr	r5, [pc, #124]	; (b4d84 <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4d06:	4628      	mov	r0, r5
   b4d08:	f003 fe7b 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4d0c:	4a1e      	ldr	r2, [pc, #120]	; (b4d88 <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4d0e:	4601      	mov	r1, r0
   b4d10:	ab02      	add	r3, sp, #8
   b4d12:	4628      	mov	r0, r5
   b4d14:	f003 ffda 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4d18:	1e62      	subs	r2, r4, #1
   b4d1a:	9902      	ldr	r1, [sp, #8]
   b4d1c:	4628      	mov	r0, r5
   b4d1e:	f003 fe92 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4d22:	4604      	mov	r4, r0
   b4d24:	b360      	cbz	r0, b4d80 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4d26:	4601      	mov	r1, r0
   b4d28:	4a18      	ldr	r2, [pc, #96]	; (b4d8c <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d2a:	ab01      	add	r3, sp, #4
   b4d2c:	4628      	mov	r0, r5
   b4d2e:	f7ff f9ea 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4d32:	9a01      	ldr	r2, [sp, #4]
   b4d34:	4916      	ldr	r1, [pc, #88]	; (b4d90 <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4d36:	4817      	ldr	r0, [pc, #92]	; (b4d94 <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4d38:	4633      	mov	r3, r6
   b4d3a:	f7ff fa00 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4d3e:	ab03      	add	r3, sp, #12
   b4d40:	4a12      	ldr	r2, [pc, #72]	; (b4d8c <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d42:	4621      	mov	r1, r4
   b4d44:	4628      	mov	r0, r5
   b4d46:	f003 ffc1 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4d4a:	4629      	mov	r1, r5
   b4d4c:	a804      	add	r0, sp, #16
   b4d4e:	f004 f925 	bl	b8f9c <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4d52:	9903      	ldr	r1, [sp, #12]
   b4d54:	a804      	add	r0, sp, #16
   b4d56:	f004 f933 	bl	b8fc0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4d5a:	4632      	mov	r2, r6
   b4d5c:	490e      	ldr	r1, [pc, #56]	; (b4d98 <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4d5e:	a804      	add	r0, sp, #16
   b4d60:	f004 f839 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4d64:	a804      	add	r0, sp, #16
   b4d66:	f004 fbb0 	bl	b94ca <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4d6a:	f001 fc23 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b4d6e:	6869      	ldr	r1, [r5, #4]
   b4d70:	f001 fc4e 	bl	b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4d74:	a804      	add	r0, sp, #16
   b4d76:	f003 fdb3 	bl	b88e0 <_ZN12JsonModifierD1Ev>
	return true;
   b4d7a:	2001      	movs	r0, #1
}
   b4d7c:	b014      	add	sp, #80	; 0x50
   b4d7e:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4d80:	2000      	movs	r0, #0
   b4d82:	e7fb      	b.n	b4d7c <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4d84:	2003da24 	.word	0x2003da24
   b4d88:	000c3739 	.word	0x000c3739
   b4d8c:	000c37b1 	.word	0x000c37b1
   b4d90:	000c3a3a 	.word	0x000c3a3a
   b4d94:	2003e650 	.word	0x2003e650
   b4d98:	000c3a03 	.word	0x000c3a03

000b4d9c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
		nodeDeviceID[i] = buf[i+4];
   b4d9e:	4a48      	ldr	r2, [pc, #288]	; (b4ec0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x124>)
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4da0:	b08d      	sub	sp, #52	; 0x34
		nodeDeviceID[i] = buf[i+4];
   b4da2:	ac05      	add	r4, sp, #20
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4da4:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+4];
   b4da6:	f102 0318 	add.w	r3, r2, #24
   b4daa:	4627      	mov	r7, r4
   b4dac:	6810      	ldr	r0, [r2, #0]
   b4dae:	6851      	ldr	r1, [r2, #4]
   b4db0:	4626      	mov	r6, r4
   b4db2:	c603      	stmia	r6!, {r0, r1}
   b4db4:	3208      	adds	r2, #8
   b4db6:	429a      	cmp	r2, r3
   b4db8:	4634      	mov	r4, r6
   b4dba:	d1f7      	bne.n	b4dac <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x10>
   b4dbc:	7813      	ldrb	r3, [r2, #0]
   b4dbe:	7033      	strb	r3, [r6, #0]
	current.set_sensorType(buf[29]);								// Store device type in the current data buffer 
   b4dc0:	f001 fb54 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4dc4:	4b3f      	ldr	r3, [pc, #252]	; (b4ec4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x128>)
   b4dc6:	7f59      	ldrb	r1, [r3, #29]
   b4dc8:	f001 fd76 	bl	b68b8 <_ZN17currentStatusData14set_sensorTypeEh>
	if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b4dcc:	f001 fb4e 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4dd0:	f001 fccd 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4dd4:	280a      	cmp	r0, #10
   b4dd6:	d844      	bhi.n	b4e62 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
   b4dd8:	f7ff f9ca 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4ddc:	4604      	mov	r4, r0
   b4dde:	f001 fb45 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4de2:	f001 fcc4 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4de6:	9003      	str	r0, [sp, #12]
   b4de8:	f001 fb40 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4dec:	f001 fdeb 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b4df0:	9903      	ldr	r1, [sp, #12]
   b4df2:	4602      	mov	r2, r0
   b4df4:	4620      	mov	r0, r4
   b4df6:	f7ff fb31 	bl	b445c <_ZN14LoRA_Functions14nodeConfiguredEii>
   b4dfa:	bb90      	cbnz	r0, b4e62 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
		Log.info("Node %d join request from %s setting clock",current.get_nodeNumber(), nodeDeviceID);
   b4dfc:	f001 fb36 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e00:	f001 fcb5 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e04:	4930      	ldr	r1, [pc, #192]	; (b4ec8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x12c>)
   b4e06:	4602      	mov	r2, r0
   b4e08:	463b      	mov	r3, r7
   b4e0a:	4830      	ldr	r0, [pc, #192]	; (b4ecc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4e0c:	f7ff f997 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4e10:	f001 fb2c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e14:	2101      	movs	r1, #1
   b4e16:	f001 fd49 	bl	b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4e1a:	f001 fb27 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e1e:	4604      	mov	r4, r0
   b4e20:	f00b f953 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4e24:	4602      	mov	r2, r0
   b4e26:	17c3      	asrs	r3, r0, #31
   b4e28:	4620      	mov	r0, r4
   b4e2a:	f001 feae 	bl	b6b8a <_ZN17currentStatusData22set_alertTimestampNodeEx>
	if (current.get_nodeNumber() == 11) return false;
   b4e2e:	f001 fb1d 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e32:	f001 fc9c 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e36:	280b      	cmp	r0, #11
   b4e38:	d03f      	beq.n	b4eba <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x11e>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4e3a:	f001 fb17 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e3e:	f001 fc96 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e42:	9003      	str	r0, [sp, #12]
   b4e44:	f001 fb12 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e48:	f001 fcb9 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b4e4c:	9903      	ldr	r1, [sp, #12]
   b4e4e:	4602      	mov	r2, r0
   b4e50:	4628      	mov	r0, r5
   b4e52:	f7ff ff51 	bl	b4cf8 <_ZN14LoRA_Functions10changeTypeEii>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4e56:	4b1e      	ldr	r3, [pc, #120]	; (b4ed0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x134>)
   b4e58:	2202      	movs	r2, #2
   b4e5a:	701a      	strb	r2, [r3, #0]
	return true;
   b4e5c:	2001      	movs	r0, #1
}
   b4e5e:	b00d      	add	sp, #52	; 0x34
   b4e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4e62:	f001 fb03 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e66:	4604      	mov	r4, r0
   b4e68:	f001 fb00 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e6c:	f001 fc7f 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e70:	4601      	mov	r1, r0
   b4e72:	4620      	mov	r0, r4
   b4e74:	f001 fcf6 	bl	b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID,current.get_nodeID()));		// Look up the new node number
   b4e78:	f001 faf8 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e7c:	4604      	mov	r4, r0
   b4e7e:	f001 faf5 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e82:	f001 fda0 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b4e86:	4639      	mov	r1, r7
   b4e88:	4602      	mov	r2, r0
   b4e8a:	4628      	mov	r0, r5
   b4e8c:	f7ff fde6 	bl	b4a5c <_ZN14LoRA_Functions14findNodeNumberEPKci>
   b4e90:	4601      	mov	r1, r0
   b4e92:	4620      	mov	r0, r4
   b4e94:	f001 fce0 	bl	b6858 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4e98:	f001 fae8 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4e9c:	f001 fc6c 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4ea0:	9003      	str	r0, [sp, #12]
   b4ea2:	f001 fae3 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4ea6:	f001 fc62 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4eaa:	9a03      	ldr	r2, [sp, #12]
   b4eac:	9000      	str	r0, [sp, #0]
   b4eae:	4909      	ldr	r1, [pc, #36]	; (b4ed4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x138>)
   b4eb0:	4806      	ldr	r0, [pc, #24]	; (b4ecc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4eb2:	463b      	mov	r3, r7
   b4eb4:	f7ff f943 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4eb8:	e7aa      	b.n	b4e10 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x74>
	if (current.get_nodeNumber() == 11) return false;
   b4eba:	2000      	movs	r0, #0
   b4ebc:	e7cf      	b.n	b4e5e <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc2>
   b4ebe:	bf00      	nop
   b4ec0:	2003d87c 	.word	0x2003d87c
   b4ec4:	2003d878 	.word	0x2003d878
   b4ec8:	000c3a5d 	.word	0x000c3a5d
   b4ecc:	2003e650 	.word	0x2003e650
   b4ed0:	2003d870 	.word	0x2003d870
   b4ed4:	000c3a88 	.word	0x000c3a88

000b4ed8 <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4ed8:	b570      	push	{r4, r5, r6, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4eda:	4d20      	ldr	r5, [pc, #128]	; (b4f5c <_ZN14LoRA_Functions11changeAlertEii+0x84>)
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4edc:	b094      	sub	sp, #80	; 0x50
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ede:	4628      	mov	r0, r5
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4ee0:	460c      	mov	r4, r1
   b4ee2:	4616      	mov	r6, r2
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ee4:	f003 fd8d 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b4ee8:	4a1d      	ldr	r2, [pc, #116]	; (b4f60 <_ZN14LoRA_Functions11changeAlertEii+0x88>)
   b4eea:	4601      	mov	r1, r0
   b4eec:	ab02      	add	r3, sp, #8
   b4eee:	4628      	mov	r0, r5
   b4ef0:	f003 feec 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   b4ef4:	1e62      	subs	r2, r4, #1
   b4ef6:	9902      	ldr	r1, [sp, #8]
   b4ef8:	4628      	mov	r0, r5
   b4efa:	f003 fda4 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - node number entry not found triggers alert
   b4efe:	4604      	mov	r4, r0
   b4f00:	b350      	cbz	r0, b4f58 <_ZN14LoRA_Functions11changeAlertEii+0x80>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);			// Now we have the oject for the specific node
   b4f02:	4601      	mov	r1, r0
   b4f04:	4a17      	ldr	r2, [pc, #92]	; (b4f64 <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f06:	ab01      	add	r3, sp, #4
   b4f08:	4628      	mov	r0, r5
   b4f0a:	f7ff f8fc 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4f0e:	9a01      	ldr	r2, [sp, #4]
   b4f10:	4915      	ldr	r1, [pc, #84]	; (b4f68 <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4f12:	4816      	ldr	r0, [pc, #88]	; (b4f6c <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4f14:	4633      	mov	r3, r6
   b4f16:	f7ff f912 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4f1a:	ab03      	add	r3, sp, #12
   b4f1c:	4a11      	ldr	r2, [pc, #68]	; (b4f64 <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f1e:	4621      	mov	r1, r4
   b4f20:	4628      	mov	r0, r5
   b4f22:	f003 fed3 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);													// Create a modifier object
   b4f26:	4629      	mov	r1, r5
   b4f28:	a804      	add	r0, sp, #16
   b4f2a:	f004 f837 	bl	b8f9c <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);													// Update the pending alert value for the selected node
   b4f2e:	9903      	ldr	r1, [sp, #12]
   b4f30:	a804      	add	r0, sp, #16
   b4f32:	f004 f845 	bl	b8fc0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4f36:	4632      	mov	r2, r6
   b4f38:	490d      	ldr	r1, [pc, #52]	; (b4f70 <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4f3a:	a804      	add	r0, sp, #16
   b4f3c:	f003 ff4b 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4f40:	a804      	add	r0, sp, #16
   b4f42:	f004 fac2 	bl	b94ca <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This updates the JSON object but doe not commit to to persistent storage
   b4f46:	f001 fb35 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b4f4a:	6869      	ldr	r1, [r5, #4]
   b4f4c:	f001 fb60 	bl	b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);													// Create a modifier object
   b4f50:	a804      	add	r0, sp, #16
   b4f52:	f003 fcc5 	bl	b88e0 <_ZN12JsonModifierD1Ev>
	return true;
   b4f56:	2001      	movs	r0, #1
}
   b4f58:	b014      	add	sp, #80	; 0x50
   b4f5a:	bd70      	pop	{r4, r5, r6, pc}
   b4f5c:	2003da24 	.word	0x2003da24
   b4f60:	000c3739 	.word	0x000c3739
   b4f64:	000c37fd 	.word	0x000c37fd
   b4f68:	000c3ac3 	.word	0x000c3ac3
   b4f6c:	2003e650 	.word	0x2003e650
   b4f70:	000c3a03 	.word	0x000c3a03

000b4f74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message 
   b4f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f76:	ed2d 8b02 	vpush	{d8}
   b4f7a:	b0a9      	sub	sp, #164	; 0xa4
   b4f7c:	4605      	mov	r5, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4f7e:	f00b f8a4 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4f82:	4ca2      	ldr	r4, [pc, #648]	; (b520c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x298>)
   b4f84:	1600      	asrs	r0, r0, #24
   b4f86:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4f88:	f00b f89f 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4f8c:	1400      	asrs	r0, r0, #16
   b4f8e:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4f90:	f00b f89b 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4f94:	1200      	asrs	r0, r0, #8
   b4f96:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4f98:	f00b f897 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4f9c:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports set by the gateway
   b4f9e:	f001 fa01 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b4fa2:	f001 fca6 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fa6:	0a00      	lsrs	r0, r0, #8
   b4fa8:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4faa:	f001 f9fb 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b4fae:	f001 fca0 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fb2:	71e0      	strb	r0, [r4, #7]
	if (current.get_nodeNumber() == 11) {			// This is a data report from an unconfigured node - need to tell it to rejoin
   b4fb4:	f001 fa5a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4fb8:	f001 fbd9 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fbc:	280b      	cmp	r0, #11
   b4fbe:	d17a      	bne.n	b50b6 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x142>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b4fc0:	f001 fa54 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4fc4:	f001 fbd3 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fc8:	4991      	ldr	r1, [pc, #580]	; (b5210 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x29c>)
   b4fca:	4602      	mov	r2, r0
   b4fcc:	4891      	ldr	r0, [pc, #580]	; (b5214 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a0>)
   b4fce:	f7ff f8b6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);				// This will ensure the node rejoins the network
   b4fd2:	f001 fa4b 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4fd6:	2101      	movs	r1, #1
   b4fd8:	f001 fc68 	bl	b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4fdc:	f001 fa46 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4fe0:	4605      	mov	r5, r0
   b4fe2:	f00b f872 	bl	c00ca <_ZN9TimeClass3nowEv>
   b4fe6:	4602      	mov	r2, r0
   b4fe8:	17c3      	asrs	r3, r0, #31
   b4fea:	4628      	mov	r0, r5
   b4fec:	f001 fdcd 	bl	b6b8a <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();												
   b4ff0:	f001 fa3c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4ff4:	f001 fbde 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4ff8:	7220      	strb	r0, [r4, #8]
		buf[9] = current.get_sensorType();			// Since the node is unconfigured, we need to beleive it when it tells us the type
   b4ffa:	f001 fa37 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b4ffe:	f001 fbde 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b5002:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_openHours();
   b5004:	f001 fa32 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5008:	f001 fe38 	bl	b6c7c <_ZNK17currentStatusData13get_openHoursEv>
   b500c:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();			// Repeat back message number
   b500e:	f001 fa2d 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5012:	f001 fbc5 	bl	b67a0 <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5016:	4b80      	ldr	r3, [pc, #512]	; (b5218 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a4>)
	buf[11] = current.get_messageCount();			// Repeat back message number
   b5018:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b501a:	881d      	ldrh	r5, [r3, #0]
   b501c:	2101      	movs	r1, #1
   b501e:	4628      	mov	r0, r5
   b5020:	f00b fa63 	bl	c04ea <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5024:	f001 fa22 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5028:	f001 fba6 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b502c:	2800      	cmp	r0, #0
   b502e:	f040 80d6 	bne.w	b51de <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x26a>
   b5032:	f001 fa1b 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5036:	f001 fb9a 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
	if (manager.sendtoWait(buf, 12, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b503a:	2304      	movs	r3, #4
   b503c:	4973      	ldr	r1, [pc, #460]	; (b520c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x298>)
   b503e:	9300      	str	r3, [sp, #0]
   b5040:	220c      	movs	r2, #12
   b5042:	4603      	mov	r3, r0
   b5044:	4875      	ldr	r0, [pc, #468]	; (b521c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a8>)
   b5046:	f006 f889 	bl	bb15c <_ZN6RHMesh10sendtoWaitEPhhhh>
   b504a:	4601      	mov	r1, r0
   b504c:	2800      	cmp	r0, #0
   b504e:	f040 80cb 	bne.w	b51e8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x274>
		digitalWrite(BLUE_LED,LOW);
   b5052:	4628      	mov	r0, r5
   b5054:	f00b fa49 	bl	c04ea <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and signal strength %d", current.get_nodeNumber(), buf[10], buf[8], driver.lastRssi());
   b5058:	f001 fa08 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b505c:	f001 fb87 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5060:	9005      	str	r0, [sp, #20]
   b5062:	486f      	ldr	r0, [pc, #444]	; (b5220 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>)
   b5064:	7aa5      	ldrb	r5, [r4, #10]
   b5066:	7a24      	ldrb	r4, [r4, #8]
   b5068:	f005 fe5d 	bl	bad26 <_ZN15RHGenericDriver8lastRssiEv>
   b506c:	9b05      	ldr	r3, [sp, #20]
   b506e:	4a6d      	ldr	r2, [pc, #436]	; (b5224 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b5070:	9500      	str	r5, [sp, #0]
   b5072:	e9cd 4001 	strd	r4, r0, [sp, #4]
   b5076:	2180      	movs	r1, #128	; 0x80
   b5078:	a808      	add	r0, sp, #32
   b507a:	f008 f933 	bl	bd2e4 <snprintf>
		Log.info(messageString);
   b507e:	4865      	ldr	r0, [pc, #404]	; (b5214 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a0>)
   b5080:	a908      	add	r1, sp, #32
   b5082:	f7ff f85c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5086:	f008 f865 	bl	bd154 <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b508a:	4604      	mov	r4, r0
   b508c:	2800      	cmp	r0, #0
   b508e:	f000 80ba 	beq.w	b5206 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x292>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5092:	4b65      	ldr	r3, [pc, #404]	; (b5228 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5094:	4965      	ldr	r1, [pc, #404]	; (b522c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5096:	781b      	ldrb	r3, [r3, #0]
   b5098:	f88d 3000 	strb.w	r3, [sp]
   b509c:	a806      	add	r0, sp, #24
   b509e:	233c      	movs	r3, #60	; 0x3c
   b50a0:	aa08      	add	r2, sp, #32
   b50a2:	f008 fc43 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b50a6:	a807      	add	r0, sp, #28
   b50a8:	f7ff faf6 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50ac:	4620      	mov	r0, r4
   b50ae:	b029      	add	sp, #164	; 0xa4
   b50b0:	ecbd 8b02 	vpop	{d8}
   b50b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b50b6:	f001 f9d9 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b50ba:	4606      	mov	r6, r0
   b50bc:	f001 f9d6 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b50c0:	f001 fb55 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b50c4:	4601      	mov	r1, r0
   b50c6:	4628      	mov	r0, r5
   b50c8:	f7ff fa3e 	bl	b4548 <_ZN14LoRA_Functions8getAlertEi>
   b50cc:	4601      	mov	r1, r0
   b50ce:	4630      	mov	r0, r6
   b50d0:	f001 fbec 	bl	b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>
		if (current.get_alertCodeNode() > 0) Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b50d4:	f001 f9ca 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b50d8:	f001 fb6c 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50dc:	b170      	cbz	r0, b50fc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x188>
   b50de:	f001 f9c5 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b50e2:	f001 fb44 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b50e6:	9005      	str	r0, [sp, #20]
   b50e8:	f001 f9c0 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b50ec:	f001 fb62 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50f0:	9a05      	ldr	r2, [sp, #20]
   b50f2:	494f      	ldr	r1, [pc, #316]	; (b5230 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
   b50f4:	4603      	mov	r3, r0
   b50f6:	4847      	ldr	r0, [pc, #284]	; (b5214 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a0>)
   b50f8:	f7ff f821 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_alertCodeNode() == 7) {							// if it is a change in type alert - we can do that here
   b50fc:	f001 f9b6 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5100:	f001 fb58 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5104:	2807      	cmp	r0, #7
   b5106:	d161      	bne.n	b51cc <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x258>
			int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b5108:	f001 f9b0 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b510c:	f001 fb2f 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5110:	4601      	mov	r1, r0
   b5112:	4628      	mov	r0, r5
   b5114:	f7ff f9de 	bl	b44d4 <_ZN14LoRA_Functions7getTypeEi>
   b5118:	4606      	mov	r6, r0
			Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b511a:	f001 f9a7 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b511e:	f001 fb4e 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b5122:	4944      	ldr	r1, [pc, #272]	; (b5234 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c0>)
   b5124:	4602      	mov	r2, r0
   b5126:	4633      	mov	r3, r6
   b5128:	483a      	ldr	r0, [pc, #232]	; (b5214 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a0>)
   b512a:	f7ff f808 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_sensorType(newSensorType);	// Update current value for data report
   b512e:	f001 f99d 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5132:	4631      	mov	r1, r6
   b5134:	f001 fbc0 	bl	b68b8 <_ZN17currentStatusData14set_sensorTypeEh>
			buf[9] = newSensorType;
   b5138:	7266      	strb	r6, [r4, #9]
		LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced - no longer pending
   b513a:	f001 f997 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b513e:	f001 fb16 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5142:	2200      	movs	r2, #0
   b5144:	4601      	mov	r1, r0
   b5146:	4628      	mov	r0, r5
   b5148:	f7ff fec6 	bl	b4ed8 <_ZN14LoRA_Functions11changeAlertEii>
		buf[8] = current.get_alertCodeNode();
   b514c:	f001 f98e 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5150:	f001 fb30 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5154:	7220      	strb	r0, [r4, #8]
		if (current.get_messageCount()==0) successPercent = 0.0;
   b5156:	f001 f989 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b515a:	f001 fb21 	bl	b67a0 <_ZNK17currentStatusData16get_messageCountEv>
   b515e:	b3d8      	cbz	r0, b51d8 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x264>
		else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b5160:	f001 f984 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5164:	f001 fb21 	bl	b67aa <_ZNK17currentStatusData16get_successCountEv>
   b5168:	4605      	mov	r5, r0
   b516a:	f001 f97f 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b516e:	f001 fb17 	bl	b67a0 <_ZNK17currentStatusData16get_messageCountEv>
   b5172:	ee08 0a10 	vmov	s16, r0
   b5176:	4628      	mov	r0, r5
   b5178:	f00b fc20 	bl	c09bc <__aeabi_i2d>
   b517c:	4b2e      	ldr	r3, [pc, #184]	; (b5238 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c4>)
   b517e:	2200      	movs	r2, #0
   b5180:	f00b fad0 	bl	c0724 <__adddf3>
   b5184:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b5188:	4606      	mov	r6, r0
   b518a:	ee17 0a90 	vmov	r0, s15
   b518e:	460f      	mov	r7, r1
   b5190:	f00b fc26 	bl	c09e0 <__aeabi_f2d>
   b5194:	4602      	mov	r2, r0
   b5196:	460b      	mov	r3, r1
   b5198:	4630      	mov	r0, r6
   b519a:	4639      	mov	r1, r7
   b519c:	f00b fda2 	bl	c0ce4 <__aeabi_ddiv>
   b51a0:	4b26      	ldr	r3, [pc, #152]	; (b523c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
   b51a2:	2200      	movs	r2, #0
   b51a4:	f00b fc74 	bl	c0a90 <__aeabi_dmul>
   b51a8:	f00b ff6a 	bl	c1080 <__aeabi_d2f>
   b51ac:	ee08 0a10 	vmov	s16, r0
		LoRA_Functions::instance().nodeUpdate(current.get_nodeNumber(), successPercent);
   b51b0:	f7fe ffde 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b51b4:	4605      	mov	r5, r0
   b51b6:	f001 f959 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b51ba:	f001 fad8 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b51be:	eeb0 0a48 	vmov.f32	s0, s16
   b51c2:	4601      	mov	r1, r0
   b51c4:	4628      	mov	r0, r5
   b51c6:	f7ff fd3d 	bl	b4c44 <_ZN14LoRA_Functions10nodeUpdateEif>
   b51ca:	e71b      	b.n	b5004 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x90>
		else buf[9] = current.get_sensorType();
   b51cc:	f001 f94e 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b51d0:	f001 faf5 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b51d4:	7260      	strb	r0, [r4, #9]
   b51d6:	e7b0      	b.n	b513a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1c6>
		if (current.get_messageCount()==0) successPercent = 0.0;
   b51d8:	ed9f 8a19 	vldr	s16, [pc, #100]	; b5240 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>
   b51dc:	e7e8      	b.n	b51b0 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x23c>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b51de:	f001 f945 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b51e2:	f001 fac9 	bl	b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b51e6:	e728      	b.n	b503a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xc6>
		Log.info("Node %d data report response not acknowledged", current.get_nodeNumber());
   b51e8:	f001 f940 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b51ec:	f001 fabf 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b51f0:	4914      	ldr	r1, [pc, #80]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b51f2:	4602      	mov	r2, r0
   b51f4:	4807      	ldr	r0, [pc, #28]	; (b5214 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2a0>)
   b51f6:	f7fe ffa2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b51fa:	2100      	movs	r1, #0
   b51fc:	4628      	mov	r0, r5
   b51fe:	f00b f974 	bl	c04ea <digitalWrite>
		return false;
   b5202:	2400      	movs	r4, #0
   b5204:	e752      	b.n	b50ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>
		return true;
   b5206:	2401      	movs	r4, #1
   b5208:	e750      	b.n	b50ac <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x138>
   b520a:	bf00      	nop
   b520c:	2003d878 	.word	0x2003d878
   b5210:	000c3ae8 	.word	0x000c3ae8
   b5214:	2003e650 	.word	0x2003e650
   b5218:	000c489c 	.word	0x000c489c
   b521c:	2003e170 	.word	0x2003e170
   b5220:	2003d8f4 	.word	0x2003d8f4
   b5224:	000c3b67 	.word	0x000c3b67
   b5228:	2003d871 	.word	0x2003d871
   b522c:	000c38fb 	.word	0x000c38fb
   b5230:	000c3b14 	.word	0x000c3b14
   b5234:	000c3b33 	.word	0x000c3b33
   b5238:	3ff00000 	.word	0x3ff00000
   b523c:	40590000 	.word	0x40590000
   b5240:	00000000 	.word	0x00000000
   b5244:	000c3bb1 	.word	0x000c3bb1

000b5248 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5248:	b570      	push	{r4, r5, r6, lr}
   b524a:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b524c:	2379      	movs	r3, #121	; 0x79
   b524e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b5252:	f10d 031f 	add.w	r3, sp, #31
   b5256:	9303      	str	r3, [sp, #12]
   b5258:	f10d 031e 	add.w	r3, sp, #30
   b525c:	4d6b      	ldr	r5, [pc, #428]	; (b540c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1c4>)
   b525e:	9302      	str	r3, [sp, #8]
   b5260:	f10d 031d 	add.w	r3, sp, #29
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	ab07      	add	r3, sp, #28
   b5268:	9300      	str	r3, [sp, #0]
   b526a:	4869      	ldr	r0, [pc, #420]	; (b5410 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1c8>)
   b526c:	f10d 031b 	add.w	r3, sp, #27
   b5270:	f10d 021a 	add.w	r2, sp, #26
   b5274:	4629      	mov	r1, r5
   b5276:	f005 ffa5 	bl	bb1c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b527a:	b908      	cbnz	r0, b5280 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x38>
		else {Log.info("Invalid message flag"); return false;}
   b527c:	2000      	movs	r0, #0
   b527e:	e0ad      	b.n	b53dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x194>
		buf[len] = 0;
   b5280:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5284:	2400      	movs	r4, #0
   b5286:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b5288:	882e      	ldrh	r6, [r5, #0]
   b528a:	f001 f88b 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b528e:	f001 fb2b 	bl	b68e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b5292:	ba76      	rev16	r6, r6
   b5294:	b2b6      	uxth	r6, r6
   b5296:	42b0      	cmp	r0, r6
   b5298:	d014      	beq.n	b52c4 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7c>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b529a:	f001 f8e7 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b529e:	f001 fa66 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b52a2:	882b      	ldrh	r3, [r5, #0]
   b52a4:	9005      	str	r0, [sp, #20]
   b52a6:	ba5b      	rev16	r3, r3
   b52a8:	b29b      	uxth	r3, r3
   b52aa:	9304      	str	r3, [sp, #16]
   b52ac:	f001 f87a 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b52b0:	f001 fb1a 	bl	b68e8 <_ZNK13sysStatusData15get_magicNumberEv>
   b52b4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b52b8:	9000      	str	r0, [sp, #0]
   b52ba:	4956      	ldr	r1, [pc, #344]	; (b5414 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1cc>)
   b52bc:	4856      	ldr	r0, [pc, #344]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d0>)
   b52be:	f7fe ff3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b52c2:	e7db      	b.n	b527c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);												// Captures the nodeNumber 
   b52c4:	f001 f8d2 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b52c8:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b52cc:	f001 fac4 	bl	b6858 <_ZN17currentStatusData14set_nodeNumberEh>
		current.set_tempNodeNumber(0);												// Clear for new response
   b52d0:	f001 f8cc 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b52d4:	4621      	mov	r1, r4
   b52d6:	f001 fac5 	bl	b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b52da:	f001 f8c7 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b52de:	8869      	ldrh	r1, [r5, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b52e0:	4c4e      	ldr	r4, [pc, #312]	; (b541c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d4>)
		Log.info("Node %d with ID %d a %s message with rssi=%d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], driver.lastRssi());
   b52e2:	4d4f      	ldr	r5, [pc, #316]	; (b5420 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d8>)
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b52e4:	ba49      	rev16	r1, r1
   b52e6:	b289      	uxth	r1, r1
   b52e8:	f001 fbe9 	bl	b6abe <_ZN17currentStatusData10set_nodeIDEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b52ec:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b52f0:	f003 030f 	and.w	r3, r3, #15
   b52f4:	7023      	strb	r3, [r4, #0]
		Log.info("Node %d with ID %d a %s message with rssi=%d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], driver.lastRssi());
   b52f6:	f001 f8b9 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b52fa:	f001 fa38 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b52fe:	9005      	str	r0, [sp, #20]
   b5300:	f001 f8b4 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5304:	f001 fb5f 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b5308:	7821      	ldrb	r1, [r4, #0]
   b530a:	9004      	str	r0, [sp, #16]
   b530c:	4845      	ldr	r0, [pc, #276]	; (b5424 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1dc>)
   b530e:	eb05 1501 	add.w	r5, r5, r1, lsl #4
   b5312:	f005 fd08 	bl	bad26 <_ZN15RHGenericDriver8lastRssiEv>
   b5316:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b531a:	4943      	ldr	r1, [pc, #268]	; (b5428 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1e0>)
   b531c:	e9cd 5000 	strd	r5, r0, [sp]
   b5320:	483d      	ldr	r0, [pc, #244]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d0>)
   b5322:	f7fe ff0c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b5326:	f001 f8a1 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b532a:	f001 fa20 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b532e:	280a      	cmp	r0, #10
   b5330:	d825      	bhi.n	b537e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x136>
   b5332:	f7fe ff1d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5336:	4605      	mov	r5, r0
   b5338:	f001 f898 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b533c:	f001 fa17 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5340:	9004      	str	r0, [sp, #16]
   b5342:	f001 f893 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5346:	f001 fb3e 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b534a:	9904      	ldr	r1, [sp, #16]
   b534c:	4602      	mov	r2, r0
   b534e:	4628      	mov	r0, r5
   b5350:	f7ff f884 	bl	b445c <_ZN14LoRA_Functions14nodeConfiguredEii>
   b5354:	b998      	cbnz	r0, b537e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x136>
			Log.info("Node not properly configured, resetting node number");
   b5356:	4935      	ldr	r1, [pc, #212]	; (b542c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1e4>)
   b5358:	482f      	ldr	r0, [pc, #188]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d0>)
   b535a:	f7fe fef0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_tempNodeNumber(current.get_nodeNumber());				// Store node number in temp for the repsonse
   b535e:	f001 f885 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5362:	4605      	mov	r5, r0
   b5364:	f001 f882 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5368:	f001 fa01 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b536c:	4601      	mov	r1, r0
   b536e:	4628      	mov	r0, r5
   b5370:	f001 fa78 	bl	b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>
			current.set_nodeNumber(11);											// Set node number to 11
   b5374:	f001 f87a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5378:	210b      	movs	r1, #11
   b537a:	f001 fa6d 	bl	b6858 <_ZN17currentStatusData14set_nodeNumberEh>
		if (lora_state == DATA_RPT) {if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b537e:	7823      	ldrb	r3, [r4, #0]
   b5380:	2b03      	cmp	r3, #3
   b5382:	d12d      	bne.n	b53e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x198>
   b5384:	f7fe fef4 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5388:	f7fe ffd0 	bl	b432c <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b538c:	2800      	cmp	r0, #0
   b538e:	f43f af75 	beq.w	b527c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              			// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b5392:	f001 f807 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5396:	f001 fb11 	bl	b69bc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b539a:	b1c0      	cbz	r0, b53ce <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x186>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());// This was the temporary value from the particle function
   b539c:	f001 f802 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b53a0:	4605      	mov	r5, r0
   b53a2:	f000 ffff 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b53a6:	f001 fb09 	bl	b69bc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b53aa:	4601      	mov	r1, r0
   b53ac:	4628      	mov	r0, r5
   b53ae:	f001 fb7a 	bl	b6aa6 <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b53b2:	f000 fff7 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b53b6:	2100      	movs	r1, #0
   b53b8:	f001 fb7b 	bl	b6ab2 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b53bc:	f000 fff2 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b53c0:	f001 fa97 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b53c4:	491a      	ldr	r1, [pc, #104]	; (b5430 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1e8>)
   b53c6:	4602      	mov	r2, r0
   b53c8:	4813      	ldr	r0, [pc, #76]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d0>)
   b53ca:	f7fe feb8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b53ce:	7823      	ldrb	r3, [r4, #0]
   b53d0:	2b04      	cmp	r3, #4
   b53d2:	d111      	bne.n	b53f8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1b0>
   b53d4:	f7fe fecc 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53d8:	f7ff fdcc 	bl	b4f74 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
}
   b53dc:	b008      	add	sp, #32
   b53de:	bd70      	pop	{r4, r5, r6, pc}
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b53e0:	2b01      	cmp	r3, #1
   b53e2:	d104      	bne.n	b53ee <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1a6>
   b53e4:	f7fe fec4 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53e8:	f7ff fcd8 	bl	b4d9c <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b53ec:	e7ce      	b.n	b538c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x144>
		else {Log.info("Invalid message flag, returning"); return false;}
   b53ee:	4911      	ldr	r1, [pc, #68]	; (b5434 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ec>)
		else {Log.info("Invalid message flag"); return false;}
   b53f0:	4809      	ldr	r0, [pc, #36]	; (b5418 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1d0>)
   b53f2:	f7fe fea4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b53f6:	e741      	b.n	b527c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b53f8:	2b02      	cmp	r3, #2
   b53fa:	d104      	bne.n	b5406 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1be>
   b53fc:	f7fe feb8 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5400:	f7ff f960 	bl	b46c4 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b5404:	e7ea      	b.n	b53dc <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x194>
		else {Log.info("Invalid message flag"); return false;}
   b5406:	490c      	ldr	r1, [pc, #48]	; (b5438 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f0>)
   b5408:	e7f2      	b.n	b53f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1a8>
   b540a:	bf00      	nop
   b540c:	2003d878 	.word	0x2003d878
   b5410:	2003e170 	.word	0x2003e170
   b5414:	000c3bdf 	.word	0x000c3bdf
   b5418:	2003e650 	.word	0x2003e650
   b541c:	2003d870 	.word	0x2003d870
   b5420:	2003d584 	.word	0x2003d584
   b5424:	2003d8f4 	.word	0x2003d8f4
   b5428:	000c3c39 	.word	0x000c3c39
   b542c:	000c3c66 	.word	0x000c3c66
   b5430:	000c3cba 	.word	0x000c3cba
   b5434:	000c3c9a 	.word	0x000c3c9a
   b5438:	000c3cee 	.word	0x000c3cee

000b543c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b543c:	4b01      	ldr	r3, [pc, #4]	; (b5444 <_Z18outOfMemoryHandleryi+0x8>)
   b543e:	601a      	str	r2, [r3, #0]
}
   b5440:	4770      	bx	lr
   b5442:	bf00      	nop
   b5444:	2003d5f4 	.word	0x2003d5f4

000b5448 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b5448:	4b01      	ldr	r3, [pc, #4]	; (b5450 <_Z13userSwitchISRv+0x8>)
   b544a:	2201      	movs	r2, #1
   b544c:	701a      	strb	r2, [r3, #0]
}
   b544e:	4770      	bx	lr
   b5450:	2003e463 	.word	0x2003e463

000b5454 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5454:	b530      	push	{r4, r5, lr}
   b5456:	b085      	sub	sp, #20
   b5458:	4604      	mov	r4, r0
   b545a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b545c:	b160      	cbz	r0, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b545e:	6840      	ldr	r0, [r0, #4]
   b5460:	b150      	cbz	r0, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5462:	6885      	ldr	r5, [r0, #8]
   b5464:	b145      	cbz	r5, b5478 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b5466:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b546a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b546e:	68c4      	ldr	r4, [r0, #12]
   b5470:	ab01      	add	r3, sp, #4
   b5472:	466a      	mov	r2, sp
   b5474:	a902      	add	r1, sp, #8
   b5476:	47a0      	blx	r4
    }
   b5478:	b005      	add	sp, #20
   b547a:	bd30      	pop	{r4, r5, pc}

000b547c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b547c:	b530      	push	{r4, r5, lr}
   b547e:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5480:	6800      	ldr	r0, [r0, #0]
   b5482:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5484:	9301      	str	r3, [sp, #4]
   b5486:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b548a:	6883      	ldr	r3, [r0, #8]
   b548c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5490:	b90b      	cbnz	r3, b5496 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5492:	f00b f935 	bl	c0700 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5496:	68c3      	ldr	r3, [r0, #12]
   b5498:	aa01      	add	r2, sp, #4
   b549a:	a902      	add	r1, sp, #8
   b549c:	4798      	blx	r3
      }
   b549e:	b005      	add	sp, #20
   b54a0:	bd30      	pop	{r4, r5, pc}

000b54a2 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b54a2:	2a01      	cmp	r2, #1
   b54a4:	d102      	bne.n	b54ac <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54a6:	6001      	str	r1, [r0, #0]
      }
   b54a8:	2000      	movs	r0, #0
   b54aa:	4770      	bx	lr
	  switch (__op)
   b54ac:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b54ae:	bf04      	itt	eq
   b54b0:	680b      	ldreq	r3, [r1, #0]
   b54b2:	6003      	streq	r3, [r0, #0]
	      break;
   b54b4:	e7f8      	b.n	b54a8 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b54b6 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b54b6:	6803      	ldr	r3, [r0, #0]
   b54b8:	6812      	ldr	r2, [r2, #0]
   b54ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   b54be:	4718      	bx	r3

000b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b54c0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54c2:	2000      	movs	r0, #0
   b54c4:	f007 fe66 	bl	bd194 <spark_sync_time_pending>
   b54c8:	b128      	cbz	r0, b54d6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b54ca:	f007 fe43 	bl	bd154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54ce:	f080 0001 	eor.w	r0, r0, #1
   b54d2:	b2c0      	uxtb	r0, r0
    }
   b54d4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b54d6:	2001      	movs	r0, #1
   b54d8:	e7fc      	b.n	b54d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b54da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b54da:	b510      	push	{r4, lr}
      if (_M_manager)
   b54dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b54de:	4604      	mov	r4, r0
      if (_M_manager)
   b54e0:	b113      	cbz	r3, b54e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54e2:	2203      	movs	r2, #3
   b54e4:	4601      	mov	r1, r0
   b54e6:	4798      	blx	r3
    }
   b54e8:	4620      	mov	r0, r4
   b54ea:	bd10      	pop	{r4, pc}

000b54ec <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b54ec:	b510      	push	{r4, lr}
            delete callableWrapper;
   b54ee:	4604      	mov	r4, r0
   b54f0:	b138      	cbz	r0, b5502 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b54f2:	f7ff fff2 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b54f6:	4620      	mov	r0, r4
   b54f8:	2110      	movs	r1, #16
        };
   b54fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b54fe:	f7fe bdce 	b.w	b409e <_ZdlPvj>
        };
   b5502:	bd10      	pop	{r4, pc}

000b5504 <_Z22publishStateTransitionv>:
{
   b5504:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5506:	4c14      	ldr	r4, [pc, #80]	; (b5558 <_Z22publishStateTransitionv+0x54>)
   b5508:	4d14      	ldr	r5, [pc, #80]	; (b555c <_Z22publishStateTransitionv+0x58>)
   b550a:	7823      	ldrb	r3, [r4, #0]
   b550c:	4e14      	ldr	r6, [pc, #80]	; (b5560 <_Z22publishStateTransitionv+0x5c>)
   b550e:	2b02      	cmp	r3, #2
{
   b5510:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5512:	d117      	bne.n	b5544 <_Z22publishStateTransitionv+0x40>
   b5514:	f00a fdbc 	bl	c0090 <_ZN9TimeClass7isValidEv>
   b5518:	b9a0      	cbnz	r0, b5544 <_Z22publishStateTransitionv+0x40>
   b551a:	7822      	ldrb	r2, [r4, #0]
   b551c:	7833      	ldrb	r3, [r6, #0]
   b551e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b5522:	9200      	str	r2, [sp, #0]
   b5524:	4a0f      	ldr	r2, [pc, #60]	; (b5564 <_Z22publishStateTransitionv+0x60>)
   b5526:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b552a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b552e:	a802      	add	r0, sp, #8
   b5530:	f007 fed8 	bl	bd2e4 <snprintf>
	oldState = state;
   b5534:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b5536:	480c      	ldr	r0, [pc, #48]	; (b5568 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b5538:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b553a:	a902      	add	r1, sp, #8
   b553c:	f7fe fdff 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b5540:	b042      	add	sp, #264	; 0x108
   b5542:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b5544:	7822      	ldrb	r2, [r4, #0]
   b5546:	7833      	ldrb	r3, [r6, #0]
   b5548:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b554c:	9200      	str	r2, [sp, #0]
   b554e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b5552:	4a06      	ldr	r2, [pc, #24]	; (b556c <_Z22publishStateTransitionv+0x68>)
   b5554:	e7e9      	b.n	b552a <_Z22publishStateTransitionv+0x26>
   b5556:	bf00      	nop
   b5558:	2003e462 	.word	0x2003e462
   b555c:	2003d5f8 	.word	0x2003d5f8
   b5560:	2003e461 	.word	0x2003e461
   b5564:	000c3d24 	.word	0x000c3d24
   b5568:	2003e650 	.word	0x2003e650
   b556c:	000c3d44 	.word	0x000c3d44

000b5570 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b5570:	b510      	push	{r4, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5572:	f000 ff17 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5576:	f001 f9bc 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b557a:	4604      	mov	r4, r0
   	if (Time.isValid()) {
   b557c:	f00a fd88 	bl	c0090 <_ZN9TimeClass7isValidEv>
   b5580:	b908      	cbnz	r0, b5586 <_Z21secondsUntilNextEventv+0x16>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b5582:	200a      	movs	r0, #10
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
        // Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
    }
	return secondsToReturn;
}
   b5584:	bd10      	pop	{r4, pc}
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b5586:	203c      	movs	r0, #60	; 0x3c
   b5588:	4344      	muls	r4, r0
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b558a:	f00a fd9e 	bl	c00ca <_ZN9TimeClass3nowEv>
   b558e:	fbb0 f3f4 	udiv	r3, r0, r4
   b5592:	fb03 0014 	mls	r0, r3, r4, r0
   b5596:	1a20      	subs	r0, r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5598:	2809      	cmp	r0, #9
   b559a:	d9f2      	bls.n	b5582 <_Z21secondsUntilNextEventv+0x12>
   b559c:	42a0      	cmp	r0, r4
   b559e:	bf28      	it	cs
   b55a0:	4620      	movcs	r0, r4
   b55a2:	e7ef      	b.n	b5584 <_Z21secondsUntilNextEventv+0x14>

000b55a4 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b55a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55a8:	ed2d 8b02 	vpush	{d8}
   b55ac:	b0e7      	sub	sp, #412	; 0x19c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b55ae:	ad1e      	add	r5, sp, #120	; 0x78
   b55b0:	2300      	movs	r3, #0
   b55b2:	61eb      	str	r3, [r5, #28]
   b55b4:	4b86      	ldr	r3, [pc, #536]	; (b57d0 <_Z14publishWebhookh+0x22c>)
   b55b6:	602b      	str	r3, [r5, #0]
   b55b8:	4b86      	ldr	r3, [pc, #536]	; (b57d4 <_Z14publishWebhookh+0x230>)
   b55ba:	606b      	str	r3, [r5, #4]
   b55bc:	4b86      	ldr	r3, [pc, #536]	; (b57d8 <_Z14publishWebhookh+0x234>)
   b55be:	60ab      	str	r3, [r5, #8]
   b55c0:	4b86      	ldr	r3, [pc, #536]	; (b57dc <_Z14publishWebhookh+0x238>)
   b55c2:	60eb      	str	r3, [r5, #12]
   b55c4:	4b86      	ldr	r3, [pc, #536]	; (b57e0 <_Z14publishWebhookh+0x23c>)
   b55c6:	612b      	str	r3, [r5, #16]
   b55c8:	4b86      	ldr	r3, [pc, #536]	; (b57e4 <_Z14publishWebhookh+0x240>)
   b55ca:	616b      	str	r3, [r5, #20]
   b55cc:	4b86      	ldr	r3, [pc, #536]	; (b57e8 <_Z14publishWebhookh+0x244>)
   b55ce:	61ab      	str	r3, [r5, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b55d0:	4604      	mov	r4, r0
   b55d2:	2800      	cmp	r0, #0
   b55d4:	f000 80aa 	beq.w	b572c <_Z14publishWebhookh+0x188>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b55d8:	f7fe fdca 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b55dc:	9013      	str	r0, [sp, #76]	; 0x4c
   b55de:	f000 ff45 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b55e2:	f001 f9f0 	bl	b69c6 <_ZNK17currentStatusData10get_nodeIDEv>
   b55e6:	4622      	mov	r2, r4
   b55e8:	4603      	mov	r3, r0
   b55ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b55ec:	a81a      	add	r0, sp, #104	; 0x68
   b55ee:	f7fe feeb 	bl	b43c8 <_ZN14LoRA_Functions12findDeviceIDEii>
   b55f2:	497e      	ldr	r1, [pc, #504]	; (b57ec <_Z14publishWebhookh+0x248>)
   b55f4:	a81a      	add	r0, sp, #104	; 0x68
   b55f6:	f00a fab8 	bl	bfb6a <_ZNK6String6equalsEPKc>
		if (deviceID == "null") return;
   b55fa:	4604      	mov	r4, r0
   b55fc:	b138      	cbz	r0, b560e <_Z14publishWebhookh+0x6a>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b55fe:	a81a      	add	r0, sp, #104	; 0x68
   b5600:	f00a f9a2 	bl	bf948 <_ZN6StringD1Ev>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}
	return;
}
   b5604:	b067      	add	sp, #412	; 0x19c
   b5606:	ecbd 8b02 	vpop	{d8}
   b560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b560e:	f000 ff2d 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5612:	f001 f8ca 	bl	b67aa <_ZNK17currentStatusData16get_successCountEv>
   b5616:	4680      	mov	r8, r0
   b5618:	f000 ff28 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b561c:	f001 f8c0 	bl	b67a0 <_ZNK17currentStatusData16get_messageCountEv>
	const char * c_str() const { return buffer; }
   b5620:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   b5624:	4682      	mov	sl, r0
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5626:	f000 ff21 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b562a:	f001 f9d6 	bl	b69da <_ZNK17currentStatusData15get_hourlyCountEv>
   b562e:	9014      	str	r0, [sp, #80]	; 0x50
   b5630:	f000 ff1c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5634:	f001 fa0e 	bl	b6a54 <_ZNK17currentStatusData14get_dailyCountEv>
   b5638:	9015      	str	r0, [sp, #84]	; 0x54
   b563a:	f000 ff17 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b563e:	f001 f8be 	bl	b67be <_ZNK17currentStatusData14get_sensorTypeEv>
   b5642:	9016      	str	r0, [sp, #88]	; 0x58
   b5644:	f000 ff12 	bl	b646c <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b5648:	f000 ff56 	bl	b64f8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b564c:	eeb0 8a40 	vmov.f32	s16, s0
   b5650:	eef0 8a60 	vmov.f32	s17, s1
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5654:	f000 ff0a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5658:	f001 f898 	bl	b678c <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b565c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   b5660:	9313      	str	r3, [sp, #76]	; 0x4c
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_messageCount(), percentSuccess, Time.now());
   b5662:	f000 ff03 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5666:	f001 f88c 	bl	b6782 <_ZNK17currentStatusData17get_internalTempCEv>
   b566a:	9017      	str	r0, [sp, #92]	; 0x5c
   b566c:	f000 fefe 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5670:	f001 f891 	bl	b6796 <_ZNK17currentStatusData14get_resetCountEv>
   b5674:	9018      	str	r0, [sp, #96]	; 0x60
   b5676:	f000 fef9 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b567a:	f001 f89b 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b567e:	4605      	mov	r5, r0
   b5680:	f000 fef4 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5684:	f001 f873 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
   b5688:	4606      	mov	r6, r0
   b568a:	f000 feef 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b568e:	f001 f99f 	bl	b69d0 <_ZNK17currentStatusData8get_RSSIEv>
   b5692:	4607      	mov	r7, r0
   b5694:	f000 feea 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5698:	f001 f882 	bl	b67a0 <_ZNK17currentStatusData16get_messageCountEv>
   b569c:	9019      	str	r0, [sp, #100]	; 0x64
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b569e:	f00a fd14 	bl	c00ca <_ZN9TimeClass3nowEv>
   b56a2:	9010      	str	r0, [sp, #64]	; 0x40
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b56a4:	4640      	mov	r0, r8
   b56a6:	f00b f989 	bl	c09bc <__aeabi_i2d>
   b56aa:	4680      	mov	r8, r0
   b56ac:	4650      	mov	r0, sl
   b56ae:	4689      	mov	r9, r1
   b56b0:	f00b f984 	bl	c09bc <__aeabi_i2d>
   b56b4:	4602      	mov	r2, r0
   b56b6:	460b      	mov	r3, r1
   b56b8:	4640      	mov	r0, r8
   b56ba:	4649      	mov	r1, r9
   b56bc:	f00b fb12 	bl	c0ce4 <__aeabi_ddiv>
   b56c0:	4b4b      	ldr	r3, [pc, #300]	; (b57f0 <_Z14publishWebhookh+0x24c>)
   b56c2:	2200      	movs	r2, #0
   b56c4:	f00b f9e4 	bl	c0a90 <__aeabi_dmul>
   b56c8:	f00b fcda 	bl	c1080 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56cc:	f00b f988 	bl	c09e0 <__aeabi_f2d>
   b56d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b56d2:	4a48      	ldr	r2, [pc, #288]	; (b57f4 <_Z14publishWebhookh+0x250>)
   b56d4:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
   b56d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b56da:	9308      	str	r3, [sp, #32]
   b56dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b56de:	9307      	str	r3, [sp, #28]
   b56e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b56e2:	9306      	str	r3, [sp, #24]
   b56e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b56e6:	9302      	str	r3, [sp, #8]
   b56e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b56ea:	9301      	str	r3, [sp, #4]
   b56ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b56ee:	9300      	str	r3, [sp, #0]
   b56f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   b56f4:	465b      	mov	r3, fp
   b56f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b56fa:	ed8d 8b04 	vstr	d8, [sp, #16]
   b56fe:	a826      	add	r0, sp, #152	; 0x98
   b5700:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
   b5704:	f007 fdee 	bl	bd2e4 <snprintf>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b5708:	f004 fde8 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b570c:	4b3a      	ldr	r3, [pc, #232]	; (b57f8 <_Z14publishWebhookh+0x254>)
   b570e:	4a3b      	ldr	r2, [pc, #236]	; (b57fc <_Z14publishWebhookh+0x258>)
   b5710:	781b      	ldrb	r3, [r3, #0]
   b5712:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5714:	493a      	ldr	r1, [pc, #232]	; (b5800 <_Z14publishWebhookh+0x25c>)
   b5716:	4313      	orrs	r3, r2
   b5718:	6802      	ldr	r2, [r0, #0]
   b571a:	f88d 3000 	strb.w	r3, [sp]
   b571e:	f88d 4004 	strb.w	r4, [sp, #4]
   b5722:	6814      	ldr	r4, [r2, #0]
   b5724:	233c      	movs	r3, #60	; 0x3c
   b5726:	aa26      	add	r2, sp, #152	; 0x98
   b5728:	47a0      	blx	r4
   b572a:	e768      	b.n	b55fe <_Z14publishWebhookh+0x5a>
		takeMeasurements();												// Loads the current values for the Gateway
   b572c:	f002 f8e8 	bl	b7900 <_Z16takeMeasurementsv>
        return spark_deviceID();
   b5730:	a81a      	add	r0, sp, #104	; 0x68
   b5732:	f007 fd17 	bl	bd164 <spark_deviceID>
   b5736:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5738:	9313      	str	r3, [sp, #76]	; 0x4c
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b573a:	f000 fe33 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b573e:	f001 f811 	bl	b6764 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5742:	4606      	mov	r6, r0
   b5744:	f000 fe92 	bl	b646c <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b5748:	f000 fed6 	bl	b64f8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b574c:	eeb0 8a40 	vmov.f32	s16, s0
   b5750:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5754:	f000 fe8a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5758:	f001 f818 	bl	b678c <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b575c:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
   b5760:	f000 fe84 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5764:	f001 f80d 	bl	b6782 <_ZNK17currentStatusData17get_internalTempCEv>
   b5768:	4605      	mov	r5, r0
   b576a:	f000 fe1b 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b576e:	f000 ffe5 	bl	b673c <_ZNK13sysStatusData14get_resetCountEv>
   b5772:	4607      	mov	r7, r0
   b5774:	f000 fe16 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5778:	f000 ffe5 	bl	b6746 <_ZNK13sysStatusData16get_messageCountEv>
   b577c:	4680      	mov	r8, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b577e:	f00a fca4 	bl	c00ca <_ZN9TimeClass3nowEv>
   b5782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5784:	4a1f      	ldr	r2, [pc, #124]	; (b5804 <_Z14publishWebhookh+0x260>)
   b5786:	9400      	str	r4, [sp, #0]
   b5788:	f44f 7180 	mov.w	r1, #256	; 0x100
   b578c:	e9cd 8009 	strd	r8, r0, [sp, #36]	; 0x24
   b5790:	e9cd 4601 	strd	r4, r6, [sp, #4]
   b5794:	e9cd 5707 	strd	r5, r7, [sp, #28]
   b5798:	ed8d 8b04 	vstr	d8, [sp, #16]
   b579c:	f8cd 9018 	str.w	r9, [sp, #24]
   b57a0:	a826      	add	r0, sp, #152	; 0x98
   b57a2:	f007 fd9f 	bl	bd2e4 <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57a6:	a81a      	add	r0, sp, #104	; 0x68
   b57a8:	f00a f8ce 	bl	bf948 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b57ac:	f004 fd96 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
   b57b0:	4b11      	ldr	r3, [pc, #68]	; (b57f8 <_Z14publishWebhookh+0x254>)
   b57b2:	4a12      	ldr	r2, [pc, #72]	; (b57fc <_Z14publishWebhookh+0x258>)
   b57b4:	781b      	ldrb	r3, [r3, #0]
   b57b6:	7812      	ldrb	r2, [r2, #0]
   b57b8:	4913      	ldr	r1, [pc, #76]	; (b5808 <_Z14publishWebhookh+0x264>)
   b57ba:	4313      	orrs	r3, r2
   b57bc:	6802      	ldr	r2, [r0, #0]
   b57be:	f88d 3000 	strb.w	r3, [sp]
   b57c2:	f88d 4004 	strb.w	r4, [sp, #4]
   b57c6:	6814      	ldr	r4, [r2, #0]
   b57c8:	233c      	movs	r3, #60	; 0x3c
   b57ca:	aa26      	add	r2, sp, #152	; 0x98
   b57cc:	47a0      	blx	r4
   b57ce:	e719      	b.n	b5604 <_Z14publishWebhookh+0x60>
   b57d0:	000c3d52 	.word	0x000c3d52
   b57d4:	000c3d5a 	.word	0x000c3d5a
   b57d8:	000c3d5e 	.word	0x000c3d5e
   b57dc:	000c3d67 	.word	0x000c3d67
   b57e0:	000c3d6f 	.word	0x000c3d6f
   b57e4:	000c3d7b 	.word	0x000c3d7b
   b57e8:	000c3d81 	.word	0x000c3d81
   b57ec:	000c373f 	.word	0x000c373f
   b57f0:	40590000 	.word	0x40590000
   b57f4:	000c3d8d 	.word	0x000c3d8d
   b57f8:	2003e325 	.word	0x2003e325
   b57fc:	2003e324 	.word	0x2003e324
   b5800:	000c3e50 	.word	0x000c3e50
   b5804:	000c3e65 	.word	0x000c3e65
   b5808:	000c3ef3 	.word	0x000c3ef3

000b580c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b580c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b580e:	2300      	movs	r3, #0
   b5810:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5812:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5814:	4604      	mov	r4, r0
   b5816:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5818:	b12b      	cbz	r3, b5826 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b581a:	2202      	movs	r2, #2
   b581c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b581e:	68eb      	ldr	r3, [r5, #12]
   b5820:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5822:	68ab      	ldr	r3, [r5, #8]
   b5824:	60a3      	str	r3, [r4, #8]
    }
   b5826:	4620      	mov	r0, r4
   b5828:	bd38      	pop	{r3, r4, r5, pc}
	...

000b582c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5830:	b095      	sub	sp, #84	; 0x54
   b5832:	4605      	mov	r5, r0
        };
   b5834:	991c      	ldr	r1, [sp, #112]	; 0x70
   b5836:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b5838:	4690      	mov	r8, r2
   b583a:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b583c:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b583e:	f7ff ffe5 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5842:	a904      	add	r1, sp, #16
   b5844:	a808      	add	r0, sp, #32
   b5846:	f7ff ffe1 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b584a:	a908      	add	r1, sp, #32
   b584c:	4630      	mov	r0, r6
   b584e:	f7ff ffdd 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b5852:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5856:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b5858:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b585c:	f7fe fc1b 	bl	b4096 <_Znwj>
   b5860:	4604      	mov	r4, r0
   b5862:	b1a0      	cbz	r0, b588e <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5864:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5868:	ab01      	add	r3, sp, #4
   b586a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b586e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5872:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5876:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b587a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b587c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b587e:	60a3      	str	r3, [r4, #8]
   b5880:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b5886:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b588a:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b588c:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b588e:	4b24      	ldr	r3, [pc, #144]	; (b5920 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5890:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b5892:	4b24      	ldr	r3, [pc, #144]	; (b5924 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5894:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b5896:	2200      	movs	r2, #0
   b5898:	2300      	movs	r3, #0
   b589a:	f04f 0900 	mov.w	r9, #0
   b589e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b58a2:	4b21      	ldr	r3, [pc, #132]	; (b5928 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b58a4:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b58a8:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58aa:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b58ac:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b58b0:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b58b4:	f7fe fbef 	bl	b4096 <_Znwj>
   b58b8:	4604      	mov	r4, r0
   b58ba:	b1d8      	cbz	r0, b58f4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b58bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b58be:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b58c2:	b133      	cbz	r3, b58d2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58c4:	2202      	movs	r2, #2
   b58c6:	a910      	add	r1, sp, #64	; 0x40
   b58c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b58cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b58d0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b58d2:	4b16      	ldr	r3, [pc, #88]	; (b592c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b58d4:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b58d6:	4a16      	ldr	r2, [pc, #88]	; (b5930 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b58d8:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b58da:	ab01      	add	r3, sp, #4
   b58dc:	4640      	mov	r0, r8
   b58de:	4639      	mov	r1, r7
   b58e0:	f007 fbbe 	bl	bd060 <system_subscribe_event>
        if (r) {
   b58e4:	b1b0      	cbz	r0, b5914 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b58e6:	4620      	mov	r0, r4
   b58e8:	f7ff fdf7 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b58ec:	2110      	movs	r1, #16
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7fe fbd5 	bl	b409e <_ZdlPvj>
   b58f4:	a810      	add	r0, sp, #64	; 0x40
   b58f6:	f7ff fdf0 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b58fa:	4630      	mov	r0, r6
   b58fc:	f7ff fded 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b5900:	a808      	add	r0, sp, #32
   b5902:	f7ff fdea 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   b5906:	a804      	add	r0, sp, #16
   b5908:	f7ff fde7 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    }
   b590c:	4628      	mov	r0, r5
   b590e:	b015      	add	sp, #84	; 0x54
   b5910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5914:	9b02      	ldr	r3, [sp, #8]
   b5916:	60ab      	str	r3, [r5, #8]
   b5918:	e9c5 8700 	strd	r8, r7, [r5]
   b591c:	e7ea      	b.n	b58f4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b591e:	bf00      	nop
   b5920:	000b547d 	.word	0x000b547d
   b5924:	000b5935 	.word	0x000b5935
   b5928:	000c0002 	.word	0x000c0002
   b592c:	000b54ed 	.word	0x000b54ed
   b5930:	000b5455 	.word	0x000b5455

000b5934 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b5934:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5936:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5938:	4604      	mov	r4, r0
	switch (__op)
   b593a:	d104      	bne.n	b5946 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b593c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b593e:	6003      	str	r3, [r0, #0]
      }
   b5940:	2000      	movs	r0, #0
   b5942:	b003      	add	sp, #12
   b5944:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b5946:	2a02      	cmp	r2, #2
   b5948:	d00c      	beq.n	b5964 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b594a:	2a03      	cmp	r2, #3
   b594c:	d1f8      	bne.n	b5940 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b594e:	6804      	ldr	r4, [r0, #0]
   b5950:	2c00      	cmp	r4, #0
   b5952:	d0f5      	beq.n	b5940 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5954:	4620      	mov	r0, r4
   b5956:	f7ff fdc0 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b595a:	2110      	movs	r1, #16
   b595c:	4620      	mov	r0, r4
   b595e:	f7fe fb9e 	bl	b409e <_ZdlPvj>
   b5962:	e7ed      	b.n	b5940 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b5964:	6809      	ldr	r1, [r1, #0]
   b5966:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5968:	2010      	movs	r0, #16
   b596a:	f7fe fb94 	bl	b4096 <_Znwj>
   b596e:	4605      	mov	r5, r0
   b5970:	b110      	cbz	r0, b5978 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b5972:	9901      	ldr	r1, [sp, #4]
   b5974:	f7ff ff4a 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b5978:	6025      	str	r5, [r4, #0]
	}
   b597a:	e7e1      	b.n	b5940 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b597c <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b597c:	4b16      	ldr	r3, [pc, #88]	; (b59d8 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b597e:	b510      	push	{r4, lr}
   b5980:	2401      	movs	r4, #1
   b5982:	701c      	strb	r4, [r3, #0]
   b5984:	4b15      	ldr	r3, [pc, #84]	; (b59dc <_GLOBAL__sub_I___appProductVersion+0x60>)
   b5986:	2208      	movs	r2, #8
   b5988:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b598a:	f00a fd47 	bl	c041c <spark_protocol_instance>
   b598e:	2300      	movs	r3, #0
   b5990:	461a      	mov	r2, r3
   b5992:	4619      	mov	r1, r3
   b5994:	f00a fd52 	bl	c043c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5998:	f00a fd40 	bl	c041c <spark_protocol_instance>
   b599c:	2300      	movs	r3, #0
   b599e:	461a      	mov	r2, r3
   b59a0:	210d      	movs	r1, #13
   b59a2:	f00a fd43 	bl	c042c <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b59a6:	4b0e      	ldr	r3, [pc, #56]	; (b59e0 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b59a8:	1d1a      	adds	r2, r3, #4
   b59aa:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b59ac:	4a0d      	ldr	r2, [pc, #52]	; (b59e4 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b59ae:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b59b0:	2200      	movs	r2, #0
   b59b2:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b59b6:	611a      	str	r2, [r3, #16]
   b59b8:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b59ba:	f00a fe0f 	bl	c05dc <_Z19__fetch_global_Wirev>
   b59be:	2269      	movs	r2, #105	; 0x69
   b59c0:	4601      	mov	r1, r0
   b59c2:	4809      	ldr	r0, [pc, #36]	; (b59e8 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b59c4:	f001 fffc 	bl	b79c0 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b59c8:	4808      	ldr	r0, [pc, #32]	; (b59ec <_GLOBAL__sub_I___appProductVersion+0x70>)
   b59ca:	2306      	movs	r3, #6
   b59cc:	f840 3b04 	str.w	r3, [r0], #4
}
   b59d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b59d4:	f003 bf3a 	b.w	b984c <_ZN22LocalTimePosixTimezoneC1Ev>
   b59d8:	2003e324 	.word	0x2003e324
   b59dc:	2003e325 	.word	0x2003e325
   b59e0:	2003e358 	.word	0x2003e358
   b59e4:	00030010 	.word	0x00030010
   b59e8:	2003e338 	.word	0x2003e338
   b59ec:	2003e370 	.word	0x2003e370

000b59f0 <setup>:
{
   b59f0:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b59f2:	2000      	movs	r0, #0
   b59f4:	b09d      	sub	sp, #116	; 0x74
   b59f6:	f007 f8c1 	bl	bcb7c <hal_timer_millis>
        while (_while() && !_condition()) {
   b59fa:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b59fe:	4604      	mov	r4, r0
   b5a00:	2000      	movs	r0, #0
   b5a02:	f007 f8bb 	bl	bcb7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5a06:	1b00      	subs	r0, r0, r4
   b5a08:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5a0c:	42a8      	cmp	r0, r5
   b5a0e:	f171 0300 	sbcs.w	r3, r1, #0
   b5a12:	d207      	bcs.n	b5a24 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5a14:	f00a fc40 	bl	c0298 <_Z16_fetch_usbserialv>
   b5a18:	f00a fc33 	bl	c0282 <_ZN9USBSerial11isConnectedEv>
   b5a1c:	b910      	cbnz	r0, b5a24 <setup+0x34>
            spark_process();
   b5a1e:	f007 fb89 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   b5a22:	e7ed      	b.n	b5a00 <setup+0x10>
   b5a24:	f00a fc38 	bl	c0298 <_Z16_fetch_usbserialv>
   b5a28:	f00a fc2b 	bl	c0282 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5a2c:	f001 fe18 	bl	b7660 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5a30:	f001 fe4a 	bl	b76c8 <_Z18initializePowerCfgv>
	sysStatus.setup();
   b5a34:	f000 fcb6 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5a38:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5a3a:	4e5f      	ldr	r6, [pc, #380]	; (b5bb8 <setup+0x1c8>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5a3e:	4f5f      	ldr	r7, [pc, #380]	; (b5bbc <setup+0x1cc>)
   b5a40:	4798      	blx	r3
	current.setup();
   b5a42:	f000 fd13 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5a46:	6803      	ldr	r3, [r0, #0]
   b5a48:	681b      	ldr	r3, [r3, #0]
   b5a4a:	4798      	blx	r3
	nodeDatabase.setup();
   b5a4c:	f000 fdb2 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b5a50:	6803      	ldr	r3, [r0, #0]
   b5a52:	681b      	ldr	r3, [r3, #0]
   b5a54:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5a56:	f001 fa37 	bl	b6ec8 <_ZN18Particle_Functions8instanceEv>
   b5a5a:	f001 fa47 	bl	b6eec <_ZN18Particle_Functions5setupEv>
   b5a5e:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5a60:	2101      	movs	r1, #1
   b5a62:	4630      	mov	r0, r6
   b5a64:	8173      	strh	r3, [r6, #10]
   b5a66:	f002 fca7 	bl	b83b8 <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5a6a:	217c      	movs	r1, #124	; 0x7c
   b5a6c:	4630      	mov	r0, r6
   b5a6e:	f002 f8a5 	bl	b7bbc <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a72:	4b53      	ldr	r3, [pc, #332]	; (b5bc0 <setup+0x1d0>)
   b5a74:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5a76:	4b53      	ldr	r3, [pc, #332]	; (b5bc4 <setup+0x1d4>)
   b5a78:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5a7a:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5a7c:	4b52      	ldr	r3, [pc, #328]	; (b5bc8 <setup+0x1d8>)
   b5a7e:	9308      	str	r3, [sp, #32]
   b5a80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5a84:	2300      	movs	r3, #0
   b5a86:	a802      	add	r0, sp, #8
   b5a88:	9500      	str	r5, [sp, #0]
   b5a8a:	f7ff fecf 	bl	b582c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5a8e:	4628      	mov	r0, r5
   b5a90:	f7ff fd23 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5a94:	f004 fc22 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
   b5a98:	f004 fe26 	bl	ba6e8 <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5a9c:	f7fe fb68 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5aa0:	2101      	movs	r1, #1
   b5aa2:	f7fe fbc3 	bl	b422c <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5aa6:	f004 f8b1 	bl	b9c0c <_ZN9LocalTime8instanceEv>
   b5aaa:	4948      	ldr	r1, [pc, #288]	; (b5bcc <setup+0x1dc>)
   b5aac:	4604      	mov	r4, r0
   b5aae:	4628      	mov	r0, r5
   b5ab0:	f003 ff7e 	bl	b99b0 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5ab4:	a907      	add	r1, sp, #28
   b5ab6:	f104 0008 	add.w	r0, r4, #8
   b5aba:	f009 ffcc 	bl	bfa56 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5ac0:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5ac2:	a90d      	add	r1, sp, #52	; 0x34
   b5ac4:	f104 0020 	add.w	r0, r4, #32
   b5ac8:	f009 ffc5 	bl	bfa56 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5ace:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5ad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5ad2:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5ad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5ad6:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5ad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5ada:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5adc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5ade:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5ae0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5ae4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5ae8:	4628      	mov	r0, r5
   b5aea:	f003 fd1d 	bl	b9528 <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5aee:	f00a faec 	bl	c00ca <_ZN9TimeClass3nowEv>
   b5af2:	17c3      	asrs	r3, r0, #31
   b5af4:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5af8:	4638      	mov	r0, r7
   b5afa:	f004 f8ff 	bl	b9cfc <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5afe:	f00a fac7 	bl	c0090 <_ZN9TimeClass7isValidEv>
   b5b02:	4c33      	ldr	r4, [pc, #204]	; (b5bd0 <setup+0x1e0>)
   b5b04:	2800      	cmp	r0, #0
   b5b06:	d046      	beq.n	b5b96 <setup+0x1a6>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5b08:	4639      	mov	r1, r7
   b5b0a:	4a32      	ldr	r2, [pc, #200]	; (b5bd4 <setup+0x1e4>)
   b5b0c:	4628      	mov	r0, r5
   b5b0e:	f003 ffdf 	bl	b9ad0 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5b12:	2301      	movs	r3, #1
   b5b14:	461a      	mov	r2, r3
   b5b16:	2110      	movs	r1, #16
   b5b18:	4630      	mov	r0, r6
   b5b1a:	9f06      	ldr	r7, [sp, #24]
   b5b1c:	f002 f8cf 	bl	b7cbe <_ZN6AB180510isBitClearEhhb>
   b5b20:	492d      	ldr	r1, [pc, #180]	; (b5bd8 <setup+0x1e8>)
   b5b22:	4b2e      	ldr	r3, [pc, #184]	; (b5bdc <setup+0x1ec>)
   b5b24:	463a      	mov	r2, r7
   b5b26:	2800      	cmp	r0, #0
   b5b28:	bf18      	it	ne
   b5b2a:	460b      	movne	r3, r1
   b5b2c:	482c      	ldr	r0, [pc, #176]	; (b5be0 <setup+0x1f0>)
   b5b2e:	492d      	ldr	r1, [pc, #180]	; (b5be4 <setup+0x1f4>)
   b5b30:	f7fe fb05 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5b34:	4628      	mov	r0, r5
   b5b36:	f009 ff07 	bl	bf948 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5b3a:	4b2b      	ldr	r3, [pc, #172]	; (b5be8 <setup+0x1f8>)
   b5b3c:	881e      	ldrh	r6, [r3, #0]
   b5b3e:	4630      	mov	r0, r6
   b5b40:	f00a fcec 	bl	c051c <digitalRead>
   b5b44:	4605      	mov	r5, r0
   b5b46:	bb68      	cbnz	r0, b5ba4 <setup+0x1b4>
		Log.info("User button pressed, connected mode");
   b5b48:	4928      	ldr	r1, [pc, #160]	; (b5bec <setup+0x1fc>)
   b5b4a:	4825      	ldr	r0, [pc, #148]	; (b5be0 <setup+0x1f0>)
   b5b4c:	f7fe faf7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(1);
   b5b50:	f000 fc28 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5b54:	2101      	movs	r1, #1
   b5b56:	f000 fe5b 	bl	b6810 <_ZN13sysStatusData17set_stayConnectedEh>
		digitalWrite(BLUE_LED,HIGH);
   b5b5a:	4b25      	ldr	r3, [pc, #148]	; (b5bf0 <setup+0x200>)
   b5b5c:	881f      	ldrh	r7, [r3, #0]
   b5b5e:	2101      	movs	r1, #1
   b5b60:	4638      	mov	r0, r7
   b5b62:	f00a fcc2 	bl	c04ea <digitalWrite>
		delay(2000);
   b5b66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5b6a:	f007 fc13 	bl	bd394 <delay>
		digitalWrite(BLUE_LED,LOW);
   b5b6e:	4629      	mov	r1, r5
   b5b70:	4638      	mov	r0, r7
   b5b72:	f00a fcba 	bl	c04ea <digitalWrite>
		state = CONNECTING_STATE;
   b5b76:	2305      	movs	r3, #5
   b5b78:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5b7a:	2200      	movs	r2, #0
   b5b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b80:	491c      	ldr	r1, [pc, #112]	; (b5bf4 <setup+0x204>)
   b5b82:	9200      	str	r2, [sp, #0]
   b5b84:	4630      	mov	r0, r6
   b5b86:	f008 f985 	bl	bde94 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5b8a:	7823      	ldrb	r3, [r4, #0]
   b5b8c:	b90b      	cbnz	r3, b5b92 <setup+0x1a2>
   b5b8e:	2302      	movs	r3, #2
   b5b90:	7023      	strb	r3, [r4, #0]
}
   b5b92:	b01d      	add	sp, #116	; 0x74
   b5b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5b96:	4918      	ldr	r1, [pc, #96]	; (b5bf8 <setup+0x208>)
   b5b98:	4811      	ldr	r0, [pc, #68]	; (b5be0 <setup+0x1f0>)
   b5b9a:	f7fe fad0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5b9e:	2305      	movs	r3, #5
   b5ba0:	7023      	strb	r3, [r4, #0]
   b5ba2:	e7ca      	b.n	b5b3a <setup+0x14a>
		Log.info("No user button push detechted");
   b5ba4:	4915      	ldr	r1, [pc, #84]	; (b5bfc <setup+0x20c>)
   b5ba6:	480e      	ldr	r0, [pc, #56]	; (b5be0 <setup+0x1f0>)
   b5ba8:	f7fe fac9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_stayConnected(0);
   b5bac:	f000 fbfa 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5bb0:	2100      	movs	r1, #0
   b5bb2:	f000 fe2d 	bl	b6810 <_ZN13sysStatusData17set_stayConnectedEh>
   b5bb6:	e7e0      	b.n	b5b7a <setup+0x18a>
   b5bb8:	2003e338 	.word	0x2003e338
   b5bbc:	2003e370 	.word	0x2003e370
   b5bc0:	000b543d 	.word	0x000b543d
   b5bc4:	000b54b7 	.word	0x000b54b7
   b5bc8:	000b54a3 	.word	0x000b54a3
   b5bcc:	000c3f15 	.word	0x000c3f15
   b5bd0:	2003e462 	.word	0x2003e462
   b5bd4:	000c3f3c 	.word	0x000c3f3c
   b5bd8:	000c3f0b 	.word	0x000c3f0b
   b5bdc:	000c3f0e 	.word	0x000c3f0e
   b5be0:	2003e650 	.word	0x2003e650
   b5be4:	000c3f47 	.word	0x000c3f47
   b5be8:	000c489e 	.word	0x000c489e
   b5bec:	000c3fb6 	.word	0x000c3fb6
   b5bf0:	000c489c 	.word	0x000c489c
   b5bf4:	000b5449 	.word	0x000b5449
   b5bf8:	000c3f78 	.word	0x000c3f78
   b5bfc:	000c3fda 	.word	0x000c3fda

000b5c00 <loop>:
void loop() {
   b5c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5c04:	4d87      	ldr	r5, [pc, #540]	; (b5e24 <loop+0x224>)
   b5c06:	782b      	ldrb	r3, [r5, #0]
   b5c08:	3b01      	subs	r3, #1
void loop() {
   b5c0a:	b091      	sub	sp, #68	; 0x44
   b5c0c:	2b06      	cmp	r3, #6
   b5c0e:	d81d      	bhi.n	b5c4c <loop+0x4c>
   b5c10:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5c14:	000702b6 	.word	0x000702b6
   b5c18:	01260045 	.word	0x01260045
   b5c1c:	02710202 	.word	0x02710202
   b5c20:	01e4      	.short	0x01e4
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c22:	4b81      	ldr	r3, [pc, #516]	; (b5e28 <loop+0x228>)
   b5c24:	781b      	ldrb	r3, [r3, #0]
   b5c26:	2b02      	cmp	r3, #2
   b5c28:	d001      	beq.n	b5c2e <loop+0x2e>
   b5c2a:	f7ff fc6b 	bl	b5504 <_Z22publishStateTransitionv>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5c2e:	4c7f      	ldr	r4, [pc, #508]	; (b5e2c <loop+0x22c>)
   b5c30:	7823      	ldrb	r3, [r4, #0]
   b5c32:	b11b      	cbz	r3, b5c3c <loop+0x3c>
				nextEventTime = false;
   b5c34:	2300      	movs	r3, #0
   b5c36:	7023      	strb	r3, [r4, #0]
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b5c38:	2304      	movs	r3, #4
   b5c3a:	e006      	b.n	b5c4a <loop+0x4a>
			if (nextEventTime || sysStatus.get_stayConnected() == 1) {
   b5c3c:	f000 fbb2 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5c40:	f000 fd77 	bl	b6732 <_ZNK13sysStatusData17get_stayConnectedEv>
   b5c44:	2801      	cmp	r0, #1
   b5c46:	d0f5      	beq.n	b5c34 <loop+0x34>
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5c48:	2303      	movs	r3, #3
   b5c4a:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5c4c:	4878      	ldr	r0, [pc, #480]	; (b5e30 <loop+0x230>)
   b5c4e:	f002 fb61 	bl	b8314 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b5c52:	f004 fb43 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
   b5c56:	f004 fa33 	bl	ba0c0 <_ZN17PublishQueuePosix4loopEv>
	sysStatus.loop();
   b5c5a:	f000 fba3 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5c5e:	f000 fbdb 	bl	b6418 <_ZN13sysStatusData4loopEv>
	current.loop();
   b5c62:	f000 fc03 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5c66:	f000 fc3b 	bl	b64e0 <_ZN17currentStatusData4loopEv>
	nodeDatabase.loop();
   b5c6a:	f000 fca3 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b5c6e:	f000 fcb3 	bl	b65d8 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5c72:	f7fe fa7d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5c76:	f7fe fa8d 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5c7a:	4b6e      	ldr	r3, [pc, #440]	; (b5e34 <loop+0x234>)
   b5c7c:	681b      	ldr	r3, [r3, #0]
   b5c7e:	2b00      	cmp	r3, #0
   b5c80:	f2c0 82b2 	blt.w	b61e8 <loop+0x5e8>
		Log.info("Resetting due to low memory");
   b5c84:	496c      	ldr	r1, [pc, #432]	; (b5e38 <loop+0x238>)
   b5c86:	486d      	ldr	r0, [pc, #436]	; (b5e3c <loop+0x23c>)
   b5c88:	f7fe fa59 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b5c8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5c90:	f007 fb80 	bl	bd394 <delay>
}
   b5c94:	b011      	add	sp, #68	; 0x44
   b5c96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		System.reset();
   b5c9a:	f00a b822 	b.w	bfce2 <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c9e:	4b62      	ldr	r3, [pc, #392]	; (b5e28 <loop+0x228>)
   b5ca0:	781b      	ldrb	r3, [r3, #0]
   b5ca2:	2b03      	cmp	r3, #3
   b5ca4:	d001      	beq.n	b5caa <loop+0xaa>
   b5ca6:	f7ff fc2d 	bl	b5504 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5caa:	2100      	movs	r1, #0
   b5cac:	4860      	ldr	r0, [pc, #384]	; (b5e30 <loop+0x230>)
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5cae:	4f64      	ldr	r7, [pc, #400]	; (b5e40 <loop+0x240>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5cb0:	4c64      	ldr	r4, [pc, #400]	; (b5e44 <loop+0x244>)
   b5cb2:	f001 ff83 	bl	b7bbc <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b5cb6:	f7ff fc5b 	bl	b5570 <_Z21secondsUntilNextEventv>
   b5cba:	4680      	mov	r8, r0
			time_t time = Time.now() + wakeInSeconds;
   b5cbc:	f00a fa05 	bl	c00ca <_ZN9TimeClass3nowEv>
   b5cc0:	eb00 0208 	add.w	r2, r0, r8
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5cc4:	17d3      	asrs	r3, r2, #31
   b5cc6:	4960      	ldr	r1, [pc, #384]	; (b5e48 <loop+0x248>)
   b5cc8:	9700      	str	r7, [sp, #0]
   b5cca:	a808      	add	r0, sp, #32
   b5ccc:	f00a f99e 	bl	c000c <_ZN9TimeClass6formatExPKc>
   b5cd0:	9b08      	ldr	r3, [sp, #32]
   b5cd2:	9302      	str	r3, [sp, #8]
   b5cd4:	f00a f868 	bl	bfda8 <_ZN11SystemClass10freeMemoryEv>
   b5cd8:	9b02      	ldr	r3, [sp, #8]
   b5cda:	495c      	ldr	r1, [pc, #368]	; (b5e4c <loop+0x24c>)
   b5cdc:	9000      	str	r0, [sp, #0]
   b5cde:	4642      	mov	r2, r8
   b5ce0:	4856      	ldr	r0, [pc, #344]	; (b5e3c <loop+0x23c>)
   b5ce2:	f7fe fa2c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5ce6:	a808      	add	r0, sp, #32
   b5ce8:	f009 fe2e 	bl	bf948 <_ZN6StringD1Ev>
   b5cec:	7d23      	ldrb	r3, [r4, #20]
   b5cee:	2b00      	cmp	r3, #0
   b5cf0:	d050      	beq.n	b5d94 <loop+0x194>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5cf2:	2302      	movs	r3, #2
   b5cf4:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5cf6:	4b56      	ldr	r3, [pc, #344]	; (b5e50 <loop+0x250>)
   b5cf8:	f8b3 9000 	ldrh.w	r9, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5cfc:	6823      	ldr	r3, [r4, #0]
   b5cfe:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5d00:	b1f3      	cbz	r3, b5d40 <loop+0x140>
            if (start->type == type) {
   b5d02:	889a      	ldrh	r2, [r3, #4]
   b5d04:	2a01      	cmp	r2, #1
   b5d06:	d006      	beq.n	b5d16 <loop+0x116>
            start = start->next;
   b5d08:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d0a:	e7f9      	b.n	b5d00 <loop+0x100>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5d0c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5d0e:	b1bb      	cbz	r3, b5d40 <loop+0x140>
            if (start->type == type) {
   b5d10:	889a      	ldrh	r2, [r3, #4]
   b5d12:	2a01      	cmp	r2, #1
   b5d14:	d1fa      	bne.n	b5d0c <loop+0x10c>
                if (gpioWakeup->pin == pin) {
   b5d16:	899a      	ldrh	r2, [r3, #12]
   b5d18:	454a      	cmp	r2, r9
   b5d1a:	d1f7      	bne.n	b5d0c <loop+0x10c>
                    gpioWakeup->mode = mode;
   b5d1c:	2200      	movs	r2, #0
   b5d1e:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5d20:	7d23      	ldrb	r3, [r4, #20]
   b5d22:	2b00      	cmp	r3, #0
   b5d24:	d036      	beq.n	b5d94 <loop+0x194>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d26:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5d2c:	68db      	ldr	r3, [r3, #12]
   b5d2e:	fb00 f808 	mul.w	r8, r0, r8
        if (!start) {
   b5d32:	b1db      	cbz	r3, b5d6c <loop+0x16c>
            if (start->type == type) {
   b5d34:	889a      	ldrh	r2, [r3, #4]
   b5d36:	2a04      	cmp	r2, #4
   b5d38:	f000 8251 	beq.w	b61de <loop+0x5de>
            start = start->next;
   b5d3c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d3e:	e7f8      	b.n	b5d32 <loop+0x132>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5d40:	4944      	ldr	r1, [pc, #272]	; (b5e54 <loop+0x254>)
   b5d42:	2010      	movs	r0, #16
   b5d44:	f00a fcd2 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   b5d48:	4606      	mov	r6, r0
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	f000 824a 	beq.w	b61e4 <loop+0x5e4>
   b5d50:	2210      	movs	r2, #16
   b5d52:	2100      	movs	r1, #0
   b5d54:	f00b fa7c 	bl	c1250 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5d58:	4b3f      	ldr	r3, [pc, #252]	; (b5e58 <loop+0x258>)
   b5d5a:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5d5c:	2301      	movs	r3, #1
   b5d5e:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d60:	6923      	ldr	r3, [r4, #16]
   b5d62:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5d64:	f8a6 900c 	strh.w	r9, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d68:	6126      	str	r6, [r4, #16]
   b5d6a:	e7d9      	b.n	b5d20 <loop+0x120>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5d6c:	4939      	ldr	r1, [pc, #228]	; (b5e54 <loop+0x254>)
   b5d6e:	2010      	movs	r0, #16
   b5d70:	f00a fcbc 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   b5d74:	4606      	mov	r6, r0
   b5d76:	2800      	cmp	r0, #0
   b5d78:	f000 8234 	beq.w	b61e4 <loop+0x5e4>
   b5d7c:	2210      	movs	r2, #16
   b5d7e:	2100      	movs	r1, #0
   b5d80:	f00b fa66 	bl	c1250 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5d84:	4b34      	ldr	r3, [pc, #208]	; (b5e58 <loop+0x258>)
   b5d86:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5d88:	2304      	movs	r3, #4
   b5d8a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d8c:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5d8e:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5d90:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5d94:	492b      	ldr	r1, [pc, #172]	; (b5e44 <loop+0x244>)
   b5d96:	a805      	add	r0, sp, #20
   b5d98:	f009 ffa6 	bl	bfce8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5da0:	4823      	ldr	r0, [pc, #140]	; (b5e30 <loop+0x230>)
   b5da2:	f001 ff0b 	bl	b7bbc <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b5da6:	2000      	movs	r0, #0
   b5da8:	f006 fee8 	bl	bcb7c <hal_timer_millis>
        while (_while() && !_condition()) {
   b5dac:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5db0:	4604      	mov	r4, r0
   b5db2:	2000      	movs	r0, #0
   b5db4:	f006 fee2 	bl	bcb7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5db8:	1b00      	subs	r0, r0, r4
   b5dba:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5dbe:	42b0      	cmp	r0, r6
   b5dc0:	f171 0300 	sbcs.w	r3, r1, #0
   b5dc4:	d207      	bcs.n	b5dd6 <loop+0x1d6>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5dc6:	f00a fa67 	bl	c0298 <_Z16_fetch_usbserialv>
   b5dca:	f00a fa5a 	bl	c0282 <_ZN9USBSerial11isConnectedEv>
   b5dce:	b910      	cbnz	r0, b5dd6 <loop+0x1d6>
            spark_process();
   b5dd0:	f007 f9b0 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   b5dd4:	e7ed      	b.n	b5db2 <loop+0x1b2>
   b5dd6:	f00a fa5f 	bl	c0298 <_Z16_fetch_usbserialv>
   b5dda:	f00a fa52 	bl	c0282 <_ZN9USBSerial11isConnectedEv>
			state = IDLE_STATE;
   b5dde:	2302      	movs	r3, #2
   b5de0:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b5de2:	4b12      	ldr	r3, [pc, #72]	; (b5e2c <loop+0x22c>)
   b5de4:	2201      	movs	r2, #1
   b5de6:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5de8:	f00a f96f 	bl	c00ca <_ZN9TimeClass3nowEv>
   b5dec:	4916      	ldr	r1, [pc, #88]	; (b5e48 <loop+0x248>)
   b5dee:	9700      	str	r7, [sp, #0]
   b5df0:	17c3      	asrs	r3, r0, #31
   b5df2:	4602      	mov	r2, r0
   b5df4:	a808      	add	r0, sp, #32
   b5df6:	f00a f909 	bl	c000c <_ZN9TimeClass6formatExPKc>
   b5dfa:	9a08      	ldr	r2, [sp, #32]
   b5dfc:	9202      	str	r2, [sp, #8]
   b5dfe:	f009 ffd3 	bl	bfda8 <_ZN11SystemClass10freeMemoryEv>
   b5e02:	9a02      	ldr	r2, [sp, #8]
   b5e04:	4915      	ldr	r1, [pc, #84]	; (b5e5c <loop+0x25c>)
   b5e06:	4603      	mov	r3, r0
   b5e08:	480c      	ldr	r0, [pc, #48]	; (b5e3c <loop+0x23c>)
   b5e0a:	f7fe f998 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5e0e:	a808      	add	r0, sp, #32
   b5e10:	f009 fd9a 	bl	bf948 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5e14:	9805      	ldr	r0, [sp, #20]
   b5e16:	2800      	cmp	r0, #0
   b5e18:	f43f af18 	beq.w	b5c4c <loop+0x4c>
            free(wakeupSource_);
   b5e1c:	f007 fa42 	bl	bd2a4 <free>
		} break;
   b5e20:	e714      	b.n	b5c4c <loop+0x4c>
   b5e22:	bf00      	nop
   b5e24:	2003e462 	.word	0x2003e462
   b5e28:	2003e461 	.word	0x2003e461
   b5e2c:	2003e460 	.word	0x2003e460
   b5e30:	2003e338 	.word	0x2003e338
   b5e34:	2003d5f4 	.word	0x2003d5f4
   b5e38:	000c4111 	.word	0x000c4111
   b5e3c:	2003e650 	.word	0x2003e650
   b5e40:	000c4004 	.word	0x000c4004
   b5e44:	2003e358 	.word	0x2003e358
   b5e48:	2003e6a8 	.word	0x2003e6a8
   b5e4c:	000c4007 	.word	0x000c4007
   b5e50:	000c489e 	.word	0x000c489e
   b5e54:	000c567c 	.word	0x000c567c
   b5e58:	00030010 	.word	0x00030010
   b5e5c:	000c4047 	.word	0x000c4047
			if (state != oldState) {
   b5e60:	4bb7      	ldr	r3, [pc, #732]	; (b6140 <loop+0x540>)
   b5e62:	4fb8      	ldr	r7, [pc, #736]	; (b6144 <loop+0x544>)
   b5e64:	781b      	ldrb	r3, [r3, #0]
   b5e66:	2b04      	cmp	r3, #4
   b5e68:	d062      	beq.n	b5f30 <loop+0x330>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5e6a:	2b07      	cmp	r3, #7
   b5e6c:	d002      	beq.n	b5e74 <loop+0x274>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e6e:	f006 fe75 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   b5e72:	6038      	str	r0, [r7, #0]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5e74:	f7ff fb46 	bl	b5504 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5e78:	f7fe f97a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5e7c:	f7fe f98c 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5e80:	f00a f923 	bl	c00ca <_ZN9TimeClass3nowEv>
   b5e84:	4cb0      	ldr	r4, [pc, #704]	; (b6148 <loop+0x548>)
   b5e86:	17c3      	asrs	r3, r0, #31
   b5e88:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	f003 ff35 	bl	b9cfc <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5e92:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5e96:	a805      	add	r0, sp, #20
   b5e98:	f003 fdc2 	bl	b9a20 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5e9c:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   b5ea0:	f000 fa80 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5ea4:	f000 fc54 	bl	b6750 <_ZNK13sysStatusData12get_openTimeEv>
   b5ea8:	4286      	cmp	r6, r0
   b5eaa:	f2c0 808f 	blt.w	b5fcc <loop+0x3cc>
   b5eae:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b5eb2:	a808      	add	r0, sp, #32
   b5eb4:	f003 fdb4 	bl	b9a20 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5eb8:	f99d 6024 	ldrsb.w	r6, [sp, #36]	; 0x24
   b5ebc:	f000 fa72 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5ec0:	f000 fc4b 	bl	b675a <_ZNK13sysStatusData13get_closeTimeEv>
   b5ec4:	4286      	cmp	r6, r0
   b5ec6:	a808      	add	r0, sp, #32
   b5ec8:	bfcc      	ite	gt
   b5eca:	2600      	movgt	r6, #0
   b5ecc:	2601      	movle	r6, #1
   b5ece:	f003 fb1b 	bl	b9508 <_ZN12LocalTimeHMSD1Ev>
   b5ed2:	a805      	add	r0, sp, #20
   b5ed4:	f003 fb18 	bl	b9508 <_ZN12LocalTimeHMSD1Ev>
   b5ed8:	2e00      	cmp	r6, #0
   b5eda:	d079      	beq.n	b5fd0 <loop+0x3d0>
   b5edc:	f000 fac6 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5ee0:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5ee2:	f000 ff49 	bl	b6d78 <_ZN17currentStatusData13set_openHoursEb>
				Log.info("Gateway is listening for LoRA messages and the park is %s (%d / %d / %d)", (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5ee6:	f000 fac1 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5eea:	f000 fec7 	bl	b6c7c <_ZNK17currentStatusData13get_openHoursEv>
   b5eee:	4b97      	ldr	r3, [pc, #604]	; (b614c <loop+0x54c>)
   b5ef0:	4a97      	ldr	r2, [pc, #604]	; (b6150 <loop+0x550>)
   b5ef2:	4998      	ldr	r1, [pc, #608]	; (b6154 <loop+0x554>)
   b5ef4:	2800      	cmp	r0, #0
   b5ef6:	bf08      	it	eq
   b5ef8:	461a      	moveq	r2, r3
   b5efa:	a808      	add	r0, sp, #32
   b5efc:	9203      	str	r2, [sp, #12]
   b5efe:	f003 fd8f 	bl	b9a20 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f02:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b5f06:	9302      	str	r3, [sp, #8]
   b5f08:	f000 fa4c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5f0c:	f000 fc20 	bl	b6750 <_ZNK13sysStatusData12get_openTimeEv>
   b5f10:	4604      	mov	r4, r0
   b5f12:	f000 fa47 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5f16:	f000 fc20 	bl	b675a <_ZNK13sysStatusData13get_closeTimeEv>
   b5f1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5f1e:	e9cd 4000 	strd	r4, r0, [sp]
   b5f22:	498d      	ldr	r1, [pc, #564]	; (b6158 <loop+0x558>)
   b5f24:	488d      	ldr	r0, [pc, #564]	; (b615c <loop+0x55c>)
   b5f26:	f7fe f90a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5f2a:	a808      	add	r0, sp, #32
   b5f2c:	f003 faec 	bl	b9508 <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5f30:	f7fe f91e 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f34:	f7ff f988 	bl	b5248 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5f38:	b1d8      	cbz	r0, b5f72 <loop+0x372>
				Log.info("In main loop - alert %d and open hours %d",current.get_alertCodeNode(), current.get_openHours());
   b5f3a:	f000 fa97 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5f3e:	f000 fc39 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5f42:	9002      	str	r0, [sp, #8]
   b5f44:	f000 fa92 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5f48:	f000 fe98 	bl	b6c7c <_ZNK17currentStatusData13get_openHoursEv>
   b5f4c:	9a02      	ldr	r2, [sp, #8]
   b5f4e:	4984      	ldr	r1, [pc, #528]	; (b6160 <loop+0x560>)
   b5f50:	4603      	mov	r3, r0
   b5f52:	4882      	ldr	r0, [pc, #520]	; (b615c <loop+0x55c>)
   b5f54:	f7fe f8f3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {	// We don't report Join alerts or after hours
   b5f58:	f000 fa88 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5f5c:	f000 fc2a 	bl	b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5f60:	2801      	cmp	r0, #1
   b5f62:	d006      	beq.n	b5f72 <loop+0x372>
   b5f64:	f000 fa82 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5f68:	f000 fe88 	bl	b6c7c <_ZNK17currentStatusData13get_openHoursEv>
   b5f6c:	b108      	cbz	r0, b5f72 <loop+0x372>
					state = REPORTING_STATE; 									// Received and acknowledged data from a node - need to report the alert
   b5f6e:	2307      	movs	r3, #7
   b5f70:	702b      	strb	r3, [r5, #0]
   b5f72:	f006 fdf3 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 150000L) { 													// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5f76:	683b      	ldr	r3, [r7, #0]
   b5f78:	1ac0      	subs	r0, r0, r3
   b5f7a:	4b7a      	ldr	r3, [pc, #488]	; (b6164 <loop+0x564>)
   b5f7c:	4298      	cmp	r0, r3
   b5f7e:	f67f ae65 	bls.w	b5c4c <loop+0x4c>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b5f82:	f7fe f8f5 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f86:	f7fe fb0d 	bl	b45a4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5f8a:	f7fe f8f1 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f8e:	f7fe f913 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b5f92:	f7fe f8ed 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f96:	2100      	movs	r1, #0
   b5f98:	f7fe fc68 	bl	b486c <_ZN14LoRA_Functions13printNodeDataEb>
				nodeDatabase.flush(true);
   b5f9c:	f000 fb0a 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b5fa0:	6803      	ldr	r3, [r0, #0]
   b5fa2:	2101      	movs	r1, #1
   b5fa4:	68db      	ldr	r3, [r3, #12]
   b5fa6:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5fa8:	f00a f8a0 	bl	c00ec <_ZN9TimeClass4hourEv>
   b5fac:	4604      	mov	r4, r0
   b5fae:	f000 f9f9 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b5fb2:	f000 fdb3 	bl	b6b1c <_ZNK13sysStatusData18get_lastConnectionEv>
   b5fb6:	f009 ff5f 	bl	bfe78 <_ZN9TimeClass4hourEx>
   b5fba:	4284      	cmp	r4, r0
   b5fbc:	d004      	beq.n	b5fc8 <loop+0x3c8>
   b5fbe:	f000 fa55 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5fc2:	f000 fe5b 	bl	b6c7c <_ZNK17currentStatusData13get_openHoursEv>
   b5fc6:	b938      	cbnz	r0, b5fd8 <loop+0x3d8>
				else state = IDLE_STATE;
   b5fc8:	2302      	movs	r3, #2
   b5fca:	e63e      	b.n	b5c4a <loop+0x4a>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5fcc:	2600      	movs	r6, #0
   b5fce:	e780      	b.n	b5ed2 <loop+0x2d2>
				else current.set_openHours(false);
   b5fd0:	f000 fa4c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5fd4:	4631      	mov	r1, r6
   b5fd6:	e784      	b.n	b5ee2 <loop+0x2e2>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5fd8:	2305      	movs	r3, #5
   b5fda:	e636      	b.n	b5c4a <loop+0x4a>
			if (state != oldState) publishStateTransition();
   b5fdc:	4b58      	ldr	r3, [pc, #352]	; (b6140 <loop+0x540>)
   b5fde:	781b      	ldrb	r3, [r3, #0]
   b5fe0:	2b07      	cmp	r3, #7
   b5fe2:	d001      	beq.n	b5fe8 <loop+0x3e8>
   b5fe4:	f7ff fa8e 	bl	b5504 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b5fe8:	f000 fa40 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5fec:	f000 fbbf 	bl	b676e <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b5ff0:	f7ff fad8 	bl	b55a4 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b5ff4:	f000 fa3a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b5ff8:	2100      	movs	r1, #0
   b5ffa:	f000 fc57 	bl	b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b5ffe:	f000 f9d1 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6002:	4604      	mov	r4, r0
   b6004:	f000 f9ce 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6008:	f000 fb9d 	bl	b6746 <_ZNK13sysStatusData16get_messageCountEv>
   b600c:	3001      	adds	r0, #1
   b600e:	b2c1      	uxtb	r1, r0
   b6010:	4620      	mov	r0, r4
   b6012:	f000 fc09 	bl	b6828 <_ZN13sysStatusData16set_messageCountEh>
			state = LoRA_STATE;
   b6016:	e60f      	b.n	b5c38 <loop+0x38>
			if (state != oldState) {
   b6018:	4b49      	ldr	r3, [pc, #292]	; (b6140 <loop+0x540>)
   b601a:	4c53      	ldr	r4, [pc, #332]	; (b6168 <loop+0x568>)
   b601c:	781b      	ldrb	r3, [r3, #0]
   b601e:	2b05      	cmp	r3, #5
   b6020:	d027      	beq.n	b6072 <loop+0x472>
				publishStateTransition();  
   b6022:	f7ff fa6f 	bl	b5504 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b6026:	f000 f9bd 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b602a:	f000 fd77 	bl	b6b1c <_ZNK13sysStatusData18get_lastConnectionEv>
   b602e:	f009 ff2b 	bl	bfe88 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b6032:	4948      	ldr	r1, [pc, #288]	; (b6154 <loop+0x554>)
   b6034:	4606      	mov	r6, r0
   b6036:	a808      	add	r0, sp, #32
   b6038:	f003 fd0f 	bl	b9a5a <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b603c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   b6040:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b6044:	d007      	beq.n	b6056 <loop+0x456>
					current.resetEverything();
   b6046:	f000 fa11 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b604a:	f000 fda3 	bl	b6b94 <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b604e:	4947      	ldr	r1, [pc, #284]	; (b616c <loop+0x56c>)
   b6050:	4842      	ldr	r0, [pc, #264]	; (b615c <loop+0x55c>)
   b6052:	f7fe f874 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b6056:	f000 f9a5 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b605a:	f000 fb65 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b605e:	f7ff faa1 	bl	b55a4 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6062:	f007 f877 	bl	bd154 <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b6066:	b908      	cbnz	r0, b606c <loop+0x46c>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b6068:	f007 f86c 	bl	bd144 <spark_cloud_flag_connect>
   b606c:	f006 fd76 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b6070:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6072:	f007 f86f 	bl	bd154 <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b6076:	b338      	cbz	r0, b60c8 <loop+0x4c8>
				sysStatus.set_lastConnection(Time.now());
   b6078:	f000 f994 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b607c:	4606      	mov	r6, r0
   b607e:	f00a f824 	bl	c00ca <_ZN9TimeClass3nowEv>
   b6082:	4602      	mov	r2, r0
   b6084:	17c3      	asrs	r3, r0, #31
   b6086:	4630      	mov	r0, r6
   b6088:	f000 fd70 	bl	b6b6c <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b608c:	f000 f98a 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6090:	4606      	mov	r6, r0
   b6092:	f006 fd63 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   b6096:	6821      	ldr	r1, [r4, #0]
   b6098:	1a41      	subs	r1, r0, r1
   b609a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b609e:	fbb1 f1f0 	udiv	r1, r1, r0
   b60a2:	4630      	mov	r0, r6
   b60a4:	b289      	uxth	r1, r1
   b60a6:	f000 fcf8 	bl	b6a9a <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b60aa:	f007 f853 	bl	bd154 <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b60ae:	b1c8      	cbz	r0, b60e4 <loop+0x4e4>
   b60b0:	f007 f850 	bl	bd154 <spark_cloud_flag_connected>
        if (!connected()) {
   b60b4:	b110      	cbz	r0, b60bc <loop+0x4bc>
        return spark_sync_time(NULL);
   b60b6:	2000      	movs	r0, #0
   b60b8:	f007 f864 	bl	bd184 <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b60bc:	f7ff fa00 	bl	b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b60c0:	b950      	cbnz	r0, b60d8 <loop+0x4d8>
            spark_process();
   b60c2:	f007 f837 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   b60c6:	e7f9      	b.n	b60bc <loop+0x4bc>
   b60c8:	f006 fd48 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b60cc:	6823      	ldr	r3, [r4, #0]
   b60ce:	1ac0      	subs	r0, r0, r3
   b60d0:	4b27      	ldr	r3, [pc, #156]	; (b6170 <loop+0x570>)
   b60d2:	4298      	cmp	r0, r3
   b60d4:	d8d0      	bhi.n	b6078 <loop+0x478>
   b60d6:	e5b9      	b.n	b5c4c <loop+0x4c>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b60d8:	f7ff f9f2 	bl	b54c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b60dc:	4925      	ldr	r1, [pc, #148]	; (b6174 <loop+0x574>)
   b60de:	a808      	add	r0, sp, #32
   b60e0:	f007 f9d2 	bl	bd488 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_stayConnected() == 1) state = LoRA_STATE;				// Go to the LoRA State
   b60e4:	f000 f95e 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b60e8:	f000 fb23 	bl	b6732 <_ZNK13sysStatusData17get_stayConnectedEv>
   b60ec:	2801      	cmp	r0, #1
   b60ee:	f43f ada3 	beq.w	b5c38 <loop+0x38>
				else state = DISCONNECTING_STATE;	 									// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b60f2:	2306      	movs	r3, #6
   b60f4:	e5a9      	b.n	b5c4a <loop+0x4a>
			if (state != oldState) {
   b60f6:	4b12      	ldr	r3, [pc, #72]	; (b6140 <loop+0x540>)
   b60f8:	4c1f      	ldr	r4, [pc, #124]	; (b6178 <loop+0x578>)
   b60fa:	781b      	ldrb	r3, [r3, #0]
   b60fc:	2b06      	cmp	r3, #6
   b60fe:	d004      	beq.n	b610a <loop+0x50a>
				publishStateTransition(); 
   b6100:	f7ff fa00 	bl	b5504 <_Z22publishStateTransitionv>
   b6104:	f006 fd2a 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b6108:	6020      	str	r0, [r4, #0]
   b610a:	f006 fd27 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b610e:	6823      	ldr	r3, [r4, #0]
   b6110:	1ac0      	subs	r0, r0, r3
   b6112:	4b1a      	ldr	r3, [pc, #104]	; (b617c <loop+0x57c>)
   b6114:	4298      	cmp	r0, r3
   b6116:	f67f ad99 	bls.w	b5c4c <loop+0x4c>
   b611a:	f004 f8df 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
   b611e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b6122:	2b00      	cmp	r3, #0
   b6124:	f43f ad92 	beq.w	b5c4c <loop+0x4c>
				if (sysStatus.get_stayConnected() == 0) Particle_Functions::instance().disconnectFromParticle();
   b6128:	f000 f93c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b612c:	f000 fb01 	bl	b6732 <_ZNK13sysStatusData17get_stayConnectedEv>
   b6130:	2800      	cmp	r0, #0
   b6132:	f47f af49 	bne.w	b5fc8 <loop+0x3c8>
   b6136:	f000 fec7 	bl	b6ec8 <_ZN18Particle_Functions8instanceEv>
   b613a:	f001 f9f9 	bl	b7530 <_ZN18Particle_Functions22disconnectFromParticleEv>
   b613e:	e743      	b.n	b5fc8 <loop+0x3c8>
   b6140:	2003e461 	.word	0x2003e461
   b6144:	2003e32c 	.word	0x2003e32c
   b6148:	2003e370 	.word	0x2003e370
   b614c:	000c3ffd 	.word	0x000c3ffd
   b6150:	000c3ff8 	.word	0x000c3ff8
   b6154:	2003e3d8 	.word	0x2003e3d8
   b6158:	000c4068 	.word	0x000c4068
   b615c:	2003e650 	.word	0x2003e650
   b6160:	000c40b1 	.word	0x000c40b1
   b6164:	000249f0 	.word	0x000249f0
   b6168:	2003e330 	.word	0x2003e330
   b616c:	000c40db 	.word	0x000c40db
   b6170:	000927c0 	.word	0x000927c0
   b6174:	2003e60c 	.word	0x2003e60c
   b6178:	2003e334 	.word	0x2003e334
   b617c:	00015f90 	.word	0x00015f90
			static system_tick_t resetTimeout = millis();
   b6180:	4c1b      	ldr	r4, [pc, #108]	; (b61f0 <loop+0x5f0>)
   b6182:	4e1c      	ldr	r6, [pc, #112]	; (b61f4 <loop+0x5f4>)
   b6184:	7823      	ldrb	r3, [r4, #0]
   b6186:	f3bf 8f5b 	dmb	ish
   b618a:	f013 0f01 	tst.w	r3, #1
   b618e:	d109      	bne.n	b61a4 <loop+0x5a4>
   b6190:	4620      	mov	r0, r4
   b6192:	f7fd ff93 	bl	b40bc <__cxa_guard_acquire>
   b6196:	b128      	cbz	r0, b61a4 <loop+0x5a4>
   b6198:	f006 fce0 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   b619c:	6030      	str	r0, [r6, #0]
   b619e:	4620      	mov	r0, r4
   b61a0:	f7fd ff91 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b61a4:	4b14      	ldr	r3, [pc, #80]	; (b61f8 <loop+0x5f8>)
   b61a6:	782a      	ldrb	r2, [r5, #0]
   b61a8:	781b      	ldrb	r3, [r3, #0]
   b61aa:	429a      	cmp	r2, r3
   b61ac:	d001      	beq.n	b61b2 <loop+0x5b2>
   b61ae:	f7ff f9a9 	bl	b5504 <_Z22publishStateTransitionv>
   b61b2:	f006 fcd3 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b61b6:	6833      	ldr	r3, [r6, #0]
   b61b8:	1ac0      	subs	r0, r0, r3
   b61ba:	f247 5330 	movw	r3, #30000	; 0x7530
   b61be:	4298      	cmp	r0, r3
   b61c0:	f67f ad44 	bls.w	b5c4c <loop+0x4c>
				Log.info("Deep power down device");
   b61c4:	490d      	ldr	r1, [pc, #52]	; (b61fc <loop+0x5fc>)
   b61c6:	480e      	ldr	r0, [pc, #56]	; (b6200 <loop+0x600>)
   b61c8:	f7fd ffb9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b61cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b61d0:	f007 f8e0 	bl	bd394 <delay>
				ab1805.deepPowerDown(); 
   b61d4:	211e      	movs	r1, #30
   b61d6:	480b      	ldr	r0, [pc, #44]	; (b6204 <loop+0x604>)
   b61d8:	f001 fe4a 	bl	b7e70 <_ZN6AB180513deepPowerDownEi>
   b61dc:	e536      	b.n	b5c4c <loop+0x4c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b61de:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b61e2:	e5d7      	b.n	b5d94 <loop+0x194>
                valid_ = false;
   b61e4:	7526      	strb	r6, [r4, #20]
                return *this;
   b61e6:	e5d5      	b.n	b5d94 <loop+0x194>
}
   b61e8:	b011      	add	sp, #68	; 0x44
   b61ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b61ee:	bf00      	nop
   b61f0:	2003e320 	.word	0x2003e320
   b61f4:	2003e328 	.word	0x2003e328
   b61f8:	2003e461 	.word	0x2003e461
   b61fc:	000c40fa 	.word	0x000c40fa
   b6200:	2003e650 	.word	0x2003e650
   b6204:	2003e338 	.word	0x2003e338

000b6208 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b6208:	b510      	push	{r4, lr}
   b620a:	4b03      	ldr	r3, [pc, #12]	; (b6218 <_ZN8MB85RC64D1Ev+0x10>)
   b620c:	6003      	str	r3, [r0, #0]
   b620e:	4604      	mov	r4, r0
   b6210:	f003 fe22 	bl	b9e58 <_ZN6MB85RCD1Ev>
   b6214:	4620      	mov	r0, r4
   b6216:	bd10      	pop	{r4, pc}
   b6218:	000c43a8 	.word	0x000c43a8

000b621c <_ZN8MB85RC64D0Ev>:
   b621c:	b510      	push	{r4, lr}
   b621e:	4604      	mov	r4, r0
   b6220:	f7ff fff2 	bl	b6208 <_ZN8MB85RC64D1Ev>
   b6224:	4620      	mov	r0, r4
   b6226:	2110      	movs	r1, #16
   b6228:	f7fd ff39 	bl	b409e <_ZdlPvj>
   b622c:	4620      	mov	r0, r4
   b622e:	bd10      	pop	{r4, pc}

000b6230 <_ZN10nodeIDData8validateEj>:
    String blank = "{\"nodes\":[]}";
    Log.info("Resettig NodeID config to: %s", blank.c_str());
    nodeDatabase.set_nodeIDJson(blank);
}

bool nodeIDData::validate(size_t dataSize) {
   b6230:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6232:	f006 fb87 	bl	bc944 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b6236:	4b05      	ldr	r3, [pc, #20]	; (b624c <_ZN10nodeIDData8validateEj+0x1c>)
   b6238:	4a05      	ldr	r2, [pc, #20]	; (b6250 <_ZN10nodeIDData8validateEj+0x20>)
   b623a:	4906      	ldr	r1, [pc, #24]	; (b6254 <_ZN10nodeIDData8validateEj+0x24>)
   b623c:	1e04      	subs	r4, r0, #0
   b623e:	bf08      	it	eq
   b6240:	461a      	moveq	r2, r3
   b6242:	4805      	ldr	r0, [pc, #20]	; (b6258 <_ZN10nodeIDData8validateEj+0x28>)
   b6244:	f7fd ff7b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b6248:	4620      	mov	r0, r4
   b624a:	bd10      	pop	{r4, pc}
   b624c:	000c412d 	.word	0x000c412d
   b6250:	000c4131 	.word	0x000c4131
   b6254:	000c4137 	.word	0x000c4137
   b6258:	2003e650 	.word	0x2003e650

000b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b625c:	b510      	push	{r4, lr}
            if (!handle_) {
   b625e:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b6260:	4604      	mov	r4, r0
            if (!handle_) {
   b6262:	b90b      	cbnz	r3, b6268 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b6264:	f006 fc2a 	bl	bcabc <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b6268:	6820      	ldr	r0, [r4, #0]
        }
   b626a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b626e:	f006 bc35 	b.w	bcadc <os_mutex_recursive_lock>

000b6272 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b6272:	b538      	push	{r3, r4, r5, lr}
   b6274:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6276:	3004      	adds	r0, #4
   b6278:	f7ff fff0 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b627c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b627e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b6280:	6803      	ldr	r3, [r0, #0]
   b6282:	68dd      	ldr	r5, [r3, #12]
   b6284:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b6288:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b628a:	6860      	ldr	r0, [r4, #4]
   b628c:	f006 fc2e 	bl	bcaec <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b6290:	4620      	mov	r0, r4
        } 
   b6292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b6296:	f006 ba71 	b.w	bc77c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b629a <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b629a:	b538      	push	{r3, r4, r5, lr}
   b629c:	4604      	mov	r4, r0
   b629e:	3004      	adds	r0, #4
   b62a0:	f7ff ffdc 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b62a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b62a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b62a8:	6803      	ldr	r3, [r0, #0]
   b62aa:	689d      	ldr	r5, [r3, #8]
   b62ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b62b0:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b62b2:	68a2      	ldr	r2, [r4, #8]
   b62b4:	6823      	ldr	r3, [r4, #0]
   b62b6:	88d1      	ldrh	r1, [r2, #6]
   b62b8:	695b      	ldr	r3, [r3, #20]
   b62ba:	4620      	mov	r0, r4
   b62bc:	4798      	blx	r3
   b62be:	b918      	cbnz	r0, b62c8 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b62c0:	6823      	ldr	r3, [r4, #0]
   b62c2:	4620      	mov	r0, r4
   b62c4:	699b      	ldr	r3, [r3, #24]
   b62c6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b62c8:	6860      	ldr	r0, [r4, #4]
   b62ca:	f006 fc0f 	bl	bcaec <os_mutex_recursive_unlock>
        }
   b62ce:	2001      	movs	r0, #1
   b62d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b62d4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b62d4:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b62d6:	4b04      	ldr	r3, [pc, #16]	; (b62e8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b62d8:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b62da:	4604      	mov	r4, r0
            if (handle_) {
   b62dc:	6840      	ldr	r0, [r0, #4]
   b62de:	b108      	cbz	r0, b62e4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b62e0:	f006 fbf4 	bl	bcacc <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b62e4:	4620      	mov	r0, r4
   b62e6:	bd10      	pop	{r4, pc}
   b62e8:	000c5370 	.word	0x000c5370

000b62ec <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b62ec:	b510      	push	{r4, lr}
   b62ee:	4b03      	ldr	r3, [pc, #12]	; (b62fc <_ZN13sysStatusDataD1Ev+0x10>)
   b62f0:	6003      	str	r3, [r0, #0]
   b62f2:	4604      	mov	r4, r0
   b62f4:	f7ff ffee 	bl	b62d4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd10      	pop	{r4, pc}
   b62fc:	000c43f0 	.word	0x000c43f0

000b6300 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b6300:	b510      	push	{r4, lr}
   b6302:	4604      	mov	r4, r0
}
   b6304:	f7ff fff2 	bl	b62ec <_ZN13sysStatusDataD1Ev>
   b6308:	4620      	mov	r0, r4
   b630a:	2170      	movs	r1, #112	; 0x70
   b630c:	f7fd fec7 	bl	b409e <_ZdlPvj>
   b6310:	4620      	mov	r0, r4
   b6312:	bd10      	pop	{r4, pc}

000b6314 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b6314:	b510      	push	{r4, lr}
   b6316:	4b03      	ldr	r3, [pc, #12]	; (b6324 <_ZN17currentStatusDataD1Ev+0x10>)
   b6318:	6003      	str	r3, [r0, #0]
   b631a:	4604      	mov	r4, r0
   b631c:	f7ff ffda 	bl	b62d4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6320:	4620      	mov	r0, r4
   b6322:	bd10      	pop	{r4, pc}
   b6324:	000c441c 	.word	0x000c441c

000b6328 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b6328:	b510      	push	{r4, lr}
   b632a:	4604      	mov	r4, r0
}
   b632c:	f7ff fff2 	bl	b6314 <_ZN17currentStatusDataD1Ev>
   b6330:	4620      	mov	r0, r4
   b6332:	2178      	movs	r1, #120	; 0x78
   b6334:	f7fd feb3 	bl	b409e <_ZdlPvj>
   b6338:	4620      	mov	r0, r4
   b633a:	bd10      	pop	{r4, pc}

000b633c <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b633c:	b510      	push	{r4, lr}
   b633e:	4b03      	ldr	r3, [pc, #12]	; (b634c <_ZN10nodeIDDataD1Ev+0x10>)
   b6340:	6003      	str	r3, [r0, #0]
   b6342:	4604      	mov	r4, r0
   b6344:	f7ff ffc6 	bl	b62d4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6348:	4620      	mov	r0, r4
   b634a:	bd10      	pop	{r4, pc}
   b634c:	000c43c4 	.word	0x000c43c4

000b6350 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b6350:	b510      	push	{r4, lr}
   b6352:	4604      	mov	r4, r0
}
   b6354:	f7ff fff2 	bl	b633c <_ZN10nodeIDDataD1Ev>
   b6358:	4620      	mov	r0, r4
   b635a:	f240 413c 	movw	r1, #1084	; 0x43c
   b635e:	f7fd fe9e 	bl	b409e <_ZdlPvj>
   b6362:	4620      	mov	r0, r4
   b6364:	bd10      	pop	{r4, pc}
	...

000b6368 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b6368:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b636c:	6081      	str	r1, [r0, #8]
   b636e:	490a      	ldr	r1, [pc, #40]	; (b6398 <_ZN13sysStatusDataC1Ev+0x30>)
   b6370:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b6374:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b6378:	2101      	movs	r1, #1
   b637a:	8281      	strh	r1, [r0, #20]
   b637c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6380:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6382:	4906      	ldr	r1, [pc, #24]	; (b639c <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6384:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6386:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b638a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b638c:	6182      	str	r2, [r0, #24]
   b638e:	f880 2020 	strb.w	r2, [r0, #32]
   b6392:	4a03      	ldr	r2, [pc, #12]	; (b63a0 <_ZN13sysStatusDataC1Ev+0x38>)
   b6394:	6002      	str	r2, [r0, #0]
};
   b6396:	4770      	bx	lr
   b6398:	20a99e76 	.word	0x20a99e76
   b639c:	2003e470 	.word	0x2003e470
   b63a0:	000c43f0 	.word	0x000c43f0

000b63a4 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b63a4:	b510      	push	{r4, lr}
    if (!_instance) {
   b63a6:	4c06      	ldr	r4, [pc, #24]	; (b63c0 <_ZN13sysStatusData8instanceEv+0x1c>)
   b63a8:	6823      	ldr	r3, [r4, #0]
   b63aa:	b93b      	cbnz	r3, b63bc <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b63ac:	2070      	movs	r0, #112	; 0x70
   b63ae:	f7fd fe72 	bl	b4096 <_Znwj>
   b63b2:	4603      	mov	r3, r0
   b63b4:	b108      	cbz	r0, b63ba <_ZN13sysStatusData8instanceEv+0x16>
   b63b6:	f7ff ffd7 	bl	b6368 <_ZN13sysStatusDataC1Ev>
   b63ba:	6023      	str	r3, [r4, #0]
}
   b63bc:	6820      	ldr	r0, [r4, #0]
   b63be:	bd10      	pop	{r4, pc}
   b63c0:	2003e468 	.word	0x2003e468

000b63c4 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b63c4:	b510      	push	{r4, lr}
    fram.begin();
   b63c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b63c8:	f003 fd5c 	bl	b9e84 <_ZN6MB85RC5beginEv>
    sysStatus
   b63cc:	f7ff ffea 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b63d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b63d4:	6803      	ldr	r3, [r0, #0]
   b63d6:	61c2      	str	r2, [r0, #28]
   b63d8:	685b      	ldr	r3, [r3, #4]
   b63da:	4798      	blx	r3
    Log.info("sizeof(SysData): %u", sizeof(SysData));
   b63dc:	490b      	ldr	r1, [pc, #44]	; (b640c <_ZN13sysStatusData5setupEv+0x48>)
   b63de:	480c      	ldr	r0, [pc, #48]	; (b6410 <_ZN13sysStatusData5setupEv+0x4c>)
   b63e0:	2240      	movs	r2, #64	; 0x40
   b63e2:	f7fd feac 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!sysStatus.validate(sizeof(SysData))) {                  // 64 is the size of the sysStatus storage object
   b63e6:	f7ff ffdd 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b63ea:	6803      	ldr	r3, [r0, #0]
   b63ec:	2140      	movs	r1, #64	; 0x40
   b63ee:	695b      	ldr	r3, [r3, #20]
   b63f0:	4798      	blx	r3
   b63f2:	b950      	cbnz	r0, b640a <_ZN13sysStatusData5setupEv+0x46>
        Log.info("sysStatus object not valid - reinitializing");
   b63f4:	4907      	ldr	r1, [pc, #28]	; (b6414 <_ZN13sysStatusData5setupEv+0x50>)
   b63f6:	4806      	ldr	r0, [pc, #24]	; (b6410 <_ZN13sysStatusData5setupEv+0x4c>)
   b63f8:	f7fd fea1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        sysStatus.initialize();
   b63fc:	f7ff ffd2 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6400:	6803      	ldr	r3, [r0, #0]
}
   b6402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        sysStatus.initialize();
   b6406:	699b      	ldr	r3, [r3, #24]
   b6408:	4718      	bx	r3
}
   b640a:	bd10      	pop	{r4, pc}
   b640c:	000c4149 	.word	0x000c4149
   b6410:	2003e650 	.word	0x2003e650
   b6414:	000c415d 	.word	0x000c415d

000b6418 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b6418:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b641a:	f7ff ffc3 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b641e:	6803      	ldr	r3, [r0, #0]
}
   b6420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b6424:	68db      	ldr	r3, [r3, #12]
   b6426:	2100      	movs	r1, #0
   b6428:	4718      	bx	r3
	...

000b642c <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b642c:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b6430:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6432:	6081      	str	r1, [r0, #8]
   b6434:	490a      	ldr	r1, [pc, #40]	; (b6460 <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6436:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6438:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b643c:	6182      	str	r2, [r0, #24]
   b643e:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6442:	4a08      	ldr	r2, [pc, #32]	; (b6464 <_ZN17currentStatusDataC1Ev+0x38>)
   b6444:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6446:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b644a:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b644c:	2101      	movs	r1, #1
   b644e:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6450:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6456:	4a04      	ldr	r2, [pc, #16]	; (b6468 <_ZN17currentStatusDataC1Ev+0x3c>)
   b6458:	61c1      	str	r1, [r0, #28]
   b645a:	6002      	str	r2, [r0, #0]
};
   b645c:	4770      	bx	lr
   b645e:	bf00      	nop
   b6460:	20a99e76 	.word	0x20a99e76
   b6464:	2003e470 	.word	0x2003e470
   b6468:	000c441c 	.word	0x000c441c

000b646c <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b646c:	b510      	push	{r4, lr}
    if (!_instance) {
   b646e:	4c06      	ldr	r4, [pc, #24]	; (b6488 <_ZN17currentStatusData8instanceEv+0x1c>)
   b6470:	6823      	ldr	r3, [r4, #0]
   b6472:	b93b      	cbnz	r3, b6484 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b6474:	2078      	movs	r0, #120	; 0x78
   b6476:	f7fd fe0e 	bl	b4096 <_Znwj>
   b647a:	4603      	mov	r3, r0
   b647c:	b108      	cbz	r0, b6482 <_ZN17currentStatusData8instanceEv+0x16>
   b647e:	f7ff ffd5 	bl	b642c <_ZN17currentStatusDataC1Ev>
   b6482:	6023      	str	r3, [r4, #0]
}
   b6484:	6820      	ldr	r0, [r4, #0]
   b6486:	bd10      	pop	{r4, pc}
   b6488:	2003e46c 	.word	0x2003e46c

000b648c <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b648c:	b510      	push	{r4, lr}
    fram.begin();
   b648e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6490:	f003 fcf8 	bl	b9e84 <_ZN6MB85RC5beginEv>
    current
   b6494:	f7ff ffea 	bl	b646c <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b6498:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b649c:	6803      	ldr	r3, [r0, #0]
   b649e:	61c2      	str	r2, [r0, #28]
   b64a0:	685b      	ldr	r3, [r3, #4]
   b64a2:	4798      	blx	r3
    Log.info("sizeof(CurrentData): %u", sizeof(CurrentData));
   b64a4:	490b      	ldr	r1, [pc, #44]	; (b64d4 <_ZN17currentStatusData5setupEv+0x48>)
   b64a6:	480c      	ldr	r0, [pc, #48]	; (b64d8 <_ZN17currentStatusData5setupEv+0x4c>)
   b64a8:	2248      	movs	r2, #72	; 0x48
   b64aa:	f7fd fe48 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!current.validate(sizeof(CurrentData))) {                  // Validate the size of the storage object
   b64ae:	f7ff ffdd 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b64b2:	6803      	ldr	r3, [r0, #0]
   b64b4:	2148      	movs	r1, #72	; 0x48
   b64b6:	695b      	ldr	r3, [r3, #20]
   b64b8:	4798      	blx	r3
   b64ba:	b950      	cbnz	r0, b64d2 <_ZN17currentStatusData5setupEv+0x46>
        Log.info("current object not valid - reinitializing");
   b64bc:	4907      	ldr	r1, [pc, #28]	; (b64dc <_ZN17currentStatusData5setupEv+0x50>)
   b64be:	4806      	ldr	r0, [pc, #24]	; (b64d8 <_ZN17currentStatusData5setupEv+0x4c>)
   b64c0:	f7fd fe3d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        current.initialize();
   b64c4:	f7ff ffd2 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b64c8:	6803      	ldr	r3, [r0, #0]
}
   b64ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        current.initialize();
   b64ce:	699b      	ldr	r3, [r3, #24]
   b64d0:	4718      	bx	r3
}
   b64d2:	bd10      	pop	{r4, pc}
   b64d4:	000c4189 	.word	0x000c4189
   b64d8:	2003e650 	.word	0x2003e650
   b64dc:	000c41a1 	.word	0x000c41a1

000b64e0 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b64e0:	b510      	push	{r4, lr}
    current.flush(false);
   b64e2:	f7ff ffc3 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b64e6:	6803      	ldr	r3, [r0, #0]
}
   b64e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b64ec:	68db      	ldr	r3, [r3, #12]
   b64ee:	2100      	movs	r1, #0
   b64f0:	4718      	bx	r3
   b64f2:	0000      	movs	r0, r0
   b64f4:	0000      	movs	r0, r0
	...

000b64f8 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b64f8:	b510      	push	{r4, lr}
   b64fa:	4604      	mov	r4, r0
   b64fc:	ed2d 8b02 	vpush	{d8}
   b6500:	3004      	adds	r0, #4
   b6502:	f7ff feab 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6506:	68e3      	ldr	r3, [r4, #12]
   b6508:	3b08      	subs	r3, #8
   b650a:	2b17      	cmp	r3, #23
   b650c:	d90c      	bls.n	b6528 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b650e:	68a3      	ldr	r3, [r4, #8]
   b6510:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b6514:	6860      	ldr	r0, [r4, #4]
   b6516:	f006 fae9 	bl	bcaec <os_mutex_recursive_unlock>
}
   b651a:	eeb0 0a48 	vmov.f32	s0, s16
   b651e:	eef0 0a68 	vmov.f32	s1, s17
   b6522:	ecbd 8b02 	vpop	{d8}
   b6526:	bd10      	pop	{r4, pc}
            T result = 0;
   b6528:	ed9f 8b01 	vldr	d8, [pc, #4]	; b6530 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b652c:	e7f2      	b.n	b6514 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b652e:	bf00      	nop
	...

000b6538 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b6538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b653a:	4604      	mov	r4, r0
   b653c:	3004      	adds	r0, #4
   b653e:	ec57 6b10 	vmov	r6, r7, d0
   b6542:	f7ff fe8b 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6546:	68e3      	ldr	r3, [r4, #12]
   b6548:	3b08      	subs	r3, #8
   b654a:	2b17      	cmp	r3, #23
   b654c:	d90c      	bls.n	b6568 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b654e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b6550:	4630      	mov	r0, r6
   b6552:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6556:	4639      	mov	r1, r7
   b6558:	f00a fd02 	bl	c0f60 <__aeabi_dcmpeq>
   b655c:	b920      	cbnz	r0, b6568 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b655e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b6562:	4620      	mov	r0, r4
   b6564:	f006 f9b2 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6568:	6860      	ldr	r0, [r4, #4]
}
   b656a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b656e:	f006 babd 	b.w	bcaec <os_mutex_recursive_unlock>
	...

000b6574 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b6574:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b6578:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b657a:	6081      	str	r1, [r0, #8]
   b657c:	490a      	ldr	r1, [pc, #40]	; (b65a8 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b657e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6580:	f44f 6c82 	mov.w	ip, #1040	; 0x410
   b6584:	6182      	str	r2, [r0, #24]
   b6586:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b658a:	4a08      	ldr	r2, [pc, #32]	; (b65ac <_ZN10nodeIDDataC1Ev+0x38>)
   b658c:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b658e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6592:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6594:	2102      	movs	r1, #2
   b6596:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6598:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b659a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b659e:	4a04      	ldr	r2, [pc, #16]	; (b65b0 <_ZN10nodeIDDataC1Ev+0x3c>)
   b65a0:	61c1      	str	r1, [r0, #28]
   b65a2:	6002      	str	r2, [r0, #0]
};
   b65a4:	4770      	bx	lr
   b65a6:	bf00      	nop
   b65a8:	20a99e60 	.word	0x20a99e60
   b65ac:	2003e470 	.word	0x2003e470
   b65b0:	000c43c4 	.word	0x000c43c4

000b65b4 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b65b4:	b510      	push	{r4, lr}
    if (!_instance) {
   b65b6:	4c07      	ldr	r4, [pc, #28]	; (b65d4 <_ZN10nodeIDData8instanceEv+0x20>)
   b65b8:	6823      	ldr	r3, [r4, #0]
   b65ba:	b943      	cbnz	r3, b65ce <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b65bc:	f240 403c 	movw	r0, #1084	; 0x43c
   b65c0:	f7fd fd69 	bl	b4096 <_Znwj>
   b65c4:	4603      	mov	r3, r0
   b65c6:	b108      	cbz	r0, b65cc <_ZN10nodeIDData8instanceEv+0x18>
   b65c8:	f7ff ffd4 	bl	b6574 <_ZN10nodeIDDataC1Ev>
   b65cc:	6023      	str	r3, [r4, #0]
}
   b65ce:	6820      	ldr	r0, [r4, #0]
   b65d0:	bd10      	pop	{r4, pc}
   b65d2:	bf00      	nop
   b65d4:	2003e464 	.word	0x2003e464

000b65d8 <_ZN10nodeIDData4loopEv>:
void nodeIDData::loop() {
   b65d8:	b510      	push	{r4, lr}
    nodeDatabase.flush(false);
   b65da:	f7ff ffeb 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b65de:	6803      	ldr	r3, [r0, #0]
}
   b65e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeDatabase.flush(false);
   b65e4:	68db      	ldr	r3, [r3, #12]
   b65e6:	2100      	movs	r1, #0
   b65e8:	4718      	bx	r3
	...

000b65ec <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();           // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b65ec:	b538      	push	{r3, r4, r5, lr}
   b65ee:	4604      	mov	r4, r0
   b65f0:	460d      	mov	r5, r1
	String result;
   b65f2:	4906      	ldr	r1, [pc, #24]	; (b660c <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b65f4:	f009 f9f3 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b65f8:	4623      	mov	r3, r4
   b65fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b65fe:	2110      	movs	r1, #16
   b6600:	4628      	mov	r0, r5
   b6602:	f006 f8f1 	bl	bc7e8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b6606:	4620      	mov	r0, r4
   b6608:	bd38      	pop	{r3, r4, r5, pc}
   b660a:	bf00      	nop
   b660c:	000c54f8 	.word	0x000c54f8

000b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b6610:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b6612:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6616:	2110      	movs	r1, #16
   b6618:	f006 b964 	b.w	bc8e4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b661c <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b661c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String blank = "{\"nodes\":[]}";
   b661e:	490a      	ldr	r1, [pc, #40]	; (b6648 <_ZN10nodeIDData12resetNodeIDsEv+0x2c>)
   b6620:	4668      	mov	r0, sp
   b6622:	f009 f9dc 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b6626:	9a00      	ldr	r2, [sp, #0]
   b6628:	4908      	ldr	r1, [pc, #32]	; (b664c <_ZN10nodeIDData12resetNodeIDsEv+0x30>)
   b662a:	4809      	ldr	r0, [pc, #36]	; (b6650 <_ZN10nodeIDData12resetNodeIDsEv+0x34>)
   b662c:	f7fd fd87 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b6630:	f7ff ffc0 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b6634:	9900      	ldr	r1, [sp, #0]
   b6636:	f7ff ffeb 	bl	b6610 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    String blank = "{\"nodes\":[]}";
   b663a:	4668      	mov	r0, sp
   b663c:	f009 f984 	bl	bf948 <_ZN6StringD1Ev>
}
   b6640:	b005      	add	sp, #20
   b6642:	f85d fb04 	ldr.w	pc, [sp], #4
   b6646:	bf00      	nop
   b6648:	000c41cb 	.word	0x000c41cb
   b664c:	000c41d8 	.word	0x000c41d8
   b6650:	2003e650 	.word	0x2003e650

000b6654 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b6654:	b570      	push	{r4, r5, r6, lr}
    Log.info("Erasing FRAM region");
   b6656:	4910      	ldr	r1, [pc, #64]	; (b6698 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b6658:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b665a:	4810      	ldr	r0, [pc, #64]	; (b669c <_ZN10nodeIDData10initializeEv+0x48>)
   b665c:	f7fd fd6f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6660:	25c8      	movs	r5, #200	; 0xc8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6662:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6664:	6803      	ldr	r3, [r0, #0]
   b6666:	4629      	mov	r1, r5
   b6668:	68de      	ldr	r6, [r3, #12]
   b666a:	22ff      	movs	r2, #255	; 0xff
   b666c:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b666e:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6670:	47b0      	blx	r6
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6672:	f5b5 6f9b 	cmp.w	r5, #1240	; 0x4d8
   b6676:	d1f4      	bne.n	b6662 <_ZN10nodeIDData10initializeEv+0xe>
    Log.info("Initializing data");
   b6678:	4909      	ldr	r1, [pc, #36]	; (b66a0 <_ZN10nodeIDData10initializeEv+0x4c>)
   b667a:	4808      	ldr	r0, [pc, #32]	; (b669c <_ZN10nodeIDData10initializeEv+0x48>)
   b667c:	f7fd fd5f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b6680:	4620      	mov	r0, r4
   b6682:	f006 f9c5 	bl	bca10 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b6686:	4620      	mov	r0, r4
   b6688:	f7ff ffc8 	bl	b661c <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();           // If you manually update fields here, be sure to update the hash
   b668c:	4620      	mov	r0, r4
}
   b668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    updateHash();           // If you manually update fields here, be sure to update the hash
   b6692:	f006 b91b 	b.w	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6696:	bf00      	nop
   b6698:	000c41f6 	.word	0x000c41f6
   b669c:	2003e650 	.word	0x2003e650
   b66a0:	000c420a 	.word	0x000c420a

000b66a4 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b66a4:	b510      	push	{r4, lr}
   b66a6:	4604      	mov	r4, r0
    fram.begin();
   b66a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b66aa:	f003 fbeb 	bl	b9e84 <_ZN6MB85RC5beginEv>
    nodeIDData::initialize();
   b66ae:	4620      	mov	r0, r4
   b66b0:	f7ff ffd0 	bl	b6654 <_ZN10nodeIDData10initializeEv>
    nodeDatabase
   b66b4:	f7ff ff7e 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b66b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b66bc:	6803      	ldr	r3, [r0, #0]
   b66be:	61c2      	str	r2, [r0, #28]
   b66c0:	685b      	ldr	r3, [r3, #4]
   b66c2:	4798      	blx	r3
    Log.info("sizeof(NodeData): %u", sizeof(NodeData));
   b66c4:	490c      	ldr	r1, [pc, #48]	; (b66f8 <_ZN10nodeIDData5setupEv+0x54>)
   b66c6:	480d      	ldr	r0, [pc, #52]	; (b66fc <_ZN10nodeIDData5setupEv+0x58>)
   b66c8:	f44f 6282 	mov.w	r2, #1040	; 0x410
   b66cc:	f7fd fd37 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!nodeDatabase.validate(sizeof(NodeData))) {                  // 64 is the size of the sysStatus storage object
   b66d0:	f7ff ff70 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b66d4:	6803      	ldr	r3, [r0, #0]
   b66d6:	f44f 6182 	mov.w	r1, #1040	; 0x410
   b66da:	695b      	ldr	r3, [r3, #20]
   b66dc:	4798      	blx	r3
   b66de:	b950      	cbnz	r0, b66f6 <_ZN10nodeIDData5setupEv+0x52>
        Log.info("nodeID object not valid - reinitializing");
   b66e0:	4907      	ldr	r1, [pc, #28]	; (b6700 <_ZN10nodeIDData5setupEv+0x5c>)
   b66e2:	4806      	ldr	r0, [pc, #24]	; (b66fc <_ZN10nodeIDData5setupEv+0x58>)
   b66e4:	f7fd fd2b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        nodeDatabase.initialize();
   b66e8:	f7ff ff64 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b66ec:	6803      	ldr	r3, [r0, #0]
}
   b66ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nodeDatabase.initialize();
   b66f2:	699b      	ldr	r3, [r3, #24]
   b66f4:	4718      	bx	r3
}
   b66f6:	bd10      	pop	{r4, pc}
   b66f8:	000c421c 	.word	0x000c421c
   b66fc:	2003e650 	.word	0x2003e650
   b6700:	000c4231 	.word	0x000c4231

000b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6704:	b538      	push	{r3, r4, r5, lr}
   b6706:	4604      	mov	r4, r0
   b6708:	3004      	adds	r0, #4
   b670a:	460d      	mov	r5, r1
   b670c:	f7ff fda6 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6710:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6712:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6714:	3b01      	subs	r3, #1
   b6716:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6718:	bf26      	itte	cs
   b671a:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b671c:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b671e:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6720:	f006 f9e4 	bl	bcaec <os_mutex_recursive_unlock>
        }
   b6724:	4628      	mov	r0, r5
   b6726:	bd38      	pop	{r3, r4, r5, pc}

000b6728 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b6728:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b672a:	2110      	movs	r1, #16
   b672c:	f7ff ffea 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6730:	bd08      	pop	{r3, pc}

000b6732 <_ZNK13sysStatusData17get_stayConnectedEv>:
uint8_t sysStatusData::get_stayConnected() const {
   b6732:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, stayConnected));
   b6734:	2114      	movs	r1, #20
   b6736:	f7ff ffe5 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b673a:	bd08      	pop	{r3, pc}

000b673c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b673c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b673e:	2115      	movs	r1, #21
   b6740:	f7ff ffe0 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6744:	bd08      	pop	{r3, pc}

000b6746 <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b6746:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b6748:	2116      	movs	r1, #22
   b674a:	f7ff ffdb 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b674e:	bd08      	pop	{r3, pc}

000b6750 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b6750:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b6752:	2138      	movs	r1, #56	; 0x38
   b6754:	f7ff ffd6 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6758:	bd08      	pop	{r3, pc}

000b675a <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b675a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b675c:	2139      	movs	r1, #57	; 0x39
   b675e:	f7ff ffd1 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6762:	bd08      	pop	{r3, pc}

000b6764 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b6764:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b6766:	213b      	movs	r1, #59	; 0x3b
   b6768:	f7ff ffcc 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b676c:	bd08      	pop	{r3, pc}

000b676e <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b676e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b6770:	2110      	movs	r1, #16
   b6772:	f7ff ffc7 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6776:	bd08      	pop	{r3, pc}

000b6778 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6778:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b677a:	2111      	movs	r1, #17
   b677c:	f7ff ffc2 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6780:	bd08      	pop	{r3, pc}

000b6782 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b6782:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b6784:	2114      	movs	r1, #20
   b6786:	f7ff ffbd 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b678a:	bd08      	pop	{r3, pc}

000b678c <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b678c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b678e:	2120      	movs	r1, #32
   b6790:	f7ff ffb8 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6794:	bd08      	pop	{r3, pc}

000b6796 <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b6796:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b6798:	2121      	movs	r1, #33	; 0x21
   b679a:	f7ff ffb3 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b679e:	bd08      	pop	{r3, pc}

000b67a0 <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b67a0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b67a2:	2124      	movs	r1, #36	; 0x24
   b67a4:	f7ff ffae 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67a8:	bd08      	pop	{r3, pc}

000b67aa <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b67aa:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b67ac:	2125      	movs	r1, #37	; 0x25
   b67ae:	f7ff ffa9 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67b2:	bd08      	pop	{r3, pc}

000b67b4 <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b67b4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b67b6:	2134      	movs	r1, #52	; 0x34
   b67b8:	f7ff ffa4 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67bc:	bd08      	pop	{r3, pc}

000b67be <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b67be:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b67c0:	2141      	movs	r1, #65	; 0x41
   b67c2:	f7ff ff9f 	bl	b6704 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b67c6:	bd08      	pop	{r3, pc}

000b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b67c8:	b570      	push	{r4, r5, r6, lr}
   b67ca:	4604      	mov	r4, r0
   b67cc:	3004      	adds	r0, #4
   b67ce:	460d      	mov	r5, r1
   b67d0:	4616      	mov	r6, r2
   b67d2:	f7ff fd43 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b67d6:	68e3      	ldr	r3, [r4, #12]
   b67d8:	3b01      	subs	r3, #1
   b67da:	42ab      	cmp	r3, r5
   b67dc:	d307      	bcc.n	b67ee <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b67de:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b67e0:	5d5a      	ldrb	r2, [r3, r5]
   b67e2:	42b2      	cmp	r2, r6
   b67e4:	d003      	beq.n	b67ee <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b67e6:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b67e8:	4620      	mov	r0, r4
   b67ea:	f006 f86f 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b67ee:	6860      	ldr	r0, [r4, #4]
        }
   b67f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b67f4:	f006 b97a 	b.w	bcaec <os_mutex_recursive_unlock>

000b67f8 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b67f8:	b508      	push	{r3, lr}
   b67fa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b67fc:	2110      	movs	r1, #16
   b67fe:	f7ff ffe3 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6802:	bd08      	pop	{r3, pc}

000b6804 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b6804:	b508      	push	{r3, lr}
   b6806:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6808:	2111      	movs	r1, #17
   b680a:	f7ff ffdd 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b680e:	bd08      	pop	{r3, pc}

000b6810 <_ZN13sysStatusData17set_stayConnectedEh>:
void sysStatusData::set_stayConnected(uint8_t value) {
   b6810:	b508      	push	{r3, lr}
   b6812:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, stayConnected), value);
   b6814:	2114      	movs	r1, #20
   b6816:	f7ff ffd7 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b681a:	bd08      	pop	{r3, pc}

000b681c <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b681c:	b508      	push	{r3, lr}
   b681e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b6820:	2115      	movs	r1, #21
   b6822:	f7ff ffd1 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6826:	bd08      	pop	{r3, pc}

000b6828 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b6828:	b508      	push	{r3, lr}
   b682a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b682c:	2116      	movs	r1, #22
   b682e:	f7ff ffcb 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6832:	bd08      	pop	{r3, pc}

000b6834 <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b6834:	b508      	push	{r3, lr}
   b6836:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b6838:	212e      	movs	r1, #46	; 0x2e
   b683a:	f7ff ffc5 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b683e:	bd08      	pop	{r3, pc}

000b6840 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b6840:	b508      	push	{r3, lr}
   b6842:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b6844:	2138      	movs	r1, #56	; 0x38
   b6846:	f7ff ffbf 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b684a:	bd08      	pop	{r3, pc}

000b684c <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b684c:	b508      	push	{r3, lr}
   b684e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b6850:	2139      	movs	r1, #57	; 0x39
   b6852:	f7ff ffb9 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6856:	bd08      	pop	{r3, pc}

000b6858 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b6858:	b508      	push	{r3, lr}
   b685a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b685c:	2110      	movs	r1, #16
   b685e:	f7ff ffb3 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6862:	bd08      	pop	{r3, pc}

000b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b6864:	b508      	push	{r3, lr}
   b6866:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b6868:	2111      	movs	r1, #17
   b686a:	f7ff ffad 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b686e:	bd08      	pop	{r3, pc}

000b6870 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b6870:	b508      	push	{r3, lr}
   b6872:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b6874:	2114      	movs	r1, #20
   b6876:	f7ff ffa7 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b687a:	bd08      	pop	{r3, pc}

000b687c <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b687c:	b508      	push	{r3, lr}
   b687e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b6880:	2120      	movs	r1, #32
   b6882:	f7ff ffa1 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6886:	bd08      	pop	{r3, pc}

000b6888 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6888:	b508      	push	{r3, lr}
   b688a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b688c:	2121      	movs	r1, #33	; 0x21
   b688e:	f7ff ff9b 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6892:	bd08      	pop	{r3, pc}

000b6894 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b6894:	b508      	push	{r3, lr}
   b6896:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b6898:	2124      	movs	r1, #36	; 0x24
   b689a:	f7ff ff95 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b689e:	bd08      	pop	{r3, pc}

000b68a0 <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b68a0:	b508      	push	{r3, lr}
   b68a2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b68a4:	2125      	movs	r1, #37	; 0x25
   b68a6:	f7ff ff8f 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68aa:	bd08      	pop	{r3, pc}

000b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b68ac:	b508      	push	{r3, lr}
   b68ae:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b68b0:	2134      	movs	r1, #52	; 0x34
   b68b2:	f7ff ff89 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68b6:	bd08      	pop	{r3, pc}

000b68b8 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b68b8:	b508      	push	{r3, lr}
   b68ba:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b68bc:	2141      	movs	r1, #65	; 0x41
   b68be:	f7ff ff83 	bl	b67c8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b68c2:	bd08      	pop	{r3, pc}

000b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b68c4:	b538      	push	{r3, r4, r5, lr}
   b68c6:	4604      	mov	r4, r0
   b68c8:	3004      	adds	r0, #4
   b68ca:	460d      	mov	r5, r1
   b68cc:	f7ff fcc6 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b68d0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b68d2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b68d4:	3b02      	subs	r3, #2
   b68d6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b68d8:	bf26      	itte	cs
   b68da:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b68dc:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b68de:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b68e0:	f006 f904 	bl	bcaec <os_mutex_recursive_unlock>
        }
   b68e4:	4628      	mov	r0, r5
   b68e6:	bd38      	pop	{r3, r4, r5, pc}

000b68e8 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b68e8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b68ea:	2112      	movs	r1, #18
   b68ec:	f7ff ffea 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b68f0:	bd08      	pop	{r3, pc}

000b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b68f2:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b68f4:	212a      	movs	r1, #42	; 0x2a
   b68f6:	f7ff ffe5 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b68fa:	bd08      	pop	{r3, pc}

000b68fc <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b68fc:	b513      	push	{r0, r1, r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b68fe:	f006 f821 	bl	bc944 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b6902:	4604      	mov	r4, r0
   b6904:	b1a8      	cbz	r0, b6932 <_ZN13sysStatusData8validateEj+0x36>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6906:	f7ff fd4d 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b690a:	f7ff ff21 	bl	b6750 <_ZNK13sysStatusData12get_openTimeEv>
   b690e:	280c      	cmp	r0, #12
   b6910:	d911      	bls.n	b6936 <_ZN13sysStatusData8validateEj+0x3a>
            Log.info("data not valid openTime=%d and closeTime=%d", sysStatus.get_openTime(), sysStatus.get_closeTime());
   b6912:	f7ff fd47 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6916:	f7ff ff1b 	bl	b6750 <_ZNK13sysStatusData12get_openTimeEv>
   b691a:	9001      	str	r0, [sp, #4]
   b691c:	f7ff fd42 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6920:	f7ff ff1b 	bl	b675a <_ZNK13sysStatusData13get_closeTimeEv>
   b6924:	9a01      	ldr	r2, [sp, #4]
   b6926:	491d      	ldr	r1, [pc, #116]	; (b699c <_ZN13sysStatusData8validateEj+0xa0>)
   b6928:	4603      	mov	r3, r0
   b692a:	481d      	ldr	r0, [pc, #116]	; (b69a0 <_ZN13sysStatusData8validateEj+0xa4>)
   b692c:	f7fd fc07 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b6930:	2400      	movs	r4, #0
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6932:	4a1c      	ldr	r2, [pc, #112]	; (b69a4 <_ZN13sysStatusData8validateEj+0xa8>)
   b6934:	e01a      	b.n	b696c <_ZN13sysStatusData8validateEj+0x70>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b6936:	f7ff fd35 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b693a:	f7ff ff0e 	bl	b675a <_ZNK13sysStatusData13get_closeTimeEv>
   b693e:	280b      	cmp	r0, #11
   b6940:	d9e7      	bls.n	b6912 <_ZN13sysStatusData8validateEj+0x16>
        else if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b6942:	f7ff fd2f 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6946:	f7ff ffd4 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b694a:	b1b0      	cbz	r0, b697a <_ZN13sysStatusData8validateEj+0x7e>
   b694c:	f7ff fd2a 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6950:	f7ff ffcf 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6954:	283c      	cmp	r0, #60	; 0x3c
   b6956:	d810      	bhi.n	b697a <_ZN13sysStatusData8validateEj+0x7e>
        else if (sysStatus.get_nodeNumber() != 0) {
   b6958:	f7ff fd24 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b695c:	f7ff fee4 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6960:	b9a8      	cbnz	r0, b698e <_ZN13sysStatusData8validateEj+0x92>
        else Log.info("SysData values verified");
   b6962:	4911      	ldr	r1, [pc, #68]	; (b69a8 <_ZN13sysStatusData8validateEj+0xac>)
   b6964:	480e      	ldr	r0, [pc, #56]	; (b69a0 <_ZN13sysStatusData8validateEj+0xa4>)
   b6966:	f7fd fbea 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b696a:	4a10      	ldr	r2, [pc, #64]	; (b69ac <_ZN13sysStatusData8validateEj+0xb0>)
   b696c:	4910      	ldr	r1, [pc, #64]	; (b69b0 <_ZN13sysStatusData8validateEj+0xb4>)
   b696e:	480c      	ldr	r0, [pc, #48]	; (b69a0 <_ZN13sysStatusData8validateEj+0xa4>)
   b6970:	f7fd fbe5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b6974:	4620      	mov	r0, r4
   b6976:	b002      	add	sp, #8
   b6978:	bd10      	pop	{r4, pc}
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b697a:	f7ff fd13 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b697e:	f7ff ffb8 	bl	b68f2 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b6982:	490c      	ldr	r1, [pc, #48]	; (b69b4 <_ZN13sysStatusData8validateEj+0xb8>)
   b6984:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6986:	4806      	ldr	r0, [pc, #24]	; (b69a0 <_ZN13sysStatusData8validateEj+0xa4>)
   b6988:	f7fd fbd9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b698c:	e7d0      	b.n	b6930 <_ZN13sysStatusData8validateEj+0x34>
   b698e:	f7ff fd09 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6992:	f7ff fec9 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6996:	4908      	ldr	r1, [pc, #32]	; (b69b8 <_ZN13sysStatusData8validateEj+0xbc>)
   b6998:	4602      	mov	r2, r0
   b699a:	e7f4      	b.n	b6986 <_ZN13sysStatusData8validateEj+0x8a>
   b699c:	000c425a 	.word	0x000c425a
   b69a0:	2003e650 	.word	0x2003e650
   b69a4:	000c412d 	.word	0x000c412d
   b69a8:	000c42ca 	.word	0x000c42ca
   b69ac:	000c4131 	.word	0x000c4131
   b69b0:	000c42e2 	.word	0x000c42e2
   b69b4:	000c4286 	.word	0x000c4286
   b69b8:	000c42ab 	.word	0x000c42ab

000b69bc <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b69bc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b69be:	212c      	movs	r1, #44	; 0x2c
   b69c0:	f7ff ff80 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69c4:	bd08      	pop	{r3, pc}

000b69c6 <_ZNK17currentStatusData10get_nodeIDEv>:
uint16_t currentStatusData::get_nodeID() const {
   b69c6:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeID));
   b69c8:	2112      	movs	r1, #18
   b69ca:	f7ff ff7b 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69ce:	bd08      	pop	{r3, pc}

000b69d0 <_ZNK17currentStatusData8get_RSSIEv>:
uint16_t currentStatusData::get_RSSI() const {
   b69d0:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, RSSI));
   b69d2:	2122      	movs	r1, #34	; 0x22
   b69d4:	f7ff ff76 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69d8:	bd08      	pop	{r3, pc}

000b69da <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b69da:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b69dc:	2130      	movs	r1, #48	; 0x30
   b69de:	f7ff ff71 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69e2:	bd08      	pop	{r3, pc}

000b69e4 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b69e4:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b69e6:	f005 ffad 	bl	bc944 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b69ea:	4604      	mov	r4, r0
   b69ec:	b1a0      	cbz	r0, b6a18 <_ZN17currentStatusData8validateEj+0x34>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount() > 1024) {
   b69ee:	f7ff fd3d 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b69f2:	f7ff fff2 	bl	b69da <_ZNK17currentStatusData15get_hourlyCountEv>
   b69f6:	f7ff fd39 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b69fa:	f7ff ffee 	bl	b69da <_ZNK17currentStatusData15get_hourlyCountEv>
   b69fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b6a02:	d90b      	bls.n	b6a1c <_ZN17currentStatusData8validateEj+0x38>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b6a04:	f7ff fd32 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6a08:	f7ff ffe7 	bl	b69da <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a0c:	490b      	ldr	r1, [pc, #44]	; (b6a3c <_ZN17currentStatusData8validateEj+0x58>)
   b6a0e:	4602      	mov	r2, r0
   b6a10:	480b      	ldr	r0, [pc, #44]	; (b6a40 <_ZN17currentStatusData8validateEj+0x5c>)
   b6a12:	f7fd fb94 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            valid = false;
   b6a16:	2400      	movs	r4, #0
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6a18:	4a0a      	ldr	r2, [pc, #40]	; (b6a44 <_ZN17currentStatusData8validateEj+0x60>)
   b6a1a:	e009      	b.n	b6a30 <_ZN17currentStatusData8validateEj+0x4c>
        else Log.info("current data hourlyCount valid at %d", current.get_hourlyCount());
   b6a1c:	f7ff fd26 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6a20:	f7ff ffdb 	bl	b69da <_ZNK17currentStatusData15get_hourlyCountEv>
   b6a24:	4908      	ldr	r1, [pc, #32]	; (b6a48 <_ZN17currentStatusData8validateEj+0x64>)
   b6a26:	4602      	mov	r2, r0
   b6a28:	4805      	ldr	r0, [pc, #20]	; (b6a40 <_ZN17currentStatusData8validateEj+0x5c>)
   b6a2a:	f7fd fb88 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6a2e:	4a07      	ldr	r2, [pc, #28]	; (b6a4c <_ZN17currentStatusData8validateEj+0x68>)
   b6a30:	4907      	ldr	r1, [pc, #28]	; (b6a50 <_ZN17currentStatusData8validateEj+0x6c>)
   b6a32:	4803      	ldr	r0, [pc, #12]	; (b6a40 <_ZN17currentStatusData8validateEj+0x5c>)
   b6a34:	f7fd fb83 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b6a38:	4620      	mov	r0, r4
   b6a3a:	bd10      	pop	{r4, pc}
   b6a3c:	000c42f7 	.word	0x000c42f7
   b6a40:	2003e650 	.word	0x2003e650
   b6a44:	000c412d 	.word	0x000c412d
   b6a48:	000c431d 	.word	0x000c431d
   b6a4c:	000c4131 	.word	0x000c4131
   b6a50:	000c4342 	.word	0x000c4342

000b6a54 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b6a54:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b6a56:	2132      	movs	r1, #50	; 0x32
   b6a58:	f7ff ff34 	bl	b68c4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6a5c:	bd08      	pop	{r3, pc}

000b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6a5e:	b570      	push	{r4, r5, r6, lr}
   b6a60:	4604      	mov	r4, r0
   b6a62:	3004      	adds	r0, #4
   b6a64:	460d      	mov	r5, r1
   b6a66:	4616      	mov	r6, r2
   b6a68:	f7ff fbf8 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a6c:	68e3      	ldr	r3, [r4, #12]
   b6a6e:	3b02      	subs	r3, #2
   b6a70:	42ab      	cmp	r3, r5
   b6a72:	d307      	bcc.n	b6a84 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6a74:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6a76:	5b5a      	ldrh	r2, [r3, r5]
   b6a78:	42b2      	cmp	r2, r6
   b6a7a:	d003      	beq.n	b6a84 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6a7c:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6a7e:	4620      	mov	r0, r4
   b6a80:	f005 ff24 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6a84:	6860      	ldr	r0, [r4, #4]
        }
   b6a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6a8a:	f006 b82f 	b.w	bcaec <os_mutex_recursive_unlock>

000b6a8e <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b6a8e:	b508      	push	{r3, lr}
   b6a90:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b6a92:	2112      	movs	r1, #18
   b6a94:	f7ff ffe3 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a98:	bd08      	pop	{r3, pc}

000b6a9a <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b6a9a:	b508      	push	{r3, lr}
   b6a9c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b6a9e:	2128      	movs	r1, #40	; 0x28
   b6aa0:	f7ff ffdd 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6aa4:	bd08      	pop	{r3, pc}

000b6aa6 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b6aa6:	b508      	push	{r3, lr}
   b6aa8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b6aaa:	212a      	movs	r1, #42	; 0x2a
   b6aac:	f7ff ffd7 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ab0:	bd08      	pop	{r3, pc}

000b6ab2 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b6ab2:	b508      	push	{r3, lr}
   b6ab4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6ab6:	212c      	movs	r1, #44	; 0x2c
   b6ab8:	f7ff ffd1 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6abc:	bd08      	pop	{r3, pc}

000b6abe <_ZN17currentStatusData10set_nodeIDEt>:
void currentStatusData::set_nodeID(uint16_t value) {
   b6abe:	b508      	push	{r3, lr}
   b6ac0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeID), value);
   b6ac2:	2112      	movs	r1, #18
   b6ac4:	f7ff ffcb 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ac8:	bd08      	pop	{r3, pc}

000b6aca <_ZN17currentStatusData8set_RSSIEt>:
void currentStatusData::set_RSSI(uint16_t value) {
   b6aca:	b508      	push	{r3, lr}
   b6acc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
   b6ace:	2122      	movs	r1, #34	; 0x22
   b6ad0:	f7ff ffc5 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ad4:	bd08      	pop	{r3, pc}

000b6ad6 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b6ad6:	b508      	push	{r3, lr}
   b6ad8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6ada:	2130      	movs	r1, #48	; 0x30
   b6adc:	f7ff ffbf 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6ae0:	bd08      	pop	{r3, pc}

000b6ae2 <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b6ae2:	b508      	push	{r3, lr}
   b6ae4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b6ae6:	2132      	movs	r1, #50	; 0x32
   b6ae8:	f7ff ffb9 	bl	b6a5e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6aec:	bd08      	pop	{r3, pc}

000b6aee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6af0:	4604      	mov	r4, r0
   b6af2:	3004      	adds	r0, #4
   b6af4:	460d      	mov	r5, r1
   b6af6:	f7ff fbb1 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6afa:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6afc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6afe:	3b08      	subs	r3, #8
   b6b00:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6b02:	bf23      	ittte	cs
   b6b04:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b6b06:	1949      	addcs	r1, r1, r5
   b6b08:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6b0c:	2600      	movcc	r6, #0
   b6b0e:	bf38      	it	cc
   b6b10:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6b12:	f005 ffeb 	bl	bcaec <os_mutex_recursive_unlock>
        }
   b6b16:	4630      	mov	r0, r6
   b6b18:	4639      	mov	r1, r7
   b6b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b1c <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6b1c:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6b1e:	2120      	movs	r1, #32
   b6b20:	f7ff ffe5 	bl	b6aee <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6b24:	bd08      	pop	{r3, pc}

000b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b28:	4604      	mov	r4, r0
   b6b2a:	3004      	adds	r0, #4
   b6b2c:	460d      	mov	r5, r1
   b6b2e:	461e      	mov	r6, r3
   b6b30:	4617      	mov	r7, r2
   b6b32:	f7ff fb93 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6b36:	68e3      	ldr	r3, [r4, #12]
   b6b38:	3b08      	subs	r3, #8
   b6b3a:	42ab      	cmp	r3, r5
   b6b3c:	d30c      	bcc.n	b6b58 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6b3e:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6b40:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6b42:	5958      	ldr	r0, [r3, r5]
   b6b44:	6851      	ldr	r1, [r2, #4]
   b6b46:	42b1      	cmp	r1, r6
   b6b48:	bf08      	it	eq
   b6b4a:	42b8      	cmpeq	r0, r7
   b6b4c:	d004      	beq.n	b6b58 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b6b4e:	515f      	str	r7, [r3, r5]
                        updateHash();
   b6b50:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6b52:	6056      	str	r6, [r2, #4]
                        updateHash();
   b6b54:	f005 feba 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6b58:	6860      	ldr	r0, [r4, #4]
        }
   b6b5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6b5e:	f005 bfc5 	b.w	bcaec <os_mutex_recursive_unlock>

000b6b62 <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b6b62:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b6b64:	2118      	movs	r1, #24
   b6b66:	f7ff ffde 	bl	b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b6a:	bd08      	pop	{r3, pc}

000b6b6c <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6b6c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6b6e:	2120      	movs	r1, #32
   b6b70:	f7ff ffd9 	bl	b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b74:	bd08      	pop	{r3, pc}

000b6b76 <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6b76:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6b78:	2130      	movs	r1, #48	; 0x30
   b6b7a:	f7ff ffd4 	bl	b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b7e:	bd08      	pop	{r3, pc}

000b6b80 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6b80:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6b82:	2128      	movs	r1, #40	; 0x28
   b6b84:	f7ff ffcf 	bl	b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b88:	bd08      	pop	{r3, pc}

000b6b8a <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6b8a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6b8c:	2138      	movs	r1, #56	; 0x38
   b6b8e:	f7ff ffca 	bl	b6b26 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6b92:	bd08      	pop	{r3, pc}

000b6b94 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6b94:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6b96:	4924      	ldr	r1, [pc, #144]	; (b6c28 <_ZN17currentStatusData15resetEverythingEv+0x94>)
   b6b98:	4824      	ldr	r0, [pc, #144]	; (b6c2c <_ZN17currentStatusData15resetEverythingEv+0x98>)
   b6b9a:	f7fd fad0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b6b9e:	f7ff fc65 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6ba2:	210b      	movs	r1, #11
   b6ba4:	f7ff fe58 	bl	b6858 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b6ba8:	f7ff fc60 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bac:	2100      	movs	r1, #0
   b6bae:	f7ff fe59 	bl	b6864 <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_nodeID(0);
   b6bb2:	f7ff fc5b 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bb6:	2100      	movs	r1, #0
   b6bb8:	f7ff ff81 	bl	b6abe <_ZN17currentStatusData10set_nodeIDEt>
  current.set_alertCodeNode(0);
   b6bbc:	f7ff fc56 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bc0:	2100      	movs	r1, #0
   b6bc2:	f7ff fe73 	bl	b68ac <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b6bc6:	f7ff fc51 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bca:	2200      	movs	r2, #0
   b6bcc:	2300      	movs	r3, #0
   b6bce:	f7ff ffdc 	bl	b6b8a <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b6bd2:	f7ff fc4b 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bd6:	2100      	movs	r1, #0
   b6bd8:	f7ff ff83 	bl	b6ae2 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6bdc:	f7ff fc46 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6be0:	2100      	movs	r1, #0
   b6be2:	f7ff ff78 	bl	b6ad6 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b6be6:	f7ff fc41 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bea:	2100      	movs	r1, #0
   b6bec:	f7ff fe52 	bl	b6894 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b6bf0:	f7ff fc3c 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bf4:	2100      	movs	r1, #0
   b6bf6:	f7ff fe53 	bl	b68a0 <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b6bfa:	f7ff fc37 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b6bfe:	4604      	mov	r4, r0
   b6c00:	f009 fa63 	bl	c00ca <_ZN9TimeClass3nowEv>
   b6c04:	4602      	mov	r2, r0
   b6c06:	17c3      	asrs	r3, r0, #31
   b6c08:	4620      	mov	r0, r4
   b6c0a:	f7ff ffb9 	bl	b6b80 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6c0e:	f7ff fbc9 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6c12:	2100      	movs	r1, #0
   b6c14:	f7ff fe02 	bl	b681c <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6c18:	f7ff fbc4 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
}
   b6c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6c20:	2100      	movs	r1, #0
   b6c22:	f7ff be01 	b.w	b6828 <_ZN13sysStatusData16set_messageCountEh>
   b6c26:	bf00      	nop
   b6c28:	000c4355 	.word	0x000c4355
   b6c2c:	2003e650 	.word	0x2003e650

000b6c30 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b6c30:	b510      	push	{r4, lr}
   b6c32:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6c34:	f005 feec 	bl	bca10 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b6c38:	4905      	ldr	r1, [pc, #20]	; (b6c50 <_ZN17currentStatusData10initializeEv+0x20>)
   b6c3a:	4806      	ldr	r0, [pc, #24]	; (b6c54 <_ZN17currentStatusData10initializeEv+0x24>)
   b6c3c:	f7fd fa7f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b6c40:	4620      	mov	r0, r4
   b6c42:	f7ff ffa7 	bl	b6b94 <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b6c46:	4620      	mov	r0, r4
}
   b6c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6c4c:	f005 be3e 	b.w	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6c50:	000c4376 	.word	0x000c4376
   b6c54:	2003e650 	.word	0x2003e650

000b6c58 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6c58:	b538      	push	{r3, r4, r5, lr}
   b6c5a:	4604      	mov	r4, r0
   b6c5c:	3004      	adds	r0, #4
   b6c5e:	460d      	mov	r5, r1
   b6c60:	f7ff fafc 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c64:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6c66:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c68:	3b01      	subs	r3, #1
   b6c6a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6c6c:	bf26      	itte	cs
   b6c6e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6c70:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6c72:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6c74:	f005 ff3a 	bl	bcaec <os_mutex_recursive_unlock>
        }
   b6c78:	4628      	mov	r0, r5
   b6c7a:	bd38      	pop	{r3, r4, r5, pc}

000b6c7c <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6c7c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6c7e:	2140      	movs	r1, #64	; 0x40
   b6c80:	f7ff ffea 	bl	b6c58 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6c84:	bd08      	pop	{r3, pc}

000b6c86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6c86:	b570      	push	{r4, r5, r6, lr}
   b6c88:	4604      	mov	r4, r0
   b6c8a:	3004      	adds	r0, #4
   b6c8c:	460d      	mov	r5, r1
   b6c8e:	4616      	mov	r6, r2
   b6c90:	f7ff fae4 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6c94:	68e3      	ldr	r3, [r4, #12]
   b6c96:	3b01      	subs	r3, #1
   b6c98:	42ab      	cmp	r3, r5
   b6c9a:	d307      	bcc.n	b6cac <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6c9c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6c9e:	5d5a      	ldrb	r2, [r3, r5]
   b6ca0:	42b2      	cmp	r2, r6
   b6ca2:	d003      	beq.n	b6cac <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b6ca4:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6ca6:	4620      	mov	r0, r4
   b6ca8:	f005 fe10 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6cac:	6860      	ldr	r0, [r4, #4]
        }
   b6cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6cb2:	f005 bf1b 	b.w	bcaec <os_mutex_recursive_unlock>

000b6cb6 <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6cb6:	b508      	push	{r3, lr}
   b6cb8:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6cba:	213a      	movs	r1, #58	; 0x3a
   b6cbc:	f7ff ffe3 	bl	b6c86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6cc0:	bd08      	pop	{r3, pc}
	...

000b6cc4 <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b6cc4:	b510      	push	{r4, lr}
   b6cc6:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6cc8:	f005 fea2 	bl	bca10 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b6ccc:	4928      	ldr	r1, [pc, #160]	; (b6d70 <_ZN13sysStatusData10initializeEv+0xac>)
   b6cce:	4829      	ldr	r0, [pc, #164]	; (b6d74 <_ZN13sysStatusData10initializeEv+0xb0>)
   b6cd0:	f7fd fa35 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6cd4:	f7ff fb66 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6cd8:	2100      	movs	r1, #0
   b6cda:	f7ff fd8d 	bl	b67f8 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b6cde:	f7ff fb61 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6ce2:	2101      	movs	r1, #1
   b6ce4:	f7ff fd8e 	bl	b6804 <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b6ce8:	f7ff fb5c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6cec:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6cf0:	f7ff fecd 	bl	b6a8e <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_stayConnected(0);
   b6cf4:	f7ff fb56 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6cf8:	2100      	movs	r1, #0
   b6cfa:	f7ff fd89 	bl	b6810 <_ZN13sysStatusData17set_stayConnectedEh>
    sysStatus.set_resetCount(0);
   b6cfe:	f7ff fb51 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d02:	2100      	movs	r1, #0
   b6d04:	f7ff fd8a 	bl	b681c <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_messageCount(0);
   b6d08:	f7ff fb4c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d0c:	2100      	movs	r1, #0
   b6d0e:	f7ff fd8b 	bl	b6828 <_ZN13sysStatusData16set_messageCountEh>
    sysStatus.set_lastHookResponse(0);
   b6d12:	f7ff fb47 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d16:	2200      	movs	r2, #0
   b6d18:	2300      	movs	r3, #0
   b6d1a:	f7ff ff22 	bl	b6b62 <_ZN13sysStatusData20set_lastHookResponseEx>
    sysStatus.set_frequencyMinutes(60);
   b6d1e:	f7ff fb41 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d22:	213c      	movs	r1, #60	; 0x3c
   b6d24:	f7ff febf 	bl	b6aa6 <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_updatedFrequencyMinutes(0);
   b6d28:	f7ff fb3c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d2c:	2100      	movs	r1, #0
   b6d2e:	f7ff fec0 	bl	b6ab2 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
    sysStatus.set_alertCodeGateway(0);
   b6d32:	f7ff fb37 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d36:	2100      	movs	r1, #0
   b6d38:	f7ff fd7c 	bl	b6834 <_ZN13sysStatusData20set_alertCodeGatewayEh>
    sysStatus.set_alertTimestampGateway(0);
   b6d3c:	f7ff fb32 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d40:	2200      	movs	r2, #0
   b6d42:	2300      	movs	r3, #0
   b6d44:	f7ff ff17 	bl	b6b76 <_ZN13sysStatusData25set_alertTimestampGatewayEx>
    sysStatus.set_openTime(6);
   b6d48:	f7ff fb2c 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d4c:	2106      	movs	r1, #6
   b6d4e:	f7ff fd77 	bl	b6840 <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(22);
   b6d52:	f7ff fb27 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d56:	2116      	movs	r1, #22
   b6d58:	f7ff fd78 	bl	b684c <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_verizonSIM(false);
   b6d5c:	f7ff fb22 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b6d60:	2100      	movs	r1, #0
   b6d62:	f7ff ffa8 	bl	b6cb6 <_ZN13sysStatusData14set_verizonSIMEb>
    updateHash();
   b6d66:	4620      	mov	r0, r4
}
   b6d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6d6c:	f005 bdae 	b.w	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6d70:	000c438f 	.word	0x000c438f
   b6d74:	2003e650 	.word	0x2003e650

000b6d78 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6d7c:	2140      	movs	r1, #64	; 0x40
   b6d7e:	f7ff ff82 	bl	b6c86 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6d82:	bd08      	pop	{r3, pc}

000b6d84 <_GLOBAL__sub_I_fram>:
}
   b6d84:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6d86:	f009 fc29 	bl	c05dc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6d8a:	4c05      	ldr	r4, [pc, #20]	; (b6da0 <_GLOBAL__sub_I_fram+0x1c>)
   b6d8c:	4601      	mov	r1, r0
   b6d8e:	2300      	movs	r3, #0
   b6d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6d94:	4620      	mov	r0, r4
   b6d96:	f003 f86b 	bl	b9e70 <_ZN6MB85RCC1ER7TwoWireji>
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <_GLOBAL__sub_I_fram+0x20>)
   b6d9c:	6023      	str	r3, [r4, #0]
}
   b6d9e:	bd10      	pop	{r4, pc}
   b6da0:	2003e470 	.word	0x2003e470
   b6da4:	000c43a8 	.word	0x000c43a8

000b6da8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6da8:	4770      	bx	lr

000b6daa <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6daa:	6a00      	ldr	r0, [r0, #32]
   b6dac:	6803      	ldr	r3, [r0, #0]
   b6dae:	68db      	ldr	r3, [r3, #12]
   b6db0:	4718      	bx	r3

000b6db2 <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6db2:	4770      	bx	lr

000b6db4 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6db4:	b510      	push	{r4, lr}
}
   b6db6:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6db8:	4604      	mov	r4, r0
}
   b6dba:	f7fd f970 	bl	b409e <_ZdlPvj>
   b6dbe:	4620      	mov	r0, r4
   b6dc0:	bd10      	pop	{r4, pc}
	...

000b6dc4 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6dc4:	b510      	push	{r4, lr}
   b6dc6:	4b03      	ldr	r3, [pc, #12]	; (b6dd4 <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6dc8:	6003      	str	r3, [r0, #0]
   b6dca:	4604      	mov	r4, r0
   b6dcc:	f001 fd9c 	bl	b8908 <_ZN10JsonParserD1Ev>
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	bd10      	pop	{r4, pc}
   b6dd4:	000c4850 	.word	0x000c4850

000b6dd8 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6dd8:	b510      	push	{r4, lr}
   b6dda:	4604      	mov	r4, r0
   b6ddc:	f7ff fff2 	bl	b6dc4 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6de0:	4620      	mov	r0, r4
   b6de2:	f640 112c 	movw	r1, #2348	; 0x92c
   b6de6:	f7fd f95a 	bl	b409e <_ZdlPvj>
   b6dea:	4620      	mov	r0, r4
   b6dec:	bd10      	pop	{r4, pc}

000b6dee <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6dee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6df0:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6df2:	6853      	ldr	r3, [r2, #4]
   b6df4:	6890      	ldr	r0, [r2, #8]
   b6df6:	6814      	ldr	r4, [r2, #0]
   b6df8:	105e      	asrs	r6, r3, #1
   b6dfa:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6dfe:	07db      	lsls	r3, r3, #31
   b6e00:	bf48      	it	mi
   b6e02:	5983      	ldrmi	r3, [r0, r6]
   b6e04:	4668      	mov	r0, sp
   b6e06:	bf48      	it	mi
   b6e08:	591c      	ldrmi	r4, [r3, r4]
   b6e0a:	f008 fe19 	bl	bfa40 <_ZN6StringC1EOS_>
   b6e0e:	4669      	mov	r1, sp
   b6e10:	4628      	mov	r0, r5
   b6e12:	47a0      	blx	r4
   b6e14:	4604      	mov	r4, r0
   b6e16:	4668      	mov	r0, sp
   b6e18:	f008 fd96 	bl	bf948 <_ZN6StringD1Ev>
      }
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	b004      	add	sp, #16
   b6e20:	bd70      	pop	{r4, r5, r6, pc}

000b6e22 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6e22:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e24:	b538      	push	{r3, r4, r5, lr}
   b6e26:	4604      	mov	r4, r0
	switch (__op)
   b6e28:	d102      	bne.n	b6e30 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6e2a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6e2c:	6023      	str	r3, [r4, #0]
	}
   b6e2e:	e003      	b.n	b6e38 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6e30:	2a02      	cmp	r2, #2
   b6e32:	d003      	beq.n	b6e3c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6e34:	2a03      	cmp	r2, #3
   b6e36:	d00d      	beq.n	b6e54 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6e38:	2000      	movs	r0, #0
   b6e3a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e3c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6e3e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e40:	f7fd f929 	bl	b4096 <_Znwj>
   b6e44:	4603      	mov	r3, r0
   b6e46:	2800      	cmp	r0, #0
   b6e48:	d0f0      	beq.n	b6e2c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6e52:	e7eb      	b.n	b6e2c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6e54:	6800      	ldr	r0, [r0, #0]
   b6e56:	2800      	cmp	r0, #0
   b6e58:	d0ee      	beq.n	b6e38 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6e5a:	210c      	movs	r1, #12
   b6e5c:	f7fd f91f 	bl	b409e <_ZdlPvj>
   b6e60:	e7ea      	b.n	b6e38 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6e62 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6e62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e64:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6e66:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6e68:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6e6a:	f001 ff2f 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6e6e:	b120      	cbz	r0, b6e7a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6e70:	9901      	ldr	r1, [sp, #4]
   b6e72:	462a      	mov	r2, r5
   b6e74:	4620      	mov	r0, r4
   b6e76:	f001 ff0b 	bl	b8c90 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6e7a:	b003      	add	sp, #12
   b6e7c:	bd30      	pop	{r4, r5, pc}
	...

000b6e80 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6e80:	4b0a      	ldr	r3, [pc, #40]	; (b6eac <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6e82:	b510      	push	{r4, lr}
   b6e84:	4604      	mov	r4, r0
   b6e86:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6e88:	f007 fbd2 	bl	be630 <_ZN5spark10LogManager8instanceEv>
   b6e8c:	4621      	mov	r1, r4
   b6e8e:	f007 fdd6 	bl	bea3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6e92:	f009 fa01 	bl	c0298 <_Z16_fetch_usbserialv>
   b6e96:	f009 f9f1 	bl	c027c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	4b04      	ldr	r3, [pc, #16]	; (b6eb0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6e9e:	f840 3b04 	str.w	r3, [r0], #4
   b6ea2:	f007 fc67 	bl	be774 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6ea6:	4620      	mov	r0, r4
   b6ea8:	bd10      	pop	{r4, pc}
   b6eaa:	bf00      	nop
   b6eac:	000c4838 	.word	0x000c4838
   b6eb0:	000c4820 	.word	0x000c4820

000b6eb4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6eb4:	b510      	push	{r4, lr}
   b6eb6:	4604      	mov	r4, r0
    }
   b6eb8:	f7ff ffe2 	bl	b6e80 <_ZN5spark16SerialLogHandlerD1Ev>
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	2124      	movs	r1, #36	; 0x24
   b6ec0:	f7fd f8ed 	bl	b409e <_ZdlPvj>
   b6ec4:	4620      	mov	r0, r4
   b6ec6:	bd10      	pop	{r4, pc}

000b6ec8 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6ec8:	b510      	push	{r4, lr}
    if (!_instance) {
   b6eca:	4c06      	ldr	r4, [pc, #24]	; (b6ee4 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6ecc:	6823      	ldr	r3, [r4, #0]
   b6ece:	b933      	cbnz	r3, b6ede <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6ed0:	2004      	movs	r0, #4
   b6ed2:	f7fd f8e0 	bl	b4096 <_Znwj>
   b6ed6:	b108      	cbz	r0, b6edc <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6ed8:	4b03      	ldr	r3, [pc, #12]	; (b6ee8 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6eda:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6edc:	6020      	str	r0, [r4, #0]
}
   b6ede:	6820      	ldr	r0, [r4, #0]
   b6ee0:	bd10      	pop	{r4, pc}
   b6ee2:	bf00      	nop
   b6ee4:	2003e490 	.word	0x2003e490
   b6ee8:	000c4860 	.word	0x000c4860

000b6eec <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6eec:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6eee:	4919      	ldr	r1, [pc, #100]	; (b6f54 <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6ef0:	b085      	sub	sp, #20
   b6ef2:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6ef4:	4818      	ldr	r0, [pc, #96]	; (b6f58 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6ef6:	f7fd f922 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6efa:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6efc:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6efe:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f00:	f7fd f8c9 	bl	b4096 <_Znwj>
   b6f04:	b118      	cbz	r0, b6f0e <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6f06:	4b15      	ldr	r3, [pc, #84]	; (b6f5c <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f08:	6084      	str	r4, [r0, #8]
   b6f0a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f0e:	4b14      	ldr	r3, [pc, #80]	; (b6f60 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f10:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f12:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6f14:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6f16:	4b13      	ldr	r3, [pc, #76]	; (b6f64 <_ZN18Particle_Functions5setupEv+0x78>)
   b6f18:	9302      	str	r3, [sp, #8]
   b6f1a:	f7fd f8bc 	bl	b4096 <_Znwj>
   b6f1e:	4604      	mov	r4, r0
   b6f20:	b178      	cbz	r0, b6f42 <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6f22:	2300      	movs	r3, #0
   b6f24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6f26:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b6f28:	b133      	cbz	r3, b6f38 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6f2a:	2202      	movs	r2, #2
   b6f2c:	4669      	mov	r1, sp
   b6f2e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6f30:	9b03      	ldr	r3, [sp, #12]
   b6f32:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6f34:	9b02      	ldr	r3, [sp, #8]
   b6f36:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b6f38:	4a0b      	ldr	r2, [pc, #44]	; (b6f68 <_ZN18Particle_Functions5setupEv+0x7c>)
   b6f3a:	480c      	ldr	r0, [pc, #48]	; (b6f6c <_ZN18Particle_Functions5setupEv+0x80>)
   b6f3c:	4621      	mov	r1, r4
   b6f3e:	f006 fbe4 	bl	bd70a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6f42:	9b02      	ldr	r3, [sp, #8]
   b6f44:	b11b      	cbz	r3, b6f4e <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6f46:	4669      	mov	r1, sp
   b6f48:	2203      	movs	r2, #3
   b6f4a:	4608      	mov	r0, r1
   b6f4c:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6f4e:	b005      	add	sp, #20
   b6f50:	bd30      	pop	{r4, r5, pc}
   b6f52:	bf00      	nop
   b6f54:	000c4440 	.word	0x000c4440
   b6f58:	2003e650 	.word	0x2003e650
   b6f5c:	000b6f71 	.word	0x000b6f71
   b6f60:	000b6def 	.word	0x000b6def
   b6f64:	000b6e23 	.word	0x000b6e23
   b6f68:	000c446e 	.word	0x000c446e
   b6f6c:	000bd6e3 	.word	0x000bd6e3

000b6f70 <_ZN18Particle_Functions18jsonFunctionParserE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::jsonFunctionParser(String command) {
   b6f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f74:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b6f78:	460c      	mov	r4, r1
    // const char * const commandString = "{\"cmd\":[{\"node\":1,\"var\":\"hourly\",\"fn\":\"reset\"},{\"node\":0,\"var\":1,\"fn\":\"lowpowermode\"},{\"node\":2,\"var\":\"daily\",\"fn\":\"report\"}]}";
    // String to put into Uber command window {"cmd":[{"node":1,"var":"hourly","fn":"reset"},{"node":0,"var":1,"fn":"lowpowermode"},{"node":2,"var":"daily","fn":"report"}]}

	int nodeNumber;
	String variable;
   b6f7a:	a809      	add	r0, sp, #36	; 0x24
   b6f7c:	49a8      	ldr	r1, [pc, #672]	; (b7220 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6f7e:	f008 fd2e 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b6f82:	49a7      	ldr	r1, [pc, #668]	; (b7220 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
   b6f84:	a80d      	add	r0, sp, #52	; 0x34
   b6f86:	f008 fd2a 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6f8a:	2350      	movs	r3, #80	; 0x50
   b6f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6f90:	9300      	str	r3, [sp, #0]
   b6f92:	a92c      	add	r1, sp, #176	; 0xb0
   b6f94:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b6f98:	a821      	add	r0, sp, #132	; 0x84
   b6f9a:	f001 fd17 	bl	b89cc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6f9e:	4ba1      	ldr	r3, [pc, #644]	; (b7224 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
  char messaging[64];
  bool success = true;

	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens

  Log.info(command.c_str());
   b6fa0:	6821      	ldr	r1, [r4, #0]
   b6fa2:	48a1      	ldr	r0, [pc, #644]	; (b7228 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6fa4:	9321      	str	r3, [sp, #132]	; 0x84
   b6fa6:	f7fd f8ca 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	jp.clear();
   b6faa:	a821      	add	r0, sp, #132	; 0x84
   b6fac:	f001 fd04 	bl	b89b8 <_ZN10JsonBuffer5clearEv>
   b6fb0:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6fb2:	9103      	str	r1, [sp, #12]
   b6fb4:	4608      	mov	r0, r1
   b6fb6:	f00a fa16 	bl	c13e6 <strlen>
   b6fba:	9903      	ldr	r1, [sp, #12]
   b6fbc:	4602      	mov	r2, r0
   b6fbe:	a821      	add	r0, sp, #132	; 0x84
   b6fc0:	f001 fcdd 	bl	b897e <_ZN10JsonBuffer7addDataEPKcj>
	jp.addString(command);
	if (!jp.parse()) {
   b6fc4:	a821      	add	r0, sp, #132	; 0x84
   b6fc6:	f002 fa33 	bl	b9430 <_ZN10JsonParser5parseEv>
   b6fca:	4604      	mov	r4, r0
   b6fcc:	b990      	cbnz	r0, b6ff4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x84>
		Log.info("Parsing failed - check syntax");
   b6fce:	4997      	ldr	r1, [pc, #604]	; (b722c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b6fd0:	4895      	ldr	r0, [pc, #596]	; (b7228 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6fd2:	f7fd f8b4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6fd6:	4b96      	ldr	r3, [pc, #600]	; (b7230 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6fd8:	4a94      	ldr	r2, [pc, #592]	; (b722c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b6fda:	781b      	ldrb	r3, [r3, #0]
   b6fdc:	f88d 3000 	strb.w	r3, [sp]
   b6fe0:	a811      	add	r0, sp, #68	; 0x44
   b6fe2:	4994      	ldr	r1, [pc, #592]	; (b7234 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b6fe4:	233c      	movs	r3, #60	; 0x3c
   b6fe6:	f006 fca1 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6fea:	a812      	add	r0, sp, #72	; 0x48
   b6fec:	f7fd fb54 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    Log.info(messaging);
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
	}
	return success;
   b6ff0:	4625      	mov	r5, r4
   b6ff2:	e017      	b.n	b7024 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6ff4:	a821      	add	r0, sp, #132	; 0x84
   b6ff6:	f001 fd04 	bl	b8a02 <_ZNK10JsonParser14getOuterObjectEv>
   b6ffa:	4a8e      	ldr	r2, [pc, #568]	; (b7234 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
		if (getValueTokenByKey(container, name, value)) {
   b6ffc:	4f8e      	ldr	r7, [pc, #568]	; (b7238 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6ffe:	f8df 828c 	ldr.w	r8, [pc, #652]	; b728c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b7002:	f8df 928c 	ldr.w	r9, [pc, #652]	; b7290 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b7006:	4601      	mov	r1, r0
   b7008:	ab06      	add	r3, sp, #24
   b700a:	a821      	add	r0, sp, #132	; 0x84
   b700c:	f001 fe5e 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b7010:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b7012:	9906      	ldr	r1, [sp, #24]
   b7014:	462a      	mov	r2, r5
   b7016:	a821      	add	r0, sp, #132	; 0x84
   b7018:	f001 fd15 	bl	b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b701c:	4606      	mov	r6, r0
   b701e:	b978      	cbnz	r0, b7040 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd0>
      if (i == 0) return 0;                                       // No valid entries
   b7020:	2d00      	cmp	r5, #0
   b7022:	d1e5      	bne.n	b6ff0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b7024:	a821      	add	r0, sp, #132	; 0x84
   b7026:	f7ff fecd 	bl	b6dc4 <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b702a:	a80d      	add	r0, sp, #52	; 0x34
   b702c:	f008 fc8c 	bl	bf948 <_ZN6StringD1Ev>
	String variable;
   b7030:	a809      	add	r0, sp, #36	; 0x24
   b7032:	f008 fc89 	bl	bf948 <_ZN6StringD1Ev>
}
   b7036:	4628      	mov	r0, r5
   b7038:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7040:	4601      	mov	r1, r0
   b7042:	ab07      	add	r3, sp, #28
   b7044:	463a      	mov	r2, r7
   b7046:	a821      	add	r0, sp, #132	; 0x84
   b7048:	f001 fe40 	bl	b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b704c:	b120      	cbz	r0, b7058 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xe8>
			return getTokenValue(value, result);
   b704e:	9907      	ldr	r1, [sp, #28]
   b7050:	aa04      	add	r2, sp, #16
   b7052:	a821      	add	r0, sp, #132	; 0x84
   b7054:	f001 fd50 	bl	b8af8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b7058:	ab09      	add	r3, sp, #36	; 0x24
   b705a:	4642      	mov	r2, r8
   b705c:	4631      	mov	r1, r6
   b705e:	a821      	add	r0, sp, #132	; 0x84
   b7060:	f7ff feff 	bl	b6e62 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b7064:	4631      	mov	r1, r6
   b7066:	a821      	add	r0, sp, #132	; 0x84
   b7068:	ab0d      	add	r3, sp, #52	; 0x34
   b706a:	464a      	mov	r2, r9
   b706c:	f7ff fef9 	bl	b6e62 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7070:	4972      	ldr	r1, [pc, #456]	; (b723c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b7072:	a80d      	add	r0, sp, #52	; 0x34
   b7074:	f008 fd79 	bl	bfb6a <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b7078:	2800      	cmp	r0, #0
   b707a:	d063      	beq.n	b7144 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1d4>
      if (nodeNumber == 0) {
   b707c:	9b04      	ldr	r3, [sp, #16]
   b707e:	2b00      	cmp	r3, #0
   b7080:	d145      	bne.n	b710e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x19e>
   b7082:	496f      	ldr	r1, [pc, #444]	; (b7240 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b7084:	a809      	add	r0, sp, #36	; 0x24
   b7086:	f008 fd70 	bl	bfb6a <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b708a:	b318      	cbz	r0, b70d4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b708c:	496d      	ldr	r1, [pc, #436]	; (b7244 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b708e:	a811      	add	r0, sp, #68	; 0x44
   b7090:	f00a f983 	bl	c139a <strcpy>
          nodeDatabase.resetNodeIDs();
   b7094:	f7ff fa8e 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b7098:	f7ff fac0 	bl	b661c <_ZN10nodeIDData12resetNodeIDsEv>
        current.resetEverything();
   b709c:	f7ff f9e6 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b70a0:	f7ff fd78 	bl	b6b94 <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b70a4:	4860      	ldr	r0, [pc, #384]	; (b7228 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b70a6:	a911      	add	r1, sp, #68	; 0x44
   b70a8:	f7fd f849 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b70ac:	f006 f852 	bl	bd154 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b70b0:	b160      	cbz	r0, b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
   b70b2:	4b5f      	ldr	r3, [pc, #380]	; (b7230 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b70b4:	495f      	ldr	r1, [pc, #380]	; (b7234 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
   b70b6:	781b      	ldrb	r3, [r3, #0]
   b70b8:	f88d 3000 	strb.w	r3, [sp]
   b70bc:	a807      	add	r0, sp, #28
   b70be:	233c      	movs	r3, #60	; 0x3c
   b70c0:	aa11      	add	r2, sp, #68	; 0x44
   b70c2:	f006 fc33 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b70c6:	a808      	add	r0, sp, #32
   b70c8:	f7fd fae6 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b70cc:	3501      	adds	r5, #1
   b70ce:	2d0a      	cmp	r5, #10
   b70d0:	d19f      	bne.n	b7012 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa2>
   b70d2:	e78d      	b.n	b6ff0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
   b70d4:	495c      	ldr	r1, [pc, #368]	; (b7248 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b70d6:	a809      	add	r0, sp, #36	; 0x24
   b70d8:	f008 fd47 	bl	bfb6a <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b70dc:	b190      	cbz	r0, b7104 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x194>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b70de:	495b      	ldr	r1, [pc, #364]	; (b724c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b70e0:	a811      	add	r0, sp, #68	; 0x44
   b70e2:	f00a f95a 	bl	c139a <strcpy>
            sysStatus.initialize();                     // All will reset system values as well
   b70e6:	f7ff f95d 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b70ea:	6803      	ldr	r3, [r0, #0]
   b70ec:	699b      	ldr	r3, [r3, #24]
   b70ee:	4798      	blx	r3
            current.resetEverything();
   b70f0:	f7ff f9bc 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b70f4:	f7ff fd4e 	bl	b6b94 <_ZN17currentStatusData15resetEverythingEv>
            nodeDatabase.initialize();
   b70f8:	f7ff fa5c 	bl	b65b4 <_ZN10nodeIDData8instanceEv>
   b70fc:	6803      	ldr	r3, [r0, #0]
   b70fe:	699b      	ldr	r3, [r3, #24]
   b7100:	4798      	blx	r3
   b7102:	e7cb      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b7104:	4952      	ldr	r1, [pc, #328]	; (b7250 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b7106:	a811      	add	r0, sp, #68	; 0x44
   b7108:	f00a f947 	bl	c139a <strcpy>
   b710c:	e7c6      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x12c>
   b710e:	494e      	ldr	r1, [pc, #312]	; (b7248 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b7110:	a809      	add	r0, sp, #36	; 0x24
   b7112:	f008 fd2a 	bl	bfb6a <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b7116:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b7118:	b158      	cbz	r0, b7132 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c2>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b711a:	4a4e      	ldr	r2, [pc, #312]	; (b7254 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b711c:	2140      	movs	r1, #64	; 0x40
   b711e:	a811      	add	r0, sp, #68	; 0x44
   b7120:	f006 f8e0 	bl	bd2e4 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b7124:	f7fd f824 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7128:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b712a:	9904      	ldr	r1, [sp, #16]
   b712c:	f7fd fed4 	bl	b4ed8 <_ZN14LoRA_Functions11changeAlertEii>
   b7130:	e7b8      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b7132:	4a49      	ldr	r2, [pc, #292]	; (b7258 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b7134:	2140      	movs	r1, #64	; 0x40
   b7136:	a811      	add	r0, sp, #68	; 0x44
   b7138:	f006 f8d4 	bl	bd2e4 <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b713c:	f7fd f818 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7140:	2206      	movs	r2, #6
   b7142:	e7f2      	b.n	b712a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ba>
   b7144:	4945      	ldr	r1, [pc, #276]	; (b725c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b7146:	a80d      	add	r0, sp, #52	; 0x34
   b7148:	f008 fd0f 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b714c:	b300      	cbz	r0, b7190 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x220>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b714e:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7150:	220a      	movs	r2, #10
   b7152:	a905      	add	r1, sp, #20
   b7154:	f00b f8b8 	bl	c22c8 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b7158:	1e43      	subs	r3, r0, #1
   b715a:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b715c:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b715e:	d811      	bhi.n	b7184 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x214>
   b7160:	233c      	movs	r3, #60	; 0x3c
   b7162:	fb93 f3f0 	sdiv	r3, r3, r0
   b7166:	4343      	muls	r3, r0
   b7168:	2b3c      	cmp	r3, #60	; 0x3c
   b716a:	d10b      	bne.n	b7184 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x214>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b716c:	4603      	mov	r3, r0
   b716e:	4a3c      	ldr	r2, [pc, #240]	; (b7260 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b7170:	2140      	movs	r1, #64	; 0x40
   b7172:	a811      	add	r0, sp, #68	; 0x44
   b7174:	f006 f8b6 	bl	bd2e4 <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b7178:	f7ff f914 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b717c:	b2b1      	uxth	r1, r6
   b717e:	f7ff fc98 	bl	b6ab2 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b7182:	e78f      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b7184:	4937      	ldr	r1, [pc, #220]	; (b7264 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b7186:	a811      	add	r0, sp, #68	; 0x44
   b7188:	f00a f907 	bl	c139a <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b718c:	2400      	movs	r4, #0
   b718e:	e789      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b7190:	4935      	ldr	r1, [pc, #212]	; (b7268 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b7192:	a80d      	add	r0, sp, #52	; 0x34
   b7194:	f008 fce9 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b7198:	b1b8      	cbz	r0, b71ca <_ZN18Particle_Functions18jsonFunctionParserE6String+0x25a>
   b719a:	4934      	ldr	r1, [pc, #208]	; (b726c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b719c:	a809      	add	r0, sp, #36	; 0x24
   b719e:	f008 fce4 	bl	bfb6a <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b71a2:	4606      	mov	r6, r0
   b71a4:	b148      	cbz	r0, b71ba <_ZN18Particle_Functions18jsonFunctionParserE6String+0x24a>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b71a6:	4932      	ldr	r1, [pc, #200]	; (b7270 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b71a8:	a811      	add	r0, sp, #68	; 0x44
   b71aa:	f00a f8f6 	bl	c139a <strcpy>
        sysStatus.set_stayConnected(1);
   b71ae:	f7ff f8f9 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b71b2:	2101      	movs	r1, #1
        sysStatus.set_stayConnected(0);
   b71b4:	f7ff fb2c 	bl	b6810 <_ZN13sysStatusData17set_stayConnectedEh>
   b71b8:	e774      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b71ba:	492e      	ldr	r1, [pc, #184]	; (b7274 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b71bc:	a811      	add	r0, sp, #68	; 0x44
   b71be:	f00a f8ec 	bl	c139a <strcpy>
        sysStatus.set_stayConnected(0);
   b71c2:	f7ff f8ef 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b71c6:	4631      	mov	r1, r6
   b71c8:	e7f4      	b.n	b71b4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x244>
   b71ca:	492b      	ldr	r1, [pc, #172]	; (b7278 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b71cc:	a80d      	add	r0, sp, #52	; 0x34
   b71ce:	f008 fccc 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b71d2:	b148      	cbz	r0, b71e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x278>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b71d4:	4929      	ldr	r1, [pc, #164]	; (b727c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b71d6:	a811      	add	r0, sp, #68	; 0x44
   b71d8:	f00a f8df 	bl	c139a <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b71dc:	f7fc ffc8 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b71e0:	2101      	movs	r1, #1
   b71e2:	f7fd fb43 	bl	b486c <_ZN14LoRA_Functions13printNodeDataEb>
   b71e6:	e75d      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b71e8:	4925      	ldr	r1, [pc, #148]	; (b7280 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b71ea:	a80d      	add	r0, sp, #52	; 0x34
   b71ec:	f008 fcbd 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b71f0:	2800      	cmp	r0, #0
   b71f2:	d04f      	beq.n	b7294 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x324>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b71f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b71f6:	220a      	movs	r2, #10
   b71f8:	a905      	add	r1, sp, #20
   b71fa:	f00b f865 	bl	c22c8 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b71fe:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7200:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7202:	d80b      	bhi.n	b721c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b7204:	4603      	mov	r3, r0
   b7206:	4a1f      	ldr	r2, [pc, #124]	; (b7284 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b7208:	2140      	movs	r1, #64	; 0x40
   b720a:	a811      	add	r0, sp, #68	; 0x44
   b720c:	f006 f86a 	bl	bd2e4 <snprintf>
        sysStatus.set_openTime(tempValue);
   b7210:	f7ff f8c8 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b7214:	b2f1      	uxtb	r1, r6
   b7216:	f7ff fb13 	bl	b6840 <_ZN13sysStatusData12set_openTimeEh>
   b721a:	e743      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b721c:	491a      	ldr	r1, [pc, #104]	; (b7288 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>)
   b721e:	e7b2      	b.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x216>
   b7220:	000c54f8 	.word	0x000c54f8
   b7224:	000c4850 	.word	0x000c4850
   b7228:	2003e650 	.word	0x2003e650
   b722c:	000c447f 	.word	0x000c447f
   b7230:	2003e48c 	.word	0x2003e48c
   b7234:	000c449d 	.word	0x000c449d
   b7238:	000c3929 	.word	0x000c3929
   b723c:	000c44a8 	.word	0x000c44a8
   b7240:	000c398a 	.word	0x000c398a
   b7244:	000c44ae 	.word	0x000c44ae
   b7248:	000c44d0 	.word	0x000c44d0
   b724c:	000c44d4 	.word	0x000c44d4
   b7250:	000c4504 	.word	0x000c4504
   b7254:	000c4529 	.word	0x000c4529
   b7258:	000c4555 	.word	0x000c4555
   b725c:	000c4576 	.word	0x000c4576
   b7260:	000c457b 	.word	0x000c457b
   b7264:	000c45a5 	.word	0x000c45a5
   b7268:	000c45c5 	.word	0x000c45c5
   b726c:	000c45ca 	.word	0x000c45ca
   b7270:	000c45cf 	.word	0x000c45cf
   b7274:	000c4603 	.word	0x000c4603
   b7278:	000c4625 	.word	0x000c4625
   b727c:	000c4629 	.word	0x000c4629
   b7280:	000c3ff8 	.word	0x000c3ff8
   b7284:	000c463e 	.word	0x000c463e
   b7288:	000c465c 	.word	0x000c465c
   b728c:	000c44a1 	.word	0x000c44a1
   b7290:	000c44a5 	.word	0x000c44a5
   b7294:	4931      	ldr	r1, [pc, #196]	; (b735c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3ec>)
   b7296:	a80d      	add	r0, sp, #52	; 0x34
   b7298:	f008 fc67 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b729c:	b1b8      	cbz	r0, b72ce <_ZN18Particle_Functions18jsonFunctionParserE6String+0x35e>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b729e:	9809      	ldr	r0, [sp, #36]	; 0x24
   b72a0:	220a      	movs	r2, #10
   b72a2:	a905      	add	r1, sp, #20
   b72a4:	f00b f810 	bl	c22c8 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b72a8:	f1a0 030d 	sub.w	r3, r0, #13
   b72ac:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72ae:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b72b0:	d80b      	bhi.n	b72ca <_ZN18Particle_Functions18jsonFunctionParserE6String+0x35a>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b72b2:	4603      	mov	r3, r0
   b72b4:	4a2a      	ldr	r2, [pc, #168]	; (b7360 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f0>)
   b72b6:	2140      	movs	r1, #64	; 0x40
   b72b8:	a811      	add	r0, sp, #68	; 0x44
   b72ba:	f006 f813 	bl	bd2e4 <snprintf>
        sysStatus.set_closeTime(tempValue);
   b72be:	f7ff f871 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b72c2:	b2f1      	uxtb	r1, r6
   b72c4:	f7ff fac2 	bl	b684c <_ZN13sysStatusData13set_closeTimeEh>
   b72c8:	e6ec      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b72ca:	4926      	ldr	r1, [pc, #152]	; (b7364 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f4>)
   b72cc:	e75b      	b.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x216>
   b72ce:	4926      	ldr	r1, [pc, #152]	; (b7368 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3f8>)
   b72d0:	a80d      	add	r0, sp, #52	; 0x34
   b72d2:	f008 fc4a 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b72d6:	b1e0      	cbz	r0, b7312 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3a2>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   b72da:	220a      	movs	r2, #10
   b72dc:	a905      	add	r1, sp, #20
   b72de:	f00a fff3 	bl	c22c8 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b72e2:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72e4:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b72e6:	d812      	bhi.n	b730e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x39e>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b72e8:	9b04      	ldr	r3, [sp, #16]
   b72ea:	4a20      	ldr	r2, [pc, #128]	; (b736c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3fc>)
   b72ec:	9300      	str	r3, [sp, #0]
   b72ee:	2140      	movs	r1, #64	; 0x40
   b72f0:	4603      	mov	r3, r0
   b72f2:	a811      	add	r0, sp, #68	; 0x44
   b72f4:	f005 fff6 	bl	bd2e4 <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b72f8:	f7fc ff3a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b72fc:	9904      	ldr	r1, [sp, #16]
   b72fe:	4632      	mov	r2, r6
   b7300:	f7fd fcfa 	bl	b4cf8 <_ZN14LoRA_Functions10changeTypeEii>
   b7304:	b338      	cbz	r0, b7356 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e6>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7306:	f7fc ff33 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b730a:	2207      	movs	r2, #7
   b730c:	e70d      	b.n	b712a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ba>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b730e:	4918      	ldr	r1, [pc, #96]	; (b7370 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x400>)
   b7310:	e739      	b.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x216>
   b7312:	4918      	ldr	r1, [pc, #96]	; (b7374 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x404>)
   b7314:	a80d      	add	r0, sp, #52	; 0x34
   b7316:	f008 fc28 	bl	bfb6a <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b731a:	b1d0      	cbz	r0, b7352 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3e2>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b731c:	9809      	ldr	r0, [sp, #36]	; 0x24
   b731e:	220a      	movs	r2, #10
   b7320:	a905      	add	r1, sp, #20
   b7322:	f00a ffd1 	bl	c22c8 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7326:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7328:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b732a:	d810      	bhi.n	b734e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3de>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b732c:	4a12      	ldr	r2, [pc, #72]	; (b7378 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x408>)
   b732e:	4b13      	ldr	r3, [pc, #76]	; (b737c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x40c>)
   b7330:	2140      	movs	r1, #64	; 0x40
   b7332:	2800      	cmp	r0, #0
   b7334:	bf08      	it	eq
   b7336:	4613      	moveq	r3, r2
   b7338:	4a11      	ldr	r2, [pc, #68]	; (b7380 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x410>)
   b733a:	a811      	add	r0, sp, #68	; 0x44
   b733c:	f005 ffd2 	bl	bd2e4 <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b7340:	f7ff f830 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b7344:	f006 0101 	and.w	r1, r6, #1
   b7348:	f7ff fcb5 	bl	b6cb6 <_ZN13sysStatusData14set_verizonSIMEb>
   b734c:	e6aa      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b734e:	490d      	ldr	r1, [pc, #52]	; (b7384 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x414>)
   b7350:	e719      	b.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x216>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b7352:	490d      	ldr	r1, [pc, #52]	; (b7388 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x418>)
   b7354:	e717      	b.n	b7186 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x216>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7356:	4604      	mov	r4, r0
   b7358:	e6a4      	b.n	b70a4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x134>
   b735a:	bf00      	nop
   b735c:	000c4675 	.word	0x000c4675
   b7360:	000c467b 	.word	0x000c467b
   b7364:	000c4699 	.word	0x000c4699
   b7368:	000c37b1 	.word	0x000c37b1
   b736c:	000c46b4 	.word	0x000c46b4
   b7370:	000c46da 	.word	0x000c46da
   b7374:	000c46f5 	.word	0x000c46f5
   b7378:	000c4792 	.word	0x000c4792
   b737c:	000c4477 	.word	0x000c4477
   b7380:	000c46f9 	.word	0x000c46f9
   b7384:	000c470b 	.word	0x000c470b
   b7388:	000c473b 	.word	0x000c473b

000b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b738c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b738e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7392:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7394:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7396:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b739a:	42ae      	cmp	r6, r5
   b739c:	d004      	beq.n	b73a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b739e:	4628      	mov	r0, r5
   b73a0:	f008 fad2 	bl	bf948 <_ZN6StringD1Ev>
   b73a4:	3514      	adds	r5, #20
   b73a6:	e7f8      	b.n	b739a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b73a8:	6820      	ldr	r0, [r4, #0]
   b73aa:	f005 ff7b 	bl	bd2a4 <free>
    AllocatorT::free(data_);
}
   b73ae:	4620      	mov	r0, r4
   b73b0:	bd70      	pop	{r4, r5, r6, pc}

000b73b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b73b2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73b6:	4604      	mov	r4, r0
   b73b8:	460d      	mov	r5, r1
   b73ba:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b73bc:	d916      	bls.n	b73ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b73be:	4290      	cmp	r0, r2
   b73c0:	d215      	bcs.n	b73ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b73c2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b73c6:	1a75      	subs	r5, r6, r1
   b73c8:	f1a1 0714 	sub.w	r7, r1, #20
   b73cc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b73ce:	42b7      	cmp	r7, r6
   b73d0:	d01c      	beq.n	b740c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b73d2:	b12c      	cbz	r4, b73e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b73d4:	4631      	mov	r1, r6
   b73d6:	4620      	mov	r0, r4
   b73d8:	f008 fb32 	bl	bfa40 <_ZN6StringC1EOS_>
   b73dc:	7c33      	ldrb	r3, [r6, #16]
   b73de:	7423      	strb	r3, [r4, #16]
   b73e0:	4630      	mov	r0, r6
   b73e2:	f008 fab1 	bl	bf948 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b73e6:	3e14      	subs	r6, #20
   b73e8:	3c14      	subs	r4, #20
   b73ea:	e7f0      	b.n	b73ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b73ec:	d00e      	beq.n	b740c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b73ee:	42b5      	cmp	r5, r6
   b73f0:	d00c      	beq.n	b740c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b73f2:	b12c      	cbz	r4, b7400 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b73f4:	4629      	mov	r1, r5
   b73f6:	4620      	mov	r0, r4
   b73f8:	f008 fb22 	bl	bfa40 <_ZN6StringC1EOS_>
   b73fc:	7c2b      	ldrb	r3, [r5, #16]
   b73fe:	7423      	strb	r3, [r4, #16]
   b7400:	4628      	mov	r0, r5
   b7402:	f008 faa1 	bl	bf948 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7406:	3514      	adds	r5, #20
   b7408:	3414      	adds	r4, #20
   b740a:	e7f0      	b.n	b73ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b740c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b740e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7412:	2300      	movs	r3, #0
   b7414:	e9c0 3300 	strd	r3, r3, [r0]
   b7418:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b741a:	684f      	ldr	r7, [r1, #4]
   b741c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b741e:	4604      	mov	r4, r0
   b7420:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7422:	dd23      	ble.n	b746c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7424:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b7428:	fb08 f007 	mul.w	r0, r8, r7
   b742c:	f005 ff32 	bl	bd294 <malloc>
            if (!d) {
   b7430:	4605      	mov	r5, r0
   b7432:	b1d8      	cbz	r0, b746c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b7434:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7438:	fb08 1202 	mla	r2, r8, r2, r1
   b743c:	f7ff ffb9 	bl	b73b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7440:	6820      	ldr	r0, [r4, #0]
   b7442:	f005 ff2f 	bl	bd2a4 <free>
        data_ = d;
   b7446:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7448:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b744a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b744e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b7452:	45b8      	cmp	r8, r7
   b7454:	d008      	beq.n	b7468 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b7456:	4639      	mov	r1, r7
   b7458:	4628      	mov	r0, r5
   b745a:	f008 fb0b 	bl	bfa74 <_ZN6StringC1ERKS_>
   b745e:	7c3b      	ldrb	r3, [r7, #16]
   b7460:	742b      	strb	r3, [r5, #16]
   b7462:	3714      	adds	r7, #20
   b7464:	3514      	adds	r5, #20
   b7466:	e7f4      	b.n	b7452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b7468:	6873      	ldr	r3, [r6, #4]
   b746a:	6063      	str	r3, [r4, #4]
}
   b746c:	4620      	mov	r0, r4
   b746e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b7474 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b7474:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b7476:	4b27      	ldr	r3, [pc, #156]	; (b7514 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b7478:	4a27      	ldr	r2, [pc, #156]	; (b7518 <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b747a:	2501      	movs	r5, #1
   b747c:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b747e:	4b27      	ldr	r3, [pc, #156]	; (b751c <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b7480:	2400      	movs	r4, #0
   b7482:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b7484:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7486:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b748a:	2002      	movs	r0, #2
   b748c:	f005 fdd8 	bl	bd040 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b7490:	4621      	mov	r1, r4
   b7492:	4628      	mov	r0, r5
   b7494:	f005 fdec 	bl	bd070 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b7498:	4629      	mov	r1, r5
   b749a:	2004      	movs	r0, #4
   b749c:	f005 fb3e 	bl	bcb1c <HAL_Feature_Set>
        capacity_(0) {
   b74a0:	e9cd 4400 	strd	r4, r4, [sp]
   b74a4:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b74a6:	f008 fef7 	bl	c0298 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b74aa:	4c1d      	ldr	r4, [pc, #116]	; (b7520 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b74ac:	4605      	mov	r5, r0
   b74ae:	4669      	mov	r1, sp
   b74b0:	a803      	add	r0, sp, #12
   b74b2:	f7ff ffac 	bl	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b74b6:	4626      	mov	r6, r4
        stream_(&stream) {
   b74b8:	a903      	add	r1, sp, #12
   b74ba:	a806      	add	r0, sp, #24
   b74bc:	f7ff ffa7 	bl	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b74c0:	4b18      	ldr	r3, [pc, #96]	; (b7524 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b74c2:	f846 3b04 	str.w	r3, [r6], #4
   b74c6:	a906      	add	r1, sp, #24
   b74c8:	a809      	add	r0, sp, #36	; 0x24
   b74ca:	f7ff ffa0 	bl	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b74ce:	aa09      	add	r2, sp, #36	; 0x24
   b74d0:	211e      	movs	r1, #30
   b74d2:	4630      	mov	r0, r6
   b74d4:	f007 fb96 	bl	bec04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b74d8:	a809      	add	r0, sp, #36	; 0x24
   b74da:	f7ff ff57 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b74de:	a806      	add	r0, sp, #24
   b74e0:	f7ff ff54 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74e4:	4b10      	ldr	r3, [pc, #64]	; (b7528 <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b74e6:	6023      	str	r3, [r4, #0]
   b74e8:	6225      	str	r5, [r4, #32]
   b74ea:	a803      	add	r0, sp, #12
   b74ec:	f7ff ff4e 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74f0:	4b0e      	ldr	r3, [pc, #56]	; (b752c <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b74f2:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b74f4:	f008 fed0 	bl	c0298 <_Z16_fetch_usbserialv>
   b74f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b74fc:	f008 feba 	bl	c0274 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b7500:	f007 f896 	bl	be630 <_ZN5spark10LogManager8instanceEv>
   b7504:	4621      	mov	r1, r4
   b7506:	f007 fa53 	bl	be9b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b750a:	4668      	mov	r0, sp
   b750c:	f7ff ff3e 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7510:	b00c      	add	sp, #48	; 0x30
   b7512:	bd70      	pop	{r4, r5, r6, pc}
   b7514:	2003e48c 	.word	0x2003e48c
   b7518:	ffff0000 	.word	0xffff0000
   b751c:	2003e480 	.word	0x2003e480
   b7520:	2003e494 	.word	0x2003e494
   b7524:	000c4820 	.word	0x000c4820
   b7528:	000c5528 	.word	0x000c5528
   b752c:	000c4838 	.word	0x000c4838

000b7530 <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b7530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7534:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b7536:	f008 fdc8 	bl	c00ca <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b753a:	4941      	ldr	r1, [pc, #260]	; (b7640 <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b753c:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b753e:	4841      	ldr	r0, [pc, #260]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7540:	f7fc fdfd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b7544:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b7546:	a801      	add	r0, sp, #4
   b7548:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b754c:	f8ad 400c 	strh.w	r4, [sp, #12]
   b7550:	f006 f8ec 	bl	bd72c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b7554:	4620      	mov	r0, r4
   b7556:	f005 fb11 	bl	bcb7c <hal_timer_millis>
        while (_while() && !_condition()) {
   b755a:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b755e:	4604      	mov	r4, r0
   b7560:	2000      	movs	r0, #0
   b7562:	f005 fb0b 	bl	bcb7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b7566:	1b03      	subs	r3, r0, r4
   b7568:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b756c:	42b3      	cmp	r3, r6
   b756e:	f171 0300 	sbcs.w	r3, r1, #0
   b7572:	d205      	bcs.n	b7580 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7574:	f005 fdee 	bl	bd154 <spark_cloud_flag_connected>
   b7578:	b110      	cbz	r0, b7580 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b757a:	f005 fddb 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   b757e:	e7ef      	b.n	b7560 <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b7580:	f005 fde8 	bl	bd154 <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7584:	f005 faea 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7588:	4f2f      	ldr	r7, [pc, #188]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b758a:	6038      	str	r0, [r7, #0]
    		spark_process();
   b758c:	f005 fdd2 	bl	bd134 <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7590:	f005 fde0 	bl	bd154 <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b7594:	4604      	mov	r4, r0
   b7596:	b140      	cbz	r0, b75aa <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b7598:	492c      	ldr	r1, [pc, #176]	; (b764c <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b759a:	482a      	ldr	r0, [pc, #168]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b759c:	f7fc fdcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b75a0:	2400      	movs	r4, #0
   b75a2:	4620      	mov	r0, r4
   b75a4:	b005      	add	sp, #20
   b75a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b75aa:	f008 fd8e 	bl	c00ca <_ZN9TimeClass3nowEv>
   b75ae:	4928      	ldr	r1, [pc, #160]	; (b7650 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b75b0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b7654 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b75b4:	1b42      	subs	r2, r0, r5
   b75b6:	4823      	ldr	r0, [pc, #140]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b75b8:	f7fc fdc1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b75bc:	f008 fd85 	bl	c00ca <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b75c0:	4622      	mov	r2, r4
   b75c2:	2102      	movs	r1, #2
   b75c4:	4606      	mov	r6, r0
   b75c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b75ca:	f005 fe13 	bl	bd1f4 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b75ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b75d2:	4623      	mov	r3, r4
   b75d4:	4622      	mov	r2, r4
   b75d6:	4621      	mov	r1, r4
   b75d8:	f005 fe24 	bl	bd224 <network_off>
        return hal_timer_millis(nullptr);
   b75dc:	4620      	mov	r0, r4
   b75de:	f005 facd 	bl	bcb7c <hal_timer_millis>
        while (_while() && !_condition()) {
   b75e2:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b75e6:	4605      	mov	r5, r0
   b75e8:	2000      	movs	r0, #0
   b75ea:	f005 fac7 	bl	bcb7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b75ee:	1b43      	subs	r3, r0, r5
   b75f0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b75f4:	454b      	cmp	r3, r9
   b75f6:	f171 0300 	sbcs.w	r3, r1, #0
   b75fa:	d206      	bcs.n	b760a <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b75fc:	4640      	mov	r0, r8
   b75fe:	f007 fe1f 	bl	bf240 <_ZN5spark12NetworkClass5isOffEv>
   b7602:	b910      	cbnz	r0, b760a <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b7604:	f005 fd96 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   b7608:	e7ee      	b.n	b75e8 <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b760a:	4812      	ldr	r0, [pc, #72]	; (b7654 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b760c:	f007 fe18 	bl	bf240 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b7610:	f005 faa4 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7614:	6038      	str	r0, [r7, #0]
    		spark_process();
   b7616:	f005 fd8d 	bl	bd134 <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b761a:	480e      	ldr	r0, [pc, #56]	; (b7654 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b761c:	f007 fe0c 	bl	bf238 <_ZN5spark12NetworkClass4isOnEv>
   b7620:	b120      	cbz	r0, b762c <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b7622:	490d      	ldr	r1, [pc, #52]	; (b7658 <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b7624:	4807      	ldr	r0, [pc, #28]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7626:	f7fc fd8a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b762a:	e7ba      	b.n	b75a2 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b762c:	f008 fd4d 	bl	c00ca <_ZN9TimeClass3nowEv>
   b7630:	490a      	ldr	r1, [pc, #40]	; (b765c <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b7632:	1b82      	subs	r2, r0, r6
   b7634:	4803      	ldr	r0, [pc, #12]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7636:	f7fc fd82 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b763a:	2401      	movs	r4, #1
   b763c:	e7b1      	b.n	b75a2 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b763e:	bf00      	nop
   b7640:	000c474f 	.word	0x000c474f
   b7644:	2003e650 	.word	0x2003e650
   b7648:	2003e710 	.word	0x2003e710
   b764c:	000c4778 	.word	0x000c4778
   b7650:	000c479b 	.word	0x000c479b
   b7654:	2003e60c 	.word	0x2003e60c
   b7658:	000c47c4 	.word	0x000c47c4
   b765c:	000c47ea 	.word	0x000c47ea

000b7660 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b7660:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b7662:	4917      	ldr	r1, [pc, #92]	; (b76c0 <_Z18initializePinModesv+0x60>)
   b7664:	4817      	ldr	r0, [pc, #92]	; (b76c4 <_Z18initializePinModesv+0x64>)
   b7666:	f7fc fd6a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b766a:	2102      	movs	r1, #2
   b766c:	2004      	movs	r0, #4
   b766e:	f008 ff2b 	bl	c04c8 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b7672:	2100      	movs	r1, #0
   b7674:	2008      	movs	r0, #8
   b7676:	f008 ff27 	bl	c04c8 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b767a:	2101      	movs	r1, #1
   b767c:	2007      	movs	r0, #7
   b767e:	f008 ff23 	bl	c04c8 <pinMode>
    pinMode(INT_PIN, INPUT);
   b7682:	2100      	movs	r1, #0
   b7684:	2012      	movs	r0, #18
   b7686:	f008 ff1f 	bl	c04c8 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b768a:	2101      	movs	r1, #1
   b768c:	2011      	movs	r0, #17
   b768e:	f008 ff1b 	bl	c04c8 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b7692:	2101      	movs	r1, #1
   b7694:	2010      	movs	r0, #16
   b7696:	f008 ff17 	bl	c04c8 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b769a:	2100      	movs	r1, #0
   b769c:	2010      	movs	r0, #16
   b769e:	f008 ff24 	bl	c04ea <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b76a2:	2100      	movs	r1, #0
   b76a4:	2011      	movs	r0, #17
   b76a6:	f008 ff20 	bl	c04ea <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b76aa:	2101      	movs	r1, #1
   b76ac:	2006      	movs	r0, #6
   b76ae:	f008 ff0b 	bl	c04c8 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b76b2:	2101      	movs	r1, #1
   b76b4:	2006      	movs	r0, #6
   b76b6:	f008 ff18 	bl	c04ea <digitalWrite>
    return true;
}
   b76ba:	2001      	movs	r0, #1
   b76bc:	bd08      	pop	{r3, pc}
   b76be:	bf00      	nop
   b76c0:	000c4868 	.word	0x000c4868
   b76c4:	2003e650 	.word	0x2003e650

000b76c8 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b76c8:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b76ca:	4918      	ldr	r1, [pc, #96]	; (b772c <_Z18initializePowerCfgv+0x64>)
   b76cc:	4818      	ldr	r0, [pc, #96]	; (b7730 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b76ce:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b76d0:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b76d2:	f7fc fd34 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b76d6:	4622      	mov	r2, r4
   b76d8:	2100      	movs	r1, #0
   b76da:	4668      	mov	r0, sp
   b76dc:	f009 fdb8 	bl	c1250 <memset>
   b76e0:	4622      	mov	r2, r4
   b76e2:	2100      	movs	r1, #0
   b76e4:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b76e8:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b76ec:	f009 fdb0 	bl	c1250 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b76f0:	2100      	movs	r1, #0
   b76f2:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b76f6:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b76fa:	f005 fcf5 	bl	bd0e8 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b76fe:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b7702:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b7706:	4b0b      	ldr	r3, [pc, #44]	; (b7734 <_Z18initializePowerCfgv+0x6c>)
   b7708:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b770a:	f241 0370 	movw	r3, #4208	; 0x1070
   b770e:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b7712:	9b00      	ldr	r3, [sp, #0]
   b7714:	2100      	movs	r1, #0
   b7716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b771a:	4668      	mov	r0, sp
   b771c:	9300      	str	r3, [sp, #0]
   b771e:	f005 fce3 	bl	bd0e8 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b7722:	3800      	subs	r0, #0
   b7724:	bf18      	it	ne
   b7726:	2001      	movne	r0, #1
   b7728:	b010      	add	sp, #64	; 0x40
   b772a:	bd10      	pop	{r4, pc}
   b772c:	000c4881 	.word	0x000c4881
   b7730:	2003e650 	.word	0x2003e650
   b7734:	03840384 	.word	0x03840384

000b7738 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b7738:	ee07 0a90 	vmov	s15, r0
   b773c:	ed9f 7a09 	vldr	s14, [pc, #36]	; b7764 <_Z17tmp36TemperatureCi+0x2c>
   b7740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7744:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7748:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7768 <_Z17tmp36TemperatureCi+0x30>
   b774c:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b7750:	eddf 7a06 	vldr	s15, [pc, #24]	; b776c <_Z17tmp36TemperatureCi+0x34>
   b7754:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b7758:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b775c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7760:	4770      	bx	lr
   b7762:	bf00      	nop
   b7764:	454e4000 	.word	0x454e4000
   b7768:	457ff000 	.word	0x457ff000
   b776c:	43fa0000 	.word	0x43fa0000

000b7770 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b7770:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b7772:	2101      	movs	r1, #1
   b7774:	a801      	add	r0, sp, #4
   b7776:	f007 fdf8 	bl	bf36a <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b777a:	f7fe fe77 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b777e:	f7ff f800 	bl	b6782 <_ZNK17currentStatusData17get_internalTempCEv>
   b7782:	f7fe fe73 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b7786:	f7fe fffc 	bl	b6782 <_ZNK17currentStatusData17get_internalTempCEv>
   b778a:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b778c:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b778e:	d90d      	bls.n	b77ac <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b7790:	f007 fe7e 	bl	bf490 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b7794:	f7fe fe6a 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b7798:	2101      	movs	r1, #1
   b779a:	f7ff f86f 	bl	b687c <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b779e:	2400      	movs	r4, #0
  PMIC pmic(true);
   b77a0:	a801      	add	r0, sp, #4
   b77a2:	f007 fdf1 	bl	bf388 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b77a6:	4620      	mov	r0, r4
   b77a8:	b002      	add	sp, #8
   b77aa:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b77ac:	f007 fe55 	bl	bf45a <_ZN4PMIC14enableChargingEv>
    return true;
   b77b0:	2401      	movs	r4, #1
   b77b2:	e7f5      	b.n	b77a0 <_Z16isItSafeToChargev+0x30>

000b77b4 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b77b4:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b77b6:	4d1b      	ldr	r5, [pc, #108]	; (b7824 <_Z17getSignalStrengthv+0x70>)
   b77b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b77ba:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b77bc:	ac10      	add	r4, sp, #64	; 0x40
   b77be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77c4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b77c8:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b77cc:	4916      	ldr	r1, [pc, #88]	; (b7828 <_Z17getSignalStrengthv+0x74>)
   b77ce:	a808      	add	r0, sp, #32
   b77d0:	f005 fe5a 	bl	bd488 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b77d4:	a808      	add	r0, sp, #32
   b77d6:	f005 fe9a 	bl	bd50e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b77da:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b77dc:	a808      	add	r0, sp, #32
   b77de:	f005 fecf 	bl	bd580 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b77e2:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b77e4:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b77e8:	f005 fefa 	bl	bd5e0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b77ec:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b77ee:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b77f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b77f6:	f009 f8f3 	bl	c09e0 <__aeabi_f2d>
   b77fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b77fe:	4628      	mov	r0, r5
   b7800:	f009 f8ee 	bl	c09e0 <__aeabi_f2d>
   b7804:	e9cd 0100 	strd	r0, r1, [sp]
   b7808:	2110      	movs	r1, #16
   b780a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b780e:	4a07      	ldr	r2, [pc, #28]	; (b782c <_Z17getSignalStrengthv+0x78>)
   b7810:	eb0d 0001 	add.w	r0, sp, r1
   b7814:	f005 fd66 	bl	bd2e4 <snprintf>
  Log.info(signalStr);
   b7818:	4805      	ldr	r0, [pc, #20]	; (b7830 <_Z17getSignalStrengthv+0x7c>)
   b781a:	a904      	add	r1, sp, #16
   b781c:	f7fc fc8f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b7820:	b01b      	add	sp, #108	; 0x6c
   b7822:	bd30      	pop	{r4, r5, pc}
   b7824:	000c4928 	.word	0x000c4928
   b7828:	2003e60c 	.word	0x2003e60c
   b782c:	000c48e6 	.word	0x000c48e6
   b7830:	2003e650 	.word	0x2003e650

000b7834 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b7834:	b530      	push	{r4, r5, lr}
   b7836:	b085      	sub	sp, #20
   b7838:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b783a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b783c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b783e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b7840:	f005 fbec 	bl	bd01c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b7844:	b990      	cbnz	r0, b786c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b7846:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b7848:	b10c      	cbz	r4, b784e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b784a:	6923      	ldr	r3, [r4, #16]
   b784c:	b923      	cbnz	r3, b7858 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b784e:	4a08      	ldr	r2, [pc, #32]	; (b7870 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b7850:	4908      	ldr	r1, [pc, #32]	; (b7874 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b7852:	200a      	movs	r0, #10
   b7854:	f005 fbaa 	bl	bcfac <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b7858:	230c      	movs	r3, #12
   b785a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b785e:	2304      	movs	r3, #4
   b7860:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b7862:	aa01      	add	r2, sp, #4
   b7864:	6923      	ldr	r3, [r4, #16]
   b7866:	2101      	movs	r1, #1
   b7868:	4620      	mov	r0, r4
   b786a:	4798      	blx	r3
}
   b786c:	b005      	add	sp, #20
   b786e:	bd30      	pop	{r4, r5, pc}
   b7870:	000bcb4d 	.word	0x000bcb4d
   b7874:	000c48ff 	.word	0x000c48ff

000b7878 <_Z12batteryStatev>:
bool batteryState() {
   b7878:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b787a:	f7fe fdf7 	bl	b646c <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b787e:	a901      	add	r1, sp, #4
   b7880:	4604      	mov	r4, r0
   b7882:	2007      	movs	r0, #7
   b7884:	f7ff ffd6 	bl	b7834 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b7888:	1e01      	subs	r1, r0, #0
        return val;
   b788a:	bfa8      	it	ge
   b788c:	9901      	ldrge	r1, [sp, #4]
   b788e:	4620      	mov	r0, r4
   b7890:	b2c9      	uxtb	r1, r1
   b7892:	f7fe fff3 	bl	b687c <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b7896:	4818      	ldr	r0, [pc, #96]	; (b78f8 <_Z12batteryStatev+0x80>)
   b7898:	f006 fa42 	bl	bdd20 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b789c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b78a0:	f005 fd78 	bl	bd394 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b78a4:	f7fe fde2 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b78a8:	a901      	add	r1, sp, #4
   b78aa:	4604      	mov	r4, r0
   b78ac:	2003      	movs	r0, #3
   b78ae:	f7ff ffc1 	bl	b7834 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b78b2:	b9e8      	cbnz	r0, b78f0 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b78b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b78b8:	ee07 3a90 	vmov	s15, r3
   b78bc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b78c0:	ee17 0a90 	vmov	r0, s15
   b78c4:	f009 f88c 	bl	c09e0 <__aeabi_f2d>
   b78c8:	ec41 0b10 	vmov	d0, r0, r1
   b78cc:	4620      	mov	r0, r4
   b78ce:	f7fe fe33 	bl	b6538 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b78d2:	f7fe fdcb 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b78d6:	f7fe fe0f 	bl	b64f8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b78da:	4b08      	ldr	r3, [pc, #32]	; (b78fc <_Z12batteryStatev+0x84>)
   b78dc:	ec51 0b10 	vmov	r0, r1, d0
   b78e0:	2200      	movs	r2, #0
   b78e2:	f009 fb65 	bl	c0fb0 <__aeabi_dcmpgt>
}
   b78e6:	3800      	subs	r0, #0
   b78e8:	bf18      	it	ne
   b78ea:	2001      	movne	r0, #1
   b78ec:	b002      	add	sp, #8
   b78ee:	bd10      	pop	{r4, pc}
            return -1.0f;
   b78f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b78f4:	e7e4      	b.n	b78c0 <_Z12batteryStatev+0x48>
   b78f6:	bf00      	nop
   b78f8:	2003e4b8 	.word	0x2003e4b8
   b78fc:	404e0000 	.word	0x404e0000

000b7900 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b7900:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b7902:	f7fe fdb3 	bl	b646c <_ZN17currentStatusData8instanceEv>
   b7906:	4b0f      	ldr	r3, [pc, #60]	; (b7944 <_Z16takeMeasurementsv+0x44>)
   b7908:	4604      	mov	r4, r0
   b790a:	8818      	ldrh	r0, [r3, #0]
   b790c:	f008 fe19 	bl	c0542 <analogRead>
   b7910:	f7ff ff12 	bl	b7738 <_Z17tmp36TemperatureCi>
   b7914:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7918:	4620      	mov	r0, r4
   b791a:	edcd 7a01 	vstr	s15, [sp, #4]
   b791e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b7922:	f7fe ffa5 	bl	b6870 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b7926:	f7ff ffa7 	bl	b7878 <_Z12batteryStatev>
    isItSafeToCharge();
   b792a:	f7ff ff21 	bl	b7770 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b792e:	f7fe fd39 	bl	b63a4 <_ZN13sysStatusData8instanceEv>
   b7932:	f7fe fef9 	bl	b6728 <_ZNK13sysStatusData14get_nodeNumberEv>
   b7936:	b908      	cbnz	r0, b793c <_Z16takeMeasurementsv+0x3c>
   b7938:	f7ff ff3c 	bl	b77b4 <_Z17getSignalStrengthv>
}
   b793c:	2001      	movs	r0, #1
   b793e:	b002      	add	sp, #8
   b7940:	bd10      	pop	{r4, pc}
   b7942:	bf00      	nop
   b7944:	000c48a6 	.word	0x000c48a6

000b7948 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b7948:	4801      	ldr	r0, [pc, #4]	; (b7950 <_GLOBAL__sub_I_batteryContext+0x8>)
   b794a:	2100      	movs	r1, #0
   b794c:	f006 b9a4 	b.w	bdc98 <_ZN9FuelGaugeC1Eb>
   b7950:	2003e4b8 	.word	0x2003e4b8

000b7954 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b7954:	4770      	bx	lr

000b7956 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b7956:	b510      	push	{r4, lr}
}
   b7958:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b795a:	4604      	mov	r4, r0
}
   b795c:	f7fc fb9f 	bl	b409e <_ZdlPvj>
   b7960:	4620      	mov	r0, r4
   b7962:	bd10      	pop	{r4, pc}

000b7964 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b7964:	b510      	push	{r4, lr}
   b7966:	4604      	mov	r4, r0
   b7968:	b08a      	sub	sp, #40	; 0x28
   b796a:	4608      	mov	r0, r1
    attr.flags = 0;
   b796c:	f04f 0c20 	mov.w	ip, #32
   b7970:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7972:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b7976:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b797a:	460b      	mov	r3, r1
   b797c:	aa02      	add	r2, sp, #8
   b797e:	6821      	ldr	r1, [r4, #0]
   b7980:	f005 fb24 	bl	bcfcc <log_message_v>
}
   b7984:	b00a      	add	sp, #40	; 0x28
   b7986:	bd10      	pop	{r4, pc}

000b7988 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b7988:	b40e      	push	{r1, r2, r3}
   b798a:	b503      	push	{r0, r1, lr}
   b798c:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b798e:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b7990:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7994:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b7996:	f7ff ffe5 	bl	b7964 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b799a:	b002      	add	sp, #8
   b799c:	f85d eb04 	ldr.w	lr, [sp], #4
   b79a0:	b003      	add	sp, #12
   b79a2:	4770      	bx	lr

000b79a4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b79a4:	b40e      	push	{r1, r2, r3}
   b79a6:	b503      	push	{r0, r1, lr}
   b79a8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b79aa:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b79ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b79b0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b79b2:	f7ff ffd7 	bl	b7964 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b79b6:	b002      	add	sp, #8
   b79b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b79bc:	b003      	add	sp, #12
   b79be:	4770      	bx	lr

000b79c0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79c0:	b510      	push	{r4, lr}
   b79c2:	7202      	strb	r2, [r0, #8]
   b79c4:	22ff      	movs	r2, #255	; 0xff
   b79c6:	8142      	strh	r2, [r0, #10]
   b79c8:	2200      	movs	r2, #0
   b79ca:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b79ce:	6142      	str	r2, [r0, #20]
   b79d0:	7602      	strb	r2, [r0, #24]
   b79d2:	61c2      	str	r2, [r0, #28]
    instance = this;
   b79d4:	4a02      	ldr	r2, [pc, #8]	; (b79e0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79d6:	4c03      	ldr	r4, [pc, #12]	; (b79e4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b79d8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79da:	e9c0 4100 	strd	r4, r1, [r0]
}
   b79de:	bd10      	pop	{r4, pc}
   b79e0:	2003e4c4 	.word	0x2003e4c4
   b79e4:	000c4ba0 	.word	0x000c4ba0

000b79e8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b79e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b79ec:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b79f0:	4604      	mov	r4, r0
   b79f2:	4689      	mov	r9, r1
   b79f4:	4616      	mov	r6, r2
   b79f6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b79f8:	f1b8 0f00 	cmp.w	r8, #0
   b79fc:	d002      	beq.n	b7a04 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b79fe:	6840      	ldr	r0, [r0, #4]
   b7a00:	f006 fa34 	bl	bde6c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7a04:	7a21      	ldrb	r1, [r4, #8]
   b7a06:	6860      	ldr	r0, [r4, #4]
   b7a08:	f006 fa0d 	bl	bde26 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7a0c:	6860      	ldr	r0, [r4, #4]
   b7a0e:	6803      	ldr	r3, [r0, #0]
   b7a10:	4649      	mov	r1, r9
   b7a12:	689b      	ldr	r3, [r3, #8]
   b7a14:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7a16:	6860      	ldr	r0, [r4, #4]
   b7a18:	2100      	movs	r1, #0
   b7a1a:	f006 fa23 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7a1e:	4605      	mov	r5, r0
   b7a20:	bb00      	cbnz	r0, b7a64 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7a22:	2301      	movs	r3, #1
   b7a24:	7a21      	ldrb	r1, [r4, #8]
   b7a26:	6860      	ldr	r0, [r4, #4]
   b7a28:	463a      	mov	r2, r7
   b7a2a:	f006 f9ea 	bl	bde02 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7a2e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7a30:	4603      	mov	r3, r0
        if (count == num) {
   b7a32:	d109      	bne.n	b7a48 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b7a34:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b7a36:	42be      	cmp	r6, r7
   b7a38:	d01c      	beq.n	b7a74 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7a3a:	6860      	ldr	r0, [r4, #4]
   b7a3c:	6803      	ldr	r3, [r0, #0]
   b7a3e:	695b      	ldr	r3, [r3, #20]
   b7a40:	4798      	blx	r3
   b7a42:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7a46:	e7f6      	b.n	b7a36 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7a48:	490b      	ldr	r1, [pc, #44]	; (b7a78 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7a4a:	480c      	ldr	r0, [pc, #48]	; (b7a7c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7a4c:	464a      	mov	r2, r9
   b7a4e:	f7ff ff9b 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7a52:	f1b8 0f00 	cmp.w	r8, #0
   b7a56:	d002      	beq.n	b7a5e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7a58:	6860      	ldr	r0, [r4, #4]
   b7a5a:	f006 fa10 	bl	bde7e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7a5e:	4628      	mov	r0, r5
   b7a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7a64:	4603      	mov	r3, r0
   b7a66:	4906      	ldr	r1, [pc, #24]	; (b7a80 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7a68:	4804      	ldr	r0, [pc, #16]	; (b7a7c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7a6a:	464a      	mov	r2, r9
   b7a6c:	f7ff ff8c 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7a70:	2500      	movs	r5, #0
   b7a72:	e7ee      	b.n	b7a52 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7a74:	2501      	movs	r5, #1
   b7a76:	e7ec      	b.n	b7a52 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7a78:	000c4950 	.word	0x000c4950
   b7a7c:	2003e4c0 	.word	0x2003e4c0
   b7a80:	000c4975 	.word	0x000c4975

000b7a84 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7a84:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7a86:	9300      	str	r3, [sp, #0]
   b7a88:	2301      	movs	r3, #1
   b7a8a:	f7ff ffad 	bl	b79e8 <_ZN6AB180513readRegistersEhPhjb>
}
   b7a8e:	b003      	add	sp, #12
   b7a90:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a94 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7a96:	8943      	ldrh	r3, [r0, #10]
   b7a98:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7a9a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7a9c:	d010      	beq.n	b7ac0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7a9e:	4e19      	ldr	r6, [pc, #100]	; (b7b04 <_ZN6AB180510detectChipEv+0x70>)
   b7aa0:	4d19      	ldr	r5, [pc, #100]	; (b7b08 <_ZN6AB180510detectChipEv+0x74>)
   b7aa2:	f005 f85b 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7aa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7aaa:	d209      	bcs.n	b7ac0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7aac:	8960      	ldrh	r0, [r4, #10]
   b7aae:	f008 fd35 	bl	c051c <digitalRead>
   b7ab2:	2801      	cmp	r0, #1
   b7ab4:	d004      	beq.n	b7ac0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7ab6:	4631      	mov	r1, r6
   b7ab8:	4628      	mov	r0, r5
   b7aba:	f7fc fb40 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7abe:	e7f0      	b.n	b7aa2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7ac0:	2301      	movs	r3, #1
   b7ac2:	f10d 0207 	add.w	r2, sp, #7
   b7ac6:	2128      	movs	r1, #40	; 0x28
   b7ac8:	4620      	mov	r0, r4
   b7aca:	f7ff ffdb 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7ace:	b930      	cbnz	r0, b7ade <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7ad0:	480d      	ldr	r0, [pc, #52]	; (b7b08 <_ZN6AB180510detectChipEv+0x74>)
   b7ad2:	490e      	ldr	r1, [pc, #56]	; (b7b0c <_ZN6AB180510detectChipEv+0x78>)
   b7ad4:	f7fc fb33 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7ad8:	2000      	movs	r0, #0
}
   b7ada:	b002      	add	sp, #8
   b7adc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7ade:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7ae2:	2b18      	cmp	r3, #24
   b7ae4:	d1f4      	bne.n	b7ad0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7ae6:	2301      	movs	r3, #1
   b7ae8:	f10d 0207 	add.w	r2, sp, #7
   b7aec:	2129      	movs	r1, #41	; 0x29
   b7aee:	4620      	mov	r0, r4
   b7af0:	f7ff ffc8 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7af4:	2800      	cmp	r0, #0
   b7af6:	d0eb      	beq.n	b7ad0 <_ZN6AB180510detectChipEv+0x3c>
   b7af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7afc:	2b05      	cmp	r3, #5
   b7afe:	d1e7      	bne.n	b7ad0 <_ZN6AB180510detectChipEv+0x3c>
   b7b00:	e7eb      	b.n	b7ada <_ZN6AB180510detectChipEv+0x46>
   b7b02:	bf00      	nop
   b7b04:	000c4999 	.word	0x000c4999
   b7b08:	2003e4c0 	.word	0x2003e4c0
   b7b0c:	000c49ae 	.word	0x000c49ae

000b7b10 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7b10:	b507      	push	{r0, r1, r2, lr}
   b7b12:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7b14:	2200      	movs	r2, #0
   b7b16:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7b1a:	f10d 0207 	add.w	r2, sp, #7
   b7b1e:	f7ff ffb1 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b7b22:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7b26:	b003      	add	sp, #12
   b7b28:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b2c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b30:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b7b34:	4604      	mov	r4, r0
   b7b36:	460f      	mov	r7, r1
   b7b38:	4615      	mov	r5, r2
   b7b3a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7b3c:	f1b8 0f00 	cmp.w	r8, #0
   b7b40:	d002      	beq.n	b7b48 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7b42:	6840      	ldr	r0, [r0, #4]
   b7b44:	f006 f992 	bl	bde6c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7b48:	7a21      	ldrb	r1, [r4, #8]
   b7b4a:	6860      	ldr	r0, [r4, #4]
   b7b4c:	f006 f96b 	bl	bde26 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7b50:	6860      	ldr	r0, [r4, #4]
   b7b52:	6803      	ldr	r3, [r0, #0]
   b7b54:	4639      	mov	r1, r7
   b7b56:	689b      	ldr	r3, [r3, #8]
   b7b58:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7b5a:	442e      	add	r6, r5
   b7b5c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7b5e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7b60:	d005      	beq.n	b7b6e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7b62:	6803      	ldr	r3, [r0, #0]
   b7b64:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7b68:	689b      	ldr	r3, [r3, #8]
   b7b6a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7b6c:	e7f6      	b.n	b7b5c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b7b6e:	2101      	movs	r1, #1
   b7b70:	f006 f978 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7b74:	4603      	mov	r3, r0
   b7b76:	b170      	cbz	r0, b7b96 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7b78:	4908      	ldr	r1, [pc, #32]	; (b7b9c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b7b7a:	4809      	ldr	r0, [pc, #36]	; (b7ba0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b7b7c:	463a      	mov	r2, r7
   b7b7e:	f7ff ff03 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7b82:	2500      	movs	r5, #0
    }

    if (lock) {
   b7b84:	f1b8 0f00 	cmp.w	r8, #0
   b7b88:	d002      	beq.n	b7b90 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b7b8a:	6860      	ldr	r0, [r4, #4]
   b7b8c:	f006 f977 	bl	bde7e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7b90:	4628      	mov	r0, r5
   b7b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7b96:	2501      	movs	r5, #1
   b7b98:	e7f4      	b.n	b7b84 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b7b9a:	bf00      	nop
   b7b9c:	000c49bb 	.word	0x000c49bb
   b7ba0:	2003e4c0 	.word	0x2003e4c0

000b7ba4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7ba6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b7baa:	9300      	str	r3, [sp, #0]
   b7bac:	f10d 020f 	add.w	r2, sp, #15
   b7bb0:	2301      	movs	r3, #1
   b7bb2:	f7ff ffbb 	bl	b7b2c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7bb6:	b005      	add	sp, #20
   b7bb8:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bbc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b7bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b7bbe:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7bc0:	460c      	mov	r4, r1
   b7bc2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7bc4:	491a      	ldr	r1, [pc, #104]	; (b7c30 <_ZN6AB18056setWDTEi+0x74>)
   b7bc6:	481b      	ldr	r0, [pc, #108]	; (b7c34 <_ZN6AB18056setWDTEi+0x78>)
   b7bc8:	f7fc fab9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7bcc:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b7bce:	bfb8      	it	lt
   b7bd0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7bd2:	b97c      	cbnz	r4, b7bf4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7bd4:	2301      	movs	r3, #1
   b7bd6:	4622      	mov	r2, r4
   b7bd8:	211b      	movs	r1, #27
   b7bda:	4628      	mov	r0, r5
   b7bdc:	f7ff ffe2 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7be0:	4915      	ldr	r1, [pc, #84]	; (b7c38 <_ZN6AB18056setWDTEi+0x7c>)
   b7be2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7be4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7be6:	4813      	ldr	r0, [pc, #76]	; (b7c34 <_ZN6AB18056setWDTEi+0x78>)
   b7be8:	f7ff fedc 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7bec:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b7bee:	616c      	str	r4, [r5, #20]
}
   b7bf0:	4630      	mov	r0, r6
   b7bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7bf4:	2c03      	cmp	r4, #3
   b7bf6:	dd19      	ble.n	b7c2c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7bf8:	10a7      	asrs	r7, r4, #2
   b7bfa:	2f1f      	cmp	r7, #31
   b7bfc:	bfa8      	it	ge
   b7bfe:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7c00:	00ba      	lsls	r2, r7, #2
   b7c02:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7c06:	2301      	movs	r3, #1
   b7c08:	b2d2      	uxtb	r2, r2
   b7c0a:	211b      	movs	r1, #27
   b7c0c:	4628      	mov	r0, r5
   b7c0e:	f7ff ffc9 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7c12:	463a      	mov	r2, r7
   b7c14:	4603      	mov	r3, r0
   b7c16:	4909      	ldr	r1, [pc, #36]	; (b7c3c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7c18:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7c1a:	4806      	ldr	r0, [pc, #24]	; (b7c34 <_ZN6AB18056setWDTEi+0x78>)
   b7c1c:	f7ff fec2 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7c24:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7c26:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7c28:	616f      	str	r7, [r5, #20]
   b7c2a:	e7e1      	b.n	b7bf0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7c2c:	2701      	movs	r7, #1
   b7c2e:	e7e7      	b.n	b7c00 <_ZN6AB18056setWDTEi+0x44>
   b7c30:	000c49e0 	.word	0x000c49e0
   b7c34:	2003e4c0 	.word	0x2003e4c0
   b7c38:	000c49ea 	.word	0x000c49ea
   b7c3c:	000c4a06 	.word	0x000c4a06

000b7c40 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7c40:	4b06      	ldr	r3, [pc, #24]	; (b7c5c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7c42:	681a      	ldr	r2, [r3, #0]
   b7c44:	b14a      	cbz	r2, b7c5a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7c46:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7c4a:	430b      	orrs	r3, r1
   b7c4c:	d105      	bne.n	b7c5a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7c4e:	68d3      	ldr	r3, [r2, #12]
   b7c50:	b11b      	cbz	r3, b7c5a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7c52:	2100      	movs	r1, #0
   b7c54:	4610      	mov	r0, r2
   b7c56:	f7ff bfb1 	b.w	b7bbc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7c5a:	4770      	bx	lr
   b7c5c:	2003e4c4 	.word	0x2003e4c4

000b7c60 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7c64:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7c68:	4605      	mov	r5, r0
   b7c6a:	4616      	mov	r6, r2
   b7c6c:	461f      	mov	r7, r3
    if (lock) {
   b7c6e:	f1b8 0f00 	cmp.w	r8, #0
   b7c72:	d004      	beq.n	b7c7e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7c74:	6840      	ldr	r0, [r0, #4]
   b7c76:	9101      	str	r1, [sp, #4]
   b7c78:	f006 f8f8 	bl	bde6c <_ZN7TwoWire4lockEv>
   b7c7c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7c7e:	9101      	str	r1, [sp, #4]
   b7c80:	2300      	movs	r3, #0
   b7c82:	f10d 020f 	add.w	r2, sp, #15
   b7c86:	4628      	mov	r0, r5
   b7c88:	f7ff fefc 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7c8c:	4604      	mov	r4, r0
   b7c8e:	b160      	cbz	r0, b7caa <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7c90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7c94:	ea03 0206 	and.w	r2, r3, r6
   b7c98:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7c9a:	4293      	cmp	r3, r2
   b7c9c:	d005      	beq.n	b7caa <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7c9e:	9901      	ldr	r1, [sp, #4]
   b7ca0:	2300      	movs	r3, #0
   b7ca2:	4628      	mov	r0, r5
   b7ca4:	f7ff ff7e 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
   b7ca8:	4604      	mov	r4, r0
    if (lock) {
   b7caa:	f1b8 0f00 	cmp.w	r8, #0
   b7cae:	d002      	beq.n	b7cb6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7cb0:	6868      	ldr	r0, [r5, #4]
   b7cb2:	f006 f8e4 	bl	bde7e <_ZN7TwoWire6unlockEv>
}
   b7cb6:	4620      	mov	r0, r4
   b7cb8:	b004      	add	sp, #16
   b7cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7cbe <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7cbe:	b513      	push	{r0, r1, r4, lr}
   b7cc0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7cc2:	f10d 0207 	add.w	r2, sp, #7
   b7cc6:	f7ff fedd 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7cca:	b128      	cbz	r0, b7cd8 <_ZN6AB180510isBitClearEhhb+0x1a>
   b7ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7cd0:	421c      	tst	r4, r3
   b7cd2:	bf0c      	ite	eq
   b7cd4:	2001      	moveq	r0, #1
   b7cd6:	2000      	movne	r0, #0
}
   b7cd8:	b002      	add	sp, #8
   b7cda:	bd10      	pop	{r4, pc}

000b7cdc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7cdc:	b513      	push	{r0, r1, r4, lr}
   b7cde:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7ce0:	f10d 0207 	add.w	r2, sp, #7
   b7ce4:	f7ff fece 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7ce8:	b128      	cbz	r0, b7cf6 <_ZN6AB18058isBitSetEhhb+0x1a>
   b7cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7cee:	421c      	tst	r4, r3
   b7cf0:	bf14      	ite	ne
   b7cf2:	2001      	movne	r0, #1
   b7cf4:	2000      	moveq	r0, #0
}
   b7cf6:	b002      	add	sp, #8
   b7cf8:	bd10      	pop	{r4, pc}

000b7cfa <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7cfa:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7cfc:	43d2      	mvns	r2, r2
   b7cfe:	9300      	str	r3, [sp, #0]
   b7d00:	b2d2      	uxtb	r2, r2
   b7d02:	2300      	movs	r3, #0
   b7d04:	f7ff ffac 	bl	b7c60 <_ZN6AB180512maskRegisterEhhhb>
}
   b7d08:	b003      	add	sp, #12
   b7d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d10 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7d12:	2301      	movs	r3, #1
   b7d14:	f10d 0207 	add.w	r2, sp, #7
   b7d18:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7d1a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7d1c:	f7ff feb2 	bl	b7a84 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7d20:	4605      	mov	r5, r0
   b7d22:	b938      	cbnz	r0, b7d34 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7d24:	491e      	ldr	r1, [pc, #120]	; (b7da0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7d26:	481f      	ldr	r0, [pc, #124]	; (b7da4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7d28:	22ad      	movs	r2, #173	; 0xad
   b7d2a:	f7ff fe2d 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
}
   b7d2e:	4628      	mov	r0, r5
   b7d30:	b003      	add	sp, #12
   b7d32:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7d38:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7d3c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7d40:	d00b      	beq.n	b7d5a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7d42:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7d44:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7d46:	210f      	movs	r1, #15
   b7d48:	4620      	mov	r0, r4
   b7d4a:	f7ff ffd6 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7d4e:	4a16      	ldr	r2, [pc, #88]	; (b7da8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7d50:	4916      	ldr	r1, [pc, #88]	; (b7dac <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7d52:	4814      	ldr	r0, [pc, #80]	; (b7da4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7d54:	f7fc f9f3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7d58:	e7e9      	b.n	b7d2e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7d5a:	2208      	movs	r2, #8
   b7d5c:	2117      	movs	r1, #23
   b7d5e:	4620      	mov	r0, r4
   b7d60:	f7ff ffbc 	bl	b7cdc <_ZN6AB18058isBitSetEhhb>
   b7d64:	b118      	cbz	r0, b7d6e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7d66:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7d68:	4a11      	ldr	r2, [pc, #68]	; (b7db0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7d6a:	61e3      	str	r3, [r4, #28]
   b7d6c:	e7f0      	b.n	b7d50 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7d72:	071a      	lsls	r2, r3, #28
   b7d74:	d509      	bpl.n	b7d8a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7d76:	2303      	movs	r3, #3
   b7d78:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7d7a:	2208      	movs	r2, #8
   b7d7c:	2301      	movs	r3, #1
   b7d7e:	210f      	movs	r1, #15
   b7d80:	4620      	mov	r0, r4
   b7d82:	f7ff ffba 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7d86:	4a0b      	ldr	r2, [pc, #44]	; (b7db4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7d88:	e7e2      	b.n	b7d50 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7d8a:	075b      	lsls	r3, r3, #29
   b7d8c:	d5cf      	bpl.n	b7d2e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7d8e:	2204      	movs	r2, #4
   b7d90:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7d92:	2301      	movs	r3, #1
   b7d94:	210f      	movs	r1, #15
   b7d96:	4620      	mov	r0, r4
   b7d98:	f7ff ffaf 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7d9c:	4a06      	ldr	r2, [pc, #24]	; (b7db8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7d9e:	e7d7      	b.n	b7d50 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7da0:	000c4a59 	.word	0x000c4a59
   b7da4:	2003e4c0 	.word	0x2003e4c0
   b7da8:	000c4a2a 	.word	0x000c4a2a
   b7dac:	000c4a78 	.word	0x000c4a78
   b7db0:	000c4a33 	.word	0x000c4a33
   b7db4:	000c4a43 	.word	0x000c4a43
   b7db8:	000c4a53 	.word	0x000c4a53

000b7dbc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7dbc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7dbe:	9300      	str	r3, [sp, #0]
   b7dc0:	4613      	mov	r3, r2
   b7dc2:	22ff      	movs	r2, #255	; 0xff
   b7dc4:	f7ff ff4c 	bl	b7c60 <_ZN6AB180512maskRegisterEhhhb>
}
   b7dc8:	b003      	add	sp, #12
   b7dca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7dd0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dd2:	460f      	mov	r7, r1
   b7dd4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7dd6:	2301      	movs	r3, #1
   b7dd8:	2200      	movs	r2, #0
   b7dda:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7ddc:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7dde:	f7ff fee1 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7de2:	4604      	mov	r4, r0
   b7de4:	b938      	cbnz	r0, b7df6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7de6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7dea:	491f      	ldr	r1, [pc, #124]	; (b7e68 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7dec:	481f      	ldr	r0, [pc, #124]	; (b7e6c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7dee:	f7ff fdcb 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
}
   b7df2:	4620      	mov	r0, r4
   b7df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7df6:	2301      	movs	r3, #1
   b7df8:	2223      	movs	r2, #35	; 0x23
   b7dfa:	2118      	movs	r1, #24
   b7dfc:	4628      	mov	r0, r5
   b7dfe:	f7ff fed1 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e02:	4604      	mov	r4, r0
   b7e04:	b910      	cbnz	r0, b7e0c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7e06:	f240 229b 	movw	r2, #667	; 0x29b
   b7e0a:	e7ee      	b.n	b7dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7e0c:	2fff      	cmp	r7, #255	; 0xff
   b7e0e:	bfa8      	it	ge
   b7e10:	27ff      	movge	r7, #255	; 0xff
   b7e12:	2f01      	cmp	r7, #1
   b7e14:	bfb8      	it	lt
   b7e16:	2701      	movlt	r7, #1
   b7e18:	2301      	movs	r3, #1
   b7e1a:	b2fa      	uxtb	r2, r7
   b7e1c:	2119      	movs	r1, #25
   b7e1e:	4628      	mov	r0, r5
   b7e20:	f7ff fec0 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e24:	4604      	mov	r4, r0
   b7e26:	b910      	cbnz	r0, b7e2e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7e28:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7e2c:	e7dd      	b.n	b7dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7e2e:	2301      	movs	r3, #1
   b7e30:	2208      	movs	r2, #8
   b7e32:	2112      	movs	r1, #18
   b7e34:	4628      	mov	r0, r5
   b7e36:	f7ff ffc1 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7e3a:	4604      	mov	r4, r0
   b7e3c:	b910      	cbnz	r0, b7e44 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7e3e:	f240 22af 	movw	r2, #687	; 0x2af
   b7e42:	e7d2      	b.n	b7dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7e44:	2e00      	cmp	r6, #0
   b7e46:	bf14      	ite	ne
   b7e48:	2203      	movne	r2, #3
   b7e4a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7e4c:	2301      	movs	r3, #1
   b7e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7e52:	2118      	movs	r1, #24
   b7e54:	4628      	mov	r0, r5
   b7e56:	f7ff fea5 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e5a:	4604      	mov	r4, r0
   b7e5c:	2800      	cmp	r0, #0
   b7e5e:	d1c8      	bne.n	b7df2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7e60:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7e64:	e7c1      	b.n	b7dea <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7e66:	bf00      	nop
   b7e68:	000c4a89 	.word	0x000c4a89
   b7e6c:	2003e4c0 	.word	0x2003e4c0

000b7e70 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7e74:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7e76:	4605      	mov	r5, r0
   b7e78:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7e7a:	484f      	ldr	r0, [pc, #316]	; (b7fb8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7e7c:	494f      	ldr	r1, [pc, #316]	; (b7fbc <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7e7e:	f7fc f95e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7e82:	2100      	movs	r1, #0
   b7e84:	4628      	mov	r0, r5
   b7e86:	f7ff fe99 	bl	b7bbc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7e8a:	4604      	mov	r4, r0
   b7e8c:	b948      	cbnz	r0, b7ea2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7e8e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7e92:	494b      	ldr	r1, [pc, #300]	; (b7fc0 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7e94:	4848      	ldr	r0, [pc, #288]	; (b7fb8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7e96:	f7ff fd77 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
}
   b7e9a:	4620      	mov	r0, r4
   b7e9c:	b003      	add	sp, #12
   b7e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7ea2:	2301      	movs	r3, #1
   b7ea4:	461a      	mov	r2, r3
   b7ea6:	2130      	movs	r1, #48	; 0x30
   b7ea8:	4628      	mov	r0, r5
   b7eaa:	f7ff ff87 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7eae:	4604      	mov	r4, r0
   b7eb0:	b910      	cbnz	r0, b7eb8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7eb2:	f240 2205 	movw	r2, #517	; 0x205
   b7eb6:	e7ec      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7eb8:	2210      	movs	r2, #16
   b7eba:	2301      	movs	r3, #1
   b7ebc:	4611      	mov	r1, r2
   b7ebe:	4628      	mov	r0, r5
   b7ec0:	f7ff ff1b 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7ec4:	4604      	mov	r4, r0
   b7ec6:	b910      	cbnz	r0, b7ece <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7ec8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7ecc:	e7e1      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b7ece:	2301      	movs	r3, #1
   b7ed0:	2226      	movs	r2, #38	; 0x26
   b7ed2:	2113      	movs	r1, #19
   b7ed4:	4628      	mov	r0, r5
   b7ed6:	f7ff fe65 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7eda:	4604      	mov	r4, r0
   b7edc:	b910      	cbnz	r0, b7ee4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b7ede:	f240 2213 	movw	r2, #531	; 0x213
   b7ee2:	e7d6      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7ee4:	2601      	movs	r6, #1
   b7ee6:	9600      	str	r6, [sp, #0]
   b7ee8:	4633      	mov	r3, r6
   b7eea:	22fc      	movs	r2, #252	; 0xfc
   b7eec:	2111      	movs	r1, #17
   b7eee:	4628      	mov	r0, r5
   b7ef0:	f7ff feb6 	bl	b7c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7ef4:	4604      	mov	r4, r0
   b7ef6:	b910      	cbnz	r0, b7efe <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b7ef8:	f240 221b 	movw	r2, #539	; 0x21b
   b7efc:	e7c9      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b7efe:	2200      	movs	r2, #0
   b7f00:	4639      	mov	r1, r7
   b7f02:	4628      	mov	r0, r5
   b7f04:	f7ff ff64 	bl	b7dd0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b7f08:	4604      	mov	r4, r0
   b7f0a:	b910      	cbnz	r0, b7f12 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b7f0c:	f240 2222 	movw	r2, #546	; 0x222
   b7f10:	e7bf      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b7f12:	9600      	str	r6, [sp, #0]
   b7f14:	2302      	movs	r3, #2
   b7f16:	2277      	movs	r2, #119	; 0x77
   b7f18:	2110      	movs	r1, #16
   b7f1a:	4628      	mov	r0, r5
   b7f1c:	f7ff fea0 	bl	b7c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7f20:	4604      	mov	r4, r0
   b7f22:	b910      	cbnz	r0, b7f2a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b7f24:	f240 222b 	movw	r2, #555	; 0x22b
   b7f28:	e7b3      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b7f2a:	4633      	mov	r3, r6
   b7f2c:	2204      	movs	r2, #4
   b7f2e:	211c      	movs	r1, #28
   b7f30:	4628      	mov	r0, r5
   b7f32:	f7ff ff43 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7f36:	4604      	mov	r4, r0
   b7f38:	b910      	cbnz	r0, b7f40 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b7f3a:	f240 2232 	movw	r2, #562	; 0x232
   b7f3e:	e7a8      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7f40:	9600      	str	r6, [sp, #0]
   b7f42:	2318      	movs	r3, #24
   b7f44:	22e3      	movs	r2, #227	; 0xe3
   b7f46:	2111      	movs	r1, #17
   b7f48:	4628      	mov	r0, r5
   b7f4a:	f7ff fe89 	bl	b7c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7f4e:	4604      	mov	r4, r0
   b7f50:	b910      	cbnz	r0, b7f58 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7f52:	f240 2239 	movw	r2, #569	; 0x239
   b7f56:	e79c      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7f58:	4633      	mov	r3, r6
   b7f5a:	22c0      	movs	r2, #192	; 0xc0
   b7f5c:	2117      	movs	r1, #23
   b7f5e:	4628      	mov	r0, r5
   b7f60:	f7ff fe20 	bl	b7ba4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f64:	4604      	mov	r4, r0
   b7f66:	b910      	cbnz	r0, b7f6e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7f68:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7f6c:	e791      	b.n	b7e92 <_ZN6AB180513deepPowerDownEi+0x22>
   b7f6e:	f004 fdf5 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7f72:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7fc8 <_ZN6AB180513deepPowerDownEi+0x158>
   b7f76:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7fb8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7f7e:	4606      	mov	r6, r0
   b7f80:	434f      	muls	r7, r1
   b7f82:	f004 fdeb 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   b7f86:	1b80      	subs	r0, r0, r6
   b7f88:	42b8      	cmp	r0, r7
   b7f8a:	d20e      	bcs.n	b7faa <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7f8c:	2201      	movs	r2, #1
   b7f8e:	2117      	movs	r1, #23
   b7f90:	4628      	mov	r0, r5
   b7f92:	f7ff fdbd 	bl	b7b10 <_ZN6AB180512readRegisterEhb>
   b7f96:	4649      	mov	r1, r9
   b7f98:	4602      	mov	r2, r0
   b7f9a:	4640      	mov	r0, r8
   b7f9c:	f7fc f8cf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7fa4:	f005 f9f6 	bl	bd394 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7fa8:	e7eb      	b.n	b7f82 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7faa:	4906      	ldr	r1, [pc, #24]	; (b7fc4 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7fac:	4802      	ldr	r0, [pc, #8]	; (b7fb8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b7fae:	f7ff fceb 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7fb2:	f007 fe96 	bl	bfce2 <_ZN11SystemClass5resetEv>
    return true;
   b7fb6:	e770      	b.n	b7e9a <_ZN6AB180513deepPowerDownEi+0x2a>
   b7fb8:	2003e4c0 	.word	0x2003e4c0
   b7fbc:	000c4ab4 	.word	0x000c4ab4
   b7fc0:	000c4aa9 	.word	0x000c4aa9
   b7fc4:	000c4ada 	.word	0x000c4ada
   b7fc8:	000c4ac5 	.word	0x000c4ac5

000b7fcc <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7fcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7fd0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7fd4:	4605      	mov	r5, r0
   b7fd6:	460c      	mov	r4, r1
   b7fd8:	4691      	mov	r9, r2
   b7fda:	461f      	mov	r7, r3
    if (lock) {
   b7fdc:	f1ba 0f00 	cmp.w	sl, #0
   b7fe0:	d002      	beq.n	b7fe8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b7fe2:	6840      	ldr	r0, [r0, #4]
   b7fe4:	f005 ff42 	bl	bde6c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7fe8:	b307      	cbz	r7, b802c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b7fea:	2f20      	cmp	r7, #32
   b7fec:	463e      	mov	r6, r7
   b7fee:	bf28      	it	cs
   b7ff0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7ff2:	2c7f      	cmp	r4, #127	; 0x7f
   b7ff4:	d826      	bhi.n	b8044 <_ZN6AB18057readRamEjPhjb+0x78>
   b7ff6:	1933      	adds	r3, r6, r4
   b7ff8:	2b80      	cmp	r3, #128	; 0x80
   b7ffa:	d901      	bls.n	b8000 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b7ffc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8000:	2301      	movs	r3, #1
   b8002:	2204      	movs	r2, #4
   b8004:	213f      	movs	r1, #63	; 0x3f
   b8006:	4628      	mov	r0, r5
   b8008:	f7ff fe77 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b800c:	2300      	movs	r3, #0
   b800e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8012:	9300      	str	r3, [sp, #0]
   b8014:	464a      	mov	r2, r9
   b8016:	4633      	mov	r3, r6
   b8018:	b2c9      	uxtb	r1, r1
   b801a:	4628      	mov	r0, r5
   b801c:	f7ff fce4 	bl	b79e8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b8020:	4680      	mov	r8, r0
   b8022:	b128      	cbz	r0, b8030 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b8024:	4434      	add	r4, r6
        dataLen -= count;
   b8026:	1bbf      	subs	r7, r7, r6
        data += count;
   b8028:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b802a:	e7dd      	b.n	b7fe8 <_ZN6AB18057readRamEjPhjb+0x1c>
   b802c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8030:	f1ba 0f00 	cmp.w	sl, #0
   b8034:	d002      	beq.n	b803c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b8036:	6868      	ldr	r0, [r5, #4]
   b8038:	f005 ff21 	bl	bde7e <_ZN7TwoWire6unlockEv>
}
   b803c:	4640      	mov	r0, r8
   b803e:	b002      	add	sp, #8
   b8040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8044:	2301      	movs	r3, #1
   b8046:	2204      	movs	r2, #4
   b8048:	213f      	movs	r1, #63	; 0x3f
   b804a:	4628      	mov	r0, r5
   b804c:	f7ff feb6 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
   b8050:	e7dc      	b.n	b800c <_ZN6AB18057readRamEjPhjb+0x40>

000b8052 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b8052:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8056:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b805a:	4605      	mov	r5, r0
   b805c:	460c      	mov	r4, r1
   b805e:	4691      	mov	r9, r2
   b8060:	461f      	mov	r7, r3
    if (lock) {
   b8062:	f1ba 0f00 	cmp.w	sl, #0
   b8066:	d002      	beq.n	b806e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b8068:	6840      	ldr	r0, [r0, #4]
   b806a:	f005 feff 	bl	bde6c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b806e:	b307      	cbz	r7, b80b2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b8070:	2f1f      	cmp	r7, #31
   b8072:	463e      	mov	r6, r7
   b8074:	bf28      	it	cs
   b8076:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b8078:	2c7f      	cmp	r4, #127	; 0x7f
   b807a:	d826      	bhi.n	b80ca <_ZN6AB18058writeRamEjPKhjb+0x78>
   b807c:	1933      	adds	r3, r6, r4
   b807e:	2b80      	cmp	r3, #128	; 0x80
   b8080:	d901      	bls.n	b8086 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b8082:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8086:	2301      	movs	r3, #1
   b8088:	2204      	movs	r2, #4
   b808a:	213f      	movs	r1, #63	; 0x3f
   b808c:	4628      	mov	r0, r5
   b808e:	f7ff fe34 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8092:	2300      	movs	r3, #0
   b8094:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8098:	9300      	str	r3, [sp, #0]
   b809a:	464a      	mov	r2, r9
   b809c:	4633      	mov	r3, r6
   b809e:	b2c9      	uxtb	r1, r1
   b80a0:	4628      	mov	r0, r5
   b80a2:	f7ff fd43 	bl	b7b2c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b80a6:	4680      	mov	r8, r0
   b80a8:	b128      	cbz	r0, b80b6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b80aa:	4434      	add	r4, r6
        dataLen -= count;
   b80ac:	1bbf      	subs	r7, r7, r6
        data += count;
   b80ae:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b80b0:	e7dd      	b.n	b806e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b80b2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b80b6:	f1ba 0f00 	cmp.w	sl, #0
   b80ba:	d002      	beq.n	b80c2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b80bc:	6868      	ldr	r0, [r5, #4]
   b80be:	f005 fede 	bl	bde7e <_ZN7TwoWire6unlockEv>
}
   b80c2:	4640      	mov	r0, r8
   b80c4:	b002      	add	sp, #8
   b80c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b80ca:	2301      	movs	r3, #1
   b80cc:	2204      	movs	r2, #4
   b80ce:	213f      	movs	r1, #63	; 0x3f
   b80d0:	4628      	mov	r0, r5
   b80d2:	f7ff fe73 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
   b80d6:	e7dc      	b.n	b8092 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b80d8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b80d8:	b530      	push	{r4, r5, lr}
   b80da:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b80dc:	680d      	ldr	r5, [r1, #0]
   b80de:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b80e2:	9503      	str	r5, [sp, #12]
   b80e4:	684d      	ldr	r5, [r1, #4]
   b80e6:	9502      	str	r5, [sp, #8]
   b80e8:	688d      	ldr	r5, [r1, #8]
   b80ea:	9501      	str	r5, [sp, #4]
   b80ec:	68c9      	ldr	r1, [r1, #12]
   b80ee:	9100      	str	r1, [sp, #0]
   b80f0:	3301      	adds	r3, #1
   b80f2:	4904      	ldr	r1, [pc, #16]	; (b8104 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b80f4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b80f8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b80fa:	f007 fd8b 	bl	bfc14 <_ZN6String6formatEPKcz>
}
   b80fe:	4620      	mov	r0, r4
   b8100:	b005      	add	sp, #20
   b8102:	bd30      	pop	{r4, r5, pc}
   b8104:	000c4aec 	.word	0x000c4aec

000b8108 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8108:	0903      	lsrs	r3, r0, #4
}
   b810a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b810c:	f000 000f 	and.w	r0, r0, #15
}
   b8110:	fb02 0003 	mla	r0, r2, r3, r0
   b8114:	4770      	bx	lr

000b8116 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b8116:	b538      	push	{r3, r4, r5, lr}
   b8118:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b811a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b811c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b811e:	f7ff fff3 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b8122:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b8124:	7860      	ldrb	r0, [r4, #1]
   b8126:	f7ff ffef 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b812a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b812c:	78a0      	ldrb	r0, [r4, #2]
   b812e:	f7ff ffeb 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b8132:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b8134:	78e0      	ldrb	r0, [r4, #3]
   b8136:	f7ff ffe7 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b813a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b813c:	7920      	ldrb	r0, [r4, #4]
   b813e:	f7ff ffe3 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b8142:	3801      	subs	r0, #1
   b8144:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b8146:	b92d      	cbnz	r5, b8154 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8148:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b814a:	7828      	ldrb	r0, [r5, #0]
   b814c:	f7ff ffdc 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b8150:	6188      	str	r0, [r1, #24]
}
   b8152:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b8154:	7960      	ldrb	r0, [r4, #5]
   b8156:	f7ff ffd7 	bl	b8108 <_ZN6AB180510bcdToValueEh>
   b815a:	3064      	adds	r0, #100	; 0x64
   b815c:	1da5      	adds	r5, r4, #6
   b815e:	6148      	str	r0, [r1, #20]
   b8160:	e7f3      	b.n	b814a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b8164 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8164:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8166:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8168:	b088      	sub	sp, #32
   b816a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b816c:	461a      	mov	r2, r3
   b816e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8170:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8172:	f7ff fda4 	bl	b7cbe <_ZN6AB180510isBitClearEhhb>
   b8176:	b1f0      	cbz	r0, b81b6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b8178:	2308      	movs	r3, #8
   b817a:	2601      	movs	r6, #1
   b817c:	4620      	mov	r0, r4
   b817e:	9600      	str	r6, [sp, #0]
   b8180:	eb0d 0203 	add.w	r2, sp, r3
   b8184:	2100      	movs	r1, #0
   b8186:	f7ff fc2f 	bl	b79e8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b818a:	4604      	mov	r4, r0
   b818c:	b198      	cbz	r0, b81b6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b818e:	4632      	mov	r2, r6
   b8190:	4629      	mov	r1, r5
   b8192:	f10d 0009 	add.w	r0, sp, #9
   b8196:	f7ff ffbe 	bl	b8116 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b819a:	a804      	add	r0, sp, #16
   b819c:	f7ff ff9c 	bl	b80d8 <_ZN6AB180510tmToStringEPK2tm>
   b81a0:	4808      	ldr	r0, [pc, #32]	; (b81c4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b81a2:	9a04      	ldr	r2, [sp, #16]
   b81a4:	4908      	ldr	r1, [pc, #32]	; (b81c8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b81a6:	f7fb ffca 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b81aa:	a804      	add	r0, sp, #16
   b81ac:	f007 fbcc 	bl	bf948 <_ZN6StringD1Ev>
}
   b81b0:	4620      	mov	r0, r4
   b81b2:	b008      	add	sp, #32
   b81b4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b81b6:	2224      	movs	r2, #36	; 0x24
   b81b8:	2100      	movs	r1, #0
   b81ba:	4628      	mov	r0, r5
   b81bc:	f009 f848 	bl	c1250 <memset>
   b81c0:	2400      	movs	r4, #0
   b81c2:	e7f5      	b.n	b81b0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b81c4:	2003e4c0 	.word	0x2003e4c0
   b81c8:	000c4b0a 	.word	0x000c4b0a

000b81cc <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b81cc:	b530      	push	{r4, r5, lr}
   b81ce:	b08b      	sub	sp, #44	; 0x2c
   b81d0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b81d2:	a901      	add	r1, sp, #4
   b81d4:	f7ff ffc6 	bl	b8164 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b81d8:	4604      	mov	r4, r0
   b81da:	b120      	cbz	r0, b81e6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b81dc:	a801      	add	r0, sp, #4
   b81de:	f005 f8d1 	bl	bd384 <mktime>
   b81e2:	e9c5 0100 	strd	r0, r1, [r5]
}
   b81e6:	4620      	mov	r0, r4
   b81e8:	b00b      	add	sp, #44	; 0x2c
   b81ea:	bd30      	pop	{r4, r5, pc}

000b81ec <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b81ec:	230a      	movs	r3, #10
   b81ee:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b81f2:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b81f6:	fb91 f2f3 	sdiv	r2, r1, r3
   b81fa:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b81fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b8202:	b2c0      	uxtb	r0, r0
   b8204:	4770      	bx	lr

000b8206 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8206:	b570      	push	{r4, r5, r6, lr}
   b8208:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b820a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b820c:	460c      	mov	r4, r1
   b820e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8210:	f7ff ffec 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b8214:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b8216:	6868      	ldr	r0, [r5, #4]
   b8218:	f7ff ffe8 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b821c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b821e:	68a8      	ldr	r0, [r5, #8]
   b8220:	f7ff ffe4 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b8224:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b8226:	68e8      	ldr	r0, [r5, #12]
   b8228:	f7ff ffe0 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b822c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b822e:	6928      	ldr	r0, [r5, #16]
   b8230:	3001      	adds	r0, #1
   b8232:	f7ff ffdb 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b8236:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b8238:	b92e      	cbnz	r6, b8246 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b823a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b823c:	69a8      	ldr	r0, [r5, #24]
   b823e:	f7ff ffd5 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b8242:	7030      	strb	r0, [r6, #0]
}
   b8244:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b8246:	696a      	ldr	r2, [r5, #20]
   b8248:	2364      	movs	r3, #100	; 0x64
   b824a:	fb92 f0f3 	sdiv	r0, r2, r3
   b824e:	fb03 2010 	mls	r0, r3, r0, r2
   b8252:	f7ff ffcb 	bl	b81ec <_ZN6AB180510valueToBcdEi>
   b8256:	1da6      	adds	r6, r4, #6
   b8258:	7160      	strb	r0, [r4, #5]
   b825a:	e7ef      	b.n	b823c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b825c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b825c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b825e:	b087      	sub	sp, #28
   b8260:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b8262:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b8264:	4616      	mov	r6, r2
   b8266:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b8268:	f7ff ff36 	bl	b80d8 <_ZN6AB180510tmToStringEPK2tm>
   b826c:	481e      	ldr	r0, [pc, #120]	; (b82e8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b826e:	9a02      	ldr	r2, [sp, #8]
   b8270:	491e      	ldr	r1, [pc, #120]	; (b82ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b8272:	f7fb ff64 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b8276:	a802      	add	r0, sp, #8
   b8278:	f007 fb66 	bl	bf948 <_ZN6StringD1Ev>
    if (lock) {
   b827c:	b116      	cbz	r6, b8284 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b827e:	6868      	ldr	r0, [r5, #4]
   b8280:	f005 fdf4 	bl	bde6c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b8284:	4620      	mov	r0, r4
   b8286:	2201      	movs	r2, #1
   b8288:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b828c:	2700      	movs	r7, #0
   b828e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b8292:	f7ff ffb8 	bl	b8206 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b8296:	2301      	movs	r3, #1
   b8298:	461a      	mov	r2, r3
   b829a:	2110      	movs	r1, #16
   b829c:	4628      	mov	r0, r5
   b829e:	f7ff fd8d 	bl	b7dbc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b82a2:	4604      	mov	r4, r0
   b82a4:	b1e8      	cbz	r0, b82e2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b82a6:	2308      	movs	r3, #8
   b82a8:	9700      	str	r7, [sp, #0]
   b82aa:	eb0d 0203 	add.w	r2, sp, r3
   b82ae:	4639      	mov	r1, r7
   b82b0:	4628      	mov	r0, r5
   b82b2:	f7ff fc3b 	bl	b7b2c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b82b6:	4604      	mov	r4, r0
   b82b8:	b160      	cbz	r0, b82d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b82ba:	2301      	movs	r3, #1
   b82bc:	461a      	mov	r2, r3
   b82be:	2110      	movs	r1, #16
   b82c0:	4628      	mov	r0, r5
   b82c2:	f7ff fd1a 	bl	b7cfa <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b82c6:	b116      	cbz	r6, b82ce <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b82c8:	6868      	ldr	r0, [r5, #4]
   b82ca:	f005 fdd8 	bl	bde7e <_ZN7TwoWire6unlockEv>
}
   b82ce:	4620      	mov	r0, r4
   b82d0:	b007      	add	sp, #28
   b82d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b82d4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b82d8:	4905      	ldr	r1, [pc, #20]	; (b82f0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b82da:	4803      	ldr	r0, [pc, #12]	; (b82e8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b82dc:	f7ff fb54 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
   b82e0:	e7f1      	b.n	b82c6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b82e2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b82e6:	e7f7      	b.n	b82d8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b82e8:	2003e4c0 	.word	0x2003e4c0
   b82ec:	000c4b18 	.word	0x000c4b18
   b82f0:	000c4b26 	.word	0x000c4b26

000b82f4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b82f4:	b513      	push	{r0, r1, r4, lr}
   b82f6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b82f8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b82fa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b82fe:	f008 ff59 	bl	c11b4 <gmtime>
    return setRtcFromTm(tm, lock);
   b8302:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b8306:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b8308:	4620      	mov	r0, r4
   b830a:	f7ff ffa7 	bl	b825c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b830e:	b002      	add	sp, #8
   b8310:	bd10      	pop	{r4, pc}
	...

000b8314 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b8314:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8316:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b8318:	b089      	sub	sp, #36	; 0x24
   b831a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b831c:	bb75      	cbnz	r5, b837c <_ZN6AB18054loopEv+0x68>
   b831e:	f007 feb7 	bl	c0090 <_ZN9TimeClass7isValidEv>
   b8322:	b358      	cbz	r0, b837c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b8324:	2600      	movs	r6, #0
   b8326:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b8328:	a904      	add	r1, sp, #16
   b832a:	4628      	mov	r0, r5
        tm = 0;
   b832c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b8330:	f004 ff38 	bl	bd1a4 <spark_sync_time_last>
   b8334:	b310      	cbz	r0, b837c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b8336:	2501      	movs	r5, #1
   b8338:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b833a:	f007 fec6 	bl	c00ca <_ZN9TimeClass3nowEv>
   b833e:	17c3      	asrs	r3, r0, #31
   b8340:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b8344:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b8346:	9500      	str	r5, [sp, #0]
   b8348:	4620      	mov	r0, r4
   b834a:	f7ff ffd3 	bl	b82f4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b834e:	a902      	add	r1, sp, #8
   b8350:	4620      	mov	r0, r4
        time = 0;
   b8352:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b8356:	f7ff ff39 	bl	b81cc <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b835a:	4b13      	ldr	r3, [pc, #76]	; (b83a8 <_ZN6AB18054loopEv+0x94>)
   b835c:	4913      	ldr	r1, [pc, #76]	; (b83ac <_ZN6AB18054loopEv+0x98>)
   b835e:	681b      	ldr	r3, [r3, #0]
   b8360:	9300      	str	r3, [sp, #0]
   b8362:	a804      	add	r0, sp, #16
   b8364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8368:	f007 fe50 	bl	c000c <_ZN9TimeClass6formatExPKc>
   b836c:	4810      	ldr	r0, [pc, #64]	; (b83b0 <_ZN6AB18054loopEv+0x9c>)
   b836e:	9a04      	ldr	r2, [sp, #16]
   b8370:	4910      	ldr	r1, [pc, #64]	; (b83b4 <_ZN6AB18054loopEv+0xa0>)
   b8372:	f7fb fee4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b8376:	a804      	add	r0, sp, #16
   b8378:	f007 fae6 	bl	bf948 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b837c:	6963      	ldr	r3, [r4, #20]
   b837e:	b18b      	cbz	r3, b83a4 <_ZN6AB18054loopEv+0x90>
   b8380:	f004 fbec 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b8384:	6923      	ldr	r3, [r4, #16]
   b8386:	1ac0      	subs	r0, r0, r3
   b8388:	6963      	ldr	r3, [r4, #20]
   b838a:	4298      	cmp	r0, r3
   b838c:	d30a      	bcc.n	b83a4 <_ZN6AB18054loopEv+0x90>
   b838e:	f004 fbe5 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b8392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b8396:	6120      	str	r0, [r4, #16]
            setWDT();
   b8398:	4620      	mov	r0, r4
}
   b839a:	b009      	add	sp, #36	; 0x24
   b839c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b83a0:	f7ff bc0c 	b.w	b7bbc <_ZN6AB18056setWDTEi>
}
   b83a4:	b009      	add	sp, #36	; 0x24
   b83a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b83a8:	2003d690 	.word	0x2003d690
   b83ac:	2003e6a8 	.word	0x2003e6a8
   b83b0:	2003e4c0 	.word	0x2003e4c0
   b83b4:	000c4b41 	.word	0x000c4b41

000b83b8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b83b8:	b530      	push	{r4, r5, lr}
   b83ba:	4604      	mov	r4, r0
   b83bc:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b83be:	b111      	cbz	r1, b83c6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b83c0:	6840      	ldr	r0, [r0, #4]
   b83c2:	f005 fd01 	bl	bddc8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b83c6:	4620      	mov	r0, r4
   b83c8:	f7ff fb64 	bl	b7a94 <_ZN6AB180510detectChipEv>
   b83cc:	ad06      	add	r5, sp, #24
   b83ce:	2800      	cmp	r0, #0
   b83d0:	d037      	beq.n	b8442 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b83d2:	4620      	mov	r0, r4
   b83d4:	f7ff fc9c 	bl	b7d10 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b83d8:	2301      	movs	r3, #1
   b83da:	461a      	mov	r2, r3
   b83dc:	2110      	movs	r1, #16
   b83de:	4620      	mov	r0, r4
   b83e0:	f7ff fc6d 	bl	b7cbe <_ZN6AB180510isBitClearEhhb>
   b83e4:	b1d8      	cbz	r0, b841e <_ZN6AB18055setupEb+0x66>
   b83e6:	f007 fe53 	bl	c0090 <_ZN9TimeClass7isValidEv>
   b83ea:	b9c0      	cbnz	r0, b841e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b83ec:	a902      	add	r1, sp, #8
   b83ee:	4620      	mov	r0, r4
   b83f0:	f7ff feec 	bl	b81cc <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b83f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b83f8:	f007 fd4e 	bl	bfe98 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b83fc:	4b13      	ldr	r3, [pc, #76]	; (b844c <_ZN6AB18055setupEb+0x94>)
   b83fe:	4914      	ldr	r1, [pc, #80]	; (b8450 <_ZN6AB18055setupEb+0x98>)
   b8400:	681b      	ldr	r3, [r3, #0]
   b8402:	9300      	str	r3, [sp, #0]
   b8404:	4628      	mov	r0, r5
   b8406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b840a:	f007 fdff 	bl	c000c <_ZN9TimeClass6formatExPKc>
   b840e:	4811      	ldr	r0, [pc, #68]	; (b8454 <_ZN6AB18055setupEb+0x9c>)
   b8410:	9a06      	ldr	r2, [sp, #24]
   b8412:	4911      	ldr	r1, [pc, #68]	; (b8458 <_ZN6AB18055setupEb+0xa0>)
   b8414:	f7fb fe93 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b8418:	4628      	mov	r0, r5
   b841a:	f007 fa95 	bl	bf948 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b841e:	4b0f      	ldr	r3, [pc, #60]	; (b845c <_ZN6AB18055setupEb+0xa4>)
   b8420:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b8422:	4b0f      	ldr	r3, [pc, #60]	; (b8460 <_ZN6AB18055setupEb+0xa8>)
   b8424:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b8426:	4b0f      	ldr	r3, [pc, #60]	; (b8464 <_ZN6AB18055setupEb+0xac>)
   b8428:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b842a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b842e:	2300      	movs	r3, #0
   b8430:	a802      	add	r0, sp, #8
   b8432:	9500      	str	r5, [sp, #0]
   b8434:	f7fd f9fa 	bl	b582c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b8438:	4628      	mov	r0, r5
   b843a:	f7fd f84e 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b843e:	b00b      	add	sp, #44	; 0x2c
   b8440:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b8442:	4909      	ldr	r1, [pc, #36]	; (b8468 <_ZN6AB18055setupEb+0xb0>)
   b8444:	4803      	ldr	r0, [pc, #12]	; (b8454 <_ZN6AB18055setupEb+0x9c>)
   b8446:	f7ff fa9f 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
   b844a:	e7e8      	b.n	b841e <_ZN6AB18055setupEb+0x66>
   b844c:	2003d690 	.word	0x2003d690
   b8450:	2003e6a8 	.word	0x2003e6a8
   b8454:	2003e4c0 	.word	0x2003e4c0
   b8458:	000c4b57 	.word	0x000c4b57
   b845c:	000b7c41 	.word	0x000b7c41
   b8460:	000b54b7 	.word	0x000b54b7
   b8464:	000b54a3 	.word	0x000b54a3
   b8468:	000c4b74 	.word	0x000c4b74

000b846c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b846c:	4b01      	ldr	r3, [pc, #4]	; (b8474 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b846e:	4a02      	ldr	r2, [pc, #8]	; (b8478 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b8470:	601a      	str	r2, [r3, #0]
}
   b8472:	4770      	bx	lr
   b8474:	2003e4c0 	.word	0x2003e4c0
   b8478:	000c4b8c 	.word	0x000c4b8c

000b847c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b847c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b847e:	2301      	movs	r3, #1
   b8480:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b8482:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b8484:	4604      	mov	r4, r0
        if (th->func) {
   b8486:	b143      	cbz	r3, b849a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b8488:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b848a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b848c:	2301      	movs	r3, #1
   b848e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b8490:	2000      	movs	r0, #0
    }
   b8492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b8496:	f004 bb31 	b.w	bcafc <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b849a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b849c:	2800      	cmp	r0, #0
   b849e:	d0f5      	beq.n	b848c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b84a0:	6883      	ldr	r3, [r0, #8]
   b84a2:	b90b      	cbnz	r3, b84a8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b84a4:	f008 f92c 	bl	c0700 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b84a8:	68c3      	ldr	r3, [r0, #12]
   b84aa:	e7ee      	b.n	b848a <_ZN6Thread3runEPv+0xe>

000b84ac <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b84ac:	2a01      	cmp	r2, #1
   b84ae:	d102      	bne.n	b84b6 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b84b0:	6001      	str	r1, [r0, #0]
      }
   b84b2:	2000      	movs	r0, #0
   b84b4:	4770      	bx	lr
	  switch (__op)
   b84b6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b84b8:	bf04      	itt	eq
   b84ba:	680b      	ldreq	r3, [r1, #0]
   b84bc:	6003      	streq	r3, [r0, #0]
	      break;
   b84be:	e7f8      	b.n	b84b2 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b84c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b84c0:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b84c2:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b84c4:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b84c6:	b135      	cbz	r5, b84d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b84c8:	4628      	mov	r0, r5
   b84ca:	f7fd f806 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b84ce:	2110      	movs	r1, #16
   b84d0:	4628      	mov	r0, r5
   b84d2:	f7fb fde4 	bl	b409e <_ZdlPvj>
   b84d6:	4620      	mov	r0, r4
   b84d8:	2114      	movs	r1, #20
      }
   b84da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b84de:	f7fb bdde 	b.w	b409e <_ZdlPvj>

000b84e2 <_ZN6Thread7disposeEv>:
    void dispose()
   b84e2:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b84e4:	6803      	ldr	r3, [r0, #0]
   b84e6:	4604      	mov	r4, r0
        if (!isValid())
   b84e8:	b1ab      	cbz	r3, b8516 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b84ea:	6858      	ldr	r0, [r3, #4]
   b84ec:	f004 fab6 	bl	bca5c <os_thread_is_current>
   b84f0:	b988      	cbnz	r0, b8516 <_ZN6Thread7disposeEv+0x34>
   b84f2:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b84f4:	7c5a      	ldrb	r2, [r3, #17]
   b84f6:	b912      	cbnz	r2, b84fe <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b84f8:	6858      	ldr	r0, [r3, #4]
   b84fa:	f004 fab7 	bl	bca6c <os_thread_join>
        os_thread_cleanup(d_->handle);
   b84fe:	6823      	ldr	r3, [r4, #0]
   b8500:	6858      	ldr	r0, [r3, #4]
   b8502:	f004 fabb 	bl	bca7c <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b8506:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b8508:	2300      	movs	r3, #0
   b850a:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b850c:	b118      	cbz	r0, b8516 <_ZN6Thread7disposeEv+0x34>
    }
   b850e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8512:	f7ff bfd5 	b.w	b84c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b8516:	bd10      	pop	{r4, pc}

000b8518 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b8518:	4a05      	ldr	r2, [pc, #20]	; (b8530 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b851a:	6002      	str	r2, [r0, #0]
   b851c:	2200      	movs	r2, #0
   b851e:	6042      	str	r2, [r0, #4]
   b8520:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b8522:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b8526:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b852a:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b852e:	4770      	bx	lr
   b8530:	000c4bcc 	.word	0x000c4bcc

000b8534 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b8534:	b510      	push	{r4, lr}
    if (!_instance) {
   b8536:	4c07      	ldr	r4, [pc, #28]	; (b8554 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b8538:	6823      	ldr	r3, [r4, #0]
   b853a:	b943      	cbnz	r3, b854e <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b853c:	f240 4064 	movw	r0, #1124	; 0x464
   b8540:	f7fb fda9 	bl	b4096 <_Znwj>
   b8544:	4603      	mov	r3, r0
   b8546:	b108      	cbz	r0, b854c <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b8548:	f7ff ffe6 	bl	b8518 <_ZN19BackgroundPublishRKC1Ev>
   b854c:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b854e:	6820      	ldr	r0, [r4, #0]
   b8550:	bd10      	pop	{r4, pc}
   b8552:	bf00      	nop
   b8554:	2003e4c8 	.word	0x2003e4c8

000b8558 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b8558:	b538      	push	{r3, r4, r5, lr}
   b855a:	4604      	mov	r4, r0
    if(thread)
   b855c:	6840      	ldr	r0, [r0, #4]
   b855e:	b190      	cbz	r0, b8586 <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b8560:	2302      	movs	r3, #2
   b8562:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b8564:	f7ff ffbd 	bl	b84e2 <_ZN6Thread7disposeEv>
        delete thread;
   b8568:	6865      	ldr	r5, [r4, #4]
   b856a:	b155      	cbz	r5, b8582 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b856c:	4628      	mov	r0, r5
   b856e:	f7ff ffb8 	bl	b84e2 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b8572:	6828      	ldr	r0, [r5, #0]
   b8574:	b108      	cbz	r0, b857a <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b8576:	f7ff ffa3 	bl	b84c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b857a:	2104      	movs	r1, #4
   b857c:	4628      	mov	r0, r5
   b857e:	f7fb fd8e 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b8582:	2300      	movs	r3, #0
   b8584:	6063      	str	r3, [r4, #4]
    }
}
   b8586:	bd38      	pop	{r3, r4, r5, pc}

000b8588 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b8588:	b510      	push	{r4, lr}
   b858a:	4b05      	ldr	r3, [pc, #20]	; (b85a0 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b858c:	6003      	str	r3, [r0, #0]
   b858e:	4604      	mov	r4, r0
    stop();
   b8590:	f7ff ffe2 	bl	b8558 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b8594:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b8598:	f7fc ff9f 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b859c:	4620      	mov	r0, r4
   b859e:	bd10      	pop	{r4, pc}
   b85a0:	000c4bcc 	.word	0x000c4bcc

000b85a4 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b85a4:	b510      	push	{r4, lr}
   b85a6:	4604      	mov	r4, r0
}
   b85a8:	f7ff ffee 	bl	b8588 <_ZN19BackgroundPublishRKD1Ev>
   b85ac:	4620      	mov	r0, r4
   b85ae:	f240 4164 	movw	r1, #1124	; 0x464
   b85b2:	f7fb fd74 	bl	b409e <_ZdlPvj>
   b85b6:	4620      	mov	r0, r4
   b85b8:	bd10      	pop	{r4, pc}

000b85ba <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b85ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   b85bc:	4604      	mov	r4, r0
   b85be:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b85c0:	f100 060d 	add.w	r6, r0, #13
   b85c4:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b85c8:	7b23      	ldrb	r3, [r4, #12]
   b85ca:	b91b      	cbnz	r3, b85d4 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b85cc:	2001      	movs	r0, #1
   b85ce:	f004 fee1 	bl	bd394 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b85d2:	e7f9      	b.n	b85c8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b85d4:	7b23      	ldrb	r3, [r4, #12]
   b85d6:	2b02      	cmp	r3, #2
   b85d8:	d064      	beq.n	b86a4 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b85da:	68a0      	ldr	r0, [r4, #8]
   b85dc:	f004 fa5e 	bl	bca9c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b85e0:	68a0      	ldr	r0, [r4, #8]
   b85e2:	f004 fa63 	bl	bcaac <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b85e6:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b85ea:	f88d 3000 	strb.w	r3, [sp]
   b85ee:	463a      	mov	r2, r7
   b85f0:	233c      	movs	r3, #60	; 0x3c
   b85f2:	4631      	mov	r1, r6
   b85f4:	a806      	add	r0, sp, #24
   b85f6:	f005 f999 	bl	bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b85fa:	9d06      	ldr	r5, [sp, #24]
   b85fc:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b85fe:	b933      	cbnz	r3, b860e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b8600:	7b23      	ldrb	r3, [r4, #12]
   b8602:	2b02      	cmp	r3, #2
   b8604:	d003      	beq.n	b860e <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b8606:	2001      	movs	r0, #1
   b8608:	f004 fec4 	bl	bd394 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b860c:	e7f5      	b.n	b85fa <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b860e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8612:	b31b      	cbz	r3, b865c <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b8614:	2000      	movs	r0, #0
   b8616:	f004 fd33 	bl	bd080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b861a:	b120      	cbz	r0, b8626 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b861c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b861e:	b913      	cbnz	r3, b8626 <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b8620:	f004 fd88 	bl	bd134 <spark_process>
    }
   b8624:	e7fa      	b.n	b861c <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8626:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b8628:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b862c:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b862e:	1e59      	subs	r1, r3, #1
   b8630:	424b      	negs	r3, r1
   b8632:	414b      	adcs	r3, r1
   b8634:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b8638:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b863c:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b8640:	b90b      	cbnz	r3, b8646 <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b8642:	f008 f85d 	bl	c0700 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8646:	ab05      	add	r3, sp, #20
   b8648:	9300      	str	r3, [sp, #0]
   b864a:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b864e:	ab04      	add	r3, sp, #16
   b8650:	aa03      	add	r2, sp, #12
   b8652:	f10d 010b 	add.w	r1, sp, #11
   b8656:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b865a:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b865c:	68a0      	ldr	r0, [r4, #8]
   b865e:	f004 fa1d 	bl	bca9c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b8662:	7b23      	ldrb	r3, [r4, #12]
   b8664:	2b02      	cmp	r3, #2
   b8666:	d017      	beq.n	b8698 <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b8668:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b866c:	2500      	movs	r5, #0
   b866e:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b8672:	b143      	cbz	r3, b8686 <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b8674:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b8678:	2203      	movs	r2, #3
   b867a:	4608      	mov	r0, r1
   b867c:	4798      	blx	r3
	    _M_manager = nullptr;
   b867e:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b8682:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b8686:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b8688:	68a0      	ldr	r0, [r4, #8]
   b868a:	7323      	strb	r3, [r4, #12]
   b868c:	f004 fa0e 	bl	bcaac <os_mutex_unlock>
   b8690:	a807      	add	r0, sp, #28
   b8692:	f7fc f801 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8696:	e797      	b.n	b85c8 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b8698:	68a0      	ldr	r0, [r4, #8]
   b869a:	f004 fa07 	bl	bcaac <os_mutex_unlock>
   b869e:	a807      	add	r0, sp, #28
   b86a0:	f7fb fffa 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b86a4:	b009      	add	sp, #36	; 0x24
   b86a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b86a8 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b86a8:	6800      	ldr	r0, [r0, #0]
   b86aa:	f7ff bf86 	b.w	b85ba <_ZN19BackgroundPublishRK8thread_fEv>

000b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b86ae:	b513      	push	{r0, r1, r4, lr}
   b86b0:	460b      	mov	r3, r1
   b86b2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86b4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b86b8:	466c      	mov	r4, sp
   b86ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b86be:	e893 0003 	ldmia.w	r3, {r0, r1}
   b86c2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b86c6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b86ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b86ce:	b002      	add	sp, #8
   b86d0:	bd10      	pop	{r4, pc}
	...

000b86d4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b86d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b86d8:	4606      	mov	r6, r0
   b86da:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b86dc:	2014      	movs	r0, #20
   b86de:	4926      	ldr	r1, [pc, #152]	; (b8778 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b86e0:	4617      	mov	r7, r2
   b86e2:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b86e4:	f008 f802 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   b86e8:	4604      	mov	r4, r0
   b86ea:	b130      	cbz	r0, b86fa <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b86ec:	2000      	movs	r0, #0
            exited(false) {
   b86ee:	e9c4 0000 	strd	r0, r0, [r4]
   b86f2:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b86f6:	7420      	strb	r0, [r4, #16]
   b86f8:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b86fa:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b86fc:	2c00      	cmp	r4, #0
   b86fe:	d031      	beq.n	b8764 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b8700:	491d      	ldr	r1, [pc, #116]	; (b8778 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b8702:	2010      	movs	r0, #16
   b8704:	f007 fff2 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   b8708:	4605      	mov	r5, r0
   b870a:	b168      	cbz	r0, b8728 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b870c:	2300      	movs	r3, #0
   b870e:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8710:	4601      	mov	r1, r0
   b8712:	4638      	mov	r0, r7
   b8714:	f7ff ffcb 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8718:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b871a:	68aa      	ldr	r2, [r5, #8]
   b871c:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b871e:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8720:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8722:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8724:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8726:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b8728:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b872a:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b872c:	b137      	cbz	r7, b873c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b872e:	4638      	mov	r0, r7
   b8730:	f7fc fed3 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8734:	2110      	movs	r1, #16
   b8736:	4638      	mov	r0, r7
   b8738:	f7fb fcb1 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b873c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b873e:	6803      	ldr	r3, [r0, #0]
   b8740:	b183      	cbz	r3, b8764 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b8742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8744:	464a      	mov	r2, r9
   b8746:	e9cd 0300 	strd	r0, r3, [sp]
   b874a:	4641      	mov	r1, r8
   b874c:	4b0b      	ldr	r3, [pc, #44]	; (b877c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b874e:	3004      	adds	r0, #4
   b8750:	f004 f97c 	bl	bca4c <os_thread_create>
   b8754:	b930      	cbnz	r0, b8764 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b8756:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b8758:	7c1b      	ldrb	r3, [r3, #16]
   b875a:	b94b      	cbnz	r3, b8770 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b875c:	2001      	movs	r0, #1
   b875e:	f004 f9ed 	bl	bcb3c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b8762:	e7f8      	b.n	b8756 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b8764:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b8766:	2300      	movs	r3, #0
   b8768:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b876a:	b108      	cbz	r0, b8770 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b876c:	f7ff fea8 	bl	b84c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b8770:	4630      	mov	r0, r6
   b8772:	b003      	add	sp, #12
   b8774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8778:	000c567c 	.word	0x000c567c
   b877c:	000b847d 	.word	0x000b847d

000b8780 <_ZN19BackgroundPublishRK5startEv>:
{
   b8780:	b530      	push	{r4, r5, lr}
    if(!thread)
   b8782:	6843      	ldr	r3, [r0, #4]
{
   b8784:	b087      	sub	sp, #28
   b8786:	4604      	mov	r4, r0
    if(!thread)
   b8788:	b9c3      	cbnz	r3, b87bc <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b878a:	3008      	adds	r0, #8
   b878c:	f004 f97e 	bl	bca8c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b8790:	4b0b      	ldr	r3, [pc, #44]	; (b87c0 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b8792:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b8794:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b8796:	4b0b      	ldr	r3, [pc, #44]	; (b87c4 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8798:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b879a:	9304      	str	r3, [sp, #16]
   b879c:	f7fb fc7b 	bl	b4096 <_Znwj>
   b87a0:	4605      	mov	r5, r0
   b87a2:	b138      	cbz	r0, b87b4 <_ZN19BackgroundPublishRK5startEv+0x34>
   b87a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b87a8:	9300      	str	r3, [sp, #0]
   b87aa:	4907      	ldr	r1, [pc, #28]	; (b87c8 <_ZN19BackgroundPublishRK5startEv+0x48>)
   b87ac:	2302      	movs	r3, #2
   b87ae:	aa02      	add	r2, sp, #8
   b87b0:	f7ff ff90 	bl	b86d4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b87b4:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b87b6:	a802      	add	r0, sp, #8
   b87b8:	f7fc fe8f 	bl	b54da <_ZNSt14_Function_baseD1Ev>
}
   b87bc:	b007      	add	sp, #28
   b87be:	bd30      	pop	{r4, r5, pc}
   b87c0:	000b86a9 	.word	0x000b86a9
   b87c4:	000b84ad 	.word	0x000b84ad
   b87c8:	000c4bb0 	.word	0x000c4bb0

000b87cc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b87cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b87d0:	4604      	mov	r4, r0
   b87d2:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b87d4:	6880      	ldr	r0, [r0, #8]
   b87d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b87d8:	4698      	mov	r8, r3
   b87da:	460d      	mov	r5, r1
   b87dc:	4616      	mov	r6, r2
   b87de:	f004 f95d 	bl	bca9c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b87e2:	6863      	ldr	r3, [r4, #4]
   b87e4:	b11b      	cbz	r3, b87ee <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b87e6:	7b23      	ldrb	r3, [r4, #12]
   b87e8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b87ec:	b133      	cbz	r3, b87fc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b87ee:	68a0      	ldr	r0, [r4, #8]
   b87f0:	f004 f95c 	bl	bcaac <os_mutex_unlock>
    {
        return false;
   b87f4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b87f6:	b005      	add	sp, #20
   b87f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b87fc:	68a0      	ldr	r0, [r4, #8]
   b87fe:	f004 f955 	bl	bcaac <os_mutex_unlock>
    if(!name)
   b8802:	2d00      	cmp	r5, #0
   b8804:	d03d      	beq.n	b8882 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b8806:	2240      	movs	r2, #64	; 0x40
   b8808:	4629      	mov	r1, r5
   b880a:	f104 000d 	add.w	r0, r4, #13
   b880e:	f008 fe06 	bl	c141e <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b8812:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b8816:	b38e      	cbz	r6, b887c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b8818:	f240 4201 	movw	r2, #1025	; 0x401
   b881c:	4631      	mov	r1, r6
   b881e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b8822:	f008 fdfc 	bl	c141e <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b8826:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b882a:	2300      	movs	r3, #0
   b882c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b882e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b8830:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b8834:	b13b      	cbz	r3, b8846 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8836:	2202      	movs	r2, #2
   b8838:	4639      	mov	r1, r7
   b883a:	4668      	mov	r0, sp
   b883c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b883e:	68fb      	ldr	r3, [r7, #12]
   b8840:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8842:	68bb      	ldr	r3, [r7, #8]
   b8844:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b8846:	4629      	mov	r1, r5
   b8848:	4668      	mov	r0, sp
   b884a:	f7ff ff30 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b884e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8850:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b8854:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8858:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b885a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b885c:	4668      	mov	r0, sp
   b885e:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b8862:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b8866:	9203      	str	r2, [sp, #12]
   b8868:	f7fc fe37 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b886c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b886e:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b8872:	2001      	movs	r0, #1
    event_flags = flags;
   b8874:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b8878:	7320      	strb	r0, [r4, #12]
    return true;
   b887a:	e7bc      	b.n	b87f6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b887c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b8880:	e7d3      	b.n	b882a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b8882:	4628      	mov	r0, r5
   b8884:	e7b7      	b.n	b87f6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b8888 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b8888:	b510      	push	{r4, lr}
   b888a:	4b05      	ldr	r3, [pc, #20]	; (b88a0 <_ZN10JsonBufferD1Ev+0x18>)
   b888c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b888e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b8890:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b8892:	b91b      	cbnz	r3, b889c <_ZN10JsonBufferD1Ev+0x14>
   b8894:	6840      	ldr	r0, [r0, #4]
   b8896:	b108      	cbz	r0, b889c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b8898:	f004 fd04 	bl	bd2a4 <free>
	}
}
   b889c:	4620      	mov	r0, r4
   b889e:	bd10      	pop	{r4, pc}
   b88a0:	000c4bec 	.word	0x000c4bec

000b88a4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b88a4:	b510      	push	{r4, lr}
   b88a6:	4604      	mov	r4, r0
}
   b88a8:	f7ff ffee 	bl	b8888 <_ZN10JsonBufferD1Ev>
   b88ac:	4620      	mov	r0, r4
   b88ae:	2114      	movs	r1, #20
   b88b0:	f7fb fbf5 	bl	b409e <_ZdlPvj>
   b88b4:	4620      	mov	r0, r4
   b88b6:	bd10      	pop	{r4, pc}

000b88b8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b88b8:	b510      	push	{r4, lr}
   b88ba:	4b03      	ldr	r3, [pc, #12]	; (b88c8 <_ZN10JsonWriterD1Ev+0x10>)
   b88bc:	6003      	str	r3, [r0, #0]
   b88be:	4604      	mov	r4, r0
   b88c0:	f7ff ffe2 	bl	b8888 <_ZN10JsonBufferD1Ev>

}
   b88c4:	4620      	mov	r0, r4
   b88c6:	bd10      	pop	{r4, pc}
   b88c8:	000c4c0c 	.word	0x000c4c0c

000b88cc <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b88cc:	b510      	push	{r4, lr}
   b88ce:	4604      	mov	r4, r0
}
   b88d0:	f7ff fff2 	bl	b88b8 <_ZN10JsonWriterD1Ev>
   b88d4:	4620      	mov	r0, r4
   b88d6:	2130      	movs	r1, #48	; 0x30
   b88d8:	f7fb fbe1 	bl	b409e <_ZdlPvj>
   b88dc:	4620      	mov	r0, r4
   b88de:	bd10      	pop	{r4, pc}

000b88e0 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b88e0:	b510      	push	{r4, lr}
   b88e2:	4b03      	ldr	r3, [pc, #12]	; (b88f0 <_ZN12JsonModifierD1Ev+0x10>)
   b88e4:	6003      	str	r3, [r0, #0]
   b88e6:	4604      	mov	r4, r0
   b88e8:	f7ff ffe6 	bl	b88b8 <_ZN10JsonWriterD1Ev>

}
   b88ec:	4620      	mov	r0, r4
   b88ee:	bd10      	pop	{r4, pc}
   b88f0:	000c4c1c 	.word	0x000c4c1c

000b88f4 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b88f4:	b510      	push	{r4, lr}
   b88f6:	4604      	mov	r4, r0
}
   b88f8:	f7ff fff2 	bl	b88e0 <_ZN12JsonModifierD1Ev>
   b88fc:	4620      	mov	r0, r4
   b88fe:	2140      	movs	r1, #64	; 0x40
   b8900:	f7fb fbcd 	bl	b409e <_ZdlPvj>
   b8904:	4620      	mov	r0, r4
   b8906:	bd10      	pop	{r4, pc}

000b8908 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b8908:	b510      	push	{r4, lr}
   b890a:	4b07      	ldr	r3, [pc, #28]	; (b8928 <_ZN10JsonParserD1Ev+0x20>)
   b890c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b890e:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b8910:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b8912:	b91b      	cbnz	r3, b891c <_ZN10JsonParserD1Ev+0x14>
   b8914:	6940      	ldr	r0, [r0, #20]
   b8916:	b108      	cbz	r0, b891c <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b8918:	f004 fcc4 	bl	bd2a4 <free>
JsonParser::~JsonParser() {
   b891c:	4620      	mov	r0, r4
   b891e:	f7ff ffb3 	bl	b8888 <_ZN10JsonBufferD1Ev>
}
   b8922:	4620      	mov	r0, r4
   b8924:	bd10      	pop	{r4, pc}
   b8926:	bf00      	nop
   b8928:	000c4bfc 	.word	0x000c4bfc

000b892c <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b892c:	b510      	push	{r4, lr}
   b892e:	4604      	mov	r4, r0
}
   b8930:	f7ff ffea 	bl	b8908 <_ZN10JsonParserD1Ev>
   b8934:	4620      	mov	r0, r4
   b8936:	212c      	movs	r1, #44	; 0x2c
   b8938:	f7fb fbb1 	bl	b409e <_ZdlPvj>
   b893c:	4620      	mov	r0, r4
   b893e:	bd10      	pop	{r4, pc}

000b8940 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b8940:	4a03      	ldr	r2, [pc, #12]	; (b8950 <_ZN10JsonBufferC1Ev+0x10>)
   b8942:	6002      	str	r2, [r0, #0]
   b8944:	2200      	movs	r2, #0
   b8946:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b894a:	60c2      	str	r2, [r0, #12]
   b894c:	7402      	strb	r2, [r0, #16]
}
   b894e:	4770      	bx	lr
   b8950:	000c4bec 	.word	0x000c4bec

000b8954 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b8954:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b8956:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b8958:	4604      	mov	r4, r0
   b895a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b895c:	b10b      	cbz	r3, b8962 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b895e:	2000      	movs	r0, #0
}
   b8960:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b8962:	6840      	ldr	r0, [r0, #4]
   b8964:	b138      	cbz	r0, b8976 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b8966:	f004 fca5 	bl	bd2b4 <realloc>
		if (newBuffer) {
   b896a:	2800      	cmp	r0, #0
   b896c:	d0f7      	beq.n	b895e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b896e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b8972:	2001      	movs	r0, #1
   b8974:	e7f4      	b.n	b8960 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b8976:	4608      	mov	r0, r1
   b8978:	f004 fc8c 	bl	bd294 <malloc>
   b897c:	e7f5      	b.n	b896a <_ZN10JsonBuffer8allocateEj+0x16>

000b897e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b897e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8980:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8982:	460e      	mov	r6, r1
   b8984:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8986:	18d1      	adds	r1, r2, r3
   b8988:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b898a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b898c:	b172      	cbz	r2, b89ac <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b898e:	6882      	ldr	r2, [r0, #8]
   b8990:	428a      	cmp	r2, r1
   b8992:	d30b      	bcc.n	b89ac <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b8994:	6860      	ldr	r0, [r4, #4]
   b8996:	68e3      	ldr	r3, [r4, #12]
   b8998:	462a      	mov	r2, r5
   b899a:	4631      	mov	r1, r6
   b899c:	4418      	add	r0, r3
   b899e:	f008 fc2f 	bl	c1200 <memcpy>
	offset += dataLen;
   b89a2:	68e2      	ldr	r2, [r4, #12]
   b89a4:	442a      	add	r2, r5
   b89a6:	60e2      	str	r2, [r4, #12]
	return true;
   b89a8:	2001      	movs	r0, #1
}
   b89aa:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b89ac:	4620      	mov	r0, r4
   b89ae:	f7ff ffd1 	bl	b8954 <_ZN10JsonBuffer8allocateEj>
   b89b2:	2800      	cmp	r0, #0
   b89b4:	d1ee      	bne.n	b8994 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b89b6:	e7f8      	b.n	b89aa <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b89b8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b89b8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b89ba:	2100      	movs	r1, #0
   b89bc:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b89be:	b123      	cbz	r3, b89ca <_ZN10JsonBuffer5clearEv+0x12>
   b89c0:	6882      	ldr	r2, [r0, #8]
   b89c2:	b112      	cbz	r2, b89ca <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b89c4:	4618      	mov	r0, r3
   b89c6:	f008 bc43 	b.w	c1250 <memset>
}
   b89ca:	4770      	bx	lr

000b89cc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b89cc:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b89ce:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b89d2:	2200      	movs	r2, #0
   b89d4:	60c2      	str	r2, [r0, #12]
   b89d6:	2201      	movs	r2, #1
   b89d8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b89da:	6143      	str	r3, [r0, #20]
   b89dc:	4a02      	ldr	r2, [pc, #8]	; (b89e8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b89de:	9b02      	ldr	r3, [sp, #8]
   b89e0:	6002      	str	r2, [r0, #0]
   b89e2:	61c3      	str	r3, [r0, #28]
}
   b89e4:	bd10      	pop	{r4, pc}
   b89e6:	bf00      	nop
   b89e8:	000c4bfc 	.word	0x000c4bfc

000b89ec <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b89ec:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b89f0:	4283      	cmp	r3, r0
   b89f2:	d904      	bls.n	b89fe <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b89f4:	7802      	ldrb	r2, [r0, #0]
   b89f6:	2a02      	cmp	r2, #2
   b89f8:	d002      	beq.n	b8a00 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b89fa:	3010      	adds	r0, #16
   b89fc:	e7f8      	b.n	b89f0 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b89fe:	2000      	movs	r0, #0
}
   b8a00:	4770      	bx	lr

000b8a02 <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b8a02:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8a06:	4298      	cmp	r0, r3
   b8a08:	d204      	bcs.n	b8a14 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8a0a:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8a0c:	2b01      	cmp	r3, #1
   b8a0e:	bf18      	it	ne
   b8a10:	2000      	movne	r0, #0
   b8a12:	4770      	bx	lr
   b8a14:	2000      	movs	r0, #0
}
   b8a16:	4770      	bx	lr

000b8a18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8a18:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8a1a:	6813      	ldr	r3, [r2, #0]
   b8a1c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b8a1e:	6813      	ldr	r3, [r2, #0]
   b8a20:	f103 0410 	add.w	r4, r3, #16
   b8a24:	6014      	str	r4, [r2, #0]
   b8a26:	6986      	ldr	r6, [r0, #24]
   b8a28:	42b4      	cmp	r4, r6
   b8a2a:	d20a      	bcs.n	b8a42 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8a2c:	699b      	ldr	r3, [r3, #24]
   b8a2e:	688c      	ldr	r4, [r1, #8]
   b8a30:	42a3      	cmp	r3, r4
   b8a32:	da01      	bge.n	b8a38 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b8a34:	42ab      	cmp	r3, r5
   b8a36:	ddf2      	ble.n	b8a1e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8a38:	42a3      	cmp	r3, r4
   b8a3a:	bfcc      	ite	gt
   b8a3c:	2000      	movgt	r0, #0
   b8a3e:	2001      	movle	r0, #1
   b8a40:	e000      	b.n	b8a44 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b8a42:	2000      	movs	r0, #0
}
   b8a44:	bd70      	pop	{r4, r5, r6, pc}

000b8a46 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a48:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8a4c:	4604      	mov	r4, r0
   b8a4e:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a50:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8a52:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b8a54:	9801      	ldr	r0, [sp, #4]
   b8a56:	69a3      	ldr	r3, [r4, #24]
   b8a58:	4283      	cmp	r3, r0
   b8a5a:	d90b      	bls.n	b8a74 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8a5c:	6882      	ldr	r2, [r0, #8]
   b8a5e:	688b      	ldr	r3, [r1, #8]
   b8a60:	429a      	cmp	r2, r3
   b8a62:	da07      	bge.n	b8a74 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b8a64:	42b5      	cmp	r5, r6
   b8a66:	d006      	beq.n	b8a76 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b8a68:	aa01      	add	r2, sp, #4
   b8a6a:	4620      	mov	r0, r4
		index++;
   b8a6c:	3501      	adds	r5, #1
		skipObject(container, token);
   b8a6e:	f7ff ffd3 	bl	b8a18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8a72:	e7ef      	b.n	b8a54 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b8a74:	2000      	movs	r0, #0
}
   b8a76:	b002      	add	sp, #8
   b8a78:	bd70      	pop	{r4, r5, r6, pc}

000b8a7a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8a7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8a7e:	9d08      	ldr	r5, [sp, #32]
   b8a80:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a82:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8a86:	4604      	mov	r4, r0
   b8a88:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a8a:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8a8c:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8a8e:	9801      	ldr	r0, [sp, #4]
   b8a90:	69a3      	ldr	r3, [r4, #24]
   b8a92:	4283      	cmp	r3, r0
   b8a94:	d91a      	bls.n	b8acc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8a96:	6882      	ldr	r2, [r0, #8]
   b8a98:	688b      	ldr	r3, [r1, #8]
   b8a9a:	429a      	cmp	r2, r3
   b8a9c:	da16      	bge.n	b8acc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8a9e:	42ae      	cmp	r6, r5
   b8aa0:	d10b      	bne.n	b8aba <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b8aa2:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8aa4:	aa01      	add	r2, sp, #4
   b8aa6:	4620      	mov	r0, r4
   b8aa8:	f7ff ffb6 	bl	b8a18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8aac:	b128      	cbz	r0, b8aba <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8aae:	9b01      	ldr	r3, [sp, #4]
   b8ab0:	f8c8 3000 	str.w	r3, [r8]
}
   b8ab4:	b002      	add	sp, #8
   b8ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8aba:	aa01      	add	r2, sp, #4
   b8abc:	4620      	mov	r0, r4
   b8abe:	f7ff ffab 	bl	b8a18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b8ac2:	4620      	mov	r0, r4
		index++;
   b8ac4:	3601      	adds	r6, #1
		skipObject(container, token);
   b8ac6:	f7ff ffa7 	bl	b8a18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8aca:	e7e0      	b.n	b8a8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8acc:	2000      	movs	r0, #0
   b8ace:	e7f1      	b.n	b8ab4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8ad0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b8ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8ad2:	3b01      	subs	r3, #1
   b8ad4:	2400      	movs	r4, #0
   b8ad6:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8ada:	1bf6      	subs	r6, r6, r7
   b8adc:	42a6      	cmp	r6, r4
   b8ade:	dd08      	ble.n	b8af2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b8ae0:	42a3      	cmp	r3, r4
   b8ae2:	dd06      	ble.n	b8af2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b8ae4:	6845      	ldr	r5, [r0, #4]
   b8ae6:	443d      	add	r5, r7
   b8ae8:	5d2d      	ldrb	r5, [r5, r4]
   b8aea:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8aee:	3401      	adds	r4, #1
   b8af0:	e7f1      	b.n	b8ad6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b8af2:	2300      	movs	r3, #0
   b8af4:	7013      	strb	r3, [r2, #0]
}
   b8af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8af8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8afa:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8afc:	2310      	movs	r3, #16
   b8afe:	466a      	mov	r2, sp
   b8b00:	f7ff ffe6 	bl	b8ad0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b8b04:	4904      	ldr	r1, [pc, #16]	; (b8b18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b8b06:	4622      	mov	r2, r4
   b8b08:	4668      	mov	r0, sp
   b8b0a:	f004 fbe3 	bl	bd2d4 <sscanf>
}
   b8b0e:	1e43      	subs	r3, r0, #1
   b8b10:	4258      	negs	r0, r3
   b8b12:	4158      	adcs	r0, r3
   b8b14:	b004      	add	sp, #16
   b8b16:	bd10      	pop	{r4, pc}
   b8b18:	000c3a03 	.word	0x000c3a03

000b8b1c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8b1e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8b20:	2310      	movs	r3, #16
   b8b22:	466a      	mov	r2, sp
   b8b24:	f7ff ffd4 	bl	b8ad0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8b28:	4668      	mov	r0, sp
   b8b2a:	2100      	movs	r1, #0
   b8b2c:	f009 fac2 	bl	c20b4 <strtof>
}
   b8b30:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b8b32:	ed84 0a00 	vstr	s0, [r4]
}
   b8b36:	b004      	add	sp, #16
   b8b38:	bd10      	pop	{r4, pc}

000b8b3a <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b8b3a:	b510      	push	{r4, lr}
   b8b3c:	4604      	mov	r4, r0
	if (str) {
   b8b3e:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8b40:	460b      	mov	r3, r1
	if (str) {
   b8b42:	b128      	cbz	r0, b8b50 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8b44:	f006 ffe3 	bl	bfb0e <_ZN6String6concatEc>
		length++;
   b8b48:	68e3      	ldr	r3, [r4, #12]
   b8b4a:	3301      	adds	r3, #1
   b8b4c:	60e3      	str	r3, [r4, #12]
}
   b8b4e:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8b50:	6860      	ldr	r0, [r4, #4]
   b8b52:	2800      	cmp	r0, #0
   b8b54:	d0f8      	beq.n	b8b48 <_ZN16JsonParserString6appendEc+0xe>
   b8b56:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8b5a:	3a01      	subs	r2, #1
   b8b5c:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8b5e:	bf88      	it	hi
   b8b60:	5443      	strbhi	r3, [r0, r1]
   b8b62:	e7f1      	b.n	b8b48 <_ZN16JsonParserString6appendEc+0xe>

000b8b64 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8b64:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8b66:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b6a:	4608      	mov	r0, r1
		str.append((char)unicode);
   b8b6c:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b8b6e:	d804      	bhi.n	b8b7a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b8b70:	b003      	add	sp, #12
   b8b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8b76:	f7ff bfe0 	b.w	b8b3a <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8b7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8b82:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8b86:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8b8a:	d207      	bcs.n	b8b9c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b8b8c:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b8b90:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8b92:	f7ff ffd2 	bl	b8b3a <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8b96:	9801      	ldr	r0, [sp, #4]
   b8b98:	4621      	mov	r1, r4
   b8b9a:	e7e9      	b.n	b8b70 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8b9c:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8b9e:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8ba2:	9001      	str	r0, [sp, #4]
   b8ba4:	f7ff ffc9 	bl	b8b3a <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8ba8:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8bac:	9801      	ldr	r0, [sp, #4]
   b8bae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8bb2:	e7ee      	b.n	b8b92 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b8bb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8bb8:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8bba:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8bbc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8c8c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8bc0:	4680      	mov	r8, r0
   b8bc2:	460f      	mov	r7, r1
   b8bc4:	4615      	mov	r5, r2
			escape = false;
   b8bc6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8bc8:	68b8      	ldr	r0, [r7, #8]
   b8bca:	42b0      	cmp	r0, r6
   b8bcc:	dd5a      	ble.n	b8c84 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8bce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8bd2:	5d99      	ldrb	r1, [r3, r6]
   b8bd4:	199a      	adds	r2, r3, r6
		if (escape) {
   b8bd6:	2c00      	cmp	r4, #0
   b8bd8:	d04b      	beq.n	b8c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8bda:	2975      	cmp	r1, #117	; 0x75
   b8bdc:	d805      	bhi.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8bde:	296d      	cmp	r1, #109	; 0x6d
   b8be0:	d807      	bhi.n	b8bf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8be2:	2962      	cmp	r1, #98	; 0x62
   b8be4:	d01e      	beq.n	b8c24 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8be6:	2966      	cmp	r1, #102	; 0x66
   b8be8:	d01e      	beq.n	b8c28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8bea:	4628      	mov	r0, r5
   b8bec:	f7ff ffa5 	bl	b8b3a <_ZN16JsonParserString6appendEc>
				break;
   b8bf0:	e03d      	b.n	b8c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8bf2:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8bf6:	2c07      	cmp	r4, #7
   b8bf8:	d8f7      	bhi.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8bfa:	f20f 0c08 	addw	ip, pc, #8
   b8bfe:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8c02:	bf00      	nop
   b8c04:	000b8c2d 	.word	0x000b8c2d
   b8c08:	000b8beb 	.word	0x000b8beb
   b8c0c:	000b8beb 	.word	0x000b8beb
   b8c10:	000b8beb 	.word	0x000b8beb
   b8c14:	000b8c31 	.word	0x000b8c31
   b8c18:	000b8beb 	.word	0x000b8beb
   b8c1c:	000b8c35 	.word	0x000b8c35
   b8c20:	000b8c39 	.word	0x000b8c39
				str.append('\b');
   b8c24:	2108      	movs	r1, #8
   b8c26:	e7e0      	b.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8c28:	210c      	movs	r1, #12
   b8c2a:	e7de      	b.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8c2c:	210a      	movs	r1, #10
   b8c2e:	e7dc      	b.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8c30:	210d      	movs	r1, #13
   b8c32:	e7da      	b.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8c34:	2109      	movs	r1, #9
   b8c36:	e7d8      	b.n	b8bea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8c38:	1d31      	adds	r1, r6, #4
   b8c3a:	4288      	cmp	r0, r1
   b8c3c:	dd17      	ble.n	b8c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8c3e:	a902      	add	r1, sp, #8
   b8c40:	3304      	adds	r3, #4
   b8c42:	4433      	add	r3, r6
   b8c44:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8c46:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8c4a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8c4e:	429a      	cmp	r2, r3
   b8c50:	d1f9      	bne.n	b8c46 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8c52:	aa01      	add	r2, sp, #4
   b8c54:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8c56:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8c5a:	f004 fb3b 	bl	bd2d4 <sscanf>
   b8c5e:	2801      	cmp	r0, #1
   b8c60:	d105      	bne.n	b8c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8c62:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8c66:	4629      	mov	r1, r5
   b8c68:	f7ff ff7c 	bl	b8b64 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8c6c:	3605      	adds	r6, #5
			escape = false;
   b8c6e:	2400      	movs	r4, #0
   b8c70:	e004      	b.n	b8c7c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8c72:	295c      	cmp	r1, #92	; 0x5c
   b8c74:	d004      	beq.n	b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8c76:	4628      	mov	r0, r5
   b8c78:	f7ff ff5f 	bl	b8b3a <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8c7c:	3601      	adds	r6, #1
   b8c7e:	e7a3      	b.n	b8bc8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8c80:	2401      	movs	r4, #1
   b8c82:	e7fb      	b.n	b8c7c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8c84:	2001      	movs	r0, #1
   b8c86:	b004      	add	sp, #16
   b8c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8c8c:	000c5499 	.word	0x000c5499

000b8c90 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8c92:	460c      	mov	r4, r1
   b8c94:	4606      	mov	r6, r0
	result = "";
   b8c96:	490c      	ldr	r1, [pc, #48]	; (b8cc8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8c98:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8c9a:	4615      	mov	r5, r2
	result = "";
   b8c9c:	f006 fefd 	bl	bfa9a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8ca0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8ca4:	1ac9      	subs	r1, r1, r3
   b8ca6:	3101      	adds	r1, #1
   b8ca8:	4628      	mov	r0, r5
   b8caa:	f006 fe6b 	bl	bf984 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8cae:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8cb0:	466a      	mov	r2, sp
   b8cb2:	4621      	mov	r1, r4
   b8cb4:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8cb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8cba:	9500      	str	r5, [sp, #0]
   b8cbc:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8cbe:	f7ff ff79 	bl	b8bb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8cc2:	b004      	add	sp, #16
   b8cc4:	bd70      	pop	{r4, r5, r6, pc}
   b8cc6:	bf00      	nop
   b8cc8:	000c54f8 	.word	0x000c54f8

000b8ccc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8cd0:	b089      	sub	sp, #36	; 0x24
   b8cd2:	4605      	mov	r5, r0
   b8cd4:	4688      	mov	r8, r1
	String keyName;
   b8cd6:	a804      	add	r0, sp, #16
   b8cd8:	4912      	ldr	r1, [pc, #72]	; (b8d24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8cda:	4616      	mov	r6, r2
   b8cdc:	4699      	mov	r9, r3
	String keyName;
   b8cde:	f006 fe7e 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8ce2:	2700      	movs	r7, #0
   b8ce4:	9700      	str	r7, [sp, #0]
   b8ce6:	464b      	mov	r3, r9
   b8ce8:	aa03      	add	r2, sp, #12
   b8cea:	4641      	mov	r1, r8
   b8cec:	4628      	mov	r0, r5
   b8cee:	f7ff fec4 	bl	b8a7a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8cf2:	4604      	mov	r4, r0
   b8cf4:	b170      	cbz	r0, b8d14 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8cf6:	9903      	ldr	r1, [sp, #12]
   b8cf8:	aa04      	add	r2, sp, #16
   b8cfa:	4628      	mov	r0, r5
   b8cfc:	f7ff ffc8 	bl	b8c90 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8d00:	4604      	mov	r4, r0
   b8d02:	b908      	cbnz	r0, b8d08 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8d04:	3701      	adds	r7, #1
   b8d06:	e7ed      	b.n	b8ce4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8d08:	4631      	mov	r1, r6
   b8d0a:	a804      	add	r0, sp, #16
   b8d0c:	f006 ff2d 	bl	bfb6a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8d10:	2800      	cmp	r0, #0
   b8d12:	d0f7      	beq.n	b8d04 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8d14:	a804      	add	r0, sp, #16
   b8d16:	f006 fe17 	bl	bf948 <_ZN6StringD1Ev>
}
   b8d1a:	4620      	mov	r0, r4
   b8d1c:	b009      	add	sp, #36	; 0x24
   b8d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8d22:	bf00      	nop
   b8d24:	000c54f8 	.word	0x000c54f8

000b8d28 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8d28:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8d2a:	2201      	movs	r2, #1
	offset = 0;
   b8d2c:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8d2e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8d30:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8d32:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8d36:	4770      	bx	lr

000b8d38 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8d38:	b508      	push	{r3, lr}
   b8d3a:	4603      	mov	r3, r0
   b8d3c:	f7ff fe00 	bl	b8940 <_ZN10JsonBufferC1Ev>
   b8d40:	4a04      	ldr	r2, [pc, #16]	; (b8d54 <_ZN10JsonWriterC1Ev+0x1c>)
   b8d42:	601a      	str	r2, [r3, #0]
   b8d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8d48:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8d4c:	f7ff ffec 	bl	b8d28 <_ZN10JsonWriter4initEv>
}
   b8d50:	bd08      	pop	{r3, pc}
   b8d52:	bf00      	nop
   b8d54:	000c4c0c 	.word	0x000c4c0c

000b8d58 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8d58:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8d5c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8d5e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8d60:	bf3f      	itttt	cc
   b8d62:	6842      	ldrcc	r2, [r0, #4]
   b8d64:	1c5c      	addcc	r4, r3, #1
   b8d66:	60c4      	strcc	r4, [r0, #12]
   b8d68:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8d6a:	bf24      	itt	cs
   b8d6c:	2301      	movcs	r3, #1
   b8d6e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8d72:	bd10      	pop	{r4, pc}

000b8d74 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8d74:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8d76:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8d78:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8d7a:	b143      	cbz	r3, b8d8e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8d7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8d80:	7e59      	ldrb	r1, [r3, #25]
   b8d82:	b109      	cbz	r1, b8d88 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8d84:	f7ff ffe8 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8d88:	6963      	ldr	r3, [r4, #20]
   b8d8a:	3b01      	subs	r3, #1
   b8d8c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8d8e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8d92:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8d94:	4288      	cmp	r0, r1
   b8d96:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8d9a:	bf2a      	itet	cs
   b8d9c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8d9e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8da0:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8da4:	bd10      	pop	{r4, pc}

000b8da6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8da6:	b570      	push	{r4, r5, r6, lr}
   b8da8:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8daa:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8dae:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8db0:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8db2:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8db4:	4430      	add	r0, r6
   b8db6:	460a      	mov	r2, r1
   b8db8:	4629      	mov	r1, r5
   b8dba:	f004 fa9b 	bl	bd2f4 <vsnprintf>
	if (count <= spaceAvailable) {
   b8dbe:	4285      	cmp	r5, r0
		offset += count;
   b8dc0:	bf2d      	iteet	cs
   b8dc2:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8dc4:	68a3      	ldrcc	r3, [r4, #8]
   b8dc6:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8dc8:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8dca:	bf36      	itet	cc
   b8dcc:	2301      	movcc	r3, #1
		offset += count;
   b8dce:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8dd0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8dd4:	bd70      	pop	{r4, r5, r6, pc}

000b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8dd6:	b40e      	push	{r1, r2, r3}
   b8dd8:	b503      	push	{r0, r1, lr}
   b8dda:	aa03      	add	r2, sp, #12
   b8ddc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8de0:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8de2:	f7ff ffe0 	bl	b8da6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8de6:	b002      	add	sp, #8
   b8de8:	f85d eb04 	ldr.w	lr, [sp], #4
   b8dec:	b003      	add	sp, #12
   b8dee:	4770      	bx	lr

000b8df0 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8df4:	4604      	mov	r4, r0
   b8df6:	460e      	mov	r6, r1
	if (quoted) {
   b8df8:	4617      	mov	r7, r2
   b8dfa:	b112      	cbz	r2, b8e02 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8dfc:	2122      	movs	r1, #34	; 0x22
   b8dfe:	f7ff ffab 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8e02:	f8df 810c 	ldr.w	r8, [pc, #268]	; b8f10 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8e06:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8e08:	5d71      	ldrb	r1, [r6, r5]
   b8e0a:	eb06 0905 	add.w	r9, r6, r5
   b8e0e:	2900      	cmp	r1, #0
   b8e10:	d074      	beq.n	b8efc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8e12:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8e16:	429a      	cmp	r2, r3
   b8e18:	d270      	bcs.n	b8efc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8e1a:	060b      	lsls	r3, r1, #24
   b8e1c:	d534      	bpl.n	b8e88 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8e1e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8e22:	2be0      	cmp	r3, #224	; 0xe0
   b8e24:	f105 0901 	add.w	r9, r5, #1
   b8e28:	d11d      	bne.n	b8e66 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8e2a:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8e2e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8e32:	2b80      	cmp	r3, #128	; 0x80
   b8e34:	d139      	bne.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e36:	f105 0902 	add.w	r9, r5, #2
   b8e3a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8e3e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8e42:	2880      	cmp	r0, #128	; 0x80
   b8e44:	d131      	bne.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8e4a:	0192      	lsls	r2, r2, #6
   b8e4c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8e50:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8e54:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8e56:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8e58:	4641      	mov	r1, r8
   b8e5a:	4620      	mov	r0, r4
   b8e5c:	f7ff ffbb 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8e60:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8e62:	3501      	adds	r5, #1
   b8e64:	e7d0      	b.n	b8e08 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8e66:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8e6a:	2bc0      	cmp	r3, #192	; 0xc0
   b8e6c:	d11d      	bne.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e6e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8e72:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8e76:	2a80      	cmp	r2, #128	; 0x80
   b8e78:	d117      	bne.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8e7a:	0189      	lsls	r1, r1, #6
   b8e7c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8e84:	431a      	orrs	r2, r3
   b8e86:	e7e7      	b.n	b8e58 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8e88:	290d      	cmp	r1, #13
   b8e8a:	d80a      	bhi.n	b8ea2 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8e8c:	2907      	cmp	r1, #7
   b8e8e:	d90c      	bls.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e90:	f1a1 0308 	sub.w	r3, r1, #8
   b8e94:	2b05      	cmp	r3, #5
   b8e96:	d808      	bhi.n	b8eaa <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e98:	e8df f003 	tbb	[pc, r3]
   b8e9c:	07172309 	.word	0x07172309
   b8ea0:	1d11      	.short	0x1d11
   b8ea2:	2922      	cmp	r1, #34	; 0x22
   b8ea4:	d023      	beq.n	b8eee <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8ea6:	295c      	cmp	r1, #92	; 0x5c
   b8ea8:	d021      	beq.n	b8eee <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8eaa:	4620      	mov	r0, r4
   b8eac:	e004      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8eae:	215c      	movs	r1, #92	; 0x5c
   b8eb0:	4620      	mov	r0, r4
   b8eb2:	f7ff ff51 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8eb6:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8eb8:	f7ff ff4e 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				break;
   b8ebc:	e7d1      	b.n	b8e62 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b8ebe:	215c      	movs	r1, #92	; 0x5c
   b8ec0:	4620      	mov	r0, r4
   b8ec2:	f7ff ff49 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8ec6:	2166      	movs	r1, #102	; 0x66
   b8ec8:	e7f6      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8eca:	215c      	movs	r1, #92	; 0x5c
   b8ecc:	4620      	mov	r0, r4
   b8ece:	f7ff ff43 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8ed2:	216e      	movs	r1, #110	; 0x6e
   b8ed4:	e7f0      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ed6:	215c      	movs	r1, #92	; 0x5c
   b8ed8:	4620      	mov	r0, r4
   b8eda:	f7ff ff3d 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b8ede:	2172      	movs	r1, #114	; 0x72
   b8ee0:	e7ea      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ee2:	215c      	movs	r1, #92	; 0x5c
   b8ee4:	4620      	mov	r0, r4
   b8ee6:	f7ff ff37 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b8eea:	2174      	movs	r1, #116	; 0x74
   b8eec:	e7e4      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8eee:	215c      	movs	r1, #92	; 0x5c
   b8ef0:	4620      	mov	r0, r4
   b8ef2:	f7ff ff31 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b8ef6:	f899 1000 	ldrb.w	r1, [r9]
   b8efa:	e7dd      	b.n	b8eb8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b8efc:	b12f      	cbz	r7, b8f0a <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b8efe:	4620      	mov	r0, r4
   b8f00:	2122      	movs	r1, #34	; 0x22
}
   b8f02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b8f06:	f7ff bf27 	b.w	b8d58 <_ZN10JsonWriter10insertCharEc>
}
   b8f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8f0e:	bf00      	nop
   b8f10:	000c4bd4 	.word	0x000c4bd4

000b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b8f14:	6942      	ldr	r2, [r0, #20]
   b8f16:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b8f1a:	7e1a      	ldrb	r2, [r3, #24]
   b8f1c:	b112      	cbz	r2, b8f24 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b8f1e:	2200      	movs	r2, #0
   b8f20:	761a      	strb	r2, [r3, #24]
}
   b8f22:	4770      	bx	lr
		insertChar(',');
   b8f24:	212c      	movs	r1, #44	; 0x2c
   b8f26:	f7ff bf17 	b.w	b8d58 <_ZN10JsonWriter10insertCharEc>

000b8f2a <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f2c:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f2e:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f30:	3301      	adds	r3, #1
   b8f32:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f34:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f36:	d80f      	bhi.n	b8f58 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b8f38:	f7ff ffec 	bl	b8f14 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b8f3c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b8f3e:	9901      	ldr	r1, [sp, #4]
   b8f40:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b8f44:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b8f46:	2501      	movs	r5, #1
	contextIndex++;
   b8f48:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b8f4a:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b8f4c:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b8f4e:	f7ff ff03 	bl	b8d58 <_ZN10JsonWriter10insertCharEc>
   b8f52:	4628      	mov	r0, r5
}
   b8f54:	b002      	add	sp, #8
   b8f56:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8f58:	2000      	movs	r0, #0
   b8f5a:	e7fb      	b.n	b8f54 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b8f5c <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b8f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f5e:	4604      	mov	r4, r0
   b8f60:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b8f64:	f007 fd3c 	bl	c09e0 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b8f68:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b8f6a:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b8f6c:	4602      	mov	r2, r0
   b8f6e:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b8f70:	db08      	blt.n	b8f84 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b8f72:	e9cd 2300 	strd	r2, r3, [sp]
   b8f76:	4907      	ldr	r1, [pc, #28]	; (b8f94 <_ZN10JsonWriter11insertValueEf+0x38>)
   b8f78:	462a      	mov	r2, r5
   b8f7a:	4620      	mov	r0, r4
   b8f7c:	f7ff ff2b 	bl	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b8f80:	b003      	add	sp, #12
   b8f82:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b8f84:	4904      	ldr	r1, [pc, #16]	; (b8f98 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b8f86:	4620      	mov	r0, r4
}
   b8f88:	b003      	add	sp, #12
   b8f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b8f8e:	f7ff bf22 	b.w	b8dd6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b8f92:	bf00      	nop
   b8f94:	000c4bdb 	.word	0x000c4bdb
   b8f98:	000c4be0 	.word	0x000c4be0

000b8f9c <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b8f9c:	b510      	push	{r4, lr}
   b8f9e:	4604      	mov	r4, r0
   b8fa0:	f7ff feca 	bl	b8d38 <_ZN10JsonWriterC1Ev>
   b8fa4:	4b05      	ldr	r3, [pc, #20]	; (b8fbc <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8fa6:	6023      	str	r3, [r4, #0]
   b8fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8fac:	2300      	movs	r3, #0
   b8fae:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8fb2:	6321      	str	r1, [r4, #48]	; 0x30
   b8fb4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8fb6:	4620      	mov	r0, r4
   b8fb8:	bd10      	pop	{r4, pc}
   b8fba:	bf00      	nop
   b8fbc:	000c4c1c 	.word	0x000c4c1c

000b8fc0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8fc0:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8fc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8fc4:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8fc6:	4604      	mov	r4, r0
	if (start != -1) {
   b8fc8:	d121      	bne.n	b900e <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b8fca:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b8fcc:	684b      	ldr	r3, [r1, #4]
   b8fce:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8fd0:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b8fd2:	6888      	ldr	r0, [r1, #8]
   b8fd4:	1a1a      	subs	r2, r3, r0
   b8fd6:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8fd8:	68ae      	ldr	r6, [r5, #8]
   b8fda:	4430      	add	r0, r6
   b8fdc:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b8fde:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8fe0:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8fe2:	dd05      	ble.n	b8ff0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8fe4:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b8fe6:	6889      	ldr	r1, [r1, #8]
   b8fe8:	4401      	add	r1, r0
   b8fea:	4418      	add	r0, r3
   b8fec:	f008 f916 	bl	c121c <memmove>
   b8ff0:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8ff4:	6852      	ldr	r2, [r2, #4]
   b8ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8ff8:	440a      	add	r2, r1
   b8ffa:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b8ffc:	2101      	movs	r1, #1
	init();
   b8ffe:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b9000:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b9004:	7421      	strb	r1, [r4, #16]
	init();
   b9006:	f7ff fe8f 	bl	b8d28 <_ZN10JsonWriter4initEv>
   b900a:	4608      	mov	r0, r1

	return true;
}
   b900c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b900e:	2000      	movs	r0, #0
   b9010:	e7fc      	b.n	b900c <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b9012 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9012:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b9014:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9016:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9018:	4604      	mov	r4, r0
   b901a:	460e      	mov	r6, r1
	if (start != -1) {
   b901c:	d129      	bne.n	b9072 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b901e:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b9020:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9022:	3d01      	subs	r5, #1
   b9024:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b9026:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b9028:	1b5a      	subs	r2, r3, r5
   b902a:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b902c:	6888      	ldr	r0, [r1, #8]
   b902e:	4428      	add	r0, r5
   b9030:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b9032:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9034:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b9036:	dd04      	ble.n	b9042 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b9038:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b903a:	1941      	adds	r1, r0, r5
   b903c:	4418      	add	r0, r3
   b903e:	f008 f8ed 	bl	c121c <memmove>
   b9042:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b9044:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b9046:	6852      	ldr	r2, [r2, #4]
   b9048:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b904a:	440a      	add	r2, r1
   b904c:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b904e:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b9050:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b9054:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b9056:	7425      	strb	r5, [r4, #16]
	init();
   b9058:	f7ff fe66 	bl	b8d28 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b905c:	6963      	ldr	r3, [r4, #20]
   b905e:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b9062:	68f3      	ldr	r3, [r6, #12]
   b9064:	fab3 f383 	clz	r3, r3
   b9068:	095b      	lsrs	r3, r3, #5
   b906a:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b906e:	4628      	mov	r0, r5

	return true;
}
   b9070:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9072:	2000      	movs	r0, #0
   b9074:	e7fc      	b.n	b9070 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b9078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b9078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b907c:	6844      	ldr	r4, [r0, #4]
   b907e:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b9082:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9086:	f8d0 e000 	ldr.w	lr, [r0]
   b908a:	4596      	cmp	lr, r2
   b908c:	f080 81b9 	bcs.w	b9402 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b9090:	f811 800e 	ldrb.w	r8, [r1, lr]
   b9094:	f1b8 0f00 	cmp.w	r8, #0
   b9098:	f000 81b3 	beq.w	b9402 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b909c:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b90a0:	f000 8098 	beq.w	b91d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b90a4:	d833      	bhi.n	b910e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b90a6:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b90aa:	f000 80a6 	beq.w	b91fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b90ae:	d810      	bhi.n	b90d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b90b0:	f1a8 0809 	sub.w	r8, r8, #9
   b90b4:	fa5f f888 	uxtb.w	r8, r8
   b90b8:	f1b8 0f17 	cmp.w	r8, #23
   b90bc:	d80d      	bhi.n	b90da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b90be:	4d9f      	ldr	r5, [pc, #636]	; (b933c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b90c0:	fa0c f808 	lsl.w	r8, ip, r8
   b90c4:	ea18 0f05 	tst.w	r8, r5
   b90c8:	d007      	beq.n	b90da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b90ca:	6805      	ldr	r5, [r0, #0]
   b90cc:	3501      	adds	r5, #1
   b90ce:	6005      	str	r5, [r0, #0]
   b90d0:	e7d9      	b.n	b9086 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b90d2:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b90d6:	f000 8133 	beq.w	b9340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b90da:	f8d0 8000 	ldr.w	r8, [r0]
   b90de:	4542      	cmp	r2, r8
   b90e0:	d90e      	bls.n	b9100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b90e2:	f811 5008 	ldrb.w	r5, [r1, r8]
   b90e6:	b15d      	cbz	r5, b9100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b90e8:	2d3a      	cmp	r5, #58	; 0x3a
   b90ea:	f200 8169 	bhi.w	b93c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b90ee:	2d1f      	cmp	r5, #31
   b90f0:	f200 8151 	bhi.w	b9396 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b90f4:	2d0a      	cmp	r5, #10
   b90f6:	f200 8160 	bhi.w	b93ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b90fa:	2d08      	cmp	r5, #8
   b90fc:	f240 8156 	bls.w	b93ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b9100:	2b00      	cmp	r3, #0
   b9102:	f040 8162 	bne.w	b93ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b9106:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b910a:	6005      	str	r5, [r0, #0]
   b910c:	e0a5      	b.n	b925a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b910e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9112:	d037      	beq.n	b9184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9114:	d82e      	bhi.n	b9174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b9116:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b911a:	d033      	beq.n	b9184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b911c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b9120:	d1db      	bne.n	b90da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b9122:	2b00      	cmp	r3, #0
   b9124:	d0d1      	beq.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b9126:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b912a:	6845      	ldr	r5, [r0, #4]
   b912c:	3d01      	subs	r5, #1
   b912e:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b9132:	2d00      	cmp	r5, #0
   b9134:	db55      	blt.n	b91e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b9136:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b913a:	3701      	adds	r7, #1
   b913c:	d04d      	beq.n	b91da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b913e:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b9142:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b9146:	d148      	bne.n	b91da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b9148:	f898 b000 	ldrb.w	fp, [r8]
   b914c:	45cb      	cmp	fp, r9
   b914e:	d14b      	bne.n	b91e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b9150:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b9154:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b9158:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b915c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b9160:	f8de 7004 	ldr.w	r7, [lr, #4]
   b9164:	3701      	adds	r7, #1
   b9166:	d042      	beq.n	b91ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b9168:	f8de 7008 	ldr.w	r7, [lr, #8]
   b916c:	3701      	adds	r7, #1
   b916e:	d13e      	bne.n	b91ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b9170:	6085      	str	r5, [r0, #8]
				break;
   b9172:	e7aa      	b.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b9174:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b9178:	d1af      	bne.n	b90da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b917a:	2b00      	cmp	r3, #0
   b917c:	d0a5      	beq.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b917e:	f04f 0901 	mov.w	r9, #1
   b9182:	e7d2      	b.n	b912a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b9184:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b9186:	2b00      	cmp	r3, #0
   b9188:	d09f      	beq.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b918a:	6845      	ldr	r5, [r0, #4]
   b918c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b918e:	42af      	cmp	r7, r5
   b9190:	d94a      	bls.n	b9228 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b9192:	f105 0e01 	add.w	lr, r5, #1
   b9196:	f8c0 e004 	str.w	lr, [r0, #4]
   b919a:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b919e:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b91a2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b91a6:	2500      	movs	r5, #0
   b91a8:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b91ac:	6885      	ldr	r5, [r0, #8]
   b91ae:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b91b0:	bf1f      	itttt	ne
   b91b2:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b91b6:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b91ba:	3501      	addne	r5, #1
   b91bc:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b91c0:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b91c4:	bf0c      	ite	eq
   b91c6:	2501      	moveq	r5, #1
   b91c8:	2502      	movne	r5, #2
   b91ca:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b91ce:	6805      	ldr	r5, [r0, #0]
   b91d0:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b91d4:	6845      	ldr	r5, [r0, #4]
   b91d6:	3d01      	subs	r5, #1
   b91d8:	e7ca      	b.n	b9170 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b91da:	3d01      	subs	r5, #1
   b91dc:	f1a8 0810 	sub.w	r8, r8, #16
   b91e0:	e7a7      	b.n	b9132 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b91e2:	3501      	adds	r5, #1
   b91e4:	f47f af71 	bne.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b91e8:	f06f 0401 	mvn.w	r4, #1
   b91ec:	e01e      	b.n	b922c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b91ee:	3d01      	subs	r5, #1
   b91f0:	1c6f      	adds	r7, r5, #1
   b91f2:	f1ae 0e10 	sub.w	lr, lr, #16
   b91f6:	d1b3      	bne.n	b9160 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b91f8:	e767      	b.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b91fa:	f10e 0901 	add.w	r9, lr, #1
   b91fe:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9202:	f8d0 8000 	ldr.w	r8, [r0]
   b9206:	4542      	cmp	r2, r8
   b9208:	f240 8093 	bls.w	b9332 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b920c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9210:	2d00      	cmp	r5, #0
   b9212:	f000 808e 	beq.w	b9332 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b9216:	2d22      	cmp	r5, #34	; 0x22
   b9218:	d130      	bne.n	b927c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b921a:	b1f3      	cbz	r3, b925a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b921c:	6845      	ldr	r5, [r0, #4]
   b921e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9220:	42af      	cmp	r7, r5
   b9222:	d806      	bhi.n	b9232 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b9224:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b9228:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b922c:	4620      	mov	r0, r4
   b922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b9232:	f105 0e01 	add.w	lr, r5, #1
   b9236:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b923a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b923e:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b9242:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b9246:	2700      	movs	r7, #0
   b9248:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b924a:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b924e:	f04f 0a03 	mov.w	sl, #3
   b9252:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b9256:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b925a:	6885      	ldr	r5, [r0, #8]
   b925c:	1c6f      	adds	r7, r5, #1
				count++;
   b925e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b9262:	f43f af32 	beq.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b9266:	2b00      	cmp	r3, #0
   b9268:	f43f af2f 	beq.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b926c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9270:	f8de 500c 	ldr.w	r5, [lr, #12]
   b9274:	3501      	adds	r5, #1
   b9276:	f8ce 500c 	str.w	r5, [lr, #12]
   b927a:	e726      	b.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b927c:	2d5c      	cmp	r5, #92	; 0x5c
   b927e:	d111      	bne.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9280:	f108 0501 	add.w	r5, r8, #1
   b9284:	42aa      	cmp	r2, r5
   b9286:	d90d      	bls.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b9288:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b928a:	5d4d      	ldrb	r5, [r1, r5]
   b928c:	2d75      	cmp	r5, #117	; 0x75
   b928e:	d82b      	bhi.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9290:	2d6d      	cmp	r5, #109	; 0x6d
   b9292:	d80b      	bhi.n	b92ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b9294:	2d66      	cmp	r5, #102	; 0x66
   b9296:	d827      	bhi.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9298:	2d5b      	cmp	r5, #91	; 0x5b
   b929a:	d81d      	bhi.n	b92d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b929c:	2d22      	cmp	r5, #34	; 0x22
   b929e:	d001      	beq.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b92a0:	2d2f      	cmp	r5, #47	; 0x2f
   b92a2:	d121      	bne.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b92a4:	6805      	ldr	r5, [r0, #0]
   b92a6:	3501      	adds	r5, #1
   b92a8:	6005      	str	r5, [r0, #0]
   b92aa:	e7aa      	b.n	b9202 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b92ac:	3d6e      	subs	r5, #110	; 0x6e
   b92ae:	2d07      	cmp	r5, #7
   b92b0:	d81a      	bhi.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b92b2:	a701      	add	r7, pc, #4	; (adr r7, b92b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b92b4:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b92b8:	000b92a5 	.word	0x000b92a5
   b92bc:	000b92e9 	.word	0x000b92e9
   b92c0:	000b92e9 	.word	0x000b92e9
   b92c4:	000b92e9 	.word	0x000b92e9
   b92c8:	000b92a5 	.word	0x000b92a5
   b92cc:	000b92e9 	.word	0x000b92e9
   b92d0:	000b92a5 	.word	0x000b92a5
   b92d4:	000b92ef 	.word	0x000b92ef
   b92d8:	3d5c      	subs	r5, #92	; 0x5c
   b92da:	b2ed      	uxtb	r5, r5
   b92dc:	fa0c f505 	lsl.w	r5, ip, r5
   b92e0:	f240 4741 	movw	r7, #1089	; 0x441
   b92e4:	423d      	tst	r5, r7
   b92e6:	d1dd      	bne.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b92e8:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b92ec:	e77c      	b.n	b91e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b92ee:	f108 0502 	add.w	r5, r8, #2
   b92f2:	6005      	str	r5, [r0, #0]
   b92f4:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b92f8:	f8d0 8000 	ldr.w	r8, [r0]
   b92fc:	4542      	cmp	r2, r8
   b92fe:	d803      	bhi.n	b9308 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9300:	6805      	ldr	r5, [r0, #0]
   b9302:	3d01      	subs	r5, #1
   b9304:	6005      	str	r5, [r0, #0]
					break;
   b9306:	e7cd      	b.n	b92a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9308:	f811 5008 	ldrb.w	r5, [r1, r8]
   b930c:	2d00      	cmp	r5, #0
   b930e:	d0f7      	beq.n	b9300 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9310:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b9314:	f1bb 0f09 	cmp.w	fp, #9
   b9318:	d904      	bls.n	b9324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b931a:	f025 0520 	bic.w	r5, r5, #32
   b931e:	3d41      	subs	r5, #65	; 0x41
   b9320:	2d05      	cmp	r5, #5
   b9322:	d8e1      	bhi.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b9324:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9328:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b932c:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b932e:	d1e3      	bne.n	b92f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b9330:	e7e6      	b.n	b9300 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b9332:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b9336:	f06f 0402 	mvn.w	r4, #2
   b933a:	e777      	b.n	b922c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b933c:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b9340:	2b00      	cmp	r3, #0
   b9342:	f43f aec2 	beq.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b9346:	6885      	ldr	r5, [r0, #8]
   b9348:	1c6f      	adds	r7, r5, #1
   b934a:	f43f aebe 	beq.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b934e:	012d      	lsls	r5, r5, #4
   b9350:	5d5d      	ldrb	r5, [r3, r5]
   b9352:	3d01      	subs	r5, #1
   b9354:	2d01      	cmp	r5, #1
   b9356:	f67f aeb8 	bls.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b935a:	6845      	ldr	r5, [r0, #4]
   b935c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b9360:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9364:	f1b8 0f00 	cmp.w	r8, #0
   b9368:	f6ff aeaf 	blt.w	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b936c:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b9370:	3d01      	subs	r5, #1
   b9372:	2d01      	cmp	r5, #1
   b9374:	d80a      	bhi.n	b938c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b9376:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b937a:	3501      	adds	r5, #1
   b937c:	d006      	beq.n	b938c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b937e:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b9382:	3501      	adds	r5, #1
   b9384:	d102      	bne.n	b938c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b9386:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b938a:	e69e      	b.n	b90ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b938c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9390:	f1ae 0e10 	sub.w	lr, lr, #16
   b9394:	e7e6      	b.n	b9364 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b9396:	f1a5 0920 	sub.w	r9, r5, #32
   b939a:	4f24      	ldr	r7, [pc, #144]	; (b942c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b939c:	fa5f f989 	uxtb.w	r9, r9
   b93a0:	fa0c f909 	lsl.w	r9, ip, r9
   b93a4:	ea19 0f07 	tst.w	r9, r7
   b93a8:	f47f aeaa 	bne.w	b9100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b93ac:	3d20      	subs	r5, #32
   b93ae:	2d5e      	cmp	r5, #94	; 0x5e
   b93b0:	d89a      	bhi.n	b92e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b93b2:	f108 0501 	add.w	r5, r8, #1
   b93b6:	6005      	str	r5, [r0, #0]
   b93b8:	e68f      	b.n	b90da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b93ba:	2d0d      	cmp	r5, #13
   b93bc:	d1f6      	bne.n	b93ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b93be:	e69f      	b.n	b9100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b93c0:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b93c4:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b93c8:	e7f8      	b.n	b93bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b93ca:	6845      	ldr	r5, [r0, #4]
   b93cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b93ce:	42af      	cmp	r7, r5
   b93d0:	f67f af28 	bls.w	b9224 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b93d4:	f105 0801 	add.w	r8, r5, #1
   b93d8:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b93dc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b93e0:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b93e4:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b93e8:	2700      	movs	r7, #0
   b93ea:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b93ec:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b93f0:	f04f 0a04 	mov.w	sl, #4
   b93f4:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b93f8:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b93fc:	6805      	ldr	r5, [r0, #0]
   b93fe:	3d01      	subs	r5, #1
   b9400:	e683      	b.n	b910a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b9402:	2b00      	cmp	r3, #0
   b9404:	f43f af12 	beq.w	b922c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9408:	6842      	ldr	r2, [r0, #4]
   b940a:	1e51      	subs	r1, r2, #1
   b940c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b9410:	2900      	cmp	r1, #0
   b9412:	f6ff af0b 	blt.w	b922c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b9416:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b941a:	3201      	adds	r2, #1
   b941c:	d003      	beq.n	b9426 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b941e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b9422:	3201      	adds	r2, #1
   b9424:	d087      	beq.n	b9336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b9426:	3901      	subs	r1, #1
   b9428:	3b10      	subs	r3, #16
   b942a:	e7f1      	b.n	b9410 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b942c:	04001001 	.word	0x04001001

000b9430 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b9430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b9432:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b9434:	4604      	mov	r4, r0
	if (offset == 0) {
   b9436:	b912      	cbnz	r2, b943e <_ZN10JsonParser5parseEv+0xe>
		return false;
   b9438:	2000      	movs	r0, #0
}
   b943a:	b003      	add	sp, #12
   b943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b943e:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b9440:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b9444:	b1ab      	cbz	r3, b9472 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b9446:	2100      	movs	r1, #0
	parser->toknext = 0;
   b9448:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b944c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b9450:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9452:	69c1      	ldr	r1, [r0, #28]
   b9454:	9100      	str	r1, [sp, #0]
   b9456:	6841      	ldr	r1, [r0, #4]
   b9458:	4630      	mov	r0, r6
   b945a:	f7ff fe0d 	bl	b9078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b945e:	1c43      	adds	r3, r0, #1
   b9460:	d128      	bne.n	b94b4 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b9462:	7c25      	ldrb	r5, [r4, #16]
   b9464:	2d00      	cmp	r5, #0
   b9466:	d1e7      	bne.n	b9438 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b9468:	6960      	ldr	r0, [r4, #20]
   b946a:	f003 ff1b 	bl	bd2a4 <free>
			tokens = 0;
   b946e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b9470:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b9472:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b9474:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b9478:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b947c:	68e2      	ldr	r2, [r4, #12]
   b947e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b9480:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b9482:	9500      	str	r5, [sp, #0]
   b9484:	462b      	mov	r3, r5
   b9486:	4630      	mov	r0, r6
   b9488:	f7ff fdf6 	bl	b9078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b948c:	2800      	cmp	r0, #0
   b948e:	dbd3      	blt.n	b9438 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b9490:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b9492:	d017      	beq.n	b94c4 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b9494:	0100      	lsls	r0, r0, #4
   b9496:	f003 fefd 	bl	bd294 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b949a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b949c:	6160      	str	r0, [r4, #20]
   b949e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94a0:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b94a2:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94a6:	68e2      	ldr	r2, [r4, #12]
   b94a8:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b94aa:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94ac:	4630      	mov	r0, r6
   b94ae:	f7ff fde3 	bl	b9078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b94b2:	e001      	b.n	b94b8 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b94b4:	2800      	cmp	r0, #0
   b94b6:	dbbf      	blt.n	b9438 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b94b8:	6963      	ldr	r3, [r4, #20]
   b94ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b94be:	61a0      	str	r0, [r4, #24]
	return true;
   b94c0:	2001      	movs	r0, #1
   b94c2:	e7ba      	b.n	b943a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b94c4:	6963      	ldr	r3, [r4, #20]
   b94c6:	61a3      	str	r3, [r4, #24]
   b94c8:	e7fa      	b.n	b94c0 <_ZN10JsonParser5parseEv+0x90>

000b94ca <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b94ca:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b94cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b94ce:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b94d0:	4604      	mov	r4, r0
	if (start == -1) {
   b94d2:	d018      	beq.n	b9506 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b94d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b94d6:	2a00      	cmp	r2, #0
   b94d8:	dd08      	ble.n	b94ec <_ZN12JsonModifier6finishEv+0x22>
   b94da:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b94dc:	68e5      	ldr	r5, [r4, #12]
   b94de:	6848      	ldr	r0, [r1, #4]
   b94e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b94e2:	442b      	add	r3, r5
   b94e4:	4401      	add	r1, r0
   b94e6:	4418      	add	r0, r3
   b94e8:	f007 fe98 	bl	c121c <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b94ec:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b94f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b94f2:	440b      	add	r3, r1
   b94f4:	68e1      	ldr	r1, [r4, #12]
   b94f6:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b94f8:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b94fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b94fc:	f7ff ff98 	bl	b9430 <_ZN10JsonParser5parseEv>
	start = -1;
   b9500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9504:	6363      	str	r3, [r4, #52]	; 0x34
}
   b9506:	bd38      	pop	{r3, r4, r5, pc}

000b9508 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b9508:	4770      	bx	lr

000b950a <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b950a:	4770      	bx	lr

000b950c <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b950c:	b510      	push	{r4, lr}
}
   b950e:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b9510:	4604      	mov	r4, r0
}
   b9512:	f7fa fdc4 	bl	b409e <_ZdlPvj>
   b9516:	4620      	mov	r0, r4
   b9518:	bd10      	pop	{r4, pc}

000b951a <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b951a:	b510      	push	{r4, lr}
}
   b951c:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b951e:	4604      	mov	r4, r0
}
   b9520:	f7fa fdbd 	bl	b409e <_ZdlPvj>
   b9524:	4620      	mov	r0, r4
   b9526:	bd10      	pop	{r4, pc}

000b9528 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9528:	b510      	push	{r4, lr}
   b952a:	4b05      	ldr	r3, [pc, #20]	; (b9540 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b952c:	4604      	mov	r4, r0
   b952e:	f840 3b1c 	str.w	r3, [r0], #28
   b9532:	f006 fa09 	bl	bf948 <_ZN6StringD1Ev>
   b9536:	1d20      	adds	r0, r4, #4
   b9538:	f006 fa06 	bl	bf948 <_ZN6StringD1Ev>
}
   b953c:	4620      	mov	r0, r4
   b953e:	bd10      	pop	{r4, pc}
   b9540:	000c4c90 	.word	0x000c4c90

000b9544 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9544:	b510      	push	{r4, lr}
   b9546:	4604      	mov	r4, r0
}
   b9548:	f7ff ffee 	bl	b9528 <_ZN22LocalTimePosixTimezoneD1Ev>
   b954c:	4620      	mov	r0, r4
   b954e:	2158      	movs	r1, #88	; 0x58
   b9550:	f7fa fda5 	bl	b409e <_ZdlPvj>
   b9554:	4620      	mov	r0, r4
   b9556:	bd10      	pop	{r4, pc}

000b9558 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b9558:	b510      	push	{r4, lr}
   b955a:	4b04      	ldr	r3, [pc, #16]	; (b956c <_ZN9LocalTimeD1Ev+0x14>)
   b955c:	4604      	mov	r4, r0
   b955e:	f840 3b04 	str.w	r3, [r0], #4
   b9562:	f7ff ffe1 	bl	b9528 <_ZN22LocalTimePosixTimezoneD1Ev>
   b9566:	4620      	mov	r0, r4
   b9568:	bd10      	pop	{r4, pc}
   b956a:	bf00      	nop
   b956c:	000c4c60 	.word	0x000c4c60

000b9570 <_ZN9LocalTimeD0Ev>:
   b9570:	b510      	push	{r4, lr}
   b9572:	4604      	mov	r4, r0
   b9574:	f7ff fff0 	bl	b9558 <_ZN9LocalTimeD1Ev>
   b9578:	4620      	mov	r0, r4
   b957a:	2160      	movs	r1, #96	; 0x60
   b957c:	f7fa fd8f 	bl	b409e <_ZdlPvj>
   b9580:	4620      	mov	r0, r4
   b9582:	bd10      	pop	{r4, pc}

000b9584 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b9584:	f020 0302 	bic.w	r3, r0, #2
   b9588:	2b01      	cmp	r3, #1
   b958a:	d003      	beq.n	b9594 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b958c:	1f43      	subs	r3, r0, #5
   b958e:	4258      	negs	r0, r3
   b9590:	4158      	adcs	r0, r3
   b9592:	4770      	bx	lr
   b9594:	4618      	mov	r0, r3
   b9596:	4770      	bx	lr

000b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b9598:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b959c:	7103      	strb	r3, [r0, #4]
   b959e:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b95a2:	7143      	strb	r3, [r0, #5]
   b95a4:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b95a8:	7183      	strb	r3, [r0, #6]
   b95aa:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b95ae:	71c3      	strb	r3, [r0, #7]
   b95b0:	4770      	bx	lr

000b95b2 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b95b2:	b538      	push	{r3, r4, r5, lr}
   b95b4:	4604      	mov	r4, r0
   b95b6:	460d      	mov	r5, r1
   b95b8:	3004      	adds	r0, #4
   b95ba:	3104      	adds	r1, #4
   b95bc:	f006 fa4b 	bl	bfa56 <_ZN6StringaSERKS_>
   b95c0:	f105 0114 	add.w	r1, r5, #20
   b95c4:	f104 0014 	add.w	r0, r4, #20
   b95c8:	f7ff ffe6 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b95cc:	f105 011c 	add.w	r1, r5, #28
   b95d0:	f104 001c 	add.w	r0, r4, #28
   b95d4:	f006 fa3f 	bl	bfa56 <_ZN6StringaSERKS_>
   b95d8:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b95dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b95e0:	f7ff ffda 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b95e4:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b95e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b95ec:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b95f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b95f4:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b95f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b95fc:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b9600:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b9604:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b9608:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b960c:	f7ff ffc4 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9610:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b9614:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b9618:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b961c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b9620:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b9624:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b9628:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b962c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b9630:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b9634:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b9638:	f7ff ffae 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b963c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b9640:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9644:	bd38      	pop	{r3, r4, r5, pc}

000b9646 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9646:	680b      	ldr	r3, [r1, #0]
   b9648:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b964a:	684b      	ldr	r3, [r1, #4]
   b964c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b964e:	b113      	cbz	r3, b9656 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9650:	685a      	ldr	r2, [r3, #4]
   b9652:	3201      	adds	r2, #1
   b9654:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9656:	4770      	bx	lr

000b9658 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b9658:	4a02      	ldr	r2, [pc, #8]	; (b9664 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b965a:	6002      	str	r2, [r0, #0]
   b965c:	684a      	ldr	r2, [r1, #4]
   b965e:	6042      	str	r2, [r0, #4]
   b9660:	4770      	bx	lr
   b9662:	bf00      	nop
   b9664:	000c4c70 	.word	0x000c4c70

000b9668 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b9668:	694a      	ldr	r2, [r1, #20]
   b966a:	6803      	ldr	r3, [r0, #0]
   b966c:	f362 0316 	bfi	r3, r2, #0, #23
   b9670:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b9672:	690b      	ldr	r3, [r1, #16]
   b9674:	1c5a      	adds	r2, r3, #1
   b9676:	8843      	ldrh	r3, [r0, #2]
   b9678:	f362 13ca 	bfi	r3, r2, #7, #4
   b967c:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b967e:	68ca      	ldr	r2, [r1, #12]
   b9680:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b9684:	f362 03c7 	bfi	r3, r2, #3, #5
   b9688:	70c3      	strb	r3, [r0, #3]
}
   b968a:	4770      	bx	lr

000b968c <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b968c:	4a02      	ldr	r2, [pc, #8]	; (b9698 <_ZN12LocalTimeHMSC1Ev+0xc>)
   b968e:	6002      	str	r2, [r0, #0]
   b9690:	2200      	movs	r2, #0
   b9692:	6042      	str	r2, [r0, #4]
}
   b9694:	4770      	bx	lr
   b9696:	bf00      	nop
   b9698:	000c4c70 	.word	0x000c4c70

000b969c <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b969c:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b969e:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b96a0:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b96a2:	8083      	strh	r3, [r0, #4]
   b96a4:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b96a6:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b96a8:	ab05      	add	r3, sp, #20
   b96aa:	9300      	str	r3, [sp, #0]
   b96ac:	4913      	ldr	r1, [pc, #76]	; (b96fc <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b96ae:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b96b0:	ab04      	add	r3, sp, #16
   b96b2:	aa03      	add	r2, sp, #12
   b96b4:	4628      	mov	r0, r5
   b96b6:	f003 fe0d 	bl	bd2d4 <sscanf>
   b96ba:	2803      	cmp	r0, #3
   b96bc:	d107      	bne.n	b96ce <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b96be:	9b03      	ldr	r3, [sp, #12]
   b96c0:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b96c2:	9b04      	ldr	r3, [sp, #16]
   b96c4:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b96c6:	9b05      	ldr	r3, [sp, #20]
   b96c8:	71a3      	strb	r3, [r4, #6]
}
   b96ca:	b007      	add	sp, #28
   b96cc:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b96ce:	490c      	ldr	r1, [pc, #48]	; (b9700 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b96d0:	ab04      	add	r3, sp, #16
   b96d2:	aa03      	add	r2, sp, #12
   b96d4:	4628      	mov	r0, r5
   b96d6:	f003 fdfd 	bl	bd2d4 <sscanf>
   b96da:	2802      	cmp	r0, #2
   b96dc:	d104      	bne.n	b96e8 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b96de:	9b03      	ldr	r3, [sp, #12]
   b96e0:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b96e2:	9b04      	ldr	r3, [sp, #16]
   b96e4:	7163      	strb	r3, [r4, #5]
   b96e6:	e7f0      	b.n	b96ca <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b96e8:	4906      	ldr	r1, [pc, #24]	; (b9704 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b96ea:	aa03      	add	r2, sp, #12
   b96ec:	4628      	mov	r0, r5
   b96ee:	f003 fdf1 	bl	bd2d4 <sscanf>
   b96f2:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b96f4:	bf04      	itt	eq
   b96f6:	9b03      	ldreq	r3, [sp, #12]
   b96f8:	7123      	strbeq	r3, [r4, #4]
}
   b96fa:	e7e6      	b.n	b96ca <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b96fc:	000c4c24 	.word	0x000c4c24
   b9700:	000c4c27 	.word	0x000c4c27
   b9704:	000c3a03 	.word	0x000c3a03

000b9708 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b9708:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b970c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9710:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b9714:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9716:	bfb8      	it	lt
   b9718:	4808      	ldrlt	r0, [pc, #32]	; (b973c <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b971a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b971e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b9722:	bfbd      	ittte	lt
   b9724:	fb00 3002 	mlalt	r0, r0, r2, r3
   b9728:	1840      	addlt	r0, r0, r1
   b972a:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b972c:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b9730:	bfa4      	itt	ge
   b9732:	fb00 3002 	mlage	r0, r0, r2, r3
   b9736:	1840      	addge	r0, r0, r1
}
   b9738:	4770      	bx	lr
   b973a:	bf00      	nop
   b973c:	fffff1f0 	.word	0xfffff1f0

000b9740 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b9740:	b508      	push	{r3, lr}
   b9742:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b9746:	b14b      	cbz	r3, b975c <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b9748:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b974c:	b943      	cbnz	r3, b9760 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b974e:	302c      	adds	r0, #44	; 0x2c
   b9750:	f7ff ffda 	bl	b9708 <_ZNK12LocalTimeHMS9toSecondsEv>
   b9754:	fab0 f080 	clz	r0, r0
   b9758:	0940      	lsrs	r0, r0, #5
   b975a:	bd08      	pop	{r3, pc}
   b975c:	2001      	movs	r0, #1
   b975e:	e7fc      	b.n	b975a <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b9760:	2000      	movs	r0, #0
   b9762:	e7fa      	b.n	b975a <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b9764 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b9764:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b9768:	b943      	cbnz	r3, b977c <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b976a:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b976e:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b9770:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9774:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b9776:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b977a:	600b      	str	r3, [r1, #0]
}
   b977c:	4770      	bx	lr

000b977e <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b977e:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b9782:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b9784:	b9b3      	cbnz	r3, b97b4 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b9786:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b978a:	688c      	ldr	r4, [r1, #8]
   b978c:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b978e:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b9792:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b9794:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b9798:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b979a:	bfb5      	itete	lt
   b979c:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b979e:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b97a0:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b97a2:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b97a4:	bfb5      	itete	lt
   b97a6:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b97aa:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b97ae:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b97b0:	189b      	addge	r3, r3, r2
   b97b2:	600b      	str	r3, [r1, #0]
}
   b97b4:	bd30      	pop	{r4, r5, pc}
	...

000b97b8 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b97b8:	b508      	push	{r3, lr}
   b97ba:	4a05      	ldr	r2, [pc, #20]	; (b97d0 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b97bc:	6002      	str	r2, [r0, #0]
   b97be:	2200      	movs	r2, #0
   b97c0:	4603      	mov	r3, r0
   b97c2:	6042      	str	r2, [r0, #4]
   b97c4:	3008      	adds	r0, #8
   b97c6:	f7ff ff61 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
}
   b97ca:	4618      	mov	r0, r3
   b97cc:	bd08      	pop	{r3, pc}
   b97ce:	bf00      	nop
   b97d0:	000c4c80 	.word	0x000c4c80

000b97d4 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b97d4:	2300      	movs	r3, #0
   b97d6:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b97d8:	8183      	strh	r3, [r0, #12]
   b97da:	7383      	strb	r3, [r0, #14]
}
   b97dc:	4770      	bx	lr
	...

000b97e0 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b97e0:	b530      	push	{r4, r5, lr}
   b97e2:	4604      	mov	r4, r0
   b97e4:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b97e6:	460d      	mov	r5, r1
   b97e8:	b111      	cbz	r1, b97f0 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b97ea:	780b      	ldrb	r3, [r1, #0]
   b97ec:	2b4d      	cmp	r3, #77	; 0x4d
   b97ee:	d005      	beq.n	b97fc <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b97f0:	4620      	mov	r0, r4
}
   b97f2:	b007      	add	sp, #28
   b97f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b97f8:	f7ff bfec 	b.w	b97d4 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b97fc:	ab05      	add	r3, sp, #20
   b97fe:	9300      	str	r3, [sp, #0]
   b9800:	4911      	ldr	r1, [pc, #68]	; (b9848 <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b9802:	ab04      	add	r3, sp, #16
   b9804:	aa03      	add	r2, sp, #12
   b9806:	4628      	mov	r0, r5
   b9808:	f003 fd64 	bl	bd2d4 <sscanf>
   b980c:	2803      	cmp	r0, #3
   b980e:	d116      	bne.n	b983e <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b9810:	9b03      	ldr	r3, [sp, #12]
   b9812:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b9814:	9b04      	ldr	r3, [sp, #16]
   b9816:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b9818:	9b05      	ldr	r3, [sp, #20]
   b981a:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b981c:	212f      	movs	r1, #47	; 0x2f
   b981e:	4628      	mov	r0, r5
   b9820:	f007 fd9a 	bl	c1358 <strchr>
        if (cp) {
   b9824:	b140      	cbz	r0, b9838 <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b9826:	1c41      	adds	r1, r0, #1
   b9828:	f104 0008 	add.w	r0, r4, #8
   b982c:	f7ff ff36 	bl	b969c <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b9830:	2301      	movs	r3, #1
   b9832:	71e3      	strb	r3, [r4, #7]
}
   b9834:	b007      	add	sp, #28
   b9836:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b9838:	81a0      	strh	r0, [r4, #12]
   b983a:	73a0      	strb	r0, [r4, #14]
}
   b983c:	e7f8      	b.n	b9830 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b983e:	4620      	mov	r0, r4
   b9840:	f7ff ffc8 	bl	b97d4 <_ZN15LocalTimeChange5clearEv>
   b9844:	e7f6      	b.n	b9834 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b9846:	bf00      	nop
   b9848:	000c4c3f 	.word	0x000c4c3f

000b984c <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b984c:	4b10      	ldr	r3, [pc, #64]	; (b9890 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b984e:	4911      	ldr	r1, [pc, #68]	; (b9894 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b9850:	b510      	push	{r4, lr}
   b9852:	4604      	mov	r4, r0
   b9854:	f840 3b04 	str.w	r3, [r0], #4
   b9858:	f006 f8c1 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   b985c:	f104 0014 	add.w	r0, r4, #20
   b9860:	f7ff ff14 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
   b9864:	490b      	ldr	r1, [pc, #44]	; (b9894 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b9866:	f104 001c 	add.w	r0, r4, #28
   b986a:	f006 f8b8 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   b986e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9872:	f7ff ff0b 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
   b9876:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b987a:	f7ff ff9d 	bl	b97b8 <_ZN15LocalTimeChangeC1Ev>
   b987e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9882:	f7ff ff99 	bl	b97b8 <_ZN15LocalTimeChangeC1Ev>
   b9886:	2300      	movs	r3, #0
   b9888:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b988c:	4620      	mov	r0, r4
   b988e:	bd10      	pop	{r4, pc}
   b9890:	000c4c90 	.word	0x000c4c90
   b9894:	000c54f8 	.word	0x000c54f8

000b9898 <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b9898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b989c:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b989e:	4608      	mov	r0, r1
   b98a0:	f007 fd84 	bl	c13ac <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b98a4:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b98a6:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b98a8:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b98aa:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b98ae:	493f      	ldr	r1, [pc, #252]	; (b99ac <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b98b0:	9801      	ldr	r0, [sp, #4]
   b98b2:	aa01      	add	r2, sp, #4
   b98b4:	f008 fc82 	bl	c21bc <strtok_r>
   b98b8:	4601      	mov	r1, r0
   b98ba:	2800      	cmp	r0, #0
   b98bc:	d062      	beq.n	b9984 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b98be:	2d01      	cmp	r5, #1
   b98c0:	f105 0301 	add.w	r3, r5, #1
   b98c4:	d053      	beq.n	b996e <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b98c6:	2d02      	cmp	r5, #2
   b98c8:	d056      	beq.n	b9978 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b98ca:	2d00      	cmp	r5, #0
   b98cc:	d146      	bne.n	b995c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b98ce:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b98d0:	f892 9000 	ldrb.w	r9, [r2]
   b98d4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b98d8:	4615      	mov	r5, r2
   b98da:	4617      	mov	r7, r2
   b98dc:	f102 0201 	add.w	r2, r2, #1
   b98e0:	d8f6      	bhi.n	b98d0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b98e2:	2200      	movs	r2, #0
   b98e4:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b98e6:	f104 001c 	add.w	r0, r4, #28
   b98ea:	f006 f8d6 	bl	bfa9a <_ZN6StringaSEPKc>
                valid = true;
   b98ee:	2201      	movs	r2, #1
                *cp = save2;
   b98f0:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b98f4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b98f8:	782a      	ldrb	r2, [r5, #0]
   b98fa:	b36a      	cbz	r2, b9958 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b98fc:	f897 a000 	ldrb.w	sl, [r7]
   b9900:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b9904:	2a3f      	cmp	r2, #63	; 0x3f
   b9906:	46b9      	mov	r9, r7
   b9908:	46bb      	mov	fp, r7
   b990a:	f107 0701 	add.w	r7, r7, #1
   b990e:	d9f5      	bls.n	b98fc <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b9910:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b9912:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b9916:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b991a:	4629      	mov	r1, r5
   b991c:	4638      	mov	r0, r7
   b991e:	f7ff febd 	bl	b969c <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b9922:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b9926:	f1ba 0f00 	cmp.w	sl, #0
   b992a:	d015      	beq.n	b9958 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b992c:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b992e:	f81b ab01 	ldrb.w	sl, [fp], #1
   b9932:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b9936:	d8f9      	bhi.n	b992c <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b9938:	2200      	movs	r2, #0
   b993a:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b993c:	4649      	mov	r1, r9
   b993e:	1d20      	adds	r0, r4, #4
   b9940:	f006 f8ab 	bl	bfa9a <_ZN6StringaSEPKc>
                        *cp = save2;
   b9944:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b9948:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b994c:	f1ba 0f00 	cmp.w	sl, #0
   b9950:	d006      	beq.n	b9960 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b9952:	4629      	mov	r1, r5
   b9954:	f7ff fea2 	bl	b969c <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b9958:	2501      	movs	r5, #1
   b995a:	e7a8      	b.n	b98ae <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b995c:	461d      	mov	r5, r3
   b995e:	e7a6      	b.n	b98ae <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b9960:	4639      	mov	r1, r7
   b9962:	f7ff fe19 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b9966:	7e23      	ldrb	r3, [r4, #24]
   b9968:	3b01      	subs	r3, #1
   b996a:	7623      	strb	r3, [r4, #24]
   b996c:	e7f4      	b.n	b9958 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b996e:	4640      	mov	r0, r8
   b9970:	f7ff ff36 	bl	b97e0 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9974:	2502      	movs	r5, #2
   b9976:	e79a      	b.n	b98ae <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b9978:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b997c:	f7ff ff30 	bl	b97e0 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9980:	2503      	movs	r5, #3
   b9982:	e794      	b.n	b98ae <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b9984:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b9988:	b143      	cbz	r3, b999c <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b998a:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b998e:	b92a      	cbnz	r2, b999c <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b9990:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9994:	f7ff ff1e 	bl	b97d4 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b9998:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b999c:	4630      	mov	r0, r6
   b999e:	f003 fc81 	bl	bd2a4 <free>

    return valid;
}
   b99a2:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b99a6:	b003      	add	sp, #12
   b99a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b99ac:	000c4c49 	.word	0x000c4c49

000b99b0 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b99b0:	b538      	push	{r3, r4, r5, lr}
   b99b2:	4b13      	ldr	r3, [pc, #76]	; (b9a00 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b99b4:	4604      	mov	r4, r0
   b99b6:	460d      	mov	r5, r1
   b99b8:	f840 3b04 	str.w	r3, [r0], #4
   b99bc:	4911      	ldr	r1, [pc, #68]	; (b9a04 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b99be:	f006 f80e 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   b99c2:	f104 0014 	add.w	r0, r4, #20
   b99c6:	f7ff fe61 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
   b99ca:	490e      	ldr	r1, [pc, #56]	; (b9a04 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b99cc:	f104 001c 	add.w	r0, r4, #28
   b99d0:	f006 f805 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   b99d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b99d8:	f7ff fe58 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
   b99dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b99e0:	f7ff feea 	bl	b97b8 <_ZN15LocalTimeChangeC1Ev>
   b99e4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b99e8:	f7ff fee6 	bl	b97b8 <_ZN15LocalTimeChangeC1Ev>
   b99ec:	2300      	movs	r3, #0
   b99ee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b99f2:	4629      	mov	r1, r5
   b99f4:	4620      	mov	r0, r4
   b99f6:	f7ff ff4f 	bl	b9898 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b99fa:	4620      	mov	r0, r4
   b99fc:	bd38      	pop	{r3, r4, r5, pc}
   b99fe:	bf00      	nop
   b9a00:	000c4c90 	.word	0x000c4c90
   b9a04:	000c54f8 	.word	0x000c54f8

000b9a08 <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9a08:	b508      	push	{r3, lr}
   b9a0a:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9a0c:	f7ff fe3e 	bl	b968c <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b9a10:	688a      	ldr	r2, [r1, #8]
   b9a12:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b9a14:	684a      	ldr	r2, [r1, #4]
   b9a16:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9a18:	680a      	ldr	r2, [r1, #0]
   b9a1a:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9a1c:	4618      	mov	r0, r3
   b9a1e:	bd08      	pop	{r3, pc}

000b9a20 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b9a20:	b513      	push	{r0, r1, r4, lr}
   b9a22:	4b07      	ldr	r3, [pc, #28]	; (b9a40 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b9a24:	6003      	str	r3, [r0, #0]
   b9a26:	2300      	movs	r3, #0
   b9a28:	6043      	str	r3, [r0, #4]
   b9a2a:	4604      	mov	r4, r0
    *this = value.hms();
   b9a2c:	4668      	mov	r0, sp
   b9a2e:	f7ff ffeb 	bl	b9a08 <_ZNK14LocalTimeValue3hmsEv>
   b9a32:	4620      	mov	r0, r4
   b9a34:	4669      	mov	r1, sp
   b9a36:	f7ff fdaf 	bl	b9598 <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b9a3a:	b002      	add	sp, #8
   b9a3c:	bd10      	pop	{r4, pc}
   b9a3e:	bf00      	nop
   b9a40:	000c4c70 	.word	0x000c4c70

000b9a44 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b9a44:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b9a46:	2300      	movs	r3, #0
   b9a48:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b9a4a:	a801      	add	r0, sp, #4
   b9a4c:	9301      	str	r3, [sp, #4]
   b9a4e:	f7ff fe0b 	bl	b9668 <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b9a52:	9801      	ldr	r0, [sp, #4]
   b9a54:	b003      	add	sp, #12
   b9a56:	f85d fb04 	ldr.w	pc, [sp], #4

000b9a5a <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b9a5a:	b510      	push	{r4, lr}
   b9a5c:	4604      	mov	r4, r0
    *this = value.ymd();
   b9a5e:	4608      	mov	r0, r1
   b9a60:	f7ff fff0 	bl	b9a44 <_ZNK14LocalTimeValue3ymdEv>
   b9a64:	6020      	str	r0, [r4, #0]
}
   b9a66:	bd10      	pop	{r4, pc}

000b9a68 <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b9a68:	b510      	push	{r4, lr}
   b9a6a:	4604      	mov	r4, r0
   b9a6c:	b088      	sub	sp, #32
   b9a6e:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b9a70:	3068      	adds	r0, #104	; 0x68
   b9a72:	a901      	add	r1, sp, #4
   b9a74:	f007 fb72 	bl	c115c <asctime_r>
    int len = strlen(ascstr);
   b9a78:	a801      	add	r0, sp, #4
   b9a7a:	f007 fcb4 	bl	c13e6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9a7e:	ab08      	add	r3, sp, #32
   b9a80:	4418      	add	r0, r3
   b9a82:	2300      	movs	r3, #0
   b9a84:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b9a88:	a901      	add	r1, sp, #4
   b9a8a:	4620      	mov	r0, r4
   b9a8c:	f005 ffa7 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9a90:	4620      	mov	r0, r4
   b9a92:	b008      	add	sp, #32
   b9a94:	bd10      	pop	{r4, pc}
	...

000b9a98 <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9a98:	b538      	push	{r3, r4, r5, lr}
   b9a9a:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9a9c:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b9a9e:	460d      	mov	r5, r1
    if (config.isZ()) {
   b9aa0:	f7ff fe4e 	bl	b9740 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9aa4:	b128      	cbz	r0, b9ab2 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9aa6:	4909      	ldr	r1, [pc, #36]	; (b9acc <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9aa8:	4620      	mov	r0, r4
   b9aaa:	f005 ff98 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b9aae:	4620      	mov	r0, r4
   b9ab0:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b9ab2:	6828      	ldr	r0, [r5, #0]
   b9ab4:	f7ff fd66 	bl	b9584 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9ab8:	b128      	cbz	r0, b9ac6 <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9aba:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b9abe:	4620      	mov	r0, r4
   b9ac0:	f005 ffd8 	bl	bfa74 <_ZN6StringC1ERKS_>
   b9ac4:	e7f3      	b.n	b9aae <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9ac6:	f105 0120 	add.w	r1, r5, #32
   b9aca:	e7f8      	b.n	b9abe <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9acc:	000c4c4b 	.word	0x000c4c4b

000b9ad0 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b9ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ad4:	4680      	mov	r8, r0
   b9ad6:	b0a8      	sub	sp, #160	; 0xa0
   b9ad8:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9ada:	4615      	mov	r5, r2
   b9adc:	b12a      	cbz	r2, b9aea <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b9ade:	4b47      	ldr	r3, [pc, #284]	; (b9bfc <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b9ae0:	4610      	mov	r0, r2
   b9ae2:	6819      	ldr	r1, [r3, #0]
   b9ae4:	f007 fc4f 	bl	c1386 <strcmp>
   b9ae8:	b938      	cbnz	r0, b9afa <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9aea:	4621      	mov	r1, r4
   b9aec:	4640      	mov	r0, r8
   b9aee:	f7ff ffbb 	bl	b9a68 <_ZN16LocalTimeConvert7timeStrEv>
}
   b9af2:	4640      	mov	r0, r8
   b9af4:	b028      	add	sp, #160	; 0xa0
   b9af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9afa:	4629      	mov	r1, r5
   b9afc:	223f      	movs	r2, #63	; 0x3f
   b9afe:	a818      	add	r0, sp, #96	; 0x60
   b9b00:	f007 fc8d 	bl	c141e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9b04:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b06:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9b08:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b0c:	f007 fc6b 	bl	c13e6 <strlen>
    String zoneNameStr = zoneName();
   b9b10:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b12:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9b14:	a803      	add	r0, sp, #12
   b9b16:	f7ff ffbf 	bl	b9a98 <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9b1a:	1d20      	adds	r0, r4, #4
   b9b1c:	f7ff fe10 	bl	b9740 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9b20:	b348      	cbz	r0, b9b76 <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b9b22:	4937      	ldr	r1, [pc, #220]	; (b9c00 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b9b24:	a807      	add	r0, sp, #28
   b9b26:	f007 fc38 	bl	c139a <strcpy>
   b9b2a:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9b2c:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b9b2e:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b9b32:	45ba      	cmp	sl, r7
   b9b34:	d94c      	bls.n	b9bd0 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b9b36:	7833      	ldrb	r3, [r6, #0]
   b9b38:	2b25      	cmp	r3, #37	; 0x25
   b9b3a:	f107 0901 	add.w	r9, r7, #1
   b9b3e:	d117      	bne.n	b9b70 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b9b40:	7873      	ldrb	r3, [r6, #1]
   b9b42:	2b7a      	cmp	r3, #122	; 0x7a
   b9b44:	d136      	bne.n	b9bb4 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b9b46:	a807      	add	r0, sp, #28
   b9b48:	f007 fc4d 	bl	c13e6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9b4c:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b9b4e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9b50:	1838      	adds	r0, r7, r0
   b9b52:	ebaa 0207 	sub.w	r2, sl, r7
   b9b56:	1cb1      	adds	r1, r6, #2
   b9b58:	4418      	add	r0, r3
   b9b5a:	f007 fb51 	bl	c1200 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9b5e:	462a      	mov	r2, r5
   b9b60:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9b62:	4630      	mov	r0, r6
   b9b64:	f007 fb4c 	bl	c1200 <memcpy>
            len = strlen(format_str);
   b9b68:	a818      	add	r0, sp, #96	; 0x60
   b9b6a:	f007 fc3c 	bl	c13e6 <strlen>
   b9b6e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b9b70:	3601      	adds	r6, #1
   b9b72:	464f      	mov	r7, r9
   b9b74:	e7db      	b.n	b9b2e <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9b76:	6820      	ldr	r0, [r4, #0]
   b9b78:	f7ff fd04 	bl	b9584 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9b7c:	b1b8      	cbz	r0, b9bae <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b9b7e:	f104 0018 	add.w	r0, r4, #24
   b9b82:	f7ff fdc1 	bl	b9708 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b9b86:	223c      	movs	r2, #60	; 0x3c
   b9b88:	fb90 f3f2 	sdiv	r3, r0, r2
   b9b8c:	2b00      	cmp	r3, #0
   b9b8e:	bfb8      	it	lt
   b9b90:	425b      	neglt	r3, r3
   b9b92:	fbb3 f1f2 	udiv	r1, r3, r2
   b9b96:	fb02 3311 	mls	r3, r2, r1, r3
   b9b9a:	9300      	str	r3, [sp, #0]
   b9b9c:	4a19      	ldr	r2, [pc, #100]	; (b9c04 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b9b9e:	4b1a      	ldr	r3, [pc, #104]	; (b9c08 <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b9ba0:	fb90 f3f3 	sdiv	r3, r0, r3
   b9ba4:	2110      	movs	r1, #16
   b9ba6:	a807      	add	r0, sp, #28
   b9ba8:	f003 fb9c 	bl	bd2e4 <snprintf>
   b9bac:	e7bd      	b.n	b9b2a <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9bae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b9bb2:	e7e6      	b.n	b9b82 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9bb4:	2b5a      	cmp	r3, #90	; 0x5a
   b9bb6:	d1db      	bne.n	b9b70 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9bb8:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9bba:	ab18      	add	r3, sp, #96	; 0x60
   b9bbc:	1978      	adds	r0, r7, r5
   b9bbe:	ebaa 0207 	sub.w	r2, sl, r7
   b9bc2:	1cb1      	adds	r1, r6, #2
   b9bc4:	4418      	add	r0, r3
   b9bc6:	f007 fb1b 	bl	c1200 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9bca:	9903      	ldr	r1, [sp, #12]
   b9bcc:	462a      	mov	r2, r5
   b9bce:	e7c8      	b.n	b9b62 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b9bd0:	2100      	movs	r1, #0
   b9bd2:	222e      	movs	r2, #46	; 0x2e
   b9bd4:	a80c      	add	r0, sp, #48	; 0x30
   b9bd6:	910b      	str	r1, [sp, #44]	; 0x2c
   b9bd8:	f007 fb3a 	bl	c1250 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9bdc:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b9be0:	aa18      	add	r2, sp, #96	; 0x60
   b9be2:	2132      	movs	r1, #50	; 0x32
   b9be4:	a80b      	add	r0, sp, #44	; 0x2c
   b9be6:	f003 fbb5 	bl	bd354 <strftime>
    return String(buf);    
   b9bea:	a90b      	add	r1, sp, #44	; 0x2c
   b9bec:	4640      	mov	r0, r8
   b9bee:	f005 fef6 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b9bf2:	a803      	add	r0, sp, #12
   b9bf4:	f005 fea8 	bl	bf948 <_ZN6StringD1Ev>
   b9bf8:	e77b      	b.n	b9af2 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9bfa:	bf00      	nop
   b9bfc:	2003d690 	.word	0x2003d690
   b9c00:	000c4c4b 	.word	0x000c4c4b
   b9c04:	000c4c4d 	.word	0x000c4c4d
   b9c08:	fffff1f0 	.word	0xfffff1f0

000b9c0c <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9c0c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b9c0e:	4d09      	ldr	r5, [pc, #36]	; (b9c34 <_ZN9LocalTime8instanceEv+0x28>)
   b9c10:	682b      	ldr	r3, [r5, #0]
   b9c12:	b963      	cbnz	r3, b9c2e <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9c14:	2060      	movs	r0, #96	; 0x60
   b9c16:	f7fa fa3e 	bl	b4096 <_Znwj>
   b9c1a:	4604      	mov	r4, r0
   b9c1c:	b130      	cbz	r0, b9c2c <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b9c1e:	4b06      	ldr	r3, [pc, #24]	; (b9c38 <_ZN9LocalTime8instanceEv+0x2c>)
   b9c20:	f840 3b04 	str.w	r3, [r0], #4
   b9c24:	f7ff fe12 	bl	b984c <_ZN22LocalTimePosixTimezoneC1Ev>
   b9c28:	2364      	movs	r3, #100	; 0x64
   b9c2a:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9c2c:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b9c2e:	6828      	ldr	r0, [r5, #0]
   b9c30:	bd38      	pop	{r3, r4, r5, pc}
   b9c32:	bf00      	nop
   b9c34:	2003e4cc 	.word	0x2003e4cc
   b9c38:	000c4c60 	.word	0x000c4c60

000b9c3c <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9c3c:	f003 bba2 	b.w	bd384 <mktime>

000b9c40 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b9c40:	3901      	subs	r1, #1
   b9c42:	290b      	cmp	r1, #11
   b9c44:	d815      	bhi.n	b9c72 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9c46:	e8df f001 	tbb	[pc, r1]
   b9c4a:	0816      	.short	0x0816
   b9c4c:	06160616 	.word	0x06160616
   b9c50:	16061616 	.word	0x16061616
   b9c54:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9c56:	201e      	movs	r0, #30
   b9c58:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9c5a:	0783      	lsls	r3, r0, #30
   b9c5c:	d10d      	bne.n	b9c7a <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b9c5e:	2364      	movs	r3, #100	; 0x64
   b9c60:	fb90 f2f3 	sdiv	r2, r0, r3
   b9c64:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9c68:	2800      	cmp	r0, #0
   b9c6a:	bf0c      	ite	eq
   b9c6c:	201c      	moveq	r0, #28
   b9c6e:	201d      	movne	r0, #29
   b9c70:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b9c72:	2000      	movs	r0, #0
   b9c74:	4770      	bx	lr
            return 31;
   b9c76:	201f      	movs	r0, #31
   b9c78:	4770      	bx	lr
                return 28;
   b9c7a:	201c      	movs	r0, #28
}
   b9c7c:	4770      	bx	lr

000b9c7e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b9c80:	2301      	movs	r3, #1
   b9c82:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9c84:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9c88:	3b01      	subs	r3, #1
   b9c8a:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9c8c:	2300      	movs	r3, #0
   b9c8e:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9c92:	4606      	mov	r6, r0
   b9c94:	460c      	mov	r4, r1
   b9c96:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9c98:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9c9a:	4620      	mov	r0, r4
   b9c9c:	f7ff ffce 	bl	b9c3c <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9ca0:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9ca4:	69a2      	ldr	r2, [r4, #24]
   b9ca6:	429a      	cmp	r2, r3
   b9ca8:	d003      	beq.n	b9cb2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9caa:	68e3      	ldr	r3, [r4, #12]
   b9cac:	3301      	adds	r3, #1
   b9cae:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9cb0:	e7f3      	b.n	b9c9a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9cb2:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9cb6:	2d01      	cmp	r5, #1
   b9cb8:	d013      	beq.n	b9ce2 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9cba:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9cbc:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9cbe:	3d01      	subs	r5, #1
   b9cc0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9cc4:	441d      	add	r5, r3
   b9cc6:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9cc8:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9ccc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9cd0:	f7ff ffb6 	bl	b9c40 <_ZN9LocalTime14lastDayOfMonthEii>
   b9cd4:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9cd6:	bfc4      	itt	gt
   b9cd8:	3d07      	subgt	r5, #7
   b9cda:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9cdc:	4620      	mov	r0, r4
   b9cde:	f7ff ffad 	bl	b9c3c <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9ce2:	4621      	mov	r1, r4
   b9ce4:	f106 0008 	add.w	r0, r6, #8
   b9ce8:	f7ff fd3c 	bl	b9764 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9cec:	4638      	mov	r0, r7
   b9cee:	f7ff fd46 	bl	b977e <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9cf2:	4620      	mov	r0, r4
}
   b9cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9cf8:	f003 bb44 	b.w	bd384 <mktime>

000b9cfc <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9cfe:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9d02:	b085      	sub	sp, #20
   b9d04:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9d06:	b92b      	cbnz	r3, b9d14 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9d08:	f7ff ff80 	bl	b9c0c <_ZN9LocalTime8instanceEv>
   b9d0c:	1d01      	adds	r1, r0, #4
   b9d0e:	1d20      	adds	r0, r4, #4
   b9d10:	f7ff fc4f 	bl	b95b2 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9d14:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9d18:	2b00      	cmp	r3, #0
   b9d1a:	d065      	beq.n	b9de8 <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9d1c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9d20:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9d24:	4639      	mov	r1, r7
   b9d26:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9d28:	463e      	mov	r6, r7
   b9d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9d2e:	f003 fb19 	bl	bd364 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9d32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9d34:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9d3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9d3e:	6833      	ldr	r3, [r6, #0]
   b9d40:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9d42:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9d46:	a802      	add	r0, sp, #8
   b9d48:	f7ff fc86 	bl	b9658 <_ZN12LocalTimeHMSC1ERKS_>
   b9d4c:	aa02      	add	r2, sp, #8
   b9d4e:	4639      	mov	r1, r7
   b9d50:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9d54:	f7ff ff93 	bl	b9c7e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9d58:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9d5c:	f104 0118 	add.w	r1, r4, #24
   b9d60:	a802      	add	r0, sp, #8
   b9d62:	f7ff fc79 	bl	b9658 <_ZN12LocalTimeHMSC1ERKS_>
   b9d66:	aa02      	add	r2, sp, #8
   b9d68:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9d6c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9d70:	f7ff ff85 	bl	b9c7e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9d74:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9d78:	4286      	cmp	r6, r0
   b9d7a:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9d7e:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9d82:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9d86:	da23      	bge.n	b9dd0 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9d88:	42b2      	cmp	r2, r6
   b9d8a:	eb73 0505 	sbcs.w	r5, r3, r5
   b9d8e:	da19      	bge.n	b9dc4 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9d90:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9d92:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9d94:	6820      	ldr	r0, [r4, #0]
   b9d96:	f7ff fbf5 	bl	b9584 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9d9a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9d9e:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9da2:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9da4:	bb10      	cbnz	r0, b9dec <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9da6:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9daa:	f7ff fcad 	bl	b9708 <_ZNK12LocalTimeHMS9toSecondsEv>
   b9dae:	1a2d      	subs	r5, r5, r0
   b9db0:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9db4:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9db8:	9901      	ldr	r1, [sp, #4]
   b9dba:	a802      	add	r0, sp, #8
   b9dbc:	f003 fad2 	bl	bd364 <localtime_r>
}
   b9dc0:	b005      	add	sp, #20
   b9dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9dc4:	4282      	cmp	r2, r0
   b9dc6:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9dc8:	bfb4      	ite	lt
   b9dca:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9dcc:	2302      	movge	r3, #2
   b9dce:	e7e0      	b.n	b9d92 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9dd0:	4282      	cmp	r2, r0
   b9dd2:	eb73 0101 	sbcs.w	r1, r3, r1
   b9dd6:	da01      	bge.n	b9ddc <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9dd8:	2303      	movs	r3, #3
   b9dda:	e7da      	b.n	b9d92 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9ddc:	42b2      	cmp	r2, r6
   b9dde:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9de0:	bfb4      	ite	lt
   b9de2:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9de4:	2305      	movge	r3, #5
   b9de6:	e7d4      	b.n	b9d92 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9de8:	2306      	movs	r3, #6
   b9dea:	e7d2      	b.n	b9d92 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9dec:	f104 0018 	add.w	r0, r4, #24
   b9df0:	e7db      	b.n	b9daa <_ZN16LocalTimeConvert7convertEv+0xae>

000b9df2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9df4:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9df6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9df8:	4668      	mov	r0, sp
   b9dfa:	f7ff fc24 	bl	b9646 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9dfe:	466a      	mov	r2, sp
   b9e00:	4629      	mov	r1, r5
   b9e02:	4620      	mov	r0, r4
   b9e04:	f004 f9d0 	bl	be1a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9e08:	a801      	add	r0, sp, #4
   b9e0a:	f7fa fc45 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e0e:	4620      	mov	r0, r4
   b9e10:	b003      	add	sp, #12
   b9e12:	bd30      	pop	{r4, r5, pc}

000b9e14 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9e16:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9e18:	4604      	mov	r4, r0
   b9e1a:	4668      	mov	r0, sp
   b9e1c:	f7ff fc13 	bl	b9646 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9e20:	466a      	mov	r2, sp
   b9e22:	4629      	mov	r1, r5
   b9e24:	4620      	mov	r0, r4
   b9e26:	f004 f99b 	bl	be160 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9e2a:	a801      	add	r0, sp, #4
   b9e2c:	f7fa fc34 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e30:	4620      	mov	r0, r4
   b9e32:	b003      	add	sp, #12
   b9e34:	bd30      	pop	{r4, r5, pc}

000b9e36 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9e38:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9e3a:	4604      	mov	r4, r0
   b9e3c:	4668      	mov	r0, sp
   b9e3e:	f7ff fc02 	bl	b9646 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9e42:	466a      	mov	r2, sp
   b9e44:	4629      	mov	r1, r5
   b9e46:	4620      	mov	r0, r4
   b9e48:	f004 f933 	bl	be0b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9e4c:	a801      	add	r0, sp, #4
   b9e4e:	f7fa fc23 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e52:	4620      	mov	r0, r4
   b9e54:	b003      	add	sp, #12
   b9e56:	bd30      	pop	{r4, r5, pc}

000b9e58 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9e58:	4770      	bx	lr

000b9e5a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9e5a:	b510      	push	{r4, lr}
}
   b9e5c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9e5e:	4604      	mov	r4, r0
}
   b9e60:	f7fa f91d 	bl	b409e <_ZdlPvj>
   b9e64:	4620      	mov	r0, r4
   b9e66:	bd10      	pop	{r4, pc}

000b9e68 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9e68:	6803      	ldr	r3, [r0, #0]
   b9e6a:	b2c9      	uxtb	r1, r1
   b9e6c:	689b      	ldr	r3, [r3, #8]
   b9e6e:	4718      	bx	r3

000b9e70 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9e70:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9e72:	4d03      	ldr	r5, [pc, #12]	; (b9e80 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9e78:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9e7c:	bd30      	pop	{r4, r5, pc}
   b9e7e:	bf00      	nop
   b9e80:	000c4ca0 	.word	0x000c4ca0

000b9e84 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9e84:	6840      	ldr	r0, [r0, #4]
   b9e86:	f003 bf9f 	b.w	bddc8 <_ZN7TwoWire5beginEv>

000b9e8a <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9e8a:	b510      	push	{r4, lr}
   b9e8c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b9e8e:	6800      	ldr	r0, [r0, #0]
   b9e90:	f003 fff5 	bl	bde7e <_ZN7TwoWire6unlockEv>
   b9e94:	4620      	mov	r0, r4
   b9e96:	bd10      	pop	{r4, pc}

000b9e98 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9e9c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9e9e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ea0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9ea2:	460d      	mov	r5, r1
   b9ea4:	4616      	mov	r6, r2
   b9ea6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9ea8:	f003 ffe0 	bl	bde6c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9eac:	b1a7      	cbz	r7, b9ed8 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9eae:	68e1      	ldr	r1, [r4, #12]
   b9eb0:	6860      	ldr	r0, [r4, #4]
   b9eb2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9eb6:	f003 ffba 	bl	bde2e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9eba:	0a29      	lsrs	r1, r5, #8
   b9ebc:	6860      	ldr	r0, [r4, #4]
   b9ebe:	f7ff ffd3 	bl	b9e68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9ec2:	4629      	mov	r1, r5
   b9ec4:	6860      	ldr	r0, [r4, #4]
   b9ec6:	f7ff ffcf 	bl	b9e68 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b9eca:	6860      	ldr	r0, [r4, #4]
   b9ecc:	2100      	movs	r1, #0
   b9ece:	f003 ffc9 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9ed2:	b148      	cbz	r0, b9ee8 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b9ed4:	2400      	movs	r4, #0
   b9ed6:	e000      	b.n	b9eda <_ZN6MB85RC8readDataEjPhj+0x42>
   b9ed8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9eda:	a801      	add	r0, sp, #4
   b9edc:	f7ff ffd5 	bl	b9e8a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b9ee0:	4620      	mov	r0, r4
   b9ee2:	b003      	add	sp, #12
   b9ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9ee8:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9eea:	7b21      	ldrb	r1, [r4, #12]
   b9eec:	6860      	ldr	r0, [r4, #4]
   b9eee:	46b8      	mov	r8, r7
   b9ef0:	bf28      	it	cs
   b9ef2:	f04f 0820 	movcs.w	r8, #32
   b9ef6:	2301      	movs	r3, #1
   b9ef8:	4642      	mov	r2, r8
   b9efa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9efe:	f003 ff80 	bl	bde02 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b9f02:	f006 fb6b 	bl	c05dc <_Z19__fetch_global_Wirev>
   b9f06:	6803      	ldr	r3, [r0, #0]
   b9f08:	691b      	ldr	r3, [r3, #16]
   b9f0a:	4798      	blx	r3
   b9f0c:	4540      	cmp	r0, r8
   b9f0e:	dbe1      	blt.n	b9ed4 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b9f10:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9f14:	f006 fb62 	bl	c05dc <_Z19__fetch_global_Wirev>
   b9f18:	6803      	ldr	r3, [r0, #0]
   b9f1a:	695b      	ldr	r3, [r3, #20]
   b9f1c:	4798      	blx	r3
   b9f1e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b9f22:	454e      	cmp	r6, r9
   b9f24:	d1f6      	bne.n	b9f14 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9f26:	4445      	add	r5, r8
				dataLen--;
   b9f28:	eba7 0708 	sub.w	r7, r7, r8
   b9f2c:	e7be      	b.n	b9eac <_ZN6MB85RC8readDataEjPhj+0x14>

000b9f2e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9f2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f32:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9f34:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9f36:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9f38:	460e      	mov	r6, r1
   b9f3a:	4690      	mov	r8, r2
   b9f3c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9f3e:	f003 ff95 	bl	bde6c <_ZN7TwoWire4lockEv>
   b9f42:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9f46:	f1b9 0f00 	cmp.w	r9, #0
   b9f4a:	d02a      	beq.n	b9fa2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9f4c:	b34d      	cbz	r5, b9fa2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9f4e:	68e1      	ldr	r1, [r4, #12]
   b9f50:	6860      	ldr	r0, [r4, #4]
   b9f52:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9f56:	f003 ff6a 	bl	bde2e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9f5a:	0a31      	lsrs	r1, r6, #8
   b9f5c:	6860      	ldr	r0, [r4, #4]
   b9f5e:	f7ff ff83 	bl	b9e68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9f62:	6860      	ldr	r0, [r4, #4]
   b9f64:	4631      	mov	r1, r6
   b9f66:	f7ff ff7f 	bl	b9e68 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f6a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9f6e:	4647      	mov	r7, r8
   b9f70:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9f74:	6860      	ldr	r0, [r4, #4]
   b9f76:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9f7a:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9f7c:	3d01      	subs	r5, #1
				wire.write(*data);
   b9f7e:	689b      	ldr	r3, [r3, #8]
   b9f80:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f82:	4555      	cmp	r5, sl
   b9f84:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9f88:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f8a:	d001      	beq.n	b9f90 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9f8c:	2d00      	cmp	r5, #0
   b9f8e:	d1f1      	bne.n	b9f74 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b9f90:	6860      	ldr	r0, [r4, #4]
   b9f92:	2101      	movs	r1, #1
   b9f94:	f003 ff66 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9f98:	2800      	cmp	r0, #0
   b9f9a:	d0d7      	beq.n	b9f4c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9f9c:	f04f 0900 	mov.w	r9, #0
   b9fa0:	e7d1      	b.n	b9f46 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b9fa2:	a801      	add	r0, sp, #4
   b9fa4:	f7ff ff71 	bl	b9e8a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b9fa8:	4648      	mov	r0, r9
   b9faa:	b003      	add	sp, #12
   b9fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9fb0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9fb4:	b08b      	sub	sp, #44	; 0x2c
   b9fb6:	460e      	mov	r6, r1
   b9fb8:	4615      	mov	r5, r2
   b9fba:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9fbc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fbe:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9fc0:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b9fc2:	f003 ff53 	bl	bde6c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b9fc6:	42ae      	cmp	r6, r5
   b9fc8:	d229      	bcs.n	ba01e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b9fca:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9fcc:	4425      	add	r5, r4
			while(numBytes > 0) {
   b9fce:	b18c      	cbz	r4, b9ff4 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b9fd0:	2c1e      	cmp	r4, #30
   b9fd2:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9fd4:	f8d8 3000 	ldr.w	r3, [r8]
   b9fd8:	bf28      	it	cs
   b9fda:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9fdc:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b9fde:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9fe2:	aa02      	add	r2, sp, #8
   b9fe4:	463b      	mov	r3, r7
   b9fe6:	4631      	mov	r1, r6
   b9fe8:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9fea:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9fec:	47c8      	blx	r9
				if (!result) {
   b9fee:	b948      	cbnz	r0, ba004 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9ff0:	2400      	movs	r4, #0
   b9ff2:	e000      	b.n	b9ff6 <_ZN6MB85RC8moveDataEjjj+0x46>
   b9ff4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9ff6:	a801      	add	r0, sp, #4
   b9ff8:	f7ff ff47 	bl	b9e8a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	b00b      	add	sp, #44	; 0x2c
   ba000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   ba004:	f8d8 3000 	ldr.w	r3, [r8]
   ba008:	aa02      	add	r2, sp, #8
   ba00a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba00e:	4629      	mov	r1, r5
   ba010:	463b      	mov	r3, r7
   ba012:	4640      	mov	r0, r8
   ba014:	47c8      	blx	r9
				if (!result) {
   ba016:	2800      	cmp	r0, #0
   ba018:	d0ea      	beq.n	b9ff0 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   ba01a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba01c:	e7d7      	b.n	b9fce <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   ba01e:	d9e9      	bls.n	b9ff4 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   ba020:	2c00      	cmp	r4, #0
   ba022:	d0e7      	beq.n	b9ff4 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   ba024:	f8d8 3000 	ldr.w	r3, [r8]
   ba028:	2c1e      	cmp	r4, #30
   ba02a:	4627      	mov	r7, r4
   ba02c:	bf28      	it	cs
   ba02e:	271e      	movcs	r7, #30
   ba030:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba034:	aa02      	add	r2, sp, #8
   ba036:	463b      	mov	r3, r7
   ba038:	4631      	mov	r1, r6
   ba03a:	4640      	mov	r0, r8
   ba03c:	47c8      	blx	r9
				if (!result) {
   ba03e:	2800      	cmp	r0, #0
   ba040:	d0d6      	beq.n	b9ff0 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   ba042:	f8d8 3000 	ldr.w	r3, [r8]
   ba046:	aa02      	add	r2, sp, #8
   ba048:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba04c:	4629      	mov	r1, r5
   ba04e:	463b      	mov	r3, r7
   ba050:	4640      	mov	r0, r8
   ba052:	47c8      	blx	r9
				if (!result) {
   ba054:	2800      	cmp	r0, #0
   ba056:	d0cb      	beq.n	b9ff0 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   ba058:	443e      	add	r6, r7
				framAddrTo += count;
   ba05a:	443d      	add	r5, r7
				numBytes -= count;
   ba05c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba05e:	e7df      	b.n	ba020 <_ZN6MB85RC8moveDataEjjj+0x70>

000ba060 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   ba060:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba062:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   ba064:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   ba068:	2101      	movs	r1, #1
   ba06a:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   ba06e:	4770      	bx	lr

000ba070 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba070:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   ba072:	6842      	ldr	r2, [r0, #4]
   ba074:	4603      	mov	r3, r0
   ba076:	1054      	asrs	r4, r2, #1
   ba078:	eb01 0062 	add.w	r0, r1, r2, asr #1
   ba07c:	07d2      	lsls	r2, r2, #31
   ba07e:	bf48      	it	mi
   ba080:	590a      	ldrmi	r2, [r1, r4]
   ba082:	681b      	ldr	r3, [r3, #0]
      }
   ba084:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba088:	bf48      	it	mi
   ba08a:	58d3      	ldrmi	r3, [r2, r3]
   ba08c:	4718      	bx	r3

000ba08e <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   ba08e:	2a01      	cmp	r2, #1
   ba090:	d102      	bne.n	ba098 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba092:	6001      	str	r1, [r0, #0]
      }
   ba094:	2000      	movs	r0, #0
   ba096:	4770      	bx	lr
	  switch (__op)
   ba098:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba09a:	bf04      	itt	eq
   ba09c:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   ba0a0:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   ba0a4:	e7f6      	b.n	ba094 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000ba0a6 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   ba0a6:	2a01      	cmp	r2, #1
   ba0a8:	d102      	bne.n	ba0b0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba0aa:	6001      	str	r1, [r0, #0]
      }
   ba0ac:	2000      	movs	r0, #0
   ba0ae:	4770      	bx	lr
	  switch (__op)
   ba0b0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba0b2:	bf04      	itt	eq
   ba0b4:	680b      	ldreq	r3, [r1, #0]
   ba0b6:	6003      	streq	r3, [r0, #0]
	      break;
   ba0b8:	e7f8      	b.n	ba0ac <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000ba0ba <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   ba0ba:	6f40      	ldr	r0, [r0, #116]	; 0x74
   ba0bc:	f002 bd0e 	b.w	bcadc <os_mutex_recursive_lock>

000ba0c0 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   ba0c0:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   ba0c4:	4601      	mov	r1, r0
    if (stateHandler) {
   ba0c6:	b11b      	cbz	r3, ba0d0 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba0c8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   ba0cc:	30c0      	adds	r0, #192	; 0xc0
   ba0ce:	4718      	bx	r3
}
   ba0d0:	4770      	bx	lr
	...

000ba0d4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   ba0d6:	4d12      	ldr	r5, [pc, #72]	; (ba120 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba0d8:	4608      	mov	r0, r1
        eventData = "";
   ba0da:	2a00      	cmp	r2, #0
   ba0dc:	bf18      	it	ne
   ba0de:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba0e0:	460e      	mov	r6, r1
   ba0e2:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba0e4:	f007 f97f 	bl	c13e6 <strlen>
   ba0e8:	2840      	cmp	r0, #64	; 0x40
   ba0ea:	d816      	bhi.n	ba11a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   ba0ec:	4628      	mov	r0, r5
   ba0ee:	f007 f97a 	bl	c13e6 <strlen>
   ba0f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   ba0f6:	d810      	bhi.n	ba11a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   ba0f8:	3043      	adds	r0, #67	; 0x43
   ba0fa:	f7f9 ffce 	bl	b409a <_Znaj>
    if (event) {
   ba0fe:	4604      	mov	r4, r0
   ba100:	b148      	cbz	r0, ba116 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   ba102:	4631      	mov	r1, r6
        event->flags = flags;
   ba104:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   ba108:	f007 f947 	bl	c139a <strcpy>
        strcpy(event->eventData, eventData);
   ba10c:	4629      	mov	r1, r5
   ba10e:	f104 0042 	add.w	r0, r4, #66	; 0x42
   ba112:	f007 f942 	bl	c139a <strcpy>
}
   ba116:	4620      	mov	r0, r4
   ba118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   ba11a:	2400      	movs	r4, #0
   ba11c:	e7fb      	b.n	ba116 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   ba11e:	bf00      	nop
   ba120:	000c54f8 	.word	0x000c54f8

000ba124 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba124:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba126:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba128:	460a      	mov	r2, r1
   ba12a:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba12c:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba12e:	1d01      	adds	r1, r0, #4
   ba130:	a808      	add	r0, sp, #32
   ba132:	f002 f883 	bl	bc23c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba136:	9808      	ldr	r0, [sp, #32]
   ba138:	2100      	movs	r1, #0
   ba13a:	f008 f8e9 	bl	c2310 <open>
   ba13e:	4605      	mov	r5, r0
   ba140:	a808      	add	r0, sp, #32
   ba142:	f005 fc01 	bl	bf948 <_ZN6StringD1Ev>
    if (fd) {
   ba146:	2d00      	cmp	r5, #0
   ba148:	d060      	beq.n	ba20c <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   ba14a:	a908      	add	r1, sp, #32
   ba14c:	4628      	mov	r0, r5
   ba14e:	f008 f8cd 	bl	c22ec <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   ba152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba154:	492e      	ldr	r1, [pc, #184]	; (ba210 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   ba156:	482f      	ldr	r0, [pc, #188]	; (ba214 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba158:	4632      	mov	r2, r6
   ba15a:	f7fd fc23 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   ba15e:	2200      	movs	r2, #0
   ba160:	4611      	mov	r1, r2
   ba162:	4628      	mov	r0, r5
   ba164:	f008 f8ca 	bl	c22fc <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   ba168:	2208      	movs	r2, #8
   ba16a:	a906      	add	r1, sp, #24
   ba16c:	4628      	mov	r0, r5
   ba16e:	f008 f8e3 	bl	c2338 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   ba172:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba174:	2f4a      	cmp	r7, #74	; 0x4a
   ba176:	dd39      	ble.n	ba1ec <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   ba178:	4b27      	ldr	r3, [pc, #156]	; (ba218 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   ba17a:	9a06      	ldr	r2, [sp, #24]
   ba17c:	429a      	cmp	r2, r3
   ba17e:	d135      	bne.n	ba1ec <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   ba180:	4b26      	ldr	r3, [pc, #152]	; (ba21c <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   ba182:	9a07      	ldr	r2, [sp, #28]
   ba184:	429a      	cmp	r2, r3
   ba186:	d131      	bne.n	ba1ec <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   ba188:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   ba18c:	4610      	mov	r0, r2
   ba18e:	9205      	str	r2, [sp, #20]
   ba190:	f7f9 ff83 	bl	b409a <_Znaj>
            if (result) {
   ba194:	4604      	mov	r4, r0
   ba196:	b1c0      	cbz	r0, ba1ca <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba198:	4427      	add	r7, r4
                read(fd, result, eventSize);
   ba19a:	4601      	mov	r1, r0
   ba19c:	9a05      	ldr	r2, [sp, #20]
   ba19e:	4628      	mov	r0, r5
   ba1a0:	f008 f8ca 	bl	c2338 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba1a4:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   ba1a8:	b9ab      	cbnz	r3, ba1d6 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   ba1aa:	1c63      	adds	r3, r4, #1
   ba1ac:	4618      	mov	r0, r3
   ba1ae:	9305      	str	r3, [sp, #20]
   ba1b0:	f007 f919 	bl	c13e6 <strlen>
   ba1b4:	283f      	cmp	r0, #63	; 0x3f
   ba1b6:	9b05      	ldr	r3, [sp, #20]
   ba1b8:	d80d      	bhi.n	ba1d6 <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   ba1ba:	f104 0242 	add.w	r2, r4, #66	; 0x42
   ba1be:	9200      	str	r2, [sp, #0]
   ba1c0:	4917      	ldr	r1, [pc, #92]	; (ba220 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   ba1c2:	4814      	ldr	r0, [pc, #80]	; (ba214 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba1c4:	4632      	mov	r2, r6
   ba1c6:	f7fd fbed 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba1ca:	4628      	mov	r0, r5
   ba1cc:	f008 f886 	bl	c22dc <close>
}
   ba1d0:	4620      	mov	r0, r4
   ba1d2:	b01f      	add	sp, #124	; 0x7c
   ba1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba1d6:	4913      	ldr	r1, [pc, #76]	; (ba224 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba1d8:	480e      	ldr	r0, [pc, #56]	; (ba214 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba1da:	4632      	mov	r2, r6
   ba1dc:	f7fd fbe2 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba1e0:	2143      	movs	r1, #67	; 0x43
   ba1e2:	4620      	mov	r0, r4
   ba1e4:	f7f9 ff5b 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba1e8:	2400      	movs	r4, #0
   ba1ea:	e7ee      	b.n	ba1ca <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba1ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba1f0:	9302      	str	r3, [sp, #8]
   ba1f2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba1f6:	9301      	str	r3, [sp, #4]
   ba1f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba1fc:	9300      	str	r3, [sp, #0]
   ba1fe:	490a      	ldr	r1, [pc, #40]	; (ba228 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba200:	9b06      	ldr	r3, [sp, #24]
   ba202:	4804      	ldr	r0, [pc, #16]	; (ba214 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba204:	4632      	mov	r2, r6
   ba206:	f7fd fbcd 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
   ba20a:	e7ed      	b.n	ba1e8 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba20c:	462c      	mov	r4, r5
    return result;
   ba20e:	e7df      	b.n	ba1d0 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba210:	000c4cb4 	.word	0x000c4cb4
   ba214:	2003e4d0 	.word	0x2003e4d0
   ba218:	31b67663 	.word	0x31b67663
   ba21c:	00410801 	.word	0x00410801
   ba220:	000c4cc8 	.word	0x000c4cc8
   ba224:	000c4cea 	.word	0x000c4cea
   ba228:	000c4d18 	.word	0x000c4d18

000ba22c <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba230:	4680      	mov	r8, r0
   ba232:	4b28      	ldr	r3, [pc, #160]	; (ba2d4 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba234:	f848 3b04 	str.w	r3, [r8], #4
   ba238:	4604      	mov	r4, r0
   ba23a:	4640      	mov	r0, r8
   ba23c:	f001 ff16 	bl	bc06c <_ZN14SequentialFileC1Ev>
   ba240:	2202      	movs	r2, #2
   ba242:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba244:	2500      	movs	r5, #0
   ba246:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba24a:	2308      	movs	r3, #8
   ba24c:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba24e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba252:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba256:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba25a:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba25e:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba260:	2020      	movs	r0, #32
   ba262:	f7f9 ff18 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba266:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba268:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba26a:	3e01      	subs	r6, #1
   ba26c:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba26e:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba272:	4607      	mov	r7, r0
   ba274:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba278:	f7f9 ff0d 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba27c:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba280:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba284:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba288:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba28c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba290:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba294:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba298:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba29c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba2a0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba2a4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba2a8:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba2ac:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba2b0:	4909      	ldr	r1, [pc, #36]	; (ba2d8 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba2b2:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba2b6:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba2ba:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba2be:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba2c2:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba2c6:	4640      	mov	r0, r8
   ba2c8:	f001 ff16 	bl	bc0f8 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba2d2:	bf00      	nop
   ba2d4:	000c4f34 	.word	0x000c4f34
   ba2d8:	000c4d5d 	.word	0x000c4d5d

000ba2dc <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba2dc:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba2de:	4d06      	ldr	r5, [pc, #24]	; (ba2f8 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba2e0:	682b      	ldr	r3, [r5, #0]
   ba2e2:	b93b      	cbnz	r3, ba2f4 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba2e4:	20d0      	movs	r0, #208	; 0xd0
   ba2e6:	f7f9 fed6 	bl	b4096 <_Znwj>
   ba2ea:	4604      	mov	r4, r0
   ba2ec:	b108      	cbz	r0, ba2f2 <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba2ee:	f7ff ff9d 	bl	ba22c <_ZN17PublishQueuePosixC1Ev>
   ba2f2:	602c      	str	r4, [r5, #0]
}
   ba2f4:	6828      	ldr	r0, [r5, #0]
   ba2f6:	bd38      	pop	{r3, r4, r5, pc}
   ba2f8:	2003e4d4 	.word	0x2003e4d4

000ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba2fc:	6942      	ldr	r2, [r0, #20]
   ba2fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba300:	1a9b      	subs	r3, r3, r2
   ba302:	109b      	asrs	r3, r3, #2
   ba304:	1e5a      	subs	r2, r3, #1
   ba306:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba30a:	1a5b      	subs	r3, r3, r1
   ba30c:	109b      	asrs	r3, r3, #2
   ba30e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba312:	6902      	ldr	r2, [r0, #16]
   ba314:	6880      	ldr	r0, [r0, #8]
   ba316:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba318:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba31c:	4770      	bx	lr

000ba31e <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba31e:	b538      	push	{r3, r4, r5, lr}
   ba320:	4605      	mov	r5, r0
   ba322:	f7ff feca 	bl	ba0ba <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba326:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba32a:	f7ff ffe7 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba32e:	4604      	mov	r4, r0
   ba330:	b950      	cbnz	r0, ba348 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba332:	1d28      	adds	r0, r5, #4
   ba334:	f002 f9d6 	bl	bc6e4 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba338:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba33c:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba33e:	b11b      	cbz	r3, ba348 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba340:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba344:	b903      	cbnz	r3, ba348 <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba346:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba348:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba34a:	f002 fbcf 	bl	bcaec <os_mutex_recursive_unlock>
}
   ba34e:	4620      	mov	r0, r4
   ba350:	bd38      	pop	{r3, r4, r5, pc}

000ba352 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba352:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba354:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba356:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba358:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba35a:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba35c:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba35e:	d002      	beq.n	ba366 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba360:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba362:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba364:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba366:	68c0      	ldr	r0, [r0, #12]
   ba368:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba36c:	f7f9 fe97 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba370:	6963      	ldr	r3, [r4, #20]
   ba372:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba374:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba376:	685b      	ldr	r3, [r3, #4]
   ba378:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba37a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba37e:	6122      	str	r2, [r4, #16]
   ba380:	e7ef      	b.n	ba362 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba384 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba388:	b085      	sub	sp, #20
   ba38a:	4604      	mov	r4, r0
   ba38c:	f7ff fe95 	bl	ba0ba <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba390:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba438 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba394:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba43c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba398:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba440 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba39c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba3a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba3a4:	4293      	cmp	r3, r2
   ba3a6:	d105      	bne.n	ba3b4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba3a8:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba3aa:	b005      	add	sp, #20
   ba3ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3b0:	f002 bb9c 	b.w	bcaec <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba3b4:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba3b8:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba3bc:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba3be:	f7ff ffc8 	bl	ba352 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba3c2:	4640      	mov	r0, r8
   ba3c4:	f002 f932 	bl	bc62c <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba3c8:	2300      	movs	r3, #0
   ba3ca:	4602      	mov	r2, r0
   ba3cc:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba3ce:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba3d0:	4668      	mov	r0, sp
   ba3d2:	f001 ff33 	bl	bc23c <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba3d6:	9800      	ldr	r0, [sp, #0]
   ba3d8:	f240 2102 	movw	r1, #514	; 0x202
   ba3dc:	f007 ff98 	bl	c2310 <open>
   ba3e0:	4605      	mov	r5, r0
   ba3e2:	4668      	mov	r0, sp
   ba3e4:	f005 fab0 	bl	bf948 <_ZN6StringD1Ev>
            if (fd) {
   ba3e8:	b1c5      	cbz	r5, ba41c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba3ea:	2208      	movs	r2, #8
   ba3ec:	4669      	mov	r1, sp
   ba3ee:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba3f0:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba3f4:	f007 ffb2 	bl	c235c <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba3f8:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba3fc:	f006 fff3 	bl	c13e6 <strlen>
   ba400:	4639      	mov	r1, r7
   ba402:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba406:	4628      	mov	r0, r5
   ba408:	f007 ffa8 	bl	c235c <write>
                close(fd);
   ba40c:	4628      	mov	r0, r5
   ba40e:	f007 ff65 	bl	c22dc <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba412:	4808      	ldr	r0, [pc, #32]	; (ba434 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba414:	4632      	mov	r2, r6
   ba416:	4659      	mov	r1, fp
   ba418:	f7fd fac4 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba41c:	4631      	mov	r1, r6
   ba41e:	4640      	mov	r0, r8
   ba420:	f002 f946 	bl	bc6b0 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba424:	2f00      	cmp	r7, #0
   ba426:	d0b9      	beq.n	ba39c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba428:	2143      	movs	r1, #67	; 0x43
   ba42a:	4638      	mov	r0, r7
   ba42c:	f7f9 fe37 	bl	b409e <_ZdlPvj>
   ba430:	e7b2      	b.n	ba398 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba432:	bf00      	nop
   ba434:	2003e4d0 	.word	0x2003e4d0
   ba438:	31b67663 	.word	0x31b67663
   ba43c:	00410801 	.word	0x00410801
   ba440:	000c4d6b 	.word	0x000c4d6b

000ba444 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba448:	4604      	mov	r4, r0
   ba44a:	f7ff fe36 	bl	ba0ba <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba44e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba452:	f7ff ff53 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba456:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba458:	4298      	cmp	r0, r3
   ba45a:	d902      	bls.n	ba462 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba45c:	4620      	mov	r0, r4
   ba45e:	f7ff ff91 	bl	ba384 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba462:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba4a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba466:	4f0f      	ldr	r7, [pc, #60]	; (ba4a4 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba468:	1d26      	adds	r6, r4, #4
   ba46a:	4630      	mov	r0, r6
   ba46c:	f002 f93a 	bl	bc6e4 <_ZNK14SequentialFile11getQueueLenEv>
   ba470:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba472:	4298      	cmp	r0, r3
   ba474:	dc04      	bgt.n	ba480 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba476:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba47c:	f002 bb36 	b.w	bcaec <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba480:	2101      	movs	r1, #1
   ba482:	4630      	mov	r0, r6
   ba484:	f002 f8de 	bl	bc644 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba488:	4605      	mov	r5, r0
   ba48a:	2800      	cmp	r0, #0
   ba48c:	d0ed      	beq.n	ba46a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba48e:	4601      	mov	r1, r0
   ba490:	2200      	movs	r2, #0
   ba492:	4630      	mov	r0, r6
   ba494:	f001 ff0e 	bl	bc2b4 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba498:	462a      	mov	r2, r5
   ba49a:	4641      	mov	r1, r8
   ba49c:	4638      	mov	r0, r7
   ba49e:	f7f9 fe4e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   ba4a2:	e7e2      	b.n	ba46a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba4a4:	2003e4d0 	.word	0x2003e4d0
   ba4a8:	000c4d88 	.word	0x000c4d88

000ba4ac <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba4ac:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba4ae:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba4b2:	430b      	orrs	r3, r1
   ba4b4:	d005      	beq.n	ba4c2 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba4b6:	3840      	subs	r0, #64	; 0x40
   ba4b8:	ea50 0301 	orrs.w	r3, r0, r1
   ba4bc:	d10b      	bne.n	ba4d6 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba4be:	2a09      	cmp	r2, #9
   ba4c0:	d109      	bne.n	ba4d6 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba4c2:	4905      	ldr	r1, [pc, #20]	; (ba4d8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba4c4:	4805      	ldr	r0, [pc, #20]	; (ba4dc <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba4c6:	f7fd fa6d 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba4ca:	f7ff ff07 	bl	ba2dc <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba4ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba4d2:	f7ff bf57 	b.w	ba384 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba4d6:	bd08      	pop	{r3, pc}
   ba4d8:	000c4d9b 	.word	0x000c4d9b
   ba4dc:	2003e4d0 	.word	0x2003e4d0

000ba4e0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba4e0:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba4e2:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba4e4:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba4e6:	b183      	cbz	r3, ba50a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba4e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba4ea:	6945      	ldr	r5, [r0, #20]
   ba4ec:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba4ee:	42ae      	cmp	r6, r5
   ba4f0:	d906      	bls.n	ba500 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba4f2:	f855 0b04 	ldr.w	r0, [r5], #4
   ba4f6:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba4fa:	f7f9 fdd0 	bl	b409e <_ZdlPvj>
   ba4fe:	e7f6      	b.n	ba4ee <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba500:	6861      	ldr	r1, [r4, #4]
   ba502:	6820      	ldr	r0, [r4, #0]
   ba504:	0089      	lsls	r1, r1, #2
   ba506:	f7f9 fdca 	bl	b409e <_ZdlPvj>
    }
   ba50a:	4620      	mov	r0, r4
   ba50c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba512:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba516:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba518:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba51a:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba51c:	b90a      	cbnz	r2, ba522 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba51e:	07d9      	lsls	r1, r3, #31
   ba520:	d505      	bpl.n	ba52e <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba522:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba526:	4b0a      	ldr	r3, [pc, #40]	; (ba550 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba528:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba52a:	4b0a      	ldr	r3, [pc, #40]	; (ba554 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba52c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba52e:	4621      	mov	r1, r4
   ba530:	4668      	mov	r0, sp
   ba532:	f7fe f8bc 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba536:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba538:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba53a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba53c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba53e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba540:	4668      	mov	r0, sp
   ba542:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba544:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba546:	9203      	str	r2, [sp, #12]
   ba548:	f7fa ffc7 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	}
   ba54c:	b004      	add	sp, #16
   ba54e:	bd10      	pop	{r4, pc}
   ba550:	000ba071 	.word	0x000ba071
   ba554:	000ba08f 	.word	0x000ba08f

000ba558 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba558:	b570      	push	{r4, r5, r6, lr}
   ba55a:	b086      	sub	sp, #24
   ba55c:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba55e:	f002 fdf9 	bl	bd154 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba562:	b948      	cbnz	r0, ba578 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba564:	4b43      	ldr	r3, [pc, #268]	; (ba674 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba566:	a902      	add	r1, sp, #8
   ba568:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba56c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba570:	f7ff ffce 	bl	ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba574:	b006      	add	sp, #24
   ba576:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba578:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba57c:	b11d      	cbz	r5, ba586 <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba57e:	2301      	movs	r3, #1
   ba580:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba584:	e7f6      	b.n	ba574 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba586:	f002 fae9 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba58a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba58e:	1ac0      	subs	r0, r0, r3
   ba590:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba594:	4298      	cmp	r0, r3
   ba596:	d3ed      	bcc.n	ba574 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba598:	1d26      	adds	r6, r4, #4
   ba59a:	4629      	mov	r1, r5
   ba59c:	4630      	mov	r0, r6
   ba59e:	f002 f851 	bl	bc644 <_ZN14SequentialFile16getFileFromQueueEb>
   ba5a2:	4601      	mov	r1, r0
   ba5a4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba5a8:	2800      	cmp	r0, #0
   ba5aa:	d052      	beq.n	ba652 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba5ac:	4620      	mov	r0, r4
   ba5ae:	f7ff fdb9 	bl	ba124 <_ZN17PublishQueuePosix13readQueueFileEi>
   ba5b2:	4605      	mov	r5, r0
   ba5b4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba5b8:	2800      	cmp	r0, #0
   ba5ba:	d035      	beq.n	ba628 <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba5bc:	f002 face 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba5c0:	ae02      	add	r6, sp, #8
   ba5c2:	2500      	movs	r5, #0
   ba5c4:	4b2c      	ldr	r3, [pc, #176]	; (ba678 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba5c6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba5ca:	4631      	mov	r1, r6
   ba5cc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba5d0:	9302      	str	r3, [sp, #8]
   ba5d2:	9503      	str	r5, [sp, #12]
   ba5d4:	f7ff ff9c 	bl	ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5d8:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba5dc:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba5e0:	9200      	str	r2, [sp, #0]
   ba5e2:	4926      	ldr	r1, [pc, #152]	; (ba67c <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba5e4:	4a26      	ldr	r2, [pc, #152]	; (ba680 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba5e6:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5ea:	42a8      	cmp	r0, r5
   ba5ec:	bf08      	it	eq
   ba5ee:	460a      	moveq	r2, r1
   ba5f0:	3301      	adds	r3, #1
   ba5f2:	4924      	ldr	r1, [pc, #144]	; (ba684 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba5f4:	4824      	ldr	r0, [pc, #144]	; (ba688 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba5f6:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5fa:	f7fd f9d3 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba5fe:	f7fd ff99 	bl	b8534 <_ZN19BackgroundPublishRK8instanceEv>
   ba602:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba606:	4b21      	ldr	r3, [pc, #132]	; (ba68c <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba608:	9305      	str	r3, [sp, #20]
   ba60a:	e9cd 6500 	strd	r6, r5, [sp]
   ba60e:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba610:	4b1f      	ldr	r3, [pc, #124]	; (ba690 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba612:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba614:	9304      	str	r3, [sp, #16]
   ba616:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba61a:	3242      	adds	r2, #66	; 0x42
   ba61c:	f7fe f8d6 	bl	b87cc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba620:	4630      	mov	r0, r6
   ba622:	f7fa ff5a 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba626:	e7a5      	b.n	ba574 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba628:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba62c:	4919      	ldr	r1, [pc, #100]	; (ba694 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba62e:	4816      	ldr	r0, [pc, #88]	; (ba688 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba630:	f7f9 fd85 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba634:	2101      	movs	r1, #1
   ba636:	4630      	mov	r0, r6
   ba638:	f002 f804 	bl	bc644 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba63c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba640:	462a      	mov	r2, r5
   ba642:	4630      	mov	r0, r6
   ba644:	f001 fe36 	bl	bc2b4 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba648:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba64c:	2b00      	cmp	r3, #0
   ba64e:	d1b5      	bne.n	ba5bc <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba650:	e795      	b.n	ba57e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba652:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba656:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba65a:	429a      	cmp	r2, r3
   ba65c:	d007      	beq.n	ba66e <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba65e:	681b      	ldr	r3, [r3, #0]
   ba660:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba664:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba668:	f7ff fe73 	bl	ba352 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba66c:	e7ec      	b.n	ba648 <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba66e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba672:	e784      	b.n	ba57e <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba674:	000ba699 	.word	0x000ba699
   ba678:	000baa19 	.word	0x000baa19
   ba67c:	000c4dca 	.word	0x000c4dca
   ba680:	000c52bc 	.word	0x000c52bc
   ba684:	000c4deb 	.word	0x000c4deb
   ba688:	2003e4d0 	.word	0x2003e4d0
   ba68c:	000ba061 	.word	0x000ba061
   ba690:	000ba0a7 	.word	0x000ba0a7
   ba694:	000c4dce 	.word	0x000c4dce

000ba698 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba698:	b513      	push	{r0, r1, r4, lr}
   ba69a:	4604      	mov	r4, r0
   ba69c:	f002 fd5a 	bl	bd154 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba6a0:	b190      	cbz	r0, ba6c8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba6a2:	f002 fa5b 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba6a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba6aa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba6ae:	4b0d      	ldr	r3, [pc, #52]	; (ba6e4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba6b0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba6b4:	9300      	str	r3, [sp, #0]
   ba6b6:	4669      	mov	r1, sp
   ba6b8:	2300      	movs	r3, #0
   ba6ba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba6be:	9301      	str	r3, [sp, #4]
   ba6c0:	f7ff ff26 	bl	ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba6c4:	b002      	add	sp, #8
   ba6c6:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba6c8:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba6cc:	b11b      	cbz	r3, ba6d6 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba6ce:	2301      	movs	r3, #1
   ba6d0:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba6d4:	e7f6      	b.n	ba6c4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba6d6:	4620      	mov	r0, r4
   ba6d8:	f7ff fe21 	bl	ba31e <_ZN17PublishQueuePosix12getNumEventsEv>
   ba6dc:	2800      	cmp	r0, #0
   ba6de:	d0f6      	beq.n	ba6ce <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba6e0:	e7f0      	b.n	ba6c4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba6e2:	bf00      	nop
   ba6e4:	000ba559 	.word	0x000ba559

000ba6e8 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba6e8:	b570      	push	{r4, r5, r6, lr}
   ba6ea:	4605      	mov	r5, r0
   ba6ec:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba6ee:	2000      	movs	r0, #0
   ba6f0:	f002 fcd6 	bl	bd0a0 <system_thread_get_state>
   ba6f4:	2801      	cmp	r0, #1
   ba6f6:	d005      	beq.n	ba704 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba6f8:	493e      	ldr	r1, [pc, #248]	; (ba7f4 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba6fa:	483f      	ldr	r0, [pc, #252]	; (ba7f8 <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba6fc:	f7fd f944 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
}
   ba700:	b018      	add	sp, #96	; 0x60
   ba702:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba704:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba708:	f002 f9d8 	bl	bcabc <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba70c:	4b3b      	ldr	r3, [pc, #236]	; (ba7fc <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba70e:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba710:	4b3b      	ldr	r3, [pc, #236]	; (ba800 <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba712:	9307      	str	r3, [sp, #28]
        };
   ba714:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba716:	4b3b      	ldr	r3, [pc, #236]	; (ba804 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba718:	9306      	str	r3, [sp, #24]
   ba71a:	a808      	add	r0, sp, #32
   ba71c:	f7fb f876 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba720:	a908      	add	r1, sp, #32
   ba722:	a80c      	add	r0, sp, #48	; 0x30
   ba724:	f7fb f872 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba728:	a90c      	add	r1, sp, #48	; 0x30
   ba72a:	a810      	add	r0, sp, #64	; 0x40
   ba72c:	f7fb f86e 	bl	b580c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba730:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba732:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba734:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba736:	f7f9 fcae 	bl	b4096 <_Znwj>
   ba73a:	4604      	mov	r4, r0
   ba73c:	b160      	cbz	r0, ba758 <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba73e:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba740:	4601      	mov	r1, r0
   ba742:	a810      	add	r0, sp, #64	; 0x40
   ba744:	f7fd ffb3 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba748:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba74a:	68a2      	ldr	r2, [r4, #8]
   ba74c:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba74e:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba750:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba752:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba754:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba756:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba758:	4b2b      	ldr	r3, [pc, #172]	; (ba808 <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba75a:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba75c:	4b2b      	ldr	r3, [pc, #172]	; (ba80c <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba75e:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba760:	4b2b      	ldr	r3, [pc, #172]	; (ba810 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba762:	9414      	str	r4, [sp, #80]	; 0x50
   ba764:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba766:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba768:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba76c:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba76e:	f7f9 fc92 	bl	b4096 <_Znwj>
   ba772:	4604      	mov	r4, r0
   ba774:	b1d8      	cbz	r0, ba7ae <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba776:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba778:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba77a:	b133      	cbz	r3, ba78a <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba77c:	2202      	movs	r2, #2
   ba77e:	a914      	add	r1, sp, #80	; 0x50
   ba780:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba782:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba784:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba786:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba788:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba78a:	4b22      	ldr	r3, [pc, #136]	; (ba814 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba78c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba78e:	4a22      	ldr	r2, [pc, #136]	; (ba818 <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba790:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba792:	ab01      	add	r3, sp, #4
   ba794:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba798:	2100      	movs	r1, #0
   ba79a:	f002 fc61 	bl	bd060 <system_subscribe_event>
        if (r) {
   ba79e:	b130      	cbz	r0, ba7ae <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba7a0:	4620      	mov	r0, r4
   ba7a2:	f7fa fe9a 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba7a6:	2110      	movs	r1, #16
   ba7a8:	4620      	mov	r0, r4
   ba7aa:	f7f9 fc78 	bl	b409e <_ZdlPvj>
   ba7ae:	a814      	add	r0, sp, #80	; 0x50
   ba7b0:	f7fa fe93 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba7b4:	a810      	add	r0, sp, #64	; 0x40
   ba7b6:	f7fa fe90 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba7ba:	a80c      	add	r0, sp, #48	; 0x30
   ba7bc:	f7fa fe8d 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba7c0:	a808      	add	r0, sp, #32
   ba7c2:	f7fa fe8a 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   ba7c6:	a804      	add	r0, sp, #16
   ba7c8:	f7fa fe87 	bl	b54da <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba7cc:	f7fd feb2 	bl	b8534 <_ZN19BackgroundPublishRK8instanceEv>
   ba7d0:	f7fd ffd6 	bl	b8780 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba7d4:	1d28      	adds	r0, r5, #4
   ba7d6:	f001 feb1 	bl	bc53c <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba7da:	4628      	mov	r0, r5
   ba7dc:	f7ff fe32 	bl	ba444 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba7e0:	4b0e      	ldr	r3, [pc, #56]	; (ba81c <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba7e2:	9314      	str	r3, [sp, #80]	; 0x50
   ba7e4:	a914      	add	r1, sp, #80	; 0x50
   ba7e6:	2300      	movs	r3, #0
   ba7e8:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba7ec:	9315      	str	r3, [sp, #84]	; 0x54
   ba7ee:	f7ff fe8f 	bl	ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba7f2:	e785      	b.n	ba700 <_ZN17PublishQueuePosix5setupEv+0x18>
   ba7f4:	000c4e0a 	.word	0x000c4e0a
   ba7f8:	2003e4d0 	.word	0x2003e4d0
   ba7fc:	000ba4ad 	.word	0x000ba4ad
   ba800:	000b54b7 	.word	0x000b54b7
   ba804:	000b54a3 	.word	0x000b54a3
   ba808:	000b547d 	.word	0x000b547d
   ba80c:	000b5935 	.word	0x000b5935
   ba810:	000c0002 	.word	0x000c0002
   ba814:	000b54ed 	.word	0x000b54ed
   ba818:	000b5455 	.word	0x000b5455
   ba81c:	000ba699 	.word	0x000ba699

000ba820 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba824:	4606      	mov	r6, r0
   ba826:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba828:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba82a:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba82c:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba82e:	1a47      	subs	r7, r0, r1
   ba830:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba834:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba836:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba83a:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba83c:	d927      	bls.n	ba88e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba83e:	1b5d      	subs	r5, r3, r5
   ba840:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba842:	6832      	ldr	r2, [r6, #0]
   ba844:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba846:	b10c      	cbz	r4, ba84c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba848:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba84c:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba84e:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba850:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba852:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba854:	eba3 0201 	sub.w	r2, r3, r1
   ba858:	d913      	bls.n	ba882 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba85a:	4299      	cmp	r1, r3
   ba85c:	d002      	beq.n	ba864 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba85e:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba860:	f006 fcdc 	bl	c121c <memmove>
	_M_node = __new_node;
   ba864:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba866:	6823      	ldr	r3, [r4, #0]
   ba868:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba86a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba86e:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba870:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba872:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba874:	59e3      	ldr	r3, [r4, r7]
   ba876:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba878:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba87c:	6233      	str	r3, [r6, #32]
    }
   ba87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   ba882:	4299      	cmp	r1, r3
   ba884:	d0ee      	beq.n	ba864 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba886:	1d38      	adds	r0, r7, #4
   ba888:	1a80      	subs	r0, r0, r2
   ba88a:	4420      	add	r0, r4
   ba88c:	e7e8      	b.n	ba860 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba88e:	f103 0802 	add.w	r8, r3, #2
   ba892:	454b      	cmp	r3, r9
   ba894:	bf2c      	ite	cs
   ba896:	4498      	addcs	r8, r3
   ba898:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   ba89a:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   ba89e:	d301      	bcc.n	ba8a4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   ba8a0:	f005 ff28 	bl	c06f4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba8a4:	ea4f 0088 	mov.w	r0, r8, lsl #2
   ba8a8:	f7f9 fbf5 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8ac:	eba8 0505 	sub.w	r5, r8, r5
   ba8b0:	086d      	lsrs	r5, r5, #1
   ba8b2:	4682      	mov	sl, r0
   ba8b4:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba8b6:	b10c      	cbz	r4, ba8bc <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   ba8b8:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   ba8bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
   ba8be:	6971      	ldr	r1, [r6, #20]
   ba8c0:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   ba8c2:	442c      	add	r4, r5
	  if (_Num)
   ba8c4:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8c6:	4454      	add	r4, sl
   ba8c8:	d003      	beq.n	ba8d2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba8ca:	1a52      	subs	r2, r2, r1
   ba8cc:	4620      	mov	r0, r4
   ba8ce:	f006 fca5 	bl	c121c <memmove>
	::operator delete(__p
   ba8d2:	6871      	ldr	r1, [r6, #4]
   ba8d4:	6830      	ldr	r0, [r6, #0]
   ba8d6:	0089      	lsls	r1, r1, #2
   ba8d8:	f7f9 fbe1 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba8dc:	e9c6 a800 	strd	sl, r8, [r6]
   ba8e0:	e7c0      	b.n	ba864 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000ba8e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba8e6:	b085      	sub	sp, #20
   ba8e8:	4604      	mov	r4, r0
   ba8ea:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   ba8ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba8f2:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba8f4:	460f      	mov	r7, r1
   ba8f6:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba8f8:	f7ff fbec 	bl	ba0d4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   ba8fc:	4605      	mov	r5, r0
   ba8fe:	2800      	cmp	r0, #0
   ba900:	d03c      	beq.n	ba97c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   ba902:	4b3f      	ldr	r3, [pc, #252]	; (baa00 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   ba904:	493f      	ldr	r1, [pc, #252]	; (baa04 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   ba906:	4840      	ldr	r0, [pc, #256]	; (baa08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba908:	2e00      	cmp	r6, #0
   ba90a:	bf18      	it	ne
   ba90c:	4633      	movne	r3, r6
   ba90e:	463a      	mov	r2, r7
   ba910:	f7fd f848 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
   ba914:	4620      	mov	r0, r4
   ba916:	f7ff fbd0 	bl	ba0ba <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   ba91a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   ba91e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   ba922:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba924:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   ba926:	f104 0678 	add.w	r6, r4, #120	; 0x78
   ba92a:	d029      	beq.n	ba980 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba92c:	b103      	cbz	r3, ba930 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   ba92e:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba930:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   ba934:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   ba936:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba938:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   ba93c:	4628      	mov	r0, r5
   ba93e:	f001 fed1 	bl	bc6e4 <_ZNK14SequentialFile11getQueueLenEv>
   ba942:	9003      	str	r0, [sp, #12]
   ba944:	4630      	mov	r0, r6
   ba946:	f7ff fcd9 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba94a:	9002      	str	r0, [sp, #8]
   ba94c:	f002 fc02 	bl	bd154 <spark_cloud_flag_connected>
   ba950:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   ba954:	9000      	str	r0, [sp, #0]
   ba956:	492d      	ldr	r1, [pc, #180]	; (baa0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   ba958:	482b      	ldr	r0, [pc, #172]	; (baa08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba95a:	f7fd f823 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba95e:	4628      	mov	r0, r5
   ba960:	f001 fec0 	bl	bc6e4 <_ZNK14SequentialFile11getQueueLenEv>
   ba964:	2800      	cmp	r0, #0
   ba966:	d03b      	beq.n	ba9e0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   ba968:	4620      	mov	r0, r4
   ba96a:	f7ff fd0b 	bl	ba384 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   ba96e:	4620      	mov	r0, r4
   ba970:	f7ff fd68 	bl	ba444 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   ba974:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba976:	f002 f8b9 	bl	bcaec <os_mutex_recursive_unlock>
    return true;
   ba97a:	2001      	movs	r0, #1
}
   ba97c:	b005      	add	sp, #20
   ba97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   ba980:	4630      	mov	r0, r6
   ba982:	f7ff fcbb 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba986:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba98a:	4298      	cmp	r0, r3
   ba98c:	d102      	bne.n	ba994 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   ba98e:	4820      	ldr	r0, [pc, #128]	; (baa10 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   ba990:	f005 feb3 	bl	c06fa <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba994:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba998:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   ba99a:	1a9a      	subs	r2, r3, r2
   ba99c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba99e:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba9a2:	2b01      	cmp	r3, #1
   ba9a4:	d804      	bhi.n	ba9b0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   ba9a6:	2200      	movs	r2, #0
   ba9a8:	2101      	movs	r1, #1
   ba9aa:	4630      	mov	r0, r6
   ba9ac:	f7ff ff38 	bl	ba820 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba9b0:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba9b4:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   ba9b8:	f7f9 fb6d 	bl	b4096 <_Znwj>
   ba9bc:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba9be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba9c2:	b103      	cbz	r3, ba9c6 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   ba9c4:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba9c6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba9ca:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba9cc:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   ba9d0:	685b      	ldr	r3, [r3, #4]
   ba9d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba9d6:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba9da:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   ba9de:	e7aa      	b.n	ba936 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba9e0:	4630      	mov	r0, r6
   ba9e2:	f7ff fc8b 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba9e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba9e8:	4298      	cmp	r0, r3
   ba9ea:	d8bd      	bhi.n	ba968 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   ba9ec:	f002 fbb2 	bl	bd154 <spark_cloud_flag_connected>
   ba9f0:	2800      	cmp	r0, #0
   ba9f2:	d0b9      	beq.n	ba968 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   ba9f4:	4907      	ldr	r1, [pc, #28]	; (baa14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   ba9f6:	4804      	ldr	r0, [pc, #16]	; (baa08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba9f8:	f7fc ffd4 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
   ba9fc:	e7b7      	b.n	ba96e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   ba9fe:	bf00      	nop
   baa00:	000c54f8 	.word	0x000c54f8
   baa04:	000c4e2d 	.word	0x000c4e2d
   baa08:	2003e4d0 	.word	0x2003e4d0
   baa0c:	000c4e85 	.word	0x000c4e85
   baa10:	000c4e55 	.word	0x000c4e55
   baa14:	000c4eb1 	.word	0x000c4eb1

000baa18 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   baa18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   baa1a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   baa1e:	4604      	mov	r4, r0
    if (!publishComplete) {
   baa20:	2b00      	cmp	r3, #0
   baa22:	d041      	beq.n	baaa8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   baa24:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   baa28:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   baa2c:	2b00      	cmp	r3, #0
   baa2e:	d03d      	beq.n	baaac <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   baa30:	4950      	ldr	r1, [pc, #320]	; (bab74 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   baa32:	4851      	ldr	r0, [pc, #324]	; (bab78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baa34:	f7fc ffb6 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   baa38:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baa3c:	b1d3      	cbz	r3, baa74 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   baa3e:	1d26      	adds	r6, r4, #4
   baa40:	2100      	movs	r1, #0
   baa42:	4630      	mov	r0, r6
   baa44:	f001 fdfe 	bl	bc644 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   baa48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baa4c:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   baa4e:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   baa50:	d10d      	bne.n	baa6e <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   baa52:	2101      	movs	r1, #1
   baa54:	4630      	mov	r0, r6
   baa56:	f001 fdf5 	bl	bc644 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   baa5a:	2200      	movs	r2, #0
   baa5c:	4629      	mov	r1, r5
   baa5e:	4630      	mov	r0, r6
   baa60:	f001 fc28 	bl	bc2b4 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   baa64:	4945      	ldr	r1, [pc, #276]	; (bab7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   baa66:	4844      	ldr	r0, [pc, #272]	; (bab78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baa68:	462a      	mov	r2, r5
   baa6a:	f7fc ff9b 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   baa6e:	2300      	movs	r3, #0
   baa70:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   baa74:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   baa78:	b110      	cbz	r0, baa80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   baa7a:	2143      	movs	r1, #67	; 0x43
   baa7c:	f7f9 fb0f 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   baa80:	2300      	movs	r3, #0
   baa82:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   baa86:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   baa8a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   baa8e:	4b3c      	ldr	r3, [pc, #240]	; (bab80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   baa90:	9300      	str	r3, [sp, #0]
   baa92:	4669      	mov	r1, sp
   baa94:	2300      	movs	r3, #0
   baa96:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   baa9a:	9301      	str	r3, [sp, #4]
   baa9c:	f7ff fd38 	bl	ba510 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   baaa0:	f002 f85c 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   baaa4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   baaa8:	b002      	add	sp, #8
   baaaa:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   baaac:	4935      	ldr	r1, [pc, #212]	; (bab84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   baaae:	4832      	ldr	r0, [pc, #200]	; (bab78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baab0:	f7fc ff78 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   baab4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   baab8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   baabc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baac0:	b14b      	cbz	r3, baad6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   baac2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   baac6:	b110      	cbz	r0, baace <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   baac8:	2143      	movs	r1, #67	; 0x43
   baaca:	f7f9 fae8 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   baace:	2300      	movs	r3, #0
   baad0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   baad4:	e7db      	b.n	baa8e <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   baad6:	4620      	mov	r0, r4
   baad8:	f7ff faef 	bl	ba0ba <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   baadc:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   baae0:	4293      	cmp	r3, r2
   baae2:	d013      	beq.n	bab0c <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   baae4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baae8:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   baaec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baaf0:	3b04      	subs	r3, #4
   baaf2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   baaf6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   baaf8:	f001 fff8 	bl	bcaec <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   baafc:	4922      	ldr	r1, [pc, #136]	; (bab88 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   baafe:	481e      	ldr	r0, [pc, #120]	; (bab78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bab00:	f7fc ff50 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   bab04:	4620      	mov	r0, r4
   bab06:	f7ff fc3d 	bl	ba384 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   bab0a:	e7c0      	b.n	baa8e <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   bab0c:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   bab10:	4628      	mov	r0, r5
   bab12:	f7ff fbf3 	bl	ba2fc <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bab16:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bab1a:	4298      	cmp	r0, r3
   bab1c:	d102      	bne.n	bab24 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   bab1e:	481b      	ldr	r0, [pc, #108]	; (bab8c <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   bab20:	f005 fdeb 	bl	c06fa <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   bab24:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bab28:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bab2a:	429a      	cmp	r2, r3
   bab2c:	d104      	bne.n	bab38 <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   bab2e:	2201      	movs	r2, #1
   bab30:	4611      	mov	r1, r2
   bab32:	4628      	mov	r0, r5
   bab34:	f7ff fe74 	bl	ba820 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bab38:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   bab3c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   bab40:	f7f9 faa9 	bl	b4096 <_Znwj>
   bab44:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   bab48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bab4c:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   bab4e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   bab52:	f853 3c04 	ldr.w	r3, [r3, #-4]
   bab56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   bab5a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bab5e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   bab62:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   bab66:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab6a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bab6e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   bab72:	e7c0      	b.n	baaf6 <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   bab74:	000c4ec4 	.word	0x000c4ec4
   bab78:	2003e4d0 	.word	0x2003e4d0
   bab7c:	000c4ed7 	.word	0x000c4ed7
   bab80:	000ba559 	.word	0x000ba559
   bab84:	000c4ee7 	.word	0x000c4ee7
   bab88:	000c4ef9 	.word	0x000c4ef9
   bab8c:	000c4e55 	.word	0x000c4e55

000bab90 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   bab90:	4b01      	ldr	r3, [pc, #4]	; (bab98 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   bab92:	4a02      	ldr	r2, [pc, #8]	; (bab9c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   bab94:	601a      	str	r2, [r3, #0]
}
   bab96:	4770      	bx	lr
   bab98:	2003e4d0 	.word	0x2003e4d0
   bab9c:	000c4f20 	.word	0x000c4f20

000baba0 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   baba0:	b510      	push	{r4, lr}
   baba2:	4b07      	ldr	r3, [pc, #28]	; (babc0 <_ZN17PublishQueuePosixD1Ev+0x20>)
   baba4:	4604      	mov	r4, r0
   baba6:	f840 3bc0 	str.w	r3, [r0], #192
   babaa:	f7fa fc96 	bl	b54da <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   babae:	f104 0078 	add.w	r0, r4, #120	; 0x78
   babb2:	f7ff fc95 	bl	ba4e0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   babb6:	1d20      	adds	r0, r4, #4
   babb8:	f001 fc00 	bl	bc3bc <_ZN14SequentialFileD1Ev>
}
   babbc:	4620      	mov	r0, r4
   babbe:	bd10      	pop	{r4, pc}
   babc0:	000c4f34 	.word	0x000c4f34

000babc4 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   babc4:	b510      	push	{r4, lr}
   babc6:	4604      	mov	r4, r0
}
   babc8:	f7ff ffea 	bl	baba0 <_ZN17PublishQueuePosixD1Ev>
   babcc:	4620      	mov	r0, r4
   babce:	21d0      	movs	r1, #208	; 0xd0
   babd0:	f7f9 fa65 	bl	b409e <_ZdlPvj>
   babd4:	4620      	mov	r0, r4
   babd6:	bd10      	pop	{r4, pc}

000babd8 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   babd8:	6001      	str	r1, [r0, #0]
   babda:	7102      	strb	r2, [r0, #4]
{
}
   babdc:	4770      	bx	lr

000babde <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   babde:	6800      	ldr	r0, [r0, #0]
   babe0:	6803      	ldr	r3, [r0, #0]
   babe2:	68db      	ldr	r3, [r3, #12]
   babe4:	4718      	bx	r3

000babe6 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   babe6:	6800      	ldr	r0, [r0, #0]
   babe8:	6803      	ldr	r3, [r0, #0]
   babea:	6a1b      	ldr	r3, [r3, #32]
   babec:	4718      	bx	r3

000babee <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   babee:	6800      	ldr	r0, [r0, #0]
   babf0:	6803      	ldr	r3, [r0, #0]
   babf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   babf4:	4718      	bx	r3

000babf6 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   babf6:	7900      	ldrb	r0, [r0, #4]
   babf8:	4770      	bx	lr

000babfa <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   babfa:	6800      	ldr	r0, [r0, #0]
   babfc:	6803      	ldr	r3, [r0, #0]
   babfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bac00:	4718      	bx	r3

000bac02 <_ZN10RHDatagram6sendtoEPhhh>:
{
   bac02:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bac04:	4605      	mov	r5, r0
   bac06:	460c      	mov	r4, r1
    setHeaderTo(address);
   bac08:	4619      	mov	r1, r3
{
   bac0a:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   bac0c:	f7ff fff5 	bl	babfa <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   bac10:	6828      	ldr	r0, [r5, #0]
   bac12:	9a01      	ldr	r2, [sp, #4]
   bac14:	6803      	ldr	r3, [r0, #0]
   bac16:	695b      	ldr	r3, [r3, #20]
   bac18:	4621      	mov	r1, r4
}
   bac1a:	b003      	add	sp, #12
   bac1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   bac20:	4718      	bx	r3

000bac22 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   bac22:	6800      	ldr	r0, [r0, #0]
   bac24:	6803      	ldr	r3, [r0, #0]
   bac26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bac28:	4718      	bx	r3

000bac2a <_ZN10RHDatagram14setThisAddressEh>:
{
   bac2a:	b538      	push	{r3, r4, r5, lr}
   bac2c:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   bac2e:	6800      	ldr	r0, [r0, #0]
   bac30:	6803      	ldr	r3, [r0, #0]
{
   bac32:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   bac34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bac36:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   bac38:	4629      	mov	r1, r5
   bac3a:	4620      	mov	r0, r4
   bac3c:	f7ff fff1 	bl	bac22 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   bac40:	7125      	strb	r5, [r4, #4]
}
   bac42:	bd38      	pop	{r3, r4, r5, pc}

000bac44 <_ZN10RHDatagram4initEv>:
{
   bac44:	b538      	push	{r3, r4, r5, lr}
   bac46:	4604      	mov	r4, r0
    bool ret = _driver.init();
   bac48:	6800      	ldr	r0, [r0, #0]
   bac4a:	6803      	ldr	r3, [r0, #0]
   bac4c:	689b      	ldr	r3, [r3, #8]
   bac4e:	4798      	blx	r3
    if (ret)
   bac50:	4605      	mov	r5, r0
   bac52:	b118      	cbz	r0, bac5c <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   bac54:	7921      	ldrb	r1, [r4, #4]
   bac56:	4620      	mov	r0, r4
   bac58:	f7ff ffe7 	bl	bac2a <_ZN10RHDatagram14setThisAddressEh>
}
   bac5c:	4628      	mov	r0, r5
   bac5e:	bd38      	pop	{r3, r4, r5, pc}

000bac60 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   bac60:	6800      	ldr	r0, [r0, #0]
   bac62:	6803      	ldr	r3, [r0, #0]
   bac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bac66:	4718      	bx	r3

000bac68 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   bac68:	6800      	ldr	r0, [r0, #0]
   bac6a:	6803      	ldr	r3, [r0, #0]
   bac6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bac6e:	4718      	bx	r3

000bac70 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   bac70:	6800      	ldr	r0, [r0, #0]
   bac72:	6803      	ldr	r3, [r0, #0]
   bac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bac76:	4718      	bx	r3

000bac78 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   bac78:	6800      	ldr	r0, [r0, #0]
   bac7a:	6803      	ldr	r3, [r0, #0]
   bac7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bac7e:	4718      	bx	r3

000bac80 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   bac80:	6800      	ldr	r0, [r0, #0]
   bac82:	6803      	ldr	r3, [r0, #0]
   bac84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bac86:	4718      	bx	r3

000bac88 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   bac88:	6800      	ldr	r0, [r0, #0]
   bac8a:	6803      	ldr	r3, [r0, #0]
   bac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bac8e:	4718      	bx	r3

000bac90 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   bac90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bac94:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   bac96:	6800      	ldr	r0, [r0, #0]
{
   bac98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   bac9a:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   bac9c:	6803      	ldr	r3, [r0, #0]
   bac9e:	691b      	ldr	r3, [r3, #16]
{
   baca0:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   baca4:	4798      	blx	r3
   baca6:	4605      	mov	r5, r0
   baca8:	b1c8      	cbz	r0, bacde <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   bacaa:	b11e      	cbz	r6, bacb4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   bacac:	4620      	mov	r0, r4
   bacae:	f7ff ffe3 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
   bacb2:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   bacb4:	f1b9 0f00 	cmp.w	r9, #0
   bacb8:	d004      	beq.n	bacc4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   bacba:	4620      	mov	r0, r4
   bacbc:	f7ff ffd8 	bl	bac70 <_ZN10RHDatagram8headerToEv>
   bacc0:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   bacc4:	f1b8 0f00 	cmp.w	r8, #0
   bacc8:	d004      	beq.n	bacd4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bacca:	4620      	mov	r0, r4
   baccc:	f7ff ffd8 	bl	bac80 <_ZN10RHDatagram8headerIdEv>
   bacd0:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bacd4:	b11f      	cbz	r7, bacde <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bacd6:	4620      	mov	r0, r4
   bacd8:	f7ff ffd6 	bl	bac88 <_ZN10RHDatagram11headerFlagsEv>
   bacdc:	7038      	strb	r0, [r7, #0]
}
   bacde:	4628      	mov	r0, r5
   bace0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bace4 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bace4:	2001      	movs	r0, #1
   bace6:	4770      	bx	lr

000bace8 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bace8:	7903      	ldrb	r3, [r0, #4]
   bacea:	2b03      	cmp	r3, #3
   bacec:	d0fc      	beq.n	bace8 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bacee:	2001      	movs	r0, #1
   bacf0:	4770      	bx	lr

000bacf2 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bacf2:	2000      	movs	r0, #0
   bacf4:	4770      	bx	lr

000bacf6 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bacf6:	7181      	strb	r1, [r0, #6]
}
   bacf8:	4770      	bx	lr

000bacfa <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bacfa:	7141      	strb	r1, [r0, #5]
}
   bacfc:	4770      	bx	lr

000bacfe <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bacfe:	72c1      	strb	r1, [r0, #11]
}
   bad00:	4770      	bx	lr

000bad02 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bad02:	7301      	strb	r1, [r0, #12]
}
   bad04:	4770      	bx	lr

000bad06 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bad06:	7341      	strb	r1, [r0, #13]
}
   bad08:	4770      	bx	lr

000bad0a <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bad0a:	7b83      	ldrb	r3, [r0, #14]
   bad0c:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bad10:	4311      	orrs	r1, r2
   bad12:	7381      	strb	r1, [r0, #14]
}
   bad14:	4770      	bx	lr

000bad16 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bad16:	79c0      	ldrb	r0, [r0, #7]
}
   bad18:	4770      	bx	lr

000bad1a <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   bad1a:	7a00      	ldrb	r0, [r0, #8]
}
   bad1c:	4770      	bx	lr

000bad1e <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   bad1e:	7a40      	ldrb	r0, [r0, #9]
}
   bad20:	4770      	bx	lr

000bad22 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   bad22:	7a80      	ldrb	r0, [r0, #10]
}
   bad24:	4770      	bx	lr

000bad26 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   bad26:	8a00      	ldrh	r0, [r0, #16]
}
   bad28:	b200      	sxth	r0, r0
   bad2a:	4770      	bx	lr

000bad2c <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   bad2c:	7900      	ldrb	r0, [r0, #4]
}
   bad2e:	4770      	bx	lr

000bad30 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   bad30:	7101      	strb	r1, [r0, #4]
}
   bad32:	4770      	bx	lr

000bad34 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   bad34:	8a40      	ldrh	r0, [r0, #18]
}
   bad36:	b280      	uxth	r0, r0
   bad38:	4770      	bx	lr

000bad3a <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   bad3a:	8a80      	ldrh	r0, [r0, #20]
}
   bad3c:	b280      	uxth	r0, r0
   bad3e:	4770      	bx	lr

000bad40 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   bad40:	8ac0      	ldrh	r0, [r0, #22]
}
   bad42:	b280      	uxth	r0, r0
   bad44:	4770      	bx	lr

000bad46 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   bad46:	b538      	push	{r3, r4, r5, lr}
   bad48:	4605      	mov	r5, r0
   bad4a:	460c      	mov	r4, r1
    while (!available())
   bad4c:	682b      	ldr	r3, [r5, #0]
   bad4e:	4628      	mov	r0, r5
   bad50:	68db      	ldr	r3, [r3, #12]
   bad52:	4798      	blx	r3
   bad54:	b928      	cbnz	r0, bad62 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   bad56:	2c00      	cmp	r4, #0
   bad58:	d0f8      	beq.n	bad4c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   bad5a:	4620      	mov	r0, r4
   bad5c:	f002 fb1a 	bl	bd394 <delay>
   bad60:	e7f4      	b.n	bad4c <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   bad62:	bd38      	pop	{r3, r4, r5, pc}

000bad64 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   bad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bad66:	4605      	mov	r5, r0
   bad68:	460f      	mov	r7, r1
   bad6a:	4614      	mov	r4, r2
   bad6c:	f001 fef6 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   bad70:	4606      	mov	r6, r0
   bad72:	f001 fef3 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bad76:	1b80      	subs	r0, r0, r6
   bad78:	42b8      	cmp	r0, r7
   bad7a:	d20a      	bcs.n	bad92 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   bad7c:	682b      	ldr	r3, [r5, #0]
   bad7e:	4628      	mov	r0, r5
   bad80:	68db      	ldr	r3, [r3, #12]
   bad82:	4798      	blx	r3
   bad84:	b930      	cbnz	r0, bad94 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   bad86:	2c00      	cmp	r4, #0
   bad88:	d0f3      	beq.n	bad72 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   bad8a:	4620      	mov	r0, r4
   bad8c:	f002 fb02 	bl	bd394 <delay>
   bad90:	e7ef      	b.n	bad72 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   bad92:	2000      	movs	r0, #0
}
   bad94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bad96 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   bad96:	b570      	push	{r4, r5, r6, lr}
   bad98:	4604      	mov	r4, r0
   bad9a:	460e      	mov	r6, r1
   bad9c:	f001 fede 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   bada0:	4605      	mov	r5, r0
   bada2:	f001 fedb 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bada6:	1b40      	subs	r0, r0, r5
   bada8:	42b0      	cmp	r0, r6
   badaa:	d204      	bcs.n	badb6 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   badac:	7923      	ldrb	r3, [r4, #4]
   badae:	2b03      	cmp	r3, #3
   badb0:	d0f7      	beq.n	bada2 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   badb2:	2001      	movs	r0, #1
}
   badb4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   badb6:	2000      	movs	r0, #0
   badb8:	e7fc      	b.n	badb4 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000badba <_ZN15RHGenericDriver7waitCADEv>:
{
   badba:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   badbc:	69c3      	ldr	r3, [r0, #28]
{
   badbe:	4604      	mov	r4, r0
    if (!_cad_timeout)
   badc0:	b1b3      	cbz	r3, badf0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   badc2:	f001 fecb 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   badc6:	2664      	movs	r6, #100	; 0x64
   badc8:	4605      	mov	r5, r0
    while (isChannelActive())
   badca:	6823      	ldr	r3, [r4, #0]
   badcc:	4620      	mov	r0, r4
   badce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   badd0:	4798      	blx	r3
   badd2:	b168      	cbz	r0, badf0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   badd4:	f001 fec2 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   badd8:	69e3      	ldr	r3, [r4, #28]
   badda:	1b40      	subs	r0, r0, r5
   baddc:	4298      	cmp	r0, r3
   badde:	d809      	bhi.n	badf4 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bade0:	210a      	movs	r1, #10
   bade2:	2001      	movs	r0, #1
   bade4:	f004 fcd9 	bl	bf79a <_Z6randomii>
   bade8:	4370      	muls	r0, r6
   badea:	f002 fad3 	bl	bd394 <delay>
    while (isChannelActive())
   badee:	e7ec      	b.n	badca <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   badf0:	2001      	movs	r0, #1
}
   badf2:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   badf4:	2000      	movs	r0, #0
   badf6:	e7fc      	b.n	badf2 <_ZN15RHGenericDriver7waitCADEv+0x38>

000badf8 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   badf8:	4a06      	ldr	r2, [pc, #24]	; (bae14 <_ZN15RHGenericDriverC1Ev+0x1c>)
   badfa:	6002      	str	r2, [r0, #0]
   badfc:	21ff      	movs	r1, #255	; 0xff
   badfe:	2200      	movs	r2, #0
   bae00:	7102      	strb	r2, [r0, #4]
   bae02:	7141      	strb	r1, [r0, #5]
   bae04:	8242      	strh	r2, [r0, #18]
   bae06:	72c1      	strb	r1, [r0, #11]
   bae08:	8282      	strh	r2, [r0, #20]
   bae0a:	8181      	strh	r1, [r0, #12]
   bae0c:	7382      	strb	r2, [r0, #14]
   bae0e:	82c2      	strh	r2, [r0, #22]
   bae10:	61c2      	str	r2, [r0, #28]
}
   bae12:	4770      	bx	lr
   bae14:	000c4f48 	.word	0x000c4f48

000bae18 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bae18:	4770      	bx	lr

000bae1a <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bae1a:	4770      	bx	lr

000bae1c <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bae1c:	4770      	bx	lr

000bae1e <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bae1e:	4770      	bx	lr

000bae20 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bae20:	4770      	bx	lr

000bae22 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bae22:	7141      	strb	r1, [r0, #5]
}
   bae24:	4770      	bx	lr

000bae26 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bae26:	7181      	strb	r1, [r0, #6]
}
   bae28:	4770      	bx	lr

000bae2a <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bae2a:	7101      	strb	r1, [r0, #4]
}
   bae2c:	4770      	bx	lr
	...

000bae30 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bae30:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bae32:	4d03      	ldr	r5, [pc, #12]	; (bae40 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   bae34:	6005      	str	r5, [r0, #0]
   bae36:	7101      	strb	r1, [r0, #4]
   bae38:	7142      	strb	r2, [r0, #5]
   bae3a:	7183      	strb	r3, [r0, #6]
}
   bae3c:	bd30      	pop	{r4, r5, pc}
   bae3e:	bf00      	nop
   bae40:	000c4fc8 	.word	0x000c4fc8

000bae44 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   bae44:	4770      	bx	lr

000bae46 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   bae46:	b510      	push	{r4, lr}
  }
   bae48:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   bae4a:	4604      	mov	r4, r0
  }
   bae4c:	f7f9 f927 	bl	b409e <_ZdlPvj>
   bae50:	4620      	mov	r0, r4
   bae52:	bd10      	pop	{r4, pc}

000bae54 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bae54:	b40e      	push	{r1, r2, r3}
   bae56:	b503      	push	{r0, r1, lr}
   bae58:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   bae5a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bae5c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bae60:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bae62:	f004 fc5e 	bl	bf722 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bae66:	b002      	add	sp, #8
   bae68:	f85d eb04 	ldr.w	lr, [sp], #4
   bae6c:	b003      	add	sp, #12
   bae6e:	4770      	bx	lr

000bae70 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   bae70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bae72:	4604      	mov	r4, r0
   bae74:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   bae76:	7922      	ldrb	r2, [r4, #4]
   bae78:	68a3      	ldr	r3, [r4, #8]
   bae7a:	b132      	cbz	r2, bae8a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bae7c:	b9a3      	cbnz	r3, baea8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bae7e:	490b      	ldr	r1, [pc, #44]	; (baeac <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bae80:	b002      	add	sp, #8
   bae82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bae86:	f004 bb43 	b.w	bf510 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bae8a:	4a09      	ldr	r2, [pc, #36]	; (baeb0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bae8c:	7b26      	ldrb	r6, [r4, #12]
   bae8e:	4d09      	ldr	r5, [pc, #36]	; (baeb4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bae90:	4909      	ldr	r1, [pc, #36]	; (baeb8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bae92:	7b64      	ldrb	r4, [r4, #13]
   bae94:	2e01      	cmp	r6, #1
   bae96:	bf18      	it	ne
   bae98:	4629      	movne	r1, r5
   bae9a:	e9cd 1400 	strd	r1, r4, [sp]
   bae9e:	4907      	ldr	r1, [pc, #28]	; (baebc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   baea0:	f7ff ffd8 	bl	bae54 <_ZN5Print6printfEPKcz>
  }
   baea4:	b002      	add	sp, #8
   baea6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   baea8:	4a05      	ldr	r2, [pc, #20]	; (baec0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   baeaa:	e7ef      	b.n	bae8c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   baeac:	000c5005 	.word	0x000c5005
   baeb0:	000c54f8 	.word	0x000c54f8
   baeb4:	000c5001 	.word	0x000c5001
   baeb8:	000c4ffd 	.word	0x000c4ffd
   baebc:	000c501b 	.word	0x000c501b
   baec0:	000c4ff4 	.word	0x000c4ff4

000baec4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   baec4:	b510      	push	{r4, lr}
   baec6:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   baec8:	f7ff ffb2 	bl	bae30 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   baecc:	4b05      	ldr	r3, [pc, #20]	; (baee4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   baece:	6023      	str	r3, [r4, #0]
  {
   baed0:	4b05      	ldr	r3, [pc, #20]	; (baee8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   baed2:	60a3      	str	r3, [r4, #8]
   baed4:	2301      	movs	r3, #1
   baed6:	7323      	strb	r3, [r4, #12]
   baed8:	2300      	movs	r3, #0
   baeda:	6123      	str	r3, [r4, #16]
   baedc:	82a3      	strh	r3, [r4, #20]
{
}
   baede:	4620      	mov	r0, r4
   baee0:	bd10      	pop	{r4, pc}
   baee2:	bf00      	nop
   baee4:	000c5054 	.word	0x000c5054
   baee8:	000c5040 	.word	0x000c5040

000baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   baeec:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   baeee:	4c0b      	ldr	r4, [pc, #44]	; (baf1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   baef0:	7821      	ldrb	r1, [r4, #0]
   baef2:	f3bf 8f5b 	dmb	ish
   baef6:	f011 0101 	ands.w	r1, r1, #1
   baefa:	d10b      	bne.n	baf14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   baefc:	4620      	mov	r0, r4
   baefe:	9101      	str	r1, [sp, #4]
   baf00:	f7f9 f8dc 	bl	b40bc <__cxa_guard_acquire>
   baf04:	9901      	ldr	r1, [sp, #4]
   baf06:	b128      	cbz	r0, baf14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   baf08:	4805      	ldr	r0, [pc, #20]	; (baf20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   baf0a:	f004 fc5d 	bl	bf7c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   baf0e:	4620      	mov	r0, r4
   baf10:	f7f9 f8d9 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   baf14:	4802      	ldr	r0, [pc, #8]	; (baf20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   baf16:	b002      	add	sp, #8
   baf18:	bd10      	pop	{r4, pc}
   baf1a:	bf00      	nop
   baf1c:	2003e4d8 	.word	0x2003e4d8
   baf20:	2003e4dc 	.word	0x2003e4dc

000baf24 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   baf24:	b507      	push	{r0, r1, r2, lr}
   baf26:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   baf28:	f7ff ffe0 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   baf2c:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   baf2e:	b003      	add	sp, #12
   baf30:	f85d eb04 	ldr.w	lr, [sp], #4
   baf34:	f004 bd00 	b.w	bf938 <_ZN8SPIClass8transferEh>

000baf38 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   baf38:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   baf3a:	f7ff ffd7 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   baf3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baf42:	f004 bcff 	b.w	bf944 <_ZN8SPIClass15attachInterruptEv>

000baf46 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   baf46:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   baf48:	f7ff ffd0 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   baf4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baf50:	f004 bcf9 	b.w	bf946 <_ZN8SPIClass15detachInterruptEv>

000baf54 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   baf54:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   baf56:	7903      	ldrb	r3, [r0, #4]
   baf58:	2b04      	cmp	r3, #4
   baf5a:	d020      	beq.n	baf9e <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   baf5c:	2b03      	cmp	r3, #3
   baf5e:	d020      	beq.n	bafa2 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   baf60:	2b02      	cmp	r3, #2
   baf62:	d020      	beq.n	bafa6 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   baf64:	4a11      	ldr	r2, [pc, #68]	; (bafac <_ZN13RHHardwareSPI5beginEv+0x58>)
   baf66:	4912      	ldr	r1, [pc, #72]	; (bafb0 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   baf68:	2b01      	cmp	r3, #1
   baf6a:	bf18      	it	ne
   baf6c:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   baf6e:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   baf70:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   baf72:	3901      	subs	r1, #1
   baf74:	bf18      	it	ne
   baf76:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   baf78:	b133      	cbz	r3, baf88 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   baf7a:	2b01      	cmp	r3, #1
   baf7c:	d004      	beq.n	baf88 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   baf7e:	2b02      	cmp	r3, #2
   baf80:	d002      	beq.n	baf88 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   baf82:	2b03      	cmp	r3, #3
   baf84:	bf18      	it	ne
   baf86:	2300      	movne	r3, #0
class SPISettings : public Printable {
   baf88:	2400      	movs	r4, #0
   baf8a:	7304      	strb	r4, [r0, #12]
   baf8c:	6102      	str	r2, [r0, #16]
   baf8e:	7501      	strb	r1, [r0, #20]
   baf90:	7543      	strb	r3, [r0, #21]
        instance().begin();
   baf92:	f7ff ffab 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   baf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baf9a:	f004 bc1f 	b.w	bf7dc <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   baf9e:	4a05      	ldr	r2, [pc, #20]	; (bafb4 <_ZN13RHHardwareSPI5beginEv+0x60>)
   bafa0:	e7e5      	b.n	baf6e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bafa2:	4a05      	ldr	r2, [pc, #20]	; (bafb8 <_ZN13RHHardwareSPI5beginEv+0x64>)
   bafa4:	e7e3      	b.n	baf6e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bafa6:	4a05      	ldr	r2, [pc, #20]	; (bafbc <_ZN13RHHardwareSPI5beginEv+0x68>)
   bafa8:	e7e1      	b.n	baf6e <_ZN13RHHardwareSPI5beginEv+0x1a>
   bafaa:	bf00      	nop
   bafac:	001e8480 	.word	0x001e8480
   bafb0:	000f4240 	.word	0x000f4240
   bafb4:	00f42400 	.word	0x00f42400
   bafb8:	007a1200 	.word	0x007a1200
   bafbc:	003d0900 	.word	0x003d0900

000bafc0 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bafc0:	b508      	push	{r3, lr}
        instance().end();
   bafc2:	f7ff ff93 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bafc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bafca:	f004 bc1b 	b.w	bf804 <_ZN8SPIClass3endEv>

000bafce <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bafce:	b510      	push	{r4, lr}
   bafd0:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bafd2:	f7ff ff8b 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bafd6:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bafda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bafde:	f004 bc3d 	b.w	bf85c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bafe2 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bafe2:	b508      	push	{r3, lr}
        instance().endTransaction();
   bafe4:	f7ff ff82 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bafe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bafec:	f004 bc1c 	b.w	bf828 <_ZN8SPIClass14endTransactionEv>

000baff0 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   baff0:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   baff2:	f7ff ff7b 	bl	baeec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   baff6:	bd08      	pop	{r3, pc}

000baff8 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   baff8:	2300      	movs	r3, #0
   baffa:	4802      	ldr	r0, [pc, #8]	; (bb004 <_GLOBAL__sub_I_hardware_spi+0xc>)
   baffc:	461a      	mov	r2, r3
   baffe:	4619      	mov	r1, r3
   bb000:	f7ff bf60 	b.w	baec4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bb004:	2003e4e4 	.word	0x2003e4e4

000bb008 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bb008:	2a01      	cmp	r2, #1
   bb00a:	d105      	bne.n	bb018 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bb00c:	7a00      	ldrb	r0, [r0, #8]
   bb00e:	780b      	ldrb	r3, [r1, #0]
   bb010:	1a1b      	subs	r3, r3, r0
   bb012:	4258      	negs	r0, r3
   bb014:	4158      	adcs	r0, r3
   bb016:	4770      	bx	lr
   bb018:	2000      	movs	r0, #0
}
   bb01a:	4770      	bx	lr

000bb01c <_ZN6RHMesh5doArpEh>:
{
   bb01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb020:	4c25      	ldr	r4, [pc, #148]	; (bb0b8 <_ZN6RHMesh5doArpEh+0x9c>)
   bb022:	2301      	movs	r3, #1
{
   bb024:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb026:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bb028:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb02a:	2300      	movs	r3, #0
{
   bb02c:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bb02e:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb030:	9300      	str	r3, [sp, #0]
   bb032:	2203      	movs	r2, #3
   bb034:	23ff      	movs	r3, #255	; 0xff
   bb036:	4621      	mov	r1, r4
{
   bb038:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb03a:	f000 fbb7 	bl	bb7ac <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bb03e:	b120      	cbz	r0, bb04a <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bb040:	2500      	movs	r5, #0
}
   bb042:	4628      	mov	r0, r5
   bb044:	b006      	add	sp, #24
   bb046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bb04a:	237a      	movs	r3, #122	; 0x7a
   bb04c:	f88d 3017 	strb.w	r3, [sp, #23]
   bb050:	f001 fd84 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bb054:	f106 0904 	add.w	r9, r6, #4
   bb058:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bb05a:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   bb05e:	f001 fd7d 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   bb062:	1a29      	subs	r1, r5, r0
   bb064:	2900      	cmp	r1, #0
   bb066:	ddeb      	ble.n	bb040 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   bb068:	2200      	movs	r2, #0
   bb06a:	b289      	uxth	r1, r1
   bb06c:	4648      	mov	r0, r9
   bb06e:	f7ff fdbe 	bl	babee <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb072:	2800      	cmp	r0, #0
   bb074:	d0f3      	beq.n	bb05e <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bb076:	2300      	movs	r3, #0
   bb078:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bb07c:	e9cd 3300 	strd	r3, r3, [sp]
   bb080:	f10d 0217 	add.w	r2, sp, #23
   bb084:	4621      	mov	r1, r4
   bb086:	4630      	mov	r0, r6
   bb088:	f000 fb9a 	bl	bb7c0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb08c:	4605      	mov	r5, r0
   bb08e:	2800      	cmp	r0, #0
   bb090:	d0e3      	beq.n	bb05a <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   bb092:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bb096:	2b01      	cmp	r3, #1
   bb098:	d9df      	bls.n	bb05a <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb09a:	f894 a000 	ldrb.w	sl, [r4]
   bb09e:	f1ba 0f02 	cmp.w	sl, #2
   bb0a2:	d1da      	bne.n	bb05a <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bb0a4:	4648      	mov	r0, r9
   bb0a6:	f7ff fde7 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
   bb0aa:	4653      	mov	r3, sl
   bb0ac:	4602      	mov	r2, r0
   bb0ae:	4639      	mov	r1, r7
   bb0b0:	4630      	mov	r0, r6
   bb0b2:	f000 faf3 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bb0b6:	e7c4      	b.n	bb042 <_ZN6RHMesh5doArpEh+0x26>
   bb0b8:	2003e4fc 	.word	0x2003e4fc

000bb0bc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bb0bc:	2a01      	cmp	r2, #1
{
   bb0be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bb0c2:	4607      	mov	r7, r0
   bb0c4:	460e      	mov	r6, r1
   bb0c6:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bb0c8:	d93b      	bls.n	bb142 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb0ca:	794d      	ldrb	r5, [r1, #5]
   bb0cc:	2d02      	cmp	r5, #2
   bb0ce:	d130      	bne.n	bb132 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bb0d0:	f100 0804 	add.w	r8, r0, #4
   bb0d4:	79c9      	ldrb	r1, [r1, #7]
   bb0d6:	9101      	str	r1, [sp, #4]
   bb0d8:	4640      	mov	r0, r8
   bb0da:	f7ff fdcd 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb0de:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bb0e0:	462b      	mov	r3, r5
   bb0e2:	4602      	mov	r2, r0
   bb0e4:	9901      	ldr	r1, [sp, #4]
   bb0e6:	4638      	mov	r0, r7
   bb0e8:	f000 fad8 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb0ec:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bb0ee:	f106 0308 	add.w	r3, r6, #8
   bb0f2:	2400      	movs	r4, #0
   bb0f4:	4622      	mov	r2, r4
   bb0f6:	4295      	cmp	r5, r2
   bb0f8:	f104 0401 	add.w	r4, r4, #1
   bb0fc:	b2e4      	uxtb	r4, r4
   bb0fe:	d904      	bls.n	bb10a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bb100:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb104:	7a39      	ldrb	r1, [r7, #8]
   bb106:	4291      	cmp	r1, r2
   bb108:	d1f4      	bne.n	bb0f4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bb10a:	f104 0108 	add.w	r1, r4, #8
   bb10e:	440e      	add	r6, r1
	while (i < numRoutes)
   bb110:	42a5      	cmp	r5, r4
   bb112:	d916      	bls.n	bb142 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bb114:	f816 1b01 	ldrb.w	r1, [r6], #1
   bb118:	9101      	str	r1, [sp, #4]
   bb11a:	4640      	mov	r0, r8
   bb11c:	f7ff fdac 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
   bb120:	3401      	adds	r4, #1
   bb122:	4602      	mov	r2, r0
   bb124:	9901      	ldr	r1, [sp, #4]
   bb126:	2302      	movs	r3, #2
   bb128:	4638      	mov	r0, r7
   bb12a:	b2e4      	uxtb	r4, r4
   bb12c:	f000 fab6 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bb130:	e7ee      	b.n	bb110 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bb132:	2d03      	cmp	r5, #3
   bb134:	d105      	bne.n	bb142 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   bb136:	7989      	ldrb	r1, [r1, #6]
}
   bb138:	b002      	add	sp, #8
   bb13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   bb13e:	f000 ba96 	b.w	bb66e <_ZN8RHRouter13deleteRouteToEh>
}
   bb142:	b002      	add	sp, #8
   bb144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb148 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   bb148:	b510      	push	{r4, lr}
   bb14a:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   bb14c:	f000 fae6 	bl	bb71c <_ZN8RHRouterC1ER15RHGenericDriverh>
   bb150:	4b01      	ldr	r3, [pc, #4]	; (bb158 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   bb152:	6023      	str	r3, [r4, #0]
}
   bb154:	4620      	mov	r0, r4
   bb156:	bd10      	pop	{r4, pc}
   bb158:	000c5088 	.word	0x000c5088

000bb15c <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   bb15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb160:	2a79      	cmp	r2, #121	; 0x79
{
   bb162:	f89d 9020 	ldrb.w	r9, [sp, #32]
   bb166:	4606      	mov	r6, r0
   bb168:	460f      	mov	r7, r1
   bb16a:	4614      	mov	r4, r2
   bb16c:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb16e:	d825      	bhi.n	bb1bc <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   bb170:	2bff      	cmp	r3, #255	; 0xff
   bb172:	d114      	bne.n	bb19e <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb174:	f8df 8048 	ldr.w	r8, [pc, #72]	; bb1c0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   bb178:	4640      	mov	r0, r8
   bb17a:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bb17c:	4622      	mov	r2, r4
   bb17e:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb180:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bb184:	f006 f83c 	bl	c1200 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb188:	1c62      	adds	r2, r4, #1
   bb18a:	f8cd 9020 	str.w	r9, [sp, #32]
   bb18e:	462b      	mov	r3, r5
   bb190:	4641      	mov	r1, r8
   bb192:	4630      	mov	r0, r6
   bb194:	b2d2      	uxtb	r2, r2
}
   bb196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb19a:	f000 bb07 	b.w	bb7ac <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bb19e:	4619      	mov	r1, r3
   bb1a0:	f000 fa21 	bl	bb5e6 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bb1a4:	2800      	cmp	r0, #0
   bb1a6:	d1e5      	bne.n	bb174 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   bb1a8:	6833      	ldr	r3, [r6, #0]
   bb1aa:	4629      	mov	r1, r5
   bb1ac:	689b      	ldr	r3, [r3, #8]
   bb1ae:	4630      	mov	r0, r6
   bb1b0:	4798      	blx	r3
   bb1b2:	2800      	cmp	r0, #0
   bb1b4:	d1de      	bne.n	bb174 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb1b6:	2002      	movs	r0, #2
}
   bb1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   bb1bc:	2001      	movs	r0, #1
   bb1be:	e7fb      	b.n	bb1b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   bb1c0:	2003e4fc 	.word	0x2003e4fc

000bb1c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   bb1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1c8:	b089      	sub	sp, #36	; 0x24
   bb1ca:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb1cc:	237a      	movs	r3, #122	; 0x7a
   bb1ce:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb1d2:	f10d 031f 	add.w	r3, sp, #31
   bb1d6:	9303      	str	r3, [sp, #12]
   bb1d8:	f10d 031e 	add.w	r3, sp, #30
   bb1dc:	9302      	str	r3, [sp, #8]
   bb1de:	4e5d      	ldr	r6, [pc, #372]	; (bb354 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb1e0:	f10d 031d 	add.w	r3, sp, #29
   bb1e4:	9301      	str	r3, [sp, #4]
   bb1e6:	ab07      	add	r3, sp, #28
   bb1e8:	9300      	str	r3, [sp, #0]
{     
   bb1ea:	4689      	mov	r9, r1
   bb1ec:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb1ee:	f10d 031b 	add.w	r3, sp, #27
   bb1f2:	f10d 021a 	add.w	r2, sp, #26
   bb1f6:	4631      	mov	r1, r6
{     
   bb1f8:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bb1fc:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb1fe:	f000 fadf 	bl	bb7c0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb202:	4604      	mov	r4, r0
   bb204:	b920      	cbnz	r0, bb210 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bb206:	2400      	movs	r4, #0
}
   bb208:	4620      	mov	r0, r4
   bb20a:	b009      	add	sp, #36	; 0x24
   bb20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bb210:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bb214:	b373      	cbz	r3, bb274 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bb216:	7832      	ldrb	r2, [r6, #0]
   bb218:	bb62      	cbnz	r2, bb274 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bb21a:	f1b8 0f00 	cmp.w	r8, #0
   bb21e:	d003      	beq.n	bb228 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bb220:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bb224:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bb228:	f1bb 0f00 	cmp.w	fp, #0
   bb22c:	d003      	beq.n	bb236 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bb22e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb232:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bb236:	f1ba 0f00 	cmp.w	sl, #0
   bb23a:	d003      	beq.n	bb244 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bb23c:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bb240:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bb244:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb246:	b11a      	cbz	r2, bb250 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bb248:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb24a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bb24e:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bb250:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bb252:	b11a      	cbz	r2, bb25c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bb254:	9915      	ldr	r1, [sp, #84]	; 0x54
   bb256:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb25a:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bb25c:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb25e:	493e      	ldr	r1, [pc, #248]	; (bb358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bb260:	3b01      	subs	r3, #1
   bb262:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb264:	429a      	cmp	r2, r3
		*len = msgLen;
   bb266:	bf88      	it	hi
   bb268:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb26a:	783a      	ldrb	r2, [r7, #0]
   bb26c:	4648      	mov	r0, r9
   bb26e:	f005 ffc7 	bl	c1200 <memcpy>
	    return true;
   bb272:	e7c9      	b.n	bb208 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bb274:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb278:	2aff      	cmp	r2, #255	; 0xff
   bb27a:	d1c4      	bne.n	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bb27c:	2b01      	cmp	r3, #1
   bb27e:	d9c2      	bls.n	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bb280:	7832      	ldrb	r2, [r6, #0]
   bb282:	2a01      	cmp	r2, #1
   bb284:	d1bf      	bne.n	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bb286:	7a2a      	ldrb	r2, [r5, #8]
   bb288:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bb28c:	42a2      	cmp	r2, r4
   bb28e:	d0ba      	beq.n	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bb290:	1edf      	subs	r7, r3, #3
   bb292:	4932      	ldr	r1, [pc, #200]	; (bb35c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb294:	b2ff      	uxtb	r7, r7
   bb296:	2300      	movs	r3, #0
   bb298:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb29c:	4547      	cmp	r7, r8
   bb29e:	d906      	bls.n	bb2ae <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb2a0:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb2a4:	4282      	cmp	r2, r0
   bb2a6:	f103 0301 	add.w	r3, r3, #1
   bb2aa:	d1f5      	bne.n	bb298 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb2ac:	e7ab      	b.n	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb2ae:	f105 0904 	add.w	r9, r5, #4
   bb2b2:	4648      	mov	r0, r9
   bb2b4:	f7ff fce0 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
   bb2b8:	2302      	movs	r3, #2
   bb2ba:	4602      	mov	r2, r0
   bb2bc:	4621      	mov	r1, r4
   bb2be:	4628      	mov	r0, r5
   bb2c0:	f000 f9ec 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb2c4:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb2c8:	b193      	cbz	r3, bb2f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb2ca:	4c22      	ldr	r4, [pc, #136]	; (bb354 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb2cc:	1ba3      	subs	r3, r4, r6
   bb2ce:	b2db      	uxtb	r3, r3
   bb2d0:	429f      	cmp	r7, r3
   bb2d2:	d90c      	bls.n	bb2ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb2d4:	78e1      	ldrb	r1, [r4, #3]
   bb2d6:	9105      	str	r1, [sp, #20]
   bb2d8:	4648      	mov	r0, r9
   bb2da:	f7ff fccd 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
   bb2de:	9905      	ldr	r1, [sp, #20]
   bb2e0:	4602      	mov	r2, r0
   bb2e2:	2302      	movs	r3, #2
   bb2e4:	4628      	mov	r0, r5
   bb2e6:	f000 f9d9 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb2ea:	3401      	adds	r4, #1
   bb2ec:	e7ee      	b.n	bb2cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb2ee:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb2f0:	682b      	ldr	r3, [r5, #0]
   bb2f2:	7872      	ldrb	r2, [r6, #1]
   bb2f4:	68db      	ldr	r3, [r3, #12]
   bb2f6:	491a      	ldr	r1, [pc, #104]	; (bb360 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb2f8:	4628      	mov	r0, r5
   bb2fa:	4798      	blx	r3
   bb2fc:	4604      	mov	r4, r0
   bb2fe:	b160      	cbz	r0, bb31a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb300:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb302:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb304:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb306:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb30a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb30e:	4911      	ldr	r1, [pc, #68]	; (bb354 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb310:	9400      	str	r4, [sp, #0]
   bb312:	4628      	mov	r0, r5
   bb314:	f000 fa4a 	bl	bb7ac <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb318:	e776      	b.n	bb208 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb31a:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb31e:	4543      	cmp	r3, r8
   bb320:	f67f af71 	bls.w	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb324:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb328:	2b00      	cmp	r3, #0
   bb32a:	f43f af6c 	beq.w	bb206 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb32e:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb332:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb334:	4907      	ldr	r1, [pc, #28]	; (bb354 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb336:	443e      	add	r6, r7
		tmpMessageLen++;
   bb338:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb33a:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb33c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb340:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb342:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb344:	9300      	str	r3, [sp, #0]
   bb346:	4628      	mov	r0, r5
   bb348:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb34a:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb34e:	f000 f9f7 	bl	bb740 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb352:	e759      	b.n	bb208 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb354:	2003e4fc 	.word	0x2003e4fc
   bb358:	2003e4fd 	.word	0x2003e4fd
   bb35c:	2003e4ff 	.word	0x2003e4ff
   bb360:	2003e4fe 	.word	0x2003e4fe

000bb364 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb364:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb366:	b085      	sub	sp, #20
   bb368:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb36a:	3004      	adds	r0, #4
{
   bb36c:	460e      	mov	r6, r1
   bb36e:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb370:	f7ff fc82 	bl	bac78 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb374:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb376:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb378:	4631      	mov	r1, r6
   bb37a:	4628      	mov	r0, r5
   bb37c:	f000 f94a 	bl	bb614 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb380:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb382:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb384:	d001      	beq.n	bb38a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb386:	2805      	cmp	r0, #5
   bb388:	d11b      	bne.n	bb3c2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb38a:	7831      	ldrb	r1, [r6, #0]
   bb38c:	4628      	mov	r0, r5
   bb38e:	f000 f96e 	bl	bb66e <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb392:	7872      	ldrb	r2, [r6, #1]
   bb394:	7a2b      	ldrb	r3, [r5, #8]
   bb396:	429a      	cmp	r2, r3
   bb398:	d013      	beq.n	bb3c2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb39a:	4c0b      	ldr	r4, [pc, #44]	; (bb3c8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb39c:	2303      	movs	r3, #3
   bb39e:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb3a0:	7833      	ldrb	r3, [r6, #0]
   bb3a2:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb3a4:	7871      	ldrb	r1, [r6, #1]
   bb3a6:	2302      	movs	r3, #2
   bb3a8:	463a      	mov	r2, r7
   bb3aa:	4628      	mov	r0, r5
   bb3ac:	f000 f976 	bl	bb69c <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb3b0:	2300      	movs	r3, #0
   bb3b2:	9300      	str	r3, [sp, #0]
   bb3b4:	4621      	mov	r1, r4
   bb3b6:	7873      	ldrb	r3, [r6, #1]
   bb3b8:	2202      	movs	r2, #2
   bb3ba:	4628      	mov	r0, r5
   bb3bc:	f000 f9f6 	bl	bb7ac <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb3c0:	4604      	mov	r4, r0
}
   bb3c2:	4620      	mov	r0, r4
   bb3c4:	b005      	add	sp, #20
   bb3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb3c8:	2003e4fc 	.word	0x2003e4fc

000bb3cc <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb3cc:	b510      	push	{r4, lr}
   bb3ce:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb3d0:	f7ff fc02 	bl	babd8 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb3d4:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb3d6:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb3d8:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb3da:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb3dc:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb3de:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb3e0:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb3e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb3e6:	f104 0011 	add.w	r0, r4, #17
   bb3ea:	f005 ff31 	bl	c1250 <memset>
}
   bb3ee:	4620      	mov	r0, r4
   bb3f0:	bd10      	pop	{r4, pc}

000bb3f2 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb3f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb3f4:	4604      	mov	r4, r0
   bb3f6:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb3f8:	f7ff fc32 	bl	bac60 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb3fc:	4620      	mov	r0, r4
   bb3fe:	2200      	movs	r2, #0
   bb400:	2180      	movs	r1, #128	; 0x80
   bb402:	f7ff fc31 	bl	bac68 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb406:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb408:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb40a:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb40e:	f10d 010f 	add.w	r1, sp, #15
   bb412:	2201      	movs	r2, #1
   bb414:	4620      	mov	r0, r4
   bb416:	f7ff fbf4 	bl	bac02 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb41a:	4620      	mov	r0, r4
   bb41c:	f7ff fbe3 	bl	babe6 <_ZN10RHDatagram14waitPacketSentEv>
}
   bb420:	b004      	add	sp, #16
   bb422:	bd10      	pop	{r4, pc}

000bb424 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb428:	7b05      	ldrb	r5, [r0, #12]
   bb42a:	3501      	adds	r5, #1
   bb42c:	b2ed      	uxtb	r5, r5
{
   bb42e:	b087      	sub	sp, #28
   bb430:	4604      	mov	r4, r0
   bb432:	4689      	mov	r9, r1
   bb434:	4692      	mov	sl, r2
   bb436:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb438:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb43a:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb43c:	7c22      	ldrb	r2, [r4, #16]
   bb43e:	463b      	mov	r3, r7
   bb440:	429a      	cmp	r2, r3
   bb442:	f107 0701 	add.w	r7, r7, #1
   bb446:	b2ff      	uxtb	r7, r7
   bb448:	d36b      	bcc.n	bb522 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb44a:	4629      	mov	r1, r5
   bb44c:	4620      	mov	r0, r4
   bb44e:	f7ff fc07 	bl	bac60 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb452:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb454:	bf0d      	iteet	eq
   bb456:	22c0      	moveq	r2, #192	; 0xc0
   bb458:	2280      	movne	r2, #128	; 0x80
   bb45a:	2140      	movne	r1, #64	; 0x40
   bb45c:	2100      	moveq	r1, #0
   bb45e:	4620      	mov	r0, r4
   bb460:	f7ff fc02 	bl	bac68 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb464:	4643      	mov	r3, r8
   bb466:	4652      	mov	r2, sl
   bb468:	4649      	mov	r1, r9
   bb46a:	4620      	mov	r0, r4
   bb46c:	f7ff fbc9 	bl	bac02 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb470:	4620      	mov	r0, r4
   bb472:	f7ff fbb8 	bl	babe6 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb476:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb47a:	d054      	beq.n	bb526 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb47c:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb47e:	bf82      	ittt	hi
   bb480:	68a3      	ldrhi	r3, [r4, #8]
   bb482:	3301      	addhi	r3, #1
   bb484:	60a3      	strhi	r3, [r4, #8]
   bb486:	f001 fb69 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb48a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb48e:	4683      	mov	fp, r0
   bb490:	2000      	movs	r0, #0
   bb492:	89e6      	ldrh	r6, [r4, #14]
   bb494:	f004 f981 	bl	bf79a <_Z6randomii>
   bb498:	4370      	muls	r0, r6
   bb49a:	bf48      	it	mi
   bb49c:	30ff      	addmi	r0, #255	; 0xff
   bb49e:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb4a2:	fa1b f686 	uxtah	r6, fp, r6
   bb4a6:	f001 fb59 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
   bb4aa:	1a30      	subs	r0, r6, r0
   bb4ac:	2800      	cmp	r0, #0
   bb4ae:	ddc5      	ble.n	bb43c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb4b0:	b281      	uxth	r1, r0
   bb4b2:	2200      	movs	r2, #0
   bb4b4:	4620      	mov	r0, r4
   bb4b6:	f7ff fb9a 	bl	babee <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb4ba:	2800      	cmp	r0, #0
   bb4bc:	d0f3      	beq.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb4be:	f10d 0317 	add.w	r3, sp, #23
   bb4c2:	9302      	str	r3, [sp, #8]
   bb4c4:	f10d 0316 	add.w	r3, sp, #22
   bb4c8:	9301      	str	r3, [sp, #4]
   bb4ca:	2200      	movs	r2, #0
   bb4cc:	f10d 0315 	add.w	r3, sp, #21
   bb4d0:	9300      	str	r3, [sp, #0]
   bb4d2:	4611      	mov	r1, r2
   bb4d4:	ab05      	add	r3, sp, #20
   bb4d6:	4620      	mov	r0, r4
   bb4d8:	f7ff fbda 	bl	bac90 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb4dc:	2800      	cmp	r0, #0
   bb4de:	d0e2      	beq.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb4e0:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb4e4:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb4e8:	4542      	cmp	r2, r8
   bb4ea:	d10e      	bne.n	bb50a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb4ec:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb4f0:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb4f4:	458c      	cmp	ip, r1
   bb4f6:	d108      	bne.n	bb50a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb4f8:	2b00      	cmp	r3, #0
   bb4fa:	da08      	bge.n	bb50e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb4fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb500:	42ab      	cmp	r3, r5
   bb502:	d1d0      	bne.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb504:	b007      	add	sp, #28
   bb506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb50a:	2b00      	cmp	r3, #0
   bb50c:	dbcb      	blt.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb50e:	18a1      	adds	r1, r4, r2
   bb510:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb514:	7c49      	ldrb	r1, [r1, #17]
   bb516:	4299      	cmp	r1, r3
   bb518:	d1c5      	bne.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb51a:	4620      	mov	r0, r4
   bb51c:	f7ff ff69 	bl	bb3f2 <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb520:	e7c1      	b.n	bb4a6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb522:	2000      	movs	r0, #0
   bb524:	e7ee      	b.n	bb504 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb526:	2001      	movs	r0, #1
   bb528:	e7ec      	b.n	bb504 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb52a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb52a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb52e:	b089      	sub	sp, #36	; 0x24
   bb530:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb534:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb538:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb53a:	4604      	mov	r4, r0
   bb53c:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb53e:	f7ff fb4e 	bl	babde <_ZN10RHDatagram9availableEv>
   bb542:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb546:	b920      	cbnz	r0, bb552 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb548:	2500      	movs	r5, #0
}
   bb54a:	4628      	mov	r0, r5
   bb54c:	b009      	add	sp, #36	; 0x24
   bb54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb552:	f10d 031f 	add.w	r3, sp, #31
   bb556:	9302      	str	r3, [sp, #8]
   bb558:	f10d 031e 	add.w	r3, sp, #30
   bb55c:	9301      	str	r3, [sp, #4]
   bb55e:	f10d 031d 	add.w	r3, sp, #29
   bb562:	9300      	str	r3, [sp, #0]
   bb564:	4620      	mov	r0, r4
   bb566:	ab07      	add	r3, sp, #28
   bb568:	f7ff fb92 	bl	bac90 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb56c:	4605      	mov	r5, r0
   bb56e:	2800      	cmp	r0, #0
   bb570:	d0ea      	beq.n	bb548 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb572:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb576:	2b00      	cmp	r3, #0
   bb578:	dbe6      	blt.n	bb548 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb57a:	7922      	ldrb	r2, [r4, #4]
   bb57c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb580:	429a      	cmp	r2, r3
   bb582:	d106      	bne.n	bb592 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb584:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb588:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb58c:	4620      	mov	r0, r4
   bb58e:	f7ff ff30 	bl	bb3f2 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb592:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb596:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb59a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb59e:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb5a2:	440c      	add	r4, r1
   bb5a4:	d002      	beq.n	bb5ac <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb5a6:	7c60      	ldrb	r0, [r4, #17]
   bb5a8:	4298      	cmp	r0, r3
   bb5aa:	d0cd      	beq.n	bb548 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb5ac:	b106      	cbz	r6, bb5b0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb5ae:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb5b0:	f1b9 0f00 	cmp.w	r9, #0
   bb5b4:	d003      	beq.n	bb5be <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb5b6:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb5ba:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb5be:	f1b8 0f00 	cmp.w	r8, #0
   bb5c2:	d001      	beq.n	bb5c8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb5c4:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb5c8:	b107      	cbz	r7, bb5cc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb5ca:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb5cc:	7463      	strb	r3, [r4, #17]
		return true;
   bb5ce:	e7bc      	b.n	bb54a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb5d0 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb5d0:	4770      	bx	lr

000bb5d2 <_ZN8RHRouter4initEv>:
{
   bb5d2:	b510      	push	{r4, lr}
   bb5d4:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb5d6:	3004      	adds	r0, #4
   bb5d8:	f7ff fb34 	bl	bac44 <_ZN10RHDatagram4initEv>
    if (ret)
   bb5dc:	b110      	cbz	r0, bb5e4 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb5de:	231e      	movs	r3, #30
   bb5e0:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb5e4:	bd10      	pop	{r4, pc}

000bb5e6 <_ZN8RHRouter10getRouteToEh>:
{
   bb5e6:	b510      	push	{r4, lr}
   bb5e8:	4602      	mov	r2, r0
   bb5ea:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb5ec:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb5f0:	428c      	cmp	r4, r1
   bb5f2:	d108      	bne.n	bb606 <_ZN8RHRouter10getRouteToEh+0x20>
   bb5f4:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb5f8:	b12c      	cbz	r4, bb606 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb5fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb5fe:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb602:	4418      	add	r0, r3
}
   bb604:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb606:	3301      	adds	r3, #1
   bb608:	2b32      	cmp	r3, #50	; 0x32
   bb60a:	f102 0203 	add.w	r2, r2, #3
   bb60e:	d1ed      	bne.n	bb5ec <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb610:	2000      	movs	r0, #0
   bb612:	e7f7      	b.n	bb604 <_ZN8RHRouter10getRouteToEh+0x1e>

000bb614 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb614:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb616:	780b      	ldrb	r3, [r1, #0]
   bb618:	2bff      	cmp	r3, #255	; 0xff
{
   bb61a:	4605      	mov	r5, r0
   bb61c:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb61e:	d006      	beq.n	bb62e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb620:	4619      	mov	r1, r3
   bb622:	9201      	str	r2, [sp, #4]
   bb624:	f7ff ffdf 	bl	bb5e6 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb628:	b158      	cbz	r0, bb642 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb62a:	7843      	ldrb	r3, [r0, #1]
   bb62c:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb62e:	4621      	mov	r1, r4
   bb630:	1d28      	adds	r0, r5, #4
   bb632:	f7ff fef7 	bl	bb424 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb636:	2800      	cmp	r0, #0
   bb638:	bf14      	ite	ne
   bb63a:	2000      	movne	r0, #0
   bb63c:	2005      	moveq	r0, #5
}
   bb63e:	b003      	add	sp, #12
   bb640:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb642:	2002      	movs	r0, #2
   bb644:	e7fb      	b.n	bb63e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb646 <_ZN8RHRouter11deleteRouteEh>:
{
   bb646:	b510      	push	{r4, lr}
   bb648:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb64c:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb64e:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb652:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb656:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb65a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb65e:	4421      	add	r1, r4
   bb660:	4420      	add	r0, r4
   bb662:	f005 fdcd 	bl	c1200 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb666:	2300      	movs	r3, #0
   bb668:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb66c:	bd10      	pop	{r4, pc}

000bb66e <_ZN8RHRouter13deleteRouteToEh>:
{
   bb66e:	b538      	push	{r3, r4, r5, lr}
   bb670:	460a      	mov	r2, r1
   bb672:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb674:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb678:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb67c:	b2d9      	uxtb	r1, r3
   bb67e:	5d65      	ldrb	r5, [r4, r5]
   bb680:	4295      	cmp	r5, r2
   bb682:	d103      	bne.n	bb68c <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb684:	f7ff ffdf 	bl	bb646 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb688:	2001      	movs	r0, #1
}
   bb68a:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb68c:	3301      	adds	r3, #1
   bb68e:	2b32      	cmp	r3, #50	; 0x32
   bb690:	d1f2      	bne.n	bb678 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb692:	2000      	movs	r0, #0
   bb694:	e7f9      	b.n	bb68a <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb696 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb696:	2100      	movs	r1, #0
   bb698:	f7ff bfd5 	b.w	bb646 <_ZN8RHRouter11deleteRouteEh>

000bb69c <_ZN8RHRouter10addRouteToEhhh>:
{
   bb69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb69e:	4616      	mov	r6, r2
   bb6a0:	461f      	mov	r7, r3
   bb6a2:	4604      	mov	r4, r0
   bb6a4:	460d      	mov	r5, r1
   bb6a6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb6a8:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb6ac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb6b0:	5c11      	ldrb	r1, [r2, r0]
   bb6b2:	42a9      	cmp	r1, r5
   bb6b4:	d105      	bne.n	bb6c2 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb6b6:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb6b8:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb6bc:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6c2:	3301      	adds	r3, #1
   bb6c4:	2b32      	cmp	r3, #50	; 0x32
   bb6c6:	d1f1      	bne.n	bb6ac <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb6c8:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb6ca:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb6ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb6d2:	5c11      	ldrb	r1, [r2, r0]
   bb6d4:	b919      	cbnz	r1, bb6de <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb6d6:	4420      	add	r0, r4
   bb6d8:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb6dc:	e7ec      	b.n	bb6b8 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6de:	3301      	adds	r3, #1
   bb6e0:	2b32      	cmp	r3, #50	; 0x32
   bb6e2:	d1f4      	bne.n	bb6ce <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb6e4:	4620      	mov	r0, r4
   bb6e6:	f7ff ffd6 	bl	bb696 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6ea:	4620      	mov	r0, r4
   bb6ec:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb6f0:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb6f4:	b92a      	cbnz	r2, bb702 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb6f6:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb6fa:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb6fe:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb702:	3003      	adds	r0, #3
   bb704:	4298      	cmp	r0, r3
   bb706:	d1f3      	bne.n	bb6f0 <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb708:	e7da      	b.n	bb6c0 <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb70a <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb70a:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb70e:	2200      	movs	r2, #0
   bb710:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb714:	3003      	adds	r0, #3
   bb716:	4298      	cmp	r0, r3
   bb718:	d1fa      	bne.n	bb710 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb71a:	4770      	bx	lr

000bb71c <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb71c:	b510      	push	{r4, lr}
   bb71e:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb720:	3004      	adds	r0, #4
   bb722:	f7ff fe53 	bl	bb3cc <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb726:	4b05      	ldr	r3, [pc, #20]	; (bb73c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb728:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb72a:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb72e:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb730:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb734:	f7ff ffe9 	bl	bb70a <_ZN8RHRouter17clearRoutingTableEv>
}
   bb738:	4620      	mov	r0, r4
   bb73a:	bd10      	pop	{r4, pc}
   bb73c:	000c50a0 	.word	0x000c50a0

000bb740 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb744:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb746:	6840      	ldr	r0, [r0, #4]
{
   bb748:	9101      	str	r1, [sp, #4]
   bb74a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb74c:	6803      	ldr	r3, [r0, #0]
{
   bb74e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb752:	699b      	ldr	r3, [r3, #24]
{
   bb754:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb758:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb75a:	4798      	blx	r3
   bb75c:	f106 0805 	add.w	r8, r6, #5
   bb760:	4580      	cmp	r8, r0
   bb762:	d81c      	bhi.n	bb79e <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb764:	4d10      	ldr	r5, [pc, #64]	; (bb7a8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb766:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb768:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb76c:	2300      	movs	r3, #0
   bb76e:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb770:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb774:	70eb      	strb	r3, [r5, #3]
   bb776:	1c5a      	adds	r2, r3, #1
   bb778:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb77c:	1d68      	adds	r0, r5, #5
   bb77e:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb780:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb782:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb786:	f005 fd3b 	bl	c1200 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb78a:	6823      	ldr	r3, [r4, #0]
   bb78c:	685b      	ldr	r3, [r3, #4]
   bb78e:	fa5f f288 	uxtb.w	r2, r8
   bb792:	4629      	mov	r1, r5
   bb794:	4620      	mov	r0, r4
}
   bb796:	b002      	add	sp, #8
   bb798:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb79c:	4718      	bx	r3
}
   bb79e:	2001      	movs	r0, #1
   bb7a0:	b002      	add	sp, #8
   bb7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb7a6:	bf00      	nop
   bb7a8:	2003e576 	.word	0x2003e576

000bb7ac <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb7ac:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb7ae:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb7b2:	9401      	str	r4, [sp, #4]
   bb7b4:	7a04      	ldrb	r4, [r0, #8]
   bb7b6:	9400      	str	r4, [sp, #0]
   bb7b8:	f7ff ffc2 	bl	bb740 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb7bc:	b002      	add	sp, #8
   bb7be:	bd10      	pop	{r4, pc}

000bb7c0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7c4:	b087      	sub	sp, #28
   bb7c6:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb7c8:	237f      	movs	r3, #127	; 0x7f
   bb7ca:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7ce:	f10d 0317 	add.w	r3, sp, #23
   bb7d2:	9302      	str	r3, [sp, #8]
   bb7d4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb7d8:	f10d 0316 	add.w	r3, sp, #22
   bb7dc:	9301      	str	r3, [sp, #4]
   bb7de:	f10d 0315 	add.w	r3, sp, #21
   bb7e2:	9300      	str	r3, [sp, #0]
{  
   bb7e4:	4604      	mov	r4, r0
   bb7e6:	4688      	mov	r8, r1
   bb7e8:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7ea:	ab05      	add	r3, sp, #20
   bb7ec:	f10d 0213 	add.w	r2, sp, #19
   bb7f0:	4649      	mov	r1, r9
   bb7f2:	3004      	adds	r0, #4
{  
   bb7f4:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7f8:	f7ff fe97 	bl	bb52a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb7fc:	4605      	mov	r5, r0
   bb7fe:	b908      	cbnz	r0, bb804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb800:	2500      	movs	r5, #0
   bb802:	e038      	b.n	bb876 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb804:	6823      	ldr	r3, [r4, #0]
   bb806:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb80a:	681b      	ldr	r3, [r3, #0]
   bb80c:	4649      	mov	r1, r9
   bb80e:	4620      	mov	r0, r4
   bb810:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb812:	f899 3000 	ldrb.w	r3, [r9]
   bb816:	7a22      	ldrb	r2, [r4, #8]
   bb818:	429a      	cmp	r2, r3
   bb81a:	d001      	beq.n	bb820 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb81c:	2bff      	cmp	r3, #255	; 0xff
   bb81e:	d12e      	bne.n	bb87e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb820:	b117      	cbz	r7, bb828 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb822:	4b21      	ldr	r3, [pc, #132]	; (bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb824:	785b      	ldrb	r3, [r3, #1]
   bb826:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb828:	f1bb 0f00 	cmp.w	fp, #0
   bb82c:	d003      	beq.n	bb836 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb82e:	4b1e      	ldr	r3, [pc, #120]	; (bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb830:	781b      	ldrb	r3, [r3, #0]
   bb832:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb836:	f1ba 0f00 	cmp.w	sl, #0
   bb83a:	d003      	beq.n	bb844 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb83c:	4b1a      	ldr	r3, [pc, #104]	; (bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb83e:	78db      	ldrb	r3, [r3, #3]
   bb840:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb844:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb846:	b11b      	cbz	r3, bb850 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb848:	4b17      	ldr	r3, [pc, #92]	; (bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb84a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb84c:	791b      	ldrb	r3, [r3, #4]
   bb84e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb852:	b11b      	cbz	r3, bb85c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb854:	4b14      	ldr	r3, [pc, #80]	; (bb8a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb856:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb858:	789b      	ldrb	r3, [r3, #2]
   bb85a:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb85c:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb860:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb862:	4912      	ldr	r1, [pc, #72]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb864:	3b05      	subs	r3, #5
   bb866:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb868:	429a      	cmp	r2, r3
		*len = msgLen;
   bb86a:	bf88      	it	hi
   bb86c:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb86e:	7832      	ldrb	r2, [r6, #0]
   bb870:	4640      	mov	r0, r8
   bb872:	f005 fcc5 	bl	c1200 <memcpy>
}
   bb876:	4628      	mov	r0, r5
   bb878:	b007      	add	sp, #28
   bb87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bb87e:	f899 3002 	ldrb.w	r3, [r9, #2]
   bb882:	1c5a      	adds	r2, r3, #1
   bb884:	f889 2002 	strb.w	r2, [r9, #2]
   bb888:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bb88c:	429a      	cmp	r2, r3
   bb88e:	d9b7      	bls.n	bb800 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bb890:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bb894:	2b00      	cmp	r3, #0
   bb896:	d0b3      	beq.n	bb800 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bb898:	6823      	ldr	r3, [r4, #0]
   bb89a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb89e:	685b      	ldr	r3, [r3, #4]
   bb8a0:	4649      	mov	r1, r9
   bb8a2:	4620      	mov	r0, r4
   bb8a4:	4798      	blx	r3
   bb8a6:	e7ab      	b.n	bb800 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bb8a8:	2003e576 	.word	0x2003e576
   bb8ac:	2003e57b 	.word	0x2003e57b

000bb8b0 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bb8b0:	b510      	push	{r4, lr}
   bb8b2:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bb8b4:	6a00      	ldr	r0, [r0, #32]
   bb8b6:	6803      	ldr	r3, [r0, #0]
   bb8b8:	68db      	ldr	r3, [r3, #12]
   bb8ba:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bb8bc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bb8c0:	28ff      	cmp	r0, #255	; 0xff
   bb8c2:	d002      	beq.n	bb8ca <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bb8c4:	2101      	movs	r1, #1
   bb8c6:	f004 fdff 	bl	c04c8 <pinMode>

    deselectSlave();
   bb8ca:	6823      	ldr	r3, [r4, #0]
   bb8cc:	4620      	mov	r0, r4
   bb8ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb8d0:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bb8d2:	2064      	movs	r0, #100	; 0x64
   bb8d4:	f001 fd5e 	bl	bd394 <delay>
#endif
    
    return true;
}
   bb8d8:	2001      	movs	r0, #1
   bb8da:	bd10      	pop	{r4, pc}

000bb8dc <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bb8dc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb8e0:	2100      	movs	r1, #0
   bb8e2:	f004 be02 	b.w	c04ea <digitalWrite>

000bb8e6 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bb8e6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb8ea:	2101      	movs	r1, #1
   bb8ec:	f004 bdfd 	b.w	c04ea <digitalWrite>

000bb8f0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bb8f0:	b570      	push	{r4, r5, r6, lr}
   bb8f2:	4604      	mov	r4, r0
   bb8f4:	460d      	mov	r5, r1
   bb8f6:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bb8f8:	f7ff fa7e 	bl	badf8 <_ZN15RHGenericDriverC1Ev>
   bb8fc:	4b03      	ldr	r3, [pc, #12]	; (bb90c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bb8fe:	6023      	str	r3, [r4, #0]
   bb900:	6226      	str	r6, [r4, #32]
   bb902:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bb906:	4620      	mov	r0, r4
   bb908:	bd70      	pop	{r4, r5, r6, pc}
   bb90a:	bf00      	nop
   bb90c:	000c50b0 	.word	0x000c50b0

000bb910 <_ZN11RHSPIDriver7spiReadEh>:
{
   bb910:	b538      	push	{r3, r4, r5, lr}
   bb912:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb914:	6a00      	ldr	r0, [r0, #32]
   bb916:	6803      	ldr	r3, [r0, #0]
   bb918:	6a1b      	ldr	r3, [r3, #32]
{
   bb91a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb91c:	4798      	blx	r3
    selectSlave();
   bb91e:	6823      	ldr	r3, [r4, #0]
   bb920:	4620      	mov	r0, r4
   bb922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb924:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bb926:	6a20      	ldr	r0, [r4, #32]
   bb928:	6803      	ldr	r3, [r0, #0]
   bb92a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bb92e:	681b      	ldr	r3, [r3, #0]
   bb930:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb932:	6a20      	ldr	r0, [r4, #32]
   bb934:	6803      	ldr	r3, [r0, #0]
   bb936:	2100      	movs	r1, #0
   bb938:	681b      	ldr	r3, [r3, #0]
   bb93a:	4798      	blx	r3
    deselectSlave();
   bb93c:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb93e:	4605      	mov	r5, r0
    deselectSlave();
   bb940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb942:	4620      	mov	r0, r4
   bb944:	4798      	blx	r3
    _spi.endTransaction();
   bb946:	6a20      	ldr	r0, [r4, #32]
   bb948:	6803      	ldr	r3, [r0, #0]
   bb94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb94c:	4798      	blx	r3
}
   bb94e:	4628      	mov	r0, r5
   bb950:	bd38      	pop	{r3, r4, r5, pc}

000bb952 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bb952:	b570      	push	{r4, r5, r6, lr}
   bb954:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb956:	6a00      	ldr	r0, [r0, #32]
   bb958:	6803      	ldr	r3, [r0, #0]
   bb95a:	6a1b      	ldr	r3, [r3, #32]
{
   bb95c:	4616      	mov	r6, r2
   bb95e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb960:	4798      	blx	r3
    selectSlave();
   bb962:	6823      	ldr	r3, [r4, #0]
   bb964:	4620      	mov	r0, r4
   bb966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb968:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bb96a:	6a20      	ldr	r0, [r4, #32]
   bb96c:	6803      	ldr	r3, [r0, #0]
   bb96e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bb972:	681b      	ldr	r3, [r3, #0]
   bb974:	4798      	blx	r3
   bb976:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bb978:	6a20      	ldr	r0, [r4, #32]
   bb97a:	6803      	ldr	r3, [r0, #0]
   bb97c:	4631      	mov	r1, r6
   bb97e:	681b      	ldr	r3, [r3, #0]
   bb980:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bb982:	2001      	movs	r0, #1
   bb984:	f001 f8e2 	bl	bcb4c <HAL_Delay_Microseconds>
    deselectSlave();
   bb988:	6823      	ldr	r3, [r4, #0]
   bb98a:	4620      	mov	r0, r4
   bb98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb98e:	4798      	blx	r3
    _spi.endTransaction();
   bb990:	6a20      	ldr	r0, [r4, #32]
   bb992:	6803      	ldr	r3, [r0, #0]
   bb994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb996:	4798      	blx	r3
}
   bb998:	4628      	mov	r0, r5
   bb99a:	bd70      	pop	{r4, r5, r6, pc}

000bb99c <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bb99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb99e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb9a0:	6a00      	ldr	r0, [r0, #32]
{
   bb9a2:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb9a4:	6803      	ldr	r3, [r0, #0]
   bb9a6:	6a1b      	ldr	r3, [r3, #32]
{
   bb9a8:	460f      	mov	r7, r1
   bb9aa:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb9ac:	4798      	blx	r3
    selectSlave();
   bb9ae:	6823      	ldr	r3, [r4, #0]
   bb9b0:	4620      	mov	r0, r4
   bb9b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb9b4:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bb9b6:	6a20      	ldr	r0, [r4, #32]
   bb9b8:	6803      	ldr	r3, [r0, #0]
   bb9ba:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bb9be:	681b      	ldr	r3, [r3, #0]
   bb9c0:	4798      	blx	r3
   bb9c2:	442e      	add	r6, r5
   bb9c4:	4607      	mov	r7, r0
    while (len--)
   bb9c6:	42b5      	cmp	r5, r6
   bb9c8:	d007      	beq.n	bb9da <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bb9ca:	6a20      	ldr	r0, [r4, #32]
   bb9cc:	6803      	ldr	r3, [r0, #0]
   bb9ce:	2100      	movs	r1, #0
   bb9d0:	681b      	ldr	r3, [r3, #0]
   bb9d2:	4798      	blx	r3
   bb9d4:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bb9d8:	e7f5      	b.n	bb9c6 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bb9da:	6823      	ldr	r3, [r4, #0]
   bb9dc:	4620      	mov	r0, r4
   bb9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb9e0:	4798      	blx	r3
    _spi.endTransaction();
   bb9e2:	6a20      	ldr	r0, [r4, #32]
   bb9e4:	6803      	ldr	r3, [r0, #0]
   bb9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb9e8:	4798      	blx	r3
}
   bb9ea:	4638      	mov	r0, r7
   bb9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb9ee <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bb9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9f0:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb9f2:	6a00      	ldr	r0, [r0, #32]
{
   bb9f4:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb9f6:	6803      	ldr	r3, [r0, #0]
   bb9f8:	6a1b      	ldr	r3, [r3, #32]
{
   bb9fa:	460f      	mov	r7, r1
   bb9fc:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb9fe:	4798      	blx	r3
    selectSlave();
   bba00:	6823      	ldr	r3, [r4, #0]
   bba02:	4620      	mov	r0, r4
   bba04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bba06:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bba08:	6a20      	ldr	r0, [r4, #32]
   bba0a:	6803      	ldr	r3, [r0, #0]
   bba0c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bba10:	681b      	ldr	r3, [r3, #0]
   bba12:	4798      	blx	r3
   bba14:	442e      	add	r6, r5
   bba16:	4607      	mov	r7, r0
    while (len--)
   bba18:	42b5      	cmp	r5, r6
   bba1a:	d006      	beq.n	bba2a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bba1c:	6a20      	ldr	r0, [r4, #32]
   bba1e:	f815 1b01 	ldrb.w	r1, [r5], #1
   bba22:	6803      	ldr	r3, [r0, #0]
   bba24:	681b      	ldr	r3, [r3, #0]
   bba26:	4798      	blx	r3
    while (len--)
   bba28:	e7f6      	b.n	bba18 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bba2a:	6823      	ldr	r3, [r4, #0]
   bba2c:	4620      	mov	r0, r4
   bba2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bba30:	4798      	blx	r3
    _spi.endTransaction();
   bba32:	6a20      	ldr	r0, [r4, #32]
   bba34:	6803      	ldr	r3, [r0, #0]
   bba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bba38:	4798      	blx	r3
}
   bba3a:	4638      	mov	r0, r7
   bba3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bba3e <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bba3e:	6a00      	ldr	r0, [r0, #32]
   bba40:	6803      	ldr	r3, [r0, #0]
   bba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bba44:	4718      	bx	r3

000bba46 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bba46:	2001      	movs	r0, #1
   bba48:	4770      	bx	lr

000bba4a <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bba4a:	20fb      	movs	r0, #251	; 0xfb
   bba4c:	4770      	bx	lr

000bba4e <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bba4e:	4770      	bx	lr

000bba50 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bba50:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bba52:	7903      	ldrb	r3, [r0, #4]
   bba54:	2b05      	cmp	r3, #5
{
   bba56:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bba58:	d010      	beq.n	bba7c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bba5a:	6803      	ldr	r3, [r0, #0]
   bba5c:	2105      	movs	r1, #5
   bba5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bba62:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bba64:	2207      	movs	r2, #7
   bba66:	2101      	movs	r1, #1
   bba68:	4620      	mov	r0, r4
   bba6a:	f7ff ff72 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bba6e:	2280      	movs	r2, #128	; 0x80
   bba70:	2140      	movs	r1, #64	; 0x40
   bba72:	4620      	mov	r0, r4
   bba74:	f7ff ff6d 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bba78:	2305      	movs	r3, #5
   bba7a:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bba7c:	7923      	ldrb	r3, [r4, #4]
   bba7e:	2b05      	cmp	r3, #5
   bba80:	d0fc      	beq.n	bba7c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bba82:	7e20      	ldrb	r0, [r4, #24]
}
   bba84:	bd10      	pop	{r4, pc}

000bba86 <_ZN7RH_RF95D0Ev>:
   bba86:	b510      	push	{r4, lr}
   bba88:	f44f 7198 	mov.w	r1, #304	; 0x130
   bba8c:	4604      	mov	r4, r0
   bba8e:	f7f8 fb06 	bl	b409e <_ZdlPvj>
   bba92:	4620      	mov	r0, r4
   bba94:	bd10      	pop	{r4, pc}

000bba96 <_ZN7RH_RF955sleepEv>:
{
   bba96:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bba98:	7903      	ldrb	r3, [r0, #4]
   bba9a:	2b01      	cmp	r3, #1
{
   bba9c:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bba9e:	d00b      	beq.n	bbab8 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bbaa0:	6803      	ldr	r3, [r0, #0]
   bbaa2:	2101      	movs	r1, #1
   bbaa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbaa8:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bbaaa:	2200      	movs	r2, #0
   bbaac:	2101      	movs	r1, #1
   bbaae:	4620      	mov	r0, r4
   bbab0:	f7ff ff4f 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bbab4:	2301      	movs	r3, #1
   bbab6:	7123      	strb	r3, [r4, #4]
}
   bbab8:	2001      	movs	r0, #1
   bbaba:	bd10      	pop	{r4, pc}

000bbabc <_ZN7RH_RF954recvEPhS0_>:
{
   bbabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bbabe:	6803      	ldr	r3, [r0, #0]
   bbac0:	68db      	ldr	r3, [r3, #12]
{
   bbac2:	4604      	mov	r4, r0
   bbac4:	460f      	mov	r7, r1
   bbac6:	4615      	mov	r5, r2
    if (!available())
   bbac8:	4798      	blx	r3
   bbaca:	4606      	mov	r6, r0
   bbacc:	b1b0      	cbz	r0, bbafc <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bbace:	b187      	cbz	r7, bbaf2 <_ZN7RH_RF954recvEPhS0_+0x36>
   bbad0:	b17d      	cbz	r5, bbaf2 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bbad2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bbad6:	782a      	ldrb	r2, [r5, #0]
   bbad8:	3b03      	subs	r3, #3
   bbada:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bbadc:	bfde      	ittt	le
   bbade:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bbae2:	3b04      	suble	r3, #4
   bbae4:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bbae6:	782a      	ldrb	r2, [r5, #0]
   bbae8:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bbaec:	4638      	mov	r0, r7
   bbaee:	f005 fb87 	bl	c1200 <memcpy>
    _rxBufValid = false;
   bbaf2:	2300      	movs	r3, #0
   bbaf4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbaf8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bbafc:	4630      	mov	r0, r6
   bbafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbb00 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bbb00:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bbb02:	b538      	push	{r3, r4, r5, lr}
   bbb04:	4605      	mov	r5, r0
   bbb06:	460c      	mov	r4, r1
	if (power > 20)
   bbb08:	dc14      	bgt.n	bbb34 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bbb0a:	2901      	cmp	r1, #1
   bbb0c:	dd14      	ble.n	bbb38 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bbb0e:	2911      	cmp	r1, #17
   bbb10:	dd13      	ble.n	bbb3a <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bbb12:	2207      	movs	r2, #7
   bbb14:	214d      	movs	r1, #77	; 0x4d
   bbb16:	4628      	mov	r0, r5
   bbb18:	f7ff ff1b 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bbb1c:	3c03      	subs	r4, #3
   bbb1e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbb20:	1ea2      	subs	r2, r4, #2
   bbb22:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bbb26:	4628      	mov	r0, r5
   bbb28:	b2d2      	uxtb	r2, r2
}
   bbb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbb2e:	2109      	movs	r1, #9
   bbb30:	f7ff bf0f 	b.w	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bbb34:	2414      	movs	r4, #20
   bbb36:	e7ec      	b.n	bbb12 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bbb38:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbb3a:	2204      	movs	r2, #4
   bbb3c:	214d      	movs	r1, #77	; 0x4d
   bbb3e:	4628      	mov	r0, r5
   bbb40:	f7ff ff07 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
   bbb44:	e7ec      	b.n	bbb20 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bbb48 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bbb48:	b538      	push	{r3, r4, r5, lr}
   bbb4a:	4604      	mov	r4, r0
   bbb4c:	4615      	mov	r5, r2
    _rxBufValid(0)
   bbb4e:	461a      	mov	r2, r3
   bbb50:	f7ff fece 	bl	bb8f0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bbb54:	4b09      	ldr	r3, [pc, #36]	; (bbb7c <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bbb56:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bbb58:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bbb5a:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bbb5c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bbb60:	2201      	movs	r2, #1
    _rxBufValid(0)
   bbb62:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbb66:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bbb6a:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bbb6e:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bbb72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bbb76:	4620      	mov	r0, r4
   bbb78:	bd38      	pop	{r3, r4, r5, pc}
   bbb7a:	bf00      	nop
   bbb7c:	000c5148 	.word	0x000c5148

000bbb80 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bbb80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bbb84:	2b03      	cmp	r3, #3
   bbb86:	d91b      	bls.n	bbbc0 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bbb88:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bbb8c:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bbb8e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bbb92:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bbb94:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bbb98:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bbb9a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bbb9e:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bbba0:	7983      	ldrb	r3, [r0, #6]
   bbba2:	b933      	cbnz	r3, bbbb2 <_ZN7RH_RF9513validateRxBufEv+0x32>
   bbba4:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bbba6:	7942      	ldrb	r2, [r0, #5]
   bbba8:	429a      	cmp	r2, r3
   bbbaa:	d002      	beq.n	bbbb2 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bbbac:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bbbae:	2bff      	cmp	r3, #255	; 0xff
   bbbb0:	d106      	bne.n	bbbc0 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bbbb2:	8a83      	ldrh	r3, [r0, #20]
   bbbb4:	3301      	adds	r3, #1
   bbbb6:	b29b      	uxth	r3, r3
   bbbb8:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bbbba:	2301      	movs	r3, #1
   bbbbc:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bbbc0:	4770      	bx	lr
   bbbc2:	0000      	movs	r0, r0
   bbbc4:	0000      	movs	r0, r0
	...

000bbbc8 <_ZN7RH_RF9512setFrequencyEf>:
{
   bbbc8:	b538      	push	{r3, r4, r5, lr}
   bbbca:	4604      	mov	r4, r0
   bbbcc:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbd0:	ee10 0a10 	vmov	r0, s0
{
   bbbd4:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbd8:	f004 ff02 	bl	c09e0 <__aeabi_f2d>
   bbbdc:	a317      	add	r3, pc, #92	; (adr r3, bbc3c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bbbde:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbe2:	f004 ff55 	bl	c0a90 <__aeabi_dmul>
   bbbe6:	a317      	add	r3, pc, #92	; (adr r3, bbc44 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bbbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbec:	f005 f87a 	bl	c0ce4 <__aeabi_ddiv>
   bbbf0:	f005 fa26 	bl	c1040 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbbf4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbf6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbbf8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bbbfc:	4620      	mov	r0, r4
   bbbfe:	f7ff fea8 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bbc02:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bbc06:	2107      	movs	r1, #7
   bbc08:	4620      	mov	r0, r4
   bbc0a:	f7ff fea2 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bbc0e:	b2ea      	uxtb	r2, r5
   bbc10:	2108      	movs	r1, #8
   bbc12:	4620      	mov	r0, r4
   bbc14:	f7ff fe9d 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bbc18:	eddf 7a07 	vldr	s15, [pc, #28]	; bbc38 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bbc1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bbc20:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bbc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbc28:	bfac      	ite	ge
   bbc2a:	2301      	movge	r3, #1
   bbc2c:	2300      	movlt	r3, #0
}
   bbc2e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bbc30:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bbc34:	bd38      	pop	{r3, r4, r5, pc}
   bbc36:	bf00      	nop
   bbc38:	4442c000 	.word	0x4442c000
   bbc3c:	00000000 	.word	0x00000000
   bbc40:	412e8480 	.word	0x412e8480
   bbc44:	00000000 	.word	0x00000000
   bbc48:	404e8480 	.word	0x404e8480

000bbc4c <_ZN7RH_RF9511setModeIdleEv>:
{
   bbc4c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bbc4e:	7903      	ldrb	r3, [r0, #4]
   bbc50:	2b02      	cmp	r3, #2
{
   bbc52:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bbc54:	d00b      	beq.n	bbc6e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bbc56:	6803      	ldr	r3, [r0, #0]
   bbc58:	2102      	movs	r1, #2
   bbc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbc5e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bbc60:	2201      	movs	r2, #1
   bbc62:	4611      	mov	r1, r2
   bbc64:	4620      	mov	r0, r4
   bbc66:	f7ff fe74 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bbc6a:	2302      	movs	r3, #2
   bbc6c:	7123      	strb	r3, [r4, #4]
}
   bbc6e:	bd10      	pop	{r4, pc}

000bbc70 <_ZN7RH_RF9515handleInterruptEv>:
{
   bbc70:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc72:	2112      	movs	r1, #18
{
   bbc74:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc76:	f7ff fe4b 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc7a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc7c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f7ff fe46 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbc84:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc86:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbc88:	2112      	movs	r1, #18
   bbc8a:	4620      	mov	r0, r4
   bbc8c:	f7ff fe61 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bbc90:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bbc92:	2b04      	cmp	r3, #4
   bbc94:	d107      	bne.n	bbca6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbc96:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bbc9a:	d117      	bne.n	bbccc <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bbc9c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bbca0:	b10b      	cbz	r3, bbca6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbca2:	0670      	lsls	r0, r6, #25
   bbca4:	d512      	bpl.n	bbccc <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bbca6:	7923      	ldrb	r3, [r4, #4]
   bbca8:	2b04      	cmp	r3, #4
   bbcaa:	d101      	bne.n	bbcb0 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bbcac:	0669      	lsls	r1, r5, #25
   bbcae:	d422      	bmi.n	bbcf6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bbcb0:	7923      	ldrb	r3, [r4, #4]
   bbcb2:	2b03      	cmp	r3, #3
   bbcb4:	d101      	bne.n	bbcba <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bbcb6:	072a      	lsls	r2, r5, #28
   bbcb8:	d468      	bmi.n	bbd8c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bbcba:	7923      	ldrb	r3, [r4, #4]
   bbcbc:	2b05      	cmp	r3, #5
   bbcbe:	d10e      	bne.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bbcc0:	076b      	lsls	r3, r5, #29
   bbcc2:	d50c      	bpl.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bbcc4:	f005 0501 	and.w	r5, r5, #1
   bbcc8:	7625      	strb	r5, [r4, #24]
   bbcca:	e063      	b.n	bbd94 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bbccc:	8a63      	ldrh	r3, [r4, #18]
   bbcce:	3301      	adds	r3, #1
   bbcd0:	b29b      	uxth	r3, r3
   bbcd2:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bbcd4:	2300      	movs	r3, #0
   bbcd6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbcda:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbcde:	22ff      	movs	r2, #255	; 0xff
   bbce0:	2112      	movs	r1, #18
   bbce2:	4620      	mov	r0, r4
   bbce4:	f7ff fe35 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbce8:	4620      	mov	r0, r4
   bbcea:	22ff      	movs	r2, #255	; 0xff
}
   bbcec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbcf0:	2112      	movs	r1, #18
   bbcf2:	f7ff be2e 	b.w	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbcf6:	2113      	movs	r1, #19
   bbcf8:	4620      	mov	r0, r4
   bbcfa:	f7ff fe09 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbcfe:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbd00:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbd02:	4620      	mov	r0, r4
   bbd04:	f7ff fe04 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
   bbd08:	210d      	movs	r1, #13
   bbd0a:	4602      	mov	r2, r0
   bbd0c:	4620      	mov	r0, r4
   bbd0e:	f7ff fe20 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bbd12:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bbd16:	462b      	mov	r3, r5
   bbd18:	2100      	movs	r1, #0
   bbd1a:	4620      	mov	r0, r4
   bbd1c:	f7ff fe3e 	bl	bb99c <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbd20:	2119      	movs	r1, #25
	_bufLen = len;
   bbd22:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbd26:	4620      	mov	r0, r4
   bbd28:	f7ff fdf2 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
   bbd2c:	b240      	sxtb	r0, r0
   bbd2e:	2800      	cmp	r0, #0
   bbd30:	bfb8      	it	lt
   bbd32:	3003      	addlt	r0, #3
   bbd34:	1080      	asrs	r0, r0, #2
   bbd36:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd3a:	211a      	movs	r1, #26
   bbd3c:	4620      	mov	r0, r4
   bbd3e:	f7ff fde7 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbd42:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd46:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbd48:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd4a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd4c:	bfa9      	itett	ge
   bbd4e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbd50:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd52:	b21b      	sxthge	r3, r3
   bbd54:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbd56:	bfb2      	itee	lt
   bbd58:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd5a:	220f      	movge	r2, #15
   bbd5c:	fb93 f3f2 	sdivge	r3, r3, r2
   bbd60:	b21b      	sxth	r3, r3
   bbd62:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbd64:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbd68:	b16b      	cbz	r3, bbd86 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbd6a:	8a23      	ldrh	r3, [r4, #16]
   bbd6c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbd6e:	b21b      	sxth	r3, r3
   bbd70:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbd72:	4620      	mov	r0, r4
   bbd74:	f7ff ff04 	bl	bbb80 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbd78:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbd7c:	2b00      	cmp	r3, #0
   bbd7e:	d0ae      	beq.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbd80:	f7ff ff64 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
   bbd84:	e7ab      	b.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbd86:	8a23      	ldrh	r3, [r4, #16]
   bbd88:	3ba4      	subs	r3, #164	; 0xa4
   bbd8a:	e7f0      	b.n	bbd6e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbd8c:	8ae3      	ldrh	r3, [r4, #22]
   bbd8e:	3301      	adds	r3, #1
   bbd90:	b29b      	uxth	r3, r3
   bbd92:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbd94:	4620      	mov	r0, r4
   bbd96:	e7f3      	b.n	bbd80 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbd98 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbd98:	4b02      	ldr	r3, [pc, #8]	; (bbda4 <_ZN7RH_RF954isr0Ev+0xc>)
   bbd9a:	6818      	ldr	r0, [r3, #0]
   bbd9c:	b108      	cbz	r0, bbda2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbd9e:	f7ff bf67 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbda2:	4770      	bx	lr
   bbda4:	2003e5f8 	.word	0x2003e5f8

000bbda8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbda8:	4b02      	ldr	r3, [pc, #8]	; (bbdb4 <_ZN7RH_RF954isr1Ev+0xc>)
   bbdaa:	6858      	ldr	r0, [r3, #4]
   bbdac:	b108      	cbz	r0, bbdb2 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbdae:	f7ff bf5f 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbdb2:	4770      	bx	lr
   bbdb4:	2003e5f8 	.word	0x2003e5f8

000bbdb8 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbdb8:	4b02      	ldr	r3, [pc, #8]	; (bbdc4 <_ZN7RH_RF954isr2Ev+0xc>)
   bbdba:	6898      	ldr	r0, [r3, #8]
   bbdbc:	b108      	cbz	r0, bbdc2 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbdbe:	f7ff bf57 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbdc2:	4770      	bx	lr
   bbdc4:	2003e5f8 	.word	0x2003e5f8

000bbdc8 <_ZN7RH_RF959setModeRxEv>:
{
   bbdc8:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbdca:	7903      	ldrb	r3, [r0, #4]
   bbdcc:	2b04      	cmp	r3, #4
{
   bbdce:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbdd0:	d010      	beq.n	bbdf4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbdd2:	6803      	ldr	r3, [r0, #0]
   bbdd4:	2104      	movs	r1, #4
   bbdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbdda:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbddc:	2205      	movs	r2, #5
   bbdde:	2101      	movs	r1, #1
   bbde0:	4620      	mov	r0, r4
   bbde2:	f7ff fdb6 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbde6:	2200      	movs	r2, #0
   bbde8:	2140      	movs	r1, #64	; 0x40
   bbdea:	4620      	mov	r0, r4
   bbdec:	f7ff fdb1 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbdf0:	2304      	movs	r3, #4
   bbdf2:	7123      	strb	r3, [r4, #4]
}
   bbdf4:	bd10      	pop	{r4, pc}

000bbdf6 <_ZN7RH_RF959availableEv>:
{
   bbdf6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbdf8:	7903      	ldrb	r3, [r0, #4]
   bbdfa:	2b03      	cmp	r3, #3
{
   bbdfc:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbdfe:	d005      	beq.n	bbe0c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbe00:	f7ff ffe2 	bl	bbdc8 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbe04:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbe08:	b2c0      	uxtb	r0, r0
}
   bbe0a:	bd10      	pop	{r4, pc}
	return false;
   bbe0c:	2000      	movs	r0, #0
   bbe0e:	e7fc      	b.n	bbe0a <_ZN7RH_RF959availableEv+0x14>

000bbe10 <_ZN7RH_RF959setModeTxEv>:
{
   bbe10:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbe12:	7903      	ldrb	r3, [r0, #4]
   bbe14:	2b03      	cmp	r3, #3
{
   bbe16:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbe18:	d010      	beq.n	bbe3c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbe1a:	6803      	ldr	r3, [r0, #0]
   bbe1c:	2103      	movs	r1, #3
   bbe1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbe22:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbe24:	2203      	movs	r2, #3
   bbe26:	2101      	movs	r1, #1
   bbe28:	4620      	mov	r0, r4
   bbe2a:	f7ff fd92 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbe2e:	2240      	movs	r2, #64	; 0x40
   bbe30:	4611      	mov	r1, r2
   bbe32:	4620      	mov	r0, r4
   bbe34:	f7ff fd8d 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbe38:	2303      	movs	r3, #3
   bbe3a:	7123      	strb	r3, [r4, #4]
}
   bbe3c:	bd10      	pop	{r4, pc}

000bbe3e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbe3e:	2afb      	cmp	r2, #251	; 0xfb
{
   bbe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe42:	4604      	mov	r4, r0
   bbe44:	460f      	mov	r7, r1
   bbe46:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbe48:	d902      	bls.n	bbe50 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbe4a:	2600      	movs	r6, #0
}
   bbe4c:	4630      	mov	r0, r6
   bbe4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbe50:	6803      	ldr	r3, [r0, #0]
   bbe52:	6a1b      	ldr	r3, [r3, #32]
   bbe54:	4798      	blx	r3
    setModeIdle();
   bbe56:	4620      	mov	r0, r4
   bbe58:	f7ff fef8 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbe5c:	6823      	ldr	r3, [r4, #0]
   bbe5e:	4620      	mov	r0, r4
   bbe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbe62:	4798      	blx	r3
   bbe64:	4606      	mov	r6, r0
   bbe66:	2800      	cmp	r0, #0
   bbe68:	d0ef      	beq.n	bbe4a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbe6a:	2200      	movs	r2, #0
   bbe6c:	210d      	movs	r1, #13
   bbe6e:	4620      	mov	r0, r4
   bbe70:	f7ff fd6f 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbe74:	7ae2      	ldrb	r2, [r4, #11]
   bbe76:	2100      	movs	r1, #0
   bbe78:	4620      	mov	r0, r4
   bbe7a:	f7ff fd6a 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bbe7e:	7b22      	ldrb	r2, [r4, #12]
   bbe80:	2100      	movs	r1, #0
   bbe82:	4620      	mov	r0, r4
   bbe84:	f7ff fd65 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bbe88:	7b62      	ldrb	r2, [r4, #13]
   bbe8a:	2100      	movs	r1, #0
   bbe8c:	4620      	mov	r0, r4
   bbe8e:	f7ff fd60 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bbe92:	7ba2      	ldrb	r2, [r4, #14]
   bbe94:	2100      	movs	r1, #0
   bbe96:	4620      	mov	r0, r4
   bbe98:	f7ff fd5b 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bbe9c:	462b      	mov	r3, r5
   bbe9e:	463a      	mov	r2, r7
   bbea0:	2100      	movs	r1, #0
   bbea2:	4620      	mov	r0, r4
   bbea4:	f7ff fda3 	bl	bb9ee <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bbea8:	1d2a      	adds	r2, r5, #4
   bbeaa:	b2d2      	uxtb	r2, r2
   bbeac:	2122      	movs	r1, #34	; 0x22
   bbeae:	4620      	mov	r0, r4
   bbeb0:	f7ff fd4f 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	f7ff ffab 	bl	bbe10 <_ZN7RH_RF959setModeTxEv>
    return true;
   bbeba:	e7c7      	b.n	bbe4c <_ZN7RH_RF954sendEPKhh+0xe>

000bbebc <_ZN7RH_RF9510setTxPowerEab>:
{
   bbebc:	b510      	push	{r4, lr}
   bbebe:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bbec0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bbec4:	b172      	cbz	r2, bbee4 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bbec6:	f381 0204 	usat	r2, #4, r1
   bbeca:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bbece:	b2d2      	uxtb	r2, r2
   bbed0:	2109      	movs	r1, #9
   bbed2:	f7ff fd3e 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbed6:	4620      	mov	r0, r4
   bbed8:	2204      	movs	r2, #4
}
   bbeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbede:	214d      	movs	r1, #77	; 0x4d
   bbee0:	f7ff bd37 	b.w	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
}
   bbee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbee8:	f7ff be0a 	b.w	bbb00 <_ZN7RH_RF9510setTxPowerEab.part.0>

000bbeec <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bbeec:	b538      	push	{r3, r4, r5, lr}
   bbeee:	460c      	mov	r4, r1
   bbef0:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bbef2:	780a      	ldrb	r2, [r1, #0]
   bbef4:	211d      	movs	r1, #29
   bbef6:	f7ff fd2c 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bbefa:	7862      	ldrb	r2, [r4, #1]
   bbefc:	211e      	movs	r1, #30
   bbefe:	4628      	mov	r0, r5
   bbf00:	f7ff fd27 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbf04:	78a2      	ldrb	r2, [r4, #2]
   bbf06:	4628      	mov	r0, r5
   bbf08:	2126      	movs	r1, #38	; 0x26
}
   bbf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbf0e:	f7ff bd20 	b.w	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bbf14 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbf14:	2905      	cmp	r1, #5
{
   bbf16:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbf18:	d80f      	bhi.n	bbf3a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbf1a:	4b09      	ldr	r3, [pc, #36]	; (bbf40 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bbf1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bbf20:	185c      	adds	r4, r3, r1
   bbf22:	5a5a      	ldrh	r2, [r3, r1]
   bbf24:	78a3      	ldrb	r3, [r4, #2]
   bbf26:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bbf2a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbf2c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bbf30:	f7ff ffdc 	bl	bbeec <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bbf34:	2001      	movs	r0, #1
}
   bbf36:	b002      	add	sp, #8
   bbf38:	bd10      	pop	{r4, pc}
        return false;
   bbf3a:	2000      	movs	r0, #0
   bbf3c:	e7fb      	b.n	bbf36 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bbf3e:	bf00      	nop
   bbf40:	000c5130 	.word	0x000c5130

000bbf44 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bbf44:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbf46:	0a0a      	lsrs	r2, r1, #8
{
   bbf48:	4605      	mov	r5, r0
   bbf4a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbf4c:	2120      	movs	r1, #32
   bbf4e:	f7ff fd00 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbf52:	b2e2      	uxtb	r2, r4
   bbf54:	4628      	mov	r0, r5
   bbf56:	2121      	movs	r1, #33	; 0x21
}
   bbf58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbf5c:	f7ff bcf9 	b.w	bb952 <_ZN11RHSPIDriver8spiWriteEhh>

000bbf60 <_ZN7RH_RF954initEv>:
{
   bbf60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbf62:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bbf64:	f7ff fca4 	bl	bb8b0 <_ZN11RHSPIDriver4initEv>
   bbf68:	4606      	mov	r6, r0
   bbf6a:	b918      	cbnz	r0, bbf74 <_ZN7RH_RF954initEv+0x14>
	return false;
   bbf6c:	2600      	movs	r6, #0
}
   bbf6e:	4630      	mov	r0, r6
   bbf70:	b002      	add	sp, #8
   bbf72:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bbf74:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bbf78:	2dff      	cmp	r5, #255	; 0xff
   bbf7a:	d054      	beq.n	bc026 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bbf7c:	4629      	mov	r1, r5
   bbf7e:	4620      	mov	r0, r4
   bbf80:	f7ff fd5d 	bl	bba3e <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bbf84:	2280      	movs	r2, #128	; 0x80
   bbf86:	2101      	movs	r1, #1
   bbf88:	4620      	mov	r0, r4
   bbf8a:	f7ff fce2 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bbf8e:	200a      	movs	r0, #10
   bbf90:	f001 fa00 	bl	bd394 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bbf94:	2101      	movs	r1, #1
   bbf96:	4620      	mov	r0, r4
   bbf98:	f7ff fcba 	bl	bb910 <_ZN11RHSPIDriver7spiReadEh>
   bbf9c:	2880      	cmp	r0, #128	; 0x80
   bbf9e:	d1e5      	bne.n	bbf6c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bbfa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bbfa4:	28ff      	cmp	r0, #255	; 0xff
   bbfa6:	d01c      	beq.n	bbfe2 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bbfa8:	2100      	movs	r1, #0
   bbfaa:	f004 fa8d 	bl	c04c8 <pinMode>
	if (_myInterruptIndex == 0xff)
   bbfae:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bbfb2:	2bff      	cmp	r3, #255	; 0xff
   bbfb4:	d107      	bne.n	bbfc6 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bbfb6:	4a26      	ldr	r2, [pc, #152]	; (bc050 <_ZN7RH_RF954initEv+0xf0>)
   bbfb8:	7813      	ldrb	r3, [r2, #0]
   bbfba:	2b03      	cmp	r3, #3
   bbfbc:	d8d6      	bhi.n	bbf6c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bbfbe:	1c59      	adds	r1, r3, #1
   bbfc0:	7011      	strb	r1, [r2, #0]
   bbfc2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bbfc6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bbfca:	4b22      	ldr	r3, [pc, #136]	; (bc054 <_ZN7RH_RF954initEv+0xf4>)
   bbfcc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bbfd0:	bb62      	cbnz	r2, bc02c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bbfd2:	4921      	ldr	r1, [pc, #132]	; (bc058 <_ZN7RH_RF954initEv+0xf8>)
   bbfd4:	9200      	str	r2, [sp, #0]
   bbfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbfda:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbfdc:	b2a8      	uxth	r0, r5
   bbfde:	f001 ff59 	bl	bde94 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bbfe2:	2200      	movs	r2, #0
   bbfe4:	210e      	movs	r1, #14
   bbfe6:	4620      	mov	r0, r4
   bbfe8:	f7ff fcb3 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bbfec:	2200      	movs	r2, #0
   bbfee:	210f      	movs	r1, #15
   bbff0:	4620      	mov	r0, r4
   bbff2:	f7ff fcae 	bl	bb952 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bbff6:	4620      	mov	r0, r4
   bbff8:	f7ff fe28 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bbffc:	2100      	movs	r1, #0
   bbffe:	4620      	mov	r0, r4
   bc000:	f7ff ff88 	bl	bbf14 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bc004:	2108      	movs	r1, #8
   bc006:	4620      	mov	r0, r4
   bc008:	f7ff ff9c 	bl	bbf44 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bc00c:	ed9f 0a13 	vldr	s0, [pc, #76]	; bc05c <_ZN7RH_RF954initEv+0xfc>
   bc010:	4620      	mov	r0, r4
   bc012:	f7ff fdd9 	bl	bbbc8 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bc016:	2300      	movs	r3, #0
   bc018:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bc01c:	210d      	movs	r1, #13
   bc01e:	4620      	mov	r0, r4
   bc020:	f7ff fd6e 	bl	bbb00 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bc024:	e7a3      	b.n	bbf6e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bc026:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bc02a:	e7ab      	b.n	bbf84 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bc02c:	2a01      	cmp	r2, #1
   bc02e:	f04f 0300 	mov.w	r3, #0
   bc032:	d104      	bne.n	bc03e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bc034:	9300      	str	r3, [sp, #0]
   bc036:	490a      	ldr	r1, [pc, #40]	; (bc060 <_ZN7RH_RF954initEv+0x100>)
   bc038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc03c:	e7ce      	b.n	bbfdc <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bc03e:	2a02      	cmp	r2, #2
   bc040:	d194      	bne.n	bbf6c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc042:	9300      	str	r3, [sp, #0]
   bc044:	4907      	ldr	r1, [pc, #28]	; (bc064 <_ZN7RH_RF954initEv+0x104>)
   bc046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc04a:	2201      	movs	r2, #1
   bc04c:	e7c6      	b.n	bbfdc <_ZN7RH_RF954initEv+0x7c>
   bc04e:	bf00      	nop
   bc050:	2003e5f5 	.word	0x2003e5f5
   bc054:	2003e5f8 	.word	0x2003e5f8
   bc058:	000bbd99 	.word	0x000bbd99
   bc05c:	43d90000 	.word	0x43d90000
   bc060:	000bbda9 	.word	0x000bbda9
   bc064:	000bbdb9 	.word	0x000bbdb9

000bc068 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bc068:	2001      	movs	r0, #1
   bc06a:	4770      	bx	lr

000bc06c <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bc06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc06e:	4d1f      	ldr	r5, [pc, #124]	; (bc0ec <_ZN14SequentialFileC1Ev+0x80>)
   bc070:	4b1f      	ldr	r3, [pc, #124]	; (bc0f0 <_ZN14SequentialFileC1Ev+0x84>)
   bc072:	4604      	mov	r4, r0
   bc074:	4629      	mov	r1, r5
   bc076:	f840 3b04 	str.w	r3, [r0], #4
   bc07a:	f003 fcb0 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc07e:	491d      	ldr	r1, [pc, #116]	; (bc0f4 <_ZN14SequentialFileC1Ev+0x88>)
   bc080:	f104 0014 	add.w	r0, r4, #20
   bc084:	f003 fcab 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc088:	4629      	mov	r1, r5
   bc08a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc08e:	f003 fca6 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc092:	2300      	movs	r3, #0
   bc094:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bc098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bc09c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bc0a0:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bc0a4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bc0a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bc0ac:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bc0ae:	2308      	movs	r3, #8
   bc0b0:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc0b2:	2020      	movs	r0, #32
   bc0b4:	f7f7 ffef 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc0b8:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bc0ba:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc0bc:	3d01      	subs	r5, #1
   bc0be:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bc0c0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bc0c4:	4606      	mov	r6, r0
   bc0c6:	f44f 7000 	mov.w	r0, #512	; 0x200
   bc0ca:	f7f7 ffe4 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc0ce:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bc0d2:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bc0d6:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bc0da:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bc0dc:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bc0de:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bc0e0:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc0e2:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bc0e4:	6667      	str	r7, [r4, #100]	; 0x64

}
   bc0e6:	4620      	mov	r0, r4
   bc0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc0ea:	bf00      	nop
   bc0ec:	000c54f8 	.word	0x000c54f8
   bc0f0:	000c52cc 	.word	0x000c52cc
   bc0f4:	000c51cc 	.word	0x000c51cc

000bc0f8 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc0f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bc0fa:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc0fc:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bc0fe:	4628      	mov	r0, r5
   bc100:	f003 fccb 	bl	bfa9a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bc104:	490e      	ldr	r1, [pc, #56]	; (bc140 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bc106:	4668      	mov	r0, sp
   bc108:	f003 fc69 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc10c:	4669      	mov	r1, sp
   bc10e:	4628      	mov	r0, r5
   bc110:	f003 fd3d 	bl	bfb8e <_ZNK6String8endsWithERKS_>
   bc114:	4606      	mov	r6, r0
   bc116:	4668      	mov	r0, sp
   bc118:	f003 fc16 	bl	bf948 <_ZN6StringD1Ev>
   bc11c:	b16e      	cbz	r6, bc13a <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bc11e:	68e3      	ldr	r3, [r4, #12]
   bc120:	2200      	movs	r2, #0
   bc122:	3b01      	subs	r3, #1
   bc124:	4629      	mov	r1, r5
   bc126:	4668      	mov	r0, sp
   bc128:	f003 fd54 	bl	bfbd4 <_ZNK6String9substringEjj>
   bc12c:	4669      	mov	r1, sp
   bc12e:	4628      	mov	r0, r5
   bc130:	f003 fcab 	bl	bfa8a <_ZN6StringaSEOS_>
   bc134:	4668      	mov	r0, sp
   bc136:	f003 fc07 	bl	bf948 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bc13a:	4620      	mov	r0, r4
   bc13c:	b004      	add	sp, #16
   bc13e:	bd70      	pop	{r4, r5, r6, pc}
   bc140:	000c51d1 	.word	0x000c51d1

000bc144 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bc144:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bc146:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bc148:	4604      	mov	r4, r0
    if (!queueMutex) {
   bc14a:	b913      	cbnz	r3, bc152 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bc14c:	303c      	adds	r0, #60	; 0x3c
   bc14e:	f000 fc9d 	bl	bca8c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bc152:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bc154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bc158:	f000 bca0 	b.w	bca9c <os_mutex_lock>

000bc15c <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bc15c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bc15e:	f000 bca5 	b.w	bcaac <os_mutex_unlock>
	...

000bc164 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc164:	b510      	push	{r4, lr}
   bc166:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bc168:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc16a:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bc16c:	f000 fe56 	bl	bce1c <stat>
    if (result == 0) {
   bc170:	b9d0      	cbnz	r0, bc1a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc172:	9b01      	ldr	r3, [sp, #4]
   bc174:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bc176:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc178:	d506      	bpl.n	bc188 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bc17a:	4915      	ldr	r1, [pc, #84]	; (bc1d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bc17c:	4815      	ldr	r0, [pc, #84]	; (bc1d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc17e:	f7f7 ffde 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bc182:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bc184:	b016      	add	sp, #88	; 0x58
   bc186:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bc188:	4812      	ldr	r0, [pc, #72]	; (bc1d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc18a:	4913      	ldr	r1, [pc, #76]	; (bc1d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bc18c:	f7fb fbfc 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bc190:	4620      	mov	r0, r4
   bc192:	f006 f8db 	bl	c234c <unlink>
    result = mkdir(path, 0777);
   bc196:	f240 11ff 	movw	r1, #511	; 0x1ff
   bc19a:	4620      	mov	r0, r4
   bc19c:	f000 fe46 	bl	bce2c <mkdir>
    if (result == 0) {
   bc1a0:	b980      	cbnz	r0, bc1c4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bc1a2:	490e      	ldr	r1, [pc, #56]	; (bc1dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bc1a4:	4622      	mov	r2, r4
   bc1a6:	e7e9      	b.n	bc17c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bc1a8:	f001 f8bc 	bl	bd324 <__errno>
   bc1ac:	6803      	ldr	r3, [r0, #0]
   bc1ae:	2b02      	cmp	r3, #2
   bc1b0:	d0f1      	beq.n	bc196 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bc1b2:	f001 f8b7 	bl	bd324 <__errno>
   bc1b6:	490a      	ldr	r1, [pc, #40]	; (bc1e0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bc1b8:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bc1ba:	4806      	ldr	r0, [pc, #24]	; (bc1d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc1bc:	f7fb fbe4 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc1c0:	2000      	movs	r0, #0
   bc1c2:	e7df      	b.n	bc184 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bc1c4:	f001 f8ae 	bl	bd324 <__errno>
   bc1c8:	4906      	ldr	r1, [pc, #24]	; (bc1e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bc1ca:	6802      	ldr	r2, [r0, #0]
   bc1cc:	e7f5      	b.n	bc1ba <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bc1ce:	bf00      	nop
   bc1d0:	000c51de 	.word	0x000c51de
   bc1d4:	2003e604 	.word	0x2003e604
   bc1d8:	000c51fb 	.word	0x000c51fb
   bc1dc:	000c522c 	.word	0x000c522c
   bc1e0:	000c5218 	.word	0x000c5218
   bc1e4:	000c523b 	.word	0x000c523b

000bc1e8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bc1e8:	b538      	push	{r3, r4, r5, lr}
   bc1ea:	4615      	mov	r5, r2
   bc1ec:	4604      	mov	r4, r0
    String result = name;
   bc1ee:	f003 fbf6 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bc1f2:	b14d      	cbz	r5, bc208 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bc1f4:	782b      	ldrb	r3, [r5, #0]
   bc1f6:	b13b      	cbz	r3, bc208 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bc1f8:	4904      	ldr	r1, [pc, #16]	; (bc20c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bc1fa:	4620      	mov	r0, r4
   bc1fc:	f003 fc76 	bl	bfaec <_ZN6String6concatEPKc>
   bc200:	4629      	mov	r1, r5
   bc202:	4620      	mov	r0, r4
   bc204:	f003 fc72 	bl	bfaec <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bc208:	4620      	mov	r0, r4
   bc20a:	bd38      	pop	{r3, r4, r5, pc}
   bc20c:	000c55fc 	.word	0x000c55fc

000bc210 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bc210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc212:	4605      	mov	r5, r0
   bc214:	460e      	mov	r6, r1
   bc216:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bc218:	6949      	ldr	r1, [r1, #20]
   bc21a:	4668      	mov	r0, sp
   bc21c:	f003 fcfa 	bl	bfc14 <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bc220:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bc222:	b904      	cbnz	r4, bc226 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bc224:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc226:	4622      	mov	r2, r4
   bc228:	4628      	mov	r0, r5
   bc22a:	f7ff ffdd 	bl	bc1e8 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bc22e:	4668      	mov	r0, sp
   bc230:	f003 fb8a 	bl	bf948 <_ZN6StringD1Ev>
}
   bc234:	4628      	mov	r0, r5
   bc236:	b004      	add	sp, #16
   bc238:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc23c <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc23c:	b570      	push	{r4, r5, r6, lr}
   bc23e:	460c      	mov	r4, r1
   bc240:	b08e      	sub	sp, #56	; 0x38
    String result;
   bc242:	491a      	ldr	r1, [pc, #104]	; (bc2ac <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc244:	e9cd 3200 	strd	r3, r2, [sp]
   bc248:	4605      	mov	r5, r0
    String result;
   bc24a:	f003 fbc8 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bc24e:	68e0      	ldr	r0, [r4, #12]
   bc250:	69e1      	ldr	r1, [r4, #28]
   bc252:	4401      	add	r1, r0
   bc254:	3104      	adds	r1, #4
   bc256:	4628      	mov	r0, r5
   bc258:	f003 fb94 	bl	bf984 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bc25c:	1d21      	adds	r1, r4, #4
   bc25e:	a806      	add	r0, sp, #24
   bc260:	f003 fc08 	bl	bfa74 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bc264:	4912      	ldr	r1, [pc, #72]	; (bc2b0 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bc266:	a802      	add	r0, sp, #8
   bc268:	f003 fbb9 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc26c:	a902      	add	r1, sp, #8
   bc26e:	a806      	add	r0, sp, #24
   bc270:	f003 fc5a 	bl	bfb28 <_ZplRK15StringSumHelperRK6String>
   bc274:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc278:	4606      	mov	r6, r0
   bc27a:	4621      	mov	r1, r4
   bc27c:	a80a      	add	r0, sp, #40	; 0x28
   bc27e:	f7ff ffc7 	bl	bc210 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bc282:	a90a      	add	r1, sp, #40	; 0x28
   bc284:	4630      	mov	r0, r6
   bc286:	f003 fc4f 	bl	bfb28 <_ZplRK15StringSumHelperRK6String>
   bc28a:	4601      	mov	r1, r0
   bc28c:	4628      	mov	r0, r5
   bc28e:	f003 fbe2 	bl	bfa56 <_ZN6StringaSERKS_>
   bc292:	a80a      	add	r0, sp, #40	; 0x28
   bc294:	f003 fb58 	bl	bf948 <_ZN6StringD1Ev>
   bc298:	a802      	add	r0, sp, #8
   bc29a:	f003 fb55 	bl	bf948 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc29e:	a806      	add	r0, sp, #24
   bc2a0:	f003 fb52 	bl	bf948 <_ZN6StringD1Ev>
}
   bc2a4:	4628      	mov	r0, r5
   bc2a6:	b00e      	add	sp, #56	; 0x38
   bc2a8:	bd70      	pop	{r4, r5, r6, pc}
   bc2aa:	bf00      	nop
   bc2ac:	000c54f8 	.word	0x000c54f8
   bc2b0:	000c51d1 	.word	0x000c51d1

000bc2b4 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc2b8:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc2ba:	b08e      	sub	sp, #56	; 0x38
   bc2bc:	4605      	mov	r5, r0
   bc2be:	460f      	mov	r7, r1
    if (allExtensions) {
   bc2c0:	2a00      	cmp	r2, #0
   bc2c2:	d04a      	beq.n	bc35a <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc2c4:	6840      	ldr	r0, [r0, #4]
   bc2c6:	f000 fdc1 	bl	bce4c <opendir>
        if (dir) {
   bc2ca:	4606      	mov	r6, r0
   bc2cc:	2800      	cmp	r0, #0
   bc2ce:	d054      	beq.n	bc37a <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc2d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc388 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc2d4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc384 <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc2d8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc380 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc2dc:	4630      	mov	r0, r6
   bc2de:	f000 fdbd 	bl	bce5c <readdir>
                if (!ent) {
   bc2e2:	2800      	cmp	r0, #0
   bc2e4:	d033      	beq.n	bc34e <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc2e6:	7a82      	ldrb	r2, [r0, #10]
   bc2e8:	2a08      	cmp	r2, #8
   bc2ea:	d1f7      	bne.n	bc2dc <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc2ec:	f100 040b 	add.w	r4, r0, #11
   bc2f0:	6969      	ldr	r1, [r5, #20]
   bc2f2:	aa01      	add	r2, sp, #4
   bc2f4:	4620      	mov	r0, r4
   bc2f6:	f000 ffed 	bl	bd2d4 <sscanf>
   bc2fa:	2801      	cmp	r0, #1
   bc2fc:	d1ee      	bne.n	bc2dc <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc2fe:	9b01      	ldr	r3, [sp, #4]
   bc300:	42bb      	cmp	r3, r7
   bc302:	d1eb      	bne.n	bc2dc <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc304:	1d29      	adds	r1, r5, #4
   bc306:	a80a      	add	r0, sp, #40	; 0x28
   bc308:	f003 fbb4 	bl	bfa74 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc30c:	4651      	mov	r1, sl
   bc30e:	a806      	add	r0, sp, #24
   bc310:	f003 fb65 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc314:	a906      	add	r1, sp, #24
   bc316:	a80a      	add	r0, sp, #40	; 0x28
   bc318:	f003 fc06 	bl	bfb28 <_ZplRK15StringSumHelperRK6String>
   bc31c:	4621      	mov	r1, r4
   bc31e:	f003 fc0f 	bl	bfb40 <_ZplRK15StringSumHelperPKc>
   bc322:	4601      	mov	r1, r0
   bc324:	a802      	add	r0, sp, #8
   bc326:	f003 fba5 	bl	bfa74 <_ZN6StringC1ERKS_>
   bc32a:	a806      	add	r0, sp, #24
   bc32c:	f003 fb0c 	bl	bf948 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc330:	a80a      	add	r0, sp, #40	; 0x28
   bc332:	f003 fb09 	bl	bf948 <_ZN6StringD1Ev>
                        unlink(path);
   bc336:	9802      	ldr	r0, [sp, #8]
   bc338:	f006 f808 	bl	c234c <unlink>
                        _log.trace("removed %s", path.c_str());
   bc33c:	4640      	mov	r0, r8
   bc33e:	9a02      	ldr	r2, [sp, #8]
   bc340:	4649      	mov	r1, r9
   bc342:	f7fb fb2f 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc346:	a802      	add	r0, sp, #8
   bc348:	f003 fafe 	bl	bf948 <_ZN6StringD1Ev>
                    continue;
   bc34c:	e7c6      	b.n	bc2dc <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc34e:	4630      	mov	r0, r6
}
   bc350:	b00e      	add	sp, #56	; 0x38
   bc352:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc356:	f000 bd89 	b.w	bce6c <closedir>
        String path = getPathForFileNum(fileNum); 
   bc35a:	460a      	mov	r2, r1
   bc35c:	4601      	mov	r1, r0
   bc35e:	a80a      	add	r0, sp, #40	; 0x28
   bc360:	f7ff ff6c 	bl	bc23c <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc364:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc366:	f005 fff1 	bl	c234c <unlink>
        _log.trace("removed %s", path.c_str());
   bc36a:	4805      	ldr	r0, [pc, #20]	; (bc380 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc36e:	4905      	ldr	r1, [pc, #20]	; (bc384 <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc370:	f7fb fb18 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc374:	a80a      	add	r0, sp, #40	; 0x28
   bc376:	f003 fae7 	bl	bf948 <_ZN6StringD1Ev>
}
   bc37a:	b00e      	add	sp, #56	; 0x38
   bc37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc380:	2003e604 	.word	0x2003e604
   bc384:	000c51d3 	.word	0x000c51d3
   bc388:	000c51d1 	.word	0x000c51d1

000bc38c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc38c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc38e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc390:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc392:	b183      	cbz	r3, bc3b6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc394:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc396:	6945      	ldr	r5, [r0, #20]
   bc398:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc39a:	42ae      	cmp	r6, r5
   bc39c:	d906      	bls.n	bc3ac <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc39e:	f855 0b04 	ldr.w	r0, [r5], #4
   bc3a2:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc3a6:	f7f7 fe7a 	bl	b409e <_ZdlPvj>
   bc3aa:	e7f6      	b.n	bc39a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc3ac:	6861      	ldr	r1, [r4, #4]
   bc3ae:	6820      	ldr	r0, [r4, #0]
   bc3b0:	0089      	lsls	r1, r1, #2
   bc3b2:	f7f7 fe74 	bl	b409e <_ZdlPvj>
    }
   bc3b6:	4620      	mov	r0, r4
   bc3b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc3bc <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc3bc:	b510      	push	{r4, lr}
   bc3be:	4b09      	ldr	r3, [pc, #36]	; (bc3e4 <_ZN14SequentialFileD1Ev+0x28>)
   bc3c0:	4604      	mov	r4, r0
   bc3c2:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc3c6:	f7ff ffe1 	bl	bc38c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc3ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc3ce:	f003 fabb 	bl	bf948 <_ZN6StringD1Ev>
   bc3d2:	f104 0014 	add.w	r0, r4, #20
   bc3d6:	f003 fab7 	bl	bf948 <_ZN6StringD1Ev>
   bc3da:	1d20      	adds	r0, r4, #4
   bc3dc:	f003 fab4 	bl	bf948 <_ZN6StringD1Ev>
}
   bc3e0:	4620      	mov	r0, r4
   bc3e2:	bd10      	pop	{r4, pc}
   bc3e4:	000c52cc 	.word	0x000c52cc

000bc3e8 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc3e8:	b510      	push	{r4, lr}
   bc3ea:	4604      	mov	r4, r0
}
   bc3ec:	f7ff ffe6 	bl	bc3bc <_ZN14SequentialFileD1Ev>
   bc3f0:	4620      	mov	r0, r4
   bc3f2:	2168      	movs	r1, #104	; 0x68
   bc3f4:	f7f7 fe53 	bl	b409e <_ZdlPvj>
   bc3f8:	4620      	mov	r0, r4
   bc3fa:	bd10      	pop	{r4, pc}

000bc3fc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc3fc:	68c3      	ldr	r3, [r0, #12]
   bc3fe:	68ca      	ldr	r2, [r1, #12]
   bc400:	1a9b      	subs	r3, r3, r2
   bc402:	109b      	asrs	r3, r3, #2
   bc404:	1e5a      	subs	r2, r3, #1
   bc406:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc40a:	1a1b      	subs	r3, r3, r0
   bc40c:	109b      	asrs	r3, r3, #2
   bc40e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc412:	6888      	ldr	r0, [r1, #8]
   bc414:	680a      	ldr	r2, [r1, #0]
   bc416:	1a80      	subs	r0, r0, r2
      }
   bc418:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc41c:	4770      	bx	lr
	...

000bc420 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc424:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc426:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc428:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc42a:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc42c:	4604      	mov	r4, r0
   bc42e:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc430:	d007      	beq.n	bc442 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc432:	b10b      	cbz	r3, bc438 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc434:	680a      	ldr	r2, [r1, #0]
   bc436:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc438:	69a3      	ldr	r3, [r4, #24]
   bc43a:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc43c:	61a3      	str	r3, [r4, #24]
      }
   bc43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc442:	f100 0108 	add.w	r1, r0, #8
   bc446:	3018      	adds	r0, #24
   bc448:	f7ff ffd8 	bl	bc3fc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc44c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc450:	4298      	cmp	r0, r3
   bc452:	d102      	bne.n	bc45a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc454:	4838      	ldr	r0, [pc, #224]	; (bc538 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc456:	f004 f950 	bl	c06fa <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc45a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc45c:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc45e:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc460:	1a11      	subs	r1, r2, r0
   bc462:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc466:	2901      	cmp	r1, #1
   bc468:	d825      	bhi.n	bc4b6 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc46a:	6961      	ldr	r1, [r4, #20]
   bc46c:	eba2 0801 	sub.w	r8, r2, r1
   bc470:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc474:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc476:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc47a:	d936      	bls.n	bc4ea <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc47c:	1b5d      	subs	r5, r3, r5
   bc47e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc480:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc484:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc486:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc488:	eba3 0201 	sub.w	r2, r3, r1
   bc48c:	d926      	bls.n	bc4dc <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc48e:	428b      	cmp	r3, r1
   bc490:	d002      	beq.n	bc498 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc492:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc494:	f004 fec2 	bl	c121c <memmove>
	_M_node = __new_node;
   bc498:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc49a:	682b      	ldr	r3, [r5, #0]
   bc49c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc49e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc4a2:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc4a4:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc4a8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc4aa:	f855 3008 	ldr.w	r3, [r5, r8]
   bc4ae:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc4b4:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc4b6:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc4ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc4bc:	f7f7 fdeb 	bl	b4096 <_Znwj>
   bc4c0:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc4c2:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc4c4:	b10b      	cbz	r3, bc4ca <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc4c6:	683a      	ldr	r2, [r7, #0]
   bc4c8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc4cc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc4ce:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc4d0:	685b      	ldr	r3, [r3, #4]
   bc4d2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4d4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc4d8:	6222      	str	r2, [r4, #32]
   bc4da:	e7af      	b.n	bc43c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc4dc:	428b      	cmp	r3, r1
   bc4de:	d0db      	beq.n	bc498 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc4e0:	f108 0004 	add.w	r0, r8, #4
   bc4e4:	1a80      	subs	r0, r0, r2
   bc4e6:	4428      	add	r0, r5
   bc4e8:	e7d4      	b.n	bc494 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc4ea:	f103 0902 	add.w	r9, r3, #2
   bc4ee:	2b01      	cmp	r3, #1
   bc4f0:	bf2c      	ite	cs
   bc4f2:	4499      	addcs	r9, r3
   bc4f4:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc4f8:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc4fc:	d301      	bcc.n	bc502 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc4fe:	f004 f8f9 	bl	c06f4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc502:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc506:	f7f7 fdc6 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc50a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc50c:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc50e:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc512:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc514:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc516:	4291      	cmp	r1, r2
   bc518:	4682      	mov	sl, r0
   bc51a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc51e:	d003      	beq.n	bc528 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc520:	1a52      	subs	r2, r2, r1
   bc522:	4628      	mov	r0, r5
   bc524:	f004 fe7a 	bl	c121c <memmove>
	::operator delete(__p
   bc528:	6861      	ldr	r1, [r4, #4]
   bc52a:	6820      	ldr	r0, [r4, #0]
   bc52c:	0089      	lsls	r1, r1, #2
   bc52e:	f7f7 fdb6 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc532:	e9c4 a900 	strd	sl, r9, [r4]
   bc536:	e7af      	b.n	bc498 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc538:	000c4e55 	.word	0x000c4e55

000bc53c <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc540:	68c3      	ldr	r3, [r0, #12]
   bc542:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc544:	b086      	sub	sp, #24
   bc546:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc548:	d808      	bhi.n	bc55c <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc54a:	4934      	ldr	r1, [pc, #208]	; (bc61c <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc54c:	4834      	ldr	r0, [pc, #208]	; (bc620 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc54e:	f7fb fa1b 	bl	b7988 <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc552:	2600      	movs	r6, #0
}
   bc554:	4630      	mov	r0, r6
   bc556:	b006      	add	sp, #24
   bc558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc55c:	6840      	ldr	r0, [r0, #4]
   bc55e:	f7ff fe01 	bl	bc164 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc562:	4606      	mov	r6, r0
   bc564:	2800      	cmp	r0, #0
   bc566:	d0f4      	beq.n	bc552 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc568:	6963      	ldr	r3, [r4, #20]
   bc56a:	6862      	ldr	r2, [r4, #4]
   bc56c:	492d      	ldr	r1, [pc, #180]	; (bc624 <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc56e:	482c      	ldr	r0, [pc, #176]	; (bc620 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc570:	f7fb fa18 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc574:	6860      	ldr	r0, [r4, #4]
   bc576:	f000 fc69 	bl	bce4c <opendir>
    if (!dir) {
   bc57a:	4607      	mov	r7, r0
   bc57c:	2800      	cmp	r0, #0
   bc57e:	d0e8      	beq.n	bc552 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc580:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc582:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc628 <_ZN14SequentialFile7scanDirEv+0xec>
   bc586:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc620 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc58a:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc58c:	4638      	mov	r0, r7
   bc58e:	f000 fc65 	bl	bce5c <readdir>
        if (!ent) {
   bc592:	4605      	mov	r5, r0
   bc594:	2800      	cmp	r0, #0
   bc596:	d039      	beq.n	bc60c <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc598:	7a83      	ldrb	r3, [r0, #10]
   bc59a:	2b08      	cmp	r3, #8
   bc59c:	d1f6      	bne.n	bc58c <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc59e:	350b      	adds	r5, #11
   bc5a0:	6961      	ldr	r1, [r4, #20]
   bc5a2:	aa01      	add	r2, sp, #4
   bc5a4:	4628      	mov	r0, r5
   bc5a6:	f000 fe95 	bl	bd2d4 <sscanf>
   bc5aa:	2801      	cmp	r0, #1
   bc5ac:	d1ee      	bne.n	bc58c <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc5ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc5b0:	b17b      	cbz	r3, bc5d2 <_ZN14SequentialFile7scanDirEv+0x96>
   bc5b2:	4629      	mov	r1, r5
   bc5b4:	a802      	add	r0, sp, #8
   bc5b6:	f003 fa12 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
   bc5ba:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc5be:	a802      	add	r0, sp, #8
   bc5c0:	f003 fae5 	bl	bfb8e <_ZNK6String8endsWithERKS_>
   bc5c4:	4682      	mov	sl, r0
   bc5c6:	a802      	add	r0, sp, #8
   bc5c8:	f003 f9be 	bl	bf948 <_ZN6StringD1Ev>
   bc5cc:	f1ba 0f00 	cmp.w	sl, #0
   bc5d0:	d0dc      	beq.n	bc58c <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc5d2:	6823      	ldr	r3, [r4, #0]
   bc5d4:	4629      	mov	r1, r5
   bc5d6:	689b      	ldr	r3, [r3, #8]
   bc5d8:	4620      	mov	r0, r4
   bc5da:	4798      	blx	r3
   bc5dc:	2800      	cmp	r0, #0
   bc5de:	d0d5      	beq.n	bc58c <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc5e0:	9a01      	ldr	r2, [sp, #4]
   bc5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc5e4:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc5e6:	bfb8      	it	lt
   bc5e8:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc5ea:	462b      	mov	r3, r5
   bc5ec:	4649      	mov	r1, r9
   bc5ee:	4640      	mov	r0, r8
   bc5f0:	f7fb f9d8 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc5f4:	4620      	mov	r0, r4
   bc5f6:	f7ff fda5 	bl	bc144 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc5fa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc5fe:	a901      	add	r1, sp, #4
   bc600:	f7ff ff0e 	bl	bc420 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc604:	4620      	mov	r0, r4
   bc606:	f7ff fda9 	bl	bc15c <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc60a:	e7bf      	b.n	bc58c <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc60c:	4638      	mov	r0, r7
   bc60e:	f000 fc2d 	bl	bce6c <closedir>
    scanDirCompleted = true;
   bc612:	2301      	movs	r3, #1
   bc614:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc618:	e79c      	b.n	bc554 <_ZN14SequentialFile7scanDirEv+0x18>
   bc61a:	bf00      	nop
   bc61c:	000c5251 	.word	0x000c5251
   bc620:	2003e604 	.word	0x2003e604
   bc624:	000c5266 	.word	0x000c5266
   bc628:	000c5282 	.word	0x000c5282

000bc62c <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc62c:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc62e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc632:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc634:	b90b      	cbnz	r3, bc63a <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc636:	f7ff ff81 	bl	bc53c <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc63a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc63c:	3001      	adds	r0, #1
   bc63e:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc640:	bd10      	pop	{r4, pc}
	...

000bc644 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc644:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc646:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc64a:	4604      	mov	r4, r0
   bc64c:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc64e:	b90b      	cbnz	r3, bc654 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc650:	f7ff ff74 	bl	bc53c <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc654:	4620      	mov	r0, r4
   bc656:	f7ff fd75 	bl	bc144 <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc65a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc65c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc65e:	429a      	cmp	r2, r3
   bc660:	d020      	beq.n	bc6a4 <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc662:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc666:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc668:	b126      	cbz	r6, bc674 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc66a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc66c:	4293      	cmp	r3, r2
   bc66e:	d00c      	beq.n	bc68a <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc670:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc672:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc674:	4620      	mov	r0, r4
   bc676:	f7ff fd71 	bl	bc15c <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc67a:	b125      	cbz	r5, bc686 <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc67c:	490a      	ldr	r1, [pc, #40]	; (bc6a8 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc67e:	480b      	ldr	r0, [pc, #44]	; (bc6ac <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc680:	462a      	mov	r2, r5
   bc682:	f7fb f98f 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
}
   bc686:	4628      	mov	r0, r5
   bc688:	bd70      	pop	{r4, r5, r6, pc}
   bc68a:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc68e:	f7f7 fd06 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc692:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc694:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc696:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc698:	685b      	ldr	r3, [r3, #4]
   bc69a:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc69c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc6a0:	6522      	str	r2, [r4, #80]	; 0x50
   bc6a2:	e7e6      	b.n	bc672 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc6a4:	2500      	movs	r5, #0
   bc6a6:	e7e5      	b.n	bc674 <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc6a8:	000c5298 	.word	0x000c5298
   bc6ac:	2003e604 	.word	0x2003e604

000bc6b0 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc6b0:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc6b2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc6b6:	9101      	str	r1, [sp, #4]
   bc6b8:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc6ba:	b90b      	cbnz	r3, bc6c0 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc6bc:	f7ff ff3e 	bl	bc53c <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc6c0:	9b01      	ldr	r3, [sp, #4]
   bc6c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc6c4:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc6c6:	bfb8      	it	lt
   bc6c8:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc6ca:	4620      	mov	r0, r4
   bc6cc:	f7ff fd3a 	bl	bc144 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc6d0:	a901      	add	r1, sp, #4
   bc6d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc6d6:	f7ff fea3 	bl	bc420 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc6da:	4620      	mov	r0, r4
   bc6dc:	f7ff fd3e 	bl	bc15c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc6e0:	b002      	add	sp, #8
   bc6e2:	bd10      	pop	{r4, pc}

000bc6e4 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc6e4:	b538      	push	{r3, r4, r5, lr}
   bc6e6:	4604      	mov	r4, r0
    queueMutexLock();
   bc6e8:	f7ff fd2c 	bl	bc144 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc6ec:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc6f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc6f4:	f7ff fe82 	bl	bc3fc <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc6f8:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc6fa:	4620      	mov	r0, r4
   bc6fc:	f7ff fd2e 	bl	bc15c <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc700:	4628      	mov	r0, r5
   bc702:	bd38      	pop	{r3, r4, r5, pc}

000bc704 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc704:	4b01      	ldr	r3, [pc, #4]	; (bc70c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc706:	4a02      	ldr	r2, [pc, #8]	; (bc710 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc708:	601a      	str	r2, [r3, #0]
}
   bc70a:	4770      	bx	lr
   bc70c:	2003e604 	.word	0x2003e604
   bc710:	000c52b5 	.word	0x000c52b5

000bc714 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc714:	6803      	ldr	r3, [r0, #0]
   bc716:	685b      	ldr	r3, [r3, #4]
   bc718:	4718      	bx	r3

000bc71a <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc71a:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc71c:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc71e:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc720:	b133      	cbz	r3, bc730 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc722:	b131      	cbz	r1, bc732 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc724:	6823      	ldr	r3, [r4, #0]
   bc726:	4620      	mov	r0, r4
   bc728:	689b      	ldr	r3, [r3, #8]
   bc72a:	4798      	blx	r3
            lastUpdate = 0;
   bc72c:	2300      	movs	r3, #0
   bc72e:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc730:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc732:	f000 fa13 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc736:	69a3      	ldr	r3, [r4, #24]
   bc738:	1ac0      	subs	r0, r0, r3
   bc73a:	69e3      	ldr	r3, [r4, #28]
   bc73c:	4298      	cmp	r0, r3
   bc73e:	d2f1      	bcs.n	bc724 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc740:	e7f6      	b.n	bc730 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc742 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc742:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc744:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc746:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc748:	b11b      	cbz	r3, bc752 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc74a:	f000 fa07 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc74e:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc750:	bd10      	pop	{r4, pc}
        save();
   bc752:	6803      	ldr	r3, [r0, #0]
}
   bc754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc758:	689b      	ldr	r3, [r3, #8]
   bc75a:	4718      	bx	r3

000bc75c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   bc75c:	f000 b9c6 	b.w	bcaec <os_mutex_recursive_unlock>

000bc760 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   bc760:	b507      	push	{r0, r1, r2, lr}
   bc762:	4613      	mov	r3, r2
    if (data) {
   bc764:	b139      	cbz	r1, bc776 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   bc766:	2200      	movs	r2, #0
   bc768:	e9cd 2200 	strd	r2, r2, [sp]
   bc76c:	460a      	mov	r2, r1
   bc76e:	6801      	ldr	r1, [r0, #0]
   bc770:	201e      	movs	r0, #30
   bc772:	f000 fc3b 	bl	bcfec <log_dump>
}
   bc776:	b003      	add	sp, #12
   bc778:	f85d fb04 	ldr.w	pc, [sp], #4

000bc77c <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   bc77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   bc77e:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   bc782:	4604      	mov	r4, r0
    if (logData) {
   bc784:	b19b      	cbz	r3, bc7ae <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   bc786:	6883      	ldr	r3, [r0, #8]
   bc788:	4d0a      	ldr	r5, [pc, #40]	; (bc7b4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   bc78a:	88da      	ldrh	r2, [r3, #6]
   bc78c:	490a      	ldr	r1, [pc, #40]	; (bc7b8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   bc78e:	4628      	mov	r0, r5
   bc790:	f7f7 fcd5 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   bc794:	68a1      	ldr	r1, [r4, #8]
   bc796:	4628      	mov	r0, r5
   bc798:	88ca      	ldrh	r2, [r1, #6]
   bc79a:	f7ff ffe1 	bl	bc760 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   bc79e:	2300      	movs	r3, #0
   bc7a0:	9300      	str	r3, [sp, #0]
   bc7a2:	4a06      	ldr	r2, [pc, #24]	; (bc7bc <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   bc7a4:	6829      	ldr	r1, [r5, #0]
   bc7a6:	2301      	movs	r3, #1
   bc7a8:	201e      	movs	r0, #30
   bc7aa:	f000 fc17 	bl	bcfdc <log_write>
        Log.print("\n");
    }
}
   bc7ae:	b003      	add	sp, #12
   bc7b0:	bd30      	pop	{r4, r5, pc}
   bc7b2:	bf00      	nop
   bc7b4:	2003e650 	.word	0x2003e650
   bc7b8:	000c52d8 	.word	0x000c52d8
   bc7bc:	000c54f7 	.word	0x000c54f7

000bc7c0 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc7c0:	b510      	push	{r4, lr}
   bc7c2:	4604      	mov	r4, r0
   bc7c4:	3004      	adds	r0, #4
   bc7c6:	f7f9 fd49 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc7ca:	6823      	ldr	r3, [r4, #0]
   bc7cc:	68e1      	ldr	r1, [r4, #12]
   bc7ce:	695b      	ldr	r3, [r3, #20]
   bc7d0:	4620      	mov	r0, r4
   bc7d2:	4798      	blx	r3
   bc7d4:	b918      	cbnz	r0, bc7de <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc7d6:	6823      	ldr	r3, [r4, #0]
   bc7d8:	4620      	mov	r0, r4
   bc7da:	699b      	ldr	r3, [r3, #24]
   bc7dc:	4798      	blx	r3
      { _M_device.unlock(); }
   bc7de:	6860      	ldr	r0, [r4, #4]
   bc7e0:	f7ff ffbc 	bl	bc75c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc7e4:	2001      	movs	r0, #1
   bc7e6:	bd10      	pop	{r4, pc}

000bc7e8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:
bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc7ea:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc7ec:	3004      	adds	r0, #4
   bc7ee:	4614      	mov	r4, r2
   bc7f0:	460e      	mov	r6, r1
   bc7f2:	461f      	mov	r7, r3
   bc7f4:	f7f9 fd32 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1))) {
   bc7f8:	68ea      	ldr	r2, [r5, #12]
   bc7fa:	f1c4 0401 	rsb	r4, r4, #1
   bc7fe:	4414      	add	r4, r2
   bc800:	42b4      	cmp	r4, r6
   bc802:	d30a      	bcc.n	bc81a <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bc804:	68a9      	ldr	r1, [r5, #8]
            value = p; // copies string
   bc806:	4638      	mov	r0, r7
   bc808:	4431      	add	r1, r6
   bc80a:	f003 f946 	bl	bfa9a <_ZN6StringaSEPKc>
            result = true;
   bc80e:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bc810:	6868      	ldr	r0, [r5, #4]
   bc812:	f7ff ffa3 	bl	bc75c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc816:	4620      	mov	r0, r4
   bc818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bc81a:	2400      	movs	r4, #0
   bc81c:	e7f8      	b.n	bc810 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000bc820 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bc820:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc822:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bc826:	4f18      	ldr	r7, [pc, #96]	; (bc888 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bc828:	4e18      	ldr	r6, [pc, #96]	; (bc88c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bc82a:	4d19      	ldr	r5, [pc, #100]	; (bc890 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bc82c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bc82e:	42a0      	cmp	r0, r4
   bc830:	d00c      	beq.n	bc84c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bc832:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bc836:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bc838:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bc83c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bc83e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bc840:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bc844:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bc848:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bc84a:	e7f0      	b.n	bc82e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bc84c:	f001 0403 	and.w	r4, r1, #3
   bc850:	4404      	add	r4, r0
    k = 0;
   bc852:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bc854:	42a0      	cmp	r0, r4
   bc856:	d004      	beq.n	bc862 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bc858:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bc85c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bc860:	e7f8      	b.n	bc854 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bc862:	4809      	ldr	r0, [pc, #36]	; (bc888 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bc864:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bc866:	4809      	ldr	r0, [pc, #36]	; (bc88c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bc868:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bc86c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bc86e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bc870:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bc872:	4b08      	ldr	r3, [pc, #32]	; (bc894 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bc874:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bc878:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bc87a:	4b07      	ldr	r3, [pc, #28]	; (bc898 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bc87c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bc880:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bc882:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bc886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc888:	cc9e2d51 	.word	0xcc9e2d51
   bc88c:	1b873593 	.word	0x1b873593
   bc890:	e6546b64 	.word	0xe6546b64
   bc894:	85ebca6b 	.word	0x85ebca6b
   bc898:	c2b2ae35 	.word	0xc2b2ae35

000bc89c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bc89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc89e:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc8a0:	3004      	adds	r0, #4
   bc8a2:	f7f9 fcdb 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bc8a6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bc8a8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bc8aa:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bc8ac:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc8ae:	68a6      	ldr	r6, [r4, #8]
   bc8b0:	4a05      	ldr	r2, [pc, #20]	; (bc8c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bc8b2:	88f1      	ldrh	r1, [r6, #6]
   bc8b4:	4630      	mov	r0, r6
   bc8b6:	f7ff ffb3 	bl	bc820 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bc8ba:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc8bc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bc8be:	6860      	ldr	r0, [r4, #4]
   bc8c0:	f7ff ff4c 	bl	bc75c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc8c4:	4628      	mov	r0, r5
   bc8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc8c8:	851c2a3f 	.word	0x851c2a3f

000bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   bc8cc:	b570      	push	{r4, r5, r6, lr}
   bc8ce:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   bc8d0:	6885      	ldr	r5, [r0, #8]
   bc8d2:	f7ff ffe3 	bl	bc89c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc8d6:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   bc8d8:	6823      	ldr	r3, [r4, #0]
   bc8da:	4620      	mov	r0, r4
   bc8dc:	691b      	ldr	r3, [r3, #16]
}
   bc8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   bc8e2:	4718      	bx	r3

000bc8e4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bc8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc8e8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc8ea:	3004      	adds	r0, #4
   bc8ec:	4690      	mov	r8, r2
   bc8ee:	460d      	mov	r5, r1
   bc8f0:	461f      	mov	r7, r3
   bc8f2:	f7f9 fcb3 	bl	b625c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bc8f6:	68e2      	ldr	r2, [r4, #12]
   bc8f8:	f1c8 0301 	rsb	r3, r8, #1
   bc8fc:	4413      	add	r3, r2
   bc8fe:	42ab      	cmp	r3, r5
   bc900:	d319      	bcc.n	bc936 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   bc902:	4638      	mov	r0, r7
   bc904:	f004 fd6f 	bl	c13e6 <strlen>
   bc908:	4540      	cmp	r0, r8
   bc90a:	d214      	bcs.n	bc936 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   bc90c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bc90e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bc910:	4629      	mov	r1, r5
   bc912:	4638      	mov	r0, r7
   bc914:	f004 fd37 	bl	c1386 <strcmp>
   bc918:	b158      	cbz	r0, bc932 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   bc91a:	4642      	mov	r2, r8
   bc91c:	2100      	movs	r1, #0
   bc91e:	4628      	mov	r0, r5
   bc920:	f004 fc96 	bl	c1250 <memset>
                strcpy(p, value);
   bc924:	4639      	mov	r1, r7
   bc926:	4628      	mov	r0, r5
   bc928:	f004 fd37 	bl	c139a <strcpy>
                updateHash();
   bc92c:	4620      	mov	r0, r4
   bc92e:	f7ff ffcd 	bl	bc8cc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   bc932:	2501      	movs	r5, #1
   bc934:	e000      	b.n	bc938 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   bc936:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bc938:	6860      	ldr	r0, [r4, #4]
   bc93a:	f7ff ff0f 	bl	bc75c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc93e:	4628      	mov	r0, r5
   bc940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc944 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bc944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc946:	4604      	mov	r4, r0
   bc948:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   bc94a:	f7ff ffa7 	bl	bc89c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   bc94e:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   bc952:	4606      	mov	r6, r0
    if (logData) {
   bc954:	b193      	cbz	r3, bc97c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   bc956:	4f29      	ldr	r7, [pc, #164]	; (bc9fc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc958:	4929      	ldr	r1, [pc, #164]	; (bca00 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   bc95a:	462a      	mov	r2, r5
   bc95c:	4638      	mov	r0, r7
   bc95e:	f7f7 fbee 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   bc962:	68a1      	ldr	r1, [r4, #8]
   bc964:	462a      	mov	r2, r5
   bc966:	4638      	mov	r0, r7
   bc968:	f7ff fefa 	bl	bc760 <_ZNK5spark6Logger4dumpEPKvj>
   bc96c:	2300      	movs	r3, #0
   bc96e:	9300      	str	r3, [sp, #0]
   bc970:	4a24      	ldr	r2, [pc, #144]	; (bca04 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   bc972:	6839      	ldr	r1, [r7, #0]
   bc974:	2301      	movs	r3, #1
   bc976:	201e      	movs	r0, #30
   bc978:	f000 fb30 	bl	bcfdc <log_write>
    if (dataSize >= 12 && 
   bc97c:	2d0b      	cmp	r5, #11
   bc97e:	d923      	bls.n	bc9c8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   bc980:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bc982:	6922      	ldr	r2, [r4, #16]
   bc984:	6819      	ldr	r1, [r3, #0]
   bc986:	4291      	cmp	r1, r2
   bc988:	d11f      	bne.n	bc9ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   bc98a:	8899      	ldrh	r1, [r3, #4]
   bc98c:	8aa2      	ldrh	r2, [r4, #20]
   bc98e:	4291      	cmp	r1, r2
   bc990:	d11b      	bne.n	bc9ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   bc992:	88d9      	ldrh	r1, [r3, #6]
   bc994:	b2aa      	uxth	r2, r5
   bc996:	4291      	cmp	r1, r2
   bc998:	d817      	bhi.n	bc9ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bc99a:	689a      	ldr	r2, [r3, #8]
   bc99c:	42b2      	cmp	r2, r6
   bc99e:	d114      	bne.n	bc9ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   bc9a0:	68e2      	ldr	r2, [r4, #12]
   bc9a2:	42aa      	cmp	r2, r5
   bc9a4:	d905      	bls.n	bc9b2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   bc9a6:	2100      	movs	r1, #0
   bc9a8:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bc9aa:	68e2      	ldr	r2, [r4, #12]
   bc9ac:	3501      	adds	r5, #1
   bc9ae:	42aa      	cmp	r2, r5
   bc9b0:	d8fa      	bhi.n	bc9a8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc9b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bc9b6:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc9b8:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bc9ba:	68a5      	ldr	r5, [r4, #8]
   bc9bc:	f7ff ff6e 	bl	bc89c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc9c0:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bc9c2:	2001      	movs	r0, #1
}
   bc9c4:	b003      	add	sp, #12
   bc9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bc9c8:	b19d      	cbz	r5, bc9f2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   bc9ca:	68a1      	ldr	r1, [r4, #8]
   bc9cc:	680a      	ldr	r2, [r1, #0]
   bc9ce:	b192      	cbz	r2, bc9f6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bc9d0:	6888      	ldr	r0, [r1, #8]
   bc9d2:	888b      	ldrh	r3, [r1, #4]
   bc9d4:	9001      	str	r0, [sp, #4]
   bc9d6:	88c9      	ldrh	r1, [r1, #6]
   bc9d8:	4808      	ldr	r0, [pc, #32]	; (bc9fc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc9da:	9100      	str	r1, [sp, #0]
   bc9dc:	490a      	ldr	r1, [pc, #40]	; (bca08 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   bc9de:	f7fa ffe1 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bc9e2:	e9cd 5600 	strd	r5, r6, [sp]
   bc9e6:	8aa3      	ldrh	r3, [r4, #20]
   bc9e8:	6922      	ldr	r2, [r4, #16]
   bc9ea:	4908      	ldr	r1, [pc, #32]	; (bca0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   bc9ec:	4803      	ldr	r0, [pc, #12]	; (bc9fc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc9ee:	f7fa ffd9 	bl	b79a4 <_ZNK5spark6Logger5traceEPKcz>
   bc9f2:	2000      	movs	r0, #0
   bc9f4:	e7e6      	b.n	bc9c4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bc9f6:	4610      	mov	r0, r2
   bc9f8:	e7e4      	b.n	bc9c4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bc9fa:	bf00      	nop
   bc9fc:	2003e650 	.word	0x2003e650
   bca00:	000c52ec 	.word	0x000c52ec
   bca04:	000c54f7 	.word	0x000c54f7
   bca08:	000c5304 	.word	0x000c5304
   bca0c:	000c5335 	.word	0x000c5335

000bca10 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bca10:	b538      	push	{r3, r4, r5, lr}
   bca12:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bca14:	68c2      	ldr	r2, [r0, #12]
   bca16:	6880      	ldr	r0, [r0, #8]
   bca18:	2100      	movs	r1, #0
   bca1a:	f004 fc19 	bl	c1250 <memset>
    savedDataHeader->magic = savedDataMagic;
   bca1e:	68a3      	ldr	r3, [r4, #8]
   bca20:	6922      	ldr	r2, [r4, #16]
   bca22:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bca24:	68a3      	ldr	r3, [r4, #8]
   bca26:	8aa2      	ldrh	r2, [r4, #20]
   bca28:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bca2a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bca2e:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bca30:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bca32:	68a5      	ldr	r5, [r4, #8]
   bca34:	f7ff ff32 	bl	bc89c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bca38:	60a8      	str	r0, [r5, #8]
}
   bca3a:	bd38      	pop	{r3, r4, r5, pc}

000bca3c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bca3c:	b508      	push	{r3, lr}
   bca3e:	4b02      	ldr	r3, [pc, #8]	; (bca48 <cellular_signal+0xc>)
   bca40:	681b      	ldr	r3, [r3, #0]
   bca42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bca44:	9301      	str	r3, [sp, #4]
   bca46:	bd08      	pop	{r3, pc}
   bca48:	00030274 	.word	0x00030274

000bca4c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bca4c:	b508      	push	{r3, lr}
   bca4e:	4b02      	ldr	r3, [pc, #8]	; (bca58 <os_thread_create+0xc>)
   bca50:	681b      	ldr	r3, [r3, #0]
   bca52:	685b      	ldr	r3, [r3, #4]
   bca54:	9301      	str	r3, [sp, #4]
   bca56:	bd08      	pop	{r3, pc}
   bca58:	00030248 	.word	0x00030248

000bca5c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bca5c:	b508      	push	{r3, lr}
   bca5e:	4b02      	ldr	r3, [pc, #8]	; (bca68 <os_thread_is_current+0xc>)
   bca60:	681b      	ldr	r3, [r3, #0]
   bca62:	689b      	ldr	r3, [r3, #8]
   bca64:	9301      	str	r3, [sp, #4]
   bca66:	bd08      	pop	{r3, pc}
   bca68:	00030248 	.word	0x00030248

000bca6c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bca6c:	b508      	push	{r3, lr}
   bca6e:	4b02      	ldr	r3, [pc, #8]	; (bca78 <os_thread_join+0xc>)
   bca70:	681b      	ldr	r3, [r3, #0]
   bca72:	691b      	ldr	r3, [r3, #16]
   bca74:	9301      	str	r3, [sp, #4]
   bca76:	bd08      	pop	{r3, pc}
   bca78:	00030248 	.word	0x00030248

000bca7c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bca7c:	b508      	push	{r3, lr}
   bca7e:	4b02      	ldr	r3, [pc, #8]	; (bca88 <os_thread_cleanup+0xc>)
   bca80:	681b      	ldr	r3, [r3, #0]
   bca82:	695b      	ldr	r3, [r3, #20]
   bca84:	9301      	str	r3, [sp, #4]
   bca86:	bd08      	pop	{r3, pc}
   bca88:	00030248 	.word	0x00030248

000bca8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bca8c:	b508      	push	{r3, lr}
   bca8e:	4b02      	ldr	r3, [pc, #8]	; (bca98 <os_mutex_create+0xc>)
   bca90:	681b      	ldr	r3, [r3, #0]
   bca92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bca94:	9301      	str	r3, [sp, #4]
   bca96:	bd08      	pop	{r3, pc}
   bca98:	00030248 	.word	0x00030248

000bca9c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bca9c:	b508      	push	{r3, lr}
   bca9e:	4b02      	ldr	r3, [pc, #8]	; (bcaa8 <os_mutex_lock+0xc>)
   bcaa0:	681b      	ldr	r3, [r3, #0]
   bcaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bcaa4:	9301      	str	r3, [sp, #4]
   bcaa6:	bd08      	pop	{r3, pc}
   bcaa8:	00030248 	.word	0x00030248

000bcaac <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bcaac:	b508      	push	{r3, lr}
   bcaae:	4b02      	ldr	r3, [pc, #8]	; (bcab8 <os_mutex_unlock+0xc>)
   bcab0:	681b      	ldr	r3, [r3, #0]
   bcab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcab4:	9301      	str	r3, [sp, #4]
   bcab6:	bd08      	pop	{r3, pc}
   bcab8:	00030248 	.word	0x00030248

000bcabc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bcabc:	b508      	push	{r3, lr}
   bcabe:	4b02      	ldr	r3, [pc, #8]	; (bcac8 <os_mutex_recursive_create+0xc>)
   bcac0:	681b      	ldr	r3, [r3, #0]
   bcac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcac4:	9301      	str	r3, [sp, #4]
   bcac6:	bd08      	pop	{r3, pc}
   bcac8:	00030248 	.word	0x00030248

000bcacc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bcacc:	b508      	push	{r3, lr}
   bcace:	4b02      	ldr	r3, [pc, #8]	; (bcad8 <os_mutex_recursive_destroy+0xc>)
   bcad0:	681b      	ldr	r3, [r3, #0]
   bcad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcad4:	9301      	str	r3, [sp, #4]
   bcad6:	bd08      	pop	{r3, pc}
   bcad8:	00030248 	.word	0x00030248

000bcadc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bcadc:	b508      	push	{r3, lr}
   bcade:	4b02      	ldr	r3, [pc, #8]	; (bcae8 <os_mutex_recursive_lock+0xc>)
   bcae0:	681b      	ldr	r3, [r3, #0]
   bcae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcae4:	9301      	str	r3, [sp, #4]
   bcae6:	bd08      	pop	{r3, pc}
   bcae8:	00030248 	.word	0x00030248

000bcaec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bcaec:	b508      	push	{r3, lr}
   bcaee:	4b02      	ldr	r3, [pc, #8]	; (bcaf8 <os_mutex_recursive_unlock+0xc>)
   bcaf0:	681b      	ldr	r3, [r3, #0]
   bcaf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcaf4:	9301      	str	r3, [sp, #4]
   bcaf6:	bd08      	pop	{r3, pc}
   bcaf8:	00030248 	.word	0x00030248

000bcafc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bcafc:	b508      	push	{r3, lr}
   bcafe:	4b02      	ldr	r3, [pc, #8]	; (bcb08 <os_thread_exit+0xc>)
   bcb00:	681b      	ldr	r3, [r3, #0]
   bcb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bcb04:	9301      	str	r3, [sp, #4]
   bcb06:	bd08      	pop	{r3, pc}
   bcb08:	00030248 	.word	0x00030248

000bcb0c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bcb0c:	b508      	push	{r3, lr}
   bcb0e:	4b02      	ldr	r3, [pc, #8]	; (bcb18 <HAL_Core_Runtime_Info+0xc>)
   bcb10:	681b      	ldr	r3, [r3, #0]
   bcb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcb14:	9301      	str	r3, [sp, #4]
   bcb16:	bd08      	pop	{r3, pc}
   bcb18:	00030234 	.word	0x00030234

000bcb1c <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bcb1c:	b508      	push	{r3, lr}
   bcb1e:	4b02      	ldr	r3, [pc, #8]	; (bcb28 <HAL_Feature_Set+0xc>)
   bcb20:	681b      	ldr	r3, [r3, #0]
   bcb22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcb24:	9301      	str	r3, [sp, #4]
   bcb26:	bd08      	pop	{r3, pc}
   bcb28:	00030234 	.word	0x00030234

000bcb2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bcb2c:	b508      	push	{r3, lr}
   bcb2e:	4b02      	ldr	r3, [pc, #8]	; (bcb38 <HAL_RNG_GetRandomNumber+0xc>)
   bcb30:	681b      	ldr	r3, [r3, #0]
   bcb32:	685b      	ldr	r3, [r3, #4]
   bcb34:	9301      	str	r3, [sp, #4]
   bcb36:	bd08      	pop	{r3, pc}
   bcb38:	00030218 	.word	0x00030218

000bcb3c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bcb3c:	b508      	push	{r3, lr}
   bcb3e:	4b02      	ldr	r3, [pc, #8]	; (bcb48 <HAL_Delay_Milliseconds+0xc>)
   bcb40:	681b      	ldr	r3, [r3, #0]
   bcb42:	689b      	ldr	r3, [r3, #8]
   bcb44:	9301      	str	r3, [sp, #4]
   bcb46:	bd08      	pop	{r3, pc}
   bcb48:	00030218 	.word	0x00030218

000bcb4c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bcb4c:	b508      	push	{r3, lr}
   bcb4e:	4b02      	ldr	r3, [pc, #8]	; (bcb58 <HAL_Delay_Microseconds+0xc>)
   bcb50:	681b      	ldr	r3, [r3, #0]
   bcb52:	68db      	ldr	r3, [r3, #12]
   bcb54:	9301      	str	r3, [sp, #4]
   bcb56:	bd08      	pop	{r3, pc}
   bcb58:	00030218 	.word	0x00030218

000bcb5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bcb5c:	b508      	push	{r3, lr}
   bcb5e:	4b02      	ldr	r3, [pc, #8]	; (bcb68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bcb60:	681b      	ldr	r3, [r3, #0]
   bcb62:	695b      	ldr	r3, [r3, #20]
   bcb64:	9301      	str	r3, [sp, #4]
   bcb66:	bd08      	pop	{r3, pc}
   bcb68:	00030218 	.word	0x00030218

000bcb6c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bcb6c:	b508      	push	{r3, lr}
   bcb6e:	4b02      	ldr	r3, [pc, #8]	; (bcb78 <hal_rtc_time_is_valid+0xc>)
   bcb70:	681b      	ldr	r3, [r3, #0]
   bcb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcb74:	9301      	str	r3, [sp, #4]
   bcb76:	bd08      	pop	{r3, pc}
   bcb78:	00030218 	.word	0x00030218

000bcb7c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bcb7c:	b508      	push	{r3, lr}
   bcb7e:	4b02      	ldr	r3, [pc, #8]	; (bcb88 <hal_timer_millis+0xc>)
   bcb80:	681b      	ldr	r3, [r3, #0]
   bcb82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bcb84:	9301      	str	r3, [sp, #4]
   bcb86:	bd08      	pop	{r3, pc}
   bcb88:	00030218 	.word	0x00030218

000bcb8c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bcb8c:	b508      	push	{r3, lr}
   bcb8e:	4b02      	ldr	r3, [pc, #8]	; (bcb98 <hal_rtc_get_time+0xc>)
   bcb90:	681b      	ldr	r3, [r3, #0]
   bcb92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcb94:	9301      	str	r3, [sp, #4]
   bcb96:	bd08      	pop	{r3, pc}
   bcb98:	00030218 	.word	0x00030218

000bcb9c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bcb9c:	b508      	push	{r3, lr}
   bcb9e:	4b02      	ldr	r3, [pc, #8]	; (bcba8 <hal_rtc_set_time+0xc>)
   bcba0:	681b      	ldr	r3, [r3, #0]
   bcba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bcba4:	9301      	str	r3, [sp, #4]
   bcba6:	bd08      	pop	{r3, pc}
   bcba8:	00030218 	.word	0x00030218

000bcbac <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bcbac:	b508      	push	{r3, lr}
   bcbae:	4b02      	ldr	r3, [pc, #8]	; (bcbb8 <HAL_Validate_Pin_Function+0xc>)
   bcbb0:	681b      	ldr	r3, [r3, #0]
   bcbb2:	685b      	ldr	r3, [r3, #4]
   bcbb4:	9301      	str	r3, [sp, #4]
   bcbb6:	bd08      	pop	{r3, pc}
   bcbb8:	0003022c 	.word	0x0003022c

000bcbbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bcbbc:	b508      	push	{r3, lr}
   bcbbe:	4b02      	ldr	r3, [pc, #8]	; (bcbc8 <HAL_Pin_Mode+0xc>)
   bcbc0:	681b      	ldr	r3, [r3, #0]
   bcbc2:	689b      	ldr	r3, [r3, #8]
   bcbc4:	9301      	str	r3, [sp, #4]
   bcbc6:	bd08      	pop	{r3, pc}
   bcbc8:	0003022c 	.word	0x0003022c

000bcbcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bcbcc:	b508      	push	{r3, lr}
   bcbce:	4b02      	ldr	r3, [pc, #8]	; (bcbd8 <HAL_Get_Pin_Mode+0xc>)
   bcbd0:	681b      	ldr	r3, [r3, #0]
   bcbd2:	68db      	ldr	r3, [r3, #12]
   bcbd4:	9301      	str	r3, [sp, #4]
   bcbd6:	bd08      	pop	{r3, pc}
   bcbd8:	0003022c 	.word	0x0003022c

000bcbdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bcbdc:	b508      	push	{r3, lr}
   bcbde:	4b02      	ldr	r3, [pc, #8]	; (bcbe8 <HAL_GPIO_Write+0xc>)
   bcbe0:	681b      	ldr	r3, [r3, #0]
   bcbe2:	691b      	ldr	r3, [r3, #16]
   bcbe4:	9301      	str	r3, [sp, #4]
   bcbe6:	bd08      	pop	{r3, pc}
   bcbe8:	0003022c 	.word	0x0003022c

000bcbec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bcbec:	b508      	push	{r3, lr}
   bcbee:	4b02      	ldr	r3, [pc, #8]	; (bcbf8 <HAL_GPIO_Read+0xc>)
   bcbf0:	681b      	ldr	r3, [r3, #0]
   bcbf2:	695b      	ldr	r3, [r3, #20]
   bcbf4:	9301      	str	r3, [sp, #4]
   bcbf6:	bd08      	pop	{r3, pc}
   bcbf8:	0003022c 	.word	0x0003022c

000bcbfc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bcbfc:	b508      	push	{r3, lr}
   bcbfe:	4b02      	ldr	r3, [pc, #8]	; (bcc08 <HAL_Interrupts_Attach+0xc>)
   bcc00:	681b      	ldr	r3, [r3, #0]
   bcc02:	699b      	ldr	r3, [r3, #24]
   bcc04:	9301      	str	r3, [sp, #4]
   bcc06:	bd08      	pop	{r3, pc}
   bcc08:	0003022c 	.word	0x0003022c

000bcc0c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bcc0c:	b508      	push	{r3, lr}
   bcc0e:	4b02      	ldr	r3, [pc, #8]	; (bcc18 <HAL_Interrupts_Detach+0xc>)
   bcc10:	681b      	ldr	r3, [r3, #0]
   bcc12:	69db      	ldr	r3, [r3, #28]
   bcc14:	9301      	str	r3, [sp, #4]
   bcc16:	bd08      	pop	{r3, pc}
   bcc18:	0003022c 	.word	0x0003022c

000bcc1c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bcc1c:	b508      	push	{r3, lr}
   bcc1e:	4b02      	ldr	r3, [pc, #8]	; (bcc28 <hal_adc_read+0xc>)
   bcc20:	681b      	ldr	r3, [r3, #0]
   bcc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcc24:	9301      	str	r3, [sp, #4]
   bcc26:	bd08      	pop	{r3, pc}
   bcc28:	0003022c 	.word	0x0003022c

000bcc2c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bcc2c:	b508      	push	{r3, lr}
   bcc2e:	4b02      	ldr	r3, [pc, #8]	; (bcc38 <hal_i2c_begin+0xc>)
   bcc30:	681b      	ldr	r3, [r3, #0]
   bcc32:	68db      	ldr	r3, [r3, #12]
   bcc34:	9301      	str	r3, [sp, #4]
   bcc36:	bd08      	pop	{r3, pc}
   bcc38:	00030228 	.word	0x00030228

000bcc3c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bcc3c:	b508      	push	{r3, lr}
   bcc3e:	4b02      	ldr	r3, [pc, #8]	; (bcc48 <hal_i2c_begin_transmission+0xc>)
   bcc40:	681b      	ldr	r3, [r3, #0]
   bcc42:	699b      	ldr	r3, [r3, #24]
   bcc44:	9301      	str	r3, [sp, #4]
   bcc46:	bd08      	pop	{r3, pc}
   bcc48:	00030228 	.word	0x00030228

000bcc4c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bcc4c:	b508      	push	{r3, lr}
   bcc4e:	4b02      	ldr	r3, [pc, #8]	; (bcc58 <hal_i2c_end_transmission+0xc>)
   bcc50:	681b      	ldr	r3, [r3, #0]
   bcc52:	69db      	ldr	r3, [r3, #28]
   bcc54:	9301      	str	r3, [sp, #4]
   bcc56:	bd08      	pop	{r3, pc}
   bcc58:	00030228 	.word	0x00030228

000bcc5c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bcc5c:	b508      	push	{r3, lr}
   bcc5e:	4b02      	ldr	r3, [pc, #8]	; (bcc68 <hal_i2c_write+0xc>)
   bcc60:	681b      	ldr	r3, [r3, #0]
   bcc62:	6a1b      	ldr	r3, [r3, #32]
   bcc64:	9301      	str	r3, [sp, #4]
   bcc66:	bd08      	pop	{r3, pc}
   bcc68:	00030228 	.word	0x00030228

000bcc6c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bcc6c:	b508      	push	{r3, lr}
   bcc6e:	4b02      	ldr	r3, [pc, #8]	; (bcc78 <hal_i2c_available+0xc>)
   bcc70:	681b      	ldr	r3, [r3, #0]
   bcc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcc74:	9301      	str	r3, [sp, #4]
   bcc76:	bd08      	pop	{r3, pc}
   bcc78:	00030228 	.word	0x00030228

000bcc7c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bcc7c:	b508      	push	{r3, lr}
   bcc7e:	4b02      	ldr	r3, [pc, #8]	; (bcc88 <hal_i2c_read+0xc>)
   bcc80:	681b      	ldr	r3, [r3, #0]
   bcc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcc84:	9301      	str	r3, [sp, #4]
   bcc86:	bd08      	pop	{r3, pc}
   bcc88:	00030228 	.word	0x00030228

000bcc8c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bcc8c:	b508      	push	{r3, lr}
   bcc8e:	4b02      	ldr	r3, [pc, #8]	; (bcc98 <hal_i2c_peek+0xc>)
   bcc90:	681b      	ldr	r3, [r3, #0]
   bcc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcc94:	9301      	str	r3, [sp, #4]
   bcc96:	bd08      	pop	{r3, pc}
   bcc98:	00030228 	.word	0x00030228

000bcc9c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bcc9c:	b508      	push	{r3, lr}
   bcc9e:	4b02      	ldr	r3, [pc, #8]	; (bcca8 <hal_i2c_flush+0xc>)
   bcca0:	681b      	ldr	r3, [r3, #0]
   bcca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcca4:	9301      	str	r3, [sp, #4]
   bcca6:	bd08      	pop	{r3, pc}
   bcca8:	00030228 	.word	0x00030228

000bccac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bccac:	b508      	push	{r3, lr}
   bccae:	4b02      	ldr	r3, [pc, #8]	; (bccb8 <hal_i2c_is_enabled+0xc>)
   bccb0:	681b      	ldr	r3, [r3, #0]
   bccb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bccb4:	9301      	str	r3, [sp, #4]
   bccb6:	bd08      	pop	{r3, pc}
   bccb8:	00030228 	.word	0x00030228

000bccbc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bccbc:	b508      	push	{r3, lr}
   bccbe:	4b02      	ldr	r3, [pc, #8]	; (bccc8 <hal_i2c_init+0xc>)
   bccc0:	681b      	ldr	r3, [r3, #0]
   bccc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bccc4:	9301      	str	r3, [sp, #4]
   bccc6:	bd08      	pop	{r3, pc}
   bccc8:	00030228 	.word	0x00030228

000bcccc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bcccc:	b508      	push	{r3, lr}
   bccce:	4b02      	ldr	r3, [pc, #8]	; (bccd8 <hal_i2c_lock+0xc>)
   bccd0:	681b      	ldr	r3, [r3, #0]
   bccd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bccd4:	9301      	str	r3, [sp, #4]
   bccd6:	bd08      	pop	{r3, pc}
   bccd8:	00030228 	.word	0x00030228

000bccdc <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bccdc:	b508      	push	{r3, lr}
   bccde:	4b02      	ldr	r3, [pc, #8]	; (bcce8 <hal_i2c_unlock+0xc>)
   bcce0:	681b      	ldr	r3, [r3, #0]
   bcce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcce4:	9301      	str	r3, [sp, #4]
   bcce6:	bd08      	pop	{r3, pc}
   bcce8:	00030228 	.word	0x00030228

000bccec <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bccec:	b508      	push	{r3, lr}
   bccee:	4b02      	ldr	r3, [pc, #8]	; (bccf8 <hal_i2c_request_ex+0xc>)
   bccf0:	681b      	ldr	r3, [r3, #0]
   bccf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bccf4:	9301      	str	r3, [sp, #4]
   bccf6:	bd08      	pop	{r3, pc}
   bccf8:	00030228 	.word	0x00030228

000bccfc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bccfc:	b508      	push	{r3, lr}
   bccfe:	4b02      	ldr	r3, [pc, #8]	; (bcd08 <inet_inet_ntop+0xc>)
   bcd00:	681b      	ldr	r3, [r3, #0]
   bcd02:	695b      	ldr	r3, [r3, #20]
   bcd04:	9301      	str	r3, [sp, #4]
   bcd06:	bd08      	pop	{r3, pc}
   bcd08:	00030264 	.word	0x00030264

000bcd0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bcd0c:	b508      	push	{r3, lr}
   bcd0e:	4b02      	ldr	r3, [pc, #8]	; (bcd18 <netdb_freeaddrinfo+0xc>)
   bcd10:	681b      	ldr	r3, [r3, #0]
   bcd12:	689b      	ldr	r3, [r3, #8]
   bcd14:	9301      	str	r3, [sp, #4]
   bcd16:	bd08      	pop	{r3, pc}
   bcd18:	00030268 	.word	0x00030268

000bcd1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bcd1c:	b508      	push	{r3, lr}
   bcd1e:	4b02      	ldr	r3, [pc, #8]	; (bcd28 <netdb_getaddrinfo+0xc>)
   bcd20:	681b      	ldr	r3, [r3, #0]
   bcd22:	68db      	ldr	r3, [r3, #12]
   bcd24:	9301      	str	r3, [sp, #4]
   bcd26:	bd08      	pop	{r3, pc}
   bcd28:	00030268 	.word	0x00030268

000bcd2c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bcd2c:	b508      	push	{r3, lr}
   bcd2e:	4b02      	ldr	r3, [pc, #8]	; (bcd38 <hal_spi_begin+0xc>)
   bcd30:	681b      	ldr	r3, [r3, #0]
   bcd32:	681b      	ldr	r3, [r3, #0]
   bcd34:	9301      	str	r3, [sp, #4]
   bcd36:	bd08      	pop	{r3, pc}
   bcd38:	00030230 	.word	0x00030230

000bcd3c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bcd3c:	b508      	push	{r3, lr}
   bcd3e:	4b02      	ldr	r3, [pc, #8]	; (bcd48 <hal_spi_end+0xc>)
   bcd40:	681b      	ldr	r3, [r3, #0]
   bcd42:	685b      	ldr	r3, [r3, #4]
   bcd44:	9301      	str	r3, [sp, #4]
   bcd46:	bd08      	pop	{r3, pc}
   bcd48:	00030230 	.word	0x00030230

000bcd4c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bcd4c:	b508      	push	{r3, lr}
   bcd4e:	4b02      	ldr	r3, [pc, #8]	; (bcd58 <hal_spi_transfer+0xc>)
   bcd50:	681b      	ldr	r3, [r3, #0]
   bcd52:	695b      	ldr	r3, [r3, #20]
   bcd54:	9301      	str	r3, [sp, #4]
   bcd56:	bd08      	pop	{r3, pc}
   bcd58:	00030230 	.word	0x00030230

000bcd5c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bcd5c:	b508      	push	{r3, lr}
   bcd5e:	4b02      	ldr	r3, [pc, #8]	; (bcd68 <hal_spi_init+0xc>)
   bcd60:	681b      	ldr	r3, [r3, #0]
   bcd62:	69db      	ldr	r3, [r3, #28]
   bcd64:	9301      	str	r3, [sp, #4]
   bcd66:	bd08      	pop	{r3, pc}
   bcd68:	00030230 	.word	0x00030230

000bcd6c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bcd6c:	b508      	push	{r3, lr}
   bcd6e:	4b02      	ldr	r3, [pc, #8]	; (bcd78 <hal_spi_is_enabled+0xc>)
   bcd70:	681b      	ldr	r3, [r3, #0]
   bcd72:	6a1b      	ldr	r3, [r3, #32]
   bcd74:	9301      	str	r3, [sp, #4]
   bcd76:	bd08      	pop	{r3, pc}
   bcd78:	00030230 	.word	0x00030230

000bcd7c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bcd7c:	b508      	push	{r3, lr}
   bcd7e:	4b02      	ldr	r3, [pc, #8]	; (bcd88 <hal_spi_info+0xc>)
   bcd80:	681b      	ldr	r3, [r3, #0]
   bcd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcd84:	9301      	str	r3, [sp, #4]
   bcd86:	bd08      	pop	{r3, pc}
   bcd88:	00030230 	.word	0x00030230

000bcd8c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bcd8c:	b508      	push	{r3, lr}
   bcd8e:	4b02      	ldr	r3, [pc, #8]	; (bcd98 <hal_spi_set_settings+0xc>)
   bcd90:	681b      	ldr	r3, [r3, #0]
   bcd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcd94:	9301      	str	r3, [sp, #4]
   bcd96:	bd08      	pop	{r3, pc}
   bcd98:	00030230 	.word	0x00030230

000bcd9c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bcd9c:	b508      	push	{r3, lr}
   bcd9e:	4b02      	ldr	r3, [pc, #8]	; (bcda8 <hal_spi_acquire+0xc>)
   bcda0:	681b      	ldr	r3, [r3, #0]
   bcda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcda4:	9301      	str	r3, [sp, #4]
   bcda6:	bd08      	pop	{r3, pc}
   bcda8:	00030230 	.word	0x00030230

000bcdac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bcdac:	b508      	push	{r3, lr}
   bcdae:	4b02      	ldr	r3, [pc, #8]	; (bcdb8 <hal_spi_release+0xc>)
   bcdb0:	681b      	ldr	r3, [r3, #0]
   bcdb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcdb4:	9301      	str	r3, [sp, #4]
   bcdb6:	bd08      	pop	{r3, pc}
   bcdb8:	00030230 	.word	0x00030230

000bcdbc <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bcdbc:	b508      	push	{r3, lr}
   bcdbe:	4b02      	ldr	r3, [pc, #8]	; (bcdc8 <_open+0xc>)
   bcdc0:	681b      	ldr	r3, [r3, #0]
   bcdc2:	681b      	ldr	r3, [r3, #0]
   bcdc4:	9301      	str	r3, [sp, #4]
   bcdc6:	bd08      	pop	{r3, pc}
   bcdc8:	00030284 	.word	0x00030284

000bcdcc <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bcdcc:	b508      	push	{r3, lr}
   bcdce:	4b02      	ldr	r3, [pc, #8]	; (bcdd8 <_write+0xc>)
   bcdd0:	681b      	ldr	r3, [r3, #0]
   bcdd2:	685b      	ldr	r3, [r3, #4]
   bcdd4:	9301      	str	r3, [sp, #4]
   bcdd6:	bd08      	pop	{r3, pc}
   bcdd8:	00030284 	.word	0x00030284

000bcddc <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcddc:	b508      	push	{r3, lr}
   bcdde:	4b02      	ldr	r3, [pc, #8]	; (bcde8 <_read+0xc>)
   bcde0:	681b      	ldr	r3, [r3, #0]
   bcde2:	689b      	ldr	r3, [r3, #8]
   bcde4:	9301      	str	r3, [sp, #4]
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	00030284 	.word	0x00030284

000bcdec <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcdec:	b508      	push	{r3, lr}
   bcdee:	4b02      	ldr	r3, [pc, #8]	; (bcdf8 <_close+0xc>)
   bcdf0:	681b      	ldr	r3, [r3, #0]
   bcdf2:	68db      	ldr	r3, [r3, #12]
   bcdf4:	9301      	str	r3, [sp, #4]
   bcdf6:	bd08      	pop	{r3, pc}
   bcdf8:	00030284 	.word	0x00030284

000bcdfc <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bcdfc:	b508      	push	{r3, lr}
   bcdfe:	4b02      	ldr	r3, [pc, #8]	; (bce08 <_fstat+0xc>)
   bce00:	681b      	ldr	r3, [r3, #0]
   bce02:	695b      	ldr	r3, [r3, #20]
   bce04:	9301      	str	r3, [sp, #4]
   bce06:	bd08      	pop	{r3, pc}
   bce08:	00030284 	.word	0x00030284

000bce0c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bce0c:	b508      	push	{r3, lr}
   bce0e:	4b02      	ldr	r3, [pc, #8]	; (bce18 <_lseek+0xc>)
   bce10:	681b      	ldr	r3, [r3, #0]
   bce12:	6a1b      	ldr	r3, [r3, #32]
   bce14:	9301      	str	r3, [sp, #4]
   bce16:	bd08      	pop	{r3, pc}
   bce18:	00030284 	.word	0x00030284

000bce1c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bce1c:	b508      	push	{r3, lr}
   bce1e:	4b02      	ldr	r3, [pc, #8]	; (bce28 <stat+0xc>)
   bce20:	681b      	ldr	r3, [r3, #0]
   bce22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bce24:	9301      	str	r3, [sp, #4]
   bce26:	bd08      	pop	{r3, pc}
   bce28:	00030284 	.word	0x00030284

000bce2c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bce2c:	b508      	push	{r3, lr}
   bce2e:	4b02      	ldr	r3, [pc, #8]	; (bce38 <mkdir+0xc>)
   bce30:	681b      	ldr	r3, [r3, #0]
   bce32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bce34:	9301      	str	r3, [sp, #4]
   bce36:	bd08      	pop	{r3, pc}
   bce38:	00030284 	.word	0x00030284

000bce3c <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bce3c:	b508      	push	{r3, lr}
   bce3e:	4b02      	ldr	r3, [pc, #8]	; (bce48 <_unlink+0xc>)
   bce40:	681b      	ldr	r3, [r3, #0]
   bce42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	bd08      	pop	{r3, pc}
   bce48:	00030284 	.word	0x00030284

000bce4c <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bce4c:	b508      	push	{r3, lr}
   bce4e:	4b02      	ldr	r3, [pc, #8]	; (bce58 <opendir+0xc>)
   bce50:	681b      	ldr	r3, [r3, #0]
   bce52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bce54:	9301      	str	r3, [sp, #4]
   bce56:	bd08      	pop	{r3, pc}
   bce58:	00030284 	.word	0x00030284

000bce5c <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bce5c:	b508      	push	{r3, lr}
   bce5e:	4b02      	ldr	r3, [pc, #8]	; (bce68 <readdir+0xc>)
   bce60:	681b      	ldr	r3, [r3, #0]
   bce62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bce64:	9301      	str	r3, [sp, #4]
   bce66:	bd08      	pop	{r3, pc}
   bce68:	00030284 	.word	0x00030284

000bce6c <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bce6c:	b508      	push	{r3, lr}
   bce6e:	4b02      	ldr	r3, [pc, #8]	; (bce78 <closedir+0xc>)
   bce70:	681b      	ldr	r3, [r3, #0]
   bce72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bce74:	9301      	str	r3, [sp, #4]
   bce76:	bd08      	pop	{r3, pc}
   bce78:	00030284 	.word	0x00030284

000bce7c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bce7c:	b508      	push	{r3, lr}
   bce7e:	4b02      	ldr	r3, [pc, #8]	; (bce88 <hal_usart_end+0xc>)
   bce80:	681b      	ldr	r3, [r3, #0]
   bce82:	689b      	ldr	r3, [r3, #8]
   bce84:	9301      	str	r3, [sp, #4]
   bce86:	bd08      	pop	{r3, pc}
   bce88:	0003023c 	.word	0x0003023c

000bce8c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bce8c:	b508      	push	{r3, lr}
   bce8e:	4b02      	ldr	r3, [pc, #8]	; (bce98 <hal_usart_write+0xc>)
   bce90:	681b      	ldr	r3, [r3, #0]
   bce92:	68db      	ldr	r3, [r3, #12]
   bce94:	9301      	str	r3, [sp, #4]
   bce96:	bd08      	pop	{r3, pc}
   bce98:	0003023c 	.word	0x0003023c

000bce9c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bce9c:	b508      	push	{r3, lr}
   bce9e:	4b02      	ldr	r3, [pc, #8]	; (bcea8 <hal_usart_available+0xc>)
   bcea0:	681b      	ldr	r3, [r3, #0]
   bcea2:	691b      	ldr	r3, [r3, #16]
   bcea4:	9301      	str	r3, [sp, #4]
   bcea6:	bd08      	pop	{r3, pc}
   bcea8:	0003023c 	.word	0x0003023c

000bceac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bceac:	b508      	push	{r3, lr}
   bceae:	4b02      	ldr	r3, [pc, #8]	; (bceb8 <hal_usart_read+0xc>)
   bceb0:	681b      	ldr	r3, [r3, #0]
   bceb2:	695b      	ldr	r3, [r3, #20]
   bceb4:	9301      	str	r3, [sp, #4]
   bceb6:	bd08      	pop	{r3, pc}
   bceb8:	0003023c 	.word	0x0003023c

000bcebc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bcebc:	b508      	push	{r3, lr}
   bcebe:	4b02      	ldr	r3, [pc, #8]	; (bcec8 <hal_usart_peek+0xc>)
   bcec0:	681b      	ldr	r3, [r3, #0]
   bcec2:	699b      	ldr	r3, [r3, #24]
   bcec4:	9301      	str	r3, [sp, #4]
   bcec6:	bd08      	pop	{r3, pc}
   bcec8:	0003023c 	.word	0x0003023c

000bcecc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bcecc:	b508      	push	{r3, lr}
   bcece:	4b02      	ldr	r3, [pc, #8]	; (bced8 <hal_usart_flush+0xc>)
   bced0:	681b      	ldr	r3, [r3, #0]
   bced2:	69db      	ldr	r3, [r3, #28]
   bced4:	9301      	str	r3, [sp, #4]
   bced6:	bd08      	pop	{r3, pc}
   bced8:	0003023c 	.word	0x0003023c

000bcedc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bcedc:	b508      	push	{r3, lr}
   bcede:	4b02      	ldr	r3, [pc, #8]	; (bcee8 <hal_usart_is_enabled+0xc>)
   bcee0:	681b      	ldr	r3, [r3, #0]
   bcee2:	6a1b      	ldr	r3, [r3, #32]
   bcee4:	9301      	str	r3, [sp, #4]
   bcee6:	bd08      	pop	{r3, pc}
   bcee8:	0003023c 	.word	0x0003023c

000bceec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bceec:	b508      	push	{r3, lr}
   bceee:	4b02      	ldr	r3, [pc, #8]	; (bcef8 <hal_usart_available_data_for_write+0xc>)
   bcef0:	681b      	ldr	r3, [r3, #0]
   bcef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcef4:	9301      	str	r3, [sp, #4]
   bcef6:	bd08      	pop	{r3, pc}
   bcef8:	0003023c 	.word	0x0003023c

000bcefc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bcefc:	b508      	push	{r3, lr}
   bcefe:	4b02      	ldr	r3, [pc, #8]	; (bcf08 <hal_usart_begin_config+0xc>)
   bcf00:	681b      	ldr	r3, [r3, #0]
   bcf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcf04:	9301      	str	r3, [sp, #4]
   bcf06:	bd08      	pop	{r3, pc}
   bcf08:	0003023c 	.word	0x0003023c

000bcf0c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bcf0c:	b508      	push	{r3, lr}
   bcf0e:	4b02      	ldr	r3, [pc, #8]	; (bcf18 <hal_usart_init_ex+0xc>)
   bcf10:	681b      	ldr	r3, [r3, #0]
   bcf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcf14:	9301      	str	r3, [sp, #4]
   bcf16:	bd08      	pop	{r3, pc}
   bcf18:	0003023c 	.word	0x0003023c

000bcf1c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bcf1c:	b508      	push	{r3, lr}
   bcf1e:	4b02      	ldr	r3, [pc, #8]	; (bcf28 <HAL_USB_USART_Init+0xc>)
   bcf20:	681b      	ldr	r3, [r3, #0]
   bcf22:	681b      	ldr	r3, [r3, #0]
   bcf24:	9301      	str	r3, [sp, #4]
   bcf26:	bd08      	pop	{r3, pc}
   bcf28:	0003024c 	.word	0x0003024c

000bcf2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bcf2c:	b508      	push	{r3, lr}
   bcf2e:	4b02      	ldr	r3, [pc, #8]	; (bcf38 <HAL_USB_USART_Begin+0xc>)
   bcf30:	681b      	ldr	r3, [r3, #0]
   bcf32:	685b      	ldr	r3, [r3, #4]
   bcf34:	9301      	str	r3, [sp, #4]
   bcf36:	bd08      	pop	{r3, pc}
   bcf38:	0003024c 	.word	0x0003024c

000bcf3c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bcf3c:	b508      	push	{r3, lr}
   bcf3e:	4b02      	ldr	r3, [pc, #8]	; (bcf48 <HAL_USB_USART_End+0xc>)
   bcf40:	681b      	ldr	r3, [r3, #0]
   bcf42:	689b      	ldr	r3, [r3, #8]
   bcf44:	9301      	str	r3, [sp, #4]
   bcf46:	bd08      	pop	{r3, pc}
   bcf48:	0003024c 	.word	0x0003024c

000bcf4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bcf4c:	b508      	push	{r3, lr}
   bcf4e:	4b02      	ldr	r3, [pc, #8]	; (bcf58 <HAL_USB_USART_Available_Data+0xc>)
   bcf50:	681b      	ldr	r3, [r3, #0]
   bcf52:	691b      	ldr	r3, [r3, #16]
   bcf54:	9301      	str	r3, [sp, #4]
   bcf56:	bd08      	pop	{r3, pc}
   bcf58:	0003024c 	.word	0x0003024c

000bcf5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bcf5c:	b508      	push	{r3, lr}
   bcf5e:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bcf60:	681b      	ldr	r3, [r3, #0]
   bcf62:	695b      	ldr	r3, [r3, #20]
   bcf64:	9301      	str	r3, [sp, #4]
   bcf66:	bd08      	pop	{r3, pc}
   bcf68:	0003024c 	.word	0x0003024c

000bcf6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcf6c:	b508      	push	{r3, lr}
   bcf6e:	4b02      	ldr	r3, [pc, #8]	; (bcf78 <HAL_USB_USART_Receive_Data+0xc>)
   bcf70:	681b      	ldr	r3, [r3, #0]
   bcf72:	699b      	ldr	r3, [r3, #24]
   bcf74:	9301      	str	r3, [sp, #4]
   bcf76:	bd08      	pop	{r3, pc}
   bcf78:	0003024c 	.word	0x0003024c

000bcf7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcf7c:	b508      	push	{r3, lr}
   bcf7e:	4b02      	ldr	r3, [pc, #8]	; (bcf88 <HAL_USB_USART_Send_Data+0xc>)
   bcf80:	681b      	ldr	r3, [r3, #0]
   bcf82:	69db      	ldr	r3, [r3, #28]
   bcf84:	9301      	str	r3, [sp, #4]
   bcf86:	bd08      	pop	{r3, pc}
   bcf88:	0003024c 	.word	0x0003024c

000bcf8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bcf8c:	b508      	push	{r3, lr}
   bcf8e:	4b02      	ldr	r3, [pc, #8]	; (bcf98 <HAL_USB_USART_Flush_Data+0xc>)
   bcf90:	681b      	ldr	r3, [r3, #0]
   bcf92:	6a1b      	ldr	r3, [r3, #32]
   bcf94:	9301      	str	r3, [sp, #4]
   bcf96:	bd08      	pop	{r3, pc}
   bcf98:	0003024c 	.word	0x0003024c

000bcf9c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bcf9c:	b508      	push	{r3, lr}
   bcf9e:	4b02      	ldr	r3, [pc, #8]	; (bcfa8 <HAL_USB_USART_Is_Connected+0xc>)
   bcfa0:	681b      	ldr	r3, [r3, #0]
   bcfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcfa4:	9301      	str	r3, [sp, #4]
   bcfa6:	bd08      	pop	{r3, pc}
   bcfa8:	0003024c 	.word	0x0003024c

000bcfac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bcfac:	b508      	push	{r3, lr}
   bcfae:	4b02      	ldr	r3, [pc, #8]	; (bcfb8 <panic_+0xc>)
   bcfb0:	681b      	ldr	r3, [r3, #0]
   bcfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcfb4:	9301      	str	r3, [sp, #4]
   bcfb6:	bd08      	pop	{r3, pc}
   bcfb8:	00030260 	.word	0x00030260

000bcfbc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bcfbc:	b508      	push	{r3, lr}
   bcfbe:	4b02      	ldr	r3, [pc, #8]	; (bcfc8 <log_message+0xc>)
   bcfc0:	681b      	ldr	r3, [r3, #0]
   bcfc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcfc4:	9301      	str	r3, [sp, #4]
   bcfc6:	bd08      	pop	{r3, pc}
   bcfc8:	00030260 	.word	0x00030260

000bcfcc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bcfcc:	b508      	push	{r3, lr}
   bcfce:	4b02      	ldr	r3, [pc, #8]	; (bcfd8 <log_message_v+0xc>)
   bcfd0:	681b      	ldr	r3, [r3, #0]
   bcfd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcfd4:	9301      	str	r3, [sp, #4]
   bcfd6:	bd08      	pop	{r3, pc}
   bcfd8:	00030260 	.word	0x00030260

000bcfdc <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   bcfdc:	b508      	push	{r3, lr}
   bcfde:	4b02      	ldr	r3, [pc, #8]	; (bcfe8 <log_write+0xc>)
   bcfe0:	681b      	ldr	r3, [r3, #0]
   bcfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcfe4:	9301      	str	r3, [sp, #4]
   bcfe6:	bd08      	pop	{r3, pc}
   bcfe8:	00030260 	.word	0x00030260

000bcfec <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   bcfec:	b508      	push	{r3, lr}
   bcfee:	4b02      	ldr	r3, [pc, #8]	; (bcff8 <log_dump+0xc>)
   bcff0:	681b      	ldr	r3, [r3, #0]
   bcff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcff4:	9301      	str	r3, [sp, #4]
   bcff6:	bd08      	pop	{r3, pc}
   bcff8:	00030260 	.word	0x00030260

000bcffc <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bcffc:	b508      	push	{r3, lr}
   bcffe:	4b02      	ldr	r3, [pc, #8]	; (bd008 <log_level_name+0xc>)
   bd000:	681b      	ldr	r3, [r3, #0]
   bd002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd004:	9301      	str	r3, [sp, #4]
   bd006:	bd08      	pop	{r3, pc}
   bd008:	00030260 	.word	0x00030260

000bd00c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd00c:	b508      	push	{r3, lr}
   bd00e:	4b02      	ldr	r3, [pc, #8]	; (bd018 <log_set_callbacks+0xc>)
   bd010:	681b      	ldr	r3, [r3, #0]
   bd012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd014:	9301      	str	r3, [sp, #4]
   bd016:	bd08      	pop	{r3, pc}
   bd018:	00030260 	.word	0x00030260

000bd01c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bd01c:	b508      	push	{r3, lr}
   bd01e:	4b03      	ldr	r3, [pc, #12]	; (bd02c <diag_get_source+0x10>)
   bd020:	681b      	ldr	r3, [r3, #0]
   bd022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd026:	9301      	str	r3, [sp, #4]
   bd028:	bd08      	pop	{r3, pc}
   bd02a:	0000      	.short	0x0000
   bd02c:	00030260 	.word	0x00030260

000bd030 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd030:	b508      	push	{r3, lr}
   bd032:	4b02      	ldr	r3, [pc, #8]	; (bd03c <system_mode+0xc>)
   bd034:	681b      	ldr	r3, [r3, #0]
   bd036:	681b      	ldr	r3, [r3, #0]
   bd038:	9301      	str	r3, [sp, #4]
   bd03a:	bd08      	pop	{r3, pc}
   bd03c:	00030220 	.word	0x00030220

000bd040 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd040:	b508      	push	{r3, lr}
   bd042:	4b02      	ldr	r3, [pc, #8]	; (bd04c <set_system_mode+0xc>)
   bd044:	681b      	ldr	r3, [r3, #0]
   bd046:	685b      	ldr	r3, [r3, #4]
   bd048:	9301      	str	r3, [sp, #4]
   bd04a:	bd08      	pop	{r3, pc}
   bd04c:	00030220 	.word	0x00030220

000bd050 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd050:	b508      	push	{r3, lr}
   bd052:	4b02      	ldr	r3, [pc, #8]	; (bd05c <system_delay_ms+0xc>)
   bd054:	681b      	ldr	r3, [r3, #0]
   bd056:	695b      	ldr	r3, [r3, #20]
   bd058:	9301      	str	r3, [sp, #4]
   bd05a:	bd08      	pop	{r3, pc}
   bd05c:	00030220 	.word	0x00030220

000bd060 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bd060:	b508      	push	{r3, lr}
   bd062:	4b02      	ldr	r3, [pc, #8]	; (bd06c <system_subscribe_event+0xc>)
   bd064:	681b      	ldr	r3, [r3, #0]
   bd066:	6a1b      	ldr	r3, [r3, #32]
   bd068:	9301      	str	r3, [sp, #4]
   bd06a:	bd08      	pop	{r3, pc}
   bd06c:	00030220 	.word	0x00030220

000bd070 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bd070:	b508      	push	{r3, lr}
   bd072:	4b02      	ldr	r3, [pc, #8]	; (bd07c <system_thread_set_state+0xc>)
   bd074:	681b      	ldr	r3, [r3, #0]
   bd076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd078:	9301      	str	r3, [sp, #4]
   bd07a:	bd08      	pop	{r3, pc}
   bd07c:	00030220 	.word	0x00030220

000bd080 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd080:	b508      	push	{r3, lr}
   bd082:	4b02      	ldr	r3, [pc, #8]	; (bd08c <application_thread_current+0xc>)
   bd084:	681b      	ldr	r3, [r3, #0]
   bd086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd088:	9301      	str	r3, [sp, #4]
   bd08a:	bd08      	pop	{r3, pc}
   bd08c:	00030220 	.word	0x00030220

000bd090 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd090:	b508      	push	{r3, lr}
   bd092:	4b02      	ldr	r3, [pc, #8]	; (bd09c <application_thread_invoke+0xc>)
   bd094:	681b      	ldr	r3, [r3, #0]
   bd096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd098:	9301      	str	r3, [sp, #4]
   bd09a:	bd08      	pop	{r3, pc}
   bd09c:	00030220 	.word	0x00030220

000bd0a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd0a0:	b508      	push	{r3, lr}
   bd0a2:	4b02      	ldr	r3, [pc, #8]	; (bd0ac <system_thread_get_state+0xc>)
   bd0a4:	681b      	ldr	r3, [r3, #0]
   bd0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd0a8:	9301      	str	r3, [sp, #4]
   bd0aa:	bd08      	pop	{r3, pc}
   bd0ac:	00030220 	.word	0x00030220

000bd0b0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bd0b0:	b508      	push	{r3, lr}
   bd0b2:	4b02      	ldr	r3, [pc, #8]	; (bd0bc <system_notify_time_changed+0xc>)
   bd0b4:	681b      	ldr	r3, [r3, #0]
   bd0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bd0b8:	9301      	str	r3, [sp, #4]
   bd0ba:	bd08      	pop	{r3, pc}
   bd0bc:	00030220 	.word	0x00030220

000bd0c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd0c0:	b508      	push	{r3, lr}
   bd0c2:	4b03      	ldr	r3, [pc, #12]	; (bd0d0 <system_ctrl_set_app_request_handler+0x10>)
   bd0c4:	681b      	ldr	r3, [r3, #0]
   bd0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd0ca:	9301      	str	r3, [sp, #4]
   bd0cc:	bd08      	pop	{r3, pc}
   bd0ce:	0000      	.short	0x0000
   bd0d0:	00030220 	.word	0x00030220

000bd0d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd0d4:	b508      	push	{r3, lr}
   bd0d6:	4b03      	ldr	r3, [pc, #12]	; (bd0e4 <system_ctrl_set_result+0x10>)
   bd0d8:	681b      	ldr	r3, [r3, #0]
   bd0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd0de:	9301      	str	r3, [sp, #4]
   bd0e0:	bd08      	pop	{r3, pc}
   bd0e2:	0000      	.short	0x0000
   bd0e4:	00030220 	.word	0x00030220

000bd0e8 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bd0e8:	b508      	push	{r3, lr}
   bd0ea:	4b03      	ldr	r3, [pc, #12]	; (bd0f8 <system_power_management_set_config+0x10>)
   bd0ec:	681b      	ldr	r3, [r3, #0]
   bd0ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd0f2:	9301      	str	r3, [sp, #4]
   bd0f4:	bd08      	pop	{r3, pc}
   bd0f6:	0000      	.short	0x0000
   bd0f8:	00030220 	.word	0x00030220

000bd0fc <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bd0fc:	b508      	push	{r3, lr}
   bd0fe:	4b03      	ldr	r3, [pc, #12]	; (bd10c <system_sleep_ext+0x10>)
   bd100:	681b      	ldr	r3, [r3, #0]
   bd102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bd106:	9301      	str	r3, [sp, #4]
   bd108:	bd08      	pop	{r3, pc}
   bd10a:	0000      	.short	0x0000
   bd10c:	00030220 	.word	0x00030220

000bd110 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bd110:	b508      	push	{r3, lr}
   bd112:	4b03      	ldr	r3, [pc, #12]	; (bd120 <system_reset+0x10>)
   bd114:	681b      	ldr	r3, [r3, #0]
   bd116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bd11a:	9301      	str	r3, [sp, #4]
   bd11c:	bd08      	pop	{r3, pc}
   bd11e:	0000      	.short	0x0000
   bd120:	00030220 	.word	0x00030220

000bd124 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bd124:	b508      	push	{r3, lr}
   bd126:	4b02      	ldr	r3, [pc, #8]	; (bd130 <spark_function+0xc>)
   bd128:	681b      	ldr	r3, [r3, #0]
   bd12a:	685b      	ldr	r3, [r3, #4]
   bd12c:	9301      	str	r3, [sp, #4]
   bd12e:	bd08      	pop	{r3, pc}
   bd130:	00030244 	.word	0x00030244

000bd134 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd134:	b508      	push	{r3, lr}
   bd136:	4b02      	ldr	r3, [pc, #8]	; (bd140 <spark_process+0xc>)
   bd138:	681b      	ldr	r3, [r3, #0]
   bd13a:	689b      	ldr	r3, [r3, #8]
   bd13c:	9301      	str	r3, [sp, #4]
   bd13e:	bd08      	pop	{r3, pc}
   bd140:	00030244 	.word	0x00030244

000bd144 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bd144:	b508      	push	{r3, lr}
   bd146:	4b02      	ldr	r3, [pc, #8]	; (bd150 <spark_cloud_flag_connect+0xc>)
   bd148:	681b      	ldr	r3, [r3, #0]
   bd14a:	68db      	ldr	r3, [r3, #12]
   bd14c:	9301      	str	r3, [sp, #4]
   bd14e:	bd08      	pop	{r3, pc}
   bd150:	00030244 	.word	0x00030244

000bd154 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd154:	b508      	push	{r3, lr}
   bd156:	4b02      	ldr	r3, [pc, #8]	; (bd160 <spark_cloud_flag_connected+0xc>)
   bd158:	681b      	ldr	r3, [r3, #0]
   bd15a:	695b      	ldr	r3, [r3, #20]
   bd15c:	9301      	str	r3, [sp, #4]
   bd15e:	bd08      	pop	{r3, pc}
   bd160:	00030244 	.word	0x00030244

000bd164 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bd164:	b508      	push	{r3, lr}
   bd166:	4b02      	ldr	r3, [pc, #8]	; (bd170 <spark_deviceID+0xc>)
   bd168:	681b      	ldr	r3, [r3, #0]
   bd16a:	69db      	ldr	r3, [r3, #28]
   bd16c:	9301      	str	r3, [sp, #4]
   bd16e:	bd08      	pop	{r3, pc}
   bd170:	00030244 	.word	0x00030244

000bd174 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd174:	b508      	push	{r3, lr}
   bd176:	4b02      	ldr	r3, [pc, #8]	; (bd180 <spark_send_event+0xc>)
   bd178:	681b      	ldr	r3, [r3, #0]
   bd17a:	6a1b      	ldr	r3, [r3, #32]
   bd17c:	9301      	str	r3, [sp, #4]
   bd17e:	bd08      	pop	{r3, pc}
   bd180:	00030244 	.word	0x00030244

000bd184 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bd184:	b508      	push	{r3, lr}
   bd186:	4b02      	ldr	r3, [pc, #8]	; (bd190 <spark_sync_time+0xc>)
   bd188:	681b      	ldr	r3, [r3, #0]
   bd18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd18c:	9301      	str	r3, [sp, #4]
   bd18e:	bd08      	pop	{r3, pc}
   bd190:	00030244 	.word	0x00030244

000bd194 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd194:	b508      	push	{r3, lr}
   bd196:	4b02      	ldr	r3, [pc, #8]	; (bd1a0 <spark_sync_time_pending+0xc>)
   bd198:	681b      	ldr	r3, [r3, #0]
   bd19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd19c:	9301      	str	r3, [sp, #4]
   bd19e:	bd08      	pop	{r3, pc}
   bd1a0:	00030244 	.word	0x00030244

000bd1a4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bd1a4:	b508      	push	{r3, lr}
   bd1a6:	4b02      	ldr	r3, [pc, #8]	; (bd1b0 <spark_sync_time_last+0xc>)
   bd1a8:	681b      	ldr	r3, [r3, #0]
   bd1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd1ac:	9301      	str	r3, [sp, #4]
   bd1ae:	bd08      	pop	{r3, pc}
   bd1b0:	00030244 	.word	0x00030244

000bd1b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd1b4:	b508      	push	{r3, lr}
   bd1b6:	4b02      	ldr	r3, [pc, #8]	; (bd1c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd1b8:	681b      	ldr	r3, [r3, #0]
   bd1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd1bc:	9301      	str	r3, [sp, #4]
   bd1be:	bd08      	pop	{r3, pc}
   bd1c0:	00030244 	.word	0x00030244

000bd1c4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bd1c4:	b508      	push	{r3, lr}
   bd1c6:	4b02      	ldr	r3, [pc, #8]	; (bd1d0 <spark_cloud_disconnect+0xc>)
   bd1c8:	681b      	ldr	r3, [r3, #0]
   bd1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd1cc:	9301      	str	r3, [sp, #4]
   bd1ce:	bd08      	pop	{r3, pc}
   bd1d0:	00030244 	.word	0x00030244

000bd1d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd1d4:	b508      	push	{r3, lr}
   bd1d6:	4b02      	ldr	r3, [pc, #8]	; (bd1e0 <network_connect+0xc>)
   bd1d8:	681b      	ldr	r3, [r3, #0]
   bd1da:	685b      	ldr	r3, [r3, #4]
   bd1dc:	9301      	str	r3, [sp, #4]
   bd1de:	bd08      	pop	{r3, pc}
   bd1e0:	00030240 	.word	0x00030240

000bd1e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd1e4:	b508      	push	{r3, lr}
   bd1e6:	4b02      	ldr	r3, [pc, #8]	; (bd1f0 <network_connecting+0xc>)
   bd1e8:	681b      	ldr	r3, [r3, #0]
   bd1ea:	689b      	ldr	r3, [r3, #8]
   bd1ec:	9301      	str	r3, [sp, #4]
   bd1ee:	bd08      	pop	{r3, pc}
   bd1f0:	00030240 	.word	0x00030240

000bd1f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd1f4:	b508      	push	{r3, lr}
   bd1f6:	4b02      	ldr	r3, [pc, #8]	; (bd200 <network_disconnect+0xc>)
   bd1f8:	681b      	ldr	r3, [r3, #0]
   bd1fa:	68db      	ldr	r3, [r3, #12]
   bd1fc:	9301      	str	r3, [sp, #4]
   bd1fe:	bd08      	pop	{r3, pc}
   bd200:	00030240 	.word	0x00030240

000bd204 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd204:	b508      	push	{r3, lr}
   bd206:	4b02      	ldr	r3, [pc, #8]	; (bd210 <network_ready+0xc>)
   bd208:	681b      	ldr	r3, [r3, #0]
   bd20a:	691b      	ldr	r3, [r3, #16]
   bd20c:	9301      	str	r3, [sp, #4]
   bd20e:	bd08      	pop	{r3, pc}
   bd210:	00030240 	.word	0x00030240

000bd214 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd214:	b508      	push	{r3, lr}
   bd216:	4b02      	ldr	r3, [pc, #8]	; (bd220 <network_on+0xc>)
   bd218:	681b      	ldr	r3, [r3, #0]
   bd21a:	695b      	ldr	r3, [r3, #20]
   bd21c:	9301      	str	r3, [sp, #4]
   bd21e:	bd08      	pop	{r3, pc}
   bd220:	00030240 	.word	0x00030240

000bd224 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd224:	b508      	push	{r3, lr}
   bd226:	4b02      	ldr	r3, [pc, #8]	; (bd230 <network_off+0xc>)
   bd228:	681b      	ldr	r3, [r3, #0]
   bd22a:	699b      	ldr	r3, [r3, #24]
   bd22c:	9301      	str	r3, [sp, #4]
   bd22e:	bd08      	pop	{r3, pc}
   bd230:	00030240 	.word	0x00030240

000bd234 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd234:	b508      	push	{r3, lr}
   bd236:	4b02      	ldr	r3, [pc, #8]	; (bd240 <network_listen+0xc>)
   bd238:	681b      	ldr	r3, [r3, #0]
   bd23a:	69db      	ldr	r3, [r3, #28]
   bd23c:	9301      	str	r3, [sp, #4]
   bd23e:	bd08      	pop	{r3, pc}
   bd240:	00030240 	.word	0x00030240

000bd244 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd244:	b508      	push	{r3, lr}
   bd246:	4b02      	ldr	r3, [pc, #8]	; (bd250 <network_listening+0xc>)
   bd248:	681b      	ldr	r3, [r3, #0]
   bd24a:	6a1b      	ldr	r3, [r3, #32]
   bd24c:	9301      	str	r3, [sp, #4]
   bd24e:	bd08      	pop	{r3, pc}
   bd250:	00030240 	.word	0x00030240

000bd254 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd254:	b508      	push	{r3, lr}
   bd256:	4b02      	ldr	r3, [pc, #8]	; (bd260 <network_set_listen_timeout+0xc>)
   bd258:	681b      	ldr	r3, [r3, #0]
   bd25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd25c:	9301      	str	r3, [sp, #4]
   bd25e:	bd08      	pop	{r3, pc}
   bd260:	00030240 	.word	0x00030240

000bd264 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd264:	b508      	push	{r3, lr}
   bd266:	4b02      	ldr	r3, [pc, #8]	; (bd270 <network_get_listen_timeout+0xc>)
   bd268:	681b      	ldr	r3, [r3, #0]
   bd26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd26c:	9301      	str	r3, [sp, #4]
   bd26e:	bd08      	pop	{r3, pc}
   bd270:	00030240 	.word	0x00030240

000bd274 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd274:	b508      	push	{r3, lr}
   bd276:	4b02      	ldr	r3, [pc, #8]	; (bd280 <network_is_on+0xc>)
   bd278:	681b      	ldr	r3, [r3, #0]
   bd27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd27c:	9301      	str	r3, [sp, #4]
   bd27e:	bd08      	pop	{r3, pc}
   bd280:	00030240 	.word	0x00030240

000bd284 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd284:	b508      	push	{r3, lr}
   bd286:	4b02      	ldr	r3, [pc, #8]	; (bd290 <network_is_off+0xc>)
   bd288:	681b      	ldr	r3, [r3, #0]
   bd28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd28c:	9301      	str	r3, [sp, #4]
   bd28e:	bd08      	pop	{r3, pc}
   bd290:	00030240 	.word	0x00030240

000bd294 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd294:	b508      	push	{r3, lr}
   bd296:	4b02      	ldr	r3, [pc, #8]	; (bd2a0 <malloc+0xc>)
   bd298:	681b      	ldr	r3, [r3, #0]
   bd29a:	681b      	ldr	r3, [r3, #0]
   bd29c:	9301      	str	r3, [sp, #4]
   bd29e:	bd08      	pop	{r3, pc}
   bd2a0:	0003021c 	.word	0x0003021c

000bd2a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd2a4:	b508      	push	{r3, lr}
   bd2a6:	4b02      	ldr	r3, [pc, #8]	; (bd2b0 <free+0xc>)
   bd2a8:	681b      	ldr	r3, [r3, #0]
   bd2aa:	685b      	ldr	r3, [r3, #4]
   bd2ac:	9301      	str	r3, [sp, #4]
   bd2ae:	bd08      	pop	{r3, pc}
   bd2b0:	0003021c 	.word	0x0003021c

000bd2b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd2b4:	b508      	push	{r3, lr}
   bd2b6:	4b02      	ldr	r3, [pc, #8]	; (bd2c0 <realloc+0xc>)
   bd2b8:	681b      	ldr	r3, [r3, #0]
   bd2ba:	689b      	ldr	r3, [r3, #8]
   bd2bc:	9301      	str	r3, [sp, #4]
   bd2be:	bd08      	pop	{r3, pc}
   bd2c0:	0003021c 	.word	0x0003021c

000bd2c4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bd2c4:	b508      	push	{r3, lr}
   bd2c6:	4b02      	ldr	r3, [pc, #8]	; (bd2d0 <siprintf+0xc>)
   bd2c8:	681b      	ldr	r3, [r3, #0]
   bd2ca:	691b      	ldr	r3, [r3, #16]
   bd2cc:	9301      	str	r3, [sp, #4]
   bd2ce:	bd08      	pop	{r3, pc}
   bd2d0:	0003021c 	.word	0x0003021c

000bd2d4 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd2d4:	b508      	push	{r3, lr}
   bd2d6:	4b02      	ldr	r3, [pc, #8]	; (bd2e0 <sscanf+0xc>)
   bd2d8:	681b      	ldr	r3, [r3, #0]
   bd2da:	695b      	ldr	r3, [r3, #20]
   bd2dc:	9301      	str	r3, [sp, #4]
   bd2de:	bd08      	pop	{r3, pc}
   bd2e0:	0003021c 	.word	0x0003021c

000bd2e4 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd2e4:	b508      	push	{r3, lr}
   bd2e6:	4b02      	ldr	r3, [pc, #8]	; (bd2f0 <snprintf+0xc>)
   bd2e8:	681b      	ldr	r3, [r3, #0]
   bd2ea:	69db      	ldr	r3, [r3, #28]
   bd2ec:	9301      	str	r3, [sp, #4]
   bd2ee:	bd08      	pop	{r3, pc}
   bd2f0:	0003021c 	.word	0x0003021c

000bd2f4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd2f4:	b508      	push	{r3, lr}
   bd2f6:	4b02      	ldr	r3, [pc, #8]	; (bd300 <vsnprintf+0xc>)
   bd2f8:	681b      	ldr	r3, [r3, #0]
   bd2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd2fc:	9301      	str	r3, [sp, #4]
   bd2fe:	bd08      	pop	{r3, pc}
   bd300:	0003021c 	.word	0x0003021c

000bd304 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd304:	b508      	push	{r3, lr}
   bd306:	4b02      	ldr	r3, [pc, #8]	; (bd310 <abort+0xc>)
   bd308:	681b      	ldr	r3, [r3, #0]
   bd30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd30c:	9301      	str	r3, [sp, #4]
   bd30e:	bd08      	pop	{r3, pc}
   bd310:	0003021c 	.word	0x0003021c

000bd314 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd314:	b508      	push	{r3, lr}
   bd316:	4b02      	ldr	r3, [pc, #8]	; (bd320 <_malloc_r+0xc>)
   bd318:	681b      	ldr	r3, [r3, #0]
   bd31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd31c:	9301      	str	r3, [sp, #4]
   bd31e:	bd08      	pop	{r3, pc}
   bd320:	0003021c 	.word	0x0003021c

000bd324 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd324:	b508      	push	{r3, lr}
   bd326:	4b02      	ldr	r3, [pc, #8]	; (bd330 <__errno+0xc>)
   bd328:	681b      	ldr	r3, [r3, #0]
   bd32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd32c:	9301      	str	r3, [sp, #4]
   bd32e:	bd08      	pop	{r3, pc}
   bd330:	0003021c 	.word	0x0003021c

000bd334 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd334:	b508      	push	{r3, lr}
   bd336:	4b02      	ldr	r3, [pc, #8]	; (bd340 <__assert_func+0xc>)
   bd338:	681b      	ldr	r3, [r3, #0]
   bd33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd33c:	9301      	str	r3, [sp, #4]
   bd33e:	bd08      	pop	{r3, pc}
   bd340:	0003021c 	.word	0x0003021c

000bd344 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd344:	b508      	push	{r3, lr}
   bd346:	4b02      	ldr	r3, [pc, #8]	; (bd350 <newlib_impure_ptr_callback+0xc>)
   bd348:	681b      	ldr	r3, [r3, #0]
   bd34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd34c:	9301      	str	r3, [sp, #4]
   bd34e:	bd08      	pop	{r3, pc}
   bd350:	0003021c 	.word	0x0003021c

000bd354 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bd354:	b508      	push	{r3, lr}
   bd356:	4b02      	ldr	r3, [pc, #8]	; (bd360 <strftime+0xc>)
   bd358:	681b      	ldr	r3, [r3, #0]
   bd35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd35c:	9301      	str	r3, [sp, #4]
   bd35e:	bd08      	pop	{r3, pc}
   bd360:	0003021c 	.word	0x0003021c

000bd364 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd364:	b508      	push	{r3, lr}
   bd366:	4b02      	ldr	r3, [pc, #8]	; (bd370 <localtime_r+0xc>)
   bd368:	681b      	ldr	r3, [r3, #0]
   bd36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd36c:	9301      	str	r3, [sp, #4]
   bd36e:	bd08      	pop	{r3, pc}
   bd370:	0003021c 	.word	0x0003021c

000bd374 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd374:	b508      	push	{r3, lr}
   bd376:	4b02      	ldr	r3, [pc, #8]	; (bd380 <gmtime_r+0xc>)
   bd378:	681b      	ldr	r3, [r3, #0]
   bd37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd37c:	9301      	str	r3, [sp, #4]
   bd37e:	bd08      	pop	{r3, pc}
   bd380:	0003021c 	.word	0x0003021c

000bd384 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd384:	b508      	push	{r3, lr}
   bd386:	4b02      	ldr	r3, [pc, #8]	; (bd390 <mktime+0xc>)
   bd388:	681b      	ldr	r3, [r3, #0]
   bd38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd38c:	9301      	str	r3, [sp, #4]
   bd38e:	bd08      	pop	{r3, pc}
   bd390:	0003021c 	.word	0x0003021c

000bd394 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd394:	2100      	movs	r1, #0
   bd396:	f7ff be5b 	b.w	bd050 <system_delay_ms>

000bd39a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd39a:	b510      	push	{r4, lr}
      if (_M_empty())
   bd39c:	6883      	ldr	r3, [r0, #8]
   bd39e:	4604      	mov	r4, r0
   bd3a0:	b90b      	cbnz	r3, bd3a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd3a2:	f003 f9ad 	bl	c0700 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd3a6:	68c3      	ldr	r3, [r0, #12]
   bd3a8:	4798      	blx	r3
      if (_M_manager)
   bd3aa:	68a3      	ldr	r3, [r4, #8]
   bd3ac:	b11b      	cbz	r3, bd3b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd3ae:	2203      	movs	r2, #3
   bd3b0:	4621      	mov	r1, r4
   bd3b2:	4620      	mov	r0, r4
   bd3b4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd3b6:	4620      	mov	r0, r4
   bd3b8:	2110      	movs	r1, #16
}
   bd3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd3be:	f7f6 be6e 	b.w	b409e <_ZdlPvj>

000bd3c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd3c2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd3c4:	6843      	ldr	r3, [r0, #4]
   bd3c6:	3b01      	subs	r3, #1
    {
   bd3c8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd3ca:	6043      	str	r3, [r0, #4]
   bd3cc:	b963      	cbnz	r3, bd3e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd3ce:	6803      	ldr	r3, [r0, #0]
   bd3d0:	689b      	ldr	r3, [r3, #8]
   bd3d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd3d4:	68a3      	ldr	r3, [r4, #8]
   bd3d6:	3b01      	subs	r3, #1
   bd3d8:	60a3      	str	r3, [r4, #8]
   bd3da:	b92b      	cbnz	r3, bd3e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd3dc:	6823      	ldr	r3, [r4, #0]
   bd3de:	4620      	mov	r0, r4
   bd3e0:	68db      	ldr	r3, [r3, #12]
    }
   bd3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd3e6:	4718      	bx	r3
    }
   bd3e8:	bd10      	pop	{r4, pc}

000bd3ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd3ea:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd3ec:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd3f0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd3f2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd3f6:	42ae      	cmp	r6, r5
   bd3f8:	d004      	beq.n	bd404 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd3fa:	4628      	mov	r0, r5
   bd3fc:	f002 faa4 	bl	bf948 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd400:	3510      	adds	r5, #16
   bd402:	e7f8      	b.n	bd3f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd404:	6820      	ldr	r0, [r4, #0]
   bd406:	f7ff ff4d 	bl	bd2a4 <free>
    AllocatorT::free(data_);
}
   bd40a:	4620      	mov	r0, r4
   bd40c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd410 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd410:	4802      	ldr	r0, [pc, #8]	; (bd41c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd412:	2300      	movs	r3, #0
   bd414:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd416:	f7ff bb51 	b.w	bcabc <os_mutex_recursive_create>
   bd41a:	bf00      	nop
   bd41c:	2003e608 	.word	0x2003e608

000bd420 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd420:	2200      	movs	r2, #0
   bd422:	6840      	ldr	r0, [r0, #4]
   bd424:	4611      	mov	r1, r2
   bd426:	f7ff beed 	b.w	bd204 <network_ready>

000bd42a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd42a:	2200      	movs	r2, #0
   bd42c:	6840      	ldr	r0, [r0, #4]
   bd42e:	4611      	mov	r1, r2
   bd430:	f7ff bf08 	b.w	bd244 <network_listening>

000bd434 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd434:	2200      	movs	r2, #0
   bd436:	6840      	ldr	r0, [r0, #4]
   bd438:	4611      	mov	r1, r2
   bd43a:	f7ff bf13 	b.w	bd264 <network_get_listen_timeout>

000bd43e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd43e:	6840      	ldr	r0, [r0, #4]
   bd440:	2200      	movs	r2, #0
   bd442:	f7ff bf07 	b.w	bd254 <network_set_listen_timeout>

000bd446 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd446:	6840      	ldr	r0, [r0, #4]
   bd448:	2200      	movs	r2, #0
   bd44a:	f081 0101 	eor.w	r1, r1, #1
   bd44e:	f7ff bef1 	b.w	bd234 <network_listen>

000bd452 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd452:	2300      	movs	r3, #0
   bd454:	6840      	ldr	r0, [r0, #4]
   bd456:	461a      	mov	r2, r3
   bd458:	4619      	mov	r1, r3
   bd45a:	f7ff bee3 	b.w	bd224 <network_off>

000bd45e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd45e:	2300      	movs	r3, #0
   bd460:	6840      	ldr	r0, [r0, #4]
   bd462:	461a      	mov	r2, r3
   bd464:	4619      	mov	r1, r3
   bd466:	f7ff bed5 	b.w	bd214 <network_on>

000bd46a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd46a:	2200      	movs	r2, #0
   bd46c:	6840      	ldr	r0, [r0, #4]
   bd46e:	4611      	mov	r1, r2
   bd470:	f7ff beb8 	b.w	bd1e4 <network_connecting>

000bd474 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd474:	6840      	ldr	r0, [r0, #4]
   bd476:	2200      	movs	r2, #0
   bd478:	2102      	movs	r1, #2
   bd47a:	f7ff bebb 	b.w	bd1f4 <network_disconnect>

000bd47e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd47e:	2300      	movs	r3, #0
   bd480:	6840      	ldr	r0, [r0, #4]
   bd482:	461a      	mov	r2, r3
   bd484:	f7ff bea6 	b.w	bd1d4 <network_connect>

000bd488 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd488:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd48a:	4b13      	ldr	r3, [pc, #76]	; (bd4d8 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd48c:	6003      	str	r3, [r0, #0]
   bd48e:	2518      	movs	r5, #24
   bd490:	3330      	adds	r3, #48	; 0x30
   bd492:	b086      	sub	sp, #24
   bd494:	460e      	mov	r6, r1
   bd496:	6043      	str	r3, [r0, #4]
   bd498:	462a      	mov	r2, r5
   bd49a:	2100      	movs	r1, #0
   bd49c:	4604      	mov	r4, r0
   bd49e:	3008      	adds	r0, #8
   bd4a0:	f003 fed6 	bl	c1250 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd4a4:	2200      	movs	r2, #0
   bd4a6:	6870      	ldr	r0, [r6, #4]
   bd4a8:	4611      	mov	r1, r2
   bd4aa:	f7ff feab 	bl	bd204 <network_ready>
   bd4ae:	b178      	cbz	r0, bd4d0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd4b0:	2100      	movs	r1, #0
   bd4b2:	462a      	mov	r2, r5
   bd4b4:	4668      	mov	r0, sp
   bd4b6:	f003 fecb 	bl	c1250 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd4ba:	4669      	mov	r1, sp
   bd4bc:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd4be:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd4c2:	f7ff fabb 	bl	bca3c <cellular_signal>
   bd4c6:	b918      	cbnz	r0, bd4d0 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd4c8:	4669      	mov	r1, sp
   bd4ca:	4620      	mov	r0, r4
   bd4cc:	f000 f8b8 	bl	bd640 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd4d0:	4620      	mov	r0, r4
   bd4d2:	b006      	add	sp, #24
   bd4d4:	bd70      	pop	{r4, r5, r6, pc}
   bd4d6:	bf00      	nop
   bd4d8:	000c53d0 	.word	0x000c53d0

000bd4dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd4dc:	4b08      	ldr	r3, [pc, #32]	; (bd500 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd4de:	b510      	push	{r4, lr}
   bd4e0:	2428      	movs	r4, #40	; 0x28
   bd4e2:	4622      	mov	r2, r4
   bd4e4:	4618      	mov	r0, r3
   bd4e6:	2100      	movs	r1, #0
   bd4e8:	f003 feb2 	bl	c1250 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd4ec:	4b05      	ldr	r3, [pc, #20]	; (bd504 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd4ee:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd4f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd4f4:	6042      	str	r2, [r0, #4]
   bd4f6:	2204      	movs	r2, #4
   bd4f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd4fa:	4a03      	ldr	r2, [pc, #12]	; (bd508 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd4fc:	601a      	str	r2, [r3, #0]
   bd4fe:	bd10      	pop	{r4, pc}
   bd500:	2003e614 	.word	0x2003e614
   bd504:	2003e60c 	.word	0x2003e60c
   bd508:	000c5394 	.word	0x000c5394

000bd50c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd50c:	4770      	bx	lr

000bd50e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd50e:	7b00      	ldrb	r0, [r0, #12]
   bd510:	4770      	bx	lr

000bd512 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd512:	7b03      	ldrb	r3, [r0, #12]
   bd514:	b14b      	cbz	r3, bd52a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd516:	6903      	ldr	r3, [r0, #16]
   bd518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd51c:	d005      	beq.n	bd52a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd51e:	6980      	ldr	r0, [r0, #24]
   bd520:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd524:	bf18      	it	ne
   bd526:	2001      	movne	r0, #1
   bd528:	4770      	bx	lr
   bd52a:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd52c:	4770      	bx	lr

000bd52e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd52e:	6803      	ldr	r3, [r0, #0]
   bd530:	6a1b      	ldr	r3, [r3, #32]
   bd532:	4718      	bx	r3

000bd534 <_ZNK14CellularSignal7printToER5Print>:
{
   bd534:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd536:	6803      	ldr	r3, [r0, #0]
{
   bd538:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd53a:	691b      	ldr	r3, [r3, #16]
{
   bd53c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd53e:	4798      	blx	r3
   bd540:	2102      	movs	r1, #2
   bd542:	4628      	mov	r0, r5
   bd544:	f002 f8de 	bl	bf704 <_ZN5Print5printEfi>
    n += p.print(',');
   bd548:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd54a:	4604      	mov	r4, r0
    n += p.print(',');
   bd54c:	4628      	mov	r0, r5
   bd54e:	f001 ffe3 	bl	bf518 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd552:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd554:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd556:	699b      	ldr	r3, [r3, #24]
   bd558:	4630      	mov	r0, r6
   bd55a:	4798      	blx	r3
   bd55c:	2102      	movs	r1, #2
   bd55e:	4628      	mov	r0, r5
   bd560:	f002 f8d0 	bl	bf704 <_ZN5Print5printEfi>
}
   bd564:	4420      	add	r0, r4
   bd566:	bd70      	pop	{r4, r5, r6, pc}

000bd568 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd568:	f1a0 0004 	sub.w	r0, r0, #4
   bd56c:	f7ff bfe2 	b.w	bd534 <_ZNK14CellularSignal7printToER5Print>

000bd570 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd570:	b510      	push	{r4, lr}
   bd572:	2120      	movs	r1, #32
   bd574:	4604      	mov	r4, r0
   bd576:	f7f6 fd92 	bl	b409e <_ZdlPvj>
   bd57a:	4620      	mov	r0, r4
   bd57c:	bd10      	pop	{r4, pc}
	...

000bd580 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd580:	7b03      	ldrb	r3, [r0, #12]
   bd582:	b17b      	cbz	r3, bd5a4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd584:	6943      	ldr	r3, [r0, #20]
   bd586:	2b00      	cmp	r3, #0
   bd588:	db0c      	blt.n	bd5a4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd58a:	ee07 3a90 	vmov	s15, r3
   bd58e:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd5ac <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd596:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd59a:	eddf 7a05 	vldr	s15, [pc, #20]	; bd5b0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd59e:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd5a2:	4770      	bx	lr
    return -1.0f;
   bd5a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd5a8:	4770      	bx	lr
   bd5aa:	bf00      	nop
   bd5ac:	477fff00 	.word	0x477fff00
   bd5b0:	42c80000 	.word	0x42c80000

000bd5b4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd5b4:	7b03      	ldrb	r3, [r0, #12]
   bd5b6:	b163      	cbz	r3, bd5d2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd5b8:	6903      	ldr	r3, [r0, #16]
   bd5ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd5be:	d008      	beq.n	bd5d2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd5c0:	ee07 3a90 	vmov	s15, r3
   bd5c4:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd5d8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd5c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd5cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd5d0:	4770      	bx	lr
    return 0.0f;
   bd5d2:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd5dc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd5d6:	4770      	bx	lr
   bd5d8:	42c80000 	.word	0x42c80000
   bd5dc:	00000000 	.word	0x00000000

000bd5e0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd5e0:	7b03      	ldrb	r3, [r0, #12]
   bd5e2:	b17b      	cbz	r3, bd604 <_ZNK14CellularSignal10getQualityEv+0x24>
   bd5e4:	69c3      	ldr	r3, [r0, #28]
   bd5e6:	2b00      	cmp	r3, #0
   bd5e8:	db0c      	blt.n	bd604 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd5ea:	ee07 3a90 	vmov	s15, r3
   bd5ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd60c <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd5f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd5f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd5fa:	eddf 7a05 	vldr	s15, [pc, #20]	; bd610 <_ZNK14CellularSignal10getQualityEv+0x30>
   bd5fe:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd602:	4770      	bx	lr
    return -1.0f;
   bd604:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd608:	4770      	bx	lr
   bd60a:	bf00      	nop
   bd60c:	477fff00 	.word	0x477fff00
   bd610:	42c80000 	.word	0x42c80000

000bd614 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd614:	7b03      	ldrb	r3, [r0, #12]
   bd616:	b163      	cbz	r3, bd632 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd618:	6983      	ldr	r3, [r0, #24]
   bd61a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd61e:	d008      	beq.n	bd632 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd620:	ee07 3a90 	vmov	s15, r3
   bd624:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd638 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd62c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd630:	4770      	bx	lr
    return 0.0f;
   bd632:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd63c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd636:	4770      	bx	lr
   bd638:	42c80000 	.word	0x42c80000
   bd63c:	00000000 	.word	0x00000000

000bd640 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd640:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd642:	460d      	mov	r5, r1
   bd644:	f100 0408 	add.w	r4, r0, #8
   bd648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd64c:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd650:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd654:	2001      	movs	r0, #1
   bd656:	bd30      	pop	{r4, r5, pc}

000bd658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd658:	4770      	bx	lr

000bd65a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd65a:	2000      	movs	r0, #0
   bd65c:	4770      	bx	lr

000bd65e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd65e:	b510      	push	{r4, lr}
   bd660:	2110      	movs	r1, #16
   bd662:	4604      	mov	r4, r0
   bd664:	f7f6 fd1b 	bl	b409e <_ZdlPvj>
   bd668:	4620      	mov	r0, r4
   bd66a:	bd10      	pop	{r4, pc}

000bd66c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd66c:	b508      	push	{r3, lr}
      { delete this; }
   bd66e:	f7ff fff6 	bl	bd65e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd672:	bd08      	pop	{r3, pc}

000bd674 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd674:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd676:	2200      	movs	r2, #0
   bd678:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd67c:	6002      	str	r2, [r0, #0]
   bd67e:	8084      	strh	r4, [r0, #4]
   bd680:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd682:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd684:	680c      	ldr	r4, [r1, #0]
   bd686:	8085      	strh	r5, [r0, #4]
   bd688:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd68a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd68c:	bd30      	pop	{r4, r5, pc}

000bd68e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd68e:	b510      	push	{r4, lr}
   bd690:	4604      	mov	r4, r0
    free((void*)msg_);
   bd692:	6800      	ldr	r0, [r0, #0]
   bd694:	f7ff fe06 	bl	bd2a4 <free>
}
   bd698:	4620      	mov	r0, r4
   bd69a:	bd10      	pop	{r4, pc}

000bd69c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd69c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd69e:	68c4      	ldr	r4, [r0, #12]
   bd6a0:	b1f4      	cbz	r4, bd6e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd6a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd6a4:	2b02      	cmp	r3, #2
   bd6a6:	d103      	bne.n	bd6b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd6a8:	f104 000c 	add.w	r0, r4, #12
   bd6ac:	f7ff ffef 	bl	bd68e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd6b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd6b2:	b135      	cbz	r5, bd6c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd6b4:	4628      	mov	r0, r5
   bd6b6:	f7f7 ff10 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   bd6ba:	2110      	movs	r1, #16
   bd6bc:	4628      	mov	r0, r5
   bd6be:	f7f6 fcee 	bl	b409e <_ZdlPvj>
   bd6c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd6c4:	b135      	cbz	r5, bd6d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd6c6:	4628      	mov	r0, r5
   bd6c8:	f7f7 ff07 	bl	b54da <_ZNSt14_Function_baseD1Ev>
   bd6cc:	2110      	movs	r1, #16
   bd6ce:	4628      	mov	r0, r5
   bd6d0:	f7f6 fce5 	bl	b409e <_ZdlPvj>
   bd6d4:	4620      	mov	r0, r4
   bd6d6:	2114      	movs	r1, #20
   bd6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd6dc:	f7f6 bcdf 	b.w	b409e <_ZdlPvj>
   bd6e0:	bd38      	pop	{r3, r4, r5, pc}

000bd6e2 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd6e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd6e4:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd6e6:	4668      	mov	r0, sp
   bd6e8:	f002 f979 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd6ec:	68a3      	ldr	r3, [r4, #8]
   bd6ee:	b90b      	cbnz	r3, bd6f4 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd6f0:	f003 f806 	bl	c0700 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd6f4:	68e3      	ldr	r3, [r4, #12]
   bd6f6:	4669      	mov	r1, sp
   bd6f8:	4620      	mov	r0, r4
   bd6fa:	4798      	blx	r3
   bd6fc:	4604      	mov	r4, r0
   bd6fe:	4668      	mov	r0, sp
   bd700:	f002 f922 	bl	bf948 <_ZN6StringD1Ev>
}
   bd704:	4620      	mov	r0, r4
   bd706:	b004      	add	sp, #16
   bd708:	bd10      	pop	{r4, pc}

000bd70a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd70a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd70c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd70e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd712:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd714:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd716:	461a      	mov	r2, r3
   bd718:	4669      	mov	r1, sp
   bd71a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd71c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd720:	f8ad 4000 	strh.w	r4, [sp]
   bd724:	f7ff fcfe 	bl	bd124 <spark_function>
}
   bd728:	b004      	add	sp, #16
   bd72a:	bd10      	pop	{r4, pc}

000bd72c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd72e:	230c      	movs	r3, #12
   bd730:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd734:	6803      	ldr	r3, [r0, #0]
   bd736:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd73a:	7a03      	ldrb	r3, [r0, #8]
   bd73c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd740:	6843      	ldr	r3, [r0, #4]
   bd742:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd744:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd746:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd748:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd74c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd74e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd752:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd756:	f7ff fd35 	bl	bd1c4 <spark_cloud_disconnect>
}
   bd75a:	b005      	add	sp, #20
   bd75c:	f85d fb04 	ldr.w	pc, [sp], #4

000bd760 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd760:	680b      	ldr	r3, [r1, #0]
   bd762:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd764:	684b      	ldr	r3, [r1, #4]
   bd766:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd768:	b113      	cbz	r3, bd770 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd76a:	685a      	ldr	r2, [r3, #4]
   bd76c:	3201      	adds	r2, #1
   bd76e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd770:	4770      	bx	lr

000bd772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd772:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd774:	4604      	mov	r4, r0
   bd776:	4668      	mov	r0, sp
   bd778:	460d      	mov	r5, r1
   bd77a:	f7ff fff1 	bl	bd760 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd77e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd780:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd782:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd784:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd786:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd788:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd78a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd78c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd78e:	f7f6 ff83 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd792:	b135      	cbz	r5, bd7a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd794:	1d28      	adds	r0, r5, #4
   bd796:	f7f6 ff7f 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd79a:	2108      	movs	r1, #8
   bd79c:	4628      	mov	r0, r5
   bd79e:	f7f6 fc7e 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd7a2:	4620      	mov	r0, r4
   bd7a4:	b003      	add	sp, #12
   bd7a6:	bd30      	pop	{r4, r5, pc}

000bd7a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd7a8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd7aa:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7ac:	b90a      	cbnz	r2, bd7b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd7ae:	f002 ffa7 	bl	c0700 <_ZSt25__throw_bad_function_callv>
    }
   bd7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7b6:	68c3      	ldr	r3, [r0, #12]
   bd7b8:	4718      	bx	r3

000bd7ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd7ba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd7bc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd7be:	f100 0110 	add.w	r1, r0, #16
   bd7c2:	f7ff fff1 	bl	bd7a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd7c6:	bd08      	pop	{r3, pc}

000bd7c8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd7c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd7ca:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7cc:	b90a      	cbnz	r2, bd7d2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd7ce:	f002 ff97 	bl	c0700 <_ZSt25__throw_bad_function_callv>
    }
   bd7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7d6:	68c3      	ldr	r3, [r0, #12]
   bd7d8:	4718      	bx	r3

000bd7da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd7da:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd7dc:	6800      	ldr	r0, [r0, #0]
   bd7de:	f100 0110 	add.w	r1, r0, #16
   bd7e2:	f7ff fff1 	bl	bd7c8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd7e6:	bd08      	pop	{r3, pc}

000bd7e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd7e8:	b538      	push	{r3, r4, r5, lr}
   bd7ea:	2300      	movs	r3, #0
   bd7ec:	4604      	mov	r4, r0
   bd7ee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd7f0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd7f2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd7f4:	f7f6 fc4f 	bl	b4096 <_Znwj>
   bd7f8:	b128      	cbz	r0, bd806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd7fa:	2301      	movs	r3, #1
   bd7fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd800:	4b02      	ldr	r3, [pc, #8]	; (bd80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd802:	6003      	str	r3, [r0, #0]
   bd804:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd806:	6020      	str	r0, [r4, #0]
	}
   bd808:	4620      	mov	r0, r4
   bd80a:	bd38      	pop	{r3, r4, r5, pc}
   bd80c:	000c540c 	.word	0x000c540c

000bd810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd810:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd812:	2300      	movs	r3, #0
   bd814:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd816:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd818:	4604      	mov	r4, r0
   bd81a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd81c:	b12b      	cbz	r3, bd82a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd81e:	2202      	movs	r2, #2
   bd820:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd822:	68eb      	ldr	r3, [r5, #12]
   bd824:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd826:	68ab      	ldr	r3, [r5, #8]
   bd828:	60a3      	str	r3, [r4, #8]
    }
   bd82a:	4620      	mov	r0, r4
   bd82c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd830:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd832:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd834:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd836:	4668      	mov	r0, sp
   bd838:	f7ff ff1c 	bl	bd674 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd83c:	f04f 0302 	mov.w	r3, #2
   bd840:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd844:	2a00      	cmp	r2, #0
   bd846:	d103      	bne.n	bd850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd848:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd84c:	2900      	cmp	r1, #0
   bd84e:	d1f7      	bne.n	bd840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd850:	d125      	bne.n	bd89e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd852:	f104 050c 	add.w	r5, r4, #12
   bd856:	4669      	mov	r1, sp
   bd858:	4628      	mov	r0, r5
   bd85a:	f7ff ff0b 	bl	bd674 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd85e:	f3bf 8f5b 	dmb	ish
   bd862:	2301      	movs	r3, #1
   bd864:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd866:	2000      	movs	r0, #0
   bd868:	f104 0308 	add.w	r3, r4, #8
   bd86c:	f3bf 8f5b 	dmb	ish
   bd870:	e853 6f00 	ldrex	r6, [r3]
   bd874:	e843 0200 	strex	r2, r0, [r3]
   bd878:	2a00      	cmp	r2, #0
   bd87a:	d1f9      	bne.n	bd870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bd87c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd880:	b16e      	cbz	r6, bd89e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bd882:	f7ff fbfd 	bl	bd080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd886:	b178      	cbz	r0, bd8a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd888:	4629      	mov	r1, r5
   bd88a:	4630      	mov	r0, r6
   bd88c:	f7ff ff8c 	bl	bd7a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bd890:	4630      	mov	r0, r6
   bd892:	f7f7 fe22 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd896:	2110      	movs	r1, #16
   bd898:	4630      	mov	r0, r6
   bd89a:	f7f6 fc00 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bd89e:	4668      	mov	r0, sp
   bd8a0:	f7ff fef5 	bl	bd68e <_ZN8particle5ErrorD1Ev>
    }
   bd8a4:	b009      	add	sp, #36	; 0x24
   bd8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd8a8:	4631      	mov	r1, r6
   bd8aa:	a802      	add	r0, sp, #8
   bd8ac:	f7ff ffb0 	bl	bd810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd8b0:	68e0      	ldr	r0, [r4, #12]
   bd8b2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd8b6:	b108      	cbz	r0, bd8bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bd8b8:	f003 fd78 	bl	c13ac <strdup>
        type_(type) {
   bd8bc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd8be:	2010      	movs	r0, #16
   bd8c0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bd8c4:	f7f6 fbe7 	bl	b4096 <_Znwj>
   bd8c8:	4605      	mov	r5, r0
   bd8ca:	b1e8      	cbz	r0, bd908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bd8cc:	2700      	movs	r7, #0
   bd8ce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd8d0:	2018      	movs	r0, #24
   bd8d2:	f7f6 fbe0 	bl	b4096 <_Znwj>
   bd8d6:	4604      	mov	r4, r0
   bd8d8:	b188      	cbz	r0, bd8fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bd8da:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bd8dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd8de:	a802      	add	r0, sp, #8
   bd8e0:	f7fa fee5 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd8e4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd8e6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd8e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd8ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd8ec:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd8ee:	a906      	add	r1, sp, #24
   bd8f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd8f2:	60e3      	str	r3, [r4, #12]
   bd8f4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bd8f8:	9205      	str	r2, [sp, #20]
   bd8fa:	f7ff febb 	bl	bd674 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bd8fe:	4b08      	ldr	r3, [pc, #32]	; (bd920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bd900:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd902:	4b08      	ldr	r3, [pc, #32]	; (bd924 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd904:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd906:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bd908:	a806      	add	r0, sp, #24
   bd90a:	f7ff fec0 	bl	bd68e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd90e:	a802      	add	r0, sp, #8
   bd910:	f7f7 fde3 	bl	b54da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd914:	2200      	movs	r2, #0
   bd916:	4629      	mov	r1, r5
   bd918:	4803      	ldr	r0, [pc, #12]	; (bd928 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bd91a:	f7ff fbb9 	bl	bd090 <application_thread_invoke>
   bd91e:	e7b7      	b.n	bd890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bd920:	000bd7bb 	.word	0x000bd7bb
   bd924:	000bda3d 	.word	0x000bda3d
   bd928:	000bd39b 	.word	0x000bd39b

000bd92c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bd92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd930:	b08b      	sub	sp, #44	; 0x2c
   bd932:	4605      	mov	r5, r0
   bd934:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bd938:	460f      	mov	r7, r1
   bd93a:	4690      	mov	r8, r2
   bd93c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd93e:	f7ff fc09 	bl	bd154 <spark_cloud_flag_connected>
   bd942:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bd944:	4683      	mov	fp, r0
   bd946:	bb38      	cbnz	r0, bd998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bd948:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bd94c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd94e:	a905      	add	r1, sp, #20
   bd950:	4630      	mov	r0, r6
   bd952:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd956:	f7ff fe8d 	bl	bd674 <_ZN8particle5ErrorC1EOS0_>
   bd95a:	2014      	movs	r0, #20
   bd95c:	f7f6 fb9b 	bl	b4096 <_Znwj>
   bd960:	4604      	mov	r4, r0
   bd962:	b148      	cbz	r0, bd978 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bd964:	2302      	movs	r3, #2
   bd966:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd968:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd96a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd96e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bd970:	4631      	mov	r1, r6
   bd972:	300c      	adds	r0, #12
   bd974:	f7ff fe7e 	bl	bd674 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd978:	4628      	mov	r0, r5
	: __shared_count(__p)
   bd97a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd97c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bd980:	f7ff ff32 	bl	bd7e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd984:	4630      	mov	r0, r6
   bd986:	f7ff fe82 	bl	bd68e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bd98a:	a805      	add	r0, sp, #20
   bd98c:	f7ff fe7f 	bl	bd68e <_ZN8particle5ErrorD1Ev>
}
   bd990:	4628      	mov	r0, r5
   bd992:	b00b      	add	sp, #44	; 0x2c
   bd994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bd998:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bd99a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bd99c:	2014      	movs	r0, #20
   bd99e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bd9a2:	9307      	str	r3, [sp, #28]
   bd9a4:	f7f6 fb77 	bl	b4096 <_Znwj>
   bd9a8:	4601      	mov	r1, r0
   bd9aa:	b118      	cbz	r0, bd9b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd9b0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd9b2:	7044      	strb	r4, [r0, #1]
   bd9b4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd9b6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bd9b8:	f7ff ff16 	bl	bd7e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bd9bc:	4b1e      	ldr	r3, [pc, #120]	; (bda38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bd9be:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bd9c0:	2008      	movs	r0, #8
   bd9c2:	f7f6 fb68 	bl	b4096 <_Znwj>
   bd9c6:	4604      	mov	r4, r0
   bd9c8:	b110      	cbz	r0, bd9d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bd9ca:	a903      	add	r1, sp, #12
   bd9cc:	f7ff fec8 	bl	bd760 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd9d0:	9600      	str	r6, [sp, #0]
   bd9d2:	fa5f f38a 	uxtb.w	r3, sl
   bd9d6:	464a      	mov	r2, r9
   bd9d8:	4641      	mov	r1, r8
   bd9da:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bd9dc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd9de:	f7ff fbc9 	bl	bd174 <spark_send_event>
   bd9e2:	b9b8      	cbnz	r0, bda14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bd9e4:	9b03      	ldr	r3, [sp, #12]
   bd9e6:	785b      	ldrb	r3, [r3, #1]
   bd9e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bd9ec:	b993      	cbnz	r3, bda14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bd9ee:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bd9f2:	a905      	add	r1, sp, #20
   bd9f4:	a803      	add	r0, sp, #12
   bd9f6:	9205      	str	r2, [sp, #20]
   bd9f8:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd9fc:	f7ff ff18 	bl	bd830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bda00:	a805      	add	r0, sp, #20
   bda02:	f7ff fe44 	bl	bd68e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bda06:	a805      	add	r0, sp, #20
   bda08:	9909      	ldr	r1, [sp, #36]	; 0x24
   bda0a:	f7ff feb2 	bl	bd772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bda0e:	a806      	add	r0, sp, #24
   bda10:	f7f6 fe42 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda14:	a903      	add	r1, sp, #12
   bda16:	a805      	add	r0, sp, #20
   bda18:	f7ff fea2 	bl	bd760 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bda1c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bda1e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bda20:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bda22:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bda24:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bda26:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bda28:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bda2a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bda2c:	f7f6 fe34 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda30:	a804      	add	r0, sp, #16
   bda32:	f7f6 fe31 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bda36:	e7ab      	b.n	bd990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bda38:	000bdab9 	.word	0x000bdab9

000bda3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bda3c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bda3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bda40:	4605      	mov	r5, r0
	switch (__op)
   bda42:	d103      	bne.n	bda4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bda44:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bda46:	6003      	str	r3, [r0, #0]
      }
   bda48:	2000      	movs	r0, #0
   bda4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bda4c:	2a02      	cmp	r2, #2
   bda4e:	d010      	beq.n	bda72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bda50:	2a03      	cmp	r2, #3
   bda52:	d1f9      	bne.n	bda48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bda54:	6804      	ldr	r4, [r0, #0]
   bda56:	2c00      	cmp	r4, #0
   bda58:	d0f6      	beq.n	bda48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bda5a:	f104 0010 	add.w	r0, r4, #16
   bda5e:	f7ff fe16 	bl	bd68e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bda62:	4620      	mov	r0, r4
   bda64:	f7f7 fd39 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bda68:	2118      	movs	r1, #24
   bda6a:	4620      	mov	r0, r4
   bda6c:	f7f6 fb17 	bl	b409e <_ZdlPvj>
   bda70:	e7ea      	b.n	bda48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bda72:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bda74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bda76:	f7f6 fb0e 	bl	b4096 <_Znwj>
   bda7a:	4604      	mov	r4, r0
   bda7c:	b150      	cbz	r0, bda94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bda7e:	4631      	mov	r1, r6
   bda80:	f7ff fec6 	bl	bd810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bda84:	6930      	ldr	r0, [r6, #16]
   bda86:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bda8a:	b108      	cbz	r0, bda90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bda8c:	f003 fc8e 	bl	c13ac <strdup>
        type_(type) {
   bda90:	6120      	str	r0, [r4, #16]
   bda92:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bda94:	602c      	str	r4, [r5, #0]
	}
   bda96:	e7d7      	b.n	bda48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bda98 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bda98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bda9a:	2300      	movs	r3, #0
   bda9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bda9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bdaa0:	4604      	mov	r4, r0
   bdaa2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bdaa4:	b12b      	cbz	r3, bdab2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bdaa6:	2202      	movs	r2, #2
   bdaa8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bdaaa:	68eb      	ldr	r3, [r5, #12]
   bdaac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bdaae:	68ab      	ldr	r3, [r5, #8]
   bdab0:	60a3      	str	r3, [r4, #8]
    }
   bdab2:	4620      	mov	r0, r4
   bdab4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bdab8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bdab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdaba:	b089      	sub	sp, #36	; 0x24
   bdabc:	4604      	mov	r4, r0
   bdabe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bdac0:	a801      	add	r0, sp, #4
   bdac2:	4611      	mov	r1, r2
   bdac4:	f7ff fe55 	bl	bd772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bdac8:	b1a4      	cbz	r4, bdaf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bdaca:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdacc:	b11d      	cbz	r5, bdad6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bdace:	4628      	mov	r0, r5
   bdad0:	f003 fc6c 	bl	c13ac <strdup>
   bdad4:	4605      	mov	r5, r0
   bdad6:	a801      	add	r0, sp, #4
   bdad8:	a903      	add	r1, sp, #12
        type_(type) {
   bdada:	9503      	str	r5, [sp, #12]
   bdadc:	f8ad 4010 	strh.w	r4, [sp, #16]
   bdae0:	f7ff fea6 	bl	bd830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdae4:	a803      	add	r0, sp, #12
   bdae6:	f7ff fdd2 	bl	bd68e <_ZN8particle5ErrorD1Ev>
   bdaea:	a802      	add	r0, sp, #8
   bdaec:	f7f6 fdd4 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdaf0:	b009      	add	sp, #36	; 0x24
   bdaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bdaf4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bdaf6:	2301      	movs	r3, #1
   bdaf8:	e8d5 2f4f 	ldrexb	r2, [r5]
   bdafc:	2a00      	cmp	r2, #0
   bdafe:	d103      	bne.n	bdb08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bdb00:	e8c5 3f41 	strexb	r1, r3, [r5]
   bdb04:	2900      	cmp	r1, #0
   bdb06:	d1f7      	bne.n	bdaf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bdb08:	d1ef      	bne.n	bdaea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bdb0a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bdb0c:	f3bf 8f5b 	dmb	ish
   bdb10:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bdb12:	1d2b      	adds	r3, r5, #4
   bdb14:	f3bf 8f5b 	dmb	ish
   bdb18:	e853 6f00 	ldrex	r6, [r3]
   bdb1c:	e843 4200 	strex	r2, r4, [r3]
   bdb20:	2a00      	cmp	r2, #0
   bdb22:	d1f9      	bne.n	bdb18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bdb24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bdb28:	2e00      	cmp	r6, #0
   bdb2a:	d0de      	beq.n	bdaea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bdb2c:	4620      	mov	r0, r4
   bdb2e:	f7ff faa7 	bl	bd080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bdb32:	4607      	mov	r7, r0
   bdb34:	b160      	cbz	r0, bdb50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bdb36:	f105 010c 	add.w	r1, r5, #12
   bdb3a:	4630      	mov	r0, r6
   bdb3c:	f7ff fe44 	bl	bd7c8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bdb40:	4630      	mov	r0, r6
   bdb42:	f7f7 fcca 	bl	b54da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bdb46:	2110      	movs	r1, #16
   bdb48:	4630      	mov	r0, r6
   bdb4a:	f7f6 faa8 	bl	b409e <_ZdlPvj>
   bdb4e:	e7cc      	b.n	bdaea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdb50:	4631      	mov	r1, r6
   bdb52:	a803      	add	r0, sp, #12
   bdb54:	f7ff ffa0 	bl	bda98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdb58:	7b2b      	ldrb	r3, [r5, #12]
   bdb5a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bdb5e:	2010      	movs	r0, #16
   bdb60:	f7f6 fa99 	bl	b4096 <_Znwj>
   bdb64:	4605      	mov	r5, r0
   bdb66:	b1d0      	cbz	r0, bdb9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bdb68:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdb6a:	2014      	movs	r0, #20
   bdb6c:	f7f6 fa93 	bl	b4096 <_Znwj>
   bdb70:	4604      	mov	r4, r0
   bdb72:	b178      	cbz	r0, bdb94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bdb74:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bdb76:	4601      	mov	r1, r0
   bdb78:	a803      	add	r0, sp, #12
   bdb7a:	f7fa fd98 	bl	b86ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdb7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdb80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb82:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdb84:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bdb86:	9205      	str	r2, [sp, #20]
   bdb88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb8a:	60e3      	str	r3, [r4, #12]
   bdb8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bdb90:	9206      	str	r2, [sp, #24]
   bdb92:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bdb94:	4b06      	ldr	r3, [pc, #24]	; (bdbb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bdb96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdb98:	4b06      	ldr	r3, [pc, #24]	; (bdbb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdb9a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdb9c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bdb9e:	a803      	add	r0, sp, #12
   bdba0:	f7f7 fc9b 	bl	b54da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bdba4:	2200      	movs	r2, #0
   bdba6:	4629      	mov	r1, r5
   bdba8:	4803      	ldr	r0, [pc, #12]	; (bdbb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bdbaa:	f7ff fa71 	bl	bd090 <application_thread_invoke>
   bdbae:	e7c7      	b.n	bdb40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bdbb0:	000bd7db 	.word	0x000bd7db
   bdbb4:	000bdbbd 	.word	0x000bdbbd
   bdbb8:	000bd39b 	.word	0x000bd39b

000bdbbc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bdbbc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bdbbe:	b570      	push	{r4, r5, r6, lr}
   bdbc0:	4604      	mov	r4, r0
	switch (__op)
   bdbc2:	d103      	bne.n	bdbcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bdbc4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bdbc6:	6003      	str	r3, [r0, #0]
      }
   bdbc8:	2000      	movs	r0, #0
   bdbca:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bdbcc:	2a02      	cmp	r2, #2
   bdbce:	d00c      	beq.n	bdbea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bdbd0:	2a03      	cmp	r2, #3
   bdbd2:	d1f9      	bne.n	bdbc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdbd4:	6804      	ldr	r4, [r0, #0]
   bdbd6:	2c00      	cmp	r4, #0
   bdbd8:	d0f6      	beq.n	bdbc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bdbda:	4620      	mov	r0, r4
   bdbdc:	f7f7 fc7d 	bl	b54da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bdbe0:	2114      	movs	r1, #20
   bdbe2:	4620      	mov	r0, r4
   bdbe4:	f7f6 fa5b 	bl	b409e <_ZdlPvj>
   bdbe8:	e7ee      	b.n	bdbc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bdbea:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bdbec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bdbee:	f7f6 fa52 	bl	b4096 <_Znwj>
   bdbf2:	4605      	mov	r5, r0
   bdbf4:	b120      	cbz	r0, bdc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bdbf6:	4631      	mov	r1, r6
   bdbf8:	f7ff ff4e 	bl	bda98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bdbfc:	7c33      	ldrb	r3, [r6, #16]
   bdbfe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bdc00:	6025      	str	r5, [r4, #0]
	}
   bdc02:	e7e1      	b.n	bdbc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bdc04 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bdc04:	2200      	movs	r2, #0
   bdc06:	6840      	ldr	r0, [r0, #4]
   bdc08:	4611      	mov	r1, r2
   bdc0a:	f7ff bb1b 	b.w	bd244 <network_listening>

000bdc0e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bdc0e:	2200      	movs	r2, #0
   bdc10:	6840      	ldr	r0, [r0, #4]
   bdc12:	4611      	mov	r1, r2
   bdc14:	f7ff bb26 	b.w	bd264 <network_get_listen_timeout>

000bdc18 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bdc18:	6840      	ldr	r0, [r0, #4]
   bdc1a:	2200      	movs	r2, #0
   bdc1c:	f7ff bb1a 	b.w	bd254 <network_set_listen_timeout>

000bdc20 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bdc20:	6840      	ldr	r0, [r0, #4]
   bdc22:	2200      	movs	r2, #0
   bdc24:	f081 0101 	eor.w	r1, r1, #1
   bdc28:	f7ff bb04 	b.w	bd234 <network_listen>

000bdc2c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bdc2c:	2300      	movs	r3, #0
   bdc2e:	6840      	ldr	r0, [r0, #4]
   bdc30:	461a      	mov	r2, r3
   bdc32:	4619      	mov	r1, r3
   bdc34:	f7ff baf6 	b.w	bd224 <network_off>

000bdc38 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bdc38:	2300      	movs	r3, #0
   bdc3a:	6840      	ldr	r0, [r0, #4]
   bdc3c:	461a      	mov	r2, r3
   bdc3e:	4619      	mov	r1, r3
   bdc40:	f7ff bae8 	b.w	bd214 <network_on>

000bdc44 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bdc44:	2200      	movs	r2, #0
   bdc46:	6840      	ldr	r0, [r0, #4]
   bdc48:	4611      	mov	r1, r2
   bdc4a:	f7ff badb 	b.w	bd204 <network_ready>

000bdc4e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bdc4e:	2200      	movs	r2, #0
   bdc50:	6840      	ldr	r0, [r0, #4]
   bdc52:	4611      	mov	r1, r2
   bdc54:	f7ff bac6 	b.w	bd1e4 <network_connecting>

000bdc58 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bdc58:	6840      	ldr	r0, [r0, #4]
   bdc5a:	2200      	movs	r2, #0
   bdc5c:	2102      	movs	r1, #2
   bdc5e:	f7ff bac9 	b.w	bd1f4 <network_disconnect>

000bdc62 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bdc62:	2300      	movs	r3, #0
   bdc64:	6840      	ldr	r0, [r0, #4]
   bdc66:	461a      	mov	r2, r3
   bdc68:	f7ff bab4 	b.w	bd1d4 <network_connect>

000bdc6c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bdc6c:	4b02      	ldr	r3, [pc, #8]	; (bdc78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bdc6e:	2203      	movs	r2, #3
   bdc70:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bdc72:	4a02      	ldr	r2, [pc, #8]	; (bdc7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bdc74:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bdc76:	4770      	bx	lr
   bdc78:	2003e63c 	.word	0x2003e63c
   bdc7c:	000c5428 	.word	0x000c5428

000bdc80 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bdc80:	6800      	ldr	r0, [r0, #0]
   bdc82:	f000 b8f3 	b.w	bde6c <_ZN7TwoWire4lockEv>

000bdc86 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bdc86:	b510      	push	{r4, lr}
   bdc88:	4604      	mov	r4, r0
      lock_(_lock) {
   bdc8a:	6001      	str	r1, [r0, #0]
   bdc8c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bdc8e:	b10a      	cbz	r2, bdc94 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bdc90:	f7ff fff6 	bl	bdc80 <_ZN9FuelGauge4lockEv>
}
   bdc94:	4620      	mov	r0, r4
   bdc96:	bd10      	pop	{r4, pc}

000bdc98 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bdc98:	b513      	push	{r0, r1, r4, lr}
   bdc9a:	4604      	mov	r4, r0
   bdc9c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bdc9e:	f002 fcc1 	bl	c0624 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bdca2:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bdca4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bdca6:	4620      	mov	r0, r4
   bdca8:	f7ff ffed 	bl	bdc86 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bdcac:	4620      	mov	r0, r4
   bdcae:	b002      	add	sp, #8
   bdcb0:	bd10      	pop	{r4, pc}

000bdcb2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bdcb2:	6800      	ldr	r0, [r0, #0]
   bdcb4:	f000 b8e3 	b.w	bde7e <_ZN7TwoWire6unlockEv>

000bdcb8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bdcb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bdcbc:	4604      	mov	r4, r0
   bdcbe:	461d      	mov	r5, r3
   bdcc0:	460f      	mov	r7, r1
   bdcc2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bdcc4:	f7ff ffdc 	bl	bdc80 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdcc8:	2236      	movs	r2, #54	; 0x36
   bdcca:	2300      	movs	r3, #0
   bdccc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bdcd0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bdcd2:	f04f 0801 	mov.w	r8, #1
   bdcd6:	230a      	movs	r3, #10
   bdcd8:	4669      	mov	r1, sp
   bdcda:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bdcde:	f000 f8a9 	bl	bde34 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bdce2:	6820      	ldr	r0, [r4, #0]
   bdce4:	6803      	ldr	r3, [r0, #0]
   bdce6:	4639      	mov	r1, r7
   bdce8:	689b      	ldr	r3, [r3, #8]
   bdcea:	4798      	blx	r3
    i2c_.write(MSB);
   bdcec:	6820      	ldr	r0, [r4, #0]
   bdcee:	6803      	ldr	r3, [r0, #0]
   bdcf0:	4631      	mov	r1, r6
   bdcf2:	689b      	ldr	r3, [r3, #8]
   bdcf4:	4798      	blx	r3
    i2c_.write(LSB);
   bdcf6:	6820      	ldr	r0, [r4, #0]
   bdcf8:	6803      	ldr	r3, [r0, #0]
   bdcfa:	4629      	mov	r1, r5
   bdcfc:	689b      	ldr	r3, [r3, #8]
   bdcfe:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bdd00:	4641      	mov	r1, r8
   bdd02:	6820      	ldr	r0, [r4, #0]
   bdd04:	f000 f8ae 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
   bdd08:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bdd0a:	4620      	mov	r0, r4
   bdd0c:	bf0c      	ite	eq
   bdd0e:	2500      	moveq	r5, #0
   bdd10:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bdd14:	f7ff ffcd 	bl	bdcb2 <_ZN9FuelGauge6unlockEv>
}
   bdd18:	4628      	mov	r0, r5
   bdd1a:	b004      	add	sp, #16
   bdd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdd20 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bdd20:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bdd22:	2240      	movs	r2, #64	; 0x40
   bdd24:	2300      	movs	r3, #0
   bdd26:	2106      	movs	r1, #6
   bdd28:	f7ff ffc6 	bl	bdcb8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bdd2c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdd30:	bd08      	pop	{r3, pc}

000bdd32 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bdd32:	4770      	bx	lr

000bdd34 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bdd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdd36:	4606      	mov	r6, r0
   bdd38:	4615      	mov	r5, r2
   bdd3a:	460c      	mov	r4, r1
   bdd3c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bdd3e:	42bc      	cmp	r4, r7
   bdd40:	d006      	beq.n	bdd50 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bdd42:	6833      	ldr	r3, [r6, #0]
   bdd44:	f814 1b01 	ldrb.w	r1, [r4], #1
   bdd48:	689b      	ldr	r3, [r3, #8]
   bdd4a:	4630      	mov	r0, r6
   bdd4c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bdd4e:	e7f6      	b.n	bdd3e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bdd50:	4628      	mov	r0, r5
   bdd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdd54 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bdd54:	7c00      	ldrb	r0, [r0, #16]
   bdd56:	2200      	movs	r2, #0
   bdd58:	f7fe bf80 	b.w	bcc5c <hal_i2c_write>

000bdd5c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bdd5c:	7c00      	ldrb	r0, [r0, #16]
   bdd5e:	2100      	movs	r1, #0
   bdd60:	f7fe bf84 	b.w	bcc6c <hal_i2c_available>

000bdd64 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bdd64:	7c00      	ldrb	r0, [r0, #16]
   bdd66:	2100      	movs	r1, #0
   bdd68:	f7fe bf88 	b.w	bcc7c <hal_i2c_read>

000bdd6c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bdd6c:	7c00      	ldrb	r0, [r0, #16]
   bdd6e:	2100      	movs	r1, #0
   bdd70:	f7fe bf8c 	b.w	bcc8c <hal_i2c_peek>

000bdd74 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bdd74:	7c00      	ldrb	r0, [r0, #16]
   bdd76:	2100      	movs	r1, #0
   bdd78:	f7fe bf90 	b.w	bcc9c <hal_i2c_flush>

000bdd7c <_ZN7TwoWireD0Ev>:
   bdd7c:	b510      	push	{r4, lr}
   bdd7e:	2114      	movs	r1, #20
   bdd80:	4604      	mov	r4, r0
   bdd82:	f7f6 f98c 	bl	b409e <_ZdlPvj>
   bdd86:	4620      	mov	r0, r4
   bdd88:	bd10      	pop	{r4, pc}
	...

000bdd8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdd8c:	b538      	push	{r3, r4, r5, lr}
   bdd8e:	4604      	mov	r4, r0
   bdd90:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bdd92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdd96:	2200      	movs	r2, #0
   bdd98:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdd9c:	4b09      	ldr	r3, [pc, #36]	; (bddc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bdd9e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdda0:	4608      	mov	r0, r1
   bdda2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bdda4:	4629      	mov	r1, r5
   bdda6:	f7fe ff89 	bl	bccbc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bddaa:	30bf      	adds	r0, #191	; 0xbf
   bddac:	d108      	bne.n	bddc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bddae:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bddb0:	07db      	lsls	r3, r3, #31
   bddb2:	d505      	bpl.n	bddc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bddb4:	6868      	ldr	r0, [r5, #4]
   bddb6:	f7ff fa75 	bl	bd2a4 <free>
    free(conf.tx_buffer);
   bddba:	68e8      	ldr	r0, [r5, #12]
   bddbc:	f7ff fa72 	bl	bd2a4 <free>
}
   bddc0:	4620      	mov	r0, r4
   bddc2:	bd38      	pop	{r3, r4, r5, pc}
   bddc4:	000c5464 	.word	0x000c5464

000bddc8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bddc8:	2300      	movs	r3, #0
   bddca:	7c00      	ldrb	r0, [r0, #16]
   bddcc:	461a      	mov	r2, r3
   bddce:	4619      	mov	r1, r3
   bddd0:	f7fe bf2c 	b.w	bcc2c <hal_i2c_begin>

000bddd4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bddd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bddd6:	2200      	movs	r2, #0
   bddd8:	2314      	movs	r3, #20
   bddda:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bddde:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bdde2:	780b      	ldrb	r3, [r1, #0]
   bdde4:	f88d 3008 	strb.w	r3, [sp, #8]
   bdde8:	684b      	ldr	r3, [r1, #4]
   bddea:	9303      	str	r3, [sp, #12]
   bddec:	68cb      	ldr	r3, [r1, #12]
   bddee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bddf0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bddf2:	7a0b      	ldrb	r3, [r1, #8]
   bddf4:	9305      	str	r3, [sp, #20]
   bddf6:	a901      	add	r1, sp, #4
   bddf8:	f7fe ff78 	bl	bccec <hal_i2c_request_ex>
}
   bddfc:	b007      	add	sp, #28
   bddfe:	f85d fb04 	ldr.w	pc, [sp], #4

000bde02 <_ZN7TwoWire11requestFromEhjh>:
{
   bde02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bde04:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bde06:	f88d 1000 	strb.w	r1, [sp]
   bde0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bde0e:	9103      	str	r1, [sp, #12]
   bde10:	bf18      	it	ne
   bde12:	2301      	movne	r3, #1
   bde14:	4669      	mov	r1, sp
    size_ = size;
   bde16:	9201      	str	r2, [sp, #4]
   bde18:	f88d 3008 	strb.w	r3, [sp, #8]
   bde1c:	f7ff ffda 	bl	bddd4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bde20:	b005      	add	sp, #20
   bde22:	f85d fb04 	ldr.w	pc, [sp], #4

000bde26 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bde26:	7c00      	ldrb	r0, [r0, #16]
   bde28:	2200      	movs	r2, #0
   bde2a:	f7fe bf07 	b.w	bcc3c <hal_i2c_begin_transmission>

000bde2e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bde2e:	b2c9      	uxtb	r1, r1
   bde30:	f7ff bff9 	b.w	bde26 <_ZN7TwoWire17beginTransmissionEh>

000bde34 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bde34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bde36:	2300      	movs	r3, #0
   bde38:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bde3c:	684a      	ldr	r2, [r1, #4]
   bde3e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bde40:	2314      	movs	r3, #20
    };
   bde42:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bde44:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bde48:	780b      	ldrb	r3, [r1, #0]
    };
   bde4a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bde4c:	7a0a      	ldrb	r2, [r1, #8]
   bde4e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bde50:	7c00      	ldrb	r0, [r0, #16]
    };
   bde52:	f88d 3008 	strb.w	r3, [sp, #8]
   bde56:	aa01      	add	r2, sp, #4
   bde58:	4619      	mov	r1, r3
   bde5a:	f7fe feef 	bl	bcc3c <hal_i2c_begin_transmission>
}
   bde5e:	b007      	add	sp, #28
   bde60:	f85d fb04 	ldr.w	pc, [sp], #4

000bde64 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bde64:	7c00      	ldrb	r0, [r0, #16]
   bde66:	2200      	movs	r2, #0
   bde68:	f7fe bef0 	b.w	bcc4c <hal_i2c_end_transmission>

000bde6c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bde6c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bde6e:	2100      	movs	r1, #0
   bde70:	7c00      	ldrb	r0, [r0, #16]
   bde72:	f7fe ff2b 	bl	bcccc <hal_i2c_lock>
}
   bde76:	fab0 f080 	clz	r0, r0
   bde7a:	0940      	lsrs	r0, r0, #5
   bde7c:	bd08      	pop	{r3, pc}

000bde7e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bde7e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bde80:	2100      	movs	r1, #0
   bde82:	7c00      	ldrb	r0, [r0, #16]
   bde84:	f7fe ff2a 	bl	bccdc <hal_i2c_unlock>
}
   bde88:	fab0 f080 	clz	r0, r0
   bde8c:	0940      	lsrs	r0, r0, #5
   bde8e:	bd08      	pop	{r3, pc}

000bde90 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bde90:	4700      	bx	r0
	...

000bde94 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bde94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bde98:	2400      	movs	r4, #0
{
   bde9a:	461d      	mov	r5, r3
   bde9c:	460f      	mov	r7, r1
   bde9e:	4690      	mov	r8, r2
   bdea0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bdea2:	f7fe feb3 	bl	bcc0c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bdea6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdea8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bdeac:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdeb0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bdeb4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bdeb8:	bfa2      	ittt	ge
   bdeba:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bdebe:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bdec2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdec4:	4907      	ldr	r1, [pc, #28]	; (bdee4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bdec6:	9400      	str	r4, [sp, #0]
   bdec8:	4643      	mov	r3, r8
   bdeca:	463a      	mov	r2, r7
   bdecc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bdece:	bfa8      	it	ge
   bded0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bded4:	f7fe fe92 	bl	bcbfc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bded8:	fab0 f080 	clz	r0, r0
   bdedc:	0940      	lsrs	r0, r0, #5
   bdede:	b004      	add	sp, #16
   bdee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdee4:	000bde91 	.word	0x000bde91

000bdee8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bdee8:	4770      	bx	lr

000bdeea <_ZN9IPAddressD0Ev>:
   bdeea:	b510      	push	{r4, lr}
   bdeec:	2118      	movs	r1, #24
   bdeee:	4604      	mov	r4, r0
   bdef0:	f7f6 f8d5 	bl	b409e <_ZdlPvj>
   bdef4:	4620      	mov	r0, r4
   bdef6:	bd10      	pop	{r4, pc}

000bdef8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bdef8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bdefa:	7d03      	ldrb	r3, [r0, #20]
   bdefc:	2b06      	cmp	r3, #6
{
   bdefe:	b08d      	sub	sp, #52	; 0x34
   bdf00:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf02:	f100 0704 	add.w	r7, r0, #4
   bdf06:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bdf0a:	d012      	beq.n	bdf32 <_ZNK9IPAddress7printToER5Print+0x3a>
   bdf0c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bdf10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bdf14:	220a      	movs	r2, #10
   bdf16:	4630      	mov	r0, r6
   bdf18:	f001 fb0d 	bl	bf536 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bdf1c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bdf1e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bdf20:	d019      	beq.n	bdf56 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bdf22:	2c00      	cmp	r4, #0
   bdf24:	d0f4      	beq.n	bdf10 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bdf26:	212e      	movs	r1, #46	; 0x2e
   bdf28:	4630      	mov	r0, r6
   bdf2a:	f001 faf5 	bl	bf518 <_ZN5Print5printEc>
   bdf2e:	4404      	add	r4, r0
   bdf30:	e7ee      	b.n	bdf10 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf32:	232f      	movs	r3, #47	; 0x2f
   bdf34:	466a      	mov	r2, sp
   bdf36:	4639      	mov	r1, r7
   bdf38:	200a      	movs	r0, #10
		buf[0] = 0;
   bdf3a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf3e:	f7fe fedd 	bl	bccfc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bdf42:	4668      	mov	r0, sp
   bdf44:	f003 fa4f 	bl	c13e6 <strlen>
   bdf48:	6833      	ldr	r3, [r6, #0]
   bdf4a:	4602      	mov	r2, r0
   bdf4c:	68db      	ldr	r3, [r3, #12]
   bdf4e:	4669      	mov	r1, sp
   bdf50:	4630      	mov	r0, r6
   bdf52:	4798      	blx	r3
   bdf54:	4604      	mov	r4, r0
    }
    return n;
}
   bdf56:	4620      	mov	r0, r4
   bdf58:	b00d      	add	sp, #52	; 0x34
   bdf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdf5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bdf5c:	b510      	push	{r4, lr}
   bdf5e:	4b05      	ldr	r3, [pc, #20]	; (bdf74 <_ZN9IPAddressC1Ev+0x18>)
   bdf60:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bdf62:	2211      	movs	r2, #17
   bdf64:	f840 3b04 	str.w	r3, [r0], #4
   bdf68:	2100      	movs	r1, #0
   bdf6a:	f003 f971 	bl	c1250 <memset>
}
   bdf6e:	4620      	mov	r0, r4
   bdf70:	bd10      	pop	{r4, pc}
   bdf72:	bf00      	nop
   bdf74:	000c548c 	.word	0x000c548c

000bdf78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bdf78:	4603      	mov	r3, r0
   bdf7a:	4a07      	ldr	r2, [pc, #28]	; (bdf98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bdf7c:	b510      	push	{r4, lr}
   bdf7e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bdf82:	f101 0210 	add.w	r2, r1, #16
   bdf86:	f851 4b04 	ldr.w	r4, [r1], #4
   bdf8a:	f843 4b04 	str.w	r4, [r3], #4
   bdf8e:	4291      	cmp	r1, r2
   bdf90:	d1f9      	bne.n	bdf86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bdf92:	780a      	ldrb	r2, [r1, #0]
   bdf94:	701a      	strb	r2, [r3, #0]
}
   bdf96:	bd10      	pop	{r4, pc}
   bdf98:	000c548c 	.word	0x000c548c

000bdf9c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bdf9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bdf9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bdfa2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bdfa6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bdfaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bdfae:	2304      	movs	r3, #4
   bdfb0:	6041      	str	r1, [r0, #4]
   bdfb2:	7503      	strb	r3, [r0, #20]
}
   bdfb4:	bd10      	pop	{r4, pc}
	...

000bdfb8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bdfb8:	b507      	push	{r0, r1, r2, lr}
   bdfba:	4b06      	ldr	r3, [pc, #24]	; (bdfd4 <_ZN9IPAddressC1EPKh+0x1c>)
   bdfbc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bdfbe:	78cb      	ldrb	r3, [r1, #3]
   bdfc0:	9300      	str	r3, [sp, #0]
   bdfc2:	788b      	ldrb	r3, [r1, #2]
   bdfc4:	784a      	ldrb	r2, [r1, #1]
   bdfc6:	7809      	ldrb	r1, [r1, #0]
   bdfc8:	f7ff ffe8 	bl	bdf9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bdfcc:	b003      	add	sp, #12
   bdfce:	f85d fb04 	ldr.w	pc, [sp], #4
   bdfd2:	bf00      	nop
   bdfd4:	000c548c 	.word	0x000c548c

000bdfd8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bdfd8:	f100 0310 	add.w	r3, r0, #16
   bdfdc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bdfde:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bdfe2:	2901      	cmp	r1, #1
   bdfe4:	4618      	mov	r0, r3
   bdfe6:	d108      	bne.n	bdffa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bdfe8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bdfec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bdff0:	3a01      	subs	r2, #1
   bdff2:	f103 0310 	add.w	r3, r3, #16
   bdff6:	d1f2      	bne.n	bdfde <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bdff8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bdffa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bdffc:	bf04      	itt	eq
   bdffe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   be002:	1852      	addeq	r2, r2, r1
   be004:	e7f4      	b.n	bdff0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000be006 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   be006:	b40e      	push	{r1, r2, r3}
   be008:	b5f0      	push	{r4, r5, r6, r7, lr}
   be00a:	b088      	sub	sp, #32
   be00c:	af00      	add	r7, sp, #0
   be00e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be012:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   be014:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be018:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   be01a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be01c:	462b      	mov	r3, r5
   be01e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   be020:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be022:	f7ff f967 	bl	bd2f4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   be026:	280f      	cmp	r0, #15
   be028:	687a      	ldr	r2, [r7, #4]
   be02a:	d91a      	bls.n	be062 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   be02c:	f100 0308 	add.w	r3, r0, #8
   be030:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   be034:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   be036:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be03a:	1c41      	adds	r1, r0, #1
   be03c:	462b      	mov	r3, r5
   be03e:	4668      	mov	r0, sp
        va_start(args, fmt);
   be040:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be042:	f7ff f957 	bl	bd2f4 <vsnprintf>
        if (n > 0) {
   be046:	1e02      	subs	r2, r0, #0
   be048:	dd04      	ble.n	be054 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   be04a:	6823      	ldr	r3, [r4, #0]
   be04c:	4669      	mov	r1, sp
   be04e:	689b      	ldr	r3, [r3, #8]
   be050:	4620      	mov	r0, r4
   be052:	4798      	blx	r3
   be054:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   be056:	3720      	adds	r7, #32
   be058:	46bd      	mov	sp, r7
   be05a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   be05e:	b003      	add	sp, #12
   be060:	4770      	bx	lr
    } else if (n > 0) {
   be062:	2800      	cmp	r0, #0
   be064:	d0f7      	beq.n	be056 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   be066:	6823      	ldr	r3, [r4, #0]
   be068:	4602      	mov	r2, r0
   be06a:	689b      	ldr	r3, [r3, #8]
   be06c:	f107 0110 	add.w	r1, r7, #16
   be070:	4620      	mov	r0, r4
   be072:	4798      	blx	r3
}
   be074:	e7ef      	b.n	be056 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000be076 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be076:	b538      	push	{r3, r4, r5, lr}
   be078:	680b      	ldr	r3, [r1, #0]
   be07a:	6003      	str	r3, [r0, #0]
   be07c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   be07e:	6843      	ldr	r3, [r0, #4]
   be080:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be082:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   be084:	d008      	beq.n	be098 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   be086:	b115      	cbz	r5, be08e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   be088:	686b      	ldr	r3, [r5, #4]
   be08a:	3301      	adds	r3, #1
   be08c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   be08e:	6860      	ldr	r0, [r4, #4]
   be090:	b108      	cbz	r0, be096 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   be092:	f7ff f996 	bl	bd3c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   be096:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be098:	bd38      	pop	{r3, r4, r5, pc}

000be09a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   be09a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be09c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   be09e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be0a2:	689b      	ldr	r3, [r3, #8]
   be0a4:	2201      	movs	r2, #1
   be0a6:	f10d 0107 	add.w	r1, sp, #7
   be0aa:	4798      	blx	r3
}
   be0ac:	b003      	add	sp, #12
   be0ae:	f85d fb04 	ldr.w	pc, [sp], #4

000be0b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   be0b2:	460b      	mov	r3, r1
   be0b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   be0b6:	2200      	movs	r2, #0
   be0b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   be0ba:	e9c0 2200 	strd	r2, r2, [r0]
   be0be:	4604      	mov	r4, r0
        t_ = t;
   be0c0:	6083      	str	r3, [r0, #8]
    if (t) {
   be0c2:	b90b      	cbnz	r3, be0c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   be0c4:	4620      	mov	r0, r4
   be0c6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   be0c8:	f7ff ffd5 	bl	be076 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   be0cc:	e7fa      	b.n	be0c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000be0ce <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   be0ce:	6883      	ldr	r3, [r0, #8]
   be0d0:	b1eb      	cbz	r3, be10e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   be0d2:	781a      	ldrb	r2, [r3, #0]
   be0d4:	2a03      	cmp	r2, #3
   be0d6:	d81a      	bhi.n	be10e <_ZNK5spark9JSONValue4typeEv+0x40>
   be0d8:	e8df f002 	tbb	[pc, r2]
   be0dc:	1b021704 	.word	0x1b021704
   be0e0:	2005      	movs	r0, #5
   be0e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   be0e4:	6802      	ldr	r2, [r0, #0]
   be0e6:	685b      	ldr	r3, [r3, #4]
   be0e8:	6852      	ldr	r2, [r2, #4]
   be0ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   be0ec:	282d      	cmp	r0, #45	; 0x2d
   be0ee:	d012      	beq.n	be116 <_ZNK5spark9JSONValue4typeEv+0x48>
   be0f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be0f4:	2b09      	cmp	r3, #9
   be0f6:	d90e      	bls.n	be116 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   be0f8:	2874      	cmp	r0, #116	; 0x74
   be0fa:	d00e      	beq.n	be11a <_ZNK5spark9JSONValue4typeEv+0x4c>
   be0fc:	2866      	cmp	r0, #102	; 0x66
   be0fe:	d00c      	beq.n	be11a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   be100:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   be104:	4258      	negs	r0, r3
   be106:	4158      	adcs	r0, r3
   be108:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   be10a:	2006      	movs	r0, #6
   be10c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   be10e:	2000      	movs	r0, #0
   be110:	4770      	bx	lr
        return JSON_TYPE_STRING;
   be112:	2004      	movs	r0, #4
   be114:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   be116:	2003      	movs	r0, #3
   be118:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   be11a:	2002      	movs	r0, #2
}
   be11c:	4770      	bx	lr

000be11e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   be11e:	b510      	push	{r4, lr}
   be120:	4604      	mov	r4, r0
    switch (type()) {
   be122:	f7ff ffd4 	bl	be0ce <_ZNK5spark9JSONValue4typeEv>
   be126:	2802      	cmp	r0, #2
   be128:	d00e      	beq.n	be148 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   be12a:	1ec3      	subs	r3, r0, #3
   be12c:	b2db      	uxtb	r3, r3
   be12e:	2b01      	cmp	r3, #1
   be130:	d814      	bhi.n	be15c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   be132:	6822      	ldr	r2, [r4, #0]
   be134:	68a3      	ldr	r3, [r4, #8]
   be136:	6850      	ldr	r0, [r2, #4]
   be138:	685b      	ldr	r3, [r3, #4]
}
   be13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   be13e:	220a      	movs	r2, #10
   be140:	2100      	movs	r1, #0
   be142:	4418      	add	r0, r3
   be144:	f004 b8c0 	b.w	c22c8 <strtol>
        const char* const s = d_->json + t_->start;
   be148:	6822      	ldr	r2, [r4, #0]
   be14a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   be14c:	6852      	ldr	r2, [r2, #4]
   be14e:	685b      	ldr	r3, [r3, #4]
   be150:	5cd0      	ldrb	r0, [r2, r3]
   be152:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   be156:	4258      	negs	r0, r3
   be158:	4158      	adcs	r0, r3
}
   be15a:	bd10      	pop	{r4, pc}
    switch (type()) {
   be15c:	2000      	movs	r0, #0
   be15e:	e7fc      	b.n	be15a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000be160 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   be160:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be162:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   be164:	e9c0 3300 	strd	r3, r3, [r0]
   be168:	4604      	mov	r4, r0
        n_(0) {
   be16a:	480e      	ldr	r0, [pc, #56]	; (be1a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   be16c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   be170:	b1a9      	cbz	r1, be19e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   be172:	780b      	ldrb	r3, [r1, #0]
   be174:	2b03      	cmp	r3, #3
   be176:	d006      	beq.n	be186 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   be178:	b98b      	cbnz	r3, be19e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   be17a:	6813      	ldr	r3, [r2, #0]
   be17c:	6858      	ldr	r0, [r3, #4]
   be17e:	684b      	ldr	r3, [r1, #4]
   be180:	5cc3      	ldrb	r3, [r0, r3]
   be182:	2b6e      	cmp	r3, #110	; 0x6e
   be184:	d007      	beq.n	be196 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   be186:	6813      	ldr	r3, [r2, #0]
   be188:	684d      	ldr	r5, [r1, #4]
   be18a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   be18c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   be18e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   be190:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   be192:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   be194:	60e3      	str	r3, [r4, #12]
   be196:	4611      	mov	r1, r2
   be198:	4620      	mov	r0, r4
   be19a:	f7ff ff6c 	bl	be076 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be19e:	4620      	mov	r0, r4
   be1a0:	bd38      	pop	{r3, r4, r5, pc}
   be1a2:	bf00      	nop
   be1a4:	000c54f8 	.word	0x000c54f8

000be1a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   be1a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be1aa:	2500      	movs	r5, #0
   be1ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   be1ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   be1b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   be1b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be1ba:	4604      	mov	r4, r0
   be1bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   be1be:	b14b      	cbz	r3, be1d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   be1c0:	781a      	ldrb	r2, [r3, #0]
   be1c2:	2a01      	cmp	r2, #1
   be1c4:	d106      	bne.n	be1d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   be1c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   be1ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   be1cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   be1ce:	6143      	str	r3, [r0, #20]
   be1d0:	f7ff ff51 	bl	be076 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be1d4:	4620      	mov	r0, r4
   be1d6:	bd38      	pop	{r3, r4, r5, pc}

000be1d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   be1d8:	b510      	push	{r4, lr}
    if (!n_) {
   be1da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   be1dc:	4604      	mov	r4, r0
    if (!n_) {
   be1de:	b163      	cbz	r3, be1fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   be1e0:	6880      	ldr	r0, [r0, #8]
   be1e2:	60e0      	str	r0, [r4, #12]
    --n_;
   be1e4:	3b01      	subs	r3, #1
    ++t_;
   be1e6:	3010      	adds	r0, #16
   be1e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   be1ea:	6120      	str	r0, [r4, #16]
    --n_;
   be1ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   be1ee:	b113      	cbz	r3, be1f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   be1f0:	f7ff fef2 	bl	bdfd8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   be1f4:	60a0      	str	r0, [r4, #8]
    return true;
   be1f6:	2001      	movs	r0, #1
   be1f8:	e000      	b.n	be1fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   be1fa:	4618      	mov	r0, r3
}
   be1fc:	bd10      	pop	{r4, pc}

000be1fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   be1fe:	b510      	push	{r4, lr}
    write('}');
   be200:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   be202:	4604      	mov	r4, r0
    write('}');
   be204:	f7ff ff49 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   be208:	2301      	movs	r3, #1
   be20a:	7123      	strb	r3, [r4, #4]
}
   be20c:	4620      	mov	r0, r4
   be20e:	bd10      	pop	{r4, pc}

000be210 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   be210:	b508      	push	{r3, lr}
    switch (state_) {
   be212:	7903      	ldrb	r3, [r0, #4]
   be214:	2b01      	cmp	r3, #1
   be216:	d002      	beq.n	be21e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   be218:	2b02      	cmp	r3, #2
   be21a:	d004      	beq.n	be226 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   be21c:	bd08      	pop	{r3, pc}
        write(',');
   be21e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   be220:	f7ff ff3b 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
}
   be224:	e7fa      	b.n	be21c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   be226:	213a      	movs	r1, #58	; 0x3a
   be228:	e7fa      	b.n	be220 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000be22a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   be22a:	b510      	push	{r4, lr}
   be22c:	4604      	mov	r4, r0
    writeSeparator();
   be22e:	f7ff ffef 	bl	be210 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   be232:	4620      	mov	r0, r4
   be234:	217b      	movs	r1, #123	; 0x7b
   be236:	f7ff ff30 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   be23a:	2300      	movs	r3, #0
   be23c:	7123      	strb	r3, [r4, #4]
}
   be23e:	4620      	mov	r0, r4
   be240:	bd10      	pop	{r4, pc}
	...

000be244 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   be244:	b513      	push	{r0, r1, r4, lr}
   be246:	4604      	mov	r4, r0
   be248:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be24a:	f7ff ffe1 	bl	be210 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   be24e:	6823      	ldr	r3, [r4, #0]
   be250:	9a01      	ldr	r2, [sp, #4]
   be252:	68db      	ldr	r3, [r3, #12]
   be254:	4903      	ldr	r1, [pc, #12]	; (be264 <_ZN5spark10JSONWriter5valueEi+0x20>)
   be256:	4620      	mov	r0, r4
   be258:	4798      	blx	r3
    state_ = NEXT;
   be25a:	2301      	movs	r3, #1
}
   be25c:	4620      	mov	r0, r4
    state_ = NEXT;
   be25e:	7123      	strb	r3, [r4, #4]
}
   be260:	b002      	add	sp, #8
   be262:	bd10      	pop	{r4, pc}
   be264:	000c3a03 	.word	0x000c3a03

000be268 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   be268:	b513      	push	{r0, r1, r4, lr}
   be26a:	4604      	mov	r4, r0
   be26c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be26e:	f7ff ffcf 	bl	be210 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   be272:	6823      	ldr	r3, [r4, #0]
   be274:	9a01      	ldr	r2, [sp, #4]
   be276:	68db      	ldr	r3, [r3, #12]
   be278:	4903      	ldr	r1, [pc, #12]	; (be288 <_ZN5spark10JSONWriter5valueEj+0x20>)
   be27a:	4620      	mov	r0, r4
   be27c:	4798      	blx	r3
    state_ = NEXT;
   be27e:	2301      	movs	r3, #1
}
   be280:	4620      	mov	r0, r4
    state_ = NEXT;
   be282:	7123      	strb	r3, [r4, #4]
}
   be284:	b002      	add	sp, #8
   be286:	bd10      	pop	{r4, pc}
   be288:	000c422e 	.word	0x000c422e

000be28c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be290:	460d      	mov	r5, r1
    write('"');
   be292:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be294:	4690      	mov	r8, r2
   be296:	4604      	mov	r4, r0
    write('"');
   be298:	f7ff feff 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   be29c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; be344 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   be2a0:	44a8      	add	r8, r5
    const char *s = str;
   be2a2:	462f      	mov	r7, r5
    while (s != end) {
   be2a4:	4547      	cmp	r7, r8
   be2a6:	46ba      	mov	sl, r7
   be2a8:	d03d      	beq.n	be326 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   be2aa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   be2ae:	2e22      	cmp	r6, #34	; 0x22
   be2b0:	d006      	beq.n	be2c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be2b2:	2e5c      	cmp	r6, #92	; 0x5c
   be2b4:	d004      	beq.n	be2c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be2b6:	4630      	mov	r0, r6
   be2b8:	f002 ff9a 	bl	c11f0 <isprint>
   be2bc:	2800      	cmp	r0, #0
   be2be:	d1f1      	bne.n	be2a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   be2c0:	6823      	ldr	r3, [r4, #0]
   be2c2:	ebaa 0205 	sub.w	r2, sl, r5
   be2c6:	689b      	ldr	r3, [r3, #8]
   be2c8:	4629      	mov	r1, r5
   be2ca:	4620      	mov	r0, r4
   be2cc:	4798      	blx	r3
            write('\\');
   be2ce:	215c      	movs	r1, #92	; 0x5c
   be2d0:	4620      	mov	r0, r4
   be2d2:	f7ff fee2 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   be2d6:	2e0d      	cmp	r6, #13
   be2d8:	d80a      	bhi.n	be2f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   be2da:	2e07      	cmp	r6, #7
   be2dc:	d91c      	bls.n	be318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be2de:	f1a6 0308 	sub.w	r3, r6, #8
   be2e2:	2b05      	cmp	r3, #5
   be2e4:	d818      	bhi.n	be318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be2e6:	e8df f003 	tbb	[pc, r3]
   be2ea:	0f0d      	.short	0x0f0d
   be2ec:	15131711 	.word	0x15131711
   be2f0:	2e22      	cmp	r6, #34	; 0x22
   be2f2:	d001      	beq.n	be2f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   be2f4:	2e5c      	cmp	r6, #92	; 0x5c
   be2f6:	d10f      	bne.n	be318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   be2f8:	4631      	mov	r1, r6
                write('b');
   be2fa:	4620      	mov	r0, r4
   be2fc:	f7ff fecd 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   be300:	463d      	mov	r5, r7
    while (s != end) {
   be302:	e7cf      	b.n	be2a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   be304:	2162      	movs	r1, #98	; 0x62
   be306:	e7f8      	b.n	be2fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   be308:	2174      	movs	r1, #116	; 0x74
   be30a:	e7f6      	b.n	be2fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   be30c:	216e      	movs	r1, #110	; 0x6e
   be30e:	e7f4      	b.n	be2fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   be310:	2166      	movs	r1, #102	; 0x66
   be312:	e7f2      	b.n	be2fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   be314:	2172      	movs	r1, #114	; 0x72
   be316:	e7f0      	b.n	be2fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   be318:	6823      	ldr	r3, [r4, #0]
   be31a:	4632      	mov	r2, r6
   be31c:	68db      	ldr	r3, [r3, #12]
   be31e:	4649      	mov	r1, r9
   be320:	4620      	mov	r0, r4
   be322:	4798      	blx	r3
                break;
   be324:	e7ec      	b.n	be300 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   be326:	42bd      	cmp	r5, r7
   be328:	d005      	beq.n	be336 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   be32a:	6823      	ldr	r3, [r4, #0]
   be32c:	1b7a      	subs	r2, r7, r5
   be32e:	689b      	ldr	r3, [r3, #8]
   be330:	4629      	mov	r1, r5
   be332:	4620      	mov	r0, r4
   be334:	4798      	blx	r3
    }
    write('"');
   be336:	2122      	movs	r1, #34	; 0x22
   be338:	4620      	mov	r0, r4
   be33a:	f7ff feae 	bl	be09a <_ZN5spark10JSONWriter5writeEc>
}
   be33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be342:	bf00      	nop
   be344:	000c5498 	.word	0x000c5498

000be348 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   be348:	b513      	push	{r0, r1, r4, lr}
   be34a:	4604      	mov	r4, r0
   be34c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be350:	f7ff ff5e 	bl	be210 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   be354:	4620      	mov	r0, r4
   be356:	e9dd 2100 	ldrd	r2, r1, [sp]
   be35a:	f7ff ff97 	bl	be28c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be35e:	2302      	movs	r3, #2
}
   be360:	4620      	mov	r0, r4
    state_ = VALUE;
   be362:	7123      	strb	r3, [r4, #4]
}
   be364:	b002      	add	sp, #8
   be366:	bd10      	pop	{r4, pc}

000be368 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be368:	b513      	push	{r0, r1, r4, lr}
   be36a:	4604      	mov	r4, r0
   be36c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be370:	f7ff ff4e 	bl	be210 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be374:	4620      	mov	r0, r4
   be376:	e9dd 2100 	ldrd	r2, r1, [sp]
   be37a:	f7ff ff87 	bl	be28c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be37e:	2301      	movs	r3, #1
}
   be380:	4620      	mov	r0, r4
    state_ = NEXT;
   be382:	7123      	strb	r3, [r4, #4]
}
   be384:	b002      	add	sp, #8
   be386:	bd10      	pop	{r4, pc}

000be388 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be388:	6880      	ldr	r0, [r0, #8]
   be38a:	6803      	ldr	r3, [r0, #0]
   be38c:	68db      	ldr	r3, [r3, #12]
   be38e:	4718      	bx	r3

000be390 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be390:	4770      	bx	lr

000be392 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be392:	4608      	mov	r0, r1
   be394:	b111      	cbz	r1, be39c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be396:	680b      	ldr	r3, [r1, #0]
   be398:	685b      	ldr	r3, [r3, #4]
   be39a:	4718      	bx	r3
}
   be39c:	4770      	bx	lr

000be39e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be39e:	4770      	bx	lr

000be3a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be3a0:	4770      	bx	lr

000be3a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be3a2:	4770      	bx	lr

000be3a4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be3a4:	4770      	bx	lr

000be3a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be3a6:	b538      	push	{r3, r4, r5, lr}
   be3a8:	4604      	mov	r4, r0
   be3aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be3ac:	6800      	ldr	r0, [r0, #0]
   be3ae:	212e      	movs	r1, #46	; 0x2e
   be3b0:	f002 ffdf 	bl	c1372 <strchrnul>
    size = s - category;
   be3b4:	6823      	ldr	r3, [r4, #0]
   be3b6:	1ac3      	subs	r3, r0, r3
   be3b8:	602b      	str	r3, [r5, #0]
    if (size) {
   be3ba:	b123      	cbz	r3, be3c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be3bc:	7803      	ldrb	r3, [r0, #0]
   be3be:	b103      	cbz	r3, be3c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be3c0:	3001      	adds	r0, #1
   be3c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be3c4:	6020      	str	r0, [r4, #0]
}
   be3c6:	4618      	mov	r0, r3
   be3c8:	bd38      	pop	{r3, r4, r5, pc}

000be3ca <_ZN5spark16JSONStreamWriterD0Ev>:
   be3ca:	b510      	push	{r4, lr}
   be3cc:	210c      	movs	r1, #12
   be3ce:	4604      	mov	r4, r0
   be3d0:	f7f5 fe65 	bl	b409e <_ZdlPvj>
   be3d4:	4620      	mov	r0, r4
   be3d6:	bd10      	pop	{r4, pc}

000be3d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be3d8:	b510      	push	{r4, lr}
   be3da:	2104      	movs	r1, #4
   be3dc:	4604      	mov	r4, r0
   be3de:	f7f5 fe5e 	bl	b409e <_ZdlPvj>
   be3e2:	4620      	mov	r0, r4
   be3e4:	bd10      	pop	{r4, pc}

000be3e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be3e6:	b510      	push	{r4, lr}
   be3e8:	2104      	movs	r1, #4
   be3ea:	4604      	mov	r4, r0
   be3ec:	f7f5 fe57 	bl	b409e <_ZdlPvj>
   be3f0:	4620      	mov	r0, r4
   be3f2:	bd10      	pop	{r4, pc}

000be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be3f4:	f7fe bb72 	b.w	bcadc <os_mutex_recursive_lock>

000be3f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be3f8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be3fa:	f002 ffc4 	bl	c1386 <strcmp>
}
   be3fe:	fab0 f080 	clz	r0, r0
   be402:	0940      	lsrs	r0, r0, #5
   be404:	bd08      	pop	{r3, pc}

000be406 <__tcf_1>:
   be406:	4770      	bx	lr

000be408 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be408:	b510      	push	{r4, lr}
   be40a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be40c:	f001 ff44 	bl	c0298 <_Z16_fetch_usbserialv>
   be410:	4284      	cmp	r4, r0
   be412:	d010      	beq.n	be436 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be414:	f002 f946 	bl	c06a4 <_Z22__fetch_global_Serial1v>
   be418:	4284      	cmp	r4, r0
   be41a:	d105      	bne.n	be428 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be41c:	f002 f942 	bl	c06a4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be424:	f001 bed1 	b.w	c01ca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be428:	b12c      	cbz	r4, be436 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be42a:	6823      	ldr	r3, [r4, #0]
   be42c:	4620      	mov	r0, r4
   be42e:	685b      	ldr	r3, [r3, #4]
}
   be430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be434:	4718      	bx	r3
   be436:	bd10      	pop	{r4, pc}

000be438 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be438:	b513      	push	{r0, r1, r4, lr}
   be43a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be43c:	4608      	mov	r0, r1
   be43e:	9101      	str	r1, [sp, #4]
   be440:	f002 ffd1 	bl	c13e6 <strlen>
   be444:	9901      	ldr	r1, [sp, #4]
   be446:	4602      	mov	r2, r0
   be448:	4620      	mov	r0, r4
}
   be44a:	b002      	add	sp, #8
   be44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be450:	f7ff bf8a 	b.w	be368 <_ZN5spark10JSONWriter5valueEPKcj>

000be454 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be454:	b513      	push	{r0, r1, r4, lr}
   be456:	4604      	mov	r4, r0
    write(str, strlen(str));
   be458:	4608      	mov	r0, r1
   be45a:	9101      	str	r1, [sp, #4]
   be45c:	f002 ffc3 	bl	c13e6 <strlen>
   be460:	6823      	ldr	r3, [r4, #0]
   be462:	9901      	ldr	r1, [sp, #4]
   be464:	68db      	ldr	r3, [r3, #12]
   be466:	4602      	mov	r2, r0
   be468:	4620      	mov	r0, r4
}
   be46a:	b002      	add	sp, #8
   be46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be470:	4718      	bx	r3

000be472 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be472:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be474:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be476:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be47a:	68db      	ldr	r3, [r3, #12]
   be47c:	2201      	movs	r2, #1
   be47e:	f10d 0107 	add.w	r1, sp, #7
   be482:	4798      	blx	r3
}
   be484:	b003      	add	sp, #12
   be486:	f85d fb04 	ldr.w	pc, [sp], #4

000be48a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be48a:	b40e      	push	{r1, r2, r3}
   be48c:	b503      	push	{r0, r1, lr}
   be48e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be490:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be492:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be496:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be498:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be49a:	f001 f942 	bl	bf722 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be49e:	b002      	add	sp, #8
   be4a0:	f85d eb04 	ldr.w	lr, [sp], #4
   be4a4:	b003      	add	sp, #12
   be4a6:	4770      	bx	lr

000be4a8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be4a8:	680a      	ldr	r2, [r1, #0]
   be4aa:	6002      	str	r2, [r0, #0]
   be4ac:	684a      	ldr	r2, [r1, #4]
   be4ae:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be4b0:	2200      	movs	r2, #0
   be4b2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be4b6:	b510      	push	{r4, lr}
   be4b8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be4ba:	688c      	ldr	r4, [r1, #8]
   be4bc:	6084      	str	r4, [r0, #8]
   be4be:	68cc      	ldr	r4, [r1, #12]
   be4c0:	60c4      	str	r4, [r0, #12]
   be4c2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be4c4:	608a      	str	r2, [r1, #8]
   be4c6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be4c8:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be4ca:	610a      	str	r2, [r1, #16]
   be4cc:	bd10      	pop	{r4, pc}
	...

000be4d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be4d4:	e9d0 8400 	ldrd	r8, r4, [r0]
   be4d8:	f04f 0a14 	mov.w	sl, #20
   be4dc:	9300      	str	r3, [sp, #0]
   be4de:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be4e2:	4b18      	ldr	r3, [pc, #96]	; (be544 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be4e4:	10a4      	asrs	r4, r4, #2
   be4e6:	4617      	mov	r7, r2
   be4e8:	435c      	muls	r4, r3
   be4ea:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be4ec:	2c00      	cmp	r4, #0
   be4ee:	dd21      	ble.n	be534 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be4f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be4f2:	fb0a f006 	mul.w	r0, sl, r6
   be4f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be4fa:	463a      	mov	r2, r7
   be4fc:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be500:	5828      	ldr	r0, [r5, r0]
   be502:	9101      	str	r1, [sp, #4]
   be504:	455f      	cmp	r7, fp
   be506:	bf28      	it	cs
   be508:	465a      	movcs	r2, fp
   be50a:	f002 ff74 	bl	c13f6 <strncmp>
                if (cmp == 0) {
   be50e:	2800      	cmp	r0, #0
   be510:	9901      	ldr	r1, [sp, #4]
   be512:	f04f 0301 	mov.w	r3, #1
   be516:	d10b      	bne.n	be530 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be518:	455f      	cmp	r7, fp
   be51a:	d103      	bne.n	be524 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be51c:	9a00      	ldr	r2, [sp, #0]
   be51e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be520:	4634      	mov	r4, r6
   be522:	e7e3      	b.n	be4ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be524:	d9fc      	bls.n	be520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be526:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be528:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be52c:	3e01      	subs	r6, #1
   be52e:	e7f7      	b.n	be520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be530:	dbf9      	blt.n	be526 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be532:	e7f5      	b.n	be520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be534:	eba5 0508 	sub.w	r5, r5, r8
}
   be538:	4802      	ldr	r0, [pc, #8]	; (be544 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be53a:	10ad      	asrs	r5, r5, #2
   be53c:	4368      	muls	r0, r5
   be53e:	b003      	add	sp, #12
   be540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be544:	cccccccd 	.word	0xcccccccd

000be548 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be54a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be54c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be54e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be550:	b303      	cbz	r3, be594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be552:	b1f9      	cbz	r1, be594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be554:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be556:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be55a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be55c:	a903      	add	r1, sp, #12
   be55e:	a801      	add	r0, sp, #4
   be560:	f7ff ff21 	bl	be3a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be564:	4601      	mov	r1, r0
   be566:	b1a8      	cbz	r0, be594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be568:	f10d 030b 	add.w	r3, sp, #11
   be56c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be56e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be572:	4620      	mov	r0, r4
   be574:	f7ff ffac 	bl	be4d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be578:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be57c:	b153      	cbz	r3, be594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be57e:	6823      	ldr	r3, [r4, #0]
   be580:	2414      	movs	r4, #20
   be582:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be586:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be588:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be58c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be58e:	bfa8      	it	ge
   be590:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be592:	e7e3      	b.n	be55c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be594:	4628      	mov	r0, r5
   be596:	b004      	add	sp, #16
   be598:	bd70      	pop	{r4, r5, r6, pc}
	...

000be59c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be59c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be59e:	4c09      	ldr	r4, [pc, #36]	; (be5c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be5a0:	7823      	ldrb	r3, [r4, #0]
   be5a2:	f3bf 8f5b 	dmb	ish
   be5a6:	07db      	lsls	r3, r3, #31
   be5a8:	d409      	bmi.n	be5be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be5aa:	4620      	mov	r0, r4
   be5ac:	f7f5 fd86 	bl	b40bc <__cxa_guard_acquire>
   be5b0:	b128      	cbz	r0, be5be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be5b2:	4620      	mov	r0, r4
   be5b4:	f7f5 fd87 	bl	b40c6 <__cxa_guard_release>
   be5b8:	4803      	ldr	r0, [pc, #12]	; (be5c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be5ba:	f002 fdf5 	bl	c11a8 <atexit>
}
   be5be:	4803      	ldr	r0, [pc, #12]	; (be5cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be5c0:	bd10      	pop	{r4, pc}
   be5c2:	bf00      	nop
   be5c4:	2003e648 	.word	0x2003e648
   be5c8:	000be39f 	.word	0x000be39f
   be5cc:	2003d688 	.word	0x2003d688

000be5d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be5d0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be5d2:	4c09      	ldr	r4, [pc, #36]	; (be5f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be5d4:	7823      	ldrb	r3, [r4, #0]
   be5d6:	f3bf 8f5b 	dmb	ish
   be5da:	07db      	lsls	r3, r3, #31
   be5dc:	d409      	bmi.n	be5f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be5de:	4620      	mov	r0, r4
   be5e0:	f7f5 fd6c 	bl	b40bc <__cxa_guard_acquire>
   be5e4:	b128      	cbz	r0, be5f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be5e6:	4620      	mov	r0, r4
   be5e8:	f7f5 fd6d 	bl	b40c6 <__cxa_guard_release>
   be5ec:	4803      	ldr	r0, [pc, #12]	; (be5fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be5ee:	f002 fddb 	bl	c11a8 <atexit>
    return &factory;
}
   be5f2:	4803      	ldr	r0, [pc, #12]	; (be600 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be5f4:	bd10      	pop	{r4, pc}
   be5f6:	bf00      	nop
   be5f8:	2003e64c 	.word	0x2003e64c
   be5fc:	000be407 	.word	0x000be407
   be600:	2003d68c 	.word	0x2003d68c

000be604 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be604:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be606:	2500      	movs	r5, #0
   be608:	4604      	mov	r4, r0
   be60a:	e9c0 5500 	strd	r5, r5, [r0]
   be60e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be612:	6085      	str	r5, [r0, #8]
   be614:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be616:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be61a:	f7fe fa4f 	bl	bcabc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be61e:	f7ff ffbd 	bl	be59c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be622:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be624:	f7ff ffd4 	bl	be5d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be628:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be62a:	6220      	str	r0, [r4, #32]
}
   be62c:	4620      	mov	r0, r4
   be62e:	bd38      	pop	{r3, r4, r5, pc}

000be630 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be630:	b510      	push	{r4, lr}
    static LogManager mgr;
   be632:	4c0a      	ldr	r4, [pc, #40]	; (be65c <_ZN5spark10LogManager8instanceEv+0x2c>)
   be634:	7823      	ldrb	r3, [r4, #0]
   be636:	f3bf 8f5b 	dmb	ish
   be63a:	07db      	lsls	r3, r3, #31
   be63c:	d40c      	bmi.n	be658 <_ZN5spark10LogManager8instanceEv+0x28>
   be63e:	4620      	mov	r0, r4
   be640:	f7f5 fd3c 	bl	b40bc <__cxa_guard_acquire>
   be644:	b140      	cbz	r0, be658 <_ZN5spark10LogManager8instanceEv+0x28>
   be646:	4806      	ldr	r0, [pc, #24]	; (be660 <_ZN5spark10LogManager8instanceEv+0x30>)
   be648:	f7ff ffdc 	bl	be604 <_ZN5spark10LogManagerC1Ev>
   be64c:	4620      	mov	r0, r4
   be64e:	f7f5 fd3a 	bl	b40c6 <__cxa_guard_release>
   be652:	4804      	ldr	r0, [pc, #16]	; (be664 <_ZN5spark10LogManager8instanceEv+0x34>)
   be654:	f002 fda8 	bl	c11a8 <atexit>
    return &mgr;
}
   be658:	4801      	ldr	r0, [pc, #4]	; (be660 <_ZN5spark10LogManager8instanceEv+0x30>)
   be65a:	bd10      	pop	{r4, pc}
   be65c:	2003e644 	.word	0x2003e644
   be660:	2003e654 	.word	0x2003e654
   be664:	000beb1d 	.word	0x000beb1d

000be668 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be668:	4a02      	ldr	r2, [pc, #8]	; (be674 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be66a:	4903      	ldr	r1, [pc, #12]	; (be678 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be66c:	4803      	ldr	r0, [pc, #12]	; (be67c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be66e:	2300      	movs	r3, #0
   be670:	f7fe bccc 	b.w	bd00c <log_set_callbacks>
   be674:	000be901 	.word	0x000be901
   be678:	000be88d 	.word	0x000be88d
   be67c:	000be80d 	.word	0x000be80d

000be680 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be680:	2300      	movs	r3, #0
   be682:	461a      	mov	r2, r3
   be684:	4619      	mov	r1, r3
   be686:	4618      	mov	r0, r3
   be688:	f7fe bcc0 	b.w	bd00c <log_set_callbacks>

000be68c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be68c:	b570      	push	{r4, r5, r6, lr}
   be68e:	b08a      	sub	sp, #40	; 0x28
   be690:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be692:	4601      	mov	r1, r0
   be694:	a804      	add	r0, sp, #16
   be696:	f7fb fbac 	bl	b9df2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be69a:	4e14      	ldr	r6, [pc, #80]	; (be6ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be69c:	a804      	add	r0, sp, #16
   be69e:	f7ff fd9b 	bl	be1d8 <_ZN5spark18JSONObjectIterator4nextEv>
   be6a2:	b1e8      	cbz	r0, be6e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be6a4:	a904      	add	r1, sp, #16
   be6a6:	4668      	mov	r0, sp
   be6a8:	f7fb fbb4 	bl	b9e14 <_ZNK5spark18JSONObjectIterator4nameEv>
   be6ac:	9802      	ldr	r0, [sp, #8]
   be6ae:	4631      	mov	r1, r6
   be6b0:	f7ff fea2 	bl	be3f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be6b4:	4604      	mov	r4, r0
   be6b6:	b110      	cbz	r0, be6be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be6b8:	1e2c      	subs	r4, r5, #0
   be6ba:	bf18      	it	ne
   be6bc:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be6be:	a801      	add	r0, sp, #4
   be6c0:	f7f5 ffea 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6c4:	2c00      	cmp	r4, #0
   be6c6:	d0e9      	beq.n	be69c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be6c8:	a904      	add	r1, sp, #16
   be6ca:	4668      	mov	r0, sp
   be6cc:	f7fb fbb3 	bl	b9e36 <_ZNK5spark18JSONObjectIterator5valueEv>
   be6d0:	4668      	mov	r0, sp
   be6d2:	f7ff fd24 	bl	be11e <_ZNK5spark9JSONValue5toIntEv>
   be6d6:	6028      	str	r0, [r5, #0]
   be6d8:	a801      	add	r0, sp, #4
   be6da:	f7f5 ffdd 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6de:	e7dd      	b.n	be69c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be6e0:	a805      	add	r0, sp, #20
   be6e2:	f7f5 ffd9 	bl	b4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be6e6:	b00a      	add	sp, #40	; 0x28
   be6e8:	bd70      	pop	{r4, r5, r6, pc}
   be6ea:	bf00      	nop
   be6ec:	000c549e 	.word	0x000c549e

000be6f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be6f2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be6f4:	4620      	mov	r0, r4
   be6f6:	4913      	ldr	r1, [pc, #76]	; (be744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be6f8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be6fa:	f002 fe44 	bl	c1386 <strcmp>
   be6fe:	b950      	cbnz	r0, be716 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be700:	f001 fdca 	bl	c0298 <_Z16_fetch_usbserialv>
   be704:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be708:	f001 fdb4 	bl	c0274 <_ZN9USBSerial5beginEl>
}
   be70c:	b003      	add	sp, #12
   be70e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be712:	f001 bdc1 	b.w	c0298 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be716:	490c      	ldr	r1, [pc, #48]	; (be748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be718:	4620      	mov	r0, r4
   be71a:	f002 fe34 	bl	c1386 <strcmp>
   be71e:	b978      	cbnz	r0, be740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be720:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be724:	a901      	add	r1, sp, #4
   be726:	4628      	mov	r0, r5
        int baud = 9600;
   be728:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be72a:	f7ff ffaf 	bl	be68c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be72e:	f001 ffb9 	bl	c06a4 <_Z22__fetch_global_Serial1v>
   be732:	9901      	ldr	r1, [sp, #4]
   be734:	f001 fd46 	bl	c01c4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be738:	f001 ffb4 	bl	c06a4 <_Z22__fetch_global_Serial1v>
}
   be73c:	b003      	add	sp, #12
   be73e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be740:	2000      	movs	r0, #0
   be742:	e7fb      	b.n	be73c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be744:	000c54a3 	.word	0x000c54a3
   be748:	000c54aa 	.word	0x000c54aa

000be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be74c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be74e:	e9d0 5300 	ldrd	r5, r3, [r0]
   be752:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be754:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be756:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be75a:	42ae      	cmp	r6, r5
   be75c:	d005      	beq.n	be76a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be75e:	f105 0008 	add.w	r0, r5, #8
   be762:	f7ff fff3 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be766:	3514      	adds	r5, #20
   be768:	e7f7      	b.n	be75a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be76a:	6820      	ldr	r0, [r4, #0]
   be76c:	f7fe fd9a 	bl	bd2a4 <free>
}
   be770:	4620      	mov	r0, r4
   be772:	bd70      	pop	{r4, r5, r6, pc}

000be774 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be774:	b510      	push	{r4, lr}
   be776:	4604      	mov	r4, r0
   be778:	300c      	adds	r0, #12
   be77a:	f7ff ffe7 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be77e:	4620      	mov	r0, r4
   be780:	f7fe fe33 	bl	bd3ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be784:	4620      	mov	r0, r4
   be786:	bd10      	pop	{r4, pc}

000be788 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be788:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be78a:	4b04      	ldr	r3, [pc, #16]	; (be79c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be78c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be78e:	f840 3b04 	str.w	r3, [r0], #4
   be792:	f7ff ffef 	bl	be774 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be796:	4620      	mov	r0, r4
   be798:	bd10      	pop	{r4, pc}
   be79a:	bf00      	nop
   be79c:	000c4820 	.word	0x000c4820

000be7a0 <_ZN5spark16StreamLogHandlerD0Ev>:
   be7a0:	b510      	push	{r4, lr}
   be7a2:	4604      	mov	r4, r0
   be7a4:	f7ff fff0 	bl	be788 <_ZN5spark16StreamLogHandlerD1Ev>
   be7a8:	4620      	mov	r0, r4
   be7aa:	2124      	movs	r1, #36	; 0x24
   be7ac:	f7f5 fc77 	bl	b409e <_ZdlPvj>
   be7b0:	4620      	mov	r0, r4
   be7b2:	bd10      	pop	{r4, pc}

000be7b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be7b4:	b510      	push	{r4, lr}
   be7b6:	4b03      	ldr	r3, [pc, #12]	; (be7c4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be7b8:	6003      	str	r3, [r0, #0]
   be7ba:	4604      	mov	r4, r0
   be7bc:	f7ff ffe4 	bl	be788 <_ZN5spark16StreamLogHandlerD1Ev>
   be7c0:	4620      	mov	r0, r4
   be7c2:	bd10      	pop	{r4, pc}
   be7c4:	000c5540 	.word	0x000c5540

000be7c8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be7c8:	b510      	push	{r4, lr}
   be7ca:	4604      	mov	r4, r0
   be7cc:	f7ff fff2 	bl	be7b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be7d0:	4620      	mov	r0, r4
   be7d2:	2124      	movs	r1, #36	; 0x24
   be7d4:	f7f5 fc63 	bl	b409e <_ZdlPvj>
   be7d8:	4620      	mov	r0, r4
   be7da:	bd10      	pop	{r4, pc}

000be7dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be7dc:	2200      	movs	r2, #0
   be7de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be7e2:	b510      	push	{r4, lr}
        capacity_(0) {
   be7e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be7e6:	680c      	ldr	r4, [r1, #0]
   be7e8:	6004      	str	r4, [r0, #0]
   be7ea:	684c      	ldr	r4, [r1, #4]
   be7ec:	6044      	str	r4, [r0, #4]
   be7ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7f0:	600a      	str	r2, [r1, #0]
   be7f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   be7f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7f6:	608a      	str	r2, [r1, #8]
}
   be7f8:	bd10      	pop	{r4, pc}

000be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   be7fa:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be7fc:	6803      	ldr	r3, [r0, #0]
   be7fe:	4604      	mov	r4, r0
   be800:	6818      	ldr	r0, [r3, #0]
   be802:	f7fe f973 	bl	bcaec <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   be806:	4620      	mov	r0, r4
   be808:	bd10      	pop	{r4, pc}
	...

000be80c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   be80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be810:	b087      	sub	sp, #28
   be812:	4680      	mov	r8, r0
   be814:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   be816:	4b1c      	ldr	r3, [pc, #112]	; (be888 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   be818:	685b      	ldr	r3, [r3, #4]
   be81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be81e:	4689      	mov	r9, r1
   be820:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   be822:	b96b      	cbnz	r3, be840 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   be824:	f7ff ff04 	bl	be630 <_ZN5spark10LogManager8instanceEv>
   be828:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be82a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   be82e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be830:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   be832:	f7ff fddf 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   be836:	7b23      	ldrb	r3, [r4, #12]
   be838:	b12b      	cbz	r3, be846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   be83a:	a805      	add	r0, sp, #20
   be83c:	f7ff ffdd 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   be840:	b007      	add	sp, #28
   be842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   be846:	2301      	movs	r3, #1
   be848:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   be84a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   be84e:	fa5f f989 	uxtb.w	r9, r9
   be852:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be856:	45aa      	cmp	sl, r5
   be858:	d012      	beq.n	be880 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   be85a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   be85e:	4631      	mov	r1, r6
   be860:	1d38      	adds	r0, r7, #4
   be862:	f7ff fe71 	bl	be548 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be866:	4581      	cmp	r9, r0
   be868:	d3f5      	bcc.n	be856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   be86a:	683b      	ldr	r3, [r7, #0]
   be86c:	9a03      	ldr	r2, [sp, #12]
   be86e:	9200      	str	r2, [sp, #0]
   be870:	f8d3 b008 	ldr.w	fp, [r3, #8]
   be874:	464a      	mov	r2, r9
   be876:	4633      	mov	r3, r6
   be878:	4641      	mov	r1, r8
   be87a:	4638      	mov	r0, r7
   be87c:	47d8      	blx	fp
   be87e:	e7ea      	b.n	be856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   be880:	2300      	movs	r3, #0
   be882:	7323      	strb	r3, [r4, #12]
   be884:	e7d9      	b.n	be83a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   be886:	bf00      	nop
   be888:	e000ed00 	.word	0xe000ed00

000be88c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   be88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be890:	469b      	mov	fp, r3
   be892:	4b1a      	ldr	r3, [pc, #104]	; (be8fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   be894:	685b      	ldr	r3, [r3, #4]
   be896:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be89a:	4680      	mov	r8, r0
   be89c:	4689      	mov	r9, r1
   be89e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   be8a0:	b96b      	cbnz	r3, be8be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   be8a2:	f7ff fec5 	bl	be630 <_ZN5spark10LogManager8instanceEv>
   be8a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be8a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   be8ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be8ae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be8b0:	f7ff fda0 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   be8b4:	7b23      	ldrb	r3, [r4, #12]
   be8b6:	b12b      	cbz	r3, be8c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   be8b8:	a801      	add	r0, sp, #4
   be8ba:	f7ff ff9e 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be8be:	b003      	add	sp, #12
   be8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   be8c4:	2301      	movs	r3, #1
   be8c6:	7323      	strb	r3, [r4, #12]
   be8c8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   be8cc:	b2f6      	uxtb	r6, r6
   be8ce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be8d2:	4555      	cmp	r5, sl
   be8d4:	d00e      	beq.n	be8f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   be8d6:	f855 7b04 	ldr.w	r7, [r5], #4
   be8da:	4659      	mov	r1, fp
   be8dc:	1d38      	adds	r0, r7, #4
   be8de:	f7ff fe33 	bl	be548 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be8e2:	4286      	cmp	r6, r0
   be8e4:	d3f5      	bcc.n	be8d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   be8e6:	683b      	ldr	r3, [r7, #0]
   be8e8:	464a      	mov	r2, r9
   be8ea:	68db      	ldr	r3, [r3, #12]
   be8ec:	4641      	mov	r1, r8
   be8ee:	4638      	mov	r0, r7
   be8f0:	4798      	blx	r3
   be8f2:	e7ee      	b.n	be8d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   be8f4:	2300      	movs	r3, #0
   be8f6:	7323      	strb	r3, [r4, #12]
   be8f8:	e7de      	b.n	be8b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   be8fa:	bf00      	nop
   be8fc:	e000ed00 	.word	0xe000ed00

000be900 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   be900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   be904:	4b16      	ldr	r3, [pc, #88]	; (be960 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   be906:	685b      	ldr	r3, [r3, #4]
   be908:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be90c:	4605      	mov	r5, r0
   be90e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   be910:	bb1b      	cbnz	r3, be95a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   be912:	f7ff fe8d 	bl	be630 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   be916:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   be91a:	4604      	mov	r4, r0
   be91c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be91e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be920:	f7ff fd68 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
   be924:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   be928:	2446      	movs	r4, #70	; 0x46
   be92a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be92e:	45b0      	cmp	r8, r6
   be930:	d109      	bne.n	be946 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   be932:	a801      	add	r0, sp, #4
   be934:	f7ff ff61 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   be938:	42a5      	cmp	r5, r4
   be93a:	bfb4      	ite	lt
   be93c:	2000      	movlt	r0, #0
   be93e:	2001      	movge	r0, #1
}
   be940:	b002      	add	sp, #8
   be942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   be946:	f856 0b04 	ldr.w	r0, [r6], #4
   be94a:	4639      	mov	r1, r7
   be94c:	3004      	adds	r0, #4
   be94e:	f7ff fdfb 	bl	be548 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   be952:	4284      	cmp	r4, r0
   be954:	bfa8      	it	ge
   be956:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   be958:	e7e9      	b.n	be92e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   be95a:	2000      	movs	r0, #0
   be95c:	e7f0      	b.n	be940 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   be95e:	bf00      	nop
   be960:	e000ed00 	.word	0xe000ed00

000be964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be966:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   be96a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be96c:	4604      	mov	r4, r0
   be96e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be970:	db0d      	blt.n	be98e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   be972:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   be974:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be976:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be978:	dd04      	ble.n	be984 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   be97a:	00b9      	lsls	r1, r7, #2
   be97c:	f7fe fc9a 	bl	bd2b4 <realloc>
            if (!d) {
   be980:	b918      	cbnz	r0, be98a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   be982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   be984:	f7fe fc8e 	bl	bd2a4 <free>
        T* d = nullptr;
   be988:	2000      	movs	r0, #0
        data_ = d;
   be98a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be98c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be98e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   be990:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be992:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   be996:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   be998:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   be99c:	1d08      	adds	r0, r1, #4
   be99e:	f002 fc3d 	bl	c121c <memmove>
    new(p) T(std::move(value));
   be9a2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   be9a6:	6863      	ldr	r3, [r4, #4]
   be9a8:	3301      	adds	r3, #1
   be9aa:	6063      	str	r3, [r4, #4]
    return true;
   be9ac:	2001      	movs	r0, #1
   be9ae:	e7e8      	b.n	be982 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000be9b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   be9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   be9b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   be9b6:	4604      	mov	r4, r0
   be9b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be9ba:	9301      	str	r3, [sp, #4]
   be9bc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   be9be:	f7ff fd19 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   be9c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   be9c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   be9ca:	4293      	cmp	r3, r2
   be9cc:	4619      	mov	r1, r3
   be9ce:	d00b      	beq.n	be9e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   be9d0:	6809      	ldr	r1, [r1, #0]
   be9d2:	42a9      	cmp	r1, r5
   be9d4:	f103 0304 	add.w	r3, r3, #4
   be9d8:	d1f7      	bne.n	be9ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   be9da:	a801      	add	r0, sp, #4
   be9dc:	f7ff ff0d 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be9e0:	2500      	movs	r5, #0
}
   be9e2:	4628      	mov	r0, r5
   be9e4:	b003      	add	sp, #12
   be9e6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   be9e8:	4629      	mov	r1, r5
   be9ea:	4620      	mov	r0, r4
   be9ec:	f7ff ffba 	bl	be964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   be9f0:	4605      	mov	r5, r0
   be9f2:	2800      	cmp	r0, #0
   be9f4:	d0f1      	beq.n	be9da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   be9f6:	6863      	ldr	r3, [r4, #4]
   be9f8:	2b01      	cmp	r3, #1
   be9fa:	d101      	bne.n	bea00 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   be9fc:	f7ff fe34 	bl	be668 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bea00:	a801      	add	r0, sp, #4
   bea02:	f7ff fefa 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bea06:	e7ec      	b.n	be9e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bea08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bea08:	b570      	push	{r4, r5, r6, lr}
   bea0a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bea0c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bea10:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bea12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bea16:	4282      	cmp	r2, r0
   bea18:	d00f      	beq.n	bea3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bea1a:	4601      	mov	r1, r0
            if (*p == value) {
   bea1c:	681d      	ldr	r5, [r3, #0]
   bea1e:	f851 6b04 	ldr.w	r6, [r1], #4
   bea22:	42ae      	cmp	r6, r5
   bea24:	d107      	bne.n	bea36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bea26:	1a52      	subs	r2, r2, r1
   bea28:	f002 fbf8 	bl	c121c <memmove>
    --size_;
   bea2c:	6863      	ldr	r3, [r4, #4]
   bea2e:	3b01      	subs	r3, #1
   bea30:	6063      	str	r3, [r4, #4]
    return true;
   bea32:	2001      	movs	r0, #1
}
   bea34:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bea36:	4608      	mov	r0, r1
   bea38:	e7ed      	b.n	bea16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bea3a:	2000      	movs	r0, #0
   bea3c:	e7fa      	b.n	bea34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bea3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bea3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bea40:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bea44:	4604      	mov	r4, r0
   bea46:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bea48:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bea4a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bea4c:	f7ff fcd2 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bea50:	a901      	add	r1, sp, #4
   bea52:	4620      	mov	r0, r4
   bea54:	f7ff ffd8 	bl	bea08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bea58:	b118      	cbz	r0, bea62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bea5a:	6863      	ldr	r3, [r4, #4]
   bea5c:	b90b      	cbnz	r3, bea62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bea5e:	f7ff fe0f 	bl	be680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bea62:	a803      	add	r0, sp, #12
   bea64:	f7ff fec9 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bea68:	b004      	add	sp, #16
   bea6a:	bd10      	pop	{r4, pc}

000bea6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bea6c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bea6e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bea72:	2318      	movs	r3, #24
   bea74:	4604      	mov	r4, r0
   bea76:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bea7a:	42ae      	cmp	r6, r5
   bea7c:	d015      	beq.n	beaaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bea7e:	f105 0110 	add.w	r1, r5, #16
   bea82:	4620      	mov	r0, r4
   bea84:	f7ff ffc0 	bl	bea08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bea88:	6863      	ldr	r3, [r4, #4]
   bea8a:	b90b      	cbnz	r3, bea90 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bea8c:	f7ff fdf8 	bl	be680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bea90:	69e0      	ldr	r0, [r4, #28]
   bea92:	6929      	ldr	r1, [r5, #16]
   bea94:	6803      	ldr	r3, [r0, #0]
   bea96:	68db      	ldr	r3, [r3, #12]
   bea98:	4798      	blx	r3
        if (h.stream) {
   bea9a:	6969      	ldr	r1, [r5, #20]
   bea9c:	b119      	cbz	r1, beaa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bea9e:	6a20      	ldr	r0, [r4, #32]
   beaa0:	6803      	ldr	r3, [r0, #0]
   beaa2:	68db      	ldr	r3, [r3, #12]
   beaa4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   beaa6:	3518      	adds	r5, #24
   beaa8:	e7e7      	b.n	bea7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   beaaa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   beaae:	2618      	movs	r6, #24
   beab0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   beab4:	42ae      	cmp	r6, r5
   beab6:	d004      	beq.n	beac2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   beab8:	4628      	mov	r0, r5
   beaba:	f000 ff45 	bl	bf948 <_ZN6StringD1Ev>
   beabe:	3518      	adds	r5, #24
   beac0:	e7f8      	b.n	beab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   beac2:	2300      	movs	r3, #0
   beac4:	6163      	str	r3, [r4, #20]
}
   beac6:	bd70      	pop	{r4, r5, r6, pc}

000beac8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   beac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   beaca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   beacc:	f7ff fdd8 	bl	be680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bead0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bead4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bead6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bead8:	f7ff fc8c 	bl	be3f4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   beadc:	4620      	mov	r0, r4
   beade:	f7ff ffc5 	bl	bea6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   beae2:	a801      	add	r0, sp, #4
   beae4:	f7ff fe89 	bl	be7fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   beae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   beaea:	b108      	cbz	r0, beaf0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   beaec:	f7fd ffee 	bl	bcacc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   beaf0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   beaf4:	2618      	movs	r6, #24
   beaf6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   beafa:	42ae      	cmp	r6, r5
   beafc:	d004      	beq.n	beb08 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   beafe:	4628      	mov	r0, r5
   beb00:	f000 ff22 	bl	bf948 <_ZN6StringD1Ev>
   beb04:	3518      	adds	r5, #24
   beb06:	e7f8      	b.n	beafa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   beb08:	6920      	ldr	r0, [r4, #16]
   beb0a:	f7fe fbcb 	bl	bd2a4 <free>
   beb0e:	6820      	ldr	r0, [r4, #0]
   beb10:	f7fe fbc8 	bl	bd2a4 <free>
}
   beb14:	4620      	mov	r0, r4
   beb16:	b002      	add	sp, #8
   beb18:	bd70      	pop	{r4, r5, r6, pc}
	...

000beb1c <__tcf_2>:
    static LogManager mgr;
   beb1c:	4801      	ldr	r0, [pc, #4]	; (beb24 <__tcf_2+0x8>)
   beb1e:	f7ff bfd3 	b.w	beac8 <_ZN5spark10LogManagerD1Ev>
   beb22:	bf00      	nop
   beb24:	2003e654 	.word	0x2003e654

000beb28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   beb28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beb2c:	4604      	mov	r4, r0
   beb2e:	460d      	mov	r5, r1
   beb30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beb32:	d915      	bls.n	beb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   beb34:	4290      	cmp	r0, r2
   beb36:	d214      	bcs.n	beb62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   beb38:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   beb3c:	1a75      	subs	r5, r6, r1
   beb3e:	f1a1 0714 	sub.w	r7, r1, #20
   beb42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beb44:	42b7      	cmp	r7, r6
   beb46:	d01a      	beq.n	beb7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   beb48:	b11c      	cbz	r4, beb52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   beb4a:	4631      	mov	r1, r6
   beb4c:	4620      	mov	r0, r4
   beb4e:	f7ff fcab 	bl	be4a8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   beb52:	f106 0008 	add.w	r0, r6, #8
   beb56:	f7ff fdf9 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   beb5a:	3e14      	subs	r6, #20
   beb5c:	3c14      	subs	r4, #20
   beb5e:	e7f1      	b.n	beb44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   beb60:	d00d      	beq.n	beb7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   beb62:	42b5      	cmp	r5, r6
   beb64:	d00b      	beq.n	beb7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   beb66:	b11c      	cbz	r4, beb70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   beb68:	4629      	mov	r1, r5
   beb6a:	4620      	mov	r0, r4
   beb6c:	f7ff fc9c 	bl	be4a8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   beb70:	f105 0008 	add.w	r0, r5, #8
   beb74:	f7ff fdea 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   beb78:	3514      	adds	r5, #20
   beb7a:	3414      	adds	r4, #20
   beb7c:	e7f1      	b.n	beb62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   beb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000beb80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   beb80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beb84:	4604      	mov	r4, r0
   beb86:	460d      	mov	r5, r1
   beb88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beb8a:	d914      	bls.n	bebb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   beb8c:	4290      	cmp	r0, r2
   beb8e:	d213      	bcs.n	bebb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   beb90:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   beb94:	1a75      	subs	r5, r6, r1
   beb96:	f1a1 0710 	sub.w	r7, r1, #16
   beb9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beb9c:	42b7      	cmp	r7, r6
   beb9e:	d018      	beq.n	bebd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   beba0:	b11c      	cbz	r4, bebaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   beba2:	4631      	mov	r1, r6
   beba4:	4620      	mov	r0, r4
   beba6:	f000 ff4b 	bl	bfa40 <_ZN6StringC1EOS_>
                end->~T();
   bebaa:	4630      	mov	r0, r6
   bebac:	f000 fecc 	bl	bf948 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bebb0:	3e10      	subs	r6, #16
   bebb2:	3c10      	subs	r4, #16
   bebb4:	e7f2      	b.n	beb9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bebb6:	d00c      	beq.n	bebd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bebb8:	42b5      	cmp	r5, r6
   bebba:	d00a      	beq.n	bebd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bebbc:	b11c      	cbz	r4, bebc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bebbe:	4629      	mov	r1, r5
   bebc0:	4620      	mov	r0, r4
   bebc2:	f000 ff3d 	bl	bfa40 <_ZN6StringC1EOS_>
                p->~T();
   bebc6:	4628      	mov	r0, r5
   bebc8:	f000 febe 	bl	bf948 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bebcc:	3510      	adds	r5, #16
   bebce:	3410      	adds	r4, #16
   bebd0:	e7f2      	b.n	bebb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bebd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bebd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bebd4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bebd6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bebd8:	4605      	mov	r5, r0
        if (n > 0) {
   bebda:	dd11      	ble.n	bec00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bebdc:	0130      	lsls	r0, r6, #4
   bebde:	f7fe fb59 	bl	bd294 <malloc>
            if (!d) {
   bebe2:	4604      	mov	r4, r0
   bebe4:	b158      	cbz	r0, bebfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bebe6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bebea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bebee:	f7ff ffc7 	bl	beb80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bebf2:	6828      	ldr	r0, [r5, #0]
   bebf4:	f7fe fb56 	bl	bd2a4 <free>
        data_ = d;
   bebf8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bebfa:	60ae      	str	r6, [r5, #8]
        return true;
   bebfc:	2001      	movs	r0, #1
    }
   bebfe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bec00:	2400      	movs	r4, #0
   bec02:	e7f6      	b.n	bebf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bec04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bec08:	4690      	mov	r8, r2
   bec0a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bec0c:	2300      	movs	r3, #0
   bec0e:	9103      	str	r1, [sp, #12]
    return size_;
   bec10:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bec14:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bec16:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bec18:	4299      	cmp	r1, r3
        capacity_(0) {
   bec1a:	e9c0 3300 	strd	r3, r3, [r0]
   bec1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bec22:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bec26:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bec2a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bec2c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bec2e:	dc23      	bgt.n	bec78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bec30:	e9d8 5700 	ldrd	r5, r7, [r8]
   bec34:	2314      	movs	r3, #20
   bec36:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bec3a:	42af      	cmp	r7, r5
   bec3c:	d03b      	beq.n	becb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bec3e:	4629      	mov	r1, r5
   bec40:	a80b      	add	r0, sp, #44	; 0x2c
   bec42:	f000 fefd 	bl	bfa40 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bec46:	a90b      	add	r1, sp, #44	; 0x2c
   bec48:	a80f      	add	r0, sp, #60	; 0x3c
   bec4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bec4c:	f000 fef8 	bl	bfa40 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec50:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bec54:	4299      	cmp	r1, r3
   bec56:	da1b      	bge.n	bec90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bec58:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bec5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bec5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bec60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bec64:	4631      	mov	r1, r6
   bec66:	f106 0010 	add.w	r0, r6, #16
   bec6a:	f7ff ff89 	bl	beb80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bec6e:	b9ee      	cbnz	r6, becac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bec72:	3301      	adds	r3, #1
   bec74:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bec76:	e011      	b.n	bec9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bec78:	a808      	add	r0, sp, #32
   bec7a:	f7ff ffab 	bl	bebd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bec7e:	2800      	cmp	r0, #0
   bec80:	d1d6      	bne.n	bec30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bec82:	a808      	add	r0, sp, #32
   bec84:	f7fe fbb1 	bl	bd3ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bec88:	4620      	mov	r0, r4
   bec8a:	b015      	add	sp, #84	; 0x54
   bec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec90:	3101      	adds	r1, #1
   bec92:	a808      	add	r0, sp, #32
   bec94:	f7ff ff9e 	bl	bebd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bec98:	2800      	cmp	r0, #0
   bec9a:	d1dd      	bne.n	bec58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bec9c:	a80f      	add	r0, sp, #60	; 0x3c
   bec9e:	f000 fe53 	bl	bf948 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   beca2:	a80b      	add	r0, sp, #44	; 0x2c
   beca4:	f000 fe50 	bl	bf948 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   beca8:	3514      	adds	r5, #20
   becaa:	e7c6      	b.n	bec3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   becac:	a90f      	add	r1, sp, #60	; 0x3c
   becae:	4630      	mov	r0, r6
   becb0:	f000 fec6 	bl	bfa40 <_ZN6StringC1EOS_>
   becb4:	e7dc      	b.n	bec70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   becb6:	2600      	movs	r6, #0
   becb8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   becbc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   becbe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   becc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   becc6:	429e      	cmp	r6, r3
   becc8:	da7c      	bge.n	bedc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   becca:	0133      	lsls	r3, r6, #4
   beccc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   becce:	9306      	str	r3, [sp, #24]
        if (!category) {
   becd0:	b90b      	cbnz	r3, becd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   becd2:	3601      	adds	r6, #1
   becd4:	e7f5      	b.n	becc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   becd6:	2300      	movs	r3, #0
   becd8:	9307      	str	r3, [sp, #28]
   becda:	fb09 f306 	mul.w	r3, r9, r6
   becde:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bece0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bece2:	a907      	add	r1, sp, #28
   bece4:	a806      	add	r0, sp, #24
   bece6:	f7ff fb5e 	bl	be3a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   becea:	4682      	mov	sl, r0
   becec:	2800      	cmp	r0, #0
   becee:	d0f0      	beq.n	becd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   becf0:	f04f 0300 	mov.w	r3, #0
   becf4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   becf8:	4601      	mov	r1, r0
   becfa:	9a07      	ldr	r2, [sp, #28]
   becfc:	f10d 0317 	add.w	r3, sp, #23
   bed00:	4628      	mov	r0, r5
   bed02:	f7ff fbe5 	bl	be4d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed06:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bed0a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed0c:	2f00      	cmp	r7, #0
   bed0e:	d14a      	bne.n	beda6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bed10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bed14:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bed18:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bed1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bed20:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bed24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bed28:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bed2a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bed2e:	4293      	cmp	r3, r2
   bed30:	db17      	blt.n	bed62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bed32:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bed36:	f1ba 0f00 	cmp.w	sl, #0
   bed3a:	dd30      	ble.n	bed9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bed3c:	fb09 f00a 	mul.w	r0, r9, sl
   bed40:	f7fe faa8 	bl	bd294 <malloc>
            if (!d) {
   bed44:	4683      	mov	fp, r0
   bed46:	b360      	cbz	r0, beda2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bed48:	e9d5 1200 	ldrd	r1, r2, [r5]
   bed4c:	fb09 1202 	mla	r2, r9, r2, r1
   bed50:	f7ff feea 	bl	beb28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bed54:	6828      	ldr	r0, [r5, #0]
   bed56:	f7fe faa5 	bl	bd2a4 <free>
        data_ = d;
   bed5a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bed5e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bed62:	682b      	ldr	r3, [r5, #0]
   bed64:	9a01      	ldr	r2, [sp, #4]
   bed66:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bed6a:	686a      	ldr	r2, [r5, #4]
   bed6c:	4651      	mov	r1, sl
   bed6e:	fb09 3202 	mla	r2, r9, r2, r3
   bed72:	f10a 0014 	add.w	r0, sl, #20
   bed76:	f7ff fed7 	bl	beb28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bed7a:	f1ba 0f00 	cmp.w	sl, #0
   bed7e:	d003      	beq.n	bed88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bed80:	a90f      	add	r1, sp, #60	; 0x3c
   bed82:	4650      	mov	r0, sl
   bed84:	f7ff fb90 	bl	be4a8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bed88:	686b      	ldr	r3, [r5, #4]
   bed8a:	3301      	adds	r3, #1
   bed8c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bed8e:	a811      	add	r0, sp, #68	; 0x44
   bed90:	f7ff fcdc 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed94:	b13f      	cbz	r7, beda6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bed96:	a80b      	add	r0, sp, #44	; 0x2c
   bed98:	f7ff fcd8 	bl	be74c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bed9c:	e771      	b.n	bec82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bed9e:	46bb      	mov	fp, r7
   beda0:	e7d8      	b.n	bed54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   beda2:	2701      	movs	r7, #1
   beda4:	e7f3      	b.n	bed8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   beda6:	9b01      	ldr	r3, [sp, #4]
   beda8:	682d      	ldr	r5, [r5, #0]
   bedaa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bedae:	9b06      	ldr	r3, [sp, #24]
   bedb0:	781b      	ldrb	r3, [r3, #0]
   bedb2:	b92b      	cbnz	r3, bedc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bedb4:	f8d8 3000 	ldr.w	r3, [r8]
   bedb8:	9a02      	ldr	r2, [sp, #8]
   bedba:	4413      	add	r3, r2
   bedbc:	7c1b      	ldrb	r3, [r3, #16]
   bedbe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bedc0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bedc2:	e78e      	b.n	bece2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedc4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bedc6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedc8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bedca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedcc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bedce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bedd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bedd2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedd4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bedd6:	60a2      	str	r2, [r4, #8]
   bedd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bedda:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beddc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bedde:	60e2      	str	r2, [r4, #12]
   bede0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bede2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bede4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bede6:	6122      	str	r2, [r4, #16]
   bede8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bedea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bedec:	9b03      	ldr	r3, [sp, #12]
   bedee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bedf0:	6162      	str	r2, [r4, #20]
   bedf2:	7623      	strb	r3, [r4, #24]
   bedf4:	e7cf      	b.n	bed96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bedf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bedf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bedfa:	4604      	mov	r4, r0
   bedfc:	b087      	sub	sp, #28
   bedfe:	460d      	mov	r5, r1
        filter_(level, filters) {
   bee00:	4626      	mov	r6, r4
        stream_(&stream) {
   bee02:	4619      	mov	r1, r3
   bee04:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bee06:	4617      	mov	r7, r2
        stream_(&stream) {
   bee08:	f7f8 fb01 	bl	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bee0c:	4b0b      	ldr	r3, [pc, #44]	; (bee3c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bee0e:	f846 3b04 	str.w	r3, [r6], #4
   bee12:	4669      	mov	r1, sp
   bee14:	a803      	add	r0, sp, #12
   bee16:	f7f8 fafa 	bl	b740e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bee1a:	aa03      	add	r2, sp, #12
   bee1c:	4639      	mov	r1, r7
   bee1e:	4630      	mov	r0, r6
   bee20:	f7ff fef0 	bl	bec04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bee24:	a803      	add	r0, sp, #12
   bee26:	f7f8 fab1 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bee2a:	4668      	mov	r0, sp
   bee2c:	f7f8 faae 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bee30:	4b03      	ldr	r3, [pc, #12]	; (bee40 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bee32:	6023      	str	r3, [r4, #0]
}
   bee34:	4620      	mov	r0, r4
        stream_(&stream) {
   bee36:	6225      	str	r5, [r4, #32]
}
   bee38:	b007      	add	sp, #28
   bee3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bee3c:	000c4820 	.word	0x000c4820
   bee40:	000c5528 	.word	0x000c5528

000bee44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bee44:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee46:	460f      	mov	r7, r1
   bee48:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee4a:	491d      	ldr	r1, [pc, #116]	; (beec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bee4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee4e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bee50:	4616      	mov	r6, r2
   bee52:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee54:	f002 fa97 	bl	c1386 <strcmp>
   bee58:	b9c0      	cbnz	r0, bee8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bee5a:	b1a4      	cbz	r4, bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bee5c:	4629      	mov	r1, r5
   bee5e:	a801      	add	r0, sp, #4
   bee60:	f7ff fcbc 	bl	be7dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bee64:	4917      	ldr	r1, [pc, #92]	; (beec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bee66:	2024      	movs	r0, #36	; 0x24
   bee68:	f001 fc40 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   bee6c:	4605      	mov	r5, r0
   bee6e:	b130      	cbz	r0, bee7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bee70:	ab01      	add	r3, sp, #4
   bee72:	4632      	mov	r2, r6
   bee74:	4621      	mov	r1, r4
   bee76:	f7ff ffbf 	bl	bedf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bee7a:	4b13      	ldr	r3, [pc, #76]	; (beec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bee7c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bee7e:	a801      	add	r0, sp, #4
   bee80:	f7f8 fa84 	bl	b738c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bee84:	462c      	mov	r4, r5
}
   bee86:	4620      	mov	r0, r4
   bee88:	b005      	add	sp, #20
   bee8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bee8c:	490f      	ldr	r1, [pc, #60]	; (beecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bee8e:	4638      	mov	r0, r7
   bee90:	f002 fa79 	bl	c1386 <strcmp>
   bee94:	b990      	cbnz	r0, beebc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bee96:	2c00      	cmp	r4, #0
   bee98:	d0f5      	beq.n	bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bee9a:	4629      	mov	r1, r5
   bee9c:	a801      	add	r0, sp, #4
   bee9e:	f7ff fc9d 	bl	be7dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   beea2:	4908      	ldr	r1, [pc, #32]	; (beec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   beea4:	2024      	movs	r0, #36	; 0x24
   beea6:	f001 fc21 	bl	c06ec <_ZnwjRKSt9nothrow_t>
   beeaa:	4605      	mov	r5, r0
   beeac:	2800      	cmp	r0, #0
   beeae:	d0e6      	beq.n	bee7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   beeb0:	ab01      	add	r3, sp, #4
   beeb2:	4632      	mov	r2, r6
   beeb4:	4621      	mov	r1, r4
   beeb6:	f7ff ff9f 	bl	bedf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beeba:	e7e0      	b.n	bee7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   beebc:	2400      	movs	r4, #0
   beebe:	e7e2      	b.n	bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   beec0:	000c54b2 	.word	0x000c54b2
   beec4:	000c567c 	.word	0x000c567c
   beec8:	000c5540 	.word	0x000c5540
   beecc:	000c54b6 	.word	0x000c54b6

000beed0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   beed0:	4b01      	ldr	r3, [pc, #4]	; (beed8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   beed2:	4a02      	ldr	r2, [pc, #8]	; (beedc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   beed4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   beed6:	4770      	bx	lr
   beed8:	2003e650 	.word	0x2003e650
   beedc:	000c54c7 	.word	0x000c54c7

000beee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   beee4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   beee6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beeea:	4604      	mov	r4, r0
   beeec:	460e      	mov	r6, r1
   beeee:	4617      	mov	r7, r2
   beef0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   beef2:	f001 f9d1 	bl	c0298 <_Z16_fetch_usbserialv>
   beef6:	4581      	cmp	r9, r0
   beef8:	d04c      	beq.n	bef94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   beefa:	792b      	ldrb	r3, [r5, #4]
   beefc:	0719      	lsls	r1, r3, #28
   beefe:	d504      	bpl.n	bef0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bef00:	696a      	ldr	r2, [r5, #20]
   bef02:	4954      	ldr	r1, [pc, #336]	; (bf054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bef04:	4620      	mov	r0, r4
   bef06:	f7ff fac0 	bl	be48a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bef0a:	f1b8 0f00 	cmp.w	r8, #0
   bef0e:	d00d      	beq.n	bef2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bef10:	215b      	movs	r1, #91	; 0x5b
   bef12:	4620      	mov	r0, r4
   bef14:	f7ff faad 	bl	be472 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bef18:	4641      	mov	r1, r8
   bef1a:	4620      	mov	r0, r4
   bef1c:	f7ff fa9a 	bl	be454 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bef20:	6823      	ldr	r3, [r4, #0]
   bef22:	494d      	ldr	r1, [pc, #308]	; (bf058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bef24:	68db      	ldr	r3, [r3, #12]
   bef26:	2202      	movs	r2, #2
   bef28:	4620      	mov	r0, r4
   bef2a:	4798      	blx	r3
    if (attr.has_file) {
   bef2c:	792b      	ldrb	r3, [r5, #4]
   bef2e:	07da      	lsls	r2, r3, #31
   bef30:	d523      	bpl.n	bef7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bef32:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bef36:	212f      	movs	r1, #47	; 0x2f
   bef38:	4640      	mov	r0, r8
   bef3a:	f002 fa83 	bl	c1444 <strrchr>
    if (s1) {
   bef3e:	b108      	cbz	r0, bef44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bef40:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bef44:	4641      	mov	r1, r8
   bef46:	4620      	mov	r0, r4
   bef48:	f7ff fa84 	bl	be454 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bef4c:	792b      	ldrb	r3, [r5, #4]
   bef4e:	079b      	lsls	r3, r3, #30
   bef50:	d508      	bpl.n	bef64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bef52:	213a      	movs	r1, #58	; 0x3a
   bef54:	4620      	mov	r0, r4
   bef56:	f7ff fa8c 	bl	be472 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bef5a:	68ea      	ldr	r2, [r5, #12]
   bef5c:	493f      	ldr	r1, [pc, #252]	; (bf05c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bef5e:	4620      	mov	r0, r4
   bef60:	f7ff fa93 	bl	be48a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bef64:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bef66:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bef68:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bef6c:	68db      	ldr	r3, [r3, #12]
   bef6e:	bf14      	ite	ne
   bef70:	493b      	ldrne	r1, [pc, #236]	; (bf060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bef72:	493c      	ldreq	r1, [pc, #240]	; (bf064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bef74:	2202      	movs	r2, #2
            write(": ", 2);
   bef76:	4620      	mov	r0, r4
   bef78:	4798      	blx	r3
    if (attr.has_function) {
   bef7a:	792b      	ldrb	r3, [r5, #4]
   bef7c:	0758      	lsls	r0, r3, #29
   bef7e:	d51d      	bpl.n	befbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bef80:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bef82:	460b      	mov	r3, r1
   bef84:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bef86:	f813 0b01 	ldrb.w	r0, [r3], #1
   bef8a:	b160      	cbz	r0, befa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bef8c:	2820      	cmp	r0, #32
   bef8e:	d108      	bne.n	befa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bef90:	4619      	mov	r1, r3
   bef92:	e7f7      	b.n	bef84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bef94:	4834      	ldr	r0, [pc, #208]	; (bf068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bef96:	f000 f966 	bl	bf266 <_ZN5spark12NetworkClass9listeningEv>
   bef9a:	2800      	cmp	r0, #0
   bef9c:	d0ad      	beq.n	beefa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bef9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   befa2:	2828      	cmp	r0, #40	; 0x28
   befa4:	d1ee      	bne.n	bef84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   befa6:	6823      	ldr	r3, [r4, #0]
   befa8:	1a52      	subs	r2, r2, r1
   befaa:	68db      	ldr	r3, [r3, #12]
   befac:	4620      	mov	r0, r4
   befae:	4798      	blx	r3
        write("(): ", 4);
   befb0:	6823      	ldr	r3, [r4, #0]
   befb2:	492e      	ldr	r1, [pc, #184]	; (bf06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   befb4:	68db      	ldr	r3, [r3, #12]
   befb6:	2204      	movs	r2, #4
   befb8:	4620      	mov	r0, r4
   befba:	4798      	blx	r3
    return log_level_name(level, nullptr);
   befbc:	2100      	movs	r1, #0
   befbe:	4638      	mov	r0, r7
   befc0:	f7fe f81c 	bl	bcffc <log_level_name>
   befc4:	4601      	mov	r1, r0
    write(s);
   befc6:	4620      	mov	r0, r4
   befc8:	f7ff fa44 	bl	be454 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   befcc:	6823      	ldr	r3, [r4, #0]
   befce:	4925      	ldr	r1, [pc, #148]	; (bf064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   befd0:	68db      	ldr	r3, [r3, #12]
   befd2:	2202      	movs	r2, #2
   befd4:	4620      	mov	r0, r4
   befd6:	4798      	blx	r3
    if (msg) {
   befd8:	b11e      	cbz	r6, befe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   befda:	4631      	mov	r1, r6
   befdc:	4620      	mov	r0, r4
   befde:	f7ff fa39 	bl	be454 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   befe2:	792b      	ldrb	r3, [r5, #4]
   befe4:	f013 0f30 	tst.w	r3, #48	; 0x30
   befe8:	d02c      	beq.n	bf044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   befea:	6823      	ldr	r3, [r4, #0]
   befec:	4920      	ldr	r1, [pc, #128]	; (bf070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   befee:	68db      	ldr	r3, [r3, #12]
   beff0:	2202      	movs	r2, #2
   beff2:	4620      	mov	r0, r4
   beff4:	4798      	blx	r3
        if (attr.has_code) {
   beff6:	792b      	ldrb	r3, [r5, #4]
   beff8:	06d9      	lsls	r1, r3, #27
   beffa:	d50a      	bpl.n	bf012 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   beffc:	6823      	ldr	r3, [r4, #0]
   beffe:	491d      	ldr	r1, [pc, #116]	; (bf074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bf000:	68db      	ldr	r3, [r3, #12]
   bf002:	2207      	movs	r2, #7
   bf004:	4620      	mov	r0, r4
   bf006:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bf008:	69aa      	ldr	r2, [r5, #24]
   bf00a:	491b      	ldr	r1, [pc, #108]	; (bf078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bf00c:	4620      	mov	r0, r4
   bf00e:	f7ff fa3c 	bl	be48a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bf012:	792b      	ldrb	r3, [r5, #4]
   bf014:	069a      	lsls	r2, r3, #26
   bf016:	d511      	bpl.n	bf03c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bf018:	06db      	lsls	r3, r3, #27
   bf01a:	d505      	bpl.n	bf028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bf01c:	6823      	ldr	r3, [r4, #0]
   bf01e:	4910      	ldr	r1, [pc, #64]	; (bf060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bf020:	68db      	ldr	r3, [r3, #12]
   bf022:	2202      	movs	r2, #2
   bf024:	4620      	mov	r0, r4
   bf026:	4798      	blx	r3
            write("details = ", 10);
   bf028:	6823      	ldr	r3, [r4, #0]
   bf02a:	4914      	ldr	r1, [pc, #80]	; (bf07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bf02c:	68db      	ldr	r3, [r3, #12]
   bf02e:	4620      	mov	r0, r4
   bf030:	220a      	movs	r2, #10
   bf032:	4798      	blx	r3
            write(attr.details);
   bf034:	69e9      	ldr	r1, [r5, #28]
   bf036:	4620      	mov	r0, r4
   bf038:	f7ff fa0c 	bl	be454 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bf03c:	215d      	movs	r1, #93	; 0x5d
   bf03e:	4620      	mov	r0, r4
   bf040:	f7ff fa17 	bl	be472 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bf044:	6823      	ldr	r3, [r4, #0]
   bf046:	490e      	ldr	r1, [pc, #56]	; (bf080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bf048:	68db      	ldr	r3, [r3, #12]
   bf04a:	4620      	mov	r0, r4
   bf04c:	2202      	movs	r2, #2
}
   bf04e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bf052:	4718      	bx	r3
   bf054:	000c54cb 	.word	0x000c54cb
   bf058:	000c54d2 	.word	0x000c54d2
   bf05c:	000c3a03 	.word	0x000c3a03
   bf060:	000c54d5 	.word	0x000c54d5
   bf064:	000c54da 	.word	0x000c54da
   bf068:	2003e67c 	.word	0x2003e67c
   bf06c:	000c54d8 	.word	0x000c54d8
   bf070:	000c54dd 	.word	0x000c54dd
   bf074:	000c54e0 	.word	0x000c54e0
   bf078:	000c54e8 	.word	0x000c54e8
   bf07c:	000c54eb 	.word	0x000c54eb
   bf080:	000c54f6 	.word	0x000c54f6

000bf084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf088:	b085      	sub	sp, #20
    return stream_;
   bf08a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bf08e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bf090:	4605      	mov	r5, r0
   bf092:	460f      	mov	r7, r1
   bf094:	4690      	mov	r8, r2
   bf096:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bf098:	f001 f8fe 	bl	c0298 <_Z16_fetch_usbserialv>
   bf09c:	4581      	cmp	r9, r0
   bf09e:	d105      	bne.n	bf0ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bf0a0:	4849      	ldr	r0, [pc, #292]	; (bf1c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bf0a2:	f000 f8e0 	bl	bf266 <_ZN5spark12NetworkClass9listeningEv>
   bf0a6:	2800      	cmp	r0, #0
   bf0a8:	f040 808a 	bne.w	bf1c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bf0ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bf0ae:	4a47      	ldr	r2, [pc, #284]	; (bf1cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bf0b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bf0b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bf0b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   bf0b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bf0ba:	f88d 9008 	strb.w	r9, [sp, #8]
   bf0be:	f7ff f8b4 	bl	be22a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bf0c2:	4649      	mov	r1, r9
   bf0c4:	4640      	mov	r0, r8
   bf0c6:	f7fd ff99 	bl	bcffc <log_level_name>
    json.name("l", 1).value(s);
   bf0ca:	4941      	ldr	r1, [pc, #260]	; (bf1d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bf0cc:	4680      	mov	r8, r0
   bf0ce:	2201      	movs	r2, #1
   bf0d0:	a801      	add	r0, sp, #4
   bf0d2:	f7ff f939 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf0d6:	4641      	mov	r1, r8
   bf0d8:	f7ff f9ae 	bl	be438 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bf0dc:	b13f      	cbz	r7, bf0ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bf0de:	493d      	ldr	r1, [pc, #244]	; (bf1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bf0e0:	2201      	movs	r2, #1
   bf0e2:	a801      	add	r0, sp, #4
   bf0e4:	f7ff f930 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf0e8:	4639      	mov	r1, r7
   bf0ea:	f7ff f9a5 	bl	be438 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bf0ee:	b13e      	cbz	r6, bf100 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bf0f0:	4939      	ldr	r1, [pc, #228]	; (bf1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bf0f2:	2201      	movs	r2, #1
   bf0f4:	a801      	add	r0, sp, #4
   bf0f6:	f7ff f927 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf0fa:	4631      	mov	r1, r6
   bf0fc:	f7ff f99c 	bl	be438 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bf100:	7923      	ldrb	r3, [r4, #4]
   bf102:	07df      	lsls	r7, r3, #31
   bf104:	d50e      	bpl.n	bf124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bf106:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bf108:	212f      	movs	r1, #47	; 0x2f
   bf10a:	4630      	mov	r0, r6
   bf10c:	f002 f99a 	bl	c1444 <strrchr>
    if (s1) {
   bf110:	b100      	cbz	r0, bf114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bf112:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bf114:	4931      	ldr	r1, [pc, #196]	; (bf1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bf116:	2201      	movs	r2, #1
   bf118:	a801      	add	r0, sp, #4
   bf11a:	f7ff f915 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf11e:	4631      	mov	r1, r6
   bf120:	f7ff f98a 	bl	be438 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bf124:	7923      	ldrb	r3, [r4, #4]
   bf126:	079e      	lsls	r6, r3, #30
   bf128:	d507      	bpl.n	bf13a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bf12a:	492d      	ldr	r1, [pc, #180]	; (bf1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bf12c:	2202      	movs	r2, #2
   bf12e:	a801      	add	r0, sp, #4
   bf130:	f7ff f90a 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf134:	68e1      	ldr	r1, [r4, #12]
   bf136:	f7ff f885 	bl	be244 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bf13a:	7923      	ldrb	r3, [r4, #4]
   bf13c:	0758      	lsls	r0, r3, #29
   bf13e:	d514      	bpl.n	bf16a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf140:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf142:	4633      	mov	r3, r6
   bf144:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bf146:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf14a:	b12a      	cbz	r2, bf158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bf14c:	2a20      	cmp	r2, #32
   bf14e:	d101      	bne.n	bf154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bf150:	461e      	mov	r6, r3
   bf152:	e7f7      	b.n	bf144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bf154:	2a28      	cmp	r2, #40	; 0x28
   bf156:	d1f5      	bne.n	bf144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bf158:	4922      	ldr	r1, [pc, #136]	; (bf1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bf15a:	2202      	movs	r2, #2
   bf15c:	a801      	add	r0, sp, #4
   bf15e:	f7ff f8f3 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf162:	1bba      	subs	r2, r7, r6
   bf164:	4631      	mov	r1, r6
   bf166:	f7ff f8ff 	bl	be368 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bf16a:	7923      	ldrb	r3, [r4, #4]
   bf16c:	0719      	lsls	r1, r3, #28
   bf16e:	d507      	bpl.n	bf180 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bf170:	491d      	ldr	r1, [pc, #116]	; (bf1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bf172:	2201      	movs	r2, #1
   bf174:	a801      	add	r0, sp, #4
   bf176:	f7ff f8e7 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf17a:	6961      	ldr	r1, [r4, #20]
   bf17c:	f7ff f874 	bl	be268 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bf180:	7923      	ldrb	r3, [r4, #4]
   bf182:	06da      	lsls	r2, r3, #27
   bf184:	d508      	bpl.n	bf198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bf186:	2204      	movs	r2, #4
   bf188:	4918      	ldr	r1, [pc, #96]	; (bf1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bf18a:	eb0d 0002 	add.w	r0, sp, r2
   bf18e:	f7ff f8db 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf192:	69a1      	ldr	r1, [r4, #24]
   bf194:	f7ff f856 	bl	be244 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bf198:	7923      	ldrb	r3, [r4, #4]
   bf19a:	069b      	lsls	r3, r3, #26
   bf19c:	d507      	bpl.n	bf1ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bf19e:	4914      	ldr	r1, [pc, #80]	; (bf1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bf1a0:	2206      	movs	r2, #6
   bf1a2:	a801      	add	r0, sp, #4
   bf1a4:	f7ff f8d0 	bl	be348 <_ZN5spark10JSONWriter4nameEPKcj>
   bf1a8:	69e1      	ldr	r1, [r4, #28]
   bf1aa:	f7ff f945 	bl	be438 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bf1ae:	a801      	add	r0, sp, #4
   bf1b0:	f7ff f825 	bl	be1fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bf1b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bf1b6:	490f      	ldr	r1, [pc, #60]	; (bf1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bf1b8:	6803      	ldr	r3, [r0, #0]
   bf1ba:	2202      	movs	r2, #2
   bf1bc:	68db      	ldr	r3, [r3, #12]
   bf1be:	4798      	blx	r3
}
   bf1c0:	b005      	add	sp, #20
   bf1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf1c6:	bf00      	nop
   bf1c8:	2003e67c 	.word	0x2003e67c
   bf1cc:	000c5510 	.word	0x000c5510
   bf1d0:	000c54a8 	.word	0x000c54a8
   bf1d4:	000c4dcc 	.word	0x000c4dcc
   bf1d8:	000c59d8 	.word	0x000c59d8
   bf1dc:	000c4be1 	.word	0x000c4be1
   bf1e0:	000c54f9 	.word	0x000c54f9
   bf1e4:	000c44a5 	.word	0x000c44a5
   bf1e8:	000c3f76 	.word	0x000c3f76
   bf1ec:	000c54fc 	.word	0x000c54fc
   bf1f0:	000c5501 	.word	0x000c5501
   bf1f4:	000c54f6 	.word	0x000c54f6

000bf1f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bf1f8:	2300      	movs	r3, #0
   bf1fa:	6840      	ldr	r0, [r0, #4]
   bf1fc:	461a      	mov	r2, r3
   bf1fe:	f7fd bfe9 	b.w	bd1d4 <network_connect>

000bf202 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bf202:	6840      	ldr	r0, [r0, #4]
   bf204:	2200      	movs	r2, #0
   bf206:	2102      	movs	r1, #2
   bf208:	f7fd bff4 	b.w	bd1f4 <network_disconnect>

000bf20c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bf20c:	2200      	movs	r2, #0
   bf20e:	6840      	ldr	r0, [r0, #4]
   bf210:	4611      	mov	r1, r2
   bf212:	f7fd bfe7 	b.w	bd1e4 <network_connecting>

000bf216 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bf216:	2200      	movs	r2, #0
   bf218:	6840      	ldr	r0, [r0, #4]
   bf21a:	4611      	mov	r1, r2
   bf21c:	f7fd bff2 	b.w	bd204 <network_ready>

000bf220 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bf220:	2300      	movs	r3, #0
   bf222:	6840      	ldr	r0, [r0, #4]
   bf224:	461a      	mov	r2, r3
   bf226:	4619      	mov	r1, r3
   bf228:	f7fd bff4 	b.w	bd214 <network_on>

000bf22c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bf22c:	2300      	movs	r3, #0
   bf22e:	6840      	ldr	r0, [r0, #4]
   bf230:	461a      	mov	r2, r3
   bf232:	4619      	mov	r1, r3
   bf234:	f7fd bff6 	b.w	bd224 <network_off>

000bf238 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bf238:	6840      	ldr	r0, [r0, #4]
   bf23a:	2100      	movs	r1, #0
   bf23c:	f7fe b81a 	b.w	bd274 <network_is_on>

000bf240 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bf240:	6840      	ldr	r0, [r0, #4]
   bf242:	2100      	movs	r1, #0
   bf244:	f7fe b81e 	b.w	bd284 <network_is_off>

000bf248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bf248:	6840      	ldr	r0, [r0, #4]
   bf24a:	2200      	movs	r2, #0
   bf24c:	f081 0101 	eor.w	r1, r1, #1
   bf250:	f7fd bff0 	b.w	bd234 <network_listen>

000bf254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bf254:	6840      	ldr	r0, [r0, #4]
   bf256:	2200      	movs	r2, #0
   bf258:	f7fd bffc 	b.w	bd254 <network_set_listen_timeout>

000bf25c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bf25c:	2200      	movs	r2, #0
   bf25e:	6840      	ldr	r0, [r0, #4]
   bf260:	4611      	mov	r1, r2
   bf262:	f7fd bfff 	b.w	bd264 <network_get_listen_timeout>

000bf266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bf266:	2200      	movs	r2, #0
   bf268:	6840      	ldr	r0, [r0, #4]
   bf26a:	4611      	mov	r1, r2
   bf26c:	f7fd bfea 	b.w	bd244 <network_listening>

000bf270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bf270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf274:	b095      	sub	sp, #84	; 0x54
   bf276:	4614      	mov	r4, r2
   bf278:	460d      	mov	r5, r1
   bf27a:	4607      	mov	r7, r0
    IPAddress addr;
   bf27c:	f7fe fe6e 	bl	bdf5c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bf280:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bf282:	221c      	movs	r2, #28
   bf284:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bf286:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bf288:	f001 ffe2 	bl	c1250 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bf28c:	2340      	movs	r3, #64	; 0x40
   bf28e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bf290:	4620      	mov	r0, r4
   bf292:	466b      	mov	r3, sp
   bf294:	aa0c      	add	r2, sp, #48	; 0x30
   bf296:	2100      	movs	r1, #0
   bf298:	f7fd fd40 	bl	bcd1c <netdb_getaddrinfo>
    if (!r) {
   bf29c:	4604      	mov	r4, r0
   bf29e:	2800      	cmp	r0, #0
   bf2a0:	d14b      	bne.n	bf33a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf2a2:	4602      	mov	r2, r0
   bf2a4:	2101      	movs	r1, #1
   bf2a6:	6868      	ldr	r0, [r5, #4]
   bf2a8:	f7fd ffac 	bl	bd204 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf2ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2b0:	4622      	mov	r2, r4
   bf2b2:	6868      	ldr	r0, [r5, #4]
   bf2b4:	f7fd ffa6 	bl	bd204 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2ba:	4681      	mov	r9, r0
        bool ok = false;
   bf2bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2be:	2e00      	cmp	r6, #0
   bf2c0:	d03b      	beq.n	bf33a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bf2c2:	2900      	cmp	r1, #0
   bf2c4:	d139      	bne.n	bf33a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bf2c6:	6873      	ldr	r3, [r6, #4]
   bf2c8:	2b02      	cmp	r3, #2
   bf2ca:	d003      	beq.n	bf2d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bf2cc:	2b0a      	cmp	r3, #10
   bf2ce:	d011      	beq.n	bf2f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2d0:	69f6      	ldr	r6, [r6, #28]
   bf2d2:	e7f4      	b.n	bf2be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bf2d4:	f1b8 0f00 	cmp.w	r8, #0
   bf2d8:	d0fa      	beq.n	bf2d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bf2da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bf2dc:	a806      	add	r0, sp, #24
   bf2de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bf2e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bf2e2:	f7fe fe69 	bl	bdfb8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bf2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf2e8:	1d3c      	adds	r4, r7, #4
   bf2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf2ec:	682b      	ldr	r3, [r5, #0]
   bf2ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf2f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bf2f2:	e7ed      	b.n	bf2d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bf2f4:	f1b9 0f00 	cmp.w	r9, #0
   bf2f8:	d0ea      	beq.n	bf2d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bf2fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bf2fc:	2210      	movs	r2, #16
   bf2fe:	a801      	add	r0, sp, #4
   bf300:	f001 ffa6 	bl	c1250 <memset>
                    a.v = 6;
   bf304:	2306      	movs	r3, #6
   bf306:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bf30a:	ad01      	add	r5, sp, #4
   bf30c:	f104 0308 	add.w	r3, r4, #8
   bf310:	3418      	adds	r4, #24
   bf312:	6818      	ldr	r0, [r3, #0]
   bf314:	6859      	ldr	r1, [r3, #4]
   bf316:	462a      	mov	r2, r5
   bf318:	c203      	stmia	r2!, {r0, r1}
   bf31a:	3308      	adds	r3, #8
   bf31c:	42a3      	cmp	r3, r4
   bf31e:	4615      	mov	r5, r2
   bf320:	d1f7      	bne.n	bf312 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bf322:	a901      	add	r1, sp, #4
   bf324:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bf326:	ad07      	add	r5, sp, #28
   bf328:	f7fe fe26 	bl	bdf78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bf32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf32e:	1d3c      	adds	r4, r7, #4
   bf330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf332:	682b      	ldr	r3, [r5, #0]
   bf334:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf336:	4649      	mov	r1, r9
   bf338:	e7ca      	b.n	bf2d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bf33a:	9800      	ldr	r0, [sp, #0]
   bf33c:	f7fd fce6 	bl	bcd0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bf340:	4638      	mov	r0, r7
   bf342:	b015      	add	sp, #84	; 0x54
   bf344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bf348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bf348:	4b02      	ldr	r3, [pc, #8]	; (bf354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bf34a:	4a03      	ldr	r2, [pc, #12]	; (bf358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bf34c:	601a      	str	r2, [r3, #0]
   bf34e:	2200      	movs	r2, #0
   bf350:	605a      	str	r2, [r3, #4]

} // spark
   bf352:	4770      	bx	lr
   bf354:	2003e67c 	.word	0x2003e67c
   bf358:	000c5588 	.word	0x000c5588

000bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf35c:	b508      	push	{r3, lr}
            return &Wire1;
   bf35e:	f001 f961 	bl	c0624 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf366:	f7fe bd81 	b.w	bde6c <_ZN7TwoWire4lockEv>

000bf36a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf36a:	b510      	push	{r4, lr}
   bf36c:	4604      	mov	r4, r0
    lock_(_lock)
   bf36e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf370:	b109      	cbz	r1, bf376 <_ZN4PMICC1Eb+0xc>
        lock();
   bf372:	f7ff fff3 	bl	bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf376:	4620      	mov	r0, r4
   bf378:	bd10      	pop	{r4, pc}

000bf37a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf37a:	b508      	push	{r3, lr}
            return &Wire1;
   bf37c:	f001 f952 	bl	c0624 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf384:	f7fe bd7b 	b.w	bde7e <_ZN7TwoWire6unlockEv>

000bf388 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf388:	b510      	push	{r4, lr}
    if (lock_) {
   bf38a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf38c:	4604      	mov	r4, r0
    if (lock_) {
   bf38e:	b10b      	cbz	r3, bf394 <_ZN4PMICD1Ev+0xc>
        unlock();
   bf390:	f7ff fff3 	bl	bf37a <_ZN4PMIC6unlockEv>
}
   bf394:	4620      	mov	r0, r4
   bf396:	bd10      	pop	{r4, pc}

000bf398 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf398:	b510      	push	{r4, lr}
   bf39a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf39c:	6800      	ldr	r0, [r0, #0]
   bf39e:	f7ff ffec 	bl	bf37a <_ZN4PMIC6unlockEv>
   bf3a2:	4620      	mov	r0, r4
   bf3a4:	bd10      	pop	{r4, pc}

000bf3a6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf3a6:	b530      	push	{r4, r5, lr}
   bf3a8:	b087      	sub	sp, #28
   bf3aa:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf3ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf3ae:	f7ff ffd5 	bl	bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf3b2:	226b      	movs	r2, #107	; 0x6b
   bf3b4:	2300      	movs	r3, #0
   bf3b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf3ba:	2401      	movs	r4, #1
   bf3bc:	230a      	movs	r3, #10
   bf3be:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf3c2:	f001 f92f 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf3c6:	a902      	add	r1, sp, #8
   bf3c8:	f7fe fd34 	bl	bde34 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf3cc:	f001 f92a 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf3d0:	6803      	ldr	r3, [r0, #0]
   bf3d2:	4629      	mov	r1, r5
   bf3d4:	689b      	ldr	r3, [r3, #8]
   bf3d6:	4798      	blx	r3
            return &Wire1;
   bf3d8:	f001 f924 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf3dc:	4621      	mov	r1, r4
   bf3de:	f7fe fd41 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf3e2:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf3e4:	f001 f91e 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf3e8:	a902      	add	r1, sp, #8
   bf3ea:	f7fe fcf3 	bl	bddd4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf3ee:	f001 f919 	bl	c0624 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf3f2:	6803      	ldr	r3, [r0, #0]
   bf3f4:	695b      	ldr	r3, [r3, #20]
   bf3f6:	4798      	blx	r3
   bf3f8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf3fa:	a801      	add	r0, sp, #4
   bf3fc:	f7ff ffcc 	bl	bf398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf400:	b2e0      	uxtb	r0, r4
   bf402:	b007      	add	sp, #28
   bf404:	bd30      	pop	{r4, r5, pc}

000bf406 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf406:	b570      	push	{r4, r5, r6, lr}
   bf408:	b086      	sub	sp, #24
   bf40a:	460d      	mov	r5, r1
   bf40c:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf40e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf410:	f7ff ffa4 	bl	bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf414:	226b      	movs	r2, #107	; 0x6b
   bf416:	2300      	movs	r3, #0
   bf418:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf41c:	2601      	movs	r6, #1
   bf41e:	230a      	movs	r3, #10
   bf420:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf424:	f001 f8fe 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf428:	a902      	add	r1, sp, #8
   bf42a:	f7fe fd03 	bl	bde34 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf42e:	f001 f8f9 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf432:	6803      	ldr	r3, [r0, #0]
   bf434:	4629      	mov	r1, r5
   bf436:	689b      	ldr	r3, [r3, #8]
   bf438:	4798      	blx	r3
            return &Wire1;
   bf43a:	f001 f8f3 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf43e:	6803      	ldr	r3, [r0, #0]
   bf440:	4621      	mov	r1, r4
   bf442:	689b      	ldr	r3, [r3, #8]
   bf444:	4798      	blx	r3
            return &Wire1;
   bf446:	f001 f8ed 	bl	c0624 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf44a:	4631      	mov	r1, r6
   bf44c:	f7fe fd0a 	bl	bde64 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf450:	a801      	add	r0, sp, #4
   bf452:	f7ff ffa1 	bl	bf398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf456:	b006      	add	sp, #24
   bf458:	bd70      	pop	{r4, r5, r6, pc}

000bf45a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf45a:	b513      	push	{r0, r1, r4, lr}
   bf45c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf45e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf460:	f7ff ff7c 	bl	bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf464:	2101      	movs	r1, #1
   bf466:	4620      	mov	r0, r4
   bf468:	f7ff ff9d 	bl	bf3a6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf46c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf470:	2b10      	cmp	r3, #16
   bf472:	d007      	beq.n	bf484 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf474:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf478:	f042 0210 	orr.w	r2, r2, #16
   bf47c:	2101      	movs	r1, #1
   bf47e:	4620      	mov	r0, r4
   bf480:	f7ff ffc1 	bl	bf406 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf484:	a801      	add	r0, sp, #4
   bf486:	f7ff ff87 	bl	bf398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf48a:	2001      	movs	r0, #1
   bf48c:	b002      	add	sp, #8
   bf48e:	bd10      	pop	{r4, pc}

000bf490 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf490:	b513      	push	{r0, r1, r4, lr}
   bf492:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf494:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf496:	f7ff ff61 	bl	bf35c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf49a:	2101      	movs	r1, #1
   bf49c:	4620      	mov	r0, r4
   bf49e:	f7ff ff82 	bl	bf3a6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf4a2:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf4a6:	d005      	beq.n	bf4b4 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf4a8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf4ac:	2101      	movs	r1, #1
   bf4ae:	4620      	mov	r0, r4
   bf4b0:	f7ff ffa9 	bl	bf406 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf4b4:	a801      	add	r0, sp, #4
   bf4b6:	f7ff ff6f 	bl	bf398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf4ba:	2001      	movs	r0, #1
   bf4bc:	b002      	add	sp, #8
   bf4be:	bd10      	pop	{r4, pc}

000bf4c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf4c2:	4606      	mov	r6, r0
   bf4c4:	460d      	mov	r5, r1
  size_t n = 0;
   bf4c6:	188f      	adds	r7, r1, r2
   bf4c8:	2400      	movs	r4, #0
  while (size--) {
   bf4ca:	42bd      	cmp	r5, r7
   bf4cc:	d00c      	beq.n	bf4e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf4ce:	6833      	ldr	r3, [r6, #0]
   bf4d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf4d4:	689b      	ldr	r3, [r3, #8]
   bf4d6:	4630      	mov	r0, r6
   bf4d8:	4798      	blx	r3
     if (chunk>=0)
   bf4da:	1e03      	subs	r3, r0, #0
   bf4dc:	db01      	blt.n	bf4e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf4de:	441c      	add	r4, r3
  while (size--) {
   bf4e0:	e7f3      	b.n	bf4ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf4e2:	2c00      	cmp	r4, #0
   bf4e4:	bf08      	it	eq
   bf4e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf4e8:	4620      	mov	r0, r4
   bf4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf4ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf4ec:	b513      	push	{r0, r1, r4, lr}
   bf4ee:	4604      	mov	r4, r0
    }
   bf4f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf4f2:	b159      	cbz	r1, bf50c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf4f4:	9101      	str	r1, [sp, #4]
   bf4f6:	f001 ff76 	bl	c13e6 <strlen>
   bf4fa:	6823      	ldr	r3, [r4, #0]
   bf4fc:	9901      	ldr	r1, [sp, #4]
   bf4fe:	68db      	ldr	r3, [r3, #12]
   bf500:	4602      	mov	r2, r0
   bf502:	4620      	mov	r0, r4
    }
   bf504:	b002      	add	sp, #8
   bf506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf50a:	4718      	bx	r3
    }
   bf50c:	b002      	add	sp, #8
   bf50e:	bd10      	pop	{r4, pc}

000bf510 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf510:	b508      	push	{r3, lr}
  return write(str);
   bf512:	f7ff ffeb 	bl	bf4ec <_ZN5Print5writeEPKc>
}
   bf516:	bd08      	pop	{r3, pc}

000bf518 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf518:	6803      	ldr	r3, [r0, #0]
   bf51a:	689b      	ldr	r3, [r3, #8]
   bf51c:	4718      	bx	r3

000bf51e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf51e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf520:	210d      	movs	r1, #13
{
   bf522:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf524:	f7ff fff8 	bl	bf518 <_ZN5Print5printEc>
  n += print('\n');
   bf528:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf52a:	4604      	mov	r4, r0
  n += print('\n');
   bf52c:	4628      	mov	r0, r5
   bf52e:	f7ff fff3 	bl	bf518 <_ZN5Print5printEc>
  return n;
}
   bf532:	4420      	add	r0, r4
   bf534:	bd38      	pop	{r3, r4, r5, pc}

000bf536 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf536:	b530      	push	{r4, r5, lr}
   bf538:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf53a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf53c:	2a01      	cmp	r2, #1
  *str = '\0';
   bf53e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf542:	bf98      	it	ls
   bf544:	220a      	movls	r2, #10
   bf546:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf548:	460d      	mov	r5, r1
   bf54a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf54e:	fb01 5312 	mls	r3, r1, r2, r5
   bf552:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf556:	2b09      	cmp	r3, #9
   bf558:	bf94      	ite	ls
   bf55a:	3330      	addls	r3, #48	; 0x30
   bf55c:	3337      	addhi	r3, #55	; 0x37
   bf55e:	b2db      	uxtb	r3, r3
  } while(n);
   bf560:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf562:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf566:	d9ef      	bls.n	bf548 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf568:	4621      	mov	r1, r4
   bf56a:	f7ff ffbf 	bl	bf4ec <_ZN5Print5writeEPKc>
}
   bf56e:	b00b      	add	sp, #44	; 0x2c
   bf570:	bd30      	pop	{r4, r5, pc}
	...

000bf574 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf578:	ec55 4b10 	vmov	r4, r5, d0
   bf57c:	4606      	mov	r6, r0
   bf57e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf580:	ee10 2a10 	vmov	r2, s0
   bf584:	ee10 0a10 	vmov	r0, s0
   bf588:	462b      	mov	r3, r5
   bf58a:	4629      	mov	r1, r5
   bf58c:	f001 fd1a 	bl	c0fc4 <__aeabi_dcmpun>
   bf590:	b140      	cbz	r0, bf5a4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf592:	4953      	ldr	r1, [pc, #332]	; (bf6e0 <_ZN5Print10printFloatEdh+0x16c>)
   bf594:	4630      	mov	r0, r6
   bf596:	f7ff ffa9 	bl	bf4ec <_ZN5Print5writeEPKc>
   bf59a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf59c:	4650      	mov	r0, sl
   bf59e:	b003      	add	sp, #12
   bf5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf5a4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf5a8:	4b4e      	ldr	r3, [pc, #312]	; (bf6e4 <_ZN5Print10printFloatEdh+0x170>)
   bf5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf5ae:	4620      	mov	r0, r4
   bf5b0:	4649      	mov	r1, r9
   bf5b2:	f001 fd07 	bl	c0fc4 <__aeabi_dcmpun>
   bf5b6:	b948      	cbnz	r0, bf5cc <_ZN5Print10printFloatEdh+0x58>
   bf5b8:	4b4a      	ldr	r3, [pc, #296]	; (bf6e4 <_ZN5Print10printFloatEdh+0x170>)
   bf5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf5be:	4620      	mov	r0, r4
   bf5c0:	4649      	mov	r1, r9
   bf5c2:	f001 fce1 	bl	c0f88 <__aeabi_dcmple>
   bf5c6:	b908      	cbnz	r0, bf5cc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf5c8:	4947      	ldr	r1, [pc, #284]	; (bf6e8 <_ZN5Print10printFloatEdh+0x174>)
   bf5ca:	e7e3      	b.n	bf594 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf5cc:	4b47      	ldr	r3, [pc, #284]	; (bf6ec <_ZN5Print10printFloatEdh+0x178>)
   bf5ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf5d2:	4620      	mov	r0, r4
   bf5d4:	4629      	mov	r1, r5
   bf5d6:	f001 fceb 	bl	c0fb0 <__aeabi_dcmpgt>
   bf5da:	b108      	cbz	r0, bf5e0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf5dc:	4944      	ldr	r1, [pc, #272]	; (bf6f0 <_ZN5Print10printFloatEdh+0x17c>)
   bf5de:	e7d9      	b.n	bf594 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf5e0:	4b44      	ldr	r3, [pc, #272]	; (bf6f4 <_ZN5Print10printFloatEdh+0x180>)
   bf5e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf5e6:	4620      	mov	r0, r4
   bf5e8:	4629      	mov	r1, r5
   bf5ea:	f001 fcc3 	bl	c0f74 <__aeabi_dcmplt>
   bf5ee:	2800      	cmp	r0, #0
   bf5f0:	d1f4      	bne.n	bf5dc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf5f2:	2200      	movs	r2, #0
   bf5f4:	2300      	movs	r3, #0
   bf5f6:	4620      	mov	r0, r4
   bf5f8:	4629      	mov	r1, r5
   bf5fa:	f001 fcbb 	bl	c0f74 <__aeabi_dcmplt>
   bf5fe:	b1d0      	cbz	r0, bf636 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf600:	212d      	movs	r1, #45	; 0x2d
   bf602:	4630      	mov	r0, r6
   bf604:	f7ff ff88 	bl	bf518 <_ZN5Print5printEc>
     number = -number;
   bf608:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf60c:	4682      	mov	sl, r0
     number = -number;
   bf60e:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf610:	4939      	ldr	r1, [pc, #228]	; (bf6f8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf612:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf700 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf616:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf61a:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf61c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf620:	fa5f f38b 	uxtb.w	r3, fp
   bf624:	429f      	cmp	r7, r3
   bf626:	d908      	bls.n	bf63a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf628:	4642      	mov	r2, r8
   bf62a:	464b      	mov	r3, r9
   bf62c:	f001 fb5a 	bl	c0ce4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf630:	f10b 0b01 	add.w	fp, fp, #1
   bf634:	e7f4      	b.n	bf620 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf636:	4682      	mov	sl, r0
   bf638:	e7ea      	b.n	bf610 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf63a:	4622      	mov	r2, r4
   bf63c:	462b      	mov	r3, r5
   bf63e:	f001 f871 	bl	c0724 <__adddf3>
   bf642:	460d      	mov	r5, r1
   bf644:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf646:	f001 fcfb 	bl	c1040 <__aeabi_d2uiz>
   bf64a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf64c:	f001 f9a6 	bl	c099c <__aeabi_ui2d>
   bf650:	4602      	mov	r2, r0
   bf652:	460b      	mov	r3, r1
   bf654:	4620      	mov	r0, r4
   bf656:	4629      	mov	r1, r5
   bf658:	f001 f862 	bl	c0720 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf65c:	220a      	movs	r2, #10
   bf65e:	4604      	mov	r4, r0
   bf660:	460d      	mov	r5, r1
   bf662:	4630      	mov	r0, r6
   bf664:	4641      	mov	r1, r8
   bf666:	f7ff ff66 	bl	bf536 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf66a:	4482      	add	sl, r0
  if (digits > 0) {
   bf66c:	2f00      	cmp	r7, #0
   bf66e:	d095      	beq.n	bf59c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf670:	4922      	ldr	r1, [pc, #136]	; (bf6fc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf672:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf700 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf676:	4630      	mov	r0, r6
   bf678:	f7ff ff38 	bl	bf4ec <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf67c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf680:	4482      	add	sl, r0
  while (digits-- > 0)
   bf682:	2f00      	cmp	r7, #0
   bf684:	d08a      	beq.n	bf59c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf686:	4642      	mov	r2, r8
   bf688:	464b      	mov	r3, r9
   bf68a:	4620      	mov	r0, r4
   bf68c:	4629      	mov	r1, r5
   bf68e:	f001 f9ff 	bl	c0a90 <__aeabi_dmul>
   bf692:	4604      	mov	r4, r0
   bf694:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf696:	f001 fcab 	bl	c0ff0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf69a:	f1b0 0b00 	subs.w	fp, r0, #0
   bf69e:	da1c      	bge.n	bf6da <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf6a0:	212d      	movs	r1, #45	; 0x2d
   bf6a2:	4630      	mov	r0, r6
   bf6a4:	f7ff ff38 	bl	bf518 <_ZN5Print5printEc>
            val = -n;
   bf6a8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf6ac:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf6ae:	220a      	movs	r2, #10
   bf6b0:	4630      	mov	r0, r6
   bf6b2:	9301      	str	r3, [sp, #4]
   bf6b4:	f7ff ff3f 	bl	bf536 <_ZN5Print11printNumberEmh>
   bf6b8:	9b01      	ldr	r3, [sp, #4]
   bf6ba:	4418      	add	r0, r3
    n += print(toPrint);
   bf6bc:	4482      	add	sl, r0
    remainder -= toPrint;
   bf6be:	4658      	mov	r0, fp
   bf6c0:	f001 f97c 	bl	c09bc <__aeabi_i2d>
   bf6c4:	4602      	mov	r2, r0
   bf6c6:	460b      	mov	r3, r1
   bf6c8:	4620      	mov	r0, r4
   bf6ca:	4629      	mov	r1, r5
   bf6cc:	f001 f828 	bl	c0720 <__aeabi_dsub>
   bf6d0:	3f01      	subs	r7, #1
   bf6d2:	4604      	mov	r4, r0
   bf6d4:	460d      	mov	r5, r1
   bf6d6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf6d8:	e7d3      	b.n	bf682 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf6da:	4659      	mov	r1, fp
        size_t t = 0;
   bf6dc:	2300      	movs	r3, #0
   bf6de:	e7e6      	b.n	bf6ae <_ZN5Print10printFloatEdh+0x13a>
   bf6e0:	000c55bc 	.word	0x000c55bc
   bf6e4:	7fefffff 	.word	0x7fefffff
   bf6e8:	000c55c0 	.word	0x000c55c0
   bf6ec:	41efffff 	.word	0x41efffff
   bf6f0:	000c55c4 	.word	0x000c55c4
   bf6f4:	c1efffff 	.word	0xc1efffff
   bf6f8:	3fe00000 	.word	0x3fe00000
   bf6fc:	000c55fc 	.word	0x000c55fc
   bf700:	40240000 	.word	0x40240000

000bf704 <_ZN5Print5printEfi>:
{
   bf704:	b538      	push	{r3, r4, r5, lr}
   bf706:	4604      	mov	r4, r0
   bf708:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf70c:	b2cd      	uxtb	r5, r1
   bf70e:	f001 f967 	bl	c09e0 <__aeabi_f2d>
   bf712:	ec41 0b10 	vmov	d0, r0, r1
   bf716:	4629      	mov	r1, r5
   bf718:	4620      	mov	r0, r4
}
   bf71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf71e:	f7ff bf29 	b.w	bf574 <_ZN5Print10printFloatEdh>

000bf722 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf726:	b086      	sub	sp, #24
   bf728:	af00      	add	r7, sp, #0
   bf72a:	4605      	mov	r5, r0
   bf72c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf72e:	1d38      	adds	r0, r7, #4
   bf730:	2114      	movs	r1, #20
{
   bf732:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf734:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf736:	f7fd fddd 	bl	bd2f4 <vsnprintf>

    if (n<bufsize)
   bf73a:	2813      	cmp	r0, #19
   bf73c:	d80e      	bhi.n	bf75c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf73e:	1d39      	adds	r1, r7, #4
   bf740:	4628      	mov	r0, r5
   bf742:	f7ff fed3 	bl	bf4ec <_ZN5Print5writeEPKc>
   bf746:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf748:	b11e      	cbz	r6, bf752 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf74a:	4628      	mov	r0, r5
   bf74c:	f7ff fee7 	bl	bf51e <_ZN5Print7printlnEv>
   bf750:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf752:	4620      	mov	r0, r4
   bf754:	3718      	adds	r7, #24
   bf756:	46bd      	mov	sp, r7
   bf758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf75c:	f100 0308 	add.w	r3, r0, #8
   bf760:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf764:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf766:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf76a:	4622      	mov	r2, r4
   bf76c:	1c41      	adds	r1, r0, #1
   bf76e:	683b      	ldr	r3, [r7, #0]
   bf770:	4668      	mov	r0, sp
   bf772:	f7fd fdbf 	bl	bd2f4 <vsnprintf>
  return write(str);
   bf776:	4669      	mov	r1, sp
   bf778:	4628      	mov	r0, r5
   bf77a:	f7ff feb7 	bl	bf4ec <_ZN5Print5writeEPKc>
   bf77e:	4604      	mov	r4, r0
   bf780:	46c5      	mov	sp, r8
   bf782:	e7e1      	b.n	bf748 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf784 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf784:	b510      	push	{r4, lr}
  if (0 == max) {
   bf786:	4604      	mov	r4, r0
   bf788:	b128      	cbz	r0, bf796 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf78a:	f001 fda7 	bl	c12dc <rand>
   bf78e:	fb90 f3f4 	sdiv	r3, r0, r4
   bf792:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf796:	4620      	mov	r0, r4
   bf798:	bd10      	pop	{r4, pc}

000bf79a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf79a:	4288      	cmp	r0, r1
{
   bf79c:	b510      	push	{r4, lr}
   bf79e:	4604      	mov	r4, r0
  if (min >= max) {
   bf7a0:	da03      	bge.n	bf7aa <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf7a2:	1a08      	subs	r0, r1, r0
   bf7a4:	f7ff ffee 	bl	bf784 <_Z6randomi>
   bf7a8:	4404      	add	r4, r0
}
   bf7aa:	4620      	mov	r0, r4
   bf7ac:	bd10      	pop	{r4, pc}
	...

000bf7b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf7b0:	4b01      	ldr	r3, [pc, #4]	; (bf7b8 <_GLOBAL__sub_I_RGB+0x8>)
   bf7b2:	2200      	movs	r2, #0
   bf7b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf7b6:	4770      	bx	lr
   bf7b8:	2003e684 	.word	0x2003e684

000bf7bc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf7bc:	2100      	movs	r1, #0
   bf7be:	f7fd baf5 	b.w	bcdac <hal_spi_release>

000bf7c2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf7c2:	2100      	movs	r1, #0
   bf7c4:	f7fd baea 	b.w	bcd9c <hal_spi_acquire>

000bf7c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf7c8:	b510      	push	{r4, lr}
   bf7ca:	4604      	mov	r4, r0
   bf7cc:	4608      	mov	r0, r1
{
    _spi = spi;
   bf7ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf7d0:	f7fd fac4 	bl	bcd5c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf7d4:	2300      	movs	r3, #0
   bf7d6:	6063      	str	r3, [r4, #4]
}
   bf7d8:	4620      	mov	r0, r4
   bf7da:	bd10      	pop	{r4, pc}

000bf7dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf7dc:	b513      	push	{r0, r1, r4, lr}
   bf7de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf7e0:	7800      	ldrb	r0, [r0, #0]
   bf7e2:	f7ff ffee 	bl	bf7c2 <_ZN8SPIClass4lockEv.isra.0>
   bf7e6:	b958      	cbnz	r0, bf800 <_ZN8SPIClass5beginEv+0x24>
   bf7e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf7ea:	9001      	str	r0, [sp, #4]
   bf7ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf7f0:	f7fd fa9c 	bl	bcd2c <hal_spi_begin>
        unlock();
   bf7f4:	9801      	ldr	r0, [sp, #4]
    }
}
   bf7f6:	b002      	add	sp, #8
   bf7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf7fc:	f7ff bfde 	b.w	bf7bc <_ZN8SPIClass6unlockEv.isra.0>
   bf800:	b002      	add	sp, #8
   bf802:	bd10      	pop	{r4, pc}

000bf804 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bf804:	b513      	push	{r0, r1, r4, lr}
   bf806:	4604      	mov	r4, r0
    if (!lock())
   bf808:	7800      	ldrb	r0, [r0, #0]
   bf80a:	f7ff ffda 	bl	bf7c2 <_ZN8SPIClass4lockEv.isra.0>
   bf80e:	b948      	cbnz	r0, bf824 <_ZN8SPIClass3endEv+0x20>
   bf810:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bf812:	9001      	str	r0, [sp, #4]
   bf814:	f7fd fa92 	bl	bcd3c <hal_spi_end>
        unlock();
   bf818:	9801      	ldr	r0, [sp, #4]
    }
}
   bf81a:	b002      	add	sp, #8
   bf81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf820:	f7ff bfcc 	b.w	bf7bc <_ZN8SPIClass6unlockEv.isra.0>
   bf824:	b002      	add	sp, #8
   bf826:	bd10      	pop	{r4, pc}

000bf828 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bf828:	7800      	ldrb	r0, [r0, #0]
   bf82a:	f7ff bfc7 	b.w	bf7bc <_ZN8SPIClass6unlockEv.isra.0>
	...

000bf830 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bf830:	0840      	lsrs	r0, r0, #1
{
   bf832:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bf834:	6018      	str	r0, [r3, #0]
   bf836:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bf838:	6818      	ldr	r0, [r3, #0]
   bf83a:	4288      	cmp	r0, r1
   bf83c:	b2e5      	uxtb	r5, r4
   bf83e:	d906      	bls.n	bf84e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bf840:	3401      	adds	r4, #1
   bf842:	2c08      	cmp	r4, #8
   bf844:	d002      	beq.n	bf84c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bf846:	0840      	lsrs	r0, r0, #1
   bf848:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bf84a:	e7f5      	b.n	bf838 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bf84c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bf84e:	4b02      	ldr	r3, [pc, #8]	; (bf858 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bf850:	5d5b      	ldrb	r3, [r3, r5]
   bf852:	7013      	strb	r3, [r2, #0]
}
   bf854:	bd30      	pop	{r4, r5, pc}
   bf856:	bf00      	nop
   bf858:	000c55c8 	.word	0x000c55c8

000bf85c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bf85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf860:	4606      	mov	r6, r0
   bf862:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bf864:	7800      	ldrb	r0, [r0, #0]
{
   bf866:	460c      	mov	r4, r1
    CHECK(lock());
   bf868:	f7ff ffab 	bl	bf7c2 <_ZN8SPIClass4lockEv.isra.0>
   bf86c:	2800      	cmp	r0, #0
   bf86e:	db1b      	blt.n	bf8a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bf870:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bf872:	2214      	movs	r2, #20
   bf874:	2100      	movs	r1, #0
   bf876:	a809      	add	r0, sp, #36	; 0x24
   bf878:	f001 fcea 	bl	c1250 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bf87c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bf87e:	2200      	movs	r2, #0
   bf880:	a909      	add	r1, sp, #36	; 0x24
   bf882:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bf884:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bf888:	f7fd fa78 	bl	bcd7c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bf88c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bf890:	b113      	cbz	r3, bf898 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bf892:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bf896:	b155      	cbz	r5, bf8ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bf898:	2700      	movs	r7, #0
   bf89a:	46b9      	mov	r9, r7
   bf89c:	46b8      	mov	r8, r7
   bf89e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bf8a0:	7923      	ldrb	r3, [r4, #4]
   bf8a2:	b15d      	cbz	r5, bf8bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bf8a4:	b1c3      	cbz	r3, bf8d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bf8a6:	2000      	movs	r0, #0
}
   bf8a8:	b00f      	add	sp, #60	; 0x3c
   bf8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bf8ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bf8b2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bf8b6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bf8ba:	e7f1      	b.n	bf8a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bf8bc:	2b00      	cmp	r3, #0
   bf8be:	d135      	bne.n	bf92c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bf8c0:	68a3      	ldr	r3, [r4, #8]
   bf8c2:	4543      	cmp	r3, r8
   bf8c4:	d108      	bne.n	bf8d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bf8c6:	f88d 9020 	strb.w	r9, [sp, #32]
   bf8ca:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf8ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf8d2:	89a3      	ldrh	r3, [r4, #12]
   bf8d4:	429a      	cmp	r2, r3
   bf8d6:	d0e6      	beq.n	bf8a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bf8d8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf8da:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bf8dc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf8e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   bf8e2:	ab04      	add	r3, sp, #16
   bf8e4:	f10d 020f 	add.w	r2, sp, #15
   bf8e8:	f7ff ffa2 	bl	bf830 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bf8ec:	7921      	ldrb	r1, [r4, #4]
   bf8ee:	b985      	cbnz	r5, bf912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bf8f0:	b989      	cbnz	r1, bf916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf8f2:	68a3      	ldr	r3, [r4, #8]
   bf8f4:	4543      	cmp	r3, r8
   bf8f6:	d30e      	bcc.n	bf916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bf8f8:	f88d 9020 	strb.w	r9, [sp, #32]
   bf8fc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf900:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf904:	89a3      	ldrh	r3, [r4, #12]
   bf906:	429a      	cmp	r2, r3
   bf908:	d105      	bne.n	bf916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bf90a:	9b04      	ldr	r3, [sp, #16]
   bf90c:	4543      	cmp	r3, r8
   bf90e:	d102      	bne.n	bf916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf910:	e7c9      	b.n	bf8a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bf912:	2900      	cmp	r1, #0
   bf914:	d1f9      	bne.n	bf90a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bf916:	2300      	movs	r3, #0
   bf918:	9301      	str	r3, [sp, #4]
   bf91a:	7b63      	ldrb	r3, [r4, #13]
   bf91c:	9300      	str	r3, [sp, #0]
   bf91e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bf922:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bf924:	7830      	ldrb	r0, [r6, #0]
   bf926:	f7fd fa31 	bl	bcd8c <hal_spi_set_settings>
   bf92a:	e7bc      	b.n	bf8a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bf92c:	e9cd 5500 	strd	r5, r5, [sp]
   bf930:	462b      	mov	r3, r5
   bf932:	462a      	mov	r2, r5
   bf934:	2101      	movs	r1, #1
   bf936:	e7f5      	b.n	bf924 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bf938 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bf938:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bf93a:	7800      	ldrb	r0, [r0, #0]
   bf93c:	f7fd fa06 	bl	bcd4c <hal_spi_transfer>
}
   bf940:	b2c0      	uxtb	r0, r0
   bf942:	bd08      	pop	{r3, pc}

000bf944 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bf944:	4770      	bx	lr

000bf946 <_ZN8SPIClass15detachInterruptEv>:
   bf946:	4770      	bx	lr

000bf948 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bf948:	b510      	push	{r4, lr}
   bf94a:	4604      	mov	r4, r0
{
	free(buffer);
   bf94c:	6800      	ldr	r0, [r0, #0]
   bf94e:	f7fd fca9 	bl	bd2a4 <free>
}
   bf952:	4620      	mov	r0, r4
   bf954:	bd10      	pop	{r4, pc}

000bf956 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bf956:	b510      	push	{r4, lr}
   bf958:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bf95a:	6800      	ldr	r0, [r0, #0]
   bf95c:	b108      	cbz	r0, bf962 <_ZN6String10invalidateEv+0xc>
   bf95e:	f7fd fca1 	bl	bd2a4 <free>
	buffer = NULL;
   bf962:	2300      	movs	r3, #0
	capacity = len = 0;
   bf964:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bf968:	6023      	str	r3, [r4, #0]
}
   bf96a:	bd10      	pop	{r4, pc}

000bf96c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bf96c:	b538      	push	{r3, r4, r5, lr}
   bf96e:	4604      	mov	r4, r0
   bf970:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bf972:	6800      	ldr	r0, [r0, #0]
   bf974:	3101      	adds	r1, #1
   bf976:	f7fd fc9d 	bl	bd2b4 <realloc>
	if (newbuffer) {
   bf97a:	b110      	cbz	r0, bf982 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bf97c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bf980:	2001      	movs	r0, #1
	}
	return 0;
}
   bf982:	bd38      	pop	{r3, r4, r5, pc}

000bf984 <_ZN6String7reserveEj>:
{
   bf984:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bf986:	6803      	ldr	r3, [r0, #0]
{
   bf988:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bf98a:	b123      	cbz	r3, bf996 <_ZN6String7reserveEj+0x12>
   bf98c:	6843      	ldr	r3, [r0, #4]
   bf98e:	428b      	cmp	r3, r1
   bf990:	d301      	bcc.n	bf996 <_ZN6String7reserveEj+0x12>
   bf992:	2001      	movs	r0, #1
}
   bf994:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bf996:	4620      	mov	r0, r4
   bf998:	f7ff ffe8 	bl	bf96c <_ZN6String12changeBufferEj>
   bf99c:	2800      	cmp	r0, #0
   bf99e:	d0f9      	beq.n	bf994 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bf9a0:	68a3      	ldr	r3, [r4, #8]
   bf9a2:	2b00      	cmp	r3, #0
   bf9a4:	d1f5      	bne.n	bf992 <_ZN6String7reserveEj+0xe>
   bf9a6:	6822      	ldr	r2, [r4, #0]
   bf9a8:	7013      	strb	r3, [r2, #0]
   bf9aa:	e7f2      	b.n	bf992 <_ZN6String7reserveEj+0xe>

000bf9ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bf9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf9ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bf9b0:	4611      	mov	r1, r2
   bf9b2:	9201      	str	r2, [sp, #4]
{
   bf9b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bf9b6:	f7ff ffe5 	bl	bf984 <_ZN6String7reserveEj>
   bf9ba:	9a01      	ldr	r2, [sp, #4]
   bf9bc:	b928      	cbnz	r0, bf9ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bf9be:	4620      	mov	r0, r4
   bf9c0:	f7ff ffc9 	bl	bf956 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bf9c4:	4620      	mov	r0, r4
   bf9c6:	b003      	add	sp, #12
   bf9c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bf9ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bf9cc:	4629      	mov	r1, r5
   bf9ce:	6820      	ldr	r0, [r4, #0]
   bf9d0:	f001 fc16 	bl	c1200 <memcpy>
	buffer[len] = 0;
   bf9d4:	6822      	ldr	r2, [r4, #0]
   bf9d6:	68a3      	ldr	r3, [r4, #8]
   bf9d8:	2100      	movs	r1, #0
   bf9da:	54d1      	strb	r1, [r2, r3]
	return *this;
   bf9dc:	e7f2      	b.n	bf9c4 <_ZN6String4copyEPKcj+0x18>

000bf9de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bf9de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bf9e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bf9e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bf9e6:	4604      	mov	r4, r0
	len = 0;
   bf9e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf9ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bf9ec:	b141      	cbz	r1, bfa00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bf9ee:	4608      	mov	r0, r1
   bf9f0:	9101      	str	r1, [sp, #4]
   bf9f2:	f001 fcf8 	bl	c13e6 <strlen>
   bf9f6:	9901      	ldr	r1, [sp, #4]
   bf9f8:	4602      	mov	r2, r0
   bf9fa:	4620      	mov	r0, r4
   bf9fc:	f7ff ffd6 	bl	bf9ac <_ZN6String4copyEPKcj>
}
   bfa00:	4620      	mov	r0, r4
   bfa02:	b002      	add	sp, #8
   bfa04:	bd10      	pop	{r4, pc}

000bfa06 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bfa06:	b538      	push	{r3, r4, r5, lr}
   bfa08:	4605      	mov	r5, r0
	if (buffer) {
   bfa0a:	6800      	ldr	r0, [r0, #0]
{
   bfa0c:	460c      	mov	r4, r1
	if (buffer) {
   bfa0e:	b168      	cbz	r0, bfa2c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bfa10:	686a      	ldr	r2, [r5, #4]
   bfa12:	688b      	ldr	r3, [r1, #8]
   bfa14:	429a      	cmp	r2, r3
   bfa16:	d307      	bcc.n	bfa28 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bfa18:	6809      	ldr	r1, [r1, #0]
   bfa1a:	f001 fcbe 	bl	c139a <strcpy>
			len = rhs.len;
   bfa1e:	68a3      	ldr	r3, [r4, #8]
   bfa20:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bfa22:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bfa24:	60a3      	str	r3, [r4, #8]
}
   bfa26:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bfa28:	f7fd fc3c 	bl	bd2a4 <free>
	buffer = rhs.buffer;
   bfa2c:	6823      	ldr	r3, [r4, #0]
   bfa2e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bfa30:	6863      	ldr	r3, [r4, #4]
   bfa32:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bfa34:	68a3      	ldr	r3, [r4, #8]
   bfa36:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bfa38:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bfa3a:	e9c4 3300 	strd	r3, r3, [r4]
   bfa3e:	e7f1      	b.n	bfa24 <_ZN6String4moveERS_+0x1e>

000bfa40 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bfa40:	b510      	push	{r4, lr}
	buffer = NULL;
   bfa42:	2300      	movs	r3, #0
	capacity = 0;
   bfa44:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bfa48:	4604      	mov	r4, r0
	len = 0;
   bfa4a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfa4c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bfa4e:	f7ff ffda 	bl	bfa06 <_ZN6String4moveERS_>
}
   bfa52:	4620      	mov	r0, r4
   bfa54:	bd10      	pop	{r4, pc}

000bfa56 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bfa56:	4288      	cmp	r0, r1
{
   bfa58:	b510      	push	{r4, lr}
   bfa5a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bfa5c:	d005      	beq.n	bfa6a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bfa5e:	680b      	ldr	r3, [r1, #0]
   bfa60:	b12b      	cbz	r3, bfa6e <_ZN6StringaSERKS_+0x18>
   bfa62:	688a      	ldr	r2, [r1, #8]
   bfa64:	4619      	mov	r1, r3
   bfa66:	f7ff ffa1 	bl	bf9ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfa6a:	4620      	mov	r0, r4
   bfa6c:	bd10      	pop	{r4, pc}
	else invalidate();
   bfa6e:	f7ff ff72 	bl	bf956 <_ZN6String10invalidateEv>
   bfa72:	e7fa      	b.n	bfa6a <_ZN6StringaSERKS_+0x14>

000bfa74 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bfa74:	b510      	push	{r4, lr}
	buffer = NULL;
   bfa76:	2300      	movs	r3, #0
String::String(const String &value)
   bfa78:	4604      	mov	r4, r0
	capacity = 0;
   bfa7a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bfa7e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfa80:	7303      	strb	r3, [r0, #12]
	*this = value;
   bfa82:	f7ff ffe8 	bl	bfa56 <_ZN6StringaSERKS_>
}
   bfa86:	4620      	mov	r0, r4
   bfa88:	bd10      	pop	{r4, pc}

000bfa8a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bfa8a:	4288      	cmp	r0, r1
{
   bfa8c:	b510      	push	{r4, lr}
   bfa8e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bfa90:	d001      	beq.n	bfa96 <_ZN6StringaSEOS_+0xc>
   bfa92:	f7ff ffb8 	bl	bfa06 <_ZN6String4moveERS_>
	return *this;
}
   bfa96:	4620      	mov	r0, r4
   bfa98:	bd10      	pop	{r4, pc}

000bfa9a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bfa9a:	b513      	push	{r0, r1, r4, lr}
   bfa9c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bfa9e:	b159      	cbz	r1, bfab8 <_ZN6StringaSEPKc+0x1e>
   bfaa0:	4608      	mov	r0, r1
   bfaa2:	9101      	str	r1, [sp, #4]
   bfaa4:	f001 fc9f 	bl	c13e6 <strlen>
   bfaa8:	9901      	ldr	r1, [sp, #4]
   bfaaa:	4602      	mov	r2, r0
   bfaac:	4620      	mov	r0, r4
   bfaae:	f7ff ff7d 	bl	bf9ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfab2:	4620      	mov	r0, r4
   bfab4:	b002      	add	sp, #8
   bfab6:	bd10      	pop	{r4, pc}
	else invalidate();
   bfab8:	f7ff ff4d 	bl	bf956 <_ZN6String10invalidateEv>
   bfabc:	e7f9      	b.n	bfab2 <_ZN6StringaSEPKc+0x18>

000bfabe <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bfabe:	b570      	push	{r4, r5, r6, lr}
   bfac0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bfac2:	460e      	mov	r6, r1
   bfac4:	b909      	cbnz	r1, bfaca <_ZN6String6concatEPKcj+0xc>
   bfac6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bfac8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bfaca:	b16a      	cbz	r2, bfae8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bfacc:	6884      	ldr	r4, [r0, #8]
   bface:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bfad0:	4621      	mov	r1, r4
   bfad2:	f7ff ff57 	bl	bf984 <_ZN6String7reserveEj>
   bfad6:	2800      	cmp	r0, #0
   bfad8:	d0f5      	beq.n	bfac6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bfada:	6828      	ldr	r0, [r5, #0]
   bfadc:	68ab      	ldr	r3, [r5, #8]
   bfade:	4631      	mov	r1, r6
   bfae0:	4418      	add	r0, r3
   bfae2:	f001 fc5a 	bl	c139a <strcpy>
	len = newlen;
   bfae6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bfae8:	2001      	movs	r0, #1
   bfaea:	e7ed      	b.n	bfac8 <_ZN6String6concatEPKcj+0xa>

000bfaec <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bfaec:	b513      	push	{r0, r1, r4, lr}
   bfaee:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bfaf0:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bfaf2:	b151      	cbz	r1, bfb0a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bfaf4:	9101      	str	r1, [sp, #4]
   bfaf6:	f001 fc76 	bl	c13e6 <strlen>
   bfafa:	9901      	ldr	r1, [sp, #4]
   bfafc:	4602      	mov	r2, r0
   bfafe:	4620      	mov	r0, r4
}
   bfb00:	b002      	add	sp, #8
   bfb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bfb06:	f7ff bfda 	b.w	bfabe <_ZN6String6concatEPKcj>
}
   bfb0a:	b002      	add	sp, #8
   bfb0c:	bd10      	pop	{r4, pc}

000bfb0e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bfb0e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bfb10:	2300      	movs	r3, #0
	buf[0] = c;
   bfb12:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bfb16:	2201      	movs	r2, #1
   bfb18:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bfb1a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bfb1e:	f7ff ffce 	bl	bfabe <_ZN6String6concatEPKcj>
}
   bfb22:	b003      	add	sp, #12
   bfb24:	f85d fb04 	ldr.w	pc, [sp], #4

000bfb28 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bfb28:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfb2a:	688a      	ldr	r2, [r1, #8]
   bfb2c:	6809      	ldr	r1, [r1, #0]
{
   bfb2e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfb30:	f7ff ffc5 	bl	bfabe <_ZN6String6concatEPKcj>
   bfb34:	b910      	cbnz	r0, bfb3c <_ZplRK15StringSumHelperRK6String+0x14>
   bfb36:	4620      	mov	r0, r4
   bfb38:	f7ff ff0d 	bl	bf956 <_ZN6String10invalidateEv>
	return a;
}
   bfb3c:	4620      	mov	r0, r4
   bfb3e:	bd10      	pop	{r4, pc}

000bfb40 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bfb40:	b513      	push	{r0, r1, r4, lr}
   bfb42:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfb44:	b929      	cbnz	r1, bfb52 <_ZplRK15StringSumHelperPKc+0x12>
   bfb46:	4620      	mov	r0, r4
   bfb48:	f7ff ff05 	bl	bf956 <_ZN6String10invalidateEv>
	return a;
}
   bfb4c:	4620      	mov	r0, r4
   bfb4e:	b002      	add	sp, #8
   bfb50:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfb52:	4608      	mov	r0, r1
   bfb54:	9101      	str	r1, [sp, #4]
   bfb56:	f001 fc46 	bl	c13e6 <strlen>
   bfb5a:	9901      	ldr	r1, [sp, #4]
   bfb5c:	4602      	mov	r2, r0
   bfb5e:	4620      	mov	r0, r4
   bfb60:	f7ff ffad 	bl	bfabe <_ZN6String6concatEPKcj>
   bfb64:	2800      	cmp	r0, #0
   bfb66:	d0ee      	beq.n	bfb46 <_ZplRK15StringSumHelperPKc+0x6>
   bfb68:	e7f0      	b.n	bfb4c <_ZplRK15StringSumHelperPKc+0xc>

000bfb6a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bfb6a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfb6c:	6882      	ldr	r2, [r0, #8]
   bfb6e:	b93a      	cbnz	r2, bfb80 <_ZNK6String6equalsEPKc+0x16>
   bfb70:	b121      	cbz	r1, bfb7c <_ZNK6String6equalsEPKc+0x12>
   bfb72:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bfb74:	fab0 f080 	clz	r0, r0
   bfb78:	0940      	lsrs	r0, r0, #5
   bfb7a:	e000      	b.n	bfb7e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfb7c:	2001      	movs	r0, #1
}
   bfb7e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bfb80:	6800      	ldr	r0, [r0, #0]
   bfb82:	b909      	cbnz	r1, bfb88 <_ZNK6String6equalsEPKc+0x1e>
   bfb84:	7800      	ldrb	r0, [r0, #0]
   bfb86:	e7f5      	b.n	bfb74 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bfb88:	f001 fbfd 	bl	c1386 <strcmp>
   bfb8c:	e7f2      	b.n	bfb74 <_ZNK6String6equalsEPKc+0xa>

000bfb8e <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bfb8e:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfb90:	6883      	ldr	r3, [r0, #8]
   bfb92:	688a      	ldr	r2, [r1, #8]
   bfb94:	4293      	cmp	r3, r2
   bfb96:	d30b      	bcc.n	bfbb0 <_ZNK6String8endsWithERKS_+0x22>
   bfb98:	6800      	ldr	r0, [r0, #0]
   bfb9a:	b140      	cbz	r0, bfbae <_ZNK6String8endsWithERKS_+0x20>
   bfb9c:	6809      	ldr	r1, [r1, #0]
   bfb9e:	b149      	cbz	r1, bfbb4 <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bfba0:	1a9b      	subs	r3, r3, r2
   bfba2:	4418      	add	r0, r3
   bfba4:	f001 fbef 	bl	c1386 <strcmp>
   bfba8:	fab0 f080 	clz	r0, r0
   bfbac:	0940      	lsrs	r0, r0, #5
}
   bfbae:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfbb0:	2000      	movs	r0, #0
   bfbb2:	e7fc      	b.n	bfbae <_ZNK6String8endsWithERKS_+0x20>
   bfbb4:	4608      	mov	r0, r1
   bfbb6:	e7fa      	b.n	bfbae <_ZNK6String8endsWithERKS_+0x20>

000bfbb8 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bfbb8:	6883      	ldr	r3, [r0, #8]
   bfbba:	428b      	cmp	r3, r1
   bfbbc:	d901      	bls.n	bfbc2 <_ZN6StringixEj+0xa>
   bfbbe:	6800      	ldr	r0, [r0, #0]
   bfbc0:	b918      	cbnz	r0, bfbca <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bfbc2:	4803      	ldr	r0, [pc, #12]	; (bfbd0 <_ZN6StringixEj+0x18>)
   bfbc4:	2300      	movs	r3, #0
   bfbc6:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bfbc8:	4770      	bx	lr
	}
	return buffer[index];
   bfbca:	4408      	add	r0, r1
}
   bfbcc:	4770      	bx	lr
   bfbce:	bf00      	nop
   bfbd0:	2003e694 	.word	0x2003e694

000bfbd4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bfbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bfbd6:	429a      	cmp	r2, r3
{
   bfbd8:	460f      	mov	r7, r1
   bfbda:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bfbdc:	490c      	ldr	r1, [pc, #48]	; (bfc10 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bfbde:	bf88      	it	hi
   bfbe0:	4613      	movhi	r3, r2
{
   bfbe2:	4614      	mov	r4, r2
   bfbe4:	4606      	mov	r6, r0
	if (left > right) {
   bfbe6:	bf84      	itt	hi
   bfbe8:	462c      	movhi	r4, r5
   bfbea:	461d      	movhi	r5, r3
	String out;
   bfbec:	f7ff fef7 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bfbf0:	68bb      	ldr	r3, [r7, #8]
   bfbf2:	42a3      	cmp	r3, r4
   bfbf4:	d30a      	bcc.n	bfc0c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bfbf6:	6839      	ldr	r1, [r7, #0]
   bfbf8:	42ab      	cmp	r3, r5
   bfbfa:	bf94      	ite	ls
   bfbfc:	ebc4 0203 	rsbls	r2, r4, r3
   bfc00:	ebc4 0205 	rsbhi	r2, r4, r5
   bfc04:	4421      	add	r1, r4
   bfc06:	4630      	mov	r0, r6
   bfc08:	f7ff fed0 	bl	bf9ac <_ZN6String4copyEPKcj>
	return out;
}
   bfc0c:	4630      	mov	r0, r6
   bfc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bfc10:	000c54f8 	.word	0x000c54f8

000bfc14 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bfc14:	b40e      	push	{r1, r2, r3}
   bfc16:	b570      	push	{r4, r5, r6, lr}
   bfc18:	b087      	sub	sp, #28
   bfc1a:	ad0b      	add	r5, sp, #44	; 0x2c
   bfc1c:	4604      	mov	r4, r0
   bfc1e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc22:	9201      	str	r2, [sp, #4]
   bfc24:	462b      	mov	r3, r5
   bfc26:	2105      	movs	r1, #5
   bfc28:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bfc2a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc2c:	f7fd fb62 	bl	bd2f4 <vsnprintf>
    va_end(marker);

    String result;
   bfc30:	490b      	ldr	r1, [pc, #44]	; (bfc60 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc32:	4606      	mov	r6, r0
    String result;
   bfc34:	4620      	mov	r0, r4
   bfc36:	f7ff fed2 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bfc3a:	4631      	mov	r1, r6
   bfc3c:	4620      	mov	r0, r4
   bfc3e:	f7ff fea1 	bl	bf984 <_ZN6String7reserveEj>
    if (result.buffer) {
   bfc42:	6820      	ldr	r0, [r4, #0]
   bfc44:	b130      	cbz	r0, bfc54 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfc46:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bfc48:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfc4a:	462b      	mov	r3, r5
   bfc4c:	1c71      	adds	r1, r6, #1
   bfc4e:	f7fd fb51 	bl	bd2f4 <vsnprintf>
        va_end(marker);
        result.len = n;
   bfc52:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bfc54:	4620      	mov	r0, r4
   bfc56:	b007      	add	sp, #28
   bfc58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bfc5c:	b003      	add	sp, #12
   bfc5e:	4770      	bx	lr
   bfc60:	000c54f8 	.word	0x000c54f8

000bfc64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bfc64:	b510      	push	{r4, lr}
   bfc66:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bfc68:	6800      	ldr	r0, [r0, #0]
   bfc6a:	b118      	cbz	r0, bfc74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bfc6c:	f7fd fb1a 	bl	bd2a4 <free>
            wakeupSource_ = nullptr;
   bfc70:	2300      	movs	r3, #0
   bfc72:	6023      	str	r3, [r4, #0]
        }
    }
   bfc74:	bd10      	pop	{r4, pc}

000bfc76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bfc76:	b538      	push	{r3, r4, r5, lr}
   bfc78:	460c      	mov	r4, r1
   bfc7a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfc7c:	f7ff fff2 	bl	bfc64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bfc80:	b154      	cbz	r4, bfc98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bfc82:	8820      	ldrh	r0, [r4, #0]
   bfc84:	f7fd fb06 	bl	bd294 <malloc>
   bfc88:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bfc8a:	b128      	cbz	r0, bfc98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bfc8c:	8822      	ldrh	r2, [r4, #0]
   bfc8e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bfc90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bfc94:	f001 bab4 	b.w	c1200 <memcpy>
    }
   bfc98:	bd38      	pop	{r3, r4, r5, pc}

000bfc9a <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfc9a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bfc9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bfca0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bfca2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bfca6:	f8c0 3006 	str.w	r3, [r0, #6]
   bfcaa:	894b      	ldrh	r3, [r1, #10]
   bfcac:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfcae:	460c      	mov	r4, r1
   bfcb0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfcb2:	f7ff ffd7 	bl	bfc64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bfcb6:	6823      	ldr	r3, [r4, #0]
   bfcb8:	b113      	cbz	r3, bfcc0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bfcba:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bfcbc:	2300      	movs	r3, #0
   bfcbe:	6023      	str	r3, [r4, #0]
    }
   bfcc0:	bd38      	pop	{r3, r4, r5, pc}

000bfcc2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bfcc2:	b507      	push	{r0, r1, r2, lr}
   bfcc4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfcc6:	2100      	movs	r1, #0
{
   bfcc8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfcca:	9100      	str	r1, [sp, #0]
   bfccc:	2001      	movs	r0, #1
   bfcce:	218c      	movs	r1, #140	; 0x8c
   bfcd0:	f7fd fa1e 	bl	bd110 <system_reset>
}
   bfcd4:	b003      	add	sp, #12
   bfcd6:	f85d fb04 	ldr.w	pc, [sp], #4

000bfcda <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bfcda:	4601      	mov	r1, r0
    reset(0, flags);
   bfcdc:	2000      	movs	r0, #0
   bfcde:	f7ff bff0 	b.w	bfcc2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bfce2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bfce2:	2000      	movs	r0, #0
   bfce4:	f7ff bff9 	b.w	bfcda <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bfce8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bfce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfcea:	4d2b      	ldr	r5, [pc, #172]	; (bfd98 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bfcec:	7d0b      	ldrb	r3, [r1, #20]
   bfcee:	4604      	mov	r4, r0
   bfcf0:	b08b      	sub	sp, #44	; 0x2c
   bfcf2:	4608      	mov	r0, r1
   bfcf4:	1daf      	adds	r7, r5, #6
   bfcf6:	2b00      	cmp	r3, #0
   bfcf8:	d036      	beq.n	bfd68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bfcfa:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bfcfc:	791b      	ldrb	r3, [r3, #4]
   bfcfe:	2b00      	cmp	r3, #0
   bfd00:	d032      	beq.n	bfd68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bfd02:	4b26      	ldr	r3, [pc, #152]	; (bfd9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bfd04:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bfd06:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bfd08:	a902      	add	r1, sp, #8
   bfd0a:	3004      	adds	r0, #4
   bfd0c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bfd10:	f7fd f9f4 	bl	bd0fc <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bfd14:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bfd18:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bfd1c:	b200      	sxth	r0, r0
   bfd1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bfd22:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bfd26:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd28:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bfd2a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd2c:	4628      	mov	r0, r5
   bfd2e:	f7ff ffa2 	bl	bfc76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bfd32:	a802      	add	r0, sp, #8
   bfd34:	f7ff ff96 	bl	bfc64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bfd38:	2300      	movs	r3, #0
   bfd3a:	6023      	str	r3, [r4, #0]
   bfd3c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bfd3e:	71a3      	strb	r3, [r4, #6]
   bfd40:	8123      	strh	r3, [r4, #8]
   bfd42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bfd46:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bfd48:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bfd4c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bfd4e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bfd52:	f8c4 3006 	str.w	r3, [r4, #6]
   bfd56:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd58:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bfd5a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bfd5c:	4620      	mov	r0, r4
   bfd5e:	f7ff ff8a 	bl	bfc76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bfd62:	4620      	mov	r0, r4
   bfd64:	b00b      	add	sp, #44	; 0x2c
   bfd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bfd68:	2600      	movs	r6, #0
   bfd6a:	2320      	movs	r3, #32
   bfd6c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bfd70:	4b0b      	ldr	r3, [pc, #44]	; (bfda0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bfd72:	9300      	str	r3, [sp, #0]
   bfd74:	aa02      	add	r2, sp, #8
   bfd76:	4633      	mov	r3, r6
   bfd78:	490a      	ldr	r1, [pc, #40]	; (bfda4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bfd7a:	2032      	movs	r0, #50	; 0x32
   bfd7c:	f7fd f91e 	bl	bcfbc <log_message>
            : wakeupSource_(nullptr),
   bfd80:	4b06      	ldr	r3, [pc, #24]	; (bfd9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bfd82:	4805      	ldr	r0, [pc, #20]	; (bfd98 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bfd84:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bfd86:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bfd8a:	a902      	add	r1, sp, #8
   bfd8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bfd90:	f7ff ff83 	bl	bfc9a <_ZN17SystemSleepResultaSEOS_.isra.0>
   bfd94:	e7cd      	b.n	bfd32 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bfd96:	bf00      	nop
   bfd98:	2003e698 	.word	0x2003e698
   bfd9c:	ffff0000 	.word	0xffff0000
   bfda0:	000c55d7 	.word	0x000c55d7
   bfda4:	000c55d0 	.word	0x000c55d0

000bfda8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bfda8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bfdaa:	2420      	movs	r4, #32
{
   bfdac:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bfdae:	4622      	mov	r2, r4
   bfdb0:	2100      	movs	r1, #0
   bfdb2:	4668      	mov	r0, sp
   bfdb4:	f001 fa4c 	bl	c1250 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bfdb8:	2100      	movs	r1, #0
   bfdba:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bfdbc:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bfdc0:	f7fc fea4 	bl	bcb0c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bfdc4:	9801      	ldr	r0, [sp, #4]
   bfdc6:	b008      	add	sp, #32
   bfdc8:	bd10      	pop	{r4, pc}
	...

000bfdcc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bfdcc:	4b05      	ldr	r3, [pc, #20]	; (bfde4 <_GLOBAL__sub_I_System+0x18>)
   bfdce:	2202      	movs	r2, #2
   bfdd0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bfdd2:	4b05      	ldr	r3, [pc, #20]	; (bfde8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bfdd4:	4a05      	ldr	r2, [pc, #20]	; (bfdec <_GLOBAL__sub_I_System+0x20>)
   bfdd6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bfdd8:	2000      	movs	r0, #0
   bfdda:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bfdde:	f7fd b92f 	b.w	bd040 <set_system_mode>
   bfde2:	bf00      	nop
   bfde4:	2003e6a4 	.word	0x2003e6a4
   bfde8:	2003e698 	.word	0x2003e698
   bfdec:	ffff0000 	.word	0xffff0000

000bfdf0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bfdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bfdf4:	4a15      	ldr	r2, [pc, #84]	; (bfe4c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bfdf6:	f8df 8060 	ldr.w	r8, [pc, #96]	; bfe58 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bfdfa:	e9d2 6300 	ldrd	r6, r3, [r2]
   bfdfe:	1980      	adds	r0, r0, r6
   bfe00:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bfe04:	4b12      	ldr	r3, [pc, #72]	; (bfe50 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bfe06:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bfe0a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bfe0e:	1986      	adds	r6, r0, r6
   bfe10:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bfe14:	42bb      	cmp	r3, r7
   bfe16:	bf08      	it	eq
   bfe18:	42b2      	cmpeq	r2, r6
{
   bfe1a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bfe1c:	d013      	beq.n	bfe46 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bfe1e:	a903      	add	r1, sp, #12
   bfe20:	4668      	mov	r0, sp
   bfe22:	e9cd 6700 	strd	r6, r7, [sp]
   bfe26:	f7fd fa9d 	bl	bd364 <localtime_r>
	calendar_time.tm_year += 1900;
   bfe2a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe2c:	4d09      	ldr	r5, [pc, #36]	; (bfe54 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bfe2e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe32:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bfe34:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfe38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bfe3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfe3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bfe3e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe42:	6823      	ldr	r3, [r4, #0]
   bfe44:	602b      	str	r3, [r5, #0]
    }
}
   bfe46:	b00c      	add	sp, #48	; 0x30
   bfe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfe4c:	2003e6e0 	.word	0x2003e6e0
   bfe50:	2003e6d8 	.word	0x2003e6d8
   bfe54:	2003e6b0 	.word	0x2003e6b0
   bfe58:	2003e6e8 	.word	0x2003e6e8

000bfe5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bfe5c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe5e:	2000      	movs	r0, #0
   bfe60:	f7fd f998 	bl	bd194 <spark_sync_time_pending>
   bfe64:	b128      	cbz	r0, bfe72 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfe66:	f7fd f975 	bl	bd154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe6a:	f080 0001 	eor.w	r0, r0, #1
   bfe6e:	b2c0      	uxtb	r0, r0
    }
   bfe70:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe72:	2001      	movs	r0, #1
   bfe74:	e7fc      	b.n	bfe70 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bfe78 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bfe78:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfe7a:	f7ff ffb9 	bl	bfdf0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bfe7e:	4b01      	ldr	r3, [pc, #4]	; (bfe84 <_ZN9TimeClass4hourEx+0xc>)
   bfe80:	6898      	ldr	r0, [r3, #8]
   bfe82:	bd08      	pop	{r3, pc}
   bfe84:	2003e6b0 	.word	0x2003e6b0

000bfe88 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bfe88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfe8a:	f7ff ffb1 	bl	bfdf0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bfe8e:	4b01      	ldr	r3, [pc, #4]	; (bfe94 <_ZN9TimeClass3dayEx+0xc>)
   bfe90:	68d8      	ldr	r0, [r3, #12]
   bfe92:	bd08      	pop	{r3, pc}
   bfe94:	2003e6b0 	.word	0x2003e6b0

000bfe98 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bfe98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bfe9a:	4602      	mov	r2, r0
   bfe9c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfe9e:	4668      	mov	r0, sp
    struct timeval tv = {
   bfea0:	2100      	movs	r1, #0
    };
   bfea2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bfea6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfeaa:	f7fc fe77 	bl	bcb9c <hal_rtc_set_time>
   bfeae:	4602      	mov	r2, r0
   bfeb0:	b910      	cbnz	r0, bfeb8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bfeb2:	4601      	mov	r1, r0
   bfeb4:	f7fd f8fc 	bl	bd0b0 <system_notify_time_changed>
    }
}
   bfeb8:	b005      	add	sp, #20
   bfeba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfec0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bfec0:	b530      	push	{r4, r5, lr}
   bfec2:	b093      	sub	sp, #76	; 0x4c
   bfec4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bfec8:	4b19      	ldr	r3, [pc, #100]	; (bff30 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bfeca:	4604      	mov	r4, r0
    t += time_zone_cache;
   bfecc:	e9d3 1000 	ldrd	r1, r0, [r3]
   bfed0:	9b01      	ldr	r3, [sp, #4]
   bfed2:	1852      	adds	r2, r2, r1
   bfed4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bfed8:	4816      	ldr	r0, [pc, #88]	; (bff34 <_ZN9TimeClass7timeStrEx+0x74>)
   bfeda:	e9d0 1000 	ldrd	r1, r0, [r0]
   bfede:	1852      	adds	r2, r2, r1
   bfee0:	eb43 0300 	adc.w	r3, r3, r0
   bfee4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bfee8:	2224      	movs	r2, #36	; 0x24
   bfeea:	eb0d 0002 	add.w	r0, sp, r2
   bfeee:	2100      	movs	r1, #0
   bfef0:	f001 f9ae 	bl	c1250 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bfef4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bfef6:	a909      	add	r1, sp, #36	; 0x24
   bfef8:	4668      	mov	r0, sp
   bfefa:	f7fd fa33 	bl	bd364 <localtime_r>
    char ascstr[26] = {};
   bfefe:	2216      	movs	r2, #22
   bff00:	4629      	mov	r1, r5
   bff02:	a803      	add	r0, sp, #12
   bff04:	9502      	str	r5, [sp, #8]
   bff06:	f001 f9a3 	bl	c1250 <memset>
    asctime_r(&calendar_time, ascstr);
   bff0a:	a902      	add	r1, sp, #8
   bff0c:	a809      	add	r0, sp, #36	; 0x24
   bff0e:	f001 f925 	bl	c115c <asctime_r>
    int len = strlen(ascstr);
   bff12:	a802      	add	r0, sp, #8
   bff14:	f001 fa67 	bl	c13e6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bff18:	ab12      	add	r3, sp, #72	; 0x48
   bff1a:	4418      	add	r0, r3
    return String(ascstr);
   bff1c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bff1e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bff22:	4620      	mov	r0, r4
   bff24:	f7ff fd5b 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
}
   bff28:	4620      	mov	r0, r4
   bff2a:	b013      	add	sp, #76	; 0x4c
   bff2c:	bd30      	pop	{r4, r5, pc}
   bff2e:	bf00      	nop
   bff30:	2003e6e0 	.word	0x2003e6e0
   bff34:	2003e6d8 	.word	0x2003e6d8

000bff38 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bff38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bff3c:	b0a4      	sub	sp, #144	; 0x90
   bff3e:	4607      	mov	r7, r0
   bff40:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff42:	a814      	add	r0, sp, #80	; 0x50
{
   bff44:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff46:	223f      	movs	r2, #63	; 0x3f
{
   bff48:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff4a:	f001 fa68 	bl	c141e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bff4e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bff50:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bff52:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bff56:	f001 fa46 	bl	c13e6 <strlen>
   bff5a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bff5c:	bb4c      	cbnz	r4, bffb2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bff5e:	4929      	ldr	r1, [pc, #164]	; (c0004 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bff60:	a803      	add	r0, sp, #12
   bff62:	f001 fa1a 	bl	c139a <strcpy>
   bff66:	ac14      	add	r4, sp, #80	; 0x50
{
   bff68:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bff6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bff6e:	45b1      	cmp	r9, r6
   bff70:	d934      	bls.n	bffdc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bff72:	7823      	ldrb	r3, [r4, #0]
   bff74:	2b25      	cmp	r3, #37	; 0x25
   bff76:	f106 0a01 	add.w	sl, r6, #1
   bff7a:	d117      	bne.n	bffac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bff7c:	7863      	ldrb	r3, [r4, #1]
   bff7e:	2b7a      	cmp	r3, #122	; 0x7a
   bff80:	d114      	bne.n	bffac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bff82:	a803      	add	r0, sp, #12
   bff84:	f001 fa2f 	bl	c13e6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bff88:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bff8a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bff8c:	1830      	adds	r0, r6, r0
   bff8e:	4418      	add	r0, r3
   bff90:	eba9 0206 	sub.w	r2, r9, r6
   bff94:	1ca1      	adds	r1, r4, #2
   bff96:	f001 f933 	bl	c1200 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bff9a:	462a      	mov	r2, r5
   bff9c:	a903      	add	r1, sp, #12
   bff9e:	4620      	mov	r0, r4
   bffa0:	f001 f92e 	bl	c1200 <memcpy>
            len = strlen(format_str);
   bffa4:	a814      	add	r0, sp, #80	; 0x50
   bffa6:	f001 fa1e 	bl	c13e6 <strlen>
   bffaa:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bffac:	3401      	adds	r4, #1
   bffae:	4656      	mov	r6, sl
   bffb0:	e7db      	b.n	bff6a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bffb2:	233c      	movs	r3, #60	; 0x3c
   bffb4:	fb94 f2f3 	sdiv	r2, r4, r3
   bffb8:	2a00      	cmp	r2, #0
   bffba:	bfb8      	it	lt
   bffbc:	4252      	neglt	r2, r2
   bffbe:	fbb2 f1f3 	udiv	r1, r2, r3
   bffc2:	fb03 2211 	mls	r2, r3, r1, r2
   bffc6:	9200      	str	r2, [sp, #0]
   bffc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bffcc:	4a0e      	ldr	r2, [pc, #56]	; (c0008 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bffce:	fb94 f3f3 	sdiv	r3, r4, r3
   bffd2:	2110      	movs	r1, #16
   bffd4:	a803      	add	r0, sp, #12
   bffd6:	f7fd f985 	bl	bd2e4 <snprintf>
   bffda:	e7c4      	b.n	bff66 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bffdc:	2100      	movs	r1, #0
   bffde:	222e      	movs	r2, #46	; 0x2e
   bffe0:	a808      	add	r0, sp, #32
   bffe2:	9107      	str	r1, [sp, #28]
   bffe4:	f001 f934 	bl	c1250 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bffe8:	4643      	mov	r3, r8
   bffea:	aa14      	add	r2, sp, #80	; 0x50
   bffec:	2132      	movs	r1, #50	; 0x32
   bffee:	a807      	add	r0, sp, #28
   bfff0:	f7fd f9b0 	bl	bd354 <strftime>
    return String(buf);
   bfff4:	a907      	add	r1, sp, #28
   bfff6:	4638      	mov	r0, r7
   bfff8:	f7ff fcf1 	bl	bf9de <_ZN6StringC1EPK19__FlashStringHelper>
}
   bfffc:	4638      	mov	r0, r7
   bfffe:	b024      	add	sp, #144	; 0x90
   c0000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0004:	000c4c4b 	.word	0x000c4c4b
   c0008:	000c4c4d 	.word	0x000c4c4d

000c000c <_ZN9TimeClass6formatExPKc>:
{
   c000c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c000e:	b08d      	sub	sp, #52	; 0x34
   c0010:	e9cd 2300 	strd	r2, r3, [sp]
   c0014:	9d12      	ldr	r5, [sp, #72]	; 0x48
   c0016:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   c0018:	b915      	cbnz	r5, c0020 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   c001a:	4b19      	ldr	r3, [pc, #100]	; (c0080 <_ZN9TimeClass6formatExPKc+0x74>)
   c001c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   c001e:	b12d      	cbz	r5, c002c <_ZN9TimeClass6formatExPKc+0x20>
   c0020:	4b18      	ldr	r3, [pc, #96]	; (c0084 <_ZN9TimeClass6formatExPKc+0x78>)
   c0022:	4628      	mov	r0, r5
   c0024:	6819      	ldr	r1, [r3, #0]
   c0026:	f001 f9ae 	bl	c1386 <strcmp>
   c002a:	b938      	cbnz	r0, c003c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   c002c:	e9dd 2300 	ldrd	r2, r3, [sp]
   c0030:	4620      	mov	r0, r4
   c0032:	f7ff ff45 	bl	bfec0 <_ZN9TimeClass7timeStrEx>
}
   c0036:	4620      	mov	r0, r4
   c0038:	b00d      	add	sp, #52	; 0x34
   c003a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   c003c:	4e12      	ldr	r6, [pc, #72]	; (c0088 <_ZN9TimeClass6formatExPKc+0x7c>)
   c003e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   c0040:	4f12      	ldr	r7, [pc, #72]	; (c008c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   c0042:	e9d6 3200 	ldrd	r3, r2, [r6]
   c0046:	185b      	adds	r3, r3, r1
   c0048:	9901      	ldr	r1, [sp, #4]
   c004a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   c004e:	e9d7 0100 	ldrd	r0, r1, [r7]
   c0052:	181b      	adds	r3, r3, r0
   c0054:	eb42 0201 	adc.w	r2, r2, r1
   c0058:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   c005c:	2100      	movs	r1, #0
   c005e:	2224      	movs	r2, #36	; 0x24
   c0060:	a803      	add	r0, sp, #12
   c0062:	f001 f8f5 	bl	c1250 <memset>
    localtime_r(&t, &calendar_time);
   c0066:	a903      	add	r1, sp, #12
   c0068:	4668      	mov	r0, sp
   c006a:	f7fd f97b 	bl	bd364 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   c006e:	6832      	ldr	r2, [r6, #0]
   c0070:	683b      	ldr	r3, [r7, #0]
   c0072:	a903      	add	r1, sp, #12
   c0074:	4413      	add	r3, r2
   c0076:	4620      	mov	r0, r4
   c0078:	462a      	mov	r2, r5
   c007a:	f7ff ff5d 	bl	bff38 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   c007e:	e7da      	b.n	c0036 <_ZN9TimeClass6formatExPKc+0x2a>
   c0080:	2003e6ac 	.word	0x2003e6ac
   c0084:	2003d690 	.word	0x2003d690
   c0088:	2003e6e0 	.word	0x2003e6e0
   c008c:	2003e6d8 	.word	0x2003e6d8

000c0090 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   c0090:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0092:	2000      	movs	r0, #0
   c0094:	f7fc fd6a 	bl	bcb6c <hal_rtc_time_is_valid>
    if (rtcstate)
   c0098:	4604      	mov	r4, r0
   c009a:	b9a0      	cbnz	r0, c00c6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c009c:	f7fc ffc8 	bl	bd030 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c00a0:	2801      	cmp	r0, #1
   c00a2:	d110      	bne.n	c00c6 <_ZN9TimeClass7isValidEv+0x36>
   c00a4:	4620      	mov	r0, r4
   c00a6:	f7fc fffb 	bl	bd0a0 <system_thread_get_state>
   c00aa:	b960      	cbnz	r0, c00c6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c00ac:	f7ff fed6 	bl	bfe5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c00b0:	b910      	cbnz	r0, c00b8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c00b2:	f7fd f83f 	bl	bd134 <spark_process>
        while (_while() && !_condition()) {
   c00b6:	e7f9      	b.n	c00ac <_ZN9TimeClass7isValidEv+0x1c>
   c00b8:	f7ff fed0 	bl	bfe5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c00bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c00c0:	2000      	movs	r0, #0
   c00c2:	f7fc bd53 	b.w	bcb6c <hal_rtc_time_is_valid>
}
   c00c6:	4620      	mov	r0, r4
   c00c8:	bd10      	pop	{r4, pc}

000c00ca <_ZN9TimeClass3nowEv>:
{
   c00ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c00cc:	f7ff ffe0 	bl	c0090 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c00d0:	2210      	movs	r2, #16
   c00d2:	2100      	movs	r1, #0
   c00d4:	4668      	mov	r0, sp
   c00d6:	f001 f8bb 	bl	c1250 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c00da:	2100      	movs	r1, #0
   c00dc:	4668      	mov	r0, sp
   c00de:	f7fc fd55 	bl	bcb8c <hal_rtc_get_time>
}
   c00e2:	9800      	ldr	r0, [sp, #0]
   c00e4:	b005      	add	sp, #20
   c00e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c00ec <_ZN9TimeClass4hourEv>:
{
   c00ec:	b508      	push	{r3, lr}
	return hour(now());
   c00ee:	f7ff ffec 	bl	c00ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c00f2:	17c1      	asrs	r1, r0, #31
   c00f4:	f7ff fe7c 	bl	bfdf0 <_ZL22Refresh_UnixTime_Cachex>
}
   c00f8:	4b01      	ldr	r3, [pc, #4]	; (c0100 <_ZN9TimeClass4hourEv+0x14>)
   c00fa:	6898      	ldr	r0, [r3, #8]
   c00fc:	bd08      	pop	{r3, pc}
   c00fe:	bf00      	nop
   c0100:	2003e6b0 	.word	0x2003e6b0

000c0104 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0104:	4b02      	ldr	r3, [pc, #8]	; (c0110 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0106:	681a      	ldr	r2, [r3, #0]
   c0108:	4b02      	ldr	r3, [pc, #8]	; (c0114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c010a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c010c:	4770      	bx	lr
   c010e:	bf00      	nop
   c0110:	2003d690 	.word	0x2003d690
   c0114:	2003e6ac 	.word	0x2003e6ac

000c0118 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c0118:	4770      	bx	lr

000c011a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c011a:	7441      	strb	r1, [r0, #17]
}
   c011c:	4770      	bx	lr

000c011e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c011e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c0120:	7c00      	ldrb	r0, [r0, #16]
   c0122:	f7fc fee3 	bl	bceec <hal_usart_available_data_for_write>
}
   c0126:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c012a:	bd08      	pop	{r3, pc}

000c012c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c012c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c012e:	7c00      	ldrb	r0, [r0, #16]
   c0130:	f7fc feb4 	bl	bce9c <hal_usart_available>
}
   c0134:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0138:	bd08      	pop	{r3, pc}

000c013a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c013a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c013c:	7c00      	ldrb	r0, [r0, #16]
   c013e:	f7fc febd 	bl	bcebc <hal_usart_peek>
}
   c0142:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0146:	bd08      	pop	{r3, pc}

000c0148 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0148:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c014a:	7c00      	ldrb	r0, [r0, #16]
   c014c:	f7fc feae 	bl	bceac <hal_usart_read>
}
   c0150:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0154:	bd08      	pop	{r3, pc}

000c0156 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c0156:	7c00      	ldrb	r0, [r0, #16]
   c0158:	f7fc beb8 	b.w	bcecc <hal_usart_flush>

000c015c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c015c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c015e:	7c45      	ldrb	r5, [r0, #17]
{
   c0160:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0162:	b12d      	cbz	r5, c0170 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c0164:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c0166:	b003      	add	sp, #12
   c0168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c016c:	f7fc be8e 	b.w	bce8c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0170:	7c00      	ldrb	r0, [r0, #16]
   c0172:	9101      	str	r1, [sp, #4]
   c0174:	f7fc feba 	bl	bceec <hal_usart_available_data_for_write>
   c0178:	2800      	cmp	r0, #0
   c017a:	9901      	ldr	r1, [sp, #4]
   c017c:	dcf2      	bgt.n	c0164 <_ZN11USARTSerial5writeEh+0x8>
}
   c017e:	4628      	mov	r0, r5
   c0180:	b003      	add	sp, #12
   c0182:	bd30      	pop	{r4, r5, pc}

000c0184 <_ZN11USARTSerialD0Ev>:
   c0184:	b510      	push	{r4, lr}
   c0186:	2114      	movs	r1, #20
   c0188:	4604      	mov	r4, r0
   c018a:	f7f3 ff88 	bl	b409e <_ZdlPvj>
   c018e:	4620      	mov	r0, r4
   c0190:	bd10      	pop	{r4, pc}
	...

000c0194 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c0194:	b510      	push	{r4, lr}
   c0196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c019a:	4604      	mov	r4, r0
   c019c:	4608      	mov	r0, r1
   c019e:	4611      	mov	r1, r2
   c01a0:	2200      	movs	r2, #0
   c01a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c01a6:	4b04      	ldr	r3, [pc, #16]	; (c01b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c01a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c01aa:	2301      	movs	r3, #1
  _serial = serial;
   c01ac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c01ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c01b0:	f7fc feac 	bl	bcf0c <hal_usart_init_ex>
}
   c01b4:	4620      	mov	r0, r4
   c01b6:	bd10      	pop	{r4, pc}
   c01b8:	000c5624 	.word	0x000c5624

000c01bc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c01bc:	7c00      	ldrb	r0, [r0, #16]
   c01be:	2300      	movs	r3, #0
   c01c0:	f7fc be9c 	b.w	bcefc <hal_usart_begin_config>

000c01c4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c01c4:	2200      	movs	r2, #0
   c01c6:	f7ff bff9 	b.w	c01bc <_ZN11USARTSerial5beginEmm>

000c01ca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c01ca:	7c00      	ldrb	r0, [r0, #16]
   c01cc:	f7fc be56 	b.w	bce7c <hal_usart_end>

000c01d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c01d0:	7441      	strb	r1, [r0, #17]
}
   c01d2:	4770      	bx	lr

000c01d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c01d4:	4770      	bx	lr

000c01d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c01d6:	4770      	bx	lr

000c01d8 <_ZN9USBSerial4readEv>:
{
   c01d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c01da:	2100      	movs	r1, #0
   c01dc:	7c00      	ldrb	r0, [r0, #16]
   c01de:	f7fc fec5 	bl	bcf6c <HAL_USB_USART_Receive_Data>
}
   c01e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c01e6:	bd08      	pop	{r3, pc}

000c01e8 <_ZN9USBSerial4peekEv>:
{
   c01e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c01ea:	2101      	movs	r1, #1
   c01ec:	7c00      	ldrb	r0, [r0, #16]
   c01ee:	f7fc febd 	bl	bcf6c <HAL_USB_USART_Receive_Data>
}
   c01f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c01f6:	bd08      	pop	{r3, pc}

000c01f8 <_ZN9USBSerial17availableForWriteEv>:
{
   c01f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c01fa:	7c00      	ldrb	r0, [r0, #16]
   c01fc:	f7fc feae 	bl	bcf5c <HAL_USB_USART_Available_Data_For_Write>
}
   c0200:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0204:	bd08      	pop	{r3, pc}

000c0206 <_ZN9USBSerial9availableEv>:
{
   c0206:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0208:	7c00      	ldrb	r0, [r0, #16]
   c020a:	f7fc fe9f 	bl	bcf4c <HAL_USB_USART_Available_Data>
}
   c020e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0212:	bd08      	pop	{r3, pc}

000c0214 <_ZN9USBSerial5writeEh>:
{
   c0214:	b513      	push	{r0, r1, r4, lr}
   c0216:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0218:	7c00      	ldrb	r0, [r0, #16]
{
   c021a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c021c:	f7fc fe9e 	bl	bcf5c <HAL_USB_USART_Available_Data_For_Write>
   c0220:	2800      	cmp	r0, #0
   c0222:	9901      	ldr	r1, [sp, #4]
   c0224:	dc01      	bgt.n	c022a <_ZN9USBSerial5writeEh+0x16>
   c0226:	7c60      	ldrb	r0, [r4, #17]
   c0228:	b120      	cbz	r0, c0234 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c022a:	7c20      	ldrb	r0, [r4, #16]
   c022c:	f7fc fea6 	bl	bcf7c <HAL_USB_USART_Send_Data>
   c0230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c0234:	b002      	add	sp, #8
   c0236:	bd10      	pop	{r4, pc}

000c0238 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0238:	7c00      	ldrb	r0, [r0, #16]
   c023a:	f7fc bea7 	b.w	bcf8c <HAL_USB_USART_Flush_Data>

000c023e <_ZN9USBSerialD0Ev>:
   c023e:	b510      	push	{r4, lr}
   c0240:	2114      	movs	r1, #20
   c0242:	4604      	mov	r4, r0
   c0244:	f7f3 ff2b 	bl	b409e <_ZdlPvj>
   c0248:	4620      	mov	r0, r4
   c024a:	bd10      	pop	{r4, pc}

000c024c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c024c:	b510      	push	{r4, lr}
   c024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0252:	4604      	mov	r4, r0
   c0254:	4608      	mov	r0, r1
   c0256:	2100      	movs	r1, #0
   c0258:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c025c:	4b04      	ldr	r3, [pc, #16]	; (c0270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c025e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0260:	2301      	movs	r3, #1
  _serial = serial;
   c0262:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c0264:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c0266:	4611      	mov	r1, r2
   c0268:	f7fc fe58 	bl	bcf1c <HAL_USB_USART_Init>
}
   c026c:	4620      	mov	r0, r4
   c026e:	bd10      	pop	{r4, pc}
   c0270:	000c5654 	.word	0x000c5654

000c0274 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c0274:	7c00      	ldrb	r0, [r0, #16]
   c0276:	2200      	movs	r2, #0
   c0278:	f7fc be58 	b.w	bcf2c <HAL_USB_USART_Begin>

000c027c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c027c:	7c00      	ldrb	r0, [r0, #16]
   c027e:	f7fc be5d 	b.w	bcf3c <HAL_USB_USART_End>

000c0282 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c0282:	7c00      	ldrb	r0, [r0, #16]
   c0284:	f7fc be8a 	b.w	bcf9c <HAL_USB_USART_Is_Connected>

000c0288 <_Z19acquireSerialBufferv>:
{
   c0288:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c028a:	2214      	movs	r2, #20
{
   c028c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c028e:	2100      	movs	r1, #0
   c0290:	f000 ffde 	bl	c1250 <memset>
}
   c0294:	4620      	mov	r0, r4
   c0296:	bd10      	pop	{r4, pc}

000c0298 <_Z16_fetch_usbserialv>:
{
   c0298:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c029a:	4c0f      	ldr	r4, [pc, #60]	; (c02d8 <_Z16_fetch_usbserialv+0x40>)
{
   c029c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c029e:	a803      	add	r0, sp, #12
   c02a0:	f7ff fff2 	bl	c0288 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c02a4:	7821      	ldrb	r1, [r4, #0]
   c02a6:	f3bf 8f5b 	dmb	ish
   c02aa:	f011 0101 	ands.w	r1, r1, #1
   c02ae:	d10f      	bne.n	c02d0 <_Z16_fetch_usbserialv+0x38>
   c02b0:	4620      	mov	r0, r4
   c02b2:	9101      	str	r1, [sp, #4]
   c02b4:	f7f3 ff02 	bl	b40bc <__cxa_guard_acquire>
   c02b8:	9901      	ldr	r1, [sp, #4]
   c02ba:	b148      	cbz	r0, c02d0 <_Z16_fetch_usbserialv+0x38>
   c02bc:	aa03      	add	r2, sp, #12
   c02be:	4807      	ldr	r0, [pc, #28]	; (c02dc <_Z16_fetch_usbserialv+0x44>)
   c02c0:	f7ff ffc4 	bl	c024c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c02c4:	4620      	mov	r0, r4
   c02c6:	f7f3 fefe 	bl	b40c6 <__cxa_guard_release>
   c02ca:	4805      	ldr	r0, [pc, #20]	; (c02e0 <_Z16_fetch_usbserialv+0x48>)
   c02cc:	f000 ff6c 	bl	c11a8 <atexit>
	return _usbserial;
}
   c02d0:	4802      	ldr	r0, [pc, #8]	; (c02dc <_Z16_fetch_usbserialv+0x44>)
   c02d2:	b008      	add	sp, #32
   c02d4:	bd10      	pop	{r4, pc}
   c02d6:	bf00      	nop
   c02d8:	2003e6f0 	.word	0x2003e6f0
   c02dc:	2003e6f4 	.word	0x2003e6f4
   c02e0:	000c01d5 	.word	0x000c01d5

000c02e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c02e4:	4b01      	ldr	r3, [pc, #4]	; (c02ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c02e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c02e8:	4770      	bx	lr
   c02ea:	bf00      	nop
   c02ec:	2003d694 	.word	0x2003d694

000c02f0 <serialEventRun>:
{
   c02f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c02f2:	4b0b      	ldr	r3, [pc, #44]	; (c0320 <serialEventRun+0x30>)
   c02f4:	b143      	cbz	r3, c0308 <serialEventRun+0x18>
   c02f6:	f7ff ffcf 	bl	c0298 <_Z16_fetch_usbserialv>
   c02fa:	6803      	ldr	r3, [r0, #0]
   c02fc:	691b      	ldr	r3, [r3, #16]
   c02fe:	4798      	blx	r3
   c0300:	2800      	cmp	r0, #0
   c0302:	dd01      	ble.n	c0308 <serialEventRun+0x18>
        serialEvent();
   c0304:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0308:	4b06      	ldr	r3, [pc, #24]	; (c0324 <serialEventRun+0x34>)
   c030a:	b143      	cbz	r3, c031e <serialEventRun+0x2e>
   c030c:	f000 f9ca 	bl	c06a4 <_Z22__fetch_global_Serial1v>
   c0310:	6803      	ldr	r3, [r0, #0]
   c0312:	691b      	ldr	r3, [r3, #16]
   c0314:	4798      	blx	r3
   c0316:	2800      	cmp	r0, #0
   c0318:	dd01      	ble.n	c031e <serialEventRun+0x2e>
        serialEvent1();
   c031a:	f3af 8000 	nop.w
}
   c031e:	bd08      	pop	{r3, pc}
	...

000c0328 <_post_loop>:
{
   c0328:	b508      	push	{r3, lr}
	serialEventRun();
   c032a:	f7ff ffe1 	bl	c02f0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c032e:	f7fc fc15 	bl	bcb5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0332:	4b01      	ldr	r3, [pc, #4]	; (c0338 <_post_loop+0x10>)
   c0334:	6018      	str	r0, [r3, #0]
}
   c0336:	bd08      	pop	{r3, pc}
   c0338:	2003e710 	.word	0x2003e710

000c033c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c033c:	4805      	ldr	r0, [pc, #20]	; (c0354 <_Z33system_initialize_user_backup_ramv+0x18>)
   c033e:	4a06      	ldr	r2, [pc, #24]	; (c0358 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0340:	4906      	ldr	r1, [pc, #24]	; (c035c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0342:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0344:	1a12      	subs	r2, r2, r0
   c0346:	f000 ff5b 	bl	c1200 <memcpy>
    __backup_sram_signature = signature;
   c034a:	4b05      	ldr	r3, [pc, #20]	; (c0360 <_Z33system_initialize_user_backup_ramv+0x24>)
   c034c:	4a05      	ldr	r2, [pc, #20]	; (c0364 <_Z33system_initialize_user_backup_ramv+0x28>)
   c034e:	601a      	str	r2, [r3, #0]
}
   c0350:	bd08      	pop	{r3, pc}
   c0352:	bf00      	nop
   c0354:	2003f400 	.word	0x2003f400
   c0358:	2003f404 	.word	0x2003f404
   c035c:	000c5b44 	.word	0x000c5b44
   c0360:	2003f400 	.word	0x2003f400
   c0364:	9a271c1e 	.word	0x9a271c1e

000c0368 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0368:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c036a:	2300      	movs	r3, #0
   c036c:	9300      	str	r3, [sp, #0]
   c036e:	461a      	mov	r2, r3
   c0370:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0374:	f7fc feae 	bl	bd0d4 <system_ctrl_set_result>
}
   c0378:	b003      	add	sp, #12
   c037a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0380 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0380:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0382:	8843      	ldrh	r3, [r0, #2]
   c0384:	2b0a      	cmp	r3, #10
   c0386:	d008      	beq.n	c039a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0388:	2b50      	cmp	r3, #80	; 0x50
   c038a:	d10b      	bne.n	c03a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c038c:	4b09      	ldr	r3, [pc, #36]	; (c03b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c038e:	681b      	ldr	r3, [r3, #0]
   c0390:	b14b      	cbz	r3, c03a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0392:	b003      	add	sp, #12
   c0394:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0398:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c039a:	f7ff ffe5 	bl	c0368 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c039e:	b003      	add	sp, #12
   c03a0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c03a4:	2300      	movs	r3, #0
   c03a6:	9300      	str	r3, [sp, #0]
   c03a8:	461a      	mov	r2, r3
   c03aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c03ae:	f7fc fe91 	bl	bd0d4 <system_ctrl_set_result>
}
   c03b2:	e7f4      	b.n	c039e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c03b4:	2003e70c 	.word	0x2003e70c

000c03b8 <module_user_init_hook>:
{
   c03b8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c03ba:	4812      	ldr	r0, [pc, #72]	; (c0404 <module_user_init_hook+0x4c>)
   c03bc:	2100      	movs	r1, #0
   c03be:	f7fc ffc1 	bl	bd344 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c03c2:	4b11      	ldr	r3, [pc, #68]	; (c0408 <module_user_init_hook+0x50>)
   c03c4:	681a      	ldr	r2, [r3, #0]
   c03c6:	4b11      	ldr	r3, [pc, #68]	; (c040c <module_user_init_hook+0x54>)
   c03c8:	429a      	cmp	r2, r3
   c03ca:	4b11      	ldr	r3, [pc, #68]	; (c0410 <module_user_init_hook+0x58>)
   c03cc:	bf0c      	ite	eq
   c03ce:	2201      	moveq	r2, #1
   c03d0:	2200      	movne	r2, #0
   c03d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c03d4:	d001      	beq.n	c03da <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c03d6:	f7ff ffb1 	bl	c033c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c03da:	f7fc fba7 	bl	bcb2c <HAL_RNG_GetRandomNumber>
   c03de:	4604      	mov	r4, r0
    srand(seed);
   c03e0:	f000 ff4e 	bl	c1280 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c03e4:	4b0b      	ldr	r3, [pc, #44]	; (c0414 <module_user_init_hook+0x5c>)
   c03e6:	b113      	cbz	r3, c03ee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c03e8:	4620      	mov	r0, r4
   c03ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c03ee:	2100      	movs	r1, #0
   c03f0:	4808      	ldr	r0, [pc, #32]	; (c0414 <module_user_init_hook+0x5c>)
   c03f2:	f7fc fedf 	bl	bd1b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c03f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c03fa:	4807      	ldr	r0, [pc, #28]	; (c0418 <module_user_init_hook+0x60>)
   c03fc:	2100      	movs	r1, #0
   c03fe:	f7fc be5f 	b.w	bd0c0 <system_ctrl_set_app_request_handler>
   c0402:	bf00      	nop
   c0404:	000c02e5 	.word	0x000c02e5
   c0408:	2003f400 	.word	0x2003f400
   c040c:	9a271c1e 	.word	0x9a271c1e
   c0410:	2003e708 	.word	0x2003e708
   c0414:	00000000 	.word	0x00000000
   c0418:	000c0381 	.word	0x000c0381

000c041c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c041c:	b508      	push	{r3, lr}
   c041e:	4b02      	ldr	r3, [pc, #8]	; (c0428 <spark_protocol_instance+0xc>)
   c0420:	681b      	ldr	r3, [r3, #0]
   c0422:	681b      	ldr	r3, [r3, #0]
   c0424:	9301      	str	r3, [sp, #4]
   c0426:	bd08      	pop	{r3, pc}
   c0428:	0003025c 	.word	0x0003025c

000c042c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c042c:	b508      	push	{r3, lr}
   c042e:	4b02      	ldr	r3, [pc, #8]	; (c0438 <spark_protocol_set_product_id+0xc>)
   c0430:	681b      	ldr	r3, [r3, #0]
   c0432:	685b      	ldr	r3, [r3, #4]
   c0434:	9301      	str	r3, [sp, #4]
   c0436:	bd08      	pop	{r3, pc}
   c0438:	0003025c 	.word	0x0003025c

000c043c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c043c:	b508      	push	{r3, lr}
   c043e:	4b02      	ldr	r3, [pc, #8]	; (c0448 <spark_protocol_set_product_firmware_version+0xc>)
   c0440:	681b      	ldr	r3, [r3, #0]
   c0442:	689b      	ldr	r3, [r3, #8]
   c0444:	9301      	str	r3, [sp, #4]
   c0446:	bd08      	pop	{r3, pc}
   c0448:	0003025c 	.word	0x0003025c

000c044c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c044c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c044e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c0450:	d902      	bls.n	c0458 <pinAvailable+0xc>
    return false;
   c0452:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c0454:	b002      	add	sp, #8
   c0456:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c0458:	f1a0 030b 	sub.w	r3, r0, #11
   c045c:	2b02      	cmp	r3, #2
   c045e:	d81a      	bhi.n	c0496 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c0460:	4c17      	ldr	r4, [pc, #92]	; (c04c0 <pinAvailable+0x74>)
   c0462:	7821      	ldrb	r1, [r4, #0]
   c0464:	f3bf 8f5b 	dmb	ish
   c0468:	f011 0101 	ands.w	r1, r1, #1
   c046c:	d10b      	bne.n	c0486 <pinAvailable+0x3a>
   c046e:	4620      	mov	r0, r4
   c0470:	9101      	str	r1, [sp, #4]
   c0472:	f7f3 fe23 	bl	b40bc <__cxa_guard_acquire>
   c0476:	9901      	ldr	r1, [sp, #4]
   c0478:	b128      	cbz	r0, c0486 <pinAvailable+0x3a>
   c047a:	4812      	ldr	r0, [pc, #72]	; (c04c4 <pinAvailable+0x78>)
   c047c:	f7ff f9a4 	bl	bf7c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c0480:	4620      	mov	r0, r4
   c0482:	f7f3 fe20 	bl	b40c6 <__cxa_guard_release>
   c0486:	4b0f      	ldr	r3, [pc, #60]	; (c04c4 <pinAvailable+0x78>)
   c0488:	7818      	ldrb	r0, [r3, #0]
   c048a:	f7fc fc6f 	bl	bcd6c <hal_spi_is_enabled>
   c048e:	2800      	cmp	r0, #0
   c0490:	d1df      	bne.n	c0452 <pinAvailable+0x6>
  return true; // 'pin' is available
   c0492:	2001      	movs	r0, #1
   c0494:	e7de      	b.n	c0454 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c0496:	2801      	cmp	r0, #1
   c0498:	d809      	bhi.n	c04ae <pinAvailable+0x62>
   c049a:	f000 f89f 	bl	c05dc <_Z19__fetch_global_Wirev>
   c049e:	2100      	movs	r1, #0
   c04a0:	7c00      	ldrb	r0, [r0, #16]
   c04a2:	f7fc fc03 	bl	bccac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c04a6:	f080 0001 	eor.w	r0, r0, #1
   c04aa:	b2c0      	uxtb	r0, r0
   c04ac:	e7d2      	b.n	c0454 <pinAvailable+0x8>
   c04ae:	3809      	subs	r0, #9
   c04b0:	2801      	cmp	r0, #1
   c04b2:	d8ee      	bhi.n	c0492 <pinAvailable+0x46>
   c04b4:	f000 f8f6 	bl	c06a4 <_Z22__fetch_global_Serial1v>
   c04b8:	7c00      	ldrb	r0, [r0, #16]
   c04ba:	f7fc fd0f 	bl	bcedc <hal_usart_is_enabled>
   c04be:	e7f2      	b.n	c04a6 <pinAvailable+0x5a>
   c04c0:	2003e4d8 	.word	0x2003e4d8
   c04c4:	2003e4dc 	.word	0x2003e4dc

000c04c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c04c8:	2823      	cmp	r0, #35	; 0x23
{
   c04ca:	b538      	push	{r3, r4, r5, lr}
   c04cc:	4604      	mov	r4, r0
   c04ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c04d0:	d80a      	bhi.n	c04e8 <pinMode+0x20>
   c04d2:	29ff      	cmp	r1, #255	; 0xff
   c04d4:	d008      	beq.n	c04e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c04d6:	f7ff ffb9 	bl	c044c <pinAvailable>
   c04da:	b128      	cbz	r0, c04e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c04dc:	4629      	mov	r1, r5
   c04de:	4620      	mov	r0, r4
}
   c04e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c04e4:	f7fc bb6a 	b.w	bcbbc <HAL_Pin_Mode>
}
   c04e8:	bd38      	pop	{r3, r4, r5, pc}

000c04ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c04ea:	b538      	push	{r3, r4, r5, lr}
   c04ec:	4604      	mov	r4, r0
   c04ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c04f0:	f7fc fb6c 	bl	bcbcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c04f4:	28ff      	cmp	r0, #255	; 0xff
   c04f6:	d010      	beq.n	c051a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c04f8:	2806      	cmp	r0, #6
   c04fa:	d804      	bhi.n	c0506 <digitalWrite+0x1c>
   c04fc:	234d      	movs	r3, #77	; 0x4d
   c04fe:	fa23 f000 	lsr.w	r0, r3, r0
   c0502:	07c3      	lsls	r3, r0, #31
   c0504:	d409      	bmi.n	c051a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c0506:	4620      	mov	r0, r4
   c0508:	f7ff ffa0 	bl	c044c <pinAvailable>
   c050c:	b128      	cbz	r0, c051a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c050e:	4629      	mov	r1, r5
   c0510:	4620      	mov	r0, r4
}
   c0512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c0516:	f7fc bb61 	b.w	bcbdc <HAL_GPIO_Write>
}
   c051a:	bd38      	pop	{r3, r4, r5, pc}

000c051c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c051c:	b510      	push	{r4, lr}
   c051e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0520:	f7fc fb54 	bl	bcbcc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c0524:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c0526:	b2db      	uxtb	r3, r3
   c0528:	2b01      	cmp	r3, #1
   c052a:	d908      	bls.n	c053e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c052c:	4620      	mov	r0, r4
   c052e:	f7ff ff8d 	bl	c044c <pinAvailable>
   c0532:	b120      	cbz	r0, c053e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c0534:	4620      	mov	r0, r4
}
   c0536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c053a:	f7fc bb57 	b.w	bcbec <HAL_GPIO_Read>
}
   c053e:	2000      	movs	r0, #0
   c0540:	bd10      	pop	{r4, pc}

000c0542 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c0542:	280d      	cmp	r0, #13
{
   c0544:	b510      	push	{r4, lr}
   c0546:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c0548:	bf9c      	itt	ls
   c054a:	340e      	addls	r4, #14
   c054c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c054e:	4620      	mov	r0, r4
   c0550:	f7ff ff7c 	bl	c044c <pinAvailable>
   c0554:	b150      	cbz	r0, c056c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c0556:	2103      	movs	r1, #3
   c0558:	4620      	mov	r0, r4
   c055a:	f7fc fb27 	bl	bcbac <HAL_Validate_Pin_Function>
   c055e:	2803      	cmp	r0, #3
   c0560:	d104      	bne.n	c056c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c0562:	4620      	mov	r0, r4
}
   c0564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c0568:	f7fc bb58 	b.w	bcc1c <hal_adc_read>
}
   c056c:	2000      	movs	r0, #0
   c056e:	bd10      	pop	{r4, pc}

000c0570 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0570:	4770      	bx	lr

000c0572 <__tcf_1>:
   c0572:	4770      	bx	lr

000c0574 <_Z17acquireWireBufferv>:
{
   c0574:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0576:	4b0a      	ldr	r3, [pc, #40]	; (c05a0 <_Z17acquireWireBufferv+0x2c>)
   c0578:	6003      	str	r3, [r0, #0]
   c057a:	2301      	movs	r3, #1
{
   c057c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c057e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0580:	4908      	ldr	r1, [pc, #32]	; (c05a4 <_Z17acquireWireBufferv+0x30>)
   c0582:	2020      	movs	r0, #32
   c0584:	f000 f8b4 	bl	c06f0 <_ZnajRKSt9nothrow_t>
	};
   c0588:	2520      	movs	r5, #32
   c058a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c058c:	4905      	ldr	r1, [pc, #20]	; (c05a4 <_Z17acquireWireBufferv+0x30>)
	};
   c058e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0590:	4628      	mov	r0, r5
   c0592:	f000 f8ad 	bl	c06f0 <_ZnajRKSt9nothrow_t>
	};
   c0596:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c059a:	4620      	mov	r0, r4
   c059c:	bd38      	pop	{r3, r4, r5, pc}
   c059e:	bf00      	nop
   c05a0:	00010018 	.word	0x00010018
   c05a4:	000c567c 	.word	0x000c567c

000c05a8 <_Z18acquireWire1Bufferv>:
{
   c05a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c05aa:	4b0a      	ldr	r3, [pc, #40]	; (c05d4 <_Z18acquireWire1Bufferv+0x2c>)
   c05ac:	6003      	str	r3, [r0, #0]
   c05ae:	2301      	movs	r3, #1
{
   c05b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c05b2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05b4:	4908      	ldr	r1, [pc, #32]	; (c05d8 <_Z18acquireWire1Bufferv+0x30>)
   c05b6:	2020      	movs	r0, #32
   c05b8:	f000 f89a 	bl	c06f0 <_ZnajRKSt9nothrow_t>
	};
   c05bc:	2520      	movs	r5, #32
   c05be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05c0:	4905      	ldr	r1, [pc, #20]	; (c05d8 <_Z18acquireWire1Bufferv+0x30>)
	};
   c05c2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05c4:	4628      	mov	r0, r5
   c05c6:	f000 f893 	bl	c06f0 <_ZnajRKSt9nothrow_t>
	};
   c05ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c05ce:	4620      	mov	r0, r4
   c05d0:	bd38      	pop	{r3, r4, r5, pc}
   c05d2:	bf00      	nop
   c05d4:	00010018 	.word	0x00010018
   c05d8:	000c567c 	.word	0x000c567c

000c05dc <_Z19__fetch_global_Wirev>:
{
   c05dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c05de:	4d0e      	ldr	r5, [pc, #56]	; (c0618 <_Z19__fetch_global_Wirev+0x3c>)
   c05e0:	7829      	ldrb	r1, [r5, #0]
   c05e2:	f3bf 8f5b 	dmb	ish
   c05e6:	f011 0401 	ands.w	r4, r1, #1
{
   c05ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c05ec:	d111      	bne.n	c0612 <_Z19__fetch_global_Wirev+0x36>
   c05ee:	4628      	mov	r0, r5
   c05f0:	f7f3 fd64 	bl	b40bc <__cxa_guard_acquire>
   c05f4:	b168      	cbz	r0, c0612 <_Z19__fetch_global_Wirev+0x36>
   c05f6:	4668      	mov	r0, sp
   c05f8:	f7ff ffbc 	bl	c0574 <_Z17acquireWireBufferv>
   c05fc:	466a      	mov	r2, sp
   c05fe:	4621      	mov	r1, r4
   c0600:	4806      	ldr	r0, [pc, #24]	; (c061c <_Z19__fetch_global_Wirev+0x40>)
   c0602:	f7fd fbc3 	bl	bdd8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0606:	4628      	mov	r0, r5
   c0608:	f7f3 fd5d 	bl	b40c6 <__cxa_guard_release>
   c060c:	4804      	ldr	r0, [pc, #16]	; (c0620 <_Z19__fetch_global_Wirev+0x44>)
   c060e:	f000 fdcb 	bl	c11a8 <atexit>
	return wire;
}
   c0612:	4802      	ldr	r0, [pc, #8]	; (c061c <_Z19__fetch_global_Wirev+0x40>)
   c0614:	b007      	add	sp, #28
   c0616:	bd30      	pop	{r4, r5, pc}
   c0618:	2003e714 	.word	0x2003e714
   c061c:	2003e71c 	.word	0x2003e71c
   c0620:	000c0571 	.word	0x000c0571

000c0624 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c0624:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c0626:	4c0e      	ldr	r4, [pc, #56]	; (c0660 <_Z20__fetch_global_Wire1v+0x3c>)
   c0628:	7823      	ldrb	r3, [r4, #0]
   c062a:	f3bf 8f5b 	dmb	ish
   c062e:	07db      	lsls	r3, r3, #31
{
   c0630:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c0632:	d411      	bmi.n	c0658 <_Z20__fetch_global_Wire1v+0x34>
   c0634:	4620      	mov	r0, r4
   c0636:	f7f3 fd41 	bl	b40bc <__cxa_guard_acquire>
   c063a:	b168      	cbz	r0, c0658 <_Z20__fetch_global_Wire1v+0x34>
   c063c:	4668      	mov	r0, sp
   c063e:	f7ff ffb3 	bl	c05a8 <_Z18acquireWire1Bufferv>
   c0642:	466a      	mov	r2, sp
   c0644:	2101      	movs	r1, #1
   c0646:	4807      	ldr	r0, [pc, #28]	; (c0664 <_Z20__fetch_global_Wire1v+0x40>)
   c0648:	f7fd fba0 	bl	bdd8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c064c:	4620      	mov	r0, r4
   c064e:	f7f3 fd3a 	bl	b40c6 <__cxa_guard_release>
   c0652:	4805      	ldr	r0, [pc, #20]	; (c0668 <_Z20__fetch_global_Wire1v+0x44>)
   c0654:	f000 fda8 	bl	c11a8 <atexit>
	return wire;
}
   c0658:	4802      	ldr	r0, [pc, #8]	; (c0664 <_Z20__fetch_global_Wire1v+0x40>)
   c065a:	b006      	add	sp, #24
   c065c:	bd10      	pop	{r4, pc}
   c065e:	bf00      	nop
   c0660:	2003e718 	.word	0x2003e718
   c0664:	2003e730 	.word	0x2003e730
   c0668:	000c0573 	.word	0x000c0573

000c066c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c066c:	4770      	bx	lr
	...

000c0670 <_Z20acquireSerial1Bufferv>:
{
   c0670:	b538      	push	{r3, r4, r5, lr}
   c0672:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c0674:	2514      	movs	r5, #20
   c0676:	462a      	mov	r2, r5
   c0678:	2100      	movs	r1, #0
   c067a:	f000 fde9 	bl	c1250 <memset>
   c067e:	8025      	strh	r5, [r4, #0]
   c0680:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0682:	4907      	ldr	r1, [pc, #28]	; (c06a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c0684:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0686:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c0688:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c068a:	f000 f831 	bl	c06f0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c068e:	4904      	ldr	r1, [pc, #16]	; (c06a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c0690:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0692:	4628      	mov	r0, r5
   c0694:	f000 f82c 	bl	c06f0 <_ZnajRKSt9nothrow_t>
    };
   c0698:	60e0      	str	r0, [r4, #12]
}
   c069a:	4620      	mov	r0, r4
   c069c:	bd38      	pop	{r3, r4, r5, pc}
   c069e:	bf00      	nop
   c06a0:	000c567c 	.word	0x000c567c

000c06a4 <_Z22__fetch_global_Serial1v>:
{
   c06a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c06a6:	4d0e      	ldr	r5, [pc, #56]	; (c06e0 <_Z22__fetch_global_Serial1v+0x3c>)
   c06a8:	7829      	ldrb	r1, [r5, #0]
   c06aa:	f3bf 8f5b 	dmb	ish
   c06ae:	f011 0401 	ands.w	r4, r1, #1
{
   c06b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c06b4:	d111      	bne.n	c06da <_Z22__fetch_global_Serial1v+0x36>
   c06b6:	4628      	mov	r0, r5
   c06b8:	f7f3 fd00 	bl	b40bc <__cxa_guard_acquire>
   c06bc:	b168      	cbz	r0, c06da <_Z22__fetch_global_Serial1v+0x36>
   c06be:	a801      	add	r0, sp, #4
   c06c0:	f7ff ffd6 	bl	c0670 <_Z20acquireSerial1Bufferv>
   c06c4:	aa01      	add	r2, sp, #4
   c06c6:	4621      	mov	r1, r4
   c06c8:	4806      	ldr	r0, [pc, #24]	; (c06e4 <_Z22__fetch_global_Serial1v+0x40>)
   c06ca:	f7ff fd63 	bl	c0194 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c06ce:	4628      	mov	r0, r5
   c06d0:	f7f3 fcf9 	bl	b40c6 <__cxa_guard_release>
   c06d4:	4804      	ldr	r0, [pc, #16]	; (c06e8 <_Z22__fetch_global_Serial1v+0x44>)
   c06d6:	f000 fd67 	bl	c11a8 <atexit>
    return serial1;
}
   c06da:	4802      	ldr	r0, [pc, #8]	; (c06e4 <_Z22__fetch_global_Serial1v+0x40>)
   c06dc:	b007      	add	sp, #28
   c06de:	bd30      	pop	{r4, r5, pc}
   c06e0:	2003e744 	.word	0x2003e744
   c06e4:	2003e748 	.word	0x2003e748
   c06e8:	000c066d 	.word	0x000c066d

000c06ec <_ZnwjRKSt9nothrow_t>:
   c06ec:	f7f3 bcd3 	b.w	b4096 <_Znwj>

000c06f0 <_ZnajRKSt9nothrow_t>:
   c06f0:	f7f3 bcd3 	b.w	b409a <_Znaj>

000c06f4 <_ZSt17__throw_bad_allocv>:
   c06f4:	b508      	push	{r3, lr}
   c06f6:	f7fc fe05 	bl	bd304 <abort>

000c06fa <_ZSt20__throw_length_errorPKc>:
   c06fa:	b508      	push	{r3, lr}
   c06fc:	f7fc fe02 	bl	bd304 <abort>

000c0700 <_ZSt25__throw_bad_function_callv>:
   c0700:	b508      	push	{r3, lr}
   c0702:	f7fc fdff 	bl	bd304 <abort>
	...

000c0708 <nan>:
   c0708:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0710 <nan+0x8>
   c070c:	4770      	bx	lr
   c070e:	bf00      	nop
   c0710:	00000000 	.word	0x00000000
   c0714:	7ff80000 	.word	0x7ff80000

000c0718 <__aeabi_drsub>:
   c0718:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c071c:	e002      	b.n	c0724 <__adddf3>
   c071e:	bf00      	nop

000c0720 <__aeabi_dsub>:
   c0720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c0724 <__adddf3>:
   c0724:	b530      	push	{r4, r5, lr}
   c0726:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c072a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c072e:	ea94 0f05 	teq	r4, r5
   c0732:	bf08      	it	eq
   c0734:	ea90 0f02 	teqeq	r0, r2
   c0738:	bf1f      	itttt	ne
   c073a:	ea54 0c00 	orrsne.w	ip, r4, r0
   c073e:	ea55 0c02 	orrsne.w	ip, r5, r2
   c0742:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c0746:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c074a:	f000 80e2 	beq.w	c0912 <__adddf3+0x1ee>
   c074e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c0752:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c0756:	bfb8      	it	lt
   c0758:	426d      	neglt	r5, r5
   c075a:	dd0c      	ble.n	c0776 <__adddf3+0x52>
   c075c:	442c      	add	r4, r5
   c075e:	ea80 0202 	eor.w	r2, r0, r2
   c0762:	ea81 0303 	eor.w	r3, r1, r3
   c0766:	ea82 0000 	eor.w	r0, r2, r0
   c076a:	ea83 0101 	eor.w	r1, r3, r1
   c076e:	ea80 0202 	eor.w	r2, r0, r2
   c0772:	ea81 0303 	eor.w	r3, r1, r3
   c0776:	2d36      	cmp	r5, #54	; 0x36
   c0778:	bf88      	it	hi
   c077a:	bd30      	pophi	{r4, r5, pc}
   c077c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0780:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0784:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0788:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c078c:	d002      	beq.n	c0794 <__adddf3+0x70>
   c078e:	4240      	negs	r0, r0
   c0790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0794:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c0798:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c079c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c07a0:	d002      	beq.n	c07a8 <__adddf3+0x84>
   c07a2:	4252      	negs	r2, r2
   c07a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c07a8:	ea94 0f05 	teq	r4, r5
   c07ac:	f000 80a7 	beq.w	c08fe <__adddf3+0x1da>
   c07b0:	f1a4 0401 	sub.w	r4, r4, #1
   c07b4:	f1d5 0e20 	rsbs	lr, r5, #32
   c07b8:	db0d      	blt.n	c07d6 <__adddf3+0xb2>
   c07ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   c07be:	fa22 f205 	lsr.w	r2, r2, r5
   c07c2:	1880      	adds	r0, r0, r2
   c07c4:	f141 0100 	adc.w	r1, r1, #0
   c07c8:	fa03 f20e 	lsl.w	r2, r3, lr
   c07cc:	1880      	adds	r0, r0, r2
   c07ce:	fa43 f305 	asr.w	r3, r3, r5
   c07d2:	4159      	adcs	r1, r3
   c07d4:	e00e      	b.n	c07f4 <__adddf3+0xd0>
   c07d6:	f1a5 0520 	sub.w	r5, r5, #32
   c07da:	f10e 0e20 	add.w	lr, lr, #32
   c07de:	2a01      	cmp	r2, #1
   c07e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   c07e4:	bf28      	it	cs
   c07e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   c07ea:	fa43 f305 	asr.w	r3, r3, r5
   c07ee:	18c0      	adds	r0, r0, r3
   c07f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c07f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c07f8:	d507      	bpl.n	c080a <__adddf3+0xe6>
   c07fa:	f04f 0e00 	mov.w	lr, #0
   c07fe:	f1dc 0c00 	rsbs	ip, ip, #0
   c0802:	eb7e 0000 	sbcs.w	r0, lr, r0
   c0806:	eb6e 0101 	sbc.w	r1, lr, r1
   c080a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c080e:	d31b      	bcc.n	c0848 <__adddf3+0x124>
   c0810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c0814:	d30c      	bcc.n	c0830 <__adddf3+0x10c>
   c0816:	0849      	lsrs	r1, r1, #1
   c0818:	ea5f 0030 	movs.w	r0, r0, rrx
   c081c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c0820:	f104 0401 	add.w	r4, r4, #1
   c0824:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c0828:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c082c:	f080 809a 	bcs.w	c0964 <__adddf3+0x240>
   c0830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c0834:	bf08      	it	eq
   c0836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c083a:	f150 0000 	adcs.w	r0, r0, #0
   c083e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0842:	ea41 0105 	orr.w	r1, r1, r5
   c0846:	bd30      	pop	{r4, r5, pc}
   c0848:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c084c:	4140      	adcs	r0, r0
   c084e:	eb41 0101 	adc.w	r1, r1, r1
   c0852:	3c01      	subs	r4, #1
   c0854:	bf28      	it	cs
   c0856:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c085a:	d2e9      	bcs.n	c0830 <__adddf3+0x10c>
   c085c:	f091 0f00 	teq	r1, #0
   c0860:	bf04      	itt	eq
   c0862:	4601      	moveq	r1, r0
   c0864:	2000      	moveq	r0, #0
   c0866:	fab1 f381 	clz	r3, r1
   c086a:	bf08      	it	eq
   c086c:	3320      	addeq	r3, #32
   c086e:	f1a3 030b 	sub.w	r3, r3, #11
   c0872:	f1b3 0220 	subs.w	r2, r3, #32
   c0876:	da0c      	bge.n	c0892 <__adddf3+0x16e>
   c0878:	320c      	adds	r2, #12
   c087a:	dd08      	ble.n	c088e <__adddf3+0x16a>
   c087c:	f102 0c14 	add.w	ip, r2, #20
   c0880:	f1c2 020c 	rsb	r2, r2, #12
   c0884:	fa01 f00c 	lsl.w	r0, r1, ip
   c0888:	fa21 f102 	lsr.w	r1, r1, r2
   c088c:	e00c      	b.n	c08a8 <__adddf3+0x184>
   c088e:	f102 0214 	add.w	r2, r2, #20
   c0892:	bfd8      	it	le
   c0894:	f1c2 0c20 	rsble	ip, r2, #32
   c0898:	fa01 f102 	lsl.w	r1, r1, r2
   c089c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c08a0:	bfdc      	itt	le
   c08a2:	ea41 010c 	orrle.w	r1, r1, ip
   c08a6:	4090      	lslle	r0, r2
   c08a8:	1ae4      	subs	r4, r4, r3
   c08aa:	bfa2      	ittt	ge
   c08ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c08b0:	4329      	orrge	r1, r5
   c08b2:	bd30      	popge	{r4, r5, pc}
   c08b4:	ea6f 0404 	mvn.w	r4, r4
   c08b8:	3c1f      	subs	r4, #31
   c08ba:	da1c      	bge.n	c08f6 <__adddf3+0x1d2>
   c08bc:	340c      	adds	r4, #12
   c08be:	dc0e      	bgt.n	c08de <__adddf3+0x1ba>
   c08c0:	f104 0414 	add.w	r4, r4, #20
   c08c4:	f1c4 0220 	rsb	r2, r4, #32
   c08c8:	fa20 f004 	lsr.w	r0, r0, r4
   c08cc:	fa01 f302 	lsl.w	r3, r1, r2
   c08d0:	ea40 0003 	orr.w	r0, r0, r3
   c08d4:	fa21 f304 	lsr.w	r3, r1, r4
   c08d8:	ea45 0103 	orr.w	r1, r5, r3
   c08dc:	bd30      	pop	{r4, r5, pc}
   c08de:	f1c4 040c 	rsb	r4, r4, #12
   c08e2:	f1c4 0220 	rsb	r2, r4, #32
   c08e6:	fa20 f002 	lsr.w	r0, r0, r2
   c08ea:	fa01 f304 	lsl.w	r3, r1, r4
   c08ee:	ea40 0003 	orr.w	r0, r0, r3
   c08f2:	4629      	mov	r1, r5
   c08f4:	bd30      	pop	{r4, r5, pc}
   c08f6:	fa21 f004 	lsr.w	r0, r1, r4
   c08fa:	4629      	mov	r1, r5
   c08fc:	bd30      	pop	{r4, r5, pc}
   c08fe:	f094 0f00 	teq	r4, #0
   c0902:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c0906:	bf06      	itte	eq
   c0908:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c090c:	3401      	addeq	r4, #1
   c090e:	3d01      	subne	r5, #1
   c0910:	e74e      	b.n	c07b0 <__adddf3+0x8c>
   c0912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0916:	bf18      	it	ne
   c0918:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c091c:	d029      	beq.n	c0972 <__adddf3+0x24e>
   c091e:	ea94 0f05 	teq	r4, r5
   c0922:	bf08      	it	eq
   c0924:	ea90 0f02 	teqeq	r0, r2
   c0928:	d005      	beq.n	c0936 <__adddf3+0x212>
   c092a:	ea54 0c00 	orrs.w	ip, r4, r0
   c092e:	bf04      	itt	eq
   c0930:	4619      	moveq	r1, r3
   c0932:	4610      	moveq	r0, r2
   c0934:	bd30      	pop	{r4, r5, pc}
   c0936:	ea91 0f03 	teq	r1, r3
   c093a:	bf1e      	ittt	ne
   c093c:	2100      	movne	r1, #0
   c093e:	2000      	movne	r0, #0
   c0940:	bd30      	popne	{r4, r5, pc}
   c0942:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c0946:	d105      	bne.n	c0954 <__adddf3+0x230>
   c0948:	0040      	lsls	r0, r0, #1
   c094a:	4149      	adcs	r1, r1
   c094c:	bf28      	it	cs
   c094e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c0952:	bd30      	pop	{r4, r5, pc}
   c0954:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c0958:	bf3c      	itt	cc
   c095a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c095e:	bd30      	popcc	{r4, r5, pc}
   c0960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0964:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c0968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c096c:	f04f 0000 	mov.w	r0, #0
   c0970:	bd30      	pop	{r4, r5, pc}
   c0972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0976:	bf1a      	itte	ne
   c0978:	4619      	movne	r1, r3
   c097a:	4610      	movne	r0, r2
   c097c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0980:	bf1c      	itt	ne
   c0982:	460b      	movne	r3, r1
   c0984:	4602      	movne	r2, r0
   c0986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c098a:	bf06      	itte	eq
   c098c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0990:	ea91 0f03 	teqeq	r1, r3
   c0994:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c0998:	bd30      	pop	{r4, r5, pc}
   c099a:	bf00      	nop

000c099c <__aeabi_ui2d>:
   c099c:	f090 0f00 	teq	r0, #0
   c09a0:	bf04      	itt	eq
   c09a2:	2100      	moveq	r1, #0
   c09a4:	4770      	bxeq	lr
   c09a6:	b530      	push	{r4, r5, lr}
   c09a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c09ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c09b0:	f04f 0500 	mov.w	r5, #0
   c09b4:	f04f 0100 	mov.w	r1, #0
   c09b8:	e750      	b.n	c085c <__adddf3+0x138>
   c09ba:	bf00      	nop

000c09bc <__aeabi_i2d>:
   c09bc:	f090 0f00 	teq	r0, #0
   c09c0:	bf04      	itt	eq
   c09c2:	2100      	moveq	r1, #0
   c09c4:	4770      	bxeq	lr
   c09c6:	b530      	push	{r4, r5, lr}
   c09c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c09cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c09d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c09d4:	bf48      	it	mi
   c09d6:	4240      	negmi	r0, r0
   c09d8:	f04f 0100 	mov.w	r1, #0
   c09dc:	e73e      	b.n	c085c <__adddf3+0x138>
   c09de:	bf00      	nop

000c09e0 <__aeabi_f2d>:
   c09e0:	0042      	lsls	r2, r0, #1
   c09e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c09e6:	ea4f 0131 	mov.w	r1, r1, rrx
   c09ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c09ee:	bf1f      	itttt	ne
   c09f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c09f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c09f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c09fc:	4770      	bxne	lr
   c09fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c0a02:	bf08      	it	eq
   c0a04:	4770      	bxeq	lr
   c0a06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c0a0a:	bf04      	itt	eq
   c0a0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c0a10:	4770      	bxeq	lr
   c0a12:	b530      	push	{r4, r5, lr}
   c0a14:	f44f 7460 	mov.w	r4, #896	; 0x380
   c0a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0a20:	e71c      	b.n	c085c <__adddf3+0x138>
   c0a22:	bf00      	nop

000c0a24 <__aeabi_ul2d>:
   c0a24:	ea50 0201 	orrs.w	r2, r0, r1
   c0a28:	bf08      	it	eq
   c0a2a:	4770      	bxeq	lr
   c0a2c:	b530      	push	{r4, r5, lr}
   c0a2e:	f04f 0500 	mov.w	r5, #0
   c0a32:	e00a      	b.n	c0a4a <__aeabi_l2d+0x16>

000c0a34 <__aeabi_l2d>:
   c0a34:	ea50 0201 	orrs.w	r2, r0, r1
   c0a38:	bf08      	it	eq
   c0a3a:	4770      	bxeq	lr
   c0a3c:	b530      	push	{r4, r5, lr}
   c0a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c0a42:	d502      	bpl.n	c0a4a <__aeabi_l2d+0x16>
   c0a44:	4240      	negs	r0, r0
   c0a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c0a56:	f43f aed8 	beq.w	c080a <__adddf3+0xe6>
   c0a5a:	f04f 0203 	mov.w	r2, #3
   c0a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0a62:	bf18      	it	ne
   c0a64:	3203      	addne	r2, #3
   c0a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0a6a:	bf18      	it	ne
   c0a6c:	3203      	addne	r2, #3
   c0a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0a72:	f1c2 0320 	rsb	r3, r2, #32
   c0a76:	fa00 fc03 	lsl.w	ip, r0, r3
   c0a7a:	fa20 f002 	lsr.w	r0, r0, r2
   c0a7e:	fa01 fe03 	lsl.w	lr, r1, r3
   c0a82:	ea40 000e 	orr.w	r0, r0, lr
   c0a86:	fa21 f102 	lsr.w	r1, r1, r2
   c0a8a:	4414      	add	r4, r2
   c0a8c:	e6bd      	b.n	c080a <__adddf3+0xe6>
   c0a8e:	bf00      	nop

000c0a90 <__aeabi_dmul>:
   c0a90:	b570      	push	{r4, r5, r6, lr}
   c0a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0a9e:	bf1d      	ittte	ne
   c0aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0aa4:	ea94 0f0c 	teqne	r4, ip
   c0aa8:	ea95 0f0c 	teqne	r5, ip
   c0aac:	f000 f8de 	bleq	c0c6c <__aeabi_dmul+0x1dc>
   c0ab0:	442c      	add	r4, r5
   c0ab2:	ea81 0603 	eor.w	r6, r1, r3
   c0ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c0aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c0abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0ac2:	bf18      	it	ne
   c0ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0ad0:	d038      	beq.n	c0b44 <__aeabi_dmul+0xb4>
   c0ad2:	fba0 ce02 	umull	ip, lr, r0, r2
   c0ad6:	f04f 0500 	mov.w	r5, #0
   c0ada:	fbe1 e502 	umlal	lr, r5, r1, r2
   c0ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c0ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
   c0ae6:	f04f 0600 	mov.w	r6, #0
   c0aea:	fbe1 5603 	umlal	r5, r6, r1, r3
   c0aee:	f09c 0f00 	teq	ip, #0
   c0af2:	bf18      	it	ne
   c0af4:	f04e 0e01 	orrne.w	lr, lr, #1
   c0af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c0afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c0b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c0b04:	d204      	bcs.n	c0b10 <__aeabi_dmul+0x80>
   c0b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c0b0a:	416d      	adcs	r5, r5
   c0b0c:	eb46 0606 	adc.w	r6, r6, r6
   c0b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c0b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c0b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c0b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c0b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c0b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0b28:	bf88      	it	hi
   c0b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0b2e:	d81e      	bhi.n	c0b6e <__aeabi_dmul+0xde>
   c0b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0b34:	bf08      	it	eq
   c0b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c0b3a:	f150 0000 	adcs.w	r0, r0, #0
   c0b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0b42:	bd70      	pop	{r4, r5, r6, pc}
   c0b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0b48:	ea46 0101 	orr.w	r1, r6, r1
   c0b4c:	ea40 0002 	orr.w	r0, r0, r2
   c0b50:	ea81 0103 	eor.w	r1, r1, r3
   c0b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0b58:	bfc2      	ittt	gt
   c0b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0b62:	bd70      	popgt	{r4, r5, r6, pc}
   c0b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0b68:	f04f 0e00 	mov.w	lr, #0
   c0b6c:	3c01      	subs	r4, #1
   c0b6e:	f300 80ab 	bgt.w	c0cc8 <__aeabi_dmul+0x238>
   c0b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0b76:	bfde      	ittt	le
   c0b78:	2000      	movle	r0, #0
   c0b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c0b7e:	bd70      	pople	{r4, r5, r6, pc}
   c0b80:	f1c4 0400 	rsb	r4, r4, #0
   c0b84:	3c20      	subs	r4, #32
   c0b86:	da35      	bge.n	c0bf4 <__aeabi_dmul+0x164>
   c0b88:	340c      	adds	r4, #12
   c0b8a:	dc1b      	bgt.n	c0bc4 <__aeabi_dmul+0x134>
   c0b8c:	f104 0414 	add.w	r4, r4, #20
   c0b90:	f1c4 0520 	rsb	r5, r4, #32
   c0b94:	fa00 f305 	lsl.w	r3, r0, r5
   c0b98:	fa20 f004 	lsr.w	r0, r0, r4
   c0b9c:	fa01 f205 	lsl.w	r2, r1, r5
   c0ba0:	ea40 0002 	orr.w	r0, r0, r2
   c0ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0bb0:	fa21 f604 	lsr.w	r6, r1, r4
   c0bb4:	eb42 0106 	adc.w	r1, r2, r6
   c0bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0bbc:	bf08      	it	eq
   c0bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0bc2:	bd70      	pop	{r4, r5, r6, pc}
   c0bc4:	f1c4 040c 	rsb	r4, r4, #12
   c0bc8:	f1c4 0520 	rsb	r5, r4, #32
   c0bcc:	fa00 f304 	lsl.w	r3, r0, r4
   c0bd0:	fa20 f005 	lsr.w	r0, r0, r5
   c0bd4:	fa01 f204 	lsl.w	r2, r1, r4
   c0bd8:	ea40 0002 	orr.w	r0, r0, r2
   c0bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0be4:	f141 0100 	adc.w	r1, r1, #0
   c0be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0bec:	bf08      	it	eq
   c0bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0bf2:	bd70      	pop	{r4, r5, r6, pc}
   c0bf4:	f1c4 0520 	rsb	r5, r4, #32
   c0bf8:	fa00 f205 	lsl.w	r2, r0, r5
   c0bfc:	ea4e 0e02 	orr.w	lr, lr, r2
   c0c00:	fa20 f304 	lsr.w	r3, r0, r4
   c0c04:	fa01 f205 	lsl.w	r2, r1, r5
   c0c08:	ea43 0302 	orr.w	r3, r3, r2
   c0c0c:	fa21 f004 	lsr.w	r0, r1, r4
   c0c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0c14:	fa21 f204 	lsr.w	r2, r1, r4
   c0c18:	ea20 0002 	bic.w	r0, r0, r2
   c0c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c0c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0c24:	bf08      	it	eq
   c0c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0c2a:	bd70      	pop	{r4, r5, r6, pc}
   c0c2c:	f094 0f00 	teq	r4, #0
   c0c30:	d10f      	bne.n	c0c52 <__aeabi_dmul+0x1c2>
   c0c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0c36:	0040      	lsls	r0, r0, #1
   c0c38:	eb41 0101 	adc.w	r1, r1, r1
   c0c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0c40:	bf08      	it	eq
   c0c42:	3c01      	subeq	r4, #1
   c0c44:	d0f7      	beq.n	c0c36 <__aeabi_dmul+0x1a6>
   c0c46:	ea41 0106 	orr.w	r1, r1, r6
   c0c4a:	f095 0f00 	teq	r5, #0
   c0c4e:	bf18      	it	ne
   c0c50:	4770      	bxne	lr
   c0c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c0c56:	0052      	lsls	r2, r2, #1
   c0c58:	eb43 0303 	adc.w	r3, r3, r3
   c0c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c0c60:	bf08      	it	eq
   c0c62:	3d01      	subeq	r5, #1
   c0c64:	d0f7      	beq.n	c0c56 <__aeabi_dmul+0x1c6>
   c0c66:	ea43 0306 	orr.w	r3, r3, r6
   c0c6a:	4770      	bx	lr
   c0c6c:	ea94 0f0c 	teq	r4, ip
   c0c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0c74:	bf18      	it	ne
   c0c76:	ea95 0f0c 	teqne	r5, ip
   c0c7a:	d00c      	beq.n	c0c96 <__aeabi_dmul+0x206>
   c0c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0c80:	bf18      	it	ne
   c0c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0c86:	d1d1      	bne.n	c0c2c <__aeabi_dmul+0x19c>
   c0c88:	ea81 0103 	eor.w	r1, r1, r3
   c0c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0c90:	f04f 0000 	mov.w	r0, #0
   c0c94:	bd70      	pop	{r4, r5, r6, pc}
   c0c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0c9a:	bf06      	itte	eq
   c0c9c:	4610      	moveq	r0, r2
   c0c9e:	4619      	moveq	r1, r3
   c0ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0ca4:	d019      	beq.n	c0cda <__aeabi_dmul+0x24a>
   c0ca6:	ea94 0f0c 	teq	r4, ip
   c0caa:	d102      	bne.n	c0cb2 <__aeabi_dmul+0x222>
   c0cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0cb0:	d113      	bne.n	c0cda <__aeabi_dmul+0x24a>
   c0cb2:	ea95 0f0c 	teq	r5, ip
   c0cb6:	d105      	bne.n	c0cc4 <__aeabi_dmul+0x234>
   c0cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c0cbc:	bf1c      	itt	ne
   c0cbe:	4610      	movne	r0, r2
   c0cc0:	4619      	movne	r1, r3
   c0cc2:	d10a      	bne.n	c0cda <__aeabi_dmul+0x24a>
   c0cc4:	ea81 0103 	eor.w	r1, r1, r3
   c0cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0cd4:	f04f 0000 	mov.w	r0, #0
   c0cd8:	bd70      	pop	{r4, r5, r6, pc}
   c0cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0ce2:	bd70      	pop	{r4, r5, r6, pc}

000c0ce4 <__aeabi_ddiv>:
   c0ce4:	b570      	push	{r4, r5, r6, lr}
   c0ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0cf2:	bf1d      	ittte	ne
   c0cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0cf8:	ea94 0f0c 	teqne	r4, ip
   c0cfc:	ea95 0f0c 	teqne	r5, ip
   c0d00:	f000 f8a7 	bleq	c0e52 <__aeabi_ddiv+0x16e>
   c0d04:	eba4 0405 	sub.w	r4, r4, r5
   c0d08:	ea81 0e03 	eor.w	lr, r1, r3
   c0d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0d14:	f000 8088 	beq.w	c0e28 <__aeabi_ddiv+0x144>
   c0d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c0d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c0d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c0d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c0d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c0d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c0d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c0d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c0d3c:	429d      	cmp	r5, r3
   c0d3e:	bf08      	it	eq
   c0d40:	4296      	cmpeq	r6, r2
   c0d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c0d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c0d4a:	d202      	bcs.n	c0d52 <__aeabi_ddiv+0x6e>
   c0d4c:	085b      	lsrs	r3, r3, #1
   c0d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d52:	1ab6      	subs	r6, r6, r2
   c0d54:	eb65 0503 	sbc.w	r5, r5, r3
   c0d58:	085b      	lsrs	r3, r3, #1
   c0d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c0d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c0d66:	ebb6 0e02 	subs.w	lr, r6, r2
   c0d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0d6e:	bf22      	ittt	cs
   c0d70:	1ab6      	subcs	r6, r6, r2
   c0d72:	4675      	movcs	r5, lr
   c0d74:	ea40 000c 	orrcs.w	r0, r0, ip
   c0d78:	085b      	lsrs	r3, r3, #1
   c0d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0d86:	bf22      	ittt	cs
   c0d88:	1ab6      	subcs	r6, r6, r2
   c0d8a:	4675      	movcs	r5, lr
   c0d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0d90:	085b      	lsrs	r3, r3, #1
   c0d92:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d96:	ebb6 0e02 	subs.w	lr, r6, r2
   c0d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0d9e:	bf22      	ittt	cs
   c0da0:	1ab6      	subcs	r6, r6, r2
   c0da2:	4675      	movcs	r5, lr
   c0da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0da8:	085b      	lsrs	r3, r3, #1
   c0daa:	ea4f 0232 	mov.w	r2, r2, rrx
   c0dae:	ebb6 0e02 	subs.w	lr, r6, r2
   c0db2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0db6:	bf22      	ittt	cs
   c0db8:	1ab6      	subcs	r6, r6, r2
   c0dba:	4675      	movcs	r5, lr
   c0dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0dc0:	ea55 0e06 	orrs.w	lr, r5, r6
   c0dc4:	d018      	beq.n	c0df8 <__aeabi_ddiv+0x114>
   c0dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c0dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c0dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c0dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0de2:	d1c0      	bne.n	c0d66 <__aeabi_ddiv+0x82>
   c0de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0de8:	d10b      	bne.n	c0e02 <__aeabi_ddiv+0x11e>
   c0dea:	ea41 0100 	orr.w	r1, r1, r0
   c0dee:	f04f 0000 	mov.w	r0, #0
   c0df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c0df6:	e7b6      	b.n	c0d66 <__aeabi_ddiv+0x82>
   c0df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0dfc:	bf04      	itt	eq
   c0dfe:	4301      	orreq	r1, r0
   c0e00:	2000      	moveq	r0, #0
   c0e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0e06:	bf88      	it	hi
   c0e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0e0c:	f63f aeaf 	bhi.w	c0b6e <__aeabi_dmul+0xde>
   c0e10:	ebb5 0c03 	subs.w	ip, r5, r3
   c0e14:	bf04      	itt	eq
   c0e16:	ebb6 0c02 	subseq.w	ip, r6, r2
   c0e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0e1e:	f150 0000 	adcs.w	r0, r0, #0
   c0e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0e26:	bd70      	pop	{r4, r5, r6, pc}
   c0e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c0e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0e34:	bfc2      	ittt	gt
   c0e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0e3e:	bd70      	popgt	{r4, r5, r6, pc}
   c0e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0e44:	f04f 0e00 	mov.w	lr, #0
   c0e48:	3c01      	subs	r4, #1
   c0e4a:	e690      	b.n	c0b6e <__aeabi_dmul+0xde>
   c0e4c:	ea45 0e06 	orr.w	lr, r5, r6
   c0e50:	e68d      	b.n	c0b6e <__aeabi_dmul+0xde>
   c0e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0e56:	ea94 0f0c 	teq	r4, ip
   c0e5a:	bf08      	it	eq
   c0e5c:	ea95 0f0c 	teqeq	r5, ip
   c0e60:	f43f af3b 	beq.w	c0cda <__aeabi_dmul+0x24a>
   c0e64:	ea94 0f0c 	teq	r4, ip
   c0e68:	d10a      	bne.n	c0e80 <__aeabi_ddiv+0x19c>
   c0e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0e6e:	f47f af34 	bne.w	c0cda <__aeabi_dmul+0x24a>
   c0e72:	ea95 0f0c 	teq	r5, ip
   c0e76:	f47f af25 	bne.w	c0cc4 <__aeabi_dmul+0x234>
   c0e7a:	4610      	mov	r0, r2
   c0e7c:	4619      	mov	r1, r3
   c0e7e:	e72c      	b.n	c0cda <__aeabi_dmul+0x24a>
   c0e80:	ea95 0f0c 	teq	r5, ip
   c0e84:	d106      	bne.n	c0e94 <__aeabi_ddiv+0x1b0>
   c0e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0e8a:	f43f aefd 	beq.w	c0c88 <__aeabi_dmul+0x1f8>
   c0e8e:	4610      	mov	r0, r2
   c0e90:	4619      	mov	r1, r3
   c0e92:	e722      	b.n	c0cda <__aeabi_dmul+0x24a>
   c0e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0e98:	bf18      	it	ne
   c0e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0e9e:	f47f aec5 	bne.w	c0c2c <__aeabi_dmul+0x19c>
   c0ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0ea6:	f47f af0d 	bne.w	c0cc4 <__aeabi_dmul+0x234>
   c0eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c0eae:	f47f aeeb 	bne.w	c0c88 <__aeabi_dmul+0x1f8>
   c0eb2:	e712      	b.n	c0cda <__aeabi_dmul+0x24a>

000c0eb4 <__gedf2>:
   c0eb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0eb8:	e006      	b.n	c0ec8 <__cmpdf2+0x4>
   c0eba:	bf00      	nop

000c0ebc <__ledf2>:
   c0ebc:	f04f 0c01 	mov.w	ip, #1
   c0ec0:	e002      	b.n	c0ec8 <__cmpdf2+0x4>
   c0ec2:	bf00      	nop

000c0ec4 <__cmpdf2>:
   c0ec4:	f04f 0c01 	mov.w	ip, #1
   c0ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
   c0ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0ed8:	bf18      	it	ne
   c0eda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c0ede:	d01b      	beq.n	c0f18 <__cmpdf2+0x54>
   c0ee0:	b001      	add	sp, #4
   c0ee2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c0ee6:	bf0c      	ite	eq
   c0ee8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c0eec:	ea91 0f03 	teqne	r1, r3
   c0ef0:	bf02      	ittt	eq
   c0ef2:	ea90 0f02 	teqeq	r0, r2
   c0ef6:	2000      	moveq	r0, #0
   c0ef8:	4770      	bxeq	lr
   c0efa:	f110 0f00 	cmn.w	r0, #0
   c0efe:	ea91 0f03 	teq	r1, r3
   c0f02:	bf58      	it	pl
   c0f04:	4299      	cmppl	r1, r3
   c0f06:	bf08      	it	eq
   c0f08:	4290      	cmpeq	r0, r2
   c0f0a:	bf2c      	ite	cs
   c0f0c:	17d8      	asrcs	r0, r3, #31
   c0f0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0f12:	f040 0001 	orr.w	r0, r0, #1
   c0f16:	4770      	bx	lr
   c0f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0f20:	d102      	bne.n	c0f28 <__cmpdf2+0x64>
   c0f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0f26:	d107      	bne.n	c0f38 <__cmpdf2+0x74>
   c0f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0f30:	d1d6      	bne.n	c0ee0 <__cmpdf2+0x1c>
   c0f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0f36:	d0d3      	beq.n	c0ee0 <__cmpdf2+0x1c>
   c0f38:	f85d 0b04 	ldr.w	r0, [sp], #4
   c0f3c:	4770      	bx	lr
   c0f3e:	bf00      	nop

000c0f40 <__aeabi_cdrcmple>:
   c0f40:	4684      	mov	ip, r0
   c0f42:	4610      	mov	r0, r2
   c0f44:	4662      	mov	r2, ip
   c0f46:	468c      	mov	ip, r1
   c0f48:	4619      	mov	r1, r3
   c0f4a:	4663      	mov	r3, ip
   c0f4c:	e000      	b.n	c0f50 <__aeabi_cdcmpeq>
   c0f4e:	bf00      	nop

000c0f50 <__aeabi_cdcmpeq>:
   c0f50:	b501      	push	{r0, lr}
   c0f52:	f7ff ffb7 	bl	c0ec4 <__cmpdf2>
   c0f56:	2800      	cmp	r0, #0
   c0f58:	bf48      	it	mi
   c0f5a:	f110 0f00 	cmnmi.w	r0, #0
   c0f5e:	bd01      	pop	{r0, pc}

000c0f60 <__aeabi_dcmpeq>:
   c0f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f64:	f7ff fff4 	bl	c0f50 <__aeabi_cdcmpeq>
   c0f68:	bf0c      	ite	eq
   c0f6a:	2001      	moveq	r0, #1
   c0f6c:	2000      	movne	r0, #0
   c0f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0f72:	bf00      	nop

000c0f74 <__aeabi_dcmplt>:
   c0f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f78:	f7ff ffea 	bl	c0f50 <__aeabi_cdcmpeq>
   c0f7c:	bf34      	ite	cc
   c0f7e:	2001      	movcc	r0, #1
   c0f80:	2000      	movcs	r0, #0
   c0f82:	f85d fb08 	ldr.w	pc, [sp], #8
   c0f86:	bf00      	nop

000c0f88 <__aeabi_dcmple>:
   c0f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f8c:	f7ff ffe0 	bl	c0f50 <__aeabi_cdcmpeq>
   c0f90:	bf94      	ite	ls
   c0f92:	2001      	movls	r0, #1
   c0f94:	2000      	movhi	r0, #0
   c0f96:	f85d fb08 	ldr.w	pc, [sp], #8
   c0f9a:	bf00      	nop

000c0f9c <__aeabi_dcmpge>:
   c0f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0fa0:	f7ff ffce 	bl	c0f40 <__aeabi_cdrcmple>
   c0fa4:	bf94      	ite	ls
   c0fa6:	2001      	movls	r0, #1
   c0fa8:	2000      	movhi	r0, #0
   c0faa:	f85d fb08 	ldr.w	pc, [sp], #8
   c0fae:	bf00      	nop

000c0fb0 <__aeabi_dcmpgt>:
   c0fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0fb4:	f7ff ffc4 	bl	c0f40 <__aeabi_cdrcmple>
   c0fb8:	bf34      	ite	cc
   c0fba:	2001      	movcc	r0, #1
   c0fbc:	2000      	movcs	r0, #0
   c0fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   c0fc2:	bf00      	nop

000c0fc4 <__aeabi_dcmpun>:
   c0fc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0fcc:	d102      	bne.n	c0fd4 <__aeabi_dcmpun+0x10>
   c0fce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0fd2:	d10a      	bne.n	c0fea <__aeabi_dcmpun+0x26>
   c0fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0fdc:	d102      	bne.n	c0fe4 <__aeabi_dcmpun+0x20>
   c0fde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0fe2:	d102      	bne.n	c0fea <__aeabi_dcmpun+0x26>
   c0fe4:	f04f 0000 	mov.w	r0, #0
   c0fe8:	4770      	bx	lr
   c0fea:	f04f 0001 	mov.w	r0, #1
   c0fee:	4770      	bx	lr

000c0ff0 <__aeabi_d2iz>:
   c0ff0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0ff4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c0ff8:	d215      	bcs.n	c1026 <__aeabi_d2iz+0x36>
   c0ffa:	d511      	bpl.n	c1020 <__aeabi_d2iz+0x30>
   c0ffc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1000:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1004:	d912      	bls.n	c102c <__aeabi_d2iz+0x3c>
   c1006:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c100a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c100e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c1012:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c1016:	fa23 f002 	lsr.w	r0, r3, r2
   c101a:	bf18      	it	ne
   c101c:	4240      	negne	r0, r0
   c101e:	4770      	bx	lr
   c1020:	f04f 0000 	mov.w	r0, #0
   c1024:	4770      	bx	lr
   c1026:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c102a:	d105      	bne.n	c1038 <__aeabi_d2iz+0x48>
   c102c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c1030:	bf08      	it	eq
   c1032:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c1036:	4770      	bx	lr
   c1038:	f04f 0000 	mov.w	r0, #0
   c103c:	4770      	bx	lr
   c103e:	bf00      	nop

000c1040 <__aeabi_d2uiz>:
   c1040:	004a      	lsls	r2, r1, #1
   c1042:	d211      	bcs.n	c1068 <__aeabi_d2uiz+0x28>
   c1044:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1048:	d211      	bcs.n	c106e <__aeabi_d2uiz+0x2e>
   c104a:	d50d      	bpl.n	c1068 <__aeabi_d2uiz+0x28>
   c104c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1050:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1054:	d40e      	bmi.n	c1074 <__aeabi_d2uiz+0x34>
   c1056:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c105a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c105e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c1062:	fa23 f002 	lsr.w	r0, r3, r2
   c1066:	4770      	bx	lr
   c1068:	f04f 0000 	mov.w	r0, #0
   c106c:	4770      	bx	lr
   c106e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c1072:	d102      	bne.n	c107a <__aeabi_d2uiz+0x3a>
   c1074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c1078:	4770      	bx	lr
   c107a:	f04f 0000 	mov.w	r0, #0
   c107e:	4770      	bx	lr

000c1080 <__aeabi_d2f>:
   c1080:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c1084:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c1088:	bf24      	itt	cs
   c108a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c108e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c1092:	d90d      	bls.n	c10b0 <__aeabi_d2f+0x30>
   c1094:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c1098:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c109c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c10a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c10a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c10a8:	bf08      	it	eq
   c10aa:	f020 0001 	biceq.w	r0, r0, #1
   c10ae:	4770      	bx	lr
   c10b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c10b4:	d121      	bne.n	c10fa <__aeabi_d2f+0x7a>
   c10b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c10ba:	bfbc      	itt	lt
   c10bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c10c0:	4770      	bxlt	lr
   c10c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c10c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c10ca:	f1c2 0218 	rsb	r2, r2, #24
   c10ce:	f1c2 0c20 	rsb	ip, r2, #32
   c10d2:	fa10 f30c 	lsls.w	r3, r0, ip
   c10d6:	fa20 f002 	lsr.w	r0, r0, r2
   c10da:	bf18      	it	ne
   c10dc:	f040 0001 	orrne.w	r0, r0, #1
   c10e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c10e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c10e8:	fa03 fc0c 	lsl.w	ip, r3, ip
   c10ec:	ea40 000c 	orr.w	r0, r0, ip
   c10f0:	fa23 f302 	lsr.w	r3, r3, r2
   c10f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c10f8:	e7cc      	b.n	c1094 <__aeabi_d2f+0x14>
   c10fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c10fe:	d107      	bne.n	c1110 <__aeabi_d2f+0x90>
   c1100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c1104:	bf1e      	ittt	ne
   c1106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c110a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c110e:	4770      	bxne	lr
   c1110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c1114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c1118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c111c:	4770      	bx	lr
   c111e:	bf00      	nop

000c1120 <__aeabi_d2ulz>:
   c1120:	b5d0      	push	{r4, r6, r7, lr}
   c1122:	4b0c      	ldr	r3, [pc, #48]	; (c1154 <__aeabi_d2ulz+0x34>)
   c1124:	2200      	movs	r2, #0
   c1126:	4606      	mov	r6, r0
   c1128:	460f      	mov	r7, r1
   c112a:	f7ff fcb1 	bl	c0a90 <__aeabi_dmul>
   c112e:	f7ff ff87 	bl	c1040 <__aeabi_d2uiz>
   c1132:	4604      	mov	r4, r0
   c1134:	f7ff fc32 	bl	c099c <__aeabi_ui2d>
   c1138:	4b07      	ldr	r3, [pc, #28]	; (c1158 <__aeabi_d2ulz+0x38>)
   c113a:	2200      	movs	r2, #0
   c113c:	f7ff fca8 	bl	c0a90 <__aeabi_dmul>
   c1140:	4602      	mov	r2, r0
   c1142:	460b      	mov	r3, r1
   c1144:	4630      	mov	r0, r6
   c1146:	4639      	mov	r1, r7
   c1148:	f7ff faea 	bl	c0720 <__aeabi_dsub>
   c114c:	f7ff ff78 	bl	c1040 <__aeabi_d2uiz>
   c1150:	4621      	mov	r1, r4
   c1152:	bdd0      	pop	{r4, r6, r7, pc}
   c1154:	3df00000 	.word	0x3df00000
   c1158:	41f00000 	.word	0x41f00000

000c115c <asctime_r>:
   c115c:	b510      	push	{r4, lr}
   c115e:	460c      	mov	r4, r1
   c1160:	6941      	ldr	r1, [r0, #20]
   c1162:	6903      	ldr	r3, [r0, #16]
   c1164:	6982      	ldr	r2, [r0, #24]
   c1166:	b086      	sub	sp, #24
   c1168:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c116c:	9104      	str	r1, [sp, #16]
   c116e:	6801      	ldr	r1, [r0, #0]
   c1170:	9103      	str	r1, [sp, #12]
   c1172:	6841      	ldr	r1, [r0, #4]
   c1174:	9102      	str	r1, [sp, #8]
   c1176:	6881      	ldr	r1, [r0, #8]
   c1178:	9101      	str	r1, [sp, #4]
   c117a:	68c1      	ldr	r1, [r0, #12]
   c117c:	9100      	str	r1, [sp, #0]
   c117e:	4907      	ldr	r1, [pc, #28]	; (c119c <asctime_r+0x40>)
   c1180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c1184:	440b      	add	r3, r1
   c1186:	4906      	ldr	r1, [pc, #24]	; (c11a0 <asctime_r+0x44>)
   c1188:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c118c:	440a      	add	r2, r1
   c118e:	4620      	mov	r0, r4
   c1190:	4904      	ldr	r1, [pc, #16]	; (c11a4 <asctime_r+0x48>)
   c1192:	f7fc f897 	bl	bd2c4 <siprintf>
   c1196:	4620      	mov	r0, r4
   c1198:	b006      	add	sp, #24
   c119a:	bd10      	pop	{r4, pc}
   c119c:	000c56b2 	.word	0x000c56b2
   c11a0:	000c569d 	.word	0x000c569d
   c11a4:	000c567d 	.word	0x000c567d

000c11a8 <atexit>:
   c11a8:	2300      	movs	r3, #0
   c11aa:	4601      	mov	r1, r0
   c11ac:	461a      	mov	r2, r3
   c11ae:	4618      	mov	r0, r3
   c11b0:	f001 b900 	b.w	c23b4 <__register_exitproc>

000c11b4 <gmtime>:
   c11b4:	b538      	push	{r3, r4, r5, lr}
   c11b6:	4b0b      	ldr	r3, [pc, #44]	; (c11e4 <gmtime+0x30>)
   c11b8:	681d      	ldr	r5, [r3, #0]
   c11ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c11bc:	4604      	mov	r4, r0
   c11be:	b953      	cbnz	r3, c11d6 <gmtime+0x22>
   c11c0:	2024      	movs	r0, #36	; 0x24
   c11c2:	f7fc f867 	bl	bd294 <malloc>
   c11c6:	4602      	mov	r2, r0
   c11c8:	63e8      	str	r0, [r5, #60]	; 0x3c
   c11ca:	b920      	cbnz	r0, c11d6 <gmtime+0x22>
   c11cc:	4b06      	ldr	r3, [pc, #24]	; (c11e8 <gmtime+0x34>)
   c11ce:	4807      	ldr	r0, [pc, #28]	; (c11ec <gmtime+0x38>)
   c11d0:	2139      	movs	r1, #57	; 0x39
   c11d2:	f7fc f8af 	bl	bd334 <__assert_func>
   c11d6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c11d8:	4620      	mov	r0, r4
   c11da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c11de:	f7fc b8c9 	b.w	bd374 <gmtime_r>
   c11e2:	bf00      	nop
   c11e4:	2003d694 	.word	0x2003d694
   c11e8:	000c56d6 	.word	0x000c56d6
   c11ec:	000c56ed 	.word	0x000c56ed

000c11f0 <isprint>:
   c11f0:	4b02      	ldr	r3, [pc, #8]	; (c11fc <isprint+0xc>)
   c11f2:	4418      	add	r0, r3
   c11f4:	7840      	ldrb	r0, [r0, #1]
   c11f6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c11fa:	4770      	bx	lr
   c11fc:	000c57f8 	.word	0x000c57f8

000c1200 <memcpy>:
   c1200:	440a      	add	r2, r1
   c1202:	4291      	cmp	r1, r2
   c1204:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c1208:	d100      	bne.n	c120c <memcpy+0xc>
   c120a:	4770      	bx	lr
   c120c:	b510      	push	{r4, lr}
   c120e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c1212:	f803 4f01 	strb.w	r4, [r3, #1]!
   c1216:	4291      	cmp	r1, r2
   c1218:	d1f9      	bne.n	c120e <memcpy+0xe>
   c121a:	bd10      	pop	{r4, pc}

000c121c <memmove>:
   c121c:	4288      	cmp	r0, r1
   c121e:	b510      	push	{r4, lr}
   c1220:	eb01 0402 	add.w	r4, r1, r2
   c1224:	d902      	bls.n	c122c <memmove+0x10>
   c1226:	4284      	cmp	r4, r0
   c1228:	4623      	mov	r3, r4
   c122a:	d807      	bhi.n	c123c <memmove+0x20>
   c122c:	1e43      	subs	r3, r0, #1
   c122e:	42a1      	cmp	r1, r4
   c1230:	d008      	beq.n	c1244 <memmove+0x28>
   c1232:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1236:	f803 2f01 	strb.w	r2, [r3, #1]!
   c123a:	e7f8      	b.n	c122e <memmove+0x12>
   c123c:	4402      	add	r2, r0
   c123e:	4601      	mov	r1, r0
   c1240:	428a      	cmp	r2, r1
   c1242:	d100      	bne.n	c1246 <memmove+0x2a>
   c1244:	bd10      	pop	{r4, pc}
   c1246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c124a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c124e:	e7f7      	b.n	c1240 <memmove+0x24>

000c1250 <memset>:
   c1250:	4402      	add	r2, r0
   c1252:	4603      	mov	r3, r0
   c1254:	4293      	cmp	r3, r2
   c1256:	d100      	bne.n	c125a <memset+0xa>
   c1258:	4770      	bx	lr
   c125a:	f803 1b01 	strb.w	r1, [r3], #1
   c125e:	e7f9      	b.n	c1254 <memset+0x4>

000c1260 <_calloc_r>:
   c1260:	b513      	push	{r0, r1, r4, lr}
   c1262:	434a      	muls	r2, r1
   c1264:	4611      	mov	r1, r2
   c1266:	9201      	str	r2, [sp, #4]
   c1268:	f7fc f854 	bl	bd314 <_malloc_r>
   c126c:	4604      	mov	r4, r0
   c126e:	b118      	cbz	r0, c1278 <_calloc_r+0x18>
   c1270:	9a01      	ldr	r2, [sp, #4]
   c1272:	2100      	movs	r1, #0
   c1274:	f7ff ffec 	bl	c1250 <memset>
   c1278:	4620      	mov	r0, r4
   c127a:	b002      	add	sp, #8
   c127c:	bd10      	pop	{r4, pc}
	...

000c1280 <srand>:
   c1280:	b538      	push	{r3, r4, r5, lr}
   c1282:	4b10      	ldr	r3, [pc, #64]	; (c12c4 <srand+0x44>)
   c1284:	681d      	ldr	r5, [r3, #0]
   c1286:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1288:	4604      	mov	r4, r0
   c128a:	b9b3      	cbnz	r3, c12ba <srand+0x3a>
   c128c:	2018      	movs	r0, #24
   c128e:	f7fc f801 	bl	bd294 <malloc>
   c1292:	4602      	mov	r2, r0
   c1294:	63a8      	str	r0, [r5, #56]	; 0x38
   c1296:	b920      	cbnz	r0, c12a2 <srand+0x22>
   c1298:	4b0b      	ldr	r3, [pc, #44]	; (c12c8 <srand+0x48>)
   c129a:	480c      	ldr	r0, [pc, #48]	; (c12cc <srand+0x4c>)
   c129c:	2142      	movs	r1, #66	; 0x42
   c129e:	f7fc f849 	bl	bd334 <__assert_func>
   c12a2:	490b      	ldr	r1, [pc, #44]	; (c12d0 <srand+0x50>)
   c12a4:	4b0b      	ldr	r3, [pc, #44]	; (c12d4 <srand+0x54>)
   c12a6:	e9c0 1300 	strd	r1, r3, [r0]
   c12aa:	4b0b      	ldr	r3, [pc, #44]	; (c12d8 <srand+0x58>)
   c12ac:	6083      	str	r3, [r0, #8]
   c12ae:	230b      	movs	r3, #11
   c12b0:	8183      	strh	r3, [r0, #12]
   c12b2:	2100      	movs	r1, #0
   c12b4:	2001      	movs	r0, #1
   c12b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c12ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c12bc:	2200      	movs	r2, #0
   c12be:	611c      	str	r4, [r3, #16]
   c12c0:	615a      	str	r2, [r3, #20]
   c12c2:	bd38      	pop	{r3, r4, r5, pc}
   c12c4:	2003d694 	.word	0x2003d694
   c12c8:	000c56d6 	.word	0x000c56d6
   c12cc:	000c5746 	.word	0x000c5746
   c12d0:	abcd330e 	.word	0xabcd330e
   c12d4:	e66d1234 	.word	0xe66d1234
   c12d8:	0005deec 	.word	0x0005deec

000c12dc <rand>:
   c12dc:	4b16      	ldr	r3, [pc, #88]	; (c1338 <rand+0x5c>)
   c12de:	b510      	push	{r4, lr}
   c12e0:	681c      	ldr	r4, [r3, #0]
   c12e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c12e4:	b9b3      	cbnz	r3, c1314 <rand+0x38>
   c12e6:	2018      	movs	r0, #24
   c12e8:	f7fb ffd4 	bl	bd294 <malloc>
   c12ec:	63a0      	str	r0, [r4, #56]	; 0x38
   c12ee:	b928      	cbnz	r0, c12fc <rand+0x20>
   c12f0:	4602      	mov	r2, r0
   c12f2:	4b12      	ldr	r3, [pc, #72]	; (c133c <rand+0x60>)
   c12f4:	4812      	ldr	r0, [pc, #72]	; (c1340 <rand+0x64>)
   c12f6:	214e      	movs	r1, #78	; 0x4e
   c12f8:	f7fc f81c 	bl	bd334 <__assert_func>
   c12fc:	4a11      	ldr	r2, [pc, #68]	; (c1344 <rand+0x68>)
   c12fe:	4b12      	ldr	r3, [pc, #72]	; (c1348 <rand+0x6c>)
   c1300:	e9c0 2300 	strd	r2, r3, [r0]
   c1304:	4b11      	ldr	r3, [pc, #68]	; (c134c <rand+0x70>)
   c1306:	6083      	str	r3, [r0, #8]
   c1308:	230b      	movs	r3, #11
   c130a:	8183      	strh	r3, [r0, #12]
   c130c:	2201      	movs	r2, #1
   c130e:	2300      	movs	r3, #0
   c1310:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c1314:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c1316:	4a0e      	ldr	r2, [pc, #56]	; (c1350 <rand+0x74>)
   c1318:	6920      	ldr	r0, [r4, #16]
   c131a:	6963      	ldr	r3, [r4, #20]
   c131c:	490d      	ldr	r1, [pc, #52]	; (c1354 <rand+0x78>)
   c131e:	4342      	muls	r2, r0
   c1320:	fb01 2203 	mla	r2, r1, r3, r2
   c1324:	fba0 0101 	umull	r0, r1, r0, r1
   c1328:	1c43      	adds	r3, r0, #1
   c132a:	eb42 0001 	adc.w	r0, r2, r1
   c132e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c1332:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c1336:	bd10      	pop	{r4, pc}
   c1338:	2003d694 	.word	0x2003d694
   c133c:	000c56d6 	.word	0x000c56d6
   c1340:	000c5746 	.word	0x000c5746
   c1344:	abcd330e 	.word	0xabcd330e
   c1348:	e66d1234 	.word	0xe66d1234
   c134c:	0005deec 	.word	0x0005deec
   c1350:	5851f42d 	.word	0x5851f42d
   c1354:	4c957f2d 	.word	0x4c957f2d

000c1358 <strchr>:
   c1358:	b2c9      	uxtb	r1, r1
   c135a:	4603      	mov	r3, r0
   c135c:	f810 2b01 	ldrb.w	r2, [r0], #1
   c1360:	b11a      	cbz	r2, c136a <strchr+0x12>
   c1362:	428a      	cmp	r2, r1
   c1364:	d1f9      	bne.n	c135a <strchr+0x2>
   c1366:	4618      	mov	r0, r3
   c1368:	4770      	bx	lr
   c136a:	2900      	cmp	r1, #0
   c136c:	bf18      	it	ne
   c136e:	2300      	movne	r3, #0
   c1370:	e7f9      	b.n	c1366 <strchr+0xe>

000c1372 <strchrnul>:
   c1372:	b510      	push	{r4, lr}
   c1374:	4604      	mov	r4, r0
   c1376:	f7ff ffef 	bl	c1358 <strchr>
   c137a:	b918      	cbnz	r0, c1384 <strchrnul+0x12>
   c137c:	4620      	mov	r0, r4
   c137e:	f000 f832 	bl	c13e6 <strlen>
   c1382:	4420      	add	r0, r4
   c1384:	bd10      	pop	{r4, pc}

000c1386 <strcmp>:
   c1386:	f810 2b01 	ldrb.w	r2, [r0], #1
   c138a:	f811 3b01 	ldrb.w	r3, [r1], #1
   c138e:	2a01      	cmp	r2, #1
   c1390:	bf28      	it	cs
   c1392:	429a      	cmpcs	r2, r3
   c1394:	d0f7      	beq.n	c1386 <strcmp>
   c1396:	1ad0      	subs	r0, r2, r3
   c1398:	4770      	bx	lr

000c139a <strcpy>:
   c139a:	4603      	mov	r3, r0
   c139c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c13a0:	f803 2b01 	strb.w	r2, [r3], #1
   c13a4:	2a00      	cmp	r2, #0
   c13a6:	d1f9      	bne.n	c139c <strcpy+0x2>
   c13a8:	4770      	bx	lr
	...

000c13ac <strdup>:
   c13ac:	4b02      	ldr	r3, [pc, #8]	; (c13b8 <strdup+0xc>)
   c13ae:	4601      	mov	r1, r0
   c13b0:	6818      	ldr	r0, [r3, #0]
   c13b2:	f000 b803 	b.w	c13bc <_strdup_r>
   c13b6:	bf00      	nop
   c13b8:	2003d694 	.word	0x2003d694

000c13bc <_strdup_r>:
   c13bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c13be:	4604      	mov	r4, r0
   c13c0:	4608      	mov	r0, r1
   c13c2:	460d      	mov	r5, r1
   c13c4:	f000 f80f 	bl	c13e6 <strlen>
   c13c8:	1c42      	adds	r2, r0, #1
   c13ca:	4611      	mov	r1, r2
   c13cc:	4620      	mov	r0, r4
   c13ce:	9201      	str	r2, [sp, #4]
   c13d0:	f7fb ffa0 	bl	bd314 <_malloc_r>
   c13d4:	4604      	mov	r4, r0
   c13d6:	b118      	cbz	r0, c13e0 <_strdup_r+0x24>
   c13d8:	9a01      	ldr	r2, [sp, #4]
   c13da:	4629      	mov	r1, r5
   c13dc:	f7ff ff10 	bl	c1200 <memcpy>
   c13e0:	4620      	mov	r0, r4
   c13e2:	b003      	add	sp, #12
   c13e4:	bd30      	pop	{r4, r5, pc}

000c13e6 <strlen>:
   c13e6:	4603      	mov	r3, r0
   c13e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c13ec:	2a00      	cmp	r2, #0
   c13ee:	d1fb      	bne.n	c13e8 <strlen+0x2>
   c13f0:	1a18      	subs	r0, r3, r0
   c13f2:	3801      	subs	r0, #1
   c13f4:	4770      	bx	lr

000c13f6 <strncmp>:
   c13f6:	b510      	push	{r4, lr}
   c13f8:	b17a      	cbz	r2, c141a <strncmp+0x24>
   c13fa:	4603      	mov	r3, r0
   c13fc:	3901      	subs	r1, #1
   c13fe:	1884      	adds	r4, r0, r2
   c1400:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1404:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c1408:	4290      	cmp	r0, r2
   c140a:	d101      	bne.n	c1410 <strncmp+0x1a>
   c140c:	42a3      	cmp	r3, r4
   c140e:	d101      	bne.n	c1414 <strncmp+0x1e>
   c1410:	1a80      	subs	r0, r0, r2
   c1412:	bd10      	pop	{r4, pc}
   c1414:	2800      	cmp	r0, #0
   c1416:	d1f3      	bne.n	c1400 <strncmp+0xa>
   c1418:	e7fa      	b.n	c1410 <strncmp+0x1a>
   c141a:	4610      	mov	r0, r2
   c141c:	e7f9      	b.n	c1412 <strncmp+0x1c>

000c141e <strncpy>:
   c141e:	b510      	push	{r4, lr}
   c1420:	3901      	subs	r1, #1
   c1422:	4603      	mov	r3, r0
   c1424:	b132      	cbz	r2, c1434 <strncpy+0x16>
   c1426:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c142a:	f803 4b01 	strb.w	r4, [r3], #1
   c142e:	3a01      	subs	r2, #1
   c1430:	2c00      	cmp	r4, #0
   c1432:	d1f7      	bne.n	c1424 <strncpy+0x6>
   c1434:	441a      	add	r2, r3
   c1436:	2100      	movs	r1, #0
   c1438:	4293      	cmp	r3, r2
   c143a:	d100      	bne.n	c143e <strncpy+0x20>
   c143c:	bd10      	pop	{r4, pc}
   c143e:	f803 1b01 	strb.w	r1, [r3], #1
   c1442:	e7f9      	b.n	c1438 <strncpy+0x1a>

000c1444 <strrchr>:
   c1444:	b538      	push	{r3, r4, r5, lr}
   c1446:	4603      	mov	r3, r0
   c1448:	460c      	mov	r4, r1
   c144a:	b969      	cbnz	r1, c1468 <strrchr+0x24>
   c144c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c1450:	f7ff bf82 	b.w	c1358 <strchr>
   c1454:	1c43      	adds	r3, r0, #1
   c1456:	4605      	mov	r5, r0
   c1458:	4621      	mov	r1, r4
   c145a:	4618      	mov	r0, r3
   c145c:	f7ff ff7c 	bl	c1358 <strchr>
   c1460:	2800      	cmp	r0, #0
   c1462:	d1f7      	bne.n	c1454 <strrchr+0x10>
   c1464:	4628      	mov	r0, r5
   c1466:	bd38      	pop	{r3, r4, r5, pc}
   c1468:	2500      	movs	r5, #0
   c146a:	e7f5      	b.n	c1458 <strrchr+0x14>

000c146c <sulp>:
   c146c:	b570      	push	{r4, r5, r6, lr}
   c146e:	4604      	mov	r4, r0
   c1470:	460d      	mov	r5, r1
   c1472:	ec45 4b10 	vmov	d0, r4, r5
   c1476:	4616      	mov	r6, r2
   c1478:	f001 ff2a 	bl	c32d0 <__ulp>
   c147c:	ec51 0b10 	vmov	r0, r1, d0
   c1480:	b17e      	cbz	r6, c14a2 <sulp+0x36>
   c1482:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c1486:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c148a:	2b00      	cmp	r3, #0
   c148c:	dd09      	ble.n	c14a2 <sulp+0x36>
   c148e:	051b      	lsls	r3, r3, #20
   c1490:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c1494:	2400      	movs	r4, #0
   c1496:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c149a:	4622      	mov	r2, r4
   c149c:	462b      	mov	r3, r5
   c149e:	f7ff faf7 	bl	c0a90 <__aeabi_dmul>
   c14a2:	bd70      	pop	{r4, r5, r6, pc}
   c14a4:	0000      	movs	r0, r0
	...

000c14a8 <_strtod_l>:
   c14a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c14ac:	ed2d 8b02 	vpush	{d8}
   c14b0:	b09d      	sub	sp, #116	; 0x74
   c14b2:	461f      	mov	r7, r3
   c14b4:	2300      	movs	r3, #0
   c14b6:	9318      	str	r3, [sp, #96]	; 0x60
   c14b8:	4ba2      	ldr	r3, [pc, #648]	; (c1744 <_strtod_l+0x29c>)
   c14ba:	9213      	str	r2, [sp, #76]	; 0x4c
   c14bc:	681b      	ldr	r3, [r3, #0]
   c14be:	9305      	str	r3, [sp, #20]
   c14c0:	4604      	mov	r4, r0
   c14c2:	4618      	mov	r0, r3
   c14c4:	4688      	mov	r8, r1
   c14c6:	f7ff ff8e 	bl	c13e6 <strlen>
   c14ca:	f04f 0a00 	mov.w	sl, #0
   c14ce:	4605      	mov	r5, r0
   c14d0:	f04f 0b00 	mov.w	fp, #0
   c14d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c14d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c14da:	781a      	ldrb	r2, [r3, #0]
   c14dc:	2a2b      	cmp	r2, #43	; 0x2b
   c14de:	d04e      	beq.n	c157e <_strtod_l+0xd6>
   c14e0:	d83b      	bhi.n	c155a <_strtod_l+0xb2>
   c14e2:	2a0d      	cmp	r2, #13
   c14e4:	d834      	bhi.n	c1550 <_strtod_l+0xa8>
   c14e6:	2a08      	cmp	r2, #8
   c14e8:	d834      	bhi.n	c1554 <_strtod_l+0xac>
   c14ea:	2a00      	cmp	r2, #0
   c14ec:	d03e      	beq.n	c156c <_strtod_l+0xc4>
   c14ee:	2300      	movs	r3, #0
   c14f0:	930a      	str	r3, [sp, #40]	; 0x28
   c14f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c14f4:	7833      	ldrb	r3, [r6, #0]
   c14f6:	2b30      	cmp	r3, #48	; 0x30
   c14f8:	f040 80b0 	bne.w	c165c <_strtod_l+0x1b4>
   c14fc:	7873      	ldrb	r3, [r6, #1]
   c14fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c1502:	2b58      	cmp	r3, #88	; 0x58
   c1504:	d168      	bne.n	c15d8 <_strtod_l+0x130>
   c1506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1508:	9301      	str	r3, [sp, #4]
   c150a:	ab18      	add	r3, sp, #96	; 0x60
   c150c:	9702      	str	r7, [sp, #8]
   c150e:	9300      	str	r3, [sp, #0]
   c1510:	4a8d      	ldr	r2, [pc, #564]	; (c1748 <_strtod_l+0x2a0>)
   c1512:	ab19      	add	r3, sp, #100	; 0x64
   c1514:	a917      	add	r1, sp, #92	; 0x5c
   c1516:	4620      	mov	r0, r4
   c1518:	f001 f838 	bl	c258c <__gethex>
   c151c:	f010 0707 	ands.w	r7, r0, #7
   c1520:	4605      	mov	r5, r0
   c1522:	d005      	beq.n	c1530 <_strtod_l+0x88>
   c1524:	2f06      	cmp	r7, #6
   c1526:	d12c      	bne.n	c1582 <_strtod_l+0xda>
   c1528:	3601      	adds	r6, #1
   c152a:	2300      	movs	r3, #0
   c152c:	9617      	str	r6, [sp, #92]	; 0x5c
   c152e:	930a      	str	r3, [sp, #40]	; 0x28
   c1530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c1532:	2b00      	cmp	r3, #0
   c1534:	f040 8590 	bne.w	c2058 <_strtod_l+0xbb0>
   c1538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c153a:	b1eb      	cbz	r3, c1578 <_strtod_l+0xd0>
   c153c:	4652      	mov	r2, sl
   c153e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c1542:	ec43 2b10 	vmov	d0, r2, r3
   c1546:	b01d      	add	sp, #116	; 0x74
   c1548:	ecbd 8b02 	vpop	{d8}
   c154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1550:	2a20      	cmp	r2, #32
   c1552:	d1cc      	bne.n	c14ee <_strtod_l+0x46>
   c1554:	3301      	adds	r3, #1
   c1556:	9317      	str	r3, [sp, #92]	; 0x5c
   c1558:	e7be      	b.n	c14d8 <_strtod_l+0x30>
   c155a:	2a2d      	cmp	r2, #45	; 0x2d
   c155c:	d1c7      	bne.n	c14ee <_strtod_l+0x46>
   c155e:	2201      	movs	r2, #1
   c1560:	920a      	str	r2, [sp, #40]	; 0x28
   c1562:	1c5a      	adds	r2, r3, #1
   c1564:	9217      	str	r2, [sp, #92]	; 0x5c
   c1566:	785b      	ldrb	r3, [r3, #1]
   c1568:	2b00      	cmp	r3, #0
   c156a:	d1c2      	bne.n	c14f2 <_strtod_l+0x4a>
   c156c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c156e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1572:	2b00      	cmp	r3, #0
   c1574:	f040 856e 	bne.w	c2054 <_strtod_l+0xbac>
   c1578:	4652      	mov	r2, sl
   c157a:	465b      	mov	r3, fp
   c157c:	e7e1      	b.n	c1542 <_strtod_l+0x9a>
   c157e:	2200      	movs	r2, #0
   c1580:	e7ee      	b.n	c1560 <_strtod_l+0xb8>
   c1582:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1584:	b13a      	cbz	r2, c1596 <_strtod_l+0xee>
   c1586:	2135      	movs	r1, #53	; 0x35
   c1588:	a81a      	add	r0, sp, #104	; 0x68
   c158a:	f001 ffac 	bl	c34e6 <__copybits>
   c158e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1590:	4620      	mov	r0, r4
   c1592:	f001 fb6b 	bl	c2c6c <_Bfree>
   c1596:	3f01      	subs	r7, #1
   c1598:	2f04      	cmp	r7, #4
   c159a:	d806      	bhi.n	c15aa <_strtod_l+0x102>
   c159c:	e8df f007 	tbb	[pc, r7]
   c15a0:	1714030a 	.word	0x1714030a
   c15a4:	0a          	.byte	0x0a
   c15a5:	00          	.byte	0x00
   c15a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c15aa:	0728      	lsls	r0, r5, #28
   c15ac:	d5c0      	bpl.n	c1530 <_strtod_l+0x88>
   c15ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c15b2:	e7bd      	b.n	c1530 <_strtod_l+0x88>
   c15b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c15b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c15ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c15be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c15c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c15c6:	e7f0      	b.n	c15aa <_strtod_l+0x102>
   c15c8:	f8df b180 	ldr.w	fp, [pc, #384]	; c174c <_strtod_l+0x2a4>
   c15cc:	e7ed      	b.n	c15aa <_strtod_l+0x102>
   c15ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c15d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c15d6:	e7e8      	b.n	c15aa <_strtod_l+0x102>
   c15d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15da:	1c5a      	adds	r2, r3, #1
   c15dc:	9217      	str	r2, [sp, #92]	; 0x5c
   c15de:	785b      	ldrb	r3, [r3, #1]
   c15e0:	2b30      	cmp	r3, #48	; 0x30
   c15e2:	d0f9      	beq.n	c15d8 <_strtod_l+0x130>
   c15e4:	2b00      	cmp	r3, #0
   c15e6:	d0a3      	beq.n	c1530 <_strtod_l+0x88>
   c15e8:	2301      	movs	r3, #1
   c15ea:	f04f 0900 	mov.w	r9, #0
   c15ee:	9304      	str	r3, [sp, #16]
   c15f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15f2:	9308      	str	r3, [sp, #32]
   c15f4:	f8cd 901c 	str.w	r9, [sp, #28]
   c15f8:	464f      	mov	r7, r9
   c15fa:	220a      	movs	r2, #10
   c15fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c15fe:	7806      	ldrb	r6, [r0, #0]
   c1600:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c1604:	b2d9      	uxtb	r1, r3
   c1606:	2909      	cmp	r1, #9
   c1608:	d92a      	bls.n	c1660 <_strtod_l+0x1b8>
   c160a:	9905      	ldr	r1, [sp, #20]
   c160c:	462a      	mov	r2, r5
   c160e:	f7ff fef2 	bl	c13f6 <strncmp>
   c1612:	b398      	cbz	r0, c167c <_strtod_l+0x1d4>
   c1614:	2000      	movs	r0, #0
   c1616:	4632      	mov	r2, r6
   c1618:	463d      	mov	r5, r7
   c161a:	9005      	str	r0, [sp, #20]
   c161c:	4603      	mov	r3, r0
   c161e:	2a65      	cmp	r2, #101	; 0x65
   c1620:	d001      	beq.n	c1626 <_strtod_l+0x17e>
   c1622:	2a45      	cmp	r2, #69	; 0x45
   c1624:	d118      	bne.n	c1658 <_strtod_l+0x1b0>
   c1626:	b91d      	cbnz	r5, c1630 <_strtod_l+0x188>
   c1628:	9a04      	ldr	r2, [sp, #16]
   c162a:	4302      	orrs	r2, r0
   c162c:	d09e      	beq.n	c156c <_strtod_l+0xc4>
   c162e:	2500      	movs	r5, #0
   c1630:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c1634:	f108 0201 	add.w	r2, r8, #1
   c1638:	9217      	str	r2, [sp, #92]	; 0x5c
   c163a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c163e:	2a2b      	cmp	r2, #43	; 0x2b
   c1640:	d075      	beq.n	c172e <_strtod_l+0x286>
   c1642:	2a2d      	cmp	r2, #45	; 0x2d
   c1644:	d07b      	beq.n	c173e <_strtod_l+0x296>
   c1646:	f04f 0c00 	mov.w	ip, #0
   c164a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c164e:	2909      	cmp	r1, #9
   c1650:	f240 8082 	bls.w	c1758 <_strtod_l+0x2b0>
   c1654:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1658:	2600      	movs	r6, #0
   c165a:	e09d      	b.n	c1798 <_strtod_l+0x2f0>
   c165c:	2300      	movs	r3, #0
   c165e:	e7c4      	b.n	c15ea <_strtod_l+0x142>
   c1660:	2f08      	cmp	r7, #8
   c1662:	bfd8      	it	le
   c1664:	9907      	ldrle	r1, [sp, #28]
   c1666:	f100 0001 	add.w	r0, r0, #1
   c166a:	bfda      	itte	le
   c166c:	fb02 3301 	mlale	r3, r2, r1, r3
   c1670:	9307      	strle	r3, [sp, #28]
   c1672:	fb02 3909 	mlagt	r9, r2, r9, r3
   c1676:	3701      	adds	r7, #1
   c1678:	9017      	str	r0, [sp, #92]	; 0x5c
   c167a:	e7bf      	b.n	c15fc <_strtod_l+0x154>
   c167c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c167e:	195a      	adds	r2, r3, r5
   c1680:	9217      	str	r2, [sp, #92]	; 0x5c
   c1682:	5d5a      	ldrb	r2, [r3, r5]
   c1684:	2f00      	cmp	r7, #0
   c1686:	d037      	beq.n	c16f8 <_strtod_l+0x250>
   c1688:	9005      	str	r0, [sp, #20]
   c168a:	463d      	mov	r5, r7
   c168c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1690:	2b09      	cmp	r3, #9
   c1692:	d912      	bls.n	c16ba <_strtod_l+0x212>
   c1694:	2301      	movs	r3, #1
   c1696:	e7c2      	b.n	c161e <_strtod_l+0x176>
   c1698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c169a:	1c5a      	adds	r2, r3, #1
   c169c:	9217      	str	r2, [sp, #92]	; 0x5c
   c169e:	785a      	ldrb	r2, [r3, #1]
   c16a0:	3001      	adds	r0, #1
   c16a2:	2a30      	cmp	r2, #48	; 0x30
   c16a4:	d0f8      	beq.n	c1698 <_strtod_l+0x1f0>
   c16a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c16aa:	2b08      	cmp	r3, #8
   c16ac:	f200 84d9 	bhi.w	c2062 <_strtod_l+0xbba>
   c16b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c16b2:	9005      	str	r0, [sp, #20]
   c16b4:	2000      	movs	r0, #0
   c16b6:	9308      	str	r3, [sp, #32]
   c16b8:	4605      	mov	r5, r0
   c16ba:	3a30      	subs	r2, #48	; 0x30
   c16bc:	f100 0301 	add.w	r3, r0, #1
   c16c0:	d014      	beq.n	c16ec <_strtod_l+0x244>
   c16c2:	9905      	ldr	r1, [sp, #20]
   c16c4:	4419      	add	r1, r3
   c16c6:	9105      	str	r1, [sp, #20]
   c16c8:	462b      	mov	r3, r5
   c16ca:	eb00 0e05 	add.w	lr, r0, r5
   c16ce:	210a      	movs	r1, #10
   c16d0:	4573      	cmp	r3, lr
   c16d2:	d113      	bne.n	c16fc <_strtod_l+0x254>
   c16d4:	182b      	adds	r3, r5, r0
   c16d6:	2b08      	cmp	r3, #8
   c16d8:	f105 0501 	add.w	r5, r5, #1
   c16dc:	4405      	add	r5, r0
   c16de:	dc1c      	bgt.n	c171a <_strtod_l+0x272>
   c16e0:	9907      	ldr	r1, [sp, #28]
   c16e2:	230a      	movs	r3, #10
   c16e4:	fb03 2301 	mla	r3, r3, r1, r2
   c16e8:	9307      	str	r3, [sp, #28]
   c16ea:	2300      	movs	r3, #0
   c16ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c16ee:	1c51      	adds	r1, r2, #1
   c16f0:	9117      	str	r1, [sp, #92]	; 0x5c
   c16f2:	7852      	ldrb	r2, [r2, #1]
   c16f4:	4618      	mov	r0, r3
   c16f6:	e7c9      	b.n	c168c <_strtod_l+0x1e4>
   c16f8:	4638      	mov	r0, r7
   c16fa:	e7d2      	b.n	c16a2 <_strtod_l+0x1fa>
   c16fc:	2b08      	cmp	r3, #8
   c16fe:	dc04      	bgt.n	c170a <_strtod_l+0x262>
   c1700:	9e07      	ldr	r6, [sp, #28]
   c1702:	434e      	muls	r6, r1
   c1704:	9607      	str	r6, [sp, #28]
   c1706:	3301      	adds	r3, #1
   c1708:	e7e2      	b.n	c16d0 <_strtod_l+0x228>
   c170a:	f103 0c01 	add.w	ip, r3, #1
   c170e:	f1bc 0f10 	cmp.w	ip, #16
   c1712:	bfd8      	it	le
   c1714:	fb01 f909 	mulle.w	r9, r1, r9
   c1718:	e7f5      	b.n	c1706 <_strtod_l+0x25e>
   c171a:	2d10      	cmp	r5, #16
   c171c:	bfdc      	itt	le
   c171e:	230a      	movle	r3, #10
   c1720:	fb03 2909 	mlale	r9, r3, r9, r2
   c1724:	e7e1      	b.n	c16ea <_strtod_l+0x242>
   c1726:	2300      	movs	r3, #0
   c1728:	9305      	str	r3, [sp, #20]
   c172a:	2301      	movs	r3, #1
   c172c:	e77c      	b.n	c1628 <_strtod_l+0x180>
   c172e:	f04f 0c00 	mov.w	ip, #0
   c1732:	f108 0202 	add.w	r2, r8, #2
   c1736:	9217      	str	r2, [sp, #92]	; 0x5c
   c1738:	f898 2002 	ldrb.w	r2, [r8, #2]
   c173c:	e785      	b.n	c164a <_strtod_l+0x1a2>
   c173e:	f04f 0c01 	mov.w	ip, #1
   c1742:	e7f6      	b.n	c1732 <_strtod_l+0x28a>
   c1744:	000c596c 	.word	0x000c596c
   c1748:	000c57a8 	.word	0x000c57a8
   c174c:	7ff00000 	.word	0x7ff00000
   c1750:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1752:	1c51      	adds	r1, r2, #1
   c1754:	9117      	str	r1, [sp, #92]	; 0x5c
   c1756:	7852      	ldrb	r2, [r2, #1]
   c1758:	2a30      	cmp	r2, #48	; 0x30
   c175a:	d0f9      	beq.n	c1750 <_strtod_l+0x2a8>
   c175c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c1760:	2908      	cmp	r1, #8
   c1762:	f63f af79 	bhi.w	c1658 <_strtod_l+0x1b0>
   c1766:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c176a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c176c:	9206      	str	r2, [sp, #24]
   c176e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1770:	1c51      	adds	r1, r2, #1
   c1772:	9117      	str	r1, [sp, #92]	; 0x5c
   c1774:	7852      	ldrb	r2, [r2, #1]
   c1776:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c177a:	2e09      	cmp	r6, #9
   c177c:	d937      	bls.n	c17ee <_strtod_l+0x346>
   c177e:	9e06      	ldr	r6, [sp, #24]
   c1780:	1b89      	subs	r1, r1, r6
   c1782:	2908      	cmp	r1, #8
   c1784:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1788:	dc02      	bgt.n	c1790 <_strtod_l+0x2e8>
   c178a:	4576      	cmp	r6, lr
   c178c:	bfa8      	it	ge
   c178e:	4676      	movge	r6, lr
   c1790:	f1bc 0f00 	cmp.w	ip, #0
   c1794:	d000      	beq.n	c1798 <_strtod_l+0x2f0>
   c1796:	4276      	negs	r6, r6
   c1798:	2d00      	cmp	r5, #0
   c179a:	d14d      	bne.n	c1838 <_strtod_l+0x390>
   c179c:	9904      	ldr	r1, [sp, #16]
   c179e:	4301      	orrs	r1, r0
   c17a0:	f47f aec6 	bne.w	c1530 <_strtod_l+0x88>
   c17a4:	2b00      	cmp	r3, #0
   c17a6:	f47f aee1 	bne.w	c156c <_strtod_l+0xc4>
   c17aa:	2a69      	cmp	r2, #105	; 0x69
   c17ac:	d027      	beq.n	c17fe <_strtod_l+0x356>
   c17ae:	dc24      	bgt.n	c17fa <_strtod_l+0x352>
   c17b0:	2a49      	cmp	r2, #73	; 0x49
   c17b2:	d024      	beq.n	c17fe <_strtod_l+0x356>
   c17b4:	2a4e      	cmp	r2, #78	; 0x4e
   c17b6:	f47f aed9 	bne.w	c156c <_strtod_l+0xc4>
   c17ba:	499f      	ldr	r1, [pc, #636]	; (c1a38 <_strtod_l+0x590>)
   c17bc:	a817      	add	r0, sp, #92	; 0x5c
   c17be:	f001 f93d 	bl	c2a3c <__match>
   c17c2:	2800      	cmp	r0, #0
   c17c4:	f43f aed2 	beq.w	c156c <_strtod_l+0xc4>
   c17c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c17ca:	781b      	ldrb	r3, [r3, #0]
   c17cc:	2b28      	cmp	r3, #40	; 0x28
   c17ce:	d12d      	bne.n	c182c <_strtod_l+0x384>
   c17d0:	499a      	ldr	r1, [pc, #616]	; (c1a3c <_strtod_l+0x594>)
   c17d2:	aa1a      	add	r2, sp, #104	; 0x68
   c17d4:	a817      	add	r0, sp, #92	; 0x5c
   c17d6:	f001 f945 	bl	c2a64 <__hexnan>
   c17da:	2805      	cmp	r0, #5
   c17dc:	d126      	bne.n	c182c <_strtod_l+0x384>
   c17de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c17e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c17e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c17e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c17ec:	e6a0      	b.n	c1530 <_strtod_l+0x88>
   c17ee:	210a      	movs	r1, #10
   c17f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c17f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c17f8:	e7b9      	b.n	c176e <_strtod_l+0x2c6>
   c17fa:	2a6e      	cmp	r2, #110	; 0x6e
   c17fc:	e7db      	b.n	c17b6 <_strtod_l+0x30e>
   c17fe:	4990      	ldr	r1, [pc, #576]	; (c1a40 <_strtod_l+0x598>)
   c1800:	a817      	add	r0, sp, #92	; 0x5c
   c1802:	f001 f91b 	bl	c2a3c <__match>
   c1806:	2800      	cmp	r0, #0
   c1808:	f43f aeb0 	beq.w	c156c <_strtod_l+0xc4>
   c180c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c180e:	498d      	ldr	r1, [pc, #564]	; (c1a44 <_strtod_l+0x59c>)
   c1810:	3b01      	subs	r3, #1
   c1812:	a817      	add	r0, sp, #92	; 0x5c
   c1814:	9317      	str	r3, [sp, #92]	; 0x5c
   c1816:	f001 f911 	bl	c2a3c <__match>
   c181a:	b910      	cbnz	r0, c1822 <_strtod_l+0x37a>
   c181c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c181e:	3301      	adds	r3, #1
   c1820:	9317      	str	r3, [sp, #92]	; 0x5c
   c1822:	f8df b230 	ldr.w	fp, [pc, #560]	; c1a54 <_strtod_l+0x5ac>
   c1826:	f04f 0a00 	mov.w	sl, #0
   c182a:	e681      	b.n	c1530 <_strtod_l+0x88>
   c182c:	4886      	ldr	r0, [pc, #536]	; (c1a48 <_strtod_l+0x5a0>)
   c182e:	f7fe ff6b 	bl	c0708 <nan>
   c1832:	ec5b ab10 	vmov	sl, fp, d0
   c1836:	e67b      	b.n	c1530 <_strtod_l+0x88>
   c1838:	9b05      	ldr	r3, [sp, #20]
   c183a:	9807      	ldr	r0, [sp, #28]
   c183c:	1af3      	subs	r3, r6, r3
   c183e:	2f00      	cmp	r7, #0
   c1840:	bf08      	it	eq
   c1842:	462f      	moveq	r7, r5
   c1844:	2d10      	cmp	r5, #16
   c1846:	9306      	str	r3, [sp, #24]
   c1848:	46a8      	mov	r8, r5
   c184a:	bfa8      	it	ge
   c184c:	f04f 0810 	movge.w	r8, #16
   c1850:	f7ff f8a4 	bl	c099c <__aeabi_ui2d>
   c1854:	2d09      	cmp	r5, #9
   c1856:	4682      	mov	sl, r0
   c1858:	468b      	mov	fp, r1
   c185a:	dd13      	ble.n	c1884 <_strtod_l+0x3dc>
   c185c:	4b7b      	ldr	r3, [pc, #492]	; (c1a4c <_strtod_l+0x5a4>)
   c185e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c1862:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c1866:	f7ff f913 	bl	c0a90 <__aeabi_dmul>
   c186a:	4682      	mov	sl, r0
   c186c:	4648      	mov	r0, r9
   c186e:	468b      	mov	fp, r1
   c1870:	f7ff f894 	bl	c099c <__aeabi_ui2d>
   c1874:	4602      	mov	r2, r0
   c1876:	460b      	mov	r3, r1
   c1878:	4650      	mov	r0, sl
   c187a:	4659      	mov	r1, fp
   c187c:	f7fe ff52 	bl	c0724 <__adddf3>
   c1880:	4682      	mov	sl, r0
   c1882:	468b      	mov	fp, r1
   c1884:	2d0f      	cmp	r5, #15
   c1886:	dc38      	bgt.n	c18fa <_strtod_l+0x452>
   c1888:	9b06      	ldr	r3, [sp, #24]
   c188a:	2b00      	cmp	r3, #0
   c188c:	f43f ae50 	beq.w	c1530 <_strtod_l+0x88>
   c1890:	dd24      	ble.n	c18dc <_strtod_l+0x434>
   c1892:	2b16      	cmp	r3, #22
   c1894:	dc0b      	bgt.n	c18ae <_strtod_l+0x406>
   c1896:	496d      	ldr	r1, [pc, #436]	; (c1a4c <_strtod_l+0x5a4>)
   c1898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c189c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c18a0:	4652      	mov	r2, sl
   c18a2:	465b      	mov	r3, fp
   c18a4:	f7ff f8f4 	bl	c0a90 <__aeabi_dmul>
   c18a8:	4682      	mov	sl, r0
   c18aa:	468b      	mov	fp, r1
   c18ac:	e640      	b.n	c1530 <_strtod_l+0x88>
   c18ae:	9a06      	ldr	r2, [sp, #24]
   c18b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c18b4:	4293      	cmp	r3, r2
   c18b6:	db20      	blt.n	c18fa <_strtod_l+0x452>
   c18b8:	4c64      	ldr	r4, [pc, #400]	; (c1a4c <_strtod_l+0x5a4>)
   c18ba:	f1c5 050f 	rsb	r5, r5, #15
   c18be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c18c2:	4652      	mov	r2, sl
   c18c4:	465b      	mov	r3, fp
   c18c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c18ca:	f7ff f8e1 	bl	c0a90 <__aeabi_dmul>
   c18ce:	9b06      	ldr	r3, [sp, #24]
   c18d0:	1b5d      	subs	r5, r3, r5
   c18d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c18d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c18da:	e7e3      	b.n	c18a4 <_strtod_l+0x3fc>
   c18dc:	9b06      	ldr	r3, [sp, #24]
   c18de:	3316      	adds	r3, #22
   c18e0:	db0b      	blt.n	c18fa <_strtod_l+0x452>
   c18e2:	9b05      	ldr	r3, [sp, #20]
   c18e4:	1b9e      	subs	r6, r3, r6
   c18e6:	4b59      	ldr	r3, [pc, #356]	; (c1a4c <_strtod_l+0x5a4>)
   c18e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c18ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   c18f0:	4650      	mov	r0, sl
   c18f2:	4659      	mov	r1, fp
   c18f4:	f7ff f9f6 	bl	c0ce4 <__aeabi_ddiv>
   c18f8:	e7d6      	b.n	c18a8 <_strtod_l+0x400>
   c18fa:	9b06      	ldr	r3, [sp, #24]
   c18fc:	eba5 0808 	sub.w	r8, r5, r8
   c1900:	4498      	add	r8, r3
   c1902:	f1b8 0f00 	cmp.w	r8, #0
   c1906:	dd74      	ble.n	c19f2 <_strtod_l+0x54a>
   c1908:	f018 030f 	ands.w	r3, r8, #15
   c190c:	d00a      	beq.n	c1924 <_strtod_l+0x47c>
   c190e:	494f      	ldr	r1, [pc, #316]	; (c1a4c <_strtod_l+0x5a4>)
   c1910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c1914:	4652      	mov	r2, sl
   c1916:	465b      	mov	r3, fp
   c1918:	e9d1 0100 	ldrd	r0, r1, [r1]
   c191c:	f7ff f8b8 	bl	c0a90 <__aeabi_dmul>
   c1920:	4682      	mov	sl, r0
   c1922:	468b      	mov	fp, r1
   c1924:	f038 080f 	bics.w	r8, r8, #15
   c1928:	d04f      	beq.n	c19ca <_strtod_l+0x522>
   c192a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c192e:	dd22      	ble.n	c1976 <_strtod_l+0x4ce>
   c1930:	2500      	movs	r5, #0
   c1932:	462e      	mov	r6, r5
   c1934:	9507      	str	r5, [sp, #28]
   c1936:	9505      	str	r5, [sp, #20]
   c1938:	2322      	movs	r3, #34	; 0x22
   c193a:	f8df b118 	ldr.w	fp, [pc, #280]	; c1a54 <_strtod_l+0x5ac>
   c193e:	6023      	str	r3, [r4, #0]
   c1940:	f04f 0a00 	mov.w	sl, #0
   c1944:	9b07      	ldr	r3, [sp, #28]
   c1946:	2b00      	cmp	r3, #0
   c1948:	f43f adf2 	beq.w	c1530 <_strtod_l+0x88>
   c194c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c194e:	4620      	mov	r0, r4
   c1950:	f001 f98c 	bl	c2c6c <_Bfree>
   c1954:	9905      	ldr	r1, [sp, #20]
   c1956:	4620      	mov	r0, r4
   c1958:	f001 f988 	bl	c2c6c <_Bfree>
   c195c:	4631      	mov	r1, r6
   c195e:	4620      	mov	r0, r4
   c1960:	f001 f984 	bl	c2c6c <_Bfree>
   c1964:	9907      	ldr	r1, [sp, #28]
   c1966:	4620      	mov	r0, r4
   c1968:	f001 f980 	bl	c2c6c <_Bfree>
   c196c:	4629      	mov	r1, r5
   c196e:	4620      	mov	r0, r4
   c1970:	f001 f97c 	bl	c2c6c <_Bfree>
   c1974:	e5dc      	b.n	c1530 <_strtod_l+0x88>
   c1976:	4b36      	ldr	r3, [pc, #216]	; (c1a50 <_strtod_l+0x5a8>)
   c1978:	9304      	str	r3, [sp, #16]
   c197a:	2300      	movs	r3, #0
   c197c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1980:	4650      	mov	r0, sl
   c1982:	4659      	mov	r1, fp
   c1984:	4699      	mov	r9, r3
   c1986:	f1b8 0f01 	cmp.w	r8, #1
   c198a:	dc21      	bgt.n	c19d0 <_strtod_l+0x528>
   c198c:	b10b      	cbz	r3, c1992 <_strtod_l+0x4ea>
   c198e:	4682      	mov	sl, r0
   c1990:	468b      	mov	fp, r1
   c1992:	4b2f      	ldr	r3, [pc, #188]	; (c1a50 <_strtod_l+0x5a8>)
   c1994:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c1998:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c199c:	4652      	mov	r2, sl
   c199e:	465b      	mov	r3, fp
   c19a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   c19a4:	f7ff f874 	bl	c0a90 <__aeabi_dmul>
   c19a8:	4b2a      	ldr	r3, [pc, #168]	; (c1a54 <_strtod_l+0x5ac>)
   c19aa:	460a      	mov	r2, r1
   c19ac:	400b      	ands	r3, r1
   c19ae:	492a      	ldr	r1, [pc, #168]	; (c1a58 <_strtod_l+0x5b0>)
   c19b0:	428b      	cmp	r3, r1
   c19b2:	4682      	mov	sl, r0
   c19b4:	d8bc      	bhi.n	c1930 <_strtod_l+0x488>
   c19b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c19ba:	428b      	cmp	r3, r1
   c19bc:	bf86      	itte	hi
   c19be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c1a5c <_strtod_l+0x5b4>
   c19c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c19c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c19ca:	2300      	movs	r3, #0
   c19cc:	9304      	str	r3, [sp, #16]
   c19ce:	e084      	b.n	c1ada <_strtod_l+0x632>
   c19d0:	f018 0f01 	tst.w	r8, #1
   c19d4:	d005      	beq.n	c19e2 <_strtod_l+0x53a>
   c19d6:	9b04      	ldr	r3, [sp, #16]
   c19d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c19dc:	f7ff f858 	bl	c0a90 <__aeabi_dmul>
   c19e0:	2301      	movs	r3, #1
   c19e2:	9a04      	ldr	r2, [sp, #16]
   c19e4:	3208      	adds	r2, #8
   c19e6:	f109 0901 	add.w	r9, r9, #1
   c19ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   c19ee:	9204      	str	r2, [sp, #16]
   c19f0:	e7c9      	b.n	c1986 <_strtod_l+0x4de>
   c19f2:	d0ea      	beq.n	c19ca <_strtod_l+0x522>
   c19f4:	f1c8 0800 	rsb	r8, r8, #0
   c19f8:	f018 020f 	ands.w	r2, r8, #15
   c19fc:	d00a      	beq.n	c1a14 <_strtod_l+0x56c>
   c19fe:	4b13      	ldr	r3, [pc, #76]	; (c1a4c <_strtod_l+0x5a4>)
   c1a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c1a04:	4650      	mov	r0, sl
   c1a06:	4659      	mov	r1, fp
   c1a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1a0c:	f7ff f96a 	bl	c0ce4 <__aeabi_ddiv>
   c1a10:	4682      	mov	sl, r0
   c1a12:	468b      	mov	fp, r1
   c1a14:	ea5f 1828 	movs.w	r8, r8, asr #4
   c1a18:	d0d7      	beq.n	c19ca <_strtod_l+0x522>
   c1a1a:	f1b8 0f1f 	cmp.w	r8, #31
   c1a1e:	dd1f      	ble.n	c1a60 <_strtod_l+0x5b8>
   c1a20:	2500      	movs	r5, #0
   c1a22:	462e      	mov	r6, r5
   c1a24:	9507      	str	r5, [sp, #28]
   c1a26:	9505      	str	r5, [sp, #20]
   c1a28:	2322      	movs	r3, #34	; 0x22
   c1a2a:	f04f 0a00 	mov.w	sl, #0
   c1a2e:	f04f 0b00 	mov.w	fp, #0
   c1a32:	6023      	str	r3, [r4, #0]
   c1a34:	e786      	b.n	c1944 <_strtod_l+0x49c>
   c1a36:	bf00      	nop
   c1a38:	000c55bd 	.word	0x000c55bd
   c1a3c:	000c57bc 	.word	0x000c57bc
   c1a40:	000c55c1 	.word	0x000c55c1
   c1a44:	000c579f 	.word	0x000c579f
   c1a48:	000c54f8 	.word	0x000c54f8
   c1a4c:	000c5a08 	.word	0x000c5a08
   c1a50:	000c59e0 	.word	0x000c59e0
   c1a54:	7ff00000 	.word	0x7ff00000
   c1a58:	7ca00000 	.word	0x7ca00000
   c1a5c:	7fefffff 	.word	0x7fefffff
   c1a60:	f018 0310 	ands.w	r3, r8, #16
   c1a64:	bf18      	it	ne
   c1a66:	236a      	movne	r3, #106	; 0x6a
   c1a68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c1e18 <_strtod_l+0x970>
   c1a6c:	9304      	str	r3, [sp, #16]
   c1a6e:	4650      	mov	r0, sl
   c1a70:	4659      	mov	r1, fp
   c1a72:	2300      	movs	r3, #0
   c1a74:	f018 0f01 	tst.w	r8, #1
   c1a78:	d004      	beq.n	c1a84 <_strtod_l+0x5dc>
   c1a7a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c1a7e:	f7ff f807 	bl	c0a90 <__aeabi_dmul>
   c1a82:	2301      	movs	r3, #1
   c1a84:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1a88:	f109 0908 	add.w	r9, r9, #8
   c1a8c:	d1f2      	bne.n	c1a74 <_strtod_l+0x5cc>
   c1a8e:	b10b      	cbz	r3, c1a94 <_strtod_l+0x5ec>
   c1a90:	4682      	mov	sl, r0
   c1a92:	468b      	mov	fp, r1
   c1a94:	9b04      	ldr	r3, [sp, #16]
   c1a96:	b1c3      	cbz	r3, c1aca <_strtod_l+0x622>
   c1a98:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c1a9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1aa0:	2b00      	cmp	r3, #0
   c1aa2:	4659      	mov	r1, fp
   c1aa4:	dd11      	ble.n	c1aca <_strtod_l+0x622>
   c1aa6:	2b1f      	cmp	r3, #31
   c1aa8:	f340 8124 	ble.w	c1cf4 <_strtod_l+0x84c>
   c1aac:	2b34      	cmp	r3, #52	; 0x34
   c1aae:	bfde      	ittt	le
   c1ab0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1ab4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c1ab8:	fa03 f202 	lslle.w	r2, r3, r2
   c1abc:	f04f 0a00 	mov.w	sl, #0
   c1ac0:	bfcc      	ite	gt
   c1ac2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1ac6:	ea02 0b01 	andle.w	fp, r2, r1
   c1aca:	2200      	movs	r2, #0
   c1acc:	2300      	movs	r3, #0
   c1ace:	4650      	mov	r0, sl
   c1ad0:	4659      	mov	r1, fp
   c1ad2:	f7ff fa45 	bl	c0f60 <__aeabi_dcmpeq>
   c1ad6:	2800      	cmp	r0, #0
   c1ad8:	d1a2      	bne.n	c1a20 <_strtod_l+0x578>
   c1ada:	9b07      	ldr	r3, [sp, #28]
   c1adc:	9300      	str	r3, [sp, #0]
   c1ade:	9908      	ldr	r1, [sp, #32]
   c1ae0:	462b      	mov	r3, r5
   c1ae2:	463a      	mov	r2, r7
   c1ae4:	4620      	mov	r0, r4
   c1ae6:	f001 f929 	bl	c2d3c <__s2b>
   c1aea:	9007      	str	r0, [sp, #28]
   c1aec:	2800      	cmp	r0, #0
   c1aee:	f43f af1f 	beq.w	c1930 <_strtod_l+0x488>
   c1af2:	9b05      	ldr	r3, [sp, #20]
   c1af4:	1b9e      	subs	r6, r3, r6
   c1af6:	9b06      	ldr	r3, [sp, #24]
   c1af8:	2b00      	cmp	r3, #0
   c1afa:	bfb4      	ite	lt
   c1afc:	4633      	movlt	r3, r6
   c1afe:	2300      	movge	r3, #0
   c1b00:	930c      	str	r3, [sp, #48]	; 0x30
   c1b02:	9b06      	ldr	r3, [sp, #24]
   c1b04:	2500      	movs	r5, #0
   c1b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c1b0a:	9312      	str	r3, [sp, #72]	; 0x48
   c1b0c:	462e      	mov	r6, r5
   c1b0e:	9b07      	ldr	r3, [sp, #28]
   c1b10:	4620      	mov	r0, r4
   c1b12:	6859      	ldr	r1, [r3, #4]
   c1b14:	f001 f86a 	bl	c2bec <_Balloc>
   c1b18:	9005      	str	r0, [sp, #20]
   c1b1a:	2800      	cmp	r0, #0
   c1b1c:	f43f af0c 	beq.w	c1938 <_strtod_l+0x490>
   c1b20:	9b07      	ldr	r3, [sp, #28]
   c1b22:	691a      	ldr	r2, [r3, #16]
   c1b24:	3202      	adds	r2, #2
   c1b26:	f103 010c 	add.w	r1, r3, #12
   c1b2a:	0092      	lsls	r2, r2, #2
   c1b2c:	300c      	adds	r0, #12
   c1b2e:	f7ff fb67 	bl	c1200 <memcpy>
   c1b32:	ec4b ab10 	vmov	d0, sl, fp
   c1b36:	aa1a      	add	r2, sp, #104	; 0x68
   c1b38:	a919      	add	r1, sp, #100	; 0x64
   c1b3a:	4620      	mov	r0, r4
   c1b3c:	f001 fc44 	bl	c33c8 <__d2b>
   c1b40:	ec4b ab18 	vmov	d8, sl, fp
   c1b44:	9018      	str	r0, [sp, #96]	; 0x60
   c1b46:	2800      	cmp	r0, #0
   c1b48:	f43f aef6 	beq.w	c1938 <_strtod_l+0x490>
   c1b4c:	2101      	movs	r1, #1
   c1b4e:	4620      	mov	r0, r4
   c1b50:	f001 f98e 	bl	c2e70 <__i2b>
   c1b54:	4606      	mov	r6, r0
   c1b56:	2800      	cmp	r0, #0
   c1b58:	f43f aeee 	beq.w	c1938 <_strtod_l+0x490>
   c1b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c1b5e:	9904      	ldr	r1, [sp, #16]
   c1b60:	2b00      	cmp	r3, #0
   c1b62:	bfab      	itete	ge
   c1b64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c1b66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c1b68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c1b6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c1b6e:	bfac      	ite	ge
   c1b70:	eb03 0902 	addge.w	r9, r3, r2
   c1b74:	1ad7      	sublt	r7, r2, r3
   c1b76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1b78:	eba3 0801 	sub.w	r8, r3, r1
   c1b7c:	4490      	add	r8, r2
   c1b7e:	4ba1      	ldr	r3, [pc, #644]	; (c1e04 <_strtod_l+0x95c>)
   c1b80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1b84:	4598      	cmp	r8, r3
   c1b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c1b8a:	f280 80c7 	bge.w	c1d1c <_strtod_l+0x874>
   c1b8e:	eba3 0308 	sub.w	r3, r3, r8
   c1b92:	2b1f      	cmp	r3, #31
   c1b94:	eba2 0203 	sub.w	r2, r2, r3
   c1b98:	f04f 0101 	mov.w	r1, #1
   c1b9c:	f300 80b1 	bgt.w	c1d02 <_strtod_l+0x85a>
   c1ba0:	fa01 f303 	lsl.w	r3, r1, r3
   c1ba4:	930d      	str	r3, [sp, #52]	; 0x34
   c1ba6:	2300      	movs	r3, #0
   c1ba8:	9308      	str	r3, [sp, #32]
   c1baa:	eb09 0802 	add.w	r8, r9, r2
   c1bae:	9b04      	ldr	r3, [sp, #16]
   c1bb0:	45c1      	cmp	r9, r8
   c1bb2:	4417      	add	r7, r2
   c1bb4:	441f      	add	r7, r3
   c1bb6:	464b      	mov	r3, r9
   c1bb8:	bfa8      	it	ge
   c1bba:	4643      	movge	r3, r8
   c1bbc:	42bb      	cmp	r3, r7
   c1bbe:	bfa8      	it	ge
   c1bc0:	463b      	movge	r3, r7
   c1bc2:	2b00      	cmp	r3, #0
   c1bc4:	bfc2      	ittt	gt
   c1bc6:	eba8 0803 	subgt.w	r8, r8, r3
   c1bca:	1aff      	subgt	r7, r7, r3
   c1bcc:	eba9 0903 	subgt.w	r9, r9, r3
   c1bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c1bd2:	2b00      	cmp	r3, #0
   c1bd4:	dd17      	ble.n	c1c06 <_strtod_l+0x75e>
   c1bd6:	4631      	mov	r1, r6
   c1bd8:	461a      	mov	r2, r3
   c1bda:	4620      	mov	r0, r4
   c1bdc:	f001 fa08 	bl	c2ff0 <__pow5mult>
   c1be0:	4606      	mov	r6, r0
   c1be2:	2800      	cmp	r0, #0
   c1be4:	f43f aea8 	beq.w	c1938 <_strtod_l+0x490>
   c1be8:	4601      	mov	r1, r0
   c1bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1bec:	4620      	mov	r0, r4
   c1bee:	f001 f955 	bl	c2e9c <__multiply>
   c1bf2:	900b      	str	r0, [sp, #44]	; 0x2c
   c1bf4:	2800      	cmp	r0, #0
   c1bf6:	f43f ae9f 	beq.w	c1938 <_strtod_l+0x490>
   c1bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1bfc:	4620      	mov	r0, r4
   c1bfe:	f001 f835 	bl	c2c6c <_Bfree>
   c1c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c04:	9318      	str	r3, [sp, #96]	; 0x60
   c1c06:	f1b8 0f00 	cmp.w	r8, #0
   c1c0a:	f300 808c 	bgt.w	c1d26 <_strtod_l+0x87e>
   c1c0e:	9b06      	ldr	r3, [sp, #24]
   c1c10:	2b00      	cmp	r3, #0
   c1c12:	dd08      	ble.n	c1c26 <_strtod_l+0x77e>
   c1c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c1c16:	9905      	ldr	r1, [sp, #20]
   c1c18:	4620      	mov	r0, r4
   c1c1a:	f001 f9e9 	bl	c2ff0 <__pow5mult>
   c1c1e:	9005      	str	r0, [sp, #20]
   c1c20:	2800      	cmp	r0, #0
   c1c22:	f43f ae89 	beq.w	c1938 <_strtod_l+0x490>
   c1c26:	2f00      	cmp	r7, #0
   c1c28:	dd08      	ble.n	c1c3c <_strtod_l+0x794>
   c1c2a:	9905      	ldr	r1, [sp, #20]
   c1c2c:	463a      	mov	r2, r7
   c1c2e:	4620      	mov	r0, r4
   c1c30:	f001 fa38 	bl	c30a4 <__lshift>
   c1c34:	9005      	str	r0, [sp, #20]
   c1c36:	2800      	cmp	r0, #0
   c1c38:	f43f ae7e 	beq.w	c1938 <_strtod_l+0x490>
   c1c3c:	f1b9 0f00 	cmp.w	r9, #0
   c1c40:	dd08      	ble.n	c1c54 <_strtod_l+0x7ac>
   c1c42:	4631      	mov	r1, r6
   c1c44:	464a      	mov	r2, r9
   c1c46:	4620      	mov	r0, r4
   c1c48:	f001 fa2c 	bl	c30a4 <__lshift>
   c1c4c:	4606      	mov	r6, r0
   c1c4e:	2800      	cmp	r0, #0
   c1c50:	f43f ae72 	beq.w	c1938 <_strtod_l+0x490>
   c1c54:	9a05      	ldr	r2, [sp, #20]
   c1c56:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1c58:	4620      	mov	r0, r4
   c1c5a:	f001 faaf 	bl	c31bc <__mdiff>
   c1c5e:	4605      	mov	r5, r0
   c1c60:	2800      	cmp	r0, #0
   c1c62:	f43f ae69 	beq.w	c1938 <_strtod_l+0x490>
   c1c66:	68c3      	ldr	r3, [r0, #12]
   c1c68:	930b      	str	r3, [sp, #44]	; 0x2c
   c1c6a:	2300      	movs	r3, #0
   c1c6c:	60c3      	str	r3, [r0, #12]
   c1c6e:	4631      	mov	r1, r6
   c1c70:	f001 fa88 	bl	c3184 <__mcmp>
   c1c74:	2800      	cmp	r0, #0
   c1c76:	da60      	bge.n	c1d3a <_strtod_l+0x892>
   c1c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c7a:	ea53 030a 	orrs.w	r3, r3, sl
   c1c7e:	f040 8082 	bne.w	c1d86 <_strtod_l+0x8de>
   c1c82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1c86:	2b00      	cmp	r3, #0
   c1c88:	d17d      	bne.n	c1d86 <_strtod_l+0x8de>
   c1c8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1c8e:	0d1b      	lsrs	r3, r3, #20
   c1c90:	051b      	lsls	r3, r3, #20
   c1c92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1c96:	d976      	bls.n	c1d86 <_strtod_l+0x8de>
   c1c98:	696b      	ldr	r3, [r5, #20]
   c1c9a:	b913      	cbnz	r3, c1ca2 <_strtod_l+0x7fa>
   c1c9c:	692b      	ldr	r3, [r5, #16]
   c1c9e:	2b01      	cmp	r3, #1
   c1ca0:	dd71      	ble.n	c1d86 <_strtod_l+0x8de>
   c1ca2:	4629      	mov	r1, r5
   c1ca4:	2201      	movs	r2, #1
   c1ca6:	4620      	mov	r0, r4
   c1ca8:	f001 f9fc 	bl	c30a4 <__lshift>
   c1cac:	4631      	mov	r1, r6
   c1cae:	4605      	mov	r5, r0
   c1cb0:	f001 fa68 	bl	c3184 <__mcmp>
   c1cb4:	2800      	cmp	r0, #0
   c1cb6:	dd66      	ble.n	c1d86 <_strtod_l+0x8de>
   c1cb8:	9904      	ldr	r1, [sp, #16]
   c1cba:	4a53      	ldr	r2, [pc, #332]	; (c1e08 <_strtod_l+0x960>)
   c1cbc:	465b      	mov	r3, fp
   c1cbe:	2900      	cmp	r1, #0
   c1cc0:	f000 8081 	beq.w	c1dc6 <_strtod_l+0x91e>
   c1cc4:	ea02 010b 	and.w	r1, r2, fp
   c1cc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c1ccc:	dc7b      	bgt.n	c1dc6 <_strtod_l+0x91e>
   c1cce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1cd2:	f77f aea9 	ble.w	c1a28 <_strtod_l+0x580>
   c1cd6:	4b4d      	ldr	r3, [pc, #308]	; (c1e0c <_strtod_l+0x964>)
   c1cd8:	4650      	mov	r0, sl
   c1cda:	4659      	mov	r1, fp
   c1cdc:	2200      	movs	r2, #0
   c1cde:	f7fe fed7 	bl	c0a90 <__aeabi_dmul>
   c1ce2:	460b      	mov	r3, r1
   c1ce4:	4303      	orrs	r3, r0
   c1ce6:	bf08      	it	eq
   c1ce8:	2322      	moveq	r3, #34	; 0x22
   c1cea:	4682      	mov	sl, r0
   c1cec:	468b      	mov	fp, r1
   c1cee:	bf08      	it	eq
   c1cf0:	6023      	streq	r3, [r4, #0]
   c1cf2:	e62b      	b.n	c194c <_strtod_l+0x4a4>
   c1cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1cf8:	fa02 f303 	lsl.w	r3, r2, r3
   c1cfc:	ea03 0a0a 	and.w	sl, r3, sl
   c1d00:	e6e3      	b.n	c1aca <_strtod_l+0x622>
   c1d02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1d06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c1d0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c1d0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c1d12:	fa01 f308 	lsl.w	r3, r1, r8
   c1d16:	9308      	str	r3, [sp, #32]
   c1d18:	910d      	str	r1, [sp, #52]	; 0x34
   c1d1a:	e746      	b.n	c1baa <_strtod_l+0x702>
   c1d1c:	2300      	movs	r3, #0
   c1d1e:	9308      	str	r3, [sp, #32]
   c1d20:	2301      	movs	r3, #1
   c1d22:	930d      	str	r3, [sp, #52]	; 0x34
   c1d24:	e741      	b.n	c1baa <_strtod_l+0x702>
   c1d26:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1d28:	4642      	mov	r2, r8
   c1d2a:	4620      	mov	r0, r4
   c1d2c:	f001 f9ba 	bl	c30a4 <__lshift>
   c1d30:	9018      	str	r0, [sp, #96]	; 0x60
   c1d32:	2800      	cmp	r0, #0
   c1d34:	f47f af6b 	bne.w	c1c0e <_strtod_l+0x766>
   c1d38:	e5fe      	b.n	c1938 <_strtod_l+0x490>
   c1d3a:	465f      	mov	r7, fp
   c1d3c:	d16e      	bne.n	c1e1c <_strtod_l+0x974>
   c1d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1d44:	b342      	cbz	r2, c1d98 <_strtod_l+0x8f0>
   c1d46:	4a32      	ldr	r2, [pc, #200]	; (c1e10 <_strtod_l+0x968>)
   c1d48:	4293      	cmp	r3, r2
   c1d4a:	d128      	bne.n	c1d9e <_strtod_l+0x8f6>
   c1d4c:	9b04      	ldr	r3, [sp, #16]
   c1d4e:	4651      	mov	r1, sl
   c1d50:	b1eb      	cbz	r3, c1d8e <_strtod_l+0x8e6>
   c1d52:	4b2d      	ldr	r3, [pc, #180]	; (c1e08 <_strtod_l+0x960>)
   c1d54:	403b      	ands	r3, r7
   c1d56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1d5e:	d819      	bhi.n	c1d94 <_strtod_l+0x8ec>
   c1d60:	0d1b      	lsrs	r3, r3, #20
   c1d62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c1d66:	fa02 f303 	lsl.w	r3, r2, r3
   c1d6a:	4299      	cmp	r1, r3
   c1d6c:	d117      	bne.n	c1d9e <_strtod_l+0x8f6>
   c1d6e:	4b29      	ldr	r3, [pc, #164]	; (c1e14 <_strtod_l+0x96c>)
   c1d70:	429f      	cmp	r7, r3
   c1d72:	d102      	bne.n	c1d7a <_strtod_l+0x8d2>
   c1d74:	3101      	adds	r1, #1
   c1d76:	f43f addf 	beq.w	c1938 <_strtod_l+0x490>
   c1d7a:	4b23      	ldr	r3, [pc, #140]	; (c1e08 <_strtod_l+0x960>)
   c1d7c:	403b      	ands	r3, r7
   c1d7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c1d82:	f04f 0a00 	mov.w	sl, #0
   c1d86:	9b04      	ldr	r3, [sp, #16]
   c1d88:	2b00      	cmp	r3, #0
   c1d8a:	d1a4      	bne.n	c1cd6 <_strtod_l+0x82e>
   c1d8c:	e5de      	b.n	c194c <_strtod_l+0x4a4>
   c1d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c1d92:	e7ea      	b.n	c1d6a <_strtod_l+0x8c2>
   c1d94:	4613      	mov	r3, r2
   c1d96:	e7e8      	b.n	c1d6a <_strtod_l+0x8c2>
   c1d98:	ea53 030a 	orrs.w	r3, r3, sl
   c1d9c:	d08c      	beq.n	c1cb8 <_strtod_l+0x810>
   c1d9e:	9b08      	ldr	r3, [sp, #32]
   c1da0:	b1db      	cbz	r3, c1dda <_strtod_l+0x932>
   c1da2:	423b      	tst	r3, r7
   c1da4:	d0ef      	beq.n	c1d86 <_strtod_l+0x8de>
   c1da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1da8:	9a04      	ldr	r2, [sp, #16]
   c1daa:	4650      	mov	r0, sl
   c1dac:	4659      	mov	r1, fp
   c1dae:	b1c3      	cbz	r3, c1de2 <_strtod_l+0x93a>
   c1db0:	f7ff fb5c 	bl	c146c <sulp>
   c1db4:	4602      	mov	r2, r0
   c1db6:	460b      	mov	r3, r1
   c1db8:	ec51 0b18 	vmov	r0, r1, d8
   c1dbc:	f7fe fcb2 	bl	c0724 <__adddf3>
   c1dc0:	4682      	mov	sl, r0
   c1dc2:	468b      	mov	fp, r1
   c1dc4:	e7df      	b.n	c1d86 <_strtod_l+0x8de>
   c1dc6:	4013      	ands	r3, r2
   c1dc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c1dcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c1dd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c1dd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1dd8:	e7d5      	b.n	c1d86 <_strtod_l+0x8de>
   c1dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1ddc:	ea13 0f0a 	tst.w	r3, sl
   c1de0:	e7e0      	b.n	c1da4 <_strtod_l+0x8fc>
   c1de2:	f7ff fb43 	bl	c146c <sulp>
   c1de6:	4602      	mov	r2, r0
   c1de8:	460b      	mov	r3, r1
   c1dea:	ec51 0b18 	vmov	r0, r1, d8
   c1dee:	f7fe fc97 	bl	c0720 <__aeabi_dsub>
   c1df2:	2200      	movs	r2, #0
   c1df4:	2300      	movs	r3, #0
   c1df6:	4682      	mov	sl, r0
   c1df8:	468b      	mov	fp, r1
   c1dfa:	f7ff f8b1 	bl	c0f60 <__aeabi_dcmpeq>
   c1dfe:	2800      	cmp	r0, #0
   c1e00:	d0c1      	beq.n	c1d86 <_strtod_l+0x8de>
   c1e02:	e611      	b.n	c1a28 <_strtod_l+0x580>
   c1e04:	fffffc02 	.word	0xfffffc02
   c1e08:	7ff00000 	.word	0x7ff00000
   c1e0c:	39500000 	.word	0x39500000
   c1e10:	000fffff 	.word	0x000fffff
   c1e14:	7fefffff 	.word	0x7fefffff
   c1e18:	000c57d0 	.word	0x000c57d0
   c1e1c:	4631      	mov	r1, r6
   c1e1e:	4628      	mov	r0, r5
   c1e20:	f001 fb2e 	bl	c3480 <__ratio>
   c1e24:	ec59 8b10 	vmov	r8, r9, d0
   c1e28:	ee10 0a10 	vmov	r0, s0
   c1e2c:	2200      	movs	r2, #0
   c1e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c1e32:	4649      	mov	r1, r9
   c1e34:	f7ff f8a8 	bl	c0f88 <__aeabi_dcmple>
   c1e38:	2800      	cmp	r0, #0
   c1e3a:	d07a      	beq.n	c1f32 <_strtod_l+0xa8a>
   c1e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1e3e:	2b00      	cmp	r3, #0
   c1e40:	d04a      	beq.n	c1ed8 <_strtod_l+0xa30>
   c1e42:	4b95      	ldr	r3, [pc, #596]	; (c2098 <_strtod_l+0xbf0>)
   c1e44:	2200      	movs	r2, #0
   c1e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1e4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c2098 <_strtod_l+0xbf0>
   c1e4e:	f04f 0800 	mov.w	r8, #0
   c1e52:	4b92      	ldr	r3, [pc, #584]	; (c209c <_strtod_l+0xbf4>)
   c1e54:	403b      	ands	r3, r7
   c1e56:	930d      	str	r3, [sp, #52]	; 0x34
   c1e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1e5a:	4b91      	ldr	r3, [pc, #580]	; (c20a0 <_strtod_l+0xbf8>)
   c1e5c:	429a      	cmp	r2, r3
   c1e5e:	f040 80b0 	bne.w	c1fc2 <_strtod_l+0xb1a>
   c1e62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1e66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c1e6a:	ec4b ab10 	vmov	d0, sl, fp
   c1e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1e72:	f001 fa2d 	bl	c32d0 <__ulp>
   c1e76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1e7a:	ec53 2b10 	vmov	r2, r3, d0
   c1e7e:	f7fe fe07 	bl	c0a90 <__aeabi_dmul>
   c1e82:	4652      	mov	r2, sl
   c1e84:	465b      	mov	r3, fp
   c1e86:	f7fe fc4d 	bl	c0724 <__adddf3>
   c1e8a:	460b      	mov	r3, r1
   c1e8c:	4983      	ldr	r1, [pc, #524]	; (c209c <_strtod_l+0xbf4>)
   c1e8e:	4a85      	ldr	r2, [pc, #532]	; (c20a4 <_strtod_l+0xbfc>)
   c1e90:	4019      	ands	r1, r3
   c1e92:	4291      	cmp	r1, r2
   c1e94:	4682      	mov	sl, r0
   c1e96:	d960      	bls.n	c1f5a <_strtod_l+0xab2>
   c1e98:	ee18 3a90 	vmov	r3, s17
   c1e9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c1ea0:	4293      	cmp	r3, r2
   c1ea2:	d104      	bne.n	c1eae <_strtod_l+0xa06>
   c1ea4:	ee18 3a10 	vmov	r3, s16
   c1ea8:	3301      	adds	r3, #1
   c1eaa:	f43f ad45 	beq.w	c1938 <_strtod_l+0x490>
   c1eae:	f8df b200 	ldr.w	fp, [pc, #512]	; c20b0 <_strtod_l+0xc08>
   c1eb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1eb8:	4620      	mov	r0, r4
   c1eba:	f000 fed7 	bl	c2c6c <_Bfree>
   c1ebe:	9905      	ldr	r1, [sp, #20]
   c1ec0:	4620      	mov	r0, r4
   c1ec2:	f000 fed3 	bl	c2c6c <_Bfree>
   c1ec6:	4631      	mov	r1, r6
   c1ec8:	4620      	mov	r0, r4
   c1eca:	f000 fecf 	bl	c2c6c <_Bfree>
   c1ece:	4629      	mov	r1, r5
   c1ed0:	4620      	mov	r0, r4
   c1ed2:	f000 fecb 	bl	c2c6c <_Bfree>
   c1ed6:	e61a      	b.n	c1b0e <_strtod_l+0x666>
   c1ed8:	f1ba 0f00 	cmp.w	sl, #0
   c1edc:	d11b      	bne.n	c1f16 <_strtod_l+0xa6e>
   c1ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1ee2:	b9f3      	cbnz	r3, c1f22 <_strtod_l+0xa7a>
   c1ee4:	4b6c      	ldr	r3, [pc, #432]	; (c2098 <_strtod_l+0xbf0>)
   c1ee6:	2200      	movs	r2, #0
   c1ee8:	4640      	mov	r0, r8
   c1eea:	4649      	mov	r1, r9
   c1eec:	f7ff f842 	bl	c0f74 <__aeabi_dcmplt>
   c1ef0:	b9d0      	cbnz	r0, c1f28 <_strtod_l+0xa80>
   c1ef2:	4640      	mov	r0, r8
   c1ef4:	4649      	mov	r1, r9
   c1ef6:	4b6c      	ldr	r3, [pc, #432]	; (c20a8 <_strtod_l+0xc00>)
   c1ef8:	2200      	movs	r2, #0
   c1efa:	f7fe fdc9 	bl	c0a90 <__aeabi_dmul>
   c1efe:	4680      	mov	r8, r0
   c1f00:	4689      	mov	r9, r1
   c1f02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c1f06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c1f0a:	9315      	str	r3, [sp, #84]	; 0x54
   c1f0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c1f10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1f14:	e79d      	b.n	c1e52 <_strtod_l+0x9aa>
   c1f16:	f1ba 0f01 	cmp.w	sl, #1
   c1f1a:	d102      	bne.n	c1f22 <_strtod_l+0xa7a>
   c1f1c:	2f00      	cmp	r7, #0
   c1f1e:	f43f ad83 	beq.w	c1a28 <_strtod_l+0x580>
   c1f22:	4b62      	ldr	r3, [pc, #392]	; (c20ac <_strtod_l+0xc04>)
   c1f24:	2200      	movs	r2, #0
   c1f26:	e78e      	b.n	c1e46 <_strtod_l+0x99e>
   c1f28:	f8df 917c 	ldr.w	r9, [pc, #380]	; c20a8 <_strtod_l+0xc00>
   c1f2c:	f04f 0800 	mov.w	r8, #0
   c1f30:	e7e7      	b.n	c1f02 <_strtod_l+0xa5a>
   c1f32:	4b5d      	ldr	r3, [pc, #372]	; (c20a8 <_strtod_l+0xc00>)
   c1f34:	4640      	mov	r0, r8
   c1f36:	4649      	mov	r1, r9
   c1f38:	2200      	movs	r2, #0
   c1f3a:	f7fe fda9 	bl	c0a90 <__aeabi_dmul>
   c1f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1f40:	4680      	mov	r8, r0
   c1f42:	4689      	mov	r9, r1
   c1f44:	b933      	cbnz	r3, c1f54 <_strtod_l+0xaac>
   c1f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1f4a:	900e      	str	r0, [sp, #56]	; 0x38
   c1f4c:	930f      	str	r3, [sp, #60]	; 0x3c
   c1f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c1f52:	e7dd      	b.n	c1f10 <_strtod_l+0xa68>
   c1f54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c1f58:	e7f9      	b.n	c1f4e <_strtod_l+0xaa6>
   c1f5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c1f5e:	9b04      	ldr	r3, [sp, #16]
   c1f60:	2b00      	cmp	r3, #0
   c1f62:	d1a8      	bne.n	c1eb6 <_strtod_l+0xa0e>
   c1f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1f6a:	0d1b      	lsrs	r3, r3, #20
   c1f6c:	051b      	lsls	r3, r3, #20
   c1f6e:	429a      	cmp	r2, r3
   c1f70:	d1a1      	bne.n	c1eb6 <_strtod_l+0xa0e>
   c1f72:	4640      	mov	r0, r8
   c1f74:	4649      	mov	r1, r9
   c1f76:	f001 fb33 	bl	c35e0 <__aeabi_d2lz>
   c1f7a:	f7fe fd5b 	bl	c0a34 <__aeabi_l2d>
   c1f7e:	4602      	mov	r2, r0
   c1f80:	460b      	mov	r3, r1
   c1f82:	4640      	mov	r0, r8
   c1f84:	4649      	mov	r1, r9
   c1f86:	f7fe fbcb 	bl	c0720 <__aeabi_dsub>
   c1f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1f90:	ea43 030a 	orr.w	r3, r3, sl
   c1f94:	4313      	orrs	r3, r2
   c1f96:	4680      	mov	r8, r0
   c1f98:	4689      	mov	r9, r1
   c1f9a:	d055      	beq.n	c2048 <_strtod_l+0xba0>
   c1f9c:	a336      	add	r3, pc, #216	; (adr r3, c2078 <_strtod_l+0xbd0>)
   c1f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1fa2:	f7fe ffe7 	bl	c0f74 <__aeabi_dcmplt>
   c1fa6:	2800      	cmp	r0, #0
   c1fa8:	f47f acd0 	bne.w	c194c <_strtod_l+0x4a4>
   c1fac:	a334      	add	r3, pc, #208	; (adr r3, c2080 <_strtod_l+0xbd8>)
   c1fae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1fb2:	4640      	mov	r0, r8
   c1fb4:	4649      	mov	r1, r9
   c1fb6:	f7fe fffb 	bl	c0fb0 <__aeabi_dcmpgt>
   c1fba:	2800      	cmp	r0, #0
   c1fbc:	f43f af7b 	beq.w	c1eb6 <_strtod_l+0xa0e>
   c1fc0:	e4c4      	b.n	c194c <_strtod_l+0x4a4>
   c1fc2:	9b04      	ldr	r3, [sp, #16]
   c1fc4:	b333      	cbz	r3, c2014 <_strtod_l+0xb6c>
   c1fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1fc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1fcc:	d822      	bhi.n	c2014 <_strtod_l+0xb6c>
   c1fce:	a32e      	add	r3, pc, #184	; (adr r3, c2088 <_strtod_l+0xbe0>)
   c1fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1fd4:	4640      	mov	r0, r8
   c1fd6:	4649      	mov	r1, r9
   c1fd8:	f7fe ffd6 	bl	c0f88 <__aeabi_dcmple>
   c1fdc:	b1a0      	cbz	r0, c2008 <_strtod_l+0xb60>
   c1fde:	4649      	mov	r1, r9
   c1fe0:	4640      	mov	r0, r8
   c1fe2:	f7ff f82d 	bl	c1040 <__aeabi_d2uiz>
   c1fe6:	2801      	cmp	r0, #1
   c1fe8:	bf38      	it	cc
   c1fea:	2001      	movcc	r0, #1
   c1fec:	f7fe fcd6 	bl	c099c <__aeabi_ui2d>
   c1ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1ff2:	4680      	mov	r8, r0
   c1ff4:	4689      	mov	r9, r1
   c1ff6:	bb23      	cbnz	r3, c2042 <_strtod_l+0xb9a>
   c1ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1ffc:	9010      	str	r0, [sp, #64]	; 0x40
   c1ffe:	9311      	str	r3, [sp, #68]	; 0x44
   c2000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c2004:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2008:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c200a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c200c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c2010:	1a9b      	subs	r3, r3, r2
   c2012:	9309      	str	r3, [sp, #36]	; 0x24
   c2014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2018:	eeb0 0a48 	vmov.f32	s0, s16
   c201c:	eef0 0a68 	vmov.f32	s1, s17
   c2020:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2024:	f001 f954 	bl	c32d0 <__ulp>
   c2028:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c202c:	ec53 2b10 	vmov	r2, r3, d0
   c2030:	f7fe fd2e 	bl	c0a90 <__aeabi_dmul>
   c2034:	ec53 2b18 	vmov	r2, r3, d8
   c2038:	f7fe fb74 	bl	c0724 <__adddf3>
   c203c:	4682      	mov	sl, r0
   c203e:	468b      	mov	fp, r1
   c2040:	e78d      	b.n	c1f5e <_strtod_l+0xab6>
   c2042:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c2046:	e7db      	b.n	c2000 <_strtod_l+0xb58>
   c2048:	a311      	add	r3, pc, #68	; (adr r3, c2090 <_strtod_l+0xbe8>)
   c204a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c204e:	f7fe ff91 	bl	c0f74 <__aeabi_dcmplt>
   c2052:	e7b2      	b.n	c1fba <_strtod_l+0xb12>
   c2054:	2300      	movs	r3, #0
   c2056:	930a      	str	r3, [sp, #40]	; 0x28
   c2058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c205a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c205c:	6013      	str	r3, [r2, #0]
   c205e:	f7ff ba6b 	b.w	c1538 <_strtod_l+0x90>
   c2062:	2a65      	cmp	r2, #101	; 0x65
   c2064:	f43f ab5f 	beq.w	c1726 <_strtod_l+0x27e>
   c2068:	2a45      	cmp	r2, #69	; 0x45
   c206a:	f43f ab5c 	beq.w	c1726 <_strtod_l+0x27e>
   c206e:	2301      	movs	r3, #1
   c2070:	f7ff bb94 	b.w	c179c <_strtod_l+0x2f4>
   c2074:	f3af 8000 	nop.w
   c2078:	94a03595 	.word	0x94a03595
   c207c:	3fdfffff 	.word	0x3fdfffff
   c2080:	35afe535 	.word	0x35afe535
   c2084:	3fe00000 	.word	0x3fe00000
   c2088:	ffc00000 	.word	0xffc00000
   c208c:	41dfffff 	.word	0x41dfffff
   c2090:	94a03595 	.word	0x94a03595
   c2094:	3fcfffff 	.word	0x3fcfffff
   c2098:	3ff00000 	.word	0x3ff00000
   c209c:	7ff00000 	.word	0x7ff00000
   c20a0:	7fe00000 	.word	0x7fe00000
   c20a4:	7c9fffff 	.word	0x7c9fffff
   c20a8:	3fe00000 	.word	0x3fe00000
   c20ac:	bff00000 	.word	0xbff00000
   c20b0:	7fefffff 	.word	0x7fefffff

000c20b4 <strtof>:
   c20b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c20b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c2168 <strtof+0xb4>
   c20bc:	4b26      	ldr	r3, [pc, #152]	; (c2158 <strtof+0xa4>)
   c20be:	460a      	mov	r2, r1
   c20c0:	ed2d 8b02 	vpush	{d8}
   c20c4:	4601      	mov	r1, r0
   c20c6:	f8d8 0000 	ldr.w	r0, [r8]
   c20ca:	f7ff f9ed 	bl	c14a8 <_strtod_l>
   c20ce:	ec55 4b10 	vmov	r4, r5, d0
   c20d2:	ee10 2a10 	vmov	r2, s0
   c20d6:	ee10 0a10 	vmov	r0, s0
   c20da:	462b      	mov	r3, r5
   c20dc:	4629      	mov	r1, r5
   c20de:	f7fe ff71 	bl	c0fc4 <__aeabi_dcmpun>
   c20e2:	b190      	cbz	r0, c210a <strtof+0x56>
   c20e4:	2d00      	cmp	r5, #0
   c20e6:	481d      	ldr	r0, [pc, #116]	; (c215c <strtof+0xa8>)
   c20e8:	da09      	bge.n	c20fe <strtof+0x4a>
   c20ea:	f001 fa65 	bl	c35b8 <nanf>
   c20ee:	eeb1 8a40 	vneg.f32	s16, s0
   c20f2:	eeb0 0a48 	vmov.f32	s0, s16
   c20f6:	ecbd 8b02 	vpop	{d8}
   c20fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c20fe:	ecbd 8b02 	vpop	{d8}
   c2102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c2106:	f001 ba57 	b.w	c35b8 <nanf>
   c210a:	4620      	mov	r0, r4
   c210c:	4629      	mov	r1, r5
   c210e:	f7fe ffb7 	bl	c1080 <__aeabi_d2f>
   c2112:	ee08 0a10 	vmov	s16, r0
   c2116:	eddf 7a12 	vldr	s15, [pc, #72]	; c2160 <strtof+0xac>
   c211a:	eeb0 7ac8 	vabs.f32	s14, s16
   c211e:	eeb4 7a67 	vcmp.f32	s14, s15
   c2122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2126:	dde4      	ble.n	c20f2 <strtof+0x3e>
   c2128:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c212c:	4b0d      	ldr	r3, [pc, #52]	; (c2164 <strtof+0xb0>)
   c212e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2132:	4620      	mov	r0, r4
   c2134:	4639      	mov	r1, r7
   c2136:	f7fe ff45 	bl	c0fc4 <__aeabi_dcmpun>
   c213a:	b940      	cbnz	r0, c214e <strtof+0x9a>
   c213c:	4b09      	ldr	r3, [pc, #36]	; (c2164 <strtof+0xb0>)
   c213e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2142:	4620      	mov	r0, r4
   c2144:	4639      	mov	r1, r7
   c2146:	f7fe ff1f 	bl	c0f88 <__aeabi_dcmple>
   c214a:	2800      	cmp	r0, #0
   c214c:	d0d1      	beq.n	c20f2 <strtof+0x3e>
   c214e:	f8d8 3000 	ldr.w	r3, [r8]
   c2152:	2222      	movs	r2, #34	; 0x22
   c2154:	601a      	str	r2, [r3, #0]
   c2156:	e7cc      	b.n	c20f2 <strtof+0x3e>
   c2158:	2003d700 	.word	0x2003d700
   c215c:	000c54f8 	.word	0x000c54f8
   c2160:	7f7fffff 	.word	0x7f7fffff
   c2164:	7fefffff 	.word	0x7fefffff
   c2168:	2003d694 	.word	0x2003d694

000c216c <__strtok_r>:
   c216c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c216e:	b908      	cbnz	r0, c2174 <__strtok_r+0x8>
   c2170:	6810      	ldr	r0, [r2, #0]
   c2172:	b188      	cbz	r0, c2198 <__strtok_r+0x2c>
   c2174:	4604      	mov	r4, r0
   c2176:	4620      	mov	r0, r4
   c2178:	f814 5b01 	ldrb.w	r5, [r4], #1
   c217c:	460f      	mov	r7, r1
   c217e:	f817 6b01 	ldrb.w	r6, [r7], #1
   c2182:	b91e      	cbnz	r6, c218c <__strtok_r+0x20>
   c2184:	b965      	cbnz	r5, c21a0 <__strtok_r+0x34>
   c2186:	6015      	str	r5, [r2, #0]
   c2188:	4628      	mov	r0, r5
   c218a:	e005      	b.n	c2198 <__strtok_r+0x2c>
   c218c:	42b5      	cmp	r5, r6
   c218e:	d1f6      	bne.n	c217e <__strtok_r+0x12>
   c2190:	2b00      	cmp	r3, #0
   c2192:	d1f0      	bne.n	c2176 <__strtok_r+0xa>
   c2194:	6014      	str	r4, [r2, #0]
   c2196:	7003      	strb	r3, [r0, #0]
   c2198:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c219a:	461c      	mov	r4, r3
   c219c:	e00c      	b.n	c21b8 <__strtok_r+0x4c>
   c219e:	b915      	cbnz	r5, c21a6 <__strtok_r+0x3a>
   c21a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   c21a4:	460e      	mov	r6, r1
   c21a6:	f816 5b01 	ldrb.w	r5, [r6], #1
   c21aa:	42ab      	cmp	r3, r5
   c21ac:	d1f7      	bne.n	c219e <__strtok_r+0x32>
   c21ae:	2b00      	cmp	r3, #0
   c21b0:	d0f3      	beq.n	c219a <__strtok_r+0x2e>
   c21b2:	2300      	movs	r3, #0
   c21b4:	f804 3c01 	strb.w	r3, [r4, #-1]
   c21b8:	6014      	str	r4, [r2, #0]
   c21ba:	e7ed      	b.n	c2198 <__strtok_r+0x2c>

000c21bc <strtok_r>:
   c21bc:	2301      	movs	r3, #1
   c21be:	f7ff bfd5 	b.w	c216c <__strtok_r>
	...

000c21c4 <_strtol_l.constprop.0>:
   c21c4:	2b01      	cmp	r3, #1
   c21c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c21ca:	d001      	beq.n	c21d0 <_strtol_l.constprop.0+0xc>
   c21cc:	2b24      	cmp	r3, #36	; 0x24
   c21ce:	d906      	bls.n	c21de <_strtol_l.constprop.0+0x1a>
   c21d0:	f7fb f8a8 	bl	bd324 <__errno>
   c21d4:	2316      	movs	r3, #22
   c21d6:	6003      	str	r3, [r0, #0]
   c21d8:	2000      	movs	r0, #0
   c21da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c21de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c22c4 <_strtol_l.constprop.0+0x100>
   c21e2:	460d      	mov	r5, r1
   c21e4:	462e      	mov	r6, r5
   c21e6:	f815 4b01 	ldrb.w	r4, [r5], #1
   c21ea:	f814 700c 	ldrb.w	r7, [r4, ip]
   c21ee:	f017 0708 	ands.w	r7, r7, #8
   c21f2:	d1f7      	bne.n	c21e4 <_strtol_l.constprop.0+0x20>
   c21f4:	2c2d      	cmp	r4, #45	; 0x2d
   c21f6:	d132      	bne.n	c225e <_strtol_l.constprop.0+0x9a>
   c21f8:	782c      	ldrb	r4, [r5, #0]
   c21fa:	2701      	movs	r7, #1
   c21fc:	1cb5      	adds	r5, r6, #2
   c21fe:	2b00      	cmp	r3, #0
   c2200:	d05b      	beq.n	c22ba <_strtol_l.constprop.0+0xf6>
   c2202:	2b10      	cmp	r3, #16
   c2204:	d109      	bne.n	c221a <_strtol_l.constprop.0+0x56>
   c2206:	2c30      	cmp	r4, #48	; 0x30
   c2208:	d107      	bne.n	c221a <_strtol_l.constprop.0+0x56>
   c220a:	782c      	ldrb	r4, [r5, #0]
   c220c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c2210:	2c58      	cmp	r4, #88	; 0x58
   c2212:	d14d      	bne.n	c22b0 <_strtol_l.constprop.0+0xec>
   c2214:	786c      	ldrb	r4, [r5, #1]
   c2216:	2310      	movs	r3, #16
   c2218:	3502      	adds	r5, #2
   c221a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c221e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c2222:	f04f 0c00 	mov.w	ip, #0
   c2226:	fbb8 f9f3 	udiv	r9, r8, r3
   c222a:	4666      	mov	r6, ip
   c222c:	fb03 8a19 	mls	sl, r3, r9, r8
   c2230:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c2234:	f1be 0f09 	cmp.w	lr, #9
   c2238:	d816      	bhi.n	c2268 <_strtol_l.constprop.0+0xa4>
   c223a:	4674      	mov	r4, lr
   c223c:	42a3      	cmp	r3, r4
   c223e:	dd24      	ble.n	c228a <_strtol_l.constprop.0+0xc6>
   c2240:	f1bc 0f00 	cmp.w	ip, #0
   c2244:	db1e      	blt.n	c2284 <_strtol_l.constprop.0+0xc0>
   c2246:	45b1      	cmp	r9, r6
   c2248:	d31c      	bcc.n	c2284 <_strtol_l.constprop.0+0xc0>
   c224a:	d101      	bne.n	c2250 <_strtol_l.constprop.0+0x8c>
   c224c:	45a2      	cmp	sl, r4
   c224e:	db19      	blt.n	c2284 <_strtol_l.constprop.0+0xc0>
   c2250:	fb06 4603 	mla	r6, r6, r3, r4
   c2254:	f04f 0c01 	mov.w	ip, #1
   c2258:	f815 4b01 	ldrb.w	r4, [r5], #1
   c225c:	e7e8      	b.n	c2230 <_strtol_l.constprop.0+0x6c>
   c225e:	2c2b      	cmp	r4, #43	; 0x2b
   c2260:	bf04      	itt	eq
   c2262:	782c      	ldrbeq	r4, [r5, #0]
   c2264:	1cb5      	addeq	r5, r6, #2
   c2266:	e7ca      	b.n	c21fe <_strtol_l.constprop.0+0x3a>
   c2268:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c226c:	f1be 0f19 	cmp.w	lr, #25
   c2270:	d801      	bhi.n	c2276 <_strtol_l.constprop.0+0xb2>
   c2272:	3c37      	subs	r4, #55	; 0x37
   c2274:	e7e2      	b.n	c223c <_strtol_l.constprop.0+0x78>
   c2276:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c227a:	f1be 0f19 	cmp.w	lr, #25
   c227e:	d804      	bhi.n	c228a <_strtol_l.constprop.0+0xc6>
   c2280:	3c57      	subs	r4, #87	; 0x57
   c2282:	e7db      	b.n	c223c <_strtol_l.constprop.0+0x78>
   c2284:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c2288:	e7e6      	b.n	c2258 <_strtol_l.constprop.0+0x94>
   c228a:	f1bc 0f00 	cmp.w	ip, #0
   c228e:	da05      	bge.n	c229c <_strtol_l.constprop.0+0xd8>
   c2290:	2322      	movs	r3, #34	; 0x22
   c2292:	6003      	str	r3, [r0, #0]
   c2294:	4646      	mov	r6, r8
   c2296:	b942      	cbnz	r2, c22aa <_strtol_l.constprop.0+0xe6>
   c2298:	4630      	mov	r0, r6
   c229a:	e79e      	b.n	c21da <_strtol_l.constprop.0+0x16>
   c229c:	b107      	cbz	r7, c22a0 <_strtol_l.constprop.0+0xdc>
   c229e:	4276      	negs	r6, r6
   c22a0:	2a00      	cmp	r2, #0
   c22a2:	d0f9      	beq.n	c2298 <_strtol_l.constprop.0+0xd4>
   c22a4:	f1bc 0f00 	cmp.w	ip, #0
   c22a8:	d000      	beq.n	c22ac <_strtol_l.constprop.0+0xe8>
   c22aa:	1e69      	subs	r1, r5, #1
   c22ac:	6011      	str	r1, [r2, #0]
   c22ae:	e7f3      	b.n	c2298 <_strtol_l.constprop.0+0xd4>
   c22b0:	2430      	movs	r4, #48	; 0x30
   c22b2:	2b00      	cmp	r3, #0
   c22b4:	d1b1      	bne.n	c221a <_strtol_l.constprop.0+0x56>
   c22b6:	2308      	movs	r3, #8
   c22b8:	e7af      	b.n	c221a <_strtol_l.constprop.0+0x56>
   c22ba:	2c30      	cmp	r4, #48	; 0x30
   c22bc:	d0a5      	beq.n	c220a <_strtol_l.constprop.0+0x46>
   c22be:	230a      	movs	r3, #10
   c22c0:	e7ab      	b.n	c221a <_strtol_l.constprop.0+0x56>
   c22c2:	bf00      	nop
   c22c4:	000c57f9 	.word	0x000c57f9

000c22c8 <strtol>:
   c22c8:	4613      	mov	r3, r2
   c22ca:	460a      	mov	r2, r1
   c22cc:	4601      	mov	r1, r0
   c22ce:	4802      	ldr	r0, [pc, #8]	; (c22d8 <strtol+0x10>)
   c22d0:	6800      	ldr	r0, [r0, #0]
   c22d2:	f7ff bf77 	b.w	c21c4 <_strtol_l.constprop.0>
   c22d6:	bf00      	nop
   c22d8:	2003d694 	.word	0x2003d694

000c22dc <close>:
   c22dc:	4b02      	ldr	r3, [pc, #8]	; (c22e8 <close+0xc>)
   c22de:	4601      	mov	r1, r0
   c22e0:	6818      	ldr	r0, [r3, #0]
   c22e2:	f000 b8c9 	b.w	c2478 <_close_r>
   c22e6:	bf00      	nop
   c22e8:	2003d694 	.word	0x2003d694

000c22ec <fstat>:
   c22ec:	4b02      	ldr	r3, [pc, #8]	; (c22f8 <fstat+0xc>)
   c22ee:	460a      	mov	r2, r1
   c22f0:	4601      	mov	r1, r0
   c22f2:	6818      	ldr	r0, [r3, #0]
   c22f4:	f000 b8d0 	b.w	c2498 <_fstat_r>
   c22f8:	2003d694 	.word	0x2003d694

000c22fc <lseek>:
   c22fc:	4613      	mov	r3, r2
   c22fe:	460a      	mov	r2, r1
   c2300:	4601      	mov	r1, r0
   c2302:	4802      	ldr	r0, [pc, #8]	; (c230c <lseek+0x10>)
   c2304:	6800      	ldr	r0, [r0, #0]
   c2306:	f000 bc4d 	b.w	c2ba4 <_lseek_r>
   c230a:	bf00      	nop
   c230c:	2003d694 	.word	0x2003d694

000c2310 <open>:
   c2310:	b40e      	push	{r1, r2, r3}
   c2312:	b503      	push	{r0, r1, lr}
   c2314:	ab03      	add	r3, sp, #12
   c2316:	4601      	mov	r1, r0
   c2318:	4806      	ldr	r0, [pc, #24]	; (c2334 <open+0x24>)
   c231a:	f853 2b04 	ldr.w	r2, [r3], #4
   c231e:	9301      	str	r3, [sp, #4]
   c2320:	6800      	ldr	r0, [r0, #0]
   c2322:	9b04      	ldr	r3, [sp, #16]
   c2324:	f001 f924 	bl	c3570 <_open_r>
   c2328:	b002      	add	sp, #8
   c232a:	f85d eb04 	ldr.w	lr, [sp], #4
   c232e:	b003      	add	sp, #12
   c2330:	4770      	bx	lr
   c2332:	bf00      	nop
   c2334:	2003d694 	.word	0x2003d694

000c2338 <read>:
   c2338:	4613      	mov	r3, r2
   c233a:	460a      	mov	r2, r1
   c233c:	4601      	mov	r1, r0
   c233e:	4802      	ldr	r0, [pc, #8]	; (c2348 <read+0x10>)
   c2340:	6800      	ldr	r0, [r0, #0]
   c2342:	f001 b927 	b.w	c3594 <_read_r>
   c2346:	bf00      	nop
   c2348:	2003d694 	.word	0x2003d694

000c234c <unlink>:
   c234c:	4b02      	ldr	r3, [pc, #8]	; (c2358 <unlink+0xc>)
   c234e:	4601      	mov	r1, r0
   c2350:	6818      	ldr	r0, [r3, #0]
   c2352:	f000 b80d 	b.w	c2370 <_unlink_r>
   c2356:	bf00      	nop
   c2358:	2003d694 	.word	0x2003d694

000c235c <write>:
   c235c:	4613      	mov	r3, r2
   c235e:	460a      	mov	r2, r1
   c2360:	4601      	mov	r1, r0
   c2362:	4802      	ldr	r0, [pc, #8]	; (c236c <write+0x10>)
   c2364:	6800      	ldr	r0, [r0, #0]
   c2366:	f000 b813 	b.w	c2390 <_write_r>
   c236a:	bf00      	nop
   c236c:	2003d694 	.word	0x2003d694

000c2370 <_unlink_r>:
   c2370:	b538      	push	{r3, r4, r5, lr}
   c2372:	4d06      	ldr	r5, [pc, #24]	; (c238c <_unlink_r+0x1c>)
   c2374:	2300      	movs	r3, #0
   c2376:	4604      	mov	r4, r0
   c2378:	4608      	mov	r0, r1
   c237a:	602b      	str	r3, [r5, #0]
   c237c:	f7fa fd5e 	bl	bce3c <_unlink>
   c2380:	1c43      	adds	r3, r0, #1
   c2382:	d102      	bne.n	c238a <_unlink_r+0x1a>
   c2384:	682b      	ldr	r3, [r5, #0]
   c2386:	b103      	cbz	r3, c238a <_unlink_r+0x1a>
   c2388:	6023      	str	r3, [r4, #0]
   c238a:	bd38      	pop	{r3, r4, r5, pc}
   c238c:	2003e7f0 	.word	0x2003e7f0

000c2390 <_write_r>:
   c2390:	b538      	push	{r3, r4, r5, lr}
   c2392:	4d07      	ldr	r5, [pc, #28]	; (c23b0 <_write_r+0x20>)
   c2394:	4604      	mov	r4, r0
   c2396:	4608      	mov	r0, r1
   c2398:	4611      	mov	r1, r2
   c239a:	2200      	movs	r2, #0
   c239c:	602a      	str	r2, [r5, #0]
   c239e:	461a      	mov	r2, r3
   c23a0:	f7fa fd14 	bl	bcdcc <_write>
   c23a4:	1c43      	adds	r3, r0, #1
   c23a6:	d102      	bne.n	c23ae <_write_r+0x1e>
   c23a8:	682b      	ldr	r3, [r5, #0]
   c23aa:	b103      	cbz	r3, c23ae <_write_r+0x1e>
   c23ac:	6023      	str	r3, [r4, #0]
   c23ae:	bd38      	pop	{r3, r4, r5, pc}
   c23b0:	2003e7f0 	.word	0x2003e7f0

000c23b4 <__register_exitproc>:
   c23b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c23b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c2474 <__register_exitproc+0xc0>
   c23bc:	4606      	mov	r6, r0
   c23be:	f8d8 0000 	ldr.w	r0, [r8]
   c23c2:	461f      	mov	r7, r3
   c23c4:	460d      	mov	r5, r1
   c23c6:	4691      	mov	r9, r2
   c23c8:	f000 fbe8 	bl	c2b9c <__retarget_lock_acquire_recursive>
   c23cc:	4b25      	ldr	r3, [pc, #148]	; (c2464 <__register_exitproc+0xb0>)
   c23ce:	681c      	ldr	r4, [r3, #0]
   c23d0:	b934      	cbnz	r4, c23e0 <__register_exitproc+0x2c>
   c23d2:	4c25      	ldr	r4, [pc, #148]	; (c2468 <__register_exitproc+0xb4>)
   c23d4:	601c      	str	r4, [r3, #0]
   c23d6:	4b25      	ldr	r3, [pc, #148]	; (c246c <__register_exitproc+0xb8>)
   c23d8:	b113      	cbz	r3, c23e0 <__register_exitproc+0x2c>
   c23da:	681b      	ldr	r3, [r3, #0]
   c23dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c23e0:	6863      	ldr	r3, [r4, #4]
   c23e2:	2b1f      	cmp	r3, #31
   c23e4:	dd07      	ble.n	c23f6 <__register_exitproc+0x42>
   c23e6:	f8d8 0000 	ldr.w	r0, [r8]
   c23ea:	f000 fbd9 	bl	c2ba0 <__retarget_lock_release_recursive>
   c23ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c23f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c23f6:	b34e      	cbz	r6, c244c <__register_exitproc+0x98>
   c23f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c23fc:	b988      	cbnz	r0, c2422 <__register_exitproc+0x6e>
   c23fe:	4b1c      	ldr	r3, [pc, #112]	; (c2470 <__register_exitproc+0xbc>)
   c2400:	b923      	cbnz	r3, c240c <__register_exitproc+0x58>
   c2402:	f8d8 0000 	ldr.w	r0, [r8]
   c2406:	f000 fbca 	bl	c2b9e <__retarget_lock_release>
   c240a:	e7f0      	b.n	c23ee <__register_exitproc+0x3a>
   c240c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c2410:	f7fa ff40 	bl	bd294 <malloc>
   c2414:	2800      	cmp	r0, #0
   c2416:	d0f4      	beq.n	c2402 <__register_exitproc+0x4e>
   c2418:	2300      	movs	r3, #0
   c241a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c241e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c2422:	6863      	ldr	r3, [r4, #4]
   c2424:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c2428:	2201      	movs	r2, #1
   c242a:	409a      	lsls	r2, r3
   c242c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c2430:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c2434:	4313      	orrs	r3, r2
   c2436:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c243a:	2e02      	cmp	r6, #2
   c243c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c2440:	bf02      	ittt	eq
   c2442:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c2446:	4313      	orreq	r3, r2
   c2448:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c244c:	6863      	ldr	r3, [r4, #4]
   c244e:	f8d8 0000 	ldr.w	r0, [r8]
   c2452:	1c5a      	adds	r2, r3, #1
   c2454:	3302      	adds	r3, #2
   c2456:	6062      	str	r2, [r4, #4]
   c2458:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c245c:	f000 fba0 	bl	c2ba0 <__retarget_lock_release_recursive>
   c2460:	2000      	movs	r0, #0
   c2462:	e7c6      	b.n	c23f2 <__register_exitproc+0x3e>
   c2464:	2003e7e8 	.word	0x2003e7e8
   c2468:	2003e75c 	.word	0x2003e75c
   c246c:	00000000 	.word	0x00000000
   c2470:	000bd295 	.word	0x000bd295
   c2474:	2003d6f8 	.word	0x2003d6f8

000c2478 <_close_r>:
   c2478:	b538      	push	{r3, r4, r5, lr}
   c247a:	4d06      	ldr	r5, [pc, #24]	; (c2494 <_close_r+0x1c>)
   c247c:	2300      	movs	r3, #0
   c247e:	4604      	mov	r4, r0
   c2480:	4608      	mov	r0, r1
   c2482:	602b      	str	r3, [r5, #0]
   c2484:	f7fa fcb2 	bl	bcdec <_close>
   c2488:	1c43      	adds	r3, r0, #1
   c248a:	d102      	bne.n	c2492 <_close_r+0x1a>
   c248c:	682b      	ldr	r3, [r5, #0]
   c248e:	b103      	cbz	r3, c2492 <_close_r+0x1a>
   c2490:	6023      	str	r3, [r4, #0]
   c2492:	bd38      	pop	{r3, r4, r5, pc}
   c2494:	2003e7f0 	.word	0x2003e7f0

000c2498 <_fstat_r>:
   c2498:	b538      	push	{r3, r4, r5, lr}
   c249a:	4d07      	ldr	r5, [pc, #28]	; (c24b8 <_fstat_r+0x20>)
   c249c:	2300      	movs	r3, #0
   c249e:	4604      	mov	r4, r0
   c24a0:	4608      	mov	r0, r1
   c24a2:	4611      	mov	r1, r2
   c24a4:	602b      	str	r3, [r5, #0]
   c24a6:	f7fa fca9 	bl	bcdfc <_fstat>
   c24aa:	1c43      	adds	r3, r0, #1
   c24ac:	d102      	bne.n	c24b4 <_fstat_r+0x1c>
   c24ae:	682b      	ldr	r3, [r5, #0]
   c24b0:	b103      	cbz	r3, c24b4 <_fstat_r+0x1c>
   c24b2:	6023      	str	r3, [r4, #0]
   c24b4:	bd38      	pop	{r3, r4, r5, pc}
   c24b6:	bf00      	nop
   c24b8:	2003e7f0 	.word	0x2003e7f0

000c24bc <rshift>:
   c24bc:	6903      	ldr	r3, [r0, #16]
   c24be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c24c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c24c6:	ea4f 1261 	mov.w	r2, r1, asr #5
   c24ca:	f100 0414 	add.w	r4, r0, #20
   c24ce:	dd45      	ble.n	c255c <rshift+0xa0>
   c24d0:	f011 011f 	ands.w	r1, r1, #31
   c24d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c24d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c24dc:	d10c      	bne.n	c24f8 <rshift+0x3c>
   c24de:	f100 0710 	add.w	r7, r0, #16
   c24e2:	4629      	mov	r1, r5
   c24e4:	42b1      	cmp	r1, r6
   c24e6:	d334      	bcc.n	c2552 <rshift+0x96>
   c24e8:	1a9b      	subs	r3, r3, r2
   c24ea:	009b      	lsls	r3, r3, #2
   c24ec:	1eea      	subs	r2, r5, #3
   c24ee:	4296      	cmp	r6, r2
   c24f0:	bf38      	it	cc
   c24f2:	2300      	movcc	r3, #0
   c24f4:	4423      	add	r3, r4
   c24f6:	e015      	b.n	c2524 <rshift+0x68>
   c24f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c24fc:	f1c1 0820 	rsb	r8, r1, #32
   c2500:	40cf      	lsrs	r7, r1
   c2502:	f105 0e04 	add.w	lr, r5, #4
   c2506:	46a1      	mov	r9, r4
   c2508:	4576      	cmp	r6, lr
   c250a:	46f4      	mov	ip, lr
   c250c:	d815      	bhi.n	c253a <rshift+0x7e>
   c250e:	1a9a      	subs	r2, r3, r2
   c2510:	0092      	lsls	r2, r2, #2
   c2512:	3a04      	subs	r2, #4
   c2514:	3501      	adds	r5, #1
   c2516:	42ae      	cmp	r6, r5
   c2518:	bf38      	it	cc
   c251a:	2200      	movcc	r2, #0
   c251c:	18a3      	adds	r3, r4, r2
   c251e:	50a7      	str	r7, [r4, r2]
   c2520:	b107      	cbz	r7, c2524 <rshift+0x68>
   c2522:	3304      	adds	r3, #4
   c2524:	1b1a      	subs	r2, r3, r4
   c2526:	42a3      	cmp	r3, r4
   c2528:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c252c:	bf08      	it	eq
   c252e:	2300      	moveq	r3, #0
   c2530:	6102      	str	r2, [r0, #16]
   c2532:	bf08      	it	eq
   c2534:	6143      	streq	r3, [r0, #20]
   c2536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c253a:	f8dc c000 	ldr.w	ip, [ip]
   c253e:	fa0c fc08 	lsl.w	ip, ip, r8
   c2542:	ea4c 0707 	orr.w	r7, ip, r7
   c2546:	f849 7b04 	str.w	r7, [r9], #4
   c254a:	f85e 7b04 	ldr.w	r7, [lr], #4
   c254e:	40cf      	lsrs	r7, r1
   c2550:	e7da      	b.n	c2508 <rshift+0x4c>
   c2552:	f851 cb04 	ldr.w	ip, [r1], #4
   c2556:	f847 cf04 	str.w	ip, [r7, #4]!
   c255a:	e7c3      	b.n	c24e4 <rshift+0x28>
   c255c:	4623      	mov	r3, r4
   c255e:	e7e1      	b.n	c2524 <rshift+0x68>

000c2560 <__hexdig_fun>:
   c2560:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c2564:	2b09      	cmp	r3, #9
   c2566:	d802      	bhi.n	c256e <__hexdig_fun+0xe>
   c2568:	3820      	subs	r0, #32
   c256a:	b2c0      	uxtb	r0, r0
   c256c:	4770      	bx	lr
   c256e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c2572:	2b05      	cmp	r3, #5
   c2574:	d801      	bhi.n	c257a <__hexdig_fun+0x1a>
   c2576:	3847      	subs	r0, #71	; 0x47
   c2578:	e7f7      	b.n	c256a <__hexdig_fun+0xa>
   c257a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c257e:	2b05      	cmp	r3, #5
   c2580:	d801      	bhi.n	c2586 <__hexdig_fun+0x26>
   c2582:	3827      	subs	r0, #39	; 0x27
   c2584:	e7f1      	b.n	c256a <__hexdig_fun+0xa>
   c2586:	2000      	movs	r0, #0
   c2588:	4770      	bx	lr
	...

000c258c <__gethex>:
   c258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2590:	ed2d 8b02 	vpush	{d8}
   c2594:	b089      	sub	sp, #36	; 0x24
   c2596:	ee08 0a10 	vmov	s16, r0
   c259a:	9304      	str	r3, [sp, #16]
   c259c:	4bb4      	ldr	r3, [pc, #720]	; (c2870 <__gethex+0x2e4>)
   c259e:	681b      	ldr	r3, [r3, #0]
   c25a0:	9301      	str	r3, [sp, #4]
   c25a2:	4618      	mov	r0, r3
   c25a4:	468b      	mov	fp, r1
   c25a6:	4690      	mov	r8, r2
   c25a8:	f7fe ff1d 	bl	c13e6 <strlen>
   c25ac:	9b01      	ldr	r3, [sp, #4]
   c25ae:	f8db 2000 	ldr.w	r2, [fp]
   c25b2:	4403      	add	r3, r0
   c25b4:	4682      	mov	sl, r0
   c25b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c25ba:	9305      	str	r3, [sp, #20]
   c25bc:	1c93      	adds	r3, r2, #2
   c25be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c25c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c25c6:	32fe      	adds	r2, #254	; 0xfe
   c25c8:	18d1      	adds	r1, r2, r3
   c25ca:	461f      	mov	r7, r3
   c25cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   c25d0:	9100      	str	r1, [sp, #0]
   c25d2:	2830      	cmp	r0, #48	; 0x30
   c25d4:	d0f8      	beq.n	c25c8 <__gethex+0x3c>
   c25d6:	f7ff ffc3 	bl	c2560 <__hexdig_fun>
   c25da:	4604      	mov	r4, r0
   c25dc:	2800      	cmp	r0, #0
   c25de:	d13a      	bne.n	c2656 <__gethex+0xca>
   c25e0:	9901      	ldr	r1, [sp, #4]
   c25e2:	4652      	mov	r2, sl
   c25e4:	4638      	mov	r0, r7
   c25e6:	f7fe ff06 	bl	c13f6 <strncmp>
   c25ea:	4605      	mov	r5, r0
   c25ec:	2800      	cmp	r0, #0
   c25ee:	d168      	bne.n	c26c2 <__gethex+0x136>
   c25f0:	f817 000a 	ldrb.w	r0, [r7, sl]
   c25f4:	eb07 060a 	add.w	r6, r7, sl
   c25f8:	f7ff ffb2 	bl	c2560 <__hexdig_fun>
   c25fc:	2800      	cmp	r0, #0
   c25fe:	d062      	beq.n	c26c6 <__gethex+0x13a>
   c2600:	4633      	mov	r3, r6
   c2602:	7818      	ldrb	r0, [r3, #0]
   c2604:	2830      	cmp	r0, #48	; 0x30
   c2606:	461f      	mov	r7, r3
   c2608:	f103 0301 	add.w	r3, r3, #1
   c260c:	d0f9      	beq.n	c2602 <__gethex+0x76>
   c260e:	f7ff ffa7 	bl	c2560 <__hexdig_fun>
   c2612:	2301      	movs	r3, #1
   c2614:	fab0 f480 	clz	r4, r0
   c2618:	0964      	lsrs	r4, r4, #5
   c261a:	4635      	mov	r5, r6
   c261c:	9300      	str	r3, [sp, #0]
   c261e:	463a      	mov	r2, r7
   c2620:	4616      	mov	r6, r2
   c2622:	3201      	adds	r2, #1
   c2624:	7830      	ldrb	r0, [r6, #0]
   c2626:	f7ff ff9b 	bl	c2560 <__hexdig_fun>
   c262a:	2800      	cmp	r0, #0
   c262c:	d1f8      	bne.n	c2620 <__gethex+0x94>
   c262e:	9901      	ldr	r1, [sp, #4]
   c2630:	4652      	mov	r2, sl
   c2632:	4630      	mov	r0, r6
   c2634:	f7fe fedf 	bl	c13f6 <strncmp>
   c2638:	b980      	cbnz	r0, c265c <__gethex+0xd0>
   c263a:	b94d      	cbnz	r5, c2650 <__gethex+0xc4>
   c263c:	eb06 050a 	add.w	r5, r6, sl
   c2640:	462a      	mov	r2, r5
   c2642:	4616      	mov	r6, r2
   c2644:	3201      	adds	r2, #1
   c2646:	7830      	ldrb	r0, [r6, #0]
   c2648:	f7ff ff8a 	bl	c2560 <__hexdig_fun>
   c264c:	2800      	cmp	r0, #0
   c264e:	d1f8      	bne.n	c2642 <__gethex+0xb6>
   c2650:	1bad      	subs	r5, r5, r6
   c2652:	00ad      	lsls	r5, r5, #2
   c2654:	e004      	b.n	c2660 <__gethex+0xd4>
   c2656:	2400      	movs	r4, #0
   c2658:	4625      	mov	r5, r4
   c265a:	e7e0      	b.n	c261e <__gethex+0x92>
   c265c:	2d00      	cmp	r5, #0
   c265e:	d1f7      	bne.n	c2650 <__gethex+0xc4>
   c2660:	7833      	ldrb	r3, [r6, #0]
   c2662:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c2666:	2b50      	cmp	r3, #80	; 0x50
   c2668:	d13b      	bne.n	c26e2 <__gethex+0x156>
   c266a:	7873      	ldrb	r3, [r6, #1]
   c266c:	2b2b      	cmp	r3, #43	; 0x2b
   c266e:	d02c      	beq.n	c26ca <__gethex+0x13e>
   c2670:	2b2d      	cmp	r3, #45	; 0x2d
   c2672:	d02e      	beq.n	c26d2 <__gethex+0x146>
   c2674:	1c71      	adds	r1, r6, #1
   c2676:	f04f 0900 	mov.w	r9, #0
   c267a:	7808      	ldrb	r0, [r1, #0]
   c267c:	f7ff ff70 	bl	c2560 <__hexdig_fun>
   c2680:	1e43      	subs	r3, r0, #1
   c2682:	b2db      	uxtb	r3, r3
   c2684:	2b18      	cmp	r3, #24
   c2686:	d82c      	bhi.n	c26e2 <__gethex+0x156>
   c2688:	f1a0 0210 	sub.w	r2, r0, #16
   c268c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c2690:	f7ff ff66 	bl	c2560 <__hexdig_fun>
   c2694:	1e43      	subs	r3, r0, #1
   c2696:	b2db      	uxtb	r3, r3
   c2698:	2b18      	cmp	r3, #24
   c269a:	d91d      	bls.n	c26d8 <__gethex+0x14c>
   c269c:	f1b9 0f00 	cmp.w	r9, #0
   c26a0:	d000      	beq.n	c26a4 <__gethex+0x118>
   c26a2:	4252      	negs	r2, r2
   c26a4:	4415      	add	r5, r2
   c26a6:	f8cb 1000 	str.w	r1, [fp]
   c26aa:	b1e4      	cbz	r4, c26e6 <__gethex+0x15a>
   c26ac:	9b00      	ldr	r3, [sp, #0]
   c26ae:	2b00      	cmp	r3, #0
   c26b0:	bf14      	ite	ne
   c26b2:	2700      	movne	r7, #0
   c26b4:	2706      	moveq	r7, #6
   c26b6:	4638      	mov	r0, r7
   c26b8:	b009      	add	sp, #36	; 0x24
   c26ba:	ecbd 8b02 	vpop	{d8}
   c26be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c26c2:	463e      	mov	r6, r7
   c26c4:	4625      	mov	r5, r4
   c26c6:	2401      	movs	r4, #1
   c26c8:	e7ca      	b.n	c2660 <__gethex+0xd4>
   c26ca:	f04f 0900 	mov.w	r9, #0
   c26ce:	1cb1      	adds	r1, r6, #2
   c26d0:	e7d3      	b.n	c267a <__gethex+0xee>
   c26d2:	f04f 0901 	mov.w	r9, #1
   c26d6:	e7fa      	b.n	c26ce <__gethex+0x142>
   c26d8:	230a      	movs	r3, #10
   c26da:	fb03 0202 	mla	r2, r3, r2, r0
   c26de:	3a10      	subs	r2, #16
   c26e0:	e7d4      	b.n	c268c <__gethex+0x100>
   c26e2:	4631      	mov	r1, r6
   c26e4:	e7df      	b.n	c26a6 <__gethex+0x11a>
   c26e6:	1bf3      	subs	r3, r6, r7
   c26e8:	3b01      	subs	r3, #1
   c26ea:	4621      	mov	r1, r4
   c26ec:	2b07      	cmp	r3, #7
   c26ee:	dc0b      	bgt.n	c2708 <__gethex+0x17c>
   c26f0:	ee18 0a10 	vmov	r0, s16
   c26f4:	f000 fa7a 	bl	c2bec <_Balloc>
   c26f8:	4604      	mov	r4, r0
   c26fa:	b940      	cbnz	r0, c270e <__gethex+0x182>
   c26fc:	4b5d      	ldr	r3, [pc, #372]	; (c2874 <__gethex+0x2e8>)
   c26fe:	4602      	mov	r2, r0
   c2700:	21de      	movs	r1, #222	; 0xde
   c2702:	485d      	ldr	r0, [pc, #372]	; (c2878 <__gethex+0x2ec>)
   c2704:	f7fa fe16 	bl	bd334 <__assert_func>
   c2708:	3101      	adds	r1, #1
   c270a:	105b      	asrs	r3, r3, #1
   c270c:	e7ee      	b.n	c26ec <__gethex+0x160>
   c270e:	f100 0914 	add.w	r9, r0, #20
   c2712:	f04f 0b00 	mov.w	fp, #0
   c2716:	f1ca 0301 	rsb	r3, sl, #1
   c271a:	f8cd 9008 	str.w	r9, [sp, #8]
   c271e:	f8cd b000 	str.w	fp, [sp]
   c2722:	9306      	str	r3, [sp, #24]
   c2724:	42b7      	cmp	r7, r6
   c2726:	d340      	bcc.n	c27aa <__gethex+0x21e>
   c2728:	9802      	ldr	r0, [sp, #8]
   c272a:	9b00      	ldr	r3, [sp, #0]
   c272c:	f840 3b04 	str.w	r3, [r0], #4
   c2730:	eba0 0009 	sub.w	r0, r0, r9
   c2734:	1080      	asrs	r0, r0, #2
   c2736:	0146      	lsls	r6, r0, #5
   c2738:	6120      	str	r0, [r4, #16]
   c273a:	4618      	mov	r0, r3
   c273c:	f000 fb48 	bl	c2dd0 <__hi0bits>
   c2740:	1a30      	subs	r0, r6, r0
   c2742:	f8d8 6000 	ldr.w	r6, [r8]
   c2746:	42b0      	cmp	r0, r6
   c2748:	dd63      	ble.n	c2812 <__gethex+0x286>
   c274a:	1b87      	subs	r7, r0, r6
   c274c:	4639      	mov	r1, r7
   c274e:	4620      	mov	r0, r4
   c2750:	f000 feec 	bl	c352c <__any_on>
   c2754:	4682      	mov	sl, r0
   c2756:	b1a8      	cbz	r0, c2784 <__gethex+0x1f8>
   c2758:	1e7b      	subs	r3, r7, #1
   c275a:	1159      	asrs	r1, r3, #5
   c275c:	f003 021f 	and.w	r2, r3, #31
   c2760:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c2764:	f04f 0a01 	mov.w	sl, #1
   c2768:	fa0a f202 	lsl.w	r2, sl, r2
   c276c:	420a      	tst	r2, r1
   c276e:	d009      	beq.n	c2784 <__gethex+0x1f8>
   c2770:	4553      	cmp	r3, sl
   c2772:	dd05      	ble.n	c2780 <__gethex+0x1f4>
   c2774:	1eb9      	subs	r1, r7, #2
   c2776:	4620      	mov	r0, r4
   c2778:	f000 fed8 	bl	c352c <__any_on>
   c277c:	2800      	cmp	r0, #0
   c277e:	d145      	bne.n	c280c <__gethex+0x280>
   c2780:	f04f 0a02 	mov.w	sl, #2
   c2784:	4639      	mov	r1, r7
   c2786:	4620      	mov	r0, r4
   c2788:	f7ff fe98 	bl	c24bc <rshift>
   c278c:	443d      	add	r5, r7
   c278e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2792:	42ab      	cmp	r3, r5
   c2794:	da4c      	bge.n	c2830 <__gethex+0x2a4>
   c2796:	ee18 0a10 	vmov	r0, s16
   c279a:	4621      	mov	r1, r4
   c279c:	f000 fa66 	bl	c2c6c <_Bfree>
   c27a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c27a2:	2300      	movs	r3, #0
   c27a4:	6013      	str	r3, [r2, #0]
   c27a6:	27a3      	movs	r7, #163	; 0xa3
   c27a8:	e785      	b.n	c26b6 <__gethex+0x12a>
   c27aa:	1e73      	subs	r3, r6, #1
   c27ac:	9a05      	ldr	r2, [sp, #20]
   c27ae:	9303      	str	r3, [sp, #12]
   c27b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c27b4:	4293      	cmp	r3, r2
   c27b6:	d019      	beq.n	c27ec <__gethex+0x260>
   c27b8:	f1bb 0f20 	cmp.w	fp, #32
   c27bc:	d107      	bne.n	c27ce <__gethex+0x242>
   c27be:	9b02      	ldr	r3, [sp, #8]
   c27c0:	9a00      	ldr	r2, [sp, #0]
   c27c2:	f843 2b04 	str.w	r2, [r3], #4
   c27c6:	9302      	str	r3, [sp, #8]
   c27c8:	2300      	movs	r3, #0
   c27ca:	9300      	str	r3, [sp, #0]
   c27cc:	469b      	mov	fp, r3
   c27ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c27d2:	f7ff fec5 	bl	c2560 <__hexdig_fun>
   c27d6:	9b00      	ldr	r3, [sp, #0]
   c27d8:	f000 000f 	and.w	r0, r0, #15
   c27dc:	fa00 f00b 	lsl.w	r0, r0, fp
   c27e0:	4303      	orrs	r3, r0
   c27e2:	9300      	str	r3, [sp, #0]
   c27e4:	f10b 0b04 	add.w	fp, fp, #4
   c27e8:	9b03      	ldr	r3, [sp, #12]
   c27ea:	e00d      	b.n	c2808 <__gethex+0x27c>
   c27ec:	9b03      	ldr	r3, [sp, #12]
   c27ee:	9a06      	ldr	r2, [sp, #24]
   c27f0:	4413      	add	r3, r2
   c27f2:	42bb      	cmp	r3, r7
   c27f4:	d3e0      	bcc.n	c27b8 <__gethex+0x22c>
   c27f6:	4618      	mov	r0, r3
   c27f8:	9901      	ldr	r1, [sp, #4]
   c27fa:	9307      	str	r3, [sp, #28]
   c27fc:	4652      	mov	r2, sl
   c27fe:	f7fe fdfa 	bl	c13f6 <strncmp>
   c2802:	9b07      	ldr	r3, [sp, #28]
   c2804:	2800      	cmp	r0, #0
   c2806:	d1d7      	bne.n	c27b8 <__gethex+0x22c>
   c2808:	461e      	mov	r6, r3
   c280a:	e78b      	b.n	c2724 <__gethex+0x198>
   c280c:	f04f 0a03 	mov.w	sl, #3
   c2810:	e7b8      	b.n	c2784 <__gethex+0x1f8>
   c2812:	da0a      	bge.n	c282a <__gethex+0x29e>
   c2814:	1a37      	subs	r7, r6, r0
   c2816:	4621      	mov	r1, r4
   c2818:	ee18 0a10 	vmov	r0, s16
   c281c:	463a      	mov	r2, r7
   c281e:	f000 fc41 	bl	c30a4 <__lshift>
   c2822:	1bed      	subs	r5, r5, r7
   c2824:	4604      	mov	r4, r0
   c2826:	f100 0914 	add.w	r9, r0, #20
   c282a:	f04f 0a00 	mov.w	sl, #0
   c282e:	e7ae      	b.n	c278e <__gethex+0x202>
   c2830:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c2834:	42a8      	cmp	r0, r5
   c2836:	dd72      	ble.n	c291e <__gethex+0x392>
   c2838:	1b45      	subs	r5, r0, r5
   c283a:	42ae      	cmp	r6, r5
   c283c:	dc36      	bgt.n	c28ac <__gethex+0x320>
   c283e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c2842:	2b02      	cmp	r3, #2
   c2844:	d02a      	beq.n	c289c <__gethex+0x310>
   c2846:	2b03      	cmp	r3, #3
   c2848:	d02c      	beq.n	c28a4 <__gethex+0x318>
   c284a:	2b01      	cmp	r3, #1
   c284c:	d11c      	bne.n	c2888 <__gethex+0x2fc>
   c284e:	42ae      	cmp	r6, r5
   c2850:	d11a      	bne.n	c2888 <__gethex+0x2fc>
   c2852:	2e01      	cmp	r6, #1
   c2854:	d112      	bne.n	c287c <__gethex+0x2f0>
   c2856:	9a04      	ldr	r2, [sp, #16]
   c2858:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c285c:	6013      	str	r3, [r2, #0]
   c285e:	2301      	movs	r3, #1
   c2860:	6123      	str	r3, [r4, #16]
   c2862:	f8c9 3000 	str.w	r3, [r9]
   c2866:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2868:	2762      	movs	r7, #98	; 0x62
   c286a:	601c      	str	r4, [r3, #0]
   c286c:	e723      	b.n	c26b6 <__gethex+0x12a>
   c286e:	bf00      	nop
   c2870:	000c596c 	.word	0x000c596c
   c2874:	000c58f9 	.word	0x000c58f9
   c2878:	000c590a 	.word	0x000c590a
   c287c:	1e71      	subs	r1, r6, #1
   c287e:	4620      	mov	r0, r4
   c2880:	f000 fe54 	bl	c352c <__any_on>
   c2884:	2800      	cmp	r0, #0
   c2886:	d1e6      	bne.n	c2856 <__gethex+0x2ca>
   c2888:	ee18 0a10 	vmov	r0, s16
   c288c:	4621      	mov	r1, r4
   c288e:	f000 f9ed 	bl	c2c6c <_Bfree>
   c2892:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2894:	2300      	movs	r3, #0
   c2896:	6013      	str	r3, [r2, #0]
   c2898:	2750      	movs	r7, #80	; 0x50
   c289a:	e70c      	b.n	c26b6 <__gethex+0x12a>
   c289c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c289e:	2b00      	cmp	r3, #0
   c28a0:	d1f2      	bne.n	c2888 <__gethex+0x2fc>
   c28a2:	e7d8      	b.n	c2856 <__gethex+0x2ca>
   c28a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c28a6:	2b00      	cmp	r3, #0
   c28a8:	d1d5      	bne.n	c2856 <__gethex+0x2ca>
   c28aa:	e7ed      	b.n	c2888 <__gethex+0x2fc>
   c28ac:	1e6f      	subs	r7, r5, #1
   c28ae:	f1ba 0f00 	cmp.w	sl, #0
   c28b2:	d131      	bne.n	c2918 <__gethex+0x38c>
   c28b4:	b127      	cbz	r7, c28c0 <__gethex+0x334>
   c28b6:	4639      	mov	r1, r7
   c28b8:	4620      	mov	r0, r4
   c28ba:	f000 fe37 	bl	c352c <__any_on>
   c28be:	4682      	mov	sl, r0
   c28c0:	117b      	asrs	r3, r7, #5
   c28c2:	2101      	movs	r1, #1
   c28c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c28c8:	f007 071f 	and.w	r7, r7, #31
   c28cc:	fa01 f707 	lsl.w	r7, r1, r7
   c28d0:	421f      	tst	r7, r3
   c28d2:	4629      	mov	r1, r5
   c28d4:	4620      	mov	r0, r4
   c28d6:	bf18      	it	ne
   c28d8:	f04a 0a02 	orrne.w	sl, sl, #2
   c28dc:	1b76      	subs	r6, r6, r5
   c28de:	f7ff fded 	bl	c24bc <rshift>
   c28e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c28e6:	2702      	movs	r7, #2
   c28e8:	f1ba 0f00 	cmp.w	sl, #0
   c28ec:	d048      	beq.n	c2980 <__gethex+0x3f4>
   c28ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c28f2:	2b02      	cmp	r3, #2
   c28f4:	d015      	beq.n	c2922 <__gethex+0x396>
   c28f6:	2b03      	cmp	r3, #3
   c28f8:	d017      	beq.n	c292a <__gethex+0x39e>
   c28fa:	2b01      	cmp	r3, #1
   c28fc:	d109      	bne.n	c2912 <__gethex+0x386>
   c28fe:	f01a 0f02 	tst.w	sl, #2
   c2902:	d006      	beq.n	c2912 <__gethex+0x386>
   c2904:	f8d9 0000 	ldr.w	r0, [r9]
   c2908:	ea4a 0a00 	orr.w	sl, sl, r0
   c290c:	f01a 0f01 	tst.w	sl, #1
   c2910:	d10e      	bne.n	c2930 <__gethex+0x3a4>
   c2912:	f047 0710 	orr.w	r7, r7, #16
   c2916:	e033      	b.n	c2980 <__gethex+0x3f4>
   c2918:	f04f 0a01 	mov.w	sl, #1
   c291c:	e7d0      	b.n	c28c0 <__gethex+0x334>
   c291e:	2701      	movs	r7, #1
   c2920:	e7e2      	b.n	c28e8 <__gethex+0x35c>
   c2922:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2924:	f1c3 0301 	rsb	r3, r3, #1
   c2928:	9315      	str	r3, [sp, #84]	; 0x54
   c292a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c292c:	2b00      	cmp	r3, #0
   c292e:	d0f0      	beq.n	c2912 <__gethex+0x386>
   c2930:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c2934:	f104 0314 	add.w	r3, r4, #20
   c2938:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c293c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c2940:	f04f 0c00 	mov.w	ip, #0
   c2944:	4618      	mov	r0, r3
   c2946:	f853 2b04 	ldr.w	r2, [r3], #4
   c294a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c294e:	d01c      	beq.n	c298a <__gethex+0x3fe>
   c2950:	3201      	adds	r2, #1
   c2952:	6002      	str	r2, [r0, #0]
   c2954:	2f02      	cmp	r7, #2
   c2956:	f104 0314 	add.w	r3, r4, #20
   c295a:	d13f      	bne.n	c29dc <__gethex+0x450>
   c295c:	f8d8 2000 	ldr.w	r2, [r8]
   c2960:	3a01      	subs	r2, #1
   c2962:	42b2      	cmp	r2, r6
   c2964:	d10a      	bne.n	c297c <__gethex+0x3f0>
   c2966:	1171      	asrs	r1, r6, #5
   c2968:	2201      	movs	r2, #1
   c296a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c296e:	f006 061f 	and.w	r6, r6, #31
   c2972:	fa02 f606 	lsl.w	r6, r2, r6
   c2976:	421e      	tst	r6, r3
   c2978:	bf18      	it	ne
   c297a:	4617      	movne	r7, r2
   c297c:	f047 0720 	orr.w	r7, r7, #32
   c2980:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2982:	601c      	str	r4, [r3, #0]
   c2984:	9b04      	ldr	r3, [sp, #16]
   c2986:	601d      	str	r5, [r3, #0]
   c2988:	e695      	b.n	c26b6 <__gethex+0x12a>
   c298a:	4299      	cmp	r1, r3
   c298c:	f843 cc04 	str.w	ip, [r3, #-4]
   c2990:	d8d8      	bhi.n	c2944 <__gethex+0x3b8>
   c2992:	68a3      	ldr	r3, [r4, #8]
   c2994:	459b      	cmp	fp, r3
   c2996:	db19      	blt.n	c29cc <__gethex+0x440>
   c2998:	6861      	ldr	r1, [r4, #4]
   c299a:	ee18 0a10 	vmov	r0, s16
   c299e:	3101      	adds	r1, #1
   c29a0:	f000 f924 	bl	c2bec <_Balloc>
   c29a4:	4681      	mov	r9, r0
   c29a6:	b918      	cbnz	r0, c29b0 <__gethex+0x424>
   c29a8:	4b1a      	ldr	r3, [pc, #104]	; (c2a14 <__gethex+0x488>)
   c29aa:	4602      	mov	r2, r0
   c29ac:	2184      	movs	r1, #132	; 0x84
   c29ae:	e6a8      	b.n	c2702 <__gethex+0x176>
   c29b0:	6922      	ldr	r2, [r4, #16]
   c29b2:	3202      	adds	r2, #2
   c29b4:	f104 010c 	add.w	r1, r4, #12
   c29b8:	0092      	lsls	r2, r2, #2
   c29ba:	300c      	adds	r0, #12
   c29bc:	f7fe fc20 	bl	c1200 <memcpy>
   c29c0:	4621      	mov	r1, r4
   c29c2:	ee18 0a10 	vmov	r0, s16
   c29c6:	f000 f951 	bl	c2c6c <_Bfree>
   c29ca:	464c      	mov	r4, r9
   c29cc:	6923      	ldr	r3, [r4, #16]
   c29ce:	1c5a      	adds	r2, r3, #1
   c29d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c29d4:	6122      	str	r2, [r4, #16]
   c29d6:	2201      	movs	r2, #1
   c29d8:	615a      	str	r2, [r3, #20]
   c29da:	e7bb      	b.n	c2954 <__gethex+0x3c8>
   c29dc:	6922      	ldr	r2, [r4, #16]
   c29de:	455a      	cmp	r2, fp
   c29e0:	dd0b      	ble.n	c29fa <__gethex+0x46e>
   c29e2:	2101      	movs	r1, #1
   c29e4:	4620      	mov	r0, r4
   c29e6:	f7ff fd69 	bl	c24bc <rshift>
   c29ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c29ee:	3501      	adds	r5, #1
   c29f0:	42ab      	cmp	r3, r5
   c29f2:	f6ff aed0 	blt.w	c2796 <__gethex+0x20a>
   c29f6:	2701      	movs	r7, #1
   c29f8:	e7c0      	b.n	c297c <__gethex+0x3f0>
   c29fa:	f016 061f 	ands.w	r6, r6, #31
   c29fe:	d0fa      	beq.n	c29f6 <__gethex+0x46a>
   c2a00:	4453      	add	r3, sl
   c2a02:	f1c6 0620 	rsb	r6, r6, #32
   c2a06:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c2a0a:	f000 f9e1 	bl	c2dd0 <__hi0bits>
   c2a0e:	42b0      	cmp	r0, r6
   c2a10:	dbe7      	blt.n	c29e2 <__gethex+0x456>
   c2a12:	e7f0      	b.n	c29f6 <__gethex+0x46a>
   c2a14:	000c58f9 	.word	0x000c58f9

000c2a18 <L_shift>:
   c2a18:	f1c2 0208 	rsb	r2, r2, #8
   c2a1c:	0092      	lsls	r2, r2, #2
   c2a1e:	b570      	push	{r4, r5, r6, lr}
   c2a20:	f1c2 0620 	rsb	r6, r2, #32
   c2a24:	6843      	ldr	r3, [r0, #4]
   c2a26:	6804      	ldr	r4, [r0, #0]
   c2a28:	fa03 f506 	lsl.w	r5, r3, r6
   c2a2c:	432c      	orrs	r4, r5
   c2a2e:	40d3      	lsrs	r3, r2
   c2a30:	6004      	str	r4, [r0, #0]
   c2a32:	f840 3f04 	str.w	r3, [r0, #4]!
   c2a36:	4288      	cmp	r0, r1
   c2a38:	d3f4      	bcc.n	c2a24 <L_shift+0xc>
   c2a3a:	bd70      	pop	{r4, r5, r6, pc}

000c2a3c <__match>:
   c2a3c:	b530      	push	{r4, r5, lr}
   c2a3e:	6803      	ldr	r3, [r0, #0]
   c2a40:	3301      	adds	r3, #1
   c2a42:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2a46:	b914      	cbnz	r4, c2a4e <__match+0x12>
   c2a48:	6003      	str	r3, [r0, #0]
   c2a4a:	2001      	movs	r0, #1
   c2a4c:	bd30      	pop	{r4, r5, pc}
   c2a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2a52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c2a56:	2d19      	cmp	r5, #25
   c2a58:	bf98      	it	ls
   c2a5a:	3220      	addls	r2, #32
   c2a5c:	42a2      	cmp	r2, r4
   c2a5e:	d0f0      	beq.n	c2a42 <__match+0x6>
   c2a60:	2000      	movs	r0, #0
   c2a62:	e7f3      	b.n	c2a4c <__match+0x10>

000c2a64 <__hexnan>:
   c2a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2a68:	680b      	ldr	r3, [r1, #0]
   c2a6a:	115e      	asrs	r6, r3, #5
   c2a6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2a70:	f013 031f 	ands.w	r3, r3, #31
   c2a74:	b087      	sub	sp, #28
   c2a76:	bf18      	it	ne
   c2a78:	3604      	addne	r6, #4
   c2a7a:	2500      	movs	r5, #0
   c2a7c:	1f37      	subs	r7, r6, #4
   c2a7e:	4690      	mov	r8, r2
   c2a80:	6802      	ldr	r2, [r0, #0]
   c2a82:	9301      	str	r3, [sp, #4]
   c2a84:	4682      	mov	sl, r0
   c2a86:	f846 5c04 	str.w	r5, [r6, #-4]
   c2a8a:	46b9      	mov	r9, r7
   c2a8c:	463c      	mov	r4, r7
   c2a8e:	9502      	str	r5, [sp, #8]
   c2a90:	46ab      	mov	fp, r5
   c2a92:	7851      	ldrb	r1, [r2, #1]
   c2a94:	1c53      	adds	r3, r2, #1
   c2a96:	9303      	str	r3, [sp, #12]
   c2a98:	b341      	cbz	r1, c2aec <__hexnan+0x88>
   c2a9a:	4608      	mov	r0, r1
   c2a9c:	9205      	str	r2, [sp, #20]
   c2a9e:	9104      	str	r1, [sp, #16]
   c2aa0:	f7ff fd5e 	bl	c2560 <__hexdig_fun>
   c2aa4:	2800      	cmp	r0, #0
   c2aa6:	d14f      	bne.n	c2b48 <__hexnan+0xe4>
   c2aa8:	9904      	ldr	r1, [sp, #16]
   c2aaa:	9a05      	ldr	r2, [sp, #20]
   c2aac:	2920      	cmp	r1, #32
   c2aae:	d818      	bhi.n	c2ae2 <__hexnan+0x7e>
   c2ab0:	9b02      	ldr	r3, [sp, #8]
   c2ab2:	459b      	cmp	fp, r3
   c2ab4:	dd13      	ble.n	c2ade <__hexnan+0x7a>
   c2ab6:	454c      	cmp	r4, r9
   c2ab8:	d206      	bcs.n	c2ac8 <__hexnan+0x64>
   c2aba:	2d07      	cmp	r5, #7
   c2abc:	dc04      	bgt.n	c2ac8 <__hexnan+0x64>
   c2abe:	462a      	mov	r2, r5
   c2ac0:	4649      	mov	r1, r9
   c2ac2:	4620      	mov	r0, r4
   c2ac4:	f7ff ffa8 	bl	c2a18 <L_shift>
   c2ac8:	4544      	cmp	r4, r8
   c2aca:	d950      	bls.n	c2b6e <__hexnan+0x10a>
   c2acc:	2300      	movs	r3, #0
   c2ace:	f1a4 0904 	sub.w	r9, r4, #4
   c2ad2:	f844 3c04 	str.w	r3, [r4, #-4]
   c2ad6:	f8cd b008 	str.w	fp, [sp, #8]
   c2ada:	464c      	mov	r4, r9
   c2adc:	461d      	mov	r5, r3
   c2ade:	9a03      	ldr	r2, [sp, #12]
   c2ae0:	e7d7      	b.n	c2a92 <__hexnan+0x2e>
   c2ae2:	2929      	cmp	r1, #41	; 0x29
   c2ae4:	d156      	bne.n	c2b94 <__hexnan+0x130>
   c2ae6:	3202      	adds	r2, #2
   c2ae8:	f8ca 2000 	str.w	r2, [sl]
   c2aec:	f1bb 0f00 	cmp.w	fp, #0
   c2af0:	d050      	beq.n	c2b94 <__hexnan+0x130>
   c2af2:	454c      	cmp	r4, r9
   c2af4:	d206      	bcs.n	c2b04 <__hexnan+0xa0>
   c2af6:	2d07      	cmp	r5, #7
   c2af8:	dc04      	bgt.n	c2b04 <__hexnan+0xa0>
   c2afa:	462a      	mov	r2, r5
   c2afc:	4649      	mov	r1, r9
   c2afe:	4620      	mov	r0, r4
   c2b00:	f7ff ff8a 	bl	c2a18 <L_shift>
   c2b04:	4544      	cmp	r4, r8
   c2b06:	d934      	bls.n	c2b72 <__hexnan+0x10e>
   c2b08:	f1a8 0204 	sub.w	r2, r8, #4
   c2b0c:	4623      	mov	r3, r4
   c2b0e:	f853 1b04 	ldr.w	r1, [r3], #4
   c2b12:	f842 1f04 	str.w	r1, [r2, #4]!
   c2b16:	429f      	cmp	r7, r3
   c2b18:	d2f9      	bcs.n	c2b0e <__hexnan+0xaa>
   c2b1a:	1b3b      	subs	r3, r7, r4
   c2b1c:	f023 0303 	bic.w	r3, r3, #3
   c2b20:	3304      	adds	r3, #4
   c2b22:	3401      	adds	r4, #1
   c2b24:	3e03      	subs	r6, #3
   c2b26:	42b4      	cmp	r4, r6
   c2b28:	bf88      	it	hi
   c2b2a:	2304      	movhi	r3, #4
   c2b2c:	4443      	add	r3, r8
   c2b2e:	2200      	movs	r2, #0
   c2b30:	f843 2b04 	str.w	r2, [r3], #4
   c2b34:	429f      	cmp	r7, r3
   c2b36:	d2fb      	bcs.n	c2b30 <__hexnan+0xcc>
   c2b38:	683b      	ldr	r3, [r7, #0]
   c2b3a:	b91b      	cbnz	r3, c2b44 <__hexnan+0xe0>
   c2b3c:	4547      	cmp	r7, r8
   c2b3e:	d127      	bne.n	c2b90 <__hexnan+0x12c>
   c2b40:	2301      	movs	r3, #1
   c2b42:	603b      	str	r3, [r7, #0]
   c2b44:	2005      	movs	r0, #5
   c2b46:	e026      	b.n	c2b96 <__hexnan+0x132>
   c2b48:	3501      	adds	r5, #1
   c2b4a:	2d08      	cmp	r5, #8
   c2b4c:	f10b 0b01 	add.w	fp, fp, #1
   c2b50:	dd06      	ble.n	c2b60 <__hexnan+0xfc>
   c2b52:	4544      	cmp	r4, r8
   c2b54:	d9c3      	bls.n	c2ade <__hexnan+0x7a>
   c2b56:	2300      	movs	r3, #0
   c2b58:	f844 3c04 	str.w	r3, [r4, #-4]
   c2b5c:	2501      	movs	r5, #1
   c2b5e:	3c04      	subs	r4, #4
   c2b60:	6822      	ldr	r2, [r4, #0]
   c2b62:	f000 000f 	and.w	r0, r0, #15
   c2b66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c2b6a:	6022      	str	r2, [r4, #0]
   c2b6c:	e7b7      	b.n	c2ade <__hexnan+0x7a>
   c2b6e:	2508      	movs	r5, #8
   c2b70:	e7b5      	b.n	c2ade <__hexnan+0x7a>
   c2b72:	9b01      	ldr	r3, [sp, #4]
   c2b74:	2b00      	cmp	r3, #0
   c2b76:	d0df      	beq.n	c2b38 <__hexnan+0xd4>
   c2b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2b7c:	f1c3 0320 	rsb	r3, r3, #32
   c2b80:	fa22 f303 	lsr.w	r3, r2, r3
   c2b84:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2b88:	401a      	ands	r2, r3
   c2b8a:	f846 2c04 	str.w	r2, [r6, #-4]
   c2b8e:	e7d3      	b.n	c2b38 <__hexnan+0xd4>
   c2b90:	3f04      	subs	r7, #4
   c2b92:	e7d1      	b.n	c2b38 <__hexnan+0xd4>
   c2b94:	2004      	movs	r0, #4
   c2b96:	b007      	add	sp, #28
   c2b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c2b9c <__retarget_lock_acquire_recursive>:
   c2b9c:	4770      	bx	lr

000c2b9e <__retarget_lock_release>:
   c2b9e:	4770      	bx	lr

000c2ba0 <__retarget_lock_release_recursive>:
   c2ba0:	4770      	bx	lr
	...

000c2ba4 <_lseek_r>:
   c2ba4:	b538      	push	{r3, r4, r5, lr}
   c2ba6:	4d07      	ldr	r5, [pc, #28]	; (c2bc4 <_lseek_r+0x20>)
   c2ba8:	4604      	mov	r4, r0
   c2baa:	4608      	mov	r0, r1
   c2bac:	4611      	mov	r1, r2
   c2bae:	2200      	movs	r2, #0
   c2bb0:	602a      	str	r2, [r5, #0]
   c2bb2:	461a      	mov	r2, r3
   c2bb4:	f7fa f92a 	bl	bce0c <_lseek>
   c2bb8:	1c43      	adds	r3, r0, #1
   c2bba:	d102      	bne.n	c2bc2 <_lseek_r+0x1e>
   c2bbc:	682b      	ldr	r3, [r5, #0]
   c2bbe:	b103      	cbz	r3, c2bc2 <_lseek_r+0x1e>
   c2bc0:	6023      	str	r3, [r4, #0]
   c2bc2:	bd38      	pop	{r3, r4, r5, pc}
   c2bc4:	2003e7f0 	.word	0x2003e7f0

000c2bc8 <__ascii_mbtowc>:
   c2bc8:	b082      	sub	sp, #8
   c2bca:	b901      	cbnz	r1, c2bce <__ascii_mbtowc+0x6>
   c2bcc:	a901      	add	r1, sp, #4
   c2bce:	b142      	cbz	r2, c2be2 <__ascii_mbtowc+0x1a>
   c2bd0:	b14b      	cbz	r3, c2be6 <__ascii_mbtowc+0x1e>
   c2bd2:	7813      	ldrb	r3, [r2, #0]
   c2bd4:	600b      	str	r3, [r1, #0]
   c2bd6:	7812      	ldrb	r2, [r2, #0]
   c2bd8:	1e10      	subs	r0, r2, #0
   c2bda:	bf18      	it	ne
   c2bdc:	2001      	movne	r0, #1
   c2bde:	b002      	add	sp, #8
   c2be0:	4770      	bx	lr
   c2be2:	4610      	mov	r0, r2
   c2be4:	e7fb      	b.n	c2bde <__ascii_mbtowc+0x16>
   c2be6:	f06f 0001 	mvn.w	r0, #1
   c2bea:	e7f8      	b.n	c2bde <__ascii_mbtowc+0x16>

000c2bec <_Balloc>:
   c2bec:	b570      	push	{r4, r5, r6, lr}
   c2bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2bf0:	4604      	mov	r4, r0
   c2bf2:	460d      	mov	r5, r1
   c2bf4:	b976      	cbnz	r6, c2c14 <_Balloc+0x28>
   c2bf6:	2010      	movs	r0, #16
   c2bf8:	f7fa fb4c 	bl	bd294 <malloc>
   c2bfc:	4602      	mov	r2, r0
   c2bfe:	6260      	str	r0, [r4, #36]	; 0x24
   c2c00:	b920      	cbnz	r0, c2c0c <_Balloc+0x20>
   c2c02:	4b18      	ldr	r3, [pc, #96]	; (c2c64 <_Balloc+0x78>)
   c2c04:	4818      	ldr	r0, [pc, #96]	; (c2c68 <_Balloc+0x7c>)
   c2c06:	2166      	movs	r1, #102	; 0x66
   c2c08:	f7fa fb94 	bl	bd334 <__assert_func>
   c2c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2c10:	6006      	str	r6, [r0, #0]
   c2c12:	60c6      	str	r6, [r0, #12]
   c2c14:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c2c16:	68f3      	ldr	r3, [r6, #12]
   c2c18:	b183      	cbz	r3, c2c3c <_Balloc+0x50>
   c2c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2c1c:	68db      	ldr	r3, [r3, #12]
   c2c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c2c22:	b9b8      	cbnz	r0, c2c54 <_Balloc+0x68>
   c2c24:	2101      	movs	r1, #1
   c2c26:	fa01 f605 	lsl.w	r6, r1, r5
   c2c2a:	1d72      	adds	r2, r6, #5
   c2c2c:	0092      	lsls	r2, r2, #2
   c2c2e:	4620      	mov	r0, r4
   c2c30:	f7fe fb16 	bl	c1260 <_calloc_r>
   c2c34:	b160      	cbz	r0, c2c50 <_Balloc+0x64>
   c2c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c2c3a:	e00e      	b.n	c2c5a <_Balloc+0x6e>
   c2c3c:	2221      	movs	r2, #33	; 0x21
   c2c3e:	2104      	movs	r1, #4
   c2c40:	4620      	mov	r0, r4
   c2c42:	f7fe fb0d 	bl	c1260 <_calloc_r>
   c2c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2c48:	60f0      	str	r0, [r6, #12]
   c2c4a:	68db      	ldr	r3, [r3, #12]
   c2c4c:	2b00      	cmp	r3, #0
   c2c4e:	d1e4      	bne.n	c2c1a <_Balloc+0x2e>
   c2c50:	2000      	movs	r0, #0
   c2c52:	bd70      	pop	{r4, r5, r6, pc}
   c2c54:	6802      	ldr	r2, [r0, #0]
   c2c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c2c5a:	2300      	movs	r3, #0
   c2c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c2c60:	e7f7      	b.n	c2c52 <_Balloc+0x66>
   c2c62:	bf00      	nop
   c2c64:	000c56d6 	.word	0x000c56d6
   c2c68:	000c5980 	.word	0x000c5980

000c2c6c <_Bfree>:
   c2c6c:	b570      	push	{r4, r5, r6, lr}
   c2c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2c70:	4605      	mov	r5, r0
   c2c72:	460c      	mov	r4, r1
   c2c74:	b976      	cbnz	r6, c2c94 <_Bfree+0x28>
   c2c76:	2010      	movs	r0, #16
   c2c78:	f7fa fb0c 	bl	bd294 <malloc>
   c2c7c:	4602      	mov	r2, r0
   c2c7e:	6268      	str	r0, [r5, #36]	; 0x24
   c2c80:	b920      	cbnz	r0, c2c8c <_Bfree+0x20>
   c2c82:	4b09      	ldr	r3, [pc, #36]	; (c2ca8 <_Bfree+0x3c>)
   c2c84:	4809      	ldr	r0, [pc, #36]	; (c2cac <_Bfree+0x40>)
   c2c86:	218a      	movs	r1, #138	; 0x8a
   c2c88:	f7fa fb54 	bl	bd334 <__assert_func>
   c2c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2c90:	6006      	str	r6, [r0, #0]
   c2c92:	60c6      	str	r6, [r0, #12]
   c2c94:	b13c      	cbz	r4, c2ca6 <_Bfree+0x3a>
   c2c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2c98:	6862      	ldr	r2, [r4, #4]
   c2c9a:	68db      	ldr	r3, [r3, #12]
   c2c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2ca0:	6021      	str	r1, [r4, #0]
   c2ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2ca6:	bd70      	pop	{r4, r5, r6, pc}
   c2ca8:	000c56d6 	.word	0x000c56d6
   c2cac:	000c5980 	.word	0x000c5980

000c2cb0 <__multadd>:
   c2cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2cb4:	690d      	ldr	r5, [r1, #16]
   c2cb6:	4607      	mov	r7, r0
   c2cb8:	460c      	mov	r4, r1
   c2cba:	461e      	mov	r6, r3
   c2cbc:	f101 0c14 	add.w	ip, r1, #20
   c2cc0:	2000      	movs	r0, #0
   c2cc2:	f8dc 3000 	ldr.w	r3, [ip]
   c2cc6:	b299      	uxth	r1, r3
   c2cc8:	fb02 6101 	mla	r1, r2, r1, r6
   c2ccc:	0c1e      	lsrs	r6, r3, #16
   c2cce:	0c0b      	lsrs	r3, r1, #16
   c2cd0:	fb02 3306 	mla	r3, r2, r6, r3
   c2cd4:	b289      	uxth	r1, r1
   c2cd6:	3001      	adds	r0, #1
   c2cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c2cdc:	4285      	cmp	r5, r0
   c2cde:	f84c 1b04 	str.w	r1, [ip], #4
   c2ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2ce6:	dcec      	bgt.n	c2cc2 <__multadd+0x12>
   c2ce8:	b30e      	cbz	r6, c2d2e <__multadd+0x7e>
   c2cea:	68a3      	ldr	r3, [r4, #8]
   c2cec:	42ab      	cmp	r3, r5
   c2cee:	dc19      	bgt.n	c2d24 <__multadd+0x74>
   c2cf0:	6861      	ldr	r1, [r4, #4]
   c2cf2:	4638      	mov	r0, r7
   c2cf4:	3101      	adds	r1, #1
   c2cf6:	f7ff ff79 	bl	c2bec <_Balloc>
   c2cfa:	4680      	mov	r8, r0
   c2cfc:	b928      	cbnz	r0, c2d0a <__multadd+0x5a>
   c2cfe:	4602      	mov	r2, r0
   c2d00:	4b0c      	ldr	r3, [pc, #48]	; (c2d34 <__multadd+0x84>)
   c2d02:	480d      	ldr	r0, [pc, #52]	; (c2d38 <__multadd+0x88>)
   c2d04:	21b5      	movs	r1, #181	; 0xb5
   c2d06:	f7fa fb15 	bl	bd334 <__assert_func>
   c2d0a:	6922      	ldr	r2, [r4, #16]
   c2d0c:	3202      	adds	r2, #2
   c2d0e:	f104 010c 	add.w	r1, r4, #12
   c2d12:	0092      	lsls	r2, r2, #2
   c2d14:	300c      	adds	r0, #12
   c2d16:	f7fe fa73 	bl	c1200 <memcpy>
   c2d1a:	4621      	mov	r1, r4
   c2d1c:	4638      	mov	r0, r7
   c2d1e:	f7ff ffa5 	bl	c2c6c <_Bfree>
   c2d22:	4644      	mov	r4, r8
   c2d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c2d28:	3501      	adds	r5, #1
   c2d2a:	615e      	str	r6, [r3, #20]
   c2d2c:	6125      	str	r5, [r4, #16]
   c2d2e:	4620      	mov	r0, r4
   c2d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2d34:	000c58f9 	.word	0x000c58f9
   c2d38:	000c5980 	.word	0x000c5980

000c2d3c <__s2b>:
   c2d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2d40:	460c      	mov	r4, r1
   c2d42:	4615      	mov	r5, r2
   c2d44:	461f      	mov	r7, r3
   c2d46:	2209      	movs	r2, #9
   c2d48:	3308      	adds	r3, #8
   c2d4a:	4606      	mov	r6, r0
   c2d4c:	fb93 f3f2 	sdiv	r3, r3, r2
   c2d50:	2100      	movs	r1, #0
   c2d52:	2201      	movs	r2, #1
   c2d54:	429a      	cmp	r2, r3
   c2d56:	db09      	blt.n	c2d6c <__s2b+0x30>
   c2d58:	4630      	mov	r0, r6
   c2d5a:	f7ff ff47 	bl	c2bec <_Balloc>
   c2d5e:	b940      	cbnz	r0, c2d72 <__s2b+0x36>
   c2d60:	4602      	mov	r2, r0
   c2d62:	4b19      	ldr	r3, [pc, #100]	; (c2dc8 <__s2b+0x8c>)
   c2d64:	4819      	ldr	r0, [pc, #100]	; (c2dcc <__s2b+0x90>)
   c2d66:	21ce      	movs	r1, #206	; 0xce
   c2d68:	f7fa fae4 	bl	bd334 <__assert_func>
   c2d6c:	0052      	lsls	r2, r2, #1
   c2d6e:	3101      	adds	r1, #1
   c2d70:	e7f0      	b.n	c2d54 <__s2b+0x18>
   c2d72:	9b08      	ldr	r3, [sp, #32]
   c2d74:	6143      	str	r3, [r0, #20]
   c2d76:	2d09      	cmp	r5, #9
   c2d78:	f04f 0301 	mov.w	r3, #1
   c2d7c:	6103      	str	r3, [r0, #16]
   c2d7e:	dd16      	ble.n	c2dae <__s2b+0x72>
   c2d80:	f104 0909 	add.w	r9, r4, #9
   c2d84:	46c8      	mov	r8, r9
   c2d86:	442c      	add	r4, r5
   c2d88:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2d8c:	4601      	mov	r1, r0
   c2d8e:	3b30      	subs	r3, #48	; 0x30
   c2d90:	220a      	movs	r2, #10
   c2d92:	4630      	mov	r0, r6
   c2d94:	f7ff ff8c 	bl	c2cb0 <__multadd>
   c2d98:	45a0      	cmp	r8, r4
   c2d9a:	d1f5      	bne.n	c2d88 <__s2b+0x4c>
   c2d9c:	f1a5 0408 	sub.w	r4, r5, #8
   c2da0:	444c      	add	r4, r9
   c2da2:	1b2d      	subs	r5, r5, r4
   c2da4:	1963      	adds	r3, r4, r5
   c2da6:	42bb      	cmp	r3, r7
   c2da8:	db04      	blt.n	c2db4 <__s2b+0x78>
   c2daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2dae:	340a      	adds	r4, #10
   c2db0:	2509      	movs	r5, #9
   c2db2:	e7f6      	b.n	c2da2 <__s2b+0x66>
   c2db4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2db8:	4601      	mov	r1, r0
   c2dba:	3b30      	subs	r3, #48	; 0x30
   c2dbc:	220a      	movs	r2, #10
   c2dbe:	4630      	mov	r0, r6
   c2dc0:	f7ff ff76 	bl	c2cb0 <__multadd>
   c2dc4:	e7ee      	b.n	c2da4 <__s2b+0x68>
   c2dc6:	bf00      	nop
   c2dc8:	000c58f9 	.word	0x000c58f9
   c2dcc:	000c5980 	.word	0x000c5980

000c2dd0 <__hi0bits>:
   c2dd0:	0c03      	lsrs	r3, r0, #16
   c2dd2:	041b      	lsls	r3, r3, #16
   c2dd4:	b9d3      	cbnz	r3, c2e0c <__hi0bits+0x3c>
   c2dd6:	0400      	lsls	r0, r0, #16
   c2dd8:	2310      	movs	r3, #16
   c2dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2dde:	bf04      	itt	eq
   c2de0:	0200      	lsleq	r0, r0, #8
   c2de2:	3308      	addeq	r3, #8
   c2de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2de8:	bf04      	itt	eq
   c2dea:	0100      	lsleq	r0, r0, #4
   c2dec:	3304      	addeq	r3, #4
   c2dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2df2:	bf04      	itt	eq
   c2df4:	0080      	lsleq	r0, r0, #2
   c2df6:	3302      	addeq	r3, #2
   c2df8:	2800      	cmp	r0, #0
   c2dfa:	db05      	blt.n	c2e08 <__hi0bits+0x38>
   c2dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2e00:	f103 0301 	add.w	r3, r3, #1
   c2e04:	bf08      	it	eq
   c2e06:	2320      	moveq	r3, #32
   c2e08:	4618      	mov	r0, r3
   c2e0a:	4770      	bx	lr
   c2e0c:	2300      	movs	r3, #0
   c2e0e:	e7e4      	b.n	c2dda <__hi0bits+0xa>

000c2e10 <__lo0bits>:
   c2e10:	6803      	ldr	r3, [r0, #0]
   c2e12:	f013 0207 	ands.w	r2, r3, #7
   c2e16:	4601      	mov	r1, r0
   c2e18:	d00b      	beq.n	c2e32 <__lo0bits+0x22>
   c2e1a:	07da      	lsls	r2, r3, #31
   c2e1c:	d423      	bmi.n	c2e66 <__lo0bits+0x56>
   c2e1e:	0798      	lsls	r0, r3, #30
   c2e20:	bf49      	itett	mi
   c2e22:	085b      	lsrmi	r3, r3, #1
   c2e24:	089b      	lsrpl	r3, r3, #2
   c2e26:	2001      	movmi	r0, #1
   c2e28:	600b      	strmi	r3, [r1, #0]
   c2e2a:	bf5c      	itt	pl
   c2e2c:	600b      	strpl	r3, [r1, #0]
   c2e2e:	2002      	movpl	r0, #2
   c2e30:	4770      	bx	lr
   c2e32:	b298      	uxth	r0, r3
   c2e34:	b9a8      	cbnz	r0, c2e62 <__lo0bits+0x52>
   c2e36:	0c1b      	lsrs	r3, r3, #16
   c2e38:	2010      	movs	r0, #16
   c2e3a:	b2da      	uxtb	r2, r3
   c2e3c:	b90a      	cbnz	r2, c2e42 <__lo0bits+0x32>
   c2e3e:	3008      	adds	r0, #8
   c2e40:	0a1b      	lsrs	r3, r3, #8
   c2e42:	071a      	lsls	r2, r3, #28
   c2e44:	bf04      	itt	eq
   c2e46:	091b      	lsreq	r3, r3, #4
   c2e48:	3004      	addeq	r0, #4
   c2e4a:	079a      	lsls	r2, r3, #30
   c2e4c:	bf04      	itt	eq
   c2e4e:	089b      	lsreq	r3, r3, #2
   c2e50:	3002      	addeq	r0, #2
   c2e52:	07da      	lsls	r2, r3, #31
   c2e54:	d403      	bmi.n	c2e5e <__lo0bits+0x4e>
   c2e56:	085b      	lsrs	r3, r3, #1
   c2e58:	f100 0001 	add.w	r0, r0, #1
   c2e5c:	d005      	beq.n	c2e6a <__lo0bits+0x5a>
   c2e5e:	600b      	str	r3, [r1, #0]
   c2e60:	4770      	bx	lr
   c2e62:	4610      	mov	r0, r2
   c2e64:	e7e9      	b.n	c2e3a <__lo0bits+0x2a>
   c2e66:	2000      	movs	r0, #0
   c2e68:	4770      	bx	lr
   c2e6a:	2020      	movs	r0, #32
   c2e6c:	4770      	bx	lr
	...

000c2e70 <__i2b>:
   c2e70:	b510      	push	{r4, lr}
   c2e72:	460c      	mov	r4, r1
   c2e74:	2101      	movs	r1, #1
   c2e76:	f7ff feb9 	bl	c2bec <_Balloc>
   c2e7a:	4602      	mov	r2, r0
   c2e7c:	b928      	cbnz	r0, c2e8a <__i2b+0x1a>
   c2e7e:	4b05      	ldr	r3, [pc, #20]	; (c2e94 <__i2b+0x24>)
   c2e80:	4805      	ldr	r0, [pc, #20]	; (c2e98 <__i2b+0x28>)
   c2e82:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c2e86:	f7fa fa55 	bl	bd334 <__assert_func>
   c2e8a:	2301      	movs	r3, #1
   c2e8c:	6144      	str	r4, [r0, #20]
   c2e8e:	6103      	str	r3, [r0, #16]
   c2e90:	bd10      	pop	{r4, pc}
   c2e92:	bf00      	nop
   c2e94:	000c58f9 	.word	0x000c58f9
   c2e98:	000c5980 	.word	0x000c5980

000c2e9c <__multiply>:
   c2e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2ea0:	4691      	mov	r9, r2
   c2ea2:	690a      	ldr	r2, [r1, #16]
   c2ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c2ea8:	429a      	cmp	r2, r3
   c2eaa:	bfb8      	it	lt
   c2eac:	460b      	movlt	r3, r1
   c2eae:	460c      	mov	r4, r1
   c2eb0:	bfbc      	itt	lt
   c2eb2:	464c      	movlt	r4, r9
   c2eb4:	4699      	movlt	r9, r3
   c2eb6:	6927      	ldr	r7, [r4, #16]
   c2eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c2ebc:	68a3      	ldr	r3, [r4, #8]
   c2ebe:	6861      	ldr	r1, [r4, #4]
   c2ec0:	eb07 060a 	add.w	r6, r7, sl
   c2ec4:	42b3      	cmp	r3, r6
   c2ec6:	b085      	sub	sp, #20
   c2ec8:	bfb8      	it	lt
   c2eca:	3101      	addlt	r1, #1
   c2ecc:	f7ff fe8e 	bl	c2bec <_Balloc>
   c2ed0:	b930      	cbnz	r0, c2ee0 <__multiply+0x44>
   c2ed2:	4602      	mov	r2, r0
   c2ed4:	4b44      	ldr	r3, [pc, #272]	; (c2fe8 <__multiply+0x14c>)
   c2ed6:	4845      	ldr	r0, [pc, #276]	; (c2fec <__multiply+0x150>)
   c2ed8:	f240 115d 	movw	r1, #349	; 0x15d
   c2edc:	f7fa fa2a 	bl	bd334 <__assert_func>
   c2ee0:	f100 0514 	add.w	r5, r0, #20
   c2ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c2ee8:	462b      	mov	r3, r5
   c2eea:	2200      	movs	r2, #0
   c2eec:	4543      	cmp	r3, r8
   c2eee:	d321      	bcc.n	c2f34 <__multiply+0x98>
   c2ef0:	f104 0314 	add.w	r3, r4, #20
   c2ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c2ef8:	f109 0314 	add.w	r3, r9, #20
   c2efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c2f00:	9202      	str	r2, [sp, #8]
   c2f02:	1b3a      	subs	r2, r7, r4
   c2f04:	3a15      	subs	r2, #21
   c2f06:	f022 0203 	bic.w	r2, r2, #3
   c2f0a:	3204      	adds	r2, #4
   c2f0c:	f104 0115 	add.w	r1, r4, #21
   c2f10:	428f      	cmp	r7, r1
   c2f12:	bf38      	it	cc
   c2f14:	2204      	movcc	r2, #4
   c2f16:	9201      	str	r2, [sp, #4]
   c2f18:	9a02      	ldr	r2, [sp, #8]
   c2f1a:	9303      	str	r3, [sp, #12]
   c2f1c:	429a      	cmp	r2, r3
   c2f1e:	d80c      	bhi.n	c2f3a <__multiply+0x9e>
   c2f20:	2e00      	cmp	r6, #0
   c2f22:	dd03      	ble.n	c2f2c <__multiply+0x90>
   c2f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c2f28:	2b00      	cmp	r3, #0
   c2f2a:	d05a      	beq.n	c2fe2 <__multiply+0x146>
   c2f2c:	6106      	str	r6, [r0, #16]
   c2f2e:	b005      	add	sp, #20
   c2f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2f34:	f843 2b04 	str.w	r2, [r3], #4
   c2f38:	e7d8      	b.n	c2eec <__multiply+0x50>
   c2f3a:	f8b3 a000 	ldrh.w	sl, [r3]
   c2f3e:	f1ba 0f00 	cmp.w	sl, #0
   c2f42:	d024      	beq.n	c2f8e <__multiply+0xf2>
   c2f44:	f104 0e14 	add.w	lr, r4, #20
   c2f48:	46a9      	mov	r9, r5
   c2f4a:	f04f 0c00 	mov.w	ip, #0
   c2f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c2f52:	f8d9 1000 	ldr.w	r1, [r9]
   c2f56:	fa1f fb82 	uxth.w	fp, r2
   c2f5a:	b289      	uxth	r1, r1
   c2f5c:	fb0a 110b 	mla	r1, sl, fp, r1
   c2f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c2f64:	f8d9 2000 	ldr.w	r2, [r9]
   c2f68:	4461      	add	r1, ip
   c2f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2f6e:	fb0a c20b 	mla	r2, sl, fp, ip
   c2f72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c2f76:	b289      	uxth	r1, r1
   c2f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c2f7c:	4577      	cmp	r7, lr
   c2f7e:	f849 1b04 	str.w	r1, [r9], #4
   c2f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2f86:	d8e2      	bhi.n	c2f4e <__multiply+0xb2>
   c2f88:	9a01      	ldr	r2, [sp, #4]
   c2f8a:	f845 c002 	str.w	ip, [r5, r2]
   c2f8e:	9a03      	ldr	r2, [sp, #12]
   c2f90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c2f94:	3304      	adds	r3, #4
   c2f96:	f1b9 0f00 	cmp.w	r9, #0
   c2f9a:	d020      	beq.n	c2fde <__multiply+0x142>
   c2f9c:	6829      	ldr	r1, [r5, #0]
   c2f9e:	f104 0c14 	add.w	ip, r4, #20
   c2fa2:	46ae      	mov	lr, r5
   c2fa4:	f04f 0a00 	mov.w	sl, #0
   c2fa8:	f8bc b000 	ldrh.w	fp, [ip]
   c2fac:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c2fb0:	fb09 220b 	mla	r2, r9, fp, r2
   c2fb4:	4492      	add	sl, r2
   c2fb6:	b289      	uxth	r1, r1
   c2fb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c2fbc:	f84e 1b04 	str.w	r1, [lr], #4
   c2fc0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c2fc4:	f8be 1000 	ldrh.w	r1, [lr]
   c2fc8:	0c12      	lsrs	r2, r2, #16
   c2fca:	fb09 1102 	mla	r1, r9, r2, r1
   c2fce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c2fd2:	4567      	cmp	r7, ip
   c2fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c2fd8:	d8e6      	bhi.n	c2fa8 <__multiply+0x10c>
   c2fda:	9a01      	ldr	r2, [sp, #4]
   c2fdc:	50a9      	str	r1, [r5, r2]
   c2fde:	3504      	adds	r5, #4
   c2fe0:	e79a      	b.n	c2f18 <__multiply+0x7c>
   c2fe2:	3e01      	subs	r6, #1
   c2fe4:	e79c      	b.n	c2f20 <__multiply+0x84>
   c2fe6:	bf00      	nop
   c2fe8:	000c58f9 	.word	0x000c58f9
   c2fec:	000c5980 	.word	0x000c5980

000c2ff0 <__pow5mult>:
   c2ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2ff4:	4615      	mov	r5, r2
   c2ff6:	f012 0203 	ands.w	r2, r2, #3
   c2ffa:	4606      	mov	r6, r0
   c2ffc:	460f      	mov	r7, r1
   c2ffe:	d007      	beq.n	c3010 <__pow5mult+0x20>
   c3000:	4c25      	ldr	r4, [pc, #148]	; (c3098 <__pow5mult+0xa8>)
   c3002:	3a01      	subs	r2, #1
   c3004:	2300      	movs	r3, #0
   c3006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c300a:	f7ff fe51 	bl	c2cb0 <__multadd>
   c300e:	4607      	mov	r7, r0
   c3010:	10ad      	asrs	r5, r5, #2
   c3012:	d03d      	beq.n	c3090 <__pow5mult+0xa0>
   c3014:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c3016:	b97c      	cbnz	r4, c3038 <__pow5mult+0x48>
   c3018:	2010      	movs	r0, #16
   c301a:	f7fa f93b 	bl	bd294 <malloc>
   c301e:	4602      	mov	r2, r0
   c3020:	6270      	str	r0, [r6, #36]	; 0x24
   c3022:	b928      	cbnz	r0, c3030 <__pow5mult+0x40>
   c3024:	4b1d      	ldr	r3, [pc, #116]	; (c309c <__pow5mult+0xac>)
   c3026:	481e      	ldr	r0, [pc, #120]	; (c30a0 <__pow5mult+0xb0>)
   c3028:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c302c:	f7fa f982 	bl	bd334 <__assert_func>
   c3030:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c3034:	6004      	str	r4, [r0, #0]
   c3036:	60c4      	str	r4, [r0, #12]
   c3038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c303c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c3040:	b94c      	cbnz	r4, c3056 <__pow5mult+0x66>
   c3042:	f240 2171 	movw	r1, #625	; 0x271
   c3046:	4630      	mov	r0, r6
   c3048:	f7ff ff12 	bl	c2e70 <__i2b>
   c304c:	2300      	movs	r3, #0
   c304e:	f8c8 0008 	str.w	r0, [r8, #8]
   c3052:	4604      	mov	r4, r0
   c3054:	6003      	str	r3, [r0, #0]
   c3056:	f04f 0900 	mov.w	r9, #0
   c305a:	07eb      	lsls	r3, r5, #31
   c305c:	d50a      	bpl.n	c3074 <__pow5mult+0x84>
   c305e:	4639      	mov	r1, r7
   c3060:	4622      	mov	r2, r4
   c3062:	4630      	mov	r0, r6
   c3064:	f7ff ff1a 	bl	c2e9c <__multiply>
   c3068:	4639      	mov	r1, r7
   c306a:	4680      	mov	r8, r0
   c306c:	4630      	mov	r0, r6
   c306e:	f7ff fdfd 	bl	c2c6c <_Bfree>
   c3072:	4647      	mov	r7, r8
   c3074:	106d      	asrs	r5, r5, #1
   c3076:	d00b      	beq.n	c3090 <__pow5mult+0xa0>
   c3078:	6820      	ldr	r0, [r4, #0]
   c307a:	b938      	cbnz	r0, c308c <__pow5mult+0x9c>
   c307c:	4622      	mov	r2, r4
   c307e:	4621      	mov	r1, r4
   c3080:	4630      	mov	r0, r6
   c3082:	f7ff ff0b 	bl	c2e9c <__multiply>
   c3086:	6020      	str	r0, [r4, #0]
   c3088:	f8c0 9000 	str.w	r9, [r0]
   c308c:	4604      	mov	r4, r0
   c308e:	e7e4      	b.n	c305a <__pow5mult+0x6a>
   c3090:	4638      	mov	r0, r7
   c3092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3096:	bf00      	nop
   c3098:	000c5ad0 	.word	0x000c5ad0
   c309c:	000c56d6 	.word	0x000c56d6
   c30a0:	000c5980 	.word	0x000c5980

000c30a4 <__lshift>:
   c30a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c30a8:	460c      	mov	r4, r1
   c30aa:	6849      	ldr	r1, [r1, #4]
   c30ac:	6923      	ldr	r3, [r4, #16]
   c30ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c30b2:	68a3      	ldr	r3, [r4, #8]
   c30b4:	4607      	mov	r7, r0
   c30b6:	4691      	mov	r9, r2
   c30b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c30bc:	f108 0601 	add.w	r6, r8, #1
   c30c0:	42b3      	cmp	r3, r6
   c30c2:	db0b      	blt.n	c30dc <__lshift+0x38>
   c30c4:	4638      	mov	r0, r7
   c30c6:	f7ff fd91 	bl	c2bec <_Balloc>
   c30ca:	4605      	mov	r5, r0
   c30cc:	b948      	cbnz	r0, c30e2 <__lshift+0x3e>
   c30ce:	4602      	mov	r2, r0
   c30d0:	4b2a      	ldr	r3, [pc, #168]	; (c317c <__lshift+0xd8>)
   c30d2:	482b      	ldr	r0, [pc, #172]	; (c3180 <__lshift+0xdc>)
   c30d4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c30d8:	f7fa f92c 	bl	bd334 <__assert_func>
   c30dc:	3101      	adds	r1, #1
   c30de:	005b      	lsls	r3, r3, #1
   c30e0:	e7ee      	b.n	c30c0 <__lshift+0x1c>
   c30e2:	2300      	movs	r3, #0
   c30e4:	f100 0114 	add.w	r1, r0, #20
   c30e8:	f100 0210 	add.w	r2, r0, #16
   c30ec:	4618      	mov	r0, r3
   c30ee:	4553      	cmp	r3, sl
   c30f0:	db37      	blt.n	c3162 <__lshift+0xbe>
   c30f2:	6920      	ldr	r0, [r4, #16]
   c30f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c30f8:	f104 0314 	add.w	r3, r4, #20
   c30fc:	f019 091f 	ands.w	r9, r9, #31
   c3100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c3104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3108:	d02f      	beq.n	c316a <__lshift+0xc6>
   c310a:	f1c9 0e20 	rsb	lr, r9, #32
   c310e:	468a      	mov	sl, r1
   c3110:	f04f 0c00 	mov.w	ip, #0
   c3114:	681a      	ldr	r2, [r3, #0]
   c3116:	fa02 f209 	lsl.w	r2, r2, r9
   c311a:	ea42 020c 	orr.w	r2, r2, ip
   c311e:	f84a 2b04 	str.w	r2, [sl], #4
   c3122:	f853 2b04 	ldr.w	r2, [r3], #4
   c3126:	4298      	cmp	r0, r3
   c3128:	fa22 fc0e 	lsr.w	ip, r2, lr
   c312c:	d8f2      	bhi.n	c3114 <__lshift+0x70>
   c312e:	1b03      	subs	r3, r0, r4
   c3130:	3b15      	subs	r3, #21
   c3132:	f023 0303 	bic.w	r3, r3, #3
   c3136:	3304      	adds	r3, #4
   c3138:	f104 0215 	add.w	r2, r4, #21
   c313c:	4290      	cmp	r0, r2
   c313e:	bf38      	it	cc
   c3140:	2304      	movcc	r3, #4
   c3142:	f841 c003 	str.w	ip, [r1, r3]
   c3146:	f1bc 0f00 	cmp.w	ip, #0
   c314a:	d001      	beq.n	c3150 <__lshift+0xac>
   c314c:	f108 0602 	add.w	r6, r8, #2
   c3150:	3e01      	subs	r6, #1
   c3152:	4638      	mov	r0, r7
   c3154:	612e      	str	r6, [r5, #16]
   c3156:	4621      	mov	r1, r4
   c3158:	f7ff fd88 	bl	c2c6c <_Bfree>
   c315c:	4628      	mov	r0, r5
   c315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3162:	f842 0f04 	str.w	r0, [r2, #4]!
   c3166:	3301      	adds	r3, #1
   c3168:	e7c1      	b.n	c30ee <__lshift+0x4a>
   c316a:	3904      	subs	r1, #4
   c316c:	f853 2b04 	ldr.w	r2, [r3], #4
   c3170:	f841 2f04 	str.w	r2, [r1, #4]!
   c3174:	4298      	cmp	r0, r3
   c3176:	d8f9      	bhi.n	c316c <__lshift+0xc8>
   c3178:	e7ea      	b.n	c3150 <__lshift+0xac>
   c317a:	bf00      	nop
   c317c:	000c58f9 	.word	0x000c58f9
   c3180:	000c5980 	.word	0x000c5980

000c3184 <__mcmp>:
   c3184:	b530      	push	{r4, r5, lr}
   c3186:	6902      	ldr	r2, [r0, #16]
   c3188:	690c      	ldr	r4, [r1, #16]
   c318a:	1b12      	subs	r2, r2, r4
   c318c:	d10e      	bne.n	c31ac <__mcmp+0x28>
   c318e:	f100 0314 	add.w	r3, r0, #20
   c3192:	3114      	adds	r1, #20
   c3194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c3198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c319c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c31a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c31a4:	42a5      	cmp	r5, r4
   c31a6:	d003      	beq.n	c31b0 <__mcmp+0x2c>
   c31a8:	d305      	bcc.n	c31b6 <__mcmp+0x32>
   c31aa:	2201      	movs	r2, #1
   c31ac:	4610      	mov	r0, r2
   c31ae:	bd30      	pop	{r4, r5, pc}
   c31b0:	4283      	cmp	r3, r0
   c31b2:	d3f3      	bcc.n	c319c <__mcmp+0x18>
   c31b4:	e7fa      	b.n	c31ac <__mcmp+0x28>
   c31b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c31ba:	e7f7      	b.n	c31ac <__mcmp+0x28>

000c31bc <__mdiff>:
   c31bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c31c0:	460c      	mov	r4, r1
   c31c2:	4606      	mov	r6, r0
   c31c4:	4611      	mov	r1, r2
   c31c6:	4620      	mov	r0, r4
   c31c8:	4690      	mov	r8, r2
   c31ca:	f7ff ffdb 	bl	c3184 <__mcmp>
   c31ce:	1e05      	subs	r5, r0, #0
   c31d0:	d110      	bne.n	c31f4 <__mdiff+0x38>
   c31d2:	4629      	mov	r1, r5
   c31d4:	4630      	mov	r0, r6
   c31d6:	f7ff fd09 	bl	c2bec <_Balloc>
   c31da:	b930      	cbnz	r0, c31ea <__mdiff+0x2e>
   c31dc:	4b3a      	ldr	r3, [pc, #232]	; (c32c8 <__mdiff+0x10c>)
   c31de:	4602      	mov	r2, r0
   c31e0:	f240 2132 	movw	r1, #562	; 0x232
   c31e4:	4839      	ldr	r0, [pc, #228]	; (c32cc <__mdiff+0x110>)
   c31e6:	f7fa f8a5 	bl	bd334 <__assert_func>
   c31ea:	2301      	movs	r3, #1
   c31ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c31f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c31f4:	bfa4      	itt	ge
   c31f6:	4643      	movge	r3, r8
   c31f8:	46a0      	movge	r8, r4
   c31fa:	4630      	mov	r0, r6
   c31fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3200:	bfa6      	itte	ge
   c3202:	461c      	movge	r4, r3
   c3204:	2500      	movge	r5, #0
   c3206:	2501      	movlt	r5, #1
   c3208:	f7ff fcf0 	bl	c2bec <_Balloc>
   c320c:	b920      	cbnz	r0, c3218 <__mdiff+0x5c>
   c320e:	4b2e      	ldr	r3, [pc, #184]	; (c32c8 <__mdiff+0x10c>)
   c3210:	4602      	mov	r2, r0
   c3212:	f44f 7110 	mov.w	r1, #576	; 0x240
   c3216:	e7e5      	b.n	c31e4 <__mdiff+0x28>
   c3218:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c321c:	6926      	ldr	r6, [r4, #16]
   c321e:	60c5      	str	r5, [r0, #12]
   c3220:	f104 0914 	add.w	r9, r4, #20
   c3224:	f108 0514 	add.w	r5, r8, #20
   c3228:	f100 0e14 	add.w	lr, r0, #20
   c322c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c3234:	f108 0210 	add.w	r2, r8, #16
   c3238:	46f2      	mov	sl, lr
   c323a:	2100      	movs	r1, #0
   c323c:	f859 3b04 	ldr.w	r3, [r9], #4
   c3240:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c3244:	fa1f f883 	uxth.w	r8, r3
   c3248:	fa11 f18b 	uxtah	r1, r1, fp
   c324c:	0c1b      	lsrs	r3, r3, #16
   c324e:	eba1 0808 	sub.w	r8, r1, r8
   c3252:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c3256:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c325a:	fa1f f888 	uxth.w	r8, r8
   c325e:	1419      	asrs	r1, r3, #16
   c3260:	454e      	cmp	r6, r9
   c3262:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c3266:	f84a 3b04 	str.w	r3, [sl], #4
   c326a:	d8e7      	bhi.n	c323c <__mdiff+0x80>
   c326c:	1b33      	subs	r3, r6, r4
   c326e:	3b15      	subs	r3, #21
   c3270:	f023 0303 	bic.w	r3, r3, #3
   c3274:	3304      	adds	r3, #4
   c3276:	3415      	adds	r4, #21
   c3278:	42a6      	cmp	r6, r4
   c327a:	bf38      	it	cc
   c327c:	2304      	movcc	r3, #4
   c327e:	441d      	add	r5, r3
   c3280:	4473      	add	r3, lr
   c3282:	469e      	mov	lr, r3
   c3284:	462e      	mov	r6, r5
   c3286:	4566      	cmp	r6, ip
   c3288:	d30e      	bcc.n	c32a8 <__mdiff+0xec>
   c328a:	f10c 0203 	add.w	r2, ip, #3
   c328e:	1b52      	subs	r2, r2, r5
   c3290:	f022 0203 	bic.w	r2, r2, #3
   c3294:	3d03      	subs	r5, #3
   c3296:	45ac      	cmp	ip, r5
   c3298:	bf38      	it	cc
   c329a:	2200      	movcc	r2, #0
   c329c:	441a      	add	r2, r3
   c329e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c32a2:	b17b      	cbz	r3, c32c4 <__mdiff+0x108>
   c32a4:	6107      	str	r7, [r0, #16]
   c32a6:	e7a3      	b.n	c31f0 <__mdiff+0x34>
   c32a8:	f856 8b04 	ldr.w	r8, [r6], #4
   c32ac:	fa11 f288 	uxtah	r2, r1, r8
   c32b0:	1414      	asrs	r4, r2, #16
   c32b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c32b6:	b292      	uxth	r2, r2
   c32b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c32bc:	f84e 2b04 	str.w	r2, [lr], #4
   c32c0:	1421      	asrs	r1, r4, #16
   c32c2:	e7e0      	b.n	c3286 <__mdiff+0xca>
   c32c4:	3f01      	subs	r7, #1
   c32c6:	e7ea      	b.n	c329e <__mdiff+0xe2>
   c32c8:	000c58f9 	.word	0x000c58f9
   c32cc:	000c5980 	.word	0x000c5980

000c32d0 <__ulp>:
   c32d0:	b082      	sub	sp, #8
   c32d2:	ed8d 0b00 	vstr	d0, [sp]
   c32d6:	9b01      	ldr	r3, [sp, #4]
   c32d8:	4912      	ldr	r1, [pc, #72]	; (c3324 <__ulp+0x54>)
   c32da:	4019      	ands	r1, r3
   c32dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c32e0:	2900      	cmp	r1, #0
   c32e2:	dd05      	ble.n	c32f0 <__ulp+0x20>
   c32e4:	2200      	movs	r2, #0
   c32e6:	460b      	mov	r3, r1
   c32e8:	ec43 2b10 	vmov	d0, r2, r3
   c32ec:	b002      	add	sp, #8
   c32ee:	4770      	bx	lr
   c32f0:	4249      	negs	r1, r1
   c32f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c32f6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c32fa:	f04f 0200 	mov.w	r2, #0
   c32fe:	f04f 0300 	mov.w	r3, #0
   c3302:	da04      	bge.n	c330e <__ulp+0x3e>
   c3304:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c3308:	fa41 f300 	asr.w	r3, r1, r0
   c330c:	e7ec      	b.n	c32e8 <__ulp+0x18>
   c330e:	f1a0 0114 	sub.w	r1, r0, #20
   c3312:	291e      	cmp	r1, #30
   c3314:	bfda      	itte	le
   c3316:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c331a:	fa20 f101 	lsrle.w	r1, r0, r1
   c331e:	2101      	movgt	r1, #1
   c3320:	460a      	mov	r2, r1
   c3322:	e7e1      	b.n	c32e8 <__ulp+0x18>
   c3324:	7ff00000 	.word	0x7ff00000

000c3328 <__b2d>:
   c3328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c332a:	6905      	ldr	r5, [r0, #16]
   c332c:	f100 0714 	add.w	r7, r0, #20
   c3330:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c3334:	1f2e      	subs	r6, r5, #4
   c3336:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c333a:	4620      	mov	r0, r4
   c333c:	f7ff fd48 	bl	c2dd0 <__hi0bits>
   c3340:	f1c0 0320 	rsb	r3, r0, #32
   c3344:	280a      	cmp	r0, #10
   c3346:	f8df c07c 	ldr.w	ip, [pc, #124]	; c33c4 <__b2d+0x9c>
   c334a:	600b      	str	r3, [r1, #0]
   c334c:	dc14      	bgt.n	c3378 <__b2d+0x50>
   c334e:	f1c0 0e0b 	rsb	lr, r0, #11
   c3352:	fa24 f10e 	lsr.w	r1, r4, lr
   c3356:	42b7      	cmp	r7, r6
   c3358:	ea41 030c 	orr.w	r3, r1, ip
   c335c:	bf34      	ite	cc
   c335e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3362:	2100      	movcs	r1, #0
   c3364:	3015      	adds	r0, #21
   c3366:	fa04 f000 	lsl.w	r0, r4, r0
   c336a:	fa21 f10e 	lsr.w	r1, r1, lr
   c336e:	ea40 0201 	orr.w	r2, r0, r1
   c3372:	ec43 2b10 	vmov	d0, r2, r3
   c3376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3378:	42b7      	cmp	r7, r6
   c337a:	bf3a      	itte	cc
   c337c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3380:	f1a5 0608 	subcc.w	r6, r5, #8
   c3384:	2100      	movcs	r1, #0
   c3386:	380b      	subs	r0, #11
   c3388:	d017      	beq.n	c33ba <__b2d+0x92>
   c338a:	f1c0 0c20 	rsb	ip, r0, #32
   c338e:	fa04 f500 	lsl.w	r5, r4, r0
   c3392:	42be      	cmp	r6, r7
   c3394:	fa21 f40c 	lsr.w	r4, r1, ip
   c3398:	ea45 0504 	orr.w	r5, r5, r4
   c339c:	bf8c      	ite	hi
   c339e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c33a2:	2400      	movls	r4, #0
   c33a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c33a8:	fa01 f000 	lsl.w	r0, r1, r0
   c33ac:	fa24 f40c 	lsr.w	r4, r4, ip
   c33b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c33b4:	ea40 0204 	orr.w	r2, r0, r4
   c33b8:	e7db      	b.n	c3372 <__b2d+0x4a>
   c33ba:	ea44 030c 	orr.w	r3, r4, ip
   c33be:	460a      	mov	r2, r1
   c33c0:	e7d7      	b.n	c3372 <__b2d+0x4a>
   c33c2:	bf00      	nop
   c33c4:	3ff00000 	.word	0x3ff00000

000c33c8 <__d2b>:
   c33c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c33cc:	4689      	mov	r9, r1
   c33ce:	2101      	movs	r1, #1
   c33d0:	ec57 6b10 	vmov	r6, r7, d0
   c33d4:	4690      	mov	r8, r2
   c33d6:	f7ff fc09 	bl	c2bec <_Balloc>
   c33da:	4604      	mov	r4, r0
   c33dc:	b930      	cbnz	r0, c33ec <__d2b+0x24>
   c33de:	4602      	mov	r2, r0
   c33e0:	4b25      	ldr	r3, [pc, #148]	; (c3478 <__d2b+0xb0>)
   c33e2:	4826      	ldr	r0, [pc, #152]	; (c347c <__d2b+0xb4>)
   c33e4:	f240 310a 	movw	r1, #778	; 0x30a
   c33e8:	f7f9 ffa4 	bl	bd334 <__assert_func>
   c33ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c33f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c33f4:	bb35      	cbnz	r5, c3444 <__d2b+0x7c>
   c33f6:	2e00      	cmp	r6, #0
   c33f8:	9301      	str	r3, [sp, #4]
   c33fa:	d028      	beq.n	c344e <__d2b+0x86>
   c33fc:	4668      	mov	r0, sp
   c33fe:	9600      	str	r6, [sp, #0]
   c3400:	f7ff fd06 	bl	c2e10 <__lo0bits>
   c3404:	9900      	ldr	r1, [sp, #0]
   c3406:	b300      	cbz	r0, c344a <__d2b+0x82>
   c3408:	9a01      	ldr	r2, [sp, #4]
   c340a:	f1c0 0320 	rsb	r3, r0, #32
   c340e:	fa02 f303 	lsl.w	r3, r2, r3
   c3412:	430b      	orrs	r3, r1
   c3414:	40c2      	lsrs	r2, r0
   c3416:	6163      	str	r3, [r4, #20]
   c3418:	9201      	str	r2, [sp, #4]
   c341a:	9b01      	ldr	r3, [sp, #4]
   c341c:	61a3      	str	r3, [r4, #24]
   c341e:	2b00      	cmp	r3, #0
   c3420:	bf14      	ite	ne
   c3422:	2202      	movne	r2, #2
   c3424:	2201      	moveq	r2, #1
   c3426:	6122      	str	r2, [r4, #16]
   c3428:	b1d5      	cbz	r5, c3460 <__d2b+0x98>
   c342a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c342e:	4405      	add	r5, r0
   c3430:	f8c9 5000 	str.w	r5, [r9]
   c3434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c3438:	f8c8 0000 	str.w	r0, [r8]
   c343c:	4620      	mov	r0, r4
   c343e:	b003      	add	sp, #12
   c3440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c3444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3448:	e7d5      	b.n	c33f6 <__d2b+0x2e>
   c344a:	6161      	str	r1, [r4, #20]
   c344c:	e7e5      	b.n	c341a <__d2b+0x52>
   c344e:	a801      	add	r0, sp, #4
   c3450:	f7ff fcde 	bl	c2e10 <__lo0bits>
   c3454:	9b01      	ldr	r3, [sp, #4]
   c3456:	6163      	str	r3, [r4, #20]
   c3458:	2201      	movs	r2, #1
   c345a:	6122      	str	r2, [r4, #16]
   c345c:	3020      	adds	r0, #32
   c345e:	e7e3      	b.n	c3428 <__d2b+0x60>
   c3460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c3464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c3468:	f8c9 0000 	str.w	r0, [r9]
   c346c:	6918      	ldr	r0, [r3, #16]
   c346e:	f7ff fcaf 	bl	c2dd0 <__hi0bits>
   c3472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c3476:	e7df      	b.n	c3438 <__d2b+0x70>
   c3478:	000c58f9 	.word	0x000c58f9
   c347c:	000c5980 	.word	0x000c5980

000c3480 <__ratio>:
   c3480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3484:	4688      	mov	r8, r1
   c3486:	4669      	mov	r1, sp
   c3488:	4681      	mov	r9, r0
   c348a:	f7ff ff4d 	bl	c3328 <__b2d>
   c348e:	a901      	add	r1, sp, #4
   c3490:	4640      	mov	r0, r8
   c3492:	ec55 4b10 	vmov	r4, r5, d0
   c3496:	f7ff ff47 	bl	c3328 <__b2d>
   c349a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c349e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c34a2:	eba3 0c02 	sub.w	ip, r3, r2
   c34a6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c34aa:	1a9b      	subs	r3, r3, r2
   c34ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c34b0:	ec51 0b10 	vmov	r0, r1, d0
   c34b4:	2b00      	cmp	r3, #0
   c34b6:	bfd6      	itet	le
   c34b8:	460a      	movle	r2, r1
   c34ba:	462a      	movgt	r2, r5
   c34bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c34c0:	468b      	mov	fp, r1
   c34c2:	462f      	mov	r7, r5
   c34c4:	bfd4      	ite	le
   c34c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c34ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c34ce:	4620      	mov	r0, r4
   c34d0:	ee10 2a10 	vmov	r2, s0
   c34d4:	465b      	mov	r3, fp
   c34d6:	4639      	mov	r1, r7
   c34d8:	f7fd fc04 	bl	c0ce4 <__aeabi_ddiv>
   c34dc:	ec41 0b10 	vmov	d0, r0, r1
   c34e0:	b003      	add	sp, #12
   c34e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c34e6 <__copybits>:
   c34e6:	3901      	subs	r1, #1
   c34e8:	b570      	push	{r4, r5, r6, lr}
   c34ea:	1149      	asrs	r1, r1, #5
   c34ec:	6914      	ldr	r4, [r2, #16]
   c34ee:	3101      	adds	r1, #1
   c34f0:	f102 0314 	add.w	r3, r2, #20
   c34f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c34f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c34fc:	1f05      	subs	r5, r0, #4
   c34fe:	42a3      	cmp	r3, r4
   c3500:	d30c      	bcc.n	c351c <__copybits+0x36>
   c3502:	1aa3      	subs	r3, r4, r2
   c3504:	3b11      	subs	r3, #17
   c3506:	f023 0303 	bic.w	r3, r3, #3
   c350a:	3211      	adds	r2, #17
   c350c:	42a2      	cmp	r2, r4
   c350e:	bf88      	it	hi
   c3510:	2300      	movhi	r3, #0
   c3512:	4418      	add	r0, r3
   c3514:	2300      	movs	r3, #0
   c3516:	4288      	cmp	r0, r1
   c3518:	d305      	bcc.n	c3526 <__copybits+0x40>
   c351a:	bd70      	pop	{r4, r5, r6, pc}
   c351c:	f853 6b04 	ldr.w	r6, [r3], #4
   c3520:	f845 6f04 	str.w	r6, [r5, #4]!
   c3524:	e7eb      	b.n	c34fe <__copybits+0x18>
   c3526:	f840 3b04 	str.w	r3, [r0], #4
   c352a:	e7f4      	b.n	c3516 <__copybits+0x30>

000c352c <__any_on>:
   c352c:	f100 0214 	add.w	r2, r0, #20
   c3530:	6900      	ldr	r0, [r0, #16]
   c3532:	114b      	asrs	r3, r1, #5
   c3534:	4298      	cmp	r0, r3
   c3536:	b510      	push	{r4, lr}
   c3538:	db11      	blt.n	c355e <__any_on+0x32>
   c353a:	dd0a      	ble.n	c3552 <__any_on+0x26>
   c353c:	f011 011f 	ands.w	r1, r1, #31
   c3540:	d007      	beq.n	c3552 <__any_on+0x26>
   c3542:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c3546:	fa24 f001 	lsr.w	r0, r4, r1
   c354a:	fa00 f101 	lsl.w	r1, r0, r1
   c354e:	428c      	cmp	r4, r1
   c3550:	d10b      	bne.n	c356a <__any_on+0x3e>
   c3552:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3556:	4293      	cmp	r3, r2
   c3558:	d803      	bhi.n	c3562 <__any_on+0x36>
   c355a:	2000      	movs	r0, #0
   c355c:	bd10      	pop	{r4, pc}
   c355e:	4603      	mov	r3, r0
   c3560:	e7f7      	b.n	c3552 <__any_on+0x26>
   c3562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c3566:	2900      	cmp	r1, #0
   c3568:	d0f5      	beq.n	c3556 <__any_on+0x2a>
   c356a:	2001      	movs	r0, #1
   c356c:	e7f6      	b.n	c355c <__any_on+0x30>
	...

000c3570 <_open_r>:
   c3570:	b538      	push	{r3, r4, r5, lr}
   c3572:	4d07      	ldr	r5, [pc, #28]	; (c3590 <_open_r+0x20>)
   c3574:	4604      	mov	r4, r0
   c3576:	4608      	mov	r0, r1
   c3578:	4611      	mov	r1, r2
   c357a:	2200      	movs	r2, #0
   c357c:	602a      	str	r2, [r5, #0]
   c357e:	461a      	mov	r2, r3
   c3580:	f7f9 fc1c 	bl	bcdbc <_open>
   c3584:	1c43      	adds	r3, r0, #1
   c3586:	d102      	bne.n	c358e <_open_r+0x1e>
   c3588:	682b      	ldr	r3, [r5, #0]
   c358a:	b103      	cbz	r3, c358e <_open_r+0x1e>
   c358c:	6023      	str	r3, [r4, #0]
   c358e:	bd38      	pop	{r3, r4, r5, pc}
   c3590:	2003e7f0 	.word	0x2003e7f0

000c3594 <_read_r>:
   c3594:	b538      	push	{r3, r4, r5, lr}
   c3596:	4d07      	ldr	r5, [pc, #28]	; (c35b4 <_read_r+0x20>)
   c3598:	4604      	mov	r4, r0
   c359a:	4608      	mov	r0, r1
   c359c:	4611      	mov	r1, r2
   c359e:	2200      	movs	r2, #0
   c35a0:	602a      	str	r2, [r5, #0]
   c35a2:	461a      	mov	r2, r3
   c35a4:	f7f9 fc1a 	bl	bcddc <_read>
   c35a8:	1c43      	adds	r3, r0, #1
   c35aa:	d102      	bne.n	c35b2 <_read_r+0x1e>
   c35ac:	682b      	ldr	r3, [r5, #0]
   c35ae:	b103      	cbz	r3, c35b2 <_read_r+0x1e>
   c35b0:	6023      	str	r3, [r4, #0]
   c35b2:	bd38      	pop	{r3, r4, r5, pc}
   c35b4:	2003e7f0 	.word	0x2003e7f0

000c35b8 <nanf>:
   c35b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; c35c0 <nanf+0x8>
   c35bc:	4770      	bx	lr
   c35be:	bf00      	nop
   c35c0:	7fc00000 	.word	0x7fc00000

000c35c4 <__ascii_wctomb>:
   c35c4:	b149      	cbz	r1, c35da <__ascii_wctomb+0x16>
   c35c6:	2aff      	cmp	r2, #255	; 0xff
   c35c8:	bf85      	ittet	hi
   c35ca:	238a      	movhi	r3, #138	; 0x8a
   c35cc:	6003      	strhi	r3, [r0, #0]
   c35ce:	700a      	strbls	r2, [r1, #0]
   c35d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c35d4:	bf98      	it	ls
   c35d6:	2001      	movls	r0, #1
   c35d8:	4770      	bx	lr
   c35da:	4608      	mov	r0, r1
   c35dc:	4770      	bx	lr
	...

000c35e0 <__aeabi_d2lz>:
   c35e0:	b538      	push	{r3, r4, r5, lr}
   c35e2:	2200      	movs	r2, #0
   c35e4:	2300      	movs	r3, #0
   c35e6:	4604      	mov	r4, r0
   c35e8:	460d      	mov	r5, r1
   c35ea:	f7fd fcc3 	bl	c0f74 <__aeabi_dcmplt>
   c35ee:	b928      	cbnz	r0, c35fc <__aeabi_d2lz+0x1c>
   c35f0:	4620      	mov	r0, r4
   c35f2:	4629      	mov	r1, r5
   c35f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c35f8:	f7fd bd92 	b.w	c1120 <__aeabi_d2ulz>
   c35fc:	4620      	mov	r0, r4
   c35fe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c3602:	f7fd fd8d 	bl	c1120 <__aeabi_d2ulz>
   c3606:	4240      	negs	r0, r0
   c3608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c360c:	bd38      	pop	{r3, r4, r5, pc}
   c360e:	bf00      	nop

000c3610 <dynalib_user>:
   c3610:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c3620:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c3630:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c3640:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c3650:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c3660:	6720 7461 7765 7961 7720 7469 2068 2061      gateway with a 
   c3670:	6564 6976 6563 4449 6f20 2066 7325 4c00     deviceID of %s.L
   c3680:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   c3690:	696c 657a 2064 7361 6e20 646f 2065 6925     lized as node %i
   c36a0:	6120 646e 6120 6420 7665 6369 4965 2044      and a deviceID 
   c36b0:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   c36c0:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   c36d0:	6e61 7520 636e 6e6f 6966 7567 6572 2064     an unconfigured 
   c36e0:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   c36f0:	6976 6563 4449 6f20 2066 7325 5000 7261     viceID of %s.Par
   c3700:	6573 2064 7553 6363 7365 6673 6c75 796c     sed Successfully
   c3710:	5000 7261 6973 676e 6520 7272 726f 7220     .Parsing error r
   c3720:	7365 7465 6974 676e 6e20 646f 4965 2044     esetting nodeID 
   c3730:	6164 6174 6162 6573 6e00 646f 7365 6e00     database.nodes.n
   c3740:	6c75 006c 4972 0044 4964 0044 6f4e 6564     ull.rID.dID.Node
   c3750:	6e20 6d75 6562 2072 6576 6972 6966 6465      number verified
   c3760:	4e00 646f 2065 6f6e 2074 6f63 666e 6769     .Node not config
   c3770:	7275 6465 4600 6f72 206d 6567 5474 7079     ured.From getTyp
   c3780:	2065 7566 636e 6974 6e6f 4e20 646f 2065     e function Node 
   c3790:	756e 626d 7265 6e20 746f 6620 756f 646e     number not found
   c37a0:	7320 206f 6572 7574 6e72 6e69 2067 6425      so returning %d
   c37b0:	7400 7079 0065 6552 7574 6e72 6e69 2067     .type.Returning 
   c37c0:	6573 736e 726f 7420 7079 2065 6425 4600     sensor type %d.F
   c37d0:	6f72 206d 6567 4174 656c 7472 6620 6e75     rom getAlert fun
   c37e0:	7463 6f69 2c6e 4e20 646f 2065 756e 626d     ction, Node numb
   c37f0:	7265 6e20 746f 6620 756f 646e 7000 6e65     er not found.pen
   c3800:	0064 6e75 6568 6c61 6874 0079 616c 7473     d.unhealthy.last
   c3810:	4e00 646f 2065 6f63 6e6e 6365 6974 6e6f     .Node connection
   c3820:	2073 7261 2065 7325 0020 6f4e 6564 6320     s are %s .Node c
   c3830:	6e6f 656e 7463 6f69 736e 7520 686e 6165     onnections unhea
   c3840:	746c 7968 202c 6572 6573 6974 676e 4c20     lthy, reseting L
   c3850:	526f 2041 6172 6964 006f 6163 0072 6570     oRA radio.car.pe
   c3860:	7372 6e6f 4100 6b63 6f6e 6c77 6465 6567     rson.Acknowledge
   c3870:	4a20 696f 206e 6552 7571 7365 0074 6553      Join Request.Se
   c3880:	646e 6e69 2067 6572 7073 6e6f 6573 7420     nding response t
   c3890:	206f 6425 7720 7469 2068 7266 6565 6d20     o %d with free m
   c38a0:	6d65 726f 2079 203d 6c25 0069 6f4e 6564     emory = %li.Node
   c38b0:	2520 2064 6f6a 6e69 6465 7720 7469 2068      %d joined with 
   c38c0:	6573 736e 726f 7954 6570 2520 2073 6f63     sensorType %s co
   c38d0:	6e75 6574 2072 6977 6874 6120 656c 7472     unter with alert
   c38e0:	2520 2064 6e61 2064 6973 6e67 6c61 7320      %d and signal s
   c38f0:	7274 6e65 7467 2068 6425 7300 6174 7574     trength %d.statu
   c3900:	0073 6f4e 6564 2520 2064 6f6a 6e69 7220     s.Node %d join r
   c3910:	7365 6f70 736e 2065 6f6e 2074 6361 6e6b     esponse not ackn
   c3920:	776f 656c 6764 6465 6e00 646f 0065 7573     owledged.node.su
   c3930:	6363 4e00 646f 2065 6425 202c 6564 6976     cc.Node %d, devi
   c3940:	6563 4449 203a 7325 202c 616c 7473 6f43     ceID: %s, lastCo
   c3950:	6e6e 6365 6574 3a64 2520 2c73 7420 7079     nnected: %s, typ
   c3960:	2065 6425 202c 7573 6363 7365 2073 3425     e %d, success %4
   c3970:	322e 2066 6977 6874 7020 6e65 6964 676e     .2f with pending
   c3980:	6120 656c 7472 2520 0064 6f6e 6564 6144      alert %d.nodeDa
   c3990:	6174 4400 7665 6369 4965 2044 6e61 2064     ta.DeviceID and 
   c39a0:	6863 6365 736b 6d75 6d20 7369 616d 6374     checksum mismatc
   c39b0:	2068 202d 6573 7474 6e69 2067 6f6e 6564     h - setting node
   c39c0:	7420 206f 3131 4300 6568 6b63 7573 206d      to 11.Checksum 
   c39d0:	6176 696c 6164 6574 0064 6966 646e 6f4e     validated.findNo
   c39e0:	6564 754e 626d 7265 7220 6e61 6f20 7475     deNumber ran out
   c39f0:	6f20 2066 6e65 7274 6569 2073 7461 6920      of entries at i
   c3a00:	3d20 2520 0064 654e 2077 6f6e 6564 7720      = %d.New node w
   c3a10:	6c69 206c 6562 6120 7373 6769 656e 2064     ill be assigned 
   c3a20:	756e 626d 7265 2520 2c64 6420 7665 6369     number %d, devic
   c3a30:	4965 2044 666f 2520 0073 6843 6e61 6967     eID of %s.Changi
   c3a40:	676e 7320 6e65 6f73 2072 7974 6570 6620     ng sensor type f
   c3a50:	6f72 206d 6425 7420 206f 6425 4e00 646f     rom %d to %d.Nod
   c3a60:	2065 6425 6a20 696f 206e 6572 7571 7365     e %d join reques
   c3a70:	2074 7266 6d6f 2520 2073 6573 7474 6e69     t from %s settin
   c3a80:	2067 6c63 636f 006b 6f4e 6564 2520 2064     g clock.Node %d 
   c3a90:	6f6a 6e69 7220 7165 6575 7473 6620 6f72     join request fro
   c3aa0:	206d 7325 7720 6c69 206c 6863 6e61 6567     m %s will change
   c3ab0:	6e20 646f 2065 756e 626d 7265 7420 206f      node number to 
   c3ac0:	6425 4300 6168 676e 6e69 2067 6570 646e     %d.Changing pend
   c3ad0:	6e69 2067 6c61 7265 2074 7266 6d6f 2520     ing alert from %
   c3ae0:	2064 6f74 2520 0064 6f4e 6564 2520 2064     d to %d.Node %d 
   c3af0:	7369 6920 766e 6c61 6469 202c 6573 7474     is invalid, sett
   c3b00:	6e69 2067 6c61 7265 2074 6f63 6564 7420     ing alert code t
   c3b10:	206f 0031 6f4e 6564 2520 2064 6168 2073     o 1.Node %d has 
   c3b20:	2061 6570 646e 6e69 2067 6c61 7265 2074     a pending alert 
   c3b30:	6425 4900 206e 6164 6174 6120 6b63 6f6e     %d.In data ackno
   c3b40:	6c77 6465 6567 202c 6863 6e61 6967 676e     wledge, changing
   c3b50:	7420 7079 2065 6f74 6620 6f72 206d 6425      type to from %d
   c3b60:	7420 206f 6425 4e00 646f 2065 6425 6420      to %d.Node %d d
   c3b70:	7461 2061 6572 6f70 7472 2520 2064 6361     ata report %d ac
   c3b80:	6e6b 776f 656c 6764 6465 7720 7469 2068     knowledged with 
   c3b90:	6c61 7265 2074 6425 202c 6e61 2064 6973     alert %d, and si
   c3ba0:	6e67 6c61 7320 7274 6e65 7467 2068 6425     gnal strength %d
   c3bb0:	4e00 646f 2065 6425 6420 7461 2061 6572     .Node %d data re
   c3bc0:	6f70 7472 7220 7365 6f70 736e 2065 6f6e     port response no
   c3bd0:	2074 6361 6e6b 776f 656c 6764 6465 4e00     t acknowledged.N
   c3be0:	646f 2065 6425 6d20 7365 6173 6567 6d20     ode %d message m
   c3bf0:	6761 6369 6e20 6d75 6562 2072 666f 2520     agic number of %
   c3c00:	2064 6964 2064 6f6e 2074 616d 6374 2068     d did not match 
   c3c10:	6874 2065 614d 6967 2063 754e 626d 7265     the Magic Number
   c3c20:	6920 206e 656d 6f6d 7972 2520 2064 202d      in memory %d - 
   c3c30:	6749 6f6e 6972 676e 4e00 646f 2065 6425     Ignoring.Node %d
   c3c40:	7720 7469 2068 4449 2520 2064 2061 7325      with ID %d a %s
   c3c50:	6d20 7365 6173 6567 7720 7469 2068 7372      message with rs
   c3c60:	6973 253d 0064 6f4e 6564 6e20 746f 7020     si=%d.Node not p
   c3c70:	6f72 6570 6c72 2079 6f63 666e 6769 7275     roperly configur
   c3c80:	6465 202c 6572 6573 7474 6e69 2067 6f6e     ed, resetting no
   c3c90:	6564 6e20 6d75 6562 0072 6e49 6176 696c     de number.Invali
   c3ca0:	2064 656d 7373 6761 2065 6c66 6761 202c     d message flag, 
   c3cb0:	6572 7574 6e72 6e69 0067 6557 6120 6572     returning.We are
   c3cc0:	7520 6470 7461 6e69 2067 6874 2065 7570      updating the pu
   c3cd0:	6c62 7369 2068 7266 7165 6575 636e 2079     blish frequency 
   c3ce0:	6f74 2520 2069 696d 756e 6574 0073 6e49     to %i minutes.In
   c3cf0:	6176 696c 2064 656d 7373 6761 2065 6c66     valid message fl
   c3d00:	6761 0000                                   ag..

000c3d04 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c3d0c:	40dd 000b 40f1 000b                         .@...@..

000c3d14 <_ZTV14LoRA_Functions>:
	...
   c3d1c:	40cd 000b 40cf 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c3d2c:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c3d3c:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c3d4c:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c3d5c:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c3d6c:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c3d7c:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c3d8c:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c3d9c:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c3dac:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c3dbc:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c3dcc:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c3ddc:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c3dec:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c3dfc:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c3e0c:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c3e1c:	253a 2c64 2220 736d 2267 253a 2c64 2220     :%d, "msg":%d, "
   c3e2c:	7573 6363 7365 2273 253a 2e34 6632 202c     success":%4.2f, 
   c3e3c:	7422 6d69 7365 6174 706d 3a22 6c25 3075     "timestamp":%lu0
   c3e4c:	3030 007d 6255 6469 746f 2d73 6f4c 4152     00}.Ubidots-LoRA
   c3e5c:	4e2d 646f 2d65 3176 7b00 6422 7665 6369     -Node-v1.{"devic
   c3e6c:	6965 2264 223a 7325 2c22 2220 6f68 7275     eid":"%s", "hour
   c3e7c:	796c 3a22 7525 202c 6422 6961 796c 3a22     ly":%u, "daily":
   c3e8c:	7525 202c 7322 6e65 6f73 7472 7079 2265     %u, "sensortype"
   c3e9c:	253a 2c64 2220 6162 7474 7265 2279 253a     :%d, "battery":%
   c3eac:	2e34 6632 222c 656b 3179 3a22 2522 2273     4.2f,"key1":"%s"
   c3ebc:	222c 6574 706d 3a22 6425 202c 7222 7365     ,"temp":%d, "res
   c3ecc:	7465 2273 253a 2c64 2220 736d 2267 253a     ets":%d, "msg":%
   c3edc:	2c64 2220 6974 656d 7473 6d61 2270 253a     d, "timestamp":%
   c3eec:	756c 3030 7d30 5500 6962 6f64 7374 4c2d     lu000}.Ubidots-L
   c3efc:	526f 2d41 6147 6574 6177 2d79 3176 6900     oRA-Gateway-v1.i
   c3f0c:	0073 7369 6e20 746f 4500 5453 4535 5444     s.is not.EST5EDT
   c3f1c:	4d2c 2e33 2e32 2f30 3a32 3030 303a 2c30     ,M3.2.0/2:00:00,
   c3f2c:	314d 2e31 2e31 2f30 3a32 3030 303a 0030     M11.1.0/2:00:00.
   c3f3c:	4925 253a 3a4d 5325 7025 4c00 636f 6c61     %I:%M:%S%p.Local
   c3f4c:	6954 656d 6920 696e 6974 6c61 7a69 6465     Time initialized
   c3f5c:	202c 6974 656d 6920 2073 7325 6120 646e     , time is %s and
   c3f6c:	5220 4354 2520 2073 6573 0074 6f4c 6163      RTC %s set.Loca
   c3f7c:	546c 6d69 2065 6f6e 2074 6e69 7469 6169     lTime not initia
   c3f8c:	696c 657a 2064 6f73 7720 6c69 206c 656e     lized so will ne
   c3f9c:	6465 7420 206f 6f43 6e6e 6365 2074 6f74     ed to Connect to
   c3fac:	5020 7261 6974 6c63 0065 7355 7265 6220      Particle.User b
   c3fbc:	7475 6f74 206e 7270 7365 6573 2c64 6320     utton pressed, c
   c3fcc:	6e6f 656e 7463 6465 6d20 646f 0065 6f4e     onnected mode.No
   c3fdc:	7520 6573 2072 7562 7474 6e6f 7020 7375      user button pus
   c3fec:	2068 6564 6574 6863 6574 0064 706f 6e65     h detechted.open
   c3ffc:	6300 6f6c 6573 0064 5425 5300 656c 7065     .closed.%T.Sleep
   c400c:	6620 726f 2520 2069 6573 6f63 646e 2073      for %i seconds 
   c401c:	6974 6c6c 6e20 7865 2074 7665 6e65 2074     till next event 
   c402c:	7461 2520 2073 6977 6874 2520 696c 6620     at %s with %li f
   c403c:	6572 2065 656d 6f6d 7972 4100 6f77 656b     ree memory.Awoke
   c404c:	6120 2074 7325 7720 7469 2068 6c25 2069      at %s with %li 
   c405c:	7266 6565 6d20 6d65 726f 0079 6147 6574     free memory.Gate
   c406c:	6177 2079 7369 6c20 7369 6574 696e 676e     way is listening
   c407c:	6620 726f 4c20 526f 2041 656d 7373 6761      for LoRA messag
   c408c:	7365 6120 646e 7420 6568 7020 7261 206b     es and the park 
   c409c:	7369 2520 2073 2528 2064 202f 6425 2f20     is %s (%d / %d /
   c40ac:	2520 2964 4900 206e 616d 6e69 6c20 6f6f      %d).In main loo
   c40bc:	2070 202d 6c61 7265 2074 6425 6120 646e     p - alert %d and
   c40cc:	6f20 6570 206e 6f68 7275 2073 6425 4e00      open hours %d.N
   c40dc:	7765 4420 7961 2d20 5220 7365 7465 6974     ew Day - Resetti
   c40ec:	676e 6520 6576 7972 6874 6e69 0067 6544     ng everything.De
   c40fc:	7065 7020 776f 7265 6420 776f 206e 6564     ep power down de
   c410c:	6976 6563 5200 7365 7465 6974 676e 6420     vice.Resetting d
   c411c:	6575 7420 206f 6f6c 2077 656d 6f6d 7972     ue to low memory
   c412c:	6e00 746f 7620 6c61 6469 6e00 646f 4965     .not valid.nodeI
   c413c:	2044 6164 6174 6920 2073 7325 7300 7a69     D data is %s.siz
   c414c:	6f65 2866 7953 4473 7461 2961 203a 7525     eof(SysData): %u
   c415c:	7300 7379 7453 7461 7375 6f20 6a62 6365     .sysStatus objec
   c416c:	2074 6f6e 2074 6176 696c 2064 202d 6572     t not valid - re
   c417c:	6e69 7469 6169 696c 697a 676e 7300 7a69     initializing.siz
   c418c:	6f65 2866 7543 7272 6e65 4474 7461 2961     eof(CurrentData)
   c419c:	203a 7525 6300 7275 6572 746e 6f20 6a62     : %u.current obj
   c41ac:	6365 2074 6f6e 2074 6176 696c 2064 202d     ect not valid - 
   c41bc:	6572 6e69 7469 6169 696c 697a 676e 7b00     reinitializing.{
   c41cc:	6e22 646f 7365 3a22 5d5b 007d 6552 6573     "nodes":[]}.Rese
   c41dc:	7474 6769 4e20 646f 4965 2044 6f63 666e     ttig NodeID conf
   c41ec:	6769 7420 3a6f 2520 0073 7245 7361 6e69     ig to: %s.Erasin
   c41fc:	2067 5246 4d41 7220 6765 6f69 006e 6e49     g FRAM region.In
   c420c:	7469 6169 696c 697a 676e 6420 7461 0061     itializing data.
   c421c:	6973 657a 666f 4e28 646f 4465 7461 2961     sizeof(NodeData)
   c422c:	203a 7525 6e00 646f 4965 2044 626f 656a     : %u.nodeID obje
   c423c:	7463 6e20 746f 7620 6c61 6469 2d20 7220     ct not valid - r
   c424c:	6965 696e 6974 6c61 7a69 6e69 0067 6164     einitializing.da
   c425c:	6174 6e20 746f 7620 6c61 6469 6f20 6570     ta not valid ope
   c426c:	546e 6d69 3d65 6425 6120 646e 6320 6f6c     nTime=%d and clo
   c427c:	6573 6954 656d 253d 0064 6164 6174 6e20     seTime=%d.data n
   c428c:	746f 7620 6c61 6469 6620 6572 7571 6e65     ot valid frequen
   c429c:	7963 6d20 6e69 7475 7365 3d20 6425 6400     cy minutes =%d.d
   c42ac:	7461 2061 6f6e 2074 6176 696c 2064 6f6e     ata not valid no
   c42bc:	6564 6e20 6d75 6562 2072 253d 0064 7953     de number =%d.Sy
   c42cc:	4473 7461 2061 6176 756c 7365 7620 7265     sData values ver
   c42dc:	6669 6569 0064 7973 5373 6174 7574 2073     ified.sysStatus 
   c42ec:	6164 6174 6920 2073 7325 6300 7275 6572     data is %s.curre
   c42fc:	746e 6420 7461 2061 6f6e 2074 6176 696c     nt data not vali
   c430c:	2064 6f68 7275 796c 6f43 6e75 3d74 6425     d hourlyCount=%d
   c431c:	6300 7275 6572 746e 6420 7461 2061 6f68     .current data ho
   c432c:	7275 796c 6f43 6e75 2074 6176 696c 2064     urlyCount valid 
   c433c:	7461 2520 0064 7563 7272 6e65 2074 6164     at %d.current da
   c434c:	6174 6920 2073 7325 4100 6e20 7765 6420     ta is %s.A new d
   c435c:	7961 2d20 7220 7365 7465 6974 676e 6520     ay - resetting e
   c436c:	6576 7972 6874 6e69 0067 7543 7272 6e65     verything.Curren
   c437c:	2074 6144 6174 4920 696e 6974 6c61 7a69     t Data Initializ
   c438c:	6465 6400 7461 2061 6e69 7469 6169 696c     ed.data initiali
   c439c:	657a 0064                                   zed.

000c43a0 <_ZTV8MB85RC64>:
	...
   c43a8:	6209 000b 621d 000b 9e99 000b 9f2f 000b     .b...b....../...
   c43b8:	9fb1 000b                                   ....

000c43bc <_ZTV10nodeIDData>:
	...
   c43c4:	66a5 000b 629b 000b 6273 000b c71b 000b     .f...b..sb......
   c43d4:	c743 000b 6231 000b 6655 000b 633d 000b     C...1b..Uf..=c..
   c43e4:	6351 000b                                   Qc..

000c43e8 <_ZTV13sysStatusData>:
	...
   c43f0:	63c5 000b 629b 000b 6273 000b c71b 000b     .c...b..sb......
   c4400:	c743 000b 68fd 000b 6cc5 000b 62ed 000b     C....h...l...b..
   c4410:	6301 000b                                   .c..

000c4414 <_ZTV17currentStatusData>:
	...
   c441c:	648d 000b 629b 000b 6273 000b c71b 000b     .d...b..sb......
   c442c:	c743 000b 69e5 000b 6c31 000b 6315 000b     C....i..1l...c..
   c443c:	6329 000b 6e49 7469 6169 696c 697a 676e     )c..Initializing
   c444c:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c445c:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c446c:	0073 6f43 6d6d 6e61 7364 5600 7265 7a69     s.Commands.Veriz
   c447c:	6e6f 5000 7261 6973 676e 6620 6961 656c     on.Parsing faile
   c448c:	2064 202d 6863 6365 206b 7973 746e 7861     d - check syntax
   c449c:	6300 646d 7600 7261 6600 006e 6572 6573     .cmd.var.fn.rese
   c44ac:	0074 6552 6573 7474 6e69 2067 6874 2065     t.Resetting the 
   c44bc:	6167 6574 6177 2779 2073 6f6e 6564 4420     gateway's node D
   c44cc:	7461 0061 6c61 006c 6552 6573 7474 6e69     ata.all.Resettin
   c44dc:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c44ec:	7973 7473 6d65 6120 646e 6320 7275 6572     system and curre
   c44fc:	746e 6420 7461 0061 6552 6573 7474 6e69     nt data.Resettin
   c450c:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c451c:	7563 7272 6e65 2074 6164 6174 5200 7365     current data.Res
   c452c:	7465 6974 676e 6e20 646f 2065 6425 7327     etting node %d's
   c453c:	7320 7379 6574 206d 6e61 2064 7563 7272      system and curr
   c454c:	6e65 2074 6164 6174 5200 7365 7465 6974     ent data.Resetti
   c455c:	676e 6e20 646f 2065 6425 7327 6320 7275     ng node %d's cur
   c456c:	6572 746e 6420 7461 0061 7266 7165 5300     rent data.freq.S
   c457c:	7465 6974 676e 7220 7065 726f 6974 676e     etting reporting
   c458c:	6620 6572 7571 6e65 7963 7420 206f 6425      frequency to %d
   c459c:	6d20 6e69 7475 7365 4e00 746f 6120 7620      minutes.Not a v
   c45ac:	6c61 6469 7220 7065 726f 6974 676e 6620     alid reporting f
   c45bc:	6572 7571 6e65 7963 7300 6174 0079 7274     requency.stay.tr
   c45cc:	6575 4700 696f 676e 7420 206f 656b 7065     ue.Going to keep
   c45dc:	4720 7461 7765 7961 6f20 206e 6150 7472      Gateway on Part
   c45ec:	6369 656c 6120 646e 4c20 526f 2041 656e     icle and LoRA ne
   c45fc:	7774 726f 736b 4700 696f 676e 6220 6361     tworks.Going bac
   c460c:	206b 6f74 6e20 726f 616d 206c 6f63 6e6e     k to normal conn
   c461c:	6365 6974 6976 7974 7200 7470 5000 6972     ectivity.rpt.Pri
   c462c:	746e 6e69 2067 6f6e 6564 4449 4420 7461     nting nodeID Dat
   c463c:	0061 6553 7474 6e69 2067 706f 6e65 6e69     a.Setting openin
   c464c:	2067 6f68 7275 7420 206f 6425 303a 0030     g hour to %d:00.
   c465c:	704f 6e65 6820 756f 2072 202d 756d 7473     Open hour - must
   c466c:	6220 2065 2d30 3231 6300 6f6c 6573 5300      be 0-12.close.S
   c467c:	7465 6974 676e 6320 6f6c 6973 676e 6820     etting closing h
   c468c:	756f 2072 6f74 2520 3a64 3030 4300 6f6c     our to %d:00.Clo
   c469c:	6573 6820 756f 2072 202d 756d 7473 6220     se hour - must b
   c46ac:	2065 3331 322d 0034 6553 7474 6e69 2067     e 13-24.Setting 
   c46bc:	6573 736e 726f 7420 7079 2065 6f74 2520     sensor type to %
   c46cc:	2064 6f66 2072 6f6e 6564 2520 0064 6553     d for node %d.Se
   c46dc:	736e 726f 5420 7079 2065 2d20 6d20 7375     nsor Type  - mus
   c46ec:	2074 6562 3020 322d 7300 6d69 5300 7465     t be 0-2.sim.Set
   c46fc:	6974 676e 5320 4d49 7420 206f 7325 5300     ting SIM to %s.S
   c470c:	4d49 5420 7079 2065 2d20 6d20 7375 2074     IM Type  - must 
   c471c:	6562 3020 2820 6150 7472 6369 656c 2029     be 0 (Particle) 
   c472c:	726f 3120 2820 6556 6972 6f7a 296e 4e00     or 1 (Verizon).N
   c473c:	746f 6120 7620 6c61 6469 6320 6d6f 616d     ot a valid comma
   c474c:	646e 4900 206e 6874 2065 6964 6373 6e6f     nd.In the discon
   c475c:	656e 7463 6620 6f72 206d 6150 7472 6369     nect from Partic
   c476c:	656c 6620 6e75 7463 6f69 006e 6146 6c69     le function.Fail
   c477c:	6465 7420 206f 6964 6373 6e6f 656e 7463     ed to disconnect
   c478c:	6620 6f72 206d 6150 7472 6369 656c 4400      from Particle.D
   c479c:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
   c47ac:	5020 7261 6974 6c63 2065 6e69 2520 2069      Particle in %i 
   c47bc:	6573 6f63 646e 0073 6146 6c69 6465 7420     seconds.Failed t
   c47cc:	206f 7574 6e72 6f20 6666 7420 6568 4320     o turn off the C
   c47dc:	6c65 756c 616c 2072 6f6d 6564 006d 7554     ellular modem.Tu
   c47ec:	6e72 6465 6f20 6666 7420 6568 6320 6c65     rned off the cel
   c47fc:	756c 616c 2072 6f6d 6564 206d 6e69 2520     lular modem in %
   c480c:	2069 6573 6f63 646e 0073 0000               i seconds...

000c4818 <_ZTVN5spark10LogHandlerE>:
	...
   c4828:	40a5 000b 6da9 000b                         .@...m..

000c4830 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4838:	6e81 000b 6eb5 000b eee1 000b 6dab 000b     .n...n.......m..

000c4848 <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c4850:	6dc5 000b 6dd9 000b                         .m...m..

000c4858 <_ZTV18Particle_Functions>:
	...
   c4860:	6db3 000b 6db5 000b 6e49 7469 6c61 7a69     .m...m..Initaliz
   c4870:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c4880:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c4890:	6577 2072 6f43 666e 6769 0000               wer Config..

000c489c <BLUE_LED>:
   c489c:	0007                                        ..

000c489e <BUTTON_PIN>:
   c489e:	0004                                        ..

000c48a0 <RFM95_CS>:
   c48a0:	0005                                        ..

000c48a2 <RFM95_INT>:
   c48a2:	0002                                        ..

000c48a4 <RFM95_RST>:
   c48a4:	0006                                        ..

000c48a6 <TMP36_SENSE_PIN>:
   c48a6:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c48b6:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c48c6:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c48d6:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c48e6:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c48f6:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c4906:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c4916:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c4926:	0000 3d52 000c 48a8 000c 48ad 000c 48b2     ..R=...H...H...H
   c4936:	000c 48b6 000c 48bb 000c 48c0 000c 48c4     ...H...H...H...H
   c4946:	000c 48cf 000c 48da 000c 6166 6c69 6465     ...H...H..failed
   c4956:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c4966:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c4976:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c4986:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c4996:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c49a6:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c49b6:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c49c6:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c49d6:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c49e6:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c49f6:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c4a06:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c4a16:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c4a26:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c4a36:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c4a46:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c4a56:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c4a66:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c4a76:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c4a86:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c4a96:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c4aa6:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c4ab6:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c4ac6:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c4ad6:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c4ae6:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c4af6:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c4b06:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c4b16:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c4b26:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c4b36:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c4b46:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c4b56:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c4b66:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c4b76:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c4b86:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c4b98 <_ZTV6AB1805>:
	...
   c4ba0:	7955 000b 7957 000b 7fcd 000b 8053 000b     Uy..Wy......S...
   c4bb0:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c4bc0:	5268 004b                                   hRK.

000c4bc4 <_ZTV19BackgroundPublishRK>:
	...
   c4bcc:	8589 000b 85a5 000b 755c 3025 5834 2500     ........\u%04X.%
   c4bdc:	2a2e 0066 6625 0000                         .*f.%f..

000c4be4 <_ZTV10JsonBuffer>:
	...
   c4bec:	8889 000b 88a5 000b                         ........

000c4bf4 <_ZTV10JsonParser>:
	...
   c4bfc:	8909 000b 892d 000b                         ....-...

000c4c04 <_ZTV10JsonWriter>:
	...
   c4c0c:	88b9 000b 88cd 000b                         ........

000c4c14 <_ZTV12JsonModifier>:
	...
   c4c1c:	88e1 000b 88f5 000b 6425 253a 3a64 6425     ........%d:%d:%d
   c4c2c:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c4c3c:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c4c4c:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c4c58 <_ZTV9LocalTime>:
	...
   c4c60:	9559 000b 9571 000b                         Y...q...

000c4c68 <_ZTV12LocalTimeHMS>:
	...
   c4c70:	9509 000b 950d 000b                         ........

000c4c78 <_ZTV15LocalTimeChange>:
	...
   c4c80:	950b 000b 951b 000b                         ........

000c4c88 <_ZTV22LocalTimePosixTimezone>:
	...
   c4c90:	9529 000b 9545 000b                         )...E...

000c4c98 <_ZTV6MB85RC>:
	...
   c4ca0:	9e59 000b 9e5b 000b 9e99 000b 9f2f 000b     Y...[......./...
   c4cb0:	9fb1 000b 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   c4cc0:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c4cd0:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c4ce0:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c4cf0:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c4d00:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c4d10:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c4d20:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c4d30:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c4d40:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c4d50:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c4d60:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c4d70:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c4d80:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c4d90:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c4da0:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c4db0:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c4dc0:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c4dd0:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c4de0:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c4df0:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c4e00:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c4e10:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c4e20:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c4e30:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c4e40:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c4e50:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c4e60:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c4e70:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c4e80:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c4e90:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c4ea0:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c4eb0:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c4ec0:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c4ed0:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c4ee0:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c4ef0:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c4f00:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c4f10:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c4f20:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c4f2c <_ZTV17PublishQueuePosix>:
	...
   c4f34:	a8e5 000b aba1 000b abc5 000b               ............

000c4f40 <_ZTV15RHGenericDriver>:
	...
   c4f50:	ace5 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c4f60:	40a5 000b ad47 000b ace9 000b ad97 000b     .@..G...........
   c4f70:	ad65 000b adbb 000b acf3 000b acfb 000b     e...............
   c4f80:	acff 000b ad03 000b ad07 000b ad0b 000b     ................
   c4f90:	acf7 000b ad17 000b ad1b 000b ad1f 000b     ................
   c4fa0:	ad23 000b ad27 000b ad2d 000b ad31 000b     #...'...-...1...
   c4fb0:	acf3 000b ad35 000b ad3b 000b ad41 000b     ....5...;...A...

000c4fc0 <_ZTV12RHGenericSPI>:
	...
   c4fc8:	40a5 000b ae19 000b ae1b 000b 40a5 000b     .@...........@..
   c4fd8:	40a5 000b ae23 000b ae27 000b ae2b 000b     .@..#...'...+...
   c4fe8:	ae1d 000b ae1f 000b ae21 000b 6564 6166     ........!...defa
   c4ff8:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c5008:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c5018:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c5028:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c5038 <_ZTVN8particle11SPISettingsE>:
	...
   c5040:	ae71 000b ae45 000b ae47 000b               q...E...G...

000c504c <_ZTV13RHHardwareSPI>:
	...
   c5054:	af25 000b af39 000b af47 000b af55 000b     %...9...G...U...
   c5064:	afc1 000b ae23 000b ae27 000b ae2b 000b     ....#...'...+...
   c5074:	afcf 000b afe3 000b aff1 000b               ............

000c5080 <_ZTV6RHMesh>:
	...
   c5088:	b0bd 000b b365 000b b01d 000b b009 000b     ....e...........

000c5098 <_ZTV8RHRouter>:
	...
   c50a0:	b5d1 000b b615 000b                         ........

000c50a8 <_ZTV11RHSPIDriver>:
	...
   c50b8:	b8b1 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c50c8:	40a5 000b ad47 000b ace9 000b ad97 000b     .@..G...........
   c50d8:	ad65 000b adbb 000b acf3 000b acfb 000b     e...............
   c50e8:	acff 000b ad03 000b ad07 000b ad0b 000b     ................
   c50f8:	acf7 000b ad17 000b ad1b 000b ad1f 000b     ................
   c5108:	ad23 000b ad27 000b ad2d 000b ad31 000b     #...'...-...1...
   c5118:	acf3 000b ad35 000b ad3b 000b ad41 000b     ....5...;...A...
   c5128:	b8dd 000b b8e7 000b                         ........

000c5130 <_ZL18MODEM_CONFIG_TABLE>:
   c5130:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c5140 <_ZTV7RH_RF95>:
	...
   c5148:	ba4f 000b ba87 000b bf61 000b bdf7 000b     O.......a.......
   c5158:	babd 000b be3f 000b ba4b 000b ad47 000b     ....?...K...G...
   c5168:	ace9 000b ad97 000b ad65 000b adbb 000b     ........e.......
   c5178:	ba51 000b acfb 000b acff 000b ad03 000b     Q...............
   c5188:	ad07 000b ad0b 000b acf7 000b ad17 000b     ................
   c5198:	ad1b 000b ad1f 000b ad23 000b ad27 000b     ........#...'...
   c51a8:	ad2d 000b ad31 000b ba97 000b ad35 000b     -...1.......5...
   c51b8:	ad3b 000b ad41 000b b8dd 000b b8e7 000b     ;...A...........
   c51c8:	ba47 000b 3025 6438 2f00 7200 6d65 766f     G...%08d./.remov
   c51d8:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c51e8:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c51f8:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c5208:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c5218:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c5228:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c5238:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c5248:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c5258:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c5268:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c5278:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c5288:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c5298:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c52a8:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c52b8:	732e 7165 6966 656c 0000 0000               .seqfile....

000c52c4 <_ZTV14SequentialFile>:
	...
   c52cc:	c3bd 000b c3e9 000b c069 000b 6173 6976     ........i...savi
   c52dc:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   c52ec:	6176 696c 6164 6974 676e 6420 7461 2061     validating data 
   c52fc:	6973 657a 253d 0064 6f67 3a74 6d20 6761     size=%d.got: mag
   c530c:	6369 253d 3830 2078 6576 7372 6f69 3d6e     ic=%08x version=
   c531c:	3025 7834 7320 7a69 3d65 3025 7834 6820     %04x size=%04x h
   c532c:	7361 3d68 3025 7838 6500 7078 203a 616d     ash=%08x.exp: ma
   c533c:	6967 3d63 3025 7838 7620 7265 6973 6e6f     gic=%08x version
   c534c:	253d 3430 2078 6973 657a 253d 3430 2078     =%04x size=%04x 
   c535c:	6168 6873 253d 3830 0078 0000               hash=%08x...

000c5368 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c5370:	c715 000b c7c1 000b c77d 000b c71b 000b     ........}.......
   c5380:	c743 000b c945 000b ca11 000b               C...E.......

000c538c <_ZTVN5spark13CellularClassE>:
	...
   c5394:	d47f 000b d475 000b d46b 000b d421 000b     ....u...k...!...
   c53a4:	d45f 000b d453 000b f239 000b f241 000b     _...S...9...A...
   c53b4:	d447 000b d43f 000b d435 000b d42b 000b     G...?...5...+...
   c53c4:	f271 000b                                   q...

000c53c8 <_ZTV14CellularSignal>:
	...
   c53d0:	d50d 000b d571 000b d50f 000b d581 000b     ....q...........
   c53e0:	d5b5 000b d5e1 000b d615 000b d535 000b     ............5...
   c53f0:	d513 000b d52f 000b fffc ffff 0000 0000     ..../...........
   c5400:	d569 000b                                   i...

000c5404 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c540c:	d659 000b d65f 000b d69d 000b d66d 000b     Y..._.......m...
   c541c:	d65b 000b                                   [...

000c5420 <_ZTVN5spark13EthernetClassE>:
	...
   c5428:	dc63 000b dc59 000b dc4f 000b dc45 000b     c...Y...O...E...
   c5438:	dc39 000b dc2d 000b f239 000b f241 000b     9...-...9...A...
   c5448:	dc21 000b dc19 000b dc0f 000b dc05 000b     !...............
   c5458:	f271 000b                                   q...

000c545c <_ZTV7TwoWire>:
	...
   c5464:	dd33 000b dd7d 000b dd55 000b dd35 000b     3...}...U...5...
   c5474:	dd5d 000b dd65 000b dd6d 000b dd75 000b     ]...e...m...u...

000c5484 <_ZTV9IPAddress>:
	...
   c548c:	def9 000b dee9 000b deeb 000b 2575 3430     ............u%04
   c549c:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c54ac:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c54bc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c54cc:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c54dc:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c54ec:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c54fc:	6f63 6564 6400 7465 6961 006c               code.detail.

000c5508 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c5510:	e3a5 000b e3cb 000b e389 000b e007 000b     ................

000c5520 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5528:	e789 000b e7a1 000b eee1 000b 6dab 000b     .............m..

000c5538 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c5540:	e7b5 000b e7c9 000b f085 000b e391 000b     ................

000c5550 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c5558:	e3a3 000b e3d9 000b ee45 000b e393 000b     ........E.......

000c5568 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c5570:	e3a1 000b e3e7 000b e6f1 000b e409 000b     ................

000c5580 <_ZTVN5spark12NetworkClassE>:
	...
   c5588:	f1f9 000b f203 000b f20d 000b f217 000b     ................
   c5598:	f221 000b f22d 000b f239 000b f241 000b     !...-...9...A...
   c55a8:	f249 000b f255 000b f25d 000b f267 000b     I...U...]...g...
   c55b8:	f271 000b 616e 006e 6e69 0066 766f 0066     q...nan.inf.ovf.

000c55c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c55c8:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c55d8:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c55e8:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c55f8:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c5608:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c5618:	0065 0000                                   e...

000c561c <_ZTV11USARTSerial>:
	...
   c5624:	0119 000c 0185 000c 015d 000c f4c1 000b     ........].......
   c5634:	012d 000c 0149 000c 013b 000c 0157 000c     -...I...;...W...
   c5644:	011b 000c 011f 000c                         ........

000c564c <_ZTV9USBSerial>:
	...
   c5654:	01d7 000c 023f 000c 0215 000c f4c1 000b     ....?...........
   c5664:	0207 000c 01d9 000c 01e9 000c 0239 000c     ............9...
   c5674:	01f9 000c 01d1 000c                         ........

000c567c <_ZSt7nothrow>:
   c567c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   c568c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000c569d <day_name.1>:
   c569d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c56ad:	6972 6153                                    riSat

000c56b2 <mon_name.0>:
   c56b2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c56c2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c56d2:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c56e2:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c56f2:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c5702:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c5712:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c5722:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c5732:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c5742:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c5752:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5762:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5772:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c5782:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c5792:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c57a2:	7974 0000 0000                              ty....

000c57a8 <fpi.1>:
   c57a8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c57b8:	0000 0000                                   ....

000c57bc <fpinan.0>:
   c57bc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c57cc:	0000 0000                                   ....

000c57d0 <tinytens>:
   c57d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c57e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c57f0:	6f43 64ac 0628 1168                         Co.d(.h.

000c57f8 <_ctype_>:
   c57f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5808:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5818:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5828:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5838:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c5848:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c5858:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c5868:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c5878:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c58f8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5908:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5918:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5928:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5938:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5948:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5958:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c5968:	632e 0000                                   .c..

000c596c <_C_numeric_locale>:
   c596c:	55fc 000c 54f8 000c d6fc 2003 0043 4f50     .U...T..... C.PO
   c597c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c598c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c599c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c59ac:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c59bc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c59cc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c59dc:	0000 0000                                   ....

000c59e0 <__mprec_bigtens>:
   c59e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c59f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5a00:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5a08 <__mprec_tens>:
   c5a08:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5a18:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c5a28:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c5a38:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c5a48:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c5a58:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c5a68:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c5a78:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c5a88:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c5a98:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5aa8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c5ab8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c5ac8:	9db4 79d9 7843 44ea                         ...yCx.D

000c5ad0 <p05.0>:
   c5ad0:	0005 0000 0019 0000 007d 0000               ........}...

000c5adc <link_const_variable_data_end>:
   c5adc:	000b49f5 	.word	0x000b49f5
   c5ae0:	000b597d 	.word	0x000b597d
   c5ae4:	000b6d85 	.word	0x000b6d85
   c5ae8:	000b7475 	.word	0x000b7475
   c5aec:	000b7949 	.word	0x000b7949
   c5af0:	000b846d 	.word	0x000b846d
   c5af4:	000bab91 	.word	0x000bab91
   c5af8:	000baff9 	.word	0x000baff9
   c5afc:	000bc705 	.word	0x000bc705
   c5b00:	000bd411 	.word	0x000bd411
   c5b04:	000bd4dd 	.word	0x000bd4dd
   c5b08:	000bdc6d 	.word	0x000bdc6d
   c5b0c:	000beed1 	.word	0x000beed1
   c5b10:	000bf349 	.word	0x000bf349
   c5b14:	000bf7b1 	.word	0x000bf7b1
   c5b18:	000bfdcd 	.word	0x000bfdcd
   c5b1c:	000c0105 	.word	0x000c0105
